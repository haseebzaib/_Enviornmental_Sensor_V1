
_Enviornmental_Sensor_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .noinit       00000000  20000000  08025a4c  00000000  2**0
                  ALLOC
  2 .text         00022168  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00003734  08022308  08022308  00023308  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08025a3c  08025a3c  00027304  2**0
                  CONTENTS
  5 .ARM          00000008  08025a3c  08025a3c  00026a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08025a44  08025a44  00027304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08025a44  08025a44  00026a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08025a48  08025a48  00026a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000304  20000000  08025a4c  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000034b0  20000304  08025d50  00027304  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200037b4  08025d50  000277b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00027304  2**0
                  CONTENTS, READONLY
 13 .debug_info   000379ae  00000000  00000000  00027334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008a46  00000000  00000000  0005ece2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003030  00000000  00000000  00067728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002518  00000000  00000000  0006a758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026549  00000000  00000000  0006cc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00044eed  00000000  00000000  000931b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b4fb1  00000000  00000000  000d80a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000086  00000000  00000000  0018d057  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000dee8  00000000  00000000  0018d0e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000080  00000000  00000000  0019afc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000304 	.word	0x20000304
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080222f0 	.word	0x080222f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000308 	.word	0x20000308
 80001dc:	080222f0 	.word	0x080222f0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a0 	b.w	8001010 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d14e      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d60:	4694      	mov	ip, r2
 8000d62:	458c      	cmp	ip, r1
 8000d64:	4686      	mov	lr, r0
 8000d66:	fab2 f282 	clz	r2, r2
 8000d6a:	d962      	bls.n	8000e32 <__udivmoddi4+0xde>
 8000d6c:	b14a      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d6e:	f1c2 0320 	rsb	r3, r2, #32
 8000d72:	4091      	lsls	r1, r2
 8000d74:	fa20 f303 	lsr.w	r3, r0, r3
 8000d78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f f68c 	uxth.w	r6, ip
 8000d8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb07 1114 	mls	r1, r7, r4, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb04 f106 	mul.w	r1, r4, r6
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000daa:	f080 8112 	bcs.w	8000fd2 <__udivmoddi4+0x27e>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 810f 	bls.w	8000fd2 <__udivmoddi4+0x27e>
 8000db4:	3c02      	subs	r4, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a59      	subs	r1, r3, r1
 8000dba:	fa1f f38e 	uxth.w	r3, lr
 8000dbe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb00 f606 	mul.w	r6, r0, r6
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x94>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dda:	f080 80fc 	bcs.w	8000fd6 <__udivmoddi4+0x282>
 8000dde:	429e      	cmp	r6, r3
 8000de0:	f240 80f9 	bls.w	8000fd6 <__udivmoddi4+0x282>
 8000de4:	4463      	add	r3, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11d      	cbz	r5, 8000dfa <__udivmoddi4+0xa6>
 8000df2:	40d3      	lsrs	r3, r2
 8000df4:	2200      	movs	r2, #0
 8000df6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d905      	bls.n	8000e0e <__udivmoddi4+0xba>
 8000e02:	b10d      	cbz	r5, 8000e08 <__udivmoddi4+0xb4>
 8000e04:	e9c5 0100 	strd	r0, r1, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e7f5      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e0e:	fab3 f183 	clz	r1, r3
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d146      	bne.n	8000ea4 <__udivmoddi4+0x150>
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	d302      	bcc.n	8000e20 <__udivmoddi4+0xcc>
 8000e1a:	4290      	cmp	r0, r2
 8000e1c:	f0c0 80f0 	bcc.w	8001000 <__udivmoddi4+0x2ac>
 8000e20:	1a86      	subs	r6, r0, r2
 8000e22:	eb64 0303 	sbc.w	r3, r4, r3
 8000e26:	2001      	movs	r0, #1
 8000e28:	2d00      	cmp	r5, #0
 8000e2a:	d0e6      	beq.n	8000dfa <__udivmoddi4+0xa6>
 8000e2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e30:	e7e3      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	f040 8090 	bne.w	8000f58 <__udivmoddi4+0x204>
 8000e38:	eba1 040c 	sub.w	r4, r1, ip
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa1f f78c 	uxth.w	r7, ip
 8000e44:	2101      	movs	r1, #1
 8000e46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb07 f006 	mul.w	r0, r7, r6
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x11c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x11a>
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	f200 80cd 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e6e:	4626      	mov	r6, r4
 8000e70:	1a1c      	subs	r4, r3, r0
 8000e72:	fa1f f38e 	uxth.w	r3, lr
 8000e76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e82:	fb00 f707 	mul.w	r7, r0, r7
 8000e86:	429f      	cmp	r7, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x148>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x146>
 8000e94:	429f      	cmp	r7, r3
 8000e96:	f200 80b0 	bhi.w	8000ffa <__udivmoddi4+0x2a6>
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	1bdb      	subs	r3, r3, r7
 8000e9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea2:	e7a5      	b.n	8000df0 <__udivmoddi4+0x9c>
 8000ea4:	f1c1 0620 	rsb	r6, r1, #32
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb4:	fa04 f301 	lsl.w	r3, r4, r1
 8000eb8:	ea43 030c 	orr.w	r3, r3, ip
 8000ebc:	40f4      	lsrs	r4, r6
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	0c38      	lsrs	r0, r7, #16
 8000ec4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ecc:	fa1f fc87 	uxth.w	ip, r7
 8000ed0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed8:	fb0e f90c 	mul.w	r9, lr, ip
 8000edc:	45a1      	cmp	r9, r4
 8000ede:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee2:	d90a      	bls.n	8000efa <__udivmoddi4+0x1a6>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eea:	f080 8084 	bcs.w	8000ff6 <__udivmoddi4+0x2a2>
 8000eee:	45a1      	cmp	r9, r4
 8000ef0:	f240 8081 	bls.w	8000ff6 <__udivmoddi4+0x2a2>
 8000ef4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	eba4 0409 	sub.w	r4, r4, r9
 8000efe:	fa1f f983 	uxth.w	r9, r3
 8000f02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f06:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f12:	45a4      	cmp	ip, r4
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x1d2>
 8000f16:	193c      	adds	r4, r7, r4
 8000f18:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f1c:	d267      	bcs.n	8000fee <__udivmoddi4+0x29a>
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d965      	bls.n	8000fee <__udivmoddi4+0x29a>
 8000f22:	3b02      	subs	r3, #2
 8000f24:	443c      	add	r4, r7
 8000f26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f2e:	eba4 040c 	sub.w	r4, r4, ip
 8000f32:	429c      	cmp	r4, r3
 8000f34:	46ce      	mov	lr, r9
 8000f36:	469c      	mov	ip, r3
 8000f38:	d351      	bcc.n	8000fde <__udivmoddi4+0x28a>
 8000f3a:	d04e      	beq.n	8000fda <__udivmoddi4+0x286>
 8000f3c:	b155      	cbz	r5, 8000f54 <__udivmoddi4+0x200>
 8000f3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f42:	eb64 040c 	sbc.w	r4, r4, ip
 8000f46:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4a:	40cb      	lsrs	r3, r1
 8000f4c:	431e      	orrs	r6, r3
 8000f4e:	40cc      	lsrs	r4, r1
 8000f50:	e9c5 6400 	strd	r6, r4, [r5]
 8000f54:	2100      	movs	r1, #0
 8000f56:	e750      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f64:	fa24 f303 	lsr.w	r3, r4, r3
 8000f68:	4094      	lsls	r4, r2
 8000f6a:	430c      	orrs	r4, r1
 8000f6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f74:	fa1f f78c 	uxth.w	r7, ip
 8000f78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f80:	0c23      	lsrs	r3, r4, #16
 8000f82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f86:	fb00 f107 	mul.w	r1, r0, r7
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d908      	bls.n	8000fa0 <__udivmoddi4+0x24c>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f96:	d22c      	bcs.n	8000ff2 <__udivmoddi4+0x29e>
 8000f98:	4299      	cmp	r1, r3
 8000f9a:	d92a      	bls.n	8000ff2 <__udivmoddi4+0x29e>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b2a4      	uxth	r4, r4
 8000fa4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fa8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb0:	fb01 f307 	mul.w	r3, r1, r7
 8000fb4:	42a3      	cmp	r3, r4
 8000fb6:	d908      	bls.n	8000fca <__udivmoddi4+0x276>
 8000fb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fbc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fc0:	d213      	bcs.n	8000fea <__udivmoddi4+0x296>
 8000fc2:	42a3      	cmp	r3, r4
 8000fc4:	d911      	bls.n	8000fea <__udivmoddi4+0x296>
 8000fc6:	3902      	subs	r1, #2
 8000fc8:	4464      	add	r4, ip
 8000fca:	1ae4      	subs	r4, r4, r3
 8000fcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd0:	e739      	b.n	8000e46 <__udivmoddi4+0xf2>
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	e6f0      	b.n	8000db8 <__udivmoddi4+0x64>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e706      	b.n	8000de8 <__udivmoddi4+0x94>
 8000fda:	45c8      	cmp	r8, r9
 8000fdc:	d2ae      	bcs.n	8000f3c <__udivmoddi4+0x1e8>
 8000fde:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fe6:	3801      	subs	r0, #1
 8000fe8:	e7a8      	b.n	8000f3c <__udivmoddi4+0x1e8>
 8000fea:	4631      	mov	r1, r6
 8000fec:	e7ed      	b.n	8000fca <__udivmoddi4+0x276>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	e799      	b.n	8000f26 <__udivmoddi4+0x1d2>
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	e7d4      	b.n	8000fa0 <__udivmoddi4+0x24c>
 8000ff6:	46d6      	mov	lr, sl
 8000ff8:	e77f      	b.n	8000efa <__udivmoddi4+0x1a6>
 8000ffa:	4463      	add	r3, ip
 8000ffc:	3802      	subs	r0, #2
 8000ffe:	e74d      	b.n	8000e9c <__udivmoddi4+0x148>
 8001000:	4606      	mov	r6, r0
 8001002:	4623      	mov	r3, r4
 8001004:	4608      	mov	r0, r1
 8001006:	e70f      	b.n	8000e28 <__udivmoddi4+0xd4>
 8001008:	3e02      	subs	r6, #2
 800100a:	4463      	add	r3, ip
 800100c:	e730      	b.n	8000e70 <__udivmoddi4+0x11c>
 800100e:	bf00      	nop

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <setSoftPWM>:
#define battery_Low  3.5f
#define battery_very_low 3.3f

#define lengthSoftPWMbuffer 1000
uint32_t dataA[lengthSoftPWMbuffer];
static void setSoftPWM(uint16_t pin, uint32_t duty, uint32_t *softpwmbuffer) {
 8001014:	b480      	push	{r7}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
 8001020:	81fb      	strh	r3, [r7, #14]
	for (uint32_t i = 0; i < lengthSoftPWMbuffer; ++i) {
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	e03d      	b.n	80010a4 <setSoftPWM+0x90>
		if (i < duty) { //set pin
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	429a      	cmp	r2, r3
 800102e:	d21b      	bcs.n	8001068 <setSoftPWM+0x54>
			softpwmbuffer[i] &= (uint32_t) ~(pin << 16);
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	4413      	add	r3, r2
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	89fb      	ldrh	r3, [r7, #14]
 800103c:	041b      	lsls	r3, r3, #16
 800103e:	43db      	mvns	r3, r3
 8001040:	4618      	mov	r0, r3
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	440b      	add	r3, r1
 800104a:	4002      	ands	r2, r0
 800104c:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i] |= (uint32_t) pin;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	6819      	ldr	r1, [r3, #0]
 8001058:	89fa      	ldrh	r2, [r7, #14]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	4403      	add	r3, r0
 8001062:	430a      	orrs	r2, r1
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	e01a      	b.n	800109e <setSoftPWM+0x8a>
		} else { //reset pin
			softpwmbuffer[i] &= (uint32_t) ~(pin);
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	4413      	add	r3, r2
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	89fb      	ldrh	r3, [r7, #14]
 8001074:	43db      	mvns	r3, r3
 8001076:	4618      	mov	r0, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	6879      	ldr	r1, [r7, #4]
 800107e:	440b      	add	r3, r1
 8001080:	4002      	ands	r2, r0
 8001082:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i] |= (uint32_t) pin << 16;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	4413      	add	r3, r2
 800108c:	6819      	ldr	r1, [r3, #0]
 800108e:	89fb      	ldrh	r3, [r7, #14]
 8001090:	041a      	lsls	r2, r3, #16
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	4403      	add	r3, r0
 800109a:	430a      	orrs	r2, r1
 800109c:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < lengthSoftPWMbuffer; ++i) {
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	3301      	adds	r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010aa:	d3bd      	bcc.n	8001028 <setSoftPWM+0x14>
		}
	}

}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	371c      	adds	r7, #28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <toggle_blue_led>:

uint32_t usb_time_ = 50000;
uint32_t prev_usb_time_ = 0;
uint8_t stop_measurement = 1;

void toggle_blue_led() {
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	if (blue_led_pwm_val != 0) {
 80010c0:	4b0b      	ldr	r3, [pc, #44]	@ (80010f0 <toggle_blue_led+0x34>)
 80010c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <toggle_blue_led+0x16>
		blue_led_pwm_val = 0;
 80010ca:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <toggle_blue_led+0x34>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	801a      	strh	r2, [r3, #0]
 80010d0:	e003      	b.n	80010da <toggle_blue_led+0x1e>
	} else {
		blue_led_pwm_val = 1000;
 80010d2:	4b07      	ldr	r3, [pc, #28]	@ (80010f0 <toggle_blue_led+0x34>)
 80010d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010d8:	801a      	strh	r2, [r3, #0]
	}
	BLUE_LED_PWM(blue_led_pwm_val); //we toggle red led
 80010da:	4b05      	ldr	r3, [pc, #20]	@ (80010f0 <toggle_blue_led+0x34>)
 80010dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e0:	4a04      	ldr	r2, [pc, #16]	@ (80010f4 <toggle_blue_led+0x38>)
 80010e2:	4619      	mov	r1, r3
 80010e4:	2008      	movs	r0, #8
 80010e6:	f7ff ff95 	bl	8001014 <setSoftPWM>
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200012ca 	.word	0x200012ca
 80010f4:	20000324 	.word	0x20000324

080010f8 <pir_interrupt>:

//##############Interrupts###############
void pir_interrupt() {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	debug_pir_motion = 1;
 80010fc:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <pir_interrupt+0x2c>)
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 8001102:	2101      	movs	r1, #1
 8001104:	4808      	ldr	r0, [pc, #32]	@ (8001128 <pir_interrupt+0x30>)
 8001106:	f005 f82f 	bl	8006168 <HAL_GPIO_ReadPin>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <pir_interrupt+0x20>
		pir_motion_flag = 1;
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <pir_interrupt+0x34>)
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
	} else {
		pir_motion_flag = 0;
	}
}
 8001116:	e002      	b.n	800111e <pir_interrupt+0x26>
		pir_motion_flag = 0;
 8001118:	4b04      	ldr	r3, [pc, #16]	@ (800112c <pir_interrupt+0x34>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20001589 	.word	0x20001589
 8001128:	40020000 	.word	0x40020000
 800112c:	20001588 	.word	0x20001588

08001130 <timer_interrupt>:

void timer_interrupt() {
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	time_keep = time_keep + 1;
 8001134:	4b09      	ldr	r3, [pc, #36]	@ (800115c <timer_interrupt+0x2c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	4a08      	ldr	r2, [pc, #32]	@ (800115c <timer_interrupt+0x2c>)
 800113c:	6013      	str	r3, [r2, #0]
	if (time_keep > 65535) {
 800113e:	4b07      	ldr	r3, [pc, #28]	@ (800115c <timer_interrupt+0x2c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001146:	d302      	bcc.n	800114e <timer_interrupt+0x1e>
		time_keep = 0;
 8001148:	4b04      	ldr	r3, [pc, #16]	@ (800115c <timer_interrupt+0x2c>)
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
//
//	if(!save_param && !start_usb_timer)//if both are off and for some reason timer is still on we shut it down
//	{
//		HAL_TIM_Base_Stop_IT(&htim2);
//	}
	prev_sleep_time = HAL_GetTick();
 800114e:	f003 f83f 	bl	80041d0 <HAL_GetTick>
 8001152:	4603      	mov	r3, r0
 8001154:	4a02      	ldr	r2, [pc, #8]	@ (8001160 <timer_interrupt+0x30>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	2000157c 	.word	0x2000157c
 8001160:	200017c0 	.word	0x200017c0

08001164 <power_off_detect>:

void power_off_detect() {
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(SW_DET_GPIO_Port, SW_DET_Pin)) {
 8001168:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800116c:	4808      	ldr	r0, [pc, #32]	@ (8001190 <power_off_detect+0x2c>)
 800116e:	f004 fffb 	bl	8006168 <HAL_GPIO_ReadPin>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d108      	bne.n	800118a <power_off_detect+0x26>
		_RunTime_Packet.pwr_off_det = 1;
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <power_off_detect+0x30>)
 800117a:	2201      	movs	r2, #1
 800117c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2108      	movs	r1, #8
 8001184:	4804      	ldr	r0, [pc, #16]	@ (8001198 <power_off_detect+0x34>)
 8001186:	f005 f807 	bl	8006198 <HAL_GPIO_WritePin>
	}
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40020000 	.word	0x40020000
 8001194:	20001530 	.word	0x20001530
 8001198:	40020400 	.word	0x40020400

0800119c <MX_DMA_Init>:

//######################################

static void MX_DMA_Init(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <MX_DMA_Init+0x3c>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	4a0b      	ldr	r2, [pc, #44]	@ (80011d8 <MX_DMA_Init+0x3c>)
 80011ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b2:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <MX_DMA_Init+0x3c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	2044      	movs	r0, #68	@ 0x44
 80011c4:	f003 fde7 	bl	8004d96 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80011c8:	2044      	movs	r0, #68	@ 0x44
 80011ca:	f003 fe00 	bl	8004dce <HAL_NVIC_EnableIRQ>

}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800

080011dc <pwr_off_detected>:

static void pwr_off_detected() {
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	if (_RunTime_Packet.pwr_off_det) {
 80011e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001218 <pwr_off_detected+0x3c>)
 80011e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d014      	beq.n	8001214 <pwr_off_detected+0x38>
		_RunTime_Packet.pwr_off_det = 0;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <pwr_off_detected+0x3c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		GREEN_LED_PWM(disable_led);
 80011f2:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <pwr_off_detected+0x40>)
 80011f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011f8:	635a      	str	r2, [r3, #52]	@ 0x34
		RED_LED_PWM(disable_led);
 80011fa:	4b08      	ldr	r3, [pc, #32]	@ (800121c <pwr_off_detected+0x40>)
 80011fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001200:	639a      	str	r2, [r3, #56]	@ 0x38
		BLUE_LED_PWM(0);
 8001202:	4a07      	ldr	r2, [pc, #28]	@ (8001220 <pwr_off_detected+0x44>)
 8001204:	2100      	movs	r1, #0
 8001206:	2008      	movs	r0, #8
 8001208:	f7ff ff04 	bl	8001014 <setSoftPWM>
		HAL_Delay(3500);
 800120c:	f640 50ac 	movw	r0, #3500	@ 0xdac
 8001210:	f002 ffea 	bl	80041e8 <HAL_Delay>

	}
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20001530 	.word	0x20001530
 800121c:	40000400 	.word	0x40000400
 8001220:	20000324 	.word	0x20000324

08001224 <clock_speed_high>:
}

/**
 * setting clock speed to 84Mhz
 */
static void clock_speed_high() {
 8001224:	b580      	push	{r7, lr}
 8001226:	b094      	sub	sp, #80	@ 0x50
 8001228:	af00      	add	r7, sp, #0
//	RCC->CFGR = (RCC->CFGR & ~(RCC_CFGR_SW)) | RCC_CFGR_SW_HSI;
//
//	/* Disable PLL */
//	RCC->CR &= ~RCC_CR_PLLON;

	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800122a:	f107 0320 	add.w	r3, r7, #32
 800122e:	2230      	movs	r2, #48	@ 0x30
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f01d fdde 	bl	801edf4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	4b2a      	ldr	r3, [pc, #168]	@ (80012f8 <clock_speed_high+0xd4>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001250:	4a29      	ldr	r2, [pc, #164]	@ (80012f8 <clock_speed_high+0xd4>)
 8001252:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001256:	6413      	str	r3, [r2, #64]	@ 0x40
 8001258:	4b27      	ldr	r3, [pc, #156]	@ (80012f8 <clock_speed_high+0xd4>)
 800125a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001264:	2300      	movs	r3, #0
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	4b24      	ldr	r3, [pc, #144]	@ (80012fc <clock_speed_high+0xd8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001270:	4a22      	ldr	r2, [pc, #136]	@ (80012fc <clock_speed_high+0xd8>)
 8001272:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	4b20      	ldr	r3, [pc, #128]	@ (80012fc <clock_speed_high+0xd8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
 8001284:	2305      	movs	r3, #5
 8001286:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001288:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800128c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800128e:	2301      	movs	r3, #1
 8001290:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001292:	2302      	movs	r3, #2
 8001294:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001296:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800129a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 800129c:	2319      	movs	r3, #25
 800129e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80012a0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80012a4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012a6:	2304      	movs	r3, #4
 80012a8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80012aa:	2307      	movs	r3, #7
 80012ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80012ae:	f107 0320 	add.w	r3, r7, #32
 80012b2:	4618      	mov	r0, r3
 80012b4:	f007 fc98 	bl	8008be8 <HAL_RCC_OscConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <clock_speed_high+0x9e>
		Error_Handler();
 80012be:	f002 fa3d 	bl	800373c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012c2:	230f      	movs	r3, #15
 80012c4:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c6:	2302      	movs	r3, #2
 80012c8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012d2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	2102      	movs	r1, #2
 80012de:	4618      	mov	r0, r3
 80012e0:	f007 fefa 	bl	80090d8 <HAL_RCC_ClockConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <clock_speed_high+0xca>
		Error_Handler();
 80012ea:	f002 fa27 	bl	800373c <Error_Handler>
	}

}
 80012ee:	bf00      	nop
 80012f0:	3750      	adds	r7, #80	@ 0x50
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40007000 	.word	0x40007000

08001300 <load_param>:
/*
 * we check if there is anything stored inside internal flash
 * if nothing in available then we store our default values
 * else we take the values stroed inside the flash
 */
static void load_param() {
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0

	Flash_Packet *ipFlaPar;
	ipFlaPar = (Flash_Packet*) Address_Mem;
 8001306:	4b27      	ldr	r3, [pc, #156]	@ (80013a4 <load_param+0xa4>)
 8001308:	607b      	str	r3, [r7, #4]

	if (ipFlaPar->valid_pattern == m_Flash_Packet.valid_pattern) // 1. Sentence, pattern valid ?
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f8b3 325f 	ldrh.w	r3, [r3, #607]	@ 0x25f
 8001310:	b29b      	uxth	r3, r3
 8001312:	f44f 52c2 	mov.w	r2, #6208	@ 0x1840
 8001316:	4293      	cmp	r3, r2
 8001318:	d118      	bne.n	800134c <load_param+0x4c>
			{
		memcpy(&_Flash_Packet, ipFlaPar, sizeof(Flash_Packet));
 800131a:	4a23      	ldr	r2, [pc, #140]	@ (80013a8 <load_param+0xa8>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	f240 2361 	movw	r3, #609	@ 0x261
 8001326:	461a      	mov	r2, r3
 8001328:	f01d fe7b 	bl	801f022 <memcpy>

		if (strstr(_Flash_Packet.File_Name, "devEUI")) {
 800132c:	491f      	ldr	r1, [pc, #124]	@ (80013ac <load_param+0xac>)
 800132e:	481e      	ldr	r0, [pc, #120]	@ (80013a8 <load_param+0xa8>)
 8001330:	f01d fdd2 	bl	801eed8 <strstr>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d019      	beq.n	800136e <load_param+0x6e>
			sprintf(_Flash_Packet.File_Name, "%s", ver_GetUid());
 800133a:	f001 f8c5 	bl	80024c8 <ver_GetUid>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	491b      	ldr	r1, [pc, #108]	@ (80013b0 <load_param+0xb0>)
 8001344:	4818      	ldr	r0, [pc, #96]	@ (80013a8 <load_param+0xa8>)
 8001346:	f01d fc0b 	bl	801eb60 <siprintf>
 800134a:	e010      	b.n	800136e <load_param+0x6e>

	}

	else //load default param
	{
		memcpy(&_Flash_Packet, &m_Flash_Packet, sizeof(Flash_Packet));
 800134c:	4a16      	ldr	r2, [pc, #88]	@ (80013a8 <load_param+0xa8>)
 800134e:	4b19      	ldr	r3, [pc, #100]	@ (80013b4 <load_param+0xb4>)
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f240 2361 	movw	r3, #609	@ 0x261
 8001358:	461a      	mov	r2, r3
 800135a:	f01d fe62 	bl	801f022 <memcpy>
		sprintf(_Flash_Packet.File_Name, "%s", ver_GetUid());
 800135e:	f001 f8b3 	bl	80024c8 <ver_GetUid>
 8001362:	4603      	mov	r3, r0
 8001364:	461a      	mov	r2, r3
 8001366:	4912      	ldr	r1, [pc, #72]	@ (80013b0 <load_param+0xb0>)
 8001368:	480f      	ldr	r0, [pc, #60]	@ (80013a8 <load_param+0xa8>)
 800136a:	f01d fbf9 	bl	801eb60 <siprintf>
	}

	if (strstr(_Flash_Packet.File_Format, ".CSV")) {
 800136e:	4912      	ldr	r1, [pc, #72]	@ (80013b8 <load_param+0xb8>)
 8001370:	4812      	ldr	r0, [pc, #72]	@ (80013bc <load_param+0xbc>)
 8001372:	f01d fdb1 	bl	801eed8 <strstr>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d004      	beq.n	8001386 <load_param+0x86>
		_RunTime_Packet.fileformat_selection = 1;
 800137c:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <load_param+0xc0>)
 800137e:	2201      	movs	r2, #1
 8001380:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	} else if (strstr(_Flash_Packet.File_Format, ".JSON")) {
		_RunTime_Packet.fileformat_selection = 0;
	}

}
 8001384:	e00a      	b.n	800139c <load_param+0x9c>
	} else if (strstr(_Flash_Packet.File_Format, ".JSON")) {
 8001386:	490f      	ldr	r1, [pc, #60]	@ (80013c4 <load_param+0xc4>)
 8001388:	480c      	ldr	r0, [pc, #48]	@ (80013bc <load_param+0xbc>)
 800138a:	f01d fda5 	bl	801eed8 <strstr>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <load_param+0x9c>
		_RunTime_Packet.fileformat_selection = 0;
 8001394:	4b0a      	ldr	r3, [pc, #40]	@ (80013c0 <load_param+0xc0>)
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	08060000 	.word	0x08060000
 80013a8:	200012cc 	.word	0x200012cc
 80013ac:	08022308 	.word	0x08022308
 80013b0:	08022310 	.word	0x08022310
 80013b4:	08024ea4 	.word	0x08024ea4
 80013b8:	08022314 	.word	0x08022314
 80013bc:	20001330 	.word	0x20001330
 80013c0:	20001530 	.word	0x20001530
 80013c4:	0802231c 	.word	0x0802231c

080013c8 <store_param>:

/*
 * we store the whole structure inside the internal flash
 */
static uint32_t store_param() {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ce:	b672      	cpsid	i
}
 80013d0:	bf00      	nop
	__disable_irq();

	uint32_t ZielAdr;
	uint32_t WrAdr;
	uint32_t QuellAdr = (uint32_t) &_Flash_Packet;
 80013d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001488 <store_param+0xc0>)
 80013d4:	60bb      	str	r3, [r7, #8]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 80013d6:	f004 f9bf 	bl	8005758 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80013da:	4b2c      	ldr	r3, [pc, #176]	@ (800148c <store_param+0xc4>)
 80013dc:	2201      	movs	r2, #1
 80013de:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80013e0:	4b2a      	ldr	r3, [pc, #168]	@ (800148c <store_param+0xc4>)
 80013e2:	2202      	movs	r2, #2
 80013e4:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80013e6:	4b29      	ldr	r3, [pc, #164]	@ (800148c <store_param+0xc4>)
 80013e8:	2210      	movs	r2, #16
 80013ea:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80013ec:	4b27      	ldr	r3, [pc, #156]	@ (800148c <store_param+0xc4>)
 80013ee:	2220      	movs	r2, #32
 80013f0:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80013f2:	4b26      	ldr	r3, [pc, #152]	@ (800148c <store_param+0xc4>)
 80013f4:	2240      	movs	r2, #64	@ 0x40
 80013f6:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80013f8:	4b24      	ldr	r3, [pc, #144]	@ (800148c <store_param+0xc4>)
 80013fa:	2280      	movs	r2, #128	@ 0x80
 80013fc:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80013fe:	4b23      	ldr	r3, [pc, #140]	@ (800148c <store_param+0xc4>)
 8001400:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001404:	60da      	str	r2, [r3, #12]

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001406:	4b22      	ldr	r3, [pc, #136]	@ (8001490 <store_param+0xc8>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800140c:	4b20      	ldr	r3, [pc, #128]	@ (8001490 <store_param+0xc8>)
 800140e:	2202      	movs	r2, #2
 8001410:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector = FLASH_SECTOR_7;
 8001412:	4b1f      	ldr	r3, [pc, #124]	@ (8001490 <store_param+0xc8>)
 8001414:	2207      	movs	r2, #7
 8001416:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors = 1;
 8001418:	4b1d      	ldr	r3, [pc, #116]	@ (8001490 <store_param+0xc8>)
 800141a:	2201      	movs	r2, #1
 800141c:	60da      	str	r2, [r3, #12]

	/* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	 you have to make sure that these data are rewritten before they are accessed during code
	 execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	 DCRST and ICRST bits in the FLASH_CR register. */
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) {
 800141e:	463b      	mov	r3, r7
 8001420:	4619      	mov	r1, r3
 8001422:	481b      	ldr	r0, [pc, #108]	@ (8001490 <store_param+0xc8>)
 8001424:	f004 fb16 	bl	8005a54 <HAL_FLASHEx_Erase>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <store_param+0x6e>
		return HAL_FLASH_GetError();
 800142e:	f004 f9c5 	bl	80057bc <HAL_FLASH_GetError>
 8001432:	4603      	mov	r3, r0
 8001434:	e024      	b.n	8001480 <store_param+0xb8>
	}

	ZielAdr = Address_Mem + sizeof(Flash_Packet); /* - FLASH_DOUBLE_SIZE))*/
 8001436:	4b17      	ldr	r3, [pc, #92]	@ (8001494 <store_param+0xcc>)
 8001438:	607b      	str	r3, [r7, #4]
	WrAdr = Address_Mem; // Pointer on 1st entry
 800143a:	4b17      	ldr	r3, [pc, #92]	@ (8001498 <store_param+0xd0>)
 800143c:	60fb      	str	r3, [r7, #12]

	while (WrAdr < ZielAdr) {
 800143e:	e016      	b.n	800146e <store_param+0xa6>

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, WrAdr,
				*(uint64_t*) QuellAdr) == HAL_OK)
 8001440:	68bb      	ldr	r3, [r7, #8]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, WrAdr,
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	68f9      	ldr	r1, [r7, #12]
 8001448:	2002      	movs	r0, #2
 800144a:	f004 f931 	bl	80056b0 <HAL_FLASH_Program>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d106      	bne.n	8001462 <store_param+0x9a>

		{
			WrAdr += 4;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	3304      	adds	r3, #4
 8001458:	60fb      	str	r3, [r7, #12]
			QuellAdr += 4;
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	3304      	adds	r3, #4
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	e005      	b.n	800146e <store_param+0xa6>

		} else {

			HAL_FLASH_Lock();
 8001462:	f004 f99b 	bl	800579c <HAL_FLASH_Lock>
			return HAL_FLASH_GetError();
 8001466:	f004 f9a9 	bl	80057bc <HAL_FLASH_GetError>
 800146a:	4603      	mov	r3, r0
 800146c:	e008      	b.n	8001480 <store_param+0xb8>
	while (WrAdr < ZielAdr) {
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	429a      	cmp	r2, r3
 8001474:	d3e4      	bcc.n	8001440 <store_param+0x78>

		}

	}
	HAL_FLASH_Lock();
 8001476:	f004 f991 	bl	800579c <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 800147a:	b662      	cpsie	i
}
 800147c:	bf00      	nop
//	if(start_usb_timer)
//	{
//		HAL_TIM_Base_Start_IT(&htim2);
//	}

	return 0;
 800147e:	2300      	movs	r3, #0

}
 8001480:	4618      	mov	r0, r3
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200012cc 	.word	0x200012cc
 800148c:	40023c00 	.word	0x40023c00
 8001490:	200017dc 	.word	0x200017dc
 8001494:	08060261 	.word	0x08060261
 8001498:	08060000 	.word	0x08060000

0800149c <save_data>:
/*
 * This is to save data in internal flash. when user change something that needs to be saved in flash for future use
 * we wait for 30seconds, so in this time if user also changes something else we write to flash at once then
 */
static void save_data() {
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
	if (save_param) {
 80014a0:	4b14      	ldr	r3, [pc, #80]	@ (80014f4 <save_data+0x58>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d022      	beq.n	80014ee <save_data+0x52>
		if (start_timer) {
 80014a8:	4b13      	ldr	r3, [pc, #76]	@ (80014f8 <save_data+0x5c>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d00b      	beq.n	80014c8 <save_data+0x2c>
			HAL_TIM_Base_Stop_IT(&htim2);
 80014b0:	4812      	ldr	r0, [pc, #72]	@ (80014fc <save_data+0x60>)
 80014b2:	f009 ff77 	bl	800b3a4 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Start_IT(&htim2);
 80014b6:	4811      	ldr	r0, [pc, #68]	@ (80014fc <save_data+0x60>)
 80014b8:	f009 ff12 	bl	800b2e0 <HAL_TIM_Base_Start_IT>
			time_keep = 0;
 80014bc:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <save_data+0x64>)
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
			start_timer = 0;
 80014c2:	4b0d      	ldr	r3, [pc, #52]	@ (80014f8 <save_data+0x5c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
		}

		if (time_keep >= 300) //save after 30secs when data occur happens
 80014c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001500 <save_data+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80014d0:	d30d      	bcc.n	80014ee <save_data+0x52>
				{
			//if(!start_usb_timer) //if usb timer is on dont stop timer as usb will stop itself when its operation will end
			//{
			HAL_TIM_Base_Stop_IT(&htim2);
 80014d2:	480a      	ldr	r0, [pc, #40]	@ (80014fc <save_data+0x60>)
 80014d4:	f009 ff66 	bl	800b3a4 <HAL_TIM_Base_Stop_IT>
			//}
			store_param();
 80014d8:	f7ff ff76 	bl	80013c8 <store_param>
			time_keep = 0;
 80014dc:	4b08      	ldr	r3, [pc, #32]	@ (8001500 <save_data+0x64>)
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
			save_param = 0;
 80014e2:	4b04      	ldr	r3, [pc, #16]	@ (80014f4 <save_data+0x58>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
			start_timer = 0;
 80014e8:	4b03      	ldr	r3, [pc, #12]	@ (80014f8 <save_data+0x5c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20001579 	.word	0x20001579
 80014f8:	2000157a 	.word	0x2000157a
 80014fc:	20001984 	.word	0x20001984
 8001500:	2000157c 	.word	0x2000157c

08001504 <init_scd30_i2c>:
	}
	//error = scd4x_stop_periodic_measurement();
}

#elif use_scd30
static void init_scd30_i2c() {
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0



	int16_t error = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	80fb      	strh	r3, [r7, #6]
	sensirion_i2c_hal_init();
 800150e:	f013 fd63 	bl	8014fd8 <sensirion_i2c_hal_init>


	scd4x_wake_up();
 8001512:	f013 fbe9 	bl	8014ce8 <scd4x_wake_up>
	scd4x_stop_periodic_measurement();
 8001516:	f013 fb73 	bl	8014c00 <scd4x_stop_periodic_measurement>
	scd4x_reinit();
 800151a:	f013 fb99 	bl	8014c50 <scd4x_reinit>
	scd4x_power_down();
 800151e:	f013 fbbd 	bl	8014c9c <scd4x_power_down>


	init_driver(SCD30_I2C_ADDR_61);
 8001522:	2061      	movs	r0, #97	@ 0x61
 8001524:	f012 fef4 	bl	8014310 <init_driver>
	scd30_stop_periodic_measurement();
 8001528:	f012 ff8c 	bl	8014444 <scd30_stop_periodic_measurement>
scd30_set_measurement_interval(2);
 800152c:	2002      	movs	r0, #2
 800152e:	f012 ffb7 	bl	80144a0 <scd30_set_measurement_interval>
//uint16_t inter;
//scd30_get_measurement_interval(&inter);
	//   scd30_soft_reset();
	uint8_t major = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	717b      	strb	r3, [r7, #5]
	uint8_t minor = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	713b      	strb	r3, [r7, #4]
	error = scd30_read_firmware_version(&major, &minor);
 800153a:	1d3a      	adds	r2, r7, #4
 800153c:	1d7b      	adds	r3, r7, #5
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f013 fadf 	bl	8014b04 <scd30_read_firmware_version>
 8001546:	4603      	mov	r3, r0
 8001548:	80fb      	strh	r3, [r7, #6]
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <get_scd30_measurement>:

void get_scd30_measurement() {
 8001554:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001558:	b09e      	sub	sp, #120	@ 0x78
 800155a:	af04      	add	r7, sp, #16
	int16_t error = NO_ERROR;
 800155c:	2300      	movs	r3, #0
 800155e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	scd30_start_periodic_measurement(0);
 8001562:	2000      	movs	r0, #0
 8001564:	f012 ff36 	bl	80143d4 <scd30_start_periodic_measurement>

	uint8_t repetition = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	for (repetition = 0; repetition < _Flash_Packet.co2_samples; repetition++) {
 800156e:	2300      	movs	r3, #0
 8001570:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001574:	e087      	b.n	8001686 <get_scd30_measurement+0x132>
		run_console_co2 = 1;
 8001576:	4b4d      	ldr	r3, [pc, #308]	@ (80016ac <get_scd30_measurement+0x158>)
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
	  if(!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin))//dont give delay when usb connected as we want to service console aswell
 800157c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001580:	484b      	ldr	r0, [pc, #300]	@ (80016b0 <get_scd30_measurement+0x15c>)
 8001582:	f004 fdf1 	bl	8006168 <HAL_GPIO_ReadPin>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d103      	bne.n	8001594 <get_scd30_measurement+0x40>
		{
		sensirion_i2c_hal_sleep_usec(1500000);
 800158c:	4849      	ldr	r0, [pc, #292]	@ (80016b4 <get_scd30_measurement+0x160>)
 800158e:	f013 fd99 	bl	80150c4 <sensirion_i2c_hal_sleep_usec>
 8001592:	e002      	b.n	800159a <get_scd30_measurement+0x46>
		}
	  else
	  {
		  sensirion_i2c_hal_sleep_usec(700000);
 8001594:	4848      	ldr	r0, [pc, #288]	@ (80016b8 <get_scd30_measurement+0x164>)
 8001596:	f013 fd95 	bl	80150c4 <sensirion_i2c_hal_sleep_usec>
	  }
		console_process();
 800159a:	f010 fee3 	bl	8012364 <console_process>
		error = scd30_blocking_read_measurement_data(&_RunTime_Packet.co2,
 800159e:	4a47      	ldr	r2, [pc, #284]	@ (80016bc <get_scd30_measurement+0x168>)
 80015a0:	4947      	ldr	r1, [pc, #284]	@ (80016c0 <get_scd30_measurement+0x16c>)
 80015a2:	4848      	ldr	r0, [pc, #288]	@ (80016c4 <get_scd30_measurement+0x170>)
 80015a4:	f012 fef6 	bl	8014394 <scd30_blocking_read_measurement_data>
 80015a8:	4603      	mov	r3, r0
 80015aa:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
				&_RunTime_Packet.temperature, &_RunTime_Packet.humidity);

		if (debug_scd_pm) {
 80015ae:	4b46      	ldr	r3, [pc, #280]	@ (80016c8 <get_scd30_measurement+0x174>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d05c      	beq.n	8001670 <get_scd30_measurement+0x11c>
			char buf[100];
			if (error) {
 80015b6:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d013      	beq.n	80015e6 <get_scd30_measurement+0x92>
				sprintf(buf,
 80015be:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	@ 0x64
 80015c2:	463b      	mov	r3, r7
 80015c4:	4941      	ldr	r1, [pc, #260]	@ (80016cc <get_scd30_measurement+0x178>)
 80015c6:	4618      	mov	r0, r3
 80015c8:	f01d faca 	bl	801eb60 <siprintf>
						"error executing blocking_read_measurement_data(): %i\n",
						error);
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 80015cc:	463b      	mov	r3, r7
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe fe66 	bl	80002a0 <strlen>
 80015d4:	4603      	mov	r3, r0
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	4639      	mov	r1, r7
 80015da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015de:	483c      	ldr	r0, [pc, #240]	@ (80016d0 <get_scd30_measurement+0x17c>)
 80015e0:	f00a fe96 	bl	800c310 <HAL_UART_Transmit>
 80015e4:	e044      	b.n	8001670 <get_scd30_measurement+0x11c>
			} else if (_RunTime_Packet.co2 == 0) {
 80015e6:	4b37      	ldr	r3, [pc, #220]	@ (80016c4 <get_scd30_measurement+0x170>)
 80015e8:	edd3 7a00 	vldr	s15, [r3]
 80015ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f4:	d111      	bne.n	800161a <get_scd30_measurement+0xc6>
				sprintf(buf, "Invalid sample detected, skipping.\n");
 80015f6:	463b      	mov	r3, r7
 80015f8:	4936      	ldr	r1, [pc, #216]	@ (80016d4 <get_scd30_measurement+0x180>)
 80015fa:	4618      	mov	r0, r3
 80015fc:	f01d fab0 	bl	801eb60 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 8001600:	463b      	mov	r3, r7
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe fe4c 	bl	80002a0 <strlen>
 8001608:	4603      	mov	r3, r0
 800160a:	b29a      	uxth	r2, r3
 800160c:	4639      	mov	r1, r7
 800160e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001612:	482f      	ldr	r0, [pc, #188]	@ (80016d0 <get_scd30_measurement+0x17c>)
 8001614:	f00a fe7c 	bl	800c310 <HAL_UART_Transmit>
 8001618:	e02a      	b.n	8001670 <get_scd30_measurement+0x11c>
			} else {

				sprintf(buf,
						"Co2: %.2f , Temperature: %.2f C, Humidity: %.2f  \r\n",
						_RunTime_Packet.co2, _RunTime_Packet.temperature,
 800161a:	4b2a      	ldr	r3, [pc, #168]	@ (80016c4 <get_scd30_measurement+0x170>)
 800161c:	681b      	ldr	r3, [r3, #0]
				sprintf(buf,
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe ffaa 	bl	8000578 <__aeabi_f2d>
 8001624:	4680      	mov	r8, r0
 8001626:	4689      	mov	r9, r1
						_RunTime_Packet.co2, _RunTime_Packet.temperature,
 8001628:	4b26      	ldr	r3, [pc, #152]	@ (80016c4 <get_scd30_measurement+0x170>)
 800162a:	685b      	ldr	r3, [r3, #4]
				sprintf(buf,
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe ffa3 	bl	8000578 <__aeabi_f2d>
 8001632:	4604      	mov	r4, r0
 8001634:	460d      	mov	r5, r1
						_RunTime_Packet.humidity);
 8001636:	4b23      	ldr	r3, [pc, #140]	@ (80016c4 <get_scd30_measurement+0x170>)
 8001638:	689b      	ldr	r3, [r3, #8]
				sprintf(buf,
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe ff9c 	bl	8000578 <__aeabi_f2d>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4638      	mov	r0, r7
 8001646:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800164a:	e9cd 4500 	strd	r4, r5, [sp]
 800164e:	4642      	mov	r2, r8
 8001650:	464b      	mov	r3, r9
 8001652:	4921      	ldr	r1, [pc, #132]	@ (80016d8 <get_scd30_measurement+0x184>)
 8001654:	f01d fa84 	bl	801eb60 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 8001658:	463b      	mov	r3, r7
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe fe20 	bl	80002a0 <strlen>
 8001660:	4603      	mov	r3, r0
 8001662:	b29a      	uxth	r2, r3
 8001664:	4639      	mov	r1, r7
 8001666:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800166a:	4819      	ldr	r0, [pc, #100]	@ (80016d0 <get_scd30_measurement+0x17c>)
 800166c:	f00a fe50 	bl	800c310 <HAL_UART_Transmit>
			}
		}

		led_awake_routine1();
 8001670:	f000 fd60 	bl	8002134 <led_awake_routine1>
		console_process();
 8001674:	f010 fe76 	bl	8012364 <console_process>
		get_sps30_measurement();
 8001678:	f000 f8f4 	bl	8001864 <get_sps30_measurement>
	for (repetition = 0; repetition < _Flash_Packet.co2_samples; repetition++) {
 800167c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001680:	3301      	adds	r3, #1
 8001682:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001686:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800168a:	b29a      	uxth	r2, r3
 800168c:	4b13      	ldr	r3, [pc, #76]	@ (80016dc <get_scd30_measurement+0x188>)
 800168e:	f8b3 325d 	ldrh.w	r3, [r3, #605]	@ 0x25d
 8001692:	b29b      	uxth	r3, r3
 8001694:	429a      	cmp	r2, r3
 8001696:	f4ff af6e 	bcc.w	8001576 <get_scd30_measurement+0x22>
	}
	run_console_co2 = 0;
 800169a:	4b04      	ldr	r3, [pc, #16]	@ (80016ac <get_scd30_measurement+0x158>)
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]

}
 80016a0:	bf00      	nop
 80016a2:	3768      	adds	r7, #104	@ 0x68
 80016a4:	46bd      	mov	sp, r7
 80016a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80016aa:	bf00      	nop
 80016ac:	20000320 	.word	0x20000320
 80016b0:	40020000 	.word	0x40020000
 80016b4:	0016e360 	.word	0x0016e360
 80016b8:	000aae60 	.word	0x000aae60
 80016bc:	20001538 	.word	0x20001538
 80016c0:	20001534 	.word	0x20001534
 80016c4:	20001530 	.word	0x20001530
 80016c8:	20001578 	.word	0x20001578
 80016cc:	08022324 	.word	0x08022324
 80016d0:	20001a74 	.word	0x20001a74
 80016d4:	0802235c 	.word	0x0802235c
 80016d8:	08022380 	.word	0x08022380
 80016dc:	200012cc 	.word	0x200012cc

080016e0 <get_scd30_measurement_>:

void get_scd30_measurement_()
{
 80016e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016e4:	b09e      	sub	sp, #120	@ 0x78
 80016e6:	af04      	add	r7, sp, #16
	int16_t error = NO_ERROR;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	scd30_start_periodic_measurement(0);
 80016ee:	2000      	movs	r0, #0
 80016f0:	f012 fe70 	bl	80143d4 <scd30_start_periodic_measurement>

	uint8_t repetition = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	for (repetition = 0; repetition < _Flash_Packet.co2_samples; repetition++) {
 80016fa:	2300      	movs	r3, #0
 80016fc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001700:	e070      	b.n	80017e4 <get_scd30_measurement_+0x104>
		sensirion_i2c_hal_sleep_usec(1500000);
 8001702:	4840      	ldr	r0, [pc, #256]	@ (8001804 <get_scd30_measurement_+0x124>)
 8001704:	f013 fcde 	bl	80150c4 <sensirion_i2c_hal_sleep_usec>
		error = scd30_blocking_read_measurement_data(&_RunTime_Packet.co2,
 8001708:	4a3f      	ldr	r2, [pc, #252]	@ (8001808 <get_scd30_measurement_+0x128>)
 800170a:	4940      	ldr	r1, [pc, #256]	@ (800180c <get_scd30_measurement_+0x12c>)
 800170c:	4840      	ldr	r0, [pc, #256]	@ (8001810 <get_scd30_measurement_+0x130>)
 800170e:	f012 fe41 	bl	8014394 <scd30_blocking_read_measurement_data>
 8001712:	4603      	mov	r3, r0
 8001714:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
				&_RunTime_Packet.temperature, &_RunTime_Packet.humidity);

		if (debug_scd_pm) {
 8001718:	4b3e      	ldr	r3, [pc, #248]	@ (8001814 <get_scd30_measurement_+0x134>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d05c      	beq.n	80017da <get_scd30_measurement_+0xfa>
			char buf[100];
			if (error) {
 8001720:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 8001724:	2b00      	cmp	r3, #0
 8001726:	d013      	beq.n	8001750 <get_scd30_measurement_+0x70>
				sprintf(buf,
 8001728:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	@ 0x64
 800172c:	463b      	mov	r3, r7
 800172e:	493a      	ldr	r1, [pc, #232]	@ (8001818 <get_scd30_measurement_+0x138>)
 8001730:	4618      	mov	r0, r3
 8001732:	f01d fa15 	bl	801eb60 <siprintf>
						"error executing blocking_read_measurement_data(): %i\n",
						error);
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 8001736:	463b      	mov	r3, r7
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe fdb1 	bl	80002a0 <strlen>
 800173e:	4603      	mov	r3, r0
 8001740:	b29a      	uxth	r2, r3
 8001742:	4639      	mov	r1, r7
 8001744:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001748:	4834      	ldr	r0, [pc, #208]	@ (800181c <get_scd30_measurement_+0x13c>)
 800174a:	f00a fde1 	bl	800c310 <HAL_UART_Transmit>
 800174e:	e044      	b.n	80017da <get_scd30_measurement_+0xfa>
			} else if (_RunTime_Packet.co2 == 0) {
 8001750:	4b2f      	ldr	r3, [pc, #188]	@ (8001810 <get_scd30_measurement_+0x130>)
 8001752:	edd3 7a00 	vldr	s15, [r3]
 8001756:	eef5 7a40 	vcmp.f32	s15, #0.0
 800175a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175e:	d111      	bne.n	8001784 <get_scd30_measurement_+0xa4>
				sprintf(buf, "Invalid sample detected, skipping.\n");
 8001760:	463b      	mov	r3, r7
 8001762:	492f      	ldr	r1, [pc, #188]	@ (8001820 <get_scd30_measurement_+0x140>)
 8001764:	4618      	mov	r0, r3
 8001766:	f01d f9fb 	bl	801eb60 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 800176a:	463b      	mov	r3, r7
 800176c:	4618      	mov	r0, r3
 800176e:	f7fe fd97 	bl	80002a0 <strlen>
 8001772:	4603      	mov	r3, r0
 8001774:	b29a      	uxth	r2, r3
 8001776:	4639      	mov	r1, r7
 8001778:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800177c:	4827      	ldr	r0, [pc, #156]	@ (800181c <get_scd30_measurement_+0x13c>)
 800177e:	f00a fdc7 	bl	800c310 <HAL_UART_Transmit>
 8001782:	e02a      	b.n	80017da <get_scd30_measurement_+0xfa>
			} else {

				sprintf(buf,
						"Co2: %.2f , Temperature: %.2f C, Humidity: %.2f  \r\n",
						_RunTime_Packet.co2, _RunTime_Packet.temperature,
 8001784:	4b22      	ldr	r3, [pc, #136]	@ (8001810 <get_scd30_measurement_+0x130>)
 8001786:	681b      	ldr	r3, [r3, #0]
				sprintf(buf,
 8001788:	4618      	mov	r0, r3
 800178a:	f7fe fef5 	bl	8000578 <__aeabi_f2d>
 800178e:	4680      	mov	r8, r0
 8001790:	4689      	mov	r9, r1
						_RunTime_Packet.co2, _RunTime_Packet.temperature,
 8001792:	4b1f      	ldr	r3, [pc, #124]	@ (8001810 <get_scd30_measurement_+0x130>)
 8001794:	685b      	ldr	r3, [r3, #4]
				sprintf(buf,
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe feee 	bl	8000578 <__aeabi_f2d>
 800179c:	4604      	mov	r4, r0
 800179e:	460d      	mov	r5, r1
						_RunTime_Packet.humidity);
 80017a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001810 <get_scd30_measurement_+0x130>)
 80017a2:	689b      	ldr	r3, [r3, #8]
				sprintf(buf,
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7fe fee7 	bl	8000578 <__aeabi_f2d>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4638      	mov	r0, r7
 80017b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80017b4:	e9cd 4500 	strd	r4, r5, [sp]
 80017b8:	4642      	mov	r2, r8
 80017ba:	464b      	mov	r3, r9
 80017bc:	4919      	ldr	r1, [pc, #100]	@ (8001824 <get_scd30_measurement_+0x144>)
 80017be:	f01d f9cf 	bl	801eb60 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 80017c2:	463b      	mov	r3, r7
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fd6b 	bl	80002a0 <strlen>
 80017ca:	4603      	mov	r3, r0
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	4639      	mov	r1, r7
 80017d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017d4:	4811      	ldr	r0, [pc, #68]	@ (800181c <get_scd30_measurement_+0x13c>)
 80017d6:	f00a fd9b 	bl	800c310 <HAL_UART_Transmit>
	for (repetition = 0; repetition < _Flash_Packet.co2_samples; repetition++) {
 80017da:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80017de:	3301      	adds	r3, #1
 80017e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80017e4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001828 <get_scd30_measurement_+0x148>)
 80017ec:	f8b3 325d 	ldrh.w	r3, [r3, #605]	@ 0x25d
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d385      	bcc.n	8001702 <get_scd30_measurement_+0x22>
		}

		//led_awake_routine1();

	}
}
 80017f6:	bf00      	nop
 80017f8:	bf00      	nop
 80017fa:	3768      	adds	r7, #104	@ 0x68
 80017fc:	46bd      	mov	sp, r7
 80017fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001802:	bf00      	nop
 8001804:	0016e360 	.word	0x0016e360
 8001808:	20001538 	.word	0x20001538
 800180c:	20001534 	.word	0x20001534
 8001810:	20001530 	.word	0x20001530
 8001814:	20001578 	.word	0x20001578
 8001818:	08022324 	.word	0x08022324
 800181c:	20001a74 	.word	0x20001a74
 8001820:	0802235c 	.word	0x0802235c
 8001824:	08022380 	.word	0x08022380
 8001828:	200012cc 	.word	0x200012cc

0800182c <init_sps30>:

#endif

static void init_sps30() {
 800182c:	b580      	push	{r7, lr}
 800182e:	b08c      	sub	sp, #48	@ 0x30
 8001830:	af00      	add	r7, sp, #0
	char serial[SPS30_MAX_SERIAL_LEN];

	int16_t ret;
	sensirion_sleep_usec(1000000); /* sleep for 1s */
 8001832:	480b      	ldr	r0, [pc, #44]	@ (8001860 <init_sps30+0x34>)
 8001834:	f014 f84a 	bl	80158cc <sensirion_sleep_usec>

	sensirion_uart_open();
 8001838:	f013 ff92 	bl	8015760 <sensirion_uart_open>

	//printf("SPS30 sensor probing successful\r\n");

	struct sps30_version_information version_information;
	ret = sps30_read_version(&version_information);
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	4618      	mov	r0, r3
 8001840:	f014 f94f 	bl	8015ae2 <sps30_read_version>
 8001844:	4603      	mov	r3, r0
 8001846:	85fb      	strh	r3, [r7, #46]	@ 0x2e
//				version_information.hardware_revision,
//				version_information.shdlc_major,
//				version_information.shdlc_minor);
	}

	ret = sps30_get_serial(serial);
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	4618      	mov	r0, r3
 800184e:	f014 f851 	bl	80158f4 <sps30_get_serial>
 8001852:	4603      	mov	r3, r0
 8001854:	85fb      	strh	r3, [r7, #46]	@ 0x2e
//	if (ret)
//	{
//		//printf("error %d setting the auto-clean interval\r\n", ret);
//	}

}
 8001856:	bf00      	nop
 8001858:	3730      	adds	r7, #48	@ 0x30
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	000f4240 	.word	0x000f4240

08001864 <get_sps30_measurement>:
void get_sps30_measurement() {
 8001864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001868:	b0a0      	sub	sp, #128	@ 0x80
 800186a:	af06      	add	r7, sp, #24

	int16_t ret;
	char buffer[100];
	ret = sps30_start_measurement();
 800186c:	f014 f86e 	bl	801594c <sps30_start_measurement>
 8001870:	4603      	mov	r3, r0
 8001872:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
//			sprintf(buffer,"error starting measurement\r\n");
//			HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);

	}

	ret = sps30_read_measurement(&m);
 8001876:	483a      	ldr	r0, [pc, #232]	@ (8001960 <get_sps30_measurement+0xfc>)
 8001878:	f014 f880 	bl	801597c <sps30_read_measurement>
 800187c:	4603      	mov	r3, r0
 800187e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	_RunTime_Packet.pm1_0 = m.mc_1p0;
 8001882:	4b37      	ldr	r3, [pc, #220]	@ (8001960 <get_sps30_measurement+0xfc>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a37      	ldr	r2, [pc, #220]	@ (8001964 <get_sps30_measurement+0x100>)
 8001888:	6113      	str	r3, [r2, #16]
	_RunTime_Packet.pm2_5 = m.mc_2p5;
 800188a:	4b35      	ldr	r3, [pc, #212]	@ (8001960 <get_sps30_measurement+0xfc>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	4a35      	ldr	r2, [pc, #212]	@ (8001964 <get_sps30_measurement+0x100>)
 8001890:	6153      	str	r3, [r2, #20]
	_RunTime_Packet.pm4_0 = m.mc_4p0;
 8001892:	4b33      	ldr	r3, [pc, #204]	@ (8001960 <get_sps30_measurement+0xfc>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	4a33      	ldr	r2, [pc, #204]	@ (8001964 <get_sps30_measurement+0x100>)
 8001898:	6193      	str	r3, [r2, #24]
	_RunTime_Packet.pm10_0 = m.mc_10p0;
 800189a:	4b31      	ldr	r3, [pc, #196]	@ (8001960 <get_sps30_measurement+0xfc>)
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	4a31      	ldr	r2, [pc, #196]	@ (8001964 <get_sps30_measurement+0x100>)
 80018a0:	61d3      	str	r3, [r2, #28]

	if (ret < 0) {
 80018a2:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	@ 0x66
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	db54      	blt.n	8001954 <get_sps30_measurement+0xf0>
//				printf("error reading measurement\r\n");
//				HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
//				}

	} else {
		if (debug_scd_pm) {
 80018aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001968 <get_sps30_measurement+0x104>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d050      	beq.n	8001954 <get_sps30_measurement+0xf0>
			if (SPS30_IS_ERR_STATE(ret)) {
 80018b2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80018b6:	f043 03ff 	orr.w	r3, r3, #255	@ 0xff
 80018ba:	b21b      	sxth	r3, r3
 80018bc:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d113      	bne.n	80018ec <get_sps30_measurement+0x88>
				sprintf(buffer,
 80018c4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	463b      	mov	r3, r7
 80018cc:	4927      	ldr	r1, [pc, #156]	@ (800196c <get_sps30_measurement+0x108>)
 80018ce:	4618      	mov	r0, r3
 80018d0:	f01d f946 	bl	801eb60 <siprintf>
						"Chip state: %u - measurements may not be accurate\r\n",
						SPS30_GET_ERR_STATE(ret));
				HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
 80018d4:	463b      	mov	r3, r7
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7fe fce2 	bl	80002a0 <strlen>
 80018dc:	4603      	mov	r3, r0
 80018de:	b29a      	uxth	r2, r3
 80018e0:	4639      	mov	r1, r7
 80018e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018e6:	4822      	ldr	r0, [pc, #136]	@ (8001970 <get_sps30_measurement+0x10c>)
 80018e8:	f00a fd12 	bl	800c310 <HAL_UART_Transmit>
						1000);
			}
			sprintf(buffer,
					"%0.2f pm1.0\r\n%0.2f pm2.5\r\n%0.2f pm4.0\r\n%0.2f pm10.0\r\n",
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 80018ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001960 <get_sps30_measurement+0xfc>)
 80018ee:	681b      	ldr	r3, [r3, #0]
			sprintf(buffer,
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fe41 	bl	8000578 <__aeabi_f2d>
 80018f6:	4682      	mov	sl, r0
 80018f8:	468b      	mov	fp, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 80018fa:	4b19      	ldr	r3, [pc, #100]	@ (8001960 <get_sps30_measurement+0xfc>)
 80018fc:	685b      	ldr	r3, [r3, #4]
			sprintf(buffer,
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fe3a 	bl	8000578 <__aeabi_f2d>
 8001904:	4604      	mov	r4, r0
 8001906:	460d      	mov	r5, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 8001908:	4b15      	ldr	r3, [pc, #84]	@ (8001960 <get_sps30_measurement+0xfc>)
 800190a:	689b      	ldr	r3, [r3, #8]
			sprintf(buffer,
 800190c:	4618      	mov	r0, r3
 800190e:	f7fe fe33 	bl	8000578 <__aeabi_f2d>
 8001912:	4680      	mov	r8, r0
 8001914:	4689      	mov	r9, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 8001916:	4b12      	ldr	r3, [pc, #72]	@ (8001960 <get_sps30_measurement+0xfc>)
 8001918:	68db      	ldr	r3, [r3, #12]
			sprintf(buffer,
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fe2c 	bl	8000578 <__aeabi_f2d>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4638      	mov	r0, r7
 8001926:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800192a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800192e:	e9cd 4500 	strd	r4, r5, [sp]
 8001932:	4652      	mov	r2, sl
 8001934:	465b      	mov	r3, fp
 8001936:	490f      	ldr	r1, [pc, #60]	@ (8001974 <get_sps30_measurement+0x110>)
 8001938:	f01d f912 	bl	801eb60 <siprintf>

			HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 800193c:	463b      	mov	r3, r7
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fcae 	bl	80002a0 <strlen>
 8001944:	4603      	mov	r3, r0
 8001946:	b29a      	uxth	r2, r3
 8001948:	4639      	mov	r1, r7
 800194a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800194e:	4808      	ldr	r0, [pc, #32]	@ (8001970 <get_sps30_measurement+0x10c>)
 8001950:	f00a fcde 	bl	800c310 <HAL_UART_Transmit>
		}
	}

	//	ret =	sps30_stop_measurement();

}
 8001954:	bf00      	nop
 8001956:	3768      	adds	r7, #104	@ 0x68
 8001958:	46bd      	mov	sp, r7
 800195a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800195e:	bf00      	nop
 8001960:	20001798 	.word	0x20001798
 8001964:	20001530 	.word	0x20001530
 8001968:	20001578 	.word	0x20001578
 800196c:	080223b4 	.word	0x080223b4
 8001970:	20001a74 	.word	0x20001a74
 8001974:	080223e8 	.word	0x080223e8

08001978 <check_peripheral_error>:
static void check_peripheral_error() {
 8001978:	b580      	push	{r7, lr}
 800197a:	b08e      	sub	sp, #56	@ 0x38
 800197c:	af00      	add	r7, sp, #0
	if (_RunTime_Packet.console_uart_error) {
 800197e:	4b29      	ldr	r3, [pc, #164]	@ (8001a24 <check_peripheral_error+0xac>)
 8001980:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <check_peripheral_error+0x1c>
		_RunTime_Packet.console_uart_error = 0; //we clear it and reset the peripherals
 8001988:	4b26      	ldr	r3, [pc, #152]	@ (8001a24 <check_peripheral_error+0xac>)
 800198a:	2200      	movs	r2, #0
 800198c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		console_uart_init();
 8001990:	f010 fd00 	bl	8012394 <console_uart_init>
	}

	if (_RunTime_Packet.sps30_uart_error) {
 8001994:	4b23      	ldr	r3, [pc, #140]	@ (8001a24 <check_peripheral_error+0xac>)
 8001996:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800199a:	2b00      	cmp	r3, #0
 800199c:	d015      	beq.n	80019ca <check_peripheral_error+0x52>
		_RunTime_Packet.sps30_uart_error = 0;
 800199e:	4b21      	ldr	r3, [pc, #132]	@ (8001a24 <check_peripheral_error+0xac>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		disable_5v();
 80019a6:	2200      	movs	r2, #0
 80019a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019ac:	481e      	ldr	r0, [pc, #120]	@ (8001a28 <check_peripheral_error+0xb0>)
 80019ae:	f004 fbf3 	bl	8006198 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80019b2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019b6:	f002 fc17 	bl	80041e8 <HAL_Delay>
		enable_5v();
 80019ba:	2201      	movs	r2, #1
 80019bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019c0:	4819      	ldr	r0, [pc, #100]	@ (8001a28 <check_peripheral_error+0xb0>)
 80019c2:	f004 fbe9 	bl	8006198 <HAL_GPIO_WritePin>
		init_sps30();
 80019c6:	f7ff ff31 	bl	800182c <init_sps30>
			!= HAL_OK) {

		_RunTime_Packet.scd4x_i2c_error = 1;
	}
#elif use_scd30
	if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (0x61 << 1), 5, 1000)
 80019ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019ce:	2205      	movs	r2, #5
 80019d0:	21c2      	movs	r1, #194	@ 0xc2
 80019d2:	4816      	ldr	r0, [pc, #88]	@ (8001a2c <check_peripheral_error+0xb4>)
 80019d4:	f005 f8b6 	bl	8006b44 <HAL_I2C_IsDeviceReady>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d019      	beq.n	8001a12 <check_peripheral_error+0x9a>
			!= HAL_OK) {

		if (debug_scd_pm) {
 80019de:	4b14      	ldr	r3, [pc, #80]	@ (8001a30 <check_peripheral_error+0xb8>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d010      	beq.n	8001a08 <check_peripheral_error+0x90>
			char buf_error[50];
			sprintf(buf_error, "error in scd30 i2c so not running it\n");
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	4912      	ldr	r1, [pc, #72]	@ (8001a34 <check_peripheral_error+0xbc>)
 80019ea:	4618      	mov	r0, r3
 80019ec:	f01d f8b8 	bl	801eb60 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) buf_error, strlen(buf_error),
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fc54 	bl	80002a0 <strlen>
 80019f8:	4603      	mov	r3, r0
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	1d39      	adds	r1, r7, #4
 80019fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a02:	480d      	ldr	r0, [pc, #52]	@ (8001a38 <check_peripheral_error+0xc0>)
 8001a04:	f00a fc84 	bl	800c310 <HAL_UART_Transmit>
					1000);
		}
		_RunTime_Packet.scd4x_i2c_error = 1;
 8001a08:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <check_peripheral_error+0xac>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	{
		_RunTime_Packet.scd4x_i2c_error = 0;
	}
#endif

}
 8001a10:	e003      	b.n	8001a1a <check_peripheral_error+0xa2>
		_RunTime_Packet.scd4x_i2c_error = 0;
 8001a12:	4b04      	ldr	r3, [pc, #16]	@ (8001a24 <check_peripheral_error+0xac>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
}
 8001a1a:	bf00      	nop
 8001a1c:	3738      	adds	r7, #56	@ 0x38
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20001530 	.word	0x20001530
 8001a28:	40020400 	.word	0x40020400
 8001a2c:	20001838 	.word	0x20001838
 8001a30:	20001578 	.word	0x20001578
 8001a34:	08022420 	.word	0x08022420
 8001a38:	20001a74 	.word	0x20001a74

08001a3c <sensor_calibration>:
static void sensor_calibration() {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.PM_calibration && !_RunTime_Packet.usb_detection) {
 8001a40:	4b08      	ldr	r3, [pc, #32]	@ (8001a64 <sensor_calibration+0x28>)
 8001a42:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00a      	beq.n	8001a60 <sensor_calibration+0x24>
 8001a4a:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <sensor_calibration+0x28>)
 8001a4c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d105      	bne.n	8001a60 <sensor_calibration+0x24>
		_RunTime_Packet.PM_calibration = 0;
 8001a54:	4b03      	ldr	r3, [pc, #12]	@ (8001a64 <sensor_calibration+0x28>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
		sps30_start_manual_fan_cleaning();
 8001a5c:	f014 f82d 	bl	8015aba <sps30_start_manual_fan_cleaning>
//		scd4x_perform_forced_recalibration(
//				_RunTime_Packet._target_co2_concentration,
//				&_RunTime_Packet._frc_correction);
//	}

}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20001530 	.word	0x20001530

08001a68 <sleep>:
static void sleep() {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0

//save stuff to sd card right here then go to sleep

	check_peripheral_error();
 8001a6c:	f7ff ff84 	bl	8001978 <check_peripheral_error>
	GREEN_LED_PWM(disable_led);
 8001a70:	4b33      	ldr	r3, [pc, #204]	@ (8001b40 <sleep+0xd8>)
 8001a72:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a76:	635a      	str	r2, [r3, #52]	@ 0x34
	RED_LED_PWM(disable_led);
 8001a78:	4b31      	ldr	r3, [pc, #196]	@ (8001b40 <sleep+0xd8>)
 8001a7a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a7e:	639a      	str	r2, [r3, #56]	@ 0x38
	BLUE_LED_PWM(disable_led);
 8001a80:	4a30      	ldr	r2, [pc, #192]	@ (8001b44 <sleep+0xdc>)
 8001a82:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a86:	2008      	movs	r0, #8
 8001a88:	f7ff fac4 	bl	8001014 <setSoftPWM>

	HAL_ADC_DeInit(&hadc1);
 8001a8c:	482e      	ldr	r0, [pc, #184]	@ (8001b48 <sleep+0xe0>)
 8001a8e:	f002 fc56 	bl	800433e <HAL_ADC_DeInit>
	HAL_UART_Transmit(&huart1, (uint8_t*) "sleepTime\r\n", 11, 1000);
 8001a92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a96:	220b      	movs	r2, #11
 8001a98:	492c      	ldr	r1, [pc, #176]	@ (8001b4c <sleep+0xe4>)
 8001a9a:	482d      	ldr	r0, [pc, #180]	@ (8001b50 <sleep+0xe8>)
 8001a9c:	f00a fc38 	bl	800c310 <HAL_UART_Transmit>
	disable_5v();
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001aa6:	482b      	ldr	r0, [pc, #172]	@ (8001b54 <sleep+0xec>)
 8001aa8:	f004 fb76 	bl	8006198 <HAL_GPIO_WritePin>
	disable_motion();
 8001aac:	2201      	movs	r2, #1
 8001aae:	2102      	movs	r1, #2
 8001ab0:	4829      	ldr	r0, [pc, #164]	@ (8001b58 <sleep+0xf0>)
 8001ab2:	f004 fb71 	bl	8006198 <HAL_GPIO_WritePin>
	scd4x_power_down();
#elif use_scd30
//	scd4x_stop_periodic_measurement();
//	scd4x_power_down();
	//check_peripheral_error() ;
	if (!_RunTime_Packet.scd4x_i2c_error) {
 8001ab6:	4b29      	ldr	r3, [pc, #164]	@ (8001b5c <sleep+0xf4>)
 8001ab8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d106      	bne.n	8001ace <sleep+0x66>
	scd30_stop_periodic_measurement();
 8001ac0:	f012 fcc0 	bl	8014444 <scd30_stop_periodic_measurement>
	scd30_activate_auto_calibration(0);
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f012 fde5 	bl	8014694 <scd30_activate_auto_calibration>
	scd30_soft_reset();
 8001aca:	f013 f869 	bl	8014ba0 <scd30_soft_reset>
	}
#endif
	console_uart_deinit();
 8001ace:	f010 fc55 	bl	801237c <console_uart_deinit>
	sensirion_i2c_hal_free();
 8001ad2:	f013 fab3 	bl	801503c <sensirion_i2c_hal_free>
	sensirion_uart_close();
 8001ad6:	f013 fe83 	bl	80157e0 <sensirion_uart_close>
	MX_USB_DEVICE_DeInit();
 8001ada:	f01b f999 	bl	801ce10 <MX_USB_DEVICE_DeInit>

	HAL_TIM_Base_DeInit(&htim1);
 8001ade:	4820      	ldr	r0, [pc, #128]	@ (8001b60 <sleep+0xf8>)
 8001ae0:	f009 fb4f 	bl	800b182 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim2);
 8001ae4:	481f      	ldr	r0, [pc, #124]	@ (8001b64 <sleep+0xfc>)
 8001ae6:	f009 fb4c 	bl	800b182 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim3);
 8001aea:	481f      	ldr	r0, [pc, #124]	@ (8001b68 <sleep+0x100>)
 8001aec:	f009 fb49 	bl	800b182 <HAL_TIM_Base_DeInit>
	HAL_DMA_DeInit(&hdma_tim1_up);
 8001af0:	481e      	ldr	r0, [pc, #120]	@ (8001b6c <sleep+0x104>)
 8001af2:	f003 fa47 	bl	8004f84 <HAL_DMA_DeInit>
	HAL_SuspendTick();
 8001af6:	f002 fb9b 	bl	8004230 <HAL_SuspendTick>
	gpio_disable();
 8001afa:	f001 fcfb 	bl	80034f4 <gpio_disable>
//	   __HAL_RCC_GPIOD_CLK_DISABLE();
//	   __HAL_RCC_GPIOE_CLK_DISABLE();
//	   __HAL_RCC_GPIOH_CLK_DISABLE();

	   /* FLASH Deep Power Down Mode enabled */
	   HAL_PWREx_EnableFlashPowerDown();
 8001afe:	f007 f85b 	bl	8008bb8 <HAL_PWREx_EnableFlashPowerDown>

	//HAL_RCC_DeInit();
	//clock_speed_slow();


	Rtc_Alarm_watchdog();
 8001b02:	f012 f8f9 	bl	8013cf8 <Rtc_Alarm_watchdog>
	do {
	HAL_IWDG_Refresh(&hiwdg);
 8001b06:	481a      	ldr	r0, [pc, #104]	@ (8001b70 <sleep+0x108>)
 8001b08:	f005 fd12 	bl	8007530 <HAL_IWDG_Refresh>
	/*## Enter Stop Mode #######################################################*/
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	2001      	movs	r0, #1
 8001b10:	f007 f822 	bl	8008b58 <HAL_PWR_EnterSTOPMode>
	//HAL_IWDG_Refresh(&hiwdg);
	Rtc_Alarm_watchdog();
 8001b14:	f012 f8f0 	bl	8013cf8 <Rtc_Alarm_watchdog>

	Rtc_manual_alarm();
 8001b18:	f012 f970 	bl	8013dfc <Rtc_manual_alarm>


	}while(set_alarm_Time == 0 && _RunTime_Packet.pwr_off_det == 0 && _RunTime_Packet.usb_detection == 0);
 8001b1c:	4b15      	ldr	r3, [pc, #84]	@ (8001b74 <sleep+0x10c>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d109      	bne.n	8001b38 <sleep+0xd0>
 8001b24:	4b0d      	ldr	r3, [pc, #52]	@ (8001b5c <sleep+0xf4>)
 8001b26:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d104      	bne.n	8001b38 <sleep+0xd0>
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b5c <sleep+0xf4>)
 8001b30:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0e6      	beq.n	8001b06 <sleep+0x9e>

	Rtc_Alarm_watchdog_disable();
 8001b38:	f012 f8cc 	bl	8013cd4 <Rtc_Alarm_watchdog_disable>
}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40000400 	.word	0x40000400
 8001b44:	20000324 	.word	0x20000324
 8001b48:	200017f0 	.word	0x200017f0
 8001b4c:	08022448 	.word	0x08022448
 8001b50:	20001a74 	.word	0x20001a74
 8001b54:	40020400 	.word	0x40020400
 8001b58:	40020000 	.word	0x40020000
 8001b5c:	20001530 	.word	0x20001530
 8001b60:	2000193c 	.word	0x2000193c
 8001b64:	20001984 	.word	0x20001984
 8001b68:	200019cc 	.word	0x200019cc
 8001b6c:	20001a14 	.word	0x20001a14
 8001b70:	2000188c 	.word	0x2000188c
 8001b74:	20000029 	.word	0x20000029

08001b78 <wakeup>:
static void wakeup() {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0

	//also add usb stuff

	HAL_RCC_DeInit();
 8001b7c:	f007 fd7a 	bl	8009674 <HAL_RCC_DeInit>
	clock_speed_high();
 8001b80:	f7ff fb50 	bl	8001224 <clock_speed_high>

	HAL_PWREx_DisableFlashPowerDown();
 8001b84:	f007 f824 	bl	8008bd0 <HAL_PWREx_DisableFlashPowerDown>
	HAL_ResumeTick();
 8001b88:	f002 fb62 	bl	8004250 <HAL_ResumeTick>
	gpio_enable();
 8001b8c:	f001 fcbe 	bl	800350c <gpio_enable>
	pwr_off_detected();
 8001b90:	f7ff fb24 	bl	80011dc <pwr_off_detected>
	enable_5v();
 8001b94:	2201      	movs	r2, #1
 8001b96:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b9a:	4843      	ldr	r0, [pc, #268]	@ (8001ca8 <wakeup+0x130>)
 8001b9c:	f004 fafc 	bl	8006198 <HAL_GPIO_WritePin>
	enable_motion();
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2102      	movs	r1, #2
 8001ba4:	4841      	ldr	r0, [pc, #260]	@ (8001cac <wakeup+0x134>)
 8001ba6:	f004 faf7 	bl	8006198 <HAL_GPIO_WritePin>
	console_uart_init();
 8001baa:	f010 fbf3 	bl	8012394 <console_uart_init>

	MX_DMA_Init();
 8001bae:	f7ff faf5 	bl	800119c <MX_DMA_Init>
	MX_TIM1_Init();
 8001bb2:	f001 f915 	bl	8002de0 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001bb6:	f001 f963 	bl	8002e80 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001bba:	f001 f9af 	bl	8002f1c <MX_TIM3_Init>

#ifdef use_scd40x
	init_scd4x_i2c();
#elif use_scd30
	init_scd30_i2c();
 8001bbe:	f7ff fca1 	bl	8001504 <init_scd30_i2c>
#endif

	if (Mount_SD("/") == FR_OK) {
 8001bc2:	483b      	ldr	r0, [pc, #236]	@ (8001cb0 <wakeup+0x138>)
 8001bc4:	f01a fa4c 	bl	801c060 <Mount_SD>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d105      	bne.n	8001bda <wakeup+0x62>
		Unmount_SD("/");
 8001bce:	4838      	ldr	r0, [pc, #224]	@ (8001cb0 <wakeup+0x138>)
 8001bd0:	f01a fa72 	bl	801c0b8 <Unmount_SD>
		MX_USB_DEVICE_Init(); //initialize usb anyways
 8001bd4:	f01b f92e 	bl	801ce34 <MX_USB_DEVICE_Init>
 8001bd8:	e002      	b.n	8001be0 <wakeup+0x68>
	} else {
		datawritten = 2;
 8001bda:	4b36      	ldr	r3, [pc, #216]	@ (8001cb4 <wakeup+0x13c>)
 8001bdc:	2202      	movs	r2, #2
 8001bde:	701a      	strb	r2, [r3, #0]
	}

	if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 8001be0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001be4:	4831      	ldr	r0, [pc, #196]	@ (8001cac <wakeup+0x134>)
 8001be6:	f004 fabf 	bl	8006168 <HAL_GPIO_ReadPin>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d102      	bne.n	8001bf6 <wakeup+0x7e>
		init_sps30();
 8001bf0:	f7ff fe1c 	bl	800182c <init_sps30>
 8001bf4:	e00f      	b.n	8001c16 <wakeup+0x9e>
	} else {
		_RunTime_Packet.usb_detection = 1;
 8001bf6:	4b30      	ldr	r3, [pc, #192]	@ (8001cb8 <wakeup+0x140>)
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		_RunTime_Packet.usb_start_timer = 1;
 8001bfe:	4b2e      	ldr	r3, [pc, #184]	@ (8001cb8 <wakeup+0x140>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		usb_time_keep = 0;
 8001c06:	4b2d      	ldr	r3, [pc, #180]	@ (8001cbc <wakeup+0x144>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
		prev_usb_time_ = HAL_GetTick();
 8001c0c:	f002 fae0 	bl	80041d0 <HAL_GetTick>
 8001c10:	4603      	mov	r3, r0
 8001c12:	4a2b      	ldr	r2, [pc, #172]	@ (8001cc0 <wakeup+0x148>)
 8001c14:	6013      	str	r3, [r2, #0]
	}
	pwr_off_detected();
 8001c16:	f7ff fae1 	bl	80011dc <pwr_off_detected>
	BLUE_LED_PWM(disable_led);
 8001c1a:	4a2a      	ldr	r2, [pc, #168]	@ (8001cc4 <wakeup+0x14c>)
 8001c1c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c20:	2008      	movs	r0, #8
 8001c22:	f7ff f9f7 	bl	8001014 <setSoftPWM>
	GREEN_LED_PWM(disable_led);
 8001c26:	4b28      	ldr	r3, [pc, #160]	@ (8001cc8 <wakeup+0x150>)
 8001c28:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c2c:	635a      	str	r2, [r3, #52]	@ 0x34
	RED_LED_PWM(disable_led);
 8001c2e:	4b26      	ldr	r3, [pc, #152]	@ (8001cc8 <wakeup+0x150>)
 8001c30:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c34:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_TIM_Base_Start(&htim1);
 8001c36:	4825      	ldr	r0, [pc, #148]	@ (8001ccc <wakeup+0x154>)
 8001c38:	f009 faf8 	bl	800b22c <HAL_TIM_Base_Start>
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t) &(dataA[0]),
 8001c3c:	4921      	ldr	r1, [pc, #132]	@ (8001cc4 <wakeup+0x14c>)
 8001c3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c42:	4a23      	ldr	r2, [pc, #140]	@ (8001cd0 <wakeup+0x158>)
 8001c44:	4823      	ldr	r0, [pc, #140]	@ (8001cd4 <wakeup+0x15c>)
 8001c46:	f003 f9fb 	bl	8005040 <HAL_DMA_Start>
			(uint32_t) &(BLUE_LED_GPIO_Port->BSRR),
			sizeof(dataA) / sizeof(dataA[0]));
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001c4a:	4b20      	ldr	r3, [pc, #128]	@ (8001ccc <wakeup+0x154>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68da      	ldr	r2, [r3, #12]
 8001c50:	4b1e      	ldr	r3, [pc, #120]	@ (8001ccc <wakeup+0x154>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c58:	60da      	str	r2, [r3, #12]
	BLUE_LED_PWM(disable_led);
 8001c5a:	4a1a      	ldr	r2, [pc, #104]	@ (8001cc4 <wakeup+0x14c>)
 8001c5c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c60:	2008      	movs	r0, #8
 8001c62:	f7ff f9d7 	bl	8001014 <setSoftPWM>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //for green led
 8001c66:	2100      	movs	r1, #0
 8001c68:	481b      	ldr	r0, [pc, #108]	@ (8001cd8 <wakeup+0x160>)
 8001c6a:	f009 fc23 	bl	800b4b4 <HAL_TIM_PWM_Start>
	GREEN_LED_PWM(disable_led);
 8001c6e:	4b16      	ldr	r3, [pc, #88]	@ (8001cc8 <wakeup+0x150>)
 8001c70:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c74:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //for red led
 8001c76:	2104      	movs	r1, #4
 8001c78:	4817      	ldr	r0, [pc, #92]	@ (8001cd8 <wakeup+0x160>)
 8001c7a:	f009 fc1b 	bl	800b4b4 <HAL_TIM_PWM_Start>
	RED_LED_PWM(disable_led);
 8001c7e:	4b12      	ldr	r3, [pc, #72]	@ (8001cc8 <wakeup+0x150>)
 8001c80:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c84:	639a      	str	r2, [r3, #56]	@ 0x38

	adc_Measure(&_RunTime_Packet.battery_voltage);
 8001c86:	4815      	ldr	r0, [pc, #84]	@ (8001cdc <wakeup+0x164>)
 8001c88:	f012 faa6 	bl	80141d8 <adc_Measure>
		led_awake_routine();
 8001c8c:	f000 f854 	bl	8001d38 <led_awake_routine>

	pwr_off_detected();
 8001c90:	f7ff faa4 	bl	80011dc <pwr_off_detected>



	HAL_UART_Transmit(&huart1, (uint8_t*) "wakeTime\r\n", 10, 1000);
 8001c94:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c98:	220a      	movs	r2, #10
 8001c9a:	4911      	ldr	r1, [pc, #68]	@ (8001ce0 <wakeup+0x168>)
 8001c9c:	4811      	ldr	r0, [pc, #68]	@ (8001ce4 <wakeup+0x16c>)
 8001c9e:	f00a fb37 	bl	800c310 <HAL_UART_Transmit>
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40020400 	.word	0x40020400
 8001cac:	40020000 	.word	0x40020000
 8001cb0:	08022454 	.word	0x08022454
 8001cb4:	2000232c 	.word	0x2000232c
 8001cb8:	20001530 	.word	0x20001530
 8001cbc:	20001584 	.word	0x20001584
 8001cc0:	200017c8 	.word	0x200017c8
 8001cc4:	20000324 	.word	0x20000324
 8001cc8:	40000400 	.word	0x40000400
 8001ccc:	2000193c 	.word	0x2000193c
 8001cd0:	40020418 	.word	0x40020418
 8001cd4:	20001a14 	.word	0x20001a14
 8001cd8:	200019cc 	.word	0x200019cc
 8001cdc:	20001550 	.word	0x20001550
 8001ce0:	08022458 	.word	0x08022458
 8001ce4:	20001a74 	.word	0x20001a74

08001ce8 <green_led_blink>:

static void green_led_blink() {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0

	GREEN_LED_PWM(0);
 8001cec:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <green_led_blink+0x4c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001cf2:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001cf6:	f002 fa77 	bl	80041e8 <HAL_Delay>

	GREEN_LED_PWM(disable_led);
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001d34 <green_led_blink+0x4c>)
 8001cfc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d00:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001d02:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001d06:	f002 fa6f 	bl	80041e8 <HAL_Delay>

	GREEN_LED_PWM(0);
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d34 <green_led_blink+0x4c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001d10:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001d14:	f002 fa68 	bl	80041e8 <HAL_Delay>

	GREEN_LED_PWM(disable_led);
 8001d18:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <green_led_blink+0x4c>)
 8001d1a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d1e:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001d20:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001d24:	f002 fa60 	bl	80041e8 <HAL_Delay>

	GREEN_LED_PWM(0);
 8001d28:	4b02      	ldr	r3, [pc, #8]	@ (8001d34 <green_led_blink+0x4c>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40000400 	.word	0x40000400

08001d38 <led_awake_routine>:

 void led_awake_routine() {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.sd_card_disk_write_error == 0) //no errors in sdcard
 8001d3c:	4ba6      	ldr	r3, [pc, #664]	@ (8001fd8 <led_awake_routine+0x2a0>)
 8001d3e:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f040 8195 	bne.w	8002072 <led_awake_routine+0x33a>
			{
		if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is detected, then just turn the blue led on
 8001d48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d4c:	48a3      	ldr	r0, [pc, #652]	@ (8001fdc <led_awake_routine+0x2a4>)
 8001d4e:	f004 fa0b 	bl	8006168 <HAL_GPIO_ReadPin>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d025      	beq.n	8001da4 <led_awake_routine+0x6c>
				{

			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8001d58:	4b9f      	ldr	r3, [pc, #636]	@ (8001fd8 <led_awake_routine+0x2a0>)
 8001d5a:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d5e:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8001fe0 <led_awake_routine+0x2a8>
 8001d62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6a:	db0d      	blt.n	8001d88 <led_awake_routine+0x50>
				GREEN_LED_PWM(0);
 8001d6c:	4b9d      	ldr	r3, [pc, #628]	@ (8001fe4 <led_awake_routine+0x2ac>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 8001d72:	4b9c      	ldr	r3, [pc, #624]	@ (8001fe4 <led_awake_routine+0x2ac>)
 8001d74:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d78:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8001d7a:	4a9b      	ldr	r2, [pc, #620]	@ (8001fe8 <led_awake_routine+0x2b0>)
 8001d7c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d80:	2008      	movs	r0, #8
 8001d82:	f7ff f947 	bl	8001014 <setSoftPWM>
			red_led_pwm_val = 0;
		}
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
		HAL_Delay(300);
	}
}
 8001d86:	e196      	b.n	80020b6 <led_awake_routine+0x37e>
				GREEN_LED_PWM(disable_led);
 8001d88:	4b96      	ldr	r3, [pc, #600]	@ (8001fe4 <led_awake_routine+0x2ac>)
 8001d8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d8e:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 8001d90:	4b94      	ldr	r3, [pc, #592]	@ (8001fe4 <led_awake_routine+0x2ac>)
 8001d92:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d96:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(0);
 8001d98:	4a93      	ldr	r2, [pc, #588]	@ (8001fe8 <led_awake_routine+0x2b0>)
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	2008      	movs	r0, #8
 8001d9e:	f7ff f939 	bl	8001014 <setSoftPWM>
}
 8001da2:	e188      	b.n	80020b6 <led_awake_routine+0x37e>
			BLUE_LED_PWM(disable_led); //we turn off the blue led incase it was on before
 8001da4:	4a90      	ldr	r2, [pc, #576]	@ (8001fe8 <led_awake_routine+0x2b0>)
 8001da6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001daa:	2008      	movs	r0, #8
 8001dac:	f7ff f932 	bl	8001014 <setSoftPWM>
			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8001db0:	4b89      	ldr	r3, [pc, #548]	@ (8001fd8 <led_awake_routine+0x2a0>)
 8001db2:	edd3 7a08 	vldr	s15, [r3, #32]
 8001db6:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8001fe0 <led_awake_routine+0x2a8>
 8001dba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc2:	db38      	blt.n	8001e36 <led_awake_routine+0xfe>
				RED_LED_PWM(disable_led);
 8001dc4:	4b87      	ldr	r3, [pc, #540]	@ (8001fe4 <led_awake_routine+0x2ac>)
 8001dc6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001dca:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8001dcc:	4a86      	ldr	r2, [pc, #536]	@ (8001fe8 <led_awake_routine+0x2b0>)
 8001dce:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001dd2:	2008      	movs	r0, #8
 8001dd4:	f7ff f91e 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8001dd8:	4b84      	ldr	r3, [pc, #528]	@ (8001fec <led_awake_routine+0x2b4>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d109      	bne.n	8001df4 <led_awake_routine+0xbc>
					green_led_pwm_val += 5;
 8001de0:	4b83      	ldr	r3, [pc, #524]	@ (8001ff0 <led_awake_routine+0x2b8>)
 8001de2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	3305      	adds	r3, #5
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	b21a      	sxth	r2, r3
 8001dee:	4b80      	ldr	r3, [pc, #512]	@ (8001ff0 <led_awake_routine+0x2b8>)
 8001df0:	801a      	strh	r2, [r3, #0]
 8001df2:	e008      	b.n	8001e06 <led_awake_routine+0xce>
					green_led_pwm_val -= 5;
 8001df4:	4b7e      	ldr	r3, [pc, #504]	@ (8001ff0 <led_awake_routine+0x2b8>)
 8001df6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	3b05      	subs	r3, #5
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	b21a      	sxth	r2, r3
 8001e02:	4b7b      	ldr	r3, [pc, #492]	@ (8001ff0 <led_awake_routine+0x2b8>)
 8001e04:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8001e06:	4b7a      	ldr	r3, [pc, #488]	@ (8001ff0 <led_awake_routine+0x2b8>)
 8001e08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e0c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e10:	dd03      	ble.n	8001e1a <led_awake_routine+0xe2>
					green_led_pwm_flag = 1;
 8001e12:	4b76      	ldr	r3, [pc, #472]	@ (8001fec <led_awake_routine+0x2b4>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	701a      	strb	r2, [r3, #0]
 8001e18:	e007      	b.n	8001e2a <led_awake_routine+0xf2>
				} else if (green_led_pwm_val <= 0) {
 8001e1a:	4b75      	ldr	r3, [pc, #468]	@ (8001ff0 <led_awake_routine+0x2b8>)
 8001e1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	dc02      	bgt.n	8001e2a <led_awake_routine+0xf2>
					green_led_pwm_flag = 0;
 8001e24:	4b71      	ldr	r3, [pc, #452]	@ (8001fec <led_awake_routine+0x2b4>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001e2a:	4b71      	ldr	r3, [pc, #452]	@ (8001ff0 <led_awake_routine+0x2b8>)
 8001e2c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e30:	4b6c      	ldr	r3, [pc, #432]	@ (8001fe4 <led_awake_routine+0x2ac>)
 8001e32:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001e34:	e13f      	b.n	80020b6 <led_awake_routine+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_Low
 8001e36:	4b68      	ldr	r3, [pc, #416]	@ (8001fd8 <led_awake_routine+0x2a0>)
 8001e38:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e3c:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 8001e40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e48:	dd42      	ble.n	8001ed0 <led_awake_routine+0x198>
					&& _RunTime_Packet.battery_voltage <= battery_Full) {
 8001e4a:	4b63      	ldr	r3, [pc, #396]	@ (8001fd8 <led_awake_routine+0x2a0>)
 8001e4c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e50:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8001fe0 <led_awake_routine+0x2a8>
 8001e54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5c:	d838      	bhi.n	8001ed0 <led_awake_routine+0x198>
				RED_LED_PWM(disable_led);
 8001e5e:	4b61      	ldr	r3, [pc, #388]	@ (8001fe4 <led_awake_routine+0x2ac>)
 8001e60:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e64:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8001e66:	4a60      	ldr	r2, [pc, #384]	@ (8001fe8 <led_awake_routine+0x2b0>)
 8001e68:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001e6c:	2008      	movs	r0, #8
 8001e6e:	f7ff f8d1 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8001e72:	4b5e      	ldr	r3, [pc, #376]	@ (8001fec <led_awake_routine+0x2b4>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d109      	bne.n	8001e8e <led_awake_routine+0x156>
					green_led_pwm_val += 5;
 8001e7a:	4b5d      	ldr	r3, [pc, #372]	@ (8001ff0 <led_awake_routine+0x2b8>)
 8001e7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	3305      	adds	r3, #5
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	b21a      	sxth	r2, r3
 8001e88:	4b59      	ldr	r3, [pc, #356]	@ (8001ff0 <led_awake_routine+0x2b8>)
 8001e8a:	801a      	strh	r2, [r3, #0]
 8001e8c:	e008      	b.n	8001ea0 <led_awake_routine+0x168>
					green_led_pwm_val -= 5;
 8001e8e:	4b58      	ldr	r3, [pc, #352]	@ (8001ff0 <led_awake_routine+0x2b8>)
 8001e90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	3b05      	subs	r3, #5
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	b21a      	sxth	r2, r3
 8001e9c:	4b54      	ldr	r3, [pc, #336]	@ (8001ff0 <led_awake_routine+0x2b8>)
 8001e9e:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8001ea0:	4b53      	ldr	r3, [pc, #332]	@ (8001ff0 <led_awake_routine+0x2b8>)
 8001ea2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ea6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001eaa:	dd03      	ble.n	8001eb4 <led_awake_routine+0x17c>
					green_led_pwm_flag = 1;
 8001eac:	4b4f      	ldr	r3, [pc, #316]	@ (8001fec <led_awake_routine+0x2b4>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	701a      	strb	r2, [r3, #0]
 8001eb2:	e007      	b.n	8001ec4 <led_awake_routine+0x18c>
				} else if (green_led_pwm_val <= 0) {
 8001eb4:	4b4e      	ldr	r3, [pc, #312]	@ (8001ff0 <led_awake_routine+0x2b8>)
 8001eb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	dc02      	bgt.n	8001ec4 <led_awake_routine+0x18c>
					green_led_pwm_flag = 0;
 8001ebe:	4b4b      	ldr	r3, [pc, #300]	@ (8001fec <led_awake_routine+0x2b4>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001ec4:	4b4a      	ldr	r3, [pc, #296]	@ (8001ff0 <led_awake_routine+0x2b8>)
 8001ec6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001eca:	4b46      	ldr	r3, [pc, #280]	@ (8001fe4 <led_awake_routine+0x2ac>)
 8001ecc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ece:	e0f2      	b.n	80020b6 <led_awake_routine+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_very_low
 8001ed0:	4b41      	ldr	r3, [pc, #260]	@ (8001fd8 <led_awake_routine+0x2a0>)
 8001ed2:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ed6:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001ff4 <led_awake_routine+0x2bc>
 8001eda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee2:	f340 808d 	ble.w	8002000 <led_awake_routine+0x2c8>
					&& _RunTime_Packet.battery_voltage <= battery_Low) {
 8001ee6:	4b3c      	ldr	r3, [pc, #240]	@ (8001fd8 <led_awake_routine+0x2a0>)
 8001ee8:	edd3 7a08 	vldr	s15, [r3, #32]
 8001eec:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 8001ef0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef8:	f200 8082 	bhi.w	8002000 <led_awake_routine+0x2c8>
				if (green_led_pwm_flag != red_led_pwm_flag) //for this we need flags to be sync with each other
 8001efc:	4b3b      	ldr	r3, [pc, #236]	@ (8001fec <led_awake_routine+0x2b4>)
 8001efe:	781a      	ldrb	r2, [r3, #0]
 8001f00:	4b3d      	ldr	r3, [pc, #244]	@ (8001ff8 <led_awake_routine+0x2c0>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d003      	beq.n	8001f10 <led_awake_routine+0x1d8>
					green_led_pwm_flag = red_led_pwm_flag;
 8001f08:	4b3b      	ldr	r3, [pc, #236]	@ (8001ff8 <led_awake_routine+0x2c0>)
 8001f0a:	781a      	ldrb	r2, [r3, #0]
 8001f0c:	4b37      	ldr	r3, [pc, #220]	@ (8001fec <led_awake_routine+0x2b4>)
 8001f0e:	701a      	strb	r2, [r3, #0]
				BLUE_LED_PWM(disable_led);
 8001f10:	4a35      	ldr	r2, [pc, #212]	@ (8001fe8 <led_awake_routine+0x2b0>)
 8001f12:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f16:	2008      	movs	r0, #8
 8001f18:	f7ff f87c 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8001f1c:	4b33      	ldr	r3, [pc, #204]	@ (8001fec <led_awake_routine+0x2b4>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d109      	bne.n	8001f38 <led_awake_routine+0x200>
					green_led_pwm_val += 5;
 8001f24:	4b32      	ldr	r3, [pc, #200]	@ (8001ff0 <led_awake_routine+0x2b8>)
 8001f26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	3305      	adds	r3, #5
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	b21a      	sxth	r2, r3
 8001f32:	4b2f      	ldr	r3, [pc, #188]	@ (8001ff0 <led_awake_routine+0x2b8>)
 8001f34:	801a      	strh	r2, [r3, #0]
 8001f36:	e008      	b.n	8001f4a <led_awake_routine+0x212>
					green_led_pwm_val -= 5;
 8001f38:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff0 <led_awake_routine+0x2b8>)
 8001f3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	3b05      	subs	r3, #5
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	b21a      	sxth	r2, r3
 8001f46:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff0 <led_awake_routine+0x2b8>)
 8001f48:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8001f4a:	4b29      	ldr	r3, [pc, #164]	@ (8001ff0 <led_awake_routine+0x2b8>)
 8001f4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f50:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f54:	dd03      	ble.n	8001f5e <led_awake_routine+0x226>
					green_led_pwm_flag = 1;
 8001f56:	4b25      	ldr	r3, [pc, #148]	@ (8001fec <led_awake_routine+0x2b4>)
 8001f58:	2201      	movs	r2, #1
 8001f5a:	701a      	strb	r2, [r3, #0]
 8001f5c:	e007      	b.n	8001f6e <led_awake_routine+0x236>
				} else if (green_led_pwm_val <= 0) {
 8001f5e:	4b24      	ldr	r3, [pc, #144]	@ (8001ff0 <led_awake_routine+0x2b8>)
 8001f60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	dc02      	bgt.n	8001f6e <led_awake_routine+0x236>
					green_led_pwm_flag = 0;
 8001f68:	4b20      	ldr	r3, [pc, #128]	@ (8001fec <led_awake_routine+0x2b4>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]
				if (!red_led_pwm_flag) {
 8001f6e:	4b22      	ldr	r3, [pc, #136]	@ (8001ff8 <led_awake_routine+0x2c0>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d109      	bne.n	8001f8a <led_awake_routine+0x252>
					red_led_pwm_val += 5;
 8001f76:	4b21      	ldr	r3, [pc, #132]	@ (8001ffc <led_awake_routine+0x2c4>)
 8001f78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	3305      	adds	r3, #5
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	b21a      	sxth	r2, r3
 8001f84:	4b1d      	ldr	r3, [pc, #116]	@ (8001ffc <led_awake_routine+0x2c4>)
 8001f86:	801a      	strh	r2, [r3, #0]
 8001f88:	e008      	b.n	8001f9c <led_awake_routine+0x264>
					red_led_pwm_val -= 5;
 8001f8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001ffc <led_awake_routine+0x2c4>)
 8001f8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	3b05      	subs	r3, #5
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	b21a      	sxth	r2, r3
 8001f98:	4b18      	ldr	r3, [pc, #96]	@ (8001ffc <led_awake_routine+0x2c4>)
 8001f9a:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 8001f9c:	4b17      	ldr	r3, [pc, #92]	@ (8001ffc <led_awake_routine+0x2c4>)
 8001f9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fa2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001fa6:	dd03      	ble.n	8001fb0 <led_awake_routine+0x278>
					red_led_pwm_flag = 1;
 8001fa8:	4b13      	ldr	r3, [pc, #76]	@ (8001ff8 <led_awake_routine+0x2c0>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	701a      	strb	r2, [r3, #0]
 8001fae:	e007      	b.n	8001fc0 <led_awake_routine+0x288>
				} else if (red_led_pwm_val <= 0) {
 8001fb0:	4b12      	ldr	r3, [pc, #72]	@ (8001ffc <led_awake_routine+0x2c4>)
 8001fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	dc02      	bgt.n	8001fc0 <led_awake_routine+0x288>
					red_led_pwm_flag = 0;
 8001fba:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff8 <led_awake_routine+0x2c0>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff0 <led_awake_routine+0x2b8>)
 8001fc2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001fc6:	4b07      	ldr	r3, [pc, #28]	@ (8001fe4 <led_awake_routine+0x2ac>)
 8001fc8:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8001fca:	4b0c      	ldr	r3, [pc, #48]	@ (8001ffc <led_awake_routine+0x2c4>)
 8001fcc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001fd0:	4b04      	ldr	r3, [pc, #16]	@ (8001fe4 <led_awake_routine+0x2ac>)
 8001fd2:	639a      	str	r2, [r3, #56]	@ 0x38
 8001fd4:	e06f      	b.n	80020b6 <led_awake_routine+0x37e>
 8001fd6:	bf00      	nop
 8001fd8:	20001530 	.word	0x20001530
 8001fdc:	40020000 	.word	0x40020000
 8001fe0:	40833333 	.word	0x40833333
 8001fe4:	40000400 	.word	0x40000400
 8001fe8:	20000324 	.word	0x20000324
 8001fec:	200012c4 	.word	0x200012c4
 8001ff0:	200012c6 	.word	0x200012c6
 8001ff4:	40533333 	.word	0x40533333
 8001ff8:	200012c5 	.word	0x200012c5
 8001ffc:	200012c8 	.word	0x200012c8
				GREEN_LED_PWM(disable_led);
 8002000:	4b2e      	ldr	r3, [pc, #184]	@ (80020bc <led_awake_routine+0x384>)
 8002002:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002006:	635a      	str	r2, [r3, #52]	@ 0x34
				BLUE_LED_PWM(disable_led);
 8002008:	4a2d      	ldr	r2, [pc, #180]	@ (80020c0 <led_awake_routine+0x388>)
 800200a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800200e:	2008      	movs	r0, #8
 8002010:	f7ff f800 	bl	8001014 <setSoftPWM>
				if (!red_led_pwm_flag) {
 8002014:	4b2b      	ldr	r3, [pc, #172]	@ (80020c4 <led_awake_routine+0x38c>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d109      	bne.n	8002030 <led_awake_routine+0x2f8>
					red_led_pwm_val += 5;
 800201c:	4b2a      	ldr	r3, [pc, #168]	@ (80020c8 <led_awake_routine+0x390>)
 800201e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002022:	b29b      	uxth	r3, r3
 8002024:	3305      	adds	r3, #5
 8002026:	b29b      	uxth	r3, r3
 8002028:	b21a      	sxth	r2, r3
 800202a:	4b27      	ldr	r3, [pc, #156]	@ (80020c8 <led_awake_routine+0x390>)
 800202c:	801a      	strh	r2, [r3, #0]
 800202e:	e008      	b.n	8002042 <led_awake_routine+0x30a>
					red_led_pwm_val -= 5;
 8002030:	4b25      	ldr	r3, [pc, #148]	@ (80020c8 <led_awake_routine+0x390>)
 8002032:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002036:	b29b      	uxth	r3, r3
 8002038:	3b05      	subs	r3, #5
 800203a:	b29b      	uxth	r3, r3
 800203c:	b21a      	sxth	r2, r3
 800203e:	4b22      	ldr	r3, [pc, #136]	@ (80020c8 <led_awake_routine+0x390>)
 8002040:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 8002042:	4b21      	ldr	r3, [pc, #132]	@ (80020c8 <led_awake_routine+0x390>)
 8002044:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002048:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800204c:	dd03      	ble.n	8002056 <led_awake_routine+0x31e>
					red_led_pwm_flag = 1;
 800204e:	4b1d      	ldr	r3, [pc, #116]	@ (80020c4 <led_awake_routine+0x38c>)
 8002050:	2201      	movs	r2, #1
 8002052:	701a      	strb	r2, [r3, #0]
 8002054:	e007      	b.n	8002066 <led_awake_routine+0x32e>
				} else if (red_led_pwm_val <= 0) {
 8002056:	4b1c      	ldr	r3, [pc, #112]	@ (80020c8 <led_awake_routine+0x390>)
 8002058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800205c:	2b00      	cmp	r3, #0
 800205e:	dc02      	bgt.n	8002066 <led_awake_routine+0x32e>
					red_led_pwm_flag = 0;
 8002060:	4b18      	ldr	r3, [pc, #96]	@ (80020c4 <led_awake_routine+0x38c>)
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8002066:	4b18      	ldr	r3, [pc, #96]	@ (80020c8 <led_awake_routine+0x390>)
 8002068:	f9b3 2000 	ldrsh.w	r2, [r3]
 800206c:	4b13      	ldr	r3, [pc, #76]	@ (80020bc <led_awake_routine+0x384>)
 800206e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002070:	e021      	b.n	80020b6 <led_awake_routine+0x37e>
		GREEN_LED_PWM(disable_led);
 8002072:	4b12      	ldr	r3, [pc, #72]	@ (80020bc <led_awake_routine+0x384>)
 8002074:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002078:	635a      	str	r2, [r3, #52]	@ 0x34
		BLUE_LED_PWM(disable_led);
 800207a:	4a11      	ldr	r2, [pc, #68]	@ (80020c0 <led_awake_routine+0x388>)
 800207c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002080:	2008      	movs	r0, #8
 8002082:	f7fe ffc7 	bl	8001014 <setSoftPWM>
		if (red_led_pwm_val != disable_led) {
 8002086:	4b10      	ldr	r3, [pc, #64]	@ (80020c8 <led_awake_routine+0x390>)
 8002088:	f9b3 3000 	ldrsh.w	r3, [r3]
 800208c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002090:	d004      	beq.n	800209c <led_awake_routine+0x364>
			red_led_pwm_val = disable_led;
 8002092:	4b0d      	ldr	r3, [pc, #52]	@ (80020c8 <led_awake_routine+0x390>)
 8002094:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002098:	801a      	strh	r2, [r3, #0]
 800209a:	e002      	b.n	80020a2 <led_awake_routine+0x36a>
			red_led_pwm_val = 0;
 800209c:	4b0a      	ldr	r3, [pc, #40]	@ (80020c8 <led_awake_routine+0x390>)
 800209e:	2200      	movs	r2, #0
 80020a0:	801a      	strh	r2, [r3, #0]
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
 80020a2:	4b09      	ldr	r3, [pc, #36]	@ (80020c8 <led_awake_routine+0x390>)
 80020a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80020a8:	4b04      	ldr	r3, [pc, #16]	@ (80020bc <led_awake_routine+0x384>)
 80020aa:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_Delay(300);
 80020ac:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80020b0:	f002 f89a 	bl	80041e8 <HAL_Delay>
}
 80020b4:	e7ff      	b.n	80020b6 <led_awake_routine+0x37e>
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40000400 	.word	0x40000400
 80020c0:	20000324 	.word	0x20000324
 80020c4:	200012c5 	.word	0x200012c5
 80020c8:	200012c8 	.word	0x200012c8

080020cc <blink_red>:

void blink_red() {
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
	GREEN_LED_PWM(disable_led);
 80020d0:	4b16      	ldr	r3, [pc, #88]	@ (800212c <blink_red+0x60>)
 80020d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80020d6:	635a      	str	r2, [r3, #52]	@ 0x34
	BLUE_LED_PWM(disable_led);
 80020d8:	4a15      	ldr	r2, [pc, #84]	@ (8002130 <blink_red+0x64>)
 80020da:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80020de:	2008      	movs	r0, #8
 80020e0:	f7fe ff98 	bl	8001014 <setSoftPWM>
	RED_LED_PWM(0); //we toggle red led
 80020e4:	4b11      	ldr	r3, [pc, #68]	@ (800212c <blink_red+0x60>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 80020ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020ee:	f002 f87b 	bl	80041e8 <HAL_Delay>
	RED_LED_PWM(disable_led); //we toggle red led
 80020f2:	4b0e      	ldr	r3, [pc, #56]	@ (800212c <blink_red+0x60>)
 80020f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80020f8:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 80020fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020fe:	f002 f873 	bl	80041e8 <HAL_Delay>
	RED_LED_PWM(0); //we toggle red led
 8002102:	4b0a      	ldr	r3, [pc, #40]	@ (800212c <blink_red+0x60>)
 8002104:	2200      	movs	r2, #0
 8002106:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 8002108:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800210c:	f002 f86c 	bl	80041e8 <HAL_Delay>
	RED_LED_PWM(disable_led); //we toggle red led
 8002110:	4b06      	ldr	r3, [pc, #24]	@ (800212c <blink_red+0x60>)
 8002112:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002116:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 8002118:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800211c:	f002 f864 	bl	80041e8 <HAL_Delay>
	RED_LED_PWM(0); //we toggle red led
 8002120:	4b02      	ldr	r3, [pc, #8]	@ (800212c <blink_red+0x60>)
 8002122:	2200      	movs	r2, #0
 8002124:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40000400 	.word	0x40000400
 8002130:	20000324 	.word	0x20000324

08002134 <led_awake_routine1>:

static void led_awake_routine1() {
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0


	if (_RunTime_Packet.sd_card_disk_write_error == 0) //no errors in sdcard
 8002138:	4ba6      	ldr	r3, [pc, #664]	@ (80023d4 <led_awake_routine1+0x2a0>)
 800213a:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 800213e:	2b00      	cmp	r3, #0
 8002140:	f040 8195 	bne.w	800246e <led_awake_routine1+0x33a>
			{
		if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is detected, then just turn the blue led on
 8002144:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002148:	48a3      	ldr	r0, [pc, #652]	@ (80023d8 <led_awake_routine1+0x2a4>)
 800214a:	f004 f80d 	bl	8006168 <HAL_GPIO_ReadPin>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d025      	beq.n	80021a0 <led_awake_routine1+0x6c>
				{

			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8002154:	4b9f      	ldr	r3, [pc, #636]	@ (80023d4 <led_awake_routine1+0x2a0>)
 8002156:	edd3 7a08 	vldr	s15, [r3, #32]
 800215a:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 80023dc <led_awake_routine1+0x2a8>
 800215e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002166:	db0d      	blt.n	8002184 <led_awake_routine1+0x50>
				GREEN_LED_PWM(0);
 8002168:	4b9d      	ldr	r3, [pc, #628]	@ (80023e0 <led_awake_routine1+0x2ac>)
 800216a:	2200      	movs	r2, #0
 800216c:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 800216e:	4b9c      	ldr	r3, [pc, #624]	@ (80023e0 <led_awake_routine1+0x2ac>)
 8002170:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002174:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8002176:	4a9b      	ldr	r2, [pc, #620]	@ (80023e4 <led_awake_routine1+0x2b0>)
 8002178:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800217c:	2008      	movs	r0, #8
 800217e:	f7fe ff49 	bl	8001014 <setSoftPWM>
			red_led_pwm_val = 0;
		}
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
		HAL_Delay(300);
	}
}
 8002182:	e196      	b.n	80024b2 <led_awake_routine1+0x37e>
				GREEN_LED_PWM(disable_led);
 8002184:	4b96      	ldr	r3, [pc, #600]	@ (80023e0 <led_awake_routine1+0x2ac>)
 8002186:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800218a:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 800218c:	4b94      	ldr	r3, [pc, #592]	@ (80023e0 <led_awake_routine1+0x2ac>)
 800218e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002192:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(0);
 8002194:	4a93      	ldr	r2, [pc, #588]	@ (80023e4 <led_awake_routine1+0x2b0>)
 8002196:	2100      	movs	r1, #0
 8002198:	2008      	movs	r0, #8
 800219a:	f7fe ff3b 	bl	8001014 <setSoftPWM>
}
 800219e:	e188      	b.n	80024b2 <led_awake_routine1+0x37e>
			BLUE_LED_PWM(disable_led); //we turn off the blue led incase it was on before
 80021a0:	4a90      	ldr	r2, [pc, #576]	@ (80023e4 <led_awake_routine1+0x2b0>)
 80021a2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80021a6:	2008      	movs	r0, #8
 80021a8:	f7fe ff34 	bl	8001014 <setSoftPWM>
			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 80021ac:	4b89      	ldr	r3, [pc, #548]	@ (80023d4 <led_awake_routine1+0x2a0>)
 80021ae:	edd3 7a08 	vldr	s15, [r3, #32]
 80021b2:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 80023dc <led_awake_routine1+0x2a8>
 80021b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021be:	db38      	blt.n	8002232 <led_awake_routine1+0xfe>
				RED_LED_PWM(disable_led);
 80021c0:	4b87      	ldr	r3, [pc, #540]	@ (80023e0 <led_awake_routine1+0x2ac>)
 80021c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80021c6:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 80021c8:	4a86      	ldr	r2, [pc, #536]	@ (80023e4 <led_awake_routine1+0x2b0>)
 80021ca:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80021ce:	2008      	movs	r0, #8
 80021d0:	f7fe ff20 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 80021d4:	4b84      	ldr	r3, [pc, #528]	@ (80023e8 <led_awake_routine1+0x2b4>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d109      	bne.n	80021f0 <led_awake_routine1+0xbc>
					green_led_pwm_val += 60;
 80021dc:	4b83      	ldr	r3, [pc, #524]	@ (80023ec <led_awake_routine1+0x2b8>)
 80021de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	333c      	adds	r3, #60	@ 0x3c
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	b21a      	sxth	r2, r3
 80021ea:	4b80      	ldr	r3, [pc, #512]	@ (80023ec <led_awake_routine1+0x2b8>)
 80021ec:	801a      	strh	r2, [r3, #0]
 80021ee:	e008      	b.n	8002202 <led_awake_routine1+0xce>
					green_led_pwm_val -= 60;
 80021f0:	4b7e      	ldr	r3, [pc, #504]	@ (80023ec <led_awake_routine1+0x2b8>)
 80021f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	3b3c      	subs	r3, #60	@ 0x3c
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	b21a      	sxth	r2, r3
 80021fe:	4b7b      	ldr	r3, [pc, #492]	@ (80023ec <led_awake_routine1+0x2b8>)
 8002200:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8002202:	4b7a      	ldr	r3, [pc, #488]	@ (80023ec <led_awake_routine1+0x2b8>)
 8002204:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002208:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800220c:	dd03      	ble.n	8002216 <led_awake_routine1+0xe2>
					green_led_pwm_flag = 1;
 800220e:	4b76      	ldr	r3, [pc, #472]	@ (80023e8 <led_awake_routine1+0x2b4>)
 8002210:	2201      	movs	r2, #1
 8002212:	701a      	strb	r2, [r3, #0]
 8002214:	e007      	b.n	8002226 <led_awake_routine1+0xf2>
				} else if (green_led_pwm_val <= 0) {
 8002216:	4b75      	ldr	r3, [pc, #468]	@ (80023ec <led_awake_routine1+0x2b8>)
 8002218:	f9b3 3000 	ldrsh.w	r3, [r3]
 800221c:	2b00      	cmp	r3, #0
 800221e:	dc02      	bgt.n	8002226 <led_awake_routine1+0xf2>
					green_led_pwm_flag = 0;
 8002220:	4b71      	ldr	r3, [pc, #452]	@ (80023e8 <led_awake_routine1+0x2b4>)
 8002222:	2200      	movs	r2, #0
 8002224:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8002226:	4b71      	ldr	r3, [pc, #452]	@ (80023ec <led_awake_routine1+0x2b8>)
 8002228:	f9b3 2000 	ldrsh.w	r2, [r3]
 800222c:	4b6c      	ldr	r3, [pc, #432]	@ (80023e0 <led_awake_routine1+0x2ac>)
 800222e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002230:	e13f      	b.n	80024b2 <led_awake_routine1+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_Low
 8002232:	4b68      	ldr	r3, [pc, #416]	@ (80023d4 <led_awake_routine1+0x2a0>)
 8002234:	edd3 7a08 	vldr	s15, [r3, #32]
 8002238:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 800223c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002244:	dd42      	ble.n	80022cc <led_awake_routine1+0x198>
					&& _RunTime_Packet.battery_voltage <= battery_Full) {
 8002246:	4b63      	ldr	r3, [pc, #396]	@ (80023d4 <led_awake_routine1+0x2a0>)
 8002248:	edd3 7a08 	vldr	s15, [r3, #32]
 800224c:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 80023dc <led_awake_routine1+0x2a8>
 8002250:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002258:	d838      	bhi.n	80022cc <led_awake_routine1+0x198>
				RED_LED_PWM(disable_led);
 800225a:	4b61      	ldr	r3, [pc, #388]	@ (80023e0 <led_awake_routine1+0x2ac>)
 800225c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002260:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8002262:	4a60      	ldr	r2, [pc, #384]	@ (80023e4 <led_awake_routine1+0x2b0>)
 8002264:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002268:	2008      	movs	r0, #8
 800226a:	f7fe fed3 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 800226e:	4b5e      	ldr	r3, [pc, #376]	@ (80023e8 <led_awake_routine1+0x2b4>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d109      	bne.n	800228a <led_awake_routine1+0x156>
					green_led_pwm_val += 60;
 8002276:	4b5d      	ldr	r3, [pc, #372]	@ (80023ec <led_awake_routine1+0x2b8>)
 8002278:	f9b3 3000 	ldrsh.w	r3, [r3]
 800227c:	b29b      	uxth	r3, r3
 800227e:	333c      	adds	r3, #60	@ 0x3c
 8002280:	b29b      	uxth	r3, r3
 8002282:	b21a      	sxth	r2, r3
 8002284:	4b59      	ldr	r3, [pc, #356]	@ (80023ec <led_awake_routine1+0x2b8>)
 8002286:	801a      	strh	r2, [r3, #0]
 8002288:	e008      	b.n	800229c <led_awake_routine1+0x168>
					green_led_pwm_val -= 60;
 800228a:	4b58      	ldr	r3, [pc, #352]	@ (80023ec <led_awake_routine1+0x2b8>)
 800228c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002290:	b29b      	uxth	r3, r3
 8002292:	3b3c      	subs	r3, #60	@ 0x3c
 8002294:	b29b      	uxth	r3, r3
 8002296:	b21a      	sxth	r2, r3
 8002298:	4b54      	ldr	r3, [pc, #336]	@ (80023ec <led_awake_routine1+0x2b8>)
 800229a:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 800229c:	4b53      	ldr	r3, [pc, #332]	@ (80023ec <led_awake_routine1+0x2b8>)
 800229e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80022a6:	dd03      	ble.n	80022b0 <led_awake_routine1+0x17c>
					green_led_pwm_flag = 1;
 80022a8:	4b4f      	ldr	r3, [pc, #316]	@ (80023e8 <led_awake_routine1+0x2b4>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	701a      	strb	r2, [r3, #0]
 80022ae:	e007      	b.n	80022c0 <led_awake_routine1+0x18c>
				} else if (green_led_pwm_val <= 0) {
 80022b0:	4b4e      	ldr	r3, [pc, #312]	@ (80023ec <led_awake_routine1+0x2b8>)
 80022b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	dc02      	bgt.n	80022c0 <led_awake_routine1+0x18c>
					green_led_pwm_flag = 0;
 80022ba:	4b4b      	ldr	r3, [pc, #300]	@ (80023e8 <led_awake_routine1+0x2b4>)
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 80022c0:	4b4a      	ldr	r3, [pc, #296]	@ (80023ec <led_awake_routine1+0x2b8>)
 80022c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022c6:	4b46      	ldr	r3, [pc, #280]	@ (80023e0 <led_awake_routine1+0x2ac>)
 80022c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80022ca:	e0f2      	b.n	80024b2 <led_awake_routine1+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_very_low
 80022cc:	4b41      	ldr	r3, [pc, #260]	@ (80023d4 <led_awake_routine1+0x2a0>)
 80022ce:	edd3 7a08 	vldr	s15, [r3, #32]
 80022d2:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80023f0 <led_awake_routine1+0x2bc>
 80022d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022de:	f340 808d 	ble.w	80023fc <led_awake_routine1+0x2c8>
					&& _RunTime_Packet.battery_voltage <= battery_Low) {
 80022e2:	4b3c      	ldr	r3, [pc, #240]	@ (80023d4 <led_awake_routine1+0x2a0>)
 80022e4:	edd3 7a08 	vldr	s15, [r3, #32]
 80022e8:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 80022ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f4:	f200 8082 	bhi.w	80023fc <led_awake_routine1+0x2c8>
				if (green_led_pwm_flag != red_led_pwm_flag) //for this we need flags to be sync with each other
 80022f8:	4b3b      	ldr	r3, [pc, #236]	@ (80023e8 <led_awake_routine1+0x2b4>)
 80022fa:	781a      	ldrb	r2, [r3, #0]
 80022fc:	4b3d      	ldr	r3, [pc, #244]	@ (80023f4 <led_awake_routine1+0x2c0>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	429a      	cmp	r2, r3
 8002302:	d003      	beq.n	800230c <led_awake_routine1+0x1d8>
					green_led_pwm_flag = red_led_pwm_flag;
 8002304:	4b3b      	ldr	r3, [pc, #236]	@ (80023f4 <led_awake_routine1+0x2c0>)
 8002306:	781a      	ldrb	r2, [r3, #0]
 8002308:	4b37      	ldr	r3, [pc, #220]	@ (80023e8 <led_awake_routine1+0x2b4>)
 800230a:	701a      	strb	r2, [r3, #0]
				BLUE_LED_PWM(disable_led);
 800230c:	4a35      	ldr	r2, [pc, #212]	@ (80023e4 <led_awake_routine1+0x2b0>)
 800230e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002312:	2008      	movs	r0, #8
 8002314:	f7fe fe7e 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8002318:	4b33      	ldr	r3, [pc, #204]	@ (80023e8 <led_awake_routine1+0x2b4>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d109      	bne.n	8002334 <led_awake_routine1+0x200>
					green_led_pwm_val += 60;
 8002320:	4b32      	ldr	r3, [pc, #200]	@ (80023ec <led_awake_routine1+0x2b8>)
 8002322:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002326:	b29b      	uxth	r3, r3
 8002328:	333c      	adds	r3, #60	@ 0x3c
 800232a:	b29b      	uxth	r3, r3
 800232c:	b21a      	sxth	r2, r3
 800232e:	4b2f      	ldr	r3, [pc, #188]	@ (80023ec <led_awake_routine1+0x2b8>)
 8002330:	801a      	strh	r2, [r3, #0]
 8002332:	e008      	b.n	8002346 <led_awake_routine1+0x212>
					green_led_pwm_val -= 60;
 8002334:	4b2d      	ldr	r3, [pc, #180]	@ (80023ec <led_awake_routine1+0x2b8>)
 8002336:	f9b3 3000 	ldrsh.w	r3, [r3]
 800233a:	b29b      	uxth	r3, r3
 800233c:	3b3c      	subs	r3, #60	@ 0x3c
 800233e:	b29b      	uxth	r3, r3
 8002340:	b21a      	sxth	r2, r3
 8002342:	4b2a      	ldr	r3, [pc, #168]	@ (80023ec <led_awake_routine1+0x2b8>)
 8002344:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8002346:	4b29      	ldr	r3, [pc, #164]	@ (80023ec <led_awake_routine1+0x2b8>)
 8002348:	f9b3 3000 	ldrsh.w	r3, [r3]
 800234c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002350:	dd03      	ble.n	800235a <led_awake_routine1+0x226>
					green_led_pwm_flag = 1;
 8002352:	4b25      	ldr	r3, [pc, #148]	@ (80023e8 <led_awake_routine1+0x2b4>)
 8002354:	2201      	movs	r2, #1
 8002356:	701a      	strb	r2, [r3, #0]
 8002358:	e007      	b.n	800236a <led_awake_routine1+0x236>
				} else if (green_led_pwm_val <= 0) {
 800235a:	4b24      	ldr	r3, [pc, #144]	@ (80023ec <led_awake_routine1+0x2b8>)
 800235c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002360:	2b00      	cmp	r3, #0
 8002362:	dc02      	bgt.n	800236a <led_awake_routine1+0x236>
					green_led_pwm_flag = 0;
 8002364:	4b20      	ldr	r3, [pc, #128]	@ (80023e8 <led_awake_routine1+0x2b4>)
 8002366:	2200      	movs	r2, #0
 8002368:	701a      	strb	r2, [r3, #0]
				if (!red_led_pwm_flag) {
 800236a:	4b22      	ldr	r3, [pc, #136]	@ (80023f4 <led_awake_routine1+0x2c0>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d109      	bne.n	8002386 <led_awake_routine1+0x252>
					red_led_pwm_val += 60;
 8002372:	4b21      	ldr	r3, [pc, #132]	@ (80023f8 <led_awake_routine1+0x2c4>)
 8002374:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002378:	b29b      	uxth	r3, r3
 800237a:	333c      	adds	r3, #60	@ 0x3c
 800237c:	b29b      	uxth	r3, r3
 800237e:	b21a      	sxth	r2, r3
 8002380:	4b1d      	ldr	r3, [pc, #116]	@ (80023f8 <led_awake_routine1+0x2c4>)
 8002382:	801a      	strh	r2, [r3, #0]
 8002384:	e008      	b.n	8002398 <led_awake_routine1+0x264>
					red_led_pwm_val -= 60;
 8002386:	4b1c      	ldr	r3, [pc, #112]	@ (80023f8 <led_awake_routine1+0x2c4>)
 8002388:	f9b3 3000 	ldrsh.w	r3, [r3]
 800238c:	b29b      	uxth	r3, r3
 800238e:	3b3c      	subs	r3, #60	@ 0x3c
 8002390:	b29b      	uxth	r3, r3
 8002392:	b21a      	sxth	r2, r3
 8002394:	4b18      	ldr	r3, [pc, #96]	@ (80023f8 <led_awake_routine1+0x2c4>)
 8002396:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 8002398:	4b17      	ldr	r3, [pc, #92]	@ (80023f8 <led_awake_routine1+0x2c4>)
 800239a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800239e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023a2:	dd03      	ble.n	80023ac <led_awake_routine1+0x278>
					red_led_pwm_flag = 1;
 80023a4:	4b13      	ldr	r3, [pc, #76]	@ (80023f4 <led_awake_routine1+0x2c0>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	701a      	strb	r2, [r3, #0]
 80023aa:	e007      	b.n	80023bc <led_awake_routine1+0x288>
				} else if (red_led_pwm_val <= 0) {
 80023ac:	4b12      	ldr	r3, [pc, #72]	@ (80023f8 <led_awake_routine1+0x2c4>)
 80023ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	dc02      	bgt.n	80023bc <led_awake_routine1+0x288>
					red_led_pwm_flag = 0;
 80023b6:	4b0f      	ldr	r3, [pc, #60]	@ (80023f4 <led_awake_routine1+0x2c0>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 80023bc:	4b0b      	ldr	r3, [pc, #44]	@ (80023ec <led_awake_routine1+0x2b8>)
 80023be:	f9b3 2000 	ldrsh.w	r2, [r3]
 80023c2:	4b07      	ldr	r3, [pc, #28]	@ (80023e0 <led_awake_routine1+0x2ac>)
 80023c4:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 80023c6:	4b0c      	ldr	r3, [pc, #48]	@ (80023f8 <led_awake_routine1+0x2c4>)
 80023c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80023cc:	4b04      	ldr	r3, [pc, #16]	@ (80023e0 <led_awake_routine1+0x2ac>)
 80023ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80023d0:	e06f      	b.n	80024b2 <led_awake_routine1+0x37e>
 80023d2:	bf00      	nop
 80023d4:	20001530 	.word	0x20001530
 80023d8:	40020000 	.word	0x40020000
 80023dc:	40833333 	.word	0x40833333
 80023e0:	40000400 	.word	0x40000400
 80023e4:	20000324 	.word	0x20000324
 80023e8:	200012c4 	.word	0x200012c4
 80023ec:	200012c6 	.word	0x200012c6
 80023f0:	40533333 	.word	0x40533333
 80023f4:	200012c5 	.word	0x200012c5
 80023f8:	200012c8 	.word	0x200012c8
				GREEN_LED_PWM(disable_led);
 80023fc:	4b2e      	ldr	r3, [pc, #184]	@ (80024b8 <led_awake_routine1+0x384>)
 80023fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002402:	635a      	str	r2, [r3, #52]	@ 0x34
				BLUE_LED_PWM(disable_led);
 8002404:	4a2d      	ldr	r2, [pc, #180]	@ (80024bc <led_awake_routine1+0x388>)
 8002406:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800240a:	2008      	movs	r0, #8
 800240c:	f7fe fe02 	bl	8001014 <setSoftPWM>
				if (!red_led_pwm_flag) {
 8002410:	4b2b      	ldr	r3, [pc, #172]	@ (80024c0 <led_awake_routine1+0x38c>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d109      	bne.n	800242c <led_awake_routine1+0x2f8>
					red_led_pwm_val += 60;
 8002418:	4b2a      	ldr	r3, [pc, #168]	@ (80024c4 <led_awake_routine1+0x390>)
 800241a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800241e:	b29b      	uxth	r3, r3
 8002420:	333c      	adds	r3, #60	@ 0x3c
 8002422:	b29b      	uxth	r3, r3
 8002424:	b21a      	sxth	r2, r3
 8002426:	4b27      	ldr	r3, [pc, #156]	@ (80024c4 <led_awake_routine1+0x390>)
 8002428:	801a      	strh	r2, [r3, #0]
 800242a:	e008      	b.n	800243e <led_awake_routine1+0x30a>
					red_led_pwm_val -= 60;
 800242c:	4b25      	ldr	r3, [pc, #148]	@ (80024c4 <led_awake_routine1+0x390>)
 800242e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002432:	b29b      	uxth	r3, r3
 8002434:	3b3c      	subs	r3, #60	@ 0x3c
 8002436:	b29b      	uxth	r3, r3
 8002438:	b21a      	sxth	r2, r3
 800243a:	4b22      	ldr	r3, [pc, #136]	@ (80024c4 <led_awake_routine1+0x390>)
 800243c:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 800243e:	4b21      	ldr	r3, [pc, #132]	@ (80024c4 <led_awake_routine1+0x390>)
 8002440:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002444:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002448:	dd03      	ble.n	8002452 <led_awake_routine1+0x31e>
					red_led_pwm_flag = 1;
 800244a:	4b1d      	ldr	r3, [pc, #116]	@ (80024c0 <led_awake_routine1+0x38c>)
 800244c:	2201      	movs	r2, #1
 800244e:	701a      	strb	r2, [r3, #0]
 8002450:	e007      	b.n	8002462 <led_awake_routine1+0x32e>
				} else if (red_led_pwm_val <= 0) {
 8002452:	4b1c      	ldr	r3, [pc, #112]	@ (80024c4 <led_awake_routine1+0x390>)
 8002454:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002458:	2b00      	cmp	r3, #0
 800245a:	dc02      	bgt.n	8002462 <led_awake_routine1+0x32e>
					red_led_pwm_flag = 0;
 800245c:	4b18      	ldr	r3, [pc, #96]	@ (80024c0 <led_awake_routine1+0x38c>)
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8002462:	4b18      	ldr	r3, [pc, #96]	@ (80024c4 <led_awake_routine1+0x390>)
 8002464:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002468:	4b13      	ldr	r3, [pc, #76]	@ (80024b8 <led_awake_routine1+0x384>)
 800246a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800246c:	e021      	b.n	80024b2 <led_awake_routine1+0x37e>
		GREEN_LED_PWM(disable_led);
 800246e:	4b12      	ldr	r3, [pc, #72]	@ (80024b8 <led_awake_routine1+0x384>)
 8002470:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002474:	635a      	str	r2, [r3, #52]	@ 0x34
		BLUE_LED_PWM(disable_led);
 8002476:	4a11      	ldr	r2, [pc, #68]	@ (80024bc <led_awake_routine1+0x388>)
 8002478:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800247c:	2008      	movs	r0, #8
 800247e:	f7fe fdc9 	bl	8001014 <setSoftPWM>
		if (red_led_pwm_val != disable_led) {
 8002482:	4b10      	ldr	r3, [pc, #64]	@ (80024c4 <led_awake_routine1+0x390>)
 8002484:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002488:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800248c:	d004      	beq.n	8002498 <led_awake_routine1+0x364>
			red_led_pwm_val = disable_led;
 800248e:	4b0d      	ldr	r3, [pc, #52]	@ (80024c4 <led_awake_routine1+0x390>)
 8002490:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002494:	801a      	strh	r2, [r3, #0]
 8002496:	e002      	b.n	800249e <led_awake_routine1+0x36a>
			red_led_pwm_val = 0;
 8002498:	4b0a      	ldr	r3, [pc, #40]	@ (80024c4 <led_awake_routine1+0x390>)
 800249a:	2200      	movs	r2, #0
 800249c:	801a      	strh	r2, [r3, #0]
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
 800249e:	4b09      	ldr	r3, [pc, #36]	@ (80024c4 <led_awake_routine1+0x390>)
 80024a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80024a4:	4b04      	ldr	r3, [pc, #16]	@ (80024b8 <led_awake_routine1+0x384>)
 80024a6:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_Delay(300);
 80024a8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80024ac:	f001 fe9c 	bl	80041e8 <HAL_Delay>
}
 80024b0:	e7ff      	b.n	80024b2 <led_awake_routine1+0x37e>
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40000400 	.word	0x40000400
 80024bc:	20000324 	.word	0x20000324
 80024c0:	200012c5 	.word	0x200012c5
 80024c4:	200012c8 	.word	0x200012c8

080024c8 <ver_GetUid>:

static uint8_t sUid[13];	//12-bit asci

//unique ID from MCU
char* ver_GetUid(void) {
 80024c8:	b590      	push	{r4, r7, lr}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
	uint32_t iWafer;

	iWafer = HAL_GetUIDw1() & 0x00FFul;
 80024ce:	f001 fedb 	bl	8004288 <HAL_GetUIDw1>
 80024d2:	4603      	mov	r3, r0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	607b      	str	r3, [r7, #4]
	// 7 lot numbers are already in ASCII
	*(uint32_t*) (&sUid[0]) = HAL_GetUIDw1() >> 8;
 80024d8:	f001 fed6 	bl	8004288 <HAL_GetUIDw1>
 80024dc:	4603      	mov	r3, r0
 80024de:	4a1d      	ldr	r2, [pc, #116]	@ (8002554 <ver_GetUid+0x8c>)
 80024e0:	0a1b      	lsrs	r3, r3, #8
 80024e2:	6013      	str	r3, [r2, #0]
	*(uint32_t*) (&sUid[3]) = HAL_GetUIDw2();
 80024e4:	4c1c      	ldr	r4, [pc, #112]	@ (8002558 <ver_GetUid+0x90>)
 80024e6:	f001 fedb 	bl	80042a0 <HAL_GetUIDw2>
 80024ea:	4603      	mov	r3, r0
 80024ec:	6023      	str	r3, [r4, #0]

	// Convert wafer number to 1 ASCII character
	if (iWafer >= 36)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b23      	cmp	r3, #35	@ 0x23
 80024f2:	d909      	bls.n	8002508 <ver_GetUid+0x40>
		sUid[7] = (iWafer >= 62) ? 'z' : ('a' + (iWafer - 36));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b3d      	cmp	r3, #61	@ 0x3d
 80024f8:	bf28      	it	cs
 80024fa:	233d      	movcs	r3, #61	@ 0x3d
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	333d      	adds	r3, #61	@ 0x3d
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4b14      	ldr	r3, [pc, #80]	@ (8002554 <ver_GetUid+0x8c>)
 8002504:	71da      	strb	r2, [r3, #7]
 8002506:	e00b      	b.n	8002520 <ver_GetUid+0x58>
	// Display with 10 + 26 + 26 symbols
	else
		sUid[7] = ((iWafer >= 10) ? 'A' : '0') + iWafer;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b09      	cmp	r3, #9
 800250c:	d901      	bls.n	8002512 <ver_GetUid+0x4a>
 800250e:	2241      	movs	r2, #65	@ 0x41
 8002510:	e000      	b.n	8002514 <ver_GetUid+0x4c>
 8002512:	2230      	movs	r2, #48	@ 0x30
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	b2db      	uxtb	r3, r3
 8002518:	4413      	add	r3, r2
 800251a:	b2da      	uxtb	r2, r3
 800251c:	4b0d      	ldr	r3, [pc, #52]	@ (8002554 <ver_GetUid+0x8c>)
 800251e:	71da      	strb	r2, [r3, #7]

	// Convert X and Y to 4 ASCII-HEX
	CharToHexasc(&sUid[8], (HAL_GetUIDw0() >> 16) & 0x00FFul);
 8002520:	f001 fea6 	bl	8004270 <HAL_GetUIDw0>
 8002524:	4603      	mov	r3, r0
 8002526:	0c1b      	lsrs	r3, r3, #16
 8002528:	b2db      	uxtb	r3, r3
 800252a:	4619      	mov	r1, r3
 800252c:	480b      	ldr	r0, [pc, #44]	@ (800255c <ver_GetUid+0x94>)
 800252e:	f011 fdbf 	bl	80140b0 <CharToHexasc>
	CharToHexasc(&sUid[10], HAL_GetUIDw0() & 0x00FFul);
 8002532:	f001 fe9d 	bl	8004270 <HAL_GetUIDw0>
 8002536:	4603      	mov	r3, r0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	4619      	mov	r1, r3
 800253c:	4808      	ldr	r0, [pc, #32]	@ (8002560 <ver_GetUid+0x98>)
 800253e:	f011 fdb7 	bl	80140b0 <CharToHexasc>
	sUid[12] = 0;
 8002542:	4b04      	ldr	r3, [pc, #16]	@ (8002554 <ver_GetUid+0x8c>)
 8002544:	2200      	movs	r2, #0
 8002546:	731a      	strb	r2, [r3, #12]
	return ((char*) sUid);
 8002548:	4b02      	ldr	r3, [pc, #8]	@ (8002554 <ver_GetUid+0x8c>)
}
 800254a:	4618      	mov	r0, r3
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	bd90      	pop	{r4, r7, pc}
 8002552:	bf00      	nop
 8002554:	200017cc 	.word	0x200017cc
 8002558:	200017cf 	.word	0x200017cf
 800255c:	200017d4 	.word	0x200017d4
 8002560:	200017d6 	.word	0x200017d6

08002564 <run_console_from_scd30>:

void run_console_from_scd30()
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0


	if(run_console_co2)
 8002568:	4b04      	ldr	r3, [pc, #16]	@ (800257c <run_console_from_scd30+0x18>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <run_console_from_scd30+0x10>
	{
		console_process();
 8002570:	f00f fef8 	bl	8012364 <console_process>
	}
	led_awake_routine1();
 8002574:	f7ff fdde 	bl	8002134 <led_awake_routine1>
}
 8002578:	bf00      	nop
 800257a:	bd80      	pop	{r7, pc}
 800257c:	20000320 	.word	0x20000320

08002580 <app_main>:

void app_main() {
 8002580:	b580      	push	{r7, lr}
 8002582:	b088      	sub	sp, #32
 8002584:	af00      	add	r7, sp, #0

	memset(&_RunTime_Packet, 0, sizeof(_RunTime_Packet));
 8002586:	2248      	movs	r2, #72	@ 0x48
 8002588:	2100      	movs	r1, #0
 800258a:	489f      	ldr	r0, [pc, #636]	@ (8002808 <app_main+0x288>)
 800258c:	f01c fc32 	bl	801edf4 <memset>

	load_param();
 8002590:	f7fe feb6 	bl	8001300 <load_param>

	HAL_TIM_Base_Start(&htim1);
 8002594:	489d      	ldr	r0, [pc, #628]	@ (800280c <app_main+0x28c>)
 8002596:	f008 fe49 	bl	800b22c <HAL_TIM_Base_Start>
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t) &(dataA[0]),
 800259a:	499d      	ldr	r1, [pc, #628]	@ (8002810 <app_main+0x290>)
 800259c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025a0:	4a9c      	ldr	r2, [pc, #624]	@ (8002814 <app_main+0x294>)
 80025a2:	489d      	ldr	r0, [pc, #628]	@ (8002818 <app_main+0x298>)
 80025a4:	f002 fd4c 	bl	8005040 <HAL_DMA_Start>
			(uint32_t) &(BLUE_LED_GPIO_Port->BSRR),
			sizeof(dataA) / sizeof(dataA[0]));
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 80025a8:	4b98      	ldr	r3, [pc, #608]	@ (800280c <app_main+0x28c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	4b97      	ldr	r3, [pc, #604]	@ (800280c <app_main+0x28c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025b6:	60da      	str	r2, [r3, #12]
	BLUE_LED_PWM(disable_led);
 80025b8:	4a95      	ldr	r2, [pc, #596]	@ (8002810 <app_main+0x290>)
 80025ba:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80025be:	2008      	movs	r0, #8
 80025c0:	f7fe fd28 	bl	8001014 <setSoftPWM>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //for green led
 80025c4:	2100      	movs	r1, #0
 80025c6:	4895      	ldr	r0, [pc, #596]	@ (800281c <app_main+0x29c>)
 80025c8:	f008 ff74 	bl	800b4b4 <HAL_TIM_PWM_Start>
	GREEN_LED_PWM(disable_led);
 80025cc:	4b94      	ldr	r3, [pc, #592]	@ (8002820 <app_main+0x2a0>)
 80025ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80025d2:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //for red led
 80025d4:	2104      	movs	r1, #4
 80025d6:	4891      	ldr	r0, [pc, #580]	@ (800281c <app_main+0x29c>)
 80025d8:	f008 ff6c 	bl	800b4b4 <HAL_TIM_PWM_Start>
	RED_LED_PWM(disable_led);
 80025dc:	4b90      	ldr	r3, [pc, #576]	@ (8002820 <app_main+0x2a0>)
 80025de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80025e2:	639a      	str	r2, [r3, #56]	@ 0x38

	if (Mount_SD("/") == FR_OK) {
 80025e4:	488f      	ldr	r0, [pc, #572]	@ (8002824 <app_main+0x2a4>)
 80025e6:	f019 fd3b 	bl	801c060 <Mount_SD>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d105      	bne.n	80025fc <app_main+0x7c>

		Unmount_SD("/");
 80025f0:	488c      	ldr	r0, [pc, #560]	@ (8002824 <app_main+0x2a4>)
 80025f2:	f019 fd61 	bl	801c0b8 <Unmount_SD>
		MX_USB_DEVICE_Init(); //initialize usb anyways
 80025f6:	f01a fc1d 	bl	801ce34 <MX_USB_DEVICE_Init>
 80025fa:	e002      	b.n	8002602 <app_main+0x82>

	} else {
		datawritten = 2;
 80025fc:	4b8a      	ldr	r3, [pc, #552]	@ (8002828 <app_main+0x2a8>)
 80025fe:	2202      	movs	r2, #2
 8002600:	701a      	strb	r2, [r3, #0]
	}
	prev_usb_time_ = HAL_GetTick();
 8002602:	f001 fde5 	bl	80041d0 <HAL_GetTick>
 8002606:	4603      	mov	r3, r0
 8002608:	4a88      	ldr	r2, [pc, #544]	@ (800282c <app_main+0x2ac>)
 800260a:	6013      	str	r3, [r2, #0]
//
//
	if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 800260c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002610:	4887      	ldr	r0, [pc, #540]	@ (8002830 <app_main+0x2b0>)
 8002612:	f003 fda9 	bl	8006168 <HAL_GPIO_ReadPin>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d102      	bne.n	8002622 <app_main+0xa2>
		init_sps30();
 800261c:	f7ff f906 	bl	800182c <init_sps30>
 8002620:	e016      	b.n	8002650 <app_main+0xd0>
	} else {
		_RunTime_Packet.usb_detection = 0;
 8002622:	4b79      	ldr	r3, [pc, #484]	@ (8002808 <app_main+0x288>)
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		_RunTime_Packet.usb_first_start = 1;
 800262a:	4b77      	ldr	r3, [pc, #476]	@ (8002808 <app_main+0x288>)
 800262c:	2201      	movs	r2, #1
 800262e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
		_RunTime_Packet.usb_active_disable_pm = 1;
 8002632:	4b75      	ldr	r3, [pc, #468]	@ (8002808 <app_main+0x288>)
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
		_RunTime_Packet.usb_start_timer = 1;
 800263a:	4b73      	ldr	r3, [pc, #460]	@ (8002808 <app_main+0x288>)
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		usb_time_keep = 0;
 8002642:	4b7c      	ldr	r3, [pc, #496]	@ (8002834 <app_main+0x2b4>)
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
		_RunTime_Packet.showPrompt = 1;
 8002648:	4b6f      	ldr	r3, [pc, #444]	@ (8002808 <app_main+0x288>)
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	//init_sps30();

#ifdef use_scd40x
	init_scd4x_i2c();
#elif use_scd30
	init_scd30_i2c();
 8002650:	f7fe ff58 	bl	8001504 <init_scd30_i2c>
#endif
	console_init();
 8002654:	f00f fed2 	bl	80123fc <console_init>
//	Rtc_set_alarm();
	Rtc_manual_alarm();
 8002658:	f011 fbd0 	bl	8013dfc <Rtc_manual_alarm>
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 800265c:	f107 031c 	add.w	r3, r7, #28
 8002660:	2200      	movs	r2, #0
 8002662:	4619      	mov	r1, r3
 8002664:	4874      	ldr	r0, [pc, #464]	@ (8002838 <app_main+0x2b8>)
 8002666:	f007 fad2 	bl	8009c0e <HAL_RTC_GetDate>
	_RunTime_Packet.prev_year = sDate.Year;
 800266a:	7ffb      	ldrb	r3, [r7, #31]
 800266c:	461a      	mov	r2, r3
 800266e:	4b66      	ldr	r3, [pc, #408]	@ (8002808 <app_main+0x288>)
 8002670:	855a      	strh	r2, [r3, #42]	@ 0x2a
	//therefore we will run file creation again when usb operation is completed. it takes about 30second
	//untill that 30second we wont even go to sleep as usb is connected so power is not the issue

	//if(!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin))
	//{
	 if ((HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0xBEBE) || (strcmp(_Flash_Packet.filename_with_format,"default") == 0)) //we save this value and dont change it untill and untless RTC data is not lost
 8002672:	2101      	movs	r1, #1
 8002674:	4870      	ldr	r0, [pc, #448]	@ (8002838 <app_main+0x2b8>)
 8002676:	f007 fd7b 	bl	800a170 <HAL_RTCEx_BKUPRead>
 800267a:	4603      	mov	r3, r0
 800267c:	f64b 62be 	movw	r2, #48830	@ 0xbebe
 8002680:	4293      	cmp	r3, r2
 8002682:	d106      	bne.n	8002692 <app_main+0x112>
 8002684:	496d      	ldr	r1, [pc, #436]	@ (800283c <app_main+0x2bc>)
 8002686:	486e      	ldr	r0, [pc, #440]	@ (8002840 <app_main+0x2c0>)
 8002688:	f7fd fdaa 	bl	80001e0 <strcmp>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d112      	bne.n	80026b8 <app_main+0x138>
	    {




		_RunTime_Packet.sd_file_creation = createfile(_Flash_Packet.File_Name,
 8002692:	496c      	ldr	r1, [pc, #432]	@ (8002844 <app_main+0x2c4>)
 8002694:	486c      	ldr	r0, [pc, #432]	@ (8002848 <app_main+0x2c8>)
 8002696:	f01a fb0f 	bl	801ccb8 <createfile>
 800269a:	4603      	mov	r3, r0
 800269c:	461a      	mov	r2, r3
 800269e:	4b5a      	ldr	r3, [pc, #360]	@ (8002808 <app_main+0x288>)
 80026a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
				_Flash_Packet.File_Format);


		   HAL_PWR_EnableBkUpAccess();
 80026a4:	f006 fa30 	bl	8008b08 <HAL_PWR_EnableBkUpAccess>
			   HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0xBEBE);
 80026a8:	f64b 62be 	movw	r2, #48830	@ 0xbebe
 80026ac:	2101      	movs	r1, #1
 80026ae:	4862      	ldr	r0, [pc, #392]	@ (8002838 <app_main+0x2b8>)
 80026b0:	f007 fd44 	bl	800a13c <HAL_RTCEx_BKUPWrite>
			   HAL_PWR_DisableBkUpAccess();
 80026b4:	f006 fa3c 	bl	8008b30 <HAL_PWR_DisableBkUpAccess>
	// else
	// {
	// 	 _RunTime_Packet.sd_file_creation = -1;
	// }

	green_led_blink();
 80026b8:	f7ff fb16 	bl	8001ce8 <green_led_blink>

//MX_USB_DEVICE_DeInit();
	HAL_UART_Transmit(&huart1, (uint8_t*) "System Has Started \r\n", 21, 200);
 80026bc:	23c8      	movs	r3, #200	@ 0xc8
 80026be:	2215      	movs	r2, #21
 80026c0:	4962      	ldr	r1, [pc, #392]	@ (800284c <app_main+0x2cc>)
 80026c2:	4863      	ldr	r0, [pc, #396]	@ (8002850 <app_main+0x2d0>)
 80026c4:	f009 fe24 	bl	800c310 <HAL_UART_Transmit>



	while (1) {

		prev_sleep_time = HAL_GetTick();
 80026c8:	f001 fd82 	bl	80041d0 <HAL_GetTick>
 80026cc:	4603      	mov	r3, r0
 80026ce:	4a61      	ldr	r2, [pc, #388]	@ (8002854 <app_main+0x2d4>)
 80026d0:	6013      	str	r3, [r2, #0]
		prev_sleep_time_pm_co2 = HAL_GetTick();
 80026d2:	f001 fd7d 	bl	80041d0 <HAL_GetTick>
 80026d6:	4603      	mov	r3, r0
 80026d8:	4a5f      	ldr	r2, [pc, #380]	@ (8002858 <app_main+0x2d8>)
 80026da:	6013      	str	r3, [r2, #0]
		stop_measurement = 1;
 80026dc:	4b5f      	ldr	r3, [pc, #380]	@ (800285c <app_main+0x2dc>)
 80026de:	2201      	movs	r2, #1
 80026e0:	701a      	strb	r2, [r3, #0]
		pwr_off_detected();
 80026e2:	f7fe fd7b 	bl	80011dc <pwr_off_detected>
		while (HAL_GetTick() - prev_sleep_time <= sleep_time) //stay awake for only 1min and then sleep
 80026e6:	e179      	b.n	80029dc <app_main+0x45c>
		{
			pwr_off_detected();
 80026e8:	f7fe fd78 	bl	80011dc <pwr_off_detected>
//
//
//				HAL_UART_Transmit(&huart1, (uint8_t*)buf_sdcard, strlen(buf_sdcard), 1000);
//
//			}
			adc_Measure(&_RunTime_Packet.battery_voltage);
 80026ec:	485c      	ldr	r0, [pc, #368]	@ (8002860 <app_main+0x2e0>)
 80026ee:	f011 fd73 	bl	80141d8 <adc_Measure>
			if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is active dont go to sleep
 80026f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80026f6:	484e      	ldr	r0, [pc, #312]	@ (8002830 <app_main+0x2b0>)
 80026f8:	f003 fd36 	bl	8006168 <HAL_GPIO_ReadPin>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d004      	beq.n	800270c <app_main+0x18c>
					{
				prev_sleep_time = HAL_GetTick();
 8002702:	f001 fd65 	bl	80041d0 <HAL_GetTick>
 8002706:	4603      	mov	r3, r0
 8002708:	4a52      	ldr	r2, [pc, #328]	@ (8002854 <app_main+0x2d4>)
 800270a:	6013      	str	r3, [r2, #0]
			}
			led_awake_routine();
 800270c:	f7ff fb14 	bl	8001d38 <led_awake_routine>
			 * sometimes it does but this is the solution to solve it.

			 */

			RTC_TimeTypeDef gTime;
			HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 8002710:	f107 0308 	add.w	r3, r7, #8
 8002714:	2200      	movs	r2, #0
 8002716:	4619      	mov	r1, r3
 8002718:	4847      	ldr	r0, [pc, #284]	@ (8002838 <app_main+0x2b8>)
 800271a:	f007 f996 	bl	8009a4a <HAL_RTC_GetTime>
			RTC_DateTypeDef sDate;
			HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 800271e:	1d3b      	adds	r3, r7, #4
 8002720:	2200      	movs	r2, #0
 8002722:	4619      	mov	r1, r3
 8002724:	4844      	ldr	r0, [pc, #272]	@ (8002838 <app_main+0x2b8>)
 8002726:	f007 fa72 	bl	8009c0e <HAL_RTC_GetDate>

			_RunTime_Packet.day = sDate.Date;
 800272a:	79ba      	ldrb	r2, [r7, #6]
 800272c:	4b36      	ldr	r3, [pc, #216]	@ (8002808 <app_main+0x288>)
 800272e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			_RunTime_Packet.month = sDate.Month;
 8002732:	797a      	ldrb	r2, [r7, #5]
 8002734:	4b34      	ldr	r3, [pc, #208]	@ (8002808 <app_main+0x288>)
 8002736:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			_RunTime_Packet.year = sDate.Year;
 800273a:	79fa      	ldrb	r2, [r7, #7]
 800273c:	4b32      	ldr	r3, [pc, #200]	@ (8002808 <app_main+0x288>)
 800273e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

			if (_RunTime_Packet.prev_year != sDate.Year) {
 8002742:	4b31      	ldr	r3, [pc, #196]	@ (8002808 <app_main+0x288>)
 8002744:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002746:	79fa      	ldrb	r2, [r7, #7]
 8002748:	4293      	cmp	r3, r2
 800274a:	d007      	beq.n	800275c <app_main+0x1dc>
				_RunTime_Packet.year_changed = 1; //this for year now
 800274c:	4b2e      	ldr	r3, [pc, #184]	@ (8002808 <app_main+0x288>)
 800274e:	2201      	movs	r2, #1
 8002750:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
				_RunTime_Packet.prev_year = sDate.Year;
 8002754:	79fb      	ldrb	r3, [r7, #7]
 8002756:	461a      	mov	r2, r3
 8002758:	4b2b      	ldr	r3, [pc, #172]	@ (8002808 <app_main+0x288>)
 800275a:	855a      	strh	r2, [r3, #42]	@ 0x2a
			}

			check_peripheral_error();
 800275c:	f7ff f90c 	bl	8001978 <check_peripheral_error>

//this routine is for when usb is detected
//the time calculated right now for mass storage to do its operation is about 30second but time is kept about 50sec to be on safe side
//this routine is specifically made for sps30 as for some reason sps30 uart stops working when usb is connected
			if (_RunTime_Packet.usb_detection
 8002760:	4b29      	ldr	r3, [pc, #164]	@ (8002808 <app_main+0x288>)
 8002762:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002766:	2b00      	cmp	r3, #0
 8002768:	d104      	bne.n	8002774 <app_main+0x1f4>
					|| _RunTime_Packet.usb_first_start) {
 800276a:	4b27      	ldr	r3, [pc, #156]	@ (8002808 <app_main+0x288>)
 800276c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002770:	2b00      	cmp	r3, #0
 8002772:	d045      	beq.n	8002800 <app_main+0x280>

				if (_RunTime_Packet.usb_first_start) //part of old implementation not being used
 8002774:	4b24      	ldr	r3, [pc, #144]	@ (8002808 <app_main+0x288>)
 8002776:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <app_main+0x206>
				{

					start_usb_timer = 1;
 800277e:	4b39      	ldr	r3, [pc, #228]	@ (8002864 <app_main+0x2e4>)
 8002780:	2201      	movs	r2, #1
 8002782:	701a      	strb	r2, [r3, #0]
 8002784:	e003      	b.n	800278e <app_main+0x20e>
				} else {
					_RunTime_Packet.usb_active_disable_pm = 1; //old implementation not being used
 8002786:	4b20      	ldr	r3, [pc, #128]	@ (8002808 <app_main+0x288>)
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
				}

				if ((HAL_GetTick() - prev_usb_time_ >= usb_time_)) //50sec has passed our usb must have initialized now
 800278e:	f001 fd1f 	bl	80041d0 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	4b25      	ldr	r3, [pc, #148]	@ (800282c <app_main+0x2ac>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	1ad2      	subs	r2, r2, r3
 800279a:	4b33      	ldr	r3, [pc, #204]	@ (8002868 <app_main+0x2e8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d329      	bcc.n	80027f6 <app_main+0x276>
				{
					if (_RunTime_Packet.sd_file_creation == -1
 80027a2:	4b19      	ldr	r3, [pc, #100]	@ (8002808 <app_main+0x288>)
 80027a4:	f993 3035 	ldrsb.w	r3, [r3, #53]	@ 0x35
 80027a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ac:	d10d      	bne.n	80027ca <app_main+0x24a>
							&& _RunTime_Packet.usb_first_start) {
 80027ae:	4b16      	ldr	r3, [pc, #88]	@ (8002808 <app_main+0x288>)
 80027b0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d008      	beq.n	80027ca <app_main+0x24a>
						_RunTime_Packet.sd_file_creation = createfile(
 80027b8:	4922      	ldr	r1, [pc, #136]	@ (8002844 <app_main+0x2c4>)
 80027ba:	4823      	ldr	r0, [pc, #140]	@ (8002848 <app_main+0x2c8>)
 80027bc:	f01a fa7c 	bl	801ccb8 <createfile>
 80027c0:	4603      	mov	r3, r0
 80027c2:	461a      	mov	r2, r3
 80027c4:	4b10      	ldr	r3, [pc, #64]	@ (8002808 <app_main+0x288>)
 80027c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
								_Flash_Packet.File_Name,
								_Flash_Packet.File_Format);
					}

					_RunTime_Packet.usb_first_start = 0;
 80027ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002808 <app_main+0x288>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
					_RunTime_Packet.usb_detection = 0;
 80027d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002808 <app_main+0x288>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
					_RunTime_Packet.usb_active_disable_pm = 0;
 80027da:	4b0b      	ldr	r3, [pc, #44]	@ (8002808 <app_main+0x288>)
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
					start_usb_timer = 0;
 80027e2:	4b20      	ldr	r3, [pc, #128]	@ (8002864 <app_main+0x2e4>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	701a      	strb	r2, [r3, #0]

					init_sps30();
 80027e8:	f7ff f820 	bl	800182c <init_sps30>
					//now as after connection of usb the 50seconds have passed now we can enable PM uart to access it

					prev_sleep_time_pm_co2 = HAL_GetTick(); //as we need to take measurements now
 80027ec:	f001 fcf0 	bl	80041d0 <HAL_GetTick>
 80027f0:	4603      	mov	r3, r0
 80027f2:	4a19      	ldr	r2, [pc, #100]	@ (8002858 <app_main+0x2d8>)
 80027f4:	6013      	str	r3, [r2, #0]
				}

				prev_sleep_time = HAL_GetTick();
 80027f6:	f001 fceb 	bl	80041d0 <HAL_GetTick>
 80027fa:	4603      	mov	r3, r0
 80027fc:	4a15      	ldr	r2, [pc, #84]	@ (8002854 <app_main+0x2d4>)
 80027fe:	6013      	str	r3, [r2, #0]
			}

			console_process();
 8002800:	f00f fdb0 	bl	8012364 <console_process>

			//we wont take measurement until usb_detection flag disables. this flag means usb is in operation right now.
			//reason of doing this is when usb is in operation sps30 does not work so we wait for usb operation to end and then take the readings
			while ((HAL_GetTick() - prev_sleep_time_pm_co2 <= sleep_time_pm_co2)
 8002804:	e046      	b.n	8002894 <app_main+0x314>
 8002806:	bf00      	nop
 8002808:	20001530 	.word	0x20001530
 800280c:	2000193c 	.word	0x2000193c
 8002810:	20000324 	.word	0x20000324
 8002814:	40020418 	.word	0x40020418
 8002818:	20001a14 	.word	0x20001a14
 800281c:	200019cc 	.word	0x200019cc
 8002820:	40000400 	.word	0x40000400
 8002824:	08022454 	.word	0x08022454
 8002828:	2000232c 	.word	0x2000232c
 800282c:	200017c8 	.word	0x200017c8
 8002830:	40020000 	.word	0x40020000
 8002834:	20001584 	.word	0x20001584
 8002838:	20001898 	.word	0x20001898
 800283c:	08022464 	.word	0x08022464
 8002840:	20001461 	.word	0x20001461
 8002844:	20001330 	.word	0x20001330
 8002848:	200012cc 	.word	0x200012cc
 800284c:	0802246c 	.word	0x0802246c
 8002850:	20001a74 	.word	0x20001a74
 8002854:	200017c0 	.word	0x200017c0
 8002858:	200017c4 	.word	0x200017c4
 800285c:	2000000c 	.word	0x2000000c
 8002860:	20001550 	.word	0x20001550
 8002864:	20001580 	.word	0x20001580
 8002868:	20000008 	.word	0x20000008
					&& !_RunTime_Packet.usb_detection
					&& !_RunTime_Packet.usb_first_start)
			//if(!_RunTime_Packet.usb_detection && !_RunTime_Packet.usb_first_start)
			{

				console_process(); //run console here also so user can still access it
 800286c:	f00f fd7a 	bl	8012364 <console_process>
				if (!_RunTime_Packet.scd4x_i2c_error) {
 8002870:	4b92      	ldr	r3, [pc, #584]	@ (8002abc <app_main+0x53c>)
 8002872:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <app_main+0x2fe>
#ifdef use_scd40x
					get_scd4x_measurement();
#elif use_scd30
					get_scd30_measurement();
 800287a:	f7fe fe6b 	bl	8001554 <get_scd30_measurement>
#endif

				}

				get_sps30_measurement();
 800287e:	f7fe fff1 	bl	8001864 <get_sps30_measurement>

				adc_Measure(&_RunTime_Packet.battery_voltage);
 8002882:	488f      	ldr	r0, [pc, #572]	@ (8002ac0 <app_main+0x540>)
 8002884:	f011 fca8 	bl	80141d8 <adc_Measure>
				led_awake_routine1();
 8002888:	f7ff fc54 	bl	8002134 <led_awake_routine1>
				pwr_off_detected();
 800288c:	f7fe fca6 	bl	80011dc <pwr_off_detected>
				check_peripheral_error();
 8002890:	f7ff f872 	bl	8001978 <check_peripheral_error>
			while ((HAL_GetTick() - prev_sleep_time_pm_co2 <= sleep_time_pm_co2)
 8002894:	f001 fc9c 	bl	80041d0 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	4b8a      	ldr	r3, [pc, #552]	@ (8002ac4 <app_main+0x544>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	1ad2      	subs	r2, r2, r3
 80028a0:	4b89      	ldr	r3, [pc, #548]	@ (8002ac8 <app_main+0x548>)
 80028a2:	681b      	ldr	r3, [r3, #0]
					&& !_RunTime_Packet.usb_first_start)
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d809      	bhi.n	80028bc <app_main+0x33c>
					&& !_RunTime_Packet.usb_detection
 80028a8:	4b84      	ldr	r3, [pc, #528]	@ (8002abc <app_main+0x53c>)
 80028aa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d104      	bne.n	80028bc <app_main+0x33c>
					&& !_RunTime_Packet.usb_first_start)
 80028b2:	4b82      	ldr	r3, [pc, #520]	@ (8002abc <app_main+0x53c>)
 80028b4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0d7      	beq.n	800286c <app_main+0x2ec>
			}

			/*
			 * if user performs calibration
			 */
			sensor_calibration();
 80028bc:	f7ff f8be 	bl	8001a3c <sensor_calibration>

			//dont stop measurement if USB is detected, we keep taking measurement after interval as power is not an issue if usb is active
			if (stop_measurement && !_RunTime_Packet.usb_detection
 80028c0:	4b82      	ldr	r3, [pc, #520]	@ (8002acc <app_main+0x54c>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d014      	beq.n	80028f2 <app_main+0x372>
 80028c8:	4b7c      	ldr	r3, [pc, #496]	@ (8002abc <app_main+0x53c>)
 80028ca:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10f      	bne.n	80028f2 <app_main+0x372>
					&& !_RunTime_Packet.usb_first_start
 80028d2:	4b7a      	ldr	r3, [pc, #488]	@ (8002abc <app_main+0x53c>)
 80028d4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10a      	bne.n	80028f2 <app_main+0x372>
					&& !HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port,
 80028dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80028e0:	487b      	ldr	r0, [pc, #492]	@ (8002ad0 <app_main+0x550>)
 80028e2:	f003 fc41 	bl	8006168 <HAL_GPIO_ReadPin>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d102      	bne.n	80028f2 <app_main+0x372>
#elif use_scd30
				//scd30_stop_periodic_measurement();
#endif

				//sps30_stop_measurement();
				stop_measurement = 0;
 80028ec:	4b77      	ldr	r3, [pc, #476]	@ (8002acc <app_main+0x54c>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	701a      	strb	r2, [r3, #0]

//if USB is active and time interval is passed then we still save into the file, but make sure usb is not working at that time otherwise sdcard wont take data
//thats why usb_Detection flag is used
//this routine is specifically to table the issue, if user keeps the usb plugged in for somereason
//because the mostly the system will save data before going to sleep. if usb cable is plugged in it wont go to sleep, but with routine we still save the data after set intervals
			if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)
 80028f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80028f6:	4876      	ldr	r0, [pc, #472]	@ (8002ad0 <app_main+0x550>)
 80028f8:	f003 fc36 	bl	8006168 <HAL_GPIO_ReadPin>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d050      	beq.n	80029a4 <app_main+0x424>
					&& set_alarm_Time && !_RunTime_Packet.usb_detection) {
 8002902:	4b74      	ldr	r3, [pc, #464]	@ (8002ad4 <app_main+0x554>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d04c      	beq.n	80029a4 <app_main+0x424>
 800290a:	4b6c      	ldr	r3, [pc, #432]	@ (8002abc <app_main+0x53c>)
 800290c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002910:	2b00      	cmp	r3, #0
 8002912:	d147      	bne.n	80029a4 <app_main+0x424>
				//if day changes create new file
				//if user change filename or fileformat then also create new file with that format or name
				if (_RunTime_Packet.year_changed
 8002914:	4b69      	ldr	r3, [pc, #420]	@ (8002abc <app_main+0x53c>)
 8002916:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10f      	bne.n	800293e <app_main+0x3be>
						|| _RunTime_Packet.filename_changed
 800291e:	4b67      	ldr	r3, [pc, #412]	@ (8002abc <app_main+0x53c>)
 8002920:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10a      	bne.n	800293e <app_main+0x3be>
						|| _RunTime_Packet.fileformat_changed
 8002928:	4b64      	ldr	r3, [pc, #400]	@ (8002abc <app_main+0x53c>)
 800292a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800292e:	2b00      	cmp	r3, #0
 8002930:	d105      	bne.n	800293e <app_main+0x3be>
						|| _RunTime_Packet.sd_file_creation == -1) {
 8002932:	4b62      	ldr	r3, [pc, #392]	@ (8002abc <app_main+0x53c>)
 8002934:	f993 3035 	ldrsb.w	r3, [r3, #53]	@ 0x35
 8002938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293c:	d114      	bne.n	8002968 <app_main+0x3e8>
					_RunTime_Packet.sd_file_creation = createfile(
 800293e:	4966      	ldr	r1, [pc, #408]	@ (8002ad8 <app_main+0x558>)
 8002940:	4866      	ldr	r0, [pc, #408]	@ (8002adc <app_main+0x55c>)
 8002942:	f01a f9b9 	bl	801ccb8 <createfile>
 8002946:	4603      	mov	r3, r0
 8002948:	461a      	mov	r2, r3
 800294a:	4b5c      	ldr	r3, [pc, #368]	@ (8002abc <app_main+0x53c>)
 800294c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
							_Flash_Packet.File_Name, _Flash_Packet.File_Format);

					_RunTime_Packet.year_changed = 0;
 8002950:	4b5a      	ldr	r3, [pc, #360]	@ (8002abc <app_main+0x53c>)
 8002952:	2200      	movs	r2, #0
 8002954:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
					_RunTime_Packet.filename_changed = 0;
 8002958:	4b58      	ldr	r3, [pc, #352]	@ (8002abc <app_main+0x53c>)
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
					_RunTime_Packet.fileformat_changed = 0;
 8002960:	4b56      	ldr	r3, [pc, #344]	@ (8002abc <app_main+0x53c>)
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
				}
				if (filesaving_process()) {
 8002968:	f01a f95c 	bl	801cc24 <filesaving_process>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d013      	beq.n	800299a <app_main+0x41a>
					HAL_Delay(1500);
 8002972:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002976:	f001 fc37 	bl	80041e8 <HAL_Delay>
					if (filesaving_process()) {
 800297a:	f01a f953 	bl	801cc24 <filesaving_process>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00a      	beq.n	800299a <app_main+0x41a>
						HAL_Delay(1500);
 8002984:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002988:	f001 fc2e 	bl	80041e8 <HAL_Delay>
						if (filesaving_process()) {
 800298c:	f01a f94a 	bl	801cc24 <filesaving_process>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <app_main+0x41a>
							HAL_NVIC_SystemReset();
 8002996:	f002 fa36 	bl	8004e06 <HAL_NVIC_SystemReset>
						}
					}
				}

				prev_sleep_time_pm_co2 = HAL_GetTick(); //we also enable sensors to take reading then
 800299a:	f001 fc19 	bl	80041d0 <HAL_GetTick>
 800299e:	4603      	mov	r3, r0
 80029a0:	4a48      	ldr	r2, [pc, #288]	@ (8002ac4 <app_main+0x544>)
 80029a2:	6013      	str	r3, [r2, #0]
			}

	//		Rtc_set_alarm();
			Rtc_manual_alarm();
 80029a4:	f011 fa2a 	bl	8013dfc <Rtc_manual_alarm>
		 // adc_Measure(&_RunTime_Packet.battery_voltage);
			led_awake_routine();
 80029a8:	f7ff f9c6 	bl	8001d38 <led_awake_routine>
			save_data();
 80029ac:	f7fe fd76 	bl	800149c <save_data>

			if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 80029b0:	2101      	movs	r1, #1
 80029b2:	4847      	ldr	r0, [pc, #284]	@ (8002ad0 <app_main+0x550>)
 80029b4:	f003 fbd8 	bl	8006168 <HAL_GPIO_ReadPin>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d006      	beq.n	80029cc <app_main+0x44c>
				_RunTime_Packet.motion_detection = 1;
 80029be:	4b3f      	ldr	r3, [pc, #252]	@ (8002abc <app_main+0x53c>)
 80029c0:	2201      	movs	r2, #1
 80029c2:	731a      	strb	r2, [r3, #12]
				debug_pir_motion = 1;
 80029c4:	4b46      	ldr	r3, [pc, #280]	@ (8002ae0 <app_main+0x560>)
 80029c6:	2201      	movs	r2, #1
 80029c8:	701a      	strb	r2, [r3, #0]
 80029ca:	e005      	b.n	80029d8 <app_main+0x458>
			} else {
				_RunTime_Packet.motion_detection = 0;
 80029cc:	4b3b      	ldr	r3, [pc, #236]	@ (8002abc <app_main+0x53c>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	731a      	strb	r2, [r3, #12]
				debug_pir_motion = 1;
 80029d2:	4b43      	ldr	r3, [pc, #268]	@ (8002ae0 <app_main+0x560>)
 80029d4:	2201      	movs	r2, #1
 80029d6:	701a      	strb	r2, [r3, #0]

			}
			pwr_off_detected();
 80029d8:	f7fe fc00 	bl	80011dc <pwr_off_detected>
		while (HAL_GetTick() - prev_sleep_time <= sleep_time) //stay awake for only 1min and then sleep
 80029dc:	f001 fbf8 	bl	80041d0 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	4b40      	ldr	r3, [pc, #256]	@ (8002ae4 <app_main+0x564>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	1ad2      	subs	r2, r2, r3
 80029e8:	4b3f      	ldr	r3, [pc, #252]	@ (8002ae8 <app_main+0x568>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	f67f ae7b 	bls.w	80026e8 <app_main+0x168>
		}

		//if day changes create new file
		//if user change filename or fileformat then also create new file with that format or name
		//_RunTime_Packet.day_changed ||
		if (_RunTime_Packet.year_changed || _RunTime_Packet.filename_changed
 80029f2:	4b32      	ldr	r3, [pc, #200]	@ (8002abc <app_main+0x53c>)
 80029f4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10f      	bne.n	8002a1c <app_main+0x49c>
 80029fc:	4b2f      	ldr	r3, [pc, #188]	@ (8002abc <app_main+0x53c>)
 80029fe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10a      	bne.n	8002a1c <app_main+0x49c>
				|| _RunTime_Packet.fileformat_changed
 8002a06:	4b2d      	ldr	r3, [pc, #180]	@ (8002abc <app_main+0x53c>)
 8002a08:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d105      	bne.n	8002a1c <app_main+0x49c>
				|| _RunTime_Packet.sd_file_creation == -1) {
 8002a10:	4b2a      	ldr	r3, [pc, #168]	@ (8002abc <app_main+0x53c>)
 8002a12:	f993 3035 	ldrsb.w	r3, [r3, #53]	@ 0x35
 8002a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1a:	d11b      	bne.n	8002a54 <app_main+0x4d4>


			_RunTime_Packet.sd_file_creation = createfile(
 8002a1c:	492e      	ldr	r1, [pc, #184]	@ (8002ad8 <app_main+0x558>)
 8002a1e:	482f      	ldr	r0, [pc, #188]	@ (8002adc <app_main+0x55c>)
 8002a20:	f01a f94a 	bl	801ccb8 <createfile>
 8002a24:	4603      	mov	r3, r0
 8002a26:	461a      	mov	r2, r3
 8002a28:	4b24      	ldr	r3, [pc, #144]	@ (8002abc <app_main+0x53c>)
 8002a2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
					_Flash_Packet.File_Name, _Flash_Packet.File_Format);

			_RunTime_Packet.year_changed = 0;
 8002a2e:	4b23      	ldr	r3, [pc, #140]	@ (8002abc <app_main+0x53c>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			_RunTime_Packet.filename_changed = 0;
 8002a36:	4b21      	ldr	r3, [pc, #132]	@ (8002abc <app_main+0x53c>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			_RunTime_Packet.fileformat_changed = 0;
 8002a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8002abc <app_main+0x53c>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			/*be sure to save data before going to sleep*/
			while(save_param)
 8002a46:	e001      	b.n	8002a4c <app_main+0x4cc>
			{
				save_data();
 8002a48:	f7fe fd28 	bl	800149c <save_data>
			while(save_param)
 8002a4c:	4b27      	ldr	r3, [pc, #156]	@ (8002aec <app_main+0x56c>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1f9      	bne.n	8002a48 <app_main+0x4c8>
			}
		}



		if (filesaving_process()) {
 8002a54:	f01a f8e6 	bl	801cc24 <filesaving_process>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d013      	beq.n	8002a86 <app_main+0x506>
			HAL_Delay(1500);
 8002a5e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002a62:	f001 fbc1 	bl	80041e8 <HAL_Delay>
			if (filesaving_process()) {
 8002a66:	f01a f8dd 	bl	801cc24 <filesaving_process>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00a      	beq.n	8002a86 <app_main+0x506>
				HAL_Delay(1500);
 8002a70:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002a74:	f001 fbb8 	bl	80041e8 <HAL_Delay>
				if (filesaving_process()) {
 8002a78:	f01a f8d4 	bl	801cc24 <filesaving_process>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <app_main+0x506>
					HAL_NVIC_SystemReset();
 8002a82:	f002 f9c0 	bl	8004e06 <HAL_NVIC_SystemReset>
				}
			}
		}
		prev_sleep_time = HAL_GetTick();
 8002a86:	f001 fba3 	bl	80041d0 <HAL_GetTick>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	4a15      	ldr	r2, [pc, #84]	@ (8002ae4 <app_main+0x564>)
 8002a8e:	6013      	str	r3, [r2, #0]

		while(save_param)
 8002a90:	e001      	b.n	8002a96 <app_main+0x516>
		{
			save_data();
 8002a92:	f7fe fd03 	bl	800149c <save_data>
		while(save_param)
 8002a96:	4b15      	ldr	r3, [pc, #84]	@ (8002aec <app_main+0x56c>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f9      	bne.n	8002a92 <app_main+0x512>
		}

		if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin) ) {
 8002a9e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002aa2:	480b      	ldr	r0, [pc, #44]	@ (8002ad0 <app_main+0x550>)
 8002aa4:	f003 fb60 	bl	8006168 <HAL_GPIO_ReadPin>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d103      	bne.n	8002ab6 <app_main+0x536>

			sleep();
 8002aae:	f7fe ffdb 	bl	8001a68 <sleep>
			wakeup();
 8002ab2:	f7ff f861 	bl	8001b78 <wakeup>

		}
		pwr_off_detected();
 8002ab6:	f7fe fb91 	bl	80011dc <pwr_off_detected>
		prev_sleep_time = HAL_GetTick();
 8002aba:	e605      	b.n	80026c8 <app_main+0x148>
 8002abc:	20001530 	.word	0x20001530
 8002ac0:	20001550 	.word	0x20001550
 8002ac4:	200017c4 	.word	0x200017c4
 8002ac8:	20000004 	.word	0x20000004
 8002acc:	2000000c 	.word	0x2000000c
 8002ad0:	40020000 	.word	0x40020000
 8002ad4:	20000029 	.word	0x20000029
 8002ad8:	20001330 	.word	0x20001330
 8002adc:	200012cc 	.word	0x200012cc
 8002ae0:	20001589 	.word	0x20001589
 8002ae4:	200017c0 	.word	0x200017c0
 8002ae8:	20000000 	.word	0x20000000
 8002aec:	20001579 	.word	0x20001579

08002af0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002af4:	f001 fb06 	bl	8004104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002af8:	f000 f822 	bl	8002b40 <SystemClock_Config>
  MX_TIM1_Init();
  MX_TIM3_Init();
  MX_IWDG_Init();
  /* USER CODE BEGIN 2 */
#endif
  HAL_Delay(1000);
 8002afc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b00:	f001 fb72 	bl	80041e8 <HAL_Delay>
  MX_GPIO_Init();
 8002b04:	f000 fb00 	bl	8003108 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b08:	f000 fade 	bl	80030c8 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8002b0c:	f000 f948 	bl	8002da0 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 8002b10:	f000 fa86 	bl	8003020 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8002b14:	f000 f91e 	bl	8002d54 <MX_RTC_Init>
  MX_I2C1_Init();
 8002b18:	f000 f8d4 	bl	8002cc4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002b1c:	f000 f9b0 	bl	8002e80 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8002b20:	f000 faa8 	bl	8003074 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002b24:	f000 f87c 	bl	8002c20 <MX_ADC1_Init>
  MX_FATFS_Init();
 8002b28:	f010 ff4a 	bl	80139c0 <MX_FATFS_Init>
  MX_TIM1_Init();
 8002b2c:	f000 f958 	bl	8002de0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002b30:	f000 f9f4 	bl	8002f1c <MX_TIM3_Init>
  MX_IWDG_Init();
 8002b34:	f000 f8f4 	bl	8002d20 <MX_IWDG_Init>

  app_main(); //keep mx_usb_device_init off here
 8002b38:	f7ff fd22 	bl	8002580 <app_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002b3c:	bf00      	nop
 8002b3e:	e7fd      	b.n	8002b3c <main+0x4c>

08002b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b094      	sub	sp, #80	@ 0x50
 8002b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b46:	f107 0320 	add.w	r3, r7, #32
 8002b4a:	2230      	movs	r2, #48	@ 0x30
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f01c f950 	bl	801edf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b54:	f107 030c 	add.w	r3, r7, #12
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	605a      	str	r2, [r3, #4]
 8002b5e:	609a      	str	r2, [r3, #8]
 8002b60:	60da      	str	r2, [r3, #12]
 8002b62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b64:	2300      	movs	r3, #0
 8002b66:	60bb      	str	r3, [r7, #8]
 8002b68:	4b2b      	ldr	r3, [pc, #172]	@ (8002c18 <SystemClock_Config+0xd8>)
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6c:	4a2a      	ldr	r2, [pc, #168]	@ (8002c18 <SystemClock_Config+0xd8>)
 8002b6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b72:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b74:	4b28      	ldr	r3, [pc, #160]	@ (8002c18 <SystemClock_Config+0xd8>)
 8002b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b7c:	60bb      	str	r3, [r7, #8]
 8002b7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b80:	2300      	movs	r3, #0
 8002b82:	607b      	str	r3, [r7, #4]
 8002b84:	4b25      	ldr	r3, [pc, #148]	@ (8002c1c <SystemClock_Config+0xdc>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002b8c:	4a23      	ldr	r2, [pc, #140]	@ (8002c1c <SystemClock_Config+0xdc>)
 8002b8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b92:	6013      	str	r3, [r2, #0]
 8002b94:	4b21      	ldr	r3, [pc, #132]	@ (8002c1c <SystemClock_Config+0xdc>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002b9c:	607b      	str	r3, [r7, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8002ba0:	230d      	movs	r3, #13
 8002ba2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ba4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002baa:	2301      	movs	r3, #1
 8002bac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bb6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002bbc:	2319      	movs	r3, #25
 8002bbe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002bc0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002bc4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002bc6:	2304      	movs	r3, #4
 8002bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002bca:	2307      	movs	r3, #7
 8002bcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bce:	f107 0320 	add.w	r3, r7, #32
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f006 f808 	bl	8008be8 <HAL_RCC_OscConfig>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002bde:	f000 fdad 	bl	800373c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002be2:	230f      	movs	r3, #15
 8002be4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002be6:	2302      	movs	r3, #2
 8002be8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002bee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bf2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002bf8:	f107 030c 	add.w	r3, r7, #12
 8002bfc:	2102      	movs	r1, #2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f006 fa6a 	bl	80090d8 <HAL_RCC_ClockConfig>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <SystemClock_Config+0xce>
  {
    Error_Handler();
 8002c0a:	f000 fd97 	bl	800373c <Error_Handler>
  }
}
 8002c0e:	bf00      	nop
 8002c10:	3750      	adds	r7, #80	@ 0x50
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40007000 	.word	0x40007000

08002c20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c26:	463b      	mov	r3, r7
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002c32:	4b21      	ldr	r3, [pc, #132]	@ (8002cb8 <MX_ADC1_Init+0x98>)
 8002c34:	4a21      	ldr	r2, [pc, #132]	@ (8002cbc <MX_ADC1_Init+0x9c>)
 8002c36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002c38:	4b1f      	ldr	r3, [pc, #124]	@ (8002cb8 <MX_ADC1_Init+0x98>)
 8002c3a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002c3e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002c40:	4b1d      	ldr	r3, [pc, #116]	@ (8002cb8 <MX_ADC1_Init+0x98>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002c46:	4b1c      	ldr	r3, [pc, #112]	@ (8002cb8 <MX_ADC1_Init+0x98>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb8 <MX_ADC1_Init+0x98>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c52:	4b19      	ldr	r3, [pc, #100]	@ (8002cb8 <MX_ADC1_Init+0x98>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c5a:	4b17      	ldr	r3, [pc, #92]	@ (8002cb8 <MX_ADC1_Init+0x98>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c60:	4b15      	ldr	r3, [pc, #84]	@ (8002cb8 <MX_ADC1_Init+0x98>)
 8002c62:	4a17      	ldr	r2, [pc, #92]	@ (8002cc0 <MX_ADC1_Init+0xa0>)
 8002c64:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c66:	4b14      	ldr	r3, [pc, #80]	@ (8002cb8 <MX_ADC1_Init+0x98>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002c6c:	4b12      	ldr	r3, [pc, #72]	@ (8002cb8 <MX_ADC1_Init+0x98>)
 8002c6e:	2201      	movs	r2, #1
 8002c70:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002c72:	4b11      	ldr	r3, [pc, #68]	@ (8002cb8 <MX_ADC1_Init+0x98>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8002cb8 <MX_ADC1_Init+0x98>)
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c80:	480d      	ldr	r0, [pc, #52]	@ (8002cb8 <MX_ADC1_Init+0x98>)
 8002c82:	f001 fb19 	bl	80042b8 <HAL_ADC_Init>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002c8c:	f000 fd56 	bl	800373c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002c90:	230a      	movs	r3, #10
 8002c92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002c94:	2301      	movs	r3, #1
 8002c96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c9c:	463b      	mov	r3, r7
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4805      	ldr	r0, [pc, #20]	@ (8002cb8 <MX_ADC1_Init+0x98>)
 8002ca2:	f001 fcff 	bl	80046a4 <HAL_ADC_ConfigChannel>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002cac:	f000 fd46 	bl	800373c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002cb0:	bf00      	nop
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	200017f0 	.word	0x200017f0
 8002cbc:	40012000 	.word	0x40012000
 8002cc0:	0f000001 	.word	0x0f000001

08002cc4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002cc8:	4b12      	ldr	r3, [pc, #72]	@ (8002d14 <MX_I2C1_Init+0x50>)
 8002cca:	4a13      	ldr	r2, [pc, #76]	@ (8002d18 <MX_I2C1_Init+0x54>)
 8002ccc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002cce:	4b11      	ldr	r3, [pc, #68]	@ (8002d14 <MX_I2C1_Init+0x50>)
 8002cd0:	4a12      	ldr	r2, [pc, #72]	@ (8002d1c <MX_I2C1_Init+0x58>)
 8002cd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002d14 <MX_I2C1_Init+0x50>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002cda:	4b0e      	ldr	r3, [pc, #56]	@ (8002d14 <MX_I2C1_Init+0x50>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8002d14 <MX_I2C1_Init+0x50>)
 8002ce2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002ce6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8002d14 <MX_I2C1_Init+0x50>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002cee:	4b09      	ldr	r3, [pc, #36]	@ (8002d14 <MX_I2C1_Init+0x50>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002cf4:	4b07      	ldr	r3, [pc, #28]	@ (8002d14 <MX_I2C1_Init+0x50>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cfa:	4b06      	ldr	r3, [pc, #24]	@ (8002d14 <MX_I2C1_Init+0x50>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d00:	4804      	ldr	r0, [pc, #16]	@ (8002d14 <MX_I2C1_Init+0x50>)
 8002d02:	f003 fa7b 	bl	80061fc <HAL_I2C_Init>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002d0c:	f000 fd16 	bl	800373c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d10:	bf00      	nop
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	20001838 	.word	0x20001838
 8002d18:	40005400 	.word	0x40005400
 8002d1c:	000186a0 	.word	0x000186a0

08002d20 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */
  //32sec watchdog period set
  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002d24:	4b09      	ldr	r3, [pc, #36]	@ (8002d4c <MX_IWDG_Init+0x2c>)
 8002d26:	4a0a      	ldr	r2, [pc, #40]	@ (8002d50 <MX_IWDG_Init+0x30>)
 8002d28:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8002d2a:	4b08      	ldr	r3, [pc, #32]	@ (8002d4c <MX_IWDG_Init+0x2c>)
 8002d2c:	2206      	movs	r2, #6
 8002d2e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8002d30:	4b06      	ldr	r3, [pc, #24]	@ (8002d4c <MX_IWDG_Init+0x2c>)
 8002d32:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8002d36:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002d38:	4804      	ldr	r0, [pc, #16]	@ (8002d4c <MX_IWDG_Init+0x2c>)
 8002d3a:	f004 fbb7 	bl	80074ac <HAL_IWDG_Init>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8002d44:	f000 fcfa 	bl	800373c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002d48:	bf00      	nop
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	2000188c 	.word	0x2000188c
 8002d50:	40003000 	.word	0x40003000

08002d54 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
#endif
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002d58:	4b0f      	ldr	r3, [pc, #60]	@ (8002d98 <MX_RTC_Init+0x44>)
 8002d5a:	4a10      	ldr	r2, [pc, #64]	@ (8002d9c <MX_RTC_Init+0x48>)
 8002d5c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d98 <MX_RTC_Init+0x44>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002d64:	4b0c      	ldr	r3, [pc, #48]	@ (8002d98 <MX_RTC_Init+0x44>)
 8002d66:	227f      	movs	r2, #127	@ 0x7f
 8002d68:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d98 <MX_RTC_Init+0x44>)
 8002d6c:	22ff      	movs	r2, #255	@ 0xff
 8002d6e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002d70:	4b09      	ldr	r3, [pc, #36]	@ (8002d98 <MX_RTC_Init+0x44>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002d76:	4b08      	ldr	r3, [pc, #32]	@ (8002d98 <MX_RTC_Init+0x44>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002d7c:	4b06      	ldr	r3, [pc, #24]	@ (8002d98 <MX_RTC_Init+0x44>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002d82:	4805      	ldr	r0, [pc, #20]	@ (8002d98 <MX_RTC_Init+0x44>)
 8002d84:	f006 fd44 	bl	8009810 <HAL_RTC_Init>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002d8e:	f000 fcd5 	bl	800373c <Error_Handler>
  /* USER CODE BEGIN RTC_Init 2 */
#endif

  /* USER CODE END RTC_Init 2 */

}
 8002d92:	bf00      	nop
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	20001898 	.word	0x20001898
 8002d9c:	40002800 	.word	0x40002800

08002da0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002da4:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd8 <MX_SDIO_SD_Init+0x38>)
 8002da6:	4a0d      	ldr	r2, [pc, #52]	@ (8002ddc <MX_SDIO_SD_Init+0x3c>)
 8002da8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002daa:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd8 <MX_SDIO_SD_Init+0x38>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002db0:	4b09      	ldr	r3, [pc, #36]	@ (8002dd8 <MX_SDIO_SD_Init+0x38>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002db6:	4b08      	ldr	r3, [pc, #32]	@ (8002dd8 <MX_SDIO_SD_Init+0x38>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002dbc:	4b06      	ldr	r3, [pc, #24]	@ (8002dd8 <MX_SDIO_SD_Init+0x38>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002dc2:	4b05      	ldr	r3, [pc, #20]	@ (8002dd8 <MX_SDIO_SD_Init+0x38>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 5;
 8002dc8:	4b03      	ldr	r3, [pc, #12]	@ (8002dd8 <MX_SDIO_SD_Init+0x38>)
 8002dca:	2205      	movs	r2, #5
 8002dcc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002dce:	bf00      	nop
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	200018b8 	.word	0x200018b8
 8002ddc:	40012c00 	.word	0x40012c00

08002de0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002de6:	f107 0308 	add.w	r3, r7, #8
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	605a      	str	r2, [r3, #4]
 8002df0:	609a      	str	r2, [r3, #8]
 8002df2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002df4:	463b      	mov	r3, r7
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002dfc:	4b1e      	ldr	r3, [pc, #120]	@ (8002e78 <MX_TIM1_Init+0x98>)
 8002dfe:	4a1f      	ldr	r2, [pc, #124]	@ (8002e7c <MX_TIM1_Init+0x9c>)
 8002e00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002e02:	4b1d      	ldr	r3, [pc, #116]	@ (8002e78 <MX_TIM1_Init+0x98>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002e08:	4b1b      	ldr	r3, [pc, #108]	@ (8002e78 <MX_TIM1_Init+0x98>)
 8002e0a:	2210      	movs	r2, #16
 8002e0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1002-1;
 8002e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002e78 <MX_TIM1_Init+0x98>)
 8002e10:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8002e14:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e16:	4b18      	ldr	r3, [pc, #96]	@ (8002e78 <MX_TIM1_Init+0x98>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e1c:	4b16      	ldr	r3, [pc, #88]	@ (8002e78 <MX_TIM1_Init+0x98>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e22:	4b15      	ldr	r3, [pc, #84]	@ (8002e78 <MX_TIM1_Init+0x98>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002e28:	4813      	ldr	r0, [pc, #76]	@ (8002e78 <MX_TIM1_Init+0x98>)
 8002e2a:	f008 f95b 	bl	800b0e4 <HAL_TIM_Base_Init>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002e34:	f000 fc82 	bl	800373c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002e3e:	f107 0308 	add.w	r3, r7, #8
 8002e42:	4619      	mov	r1, r3
 8002e44:	480c      	ldr	r0, [pc, #48]	@ (8002e78 <MX_TIM1_Init+0x98>)
 8002e46:	f008 fd97 	bl	800b978 <HAL_TIM_ConfigClockSource>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002e50:	f000 fc74 	bl	800373c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002e54:	2320      	movs	r3, #32
 8002e56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e5c:	463b      	mov	r3, r7
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4805      	ldr	r0, [pc, #20]	@ (8002e78 <MX_TIM1_Init+0x98>)
 8002e62:	f009 f951 	bl	800c108 <HAL_TIMEx_MasterConfigSynchronization>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002e6c:	f000 fc66 	bl	800373c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002e70:	bf00      	nop
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	2000193c 	.word	0x2000193c
 8002e7c:	40010000 	.word	0x40010000

08002e80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e86:	f107 0308 	add.w	r3, r7, #8
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	605a      	str	r2, [r3, #4]
 8002e90:	609a      	str	r2, [r3, #8]
 8002e92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e94:	463b      	mov	r3, r7
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8002f18 <MX_TIM2_Init+0x98>)
 8002e9e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ea2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8002ea4:	4b1c      	ldr	r3, [pc, #112]	@ (8002f18 <MX_TIM2_Init+0x98>)
 8002ea6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002eaa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eac:	4b1a      	ldr	r3, [pc, #104]	@ (8002f18 <MX_TIM2_Init+0x98>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400;
 8002eb2:	4b19      	ldr	r3, [pc, #100]	@ (8002f18 <MX_TIM2_Init+0x98>)
 8002eb4:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8002eb8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eba:	4b17      	ldr	r3, [pc, #92]	@ (8002f18 <MX_TIM2_Init+0x98>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ec0:	4b15      	ldr	r3, [pc, #84]	@ (8002f18 <MX_TIM2_Init+0x98>)
 8002ec2:	2280      	movs	r2, #128	@ 0x80
 8002ec4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ec6:	4814      	ldr	r0, [pc, #80]	@ (8002f18 <MX_TIM2_Init+0x98>)
 8002ec8:	f008 f90c 	bl	800b0e4 <HAL_TIM_Base_Init>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002ed2:	f000 fc33 	bl	800373c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ed6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002eda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002edc:	f107 0308 	add.w	r3, r7, #8
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	480d      	ldr	r0, [pc, #52]	@ (8002f18 <MX_TIM2_Init+0x98>)
 8002ee4:	f008 fd48 	bl	800b978 <HAL_TIM_ConfigClockSource>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002eee:	f000 fc25 	bl	800373c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002efa:	463b      	mov	r3, r7
 8002efc:	4619      	mov	r1, r3
 8002efe:	4806      	ldr	r0, [pc, #24]	@ (8002f18 <MX_TIM2_Init+0x98>)
 8002f00:	f009 f902 	bl	800c108 <HAL_TIMEx_MasterConfigSynchronization>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002f0a:	f000 fc17 	bl	800373c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002f0e:	bf00      	nop
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20001984 	.word	0x20001984

08002f1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08e      	sub	sp, #56	@ 0x38
 8002f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	605a      	str	r2, [r3, #4]
 8002f2c:	609a      	str	r2, [r3, #8]
 8002f2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f30:	f107 0320 	add.w	r3, r7, #32
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f3a:	1d3b      	adds	r3, r7, #4
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	609a      	str	r2, [r3, #8]
 8002f44:	60da      	str	r2, [r3, #12]
 8002f46:	611a      	str	r2, [r3, #16]
 8002f48:	615a      	str	r2, [r3, #20]
 8002f4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f4c:	4b32      	ldr	r3, [pc, #200]	@ (8003018 <MX_TIM3_Init+0xfc>)
 8002f4e:	4a33      	ldr	r2, [pc, #204]	@ (800301c <MX_TIM3_Init+0x100>)
 8002f50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002f52:	4b31      	ldr	r3, [pc, #196]	@ (8003018 <MX_TIM3_Init+0xfc>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002f58:	4b2f      	ldr	r3, [pc, #188]	@ (8003018 <MX_TIM3_Init+0xfc>)
 8002f5a:	2210      	movs	r2, #16
 8002f5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1002-1;
 8002f5e:	4b2e      	ldr	r3, [pc, #184]	@ (8003018 <MX_TIM3_Init+0xfc>)
 8002f60:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8002f64:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f66:	4b2c      	ldr	r3, [pc, #176]	@ (8003018 <MX_TIM3_Init+0xfc>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f6c:	4b2a      	ldr	r3, [pc, #168]	@ (8003018 <MX_TIM3_Init+0xfc>)
 8002f6e:	2280      	movs	r2, #128	@ 0x80
 8002f70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f72:	4829      	ldr	r0, [pc, #164]	@ (8003018 <MX_TIM3_Init+0xfc>)
 8002f74:	f008 f8b6 	bl	800b0e4 <HAL_TIM_Base_Init>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002f7e:	f000 fbdd 	bl	800373c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f86:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f88:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4822      	ldr	r0, [pc, #136]	@ (8003018 <MX_TIM3_Init+0xfc>)
 8002f90:	f008 fcf2 	bl	800b978 <HAL_TIM_ConfigClockSource>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002f9a:	f000 fbcf 	bl	800373c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002f9e:	481e      	ldr	r0, [pc, #120]	@ (8003018 <MX_TIM3_Init+0xfc>)
 8002fa0:	f008 fa2f 	bl	800b402 <HAL_TIM_PWM_Init>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002faa:	f000 fbc7 	bl	800373c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002fb6:	f107 0320 	add.w	r3, r7, #32
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4816      	ldr	r0, [pc, #88]	@ (8003018 <MX_TIM3_Init+0xfc>)
 8002fbe:	f009 f8a3 	bl	800c108 <HAL_TIMEx_MasterConfigSynchronization>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002fc8:	f000 fbb8 	bl	800373c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fcc:	2360      	movs	r3, #96	@ 0x60
 8002fce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fdc:	1d3b      	adds	r3, r7, #4
 8002fde:	2200      	movs	r2, #0
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	480d      	ldr	r0, [pc, #52]	@ (8003018 <MX_TIM3_Init+0xfc>)
 8002fe4:	f008 fc06 	bl	800b7f4 <HAL_TIM_PWM_ConfigChannel>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002fee:	f000 fba5 	bl	800373c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ff2:	1d3b      	adds	r3, r7, #4
 8002ff4:	2204      	movs	r2, #4
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4807      	ldr	r0, [pc, #28]	@ (8003018 <MX_TIM3_Init+0xfc>)
 8002ffa:	f008 fbfb 	bl	800b7f4 <HAL_TIM_PWM_ConfigChannel>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8003004:	f000 fb9a 	bl	800373c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003008:	4803      	ldr	r0, [pc, #12]	@ (8003018 <MX_TIM3_Init+0xfc>)
 800300a:	f000 fdb7 	bl	8003b7c <HAL_TIM_MspPostInit>

}
 800300e:	bf00      	nop
 8003010:	3738      	adds	r7, #56	@ 0x38
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	200019cc 	.word	0x200019cc
 800301c:	40000400 	.word	0x40000400

08003020 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003024:	4b11      	ldr	r3, [pc, #68]	@ (800306c <MX_USART1_UART_Init+0x4c>)
 8003026:	4a12      	ldr	r2, [pc, #72]	@ (8003070 <MX_USART1_UART_Init+0x50>)
 8003028:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800302a:	4b10      	ldr	r3, [pc, #64]	@ (800306c <MX_USART1_UART_Init+0x4c>)
 800302c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003030:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003032:	4b0e      	ldr	r3, [pc, #56]	@ (800306c <MX_USART1_UART_Init+0x4c>)
 8003034:	2200      	movs	r2, #0
 8003036:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003038:	4b0c      	ldr	r3, [pc, #48]	@ (800306c <MX_USART1_UART_Init+0x4c>)
 800303a:	2200      	movs	r2, #0
 800303c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800303e:	4b0b      	ldr	r3, [pc, #44]	@ (800306c <MX_USART1_UART_Init+0x4c>)
 8003040:	2200      	movs	r2, #0
 8003042:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003044:	4b09      	ldr	r3, [pc, #36]	@ (800306c <MX_USART1_UART_Init+0x4c>)
 8003046:	220c      	movs	r2, #12
 8003048:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800304a:	4b08      	ldr	r3, [pc, #32]	@ (800306c <MX_USART1_UART_Init+0x4c>)
 800304c:	2200      	movs	r2, #0
 800304e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003050:	4b06      	ldr	r3, [pc, #24]	@ (800306c <MX_USART1_UART_Init+0x4c>)
 8003052:	2200      	movs	r2, #0
 8003054:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003056:	4805      	ldr	r0, [pc, #20]	@ (800306c <MX_USART1_UART_Init+0x4c>)
 8003058:	f009 f8d8 	bl	800c20c <HAL_UART_Init>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003062:	f000 fb6b 	bl	800373c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003066:	bf00      	nop
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	20001a74 	.word	0x20001a74
 8003070:	40011000 	.word	0x40011000

08003074 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003078:	4b11      	ldr	r3, [pc, #68]	@ (80030c0 <MX_USART2_UART_Init+0x4c>)
 800307a:	4a12      	ldr	r2, [pc, #72]	@ (80030c4 <MX_USART2_UART_Init+0x50>)
 800307c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800307e:	4b10      	ldr	r3, [pc, #64]	@ (80030c0 <MX_USART2_UART_Init+0x4c>)
 8003080:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003084:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003086:	4b0e      	ldr	r3, [pc, #56]	@ (80030c0 <MX_USART2_UART_Init+0x4c>)
 8003088:	2200      	movs	r2, #0
 800308a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800308c:	4b0c      	ldr	r3, [pc, #48]	@ (80030c0 <MX_USART2_UART_Init+0x4c>)
 800308e:	2200      	movs	r2, #0
 8003090:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003092:	4b0b      	ldr	r3, [pc, #44]	@ (80030c0 <MX_USART2_UART_Init+0x4c>)
 8003094:	2200      	movs	r2, #0
 8003096:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003098:	4b09      	ldr	r3, [pc, #36]	@ (80030c0 <MX_USART2_UART_Init+0x4c>)
 800309a:	220c      	movs	r2, #12
 800309c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800309e:	4b08      	ldr	r3, [pc, #32]	@ (80030c0 <MX_USART2_UART_Init+0x4c>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030a4:	4b06      	ldr	r3, [pc, #24]	@ (80030c0 <MX_USART2_UART_Init+0x4c>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80030aa:	4805      	ldr	r0, [pc, #20]	@ (80030c0 <MX_USART2_UART_Init+0x4c>)
 80030ac:	f009 f8ae 	bl	800c20c <HAL_UART_Init>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80030b6:	f000 fb41 	bl	800373c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80030ba:	bf00      	nop
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	20001abc 	.word	0x20001abc
 80030c4:	40004400 	.word	0x40004400

080030c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	607b      	str	r3, [r7, #4]
 80030d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003104 <MX_DMA_Init+0x3c>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d6:	4a0b      	ldr	r2, [pc, #44]	@ (8003104 <MX_DMA_Init+0x3c>)
 80030d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80030dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80030de:	4b09      	ldr	r3, [pc, #36]	@ (8003104 <MX_DMA_Init+0x3c>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030e6:	607b      	str	r3, [r7, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80030ea:	2200      	movs	r2, #0
 80030ec:	2100      	movs	r1, #0
 80030ee:	2044      	movs	r0, #68	@ 0x44
 80030f0:	f001 fe51 	bl	8004d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80030f4:	2044      	movs	r0, #68	@ 0x44
 80030f6:	f001 fe6a 	bl	8004dce <HAL_NVIC_EnableIRQ>

}
 80030fa:	bf00      	nop
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40023800 	.word	0x40023800

08003108 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08a      	sub	sp, #40	@ 0x28
 800310c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800310e:	f107 0314 	add.w	r3, r7, #20
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	605a      	str	r2, [r3, #4]
 8003118:	609a      	str	r2, [r3, #8]
 800311a:	60da      	str	r2, [r3, #12]
 800311c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	613b      	str	r3, [r7, #16]
 8003122:	4b71      	ldr	r3, [pc, #452]	@ (80032e8 <MX_GPIO_Init+0x1e0>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003126:	4a70      	ldr	r2, [pc, #448]	@ (80032e8 <MX_GPIO_Init+0x1e0>)
 8003128:	f043 0304 	orr.w	r3, r3, #4
 800312c:	6313      	str	r3, [r2, #48]	@ 0x30
 800312e:	4b6e      	ldr	r3, [pc, #440]	@ (80032e8 <MX_GPIO_Init+0x1e0>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003132:	f003 0304 	and.w	r3, r3, #4
 8003136:	613b      	str	r3, [r7, #16]
 8003138:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800313a:	2300      	movs	r3, #0
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	4b6a      	ldr	r3, [pc, #424]	@ (80032e8 <MX_GPIO_Init+0x1e0>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003142:	4a69      	ldr	r2, [pc, #420]	@ (80032e8 <MX_GPIO_Init+0x1e0>)
 8003144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003148:	6313      	str	r3, [r2, #48]	@ 0x30
 800314a:	4b67      	ldr	r3, [pc, #412]	@ (80032e8 <MX_GPIO_Init+0x1e0>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	60bb      	str	r3, [r7, #8]
 800315a:	4b63      	ldr	r3, [pc, #396]	@ (80032e8 <MX_GPIO_Init+0x1e0>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315e:	4a62      	ldr	r2, [pc, #392]	@ (80032e8 <MX_GPIO_Init+0x1e0>)
 8003160:	f043 0301 	orr.w	r3, r3, #1
 8003164:	6313      	str	r3, [r2, #48]	@ 0x30
 8003166:	4b60      	ldr	r3, [pc, #384]	@ (80032e8 <MX_GPIO_Init+0x1e0>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	60bb      	str	r3, [r7, #8]
 8003170:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	607b      	str	r3, [r7, #4]
 8003176:	4b5c      	ldr	r3, [pc, #368]	@ (80032e8 <MX_GPIO_Init+0x1e0>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317a:	4a5b      	ldr	r2, [pc, #364]	@ (80032e8 <MX_GPIO_Init+0x1e0>)
 800317c:	f043 0302 	orr.w	r3, r3, #2
 8003180:	6313      	str	r3, [r2, #48]	@ 0x30
 8003182:	4b59      	ldr	r3, [pc, #356]	@ (80032e8 <MX_GPIO_Init+0x1e0>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	607b      	str	r3, [r7, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	603b      	str	r3, [r7, #0]
 8003192:	4b55      	ldr	r3, [pc, #340]	@ (80032e8 <MX_GPIO_Init+0x1e0>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003196:	4a54      	ldr	r2, [pc, #336]	@ (80032e8 <MX_GPIO_Init+0x1e0>)
 8003198:	f043 0308 	orr.w	r3, r3, #8
 800319c:	6313      	str	r3, [r2, #48]	@ 0x30
 800319e:	4b52      	ldr	r3, [pc, #328]	@ (80032e8 <MX_GPIO_Init+0x1e0>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_MOTION_GPIO_Port, EN_MOTION_Pin, GPIO_PIN_RESET);
 80031aa:	2200      	movs	r2, #0
 80031ac:	2102      	movs	r1, #2
 80031ae:	484f      	ldr	r0, [pc, #316]	@ (80032ec <MX_GPIO_Init+0x1e4>)
 80031b0:	f002 fff2 	bl	8006198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, GPIO_PIN_SET);
 80031b4:	2201      	movs	r2, #1
 80031b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80031ba:	484d      	ldr	r0, [pc, #308]	@ (80032f0 <MX_GPIO_Init+0x1e8>)
 80031bc:	f002 ffec 	bl	8006198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 80031c0:	2200      	movs	r2, #0
 80031c2:	2108      	movs	r1, #8
 80031c4:	484a      	ldr	r0, [pc, #296]	@ (80032f0 <MX_GPIO_Init+0x1e8>)
 80031c6:	f002 ffe7 	bl	8006198 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80031ca:	f642 63fe 	movw	r3, #12030	@ 0x2efe
 80031ce:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031d0:	2303      	movs	r3, #3
 80031d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d4:	2300      	movs	r3, #0
 80031d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031d8:	f107 0314 	add.w	r3, r7, #20
 80031dc:	4619      	mov	r1, r3
 80031de:	4845      	ldr	r0, [pc, #276]	@ (80032f4 <MX_GPIO_Init+0x1ec>)
 80031e0:	f002 fd5a 	bl	8005c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_MOTION_Pin */
  GPIO_InitStruct.Pin = OUT_MOTION_Pin;
 80031e4:	2301      	movs	r3, #1
 80031e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031e8:	2300      	movs	r3, #0
 80031ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ec:	2300      	movs	r3, #0
 80031ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OUT_MOTION_GPIO_Port, &GPIO_InitStruct);
 80031f0:	f107 0314 	add.w	r3, r7, #20
 80031f4:	4619      	mov	r1, r3
 80031f6:	483d      	ldr	r0, [pc, #244]	@ (80032ec <MX_GPIO_Init+0x1e4>)
 80031f8:	f002 fd4e 	bl	8005c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_MOTION_Pin */
  GPIO_InitStruct.Pin = EN_MOTION_Pin;
 80031fc:	2302      	movs	r3, #2
 80031fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003200:	2301      	movs	r3, #1
 8003202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003204:	2300      	movs	r3, #0
 8003206:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003208:	2302      	movs	r3, #2
 800320a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_MOTION_GPIO_Port, &GPIO_InitStruct);
 800320c:	f107 0314 	add.w	r3, r7, #20
 8003210:	4619      	mov	r1, r3
 8003212:	4836      	ldr	r0, [pc, #216]	@ (80032ec <MX_GPIO_Init+0x1e4>)
 8003214:	f002 fd40 	bl	8005c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8003218:	f44f 63be 	mov.w	r3, #1520	@ 0x5f0
 800321c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800321e:	2303      	movs	r3, #3
 8003220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003222:	2300      	movs	r3, #0
 8003224:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003226:	f107 0314 	add.w	r3, r7, #20
 800322a:	4619      	mov	r1, r3
 800322c:	482f      	ldr	r0, [pc, #188]	@ (80032ec <MX_GPIO_Init+0x1e4>)
 800322e:	f002 fd33 	bl	8005c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8003232:	f247 4307 	movw	r3, #29703	@ 0x7407
 8003236:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003238:	2303      	movs	r3, #3
 800323a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323c:	2300      	movs	r3, #0
 800323e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003240:	f107 0314 	add.w	r3, r7, #20
 8003244:	4619      	mov	r1, r3
 8003246:	482a      	ldr	r0, [pc, #168]	@ (80032f0 <MX_GPIO_Init+0x1e8>)
 8003248:	f002 fd26 	bl	8005c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_5V_Pin */
  GPIO_InitStruct.Pin = EN_5V_Pin;
 800324c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003252:	2301      	movs	r3, #1
 8003254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003256:	2300      	movs	r3, #0
 8003258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800325a:	2302      	movs	r3, #2
 800325c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_5V_GPIO_Port, &GPIO_InitStruct);
 800325e:	f107 0314 	add.w	r3, r7, #20
 8003262:	4619      	mov	r1, r3
 8003264:	4822      	ldr	r0, [pc, #136]	@ (80032f0 <MX_GPIO_Init+0x1e8>)
 8003266:	f002 fd17 	bl	8005c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 800326a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800326e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003270:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003276:	2302      	movs	r3, #2
 8003278:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 800327a:	f107 0314 	add.w	r3, r7, #20
 800327e:	4619      	mov	r1, r3
 8003280:	481a      	ldr	r0, [pc, #104]	@ (80032ec <MX_GPIO_Init+0x1e4>)
 8003282:	f002 fd09 	bl	8005c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_DET_Pin */
  GPIO_InitStruct.Pin = SW_DET_Pin;
 8003286:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800328a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800328c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003292:	2301      	movs	r3, #1
 8003294:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_DET_GPIO_Port, &GPIO_InitStruct);
 8003296:	f107 0314 	add.w	r3, r7, #20
 800329a:	4619      	mov	r1, r3
 800329c:	4813      	ldr	r0, [pc, #76]	@ (80032ec <MX_GPIO_Init+0x1e4>)
 800329e:	f002 fcfb 	bl	8005c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 80032a2:	2308      	movs	r3, #8
 80032a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032a6:	2301      	movs	r3, #1
 80032a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032aa:	2300      	movs	r3, #0
 80032ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ae:	2300      	movs	r3, #0
 80032b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 80032b2:	f107 0314 	add.w	r3, r7, #20
 80032b6:	4619      	mov	r1, r3
 80032b8:	480d      	ldr	r0, [pc, #52]	@ (80032f0 <MX_GPIO_Init+0x1e8>)
 80032ba:	f002 fced 	bl	8005c98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80032be:	2200      	movs	r2, #0
 80032c0:	2100      	movs	r1, #0
 80032c2:	2017      	movs	r0, #23
 80032c4:	f001 fd67 	bl	8004d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80032c8:	2017      	movs	r0, #23
 80032ca:	f001 fd80 	bl	8004dce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80032ce:	2200      	movs	r2, #0
 80032d0:	2100      	movs	r1, #0
 80032d2:	2028      	movs	r0, #40	@ 0x28
 80032d4:	f001 fd5f 	bl	8004d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80032d8:	2028      	movs	r0, #40	@ 0x28
 80032da:	f001 fd78 	bl	8004dce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80032de:	bf00      	nop
 80032e0:	3728      	adds	r7, #40	@ 0x28
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40023800 	.word	0x40023800
 80032ec:	40020000 	.word	0x40020000
 80032f0:	40020400 	.word	0x40020400
 80032f4:	40020800 	.word	0x40020800

080032f8 <gpio_analog>:

/* USER CODE BEGIN 4 */

void gpio_analog()
{  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08a      	sub	sp, #40	@ 0x28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	f107 0314 	add.w	r3, r7, #20
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	605a      	str	r2, [r3, #4]
 8003308:	609a      	str	r2, [r3, #8]
 800330a:	60da      	str	r2, [r3, #12]
 800330c:	611a      	str	r2, [r3, #16]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800330e:	2300      	movs	r3, #0
 8003310:	613b      	str	r3, [r7, #16]
 8003312:	4b41      	ldr	r3, [pc, #260]	@ (8003418 <gpio_analog+0x120>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003316:	4a40      	ldr	r2, [pc, #256]	@ (8003418 <gpio_analog+0x120>)
 8003318:	f043 0304 	orr.w	r3, r3, #4
 800331c:	6313      	str	r3, [r2, #48]	@ 0x30
 800331e:	4b3e      	ldr	r3, [pc, #248]	@ (8003418 <gpio_analog+0x120>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003322:	f003 0304 	and.w	r3, r3, #4
 8003326:	613b      	str	r3, [r7, #16]
 8003328:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 800332a:	2300      	movs	r3, #0
 800332c:	60fb      	str	r3, [r7, #12]
 800332e:	4b3a      	ldr	r3, [pc, #232]	@ (8003418 <gpio_analog+0x120>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003332:	4a39      	ldr	r2, [pc, #228]	@ (8003418 <gpio_analog+0x120>)
 8003334:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003338:	6313      	str	r3, [r2, #48]	@ 0x30
 800333a:	4b37      	ldr	r3, [pc, #220]	@ (8003418 <gpio_analog+0x120>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003346:	2300      	movs	r3, #0
 8003348:	60bb      	str	r3, [r7, #8]
 800334a:	4b33      	ldr	r3, [pc, #204]	@ (8003418 <gpio_analog+0x120>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334e:	4a32      	ldr	r2, [pc, #200]	@ (8003418 <gpio_analog+0x120>)
 8003350:	f043 0301 	orr.w	r3, r3, #1
 8003354:	6313      	str	r3, [r2, #48]	@ 0x30
 8003356:	4b30      	ldr	r3, [pc, #192]	@ (8003418 <gpio_analog+0x120>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	60bb      	str	r3, [r7, #8]
 8003360:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	607b      	str	r3, [r7, #4]
 8003366:	4b2c      	ldr	r3, [pc, #176]	@ (8003418 <gpio_analog+0x120>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336a:	4a2b      	ldr	r2, [pc, #172]	@ (8003418 <gpio_analog+0x120>)
 800336c:	f043 0302 	orr.w	r3, r3, #2
 8003370:	6313      	str	r3, [r2, #48]	@ 0x30
 8003372:	4b29      	ldr	r3, [pc, #164]	@ (8003418 <gpio_analog+0x120>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	607b      	str	r3, [r7, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 800337e:	2300      	movs	r3, #0
 8003380:	603b      	str	r3, [r7, #0]
 8003382:	4b25      	ldr	r3, [pc, #148]	@ (8003418 <gpio_analog+0x120>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003386:	4a24      	ldr	r2, [pc, #144]	@ (8003418 <gpio_analog+0x120>)
 8003388:	f043 0308 	orr.w	r3, r3, #8
 800338c:	6313      	str	r3, [r2, #48]	@ 0x30
 800338e:	4b22      	ldr	r3, [pc, #136]	@ (8003418 <gpio_analog+0x120>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	683b      	ldr	r3, [r7, #0]
//	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
//	  GPIO_InitStruct.Pull = GPIO_NOPULL;
//	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);

	  GPIO_InitStruct.Pin = EN_5V_Pin;
 800339a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800339e:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033a0:	2303      	movs	r3, #3
 80033a2:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a4:	2300      	movs	r3, #0
 80033a6:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a8:	2300      	movs	r3, #0
 80033aa:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(EN_5V_GPIO_Port, &GPIO_InitStruct);
 80033ac:	f107 0314 	add.w	r3, r7, #20
 80033b0:	4619      	mov	r1, r3
 80033b2:	481a      	ldr	r0, [pc, #104]	@ (800341c <gpio_analog+0x124>)
 80033b4:	f002 fc70 	bl	8005c98 <HAL_GPIO_Init>

	  /*Configure GPIO pin : OUT_MOTION_Pin */
	  GPIO_InitStruct.Pin = OUT_MOTION_Pin;
 80033b8:	2301      	movs	r3, #1
 80033ba:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033bc:	2303      	movs	r3, #3
 80033be:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c4:	2300      	movs	r3, #0
 80033c6:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(OUT_MOTION_GPIO_Port, &GPIO_InitStruct);
 80033c8:	f107 0314 	add.w	r3, r7, #20
 80033cc:	4619      	mov	r1, r3
 80033ce:	4814      	ldr	r0, [pc, #80]	@ (8003420 <gpio_analog+0x128>)
 80033d0:	f002 fc62 	bl	8005c98 <HAL_GPIO_Init>

	  /*Configure GPIO pin : EN_MOTION_Pin */
	  GPIO_InitStruct.Pin = EN_MOTION_Pin;
 80033d4:	2302      	movs	r3, #2
 80033d6:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033d8:	2303      	movs	r3, #3
 80033da:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033dc:	2300      	movs	r3, #0
 80033de:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e0:	2300      	movs	r3, #0
 80033e2:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(EN_MOTION_GPIO_Port, &GPIO_InitStruct);
 80033e4:	f107 0314 	add.w	r3, r7, #20
 80033e8:	4619      	mov	r1, r3
 80033ea:	480d      	ldr	r0, [pc, #52]	@ (8003420 <gpio_analog+0x128>)
 80033ec:	f002 fc54 	bl	8005c98 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 80033f0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80033f4:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033f6:	2303      	movs	r3, #3
 80033f8:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033fe:	2300      	movs	r3, #0
 8003400:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003402:	f107 0314 	add.w	r3, r7, #20
 8003406:	4619      	mov	r1, r3
 8003408:	4805      	ldr	r0, [pc, #20]	@ (8003420 <gpio_analog+0x128>)
 800340a:	f002 fc45 	bl	8005c98 <HAL_GPIO_Init>

}
 800340e:	bf00      	nop
 8003410:	3728      	adds	r7, #40	@ 0x28
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40023800 	.word	0x40023800
 800341c:	40020400 	.word	0x40020400
 8003420:	40020000 	.word	0x40020000

08003424 <i2c1_gpio_analog>:
void i2c1_gpio_analog()
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800342a:	1d3b      	adds	r3, r7, #4
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	605a      	str	r2, [r3, #4]
 8003432:	609a      	str	r2, [r3, #8]
 8003434:	60da      	str	r2, [r3, #12]
 8003436:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = SCD4x_SCL_Pin|SCD4x_SDA_Pin;
 8003438:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800343c:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800343e:	2303      	movs	r3, #3
 8003440:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003442:	2300      	movs	r3, #0
 8003444:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003446:	2300      	movs	r3, #0
 8003448:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800344a:	1d3b      	adds	r3, r7, #4
 800344c:	4619      	mov	r1, r3
 800344e:	4803      	ldr	r0, [pc, #12]	@ (800345c <i2c1_gpio_analog+0x38>)
 8003450:	f002 fc22 	bl	8005c98 <HAL_GPIO_Init>


}
 8003454:	bf00      	nop
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40020400 	.word	0x40020400

08003460 <uart_gpio_analog>:
void uart_gpio_analog()
{  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	1d3b      	adds	r3, r7, #4
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	605a      	str	r2, [r3, #4]
 800346e:	609a      	str	r2, [r3, #8]
 8003470:	60da      	str	r2, [r3, #12]
 8003472:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = CLI_UART1_TX_Pin|CLI_UART1_RX_Pin;
 8003474:	23c0      	movs	r3, #192	@ 0xc0
 8003476:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003478:	2303      	movs	r3, #3
 800347a:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347c:	2300      	movs	r3, #0
 800347e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003480:	2300      	movs	r3, #0
 8003482:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003484:	1d3b      	adds	r3, r7, #4
 8003486:	4619      	mov	r1, r3
 8003488:	4809      	ldr	r0, [pc, #36]	@ (80034b0 <uart_gpio_analog+0x50>)
 800348a:	f002 fc05 	bl	8005c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PM_USART2_TX_Pin|PM_USART2_RX_Pin;
 800348e:	230c      	movs	r3, #12
 8003490:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003492:	2303      	movs	r3, #3
 8003494:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003496:	2300      	movs	r3, #0
 8003498:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800349a:	2300      	movs	r3, #0
 800349c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800349e:	1d3b      	adds	r3, r7, #4
 80034a0:	4619      	mov	r1, r3
 80034a2:	4804      	ldr	r0, [pc, #16]	@ (80034b4 <uart_gpio_analog+0x54>)
 80034a4:	f002 fbf8 	bl	8005c98 <HAL_GPIO_Init>
}
 80034a8:	bf00      	nop
 80034aa:	3718      	adds	r7, #24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40020400 	.word	0x40020400
 80034b4:	40020000 	.word	0x40020000

080034b8 <timer_gpio_analog>:
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

}
void timer_gpio_analog()
{  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	1d3b      	adds	r3, r7, #4
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	605a      	str	r2, [r3, #4]
 80034c6:	609a      	str	r2, [r3, #8]
 80034c8:	60da      	str	r2, [r3, #12]
 80034ca:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 80034cc:	2330      	movs	r3, #48	@ 0x30
 80034ce:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034d0:	2303      	movs	r3, #3
 80034d2:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d8:	2300      	movs	r3, #0
 80034da:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034dc:	1d3b      	adds	r3, r7, #4
 80034de:	4619      	mov	r1, r3
 80034e0:	4803      	ldr	r0, [pc, #12]	@ (80034f0 <timer_gpio_analog+0x38>)
 80034e2:	f002 fbd9 	bl	8005c98 <HAL_GPIO_Init>

}
 80034e6:	bf00      	nop
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40020400 	.word	0x40020400

080034f4 <gpio_disable>:



void gpio_disable()
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
	i2c1_gpio_analog();
 80034f8:	f7ff ff94 	bl	8003424 <i2c1_gpio_analog>
	 uart_gpio_analog();
 80034fc:	f7ff ffb0 	bl	8003460 <uart_gpio_analog>
	// usb_gpio_analog();
	 timer_gpio_analog();
 8003500:	f7ff ffda 	bl	80034b8 <timer_gpio_analog>
	 gpio_analog();
 8003504:	f7ff fef8 	bl	80032f8 <gpio_analog>
//		  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
//		  GPIO_InitStruct.Pull = GPIO_NOPULL;
//		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

}
 8003508:	bf00      	nop
 800350a:	bd80      	pop	{r7, pc}

0800350c <gpio_enable>:
void gpio_enable()
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b08a      	sub	sp, #40	@ 0x28
 8003510:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003512:	f107 0314 	add.w	r3, r7, #20
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	605a      	str	r2, [r3, #4]
 800351c:	609a      	str	r2, [r3, #8]
 800351e:	60da      	str	r2, [r3, #12]
 8003520:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	613b      	str	r3, [r7, #16]
 8003526:	4b46      	ldr	r3, [pc, #280]	@ (8003640 <gpio_enable+0x134>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352a:	4a45      	ldr	r2, [pc, #276]	@ (8003640 <gpio_enable+0x134>)
 800352c:	f043 0304 	orr.w	r3, r3, #4
 8003530:	6313      	str	r3, [r2, #48]	@ 0x30
 8003532:	4b43      	ldr	r3, [pc, #268]	@ (8003640 <gpio_enable+0x134>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	613b      	str	r3, [r7, #16]
 800353c:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 800353e:	2300      	movs	r3, #0
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	4b3f      	ldr	r3, [pc, #252]	@ (8003640 <gpio_enable+0x134>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003546:	4a3e      	ldr	r2, [pc, #248]	@ (8003640 <gpio_enable+0x134>)
 8003548:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800354c:	6313      	str	r3, [r2, #48]	@ 0x30
 800354e:	4b3c      	ldr	r3, [pc, #240]	@ (8003640 <gpio_enable+0x134>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	60bb      	str	r3, [r7, #8]
 800355e:	4b38      	ldr	r3, [pc, #224]	@ (8003640 <gpio_enable+0x134>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003562:	4a37      	ldr	r2, [pc, #220]	@ (8003640 <gpio_enable+0x134>)
 8003564:	f043 0301 	orr.w	r3, r3, #1
 8003568:	6313      	str	r3, [r2, #48]	@ 0x30
 800356a:	4b35      	ldr	r3, [pc, #212]	@ (8003640 <gpio_enable+0x134>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	60bb      	str	r3, [r7, #8]
 8003574:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003576:	2300      	movs	r3, #0
 8003578:	607b      	str	r3, [r7, #4]
 800357a:	4b31      	ldr	r3, [pc, #196]	@ (8003640 <gpio_enable+0x134>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357e:	4a30      	ldr	r2, [pc, #192]	@ (8003640 <gpio_enable+0x134>)
 8003580:	f043 0302 	orr.w	r3, r3, #2
 8003584:	6313      	str	r3, [r2, #48]	@ 0x30
 8003586:	4b2e      	ldr	r3, [pc, #184]	@ (8003640 <gpio_enable+0x134>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	607b      	str	r3, [r7, #4]
 8003590:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003592:	2300      	movs	r3, #0
 8003594:	603b      	str	r3, [r7, #0]
 8003596:	4b2a      	ldr	r3, [pc, #168]	@ (8003640 <gpio_enable+0x134>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359a:	4a29      	ldr	r2, [pc, #164]	@ (8003640 <gpio_enable+0x134>)
 800359c:	f043 0308 	orr.w	r3, r3, #8
 80035a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80035a2:	4b27      	ldr	r3, [pc, #156]	@ (8003640 <gpio_enable+0x134>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	683b      	ldr	r3, [r7, #0]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(EN_MOTION_GPIO_Port, EN_MOTION_Pin, GPIO_PIN_RESET);
 80035ae:	2200      	movs	r2, #0
 80035b0:	2102      	movs	r1, #2
 80035b2:	4824      	ldr	r0, [pc, #144]	@ (8003644 <gpio_enable+0x138>)
 80035b4:	f002 fdf0 	bl	8006198 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, GPIO_PIN_SET);
 80035b8:	2201      	movs	r2, #1
 80035ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035be:	4822      	ldr	r0, [pc, #136]	@ (8003648 <gpio_enable+0x13c>)
 80035c0:	f002 fdea 	bl	8006198 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */


	  /*Configure GPIO pin : OUT_MOTION_Pin */
	  GPIO_InitStruct.Pin = OUT_MOTION_Pin;
 80035c4:	2301      	movs	r3, #1
 80035c6:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035c8:	2300      	movs	r3, #0
 80035ca:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035cc:	2300      	movs	r3, #0
 80035ce:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(OUT_MOTION_GPIO_Port, &GPIO_InitStruct);
 80035d0:	f107 0314 	add.w	r3, r7, #20
 80035d4:	4619      	mov	r1, r3
 80035d6:	481b      	ldr	r0, [pc, #108]	@ (8003644 <gpio_enable+0x138>)
 80035d8:	f002 fb5e 	bl	8005c98 <HAL_GPIO_Init>

	  /*Configure GPIO pin : EN_MOTION_Pin */
	  GPIO_InitStruct.Pin = EN_MOTION_Pin;
 80035dc:	2302      	movs	r3, #2
 80035de:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035e0:	2301      	movs	r3, #1
 80035e2:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e4:	2300      	movs	r3, #0
 80035e6:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035e8:	2302      	movs	r3, #2
 80035ea:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(EN_MOTION_GPIO_Port, &GPIO_InitStruct);
 80035ec:	f107 0314 	add.w	r3, r7, #20
 80035f0:	4619      	mov	r1, r3
 80035f2:	4814      	ldr	r0, [pc, #80]	@ (8003644 <gpio_enable+0x138>)
 80035f4:	f002 fb50 	bl	8005c98 <HAL_GPIO_Init>



	  /*Configure GPIO pin : EN_5V_Pin */
	  GPIO_InitStruct.Pin = EN_5V_Pin;
 80035f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035fc:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035fe:	2301      	movs	r3, #1
 8003600:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003602:	2300      	movs	r3, #0
 8003604:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003606:	2302      	movs	r3, #2
 8003608:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(EN_5V_GPIO_Port, &GPIO_InitStruct);
 800360a:	f107 0314 	add.w	r3, r7, #20
 800360e:	4619      	mov	r1, r3
 8003610:	480d      	ldr	r0, [pc, #52]	@ (8003648 <gpio_enable+0x13c>)
 8003612:	f002 fb41 	bl	8005c98 <HAL_GPIO_Init>


	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003616:	2200      	movs	r2, #0
 8003618:	2100      	movs	r1, #0
 800361a:	2017      	movs	r0, #23
 800361c:	f001 fbbb 	bl	8004d96 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003620:	2017      	movs	r0, #23
 8003622:	f001 fbd4 	bl	8004dce <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003626:	2200      	movs	r2, #0
 8003628:	2100      	movs	r1, #0
 800362a:	2028      	movs	r0, #40	@ 0x28
 800362c:	f001 fbb3 	bl	8004d96 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003630:	2028      	movs	r0, #40	@ 0x28
 8003632:	f001 fbcc 	bl	8004dce <HAL_NVIC_EnableIRQ>
//	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
//	    GPIO_InitStruct.Pull = GPIO_NOPULL;
//	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
//	    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
//	    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
}
 8003636:	bf00      	nop
 8003638:	3728      	adds	r7, #40	@ 0x28
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	40023800 	.word	0x40023800
 8003644:	40020000 	.word	0x40020000
 8003648:	40020400 	.word	0x40020400

0800364c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]

if(htim->Instance == TIM2)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800365c:	d101      	bne.n	8003662 <HAL_TIM_PeriodElapsedCallback+0x16>
{
	timer_interrupt();
 800365e:	f7fd fd67 	bl	8001130 <timer_interrupt>
}

}
 8003662:	bf00      	nop
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
	...

0800366c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == OUT_MOTION_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 8003676:	88fb      	ldrh	r3, [r7, #6]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d101      	bne.n	8003680 <HAL_GPIO_EXTI_Callback+0x14>
    {
    	pir_interrupt();
 800367c:	f7fd fd3c 	bl	80010f8 <pir_interrupt>
    }
    if(GPIO_Pin == USB_DETECT_Pin)
 8003680:	88fb      	ldrh	r3, [r7, #6]
 8003682:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003686:	d118      	bne.n	80036ba <HAL_GPIO_EXTI_Callback+0x4e>
    {
        _RunTime_Packet.showPrompt = 1;
 8003688:	4b11      	ldr	r3, [pc, #68]	@ (80036d0 <HAL_GPIO_EXTI_Callback+0x64>)
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        _RunTime_Packet.usb_detection = 1;
 8003690:	4b0f      	ldr	r3, [pc, #60]	@ (80036d0 <HAL_GPIO_EXTI_Callback+0x64>)
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
        _RunTime_Packet.usb_start_timer = 1;
 8003698:	4b0d      	ldr	r3, [pc, #52]	@ (80036d0 <HAL_GPIO_EXTI_Callback+0x64>)
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        usb_time_keep = 0;
 80036a0:	4b0c      	ldr	r3, [pc, #48]	@ (80036d4 <HAL_GPIO_EXTI_Callback+0x68>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]
        prev_usb_time_ = HAL_GetTick();
 80036a6:	f000 fd93 	bl	80041d0 <HAL_GetTick>
 80036aa:	4603      	mov	r3, r0
 80036ac:	4a0a      	ldr	r2, [pc, #40]	@ (80036d8 <HAL_GPIO_EXTI_Callback+0x6c>)
 80036ae:	6013      	str	r3, [r2, #0]
		prev_sleep_time = HAL_GetTick();
 80036b0:	f000 fd8e 	bl	80041d0 <HAL_GetTick>
 80036b4:	4603      	mov	r3, r0
 80036b6:	4a09      	ldr	r2, [pc, #36]	@ (80036dc <HAL_GPIO_EXTI_Callback+0x70>)
 80036b8:	6013      	str	r3, [r2, #0]
    }
    if(GPIO_Pin == SW_DET_Pin)
 80036ba:	88fb      	ldrh	r3, [r7, #6]
 80036bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036c0:	d101      	bne.n	80036c6 <HAL_GPIO_EXTI_Callback+0x5a>
    {
    	power_off_detect();
 80036c2:	f7fd fd4f 	bl	8001164 <power_off_detect>
    }
}
 80036c6:	bf00      	nop
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	20001530 	.word	0x20001530
 80036d4:	20001584 	.word	0x20001584
 80036d8:	200017c8 	.word	0x200017c8
 80036dc:	200017c0 	.word	0x200017c0

080036e0 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
	RtcInt();
 80036e8:	f010 fae8 	bl	8013cbc <RtcInt>
}
 80036ec:	bf00      	nop
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_UART_ErrorCallback>:



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]


  if(huart == &huart1) //console uart
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a0d      	ldr	r2, [pc, #52]	@ (8003734 <HAL_UART_ErrorCallback+0x40>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d106      	bne.n	8003712 <HAL_UART_ErrorCallback+0x1e>
    {

      //HMI_uart_err = 1;
	 // _RunTime_Packet.console_uart_error = 1;
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	43d2      	mvns	r2, r2
 800370e:	601a      	str	r2, [r3, #0]
   //   _RunTime_Packet.sps30_uart_error = 1;
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
    }


}
 8003710:	e009      	b.n	8003726 <HAL_UART_ErrorCallback+0x32>
  else if(huart == &huart2) //sps30 uart
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a08      	ldr	r2, [pc, #32]	@ (8003738 <HAL_UART_ErrorCallback+0x44>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d105      	bne.n	8003726 <HAL_UART_ErrorCallback+0x32>
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	43d2      	mvns	r2, r2
 8003724:	601a      	str	r2, [r3, #0]
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	20001a74 	.word	0x20001a74
 8003738:	20001abc 	.word	0x20001abc

0800373c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003740:	b672      	cpsid	i
}
 8003742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_NVIC_SystemReset();
 8003744:	f001 fb5f 	bl	8004e06 <HAL_NVIC_SystemReset>
  while (1)
 8003748:	bf00      	nop
 800374a:	e7fd      	b.n	8003748 <Error_Handler+0xc>

0800374c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003752:	2300      	movs	r3, #0
 8003754:	607b      	str	r3, [r7, #4]
 8003756:	4b10      	ldr	r3, [pc, #64]	@ (8003798 <HAL_MspInit+0x4c>)
 8003758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800375a:	4a0f      	ldr	r2, [pc, #60]	@ (8003798 <HAL_MspInit+0x4c>)
 800375c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003760:	6453      	str	r3, [r2, #68]	@ 0x44
 8003762:	4b0d      	ldr	r3, [pc, #52]	@ (8003798 <HAL_MspInit+0x4c>)
 8003764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003766:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800376a:	607b      	str	r3, [r7, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800376e:	2300      	movs	r3, #0
 8003770:	603b      	str	r3, [r7, #0]
 8003772:	4b09      	ldr	r3, [pc, #36]	@ (8003798 <HAL_MspInit+0x4c>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003776:	4a08      	ldr	r2, [pc, #32]	@ (8003798 <HAL_MspInit+0x4c>)
 8003778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800377c:	6413      	str	r3, [r2, #64]	@ 0x40
 800377e:	4b06      	ldr	r3, [pc, #24]	@ (8003798 <HAL_MspInit+0x4c>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003786:	603b      	str	r3, [r7, #0]
 8003788:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	40023800 	.word	0x40023800

0800379c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b08a      	sub	sp, #40	@ 0x28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a4:	f107 0314 	add.w	r3, r7, #20
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	605a      	str	r2, [r3, #4]
 80037ae:	609a      	str	r2, [r3, #8]
 80037b0:	60da      	str	r2, [r3, #12]
 80037b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a17      	ldr	r2, [pc, #92]	@ (8003818 <HAL_ADC_MspInit+0x7c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d127      	bne.n	800380e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80037be:	2300      	movs	r3, #0
 80037c0:	613b      	str	r3, [r7, #16]
 80037c2:	4b16      	ldr	r3, [pc, #88]	@ (800381c <HAL_ADC_MspInit+0x80>)
 80037c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c6:	4a15      	ldr	r2, [pc, #84]	@ (800381c <HAL_ADC_MspInit+0x80>)
 80037c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80037ce:	4b13      	ldr	r3, [pc, #76]	@ (800381c <HAL_ADC_MspInit+0x80>)
 80037d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d6:	613b      	str	r3, [r7, #16]
 80037d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037da:	2300      	movs	r3, #0
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	4b0f      	ldr	r3, [pc, #60]	@ (800381c <HAL_ADC_MspInit+0x80>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e2:	4a0e      	ldr	r2, [pc, #56]	@ (800381c <HAL_ADC_MspInit+0x80>)
 80037e4:	f043 0304 	orr.w	r3, r3, #4
 80037e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80037ea:	4b0c      	ldr	r3, [pc, #48]	@ (800381c <HAL_ADC_MspInit+0x80>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = BATT_ADC_IN10_Pin;
 80037f6:	2301      	movs	r3, #1
 80037f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037fa:	2303      	movs	r3, #3
 80037fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fe:	2300      	movs	r3, #0
 8003800:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_ADC_IN10_GPIO_Port, &GPIO_InitStruct);
 8003802:	f107 0314 	add.w	r3, r7, #20
 8003806:	4619      	mov	r1, r3
 8003808:	4805      	ldr	r0, [pc, #20]	@ (8003820 <HAL_ADC_MspInit+0x84>)
 800380a:	f002 fa45 	bl	8005c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800380e:	bf00      	nop
 8003810:	3728      	adds	r7, #40	@ 0x28
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40012000 	.word	0x40012000
 800381c:	40023800 	.word	0x40023800
 8003820:	40020800 	.word	0x40020800

08003824 <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a08      	ldr	r2, [pc, #32]	@ (8003854 <HAL_ADC_MspDeInit+0x30>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d109      	bne.n	800384a <HAL_ADC_MspDeInit+0x26>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8003836:	4b08      	ldr	r3, [pc, #32]	@ (8003858 <HAL_ADC_MspDeInit+0x34>)
 8003838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383a:	4a07      	ldr	r2, [pc, #28]	@ (8003858 <HAL_ADC_MspDeInit+0x34>)
 800383c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003840:	6453      	str	r3, [r2, #68]	@ 0x44

    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    HAL_GPIO_DeInit(BATT_ADC_IN10_GPIO_Port, BATT_ADC_IN10_Pin);
 8003842:	2101      	movs	r1, #1
 8003844:	4805      	ldr	r0, [pc, #20]	@ (800385c <HAL_ADC_MspDeInit+0x38>)
 8003846:	f002 fbab 	bl	8005fa0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 800384a:	bf00      	nop
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40012000 	.word	0x40012000
 8003858:	40023800 	.word	0x40023800
 800385c:	40020800 	.word	0x40020800

08003860 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08a      	sub	sp, #40	@ 0x28
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003868:	f107 0314 	add.w	r3, r7, #20
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	605a      	str	r2, [r3, #4]
 8003872:	609a      	str	r2, [r3, #8]
 8003874:	60da      	str	r2, [r3, #12]
 8003876:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a19      	ldr	r2, [pc, #100]	@ (80038e4 <HAL_I2C_MspInit+0x84>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d12c      	bne.n	80038dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003882:	2300      	movs	r3, #0
 8003884:	613b      	str	r3, [r7, #16]
 8003886:	4b18      	ldr	r3, [pc, #96]	@ (80038e8 <HAL_I2C_MspInit+0x88>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388a:	4a17      	ldr	r2, [pc, #92]	@ (80038e8 <HAL_I2C_MspInit+0x88>)
 800388c:	f043 0302 	orr.w	r3, r3, #2
 8003890:	6313      	str	r3, [r2, #48]	@ 0x30
 8003892:	4b15      	ldr	r3, [pc, #84]	@ (80038e8 <HAL_I2C_MspInit+0x88>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	613b      	str	r3, [r7, #16]
 800389c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCD4x_SCL_Pin|SCD4x_SDA_Pin;
 800389e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80038a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038a4:	2312      	movs	r3, #18
 80038a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ac:	2303      	movs	r3, #3
 80038ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80038b0:	2304      	movs	r3, #4
 80038b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038b4:	f107 0314 	add.w	r3, r7, #20
 80038b8:	4619      	mov	r1, r3
 80038ba:	480c      	ldr	r0, [pc, #48]	@ (80038ec <HAL_I2C_MspInit+0x8c>)
 80038bc:	f002 f9ec 	bl	8005c98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80038c0:	2300      	movs	r3, #0
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	4b08      	ldr	r3, [pc, #32]	@ (80038e8 <HAL_I2C_MspInit+0x88>)
 80038c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c8:	4a07      	ldr	r2, [pc, #28]	@ (80038e8 <HAL_I2C_MspInit+0x88>)
 80038ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80038ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80038d0:	4b05      	ldr	r3, [pc, #20]	@ (80038e8 <HAL_I2C_MspInit+0x88>)
 80038d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038d8:	60fb      	str	r3, [r7, #12]
 80038da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80038dc:	bf00      	nop
 80038de:	3728      	adds	r7, #40	@ 0x28
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40005400 	.word	0x40005400
 80038e8:	40023800 	.word	0x40023800
 80038ec:	40020400 	.word	0x40020400

080038f0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a0b      	ldr	r2, [pc, #44]	@ (800392c <HAL_I2C_MspDeInit+0x3c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d10f      	bne.n	8003922 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003902:	4b0b      	ldr	r3, [pc, #44]	@ (8003930 <HAL_I2C_MspDeInit+0x40>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003906:	4a0a      	ldr	r2, [pc, #40]	@ (8003930 <HAL_I2C_MspDeInit+0x40>)
 8003908:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800390c:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(SCD4x_SCL_GPIO_Port, SCD4x_SCL_Pin);
 800390e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003912:	4808      	ldr	r0, [pc, #32]	@ (8003934 <HAL_I2C_MspDeInit+0x44>)
 8003914:	f002 fb44 	bl	8005fa0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SCD4x_SDA_GPIO_Port, SCD4x_SDA_Pin);
 8003918:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800391c:	4805      	ldr	r0, [pc, #20]	@ (8003934 <HAL_I2C_MspDeInit+0x44>)
 800391e:	f002 fb3f 	bl	8005fa0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8003922:	bf00      	nop
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40005400 	.word	0x40005400
 8003930:	40023800 	.word	0x40023800
 8003934:	40020400 	.word	0x40020400

08003938 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b088      	sub	sp, #32
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003940:	f107 030c 	add.w	r3, r7, #12
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	605a      	str	r2, [r3, #4]
 800394a:	609a      	str	r2, [r3, #8]
 800394c:	60da      	str	r2, [r3, #12]
 800394e:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a10      	ldr	r2, [pc, #64]	@ (8003998 <HAL_RTC_MspInit+0x60>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d119      	bne.n	800398e <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800395a:	2302      	movs	r3, #2
 800395c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800395e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003962:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003964:	f107 030c 	add.w	r3, r7, #12
 8003968:	4618      	mov	r0, r3
 800396a:	f005 fd95 	bl	8009498 <HAL_RCCEx_PeriphCLKConfig>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003974:	f7ff fee2 	bl	800373c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003978:	4b08      	ldr	r3, [pc, #32]	@ (800399c <HAL_RTC_MspInit+0x64>)
 800397a:	2201      	movs	r2, #1
 800397c:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800397e:	2200      	movs	r2, #0
 8003980:	2100      	movs	r1, #0
 8003982:	2029      	movs	r0, #41	@ 0x29
 8003984:	f001 fa07 	bl	8004d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8003988:	2029      	movs	r0, #41	@ 0x29
 800398a:	f001 fa20 	bl	8004dce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800398e:	bf00      	nop
 8003990:	3720      	adds	r7, #32
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40002800 	.word	0x40002800
 800399c:	42470e3c 	.word	0x42470e3c

080039a0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b08a      	sub	sp, #40	@ 0x28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a8:	f107 0314 	add.w	r3, r7, #20
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	605a      	str	r2, [r3, #4]
 80039b2:	609a      	str	r2, [r3, #8]
 80039b4:	60da      	str	r2, [r3, #12]
 80039b6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a28      	ldr	r2, [pc, #160]	@ (8003a60 <HAL_SD_MspInit+0xc0>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d14a      	bne.n	8003a58 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80039c2:	2300      	movs	r3, #0
 80039c4:	613b      	str	r3, [r7, #16]
 80039c6:	4b27      	ldr	r3, [pc, #156]	@ (8003a64 <HAL_SD_MspInit+0xc4>)
 80039c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ca:	4a26      	ldr	r2, [pc, #152]	@ (8003a64 <HAL_SD_MspInit+0xc4>)
 80039cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80039d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80039d2:	4b24      	ldr	r3, [pc, #144]	@ (8003a64 <HAL_SD_MspInit+0xc4>)
 80039d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039da:	613b      	str	r3, [r7, #16]
 80039dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039de:	2300      	movs	r3, #0
 80039e0:	60fb      	str	r3, [r7, #12]
 80039e2:	4b20      	ldr	r3, [pc, #128]	@ (8003a64 <HAL_SD_MspInit+0xc4>)
 80039e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e6:	4a1f      	ldr	r2, [pc, #124]	@ (8003a64 <HAL_SD_MspInit+0xc4>)
 80039e8:	f043 0304 	orr.w	r3, r3, #4
 80039ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80039ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003a64 <HAL_SD_MspInit+0xc4>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f2:	f003 0304 	and.w	r3, r3, #4
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039fa:	2300      	movs	r3, #0
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	4b19      	ldr	r3, [pc, #100]	@ (8003a64 <HAL_SD_MspInit+0xc4>)
 8003a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a02:	4a18      	ldr	r2, [pc, #96]	@ (8003a64 <HAL_SD_MspInit+0xc4>)
 8003a04:	f043 0308 	orr.w	r3, r3, #8
 8003a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a0a:	4b16      	ldr	r3, [pc, #88]	@ (8003a64 <HAL_SD_MspInit+0xc4>)
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	60bb      	str	r3, [r7, #8]
 8003a14:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8003a16:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8003a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a24:	2303      	movs	r3, #3
 8003a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003a28:	230c      	movs	r3, #12
 8003a2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a2c:	f107 0314 	add.w	r3, r7, #20
 8003a30:	4619      	mov	r1, r3
 8003a32:	480d      	ldr	r0, [pc, #52]	@ (8003a68 <HAL_SD_MspInit+0xc8>)
 8003a34:	f002 f930 	bl	8005c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003a38:	2304      	movs	r3, #4
 8003a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a40:	2300      	movs	r3, #0
 8003a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a44:	2303      	movs	r3, #3
 8003a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003a48:	230c      	movs	r3, #12
 8003a4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a4c:	f107 0314 	add.w	r3, r7, #20
 8003a50:	4619      	mov	r1, r3
 8003a52:	4806      	ldr	r0, [pc, #24]	@ (8003a6c <HAL_SD_MspInit+0xcc>)
 8003a54:	f002 f920 	bl	8005c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8003a58:	bf00      	nop
 8003a5a:	3728      	adds	r7, #40	@ 0x28
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40012c00 	.word	0x40012c00
 8003a64:	40023800 	.word	0x40023800
 8003a68:	40020800 	.word	0x40020800
 8003a6c:	40020c00 	.word	0x40020c00

08003a70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a3a      	ldr	r2, [pc, #232]	@ (8003b68 <HAL_TIM_Base_MspInit+0xf8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d13f      	bne.n	8003b02 <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	4b39      	ldr	r3, [pc, #228]	@ (8003b6c <HAL_TIM_Base_MspInit+0xfc>)
 8003a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8a:	4a38      	ldr	r2, [pc, #224]	@ (8003b6c <HAL_TIM_Base_MspInit+0xfc>)
 8003a8c:	f043 0301 	orr.w	r3, r3, #1
 8003a90:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a92:	4b36      	ldr	r3, [pc, #216]	@ (8003b6c <HAL_TIM_Base_MspInit+0xfc>)
 8003a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	617b      	str	r3, [r7, #20]
 8003a9c:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8003a9e:	4b34      	ldr	r3, [pc, #208]	@ (8003b70 <HAL_TIM_Base_MspInit+0x100>)
 8003aa0:	4a34      	ldr	r2, [pc, #208]	@ (8003b74 <HAL_TIM_Base_MspInit+0x104>)
 8003aa2:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8003aa4:	4b32      	ldr	r3, [pc, #200]	@ (8003b70 <HAL_TIM_Base_MspInit+0x100>)
 8003aa6:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8003aaa:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003aac:	4b30      	ldr	r3, [pc, #192]	@ (8003b70 <HAL_TIM_Base_MspInit+0x100>)
 8003aae:	2240      	movs	r2, #64	@ 0x40
 8003ab0:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ab2:	4b2f      	ldr	r3, [pc, #188]	@ (8003b70 <HAL_TIM_Base_MspInit+0x100>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8003ab8:	4b2d      	ldr	r3, [pc, #180]	@ (8003b70 <HAL_TIM_Base_MspInit+0x100>)
 8003aba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003abe:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8003b70 <HAL_TIM_Base_MspInit+0x100>)
 8003ac2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003ac6:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003ac8:	4b29      	ldr	r3, [pc, #164]	@ (8003b70 <HAL_TIM_Base_MspInit+0x100>)
 8003aca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003ace:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8003ad0:	4b27      	ldr	r3, [pc, #156]	@ (8003b70 <HAL_TIM_Base_MspInit+0x100>)
 8003ad2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ad6:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8003ad8:	4b25      	ldr	r3, [pc, #148]	@ (8003b70 <HAL_TIM_Base_MspInit+0x100>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ade:	4b24      	ldr	r3, [pc, #144]	@ (8003b70 <HAL_TIM_Base_MspInit+0x100>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8003ae4:	4822      	ldr	r0, [pc, #136]	@ (8003b70 <HAL_TIM_Base_MspInit+0x100>)
 8003ae6:	f001 f99f 	bl	8004e28 <HAL_DMA_Init>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8003af0:	f7ff fe24 	bl	800373c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a1e      	ldr	r2, [pc, #120]	@ (8003b70 <HAL_TIM_Base_MspInit+0x100>)
 8003af8:	621a      	str	r2, [r3, #32]
 8003afa:	4a1d      	ldr	r2, [pc, #116]	@ (8003b70 <HAL_TIM_Base_MspInit+0x100>)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003b00:	e02e      	b.n	8003b60 <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM2)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b0a:	d116      	bne.n	8003b3a <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	613b      	str	r3, [r7, #16]
 8003b10:	4b16      	ldr	r3, [pc, #88]	@ (8003b6c <HAL_TIM_Base_MspInit+0xfc>)
 8003b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b14:	4a15      	ldr	r2, [pc, #84]	@ (8003b6c <HAL_TIM_Base_MspInit+0xfc>)
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b1c:	4b13      	ldr	r3, [pc, #76]	@ (8003b6c <HAL_TIM_Base_MspInit+0xfc>)
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	613b      	str	r3, [r7, #16]
 8003b26:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003b28:	2200      	movs	r2, #0
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	201c      	movs	r0, #28
 8003b2e:	f001 f932 	bl	8004d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003b32:	201c      	movs	r0, #28
 8003b34:	f001 f94b 	bl	8004dce <HAL_NVIC_EnableIRQ>
}
 8003b38:	e012      	b.n	8003b60 <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM3)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a0e      	ldr	r2, [pc, #56]	@ (8003b78 <HAL_TIM_Base_MspInit+0x108>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d10d      	bne.n	8003b60 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b44:	2300      	movs	r3, #0
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	4b08      	ldr	r3, [pc, #32]	@ (8003b6c <HAL_TIM_Base_MspInit+0xfc>)
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4c:	4a07      	ldr	r2, [pc, #28]	@ (8003b6c <HAL_TIM_Base_MspInit+0xfc>)
 8003b4e:	f043 0302 	orr.w	r3, r3, #2
 8003b52:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b54:	4b05      	ldr	r3, [pc, #20]	@ (8003b6c <HAL_TIM_Base_MspInit+0xfc>)
 8003b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
}
 8003b60:	bf00      	nop
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	40010000 	.word	0x40010000
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	20001a14 	.word	0x20001a14
 8003b74:	40026488 	.word	0x40026488
 8003b78:	40000400 	.word	0x40000400

08003b7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b84:	f107 030c 	add.w	r3, r7, #12
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	605a      	str	r2, [r3, #4]
 8003b8e:	609a      	str	r2, [r3, #8]
 8003b90:	60da      	str	r2, [r3, #12]
 8003b92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a12      	ldr	r2, [pc, #72]	@ (8003be4 <HAL_TIM_MspPostInit+0x68>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d11d      	bne.n	8003bda <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60bb      	str	r3, [r7, #8]
 8003ba2:	4b11      	ldr	r3, [pc, #68]	@ (8003be8 <HAL_TIM_MspPostInit+0x6c>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba6:	4a10      	ldr	r2, [pc, #64]	@ (8003be8 <HAL_TIM_MspPostInit+0x6c>)
 8003ba8:	f043 0302 	orr.w	r3, r3, #2
 8003bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bae:	4b0e      	ldr	r3, [pc, #56]	@ (8003be8 <HAL_TIM_MspPostInit+0x6c>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	60bb      	str	r3, [r7, #8]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8003bba:	2330      	movs	r3, #48	@ 0x30
 8003bbc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003bca:	2302      	movs	r3, #2
 8003bcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bce:	f107 030c 	add.w	r3, r7, #12
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	4805      	ldr	r0, [pc, #20]	@ (8003bec <HAL_TIM_MspPostInit+0x70>)
 8003bd6:	f002 f85f 	bl	8005c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003bda:	bf00      	nop
 8003bdc:	3720      	adds	r7, #32
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	40000400 	.word	0x40000400
 8003be8:	40023800 	.word	0x40023800
 8003bec:	40020400 	.word	0x40020400

08003bf0 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a16      	ldr	r2, [pc, #88]	@ (8003c58 <HAL_TIM_Base_MspDeInit+0x68>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d10b      	bne.n	8003c1a <HAL_TIM_Base_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 8003c02:	4b16      	ldr	r3, [pc, #88]	@ (8003c5c <HAL_TIM_Base_MspDeInit+0x6c>)
 8003c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c06:	4a15      	ldr	r2, [pc, #84]	@ (8003c5c <HAL_TIM_Base_MspDeInit+0x6c>)
 8003c08:	f023 0301 	bic.w	r3, r3, #1
 8003c0c:	6453      	str	r3, [r2, #68]	@ 0x44

    /* TIM1 DMA DeInit */
    HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f001 f9b6 	bl	8004f84 <HAL_DMA_DeInit>
  /* USER CODE BEGIN TIM3_MspDeInit 1 */

  /* USER CODE END TIM3_MspDeInit 1 */
  }

}
 8003c18:	e019      	b.n	8003c4e <HAL_TIM_Base_MspDeInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c22:	d109      	bne.n	8003c38 <HAL_TIM_Base_MspDeInit+0x48>
    __HAL_RCC_TIM2_CLK_DISABLE();
 8003c24:	4b0d      	ldr	r3, [pc, #52]	@ (8003c5c <HAL_TIM_Base_MspDeInit+0x6c>)
 8003c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c28:	4a0c      	ldr	r2, [pc, #48]	@ (8003c5c <HAL_TIM_Base_MspDeInit+0x6c>)
 8003c2a:	f023 0301 	bic.w	r3, r3, #1
 8003c2e:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8003c30:	201c      	movs	r0, #28
 8003c32:	f001 f8da 	bl	8004dea <HAL_NVIC_DisableIRQ>
}
 8003c36:	e00a      	b.n	8003c4e <HAL_TIM_Base_MspDeInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a08      	ldr	r2, [pc, #32]	@ (8003c60 <HAL_TIM_Base_MspDeInit+0x70>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d105      	bne.n	8003c4e <HAL_TIM_Base_MspDeInit+0x5e>
    __HAL_RCC_TIM3_CLK_DISABLE();
 8003c42:	4b06      	ldr	r3, [pc, #24]	@ (8003c5c <HAL_TIM_Base_MspDeInit+0x6c>)
 8003c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c46:	4a05      	ldr	r2, [pc, #20]	@ (8003c5c <HAL_TIM_Base_MspDeInit+0x6c>)
 8003c48:	f023 0302 	bic.w	r3, r3, #2
 8003c4c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003c4e:	bf00      	nop
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40010000 	.word	0x40010000
 8003c5c:	40023800 	.word	0x40023800
 8003c60:	40000400 	.word	0x40000400

08003c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b08c      	sub	sp, #48	@ 0x30
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c6c:	f107 031c 	add.w	r3, r7, #28
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	605a      	str	r2, [r3, #4]
 8003c76:	609a      	str	r2, [r3, #8]
 8003c78:	60da      	str	r2, [r3, #12]
 8003c7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a3a      	ldr	r2, [pc, #232]	@ (8003d6c <HAL_UART_MspInit+0x108>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d134      	bne.n	8003cf0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c86:	2300      	movs	r3, #0
 8003c88:	61bb      	str	r3, [r7, #24]
 8003c8a:	4b39      	ldr	r3, [pc, #228]	@ (8003d70 <HAL_UART_MspInit+0x10c>)
 8003c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c8e:	4a38      	ldr	r2, [pc, #224]	@ (8003d70 <HAL_UART_MspInit+0x10c>)
 8003c90:	f043 0310 	orr.w	r3, r3, #16
 8003c94:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c96:	4b36      	ldr	r3, [pc, #216]	@ (8003d70 <HAL_UART_MspInit+0x10c>)
 8003c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c9a:	f003 0310 	and.w	r3, r3, #16
 8003c9e:	61bb      	str	r3, [r7, #24]
 8003ca0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	617b      	str	r3, [r7, #20]
 8003ca6:	4b32      	ldr	r3, [pc, #200]	@ (8003d70 <HAL_UART_MspInit+0x10c>)
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003caa:	4a31      	ldr	r2, [pc, #196]	@ (8003d70 <HAL_UART_MspInit+0x10c>)
 8003cac:	f043 0302 	orr.w	r3, r3, #2
 8003cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cb2:	4b2f      	ldr	r3, [pc, #188]	@ (8003d70 <HAL_UART_MspInit+0x10c>)
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	617b      	str	r3, [r7, #20]
 8003cbc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = CLI_UART1_TX_Pin|CLI_UART1_RX_Pin;
 8003cbe:	23c0      	movs	r3, #192	@ 0xc0
 8003cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003cce:	2307      	movs	r3, #7
 8003cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cd2:	f107 031c 	add.w	r3, r7, #28
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4826      	ldr	r0, [pc, #152]	@ (8003d74 <HAL_UART_MspInit+0x110>)
 8003cda:	f001 ffdd 	bl	8005c98 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003cde:	2200      	movs	r2, #0
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	2025      	movs	r0, #37	@ 0x25
 8003ce4:	f001 f857 	bl	8004d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003ce8:	2025      	movs	r0, #37	@ 0x25
 8003cea:	f001 f870 	bl	8004dce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003cee:	e038      	b.n	8003d62 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a20      	ldr	r2, [pc, #128]	@ (8003d78 <HAL_UART_MspInit+0x114>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d133      	bne.n	8003d62 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	613b      	str	r3, [r7, #16]
 8003cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8003d70 <HAL_UART_MspInit+0x10c>)
 8003d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d02:	4a1b      	ldr	r2, [pc, #108]	@ (8003d70 <HAL_UART_MspInit+0x10c>)
 8003d04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d08:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d0a:	4b19      	ldr	r3, [pc, #100]	@ (8003d70 <HAL_UART_MspInit+0x10c>)
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d12:	613b      	str	r3, [r7, #16]
 8003d14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d16:	2300      	movs	r3, #0
 8003d18:	60fb      	str	r3, [r7, #12]
 8003d1a:	4b15      	ldr	r3, [pc, #84]	@ (8003d70 <HAL_UART_MspInit+0x10c>)
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1e:	4a14      	ldr	r2, [pc, #80]	@ (8003d70 <HAL_UART_MspInit+0x10c>)
 8003d20:	f043 0301 	orr.w	r3, r3, #1
 8003d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d26:	4b12      	ldr	r3, [pc, #72]	@ (8003d70 <HAL_UART_MspInit+0x10c>)
 8003d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PM_USART2_TX_Pin|PM_USART2_RX_Pin;
 8003d32:	230c      	movs	r3, #12
 8003d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d36:	2302      	movs	r3, #2
 8003d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d42:	2307      	movs	r3, #7
 8003d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d46:	f107 031c 	add.w	r3, r7, #28
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	480b      	ldr	r0, [pc, #44]	@ (8003d7c <HAL_UART_MspInit+0x118>)
 8003d4e:	f001 ffa3 	bl	8005c98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003d52:	2200      	movs	r2, #0
 8003d54:	2100      	movs	r1, #0
 8003d56:	2026      	movs	r0, #38	@ 0x26
 8003d58:	f001 f81d 	bl	8004d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003d5c:	2026      	movs	r0, #38	@ 0x26
 8003d5e:	f001 f836 	bl	8004dce <HAL_NVIC_EnableIRQ>
}
 8003d62:	bf00      	nop
 8003d64:	3730      	adds	r7, #48	@ 0x30
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	40011000 	.word	0x40011000
 8003d70:	40023800 	.word	0x40023800
 8003d74:	40020400 	.word	0x40020400
 8003d78:	40004400 	.word	0x40004400
 8003d7c:	40020000 	.word	0x40020000

08003d80 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a13      	ldr	r2, [pc, #76]	@ (8003ddc <HAL_UART_MspDeInit+0x5c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d10d      	bne.n	8003dae <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003d92:	4b13      	ldr	r3, [pc, #76]	@ (8003de0 <HAL_UART_MspDeInit+0x60>)
 8003d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d96:	4a12      	ldr	r2, [pc, #72]	@ (8003de0 <HAL_UART_MspDeInit+0x60>)
 8003d98:	f023 0310 	bic.w	r3, r3, #16
 8003d9c:	6453      	str	r3, [r2, #68]	@ 0x44

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, CLI_UART1_TX_Pin|CLI_UART1_RX_Pin);
 8003d9e:	21c0      	movs	r1, #192	@ 0xc0
 8003da0:	4810      	ldr	r0, [pc, #64]	@ (8003de4 <HAL_UART_MspDeInit+0x64>)
 8003da2:	f002 f8fd 	bl	8005fa0 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003da6:	2025      	movs	r0, #37	@ 0x25
 8003da8:	f001 f81f 	bl	8004dea <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8003dac:	e011      	b.n	8003dd2 <HAL_UART_MspDeInit+0x52>
  else if(huart->Instance==USART2)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a0d      	ldr	r2, [pc, #52]	@ (8003de8 <HAL_UART_MspDeInit+0x68>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d10c      	bne.n	8003dd2 <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003db8:	4b09      	ldr	r3, [pc, #36]	@ (8003de0 <HAL_UART_MspDeInit+0x60>)
 8003dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dbc:	4a08      	ldr	r2, [pc, #32]	@ (8003de0 <HAL_UART_MspDeInit+0x60>)
 8003dbe:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003dc2:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, PM_USART2_TX_Pin|PM_USART2_RX_Pin);
 8003dc4:	210c      	movs	r1, #12
 8003dc6:	4809      	ldr	r0, [pc, #36]	@ (8003dec <HAL_UART_MspDeInit+0x6c>)
 8003dc8:	f002 f8ea 	bl	8005fa0 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003dcc:	2026      	movs	r0, #38	@ 0x26
 8003dce:	f001 f80c 	bl	8004dea <HAL_NVIC_DisableIRQ>
}
 8003dd2:	bf00      	nop
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40011000 	.word	0x40011000
 8003de0:	40023800 	.word	0x40023800
 8003de4:	40020400 	.word	0x40020400
 8003de8:	40004400 	.word	0x40004400
 8003dec:	40020000 	.word	0x40020000

08003df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003df4:	f001 f807 	bl	8004e06 <HAL_NVIC_SystemReset>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003df8:	bf00      	nop
 8003dfa:	e7fd      	b.n	8003df8 <NMI_Handler+0x8>

08003dfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003e00:	f001 f801 	bl	8004e06 <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e04:	bf00      	nop
 8003e06:	e7fd      	b.n	8003e04 <HardFault_Handler+0x8>

08003e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003e0c:	f000 fffb 	bl	8004e06 <HAL_NVIC_SystemReset>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e10:	bf00      	nop
 8003e12:	e7fd      	b.n	8003e10 <MemManage_Handler+0x8>

08003e14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003e18:	f000 fff5 	bl	8004e06 <HAL_NVIC_SystemReset>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e1c:	bf00      	nop
 8003e1e:	e7fd      	b.n	8003e1c <BusFault_Handler+0x8>

08003e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003e24:	f000 ffef 	bl	8004e06 <HAL_NVIC_SystemReset>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e28:	bf00      	nop
 8003e2a:	e7fd      	b.n	8003e28 <UsageFault_Handler+0x8>

08003e2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003e30:	f000 ffe9 	bl	8004e06 <HAL_NVIC_SystemReset>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e34:	bf00      	nop
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003e3c:	f000 ffe3 	bl	8004e06 <HAL_NVIC_SystemReset>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e40:	bf00      	nop
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003e48:	f000 ffdd 	bl	8004e06 <HAL_NVIC_SystemReset>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e4c:	bf00      	nop
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	HAL_IWDG_Refresh(&hiwdg);
 8003e54:	4803      	ldr	r0, [pc, #12]	@ (8003e64 <SysTick_Handler+0x14>)
 8003e56:	f003 fb6b 	bl	8007530 <HAL_IWDG_Refresh>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e5a:	f000 f9a5 	bl	80041a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e5e:	bf00      	nop
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	2000188c 	.word	0x2000188c

08003e68 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 8003e6c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003e70:	f002 f9ac 	bl	80061cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003e74:	bf00      	nop
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003e7c:	4802      	ldr	r0, [pc, #8]	@ (8003e88 <TIM2_IRQHandler+0x10>)
 8003e7e:	f007 fbc9 	bl	800b614 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003e82:	bf00      	nop
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	20001984 	.word	0x20001984

08003e8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003e90:	4802      	ldr	r0, [pc, #8]	@ (8003e9c <USART1_IRQHandler+0x10>)
 8003e92:	f008 fb4b 	bl	800c52c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003e96:	bf00      	nop
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20001a74 	.word	0x20001a74

08003ea0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003ea4:	4802      	ldr	r0, [pc, #8]	@ (8003eb0 <USART2_IRQHandler+0x10>)
 8003ea6:	f008 fb41 	bl	800c52c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003eaa:	bf00      	nop
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	20001abc 	.word	0x20001abc

08003eb4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_DET_Pin);
 8003eb8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003ebc:	f002 f986 	bl	80061cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003ec0:	bf00      	nop
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003ec8:	4802      	ldr	r0, [pc, #8]	@ (8003ed4 <RTC_Alarm_IRQHandler+0x10>)
 8003eca:	f006 f833 	bl	8009f34 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003ece:	bf00      	nop
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	20001898 	.word	0x20001898

08003ed8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003edc:	4802      	ldr	r0, [pc, #8]	@ (8003ee8 <OTG_FS_IRQHandler+0x10>)
 8003ede:	f003 fcd9 	bl	8007894 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003ee2:	bf00      	nop
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	2000290c 	.word	0x2000290c

08003eec <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8003ef0:	4802      	ldr	r0, [pc, #8]	@ (8003efc <DMA2_Stream5_IRQHandler+0x10>)
 8003ef2:	f001 f973 	bl	80051dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8003ef6:	bf00      	nop
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	20001a14 	.word	0x20001a14

08003f00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  return 1;
 8003f04:	2301      	movs	r3, #1
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <_kill>:

int _kill(int pid, int sig)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003f1a:	f01b f84d 	bl	801efb8 <__errno>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2216      	movs	r2, #22
 8003f22:	601a      	str	r2, [r3, #0]
  return -1;
 8003f24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3708      	adds	r7, #8
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <_exit>:

void _exit (int status)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003f38:	f04f 31ff 	mov.w	r1, #4294967295
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7ff ffe7 	bl	8003f10 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003f42:	bf00      	nop
 8003f44:	e7fd      	b.n	8003f42 <_exit+0x12>

08003f46 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b086      	sub	sp, #24
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	60f8      	str	r0, [r7, #12]
 8003f4e:	60b9      	str	r1, [r7, #8]
 8003f50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f52:	2300      	movs	r3, #0
 8003f54:	617b      	str	r3, [r7, #20]
 8003f56:	e00a      	b.n	8003f6e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003f58:	f3af 8000 	nop.w
 8003f5c:	4601      	mov	r1, r0
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	60ba      	str	r2, [r7, #8]
 8003f64:	b2ca      	uxtb	r2, r1
 8003f66:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	617b      	str	r3, [r7, #20]
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	dbf0      	blt.n	8003f58 <_read+0x12>
  }

  return len;
 8003f76:	687b      	ldr	r3, [r7, #4]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3718      	adds	r7, #24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	e009      	b.n	8003fa6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	60ba      	str	r2, [r7, #8]
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	617b      	str	r3, [r7, #20]
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	dbf1      	blt.n	8003f92 <_write+0x12>
  }
  return len;
 8003fae:	687b      	ldr	r3, [r7, #4]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <_close>:

int _close(int file)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003fc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003fe0:	605a      	str	r2, [r3, #4]
  return 0;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <_isatty>:

int _isatty(int file)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003ff8:	2301      	movs	r3, #1
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004006:	b480      	push	{r7}
 8004008:	b085      	sub	sp, #20
 800400a:	af00      	add	r7, sp, #0
 800400c:	60f8      	str	r0, [r7, #12]
 800400e:	60b9      	str	r1, [r7, #8]
 8004010:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004028:	4a14      	ldr	r2, [pc, #80]	@ (800407c <_sbrk+0x5c>)
 800402a:	4b15      	ldr	r3, [pc, #84]	@ (8004080 <_sbrk+0x60>)
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004034:	4b13      	ldr	r3, [pc, #76]	@ (8004084 <_sbrk+0x64>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d102      	bne.n	8004042 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800403c:	4b11      	ldr	r3, [pc, #68]	@ (8004084 <_sbrk+0x64>)
 800403e:	4a12      	ldr	r2, [pc, #72]	@ (8004088 <_sbrk+0x68>)
 8004040:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004042:	4b10      	ldr	r3, [pc, #64]	@ (8004084 <_sbrk+0x64>)
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4413      	add	r3, r2
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	429a      	cmp	r2, r3
 800404e:	d207      	bcs.n	8004060 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004050:	f01a ffb2 	bl	801efb8 <__errno>
 8004054:	4603      	mov	r3, r0
 8004056:	220c      	movs	r2, #12
 8004058:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800405a:	f04f 33ff 	mov.w	r3, #4294967295
 800405e:	e009      	b.n	8004074 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004060:	4b08      	ldr	r3, [pc, #32]	@ (8004084 <_sbrk+0x64>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004066:	4b07      	ldr	r3, [pc, #28]	@ (8004084 <_sbrk+0x64>)
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4413      	add	r3, r2
 800406e:	4a05      	ldr	r2, [pc, #20]	@ (8004084 <_sbrk+0x64>)
 8004070:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004072:	68fb      	ldr	r3, [r7, #12]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3718      	adds	r7, #24
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	20018000 	.word	0x20018000
 8004080:	00000400 	.word	0x00000400
 8004084:	20001b04 	.word	0x20001b04
 8004088:	200037b8 	.word	0x200037b8

0800408c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004090:	4b06      	ldr	r3, [pc, #24]	@ (80040ac <SystemInit+0x20>)
 8004092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004096:	4a05      	ldr	r2, [pc, #20]	@ (80040ac <SystemInit+0x20>)
 8004098:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800409c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040a0:	bf00      	nop
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	e000ed00 	.word	0xe000ed00

080040b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80040b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80040e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80040b4:	480d      	ldr	r0, [pc, #52]	@ (80040ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80040b6:	490e      	ldr	r1, [pc, #56]	@ (80040f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80040b8:	4a0e      	ldr	r2, [pc, #56]	@ (80040f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80040ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040bc:	e002      	b.n	80040c4 <LoopCopyDataInit>

080040be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040c2:	3304      	adds	r3, #4

080040c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040c8:	d3f9      	bcc.n	80040be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040ca:	4a0b      	ldr	r2, [pc, #44]	@ (80040f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80040cc:	4c0b      	ldr	r4, [pc, #44]	@ (80040fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80040ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040d0:	e001      	b.n	80040d6 <LoopFillZerobss>

080040d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040d4:	3204      	adds	r2, #4

080040d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040d8:	d3fb      	bcc.n	80040d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80040da:	f7ff ffd7 	bl	800408c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80040de:	f01a ff71 	bl	801efc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040e2:	f7fe fd05 	bl	8002af0 <main>
  bx  lr    
 80040e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80040e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80040ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040f0:	20000304 	.word	0x20000304
  ldr r2, =_sidata
 80040f4:	08025a4c 	.word	0x08025a4c
  ldr r2, =_sbss
 80040f8:	20000304 	.word	0x20000304
  ldr r4, =_ebss
 80040fc:	200037b4 	.word	0x200037b4

08004100 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004100:	e7fe      	b.n	8004100 <ADC_IRQHandler>
	...

08004104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004108:	4b0e      	ldr	r3, [pc, #56]	@ (8004144 <HAL_Init+0x40>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a0d      	ldr	r2, [pc, #52]	@ (8004144 <HAL_Init+0x40>)
 800410e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004112:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004114:	4b0b      	ldr	r3, [pc, #44]	@ (8004144 <HAL_Init+0x40>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a0a      	ldr	r2, [pc, #40]	@ (8004144 <HAL_Init+0x40>)
 800411a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800411e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004120:	4b08      	ldr	r3, [pc, #32]	@ (8004144 <HAL_Init+0x40>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a07      	ldr	r2, [pc, #28]	@ (8004144 <HAL_Init+0x40>)
 8004126:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800412a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800412c:	2003      	movs	r0, #3
 800412e:	f000 fe27 	bl	8004d80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004132:	200f      	movs	r0, #15
 8004134:	f000 f808 	bl	8004148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004138:	f7ff fb08 	bl	800374c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	40023c00 	.word	0x40023c00

08004148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004150:	4b12      	ldr	r3, [pc, #72]	@ (800419c <HAL_InitTick+0x54>)
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	4b12      	ldr	r3, [pc, #72]	@ (80041a0 <HAL_InitTick+0x58>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	4619      	mov	r1, r3
 800415a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800415e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004162:	fbb2 f3f3 	udiv	r3, r2, r3
 8004166:	4618      	mov	r0, r3
 8004168:	f000 fe51 	bl	8004e0e <HAL_SYSTICK_Config>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e00e      	b.n	8004194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b0f      	cmp	r3, #15
 800417a:	d80a      	bhi.n	8004192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800417c:	2200      	movs	r2, #0
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	f04f 30ff 	mov.w	r0, #4294967295
 8004184:	f000 fe07 	bl	8004d96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004188:	4a06      	ldr	r2, [pc, #24]	@ (80041a4 <HAL_InitTick+0x5c>)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	e000      	b.n	8004194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
}
 8004194:	4618      	mov	r0, r3
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	20000010 	.word	0x20000010
 80041a0:	20000018 	.word	0x20000018
 80041a4:	20000014 	.word	0x20000014

080041a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041ac:	4b06      	ldr	r3, [pc, #24]	@ (80041c8 <HAL_IncTick+0x20>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	4b06      	ldr	r3, [pc, #24]	@ (80041cc <HAL_IncTick+0x24>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4413      	add	r3, r2
 80041b8:	4a04      	ldr	r2, [pc, #16]	@ (80041cc <HAL_IncTick+0x24>)
 80041ba:	6013      	str	r3, [r2, #0]
}
 80041bc:	bf00      	nop
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	20000018 	.word	0x20000018
 80041cc:	20001b08 	.word	0x20001b08

080041d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  return uwTick;
 80041d4:	4b03      	ldr	r3, [pc, #12]	@ (80041e4 <HAL_GetTick+0x14>)
 80041d6:	681b      	ldr	r3, [r3, #0]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	20001b08 	.word	0x20001b08

080041e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041f0:	f7ff ffee 	bl	80041d0 <HAL_GetTick>
 80041f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004200:	d005      	beq.n	800420e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004202:	4b0a      	ldr	r3, [pc, #40]	@ (800422c <HAL_Delay+0x44>)
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	461a      	mov	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4413      	add	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800420e:	bf00      	nop
 8004210:	f7ff ffde 	bl	80041d0 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	429a      	cmp	r2, r3
 800421e:	d8f7      	bhi.n	8004210 <HAL_Delay+0x28>
  {
  }
}
 8004220:	bf00      	nop
 8004222:	bf00      	nop
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	20000018 	.word	0x20000018

08004230 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8004234:	4b05      	ldr	r3, [pc, #20]	@ (800424c <HAL_SuspendTick+0x1c>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a04      	ldr	r2, [pc, #16]	@ (800424c <HAL_SuspendTick+0x1c>)
 800423a:	f023 0302 	bic.w	r3, r3, #2
 800423e:	6013      	str	r3, [r2, #0]
}
 8004240:	bf00      	nop
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	e000e010 	.word	0xe000e010

08004250 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8004254:	4b05      	ldr	r3, [pc, #20]	@ (800426c <HAL_ResumeTick+0x1c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a04      	ldr	r2, [pc, #16]	@ (800426c <HAL_ResumeTick+0x1c>)
 800425a:	f043 0302 	orr.w	r3, r3, #2
 800425e:	6013      	str	r3, [r2, #0]
}
 8004260:	bf00      	nop
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	e000e010 	.word	0xe000e010

08004270 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8004274:	4b03      	ldr	r3, [pc, #12]	@ (8004284 <HAL_GetUIDw0+0x14>)
 8004276:	681b      	ldr	r3, [r3, #0]
}
 8004278:	4618      	mov	r0, r3
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	1fff7a10 	.word	0x1fff7a10

08004288 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 800428c:	4b03      	ldr	r3, [pc, #12]	@ (800429c <HAL_GetUIDw1+0x14>)
 800428e:	681b      	ldr	r3, [r3, #0]
}
 8004290:	4618      	mov	r0, r3
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	1fff7a14 	.word	0x1fff7a14

080042a0 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80042a4:	4b03      	ldr	r3, [pc, #12]	@ (80042b4 <HAL_GetUIDw2+0x14>)
 80042a6:	681b      	ldr	r3, [r3, #0]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	1fff7a18 	.word	0x1fff7a18

080042b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042c0:	2300      	movs	r3, #0
 80042c2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e033      	b.n	8004336 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d109      	bne.n	80042ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7ff fa60 	bl	800379c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ee:	f003 0310 	and.w	r3, r3, #16
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d118      	bne.n	8004328 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80042fe:	f023 0302 	bic.w	r3, r3, #2
 8004302:	f043 0202 	orr.w	r2, r3, #2
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 faec 	bl	80048e8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431a:	f023 0303 	bic.w	r3, r3, #3
 800431e:	f043 0201 	orr.w	r2, r3, #1
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	641a      	str	r2, [r3, #64]	@ 0x40
 8004326:	e001      	b.n	800432c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004334:	7bfb      	ldrb	r3, [r7, #15]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b084      	sub	sp, #16
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004346:	2300      	movs	r3, #0
 8004348:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e022      	b.n	800439a <HAL_ADC_DeInit+0x5c>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004358:	f043 0202 	orr.w	r2, r3, #2
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 0201 	bic.w	r2, r2, #1
 800436e:	609a      	str	r2, [r3, #8]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d108      	bne.n	8004390 <HAL_ADC_DeInit+0x52>

    /* DeInit the low level hardware: RCC clock, NVIC */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware: RCC clock, NVIC */
    HAL_ADC_MspDeInit(hadc);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7ff fa50 	bl	8003824 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004398:	7bfb      	ldrb	r3, [r7, #15]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
	...

080043a4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d101      	bne.n	80043be <HAL_ADC_Start+0x1a>
 80043ba:	2302      	movs	r3, #2
 80043bc:	e097      	b.n	80044ee <HAL_ADC_Start+0x14a>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d018      	beq.n	8004406 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689a      	ldr	r2, [r3, #8]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0201 	orr.w	r2, r2, #1
 80043e2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80043e4:	4b45      	ldr	r3, [pc, #276]	@ (80044fc <HAL_ADC_Start+0x158>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a45      	ldr	r2, [pc, #276]	@ (8004500 <HAL_ADC_Start+0x15c>)
 80043ea:	fba2 2303 	umull	r2, r3, r2, r3
 80043ee:	0c9a      	lsrs	r2, r3, #18
 80043f0:	4613      	mov	r3, r2
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	4413      	add	r3, r2
 80043f6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80043f8:	e002      	b.n	8004400 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	3b01      	subs	r3, #1
 80043fe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1f9      	bne.n	80043fa <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	2b01      	cmp	r3, #1
 8004412:	d15f      	bne.n	80044d4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004418:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800441c:	f023 0301 	bic.w	r3, r3, #1
 8004420:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004432:	2b00      	cmp	r3, #0
 8004434:	d007      	beq.n	8004446 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800443e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800444e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004452:	d106      	bne.n	8004462 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004458:	f023 0206 	bic.w	r2, r3, #6
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	645a      	str	r2, [r3, #68]	@ 0x44
 8004460:	e002      	b.n	8004468 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004470:	4b24      	ldr	r3, [pc, #144]	@ (8004504 <HAL_ADC_Start+0x160>)
 8004472:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800447c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f003 031f 	and.w	r3, r3, #31
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10f      	bne.n	80044aa <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d129      	bne.n	80044ec <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80044a6:	609a      	str	r2, [r3, #8]
 80044a8:	e020      	b.n	80044ec <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a16      	ldr	r2, [pc, #88]	@ (8004508 <HAL_ADC_Start+0x164>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d11b      	bne.n	80044ec <HAL_ADC_Start+0x148>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d114      	bne.n	80044ec <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80044d0:	609a      	str	r2, [r3, #8]
 80044d2:	e00b      	b.n	80044ec <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d8:	f043 0210 	orr.w	r2, r3, #16
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e4:	f043 0201 	orr.w	r2, r3, #1
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	20000010 	.word	0x20000010
 8004500:	431bde83 	.word	0x431bde83
 8004504:	40012300 	.word	0x40012300
 8004508:	40012000 	.word	0x40012000

0800450c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800451a:	2b01      	cmp	r3, #1
 800451c:	d101      	bne.n	8004522 <HAL_ADC_Stop+0x16>
 800451e:	2302      	movs	r3, #2
 8004520:	e021      	b.n	8004566 <HAL_ADC_Stop+0x5a>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0201 	bic.w	r2, r2, #1
 8004538:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b00      	cmp	r3, #0
 8004546:	d109      	bne.n	800455c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004550:	f023 0301 	bic.w	r3, r3, #1
 8004554:	f043 0201 	orr.w	r2, r3, #1
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b084      	sub	sp, #16
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
 800457a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800457c:	2300      	movs	r3, #0
 800457e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800458a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800458e:	d113      	bne.n	80045b8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800459a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800459e:	d10b      	bne.n	80045b8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a4:	f043 0220 	orr.w	r2, r3, #32
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e063      	b.n	8004680 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80045b8:	f7ff fe0a 	bl	80041d0 <HAL_GetTick>
 80045bc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80045be:	e021      	b.n	8004604 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c6:	d01d      	beq.n	8004604 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d007      	beq.n	80045de <HAL_ADC_PollForConversion+0x6c>
 80045ce:	f7ff fdff 	bl	80041d0 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d212      	bcs.n	8004604 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d00b      	beq.n	8004604 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f0:	f043 0204 	orr.w	r2, r3, #4
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e03d      	b.n	8004680 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b02      	cmp	r3, #2
 8004610:	d1d6      	bne.n	80045c0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f06f 0212 	mvn.w	r2, #18
 800461a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004620:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d123      	bne.n	800467e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800463a:	2b00      	cmp	r3, #0
 800463c:	d11f      	bne.n	800467e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004644:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004648:	2b00      	cmp	r3, #0
 800464a:	d006      	beq.n	800465a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004656:	2b00      	cmp	r3, #0
 8004658:	d111      	bne.n	800467e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d105      	bne.n	800467e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004676:	f043 0201 	orr.w	r2, r3, #1
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004696:	4618      	mov	r0, r3
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
	...

080046a4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_ADC_ConfigChannel+0x1c>
 80046bc:	2302      	movs	r3, #2
 80046be:	e105      	b.n	80048cc <HAL_ADC_ConfigChannel+0x228>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b09      	cmp	r3, #9
 80046ce:	d925      	bls.n	800471c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68d9      	ldr	r1, [r3, #12]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	b29b      	uxth	r3, r3
 80046dc:	461a      	mov	r2, r3
 80046de:	4613      	mov	r3, r2
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	4413      	add	r3, r2
 80046e4:	3b1e      	subs	r3, #30
 80046e6:	2207      	movs	r2, #7
 80046e8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ec:	43da      	mvns	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	400a      	ands	r2, r1
 80046f4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68d9      	ldr	r1, [r3, #12]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	b29b      	uxth	r3, r3
 8004706:	4618      	mov	r0, r3
 8004708:	4603      	mov	r3, r0
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	4403      	add	r3, r0
 800470e:	3b1e      	subs	r3, #30
 8004710:	409a      	lsls	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	60da      	str	r2, [r3, #12]
 800471a:	e022      	b.n	8004762 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6919      	ldr	r1, [r3, #16]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	b29b      	uxth	r3, r3
 8004728:	461a      	mov	r2, r3
 800472a:	4613      	mov	r3, r2
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	4413      	add	r3, r2
 8004730:	2207      	movs	r2, #7
 8004732:	fa02 f303 	lsl.w	r3, r2, r3
 8004736:	43da      	mvns	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	400a      	ands	r2, r1
 800473e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6919      	ldr	r1, [r3, #16]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	689a      	ldr	r2, [r3, #8]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	b29b      	uxth	r3, r3
 8004750:	4618      	mov	r0, r3
 8004752:	4603      	mov	r3, r0
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	4403      	add	r3, r0
 8004758:	409a      	lsls	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2b06      	cmp	r3, #6
 8004768:	d824      	bhi.n	80047b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	4613      	mov	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	3b05      	subs	r3, #5
 800477c:	221f      	movs	r2, #31
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	43da      	mvns	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	400a      	ands	r2, r1
 800478a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	b29b      	uxth	r3, r3
 8004798:	4618      	mov	r0, r3
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	4613      	mov	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	3b05      	subs	r3, #5
 80047a6:	fa00 f203 	lsl.w	r2, r0, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80047b2:	e04c      	b.n	800484e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	2b0c      	cmp	r3, #12
 80047ba:	d824      	bhi.n	8004806 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	4613      	mov	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4413      	add	r3, r2
 80047cc:	3b23      	subs	r3, #35	@ 0x23
 80047ce:	221f      	movs	r2, #31
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	43da      	mvns	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	400a      	ands	r2, r1
 80047dc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	4618      	mov	r0, r3
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	4613      	mov	r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	3b23      	subs	r3, #35	@ 0x23
 80047f8:	fa00 f203 	lsl.w	r2, r0, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	631a      	str	r2, [r3, #48]	@ 0x30
 8004804:	e023      	b.n	800484e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	3b41      	subs	r3, #65	@ 0x41
 8004818:	221f      	movs	r2, #31
 800481a:	fa02 f303 	lsl.w	r3, r2, r3
 800481e:	43da      	mvns	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	400a      	ands	r2, r1
 8004826:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	b29b      	uxth	r3, r3
 8004834:	4618      	mov	r0, r3
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	4613      	mov	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	3b41      	subs	r3, #65	@ 0x41
 8004842:	fa00 f203 	lsl.w	r2, r0, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800484e:	4b22      	ldr	r3, [pc, #136]	@ (80048d8 <HAL_ADC_ConfigChannel+0x234>)
 8004850:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a21      	ldr	r2, [pc, #132]	@ (80048dc <HAL_ADC_ConfigChannel+0x238>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d109      	bne.n	8004870 <HAL_ADC_ConfigChannel+0x1cc>
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b12      	cmp	r3, #18
 8004862:	d105      	bne.n	8004870 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a19      	ldr	r2, [pc, #100]	@ (80048dc <HAL_ADC_ConfigChannel+0x238>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d123      	bne.n	80048c2 <HAL_ADC_ConfigChannel+0x21e>
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b10      	cmp	r3, #16
 8004880:	d003      	beq.n	800488a <HAL_ADC_ConfigChannel+0x1e6>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b11      	cmp	r3, #17
 8004888:	d11b      	bne.n	80048c2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b10      	cmp	r3, #16
 800489c:	d111      	bne.n	80048c2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800489e:	4b10      	ldr	r3, [pc, #64]	@ (80048e0 <HAL_ADC_ConfigChannel+0x23c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a10      	ldr	r2, [pc, #64]	@ (80048e4 <HAL_ADC_ConfigChannel+0x240>)
 80048a4:	fba2 2303 	umull	r2, r3, r2, r3
 80048a8:	0c9a      	lsrs	r2, r3, #18
 80048aa:	4613      	mov	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80048b4:	e002      	b.n	80048bc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	3b01      	subs	r3, #1
 80048ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1f9      	bne.n	80048b6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	40012300 	.word	0x40012300
 80048dc:	40012000 	.word	0x40012000
 80048e0:	20000010 	.word	0x20000010
 80048e4:	431bde83 	.word	0x431bde83

080048e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048f0:	4b79      	ldr	r3, [pc, #484]	@ (8004ad8 <ADC_Init+0x1f0>)
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	431a      	orrs	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800491c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6859      	ldr	r1, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	021a      	lsls	r2, r3, #8
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004940:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6859      	ldr	r1, [r3, #4]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	430a      	orrs	r2, r1
 8004952:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689a      	ldr	r2, [r3, #8]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004962:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6899      	ldr	r1, [r3, #8]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68da      	ldr	r2, [r3, #12]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800497a:	4a58      	ldr	r2, [pc, #352]	@ (8004adc <ADC_Init+0x1f4>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d022      	beq.n	80049c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689a      	ldr	r2, [r3, #8]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800498e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6899      	ldr	r1, [r3, #8]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	430a      	orrs	r2, r1
 80049a0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80049b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6899      	ldr	r1, [r3, #8]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	609a      	str	r2, [r3, #8]
 80049c4:	e00f      	b.n	80049e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	689a      	ldr	r2, [r3, #8]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80049d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80049e4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 0202 	bic.w	r2, r2, #2
 80049f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	6899      	ldr	r1, [r3, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	7e1b      	ldrb	r3, [r3, #24]
 8004a00:	005a      	lsls	r2, r3, #1
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d01b      	beq.n	8004a4c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a22:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004a32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6859      	ldr	r1, [r3, #4]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	035a      	lsls	r2, r3, #13
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	605a      	str	r2, [r3, #4]
 8004a4a:	e007      	b.n	8004a5c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a5a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	3b01      	subs	r3, #1
 8004a78:	051a      	lsls	r2, r3, #20
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004a90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6899      	ldr	r1, [r3, #8]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004a9e:	025a      	lsls	r2, r3, #9
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689a      	ldr	r2, [r3, #8]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ab6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6899      	ldr	r1, [r3, #8]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	029a      	lsls	r2, r3, #10
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	609a      	str	r2, [r3, #8]
}
 8004acc:	bf00      	nop
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	40012300 	.word	0x40012300
 8004adc:	0f000001 	.word	0x0f000001

08004ae0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d101      	bne.n	8004af8 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8004af4:	2302      	movs	r3, #2
 8004af6:	e031      	b.n	8004b5c <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b00:	4b19      	ldr	r3, [pc, #100]	@ (8004b68 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f023 021f 	bic.w	r2, r3, #31
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	605a      	str	r2, [r3, #4]

  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	431a      	orrs	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	605a      	str	r2, [r3, #4]

  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	605a      	str	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	40012300 	.word	0x40012300

08004b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8004bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b88:	4013      	ands	r3, r2
 8004b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b9e:	4a04      	ldr	r2, [pc, #16]	@ (8004bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	60d3      	str	r3, [r2, #12]
}
 8004ba4:	bf00      	nop
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	e000ed00 	.word	0xe000ed00

08004bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bb8:	4b04      	ldr	r3, [pc, #16]	@ (8004bcc <__NVIC_GetPriorityGrouping+0x18>)
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	0a1b      	lsrs	r3, r3, #8
 8004bbe:	f003 0307 	and.w	r3, r3, #7
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	e000ed00 	.word	0xe000ed00

08004bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	db0b      	blt.n	8004bfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004be2:	79fb      	ldrb	r3, [r7, #7]
 8004be4:	f003 021f 	and.w	r2, r3, #31
 8004be8:	4907      	ldr	r1, [pc, #28]	@ (8004c08 <__NVIC_EnableIRQ+0x38>)
 8004bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bee:	095b      	lsrs	r3, r3, #5
 8004bf0:	2001      	movs	r0, #1
 8004bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8004bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	e000e100 	.word	0xe000e100

08004c0c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	4603      	mov	r3, r0
 8004c14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	db12      	blt.n	8004c44 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c1e:	79fb      	ldrb	r3, [r7, #7]
 8004c20:	f003 021f 	and.w	r2, r3, #31
 8004c24:	490a      	ldr	r1, [pc, #40]	@ (8004c50 <__NVIC_DisableIRQ+0x44>)
 8004c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c2a:	095b      	lsrs	r3, r3, #5
 8004c2c:	2001      	movs	r0, #1
 8004c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8004c32:	3320      	adds	r3, #32
 8004c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004c38:	f3bf 8f4f 	dsb	sy
}
 8004c3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004c3e:	f3bf 8f6f 	isb	sy
}
 8004c42:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	e000e100 	.word	0xe000e100

08004c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	6039      	str	r1, [r7, #0]
 8004c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	db0a      	blt.n	8004c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	490c      	ldr	r1, [pc, #48]	@ (8004ca0 <__NVIC_SetPriority+0x4c>)
 8004c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c72:	0112      	lsls	r2, r2, #4
 8004c74:	b2d2      	uxtb	r2, r2
 8004c76:	440b      	add	r3, r1
 8004c78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c7c:	e00a      	b.n	8004c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	4908      	ldr	r1, [pc, #32]	@ (8004ca4 <__NVIC_SetPriority+0x50>)
 8004c84:	79fb      	ldrb	r3, [r7, #7]
 8004c86:	f003 030f 	and.w	r3, r3, #15
 8004c8a:	3b04      	subs	r3, #4
 8004c8c:	0112      	lsls	r2, r2, #4
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	440b      	add	r3, r1
 8004c92:	761a      	strb	r2, [r3, #24]
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	e000e100 	.word	0xe000e100
 8004ca4:	e000ed00 	.word	0xe000ed00

08004ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b089      	sub	sp, #36	@ 0x24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f003 0307 	and.w	r3, r3, #7
 8004cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	f1c3 0307 	rsb	r3, r3, #7
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	bf28      	it	cs
 8004cc6:	2304      	movcs	r3, #4
 8004cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	3304      	adds	r3, #4
 8004cce:	2b06      	cmp	r3, #6
 8004cd0:	d902      	bls.n	8004cd8 <NVIC_EncodePriority+0x30>
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	3b03      	subs	r3, #3
 8004cd6:	e000      	b.n	8004cda <NVIC_EncodePriority+0x32>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce6:	43da      	mvns	r2, r3
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	401a      	ands	r2, r3
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cfa:	43d9      	mvns	r1, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d00:	4313      	orrs	r3, r2
         );
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3724      	adds	r7, #36	@ 0x24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
	...

08004d10 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004d10:	b480      	push	{r7}
 8004d12:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004d14:	f3bf 8f4f 	dsb	sy
}
 8004d18:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004d1a:	4b06      	ldr	r3, [pc, #24]	@ (8004d34 <__NVIC_SystemReset+0x24>)
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004d22:	4904      	ldr	r1, [pc, #16]	@ (8004d34 <__NVIC_SystemReset+0x24>)
 8004d24:	4b04      	ldr	r3, [pc, #16]	@ (8004d38 <__NVIC_SystemReset+0x28>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004d2a:	f3bf 8f4f 	dsb	sy
}
 8004d2e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004d30:	bf00      	nop
 8004d32:	e7fd      	b.n	8004d30 <__NVIC_SystemReset+0x20>
 8004d34:	e000ed00 	.word	0xe000ed00
 8004d38:	05fa0004 	.word	0x05fa0004

08004d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	3b01      	subs	r3, #1
 8004d48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d4c:	d301      	bcc.n	8004d52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e00f      	b.n	8004d72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d52:	4a0a      	ldr	r2, [pc, #40]	@ (8004d7c <SysTick_Config+0x40>)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	3b01      	subs	r3, #1
 8004d58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d5a:	210f      	movs	r1, #15
 8004d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d60:	f7ff ff78 	bl	8004c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d64:	4b05      	ldr	r3, [pc, #20]	@ (8004d7c <SysTick_Config+0x40>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d6a:	4b04      	ldr	r3, [pc, #16]	@ (8004d7c <SysTick_Config+0x40>)
 8004d6c:	2207      	movs	r2, #7
 8004d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	e000e010 	.word	0xe000e010

08004d80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f7ff feef 	bl	8004b6c <__NVIC_SetPriorityGrouping>
}
 8004d8e:	bf00      	nop
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b086      	sub	sp, #24
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	60b9      	str	r1, [r7, #8]
 8004da0:	607a      	str	r2, [r7, #4]
 8004da2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004da8:	f7ff ff04 	bl	8004bb4 <__NVIC_GetPriorityGrouping>
 8004dac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	68b9      	ldr	r1, [r7, #8]
 8004db2:	6978      	ldr	r0, [r7, #20]
 8004db4:	f7ff ff78 	bl	8004ca8 <NVIC_EncodePriority>
 8004db8:	4602      	mov	r2, r0
 8004dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dbe:	4611      	mov	r1, r2
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7ff ff47 	bl	8004c54 <__NVIC_SetPriority>
}
 8004dc6:	bf00      	nop
 8004dc8:	3718      	adds	r7, #24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b082      	sub	sp, #8
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7ff fef7 	bl	8004bd0 <__NVIC_EnableIRQ>
}
 8004de2:	bf00      	nop
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b082      	sub	sp, #8
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	4603      	mov	r3, r0
 8004df2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7ff ff07 	bl	8004c0c <__NVIC_DisableIRQ>
}
 8004dfe:	bf00      	nop
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004e0a:	f7ff ff81 	bl	8004d10 <__NVIC_SystemReset>

08004e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b082      	sub	sp, #8
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7ff ff90 	bl	8004d3c <SysTick_Config>
 8004e1c:	4603      	mov	r3, r0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
	...

08004e28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004e34:	f7ff f9cc 	bl	80041d0 <HAL_GetTick>
 8004e38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e099      	b.n	8004f78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0201 	bic.w	r2, r2, #1
 8004e62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e64:	e00f      	b.n	8004e86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e66:	f7ff f9b3 	bl	80041d0 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b05      	cmp	r3, #5
 8004e72:	d908      	bls.n	8004e86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2220      	movs	r2, #32
 8004e78:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2203      	movs	r2, #3
 8004e7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e078      	b.n	8004f78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1e8      	bne.n	8004e66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	4b38      	ldr	r3, [pc, #224]	@ (8004f80 <HAL_DMA_Init+0x158>)
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004eb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ebe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004eca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a1b      	ldr	r3, [r3, #32]
 8004ed0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004edc:	2b04      	cmp	r3, #4
 8004ede:	d107      	bne.n	8004ef0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f023 0307 	bic.w	r3, r3, #7
 8004f06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d117      	bne.n	8004f4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00e      	beq.n	8004f4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 fb43 	bl	80055b8 <DMA_CheckFifoParam>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d008      	beq.n	8004f4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2240      	movs	r2, #64	@ 0x40
 8004f3c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004f46:	2301      	movs	r3, #1
 8004f48:	e016      	b.n	8004f78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 fafa 	bl	800554c <DMA_CalcBaseAndBitshift>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f60:	223f      	movs	r2, #63	@ 0x3f
 8004f62:	409a      	lsls	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3718      	adds	r7, #24
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	f010803f 	.word	0xf010803f

08004f84 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e050      	b.n	8005038 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d101      	bne.n	8004fa6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	e048      	b.n	8005038 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 0201 	bic.w	r2, r2, #1
 8004fb4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2221      	movs	r2, #33	@ 0x21
 8004fe4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 fab0 	bl	800554c <DMA_CalcBaseAndBitshift>
 8004fec:	4603      	mov	r3, r0
 8004fee:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005018:	223f      	movs	r2, #63	@ 0x3f
 800501a:	409a      	lsls	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
 800504c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800504e:	2300      	movs	r3, #0
 8005050:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005058:	2b01      	cmp	r3, #1
 800505a:	d101      	bne.n	8005060 <HAL_DMA_Start+0x20>
 800505c:	2302      	movs	r3, #2
 800505e:	e026      	b.n	80050ae <HAL_DMA_Start+0x6e>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b01      	cmp	r3, #1
 8005072:	d115      	bne.n	80050a0 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	68b9      	ldr	r1, [r7, #8]
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 fa31 	bl	80054f0 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f042 0201 	orr.w	r2, r2, #1
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	e005      	b.n	80050ac <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80050a8:	2302      	movs	r3, #2
 80050aa:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 80050ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3718      	adds	r7, #24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b084      	sub	sp, #16
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80050c4:	f7ff f884 	bl	80041d0 <HAL_GetTick>
 80050c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d008      	beq.n	80050e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2280      	movs	r2, #128	@ 0x80
 80050da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e052      	b.n	800518e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0216 	bic.w	r2, r2, #22
 80050f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	695a      	ldr	r2, [r3, #20]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005106:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510c:	2b00      	cmp	r3, #0
 800510e:	d103      	bne.n	8005118 <HAL_DMA_Abort+0x62>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005114:	2b00      	cmp	r3, #0
 8005116:	d007      	beq.n	8005128 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 0208 	bic.w	r2, r2, #8
 8005126:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f022 0201 	bic.w	r2, r2, #1
 8005136:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005138:	e013      	b.n	8005162 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800513a:	f7ff f849 	bl	80041d0 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b05      	cmp	r3, #5
 8005146:	d90c      	bls.n	8005162 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2220      	movs	r2, #32
 800514c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2203      	movs	r2, #3
 8005152:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e015      	b.n	800518e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1e4      	bne.n	800513a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005174:	223f      	movs	r2, #63	@ 0x3f
 8005176:	409a      	lsls	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d004      	beq.n	80051b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2280      	movs	r2, #128	@ 0x80
 80051ae:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e00c      	b.n	80051ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2205      	movs	r2, #5
 80051b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f022 0201 	bic.w	r2, r2, #1
 80051ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	370c      	adds	r7, #12
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
	...

080051dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80051e8:	4b8e      	ldr	r3, [pc, #568]	@ (8005424 <HAL_DMA_IRQHandler+0x248>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a8e      	ldr	r2, [pc, #568]	@ (8005428 <HAL_DMA_IRQHandler+0x24c>)
 80051ee:	fba2 2303 	umull	r2, r3, r2, r3
 80051f2:	0a9b      	lsrs	r3, r3, #10
 80051f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005206:	2208      	movs	r2, #8
 8005208:	409a      	lsls	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	4013      	ands	r3, r2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d01a      	beq.n	8005248 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	2b00      	cmp	r3, #0
 800521e:	d013      	beq.n	8005248 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f022 0204 	bic.w	r2, r2, #4
 800522e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005234:	2208      	movs	r2, #8
 8005236:	409a      	lsls	r2, r3
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005240:	f043 0201 	orr.w	r2, r3, #1
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800524c:	2201      	movs	r2, #1
 800524e:	409a      	lsls	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	4013      	ands	r3, r2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d012      	beq.n	800527e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00b      	beq.n	800527e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800526a:	2201      	movs	r2, #1
 800526c:	409a      	lsls	r2, r3
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005276:	f043 0202 	orr.w	r2, r3, #2
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005282:	2204      	movs	r2, #4
 8005284:	409a      	lsls	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	4013      	ands	r3, r2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d012      	beq.n	80052b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00b      	beq.n	80052b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052a0:	2204      	movs	r2, #4
 80052a2:	409a      	lsls	r2, r3
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ac:	f043 0204 	orr.w	r2, r3, #4
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052b8:	2210      	movs	r2, #16
 80052ba:	409a      	lsls	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4013      	ands	r3, r2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d043      	beq.n	800534c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0308 	and.w	r3, r3, #8
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d03c      	beq.n	800534c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052d6:	2210      	movs	r2, #16
 80052d8:	409a      	lsls	r2, r3
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d018      	beq.n	800531e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d108      	bne.n	800530c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d024      	beq.n	800534c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	4798      	blx	r3
 800530a:	e01f      	b.n	800534c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005310:	2b00      	cmp	r3, #0
 8005312:	d01b      	beq.n	800534c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	4798      	blx	r3
 800531c:	e016      	b.n	800534c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005328:	2b00      	cmp	r3, #0
 800532a:	d107      	bne.n	800533c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 0208 	bic.w	r2, r2, #8
 800533a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005340:	2b00      	cmp	r3, #0
 8005342:	d003      	beq.n	800534c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005350:	2220      	movs	r2, #32
 8005352:	409a      	lsls	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4013      	ands	r3, r2
 8005358:	2b00      	cmp	r3, #0
 800535a:	f000 808f 	beq.w	800547c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0310 	and.w	r3, r3, #16
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 8087 	beq.w	800547c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005372:	2220      	movs	r2, #32
 8005374:	409a      	lsls	r2, r3
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b05      	cmp	r3, #5
 8005384:	d136      	bne.n	80053f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 0216 	bic.w	r2, r2, #22
 8005394:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	695a      	ldr	r2, [r3, #20]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80053a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d103      	bne.n	80053b6 <HAL_DMA_IRQHandler+0x1da>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d007      	beq.n	80053c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f022 0208 	bic.w	r2, r2, #8
 80053c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053ca:	223f      	movs	r2, #63	@ 0x3f
 80053cc:	409a      	lsls	r2, r3
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d07e      	beq.n	80054e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	4798      	blx	r3
        }
        return;
 80053f2:	e079      	b.n	80054e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d01d      	beq.n	800543e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10d      	bne.n	800542c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005414:	2b00      	cmp	r3, #0
 8005416:	d031      	beq.n	800547c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	4798      	blx	r3
 8005420:	e02c      	b.n	800547c <HAL_DMA_IRQHandler+0x2a0>
 8005422:	bf00      	nop
 8005424:	20000010 	.word	0x20000010
 8005428:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005430:	2b00      	cmp	r3, #0
 8005432:	d023      	beq.n	800547c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	4798      	blx	r3
 800543c:	e01e      	b.n	800547c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10f      	bne.n	800546c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 0210 	bic.w	r2, r2, #16
 800545a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005470:	2b00      	cmp	r3, #0
 8005472:	d003      	beq.n	800547c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005480:	2b00      	cmp	r3, #0
 8005482:	d032      	beq.n	80054ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005488:	f003 0301 	and.w	r3, r3, #1
 800548c:	2b00      	cmp	r3, #0
 800548e:	d022      	beq.n	80054d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2205      	movs	r2, #5
 8005494:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 0201 	bic.w	r2, r2, #1
 80054a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	3301      	adds	r3, #1
 80054ac:	60bb      	str	r3, [r7, #8]
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d307      	bcc.n	80054c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1f2      	bne.n	80054a8 <HAL_DMA_IRQHandler+0x2cc>
 80054c2:	e000      	b.n	80054c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80054c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d005      	beq.n	80054ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	4798      	blx	r3
 80054e6:	e000      	b.n	80054ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80054e8:	bf00      	nop
    }
  }
}
 80054ea:	3718      	adds	r7, #24
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
 80054fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800550c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	2b40      	cmp	r3, #64	@ 0x40
 800551c:	d108      	bne.n	8005530 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800552e:	e007      	b.n	8005540 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	60da      	str	r2, [r3, #12]
}
 8005540:	bf00      	nop
 8005542:	3714      	adds	r7, #20
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	b2db      	uxtb	r3, r3
 800555a:	3b10      	subs	r3, #16
 800555c:	4a14      	ldr	r2, [pc, #80]	@ (80055b0 <DMA_CalcBaseAndBitshift+0x64>)
 800555e:	fba2 2303 	umull	r2, r3, r2, r3
 8005562:	091b      	lsrs	r3, r3, #4
 8005564:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005566:	4a13      	ldr	r2, [pc, #76]	@ (80055b4 <DMA_CalcBaseAndBitshift+0x68>)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4413      	add	r3, r2
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	461a      	mov	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2b03      	cmp	r3, #3
 8005578:	d909      	bls.n	800558e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005582:	f023 0303 	bic.w	r3, r3, #3
 8005586:	1d1a      	adds	r2, r3, #4
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	659a      	str	r2, [r3, #88]	@ 0x58
 800558c:	e007      	b.n	800559e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005596:	f023 0303 	bic.w	r3, r3, #3
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	aaaaaaab 	.word	0xaaaaaaab
 80055b4:	08025120 	.word	0x08025120

080055b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055c0:	2300      	movs	r3, #0
 80055c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d11f      	bne.n	8005612 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	2b03      	cmp	r3, #3
 80055d6:	d856      	bhi.n	8005686 <DMA_CheckFifoParam+0xce>
 80055d8:	a201      	add	r2, pc, #4	@ (adr r2, 80055e0 <DMA_CheckFifoParam+0x28>)
 80055da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055de:	bf00      	nop
 80055e0:	080055f1 	.word	0x080055f1
 80055e4:	08005603 	.word	0x08005603
 80055e8:	080055f1 	.word	0x080055f1
 80055ec:	08005687 	.word	0x08005687
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d046      	beq.n	800568a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005600:	e043      	b.n	800568a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005606:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800560a:	d140      	bne.n	800568e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005610:	e03d      	b.n	800568e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800561a:	d121      	bne.n	8005660 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	2b03      	cmp	r3, #3
 8005620:	d837      	bhi.n	8005692 <DMA_CheckFifoParam+0xda>
 8005622:	a201      	add	r2, pc, #4	@ (adr r2, 8005628 <DMA_CheckFifoParam+0x70>)
 8005624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005628:	08005639 	.word	0x08005639
 800562c:	0800563f 	.word	0x0800563f
 8005630:	08005639 	.word	0x08005639
 8005634:	08005651 	.word	0x08005651
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	73fb      	strb	r3, [r7, #15]
      break;
 800563c:	e030      	b.n	80056a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005642:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d025      	beq.n	8005696 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800564e:	e022      	b.n	8005696 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005654:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005658:	d11f      	bne.n	800569a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800565e:	e01c      	b.n	800569a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	2b02      	cmp	r3, #2
 8005664:	d903      	bls.n	800566e <DMA_CheckFifoParam+0xb6>
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	2b03      	cmp	r3, #3
 800566a:	d003      	beq.n	8005674 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800566c:	e018      	b.n	80056a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	73fb      	strb	r3, [r7, #15]
      break;
 8005672:	e015      	b.n	80056a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005678:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00e      	beq.n	800569e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	73fb      	strb	r3, [r7, #15]
      break;
 8005684:	e00b      	b.n	800569e <DMA_CheckFifoParam+0xe6>
      break;
 8005686:	bf00      	nop
 8005688:	e00a      	b.n	80056a0 <DMA_CheckFifoParam+0xe8>
      break;
 800568a:	bf00      	nop
 800568c:	e008      	b.n	80056a0 <DMA_CheckFifoParam+0xe8>
      break;
 800568e:	bf00      	nop
 8005690:	e006      	b.n	80056a0 <DMA_CheckFifoParam+0xe8>
      break;
 8005692:	bf00      	nop
 8005694:	e004      	b.n	80056a0 <DMA_CheckFifoParam+0xe8>
      break;
 8005696:	bf00      	nop
 8005698:	e002      	b.n	80056a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800569a:	bf00      	nop
 800569c:	e000      	b.n	80056a0 <DMA_CheckFifoParam+0xe8>
      break;
 800569e:	bf00      	nop
    }
  } 
  
  return status; 
 80056a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop

080056b0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80056c2:	4b23      	ldr	r3, [pc, #140]	@ (8005750 <HAL_FLASH_Program+0xa0>)
 80056c4:	7e1b      	ldrb	r3, [r3, #24]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d101      	bne.n	80056ce <HAL_FLASH_Program+0x1e>
 80056ca:	2302      	movs	r3, #2
 80056cc:	e03b      	b.n	8005746 <HAL_FLASH_Program+0x96>
 80056ce:	4b20      	ldr	r3, [pc, #128]	@ (8005750 <HAL_FLASH_Program+0xa0>)
 80056d0:	2201      	movs	r2, #1
 80056d2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80056d4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80056d8:	f000 f87c 	bl	80057d4 <FLASH_WaitForLastOperation>
 80056dc:	4603      	mov	r3, r0
 80056de:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80056e0:	7dfb      	ldrb	r3, [r7, #23]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d12b      	bne.n	800573e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d105      	bne.n	80056f8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80056ec:	783b      	ldrb	r3, [r7, #0]
 80056ee:	4619      	mov	r1, r3
 80056f0:	68b8      	ldr	r0, [r7, #8]
 80056f2:	f000 f927 	bl	8005944 <FLASH_Program_Byte>
 80056f6:	e016      	b.n	8005726 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d105      	bne.n	800570a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80056fe:	883b      	ldrh	r3, [r7, #0]
 8005700:	4619      	mov	r1, r3
 8005702:	68b8      	ldr	r0, [r7, #8]
 8005704:	f000 f8fa 	bl	80058fc <FLASH_Program_HalfWord>
 8005708:	e00d      	b.n	8005726 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2b02      	cmp	r3, #2
 800570e:	d105      	bne.n	800571c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	4619      	mov	r1, r3
 8005714:	68b8      	ldr	r0, [r7, #8]
 8005716:	f000 f8cf 	bl	80058b8 <FLASH_Program_Word>
 800571a:	e004      	b.n	8005726 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800571c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005720:	68b8      	ldr	r0, [r7, #8]
 8005722:	f000 f897 	bl	8005854 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005726:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800572a:	f000 f853 	bl	80057d4 <FLASH_WaitForLastOperation>
 800572e:	4603      	mov	r3, r0
 8005730:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8005732:	4b08      	ldr	r3, [pc, #32]	@ (8005754 <HAL_FLASH_Program+0xa4>)
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	4a07      	ldr	r2, [pc, #28]	@ (8005754 <HAL_FLASH_Program+0xa4>)
 8005738:	f023 0301 	bic.w	r3, r3, #1
 800573c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800573e:	4b04      	ldr	r3, [pc, #16]	@ (8005750 <HAL_FLASH_Program+0xa0>)
 8005740:	2200      	movs	r2, #0
 8005742:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005744:	7dfb      	ldrb	r3, [r7, #23]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3718      	adds	r7, #24
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	20001b0c 	.word	0x20001b0c
 8005754:	40023c00 	.word	0x40023c00

08005758 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005762:	4b0b      	ldr	r3, [pc, #44]	@ (8005790 <HAL_FLASH_Unlock+0x38>)
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	2b00      	cmp	r3, #0
 8005768:	da0b      	bge.n	8005782 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800576a:	4b09      	ldr	r3, [pc, #36]	@ (8005790 <HAL_FLASH_Unlock+0x38>)
 800576c:	4a09      	ldr	r2, [pc, #36]	@ (8005794 <HAL_FLASH_Unlock+0x3c>)
 800576e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005770:	4b07      	ldr	r3, [pc, #28]	@ (8005790 <HAL_FLASH_Unlock+0x38>)
 8005772:	4a09      	ldr	r2, [pc, #36]	@ (8005798 <HAL_FLASH_Unlock+0x40>)
 8005774:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005776:	4b06      	ldr	r3, [pc, #24]	@ (8005790 <HAL_FLASH_Unlock+0x38>)
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	2b00      	cmp	r3, #0
 800577c:	da01      	bge.n	8005782 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005782:	79fb      	ldrb	r3, [r7, #7]
}
 8005784:	4618      	mov	r0, r3
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	40023c00 	.word	0x40023c00
 8005794:	45670123 	.word	0x45670123
 8005798:	cdef89ab 	.word	0xcdef89ab

0800579c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800579c:	b480      	push	{r7}
 800579e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80057a0:	4b05      	ldr	r3, [pc, #20]	@ (80057b8 <HAL_FLASH_Lock+0x1c>)
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	4a04      	ldr	r2, [pc, #16]	@ (80057b8 <HAL_FLASH_Lock+0x1c>)
 80057a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80057aa:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	40023c00 	.word	0x40023c00

080057bc <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 80057bc:	b480      	push	{r7}
 80057be:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80057c0:	4b03      	ldr	r3, [pc, #12]	@ (80057d0 <HAL_FLASH_GetError+0x14>)
 80057c2:	69db      	ldr	r3, [r3, #28]
}  
 80057c4:	4618      	mov	r0, r3
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	20001b0c 	.word	0x20001b0c

080057d4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057dc:	2300      	movs	r3, #0
 80057de:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80057e0:	4b1a      	ldr	r3, [pc, #104]	@ (800584c <FLASH_WaitForLastOperation+0x78>)
 80057e2:	2200      	movs	r2, #0
 80057e4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80057e6:	f7fe fcf3 	bl	80041d0 <HAL_GetTick>
 80057ea:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80057ec:	e010      	b.n	8005810 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f4:	d00c      	beq.n	8005810 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d007      	beq.n	800580c <FLASH_WaitForLastOperation+0x38>
 80057fc:	f7fe fce8 	bl	80041d0 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	429a      	cmp	r2, r3
 800580a:	d201      	bcs.n	8005810 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e019      	b.n	8005844 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005810:	4b0f      	ldr	r3, [pc, #60]	@ (8005850 <FLASH_WaitForLastOperation+0x7c>)
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1e8      	bne.n	80057ee <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800581c:	4b0c      	ldr	r3, [pc, #48]	@ (8005850 <FLASH_WaitForLastOperation+0x7c>)
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	2b00      	cmp	r3, #0
 8005826:	d002      	beq.n	800582e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005828:	4b09      	ldr	r3, [pc, #36]	@ (8005850 <FLASH_WaitForLastOperation+0x7c>)
 800582a:	2201      	movs	r2, #1
 800582c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800582e:	4b08      	ldr	r3, [pc, #32]	@ (8005850 <FLASH_WaitForLastOperation+0x7c>)
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d003      	beq.n	8005842 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800583a:	f000 f8a5 	bl	8005988 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e000      	b.n	8005844 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8005842:	2300      	movs	r3, #0
  
}  
 8005844:	4618      	mov	r0, r3
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	20001b0c 	.word	0x20001b0c
 8005850:	40023c00 	.word	0x40023c00

08005854 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005860:	4b14      	ldr	r3, [pc, #80]	@ (80058b4 <FLASH_Program_DoubleWord+0x60>)
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	4a13      	ldr	r2, [pc, #76]	@ (80058b4 <FLASH_Program_DoubleWord+0x60>)
 8005866:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800586a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800586c:	4b11      	ldr	r3, [pc, #68]	@ (80058b4 <FLASH_Program_DoubleWord+0x60>)
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	4a10      	ldr	r2, [pc, #64]	@ (80058b4 <FLASH_Program_DoubleWord+0x60>)
 8005872:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8005876:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005878:	4b0e      	ldr	r3, [pc, #56]	@ (80058b4 <FLASH_Program_DoubleWord+0x60>)
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	4a0d      	ldr	r2, [pc, #52]	@ (80058b4 <FLASH_Program_DoubleWord+0x60>)
 800587e:	f043 0301 	orr.w	r3, r3, #1
 8005882:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800588a:	f3bf 8f6f 	isb	sy
}
 800588e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005890:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005894:	f04f 0200 	mov.w	r2, #0
 8005898:	f04f 0300 	mov.w	r3, #0
 800589c:	000a      	movs	r2, r1
 800589e:	2300      	movs	r3, #0
 80058a0:	68f9      	ldr	r1, [r7, #12]
 80058a2:	3104      	adds	r1, #4
 80058a4:	4613      	mov	r3, r2
 80058a6:	600b      	str	r3, [r1, #0]
}
 80058a8:	bf00      	nop
 80058aa:	3714      	adds	r7, #20
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr
 80058b4:	40023c00 	.word	0x40023c00

080058b8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80058c2:	4b0d      	ldr	r3, [pc, #52]	@ (80058f8 <FLASH_Program_Word+0x40>)
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	4a0c      	ldr	r2, [pc, #48]	@ (80058f8 <FLASH_Program_Word+0x40>)
 80058c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80058ce:	4b0a      	ldr	r3, [pc, #40]	@ (80058f8 <FLASH_Program_Word+0x40>)
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	4a09      	ldr	r2, [pc, #36]	@ (80058f8 <FLASH_Program_Word+0x40>)
 80058d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80058d8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80058da:	4b07      	ldr	r3, [pc, #28]	@ (80058f8 <FLASH_Program_Word+0x40>)
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	4a06      	ldr	r2, [pc, #24]	@ (80058f8 <FLASH_Program_Word+0x40>)
 80058e0:	f043 0301 	orr.w	r3, r3, #1
 80058e4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	683a      	ldr	r2, [r7, #0]
 80058ea:	601a      	str	r2, [r3, #0]
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	40023c00 	.word	0x40023c00

080058fc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	460b      	mov	r3, r1
 8005906:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005908:	4b0d      	ldr	r3, [pc, #52]	@ (8005940 <FLASH_Program_HalfWord+0x44>)
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	4a0c      	ldr	r2, [pc, #48]	@ (8005940 <FLASH_Program_HalfWord+0x44>)
 800590e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005912:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005914:	4b0a      	ldr	r3, [pc, #40]	@ (8005940 <FLASH_Program_HalfWord+0x44>)
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	4a09      	ldr	r2, [pc, #36]	@ (8005940 <FLASH_Program_HalfWord+0x44>)
 800591a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800591e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005920:	4b07      	ldr	r3, [pc, #28]	@ (8005940 <FLASH_Program_HalfWord+0x44>)
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	4a06      	ldr	r2, [pc, #24]	@ (8005940 <FLASH_Program_HalfWord+0x44>)
 8005926:	f043 0301 	orr.w	r3, r3, #1
 800592a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	887a      	ldrh	r2, [r7, #2]
 8005930:	801a      	strh	r2, [r3, #0]
}
 8005932:	bf00      	nop
 8005934:	370c      	adds	r7, #12
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	40023c00 	.word	0x40023c00

08005944 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	460b      	mov	r3, r1
 800594e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005950:	4b0c      	ldr	r3, [pc, #48]	@ (8005984 <FLASH_Program_Byte+0x40>)
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	4a0b      	ldr	r2, [pc, #44]	@ (8005984 <FLASH_Program_Byte+0x40>)
 8005956:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800595a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800595c:	4b09      	ldr	r3, [pc, #36]	@ (8005984 <FLASH_Program_Byte+0x40>)
 800595e:	4a09      	ldr	r2, [pc, #36]	@ (8005984 <FLASH_Program_Byte+0x40>)
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005964:	4b07      	ldr	r3, [pc, #28]	@ (8005984 <FLASH_Program_Byte+0x40>)
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	4a06      	ldr	r2, [pc, #24]	@ (8005984 <FLASH_Program_Byte+0x40>)
 800596a:	f043 0301 	orr.w	r3, r3, #1
 800596e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	78fa      	ldrb	r2, [r7, #3]
 8005974:	701a      	strb	r2, [r3, #0]
}
 8005976:	bf00      	nop
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	40023c00 	.word	0x40023c00

08005988 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005988:	b480      	push	{r7}
 800598a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800598c:	4b2f      	ldr	r3, [pc, #188]	@ (8005a4c <FLASH_SetErrorCode+0xc4>)
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	f003 0310 	and.w	r3, r3, #16
 8005994:	2b00      	cmp	r3, #0
 8005996:	d008      	beq.n	80059aa <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005998:	4b2d      	ldr	r3, [pc, #180]	@ (8005a50 <FLASH_SetErrorCode+0xc8>)
 800599a:	69db      	ldr	r3, [r3, #28]
 800599c:	f043 0310 	orr.w	r3, r3, #16
 80059a0:	4a2b      	ldr	r2, [pc, #172]	@ (8005a50 <FLASH_SetErrorCode+0xc8>)
 80059a2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80059a4:	4b29      	ldr	r3, [pc, #164]	@ (8005a4c <FLASH_SetErrorCode+0xc4>)
 80059a6:	2210      	movs	r2, #16
 80059a8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80059aa:	4b28      	ldr	r3, [pc, #160]	@ (8005a4c <FLASH_SetErrorCode+0xc4>)
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	f003 0320 	and.w	r3, r3, #32
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d008      	beq.n	80059c8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80059b6:	4b26      	ldr	r3, [pc, #152]	@ (8005a50 <FLASH_SetErrorCode+0xc8>)
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	f043 0308 	orr.w	r3, r3, #8
 80059be:	4a24      	ldr	r2, [pc, #144]	@ (8005a50 <FLASH_SetErrorCode+0xc8>)
 80059c0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80059c2:	4b22      	ldr	r3, [pc, #136]	@ (8005a4c <FLASH_SetErrorCode+0xc4>)
 80059c4:	2220      	movs	r2, #32
 80059c6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80059c8:	4b20      	ldr	r3, [pc, #128]	@ (8005a4c <FLASH_SetErrorCode+0xc4>)
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d008      	beq.n	80059e6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80059d4:	4b1e      	ldr	r3, [pc, #120]	@ (8005a50 <FLASH_SetErrorCode+0xc8>)
 80059d6:	69db      	ldr	r3, [r3, #28]
 80059d8:	f043 0304 	orr.w	r3, r3, #4
 80059dc:	4a1c      	ldr	r2, [pc, #112]	@ (8005a50 <FLASH_SetErrorCode+0xc8>)
 80059de:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80059e0:	4b1a      	ldr	r3, [pc, #104]	@ (8005a4c <FLASH_SetErrorCode+0xc4>)
 80059e2:	2240      	movs	r2, #64	@ 0x40
 80059e4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80059e6:	4b19      	ldr	r3, [pc, #100]	@ (8005a4c <FLASH_SetErrorCode+0xc4>)
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d008      	beq.n	8005a04 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80059f2:	4b17      	ldr	r3, [pc, #92]	@ (8005a50 <FLASH_SetErrorCode+0xc8>)
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	f043 0302 	orr.w	r3, r3, #2
 80059fa:	4a15      	ldr	r2, [pc, #84]	@ (8005a50 <FLASH_SetErrorCode+0xc8>)
 80059fc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80059fe:	4b13      	ldr	r3, [pc, #76]	@ (8005a4c <FLASH_SetErrorCode+0xc4>)
 8005a00:	2280      	movs	r2, #128	@ 0x80
 8005a02:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8005a04:	4b11      	ldr	r3, [pc, #68]	@ (8005a4c <FLASH_SetErrorCode+0xc4>)
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d009      	beq.n	8005a24 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005a10:	4b0f      	ldr	r3, [pc, #60]	@ (8005a50 <FLASH_SetErrorCode+0xc8>)
 8005a12:	69db      	ldr	r3, [r3, #28]
 8005a14:	f043 0301 	orr.w	r3, r3, #1
 8005a18:	4a0d      	ldr	r2, [pc, #52]	@ (8005a50 <FLASH_SetErrorCode+0xc8>)
 8005a1a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a4c <FLASH_SetErrorCode+0xc4>)
 8005a1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a22:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005a24:	4b09      	ldr	r3, [pc, #36]	@ (8005a4c <FLASH_SetErrorCode+0xc4>)
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d008      	beq.n	8005a42 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005a30:	4b07      	ldr	r3, [pc, #28]	@ (8005a50 <FLASH_SetErrorCode+0xc8>)
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	f043 0320 	orr.w	r3, r3, #32
 8005a38:	4a05      	ldr	r2, [pc, #20]	@ (8005a50 <FLASH_SetErrorCode+0xc8>)
 8005a3a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005a3c:	4b03      	ldr	r3, [pc, #12]	@ (8005a4c <FLASH_SetErrorCode+0xc4>)
 8005a3e:	2202      	movs	r2, #2
 8005a40:	60da      	str	r2, [r3, #12]
  }
}
 8005a42:	bf00      	nop
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	40023c00 	.word	0x40023c00
 8005a50:	20001b0c 	.word	0x20001b0c

08005a54 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8005a62:	2300      	movs	r3, #0
 8005a64:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005a66:	4b31      	ldr	r3, [pc, #196]	@ (8005b2c <HAL_FLASHEx_Erase+0xd8>)
 8005a68:	7e1b      	ldrb	r3, [r3, #24]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d101      	bne.n	8005a72 <HAL_FLASHEx_Erase+0x1e>
 8005a6e:	2302      	movs	r3, #2
 8005a70:	e058      	b.n	8005b24 <HAL_FLASHEx_Erase+0xd0>
 8005a72:	4b2e      	ldr	r3, [pc, #184]	@ (8005b2c <HAL_FLASHEx_Erase+0xd8>)
 8005a74:	2201      	movs	r2, #1
 8005a76:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005a78:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005a7c:	f7ff feaa 	bl	80057d4 <FLASH_WaitForLastOperation>
 8005a80:	4603      	mov	r3, r0
 8005a82:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005a84:	7bfb      	ldrb	r3, [r7, #15]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d148      	bne.n	8005b1c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a90:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d115      	bne.n	8005ac6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	b2da      	uxtb	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	4610      	mov	r0, r2
 8005aa8:	f000 f844 	bl	8005b34 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005aac:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005ab0:	f7ff fe90 	bl	80057d4 <FLASH_WaitForLastOperation>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8005ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8005b30 <HAL_FLASHEx_Erase+0xdc>)
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	4a1c      	ldr	r2, [pc, #112]	@ (8005b30 <HAL_FLASHEx_Erase+0xdc>)
 8005abe:	f023 0304 	bic.w	r3, r3, #4
 8005ac2:	6113      	str	r3, [r2, #16]
 8005ac4:	e028      	b.n	8005b18 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	60bb      	str	r3, [r7, #8]
 8005acc:	e01c      	b.n	8005b08 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	68b8      	ldr	r0, [r7, #8]
 8005ad8:	f000 f850 	bl	8005b7c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005adc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005ae0:	f7ff fe78 	bl	80057d4 <FLASH_WaitForLastOperation>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005ae8:	4b11      	ldr	r3, [pc, #68]	@ (8005b30 <HAL_FLASHEx_Erase+0xdc>)
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	4a10      	ldr	r2, [pc, #64]	@ (8005b30 <HAL_FLASHEx_Erase+0xdc>)
 8005aee:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8005af2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8005af4:	7bfb      	ldrb	r3, [r7, #15]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	601a      	str	r2, [r3, #0]
          break;
 8005b00:	e00a      	b.n	8005b18 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	3301      	adds	r3, #1
 8005b06:	60bb      	str	r3, [r7, #8]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68da      	ldr	r2, [r3, #12]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	4413      	add	r3, r2
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d3da      	bcc.n	8005ace <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005b18:	f000 f878 	bl	8005c0c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005b1c:	4b03      	ldr	r3, [pc, #12]	@ (8005b2c <HAL_FLASHEx_Erase+0xd8>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	761a      	strb	r2, [r3, #24]

  return status;
 8005b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	20001b0c 	.word	0x20001b0c
 8005b30:	40023c00 	.word	0x40023c00

08005b34 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	6039      	str	r1, [r7, #0]
 8005b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005b40:	4b0d      	ldr	r3, [pc, #52]	@ (8005b78 <FLASH_MassErase+0x44>)
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	4a0c      	ldr	r2, [pc, #48]	@ (8005b78 <FLASH_MassErase+0x44>)
 8005b46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8005b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8005b78 <FLASH_MassErase+0x44>)
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	4a09      	ldr	r2, [pc, #36]	@ (8005b78 <FLASH_MassErase+0x44>)
 8005b52:	f043 0304 	orr.w	r3, r3, #4
 8005b56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8005b58:	4b07      	ldr	r3, [pc, #28]	@ (8005b78 <FLASH_MassErase+0x44>)
 8005b5a:	691a      	ldr	r2, [r3, #16]
 8005b5c:	79fb      	ldrb	r3, [r7, #7]
 8005b5e:	021b      	lsls	r3, r3, #8
 8005b60:	4313      	orrs	r3, r2
 8005b62:	4a05      	ldr	r2, [pc, #20]	@ (8005b78 <FLASH_MassErase+0x44>)
 8005b64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b68:	6113      	str	r3, [r2, #16]
}
 8005b6a:	bf00      	nop
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	40023c00 	.word	0x40023c00

08005b7c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	460b      	mov	r3, r1
 8005b86:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005b8c:	78fb      	ldrb	r3, [r7, #3]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d102      	bne.n	8005b98 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8005b92:	2300      	movs	r3, #0
 8005b94:	60fb      	str	r3, [r7, #12]
 8005b96:	e010      	b.n	8005bba <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005b98:	78fb      	ldrb	r3, [r7, #3]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d103      	bne.n	8005ba6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005b9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005ba2:	60fb      	str	r3, [r7, #12]
 8005ba4:	e009      	b.n	8005bba <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005ba6:	78fb      	ldrb	r3, [r7, #3]
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d103      	bne.n	8005bb4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005bac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005bb0:	60fb      	str	r3, [r7, #12]
 8005bb2:	e002      	b.n	8005bba <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005bb4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005bb8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005bba:	4b13      	ldr	r3, [pc, #76]	@ (8005c08 <FLASH_Erase_Sector+0x8c>)
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	4a12      	ldr	r2, [pc, #72]	@ (8005c08 <FLASH_Erase_Sector+0x8c>)
 8005bc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bc4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005bc6:	4b10      	ldr	r3, [pc, #64]	@ (8005c08 <FLASH_Erase_Sector+0x8c>)
 8005bc8:	691a      	ldr	r2, [r3, #16]
 8005bca:	490f      	ldr	r1, [pc, #60]	@ (8005c08 <FLASH_Erase_Sector+0x8c>)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8005c08 <FLASH_Erase_Sector+0x8c>)
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	4a0c      	ldr	r2, [pc, #48]	@ (8005c08 <FLASH_Erase_Sector+0x8c>)
 8005bd8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005bdc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005bde:	4b0a      	ldr	r3, [pc, #40]	@ (8005c08 <FLASH_Erase_Sector+0x8c>)
 8005be0:	691a      	ldr	r2, [r3, #16]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	00db      	lsls	r3, r3, #3
 8005be6:	4313      	orrs	r3, r2
 8005be8:	4a07      	ldr	r2, [pc, #28]	@ (8005c08 <FLASH_Erase_Sector+0x8c>)
 8005bea:	f043 0302 	orr.w	r3, r3, #2
 8005bee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005bf0:	4b05      	ldr	r3, [pc, #20]	@ (8005c08 <FLASH_Erase_Sector+0x8c>)
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	4a04      	ldr	r2, [pc, #16]	@ (8005c08 <FLASH_Erase_Sector+0x8c>)
 8005bf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bfa:	6113      	str	r3, [r2, #16]
}
 8005bfc:	bf00      	nop
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	40023c00 	.word	0x40023c00

08005c0c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005c10:	4b20      	ldr	r3, [pc, #128]	@ (8005c94 <FLASH_FlushCaches+0x88>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d017      	beq.n	8005c4c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8005c94 <FLASH_FlushCaches+0x88>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a1c      	ldr	r2, [pc, #112]	@ (8005c94 <FLASH_FlushCaches+0x88>)
 8005c22:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c26:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005c28:	4b1a      	ldr	r3, [pc, #104]	@ (8005c94 <FLASH_FlushCaches+0x88>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a19      	ldr	r2, [pc, #100]	@ (8005c94 <FLASH_FlushCaches+0x88>)
 8005c2e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005c32:	6013      	str	r3, [r2, #0]
 8005c34:	4b17      	ldr	r3, [pc, #92]	@ (8005c94 <FLASH_FlushCaches+0x88>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a16      	ldr	r2, [pc, #88]	@ (8005c94 <FLASH_FlushCaches+0x88>)
 8005c3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c3e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005c40:	4b14      	ldr	r3, [pc, #80]	@ (8005c94 <FLASH_FlushCaches+0x88>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a13      	ldr	r2, [pc, #76]	@ (8005c94 <FLASH_FlushCaches+0x88>)
 8005c46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c4a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005c4c:	4b11      	ldr	r3, [pc, #68]	@ (8005c94 <FLASH_FlushCaches+0x88>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d017      	beq.n	8005c88 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005c58:	4b0e      	ldr	r3, [pc, #56]	@ (8005c94 <FLASH_FlushCaches+0x88>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8005c94 <FLASH_FlushCaches+0x88>)
 8005c5e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c62:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005c64:	4b0b      	ldr	r3, [pc, #44]	@ (8005c94 <FLASH_FlushCaches+0x88>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a0a      	ldr	r2, [pc, #40]	@ (8005c94 <FLASH_FlushCaches+0x88>)
 8005c6a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005c6e:	6013      	str	r3, [r2, #0]
 8005c70:	4b08      	ldr	r3, [pc, #32]	@ (8005c94 <FLASH_FlushCaches+0x88>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a07      	ldr	r2, [pc, #28]	@ (8005c94 <FLASH_FlushCaches+0x88>)
 8005c76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c7a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005c7c:	4b05      	ldr	r3, [pc, #20]	@ (8005c94 <FLASH_FlushCaches+0x88>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a04      	ldr	r2, [pc, #16]	@ (8005c94 <FLASH_FlushCaches+0x88>)
 8005c82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005c86:	6013      	str	r3, [r2, #0]
  }
}
 8005c88:	bf00      	nop
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	40023c00 	.word	0x40023c00

08005c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b089      	sub	sp, #36	@ 0x24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005caa:	2300      	movs	r3, #0
 8005cac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005cae:	2300      	movs	r3, #0
 8005cb0:	61fb      	str	r3, [r7, #28]
 8005cb2:	e159      	b.n	8005f68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	f040 8148 	bne.w	8005f62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f003 0303 	and.w	r3, r3, #3
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d005      	beq.n	8005cea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d130      	bne.n	8005d4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	2203      	movs	r2, #3
 8005cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfa:	43db      	mvns	r3, r3
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	4013      	ands	r3, r2
 8005d00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	68da      	ldr	r2, [r3, #12]
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d20:	2201      	movs	r2, #1
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	fa02 f303 	lsl.w	r3, r2, r3
 8005d28:	43db      	mvns	r3, r3
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	091b      	lsrs	r3, r3, #4
 8005d36:	f003 0201 	and.w	r2, r3, #1
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f003 0303 	and.w	r3, r3, #3
 8005d54:	2b03      	cmp	r3, #3
 8005d56:	d017      	beq.n	8005d88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	005b      	lsls	r3, r3, #1
 8005d62:	2203      	movs	r2, #3
 8005d64:	fa02 f303 	lsl.w	r3, r2, r3
 8005d68:	43db      	mvns	r3, r3
 8005d6a:	69ba      	ldr	r2, [r7, #24]
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f003 0303 	and.w	r3, r3, #3
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d123      	bne.n	8005ddc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	08da      	lsrs	r2, r3, #3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	3208      	adds	r2, #8
 8005d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	f003 0307 	and.w	r3, r3, #7
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	220f      	movs	r2, #15
 8005dac:	fa02 f303 	lsl.w	r3, r2, r3
 8005db0:	43db      	mvns	r3, r3
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	4013      	ands	r3, r2
 8005db6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	691a      	ldr	r2, [r3, #16]
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	f003 0307 	and.w	r3, r3, #7
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	08da      	lsrs	r2, r3, #3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	3208      	adds	r2, #8
 8005dd6:	69b9      	ldr	r1, [r7, #24]
 8005dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	005b      	lsls	r3, r3, #1
 8005de6:	2203      	movs	r2, #3
 8005de8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dec:	43db      	mvns	r3, r3
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	4013      	ands	r3, r2
 8005df2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f003 0203 	and.w	r2, r3, #3
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	005b      	lsls	r3, r3, #1
 8005e00:	fa02 f303 	lsl.w	r3, r2, r3
 8005e04:	69ba      	ldr	r2, [r7, #24]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 80a2 	beq.w	8005f62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e1e:	2300      	movs	r3, #0
 8005e20:	60fb      	str	r3, [r7, #12]
 8005e22:	4b57      	ldr	r3, [pc, #348]	@ (8005f80 <HAL_GPIO_Init+0x2e8>)
 8005e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e26:	4a56      	ldr	r2, [pc, #344]	@ (8005f80 <HAL_GPIO_Init+0x2e8>)
 8005e28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005e2e:	4b54      	ldr	r3, [pc, #336]	@ (8005f80 <HAL_GPIO_Init+0x2e8>)
 8005e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e3a:	4a52      	ldr	r2, [pc, #328]	@ (8005f84 <HAL_GPIO_Init+0x2ec>)
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	089b      	lsrs	r3, r3, #2
 8005e40:	3302      	adds	r3, #2
 8005e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	f003 0303 	and.w	r3, r3, #3
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	220f      	movs	r2, #15
 8005e52:	fa02 f303 	lsl.w	r3, r2, r3
 8005e56:	43db      	mvns	r3, r3
 8005e58:	69ba      	ldr	r2, [r7, #24]
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a49      	ldr	r2, [pc, #292]	@ (8005f88 <HAL_GPIO_Init+0x2f0>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d019      	beq.n	8005e9a <HAL_GPIO_Init+0x202>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a48      	ldr	r2, [pc, #288]	@ (8005f8c <HAL_GPIO_Init+0x2f4>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d013      	beq.n	8005e96 <HAL_GPIO_Init+0x1fe>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a47      	ldr	r2, [pc, #284]	@ (8005f90 <HAL_GPIO_Init+0x2f8>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d00d      	beq.n	8005e92 <HAL_GPIO_Init+0x1fa>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a46      	ldr	r2, [pc, #280]	@ (8005f94 <HAL_GPIO_Init+0x2fc>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d007      	beq.n	8005e8e <HAL_GPIO_Init+0x1f6>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a45      	ldr	r2, [pc, #276]	@ (8005f98 <HAL_GPIO_Init+0x300>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d101      	bne.n	8005e8a <HAL_GPIO_Init+0x1f2>
 8005e86:	2304      	movs	r3, #4
 8005e88:	e008      	b.n	8005e9c <HAL_GPIO_Init+0x204>
 8005e8a:	2307      	movs	r3, #7
 8005e8c:	e006      	b.n	8005e9c <HAL_GPIO_Init+0x204>
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e004      	b.n	8005e9c <HAL_GPIO_Init+0x204>
 8005e92:	2302      	movs	r3, #2
 8005e94:	e002      	b.n	8005e9c <HAL_GPIO_Init+0x204>
 8005e96:	2301      	movs	r3, #1
 8005e98:	e000      	b.n	8005e9c <HAL_GPIO_Init+0x204>
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	69fa      	ldr	r2, [r7, #28]
 8005e9e:	f002 0203 	and.w	r2, r2, #3
 8005ea2:	0092      	lsls	r2, r2, #2
 8005ea4:	4093      	lsls	r3, r2
 8005ea6:	69ba      	ldr	r2, [r7, #24]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005eac:	4935      	ldr	r1, [pc, #212]	@ (8005f84 <HAL_GPIO_Init+0x2ec>)
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	089b      	lsrs	r3, r3, #2
 8005eb2:	3302      	adds	r3, #2
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005eba:	4b38      	ldr	r3, [pc, #224]	@ (8005f9c <HAL_GPIO_Init+0x304>)
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	43db      	mvns	r3, r3
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005ed6:	69ba      	ldr	r2, [r7, #24]
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005ede:	4a2f      	ldr	r2, [pc, #188]	@ (8005f9c <HAL_GPIO_Init+0x304>)
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ee4:	4b2d      	ldr	r3, [pc, #180]	@ (8005f9c <HAL_GPIO_Init+0x304>)
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	43db      	mvns	r3, r3
 8005eee:	69ba      	ldr	r2, [r7, #24]
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d003      	beq.n	8005f08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005f00:	69ba      	ldr	r2, [r7, #24]
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005f08:	4a24      	ldr	r2, [pc, #144]	@ (8005f9c <HAL_GPIO_Init+0x304>)
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005f0e:	4b23      	ldr	r3, [pc, #140]	@ (8005f9c <HAL_GPIO_Init+0x304>)
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	43db      	mvns	r3, r3
 8005f18:	69ba      	ldr	r2, [r7, #24]
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005f2a:	69ba      	ldr	r2, [r7, #24]
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005f32:	4a1a      	ldr	r2, [pc, #104]	@ (8005f9c <HAL_GPIO_Init+0x304>)
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005f38:	4b18      	ldr	r3, [pc, #96]	@ (8005f9c <HAL_GPIO_Init+0x304>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	43db      	mvns	r3, r3
 8005f42:	69ba      	ldr	r2, [r7, #24]
 8005f44:	4013      	ands	r3, r2
 8005f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d003      	beq.n	8005f5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005f5c:	4a0f      	ldr	r2, [pc, #60]	@ (8005f9c <HAL_GPIO_Init+0x304>)
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	3301      	adds	r3, #1
 8005f66:	61fb      	str	r3, [r7, #28]
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	2b0f      	cmp	r3, #15
 8005f6c:	f67f aea2 	bls.w	8005cb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005f70:	bf00      	nop
 8005f72:	bf00      	nop
 8005f74:	3724      	adds	r7, #36	@ 0x24
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	40023800 	.word	0x40023800
 8005f84:	40013800 	.word	0x40013800
 8005f88:	40020000 	.word	0x40020000
 8005f8c:	40020400 	.word	0x40020400
 8005f90:	40020800 	.word	0x40020800
 8005f94:	40020c00 	.word	0x40020c00
 8005f98:	40021000 	.word	0x40021000
 8005f9c:	40013c00 	.word	0x40013c00

08005fa0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b087      	sub	sp, #28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005faa:	2300      	movs	r3, #0
 8005fac:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	617b      	str	r3, [r7, #20]
 8005fba:	e0bb      	b.n	8006134 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	4013      	ands	r3, r2
 8005fcc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	f040 80ab 	bne.w	800612e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005fd8:	4a5c      	ldr	r2, [pc, #368]	@ (800614c <HAL_GPIO_DeInit+0x1ac>)
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	089b      	lsrs	r3, r3, #2
 8005fde:	3302      	adds	r3, #2
 8005fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fe4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f003 0303 	and.w	r3, r3, #3
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	220f      	movs	r2, #15
 8005ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff4:	68ba      	ldr	r2, [r7, #8]
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a54      	ldr	r2, [pc, #336]	@ (8006150 <HAL_GPIO_DeInit+0x1b0>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d019      	beq.n	8006036 <HAL_GPIO_DeInit+0x96>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a53      	ldr	r2, [pc, #332]	@ (8006154 <HAL_GPIO_DeInit+0x1b4>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d013      	beq.n	8006032 <HAL_GPIO_DeInit+0x92>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a52      	ldr	r2, [pc, #328]	@ (8006158 <HAL_GPIO_DeInit+0x1b8>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d00d      	beq.n	800602e <HAL_GPIO_DeInit+0x8e>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a51      	ldr	r2, [pc, #324]	@ (800615c <HAL_GPIO_DeInit+0x1bc>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d007      	beq.n	800602a <HAL_GPIO_DeInit+0x8a>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a50      	ldr	r2, [pc, #320]	@ (8006160 <HAL_GPIO_DeInit+0x1c0>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d101      	bne.n	8006026 <HAL_GPIO_DeInit+0x86>
 8006022:	2304      	movs	r3, #4
 8006024:	e008      	b.n	8006038 <HAL_GPIO_DeInit+0x98>
 8006026:	2307      	movs	r3, #7
 8006028:	e006      	b.n	8006038 <HAL_GPIO_DeInit+0x98>
 800602a:	2303      	movs	r3, #3
 800602c:	e004      	b.n	8006038 <HAL_GPIO_DeInit+0x98>
 800602e:	2302      	movs	r3, #2
 8006030:	e002      	b.n	8006038 <HAL_GPIO_DeInit+0x98>
 8006032:	2301      	movs	r3, #1
 8006034:	e000      	b.n	8006038 <HAL_GPIO_DeInit+0x98>
 8006036:	2300      	movs	r3, #0
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	f002 0203 	and.w	r2, r2, #3
 800603e:	0092      	lsls	r2, r2, #2
 8006040:	4093      	lsls	r3, r2
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	429a      	cmp	r2, r3
 8006046:	d132      	bne.n	80060ae <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006048:	4b46      	ldr	r3, [pc, #280]	@ (8006164 <HAL_GPIO_DeInit+0x1c4>)
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	43db      	mvns	r3, r3
 8006050:	4944      	ldr	r1, [pc, #272]	@ (8006164 <HAL_GPIO_DeInit+0x1c4>)
 8006052:	4013      	ands	r3, r2
 8006054:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006056:	4b43      	ldr	r3, [pc, #268]	@ (8006164 <HAL_GPIO_DeInit+0x1c4>)
 8006058:	685a      	ldr	r2, [r3, #4]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	43db      	mvns	r3, r3
 800605e:	4941      	ldr	r1, [pc, #260]	@ (8006164 <HAL_GPIO_DeInit+0x1c4>)
 8006060:	4013      	ands	r3, r2
 8006062:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006064:	4b3f      	ldr	r3, [pc, #252]	@ (8006164 <HAL_GPIO_DeInit+0x1c4>)
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	43db      	mvns	r3, r3
 800606c:	493d      	ldr	r1, [pc, #244]	@ (8006164 <HAL_GPIO_DeInit+0x1c4>)
 800606e:	4013      	ands	r3, r2
 8006070:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006072:	4b3c      	ldr	r3, [pc, #240]	@ (8006164 <HAL_GPIO_DeInit+0x1c4>)
 8006074:	689a      	ldr	r2, [r3, #8]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	43db      	mvns	r3, r3
 800607a:	493a      	ldr	r1, [pc, #232]	@ (8006164 <HAL_GPIO_DeInit+0x1c4>)
 800607c:	4013      	ands	r3, r2
 800607e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	f003 0303 	and.w	r3, r3, #3
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	220f      	movs	r2, #15
 800608a:	fa02 f303 	lsl.w	r3, r2, r3
 800608e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006090:	4a2e      	ldr	r2, [pc, #184]	@ (800614c <HAL_GPIO_DeInit+0x1ac>)
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	089b      	lsrs	r3, r3, #2
 8006096:	3302      	adds	r3, #2
 8006098:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	43da      	mvns	r2, r3
 80060a0:	482a      	ldr	r0, [pc, #168]	@ (800614c <HAL_GPIO_DeInit+0x1ac>)
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	089b      	lsrs	r3, r3, #2
 80060a6:	400a      	ands	r2, r1
 80060a8:	3302      	adds	r3, #2
 80060aa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	005b      	lsls	r3, r3, #1
 80060b6:	2103      	movs	r1, #3
 80060b8:	fa01 f303 	lsl.w	r3, r1, r3
 80060bc:	43db      	mvns	r3, r3
 80060be:	401a      	ands	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	08da      	lsrs	r2, r3, #3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	3208      	adds	r2, #8
 80060cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	f003 0307 	and.w	r3, r3, #7
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	220f      	movs	r2, #15
 80060da:	fa02 f303 	lsl.w	r3, r2, r3
 80060de:	43db      	mvns	r3, r3
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	08d2      	lsrs	r2, r2, #3
 80060e4:	4019      	ands	r1, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	3208      	adds	r2, #8
 80060ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	68da      	ldr	r2, [r3, #12]
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	005b      	lsls	r3, r3, #1
 80060f6:	2103      	movs	r1, #3
 80060f8:	fa01 f303 	lsl.w	r3, r1, r3
 80060fc:	43db      	mvns	r3, r3
 80060fe:	401a      	ands	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685a      	ldr	r2, [r3, #4]
 8006108:	2101      	movs	r1, #1
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	fa01 f303 	lsl.w	r3, r1, r3
 8006110:	43db      	mvns	r3, r3
 8006112:	401a      	ands	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	689a      	ldr	r2, [r3, #8]
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	005b      	lsls	r3, r3, #1
 8006120:	2103      	movs	r1, #3
 8006122:	fa01 f303 	lsl.w	r3, r1, r3
 8006126:	43db      	mvns	r3, r3
 8006128:	401a      	ands	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	3301      	adds	r3, #1
 8006132:	617b      	str	r3, [r7, #20]
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	2b0f      	cmp	r3, #15
 8006138:	f67f af40 	bls.w	8005fbc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800613c:	bf00      	nop
 800613e:	bf00      	nop
 8006140:	371c      	adds	r7, #28
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	40013800 	.word	0x40013800
 8006150:	40020000 	.word	0x40020000
 8006154:	40020400 	.word	0x40020400
 8006158:	40020800 	.word	0x40020800
 800615c:	40020c00 	.word	0x40020c00
 8006160:	40021000 	.word	0x40021000
 8006164:	40013c00 	.word	0x40013c00

08006168 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	460b      	mov	r3, r1
 8006172:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	691a      	ldr	r2, [r3, #16]
 8006178:	887b      	ldrh	r3, [r7, #2]
 800617a:	4013      	ands	r3, r2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d002      	beq.n	8006186 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006180:	2301      	movs	r3, #1
 8006182:	73fb      	strb	r3, [r7, #15]
 8006184:	e001      	b.n	800618a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006186:	2300      	movs	r3, #0
 8006188:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800618a:	7bfb      	ldrb	r3, [r7, #15]
}
 800618c:	4618      	mov	r0, r3
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	460b      	mov	r3, r1
 80061a2:	807b      	strh	r3, [r7, #2]
 80061a4:	4613      	mov	r3, r2
 80061a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80061a8:	787b      	ldrb	r3, [r7, #1]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061ae:	887a      	ldrh	r2, [r7, #2]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80061b4:	e003      	b.n	80061be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80061b6:	887b      	ldrh	r3, [r7, #2]
 80061b8:	041a      	lsls	r2, r3, #16
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	619a      	str	r2, [r3, #24]
}
 80061be:	bf00      	nop
 80061c0:	370c      	adds	r7, #12
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
	...

080061cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	4603      	mov	r3, r0
 80061d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80061d6:	4b08      	ldr	r3, [pc, #32]	@ (80061f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80061d8:	695a      	ldr	r2, [r3, #20]
 80061da:	88fb      	ldrh	r3, [r7, #6]
 80061dc:	4013      	ands	r3, r2
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d006      	beq.n	80061f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80061e2:	4a05      	ldr	r2, [pc, #20]	@ (80061f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80061e4:	88fb      	ldrh	r3, [r7, #6]
 80061e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80061e8:	88fb      	ldrh	r3, [r7, #6]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7fd fa3e 	bl	800366c <HAL_GPIO_EXTI_Callback>
  }
}
 80061f0:	bf00      	nop
 80061f2:	3708      	adds	r7, #8
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	40013c00 	.word	0x40013c00

080061fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e12b      	b.n	8006466 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d106      	bne.n	8006228 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f7fd fb1c 	bl	8003860 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2224      	movs	r2, #36	@ 0x24
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f022 0201 	bic.w	r2, r2, #1
 800623e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800624e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800625e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006260:	f003 f8f2 	bl	8009448 <HAL_RCC_GetPCLK1Freq>
 8006264:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	4a81      	ldr	r2, [pc, #516]	@ (8006470 <HAL_I2C_Init+0x274>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d807      	bhi.n	8006280 <HAL_I2C_Init+0x84>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	4a80      	ldr	r2, [pc, #512]	@ (8006474 <HAL_I2C_Init+0x278>)
 8006274:	4293      	cmp	r3, r2
 8006276:	bf94      	ite	ls
 8006278:	2301      	movls	r3, #1
 800627a:	2300      	movhi	r3, #0
 800627c:	b2db      	uxtb	r3, r3
 800627e:	e006      	b.n	800628e <HAL_I2C_Init+0x92>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	4a7d      	ldr	r2, [pc, #500]	@ (8006478 <HAL_I2C_Init+0x27c>)
 8006284:	4293      	cmp	r3, r2
 8006286:	bf94      	ite	ls
 8006288:	2301      	movls	r3, #1
 800628a:	2300      	movhi	r3, #0
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e0e7      	b.n	8006466 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	4a78      	ldr	r2, [pc, #480]	@ (800647c <HAL_I2C_Init+0x280>)
 800629a:	fba2 2303 	umull	r2, r3, r2, r3
 800629e:	0c9b      	lsrs	r3, r3, #18
 80062a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	4a6a      	ldr	r2, [pc, #424]	@ (8006470 <HAL_I2C_Init+0x274>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d802      	bhi.n	80062d0 <HAL_I2C_Init+0xd4>
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	3301      	adds	r3, #1
 80062ce:	e009      	b.n	80062e4 <HAL_I2C_Init+0xe8>
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80062d6:	fb02 f303 	mul.w	r3, r2, r3
 80062da:	4a69      	ldr	r2, [pc, #420]	@ (8006480 <HAL_I2C_Init+0x284>)
 80062dc:	fba2 2303 	umull	r2, r3, r2, r3
 80062e0:	099b      	lsrs	r3, r3, #6
 80062e2:	3301      	adds	r3, #1
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	6812      	ldr	r2, [r2, #0]
 80062e8:	430b      	orrs	r3, r1
 80062ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80062f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	495c      	ldr	r1, [pc, #368]	@ (8006470 <HAL_I2C_Init+0x274>)
 8006300:	428b      	cmp	r3, r1
 8006302:	d819      	bhi.n	8006338 <HAL_I2C_Init+0x13c>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	1e59      	subs	r1, r3, #1
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	005b      	lsls	r3, r3, #1
 800630e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006312:	1c59      	adds	r1, r3, #1
 8006314:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006318:	400b      	ands	r3, r1
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00a      	beq.n	8006334 <HAL_I2C_Init+0x138>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	1e59      	subs	r1, r3, #1
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	005b      	lsls	r3, r3, #1
 8006328:	fbb1 f3f3 	udiv	r3, r1, r3
 800632c:	3301      	adds	r3, #1
 800632e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006332:	e051      	b.n	80063d8 <HAL_I2C_Init+0x1dc>
 8006334:	2304      	movs	r3, #4
 8006336:	e04f      	b.n	80063d8 <HAL_I2C_Init+0x1dc>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d111      	bne.n	8006364 <HAL_I2C_Init+0x168>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	1e58      	subs	r0, r3, #1
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6859      	ldr	r1, [r3, #4]
 8006348:	460b      	mov	r3, r1
 800634a:	005b      	lsls	r3, r3, #1
 800634c:	440b      	add	r3, r1
 800634e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006352:	3301      	adds	r3, #1
 8006354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006358:	2b00      	cmp	r3, #0
 800635a:	bf0c      	ite	eq
 800635c:	2301      	moveq	r3, #1
 800635e:	2300      	movne	r3, #0
 8006360:	b2db      	uxtb	r3, r3
 8006362:	e012      	b.n	800638a <HAL_I2C_Init+0x18e>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	1e58      	subs	r0, r3, #1
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6859      	ldr	r1, [r3, #4]
 800636c:	460b      	mov	r3, r1
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	440b      	add	r3, r1
 8006372:	0099      	lsls	r1, r3, #2
 8006374:	440b      	add	r3, r1
 8006376:	fbb0 f3f3 	udiv	r3, r0, r3
 800637a:	3301      	adds	r3, #1
 800637c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006380:	2b00      	cmp	r3, #0
 8006382:	bf0c      	ite	eq
 8006384:	2301      	moveq	r3, #1
 8006386:	2300      	movne	r3, #0
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <HAL_I2C_Init+0x196>
 800638e:	2301      	movs	r3, #1
 8006390:	e022      	b.n	80063d8 <HAL_I2C_Init+0x1dc>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d10e      	bne.n	80063b8 <HAL_I2C_Init+0x1bc>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	1e58      	subs	r0, r3, #1
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6859      	ldr	r1, [r3, #4]
 80063a2:	460b      	mov	r3, r1
 80063a4:	005b      	lsls	r3, r3, #1
 80063a6:	440b      	add	r3, r1
 80063a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80063ac:	3301      	adds	r3, #1
 80063ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063b6:	e00f      	b.n	80063d8 <HAL_I2C_Init+0x1dc>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	1e58      	subs	r0, r3, #1
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6859      	ldr	r1, [r3, #4]
 80063c0:	460b      	mov	r3, r1
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	440b      	add	r3, r1
 80063c6:	0099      	lsls	r1, r3, #2
 80063c8:	440b      	add	r3, r1
 80063ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80063ce:	3301      	adds	r3, #1
 80063d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80063d8:	6879      	ldr	r1, [r7, #4]
 80063da:	6809      	ldr	r1, [r1, #0]
 80063dc:	4313      	orrs	r3, r2
 80063de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	69da      	ldr	r2, [r3, #28]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a1b      	ldr	r3, [r3, #32]
 80063f2:	431a      	orrs	r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	430a      	orrs	r2, r1
 80063fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006406:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	6911      	ldr	r1, [r2, #16]
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	68d2      	ldr	r2, [r2, #12]
 8006412:	4311      	orrs	r1, r2
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	6812      	ldr	r2, [r2, #0]
 8006418:	430b      	orrs	r3, r1
 800641a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	695a      	ldr	r2, [r3, #20]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	431a      	orrs	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	430a      	orrs	r2, r1
 8006436:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 0201 	orr.w	r2, r2, #1
 8006446:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2220      	movs	r2, #32
 8006452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	000186a0 	.word	0x000186a0
 8006474:	001e847f 	.word	0x001e847f
 8006478:	003d08ff 	.word	0x003d08ff
 800647c:	431bde83 	.word	0x431bde83
 8006480:	10624dd3 	.word	0x10624dd3

08006484 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e021      	b.n	80064da <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2224      	movs	r2, #36	@ 0x24
 800649a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f022 0201 	bic.w	r2, r2, #1
 80064ac:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f7fd fa1e 	bl	80038f0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
	...

080064e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b088      	sub	sp, #32
 80064e8:	af02      	add	r7, sp, #8
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	607a      	str	r2, [r7, #4]
 80064ee:	461a      	mov	r2, r3
 80064f0:	460b      	mov	r3, r1
 80064f2:	817b      	strh	r3, [r7, #10]
 80064f4:	4613      	mov	r3, r2
 80064f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80064f8:	f7fd fe6a 	bl	80041d0 <HAL_GetTick>
 80064fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b20      	cmp	r3, #32
 8006508:	f040 80e0 	bne.w	80066cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	2319      	movs	r3, #25
 8006512:	2201      	movs	r2, #1
 8006514:	4970      	ldr	r1, [pc, #448]	@ (80066d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8006516:	68f8      	ldr	r0, [r7, #12]
 8006518:	f000 fd92 	bl	8007040 <I2C_WaitOnFlagUntilTimeout>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d001      	beq.n	8006526 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006522:	2302      	movs	r3, #2
 8006524:	e0d3      	b.n	80066ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800652c:	2b01      	cmp	r3, #1
 800652e:	d101      	bne.n	8006534 <HAL_I2C_Master_Transmit+0x50>
 8006530:	2302      	movs	r3, #2
 8006532:	e0cc      	b.n	80066ce <HAL_I2C_Master_Transmit+0x1ea>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b01      	cmp	r3, #1
 8006548:	d007      	beq.n	800655a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f042 0201 	orr.w	r2, r2, #1
 8006558:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006568:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2221      	movs	r2, #33	@ 0x21
 800656e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2210      	movs	r2, #16
 8006576:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	893a      	ldrh	r2, [r7, #8]
 800658a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006590:	b29a      	uxth	r2, r3
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	4a50      	ldr	r2, [pc, #320]	@ (80066dc <HAL_I2C_Master_Transmit+0x1f8>)
 800659a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800659c:	8979      	ldrh	r1, [r7, #10]
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	6a3a      	ldr	r2, [r7, #32]
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f000 fbfc 	bl	8006da0 <I2C_MasterRequestWrite>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e08d      	b.n	80066ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065b2:	2300      	movs	r3, #0
 80065b4:	613b      	str	r3, [r7, #16]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	695b      	ldr	r3, [r3, #20]
 80065bc:	613b      	str	r3, [r7, #16]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	613b      	str	r3, [r7, #16]
 80065c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80065c8:	e066      	b.n	8006698 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	6a39      	ldr	r1, [r7, #32]
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f000 fe50 	bl	8007274 <I2C_WaitOnTXEFlagUntilTimeout>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00d      	beq.n	80065f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065de:	2b04      	cmp	r3, #4
 80065e0:	d107      	bne.n	80065f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e06b      	b.n	80066ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065fa:	781a      	ldrb	r2, [r3, #0]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006606:	1c5a      	adds	r2, r3, #1
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006610:	b29b      	uxth	r3, r3
 8006612:	3b01      	subs	r3, #1
 8006614:	b29a      	uxth	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800661e:	3b01      	subs	r3, #1
 8006620:	b29a      	uxth	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	f003 0304 	and.w	r3, r3, #4
 8006630:	2b04      	cmp	r3, #4
 8006632:	d11b      	bne.n	800666c <HAL_I2C_Master_Transmit+0x188>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006638:	2b00      	cmp	r3, #0
 800663a:	d017      	beq.n	800666c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006640:	781a      	ldrb	r2, [r3, #0]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800664c:	1c5a      	adds	r2, r3, #1
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006656:	b29b      	uxth	r3, r3
 8006658:	3b01      	subs	r3, #1
 800665a:	b29a      	uxth	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006664:	3b01      	subs	r3, #1
 8006666:	b29a      	uxth	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	6a39      	ldr	r1, [r7, #32]
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 fe47 	bl	8007304 <I2C_WaitOnBTFFlagUntilTimeout>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00d      	beq.n	8006698 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006680:	2b04      	cmp	r3, #4
 8006682:	d107      	bne.n	8006694 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006692:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e01a      	b.n	80066ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800669c:	2b00      	cmp	r3, #0
 800669e:	d194      	bne.n	80065ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2220      	movs	r2, #32
 80066b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80066c8:	2300      	movs	r3, #0
 80066ca:	e000      	b.n	80066ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80066cc:	2302      	movs	r3, #2
  }
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3718      	adds	r7, #24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	00100002 	.word	0x00100002
 80066dc:	ffff0000 	.word	0xffff0000

080066e0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b08c      	sub	sp, #48	@ 0x30
 80066e4:	af02      	add	r7, sp, #8
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	607a      	str	r2, [r7, #4]
 80066ea:	461a      	mov	r2, r3
 80066ec:	460b      	mov	r3, r1
 80066ee:	817b      	strh	r3, [r7, #10]
 80066f0:	4613      	mov	r3, r2
 80066f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80066f4:	f7fd fd6c 	bl	80041d0 <HAL_GetTick>
 80066f8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2b20      	cmp	r3, #32
 8006704:	f040 8217 	bne.w	8006b36 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	2319      	movs	r3, #25
 800670e:	2201      	movs	r2, #1
 8006710:	497c      	ldr	r1, [pc, #496]	@ (8006904 <HAL_I2C_Master_Receive+0x224>)
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f000 fc94 	bl	8007040 <I2C_WaitOnFlagUntilTimeout>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d001      	beq.n	8006722 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800671e:	2302      	movs	r3, #2
 8006720:	e20a      	b.n	8006b38 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006728:	2b01      	cmp	r3, #1
 800672a:	d101      	bne.n	8006730 <HAL_I2C_Master_Receive+0x50>
 800672c:	2302      	movs	r3, #2
 800672e:	e203      	b.n	8006b38 <HAL_I2C_Master_Receive+0x458>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b01      	cmp	r3, #1
 8006744:	d007      	beq.n	8006756 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f042 0201 	orr.w	r2, r2, #1
 8006754:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006764:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2222      	movs	r2, #34	@ 0x22
 800676a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2210      	movs	r2, #16
 8006772:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	893a      	ldrh	r2, [r7, #8]
 8006786:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800678c:	b29a      	uxth	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	4a5c      	ldr	r2, [pc, #368]	@ (8006908 <HAL_I2C_Master_Receive+0x228>)
 8006796:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006798:	8979      	ldrh	r1, [r7, #10]
 800679a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f000 fb80 	bl	8006ea4 <I2C_MasterRequestRead>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e1c4      	b.n	8006b38 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d113      	bne.n	80067de <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067b6:	2300      	movs	r3, #0
 80067b8:	623b      	str	r3, [r7, #32]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	695b      	ldr	r3, [r3, #20]
 80067c0:	623b      	str	r3, [r7, #32]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	623b      	str	r3, [r7, #32]
 80067ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067da:	601a      	str	r2, [r3, #0]
 80067dc:	e198      	b.n	8006b10 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d11b      	bne.n	800681e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067f6:	2300      	movs	r3, #0
 80067f8:	61fb      	str	r3, [r7, #28]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	61fb      	str	r3, [r7, #28]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	699b      	ldr	r3, [r3, #24]
 8006808:	61fb      	str	r3, [r7, #28]
 800680a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800681a:	601a      	str	r2, [r3, #0]
 800681c:	e178      	b.n	8006b10 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006822:	2b02      	cmp	r3, #2
 8006824:	d11b      	bne.n	800685e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006834:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006844:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006846:	2300      	movs	r3, #0
 8006848:	61bb      	str	r3, [r7, #24]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	695b      	ldr	r3, [r3, #20]
 8006850:	61bb      	str	r3, [r7, #24]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	61bb      	str	r3, [r7, #24]
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	e158      	b.n	8006b10 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800686c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800686e:	2300      	movs	r3, #0
 8006870:	617b      	str	r3, [r7, #20]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	695b      	ldr	r3, [r3, #20]
 8006878:	617b      	str	r3, [r7, #20]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	617b      	str	r3, [r7, #20]
 8006882:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006884:	e144      	b.n	8006b10 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800688a:	2b03      	cmp	r3, #3
 800688c:	f200 80f1 	bhi.w	8006a72 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006894:	2b01      	cmp	r3, #1
 8006896:	d123      	bne.n	80068e0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006898:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800689a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f000 fd79 	bl	8007394 <I2C_WaitOnRXNEFlagUntilTimeout>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e145      	b.n	8006b38 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	691a      	ldr	r2, [r3, #16]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b6:	b2d2      	uxtb	r2, r2
 80068b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068be:	1c5a      	adds	r2, r3, #1
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068c8:	3b01      	subs	r3, #1
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	3b01      	subs	r3, #1
 80068d8:	b29a      	uxth	r2, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80068de:	e117      	b.n	8006b10 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d14e      	bne.n	8006986 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ea:	9300      	str	r3, [sp, #0]
 80068ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ee:	2200      	movs	r2, #0
 80068f0:	4906      	ldr	r1, [pc, #24]	@ (800690c <HAL_I2C_Master_Receive+0x22c>)
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f000 fba4 	bl	8007040 <I2C_WaitOnFlagUntilTimeout>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d008      	beq.n	8006910 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e11a      	b.n	8006b38 <HAL_I2C_Master_Receive+0x458>
 8006902:	bf00      	nop
 8006904:	00100002 	.word	0x00100002
 8006908:	ffff0000 	.word	0xffff0000
 800690c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800691e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	691a      	ldr	r2, [r3, #16]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800692a:	b2d2      	uxtb	r2, r2
 800692c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006932:	1c5a      	adds	r2, r3, #1
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800693c:	3b01      	subs	r3, #1
 800693e:	b29a      	uxth	r2, r3
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006948:	b29b      	uxth	r3, r3
 800694a:	3b01      	subs	r3, #1
 800694c:	b29a      	uxth	r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	691a      	ldr	r2, [r3, #16]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800695c:	b2d2      	uxtb	r2, r2
 800695e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006964:	1c5a      	adds	r2, r3, #1
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800696e:	3b01      	subs	r3, #1
 8006970:	b29a      	uxth	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800697a:	b29b      	uxth	r3, r3
 800697c:	3b01      	subs	r3, #1
 800697e:	b29a      	uxth	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006984:	e0c4      	b.n	8006b10 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698c:	2200      	movs	r2, #0
 800698e:	496c      	ldr	r1, [pc, #432]	@ (8006b40 <HAL_I2C_Master_Receive+0x460>)
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f000 fb55 	bl	8007040 <I2C_WaitOnFlagUntilTimeout>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d001      	beq.n	80069a0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e0cb      	b.n	8006b38 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	691a      	ldr	r2, [r3, #16]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ba:	b2d2      	uxtb	r2, r2
 80069bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c2:	1c5a      	adds	r2, r3, #1
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069cc:	3b01      	subs	r3, #1
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069d8:	b29b      	uxth	r3, r3
 80069da:	3b01      	subs	r3, #1
 80069dc:	b29a      	uxth	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80069e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e8:	2200      	movs	r2, #0
 80069ea:	4955      	ldr	r1, [pc, #340]	@ (8006b40 <HAL_I2C_Master_Receive+0x460>)
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f000 fb27 	bl	8007040 <I2C_WaitOnFlagUntilTimeout>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d001      	beq.n	80069fc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e09d      	b.n	8006b38 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	691a      	ldr	r2, [r3, #16]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a16:	b2d2      	uxtb	r2, r2
 8006a18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a1e:	1c5a      	adds	r2, r3, #1
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	3b01      	subs	r3, #1
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	691a      	ldr	r2, [r3, #16]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a48:	b2d2      	uxtb	r2, r2
 8006a4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a50:	1c5a      	adds	r2, r3, #1
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006a70:	e04e      	b.n	8006b10 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a74:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f000 fc8c 	bl	8007394 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d001      	beq.n	8006a86 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e058      	b.n	8006b38 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	691a      	ldr	r2, [r3, #16]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a90:	b2d2      	uxtb	r2, r2
 8006a92:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a98:	1c5a      	adds	r2, r3, #1
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	f003 0304 	and.w	r3, r3, #4
 8006ac2:	2b04      	cmp	r3, #4
 8006ac4:	d124      	bne.n	8006b10 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006aca:	2b03      	cmp	r3, #3
 8006acc:	d107      	bne.n	8006ade <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006adc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	691a      	ldr	r2, [r3, #16]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae8:	b2d2      	uxtb	r2, r2
 8006aea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af0:	1c5a      	adds	r2, r3, #1
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006afa:	3b01      	subs	r3, #1
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f47f aeb6 	bne.w	8006886 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2220      	movs	r2, #32
 8006b1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	e000      	b.n	8006b38 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006b36:	2302      	movs	r3, #2
  }
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3728      	adds	r7, #40	@ 0x28
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	00010004 	.word	0x00010004

08006b44 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b08a      	sub	sp, #40	@ 0x28
 8006b48:	af02      	add	r7, sp, #8
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	607a      	str	r2, [r7, #4]
 8006b4e:	603b      	str	r3, [r7, #0]
 8006b50:	460b      	mov	r3, r1
 8006b52:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006b54:	f7fd fb3c 	bl	80041d0 <HAL_GetTick>
 8006b58:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b20      	cmp	r3, #32
 8006b68:	f040 8111 	bne.w	8006d8e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	2319      	movs	r3, #25
 8006b72:	2201      	movs	r2, #1
 8006b74:	4988      	ldr	r1, [pc, #544]	@ (8006d98 <HAL_I2C_IsDeviceReady+0x254>)
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f000 fa62 	bl	8007040 <I2C_WaitOnFlagUntilTimeout>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d001      	beq.n	8006b86 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006b82:	2302      	movs	r3, #2
 8006b84:	e104      	b.n	8006d90 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d101      	bne.n	8006b94 <HAL_I2C_IsDeviceReady+0x50>
 8006b90:	2302      	movs	r3, #2
 8006b92:	e0fd      	b.n	8006d90 <HAL_I2C_IsDeviceReady+0x24c>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d007      	beq.n	8006bba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f042 0201 	orr.w	r2, r2, #1
 8006bb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006bc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2224      	movs	r2, #36	@ 0x24
 8006bce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	4a70      	ldr	r2, [pc, #448]	@ (8006d9c <HAL_I2C_IsDeviceReady+0x258>)
 8006bdc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006bec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	9300      	str	r3, [sp, #0]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f000 fa20 	bl	8007040 <I2C_WaitOnFlagUntilTimeout>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00d      	beq.n	8006c22 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c14:	d103      	bne.n	8006c1e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c1c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e0b6      	b.n	8006d90 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c22:	897b      	ldrh	r3, [r7, #10]
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	461a      	mov	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006c30:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006c32:	f7fd facd 	bl	80041d0 <HAL_GetTick>
 8006c36:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	f003 0302 	and.w	r3, r3, #2
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	bf0c      	ite	eq
 8006c46:	2301      	moveq	r3, #1
 8006c48:	2300      	movne	r3, #0
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	695b      	ldr	r3, [r3, #20]
 8006c54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c5c:	bf0c      	ite	eq
 8006c5e:	2301      	moveq	r3, #1
 8006c60:	2300      	movne	r3, #0
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006c66:	e025      	b.n	8006cb4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006c68:	f7fd fab2 	bl	80041d0 <HAL_GetTick>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	683a      	ldr	r2, [r7, #0]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d302      	bcc.n	8006c7e <HAL_I2C_IsDeviceReady+0x13a>
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d103      	bne.n	8006c86 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	22a0      	movs	r2, #160	@ 0xa0
 8006c82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	695b      	ldr	r3, [r3, #20]
 8006c8c:	f003 0302 	and.w	r3, r3, #2
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	bf0c      	ite	eq
 8006c94:	2301      	moveq	r3, #1
 8006c96:	2300      	movne	r3, #0
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ca6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006caa:	bf0c      	ite	eq
 8006cac:	2301      	moveq	r3, #1
 8006cae:	2300      	movne	r3, #0
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	2ba0      	cmp	r3, #160	@ 0xa0
 8006cbe:	d005      	beq.n	8006ccc <HAL_I2C_IsDeviceReady+0x188>
 8006cc0:	7dfb      	ldrb	r3, [r7, #23]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d102      	bne.n	8006ccc <HAL_I2C_IsDeviceReady+0x188>
 8006cc6:	7dbb      	ldrb	r3, [r7, #22]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d0cd      	beq.n	8006c68 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2220      	movs	r2, #32
 8006cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	f003 0302 	and.w	r3, r3, #2
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d129      	bne.n	8006d36 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cf0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	613b      	str	r3, [r7, #16]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	613b      	str	r3, [r7, #16]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	613b      	str	r3, [r7, #16]
 8006d06:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	2319      	movs	r3, #25
 8006d0e:	2201      	movs	r2, #1
 8006d10:	4921      	ldr	r1, [pc, #132]	@ (8006d98 <HAL_I2C_IsDeviceReady+0x254>)
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f000 f994 	bl	8007040 <I2C_WaitOnFlagUntilTimeout>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d001      	beq.n	8006d22 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e036      	b.n	8006d90 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2220      	movs	r2, #32
 8006d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8006d32:	2300      	movs	r3, #0
 8006d34:	e02c      	b.n	8006d90 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d44:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006d4e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	9300      	str	r3, [sp, #0]
 8006d54:	2319      	movs	r3, #25
 8006d56:	2201      	movs	r2, #1
 8006d58:	490f      	ldr	r1, [pc, #60]	@ (8006d98 <HAL_I2C_IsDeviceReady+0x254>)
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f000 f970 	bl	8007040 <I2C_WaitOnFlagUntilTimeout>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d001      	beq.n	8006d6a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e012      	b.n	8006d90 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006d70:	69ba      	ldr	r2, [r7, #24]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	f4ff af32 	bcc.w	8006bde <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2220      	movs	r2, #32
 8006d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e000      	b.n	8006d90 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006d8e:	2302      	movs	r3, #2
  }
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3720      	adds	r7, #32
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	00100002 	.word	0x00100002
 8006d9c:	ffff0000 	.word	0xffff0000

08006da0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b088      	sub	sp, #32
 8006da4:	af02      	add	r7, sp, #8
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	607a      	str	r2, [r7, #4]
 8006daa:	603b      	str	r3, [r7, #0]
 8006dac:	460b      	mov	r3, r1
 8006dae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	2b08      	cmp	r3, #8
 8006dba:	d006      	beq.n	8006dca <I2C_MasterRequestWrite+0x2a>
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d003      	beq.n	8006dca <I2C_MasterRequestWrite+0x2a>
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006dc8:	d108      	bne.n	8006ddc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006dd8:	601a      	str	r2, [r3, #0]
 8006dda:	e00b      	b.n	8006df4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006de0:	2b12      	cmp	r3, #18
 8006de2:	d107      	bne.n	8006df4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006df2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	9300      	str	r3, [sp, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f000 f91d 	bl	8007040 <I2C_WaitOnFlagUntilTimeout>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00d      	beq.n	8006e28 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e1a:	d103      	bne.n	8006e24 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e22:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e035      	b.n	8006e94 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e30:	d108      	bne.n	8006e44 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006e32:	897b      	ldrh	r3, [r7, #10]
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	461a      	mov	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006e40:	611a      	str	r2, [r3, #16]
 8006e42:	e01b      	b.n	8006e7c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006e44:	897b      	ldrh	r3, [r7, #10]
 8006e46:	11db      	asrs	r3, r3, #7
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	f003 0306 	and.w	r3, r3, #6
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	f063 030f 	orn	r3, r3, #15
 8006e54:	b2da      	uxtb	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	490e      	ldr	r1, [pc, #56]	@ (8006e9c <I2C_MasterRequestWrite+0xfc>)
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f000 f966 	bl	8007134 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d001      	beq.n	8006e72 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e010      	b.n	8006e94 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006e72:	897b      	ldrh	r3, [r7, #10]
 8006e74:	b2da      	uxtb	r2, r3
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	4907      	ldr	r1, [pc, #28]	@ (8006ea0 <I2C_MasterRequestWrite+0x100>)
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f000 f956 	bl	8007134 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d001      	beq.n	8006e92 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e000      	b.n	8006e94 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3718      	adds	r7, #24
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	00010008 	.word	0x00010008
 8006ea0:	00010002 	.word	0x00010002

08006ea4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b088      	sub	sp, #32
 8006ea8:	af02      	add	r7, sp, #8
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	607a      	str	r2, [r7, #4]
 8006eae:	603b      	str	r3, [r7, #0]
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006ec8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	2b08      	cmp	r3, #8
 8006ece:	d006      	beq.n	8006ede <I2C_MasterRequestRead+0x3a>
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d003      	beq.n	8006ede <I2C_MasterRequestRead+0x3a>
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006edc:	d108      	bne.n	8006ef0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006eec:	601a      	str	r2, [r3, #0]
 8006eee:	e00b      	b.n	8006f08 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ef4:	2b11      	cmp	r3, #17
 8006ef6:	d107      	bne.n	8006f08 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	9300      	str	r3, [sp, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f000 f893 	bl	8007040 <I2C_WaitOnFlagUntilTimeout>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00d      	beq.n	8006f3c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f2e:	d103      	bne.n	8006f38 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f36:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e079      	b.n	8007030 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f44:	d108      	bne.n	8006f58 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006f46:	897b      	ldrh	r3, [r7, #10]
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	f043 0301 	orr.w	r3, r3, #1
 8006f4e:	b2da      	uxtb	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	611a      	str	r2, [r3, #16]
 8006f56:	e05f      	b.n	8007018 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006f58:	897b      	ldrh	r3, [r7, #10]
 8006f5a:	11db      	asrs	r3, r3, #7
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	f003 0306 	and.w	r3, r3, #6
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	f063 030f 	orn	r3, r3, #15
 8006f68:	b2da      	uxtb	r2, r3
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	4930      	ldr	r1, [pc, #192]	@ (8007038 <I2C_MasterRequestRead+0x194>)
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f000 f8dc 	bl	8007134 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e054      	b.n	8007030 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006f86:	897b      	ldrh	r3, [r7, #10]
 8006f88:	b2da      	uxtb	r2, r3
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	4929      	ldr	r1, [pc, #164]	@ (800703c <I2C_MasterRequestRead+0x198>)
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f000 f8cc 	bl	8007134 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d001      	beq.n	8006fa6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e044      	b.n	8007030 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	613b      	str	r3, [r7, #16]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	695b      	ldr	r3, [r3, #20]
 8006fb0:	613b      	str	r3, [r7, #16]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	699b      	ldr	r3, [r3, #24]
 8006fb8:	613b      	str	r3, [r7, #16]
 8006fba:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006fca:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	9300      	str	r3, [sp, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f000 f831 	bl	8007040 <I2C_WaitOnFlagUntilTimeout>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00d      	beq.n	8007000 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ff2:	d103      	bne.n	8006ffc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ffa:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e017      	b.n	8007030 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007000:	897b      	ldrh	r3, [r7, #10]
 8007002:	11db      	asrs	r3, r3, #7
 8007004:	b2db      	uxtb	r3, r3
 8007006:	f003 0306 	and.w	r3, r3, #6
 800700a:	b2db      	uxtb	r3, r3
 800700c:	f063 030e 	orn	r3, r3, #14
 8007010:	b2da      	uxtb	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	4907      	ldr	r1, [pc, #28]	@ (800703c <I2C_MasterRequestRead+0x198>)
 800701e:	68f8      	ldr	r0, [r7, #12]
 8007020:	f000 f888 	bl	8007134 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d001      	beq.n	800702e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e000      	b.n	8007030 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3718      	adds	r7, #24
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	00010008 	.word	0x00010008
 800703c:	00010002 	.word	0x00010002

08007040 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	603b      	str	r3, [r7, #0]
 800704c:	4613      	mov	r3, r2
 800704e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007050:	e048      	b.n	80070e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007058:	d044      	beq.n	80070e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800705a:	f7fd f8b9 	bl	80041d0 <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	683a      	ldr	r2, [r7, #0]
 8007066:	429a      	cmp	r2, r3
 8007068:	d302      	bcc.n	8007070 <I2C_WaitOnFlagUntilTimeout+0x30>
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d139      	bne.n	80070e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	0c1b      	lsrs	r3, r3, #16
 8007074:	b2db      	uxtb	r3, r3
 8007076:	2b01      	cmp	r3, #1
 8007078:	d10d      	bne.n	8007096 <I2C_WaitOnFlagUntilTimeout+0x56>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	695b      	ldr	r3, [r3, #20]
 8007080:	43da      	mvns	r2, r3
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	4013      	ands	r3, r2
 8007086:	b29b      	uxth	r3, r3
 8007088:	2b00      	cmp	r3, #0
 800708a:	bf0c      	ite	eq
 800708c:	2301      	moveq	r3, #1
 800708e:	2300      	movne	r3, #0
 8007090:	b2db      	uxtb	r3, r3
 8007092:	461a      	mov	r2, r3
 8007094:	e00c      	b.n	80070b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	43da      	mvns	r2, r3
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	4013      	ands	r3, r2
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	bf0c      	ite	eq
 80070a8:	2301      	moveq	r3, #1
 80070aa:	2300      	movne	r3, #0
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	461a      	mov	r2, r3
 80070b0:	79fb      	ldrb	r3, [r7, #7]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d116      	bne.n	80070e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2220      	movs	r2, #32
 80070c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d0:	f043 0220 	orr.w	r2, r3, #32
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e023      	b.n	800712c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	0c1b      	lsrs	r3, r3, #16
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d10d      	bne.n	800710a <I2C_WaitOnFlagUntilTimeout+0xca>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	695b      	ldr	r3, [r3, #20]
 80070f4:	43da      	mvns	r2, r3
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	4013      	ands	r3, r2
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	bf0c      	ite	eq
 8007100:	2301      	moveq	r3, #1
 8007102:	2300      	movne	r3, #0
 8007104:	b2db      	uxtb	r3, r3
 8007106:	461a      	mov	r2, r3
 8007108:	e00c      	b.n	8007124 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	699b      	ldr	r3, [r3, #24]
 8007110:	43da      	mvns	r2, r3
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	4013      	ands	r3, r2
 8007116:	b29b      	uxth	r3, r3
 8007118:	2b00      	cmp	r3, #0
 800711a:	bf0c      	ite	eq
 800711c:	2301      	moveq	r3, #1
 800711e:	2300      	movne	r3, #0
 8007120:	b2db      	uxtb	r3, r3
 8007122:	461a      	mov	r2, r3
 8007124:	79fb      	ldrb	r3, [r7, #7]
 8007126:	429a      	cmp	r2, r3
 8007128:	d093      	beq.n	8007052 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]
 8007140:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007142:	e071      	b.n	8007228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800714e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007152:	d123      	bne.n	800719c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007162:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800716c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2220      	movs	r2, #32
 8007178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007188:	f043 0204 	orr.w	r2, r3, #4
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e067      	b.n	800726c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a2:	d041      	beq.n	8007228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071a4:	f7fd f814 	bl	80041d0 <HAL_GetTick>
 80071a8:	4602      	mov	r2, r0
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	1ad3      	subs	r3, r2, r3
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d302      	bcc.n	80071ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d136      	bne.n	8007228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	0c1b      	lsrs	r3, r3, #16
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d10c      	bne.n	80071de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	43da      	mvns	r2, r3
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	4013      	ands	r3, r2
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	bf14      	ite	ne
 80071d6:	2301      	movne	r3, #1
 80071d8:	2300      	moveq	r3, #0
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	e00b      	b.n	80071f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	43da      	mvns	r2, r3
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	4013      	ands	r3, r2
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	bf14      	ite	ne
 80071f0:	2301      	movne	r3, #1
 80071f2:	2300      	moveq	r3, #0
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d016      	beq.n	8007228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2220      	movs	r2, #32
 8007204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007214:	f043 0220 	orr.w	r2, r3, #32
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	e021      	b.n	800726c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	0c1b      	lsrs	r3, r3, #16
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2b01      	cmp	r3, #1
 8007230:	d10c      	bne.n	800724c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	695b      	ldr	r3, [r3, #20]
 8007238:	43da      	mvns	r2, r3
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	4013      	ands	r3, r2
 800723e:	b29b      	uxth	r3, r3
 8007240:	2b00      	cmp	r3, #0
 8007242:	bf14      	ite	ne
 8007244:	2301      	movne	r3, #1
 8007246:	2300      	moveq	r3, #0
 8007248:	b2db      	uxtb	r3, r3
 800724a:	e00b      	b.n	8007264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	43da      	mvns	r2, r3
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	4013      	ands	r3, r2
 8007258:	b29b      	uxth	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	bf14      	ite	ne
 800725e:	2301      	movne	r3, #1
 8007260:	2300      	moveq	r3, #0
 8007262:	b2db      	uxtb	r3, r3
 8007264:	2b00      	cmp	r3, #0
 8007266:	f47f af6d 	bne.w	8007144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007280:	e034      	b.n	80072ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	f000 f8e3 	bl	800744e <I2C_IsAcknowledgeFailed>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d001      	beq.n	8007292 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e034      	b.n	80072fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007298:	d028      	beq.n	80072ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800729a:	f7fc ff99 	bl	80041d0 <HAL_GetTick>
 800729e:	4602      	mov	r2, r0
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d302      	bcc.n	80072b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d11d      	bne.n	80072ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	695b      	ldr	r3, [r3, #20]
 80072b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072ba:	2b80      	cmp	r3, #128	@ 0x80
 80072bc:	d016      	beq.n	80072ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2220      	movs	r2, #32
 80072c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d8:	f043 0220 	orr.w	r2, r3, #32
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e007      	b.n	80072fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	695b      	ldr	r3, [r3, #20]
 80072f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072f6:	2b80      	cmp	r3, #128	@ 0x80
 80072f8:	d1c3      	bne.n	8007282 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007310:	e034      	b.n	800737c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f000 f89b 	bl	800744e <I2C_IsAcknowledgeFailed>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d001      	beq.n	8007322 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e034      	b.n	800738c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007328:	d028      	beq.n	800737c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800732a:	f7fc ff51 	bl	80041d0 <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	429a      	cmp	r2, r3
 8007338:	d302      	bcc.n	8007340 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d11d      	bne.n	800737c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	695b      	ldr	r3, [r3, #20]
 8007346:	f003 0304 	and.w	r3, r3, #4
 800734a:	2b04      	cmp	r3, #4
 800734c:	d016      	beq.n	800737c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2220      	movs	r2, #32
 8007358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007368:	f043 0220 	orr.w	r2, r3, #32
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e007      	b.n	800738c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	f003 0304 	and.w	r3, r3, #4
 8007386:	2b04      	cmp	r3, #4
 8007388:	d1c3      	bne.n	8007312 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80073a0:	e049      	b.n	8007436 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	695b      	ldr	r3, [r3, #20]
 80073a8:	f003 0310 	and.w	r3, r3, #16
 80073ac:	2b10      	cmp	r3, #16
 80073ae:	d119      	bne.n	80073e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f06f 0210 	mvn.w	r2, #16
 80073b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2220      	movs	r2, #32
 80073c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	e030      	b.n	8007446 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073e4:	f7fc fef4 	bl	80041d0 <HAL_GetTick>
 80073e8:	4602      	mov	r2, r0
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	1ad3      	subs	r3, r2, r3
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d302      	bcc.n	80073fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d11d      	bne.n	8007436 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	695b      	ldr	r3, [r3, #20]
 8007400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007404:	2b40      	cmp	r3, #64	@ 0x40
 8007406:	d016      	beq.n	8007436 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2200      	movs	r2, #0
 800740c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2220      	movs	r2, #32
 8007412:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007422:	f043 0220 	orr.w	r2, r3, #32
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e007      	b.n	8007446 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	695b      	ldr	r3, [r3, #20]
 800743c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007440:	2b40      	cmp	r3, #64	@ 0x40
 8007442:	d1ae      	bne.n	80073a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800744e:	b480      	push	{r7}
 8007450:	b083      	sub	sp, #12
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	695b      	ldr	r3, [r3, #20]
 800745c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007460:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007464:	d11b      	bne.n	800749e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800746e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2220      	movs	r2, #32
 800747a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800748a:	f043 0204 	orr.w	r2, r3, #4
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e000      	b.n	80074a0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d101      	bne.n	80074be <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e034      	b.n	8007528 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80074c6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f245 5255 	movw	r2, #21845	@ 0x5555
 80074d0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	6852      	ldr	r2, [r2, #4]
 80074da:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	6892      	ldr	r2, [r2, #8]
 80074e4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80074e6:	f7fc fe73 	bl	80041d0 <HAL_GetTick>
 80074ea:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80074ec:	e00f      	b.n	800750e <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80074ee:	f7fc fe6f 	bl	80041d0 <HAL_GetTick>
 80074f2:	4602      	mov	r2, r0
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	2b31      	cmp	r3, #49	@ 0x31
 80074fa:	d908      	bls.n	800750e <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	f003 0303 	and.w	r3, r3, #3
 8007506:	2b00      	cmp	r3, #0
 8007508:	d001      	beq.n	800750e <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e00c      	b.n	8007528 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	f003 0303 	and.w	r3, r3, #3
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1e8      	bne.n	80074ee <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8007524:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8007540:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b086      	sub	sp, #24
 8007554:	af02      	add	r7, sp, #8
 8007556:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d101      	bne.n	8007562 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e101      	b.n	8007766 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800756e:	b2db      	uxtb	r3, r3
 8007570:	2b00      	cmp	r3, #0
 8007572:	d106      	bne.n	8007582 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f015 fe2d 	bl	801d1dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2203      	movs	r2, #3
 8007586:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007590:	d102      	bne.n	8007598 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4618      	mov	r0, r3
 800759e:	f006 fd4e 	bl	800e03e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6818      	ldr	r0, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	7c1a      	ldrb	r2, [r3, #16]
 80075aa:	f88d 2000 	strb.w	r2, [sp]
 80075ae:	3304      	adds	r3, #4
 80075b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80075b2:	f006 fc2d 	bl	800de10 <USB_CoreInit>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d005      	beq.n	80075c8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2202      	movs	r2, #2
 80075c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e0ce      	b.n	8007766 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2100      	movs	r1, #0
 80075ce:	4618      	mov	r0, r3
 80075d0:	f006 fd46 	bl	800e060 <USB_SetCurrentMode>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d005      	beq.n	80075e6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2202      	movs	r2, #2
 80075de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e0bf      	b.n	8007766 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075e6:	2300      	movs	r3, #0
 80075e8:	73fb      	strb	r3, [r7, #15]
 80075ea:	e04a      	b.n	8007682 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80075ec:	7bfa      	ldrb	r2, [r7, #15]
 80075ee:	6879      	ldr	r1, [r7, #4]
 80075f0:	4613      	mov	r3, r2
 80075f2:	00db      	lsls	r3, r3, #3
 80075f4:	4413      	add	r3, r2
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	440b      	add	r3, r1
 80075fa:	3315      	adds	r3, #21
 80075fc:	2201      	movs	r2, #1
 80075fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007600:	7bfa      	ldrb	r2, [r7, #15]
 8007602:	6879      	ldr	r1, [r7, #4]
 8007604:	4613      	mov	r3, r2
 8007606:	00db      	lsls	r3, r3, #3
 8007608:	4413      	add	r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	440b      	add	r3, r1
 800760e:	3314      	adds	r3, #20
 8007610:	7bfa      	ldrb	r2, [r7, #15]
 8007612:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007614:	7bfa      	ldrb	r2, [r7, #15]
 8007616:	7bfb      	ldrb	r3, [r7, #15]
 8007618:	b298      	uxth	r0, r3
 800761a:	6879      	ldr	r1, [r7, #4]
 800761c:	4613      	mov	r3, r2
 800761e:	00db      	lsls	r3, r3, #3
 8007620:	4413      	add	r3, r2
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	440b      	add	r3, r1
 8007626:	332e      	adds	r3, #46	@ 0x2e
 8007628:	4602      	mov	r2, r0
 800762a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800762c:	7bfa      	ldrb	r2, [r7, #15]
 800762e:	6879      	ldr	r1, [r7, #4]
 8007630:	4613      	mov	r3, r2
 8007632:	00db      	lsls	r3, r3, #3
 8007634:	4413      	add	r3, r2
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	440b      	add	r3, r1
 800763a:	3318      	adds	r3, #24
 800763c:	2200      	movs	r2, #0
 800763e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007640:	7bfa      	ldrb	r2, [r7, #15]
 8007642:	6879      	ldr	r1, [r7, #4]
 8007644:	4613      	mov	r3, r2
 8007646:	00db      	lsls	r3, r3, #3
 8007648:	4413      	add	r3, r2
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	440b      	add	r3, r1
 800764e:	331c      	adds	r3, #28
 8007650:	2200      	movs	r2, #0
 8007652:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007654:	7bfa      	ldrb	r2, [r7, #15]
 8007656:	6879      	ldr	r1, [r7, #4]
 8007658:	4613      	mov	r3, r2
 800765a:	00db      	lsls	r3, r3, #3
 800765c:	4413      	add	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	440b      	add	r3, r1
 8007662:	3320      	adds	r3, #32
 8007664:	2200      	movs	r2, #0
 8007666:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007668:	7bfa      	ldrb	r2, [r7, #15]
 800766a:	6879      	ldr	r1, [r7, #4]
 800766c:	4613      	mov	r3, r2
 800766e:	00db      	lsls	r3, r3, #3
 8007670:	4413      	add	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	440b      	add	r3, r1
 8007676:	3324      	adds	r3, #36	@ 0x24
 8007678:	2200      	movs	r2, #0
 800767a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800767c:	7bfb      	ldrb	r3, [r7, #15]
 800767e:	3301      	adds	r3, #1
 8007680:	73fb      	strb	r3, [r7, #15]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	791b      	ldrb	r3, [r3, #4]
 8007686:	7bfa      	ldrb	r2, [r7, #15]
 8007688:	429a      	cmp	r2, r3
 800768a:	d3af      	bcc.n	80075ec <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800768c:	2300      	movs	r3, #0
 800768e:	73fb      	strb	r3, [r7, #15]
 8007690:	e044      	b.n	800771c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007692:	7bfa      	ldrb	r2, [r7, #15]
 8007694:	6879      	ldr	r1, [r7, #4]
 8007696:	4613      	mov	r3, r2
 8007698:	00db      	lsls	r3, r3, #3
 800769a:	4413      	add	r3, r2
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	440b      	add	r3, r1
 80076a0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80076a4:	2200      	movs	r2, #0
 80076a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80076a8:	7bfa      	ldrb	r2, [r7, #15]
 80076aa:	6879      	ldr	r1, [r7, #4]
 80076ac:	4613      	mov	r3, r2
 80076ae:	00db      	lsls	r3, r3, #3
 80076b0:	4413      	add	r3, r2
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	440b      	add	r3, r1
 80076b6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80076ba:	7bfa      	ldrb	r2, [r7, #15]
 80076bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80076be:	7bfa      	ldrb	r2, [r7, #15]
 80076c0:	6879      	ldr	r1, [r7, #4]
 80076c2:	4613      	mov	r3, r2
 80076c4:	00db      	lsls	r3, r3, #3
 80076c6:	4413      	add	r3, r2
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	440b      	add	r3, r1
 80076cc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80076d0:	2200      	movs	r2, #0
 80076d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80076d4:	7bfa      	ldrb	r2, [r7, #15]
 80076d6:	6879      	ldr	r1, [r7, #4]
 80076d8:	4613      	mov	r3, r2
 80076da:	00db      	lsls	r3, r3, #3
 80076dc:	4413      	add	r3, r2
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	440b      	add	r3, r1
 80076e2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80076e6:	2200      	movs	r2, #0
 80076e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80076ea:	7bfa      	ldrb	r2, [r7, #15]
 80076ec:	6879      	ldr	r1, [r7, #4]
 80076ee:	4613      	mov	r3, r2
 80076f0:	00db      	lsls	r3, r3, #3
 80076f2:	4413      	add	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	440b      	add	r3, r1
 80076f8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80076fc:	2200      	movs	r2, #0
 80076fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007700:	7bfa      	ldrb	r2, [r7, #15]
 8007702:	6879      	ldr	r1, [r7, #4]
 8007704:	4613      	mov	r3, r2
 8007706:	00db      	lsls	r3, r3, #3
 8007708:	4413      	add	r3, r2
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	440b      	add	r3, r1
 800770e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007712:	2200      	movs	r2, #0
 8007714:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007716:	7bfb      	ldrb	r3, [r7, #15]
 8007718:	3301      	adds	r3, #1
 800771a:	73fb      	strb	r3, [r7, #15]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	791b      	ldrb	r3, [r3, #4]
 8007720:	7bfa      	ldrb	r2, [r7, #15]
 8007722:	429a      	cmp	r2, r3
 8007724:	d3b5      	bcc.n	8007692 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6818      	ldr	r0, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	7c1a      	ldrb	r2, [r3, #16]
 800772e:	f88d 2000 	strb.w	r2, [sp]
 8007732:	3304      	adds	r3, #4
 8007734:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007736:	f006 fcdf 	bl	800e0f8 <USB_DevInit>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d005      	beq.n	800774c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2202      	movs	r2, #2
 8007744:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	e00c      	b.n	8007766 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2201      	movs	r2, #1
 8007756:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4618      	mov	r0, r3
 8007760:	f007 fd72 	bl	800f248 <USB_DevDisconnect>

  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b082      	sub	sp, #8
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d101      	bne.n	8007780 <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	e015      	b.n	80077ac <HAL_PCD_DeInit+0x3e>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2203      	movs	r2, #3
 8007784:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Stop Device */
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4618      	mov	r0, r3
 800778e:	f007 fcc5 	bl	800f11c <USB_StopDevice>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d001      	beq.n	800779c <HAL_PCD_DeInit+0x2e>
  {
    return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e007      	b.n	80077ac <HAL_PCD_DeInit+0x3e>

  /* DeInit the low level hardware */
  hpcd->MspDeInitCallback(hpcd);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_PCD_MspDeInit(hpcd);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f015 fd71 	bl	801d284 <HAL_PCD_MspDeInit>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  return HAL_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3708      	adds	r7, #8
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d101      	bne.n	80077d0 <HAL_PCD_Start+0x1c>
 80077cc:	2302      	movs	r3, #2
 80077ce:	e022      	b.n	8007816 <HAL_PCD_Start+0x62>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d009      	beq.n	80077f8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d105      	bne.n	80077f8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077f0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4618      	mov	r0, r3
 80077fe:	f006 fc0d 	bl	800e01c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4618      	mov	r0, r3
 8007808:	f007 fcfd 	bl	800f206 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 800781e:	b580      	push	{r7, lr}
 8007820:	b084      	sub	sp, #16
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007832:	2b01      	cmp	r3, #1
 8007834:	d101      	bne.n	800783a <HAL_PCD_Stop+0x1c>
 8007836:	2302      	movs	r3, #2
 8007838:	e028      	b.n	800788c <HAL_PCD_Stop+0x6e>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2201      	movs	r2, #1
 800783e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_DISABLE(hpcd);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4618      	mov	r0, r3
 8007848:	f006 fbf9 	bl	800e03e <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4618      	mov	r0, r3
 8007852:	f007 fcf9 	bl	800f248 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2110      	movs	r1, #16
 800785c:	4618      	mov	r0, r3
 800785e:	f006 fdaf 	bl	800e3c0 <USB_FlushTxFifo>

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800786a:	2b00      	cmp	r3, #0
 800786c:	d009      	beq.n	8007882 <HAL_PCD_Stop+0x64>
      (hpcd->Init.battery_charging_enable == 1U))
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007872:	2b01      	cmp	r3, #1
 8007874:	d105      	bne.n	8007882 <HAL_PCD_Stop+0x64>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800787a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_UNLOCK(hpcd);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007894:	b590      	push	{r4, r7, lr}
 8007896:	b08d      	sub	sp, #52	@ 0x34
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078a2:	6a3b      	ldr	r3, [r7, #32]
 80078a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4618      	mov	r0, r3
 80078ac:	f007 fd80 	bl	800f3b0 <USB_GetMode>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f040 848c 	bne.w	80081d0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4618      	mov	r0, r3
 80078be:	f007 fce4 	bl	800f28a <USB_ReadInterrupts>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 8482 	beq.w	80081ce <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	0a1b      	lsrs	r3, r3, #8
 80078d4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4618      	mov	r0, r3
 80078e4:	f007 fcd1 	bl	800f28a <USB_ReadInterrupts>
 80078e8:	4603      	mov	r3, r0
 80078ea:	f003 0302 	and.w	r3, r3, #2
 80078ee:	2b02      	cmp	r3, #2
 80078f0:	d107      	bne.n	8007902 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	695a      	ldr	r2, [r3, #20]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f002 0202 	and.w	r2, r2, #2
 8007900:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4618      	mov	r0, r3
 8007908:	f007 fcbf 	bl	800f28a <USB_ReadInterrupts>
 800790c:	4603      	mov	r3, r0
 800790e:	f003 0310 	and.w	r3, r3, #16
 8007912:	2b10      	cmp	r3, #16
 8007914:	d161      	bne.n	80079da <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	699a      	ldr	r2, [r3, #24]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f022 0210 	bic.w	r2, r2, #16
 8007924:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007926:	6a3b      	ldr	r3, [r7, #32]
 8007928:	6a1b      	ldr	r3, [r3, #32]
 800792a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	f003 020f 	and.w	r2, r3, #15
 8007932:	4613      	mov	r3, r2
 8007934:	00db      	lsls	r3, r3, #3
 8007936:	4413      	add	r3, r2
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	4413      	add	r3, r2
 8007942:	3304      	adds	r3, #4
 8007944:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	0c5b      	lsrs	r3, r3, #17
 800794a:	f003 030f 	and.w	r3, r3, #15
 800794e:	2b02      	cmp	r3, #2
 8007950:	d124      	bne.n	800799c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007952:	69ba      	ldr	r2, [r7, #24]
 8007954:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8007958:	4013      	ands	r3, r2
 800795a:	2b00      	cmp	r3, #0
 800795c:	d035      	beq.n	80079ca <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	091b      	lsrs	r3, r3, #4
 8007966:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007968:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800796c:	b29b      	uxth	r3, r3
 800796e:	461a      	mov	r2, r3
 8007970:	6a38      	ldr	r0, [r7, #32]
 8007972:	f007 faa7 	bl	800eec4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	68da      	ldr	r2, [r3, #12]
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	091b      	lsrs	r3, r3, #4
 800797e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007982:	441a      	add	r2, r3
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	695a      	ldr	r2, [r3, #20]
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	091b      	lsrs	r3, r3, #4
 8007990:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007994:	441a      	add	r2, r3
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	615a      	str	r2, [r3, #20]
 800799a:	e016      	b.n	80079ca <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	0c5b      	lsrs	r3, r3, #17
 80079a0:	f003 030f 	and.w	r3, r3, #15
 80079a4:	2b06      	cmp	r3, #6
 80079a6:	d110      	bne.n	80079ca <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80079ae:	2208      	movs	r2, #8
 80079b0:	4619      	mov	r1, r3
 80079b2:	6a38      	ldr	r0, [r7, #32]
 80079b4:	f007 fa86 	bl	800eec4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	695a      	ldr	r2, [r3, #20]
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	091b      	lsrs	r3, r3, #4
 80079c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079c4:	441a      	add	r2, r3
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	699a      	ldr	r2, [r3, #24]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f042 0210 	orr.w	r2, r2, #16
 80079d8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4618      	mov	r0, r3
 80079e0:	f007 fc53 	bl	800f28a <USB_ReadInterrupts>
 80079e4:	4603      	mov	r3, r0
 80079e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80079ea:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80079ee:	f040 80a7 	bne.w	8007b40 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80079f2:	2300      	movs	r3, #0
 80079f4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4618      	mov	r0, r3
 80079fc:	f007 fc58 	bl	800f2b0 <USB_ReadDevAllOutEpInterrupt>
 8007a00:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8007a02:	e099      	b.n	8007b38 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a06:	f003 0301 	and.w	r3, r3, #1
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f000 808e 	beq.w	8007b2c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a16:	b2d2      	uxtb	r2, r2
 8007a18:	4611      	mov	r1, r2
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f007 fc7c 	bl	800f318 <USB_ReadDevOutEPInterrupt>
 8007a20:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	f003 0301 	and.w	r3, r3, #1
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00c      	beq.n	8007a46 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a2e:	015a      	lsls	r2, r3, #5
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	4413      	add	r3, r2
 8007a34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a38:	461a      	mov	r2, r3
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007a3e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 fecf 	bl	80087e4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	f003 0308 	and.w	r3, r3, #8
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00c      	beq.n	8007a6a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a52:	015a      	lsls	r2, r3, #5
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	4413      	add	r3, r2
 8007a58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	2308      	movs	r3, #8
 8007a60:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007a62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 ffa5 	bl	80089b4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	f003 0310 	and.w	r3, r3, #16
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d008      	beq.n	8007a86 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a76:	015a      	lsls	r2, r3, #5
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a80:	461a      	mov	r2, r3
 8007a82:	2310      	movs	r3, #16
 8007a84:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	f003 0302 	and.w	r3, r3, #2
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d030      	beq.n	8007af2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007a90:	6a3b      	ldr	r3, [r7, #32]
 8007a92:	695b      	ldr	r3, [r3, #20]
 8007a94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a98:	2b80      	cmp	r3, #128	@ 0x80
 8007a9a:	d109      	bne.n	8007ab0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	69fa      	ldr	r2, [r7, #28]
 8007aa6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007aaa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007aae:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007ab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	00db      	lsls	r3, r3, #3
 8007ab6:	4413      	add	r3, r2
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	3304      	adds	r3, #4
 8007ac4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	78db      	ldrb	r3, [r3, #3]
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d108      	bne.n	8007ae0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	4619      	mov	r1, r3
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f015 fca4 	bl	801d428 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae2:	015a      	lsls	r2, r3, #5
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aec:	461a      	mov	r2, r3
 8007aee:	2302      	movs	r3, #2
 8007af0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	f003 0320 	and.w	r3, r3, #32
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d008      	beq.n	8007b0e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007afe:	015a      	lsls	r2, r3, #5
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	4413      	add	r3, r2
 8007b04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b08:	461a      	mov	r2, r3
 8007b0a:	2320      	movs	r3, #32
 8007b0c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d009      	beq.n	8007b2c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b1a:	015a      	lsls	r2, r3, #5
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	4413      	add	r3, r2
 8007b20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b24:	461a      	mov	r2, r3
 8007b26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007b2a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b2e:	3301      	adds	r3, #1
 8007b30:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b34:	085b      	lsrs	r3, r3, #1
 8007b36:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f47f af62 	bne.w	8007a04 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4618      	mov	r0, r3
 8007b46:	f007 fba0 	bl	800f28a <USB_ReadInterrupts>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007b50:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007b54:	f040 80db 	bne.w	8007d0e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f007 fbc1 	bl	800f2e4 <USB_ReadDevAllInEpInterrupt>
 8007b62:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8007b64:	2300      	movs	r3, #0
 8007b66:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8007b68:	e0cd      	b.n	8007d06 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b6c:	f003 0301 	and.w	r3, r3, #1
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f000 80c2 	beq.w	8007cfa <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b7c:	b2d2      	uxtb	r2, r2
 8007b7e:	4611      	mov	r1, r2
 8007b80:	4618      	mov	r0, r3
 8007b82:	f007 fbe7 	bl	800f354 <USB_ReadDevInEPInterrupt>
 8007b86:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d057      	beq.n	8007c42 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b94:	f003 030f 	and.w	r3, r3, #15
 8007b98:	2201      	movs	r2, #1
 8007b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b9e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ba6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	43db      	mvns	r3, r3
 8007bac:	69f9      	ldr	r1, [r7, #28]
 8007bae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb8:	015a      	lsls	r2, r3, #5
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	799b      	ldrb	r3, [r3, #6]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d132      	bne.n	8007c36 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007bd0:	6879      	ldr	r1, [r7, #4]
 8007bd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	00db      	lsls	r3, r3, #3
 8007bd8:	4413      	add	r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	440b      	add	r3, r1
 8007bde:	3320      	adds	r3, #32
 8007be0:	6819      	ldr	r1, [r3, #0]
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007be6:	4613      	mov	r3, r2
 8007be8:	00db      	lsls	r3, r3, #3
 8007bea:	4413      	add	r3, r2
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	4403      	add	r3, r0
 8007bf0:	331c      	adds	r3, #28
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4419      	add	r1, r3
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	00db      	lsls	r3, r3, #3
 8007bfe:	4413      	add	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4403      	add	r3, r0
 8007c04:	3320      	adds	r3, #32
 8007c06:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d113      	bne.n	8007c36 <HAL_PCD_IRQHandler+0x3a2>
 8007c0e:	6879      	ldr	r1, [r7, #4]
 8007c10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c12:	4613      	mov	r3, r2
 8007c14:	00db      	lsls	r3, r3, #3
 8007c16:	4413      	add	r3, r2
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	440b      	add	r3, r1
 8007c1c:	3324      	adds	r3, #36	@ 0x24
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d108      	bne.n	8007c36 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6818      	ldr	r0, [r3, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007c2e:	461a      	mov	r2, r3
 8007c30:	2101      	movs	r1, #1
 8007c32:	f007 fbef 	bl	800f414 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f015 fb6e 	bl	801d31e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	f003 0308 	and.w	r3, r3, #8
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d008      	beq.n	8007c5e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c4e:	015a      	lsls	r2, r3, #5
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	4413      	add	r3, r2
 8007c54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c58:	461a      	mov	r2, r3
 8007c5a:	2308      	movs	r3, #8
 8007c5c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	f003 0310 	and.w	r3, r3, #16
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d008      	beq.n	8007c7a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6a:	015a      	lsls	r2, r3, #5
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	4413      	add	r3, r2
 8007c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c74:	461a      	mov	r2, r3
 8007c76:	2310      	movs	r3, #16
 8007c78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d008      	beq.n	8007c96 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c86:	015a      	lsls	r2, r3, #5
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c90:	461a      	mov	r2, r3
 8007c92:	2340      	movs	r3, #64	@ 0x40
 8007c94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	f003 0302 	and.w	r3, r3, #2
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d023      	beq.n	8007ce8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007ca0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007ca2:	6a38      	ldr	r0, [r7, #32]
 8007ca4:	f006 fb8c 	bl	800e3c0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007ca8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007caa:	4613      	mov	r3, r2
 8007cac:	00db      	lsls	r3, r3, #3
 8007cae:	4413      	add	r3, r2
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	3310      	adds	r3, #16
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	3304      	adds	r3, #4
 8007cba:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	78db      	ldrb	r3, [r3, #3]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d108      	bne.n	8007cd6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	4619      	mov	r1, r3
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f015 fbbb 	bl	801d44c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd8:	015a      	lsls	r2, r3, #5
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	4413      	add	r3, r2
 8007cde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d003      	beq.n	8007cfa <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007cf2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 fce8 	bl	80086ca <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d02:	085b      	lsrs	r3, r3, #1
 8007d04:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	f47f af2e 	bne.w	8007b6a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4618      	mov	r0, r3
 8007d14:	f007 fab9 	bl	800f28a <USB_ReadInterrupts>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d22:	d122      	bne.n	8007d6a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	69fa      	ldr	r2, [r7, #28]
 8007d2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d32:	f023 0301 	bic.w	r3, r3, #1
 8007d36:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d108      	bne.n	8007d54 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fecf 	bl	8008af0 <HAL_PCDEx_LPM_Callback>
 8007d52:	e002      	b.n	8007d5a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f015 fb59 	bl	801d40c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	695a      	ldr	r2, [r3, #20]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007d68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f007 fa8b 	bl	800f28a <USB_ReadInterrupts>
 8007d74:	4603      	mov	r3, r0
 8007d76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d7e:	d112      	bne.n	8007da6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	f003 0301 	and.w	r3, r3, #1
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d102      	bne.n	8007d96 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f015 fb15 	bl	801d3c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	695a      	ldr	r2, [r3, #20]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8007da4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f007 fa6d 	bl	800f28a <USB_ReadInterrupts>
 8007db0:	4603      	mov	r3, r0
 8007db2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007db6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dba:	f040 80b7 	bne.w	8007f2c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	69fa      	ldr	r2, [r7, #28]
 8007dc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007dcc:	f023 0301 	bic.w	r3, r3, #1
 8007dd0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2110      	movs	r1, #16
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f006 faf1 	bl	800e3c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007dde:	2300      	movs	r3, #0
 8007de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007de2:	e046      	b.n	8007e72 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007de6:	015a      	lsls	r2, r3, #5
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	4413      	add	r3, r2
 8007dec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007df0:	461a      	mov	r2, r3
 8007df2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007df6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dfa:	015a      	lsls	r2, r3, #5
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	4413      	add	r3, r2
 8007e00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e08:	0151      	lsls	r1, r2, #5
 8007e0a:	69fa      	ldr	r2, [r7, #28]
 8007e0c:	440a      	add	r2, r1
 8007e0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007e16:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e1a:	015a      	lsls	r2, r3, #5
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	4413      	add	r3, r2
 8007e20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e24:	461a      	mov	r2, r3
 8007e26:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007e2a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e2e:	015a      	lsls	r2, r3, #5
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	4413      	add	r3, r2
 8007e34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e3c:	0151      	lsls	r1, r2, #5
 8007e3e:	69fa      	ldr	r2, [r7, #28]
 8007e40:	440a      	add	r2, r1
 8007e42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e46:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007e4a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e4e:	015a      	lsls	r2, r3, #5
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	4413      	add	r3, r2
 8007e54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e5c:	0151      	lsls	r1, r2, #5
 8007e5e:	69fa      	ldr	r2, [r7, #28]
 8007e60:	440a      	add	r2, r1
 8007e62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e66:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007e6a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e6e:	3301      	adds	r3, #1
 8007e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	791b      	ldrb	r3, [r3, #4]
 8007e76:	461a      	mov	r2, r3
 8007e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d3b2      	bcc.n	8007de4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e84:	69db      	ldr	r3, [r3, #28]
 8007e86:	69fa      	ldr	r2, [r7, #28]
 8007e88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e8c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007e90:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	7bdb      	ldrb	r3, [r3, #15]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d016      	beq.n	8007ec8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ea4:	69fa      	ldr	r2, [r7, #28]
 8007ea6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007eaa:	f043 030b 	orr.w	r3, r3, #11
 8007eae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eba:	69fa      	ldr	r2, [r7, #28]
 8007ebc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ec0:	f043 030b 	orr.w	r3, r3, #11
 8007ec4:	6453      	str	r3, [r2, #68]	@ 0x44
 8007ec6:	e015      	b.n	8007ef4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ece:	695b      	ldr	r3, [r3, #20]
 8007ed0:	69fa      	ldr	r2, [r7, #28]
 8007ed2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ed6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007eda:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8007ede:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	69fa      	ldr	r2, [r7, #28]
 8007eea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007eee:	f043 030b 	orr.w	r3, r3, #11
 8007ef2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	69fa      	ldr	r2, [r7, #28]
 8007efe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f02:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007f06:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6818      	ldr	r0, [r3, #0]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007f16:	461a      	mov	r2, r3
 8007f18:	f007 fa7c 	bl	800f414 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	695a      	ldr	r2, [r3, #20]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007f2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4618      	mov	r0, r3
 8007f32:	f007 f9aa 	bl	800f28a <USB_ReadInterrupts>
 8007f36:	4603      	mov	r3, r0
 8007f38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007f3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f40:	d123      	bne.n	8007f8a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4618      	mov	r0, r3
 8007f48:	f007 fa40 	bl	800f3cc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4618      	mov	r0, r3
 8007f52:	f006 faae 	bl	800e4b2 <USB_GetDevSpeed>
 8007f56:	4603      	mov	r3, r0
 8007f58:	461a      	mov	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681c      	ldr	r4, [r3, #0]
 8007f62:	f001 fa65 	bl	8009430 <HAL_RCC_GetHCLKFreq>
 8007f66:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	4620      	mov	r0, r4
 8007f70:	f005 ffb2 	bl	800ded8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f015 f9fa 	bl	801d36e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	695a      	ldr	r2, [r3, #20]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007f88:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f007 f97b 	bl	800f28a <USB_ReadInterrupts>
 8007f94:	4603      	mov	r3, r0
 8007f96:	f003 0308 	and.w	r3, r3, #8
 8007f9a:	2b08      	cmp	r3, #8
 8007f9c:	d10a      	bne.n	8007fb4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f015 f9d7 	bl	801d352 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	695a      	ldr	r2, [r3, #20]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f002 0208 	and.w	r2, r2, #8
 8007fb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f007 f966 	bl	800f28a <USB_ReadInterrupts>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fc4:	2b80      	cmp	r3, #128	@ 0x80
 8007fc6:	d123      	bne.n	8008010 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007fc8:	6a3b      	ldr	r3, [r7, #32]
 8007fca:	699b      	ldr	r3, [r3, #24]
 8007fcc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007fd0:	6a3b      	ldr	r3, [r7, #32]
 8007fd2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fd8:	e014      	b.n	8008004 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007fda:	6879      	ldr	r1, [r7, #4]
 8007fdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fde:	4613      	mov	r3, r2
 8007fe0:	00db      	lsls	r3, r3, #3
 8007fe2:	4413      	add	r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	440b      	add	r3, r1
 8007fe8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d105      	bne.n	8007ffe <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fb08 	bl	800860e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008000:	3301      	adds	r3, #1
 8008002:	627b      	str	r3, [r7, #36]	@ 0x24
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	791b      	ldrb	r3, [r3, #4]
 8008008:	461a      	mov	r2, r3
 800800a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800800c:	4293      	cmp	r3, r2
 800800e:	d3e4      	bcc.n	8007fda <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4618      	mov	r0, r3
 8008016:	f007 f938 	bl	800f28a <USB_ReadInterrupts>
 800801a:	4603      	mov	r3, r0
 800801c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008020:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008024:	d13c      	bne.n	80080a0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008026:	2301      	movs	r3, #1
 8008028:	627b      	str	r3, [r7, #36]	@ 0x24
 800802a:	e02b      	b.n	8008084 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800802c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800802e:	015a      	lsls	r2, r3, #5
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	4413      	add	r3, r2
 8008034:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800803c:	6879      	ldr	r1, [r7, #4]
 800803e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008040:	4613      	mov	r3, r2
 8008042:	00db      	lsls	r3, r3, #3
 8008044:	4413      	add	r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	440b      	add	r3, r1
 800804a:	3318      	adds	r3, #24
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	2b01      	cmp	r3, #1
 8008050:	d115      	bne.n	800807e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008052:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008054:	2b00      	cmp	r3, #0
 8008056:	da12      	bge.n	800807e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008058:	6879      	ldr	r1, [r7, #4]
 800805a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800805c:	4613      	mov	r3, r2
 800805e:	00db      	lsls	r3, r3, #3
 8008060:	4413      	add	r3, r2
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	440b      	add	r3, r1
 8008066:	3317      	adds	r3, #23
 8008068:	2201      	movs	r2, #1
 800806a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800806c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800806e:	b2db      	uxtb	r3, r3
 8008070:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008074:	b2db      	uxtb	r3, r3
 8008076:	4619      	mov	r1, r3
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 fac8 	bl	800860e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800807e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008080:	3301      	adds	r3, #1
 8008082:	627b      	str	r3, [r7, #36]	@ 0x24
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	791b      	ldrb	r3, [r3, #4]
 8008088:	461a      	mov	r2, r3
 800808a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800808c:	4293      	cmp	r3, r2
 800808e:	d3cd      	bcc.n	800802c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	695a      	ldr	r2, [r3, #20]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800809e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4618      	mov	r0, r3
 80080a6:	f007 f8f0 	bl	800f28a <USB_ReadInterrupts>
 80080aa:	4603      	mov	r3, r0
 80080ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80080b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80080b4:	d156      	bne.n	8008164 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80080b6:	2301      	movs	r3, #1
 80080b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80080ba:	e045      	b.n	8008148 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80080bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080be:	015a      	lsls	r2, r3, #5
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	4413      	add	r3, r2
 80080c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80080cc:	6879      	ldr	r1, [r7, #4]
 80080ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080d0:	4613      	mov	r3, r2
 80080d2:	00db      	lsls	r3, r3, #3
 80080d4:	4413      	add	r3, r2
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	440b      	add	r3, r1
 80080da:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d12e      	bne.n	8008142 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80080e4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	da2b      	bge.n	8008142 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80080ea:	69bb      	ldr	r3, [r7, #24]
 80080ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80080f6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d121      	bne.n	8008142 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80080fe:	6879      	ldr	r1, [r7, #4]
 8008100:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008102:	4613      	mov	r3, r2
 8008104:	00db      	lsls	r3, r3, #3
 8008106:	4413      	add	r3, r2
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	440b      	add	r3, r1
 800810c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8008110:	2201      	movs	r2, #1
 8008112:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008114:	6a3b      	ldr	r3, [r7, #32]
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800811c:	6a3b      	ldr	r3, [r7, #32]
 800811e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008120:	6a3b      	ldr	r3, [r7, #32]
 8008122:	695b      	ldr	r3, [r3, #20]
 8008124:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10a      	bne.n	8008142 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	69fa      	ldr	r2, [r7, #28]
 8008136:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800813a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800813e:	6053      	str	r3, [r2, #4]
            break;
 8008140:	e008      	b.n	8008154 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008144:	3301      	adds	r3, #1
 8008146:	627b      	str	r3, [r7, #36]	@ 0x24
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	791b      	ldrb	r3, [r3, #4]
 800814c:	461a      	mov	r2, r3
 800814e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008150:	4293      	cmp	r3, r2
 8008152:	d3b3      	bcc.n	80080bc <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	695a      	ldr	r2, [r3, #20]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8008162:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4618      	mov	r0, r3
 800816a:	f007 f88e 	bl	800f28a <USB_ReadInterrupts>
 800816e:	4603      	mov	r3, r0
 8008170:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008174:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008178:	d10a      	bne.n	8008190 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f015 f978 	bl	801d470 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	695a      	ldr	r2, [r3, #20]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800818e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4618      	mov	r0, r3
 8008196:	f007 f878 	bl	800f28a <USB_ReadInterrupts>
 800819a:	4603      	mov	r3, r0
 800819c:	f003 0304 	and.w	r3, r3, #4
 80081a0:	2b04      	cmp	r3, #4
 80081a2:	d115      	bne.n	80081d0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	f003 0304 	and.w	r3, r3, #4
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d002      	beq.n	80081bc <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f015 f968 	bl	801d48c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	6859      	ldr	r1, [r3, #4]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	69ba      	ldr	r2, [r7, #24]
 80081c8:	430a      	orrs	r2, r1
 80081ca:	605a      	str	r2, [r3, #4]
 80081cc:	e000      	b.n	80081d0 <HAL_PCD_IRQHandler+0x93c>
      return;
 80081ce:	bf00      	nop
    }
  }
}
 80081d0:	3734      	adds	r7, #52	@ 0x34
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd90      	pop	{r4, r7, pc}

080081d6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b082      	sub	sp, #8
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
 80081de:	460b      	mov	r3, r1
 80081e0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d101      	bne.n	80081f0 <HAL_PCD_SetAddress+0x1a>
 80081ec:	2302      	movs	r3, #2
 80081ee:	e012      	b.n	8008216 <HAL_PCD_SetAddress+0x40>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	78fa      	ldrb	r2, [r7, #3]
 80081fc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	78fa      	ldrb	r2, [r7, #3]
 8008204:	4611      	mov	r1, r2
 8008206:	4618      	mov	r0, r3
 8008208:	f006 ffd7 	bl	800f1ba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008214:	2300      	movs	r3, #0
}
 8008216:	4618      	mov	r0, r3
 8008218:	3708      	adds	r7, #8
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b084      	sub	sp, #16
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
 8008226:	4608      	mov	r0, r1
 8008228:	4611      	mov	r1, r2
 800822a:	461a      	mov	r2, r3
 800822c:	4603      	mov	r3, r0
 800822e:	70fb      	strb	r3, [r7, #3]
 8008230:	460b      	mov	r3, r1
 8008232:	803b      	strh	r3, [r7, #0]
 8008234:	4613      	mov	r3, r2
 8008236:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008238:	2300      	movs	r3, #0
 800823a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800823c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008240:	2b00      	cmp	r3, #0
 8008242:	da0f      	bge.n	8008264 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008244:	78fb      	ldrb	r3, [r7, #3]
 8008246:	f003 020f 	and.w	r2, r3, #15
 800824a:	4613      	mov	r3, r2
 800824c:	00db      	lsls	r3, r3, #3
 800824e:	4413      	add	r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	3310      	adds	r3, #16
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	4413      	add	r3, r2
 8008258:	3304      	adds	r3, #4
 800825a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2201      	movs	r2, #1
 8008260:	705a      	strb	r2, [r3, #1]
 8008262:	e00f      	b.n	8008284 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008264:	78fb      	ldrb	r3, [r7, #3]
 8008266:	f003 020f 	and.w	r2, r3, #15
 800826a:	4613      	mov	r3, r2
 800826c:	00db      	lsls	r3, r3, #3
 800826e:	4413      	add	r3, r2
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	4413      	add	r3, r2
 800827a:	3304      	adds	r3, #4
 800827c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008284:	78fb      	ldrb	r3, [r7, #3]
 8008286:	f003 030f 	and.w	r3, r3, #15
 800828a:	b2da      	uxtb	r2, r3
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008290:	883a      	ldrh	r2, [r7, #0]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	78ba      	ldrb	r2, [r7, #2]
 800829a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	785b      	ldrb	r3, [r3, #1]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d004      	beq.n	80082ae <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	461a      	mov	r2, r3
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80082ae:	78bb      	ldrb	r3, [r7, #2]
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d102      	bne.n	80082ba <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2200      	movs	r2, #0
 80082b8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d101      	bne.n	80082c8 <HAL_PCD_EP_Open+0xaa>
 80082c4:	2302      	movs	r3, #2
 80082c6:	e00e      	b.n	80082e6 <HAL_PCD_EP_Open+0xc8>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	68f9      	ldr	r1, [r7, #12]
 80082d6:	4618      	mov	r0, r3
 80082d8:	f006 f910 	bl	800e4fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80082e4:	7afb      	ldrb	r3, [r7, #11]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b084      	sub	sp, #16
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
 80082f6:	460b      	mov	r3, r1
 80082f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80082fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	da0f      	bge.n	8008322 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008302:	78fb      	ldrb	r3, [r7, #3]
 8008304:	f003 020f 	and.w	r2, r3, #15
 8008308:	4613      	mov	r3, r2
 800830a:	00db      	lsls	r3, r3, #3
 800830c:	4413      	add	r3, r2
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	3310      	adds	r3, #16
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	4413      	add	r3, r2
 8008316:	3304      	adds	r3, #4
 8008318:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2201      	movs	r2, #1
 800831e:	705a      	strb	r2, [r3, #1]
 8008320:	e00f      	b.n	8008342 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008322:	78fb      	ldrb	r3, [r7, #3]
 8008324:	f003 020f 	and.w	r2, r3, #15
 8008328:	4613      	mov	r3, r2
 800832a:	00db      	lsls	r3, r3, #3
 800832c:	4413      	add	r3, r2
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	4413      	add	r3, r2
 8008338:	3304      	adds	r3, #4
 800833a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008342:	78fb      	ldrb	r3, [r7, #3]
 8008344:	f003 030f 	and.w	r3, r3, #15
 8008348:	b2da      	uxtb	r2, r3
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008354:	2b01      	cmp	r3, #1
 8008356:	d101      	bne.n	800835c <HAL_PCD_EP_Close+0x6e>
 8008358:	2302      	movs	r3, #2
 800835a:	e00e      	b.n	800837a <HAL_PCD_EP_Close+0x8c>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68f9      	ldr	r1, [r7, #12]
 800836a:	4618      	mov	r0, r3
 800836c:	f006 f94e 	bl	800e60c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b086      	sub	sp, #24
 8008386:	af00      	add	r7, sp, #0
 8008388:	60f8      	str	r0, [r7, #12]
 800838a:	607a      	str	r2, [r7, #4]
 800838c:	603b      	str	r3, [r7, #0]
 800838e:	460b      	mov	r3, r1
 8008390:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008392:	7afb      	ldrb	r3, [r7, #11]
 8008394:	f003 020f 	and.w	r2, r3, #15
 8008398:	4613      	mov	r3, r2
 800839a:	00db      	lsls	r3, r3, #3
 800839c:	4413      	add	r3, r2
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	4413      	add	r3, r2
 80083a8:	3304      	adds	r3, #4
 80083aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	683a      	ldr	r2, [r7, #0]
 80083b6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	2200      	movs	r2, #0
 80083bc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	2200      	movs	r2, #0
 80083c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80083c4:	7afb      	ldrb	r3, [r7, #11]
 80083c6:	f003 030f 	and.w	r3, r3, #15
 80083ca:	b2da      	uxtb	r2, r3
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	799b      	ldrb	r3, [r3, #6]
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d102      	bne.n	80083de <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	6818      	ldr	r0, [r3, #0]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	799b      	ldrb	r3, [r3, #6]
 80083e6:	461a      	mov	r2, r3
 80083e8:	6979      	ldr	r1, [r7, #20]
 80083ea:	f006 f9eb 	bl	800e7c4 <USB_EPStartXfer>

  return HAL_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3718      	adds	r7, #24
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	460b      	mov	r3, r1
 8008402:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008404:	78fb      	ldrb	r3, [r7, #3]
 8008406:	f003 020f 	and.w	r2, r3, #15
 800840a:	6879      	ldr	r1, [r7, #4]
 800840c:	4613      	mov	r3, r2
 800840e:	00db      	lsls	r3, r3, #3
 8008410:	4413      	add	r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	440b      	add	r3, r1
 8008416:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800841a:	681b      	ldr	r3, [r3, #0]
}
 800841c:	4618      	mov	r0, r3
 800841e:	370c      	adds	r7, #12
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b086      	sub	sp, #24
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	607a      	str	r2, [r7, #4]
 8008432:	603b      	str	r3, [r7, #0]
 8008434:	460b      	mov	r3, r1
 8008436:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008438:	7afb      	ldrb	r3, [r7, #11]
 800843a:	f003 020f 	and.w	r2, r3, #15
 800843e:	4613      	mov	r3, r2
 8008440:	00db      	lsls	r3, r3, #3
 8008442:	4413      	add	r3, r2
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	3310      	adds	r3, #16
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	4413      	add	r3, r2
 800844c:	3304      	adds	r3, #4
 800844e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	683a      	ldr	r2, [r7, #0]
 800845a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	2200      	movs	r2, #0
 8008460:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	2201      	movs	r2, #1
 8008466:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008468:	7afb      	ldrb	r3, [r7, #11]
 800846a:	f003 030f 	and.w	r3, r3, #15
 800846e:	b2da      	uxtb	r2, r3
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	799b      	ldrb	r3, [r3, #6]
 8008478:	2b01      	cmp	r3, #1
 800847a:	d102      	bne.n	8008482 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6818      	ldr	r0, [r3, #0]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	799b      	ldrb	r3, [r3, #6]
 800848a:	461a      	mov	r2, r3
 800848c:	6979      	ldr	r1, [r7, #20]
 800848e:	f006 f999 	bl	800e7c4 <USB_EPStartXfer>

  return HAL_OK;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	3718      	adds	r7, #24
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	460b      	mov	r3, r1
 80084a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80084a8:	78fb      	ldrb	r3, [r7, #3]
 80084aa:	f003 030f 	and.w	r3, r3, #15
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	7912      	ldrb	r2, [r2, #4]
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d901      	bls.n	80084ba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	e04f      	b.n	800855a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80084ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	da0f      	bge.n	80084e2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80084c2:	78fb      	ldrb	r3, [r7, #3]
 80084c4:	f003 020f 	and.w	r2, r3, #15
 80084c8:	4613      	mov	r3, r2
 80084ca:	00db      	lsls	r3, r3, #3
 80084cc:	4413      	add	r3, r2
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	3310      	adds	r3, #16
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	4413      	add	r3, r2
 80084d6:	3304      	adds	r3, #4
 80084d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2201      	movs	r2, #1
 80084de:	705a      	strb	r2, [r3, #1]
 80084e0:	e00d      	b.n	80084fe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80084e2:	78fa      	ldrb	r2, [r7, #3]
 80084e4:	4613      	mov	r3, r2
 80084e6:	00db      	lsls	r3, r3, #3
 80084e8:	4413      	add	r3, r2
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	4413      	add	r3, r2
 80084f4:	3304      	adds	r3, #4
 80084f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2200      	movs	r2, #0
 80084fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2201      	movs	r2, #1
 8008502:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008504:	78fb      	ldrb	r3, [r7, #3]
 8008506:	f003 030f 	and.w	r3, r3, #15
 800850a:	b2da      	uxtb	r2, r3
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008516:	2b01      	cmp	r3, #1
 8008518:	d101      	bne.n	800851e <HAL_PCD_EP_SetStall+0x82>
 800851a:	2302      	movs	r3, #2
 800851c:	e01d      	b.n	800855a <HAL_PCD_EP_SetStall+0xbe>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2201      	movs	r2, #1
 8008522:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	68f9      	ldr	r1, [r7, #12]
 800852c:	4618      	mov	r0, r3
 800852e:	f006 fd21 	bl	800ef74 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008532:	78fb      	ldrb	r3, [r7, #3]
 8008534:	f003 030f 	and.w	r3, r3, #15
 8008538:	2b00      	cmp	r3, #0
 800853a:	d109      	bne.n	8008550 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6818      	ldr	r0, [r3, #0]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	7999      	ldrb	r1, [r3, #6]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800854a:	461a      	mov	r2, r3
 800854c:	f006 ff62 	bl	800f414 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3710      	adds	r7, #16
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b084      	sub	sp, #16
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
 800856a:	460b      	mov	r3, r1
 800856c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800856e:	78fb      	ldrb	r3, [r7, #3]
 8008570:	f003 030f 	and.w	r3, r3, #15
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	7912      	ldrb	r2, [r2, #4]
 8008578:	4293      	cmp	r3, r2
 800857a:	d901      	bls.n	8008580 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	e042      	b.n	8008606 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008580:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008584:	2b00      	cmp	r3, #0
 8008586:	da0f      	bge.n	80085a8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008588:	78fb      	ldrb	r3, [r7, #3]
 800858a:	f003 020f 	and.w	r2, r3, #15
 800858e:	4613      	mov	r3, r2
 8008590:	00db      	lsls	r3, r3, #3
 8008592:	4413      	add	r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	3310      	adds	r3, #16
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	4413      	add	r3, r2
 800859c:	3304      	adds	r3, #4
 800859e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2201      	movs	r2, #1
 80085a4:	705a      	strb	r2, [r3, #1]
 80085a6:	e00f      	b.n	80085c8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80085a8:	78fb      	ldrb	r3, [r7, #3]
 80085aa:	f003 020f 	and.w	r2, r3, #15
 80085ae:	4613      	mov	r3, r2
 80085b0:	00db      	lsls	r3, r3, #3
 80085b2:	4413      	add	r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	4413      	add	r3, r2
 80085be:	3304      	adds	r3, #4
 80085c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2200      	movs	r2, #0
 80085c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2200      	movs	r2, #0
 80085cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80085ce:	78fb      	ldrb	r3, [r7, #3]
 80085d0:	f003 030f 	and.w	r3, r3, #15
 80085d4:	b2da      	uxtb	r2, r3
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d101      	bne.n	80085e8 <HAL_PCD_EP_ClrStall+0x86>
 80085e4:	2302      	movs	r3, #2
 80085e6:	e00e      	b.n	8008606 <HAL_PCD_EP_ClrStall+0xa4>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	68f9      	ldr	r1, [r7, #12]
 80085f6:	4618      	mov	r0, r3
 80085f8:	f006 fd2a 	bl	800f050 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b084      	sub	sp, #16
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
 8008616:	460b      	mov	r3, r1
 8008618:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800861a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800861e:	2b00      	cmp	r3, #0
 8008620:	da0c      	bge.n	800863c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008622:	78fb      	ldrb	r3, [r7, #3]
 8008624:	f003 020f 	and.w	r2, r3, #15
 8008628:	4613      	mov	r3, r2
 800862a:	00db      	lsls	r3, r3, #3
 800862c:	4413      	add	r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	3310      	adds	r3, #16
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	4413      	add	r3, r2
 8008636:	3304      	adds	r3, #4
 8008638:	60fb      	str	r3, [r7, #12]
 800863a:	e00c      	b.n	8008656 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800863c:	78fb      	ldrb	r3, [r7, #3]
 800863e:	f003 020f 	and.w	r2, r3, #15
 8008642:	4613      	mov	r3, r2
 8008644:	00db      	lsls	r3, r3, #3
 8008646:	4413      	add	r3, r2
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	4413      	add	r3, r2
 8008652:	3304      	adds	r3, #4
 8008654:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	68f9      	ldr	r1, [r7, #12]
 800865c:	4618      	mov	r0, r3
 800865e:	f006 fb49 	bl	800ecf4 <USB_EPStopXfer>
 8008662:	4603      	mov	r3, r0
 8008664:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008666:	7afb      	ldrb	r3, [r7, #11]
}
 8008668:	4618      	mov	r0, r3
 800866a:	3710      	adds	r7, #16
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	460b      	mov	r3, r1
 800867a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008682:	2b01      	cmp	r3, #1
 8008684:	d101      	bne.n	800868a <HAL_PCD_EP_Flush+0x1a>
 8008686:	2302      	movs	r3, #2
 8008688:	e01b      	b.n	80086c2 <HAL_PCD_EP_Flush+0x52>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2201      	movs	r2, #1
 800868e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 8008692:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008696:	2b00      	cmp	r3, #0
 8008698:	da09      	bge.n	80086ae <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	78fb      	ldrb	r3, [r7, #3]
 80086a0:	f003 030f 	and.w	r3, r3, #15
 80086a4:	4619      	mov	r1, r3
 80086a6:	4610      	mov	r0, r2
 80086a8:	f005 fe8a 	bl	800e3c0 <USB_FlushTxFifo>
 80086ac:	e004      	b.n	80086b8 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4618      	mov	r0, r3
 80086b4:	f005 feb6 	bl	800e424 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}

080086ca <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b08a      	sub	sp, #40	@ 0x28
 80086ce:	af02      	add	r7, sp, #8
 80086d0:	6078      	str	r0, [r7, #4]
 80086d2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80086de:	683a      	ldr	r2, [r7, #0]
 80086e0:	4613      	mov	r3, r2
 80086e2:	00db      	lsls	r3, r3, #3
 80086e4:	4413      	add	r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	3310      	adds	r3, #16
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	4413      	add	r3, r2
 80086ee:	3304      	adds	r3, #4
 80086f0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	695a      	ldr	r2, [r3, #20]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	691b      	ldr	r3, [r3, #16]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d901      	bls.n	8008702 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	e06b      	b.n	80087da <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	691a      	ldr	r2, [r3, #16]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	695b      	ldr	r3, [r3, #20]
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	69fa      	ldr	r2, [r7, #28]
 8008714:	429a      	cmp	r2, r3
 8008716:	d902      	bls.n	800871e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	3303      	adds	r3, #3
 8008722:	089b      	lsrs	r3, r3, #2
 8008724:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008726:	e02a      	b.n	800877e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	691a      	ldr	r2, [r3, #16]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	695b      	ldr	r3, [r3, #20]
 8008730:	1ad3      	subs	r3, r2, r3
 8008732:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	69fa      	ldr	r2, [r7, #28]
 800873a:	429a      	cmp	r2, r3
 800873c:	d902      	bls.n	8008744 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	3303      	adds	r3, #3
 8008748:	089b      	lsrs	r3, r3, #2
 800874a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	68d9      	ldr	r1, [r3, #12]
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	b2da      	uxtb	r2, r3
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800875c:	9300      	str	r3, [sp, #0]
 800875e:	4603      	mov	r3, r0
 8008760:	6978      	ldr	r0, [r7, #20]
 8008762:	f006 fb71 	bl	800ee48 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	68da      	ldr	r2, [r3, #12]
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	441a      	add	r2, r3
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	695a      	ldr	r2, [r3, #20]
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	441a      	add	r2, r3
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	015a      	lsls	r2, r3, #5
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	4413      	add	r3, r2
 8008786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800878a:	699b      	ldr	r3, [r3, #24]
 800878c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800878e:	69ba      	ldr	r2, [r7, #24]
 8008790:	429a      	cmp	r2, r3
 8008792:	d809      	bhi.n	80087a8 <PCD_WriteEmptyTxFifo+0xde>
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	695a      	ldr	r2, [r3, #20]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800879c:	429a      	cmp	r2, r3
 800879e:	d203      	bcs.n	80087a8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1bf      	bne.n	8008728 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	691a      	ldr	r2, [r3, #16]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	695b      	ldr	r3, [r3, #20]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d811      	bhi.n	80087d8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	f003 030f 	and.w	r3, r3, #15
 80087ba:	2201      	movs	r2, #1
 80087bc:	fa02 f303 	lsl.w	r3, r2, r3
 80087c0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	43db      	mvns	r3, r3
 80087ce:	6939      	ldr	r1, [r7, #16]
 80087d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80087d4:	4013      	ands	r3, r2
 80087d6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80087d8:	2300      	movs	r3, #0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3720      	adds	r7, #32
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
	...

080087e4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b088      	sub	sp, #32
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	333c      	adds	r3, #60	@ 0x3c
 80087fc:	3304      	adds	r3, #4
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	015a      	lsls	r2, r3, #5
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	4413      	add	r3, r2
 800880a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	799b      	ldrb	r3, [r3, #6]
 8008816:	2b01      	cmp	r3, #1
 8008818:	d17b      	bne.n	8008912 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	f003 0308 	and.w	r3, r3, #8
 8008820:	2b00      	cmp	r3, #0
 8008822:	d015      	beq.n	8008850 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	4a61      	ldr	r2, [pc, #388]	@ (80089ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008828:	4293      	cmp	r3, r2
 800882a:	f240 80b9 	bls.w	80089a0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008834:	2b00      	cmp	r3, #0
 8008836:	f000 80b3 	beq.w	80089a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	015a      	lsls	r2, r3, #5
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	4413      	add	r3, r2
 8008842:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008846:	461a      	mov	r2, r3
 8008848:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800884c:	6093      	str	r3, [r2, #8]
 800884e:	e0a7      	b.n	80089a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	f003 0320 	and.w	r3, r3, #32
 8008856:	2b00      	cmp	r3, #0
 8008858:	d009      	beq.n	800886e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	015a      	lsls	r2, r3, #5
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	4413      	add	r3, r2
 8008862:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008866:	461a      	mov	r2, r3
 8008868:	2320      	movs	r3, #32
 800886a:	6093      	str	r3, [r2, #8]
 800886c:	e098      	b.n	80089a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008874:	2b00      	cmp	r3, #0
 8008876:	f040 8093 	bne.w	80089a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	4a4b      	ldr	r2, [pc, #300]	@ (80089ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d90f      	bls.n	80088a2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008888:	2b00      	cmp	r3, #0
 800888a:	d00a      	beq.n	80088a2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	015a      	lsls	r2, r3, #5
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	4413      	add	r3, r2
 8008894:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008898:	461a      	mov	r2, r3
 800889a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800889e:	6093      	str	r3, [r2, #8]
 80088a0:	e07e      	b.n	80089a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80088a2:	683a      	ldr	r2, [r7, #0]
 80088a4:	4613      	mov	r3, r2
 80088a6:	00db      	lsls	r3, r3, #3
 80088a8:	4413      	add	r3, r2
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	4413      	add	r3, r2
 80088b4:	3304      	adds	r3, #4
 80088b6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6a1a      	ldr	r2, [r3, #32]
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	0159      	lsls	r1, r3, #5
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	440b      	add	r3, r1
 80088c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088c8:	691b      	ldr	r3, [r3, #16]
 80088ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088ce:	1ad2      	subs	r2, r2, r3
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d114      	bne.n	8008904 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d109      	bne.n	80088f6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6818      	ldr	r0, [r3, #0]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80088ec:	461a      	mov	r2, r3
 80088ee:	2101      	movs	r1, #1
 80088f0:	f006 fd90 	bl	800f414 <USB_EP0_OutStart>
 80088f4:	e006      	b.n	8008904 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	68da      	ldr	r2, [r3, #12]
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	695b      	ldr	r3, [r3, #20]
 80088fe:	441a      	add	r2, r3
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	b2db      	uxtb	r3, r3
 8008908:	4619      	mov	r1, r3
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f014 fcec 	bl	801d2e8 <HAL_PCD_DataOutStageCallback>
 8008910:	e046      	b.n	80089a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	4a26      	ldr	r2, [pc, #152]	@ (80089b0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d124      	bne.n	8008964 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00a      	beq.n	800893a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	015a      	lsls	r2, r3, #5
 8008928:	69bb      	ldr	r3, [r7, #24]
 800892a:	4413      	add	r3, r2
 800892c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008930:	461a      	mov	r2, r3
 8008932:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008936:	6093      	str	r3, [r2, #8]
 8008938:	e032      	b.n	80089a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	f003 0320 	and.w	r3, r3, #32
 8008940:	2b00      	cmp	r3, #0
 8008942:	d008      	beq.n	8008956 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	015a      	lsls	r2, r3, #5
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	4413      	add	r3, r2
 800894c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008950:	461a      	mov	r2, r3
 8008952:	2320      	movs	r3, #32
 8008954:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	b2db      	uxtb	r3, r3
 800895a:	4619      	mov	r1, r3
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f014 fcc3 	bl	801d2e8 <HAL_PCD_DataOutStageCallback>
 8008962:	e01d      	b.n	80089a0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d114      	bne.n	8008994 <PCD_EP_OutXfrComplete_int+0x1b0>
 800896a:	6879      	ldr	r1, [r7, #4]
 800896c:	683a      	ldr	r2, [r7, #0]
 800896e:	4613      	mov	r3, r2
 8008970:	00db      	lsls	r3, r3, #3
 8008972:	4413      	add	r3, r2
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	440b      	add	r3, r1
 8008978:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d108      	bne.n	8008994 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6818      	ldr	r0, [r3, #0]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800898c:	461a      	mov	r2, r3
 800898e:	2100      	movs	r1, #0
 8008990:	f006 fd40 	bl	800f414 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	b2db      	uxtb	r3, r3
 8008998:	4619      	mov	r1, r3
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f014 fca4 	bl	801d2e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3720      	adds	r7, #32
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	4f54300a 	.word	0x4f54300a
 80089b0:	4f54310a 	.word	0x4f54310a

080089b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b086      	sub	sp, #24
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	333c      	adds	r3, #60	@ 0x3c
 80089cc:	3304      	adds	r3, #4
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	015a      	lsls	r2, r3, #5
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	4413      	add	r3, r2
 80089da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	4a15      	ldr	r2, [pc, #84]	@ (8008a3c <PCD_EP_OutSetupPacket_int+0x88>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d90e      	bls.n	8008a08 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d009      	beq.n	8008a08 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	015a      	lsls	r2, r3, #5
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	4413      	add	r3, r2
 80089fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a00:	461a      	mov	r2, r3
 8008a02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a06:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f014 fc5b 	bl	801d2c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	4a0a      	ldr	r2, [pc, #40]	@ (8008a3c <PCD_EP_OutSetupPacket_int+0x88>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d90c      	bls.n	8008a30 <PCD_EP_OutSetupPacket_int+0x7c>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	799b      	ldrb	r3, [r3, #6]
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d108      	bne.n	8008a30 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6818      	ldr	r0, [r3, #0]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008a28:	461a      	mov	r2, r3
 8008a2a:	2101      	movs	r1, #1
 8008a2c:	f006 fcf2 	bl	800f414 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008a30:	2300      	movs	r3, #0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3718      	adds	r7, #24
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	4f54300a 	.word	0x4f54300a

08008a40 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b085      	sub	sp, #20
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	460b      	mov	r3, r1
 8008a4a:	70fb      	strb	r3, [r7, #3]
 8008a4c:	4613      	mov	r3, r2
 8008a4e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a56:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008a58:	78fb      	ldrb	r3, [r7, #3]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d107      	bne.n	8008a6e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008a5e:	883b      	ldrh	r3, [r7, #0]
 8008a60:	0419      	lsls	r1, r3, #16
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	68ba      	ldr	r2, [r7, #8]
 8008a68:	430a      	orrs	r2, r1
 8008a6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8008a6c:	e028      	b.n	8008ac0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a74:	0c1b      	lsrs	r3, r3, #16
 8008a76:	68ba      	ldr	r2, [r7, #8]
 8008a78:	4413      	add	r3, r2
 8008a7a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	73fb      	strb	r3, [r7, #15]
 8008a80:	e00d      	b.n	8008a9e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	7bfb      	ldrb	r3, [r7, #15]
 8008a88:	3340      	adds	r3, #64	@ 0x40
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4413      	add	r3, r2
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	0c1b      	lsrs	r3, r3, #16
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	4413      	add	r3, r2
 8008a96:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008a98:	7bfb      	ldrb	r3, [r7, #15]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	73fb      	strb	r3, [r7, #15]
 8008a9e:	7bfa      	ldrb	r2, [r7, #15]
 8008aa0:	78fb      	ldrb	r3, [r7, #3]
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d3ec      	bcc.n	8008a82 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008aa8:	883b      	ldrh	r3, [r7, #0]
 8008aaa:	0418      	lsls	r0, r3, #16
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6819      	ldr	r1, [r3, #0]
 8008ab0:	78fb      	ldrb	r3, [r7, #3]
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	68ba      	ldr	r2, [r7, #8]
 8008ab6:	4302      	orrs	r2, r0
 8008ab8:	3340      	adds	r3, #64	@ 0x40
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	440b      	add	r3, r1
 8008abe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3714      	adds	r7, #20
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr

08008ace <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008ace:	b480      	push	{r7}
 8008ad0:	b083      	sub	sp, #12
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	887a      	ldrh	r2, [r7, #2]
 8008ae0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008ae2:	2300      	movs	r3, #0
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	460b      	mov	r3, r1
 8008afa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008afc:	bf00      	nop
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8008b0e:	4b06      	ldr	r3, [pc, #24]	@ (8008b28 <HAL_PWR_EnableBkUpAccess+0x20>)
 8008b10:	2201      	movs	r2, #1
 8008b12:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8008b14:	4b05      	ldr	r3, [pc, #20]	@ (8008b2c <HAL_PWR_EnableBkUpAccess+0x24>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8008b1a:	687b      	ldr	r3, [r7, #4]
}
 8008b1c:	bf00      	nop
 8008b1e:	370c      	adds	r7, #12
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr
 8008b28:	420e0020 	.word	0x420e0020
 8008b2c:	40007000 	.word	0x40007000

08008b30 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8008b36:	4b06      	ldr	r3, [pc, #24]	@ (8008b50 <HAL_PWR_DisableBkUpAccess+0x20>)
 8008b38:	2200      	movs	r2, #0
 8008b3a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8008b3c:	4b05      	ldr	r3, [pc, #20]	@ (8008b54 <HAL_PWR_DisableBkUpAccess+0x24>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8008b42:	687b      	ldr	r3, [r7, #4]
}
 8008b44:	bf00      	nop
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr
 8008b50:	420e0020 	.word	0x420e0020
 8008b54:	40007000 	.word	0x40007000

08008b58 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFE_NO_EVT_CLEAR : Enter STOP mode with WFE instruction and
  *                                                  no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	460b      	mov	r3, r1
 8008b62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8008b64:	4b12      	ldr	r3, [pc, #72]	@ (8008bb0 <HAL_PWR_EnterSTOPMode+0x58>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f023 0203 	bic.w	r2, r3, #3
 8008b6c:	4910      	ldr	r1, [pc, #64]	@ (8008bb0 <HAL_PWR_EnterSTOPMode+0x58>)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008b74:	4b0f      	ldr	r3, [pc, #60]	@ (8008bb4 <HAL_PWR_EnterSTOPMode+0x5c>)
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	4a0e      	ldr	r2, [pc, #56]	@ (8008bb4 <HAL_PWR_EnterSTOPMode+0x5c>)
 8008b7a:	f043 0304 	orr.w	r3, r3, #4
 8008b7e:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8008b80:	78fb      	ldrb	r3, [r7, #3]
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d101      	bne.n	8008b8a <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8008b86:	bf30      	wfi
 8008b88:	e005      	b.n	8008b96 <HAL_PWR_EnterSTOPMode+0x3e>
  }
  else
  {
    if(STOPEntry != PWR_STOPENTRY_WFE_NO_EVT_CLEAR)
 8008b8a:	78fb      	ldrb	r3, [r7, #3]
 8008b8c:	2b03      	cmp	r3, #3
 8008b8e:	d001      	beq.n	8008b94 <HAL_PWR_EnterSTOPMode+0x3c>
    {
      /* Clear all pending event */
      __SEV();
 8008b90:	bf40      	sev
      __WFE();
 8008b92:	bf20      	wfe
    }
    /* Request Wait For Event */
    __WFE();
 8008b94:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8008b96:	4b07      	ldr	r3, [pc, #28]	@ (8008bb4 <HAL_PWR_EnterSTOPMode+0x5c>)
 8008b98:	691b      	ldr	r3, [r3, #16]
 8008b9a:	4a06      	ldr	r2, [pc, #24]	@ (8008bb4 <HAL_PWR_EnterSTOPMode+0x5c>)
 8008b9c:	f023 0304 	bic.w	r3, r3, #4
 8008ba0:	6113      	str	r3, [r2, #16]
}
 8008ba2:	bf00      	nop
 8008ba4:	370c      	adds	r7, #12
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	40007000 	.word	0x40007000
 8008bb4:	e000ed00 	.word	0xe000ed00

08008bb8 <HAL_PWREx_EnableFlashPowerDown>:
/**
  * @brief Enables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(void)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)ENABLE;
 8008bbc:	4b03      	ldr	r3, [pc, #12]	@ (8008bcc <HAL_PWREx_EnableFlashPowerDown+0x14>)
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	601a      	str	r2, [r3, #0]
}
 8008bc2:	bf00      	nop
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr
 8008bcc:	420e0024 	.word	0x420e0024

08008bd0 <HAL_PWREx_DisableFlashPowerDown>:
/**
  * @brief Disables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_DisableFlashPowerDown(void)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)DISABLE;
 8008bd4:	4b03      	ldr	r3, [pc, #12]	@ (8008be4 <HAL_PWREx_DisableFlashPowerDown+0x14>)
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	601a      	str	r2, [r3, #0]
}
 8008bda:	bf00      	nop
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr
 8008be4:	420e0024 	.word	0x420e0024

08008be8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b086      	sub	sp, #24
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d101      	bne.n	8008bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e267      	b.n	80090ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f003 0301 	and.w	r3, r3, #1
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d075      	beq.n	8008cf2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008c06:	4b88      	ldr	r3, [pc, #544]	@ (8008e28 <HAL_RCC_OscConfig+0x240>)
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	f003 030c 	and.w	r3, r3, #12
 8008c0e:	2b04      	cmp	r3, #4
 8008c10:	d00c      	beq.n	8008c2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c12:	4b85      	ldr	r3, [pc, #532]	@ (8008e28 <HAL_RCC_OscConfig+0x240>)
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008c1a:	2b08      	cmp	r3, #8
 8008c1c:	d112      	bne.n	8008c44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c1e:	4b82      	ldr	r3, [pc, #520]	@ (8008e28 <HAL_RCC_OscConfig+0x240>)
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008c2a:	d10b      	bne.n	8008c44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c2c:	4b7e      	ldr	r3, [pc, #504]	@ (8008e28 <HAL_RCC_OscConfig+0x240>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d05b      	beq.n	8008cf0 <HAL_RCC_OscConfig+0x108>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d157      	bne.n	8008cf0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	e242      	b.n	80090ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c4c:	d106      	bne.n	8008c5c <HAL_RCC_OscConfig+0x74>
 8008c4e:	4b76      	ldr	r3, [pc, #472]	@ (8008e28 <HAL_RCC_OscConfig+0x240>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a75      	ldr	r2, [pc, #468]	@ (8008e28 <HAL_RCC_OscConfig+0x240>)
 8008c54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c58:	6013      	str	r3, [r2, #0]
 8008c5a:	e01d      	b.n	8008c98 <HAL_RCC_OscConfig+0xb0>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c64:	d10c      	bne.n	8008c80 <HAL_RCC_OscConfig+0x98>
 8008c66:	4b70      	ldr	r3, [pc, #448]	@ (8008e28 <HAL_RCC_OscConfig+0x240>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a6f      	ldr	r2, [pc, #444]	@ (8008e28 <HAL_RCC_OscConfig+0x240>)
 8008c6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008c70:	6013      	str	r3, [r2, #0]
 8008c72:	4b6d      	ldr	r3, [pc, #436]	@ (8008e28 <HAL_RCC_OscConfig+0x240>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a6c      	ldr	r2, [pc, #432]	@ (8008e28 <HAL_RCC_OscConfig+0x240>)
 8008c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c7c:	6013      	str	r3, [r2, #0]
 8008c7e:	e00b      	b.n	8008c98 <HAL_RCC_OscConfig+0xb0>
 8008c80:	4b69      	ldr	r3, [pc, #420]	@ (8008e28 <HAL_RCC_OscConfig+0x240>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a68      	ldr	r2, [pc, #416]	@ (8008e28 <HAL_RCC_OscConfig+0x240>)
 8008c86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c8a:	6013      	str	r3, [r2, #0]
 8008c8c:	4b66      	ldr	r3, [pc, #408]	@ (8008e28 <HAL_RCC_OscConfig+0x240>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a65      	ldr	r2, [pc, #404]	@ (8008e28 <HAL_RCC_OscConfig+0x240>)
 8008c92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d013      	beq.n	8008cc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ca0:	f7fb fa96 	bl	80041d0 <HAL_GetTick>
 8008ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ca6:	e008      	b.n	8008cba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ca8:	f7fb fa92 	bl	80041d0 <HAL_GetTick>
 8008cac:	4602      	mov	r2, r0
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	1ad3      	subs	r3, r2, r3
 8008cb2:	2b64      	cmp	r3, #100	@ 0x64
 8008cb4:	d901      	bls.n	8008cba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008cb6:	2303      	movs	r3, #3
 8008cb8:	e207      	b.n	80090ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cba:	4b5b      	ldr	r3, [pc, #364]	@ (8008e28 <HAL_RCC_OscConfig+0x240>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d0f0      	beq.n	8008ca8 <HAL_RCC_OscConfig+0xc0>
 8008cc6:	e014      	b.n	8008cf2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cc8:	f7fb fa82 	bl	80041d0 <HAL_GetTick>
 8008ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008cce:	e008      	b.n	8008ce2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008cd0:	f7fb fa7e 	bl	80041d0 <HAL_GetTick>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	2b64      	cmp	r3, #100	@ 0x64
 8008cdc:	d901      	bls.n	8008ce2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	e1f3      	b.n	80090ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ce2:	4b51      	ldr	r3, [pc, #324]	@ (8008e28 <HAL_RCC_OscConfig+0x240>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d1f0      	bne.n	8008cd0 <HAL_RCC_OscConfig+0xe8>
 8008cee:	e000      	b.n	8008cf2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f003 0302 	and.w	r3, r3, #2
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d063      	beq.n	8008dc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008cfe:	4b4a      	ldr	r3, [pc, #296]	@ (8008e28 <HAL_RCC_OscConfig+0x240>)
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	f003 030c 	and.w	r3, r3, #12
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00b      	beq.n	8008d22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d0a:	4b47      	ldr	r3, [pc, #284]	@ (8008e28 <HAL_RCC_OscConfig+0x240>)
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008d12:	2b08      	cmp	r3, #8
 8008d14:	d11c      	bne.n	8008d50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d16:	4b44      	ldr	r3, [pc, #272]	@ (8008e28 <HAL_RCC_OscConfig+0x240>)
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d116      	bne.n	8008d50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d22:	4b41      	ldr	r3, [pc, #260]	@ (8008e28 <HAL_RCC_OscConfig+0x240>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f003 0302 	and.w	r3, r3, #2
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d005      	beq.n	8008d3a <HAL_RCC_OscConfig+0x152>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d001      	beq.n	8008d3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	e1c7      	b.n	80090ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d3a:	4b3b      	ldr	r3, [pc, #236]	@ (8008e28 <HAL_RCC_OscConfig+0x240>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	00db      	lsls	r3, r3, #3
 8008d48:	4937      	ldr	r1, [pc, #220]	@ (8008e28 <HAL_RCC_OscConfig+0x240>)
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d4e:	e03a      	b.n	8008dc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d020      	beq.n	8008d9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d58:	4b34      	ldr	r3, [pc, #208]	@ (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d5e:	f7fb fa37 	bl	80041d0 <HAL_GetTick>
 8008d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d64:	e008      	b.n	8008d78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d66:	f7fb fa33 	bl	80041d0 <HAL_GetTick>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	1ad3      	subs	r3, r2, r3
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	d901      	bls.n	8008d78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008d74:	2303      	movs	r3, #3
 8008d76:	e1a8      	b.n	80090ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d78:	4b2b      	ldr	r3, [pc, #172]	@ (8008e28 <HAL_RCC_OscConfig+0x240>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f003 0302 	and.w	r3, r3, #2
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d0f0      	beq.n	8008d66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d84:	4b28      	ldr	r3, [pc, #160]	@ (8008e28 <HAL_RCC_OscConfig+0x240>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	00db      	lsls	r3, r3, #3
 8008d92:	4925      	ldr	r1, [pc, #148]	@ (8008e28 <HAL_RCC_OscConfig+0x240>)
 8008d94:	4313      	orrs	r3, r2
 8008d96:	600b      	str	r3, [r1, #0]
 8008d98:	e015      	b.n	8008dc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d9a:	4b24      	ldr	r3, [pc, #144]	@ (8008e2c <HAL_RCC_OscConfig+0x244>)
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008da0:	f7fb fa16 	bl	80041d0 <HAL_GetTick>
 8008da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008da6:	e008      	b.n	8008dba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008da8:	f7fb fa12 	bl	80041d0 <HAL_GetTick>
 8008dac:	4602      	mov	r2, r0
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	1ad3      	subs	r3, r2, r3
 8008db2:	2b02      	cmp	r3, #2
 8008db4:	d901      	bls.n	8008dba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008db6:	2303      	movs	r3, #3
 8008db8:	e187      	b.n	80090ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008dba:	4b1b      	ldr	r3, [pc, #108]	@ (8008e28 <HAL_RCC_OscConfig+0x240>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f003 0302 	and.w	r3, r3, #2
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d1f0      	bne.n	8008da8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f003 0308 	and.w	r3, r3, #8
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d036      	beq.n	8008e40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	695b      	ldr	r3, [r3, #20]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d016      	beq.n	8008e08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008dda:	4b15      	ldr	r3, [pc, #84]	@ (8008e30 <HAL_RCC_OscConfig+0x248>)
 8008ddc:	2201      	movs	r2, #1
 8008dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008de0:	f7fb f9f6 	bl	80041d0 <HAL_GetTick>
 8008de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008de6:	e008      	b.n	8008dfa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008de8:	f7fb f9f2 	bl	80041d0 <HAL_GetTick>
 8008dec:	4602      	mov	r2, r0
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	1ad3      	subs	r3, r2, r3
 8008df2:	2b02      	cmp	r3, #2
 8008df4:	d901      	bls.n	8008dfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008df6:	2303      	movs	r3, #3
 8008df8:	e167      	b.n	80090ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8008e28 <HAL_RCC_OscConfig+0x240>)
 8008dfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008dfe:	f003 0302 	and.w	r3, r3, #2
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d0f0      	beq.n	8008de8 <HAL_RCC_OscConfig+0x200>
 8008e06:	e01b      	b.n	8008e40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e08:	4b09      	ldr	r3, [pc, #36]	@ (8008e30 <HAL_RCC_OscConfig+0x248>)
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e0e:	f7fb f9df 	bl	80041d0 <HAL_GetTick>
 8008e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e14:	e00e      	b.n	8008e34 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e16:	f7fb f9db 	bl	80041d0 <HAL_GetTick>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	1ad3      	subs	r3, r2, r3
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	d907      	bls.n	8008e34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008e24:	2303      	movs	r3, #3
 8008e26:	e150      	b.n	80090ca <HAL_RCC_OscConfig+0x4e2>
 8008e28:	40023800 	.word	0x40023800
 8008e2c:	42470000 	.word	0x42470000
 8008e30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e34:	4b88      	ldr	r3, [pc, #544]	@ (8009058 <HAL_RCC_OscConfig+0x470>)
 8008e36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e38:	f003 0302 	and.w	r3, r3, #2
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d1ea      	bne.n	8008e16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f003 0304 	and.w	r3, r3, #4
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	f000 8097 	beq.w	8008f7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e52:	4b81      	ldr	r3, [pc, #516]	@ (8009058 <HAL_RCC_OscConfig+0x470>)
 8008e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d10f      	bne.n	8008e7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e5e:	2300      	movs	r3, #0
 8008e60:	60bb      	str	r3, [r7, #8]
 8008e62:	4b7d      	ldr	r3, [pc, #500]	@ (8009058 <HAL_RCC_OscConfig+0x470>)
 8008e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e66:	4a7c      	ldr	r2, [pc, #496]	@ (8009058 <HAL_RCC_OscConfig+0x470>)
 8008e68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8008e6e:	4b7a      	ldr	r3, [pc, #488]	@ (8009058 <HAL_RCC_OscConfig+0x470>)
 8008e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e76:	60bb      	str	r3, [r7, #8]
 8008e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e7e:	4b77      	ldr	r3, [pc, #476]	@ (800905c <HAL_RCC_OscConfig+0x474>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d118      	bne.n	8008ebc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008e8a:	4b74      	ldr	r3, [pc, #464]	@ (800905c <HAL_RCC_OscConfig+0x474>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a73      	ldr	r2, [pc, #460]	@ (800905c <HAL_RCC_OscConfig+0x474>)
 8008e90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e96:	f7fb f99b 	bl	80041d0 <HAL_GetTick>
 8008e9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e9c:	e008      	b.n	8008eb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e9e:	f7fb f997 	bl	80041d0 <HAL_GetTick>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	1ad3      	subs	r3, r2, r3
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	d901      	bls.n	8008eb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008eac:	2303      	movs	r3, #3
 8008eae:	e10c      	b.n	80090ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008eb0:	4b6a      	ldr	r3, [pc, #424]	@ (800905c <HAL_RCC_OscConfig+0x474>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d0f0      	beq.n	8008e9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d106      	bne.n	8008ed2 <HAL_RCC_OscConfig+0x2ea>
 8008ec4:	4b64      	ldr	r3, [pc, #400]	@ (8009058 <HAL_RCC_OscConfig+0x470>)
 8008ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ec8:	4a63      	ldr	r2, [pc, #396]	@ (8009058 <HAL_RCC_OscConfig+0x470>)
 8008eca:	f043 0301 	orr.w	r3, r3, #1
 8008ece:	6713      	str	r3, [r2, #112]	@ 0x70
 8008ed0:	e01c      	b.n	8008f0c <HAL_RCC_OscConfig+0x324>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	2b05      	cmp	r3, #5
 8008ed8:	d10c      	bne.n	8008ef4 <HAL_RCC_OscConfig+0x30c>
 8008eda:	4b5f      	ldr	r3, [pc, #380]	@ (8009058 <HAL_RCC_OscConfig+0x470>)
 8008edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ede:	4a5e      	ldr	r2, [pc, #376]	@ (8009058 <HAL_RCC_OscConfig+0x470>)
 8008ee0:	f043 0304 	orr.w	r3, r3, #4
 8008ee4:	6713      	str	r3, [r2, #112]	@ 0x70
 8008ee6:	4b5c      	ldr	r3, [pc, #368]	@ (8009058 <HAL_RCC_OscConfig+0x470>)
 8008ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008eea:	4a5b      	ldr	r2, [pc, #364]	@ (8009058 <HAL_RCC_OscConfig+0x470>)
 8008eec:	f043 0301 	orr.w	r3, r3, #1
 8008ef0:	6713      	str	r3, [r2, #112]	@ 0x70
 8008ef2:	e00b      	b.n	8008f0c <HAL_RCC_OscConfig+0x324>
 8008ef4:	4b58      	ldr	r3, [pc, #352]	@ (8009058 <HAL_RCC_OscConfig+0x470>)
 8008ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ef8:	4a57      	ldr	r2, [pc, #348]	@ (8009058 <HAL_RCC_OscConfig+0x470>)
 8008efa:	f023 0301 	bic.w	r3, r3, #1
 8008efe:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f00:	4b55      	ldr	r3, [pc, #340]	@ (8009058 <HAL_RCC_OscConfig+0x470>)
 8008f02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f04:	4a54      	ldr	r2, [pc, #336]	@ (8009058 <HAL_RCC_OscConfig+0x470>)
 8008f06:	f023 0304 	bic.w	r3, r3, #4
 8008f0a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d015      	beq.n	8008f40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f14:	f7fb f95c 	bl	80041d0 <HAL_GetTick>
 8008f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f1a:	e00a      	b.n	8008f32 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f1c:	f7fb f958 	bl	80041d0 <HAL_GetTick>
 8008f20:	4602      	mov	r2, r0
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	1ad3      	subs	r3, r2, r3
 8008f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d901      	bls.n	8008f32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008f2e:	2303      	movs	r3, #3
 8008f30:	e0cb      	b.n	80090ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f32:	4b49      	ldr	r3, [pc, #292]	@ (8009058 <HAL_RCC_OscConfig+0x470>)
 8008f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f36:	f003 0302 	and.w	r3, r3, #2
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d0ee      	beq.n	8008f1c <HAL_RCC_OscConfig+0x334>
 8008f3e:	e014      	b.n	8008f6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f40:	f7fb f946 	bl	80041d0 <HAL_GetTick>
 8008f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f46:	e00a      	b.n	8008f5e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f48:	f7fb f942 	bl	80041d0 <HAL_GetTick>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	1ad3      	subs	r3, r2, r3
 8008f52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d901      	bls.n	8008f5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008f5a:	2303      	movs	r3, #3
 8008f5c:	e0b5      	b.n	80090ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f5e:	4b3e      	ldr	r3, [pc, #248]	@ (8009058 <HAL_RCC_OscConfig+0x470>)
 8008f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f62:	f003 0302 	and.w	r3, r3, #2
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d1ee      	bne.n	8008f48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008f6a:	7dfb      	ldrb	r3, [r7, #23]
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d105      	bne.n	8008f7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f70:	4b39      	ldr	r3, [pc, #228]	@ (8009058 <HAL_RCC_OscConfig+0x470>)
 8008f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f74:	4a38      	ldr	r2, [pc, #224]	@ (8009058 <HAL_RCC_OscConfig+0x470>)
 8008f76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f7a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	699b      	ldr	r3, [r3, #24]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	f000 80a1 	beq.w	80090c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008f86:	4b34      	ldr	r3, [pc, #208]	@ (8009058 <HAL_RCC_OscConfig+0x470>)
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	f003 030c 	and.w	r3, r3, #12
 8008f8e:	2b08      	cmp	r3, #8
 8008f90:	d05c      	beq.n	800904c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	699b      	ldr	r3, [r3, #24]
 8008f96:	2b02      	cmp	r3, #2
 8008f98:	d141      	bne.n	800901e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f9a:	4b31      	ldr	r3, [pc, #196]	@ (8009060 <HAL_RCC_OscConfig+0x478>)
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fa0:	f7fb f916 	bl	80041d0 <HAL_GetTick>
 8008fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fa6:	e008      	b.n	8008fba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fa8:	f7fb f912 	bl	80041d0 <HAL_GetTick>
 8008fac:	4602      	mov	r2, r0
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	1ad3      	subs	r3, r2, r3
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	d901      	bls.n	8008fba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	e087      	b.n	80090ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fba:	4b27      	ldr	r3, [pc, #156]	@ (8009058 <HAL_RCC_OscConfig+0x470>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d1f0      	bne.n	8008fa8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	69da      	ldr	r2, [r3, #28]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6a1b      	ldr	r3, [r3, #32]
 8008fce:	431a      	orrs	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fd4:	019b      	lsls	r3, r3, #6
 8008fd6:	431a      	orrs	r2, r3
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fdc:	085b      	lsrs	r3, r3, #1
 8008fde:	3b01      	subs	r3, #1
 8008fe0:	041b      	lsls	r3, r3, #16
 8008fe2:	431a      	orrs	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fe8:	061b      	lsls	r3, r3, #24
 8008fea:	491b      	ldr	r1, [pc, #108]	@ (8009058 <HAL_RCC_OscConfig+0x470>)
 8008fec:	4313      	orrs	r3, r2
 8008fee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8009060 <HAL_RCC_OscConfig+0x478>)
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ff6:	f7fb f8eb 	bl	80041d0 <HAL_GetTick>
 8008ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ffc:	e008      	b.n	8009010 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ffe:	f7fb f8e7 	bl	80041d0 <HAL_GetTick>
 8009002:	4602      	mov	r2, r0
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	1ad3      	subs	r3, r2, r3
 8009008:	2b02      	cmp	r3, #2
 800900a:	d901      	bls.n	8009010 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800900c:	2303      	movs	r3, #3
 800900e:	e05c      	b.n	80090ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009010:	4b11      	ldr	r3, [pc, #68]	@ (8009058 <HAL_RCC_OscConfig+0x470>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009018:	2b00      	cmp	r3, #0
 800901a:	d0f0      	beq.n	8008ffe <HAL_RCC_OscConfig+0x416>
 800901c:	e054      	b.n	80090c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800901e:	4b10      	ldr	r3, [pc, #64]	@ (8009060 <HAL_RCC_OscConfig+0x478>)
 8009020:	2200      	movs	r2, #0
 8009022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009024:	f7fb f8d4 	bl	80041d0 <HAL_GetTick>
 8009028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800902a:	e008      	b.n	800903e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800902c:	f7fb f8d0 	bl	80041d0 <HAL_GetTick>
 8009030:	4602      	mov	r2, r0
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	1ad3      	subs	r3, r2, r3
 8009036:	2b02      	cmp	r3, #2
 8009038:	d901      	bls.n	800903e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800903a:	2303      	movs	r3, #3
 800903c:	e045      	b.n	80090ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800903e:	4b06      	ldr	r3, [pc, #24]	@ (8009058 <HAL_RCC_OscConfig+0x470>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1f0      	bne.n	800902c <HAL_RCC_OscConfig+0x444>
 800904a:	e03d      	b.n	80090c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	699b      	ldr	r3, [r3, #24]
 8009050:	2b01      	cmp	r3, #1
 8009052:	d107      	bne.n	8009064 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	e038      	b.n	80090ca <HAL_RCC_OscConfig+0x4e2>
 8009058:	40023800 	.word	0x40023800
 800905c:	40007000 	.word	0x40007000
 8009060:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009064:	4b1b      	ldr	r3, [pc, #108]	@ (80090d4 <HAL_RCC_OscConfig+0x4ec>)
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	699b      	ldr	r3, [r3, #24]
 800906e:	2b01      	cmp	r3, #1
 8009070:	d028      	beq.n	80090c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800907c:	429a      	cmp	r2, r3
 800907e:	d121      	bne.n	80090c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800908a:	429a      	cmp	r2, r3
 800908c:	d11a      	bne.n	80090c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009094:	4013      	ands	r3, r2
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800909a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800909c:	4293      	cmp	r3, r2
 800909e:	d111      	bne.n	80090c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090aa:	085b      	lsrs	r3, r3, #1
 80090ac:	3b01      	subs	r3, #1
 80090ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d107      	bne.n	80090c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d001      	beq.n	80090c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	e000      	b.n	80090ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80090c8:	2300      	movs	r3, #0
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3718      	adds	r7, #24
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	40023800 	.word	0x40023800

080090d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d101      	bne.n	80090ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	e0cc      	b.n	8009286 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80090ec:	4b68      	ldr	r3, [pc, #416]	@ (8009290 <HAL_RCC_ClockConfig+0x1b8>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 0307 	and.w	r3, r3, #7
 80090f4:	683a      	ldr	r2, [r7, #0]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d90c      	bls.n	8009114 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090fa:	4b65      	ldr	r3, [pc, #404]	@ (8009290 <HAL_RCC_ClockConfig+0x1b8>)
 80090fc:	683a      	ldr	r2, [r7, #0]
 80090fe:	b2d2      	uxtb	r2, r2
 8009100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009102:	4b63      	ldr	r3, [pc, #396]	@ (8009290 <HAL_RCC_ClockConfig+0x1b8>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 0307 	and.w	r3, r3, #7
 800910a:	683a      	ldr	r2, [r7, #0]
 800910c:	429a      	cmp	r2, r3
 800910e:	d001      	beq.n	8009114 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009110:	2301      	movs	r3, #1
 8009112:	e0b8      	b.n	8009286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f003 0302 	and.w	r3, r3, #2
 800911c:	2b00      	cmp	r3, #0
 800911e:	d020      	beq.n	8009162 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f003 0304 	and.w	r3, r3, #4
 8009128:	2b00      	cmp	r3, #0
 800912a:	d005      	beq.n	8009138 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800912c:	4b59      	ldr	r3, [pc, #356]	@ (8009294 <HAL_RCC_ClockConfig+0x1bc>)
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	4a58      	ldr	r2, [pc, #352]	@ (8009294 <HAL_RCC_ClockConfig+0x1bc>)
 8009132:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009136:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f003 0308 	and.w	r3, r3, #8
 8009140:	2b00      	cmp	r3, #0
 8009142:	d005      	beq.n	8009150 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009144:	4b53      	ldr	r3, [pc, #332]	@ (8009294 <HAL_RCC_ClockConfig+0x1bc>)
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	4a52      	ldr	r2, [pc, #328]	@ (8009294 <HAL_RCC_ClockConfig+0x1bc>)
 800914a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800914e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009150:	4b50      	ldr	r3, [pc, #320]	@ (8009294 <HAL_RCC_ClockConfig+0x1bc>)
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	494d      	ldr	r1, [pc, #308]	@ (8009294 <HAL_RCC_ClockConfig+0x1bc>)
 800915e:	4313      	orrs	r3, r2
 8009160:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 0301 	and.w	r3, r3, #1
 800916a:	2b00      	cmp	r3, #0
 800916c:	d044      	beq.n	80091f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	2b01      	cmp	r3, #1
 8009174:	d107      	bne.n	8009186 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009176:	4b47      	ldr	r3, [pc, #284]	@ (8009294 <HAL_RCC_ClockConfig+0x1bc>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800917e:	2b00      	cmp	r3, #0
 8009180:	d119      	bne.n	80091b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	e07f      	b.n	8009286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	2b02      	cmp	r3, #2
 800918c:	d003      	beq.n	8009196 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009192:	2b03      	cmp	r3, #3
 8009194:	d107      	bne.n	80091a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009196:	4b3f      	ldr	r3, [pc, #252]	@ (8009294 <HAL_RCC_ClockConfig+0x1bc>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d109      	bne.n	80091b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	e06f      	b.n	8009286 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091a6:	4b3b      	ldr	r3, [pc, #236]	@ (8009294 <HAL_RCC_ClockConfig+0x1bc>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f003 0302 	and.w	r3, r3, #2
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d101      	bne.n	80091b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	e067      	b.n	8009286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80091b6:	4b37      	ldr	r3, [pc, #220]	@ (8009294 <HAL_RCC_ClockConfig+0x1bc>)
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	f023 0203 	bic.w	r2, r3, #3
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	4934      	ldr	r1, [pc, #208]	@ (8009294 <HAL_RCC_ClockConfig+0x1bc>)
 80091c4:	4313      	orrs	r3, r2
 80091c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80091c8:	f7fb f802 	bl	80041d0 <HAL_GetTick>
 80091cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091ce:	e00a      	b.n	80091e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091d0:	f7fa fffe 	bl	80041d0 <HAL_GetTick>
 80091d4:	4602      	mov	r2, r0
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	1ad3      	subs	r3, r2, r3
 80091da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091de:	4293      	cmp	r3, r2
 80091e0:	d901      	bls.n	80091e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80091e2:	2303      	movs	r3, #3
 80091e4:	e04f      	b.n	8009286 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091e6:	4b2b      	ldr	r3, [pc, #172]	@ (8009294 <HAL_RCC_ClockConfig+0x1bc>)
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	f003 020c 	and.w	r2, r3, #12
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d1eb      	bne.n	80091d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80091f8:	4b25      	ldr	r3, [pc, #148]	@ (8009290 <HAL_RCC_ClockConfig+0x1b8>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f003 0307 	and.w	r3, r3, #7
 8009200:	683a      	ldr	r2, [r7, #0]
 8009202:	429a      	cmp	r2, r3
 8009204:	d20c      	bcs.n	8009220 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009206:	4b22      	ldr	r3, [pc, #136]	@ (8009290 <HAL_RCC_ClockConfig+0x1b8>)
 8009208:	683a      	ldr	r2, [r7, #0]
 800920a:	b2d2      	uxtb	r2, r2
 800920c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800920e:	4b20      	ldr	r3, [pc, #128]	@ (8009290 <HAL_RCC_ClockConfig+0x1b8>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f003 0307 	and.w	r3, r3, #7
 8009216:	683a      	ldr	r2, [r7, #0]
 8009218:	429a      	cmp	r2, r3
 800921a:	d001      	beq.n	8009220 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	e032      	b.n	8009286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 0304 	and.w	r3, r3, #4
 8009228:	2b00      	cmp	r3, #0
 800922a:	d008      	beq.n	800923e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800922c:	4b19      	ldr	r3, [pc, #100]	@ (8009294 <HAL_RCC_ClockConfig+0x1bc>)
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	4916      	ldr	r1, [pc, #88]	@ (8009294 <HAL_RCC_ClockConfig+0x1bc>)
 800923a:	4313      	orrs	r3, r2
 800923c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f003 0308 	and.w	r3, r3, #8
 8009246:	2b00      	cmp	r3, #0
 8009248:	d009      	beq.n	800925e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800924a:	4b12      	ldr	r3, [pc, #72]	@ (8009294 <HAL_RCC_ClockConfig+0x1bc>)
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	691b      	ldr	r3, [r3, #16]
 8009256:	00db      	lsls	r3, r3, #3
 8009258:	490e      	ldr	r1, [pc, #56]	@ (8009294 <HAL_RCC_ClockConfig+0x1bc>)
 800925a:	4313      	orrs	r3, r2
 800925c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800925e:	f000 f821 	bl	80092a4 <HAL_RCC_GetSysClockFreq>
 8009262:	4602      	mov	r2, r0
 8009264:	4b0b      	ldr	r3, [pc, #44]	@ (8009294 <HAL_RCC_ClockConfig+0x1bc>)
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	091b      	lsrs	r3, r3, #4
 800926a:	f003 030f 	and.w	r3, r3, #15
 800926e:	490a      	ldr	r1, [pc, #40]	@ (8009298 <HAL_RCC_ClockConfig+0x1c0>)
 8009270:	5ccb      	ldrb	r3, [r1, r3]
 8009272:	fa22 f303 	lsr.w	r3, r2, r3
 8009276:	4a09      	ldr	r2, [pc, #36]	@ (800929c <HAL_RCC_ClockConfig+0x1c4>)
 8009278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800927a:	4b09      	ldr	r3, [pc, #36]	@ (80092a0 <HAL_RCC_ClockConfig+0x1c8>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4618      	mov	r0, r3
 8009280:	f7fa ff62 	bl	8004148 <HAL_InitTick>

  return HAL_OK;
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	40023c00 	.word	0x40023c00
 8009294:	40023800 	.word	0x40023800
 8009298:	08025108 	.word	0x08025108
 800929c:	20000010 	.word	0x20000010
 80092a0:	20000014 	.word	0x20000014

080092a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092a8:	b090      	sub	sp, #64	@ 0x40
 80092aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80092ac:	2300      	movs	r3, #0
 80092ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80092b0:	2300      	movs	r3, #0
 80092b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092b4:	2300      	movs	r3, #0
 80092b6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80092b8:	2300      	movs	r3, #0
 80092ba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80092bc:	4b59      	ldr	r3, [pc, #356]	@ (8009424 <HAL_RCC_GetSysClockFreq+0x180>)
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	f003 030c 	and.w	r3, r3, #12
 80092c4:	2b08      	cmp	r3, #8
 80092c6:	d00d      	beq.n	80092e4 <HAL_RCC_GetSysClockFreq+0x40>
 80092c8:	2b08      	cmp	r3, #8
 80092ca:	f200 80a1 	bhi.w	8009410 <HAL_RCC_GetSysClockFreq+0x16c>
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d002      	beq.n	80092d8 <HAL_RCC_GetSysClockFreq+0x34>
 80092d2:	2b04      	cmp	r3, #4
 80092d4:	d003      	beq.n	80092de <HAL_RCC_GetSysClockFreq+0x3a>
 80092d6:	e09b      	b.n	8009410 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80092d8:	4b53      	ldr	r3, [pc, #332]	@ (8009428 <HAL_RCC_GetSysClockFreq+0x184>)
 80092da:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80092dc:	e09b      	b.n	8009416 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80092de:	4b53      	ldr	r3, [pc, #332]	@ (800942c <HAL_RCC_GetSysClockFreq+0x188>)
 80092e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80092e2:	e098      	b.n	8009416 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80092e4:	4b4f      	ldr	r3, [pc, #316]	@ (8009424 <HAL_RCC_GetSysClockFreq+0x180>)
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80092ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80092ee:	4b4d      	ldr	r3, [pc, #308]	@ (8009424 <HAL_RCC_GetSysClockFreq+0x180>)
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d028      	beq.n	800934c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80092fa:	4b4a      	ldr	r3, [pc, #296]	@ (8009424 <HAL_RCC_GetSysClockFreq+0x180>)
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	099b      	lsrs	r3, r3, #6
 8009300:	2200      	movs	r2, #0
 8009302:	623b      	str	r3, [r7, #32]
 8009304:	627a      	str	r2, [r7, #36]	@ 0x24
 8009306:	6a3b      	ldr	r3, [r7, #32]
 8009308:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800930c:	2100      	movs	r1, #0
 800930e:	4b47      	ldr	r3, [pc, #284]	@ (800942c <HAL_RCC_GetSysClockFreq+0x188>)
 8009310:	fb03 f201 	mul.w	r2, r3, r1
 8009314:	2300      	movs	r3, #0
 8009316:	fb00 f303 	mul.w	r3, r0, r3
 800931a:	4413      	add	r3, r2
 800931c:	4a43      	ldr	r2, [pc, #268]	@ (800942c <HAL_RCC_GetSysClockFreq+0x188>)
 800931e:	fba0 1202 	umull	r1, r2, r0, r2
 8009322:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009324:	460a      	mov	r2, r1
 8009326:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009328:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800932a:	4413      	add	r3, r2
 800932c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800932e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009330:	2200      	movs	r2, #0
 8009332:	61bb      	str	r3, [r7, #24]
 8009334:	61fa      	str	r2, [r7, #28]
 8009336:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800933a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800933e:	f7f7 fcbb 	bl	8000cb8 <__aeabi_uldivmod>
 8009342:	4602      	mov	r2, r0
 8009344:	460b      	mov	r3, r1
 8009346:	4613      	mov	r3, r2
 8009348:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800934a:	e053      	b.n	80093f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800934c:	4b35      	ldr	r3, [pc, #212]	@ (8009424 <HAL_RCC_GetSysClockFreq+0x180>)
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	099b      	lsrs	r3, r3, #6
 8009352:	2200      	movs	r2, #0
 8009354:	613b      	str	r3, [r7, #16]
 8009356:	617a      	str	r2, [r7, #20]
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800935e:	f04f 0b00 	mov.w	fp, #0
 8009362:	4652      	mov	r2, sl
 8009364:	465b      	mov	r3, fp
 8009366:	f04f 0000 	mov.w	r0, #0
 800936a:	f04f 0100 	mov.w	r1, #0
 800936e:	0159      	lsls	r1, r3, #5
 8009370:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009374:	0150      	lsls	r0, r2, #5
 8009376:	4602      	mov	r2, r0
 8009378:	460b      	mov	r3, r1
 800937a:	ebb2 080a 	subs.w	r8, r2, sl
 800937e:	eb63 090b 	sbc.w	r9, r3, fp
 8009382:	f04f 0200 	mov.w	r2, #0
 8009386:	f04f 0300 	mov.w	r3, #0
 800938a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800938e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009392:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009396:	ebb2 0408 	subs.w	r4, r2, r8
 800939a:	eb63 0509 	sbc.w	r5, r3, r9
 800939e:	f04f 0200 	mov.w	r2, #0
 80093a2:	f04f 0300 	mov.w	r3, #0
 80093a6:	00eb      	lsls	r3, r5, #3
 80093a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80093ac:	00e2      	lsls	r2, r4, #3
 80093ae:	4614      	mov	r4, r2
 80093b0:	461d      	mov	r5, r3
 80093b2:	eb14 030a 	adds.w	r3, r4, sl
 80093b6:	603b      	str	r3, [r7, #0]
 80093b8:	eb45 030b 	adc.w	r3, r5, fp
 80093bc:	607b      	str	r3, [r7, #4]
 80093be:	f04f 0200 	mov.w	r2, #0
 80093c2:	f04f 0300 	mov.w	r3, #0
 80093c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80093ca:	4629      	mov	r1, r5
 80093cc:	028b      	lsls	r3, r1, #10
 80093ce:	4621      	mov	r1, r4
 80093d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80093d4:	4621      	mov	r1, r4
 80093d6:	028a      	lsls	r2, r1, #10
 80093d8:	4610      	mov	r0, r2
 80093da:	4619      	mov	r1, r3
 80093dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093de:	2200      	movs	r2, #0
 80093e0:	60bb      	str	r3, [r7, #8]
 80093e2:	60fa      	str	r2, [r7, #12]
 80093e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80093e8:	f7f7 fc66 	bl	8000cb8 <__aeabi_uldivmod>
 80093ec:	4602      	mov	r2, r0
 80093ee:	460b      	mov	r3, r1
 80093f0:	4613      	mov	r3, r2
 80093f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80093f4:	4b0b      	ldr	r3, [pc, #44]	@ (8009424 <HAL_RCC_GetSysClockFreq+0x180>)
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	0c1b      	lsrs	r3, r3, #16
 80093fa:	f003 0303 	and.w	r3, r3, #3
 80093fe:	3301      	adds	r3, #1
 8009400:	005b      	lsls	r3, r3, #1
 8009402:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8009404:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009408:	fbb2 f3f3 	udiv	r3, r2, r3
 800940c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800940e:	e002      	b.n	8009416 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009410:	4b05      	ldr	r3, [pc, #20]	@ (8009428 <HAL_RCC_GetSysClockFreq+0x184>)
 8009412:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009414:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8009418:	4618      	mov	r0, r3
 800941a:	3740      	adds	r7, #64	@ 0x40
 800941c:	46bd      	mov	sp, r7
 800941e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009422:	bf00      	nop
 8009424:	40023800 	.word	0x40023800
 8009428:	00f42400 	.word	0x00f42400
 800942c:	017d7840 	.word	0x017d7840

08009430 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009430:	b480      	push	{r7}
 8009432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009434:	4b03      	ldr	r3, [pc, #12]	@ (8009444 <HAL_RCC_GetHCLKFreq+0x14>)
 8009436:	681b      	ldr	r3, [r3, #0]
}
 8009438:	4618      	mov	r0, r3
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	20000010 	.word	0x20000010

08009448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800944c:	f7ff fff0 	bl	8009430 <HAL_RCC_GetHCLKFreq>
 8009450:	4602      	mov	r2, r0
 8009452:	4b05      	ldr	r3, [pc, #20]	@ (8009468 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	0a9b      	lsrs	r3, r3, #10
 8009458:	f003 0307 	and.w	r3, r3, #7
 800945c:	4903      	ldr	r1, [pc, #12]	@ (800946c <HAL_RCC_GetPCLK1Freq+0x24>)
 800945e:	5ccb      	ldrb	r3, [r1, r3]
 8009460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009464:	4618      	mov	r0, r3
 8009466:	bd80      	pop	{r7, pc}
 8009468:	40023800 	.word	0x40023800
 800946c:	08025118 	.word	0x08025118

08009470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009474:	f7ff ffdc 	bl	8009430 <HAL_RCC_GetHCLKFreq>
 8009478:	4602      	mov	r2, r0
 800947a:	4b05      	ldr	r3, [pc, #20]	@ (8009490 <HAL_RCC_GetPCLK2Freq+0x20>)
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	0b5b      	lsrs	r3, r3, #13
 8009480:	f003 0307 	and.w	r3, r3, #7
 8009484:	4903      	ldr	r1, [pc, #12]	@ (8009494 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009486:	5ccb      	ldrb	r3, [r1, r3]
 8009488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800948c:	4618      	mov	r0, r3
 800948e:	bd80      	pop	{r7, pc}
 8009490:	40023800 	.word	0x40023800
 8009494:	08025118 	.word	0x08025118

08009498 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b086      	sub	sp, #24
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80094a0:	2300      	movs	r3, #0
 80094a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80094a4:	2300      	movs	r3, #0
 80094a6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f003 0301 	and.w	r3, r3, #1
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d105      	bne.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d035      	beq.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80094c0:	4b67      	ldr	r3, [pc, #412]	@ (8009660 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80094c2:	2200      	movs	r2, #0
 80094c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80094c6:	f7fa fe83 	bl	80041d0 <HAL_GetTick>
 80094ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80094cc:	e008      	b.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80094ce:	f7fa fe7f 	bl	80041d0 <HAL_GetTick>
 80094d2:	4602      	mov	r2, r0
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	1ad3      	subs	r3, r2, r3
 80094d8:	2b02      	cmp	r3, #2
 80094da:	d901      	bls.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80094dc:	2303      	movs	r3, #3
 80094de:	e0ba      	b.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80094e0:	4b60      	ldr	r3, [pc, #384]	@ (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d1f0      	bne.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	019a      	lsls	r2, r3, #6
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	071b      	lsls	r3, r3, #28
 80094f8:	495a      	ldr	r1, [pc, #360]	@ (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80094fa:	4313      	orrs	r3, r2
 80094fc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009500:	4b57      	ldr	r3, [pc, #348]	@ (8009660 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009502:	2201      	movs	r2, #1
 8009504:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009506:	f7fa fe63 	bl	80041d0 <HAL_GetTick>
 800950a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800950c:	e008      	b.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800950e:	f7fa fe5f 	bl	80041d0 <HAL_GetTick>
 8009512:	4602      	mov	r2, r0
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	1ad3      	subs	r3, r2, r3
 8009518:	2b02      	cmp	r3, #2
 800951a:	d901      	bls.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800951c:	2303      	movs	r3, #3
 800951e:	e09a      	b.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009520:	4b50      	ldr	r3, [pc, #320]	@ (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009528:	2b00      	cmp	r3, #0
 800952a:	d0f0      	beq.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f003 0302 	and.w	r3, r3, #2
 8009534:	2b00      	cmp	r3, #0
 8009536:	f000 8083 	beq.w	8009640 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800953a:	2300      	movs	r3, #0
 800953c:	60fb      	str	r3, [r7, #12]
 800953e:	4b49      	ldr	r3, [pc, #292]	@ (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009542:	4a48      	ldr	r2, [pc, #288]	@ (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009544:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009548:	6413      	str	r3, [r2, #64]	@ 0x40
 800954a:	4b46      	ldr	r3, [pc, #280]	@ (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800954c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800954e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009552:	60fb      	str	r3, [r7, #12]
 8009554:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009556:	4b44      	ldr	r3, [pc, #272]	@ (8009668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a43      	ldr	r2, [pc, #268]	@ (8009668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800955c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009560:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009562:	f7fa fe35 	bl	80041d0 <HAL_GetTick>
 8009566:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009568:	e008      	b.n	800957c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800956a:	f7fa fe31 	bl	80041d0 <HAL_GetTick>
 800956e:	4602      	mov	r2, r0
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	1ad3      	subs	r3, r2, r3
 8009574:	2b02      	cmp	r3, #2
 8009576:	d901      	bls.n	800957c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8009578:	2303      	movs	r3, #3
 800957a:	e06c      	b.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800957c:	4b3a      	ldr	r3, [pc, #232]	@ (8009668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009584:	2b00      	cmp	r3, #0
 8009586:	d0f0      	beq.n	800956a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009588:	4b36      	ldr	r3, [pc, #216]	@ (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800958a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800958c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009590:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d02f      	beq.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80095a0:	693a      	ldr	r2, [r7, #16]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d028      	beq.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80095a6:	4b2f      	ldr	r3, [pc, #188]	@ (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80095a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80095ae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80095b0:	4b2e      	ldr	r3, [pc, #184]	@ (800966c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80095b2:	2201      	movs	r2, #1
 80095b4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80095b6:	4b2d      	ldr	r3, [pc, #180]	@ (800966c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80095b8:	2200      	movs	r2, #0
 80095ba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80095bc:	4a29      	ldr	r2, [pc, #164]	@ (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80095c2:	4b28      	ldr	r3, [pc, #160]	@ (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80095c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095c6:	f003 0301 	and.w	r3, r3, #1
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d114      	bne.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80095ce:	f7fa fdff 	bl	80041d0 <HAL_GetTick>
 80095d2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095d4:	e00a      	b.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80095d6:	f7fa fdfb 	bl	80041d0 <HAL_GetTick>
 80095da:	4602      	mov	r2, r0
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	1ad3      	subs	r3, r2, r3
 80095e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d901      	bls.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80095e8:	2303      	movs	r3, #3
 80095ea:	e034      	b.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095ec:	4b1d      	ldr	r3, [pc, #116]	@ (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80095ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095f0:	f003 0302 	and.w	r3, r3, #2
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d0ee      	beq.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009600:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009604:	d10d      	bne.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8009606:	4b17      	ldr	r3, [pc, #92]	@ (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009616:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800961a:	4912      	ldr	r1, [pc, #72]	@ (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800961c:	4313      	orrs	r3, r2
 800961e:	608b      	str	r3, [r1, #8]
 8009620:	e005      	b.n	800962e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009622:	4b10      	ldr	r3, [pc, #64]	@ (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	4a0f      	ldr	r2, [pc, #60]	@ (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009628:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800962c:	6093      	str	r3, [r2, #8]
 800962e:	4b0d      	ldr	r3, [pc, #52]	@ (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009630:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800963a:	490a      	ldr	r1, [pc, #40]	@ (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800963c:	4313      	orrs	r3, r2
 800963e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f003 0308 	and.w	r3, r3, #8
 8009648:	2b00      	cmp	r3, #0
 800964a:	d003      	beq.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	7c1a      	ldrb	r2, [r3, #16]
 8009650:	4b07      	ldr	r3, [pc, #28]	@ (8009670 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009652:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3718      	adds	r7, #24
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	42470068 	.word	0x42470068
 8009664:	40023800 	.word	0x40023800
 8009668:	40007000 	.word	0x40007000
 800966c:	42470e40 	.word	0x42470e40
 8009670:	424711e0 	.word	0x424711e0

08009674 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800967a:	f7fa fda9 	bl	80041d0 <HAL_GetTick>
 800967e:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8009680:	4b5d      	ldr	r3, [pc, #372]	@ (80097f8 <HAL_RCC_DeInit+0x184>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a5c      	ldr	r2, [pc, #368]	@ (80097f8 <HAL_RCC_DeInit+0x184>)
 8009686:	f043 0301 	orr.w	r3, r3, #1
 800968a:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800968c:	e008      	b.n	80096a0 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800968e:	f7fa fd9f 	bl	80041d0 <HAL_GetTick>
 8009692:	4602      	mov	r2, r0
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	1ad3      	subs	r3, r2, r3
 8009698:	2b02      	cmp	r3, #2
 800969a:	d901      	bls.n	80096a0 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 800969c:	2303      	movs	r3, #3
 800969e:	e0a7      	b.n	80097f0 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80096a0:	4b55      	ldr	r3, [pc, #340]	@ (80097f8 <HAL_RCC_DeInit+0x184>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f003 0302 	and.w	r3, r3, #2
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d0f0      	beq.n	800968e <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80096ac:	4b52      	ldr	r3, [pc, #328]	@ (80097f8 <HAL_RCC_DeInit+0x184>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a51      	ldr	r2, [pc, #324]	@ (80097f8 <HAL_RCC_DeInit+0x184>)
 80096b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096b6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80096b8:	f7fa fd8a 	bl	80041d0 <HAL_GetTick>
 80096bc:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80096be:	4b4e      	ldr	r3, [pc, #312]	@ (80097f8 <HAL_RCC_DeInit+0x184>)
 80096c0:	2200      	movs	r2, #0
 80096c2:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80096c4:	e00a      	b.n	80096dc <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096c6:	f7fa fd83 	bl	80041d0 <HAL_GetTick>
 80096ca:	4602      	mov	r2, r0
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	1ad3      	subs	r3, r2, r3
 80096d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d901      	bls.n	80096dc <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80096d8:	2303      	movs	r3, #3
 80096da:	e089      	b.n	80097f0 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80096dc:	4b46      	ldr	r3, [pc, #280]	@ (80097f8 <HAL_RCC_DeInit+0x184>)
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	f003 030c 	and.w	r3, r3, #12
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d1ee      	bne.n	80096c6 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80096e8:	f7fa fd72 	bl	80041d0 <HAL_GetTick>
 80096ec:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80096ee:	4b42      	ldr	r3, [pc, #264]	@ (80097f8 <HAL_RCC_DeInit+0x184>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4a41      	ldr	r2, [pc, #260]	@ (80097f8 <HAL_RCC_DeInit+0x184>)
 80096f4:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 80096f8:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80096fa:	e008      	b.n	800970e <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80096fc:	f7fa fd68 	bl	80041d0 <HAL_GetTick>
 8009700:	4602      	mov	r2, r0
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	1ad3      	subs	r3, r2, r3
 8009706:	2b64      	cmp	r3, #100	@ 0x64
 8009708:	d901      	bls.n	800970e <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 800970a:	2303      	movs	r3, #3
 800970c:	e070      	b.n	80097f0 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800970e:	4b3a      	ldr	r3, [pc, #232]	@ (80097f8 <HAL_RCC_DeInit+0x184>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009716:	2b00      	cmp	r3, #0
 8009718:	d1f0      	bne.n	80096fc <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800971a:	f7fa fd59 	bl	80041d0 <HAL_GetTick>
 800971e:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8009720:	4b35      	ldr	r3, [pc, #212]	@ (80097f8 <HAL_RCC_DeInit+0x184>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a34      	ldr	r2, [pc, #208]	@ (80097f8 <HAL_RCC_DeInit+0x184>)
 8009726:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800972a:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800972c:	e008      	b.n	8009740 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800972e:	f7fa fd4f 	bl	80041d0 <HAL_GetTick>
 8009732:	4602      	mov	r2, r0
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	1ad3      	subs	r3, r2, r3
 8009738:	2b02      	cmp	r3, #2
 800973a:	d901      	bls.n	8009740 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 800973c:	2303      	movs	r3, #3
 800973e:	e057      	b.n	80097f0 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8009740:	4b2d      	ldr	r3, [pc, #180]	@ (80097f8 <HAL_RCC_DeInit+0x184>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009748:	2b00      	cmp	r3, #0
 800974a:	d1f0      	bne.n	800972e <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800974c:	f7fa fd40 	bl	80041d0 <HAL_GetTick>
 8009750:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8009752:	4b29      	ldr	r3, [pc, #164]	@ (80097f8 <HAL_RCC_DeInit+0x184>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4a28      	ldr	r2, [pc, #160]	@ (80097f8 <HAL_RCC_DeInit+0x184>)
 8009758:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800975c:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800975e:	e008      	b.n	8009772 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009760:	f7fa fd36 	bl	80041d0 <HAL_GetTick>
 8009764:	4602      	mov	r2, r0
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	1ad3      	subs	r3, r2, r3
 800976a:	2b02      	cmp	r3, #2
 800976c:	d901      	bls.n	8009772 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 800976e:	2303      	movs	r3, #3
 8009770:	e03e      	b.n	80097f0 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8009772:	4b21      	ldr	r3, [pc, #132]	@ (80097f8 <HAL_RCC_DeInit+0x184>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800977a:	2b00      	cmp	r3, #0
 800977c:	d1f0      	bne.n	8009760 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 800977e:	4b1e      	ldr	r3, [pc, #120]	@ (80097f8 <HAL_RCC_DeInit+0x184>)
 8009780:	4a1e      	ldr	r2, [pc, #120]	@ (80097fc <HAL_RCC_DeInit+0x188>)
 8009782:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8009784:	4b1c      	ldr	r3, [pc, #112]	@ (80097f8 <HAL_RCC_DeInit+0x184>)
 8009786:	4a1e      	ldr	r2, [pc, #120]	@ (8009800 <HAL_RCC_DeInit+0x18c>)
 8009788:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 800978c:	4b1a      	ldr	r3, [pc, #104]	@ (80097f8 <HAL_RCC_DeInit+0x184>)
 800978e:	68db      	ldr	r3, [r3, #12]
 8009790:	4a19      	ldr	r2, [pc, #100]	@ (80097f8 <HAL_RCC_DeInit+0x184>)
 8009792:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8009796:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8009798:	4b17      	ldr	r3, [pc, #92]	@ (80097f8 <HAL_RCC_DeInit+0x184>)
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	4a16      	ldr	r2, [pc, #88]	@ (80097f8 <HAL_RCC_DeInit+0x184>)
 800979e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80097a2:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80097a4:	4b14      	ldr	r3, [pc, #80]	@ (80097f8 <HAL_RCC_DeInit+0x184>)
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	4a13      	ldr	r2, [pc, #76]	@ (80097f8 <HAL_RCC_DeInit+0x184>)
 80097aa:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 80097ae:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80097b0:	4b11      	ldr	r3, [pc, #68]	@ (80097f8 <HAL_RCC_DeInit+0x184>)
 80097b2:	68db      	ldr	r3, [r3, #12]
 80097b4:	4a10      	ldr	r2, [pc, #64]	@ (80097f8 <HAL_RCC_DeInit+0x184>)
 80097b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80097ba:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80097bc:	4b0e      	ldr	r3, [pc, #56]	@ (80097f8 <HAL_RCC_DeInit+0x184>)
 80097be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097c0:	4a0d      	ldr	r2, [pc, #52]	@ (80097f8 <HAL_RCC_DeInit+0x184>)
 80097c2:	f023 0301 	bic.w	r3, r3, #1
 80097c6:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80097c8:	4b0b      	ldr	r3, [pc, #44]	@ (80097f8 <HAL_RCC_DeInit+0x184>)
 80097ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097cc:	4a0a      	ldr	r2, [pc, #40]	@ (80097f8 <HAL_RCC_DeInit+0x184>)
 80097ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80097d2:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80097d4:	4b0b      	ldr	r3, [pc, #44]	@ (8009804 <HAL_RCC_DeInit+0x190>)
 80097d6:	4a0c      	ldr	r2, [pc, #48]	@ (8009808 <HAL_RCC_DeInit+0x194>)
 80097d8:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80097da:	4b0c      	ldr	r3, [pc, #48]	@ (800980c <HAL_RCC_DeInit+0x198>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4618      	mov	r0, r3
 80097e0:	f7fa fcb2 	bl	8004148 <HAL_InitTick>
 80097e4:	4603      	mov	r3, r0
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d001      	beq.n	80097ee <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	e000      	b.n	80097f0 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 80097ee:	2300      	movs	r3, #0
  }
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3708      	adds	r7, #8
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	40023800 	.word	0x40023800
 80097fc:	04003010 	.word	0x04003010
 8009800:	20003000 	.word	0x20003000
 8009804:	20000010 	.word	0x20000010
 8009808:	00f42400 	.word	0x00f42400
 800980c:	20000014 	.word	0x20000014

08009810 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d101      	bne.n	8009826 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	e073      	b.n	800990e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	7f5b      	ldrb	r3, [r3, #29]
 800982a:	b2db      	uxtb	r3, r3
 800982c:	2b00      	cmp	r3, #0
 800982e:	d105      	bne.n	800983c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f7fa f87e 	bl	8003938 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2202      	movs	r2, #2
 8009840:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	f003 0310 	and.w	r3, r3, #16
 800984c:	2b10      	cmp	r3, #16
 800984e:	d055      	beq.n	80098fc <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	22ca      	movs	r2, #202	@ 0xca
 8009856:	625a      	str	r2, [r3, #36]	@ 0x24
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2253      	movs	r2, #83	@ 0x53
 800985e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 fbd3 	bl	800a00c <RTC_EnterInitMode>
 8009866:	4603      	mov	r3, r0
 8009868:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800986a:	7bfb      	ldrb	r3, [r7, #15]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d12c      	bne.n	80098ca <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	6812      	ldr	r2, [r2, #0]
 800987a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800987e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009882:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	6899      	ldr	r1, [r3, #8]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	685a      	ldr	r2, [r3, #4]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	691b      	ldr	r3, [r3, #16]
 8009892:	431a      	orrs	r2, r3
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	695b      	ldr	r3, [r3, #20]
 8009898:	431a      	orrs	r2, r3
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	430a      	orrs	r2, r1
 80098a0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	68d2      	ldr	r2, [r2, #12]
 80098aa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	6919      	ldr	r1, [r3, #16]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	041a      	lsls	r2, r3, #16
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	430a      	orrs	r2, r1
 80098be:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 fbda 	bl	800a07a <RTC_ExitInitMode>
 80098c6:	4603      	mov	r3, r0
 80098c8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80098ca:	7bfb      	ldrb	r3, [r7, #15]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d110      	bne.n	80098f2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80098de:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	699a      	ldr	r2, [r3, #24]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	430a      	orrs	r2, r1
 80098f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	22ff      	movs	r2, #255	@ 0xff
 80098f8:	625a      	str	r2, [r3, #36]	@ 0x24
 80098fa:	e001      	b.n	8009900 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80098fc:	2300      	movs	r3, #0
 80098fe:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009900:	7bfb      	ldrb	r3, [r7, #15]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d102      	bne.n	800990c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2201      	movs	r2, #1
 800990a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800990c:	7bfb      	ldrb	r3, [r7, #15]
}
 800990e:	4618      	mov	r0, r3
 8009910:	3710      	adds	r7, #16
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009916:	b590      	push	{r4, r7, lr}
 8009918:	b087      	sub	sp, #28
 800991a:	af00      	add	r7, sp, #0
 800991c:	60f8      	str	r0, [r7, #12]
 800991e:	60b9      	str	r1, [r7, #8]
 8009920:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009922:	2300      	movs	r3, #0
 8009924:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	7f1b      	ldrb	r3, [r3, #28]
 800992a:	2b01      	cmp	r3, #1
 800992c:	d101      	bne.n	8009932 <HAL_RTC_SetTime+0x1c>
 800992e:	2302      	movs	r3, #2
 8009930:	e087      	b.n	8009a42 <HAL_RTC_SetTime+0x12c>
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2201      	movs	r2, #1
 8009936:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2202      	movs	r2, #2
 800993c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d126      	bne.n	8009992 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800994e:	2b00      	cmp	r3, #0
 8009950:	d102      	bne.n	8009958 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	2200      	movs	r2, #0
 8009956:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	4618      	mov	r0, r3
 800995e:	f000 fbb1 	bl	800a0c4 <RTC_ByteToBcd2>
 8009962:	4603      	mov	r3, r0
 8009964:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	785b      	ldrb	r3, [r3, #1]
 800996a:	4618      	mov	r0, r3
 800996c:	f000 fbaa 	bl	800a0c4 <RTC_ByteToBcd2>
 8009970:	4603      	mov	r3, r0
 8009972:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009974:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	789b      	ldrb	r3, [r3, #2]
 800997a:	4618      	mov	r0, r3
 800997c:	f000 fba2 	bl	800a0c4 <RTC_ByteToBcd2>
 8009980:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009982:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	78db      	ldrb	r3, [r3, #3]
 800998a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800998c:	4313      	orrs	r3, r2
 800998e:	617b      	str	r3, [r7, #20]
 8009990:	e018      	b.n	80099c4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800999c:	2b00      	cmp	r3, #0
 800999e:	d102      	bne.n	80099a6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	2200      	movs	r2, #0
 80099a4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	785b      	ldrb	r3, [r3, #1]
 80099b0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80099b2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80099b4:	68ba      	ldr	r2, [r7, #8]
 80099b6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80099b8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	78db      	ldrb	r3, [r3, #3]
 80099be:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80099c0:	4313      	orrs	r3, r2
 80099c2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	22ca      	movs	r2, #202	@ 0xca
 80099ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2253      	movs	r2, #83	@ 0x53
 80099d2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f000 fb19 	bl	800a00c <RTC_EnterInitMode>
 80099da:	4603      	mov	r3, r0
 80099dc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80099de:	7cfb      	ldrb	r3, [r7, #19]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d120      	bne.n	8009a26 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80099ee:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80099f2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	689a      	ldr	r2, [r3, #8]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009a02:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	6899      	ldr	r1, [r3, #8]
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	68da      	ldr	r2, [r3, #12]
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	691b      	ldr	r3, [r3, #16]
 8009a12:	431a      	orrs	r2, r3
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	430a      	orrs	r2, r1
 8009a1a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009a1c:	68f8      	ldr	r0, [r7, #12]
 8009a1e:	f000 fb2c 	bl	800a07a <RTC_ExitInitMode>
 8009a22:	4603      	mov	r3, r0
 8009a24:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009a26:	7cfb      	ldrb	r3, [r7, #19]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d102      	bne.n	8009a32 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	22ff      	movs	r2, #255	@ 0xff
 8009a38:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	771a      	strb	r2, [r3, #28]

  return status;
 8009a40:	7cfb      	ldrb	r3, [r7, #19]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	371c      	adds	r7, #28
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd90      	pop	{r4, r7, pc}

08009a4a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b086      	sub	sp, #24
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	60f8      	str	r0, [r7, #12]
 8009a52:	60b9      	str	r1, [r7, #8]
 8009a54:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009a56:	2300      	movs	r3, #0
 8009a58:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	691b      	ldr	r3, [r3, #16]
 8009a6a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8009a7c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8009a80:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	0c1b      	lsrs	r3, r3, #16
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a8c:	b2da      	uxtb	r2, r3
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	0a1b      	lsrs	r3, r3, #8
 8009a96:	b2db      	uxtb	r3, r3
 8009a98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a9c:	b2da      	uxtb	r2, r3
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009aaa:	b2da      	uxtb	r2, r3
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	0d9b      	lsrs	r3, r3, #22
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	f003 0301 	and.w	r3, r3, #1
 8009aba:	b2da      	uxtb	r2, r3
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d11a      	bne.n	8009afc <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	4618      	mov	r0, r3
 8009acc:	f000 fb18 	bl	800a100 <RTC_Bcd2ToByte>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	785b      	ldrb	r3, [r3, #1]
 8009adc:	4618      	mov	r0, r3
 8009ade:	f000 fb0f 	bl	800a100 <RTC_Bcd2ToByte>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	789b      	ldrb	r3, [r3, #2]
 8009aee:	4618      	mov	r0, r3
 8009af0:	f000 fb06 	bl	800a100 <RTC_Bcd2ToByte>
 8009af4:	4603      	mov	r3, r0
 8009af6:	461a      	mov	r2, r3
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3718      	adds	r7, #24
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009b06:	b590      	push	{r4, r7, lr}
 8009b08:	b087      	sub	sp, #28
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	60f8      	str	r0, [r7, #12]
 8009b0e:	60b9      	str	r1, [r7, #8]
 8009b10:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009b12:	2300      	movs	r3, #0
 8009b14:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	7f1b      	ldrb	r3, [r3, #28]
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	d101      	bne.n	8009b22 <HAL_RTC_SetDate+0x1c>
 8009b1e:	2302      	movs	r3, #2
 8009b20:	e071      	b.n	8009c06 <HAL_RTC_SetDate+0x100>
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2201      	movs	r2, #1
 8009b26:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2202      	movs	r2, #2
 8009b2c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d10e      	bne.n	8009b52 <HAL_RTC_SetDate+0x4c>
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	785b      	ldrb	r3, [r3, #1]
 8009b38:	f003 0310 	and.w	r3, r3, #16
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d008      	beq.n	8009b52 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	785b      	ldrb	r3, [r3, #1]
 8009b44:	f023 0310 	bic.w	r3, r3, #16
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	330a      	adds	r3, #10
 8009b4c:	b2da      	uxtb	r2, r3
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d11c      	bne.n	8009b92 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	78db      	ldrb	r3, [r3, #3]
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f000 fab1 	bl	800a0c4 <RTC_ByteToBcd2>
 8009b62:	4603      	mov	r3, r0
 8009b64:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	785b      	ldrb	r3, [r3, #1]
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f000 faaa 	bl	800a0c4 <RTC_ByteToBcd2>
 8009b70:	4603      	mov	r3, r0
 8009b72:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009b74:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	789b      	ldrb	r3, [r3, #2]
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f000 faa2 	bl	800a0c4 <RTC_ByteToBcd2>
 8009b80:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009b82:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	617b      	str	r3, [r7, #20]
 8009b90:	e00e      	b.n	8009bb0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	78db      	ldrb	r3, [r3, #3]
 8009b96:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	785b      	ldrb	r3, [r3, #1]
 8009b9c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009b9e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8009ba0:	68ba      	ldr	r2, [r7, #8]
 8009ba2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009ba4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009bac:	4313      	orrs	r3, r2
 8009bae:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	22ca      	movs	r2, #202	@ 0xca
 8009bb6:	625a      	str	r2, [r3, #36]	@ 0x24
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	2253      	movs	r2, #83	@ 0x53
 8009bbe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009bc0:	68f8      	ldr	r0, [r7, #12]
 8009bc2:	f000 fa23 	bl	800a00c <RTC_EnterInitMode>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009bca:	7cfb      	ldrb	r3, [r7, #19]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d10c      	bne.n	8009bea <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009bda:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009bde:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f000 fa4a 	bl	800a07a <RTC_ExitInitMode>
 8009be6:	4603      	mov	r3, r0
 8009be8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009bea:	7cfb      	ldrb	r3, [r7, #19]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d102      	bne.n	8009bf6 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	22ff      	movs	r2, #255	@ 0xff
 8009bfc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2200      	movs	r2, #0
 8009c02:	771a      	strb	r2, [r3, #28]

  return status;
 8009c04:	7cfb      	ldrb	r3, [r7, #19]
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	371c      	adds	r7, #28
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd90      	pop	{r4, r7, pc}

08009c0e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b086      	sub	sp, #24
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	60f8      	str	r0, [r7, #12]
 8009c16:	60b9      	str	r1, [r7, #8]
 8009c18:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009c28:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009c2c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	0c1b      	lsrs	r3, r3, #16
 8009c32:	b2da      	uxtb	r2, r3
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	0a1b      	lsrs	r3, r3, #8
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	f003 031f 	and.w	r3, r3, #31
 8009c42:	b2da      	uxtb	r2, r3
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c50:	b2da      	uxtb	r2, r3
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	0b5b      	lsrs	r3, r3, #13
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	f003 0307 	and.w	r3, r3, #7
 8009c60:	b2da      	uxtb	r2, r3
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d11a      	bne.n	8009ca2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	78db      	ldrb	r3, [r3, #3]
 8009c70:	4618      	mov	r0, r3
 8009c72:	f000 fa45 	bl	800a100 <RTC_Bcd2ToByte>
 8009c76:	4603      	mov	r3, r0
 8009c78:	461a      	mov	r2, r3
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	785b      	ldrb	r3, [r3, #1]
 8009c82:	4618      	mov	r0, r3
 8009c84:	f000 fa3c 	bl	800a100 <RTC_Bcd2ToByte>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	789b      	ldrb	r3, [r3, #2]
 8009c94:	4618      	mov	r0, r3
 8009c96:	f000 fa33 	bl	800a100 <RTC_Bcd2ToByte>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009ca2:	2300      	movs	r3, #0
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3718      	adds	r7, #24
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009cac:	b590      	push	{r4, r7, lr}
 8009cae:	b089      	sub	sp, #36	@ 0x24
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8009cb8:	4b9b      	ldr	r3, [pc, #620]	@ (8009f28 <HAL_RTC_SetAlarm_IT+0x27c>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a9b      	ldr	r2, [pc, #620]	@ (8009f2c <HAL_RTC_SetAlarm_IT+0x280>)
 8009cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8009cc2:	0adb      	lsrs	r3, r3, #11
 8009cc4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009cc8:	fb02 f303 	mul.w	r3, r2, r3
 8009ccc:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	7f1b      	ldrb	r3, [r3, #28]
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d101      	bne.n	8009ce2 <HAL_RTC_SetAlarm_IT+0x36>
 8009cde:	2302      	movs	r3, #2
 8009ce0:	e11e      	b.n	8009f20 <HAL_RTC_SetAlarm_IT+0x274>
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2202      	movs	r2, #2
 8009cec:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d137      	bne.n	8009d64 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d102      	bne.n	8009d08 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	2200      	movs	r2, #0
 8009d06:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f000 f9d9 	bl	800a0c4 <RTC_ByteToBcd2>
 8009d12:	4603      	mov	r3, r0
 8009d14:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	785b      	ldrb	r3, [r3, #1]
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f000 f9d2 	bl	800a0c4 <RTC_ByteToBcd2>
 8009d20:	4603      	mov	r3, r0
 8009d22:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009d24:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	789b      	ldrb	r3, [r3, #2]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f000 f9ca 	bl	800a0c4 <RTC_ByteToBcd2>
 8009d30:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009d32:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	78db      	ldrb	r3, [r3, #3]
 8009d3a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009d3c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d46:	4618      	mov	r0, r3
 8009d48:	f000 f9bc 	bl	800a0c4 <RTC_ByteToBcd2>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009d50:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009d58:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	61fb      	str	r3, [r7, #28]
 8009d62:	e023      	b.n	8009dac <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	689b      	ldr	r3, [r3, #8]
 8009d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d102      	bne.n	8009d78 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	2200      	movs	r2, #0
 8009d76:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	785b      	ldrb	r3, [r3, #1]
 8009d82:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009d84:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009d86:	68ba      	ldr	r2, [r7, #8]
 8009d88:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009d8a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	78db      	ldrb	r3, [r3, #3]
 8009d90:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009d92:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d9a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009d9c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009da2:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009da8:	4313      	orrs	r3, r2
 8009daa:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009db4:	4313      	orrs	r3, r2
 8009db6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	22ca      	movs	r2, #202	@ 0xca
 8009dbe:	625a      	str	r2, [r3, #36]	@ 0x24
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	2253      	movs	r2, #83	@ 0x53
 8009dc6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009dd0:	d142      	bne.n	8009e58 <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	689a      	ldr	r2, [r3, #8]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009de0:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	68db      	ldr	r3, [r3, #12]
 8009de8:	b2da      	uxtb	r2, r3
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8009df2:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	3b01      	subs	r3, #1
 8009df8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d10b      	bne.n	8009e18 <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	22ff      	movs	r2, #255	@ 0xff
 8009e06:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2203      	movs	r2, #3
 8009e0c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2200      	movs	r2, #0
 8009e12:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009e14:	2303      	movs	r3, #3
 8009e16:	e083      	b.n	8009f20 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	68db      	ldr	r3, [r3, #12]
 8009e1e:	f003 0301 	and.w	r3, r3, #1
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d0e6      	beq.n	8009df4 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	69fa      	ldr	r2, [r7, #28]
 8009e2c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	69ba      	ldr	r2, [r7, #24]
 8009e34:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	689a      	ldr	r2, [r3, #8]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009e44:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	689a      	ldr	r2, [r3, #8]
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009e54:	609a      	str	r2, [r3, #8]
 8009e56:	e04c      	b.n	8009ef2 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	689a      	ldr	r2, [r3, #8]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009e66:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	b2da      	uxtb	r2, r3
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8009e78:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8009e7a:	4b2b      	ldr	r3, [pc, #172]	@ (8009f28 <HAL_RTC_SetAlarm_IT+0x27c>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a2b      	ldr	r2, [pc, #172]	@ (8009f2c <HAL_RTC_SetAlarm_IT+0x280>)
 8009e80:	fba2 2303 	umull	r2, r3, r2, r3
 8009e84:	0adb      	lsrs	r3, r3, #11
 8009e86:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009e8a:	fb02 f303 	mul.w	r3, r2, r3
 8009e8e:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	3b01      	subs	r3, #1
 8009e94:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d10b      	bne.n	8009eb4 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	22ff      	movs	r2, #255	@ 0xff
 8009ea2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2203      	movs	r2, #3
 8009ea8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2200      	movs	r2, #0
 8009eae:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	e035      	b.n	8009f20 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	f003 0302 	and.w	r3, r3, #2
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d0e6      	beq.n	8009e90 <HAL_RTC_SetAlarm_IT+0x1e4>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	69fa      	ldr	r2, [r7, #28]
 8009ec8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	69ba      	ldr	r2, [r7, #24]
 8009ed0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	689a      	ldr	r2, [r3, #8]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009ee0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	689a      	ldr	r2, [r3, #8]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009ef0:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8009ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8009f30 <HAL_RTC_SetAlarm_IT+0x284>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4a0e      	ldr	r2, [pc, #56]	@ (8009f30 <HAL_RTC_SetAlarm_IT+0x284>)
 8009ef8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009efc:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8009efe:	4b0c      	ldr	r3, [pc, #48]	@ (8009f30 <HAL_RTC_SetAlarm_IT+0x284>)
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	4a0b      	ldr	r2, [pc, #44]	@ (8009f30 <HAL_RTC_SetAlarm_IT+0x284>)
 8009f04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f08:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	22ff      	movs	r2, #255	@ 0xff
 8009f10:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2201      	movs	r2, #1
 8009f16:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009f1e:	2300      	movs	r3, #0
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3724      	adds	r7, #36	@ 0x24
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd90      	pop	{r4, r7, pc}
 8009f28:	20000010 	.word	0x20000010
 8009f2c:	10624dd3 	.word	0x10624dd3
 8009f30:	40013c00 	.word	0x40013c00

08009f34 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b082      	sub	sp, #8
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8009f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8009fbc <HAL_RTC_AlarmIRQHandler+0x88>)
 8009f3e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009f42:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	689b      	ldr	r3, [r3, #8]
 8009f4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d012      	beq.n	8009f78 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d00b      	beq.n	8009f78 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	b2da      	uxtb	r2, r3
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8009f70:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f7f9 fbb4 	bl	80036e0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d012      	beq.n	8009fac <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	68db      	ldr	r3, [r3, #12]
 8009f8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d00b      	beq.n	8009fac <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	68db      	ldr	r3, [r3, #12]
 8009f9a:	b2da      	uxtb	r2, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8009fa4:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 f8fa 	bl	800a1a0 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2201      	movs	r2, #1
 8009fb0:	775a      	strb	r2, [r3, #29]
}
 8009fb2:	bf00      	nop
 8009fb4:	3708      	adds	r7, #8
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
 8009fba:	bf00      	nop
 8009fbc:	40013c00 	.word	0x40013c00

08009fc0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a0d      	ldr	r2, [pc, #52]	@ (800a008 <HAL_RTC_WaitForSynchro+0x48>)
 8009fd2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009fd4:	f7fa f8fc 	bl	80041d0 <HAL_GetTick>
 8009fd8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009fda:	e009      	b.n	8009ff0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009fdc:	f7fa f8f8 	bl	80041d0 <HAL_GetTick>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	1ad3      	subs	r3, r2, r3
 8009fe6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009fea:	d901      	bls.n	8009ff0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8009fec:	2303      	movs	r3, #3
 8009fee:	e007      	b.n	800a000 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	f003 0320 	and.w	r3, r3, #32
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d0ee      	beq.n	8009fdc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8009ffe:	2300      	movs	r3, #0
}
 800a000:	4618      	mov	r0, r3
 800a002:	3710      	adds	r7, #16
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}
 800a008:	00013f5f 	.word	0x00013f5f

0800a00c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a014:	2300      	movs	r3, #0
 800a016:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a018:	2300      	movs	r3, #0
 800a01a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a026:	2b00      	cmp	r3, #0
 800a028:	d122      	bne.n	800a070 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	68da      	ldr	r2, [r3, #12]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a038:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a03a:	f7fa f8c9 	bl	80041d0 <HAL_GetTick>
 800a03e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a040:	e00c      	b.n	800a05c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a042:	f7fa f8c5 	bl	80041d0 <HAL_GetTick>
 800a046:	4602      	mov	r2, r0
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	1ad3      	subs	r3, r2, r3
 800a04c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a050:	d904      	bls.n	800a05c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2204      	movs	r2, #4
 800a056:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800a058:	2301      	movs	r3, #1
 800a05a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a066:	2b00      	cmp	r3, #0
 800a068:	d102      	bne.n	800a070 <RTC_EnterInitMode+0x64>
 800a06a:	7bfb      	ldrb	r3, [r7, #15]
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d1e8      	bne.n	800a042 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800a070:	7bfb      	ldrb	r3, [r7, #15]
}
 800a072:	4618      	mov	r0, r3
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b084      	sub	sp, #16
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a082:	2300      	movs	r3, #0
 800a084:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	68da      	ldr	r2, [r3, #12]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a094:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	f003 0320 	and.w	r3, r3, #32
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d10a      	bne.n	800a0ba <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f7ff ff8b 	bl	8009fc0 <HAL_RTC_WaitForSynchro>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d004      	beq.n	800a0ba <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2204      	movs	r2, #4
 800a0b4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800a0ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b085      	sub	sp, #20
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800a0d2:	e005      	b.n	800a0e0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800a0da:	79fb      	ldrb	r3, [r7, #7]
 800a0dc:	3b0a      	subs	r3, #10
 800a0de:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800a0e0:	79fb      	ldrb	r3, [r7, #7]
 800a0e2:	2b09      	cmp	r3, #9
 800a0e4:	d8f6      	bhi.n	800a0d4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	011b      	lsls	r3, r3, #4
 800a0ec:	b2da      	uxtb	r2, r3
 800a0ee:	79fb      	ldrb	r3, [r7, #7]
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	b2db      	uxtb	r3, r3
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3714      	adds	r7, #20
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800a100:	b480      	push	{r7}
 800a102:	b085      	sub	sp, #20
 800a104:	af00      	add	r7, sp, #0
 800a106:	4603      	mov	r3, r0
 800a108:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800a10a:	2300      	movs	r3, #0
 800a10c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800a10e:	79fb      	ldrb	r3, [r7, #7]
 800a110:	091b      	lsrs	r3, r3, #4
 800a112:	b2db      	uxtb	r3, r3
 800a114:	461a      	mov	r2, r3
 800a116:	4613      	mov	r3, r2
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	4413      	add	r3, r2
 800a11c:	005b      	lsls	r3, r3, #1
 800a11e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	b2da      	uxtb	r2, r3
 800a124:	79fb      	ldrb	r3, [r7, #7]
 800a126:	f003 030f 	and.w	r3, r3, #15
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	4413      	add	r3, r2
 800a12e:	b2db      	uxtb	r3, r3
}
 800a130:	4618      	mov	r0, r3
 800a132:	3714      	adds	r7, #20
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr

0800a13c <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b087      	sub	sp, #28
 800a140:	af00      	add	r7, sp, #0
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	60b9      	str	r1, [r7, #8]
 800a146:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800a148:	2300      	movs	r3, #0
 800a14a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	3350      	adds	r3, #80	@ 0x50
 800a152:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	697a      	ldr	r2, [r7, #20]
 800a15a:	4413      	add	r3, r2
 800a15c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	601a      	str	r2, [r3, #0]
}
 800a164:	bf00      	nop
 800a166:	371c      	adds	r7, #28
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr

0800a170 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800a170:	b480      	push	{r7}
 800a172:	b085      	sub	sp, #20
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800a17a:	2300      	movs	r3, #0
 800a17c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	3350      	adds	r3, #80	@ 0x50
 800a184:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	68fa      	ldr	r2, [r7, #12]
 800a18c:	4413      	add	r3, r2
 800a18e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
}
 800a194:	4618      	mov	r0, r3
 800a196:	3714      	adds	r7, #20
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b083      	sub	sp, #12
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800a1a8:	bf00      	nop
 800a1aa:	370c      	adds	r7, #12
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr

0800a1b4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d101      	bne.n	800a1c6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	e022      	b.n	800a20c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d105      	bne.n	800a1de <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f7f9 fbe1 	bl	80039a0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2203      	movs	r2, #3
 800a1e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f000 f814 	bl	800a214 <HAL_SD_InitCard>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d001      	beq.n	800a1f6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	e00a      	b.n	800a20c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2200      	movs	r2, #0
 800a200:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2201      	movs	r2, #1
 800a206:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3708      	adds	r7, #8
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a214:	b5b0      	push	{r4, r5, r7, lr}
 800a216:	b08e      	sub	sp, #56	@ 0x38
 800a218:	af04      	add	r7, sp, #16
 800a21a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800a21c:	2300      	movs	r3, #0
 800a21e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800a220:	2300      	movs	r3, #0
 800a222:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a224:	2300      	movs	r3, #0
 800a226:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800a228:	2300      	movs	r3, #0
 800a22a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a22c:	2300      	movs	r3, #0
 800a22e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800a230:	2376      	movs	r3, #118	@ 0x76
 800a232:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681d      	ldr	r5, [r3, #0]
 800a238:	466c      	mov	r4, sp
 800a23a:	f107 0314 	add.w	r3, r7, #20
 800a23e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a242:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a246:	f107 0308 	add.w	r3, r7, #8
 800a24a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a24c:	4628      	mov	r0, r5
 800a24e:	f003 f8ad 	bl	800d3ac <SDIO_Init>
 800a252:	4603      	mov	r3, r0
 800a254:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800a258:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d001      	beq.n	800a264 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a260:	2301      	movs	r3, #1
 800a262:	e04f      	b.n	800a304 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800a264:	4b29      	ldr	r3, [pc, #164]	@ (800a30c <HAL_SD_InitCard+0xf8>)
 800a266:	2200      	movs	r2, #0
 800a268:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4618      	mov	r0, r3
 800a270:	f003 f8e5 	bl	800d43e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800a274:	4b25      	ldr	r3, [pc, #148]	@ (800a30c <HAL_SD_InitCard+0xf8>)
 800a276:	2201      	movs	r2, #1
 800a278:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800a27a:	2002      	movs	r0, #2
 800a27c:	f7f9 ffb4 	bl	80041e8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 fe79 	bl	800af78 <SD_PowerON>
 800a286:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a288:	6a3b      	ldr	r3, [r7, #32]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d00b      	beq.n	800a2a6 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2201      	movs	r2, #1
 800a292:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a29a:	6a3b      	ldr	r3, [r7, #32]
 800a29c:	431a      	orrs	r2, r3
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e02e      	b.n	800a304 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 fd98 	bl	800addc <SD_InitCard>
 800a2ac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a2ae:	6a3b      	ldr	r3, [r7, #32]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d00b      	beq.n	800a2cc <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a2c0:	6a3b      	ldr	r3, [r7, #32]
 800a2c2:	431a      	orrs	r2, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	e01b      	b.n	800a304 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f003 f944 	bl	800d562 <SDMMC_CmdBlockLength>
 800a2da:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a2dc:	6a3b      	ldr	r3, [r7, #32]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d00f      	beq.n	800a302 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a0a      	ldr	r2, [pc, #40]	@ (800a310 <HAL_SD_InitCard+0xfc>)
 800a2e8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a2ee:	6a3b      	ldr	r3, [r7, #32]
 800a2f0:	431a      	orrs	r2, r3
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a2fe:	2301      	movs	r3, #1
 800a300:	e000      	b.n	800a304 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800a302:	2300      	movs	r3, #0
}
 800a304:	4618      	mov	r0, r3
 800a306:	3728      	adds	r7, #40	@ 0x28
 800a308:	46bd      	mov	sp, r7
 800a30a:	bdb0      	pop	{r4, r5, r7, pc}
 800a30c:	422580a0 	.word	0x422580a0
 800a310:	004005ff 	.word	0x004005ff

0800a314 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b092      	sub	sp, #72	@ 0x48
 800a318:	af00      	add	r7, sp, #0
 800a31a:	60f8      	str	r0, [r7, #12]
 800a31c:	60b9      	str	r1, [r7, #8]
 800a31e:	607a      	str	r2, [r7, #4]
 800a320:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a322:	f7f9 ff55 	bl	80041d0 <HAL_GetTick>
 800a326:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d107      	bne.n	800a346 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a33a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a342:	2301      	movs	r3, #1
 800a344:	e1c5      	b.n	800a6d2 <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	2b01      	cmp	r3, #1
 800a350:	f040 81b8 	bne.w	800a6c4 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2200      	movs	r2, #0
 800a358:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a35a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	441a      	add	r2, r3
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a364:	429a      	cmp	r2, r3
 800a366:	d907      	bls.n	800a378 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a36c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800a374:	2301      	movs	r3, #1
 800a376:	e1ac      	b.n	800a6d2 <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2203      	movs	r2, #3
 800a37c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	2200      	movs	r2, #0
 800a386:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d002      	beq.n	800a396 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800a390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a392:	025b      	lsls	r3, r3, #9
 800a394:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a396:	f04f 33ff 	mov.w	r3, #4294967295
 800a39a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	025b      	lsls	r3, r3, #9
 800a3a0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a3a2:	2390      	movs	r3, #144	@ 0x90
 800a3a4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a3a6:	2302      	movs	r3, #2
 800a3a8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f107 0214 	add.w	r2, r7, #20
 800a3ba:	4611      	mov	r1, r2
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f003 f8a4 	bl	800d50a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d90a      	bls.n	800a3de <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2202      	movs	r2, #2
 800a3cc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f003 f908 	bl	800d5ea <SDMMC_CmdReadMultiBlock>
 800a3da:	6478      	str	r0, [r7, #68]	@ 0x44
 800a3dc:	e009      	b.n	800a3f2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f003 f8db 	bl	800d5a6 <SDMMC_CmdReadSingleBlock>
 800a3f0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d012      	beq.n	800a41e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a7e      	ldr	r2, [pc, #504]	@ (800a5f8 <HAL_SD_ReadBlocks+0x2e4>)
 800a3fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a404:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a406:	431a      	orrs	r2, r3
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2201      	movs	r2, #1
 800a410:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2200      	movs	r2, #0
 800a418:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a41a:	2301      	movs	r3, #1
 800a41c:	e159      	b.n	800a6d2 <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800a41e:	69bb      	ldr	r3, [r7, #24]
 800a420:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a422:	e061      	b.n	800a4e8 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a42a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d03c      	beq.n	800a4ac <HAL_SD_ReadBlocks+0x198>
 800a432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a434:	2b00      	cmp	r3, #0
 800a436:	d039      	beq.n	800a4ac <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800a438:	2300      	movs	r3, #0
 800a43a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a43c:	e033      	b.n	800a4a6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4618      	mov	r0, r3
 800a444:	f002 ffdd 	bl	800d402 <SDIO_ReadFIFO>
 800a448:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800a44a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a44c:	b2da      	uxtb	r2, r3
 800a44e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a450:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a454:	3301      	adds	r3, #1
 800a456:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a45a:	3b01      	subs	r3, #1
 800a45c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800a45e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a460:	0a1b      	lsrs	r3, r3, #8
 800a462:	b2da      	uxtb	r2, r3
 800a464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a466:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a46a:	3301      	adds	r3, #1
 800a46c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a46e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a470:	3b01      	subs	r3, #1
 800a472:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800a474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a476:	0c1b      	lsrs	r3, r3, #16
 800a478:	b2da      	uxtb	r2, r3
 800a47a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a47c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a47e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a480:	3301      	adds	r3, #1
 800a482:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a486:	3b01      	subs	r3, #1
 800a488:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800a48a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a48c:	0e1b      	lsrs	r3, r3, #24
 800a48e:	b2da      	uxtb	r2, r3
 800a490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a492:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a496:	3301      	adds	r3, #1
 800a498:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a49a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a49c:	3b01      	subs	r3, #1
 800a49e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800a4a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a4a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4a8:	2b07      	cmp	r3, #7
 800a4aa:	d9c8      	bls.n	800a43e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a4ac:	f7f9 fe90 	bl	80041d0 <HAL_GetTick>
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b4:	1ad3      	subs	r3, r2, r3
 800a4b6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d902      	bls.n	800a4c2 <HAL_SD_ReadBlocks+0x1ae>
 800a4bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d112      	bne.n	800a4e8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a4c      	ldr	r2, [pc, #304]	@ (800a5f8 <HAL_SD_ReadBlocks+0x2e4>)
 800a4c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4ce:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2201      	movs	r2, #1
 800a4da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800a4e4:	2303      	movs	r3, #3
 800a4e6:	e0f4      	b.n	800a6d2 <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a4ee:	f240 332a 	movw	r3, #810	@ 0x32a
 800a4f2:	4013      	ands	r3, r2
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d095      	beq.n	800a424 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a502:	2b00      	cmp	r3, #0
 800a504:	d022      	beq.n	800a54c <HAL_SD_ReadBlocks+0x238>
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d91f      	bls.n	800a54c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a510:	2b03      	cmp	r3, #3
 800a512:	d01b      	beq.n	800a54c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4618      	mov	r0, r3
 800a51a:	f003 f8cd 	bl	800d6b8 <SDMMC_CmdStopTransfer>
 800a51e:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800a520:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a522:	2b00      	cmp	r3, #0
 800a524:	d012      	beq.n	800a54c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a33      	ldr	r2, [pc, #204]	@ (800a5f8 <HAL_SD_ReadBlocks+0x2e4>)
 800a52c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a532:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a534:	431a      	orrs	r2, r3
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2201      	movs	r2, #1
 800a53e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2200      	movs	r2, #0
 800a546:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800a548:	2301      	movs	r3, #1
 800a54a:	e0c2      	b.n	800a6d2 <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a552:	f003 0308 	and.w	r3, r3, #8
 800a556:	2b00      	cmp	r3, #0
 800a558:	d106      	bne.n	800a568 <HAL_SD_ReadBlocks+0x254>
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a560:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a564:	2b00      	cmp	r3, #0
 800a566:	d012      	beq.n	800a58e <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4a22      	ldr	r2, [pc, #136]	@ (800a5f8 <HAL_SD_ReadBlocks+0x2e4>)
 800a56e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a574:	f043 0208 	orr.w	r2, r3, #8
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2201      	movs	r2, #1
 800a580:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2200      	movs	r2, #0
 800a588:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a58a:	2301      	movs	r3, #1
 800a58c:	e0a1      	b.n	800a6d2 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a594:	f003 0302 	and.w	r3, r3, #2
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d012      	beq.n	800a5c2 <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a15      	ldr	r2, [pc, #84]	@ (800a5f8 <HAL_SD_ReadBlocks+0x2e4>)
 800a5a2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5a8:	f043 0202 	orr.w	r2, r3, #2
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e087      	b.n	800a6d2 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5c8:	f003 0320 	and.w	r3, r3, #32
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d064      	beq.n	800a69a <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a08      	ldr	r2, [pc, #32]	@ (800a5f8 <HAL_SD_ReadBlocks+0x2e4>)
 800a5d6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5dc:	f043 0220 	orr.w	r2, r3, #32
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	e06d      	b.n	800a6d2 <HAL_SD_ReadBlocks+0x3be>
 800a5f6:	bf00      	nop
 800a5f8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4618      	mov	r0, r3
 800a602:	f002 fefe 	bl	800d402 <SDIO_ReadFIFO>
 800a606:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800a608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a60a:	b2da      	uxtb	r2, r3
 800a60c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a60e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a612:	3301      	adds	r3, #1
 800a614:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800a616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a618:	3b01      	subs	r3, #1
 800a61a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800a61c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a61e:	0a1b      	lsrs	r3, r3, #8
 800a620:	b2da      	uxtb	r2, r3
 800a622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a624:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a628:	3301      	adds	r3, #1
 800a62a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800a62c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a62e:	3b01      	subs	r3, #1
 800a630:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800a632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a634:	0c1b      	lsrs	r3, r3, #16
 800a636:	b2da      	uxtb	r2, r3
 800a638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a63a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a63c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a63e:	3301      	adds	r3, #1
 800a640:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800a642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a644:	3b01      	subs	r3, #1
 800a646:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800a648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a64a:	0e1b      	lsrs	r3, r3, #24
 800a64c:	b2da      	uxtb	r2, r3
 800a64e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a650:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a654:	3301      	adds	r3, #1
 800a656:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800a658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a65a:	3b01      	subs	r3, #1
 800a65c:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a65e:	f7f9 fdb7 	bl	80041d0 <HAL_GetTick>
 800a662:	4602      	mov	r2, r0
 800a664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a666:	1ad3      	subs	r3, r2, r3
 800a668:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d902      	bls.n	800a674 <HAL_SD_ReadBlocks+0x360>
 800a66e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a670:	2b00      	cmp	r3, #0
 800a672:	d112      	bne.n	800a69a <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a18      	ldr	r2, [pc, #96]	@ (800a6dc <HAL_SD_ReadBlocks+0x3c8>)
 800a67a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a680:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2201      	movs	r2, #1
 800a68c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2200      	movs	r2, #0
 800a694:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800a696:	2301      	movs	r3, #1
 800a698:	e01b      	b.n	800a6d2 <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d002      	beq.n	800a6ae <HAL_SD_ReadBlocks+0x39a>
 800a6a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d1a6      	bne.n	800a5fc <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a6b6:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	e006      	b.n	800a6d2 <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6c8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a6d0:	2301      	movs	r3, #1
  }
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3748      	adds	r7, #72	@ 0x48
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	004005ff 	.word	0x004005ff

0800a6e0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b092      	sub	sp, #72	@ 0x48
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	60f8      	str	r0, [r7, #12]
 800a6e8:	60b9      	str	r1, [r7, #8]
 800a6ea:	607a      	str	r2, [r7, #4]
 800a6ec:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a6ee:	f7f9 fd6f 	bl	80041d0 <HAL_GetTick>
 800a6f2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d107      	bne.n	800a712 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a706:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a70e:	2301      	movs	r3, #1
 800a710:	e16d      	b.n	800a9ee <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	f040 8160 	bne.w	800a9e0 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2200      	movs	r2, #0
 800a724:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a726:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	441a      	add	r2, r3
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a730:	429a      	cmp	r2, r3
 800a732:	d907      	bls.n	800a744 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a738:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800a740:	2301      	movs	r3, #1
 800a742:	e154      	b.n	800a9ee <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2203      	movs	r2, #3
 800a748:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	2200      	movs	r2, #0
 800a752:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a758:	2b01      	cmp	r3, #1
 800a75a:	d002      	beq.n	800a762 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800a75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a75e:	025b      	lsls	r3, r3, #9
 800a760:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a762:	f04f 33ff 	mov.w	r3, #4294967295
 800a766:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	025b      	lsls	r3, r3, #9
 800a76c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a76e:	2390      	movs	r3, #144	@ 0x90
 800a770:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a772:	2300      	movs	r3, #0
 800a774:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a776:	2300      	movs	r3, #0
 800a778:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800a77a:	2301      	movs	r3, #1
 800a77c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f107 0218 	add.w	r2, r7, #24
 800a786:	4611      	mov	r1, r2
 800a788:	4618      	mov	r0, r3
 800a78a:	f002 febe 	bl	800d50a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	2b01      	cmp	r3, #1
 800a792:	d90a      	bls.n	800a7aa <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2220      	movs	r2, #32
 800a798:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f002 ff66 	bl	800d672 <SDMMC_CmdWriteMultiBlock>
 800a7a6:	6478      	str	r0, [r7, #68]	@ 0x44
 800a7a8:	e009      	b.n	800a7be <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2210      	movs	r2, #16
 800a7ae:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f002 ff39 	bl	800d62e <SDMMC_CmdWriteSingleBlock>
 800a7bc:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a7be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d012      	beq.n	800a7ea <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a8b      	ldr	r2, [pc, #556]	@ (800a9f8 <HAL_SD_WriteBlocks+0x318>)
 800a7ca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a7d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7d2:	431a      	orrs	r2, r3
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	e101      	b.n	800a9ee <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800a7ea:	69fb      	ldr	r3, [r7, #28]
 800a7ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a7ee:	e065      	b.n	800a8bc <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d040      	beq.n	800a880 <HAL_SD_WriteBlocks+0x1a0>
 800a7fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a800:	2b00      	cmp	r3, #0
 800a802:	d03d      	beq.n	800a880 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800a804:	2300      	movs	r3, #0
 800a806:	643b      	str	r3, [r7, #64]	@ 0x40
 800a808:	e037      	b.n	800a87a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800a80a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a812:	3301      	adds	r3, #1
 800a814:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a816:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a818:	3b01      	subs	r3, #1
 800a81a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800a81c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	021a      	lsls	r2, r3, #8
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	4313      	orrs	r3, r2
 800a826:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a82a:	3301      	adds	r3, #1
 800a82c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a82e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a830:	3b01      	subs	r3, #1
 800a832:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800a834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	041a      	lsls	r2, r3, #16
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	4313      	orrs	r3, r2
 800a83e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a842:	3301      	adds	r3, #1
 800a844:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a848:	3b01      	subs	r3, #1
 800a84a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800a84c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	061a      	lsls	r2, r3, #24
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	4313      	orrs	r3, r2
 800a856:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a85a:	3301      	adds	r3, #1
 800a85c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a85e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a860:	3b01      	subs	r3, #1
 800a862:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f107 0214 	add.w	r2, r7, #20
 800a86c:	4611      	mov	r1, r2
 800a86e:	4618      	mov	r0, r3
 800a870:	f002 fdd4 	bl	800d41c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800a874:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a876:	3301      	adds	r3, #1
 800a878:	643b      	str	r3, [r7, #64]	@ 0x40
 800a87a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a87c:	2b07      	cmp	r3, #7
 800a87e:	d9c4      	bls.n	800a80a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a880:	f7f9 fca6 	bl	80041d0 <HAL_GetTick>
 800a884:	4602      	mov	r2, r0
 800a886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a888:	1ad3      	subs	r3, r2, r3
 800a88a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d902      	bls.n	800a896 <HAL_SD_WriteBlocks+0x1b6>
 800a890:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a892:	2b00      	cmp	r3, #0
 800a894:	d112      	bne.n	800a8bc <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	4a57      	ldr	r2, [pc, #348]	@ (800a9f8 <HAL_SD_WriteBlocks+0x318>)
 800a89c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8a4:	431a      	orrs	r2, r3
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800a8b8:	2303      	movs	r3, #3
 800a8ba:	e098      	b.n	800a9ee <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a8c2:	f240 331a 	movw	r3, #794	@ 0x31a
 800a8c6:	4013      	ands	r3, r2
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d091      	beq.n	800a7f0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d022      	beq.n	800a920 <HAL_SD_WriteBlocks+0x240>
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	d91f      	bls.n	800a920 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8e4:	2b03      	cmp	r3, #3
 800a8e6:	d01b      	beq.n	800a920 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f002 fee3 	bl	800d6b8 <SDMMC_CmdStopTransfer>
 800a8f2:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800a8f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d012      	beq.n	800a920 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	4a3e      	ldr	r2, [pc, #248]	@ (800a9f8 <HAL_SD_WriteBlocks+0x318>)
 800a900:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a906:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a908:	431a      	orrs	r2, r3
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2201      	movs	r2, #1
 800a912:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	2200      	movs	r2, #0
 800a91a:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800a91c:	2301      	movs	r3, #1
 800a91e:	e066      	b.n	800a9ee <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a926:	f003 0308 	and.w	r3, r3, #8
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d106      	bne.n	800a93c <HAL_SD_WriteBlocks+0x25c>
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a934:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d012      	beq.n	800a962 <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4a2d      	ldr	r2, [pc, #180]	@ (800a9f8 <HAL_SD_WriteBlocks+0x318>)
 800a942:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a948:	f043 0208 	orr.w	r2, r3, #8
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2201      	movs	r2, #1
 800a954:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2200      	movs	r2, #0
 800a95c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a95e:	2301      	movs	r3, #1
 800a960:	e045      	b.n	800a9ee <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a968:	f003 0302 	and.w	r3, r3, #2
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d012      	beq.n	800a996 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a20      	ldr	r2, [pc, #128]	@ (800a9f8 <HAL_SD_WriteBlocks+0x318>)
 800a976:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a97c:	f043 0202 	orr.w	r2, r3, #2
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2201      	movs	r2, #1
 800a988:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2200      	movs	r2, #0
 800a990:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a992:	2301      	movs	r3, #1
 800a994:	e02b      	b.n	800a9ee <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a99c:	f003 0310 	and.w	r3, r3, #16
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d012      	beq.n	800a9ca <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	4a13      	ldr	r2, [pc, #76]	@ (800a9f8 <HAL_SD_WriteBlocks+0x318>)
 800a9aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9b0:	f043 0210 	orr.w	r2, r3, #16
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	e011      	b.n	800a9ee <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a9d2:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	e006      	b.n	800a9ee <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9e4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a9ec:	2301      	movs	r3, #1
  }
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3748      	adds	r7, #72	@ 0x48
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	004005ff 	.word	0x004005ff

0800a9fc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b083      	sub	sp, #12
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa0a:	0f9b      	lsrs	r3, r3, #30
 800aa0c:	b2da      	uxtb	r2, r3
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa16:	0e9b      	lsrs	r3, r3, #26
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	f003 030f 	and.w	r3, r3, #15
 800aa1e:	b2da      	uxtb	r2, r3
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa28:	0e1b      	lsrs	r3, r3, #24
 800aa2a:	b2db      	uxtb	r3, r3
 800aa2c:	f003 0303 	and.w	r3, r3, #3
 800aa30:	b2da      	uxtb	r2, r3
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa3a:	0c1b      	lsrs	r3, r3, #16
 800aa3c:	b2da      	uxtb	r2, r3
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa46:	0a1b      	lsrs	r3, r3, #8
 800aa48:	b2da      	uxtb	r2, r3
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa52:	b2da      	uxtb	r2, r3
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa5c:	0d1b      	lsrs	r3, r3, #20
 800aa5e:	b29a      	uxth	r2, r3
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa68:	0c1b      	lsrs	r3, r3, #16
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	f003 030f 	and.w	r3, r3, #15
 800aa70:	b2da      	uxtb	r2, r3
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa7a:	0bdb      	lsrs	r3, r3, #15
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	f003 0301 	and.w	r3, r3, #1
 800aa82:	b2da      	uxtb	r2, r3
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa8c:	0b9b      	lsrs	r3, r3, #14
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	f003 0301 	and.w	r3, r3, #1
 800aa94:	b2da      	uxtb	r2, r3
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa9e:	0b5b      	lsrs	r3, r3, #13
 800aaa0:	b2db      	uxtb	r3, r3
 800aaa2:	f003 0301 	and.w	r3, r3, #1
 800aaa6:	b2da      	uxtb	r2, r3
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aab0:	0b1b      	lsrs	r3, r3, #12
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	f003 0301 	and.w	r3, r3, #1
 800aab8:	b2da      	uxtb	r2, r3
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	2200      	movs	r2, #0
 800aac2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d163      	bne.n	800ab94 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aad0:	009a      	lsls	r2, r3, #2
 800aad2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800aad6:	4013      	ands	r3, r2
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800aadc:	0f92      	lsrs	r2, r2, #30
 800aade:	431a      	orrs	r2, r3
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aae8:	0edb      	lsrs	r3, r3, #27
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	f003 0307 	and.w	r3, r3, #7
 800aaf0:	b2da      	uxtb	r2, r3
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aafa:	0e1b      	lsrs	r3, r3, #24
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	f003 0307 	and.w	r3, r3, #7
 800ab02:	b2da      	uxtb	r2, r3
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab0c:	0d5b      	lsrs	r3, r3, #21
 800ab0e:	b2db      	uxtb	r3, r3
 800ab10:	f003 0307 	and.w	r3, r3, #7
 800ab14:	b2da      	uxtb	r2, r3
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab1e:	0c9b      	lsrs	r3, r3, #18
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	f003 0307 	and.w	r3, r3, #7
 800ab26:	b2da      	uxtb	r2, r3
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab30:	0bdb      	lsrs	r3, r3, #15
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	f003 0307 	and.w	r3, r3, #7
 800ab38:	b2da      	uxtb	r2, r3
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	691b      	ldr	r3, [r3, #16]
 800ab42:	1c5a      	adds	r2, r3, #1
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	7e1b      	ldrb	r3, [r3, #24]
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	f003 0307 	and.w	r3, r3, #7
 800ab52:	3302      	adds	r3, #2
 800ab54:	2201      	movs	r2, #1
 800ab56:	fa02 f303 	lsl.w	r3, r2, r3
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800ab5e:	fb03 f202 	mul.w	r2, r3, r2
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	7a1b      	ldrb	r3, [r3, #8]
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	f003 030f 	and.w	r3, r3, #15
 800ab70:	2201      	movs	r2, #1
 800ab72:	409a      	lsls	r2, r3
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800ab80:	0a52      	lsrs	r2, r2, #9
 800ab82:	fb03 f202 	mul.w	r2, r3, r2
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ab90:	661a      	str	r2, [r3, #96]	@ 0x60
 800ab92:	e031      	b.n	800abf8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d11d      	bne.n	800abd8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aba0:	041b      	lsls	r3, r3, #16
 800aba2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abaa:	0c1b      	lsrs	r3, r3, #16
 800abac:	431a      	orrs	r2, r3
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	691b      	ldr	r3, [r3, #16]
 800abb6:	3301      	adds	r3, #1
 800abb8:	029a      	lsls	r2, r3, #10
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800abcc:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	661a      	str	r2, [r3, #96]	@ 0x60
 800abd6:	e00f      	b.n	800abf8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4a58      	ldr	r2, [pc, #352]	@ (800ad40 <HAL_SD_GetCardCSD+0x344>)
 800abde:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abe4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2201      	movs	r2, #1
 800abf0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800abf4:	2301      	movs	r3, #1
 800abf6:	e09d      	b.n	800ad34 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abfc:	0b9b      	lsrs	r3, r3, #14
 800abfe:	b2db      	uxtb	r3, r3
 800ac00:	f003 0301 	and.w	r3, r3, #1
 800ac04:	b2da      	uxtb	r2, r3
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac0e:	09db      	lsrs	r3, r3, #7
 800ac10:	b2db      	uxtb	r3, r3
 800ac12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac16:	b2da      	uxtb	r2, r3
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac26:	b2da      	uxtb	r2, r3
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac30:	0fdb      	lsrs	r3, r3, #31
 800ac32:	b2da      	uxtb	r2, r3
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac3c:	0f5b      	lsrs	r3, r3, #29
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	f003 0303 	and.w	r3, r3, #3
 800ac44:	b2da      	uxtb	r2, r3
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac4e:	0e9b      	lsrs	r3, r3, #26
 800ac50:	b2db      	uxtb	r3, r3
 800ac52:	f003 0307 	and.w	r3, r3, #7
 800ac56:	b2da      	uxtb	r2, r3
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac60:	0d9b      	lsrs	r3, r3, #22
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	f003 030f 	and.w	r3, r3, #15
 800ac68:	b2da      	uxtb	r2, r3
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac72:	0d5b      	lsrs	r3, r3, #21
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	f003 0301 	and.w	r3, r3, #1
 800ac7a:	b2da      	uxtb	r2, r3
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	2200      	movs	r2, #0
 800ac86:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac8e:	0c1b      	lsrs	r3, r3, #16
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	f003 0301 	and.w	r3, r3, #1
 800ac96:	b2da      	uxtb	r2, r3
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aca2:	0bdb      	lsrs	r3, r3, #15
 800aca4:	b2db      	uxtb	r3, r3
 800aca6:	f003 0301 	and.w	r3, r3, #1
 800acaa:	b2da      	uxtb	r2, r3
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acb6:	0b9b      	lsrs	r3, r3, #14
 800acb8:	b2db      	uxtb	r3, r3
 800acba:	f003 0301 	and.w	r3, r3, #1
 800acbe:	b2da      	uxtb	r2, r3
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acca:	0b5b      	lsrs	r3, r3, #13
 800accc:	b2db      	uxtb	r3, r3
 800acce:	f003 0301 	and.w	r3, r3, #1
 800acd2:	b2da      	uxtb	r2, r3
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acde:	0b1b      	lsrs	r3, r3, #12
 800ace0:	b2db      	uxtb	r3, r3
 800ace2:	f003 0301 	and.w	r3, r3, #1
 800ace6:	b2da      	uxtb	r2, r3
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acf2:	0a9b      	lsrs	r3, r3, #10
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	f003 0303 	and.w	r3, r3, #3
 800acfa:	b2da      	uxtb	r2, r3
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad06:	0a1b      	lsrs	r3, r3, #8
 800ad08:	b2db      	uxtb	r3, r3
 800ad0a:	f003 0303 	and.w	r3, r3, #3
 800ad0e:	b2da      	uxtb	r2, r3
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad1a:	085b      	lsrs	r3, r3, #1
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad22:	b2da      	uxtb	r2, r3
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800ad32:	2300      	movs	r3, #0
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	370c      	adds	r7, #12
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr
 800ad40:	004005ff 	.word	0x004005ff

0800ad44 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b083      	sub	sp, #12
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ad8e:	2300      	movs	r3, #0
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	370c      	adds	r7, #12
 800ad94:	46bd      	mov	sp, r7
 800ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9a:	4770      	bx	lr

0800ad9c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b086      	sub	sp, #24
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ada4:	2300      	movs	r3, #0
 800ada6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ada8:	f107 030c 	add.w	r3, r7, #12
 800adac:	4619      	mov	r1, r3
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f000 f970 	bl	800b094 <SD_SendStatus>
 800adb4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d005      	beq.n	800adc8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	431a      	orrs	r2, r3
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	0a5b      	lsrs	r3, r3, #9
 800adcc:	f003 030f 	and.w	r3, r3, #15
 800add0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800add2:	693b      	ldr	r3, [r7, #16]
}
 800add4:	4618      	mov	r0, r3
 800add6:	3718      	adds	r7, #24
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800addc:	b5b0      	push	{r4, r5, r7, lr}
 800adde:	b094      	sub	sp, #80	@ 0x50
 800ade0:	af04      	add	r7, sp, #16
 800ade2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ade4:	2301      	movs	r3, #1
 800ade6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4618      	mov	r0, r3
 800adee:	f002 fb34 	bl	800d45a <SDIO_GetPowerState>
 800adf2:	4603      	mov	r3, r0
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d102      	bne.n	800adfe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800adf8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800adfc:	e0b8      	b.n	800af70 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae02:	2b03      	cmp	r3, #3
 800ae04:	d02f      	beq.n	800ae66 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f002 fd1b 	bl	800d846 <SDMMC_CmdSendCID>
 800ae10:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d001      	beq.n	800ae1c <SD_InitCard+0x40>
    {
      return errorstate;
 800ae18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae1a:	e0a9      	b.n	800af70 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	2100      	movs	r1, #0
 800ae22:	4618      	mov	r0, r3
 800ae24:	f002 fb5e 	bl	800d4e4 <SDIO_GetResponse>
 800ae28:	4602      	mov	r2, r0
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	2104      	movs	r1, #4
 800ae34:	4618      	mov	r0, r3
 800ae36:	f002 fb55 	bl	800d4e4 <SDIO_GetResponse>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	2108      	movs	r1, #8
 800ae46:	4618      	mov	r0, r3
 800ae48:	f002 fb4c 	bl	800d4e4 <SDIO_GetResponse>
 800ae4c:	4602      	mov	r2, r0
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	210c      	movs	r1, #12
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f002 fb43 	bl	800d4e4 <SDIO_GetResponse>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae6a:	2b03      	cmp	r3, #3
 800ae6c:	d00d      	beq.n	800ae8a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f107 020e 	add.w	r2, r7, #14
 800ae76:	4611      	mov	r1, r2
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f002 fd21 	bl	800d8c0 <SDMMC_CmdSetRelAdd>
 800ae7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d001      	beq.n	800ae8a <SD_InitCard+0xae>
    {
      return errorstate;
 800ae86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae88:	e072      	b.n	800af70 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae8e:	2b03      	cmp	r3, #3
 800ae90:	d036      	beq.n	800af00 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ae92:	89fb      	ldrh	r3, [r7, #14]
 800ae94:	461a      	mov	r2, r3
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681a      	ldr	r2, [r3, #0]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aea2:	041b      	lsls	r3, r3, #16
 800aea4:	4619      	mov	r1, r3
 800aea6:	4610      	mov	r0, r2
 800aea8:	f002 fceb 	bl	800d882 <SDMMC_CmdSendCSD>
 800aeac:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800aeae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d001      	beq.n	800aeb8 <SD_InitCard+0xdc>
    {
      return errorstate;
 800aeb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aeb6:	e05b      	b.n	800af70 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	2100      	movs	r1, #0
 800aebe:	4618      	mov	r0, r3
 800aec0:	f002 fb10 	bl	800d4e4 <SDIO_GetResponse>
 800aec4:	4602      	mov	r2, r0
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	2104      	movs	r1, #4
 800aed0:	4618      	mov	r0, r3
 800aed2:	f002 fb07 	bl	800d4e4 <SDIO_GetResponse>
 800aed6:	4602      	mov	r2, r0
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	2108      	movs	r1, #8
 800aee2:	4618      	mov	r0, r3
 800aee4:	f002 fafe 	bl	800d4e4 <SDIO_GetResponse>
 800aee8:	4602      	mov	r2, r0
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	210c      	movs	r1, #12
 800aef4:	4618      	mov	r0, r3
 800aef6:	f002 faf5 	bl	800d4e4 <SDIO_GetResponse>
 800aefa:	4602      	mov	r2, r0
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	2104      	movs	r1, #4
 800af06:	4618      	mov	r0, r3
 800af08:	f002 faec 	bl	800d4e4 <SDIO_GetResponse>
 800af0c:	4603      	mov	r3, r0
 800af0e:	0d1a      	lsrs	r2, r3, #20
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800af14:	f107 0310 	add.w	r3, r7, #16
 800af18:	4619      	mov	r1, r3
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f7ff fd6e 	bl	800a9fc <HAL_SD_GetCardCSD>
 800af20:	4603      	mov	r3, r0
 800af22:	2b00      	cmp	r3, #0
 800af24:	d002      	beq.n	800af2c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af26:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800af2a:	e021      	b.n	800af70 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6819      	ldr	r1, [r3, #0]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af34:	041b      	lsls	r3, r3, #16
 800af36:	2200      	movs	r2, #0
 800af38:	461c      	mov	r4, r3
 800af3a:	4615      	mov	r5, r2
 800af3c:	4622      	mov	r2, r4
 800af3e:	462b      	mov	r3, r5
 800af40:	4608      	mov	r0, r1
 800af42:	f002 fbdb 	bl	800d6fc <SDMMC_CmdSelDesel>
 800af46:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800af48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d001      	beq.n	800af52 <SD_InitCard+0x176>
  {
    return errorstate;
 800af4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af50:	e00e      	b.n	800af70 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681d      	ldr	r5, [r3, #0]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	466c      	mov	r4, sp
 800af5a:	f103 0210 	add.w	r2, r3, #16
 800af5e:	ca07      	ldmia	r2, {r0, r1, r2}
 800af60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800af64:	3304      	adds	r3, #4
 800af66:	cb0e      	ldmia	r3, {r1, r2, r3}
 800af68:	4628      	mov	r0, r5
 800af6a:	f002 fa1f 	bl	800d3ac <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800af6e:	2300      	movs	r3, #0
}
 800af70:	4618      	mov	r0, r3
 800af72:	3740      	adds	r7, #64	@ 0x40
 800af74:	46bd      	mov	sp, r7
 800af76:	bdb0      	pop	{r4, r5, r7, pc}

0800af78 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b086      	sub	sp, #24
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800af80:	2300      	movs	r3, #0
 800af82:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800af84:	2300      	movs	r3, #0
 800af86:	617b      	str	r3, [r7, #20]
 800af88:	2300      	movs	r3, #0
 800af8a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4618      	mov	r0, r3
 800af92:	f002 fbd6 	bl	800d742 <SDMMC_CmdGoIdleState>
 800af96:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d001      	beq.n	800afa2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	e072      	b.n	800b088 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	4618      	mov	r0, r3
 800afa8:	f002 fbe9 	bl	800d77e <SDMMC_CmdOperCond>
 800afac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d00d      	beq.n	800afd0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2200      	movs	r2, #0
 800afb8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	4618      	mov	r0, r3
 800afc0:	f002 fbbf 	bl	800d742 <SDMMC_CmdGoIdleState>
 800afc4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d004      	beq.n	800afd6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	e05b      	b.n	800b088 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2201      	movs	r2, #1
 800afd4:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800afda:	2b01      	cmp	r3, #1
 800afdc:	d137      	bne.n	800b04e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	2100      	movs	r1, #0
 800afe4:	4618      	mov	r0, r3
 800afe6:	f002 fbe9 	bl	800d7bc <SDMMC_CmdAppCommand>
 800afea:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d02d      	beq.n	800b04e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aff2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800aff6:	e047      	b.n	800b088 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	2100      	movs	r1, #0
 800affe:	4618      	mov	r0, r3
 800b000:	f002 fbdc 	bl	800d7bc <SDMMC_CmdAppCommand>
 800b004:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d001      	beq.n	800b010 <SD_PowerON+0x98>
    {
      return errorstate;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	e03b      	b.n	800b088 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	491e      	ldr	r1, [pc, #120]	@ (800b090 <SD_PowerON+0x118>)
 800b016:	4618      	mov	r0, r3
 800b018:	f002 fbf2 	bl	800d800 <SDMMC_CmdAppOperCommand>
 800b01c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d002      	beq.n	800b02a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b024:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b028:	e02e      	b.n	800b088 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	2100      	movs	r1, #0
 800b030:	4618      	mov	r0, r3
 800b032:	f002 fa57 	bl	800d4e4 <SDIO_GetResponse>
 800b036:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	0fdb      	lsrs	r3, r3, #31
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	d101      	bne.n	800b044 <SD_PowerON+0xcc>
 800b040:	2301      	movs	r3, #1
 800b042:	e000      	b.n	800b046 <SD_PowerON+0xce>
 800b044:	2300      	movs	r3, #0
 800b046:	613b      	str	r3, [r7, #16]

    count++;
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	3301      	adds	r3, #1
 800b04c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b054:	4293      	cmp	r3, r2
 800b056:	d802      	bhi.n	800b05e <SD_PowerON+0xe6>
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d0cc      	beq.n	800aff8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b064:	4293      	cmp	r3, r2
 800b066:	d902      	bls.n	800b06e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b068:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b06c:	e00c      	b.n	800b088 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b074:	2b00      	cmp	r3, #0
 800b076:	d003      	beq.n	800b080 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2201      	movs	r2, #1
 800b07c:	645a      	str	r2, [r3, #68]	@ 0x44
 800b07e:	e002      	b.n	800b086 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2200      	movs	r2, #0
 800b084:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b086:	2300      	movs	r3, #0
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3718      	adds	r7, #24
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}
 800b090:	c1100000 	.word	0xc1100000

0800b094 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b084      	sub	sp, #16
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
 800b09c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d102      	bne.n	800b0aa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b0a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b0a8:	e018      	b.n	800b0dc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681a      	ldr	r2, [r3, #0]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0b2:	041b      	lsls	r3, r3, #16
 800b0b4:	4619      	mov	r1, r3
 800b0b6:	4610      	mov	r0, r2
 800b0b8:	f002 fc23 	bl	800d902 <SDMMC_CmdSendStatus>
 800b0bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d001      	beq.n	800b0c8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	e009      	b.n	800b0dc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	2100      	movs	r1, #0
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f002 fa08 	bl	800d4e4 <SDIO_GetResponse>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b0da:	2300      	movs	r3, #0
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3710      	adds	r7, #16
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d101      	bne.n	800b0f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	e041      	b.n	800b17a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b0fc:	b2db      	uxtb	r3, r3
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d106      	bne.n	800b110 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f7f8 fcb0 	bl	8003a70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2202      	movs	r2, #2
 800b114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681a      	ldr	r2, [r3, #0]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	3304      	adds	r3, #4
 800b120:	4619      	mov	r1, r3
 800b122:	4610      	mov	r0, r2
 800b124:	f000 fd18 	bl	800bb58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2201      	movs	r2, #1
 800b12c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2201      	movs	r2, #1
 800b134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2201      	movs	r2, #1
 800b13c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2201      	movs	r2, #1
 800b144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2201      	movs	r2, #1
 800b14c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2201      	movs	r2, #1
 800b154:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2201      	movs	r2, #1
 800b15c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2201      	movs	r2, #1
 800b164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2201      	movs	r2, #1
 800b16c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2201      	movs	r2, #1
 800b174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b178:	2300      	movs	r3, #0
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3708      	adds	r7, #8
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}

0800b182 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 800b182:	b580      	push	{r7, lr}
 800b184:	b082      	sub	sp, #8
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2202      	movs	r2, #2
 800b18e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	6a1a      	ldr	r2, [r3, #32]
 800b198:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b19c:	4013      	ands	r3, r2
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d10f      	bne.n	800b1c2 <HAL_TIM_Base_DeInit+0x40>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	6a1a      	ldr	r2, [r3, #32]
 800b1a8:	f240 4344 	movw	r3, #1092	@ 0x444
 800b1ac:	4013      	ands	r3, r2
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d107      	bne.n	800b1c2 <HAL_TIM_Base_DeInit+0x40>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	681a      	ldr	r2, [r3, #0]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f022 0201 	bic.w	r2, r2, #1
 800b1c0:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f7f8 fd14 	bl	8003bf0 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2200      	movs	r2, #0
 800b204:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2200      	movs	r2, #0
 800b20c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2200      	movs	r2, #0
 800b214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2200      	movs	r2, #0
 800b21c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b220:	2300      	movs	r3, #0
}
 800b222:	4618      	mov	r0, r3
 800b224:	3708      	adds	r7, #8
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
	...

0800b22c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b085      	sub	sp, #20
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	d001      	beq.n	800b244 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b240:	2301      	movs	r3, #1
 800b242:	e03c      	b.n	800b2be <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2202      	movs	r2, #2
 800b248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4a1e      	ldr	r2, [pc, #120]	@ (800b2cc <HAL_TIM_Base_Start+0xa0>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d018      	beq.n	800b288 <HAL_TIM_Base_Start+0x5c>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b25e:	d013      	beq.n	800b288 <HAL_TIM_Base_Start+0x5c>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4a1a      	ldr	r2, [pc, #104]	@ (800b2d0 <HAL_TIM_Base_Start+0xa4>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d00e      	beq.n	800b288 <HAL_TIM_Base_Start+0x5c>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4a19      	ldr	r2, [pc, #100]	@ (800b2d4 <HAL_TIM_Base_Start+0xa8>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d009      	beq.n	800b288 <HAL_TIM_Base_Start+0x5c>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4a17      	ldr	r2, [pc, #92]	@ (800b2d8 <HAL_TIM_Base_Start+0xac>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d004      	beq.n	800b288 <HAL_TIM_Base_Start+0x5c>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	4a16      	ldr	r2, [pc, #88]	@ (800b2dc <HAL_TIM_Base_Start+0xb0>)
 800b284:	4293      	cmp	r3, r2
 800b286:	d111      	bne.n	800b2ac <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	689b      	ldr	r3, [r3, #8]
 800b28e:	f003 0307 	and.w	r3, r3, #7
 800b292:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	2b06      	cmp	r3, #6
 800b298:	d010      	beq.n	800b2bc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f042 0201 	orr.w	r2, r2, #1
 800b2a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2aa:	e007      	b.n	800b2bc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	681a      	ldr	r2, [r3, #0]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f042 0201 	orr.w	r2, r2, #1
 800b2ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b2bc:	2300      	movs	r3, #0
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3714      	adds	r7, #20
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c8:	4770      	bx	lr
 800b2ca:	bf00      	nop
 800b2cc:	40010000 	.word	0x40010000
 800b2d0:	40000400 	.word	0x40000400
 800b2d4:	40000800 	.word	0x40000800
 800b2d8:	40000c00 	.word	0x40000c00
 800b2dc:	40014000 	.word	0x40014000

0800b2e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b085      	sub	sp, #20
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b2ee:	b2db      	uxtb	r3, r3
 800b2f0:	2b01      	cmp	r3, #1
 800b2f2:	d001      	beq.n	800b2f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	e044      	b.n	800b382 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2202      	movs	r2, #2
 800b2fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	68da      	ldr	r2, [r3, #12]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f042 0201 	orr.w	r2, r2, #1
 800b30e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	4a1e      	ldr	r2, [pc, #120]	@ (800b390 <HAL_TIM_Base_Start_IT+0xb0>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d018      	beq.n	800b34c <HAL_TIM_Base_Start_IT+0x6c>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b322:	d013      	beq.n	800b34c <HAL_TIM_Base_Start_IT+0x6c>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4a1a      	ldr	r2, [pc, #104]	@ (800b394 <HAL_TIM_Base_Start_IT+0xb4>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d00e      	beq.n	800b34c <HAL_TIM_Base_Start_IT+0x6c>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	4a19      	ldr	r2, [pc, #100]	@ (800b398 <HAL_TIM_Base_Start_IT+0xb8>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d009      	beq.n	800b34c <HAL_TIM_Base_Start_IT+0x6c>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4a17      	ldr	r2, [pc, #92]	@ (800b39c <HAL_TIM_Base_Start_IT+0xbc>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d004      	beq.n	800b34c <HAL_TIM_Base_Start_IT+0x6c>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4a16      	ldr	r2, [pc, #88]	@ (800b3a0 <HAL_TIM_Base_Start_IT+0xc0>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d111      	bne.n	800b370 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	689b      	ldr	r3, [r3, #8]
 800b352:	f003 0307 	and.w	r3, r3, #7
 800b356:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2b06      	cmp	r3, #6
 800b35c:	d010      	beq.n	800b380 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	681a      	ldr	r2, [r3, #0]
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f042 0201 	orr.w	r2, r2, #1
 800b36c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b36e:	e007      	b.n	800b380 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	681a      	ldr	r2, [r3, #0]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f042 0201 	orr.w	r2, r2, #1
 800b37e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b380:	2300      	movs	r3, #0
}
 800b382:	4618      	mov	r0, r3
 800b384:	3714      	adds	r7, #20
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr
 800b38e:	bf00      	nop
 800b390:	40010000 	.word	0x40010000
 800b394:	40000400 	.word	0x40000400
 800b398:	40000800 	.word	0x40000800
 800b39c:	40000c00 	.word	0x40000c00
 800b3a0:	40014000 	.word	0x40014000

0800b3a4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b083      	sub	sp, #12
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	68da      	ldr	r2, [r3, #12]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f022 0201 	bic.w	r2, r2, #1
 800b3ba:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	6a1a      	ldr	r2, [r3, #32]
 800b3c2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b3c6:	4013      	ands	r3, r2
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d10f      	bne.n	800b3ec <HAL_TIM_Base_Stop_IT+0x48>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	6a1a      	ldr	r2, [r3, #32]
 800b3d2:	f240 4344 	movw	r3, #1092	@ 0x444
 800b3d6:	4013      	ands	r3, r2
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d107      	bne.n	800b3ec <HAL_TIM_Base_Stop_IT+0x48>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	681a      	ldr	r2, [r3, #0]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f022 0201 	bic.w	r2, r2, #1
 800b3ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800b3f4:	2300      	movs	r3, #0
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	370c      	adds	r7, #12
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr

0800b402 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b402:	b580      	push	{r7, lr}
 800b404:	b082      	sub	sp, #8
 800b406:	af00      	add	r7, sp, #0
 800b408:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d101      	bne.n	800b414 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b410:	2301      	movs	r3, #1
 800b412:	e041      	b.n	800b498 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b41a:	b2db      	uxtb	r3, r3
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d106      	bne.n	800b42e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2200      	movs	r2, #0
 800b424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f000 f839 	bl	800b4a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2202      	movs	r2, #2
 800b432:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	3304      	adds	r3, #4
 800b43e:	4619      	mov	r1, r3
 800b440:	4610      	mov	r0, r2
 800b442:	f000 fb89 	bl	800bb58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2201      	movs	r2, #1
 800b44a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2201      	movs	r2, #1
 800b452:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2201      	movs	r2, #1
 800b45a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2201      	movs	r2, #1
 800b462:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2201      	movs	r2, #1
 800b46a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2201      	movs	r2, #1
 800b472:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2201      	movs	r2, #1
 800b47a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2201      	movs	r2, #1
 800b482:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2201      	movs	r2, #1
 800b48a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2201      	movs	r2, #1
 800b492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b496:	2300      	movs	r3, #0
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3708      	adds	r7, #8
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b083      	sub	sp, #12
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b4a8:	bf00      	nop
 800b4aa:	370c      	adds	r7, #12
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr

0800b4b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d109      	bne.n	800b4d8 <HAL_TIM_PWM_Start+0x24>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b4ca:	b2db      	uxtb	r3, r3
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	bf14      	ite	ne
 800b4d0:	2301      	movne	r3, #1
 800b4d2:	2300      	moveq	r3, #0
 800b4d4:	b2db      	uxtb	r3, r3
 800b4d6:	e022      	b.n	800b51e <HAL_TIM_PWM_Start+0x6a>
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	2b04      	cmp	r3, #4
 800b4dc:	d109      	bne.n	800b4f2 <HAL_TIM_PWM_Start+0x3e>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b4e4:	b2db      	uxtb	r3, r3
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	bf14      	ite	ne
 800b4ea:	2301      	movne	r3, #1
 800b4ec:	2300      	moveq	r3, #0
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	e015      	b.n	800b51e <HAL_TIM_PWM_Start+0x6a>
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	2b08      	cmp	r3, #8
 800b4f6:	d109      	bne.n	800b50c <HAL_TIM_PWM_Start+0x58>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b4fe:	b2db      	uxtb	r3, r3
 800b500:	2b01      	cmp	r3, #1
 800b502:	bf14      	ite	ne
 800b504:	2301      	movne	r3, #1
 800b506:	2300      	moveq	r3, #0
 800b508:	b2db      	uxtb	r3, r3
 800b50a:	e008      	b.n	800b51e <HAL_TIM_PWM_Start+0x6a>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b512:	b2db      	uxtb	r3, r3
 800b514:	2b01      	cmp	r3, #1
 800b516:	bf14      	ite	ne
 800b518:	2301      	movne	r3, #1
 800b51a:	2300      	moveq	r3, #0
 800b51c:	b2db      	uxtb	r3, r3
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d001      	beq.n	800b526 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b522:	2301      	movs	r3, #1
 800b524:	e068      	b.n	800b5f8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d104      	bne.n	800b536 <HAL_TIM_PWM_Start+0x82>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2202      	movs	r2, #2
 800b530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b534:	e013      	b.n	800b55e <HAL_TIM_PWM_Start+0xaa>
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	2b04      	cmp	r3, #4
 800b53a:	d104      	bne.n	800b546 <HAL_TIM_PWM_Start+0x92>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2202      	movs	r2, #2
 800b540:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b544:	e00b      	b.n	800b55e <HAL_TIM_PWM_Start+0xaa>
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	2b08      	cmp	r3, #8
 800b54a:	d104      	bne.n	800b556 <HAL_TIM_PWM_Start+0xa2>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2202      	movs	r2, #2
 800b550:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b554:	e003      	b.n	800b55e <HAL_TIM_PWM_Start+0xaa>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2202      	movs	r2, #2
 800b55a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	2201      	movs	r2, #1
 800b564:	6839      	ldr	r1, [r7, #0]
 800b566:	4618      	mov	r0, r3
 800b568:	f000 fda8 	bl	800c0bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4a23      	ldr	r2, [pc, #140]	@ (800b600 <HAL_TIM_PWM_Start+0x14c>)
 800b572:	4293      	cmp	r3, r2
 800b574:	d107      	bne.n	800b586 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b584:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4a1d      	ldr	r2, [pc, #116]	@ (800b600 <HAL_TIM_PWM_Start+0x14c>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d018      	beq.n	800b5c2 <HAL_TIM_PWM_Start+0x10e>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b598:	d013      	beq.n	800b5c2 <HAL_TIM_PWM_Start+0x10e>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4a19      	ldr	r2, [pc, #100]	@ (800b604 <HAL_TIM_PWM_Start+0x150>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d00e      	beq.n	800b5c2 <HAL_TIM_PWM_Start+0x10e>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	4a17      	ldr	r2, [pc, #92]	@ (800b608 <HAL_TIM_PWM_Start+0x154>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d009      	beq.n	800b5c2 <HAL_TIM_PWM_Start+0x10e>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4a16      	ldr	r2, [pc, #88]	@ (800b60c <HAL_TIM_PWM_Start+0x158>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d004      	beq.n	800b5c2 <HAL_TIM_PWM_Start+0x10e>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a14      	ldr	r2, [pc, #80]	@ (800b610 <HAL_TIM_PWM_Start+0x15c>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d111      	bne.n	800b5e6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	689b      	ldr	r3, [r3, #8]
 800b5c8:	f003 0307 	and.w	r3, r3, #7
 800b5cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2b06      	cmp	r3, #6
 800b5d2:	d010      	beq.n	800b5f6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	681a      	ldr	r2, [r3, #0]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f042 0201 	orr.w	r2, r2, #1
 800b5e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5e4:	e007      	b.n	800b5f6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f042 0201 	orr.w	r2, r2, #1
 800b5f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b5f6:	2300      	movs	r3, #0
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3710      	adds	r7, #16
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}
 800b600:	40010000 	.word	0x40010000
 800b604:	40000400 	.word	0x40000400
 800b608:	40000800 	.word	0x40000800
 800b60c:	40000c00 	.word	0x40000c00
 800b610:	40014000 	.word	0x40014000

0800b614 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b084      	sub	sp, #16
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	68db      	ldr	r3, [r3, #12]
 800b622:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	691b      	ldr	r3, [r3, #16]
 800b62a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	f003 0302 	and.w	r3, r3, #2
 800b632:	2b00      	cmp	r3, #0
 800b634:	d020      	beq.n	800b678 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	f003 0302 	and.w	r3, r3, #2
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d01b      	beq.n	800b678 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f06f 0202 	mvn.w	r2, #2
 800b648:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2201      	movs	r2, #1
 800b64e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	699b      	ldr	r3, [r3, #24]
 800b656:	f003 0303 	and.w	r3, r3, #3
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d003      	beq.n	800b666 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f000 fa5b 	bl	800bb1a <HAL_TIM_IC_CaptureCallback>
 800b664:	e005      	b.n	800b672 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f000 fa4d 	bl	800bb06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f000 fa5e 	bl	800bb2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2200      	movs	r2, #0
 800b676:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	f003 0304 	and.w	r3, r3, #4
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d020      	beq.n	800b6c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	f003 0304 	and.w	r3, r3, #4
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d01b      	beq.n	800b6c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f06f 0204 	mvn.w	r2, #4
 800b694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2202      	movs	r2, #2
 800b69a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	699b      	ldr	r3, [r3, #24]
 800b6a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d003      	beq.n	800b6b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f000 fa35 	bl	800bb1a <HAL_TIM_IC_CaptureCallback>
 800b6b0:	e005      	b.n	800b6be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f000 fa27 	bl	800bb06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f000 fa38 	bl	800bb2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	f003 0308 	and.w	r3, r3, #8
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d020      	beq.n	800b710 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	f003 0308 	and.w	r3, r3, #8
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d01b      	beq.n	800b710 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f06f 0208 	mvn.w	r2, #8
 800b6e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2204      	movs	r2, #4
 800b6e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	69db      	ldr	r3, [r3, #28]
 800b6ee:	f003 0303 	and.w	r3, r3, #3
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d003      	beq.n	800b6fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 fa0f 	bl	800bb1a <HAL_TIM_IC_CaptureCallback>
 800b6fc:	e005      	b.n	800b70a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f000 fa01 	bl	800bb06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f000 fa12 	bl	800bb2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2200      	movs	r2, #0
 800b70e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	f003 0310 	and.w	r3, r3, #16
 800b716:	2b00      	cmp	r3, #0
 800b718:	d020      	beq.n	800b75c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	f003 0310 	and.w	r3, r3, #16
 800b720:	2b00      	cmp	r3, #0
 800b722:	d01b      	beq.n	800b75c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f06f 0210 	mvn.w	r2, #16
 800b72c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2208      	movs	r2, #8
 800b732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	69db      	ldr	r3, [r3, #28]
 800b73a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d003      	beq.n	800b74a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f000 f9e9 	bl	800bb1a <HAL_TIM_IC_CaptureCallback>
 800b748:	e005      	b.n	800b756 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 f9db 	bl	800bb06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f000 f9ec 	bl	800bb2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2200      	movs	r2, #0
 800b75a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	f003 0301 	and.w	r3, r3, #1
 800b762:	2b00      	cmp	r3, #0
 800b764:	d00c      	beq.n	800b780 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	f003 0301 	and.w	r3, r3, #1
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d007      	beq.n	800b780 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f06f 0201 	mvn.w	r2, #1
 800b778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f7f7 ff66 	bl	800364c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b786:	2b00      	cmp	r3, #0
 800b788:	d00c      	beq.n	800b7a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b790:	2b00      	cmp	r3, #0
 800b792:	d007      	beq.n	800b7a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800b79c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f000 fd2a 	bl	800c1f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d00c      	beq.n	800b7c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d007      	beq.n	800b7c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b7c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f000 f9bd 	bl	800bb42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	f003 0320 	and.w	r3, r3, #32
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d00c      	beq.n	800b7ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f003 0320 	and.w	r3, r3, #32
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d007      	beq.n	800b7ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f06f 0220 	mvn.w	r2, #32
 800b7e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 fcfc 	bl	800c1e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b7ec:	bf00      	nop
 800b7ee:	3710      	adds	r7, #16
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b086      	sub	sp, #24
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	60f8      	str	r0, [r7, #12]
 800b7fc:	60b9      	str	r1, [r7, #8]
 800b7fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b800:	2300      	movs	r3, #0
 800b802:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b80a:	2b01      	cmp	r3, #1
 800b80c:	d101      	bne.n	800b812 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b80e:	2302      	movs	r3, #2
 800b810:	e0ae      	b.n	800b970 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2201      	movs	r2, #1
 800b816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2b0c      	cmp	r3, #12
 800b81e:	f200 809f 	bhi.w	800b960 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b822:	a201      	add	r2, pc, #4	@ (adr r2, 800b828 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b828:	0800b85d 	.word	0x0800b85d
 800b82c:	0800b961 	.word	0x0800b961
 800b830:	0800b961 	.word	0x0800b961
 800b834:	0800b961 	.word	0x0800b961
 800b838:	0800b89d 	.word	0x0800b89d
 800b83c:	0800b961 	.word	0x0800b961
 800b840:	0800b961 	.word	0x0800b961
 800b844:	0800b961 	.word	0x0800b961
 800b848:	0800b8df 	.word	0x0800b8df
 800b84c:	0800b961 	.word	0x0800b961
 800b850:	0800b961 	.word	0x0800b961
 800b854:	0800b961 	.word	0x0800b961
 800b858:	0800b91f 	.word	0x0800b91f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	68b9      	ldr	r1, [r7, #8]
 800b862:	4618      	mov	r0, r3
 800b864:	f000 fa04 	bl	800bc70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	699a      	ldr	r2, [r3, #24]
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f042 0208 	orr.w	r2, r2, #8
 800b876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	699a      	ldr	r2, [r3, #24]
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f022 0204 	bic.w	r2, r2, #4
 800b886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	6999      	ldr	r1, [r3, #24]
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	691a      	ldr	r2, [r3, #16]
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	430a      	orrs	r2, r1
 800b898:	619a      	str	r2, [r3, #24]
      break;
 800b89a:	e064      	b.n	800b966 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	68b9      	ldr	r1, [r7, #8]
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f000 fa4a 	bl	800bd3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	699a      	ldr	r2, [r3, #24]
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b8b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	699a      	ldr	r2, [r3, #24]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b8c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	6999      	ldr	r1, [r3, #24]
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	691b      	ldr	r3, [r3, #16]
 800b8d2:	021a      	lsls	r2, r3, #8
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	430a      	orrs	r2, r1
 800b8da:	619a      	str	r2, [r3, #24]
      break;
 800b8dc:	e043      	b.n	800b966 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	68b9      	ldr	r1, [r7, #8]
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f000 fa95 	bl	800be14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	69da      	ldr	r2, [r3, #28]
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f042 0208 	orr.w	r2, r2, #8
 800b8f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	69da      	ldr	r2, [r3, #28]
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f022 0204 	bic.w	r2, r2, #4
 800b908:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	69d9      	ldr	r1, [r3, #28]
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	691a      	ldr	r2, [r3, #16]
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	430a      	orrs	r2, r1
 800b91a:	61da      	str	r2, [r3, #28]
      break;
 800b91c:	e023      	b.n	800b966 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	68b9      	ldr	r1, [r7, #8]
 800b924:	4618      	mov	r0, r3
 800b926:	f000 fadf 	bl	800bee8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	69da      	ldr	r2, [r3, #28]
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b938:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	69da      	ldr	r2, [r3, #28]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b948:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	69d9      	ldr	r1, [r3, #28]
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	691b      	ldr	r3, [r3, #16]
 800b954:	021a      	lsls	r2, r3, #8
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	430a      	orrs	r2, r1
 800b95c:	61da      	str	r2, [r3, #28]
      break;
 800b95e:	e002      	b.n	800b966 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b960:	2301      	movs	r3, #1
 800b962:	75fb      	strb	r3, [r7, #23]
      break;
 800b964:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2200      	movs	r2, #0
 800b96a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b96e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b970:	4618      	mov	r0, r3
 800b972:	3718      	adds	r7, #24
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b084      	sub	sp, #16
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b982:	2300      	movs	r3, #0
 800b984:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d101      	bne.n	800b994 <HAL_TIM_ConfigClockSource+0x1c>
 800b990:	2302      	movs	r3, #2
 800b992:	e0b4      	b.n	800bafe <HAL_TIM_ConfigClockSource+0x186>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2201      	movs	r2, #1
 800b998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2202      	movs	r2, #2
 800b9a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	689b      	ldr	r3, [r3, #8]
 800b9aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b9b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b9ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	68ba      	ldr	r2, [r7, #8]
 800b9c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b9cc:	d03e      	beq.n	800ba4c <HAL_TIM_ConfigClockSource+0xd4>
 800b9ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b9d2:	f200 8087 	bhi.w	800bae4 <HAL_TIM_ConfigClockSource+0x16c>
 800b9d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b9da:	f000 8086 	beq.w	800baea <HAL_TIM_ConfigClockSource+0x172>
 800b9de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b9e2:	d87f      	bhi.n	800bae4 <HAL_TIM_ConfigClockSource+0x16c>
 800b9e4:	2b70      	cmp	r3, #112	@ 0x70
 800b9e6:	d01a      	beq.n	800ba1e <HAL_TIM_ConfigClockSource+0xa6>
 800b9e8:	2b70      	cmp	r3, #112	@ 0x70
 800b9ea:	d87b      	bhi.n	800bae4 <HAL_TIM_ConfigClockSource+0x16c>
 800b9ec:	2b60      	cmp	r3, #96	@ 0x60
 800b9ee:	d050      	beq.n	800ba92 <HAL_TIM_ConfigClockSource+0x11a>
 800b9f0:	2b60      	cmp	r3, #96	@ 0x60
 800b9f2:	d877      	bhi.n	800bae4 <HAL_TIM_ConfigClockSource+0x16c>
 800b9f4:	2b50      	cmp	r3, #80	@ 0x50
 800b9f6:	d03c      	beq.n	800ba72 <HAL_TIM_ConfigClockSource+0xfa>
 800b9f8:	2b50      	cmp	r3, #80	@ 0x50
 800b9fa:	d873      	bhi.n	800bae4 <HAL_TIM_ConfigClockSource+0x16c>
 800b9fc:	2b40      	cmp	r3, #64	@ 0x40
 800b9fe:	d058      	beq.n	800bab2 <HAL_TIM_ConfigClockSource+0x13a>
 800ba00:	2b40      	cmp	r3, #64	@ 0x40
 800ba02:	d86f      	bhi.n	800bae4 <HAL_TIM_ConfigClockSource+0x16c>
 800ba04:	2b30      	cmp	r3, #48	@ 0x30
 800ba06:	d064      	beq.n	800bad2 <HAL_TIM_ConfigClockSource+0x15a>
 800ba08:	2b30      	cmp	r3, #48	@ 0x30
 800ba0a:	d86b      	bhi.n	800bae4 <HAL_TIM_ConfigClockSource+0x16c>
 800ba0c:	2b20      	cmp	r3, #32
 800ba0e:	d060      	beq.n	800bad2 <HAL_TIM_ConfigClockSource+0x15a>
 800ba10:	2b20      	cmp	r3, #32
 800ba12:	d867      	bhi.n	800bae4 <HAL_TIM_ConfigClockSource+0x16c>
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d05c      	beq.n	800bad2 <HAL_TIM_ConfigClockSource+0x15a>
 800ba18:	2b10      	cmp	r3, #16
 800ba1a:	d05a      	beq.n	800bad2 <HAL_TIM_ConfigClockSource+0x15a>
 800ba1c:	e062      	b.n	800bae4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ba2e:	f000 fb25 	bl	800c07c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	689b      	ldr	r3, [r3, #8]
 800ba38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ba40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	68ba      	ldr	r2, [r7, #8]
 800ba48:	609a      	str	r2, [r3, #8]
      break;
 800ba4a:	e04f      	b.n	800baec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ba5c:	f000 fb0e 	bl	800c07c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	689a      	ldr	r2, [r3, #8]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ba6e:	609a      	str	r2, [r3, #8]
      break;
 800ba70:	e03c      	b.n	800baec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba7e:	461a      	mov	r2, r3
 800ba80:	f000 fa82 	bl	800bf88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	2150      	movs	r1, #80	@ 0x50
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f000 fadb 	bl	800c046 <TIM_ITRx_SetConfig>
      break;
 800ba90:	e02c      	b.n	800baec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ba9e:	461a      	mov	r2, r3
 800baa0:	f000 faa1 	bl	800bfe6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	2160      	movs	r1, #96	@ 0x60
 800baaa:	4618      	mov	r0, r3
 800baac:	f000 facb 	bl	800c046 <TIM_ITRx_SetConfig>
      break;
 800bab0:	e01c      	b.n	800baec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800babe:	461a      	mov	r2, r3
 800bac0:	f000 fa62 	bl	800bf88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	2140      	movs	r1, #64	@ 0x40
 800baca:	4618      	mov	r0, r3
 800bacc:	f000 fabb 	bl	800c046 <TIM_ITRx_SetConfig>
      break;
 800bad0:	e00c      	b.n	800baec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681a      	ldr	r2, [r3, #0]
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	4619      	mov	r1, r3
 800badc:	4610      	mov	r0, r2
 800bade:	f000 fab2 	bl	800c046 <TIM_ITRx_SetConfig>
      break;
 800bae2:	e003      	b.n	800baec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bae4:	2301      	movs	r3, #1
 800bae6:	73fb      	strb	r3, [r7, #15]
      break;
 800bae8:	e000      	b.n	800baec <HAL_TIM_ConfigClockSource+0x174>
      break;
 800baea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2201      	movs	r2, #1
 800baf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2200      	movs	r2, #0
 800baf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bafc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3710      	adds	r7, #16
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}

0800bb06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bb06:	b480      	push	{r7}
 800bb08:	b083      	sub	sp, #12
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bb0e:	bf00      	nop
 800bb10:	370c      	adds	r7, #12
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr

0800bb1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bb1a:	b480      	push	{r7}
 800bb1c:	b083      	sub	sp, #12
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bb22:	bf00      	nop
 800bb24:	370c      	adds	r7, #12
 800bb26:	46bd      	mov	sp, r7
 800bb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2c:	4770      	bx	lr

0800bb2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bb2e:	b480      	push	{r7}
 800bb30:	b083      	sub	sp, #12
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bb36:	bf00      	nop
 800bb38:	370c      	adds	r7, #12
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr

0800bb42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bb42:	b480      	push	{r7}
 800bb44:	b083      	sub	sp, #12
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bb4a:	bf00      	nop
 800bb4c:	370c      	adds	r7, #12
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb54:	4770      	bx	lr
	...

0800bb58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b085      	sub	sp, #20
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	4a3a      	ldr	r2, [pc, #232]	@ (800bc54 <TIM_Base_SetConfig+0xfc>)
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d00f      	beq.n	800bb90 <TIM_Base_SetConfig+0x38>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb76:	d00b      	beq.n	800bb90 <TIM_Base_SetConfig+0x38>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	4a37      	ldr	r2, [pc, #220]	@ (800bc58 <TIM_Base_SetConfig+0x100>)
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d007      	beq.n	800bb90 <TIM_Base_SetConfig+0x38>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	4a36      	ldr	r2, [pc, #216]	@ (800bc5c <TIM_Base_SetConfig+0x104>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d003      	beq.n	800bb90 <TIM_Base_SetConfig+0x38>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	4a35      	ldr	r2, [pc, #212]	@ (800bc60 <TIM_Base_SetConfig+0x108>)
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d108      	bne.n	800bba2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	68fa      	ldr	r2, [r7, #12]
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	4a2b      	ldr	r2, [pc, #172]	@ (800bc54 <TIM_Base_SetConfig+0xfc>)
 800bba6:	4293      	cmp	r3, r2
 800bba8:	d01b      	beq.n	800bbe2 <TIM_Base_SetConfig+0x8a>
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bbb0:	d017      	beq.n	800bbe2 <TIM_Base_SetConfig+0x8a>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	4a28      	ldr	r2, [pc, #160]	@ (800bc58 <TIM_Base_SetConfig+0x100>)
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d013      	beq.n	800bbe2 <TIM_Base_SetConfig+0x8a>
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	4a27      	ldr	r2, [pc, #156]	@ (800bc5c <TIM_Base_SetConfig+0x104>)
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d00f      	beq.n	800bbe2 <TIM_Base_SetConfig+0x8a>
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	4a26      	ldr	r2, [pc, #152]	@ (800bc60 <TIM_Base_SetConfig+0x108>)
 800bbc6:	4293      	cmp	r3, r2
 800bbc8:	d00b      	beq.n	800bbe2 <TIM_Base_SetConfig+0x8a>
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	4a25      	ldr	r2, [pc, #148]	@ (800bc64 <TIM_Base_SetConfig+0x10c>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d007      	beq.n	800bbe2 <TIM_Base_SetConfig+0x8a>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	4a24      	ldr	r2, [pc, #144]	@ (800bc68 <TIM_Base_SetConfig+0x110>)
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d003      	beq.n	800bbe2 <TIM_Base_SetConfig+0x8a>
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	4a23      	ldr	r2, [pc, #140]	@ (800bc6c <TIM_Base_SetConfig+0x114>)
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d108      	bne.n	800bbf4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bbe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	68db      	ldr	r3, [r3, #12]
 800bbee:	68fa      	ldr	r2, [r7, #12]
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	695b      	ldr	r3, [r3, #20]
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	68fa      	ldr	r2, [r7, #12]
 800bc06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	689a      	ldr	r2, [r3, #8]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	4a0e      	ldr	r2, [pc, #56]	@ (800bc54 <TIM_Base_SetConfig+0xfc>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d103      	bne.n	800bc28 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	691a      	ldr	r2, [r3, #16]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	691b      	ldr	r3, [r3, #16]
 800bc32:	f003 0301 	and.w	r3, r3, #1
 800bc36:	2b01      	cmp	r3, #1
 800bc38:	d105      	bne.n	800bc46 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	691b      	ldr	r3, [r3, #16]
 800bc3e:	f023 0201 	bic.w	r2, r3, #1
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	611a      	str	r2, [r3, #16]
  }
}
 800bc46:	bf00      	nop
 800bc48:	3714      	adds	r7, #20
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr
 800bc52:	bf00      	nop
 800bc54:	40010000 	.word	0x40010000
 800bc58:	40000400 	.word	0x40000400
 800bc5c:	40000800 	.word	0x40000800
 800bc60:	40000c00 	.word	0x40000c00
 800bc64:	40014000 	.word	0x40014000
 800bc68:	40014400 	.word	0x40014400
 800bc6c:	40014800 	.word	0x40014800

0800bc70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b087      	sub	sp, #28
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6a1b      	ldr	r3, [r3, #32]
 800bc7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6a1b      	ldr	r3, [r3, #32]
 800bc84:	f023 0201 	bic.w	r2, r3, #1
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	685b      	ldr	r3, [r3, #4]
 800bc90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	699b      	ldr	r3, [r3, #24]
 800bc96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	f023 0303 	bic.w	r3, r3, #3
 800bca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	68fa      	ldr	r2, [r7, #12]
 800bcae:	4313      	orrs	r3, r2
 800bcb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	f023 0302 	bic.w	r3, r3, #2
 800bcb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	689b      	ldr	r3, [r3, #8]
 800bcbe:	697a      	ldr	r2, [r7, #20]
 800bcc0:	4313      	orrs	r3, r2
 800bcc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	4a1c      	ldr	r2, [pc, #112]	@ (800bd38 <TIM_OC1_SetConfig+0xc8>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d10c      	bne.n	800bce6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	f023 0308 	bic.w	r3, r3, #8
 800bcd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	68db      	ldr	r3, [r3, #12]
 800bcd8:	697a      	ldr	r2, [r7, #20]
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	f023 0304 	bic.w	r3, r3, #4
 800bce4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	4a13      	ldr	r2, [pc, #76]	@ (800bd38 <TIM_OC1_SetConfig+0xc8>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d111      	bne.n	800bd12 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bcf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bcfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	695b      	ldr	r3, [r3, #20]
 800bd02:	693a      	ldr	r2, [r7, #16]
 800bd04:	4313      	orrs	r3, r2
 800bd06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	699b      	ldr	r3, [r3, #24]
 800bd0c:	693a      	ldr	r2, [r7, #16]
 800bd0e:	4313      	orrs	r3, r2
 800bd10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	693a      	ldr	r2, [r7, #16]
 800bd16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	68fa      	ldr	r2, [r7, #12]
 800bd1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	685a      	ldr	r2, [r3, #4]
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	697a      	ldr	r2, [r7, #20]
 800bd2a:	621a      	str	r2, [r3, #32]
}
 800bd2c:	bf00      	nop
 800bd2e:	371c      	adds	r7, #28
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr
 800bd38:	40010000 	.word	0x40010000

0800bd3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b087      	sub	sp, #28
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6a1b      	ldr	r3, [r3, #32]
 800bd4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6a1b      	ldr	r3, [r3, #32]
 800bd50:	f023 0210 	bic.w	r2, r3, #16
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	699b      	ldr	r3, [r3, #24]
 800bd62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bd6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bd72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	021b      	lsls	r3, r3, #8
 800bd7a:	68fa      	ldr	r2, [r7, #12]
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	f023 0320 	bic.w	r3, r3, #32
 800bd86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	689b      	ldr	r3, [r3, #8]
 800bd8c:	011b      	lsls	r3, r3, #4
 800bd8e:	697a      	ldr	r2, [r7, #20]
 800bd90:	4313      	orrs	r3, r2
 800bd92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	4a1e      	ldr	r2, [pc, #120]	@ (800be10 <TIM_OC2_SetConfig+0xd4>)
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d10d      	bne.n	800bdb8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bda2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	68db      	ldr	r3, [r3, #12]
 800bda8:	011b      	lsls	r3, r3, #4
 800bdaa:	697a      	ldr	r2, [r7, #20]
 800bdac:	4313      	orrs	r3, r2
 800bdae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bdb6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	4a15      	ldr	r2, [pc, #84]	@ (800be10 <TIM_OC2_SetConfig+0xd4>)
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	d113      	bne.n	800bde8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bdc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bdce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	695b      	ldr	r3, [r3, #20]
 800bdd4:	009b      	lsls	r3, r3, #2
 800bdd6:	693a      	ldr	r2, [r7, #16]
 800bdd8:	4313      	orrs	r3, r2
 800bdda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	699b      	ldr	r3, [r3, #24]
 800bde0:	009b      	lsls	r3, r3, #2
 800bde2:	693a      	ldr	r2, [r7, #16]
 800bde4:	4313      	orrs	r3, r2
 800bde6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	693a      	ldr	r2, [r7, #16]
 800bdec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	68fa      	ldr	r2, [r7, #12]
 800bdf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	685a      	ldr	r2, [r3, #4]
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	697a      	ldr	r2, [r7, #20]
 800be00:	621a      	str	r2, [r3, #32]
}
 800be02:	bf00      	nop
 800be04:	371c      	adds	r7, #28
 800be06:	46bd      	mov	sp, r7
 800be08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0c:	4770      	bx	lr
 800be0e:	bf00      	nop
 800be10:	40010000 	.word	0x40010000

0800be14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800be14:	b480      	push	{r7}
 800be16:	b087      	sub	sp, #28
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6a1b      	ldr	r3, [r3, #32]
 800be22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6a1b      	ldr	r3, [r3, #32]
 800be28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	69db      	ldr	r3, [r3, #28]
 800be3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f023 0303 	bic.w	r3, r3, #3
 800be4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	68fa      	ldr	r2, [r7, #12]
 800be52:	4313      	orrs	r3, r2
 800be54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800be5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	689b      	ldr	r3, [r3, #8]
 800be62:	021b      	lsls	r3, r3, #8
 800be64:	697a      	ldr	r2, [r7, #20]
 800be66:	4313      	orrs	r3, r2
 800be68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	4a1d      	ldr	r2, [pc, #116]	@ (800bee4 <TIM_OC3_SetConfig+0xd0>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d10d      	bne.n	800be8e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800be78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	68db      	ldr	r3, [r3, #12]
 800be7e:	021b      	lsls	r3, r3, #8
 800be80:	697a      	ldr	r2, [r7, #20]
 800be82:	4313      	orrs	r3, r2
 800be84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800be8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	4a14      	ldr	r2, [pc, #80]	@ (800bee4 <TIM_OC3_SetConfig+0xd0>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d113      	bne.n	800bebe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800be9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bea4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	695b      	ldr	r3, [r3, #20]
 800beaa:	011b      	lsls	r3, r3, #4
 800beac:	693a      	ldr	r2, [r7, #16]
 800beae:	4313      	orrs	r3, r2
 800beb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	699b      	ldr	r3, [r3, #24]
 800beb6:	011b      	lsls	r3, r3, #4
 800beb8:	693a      	ldr	r2, [r7, #16]
 800beba:	4313      	orrs	r3, r2
 800bebc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	693a      	ldr	r2, [r7, #16]
 800bec2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	68fa      	ldr	r2, [r7, #12]
 800bec8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	685a      	ldr	r2, [r3, #4]
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	697a      	ldr	r2, [r7, #20]
 800bed6:	621a      	str	r2, [r3, #32]
}
 800bed8:	bf00      	nop
 800beda:	371c      	adds	r7, #28
 800bedc:	46bd      	mov	sp, r7
 800bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee2:	4770      	bx	lr
 800bee4:	40010000 	.word	0x40010000

0800bee8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bee8:	b480      	push	{r7}
 800beea:	b087      	sub	sp, #28
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6a1b      	ldr	r3, [r3, #32]
 800bef6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6a1b      	ldr	r3, [r3, #32]
 800befc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	685b      	ldr	r3, [r3, #4]
 800bf08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	69db      	ldr	r3, [r3, #28]
 800bf0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bf1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	021b      	lsls	r3, r3, #8
 800bf26:	68fa      	ldr	r2, [r7, #12]
 800bf28:	4313      	orrs	r3, r2
 800bf2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bf32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	689b      	ldr	r3, [r3, #8]
 800bf38:	031b      	lsls	r3, r3, #12
 800bf3a:	693a      	ldr	r2, [r7, #16]
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	4a10      	ldr	r2, [pc, #64]	@ (800bf84 <TIM_OC4_SetConfig+0x9c>)
 800bf44:	4293      	cmp	r3, r2
 800bf46:	d109      	bne.n	800bf5c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bf4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	695b      	ldr	r3, [r3, #20]
 800bf54:	019b      	lsls	r3, r3, #6
 800bf56:	697a      	ldr	r2, [r7, #20]
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	697a      	ldr	r2, [r7, #20]
 800bf60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	68fa      	ldr	r2, [r7, #12]
 800bf66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	685a      	ldr	r2, [r3, #4]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	693a      	ldr	r2, [r7, #16]
 800bf74:	621a      	str	r2, [r3, #32]
}
 800bf76:	bf00      	nop
 800bf78:	371c      	adds	r7, #28
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf80:	4770      	bx	lr
 800bf82:	bf00      	nop
 800bf84:	40010000 	.word	0x40010000

0800bf88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b087      	sub	sp, #28
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	60f8      	str	r0, [r7, #12]
 800bf90:	60b9      	str	r1, [r7, #8]
 800bf92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	6a1b      	ldr	r3, [r3, #32]
 800bf98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	6a1b      	ldr	r3, [r3, #32]
 800bf9e:	f023 0201 	bic.w	r2, r3, #1
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	699b      	ldr	r3, [r3, #24]
 800bfaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bfb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	011b      	lsls	r3, r3, #4
 800bfb8:	693a      	ldr	r2, [r7, #16]
 800bfba:	4313      	orrs	r3, r2
 800bfbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	f023 030a 	bic.w	r3, r3, #10
 800bfc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bfc6:	697a      	ldr	r2, [r7, #20]
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	693a      	ldr	r2, [r7, #16]
 800bfd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	697a      	ldr	r2, [r7, #20]
 800bfd8:	621a      	str	r2, [r3, #32]
}
 800bfda:	bf00      	nop
 800bfdc:	371c      	adds	r7, #28
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe4:	4770      	bx	lr

0800bfe6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bfe6:	b480      	push	{r7}
 800bfe8:	b087      	sub	sp, #28
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	60f8      	str	r0, [r7, #12]
 800bfee:	60b9      	str	r1, [r7, #8]
 800bff0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	6a1b      	ldr	r3, [r3, #32]
 800bff6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	6a1b      	ldr	r3, [r3, #32]
 800bffc:	f023 0210 	bic.w	r2, r3, #16
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	699b      	ldr	r3, [r3, #24]
 800c008:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c010:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	031b      	lsls	r3, r3, #12
 800c016:	693a      	ldr	r2, [r7, #16]
 800c018:	4313      	orrs	r3, r2
 800c01a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c022:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	011b      	lsls	r3, r3, #4
 800c028:	697a      	ldr	r2, [r7, #20]
 800c02a:	4313      	orrs	r3, r2
 800c02c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	693a      	ldr	r2, [r7, #16]
 800c032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	697a      	ldr	r2, [r7, #20]
 800c038:	621a      	str	r2, [r3, #32]
}
 800c03a:	bf00      	nop
 800c03c:	371c      	adds	r7, #28
 800c03e:	46bd      	mov	sp, r7
 800c040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c044:	4770      	bx	lr

0800c046 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c046:	b480      	push	{r7}
 800c048:	b085      	sub	sp, #20
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	6078      	str	r0, [r7, #4]
 800c04e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	689b      	ldr	r3, [r3, #8]
 800c054:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c05c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c05e:	683a      	ldr	r2, [r7, #0]
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	4313      	orrs	r3, r2
 800c064:	f043 0307 	orr.w	r3, r3, #7
 800c068:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	68fa      	ldr	r2, [r7, #12]
 800c06e:	609a      	str	r2, [r3, #8]
}
 800c070:	bf00      	nop
 800c072:	3714      	adds	r7, #20
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	4770      	bx	lr

0800c07c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c07c:	b480      	push	{r7}
 800c07e:	b087      	sub	sp, #28
 800c080:	af00      	add	r7, sp, #0
 800c082:	60f8      	str	r0, [r7, #12]
 800c084:	60b9      	str	r1, [r7, #8]
 800c086:	607a      	str	r2, [r7, #4]
 800c088:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	689b      	ldr	r3, [r3, #8]
 800c08e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c096:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	021a      	lsls	r2, r3, #8
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	431a      	orrs	r2, r3
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	697a      	ldr	r2, [r7, #20]
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	697a      	ldr	r2, [r7, #20]
 800c0ae:	609a      	str	r2, [r3, #8]
}
 800c0b0:	bf00      	nop
 800c0b2:	371c      	adds	r7, #28
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ba:	4770      	bx	lr

0800c0bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b087      	sub	sp, #28
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	60f8      	str	r0, [r7, #12]
 800c0c4:	60b9      	str	r1, [r7, #8]
 800c0c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	f003 031f 	and.w	r3, r3, #31
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	fa02 f303 	lsl.w	r3, r2, r3
 800c0d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	6a1a      	ldr	r2, [r3, #32]
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	43db      	mvns	r3, r3
 800c0de:	401a      	ands	r2, r3
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	6a1a      	ldr	r2, [r3, #32]
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	f003 031f 	and.w	r3, r3, #31
 800c0ee:	6879      	ldr	r1, [r7, #4]
 800c0f0:	fa01 f303 	lsl.w	r3, r1, r3
 800c0f4:	431a      	orrs	r2, r3
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	621a      	str	r2, [r3, #32]
}
 800c0fa:	bf00      	nop
 800c0fc:	371c      	adds	r7, #28
 800c0fe:	46bd      	mov	sp, r7
 800c100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c104:	4770      	bx	lr
	...

0800c108 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c108:	b480      	push	{r7}
 800c10a:	b085      	sub	sp, #20
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
 800c110:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c118:	2b01      	cmp	r3, #1
 800c11a:	d101      	bne.n	800c120 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c11c:	2302      	movs	r3, #2
 800c11e:	e050      	b.n	800c1c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2201      	movs	r2, #1
 800c124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2202      	movs	r2, #2
 800c12c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	685b      	ldr	r3, [r3, #4]
 800c136:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	689b      	ldr	r3, [r3, #8]
 800c13e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c146:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	68fa      	ldr	r2, [r7, #12]
 800c14e:	4313      	orrs	r3, r2
 800c150:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	68fa      	ldr	r2, [r7, #12]
 800c158:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	4a1c      	ldr	r2, [pc, #112]	@ (800c1d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c160:	4293      	cmp	r3, r2
 800c162:	d018      	beq.n	800c196 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c16c:	d013      	beq.n	800c196 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	4a18      	ldr	r2, [pc, #96]	@ (800c1d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c174:	4293      	cmp	r3, r2
 800c176:	d00e      	beq.n	800c196 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	4a16      	ldr	r2, [pc, #88]	@ (800c1d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c17e:	4293      	cmp	r3, r2
 800c180:	d009      	beq.n	800c196 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	4a15      	ldr	r2, [pc, #84]	@ (800c1dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c188:	4293      	cmp	r3, r2
 800c18a:	d004      	beq.n	800c196 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	4a13      	ldr	r2, [pc, #76]	@ (800c1e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d10c      	bne.n	800c1b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c19c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	68ba      	ldr	r2, [r7, #8]
 800c1a4:	4313      	orrs	r3, r2
 800c1a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	68ba      	ldr	r2, [r7, #8]
 800c1ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c1c0:	2300      	movs	r3, #0
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3714      	adds	r7, #20
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr
 800c1ce:	bf00      	nop
 800c1d0:	40010000 	.word	0x40010000
 800c1d4:	40000400 	.word	0x40000400
 800c1d8:	40000800 	.word	0x40000800
 800c1dc:	40000c00 	.word	0x40000c00
 800c1e0:	40014000 	.word	0x40014000

0800c1e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b083      	sub	sp, #12
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c1ec:	bf00      	nop
 800c1ee:	370c      	adds	r7, #12
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f6:	4770      	bx	lr

0800c1f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b083      	sub	sp, #12
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c200:	bf00      	nop
 800c202:	370c      	adds	r7, #12
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr

0800c20c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b082      	sub	sp, #8
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d101      	bne.n	800c21e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c21a:	2301      	movs	r3, #1
 800c21c:	e042      	b.n	800c2a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c224:	b2db      	uxtb	r3, r3
 800c226:	2b00      	cmp	r3, #0
 800c228:	d106      	bne.n	800c238 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2200      	movs	r2, #0
 800c22e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f7f7 fd16 	bl	8003c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2224      	movs	r2, #36	@ 0x24
 800c23c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	68da      	ldr	r2, [r3, #12]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c24e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f000 fe37 	bl	800cec4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	691a      	ldr	r2, [r3, #16]
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c264:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	695a      	ldr	r2, [r3, #20]
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c274:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	68da      	ldr	r2, [r3, #12]
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c284:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2200      	movs	r2, #0
 800c28a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2220      	movs	r2, #32
 800c290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2220      	movs	r2, #32
 800c298:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c2a2:	2300      	movs	r3, #0
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3708      	adds	r7, #8
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}

0800c2ac <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b082      	sub	sp, #8
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d101      	bne.n	800c2be <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	e024      	b.n	800c308 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2224      	movs	r2, #36	@ 0x24
 800c2c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	68da      	ldr	r2, [r3, #12]
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c2d4:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f7f7 fd52 	bl	8003d80 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2200      	movs	r2, #0
 800c302:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c306:	2300      	movs	r3, #0
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3708      	adds	r7, #8
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b08a      	sub	sp, #40	@ 0x28
 800c314:	af02      	add	r7, sp, #8
 800c316:	60f8      	str	r0, [r7, #12]
 800c318:	60b9      	str	r1, [r7, #8]
 800c31a:	603b      	str	r3, [r7, #0]
 800c31c:	4613      	mov	r3, r2
 800c31e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c320:	2300      	movs	r3, #0
 800c322:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c32a:	b2db      	uxtb	r3, r3
 800c32c:	2b20      	cmp	r3, #32
 800c32e:	d175      	bne.n	800c41c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d002      	beq.n	800c33c <HAL_UART_Transmit+0x2c>
 800c336:	88fb      	ldrh	r3, [r7, #6]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d101      	bne.n	800c340 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c33c:	2301      	movs	r3, #1
 800c33e:	e06e      	b.n	800c41e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	2200      	movs	r2, #0
 800c344:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	2221      	movs	r2, #33	@ 0x21
 800c34a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c34e:	f7f7 ff3f 	bl	80041d0 <HAL_GetTick>
 800c352:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	88fa      	ldrh	r2, [r7, #6]
 800c358:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	88fa      	ldrh	r2, [r7, #6]
 800c35e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	689b      	ldr	r3, [r3, #8]
 800c364:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c368:	d108      	bne.n	800c37c <HAL_UART_Transmit+0x6c>
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	691b      	ldr	r3, [r3, #16]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d104      	bne.n	800c37c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c372:	2300      	movs	r3, #0
 800c374:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	61bb      	str	r3, [r7, #24]
 800c37a:	e003      	b.n	800c384 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c380:	2300      	movs	r3, #0
 800c382:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c384:	e02e      	b.n	800c3e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	9300      	str	r3, [sp, #0]
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	2200      	movs	r2, #0
 800c38e:	2180      	movs	r1, #128	@ 0x80
 800c390:	68f8      	ldr	r0, [r7, #12]
 800c392:	f000 fb67 	bl	800ca64 <UART_WaitOnFlagUntilTimeout>
 800c396:	4603      	mov	r3, r0
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d005      	beq.n	800c3a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	2220      	movs	r2, #32
 800c3a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800c3a4:	2303      	movs	r3, #3
 800c3a6:	e03a      	b.n	800c41e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800c3a8:	69fb      	ldr	r3, [r7, #28]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d10b      	bne.n	800c3c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c3ae:	69bb      	ldr	r3, [r7, #24]
 800c3b0:	881b      	ldrh	r3, [r3, #0]
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c3bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c3be:	69bb      	ldr	r3, [r7, #24]
 800c3c0:	3302      	adds	r3, #2
 800c3c2:	61bb      	str	r3, [r7, #24]
 800c3c4:	e007      	b.n	800c3d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c3c6:	69fb      	ldr	r3, [r7, #28]
 800c3c8:	781a      	ldrb	r2, [r3, #0]
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c3d0:	69fb      	ldr	r3, [r7, #28]
 800c3d2:	3301      	adds	r3, #1
 800c3d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c3da:	b29b      	uxth	r3, r3
 800c3dc:	3b01      	subs	r3, #1
 800c3de:	b29a      	uxth	r2, r3
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c3e8:	b29b      	uxth	r3, r3
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d1cb      	bne.n	800c386 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	9300      	str	r3, [sp, #0]
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	2140      	movs	r1, #64	@ 0x40
 800c3f8:	68f8      	ldr	r0, [r7, #12]
 800c3fa:	f000 fb33 	bl	800ca64 <UART_WaitOnFlagUntilTimeout>
 800c3fe:	4603      	mov	r3, r0
 800c400:	2b00      	cmp	r3, #0
 800c402:	d005      	beq.n	800c410 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	2220      	movs	r2, #32
 800c408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800c40c:	2303      	movs	r3, #3
 800c40e:	e006      	b.n	800c41e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	2220      	movs	r2, #32
 800c414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800c418:	2300      	movs	r3, #0
 800c41a:	e000      	b.n	800c41e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800c41c:	2302      	movs	r3, #2
  }
}
 800c41e:	4618      	mov	r0, r3
 800c420:	3720      	adds	r7, #32
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}

0800c426 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c426:	b580      	push	{r7, lr}
 800c428:	b084      	sub	sp, #16
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	60f8      	str	r0, [r7, #12]
 800c42e:	60b9      	str	r1, [r7, #8]
 800c430:	4613      	mov	r3, r2
 800c432:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c43a:	b2db      	uxtb	r3, r3
 800c43c:	2b20      	cmp	r3, #32
 800c43e:	d112      	bne.n	800c466 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d002      	beq.n	800c44c <HAL_UART_Receive_IT+0x26>
 800c446:	88fb      	ldrh	r3, [r7, #6]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d101      	bne.n	800c450 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c44c:	2301      	movs	r3, #1
 800c44e:	e00b      	b.n	800c468 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2200      	movs	r2, #0
 800c454:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c456:	88fb      	ldrh	r3, [r7, #6]
 800c458:	461a      	mov	r2, r3
 800c45a:	68b9      	ldr	r1, [r7, #8]
 800c45c:	68f8      	ldr	r0, [r7, #12]
 800c45e:	f000 fb5a 	bl	800cb16 <UART_Start_Receive_IT>
 800c462:	4603      	mov	r3, r0
 800c464:	e000      	b.n	800c468 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800c466:	2302      	movs	r3, #2
  }
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3710      	adds	r7, #16
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b08c      	sub	sp, #48	@ 0x30
 800c474:	af00      	add	r7, sp, #0
 800c476:	60f8      	str	r0, [r7, #12]
 800c478:	60b9      	str	r1, [r7, #8]
 800c47a:	4613      	mov	r3, r2
 800c47c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c484:	b2db      	uxtb	r3, r3
 800c486:	2b20      	cmp	r3, #32
 800c488:	d14a      	bne.n	800c520 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d002      	beq.n	800c496 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800c490:	88fb      	ldrh	r3, [r7, #6]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d101      	bne.n	800c49a <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800c496:	2301      	movs	r3, #1
 800c498:	e043      	b.n	800c522 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	2201      	movs	r2, #1
 800c49e:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800c4a6:	88fb      	ldrh	r3, [r7, #6]
 800c4a8:	461a      	mov	r2, r3
 800c4aa:	68b9      	ldr	r1, [r7, #8]
 800c4ac:	68f8      	ldr	r0, [r7, #12]
 800c4ae:	f000 fb32 	bl	800cb16 <UART_Start_Receive_IT>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800c4b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d12c      	bne.n	800c51a <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	d125      	bne.n	800c514 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	613b      	str	r3, [r7, #16]
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	613b      	str	r3, [r7, #16]
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	685b      	ldr	r3, [r3, #4]
 800c4da:	613b      	str	r3, [r7, #16]
 800c4dc:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	330c      	adds	r3, #12
 800c4e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4e6:	69bb      	ldr	r3, [r7, #24]
 800c4e8:	e853 3f00 	ldrex	r3, [r3]
 800c4ec:	617b      	str	r3, [r7, #20]
   return(result);
 800c4ee:	697b      	ldr	r3, [r7, #20]
 800c4f0:	f043 0310 	orr.w	r3, r3, #16
 800c4f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	330c      	adds	r3, #12
 800c4fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c4fe:	627a      	str	r2, [r7, #36]	@ 0x24
 800c500:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c502:	6a39      	ldr	r1, [r7, #32]
 800c504:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c506:	e841 2300 	strex	r3, r2, [r1]
 800c50a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c50c:	69fb      	ldr	r3, [r7, #28]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d1e5      	bne.n	800c4de <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 800c512:	e002      	b.n	800c51a <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800c514:	2301      	movs	r3, #1
 800c516:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800c51a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c51e:	e000      	b.n	800c522 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800c520:	2302      	movs	r3, #2
  }
}
 800c522:	4618      	mov	r0, r3
 800c524:	3730      	adds	r7, #48	@ 0x30
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
	...

0800c52c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b0ba      	sub	sp, #232	@ 0xe8
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	68db      	ldr	r3, [r3, #12]
 800c544:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	695b      	ldr	r3, [r3, #20]
 800c54e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800c552:	2300      	movs	r3, #0
 800c554:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800c558:	2300      	movs	r3, #0
 800c55a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c55e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c562:	f003 030f 	and.w	r3, r3, #15
 800c566:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800c56a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d10f      	bne.n	800c592 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c576:	f003 0320 	and.w	r3, r3, #32
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d009      	beq.n	800c592 <HAL_UART_IRQHandler+0x66>
 800c57e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c582:	f003 0320 	and.w	r3, r3, #32
 800c586:	2b00      	cmp	r3, #0
 800c588:	d003      	beq.n	800c592 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f000 fbdc 	bl	800cd48 <UART_Receive_IT>
      return;
 800c590:	e25b      	b.n	800ca4a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c592:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c596:	2b00      	cmp	r3, #0
 800c598:	f000 80de 	beq.w	800c758 <HAL_UART_IRQHandler+0x22c>
 800c59c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c5a0:	f003 0301 	and.w	r3, r3, #1
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d106      	bne.n	800c5b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c5a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c5ac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	f000 80d1 	beq.w	800c758 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c5b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5ba:	f003 0301 	and.w	r3, r3, #1
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d00b      	beq.n	800c5da <HAL_UART_IRQHandler+0xae>
 800c5c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c5c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d005      	beq.n	800c5da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5d2:	f043 0201 	orr.w	r2, r3, #1
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c5da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5de:	f003 0304 	and.w	r3, r3, #4
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d00b      	beq.n	800c5fe <HAL_UART_IRQHandler+0xd2>
 800c5e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c5ea:	f003 0301 	and.w	r3, r3, #1
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d005      	beq.n	800c5fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5f6:	f043 0202 	orr.w	r2, r3, #2
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c5fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c602:	f003 0302 	and.w	r3, r3, #2
 800c606:	2b00      	cmp	r3, #0
 800c608:	d00b      	beq.n	800c622 <HAL_UART_IRQHandler+0xf6>
 800c60a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c60e:	f003 0301 	and.w	r3, r3, #1
 800c612:	2b00      	cmp	r3, #0
 800c614:	d005      	beq.n	800c622 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c61a:	f043 0204 	orr.w	r2, r3, #4
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c626:	f003 0308 	and.w	r3, r3, #8
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d011      	beq.n	800c652 <HAL_UART_IRQHandler+0x126>
 800c62e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c632:	f003 0320 	and.w	r3, r3, #32
 800c636:	2b00      	cmp	r3, #0
 800c638:	d105      	bne.n	800c646 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c63a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c63e:	f003 0301 	and.w	r3, r3, #1
 800c642:	2b00      	cmp	r3, #0
 800c644:	d005      	beq.n	800c652 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c64a:	f043 0208 	orr.w	r2, r3, #8
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c656:	2b00      	cmp	r3, #0
 800c658:	f000 81f2 	beq.w	800ca40 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c65c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c660:	f003 0320 	and.w	r3, r3, #32
 800c664:	2b00      	cmp	r3, #0
 800c666:	d008      	beq.n	800c67a <HAL_UART_IRQHandler+0x14e>
 800c668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c66c:	f003 0320 	and.w	r3, r3, #32
 800c670:	2b00      	cmp	r3, #0
 800c672:	d002      	beq.n	800c67a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f000 fb67 	bl	800cd48 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	695b      	ldr	r3, [r3, #20]
 800c680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c684:	2b40      	cmp	r3, #64	@ 0x40
 800c686:	bf0c      	ite	eq
 800c688:	2301      	moveq	r3, #1
 800c68a:	2300      	movne	r3, #0
 800c68c:	b2db      	uxtb	r3, r3
 800c68e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c696:	f003 0308 	and.w	r3, r3, #8
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d103      	bne.n	800c6a6 <HAL_UART_IRQHandler+0x17a>
 800c69e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d04f      	beq.n	800c746 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f000 fa6f 	bl	800cb8a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	695b      	ldr	r3, [r3, #20]
 800c6b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6b6:	2b40      	cmp	r3, #64	@ 0x40
 800c6b8:	d141      	bne.n	800c73e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	3314      	adds	r3, #20
 800c6c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c6c8:	e853 3f00 	ldrex	r3, [r3]
 800c6cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c6d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c6d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c6d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	3314      	adds	r3, #20
 800c6e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c6e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c6ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c6f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c6f6:	e841 2300 	strex	r3, r2, [r1]
 800c6fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c6fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c702:	2b00      	cmp	r3, #0
 800c704:	d1d9      	bne.n	800c6ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d013      	beq.n	800c736 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c712:	4a7e      	ldr	r2, [pc, #504]	@ (800c90c <HAL_UART_IRQHandler+0x3e0>)
 800c714:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c71a:	4618      	mov	r0, r3
 800c71c:	f7f8 fd3b 	bl	8005196 <HAL_DMA_Abort_IT>
 800c720:	4603      	mov	r3, r0
 800c722:	2b00      	cmp	r3, #0
 800c724:	d016      	beq.n	800c754 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c72a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c72c:	687a      	ldr	r2, [r7, #4]
 800c72e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c730:	4610      	mov	r0, r2
 800c732:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c734:	e00e      	b.n	800c754 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f7f6 ffdc 	bl	80036f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c73c:	e00a      	b.n	800c754 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f7f6 ffd8 	bl	80036f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c744:	e006      	b.n	800c754 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f7f6 ffd4 	bl	80036f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2200      	movs	r2, #0
 800c750:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800c752:	e175      	b.n	800ca40 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c754:	bf00      	nop
    return;
 800c756:	e173      	b.n	800ca40 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c75c:	2b01      	cmp	r3, #1
 800c75e:	f040 814f 	bne.w	800ca00 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c766:	f003 0310 	and.w	r3, r3, #16
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	f000 8148 	beq.w	800ca00 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c774:	f003 0310 	and.w	r3, r3, #16
 800c778:	2b00      	cmp	r3, #0
 800c77a:	f000 8141 	beq.w	800ca00 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c77e:	2300      	movs	r3, #0
 800c780:	60bb      	str	r3, [r7, #8]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	60bb      	str	r3, [r7, #8]
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	685b      	ldr	r3, [r3, #4]
 800c790:	60bb      	str	r3, [r7, #8]
 800c792:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	695b      	ldr	r3, [r3, #20]
 800c79a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c79e:	2b40      	cmp	r3, #64	@ 0x40
 800c7a0:	f040 80b6 	bne.w	800c910 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	685b      	ldr	r3, [r3, #4]
 800c7ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c7b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	f000 8145 	beq.w	800ca44 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c7be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	f080 813e 	bcs.w	800ca44 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c7ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7d4:	69db      	ldr	r3, [r3, #28]
 800c7d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c7da:	f000 8088 	beq.w	800c8ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	330c      	adds	r3, #12
 800c7e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c7ec:	e853 3f00 	ldrex	r3, [r3]
 800c7f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c7f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c7f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c7fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	330c      	adds	r3, #12
 800c806:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c80a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c80e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c812:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c816:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c81a:	e841 2300 	strex	r3, r2, [r1]
 800c81e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c822:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c826:	2b00      	cmp	r3, #0
 800c828:	d1d9      	bne.n	800c7de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	3314      	adds	r3, #20
 800c830:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c832:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c834:	e853 3f00 	ldrex	r3, [r3]
 800c838:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c83a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c83c:	f023 0301 	bic.w	r3, r3, #1
 800c840:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	3314      	adds	r3, #20
 800c84a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c84e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c852:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c854:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c856:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c85a:	e841 2300 	strex	r3, r2, [r1]
 800c85e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c860:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c862:	2b00      	cmp	r3, #0
 800c864:	d1e1      	bne.n	800c82a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	3314      	adds	r3, #20
 800c86c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c86e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c870:	e853 3f00 	ldrex	r3, [r3]
 800c874:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c876:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c878:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c87c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	3314      	adds	r3, #20
 800c886:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c88a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c88c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c88e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c890:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c892:	e841 2300 	strex	r3, r2, [r1]
 800c896:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c898:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d1e3      	bne.n	800c866 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2220      	movs	r2, #32
 800c8a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	330c      	adds	r3, #12
 800c8b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8b6:	e853 3f00 	ldrex	r3, [r3]
 800c8ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c8bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c8be:	f023 0310 	bic.w	r3, r3, #16
 800c8c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	330c      	adds	r3, #12
 800c8cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c8d0:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c8d2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c8d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c8d8:	e841 2300 	strex	r3, r2, [r1]
 800c8dc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c8de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d1e3      	bne.n	800c8ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f7f8 fbe4 	bl	80050b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2202      	movs	r2, #2
 800c8f2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c8fc:	b29b      	uxth	r3, r3
 800c8fe:	1ad3      	subs	r3, r2, r3
 800c900:	b29b      	uxth	r3, r3
 800c902:	4619      	mov	r1, r3
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f008 ff95 	bl	8015834 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c90a:	e09b      	b.n	800ca44 <HAL_UART_IRQHandler+0x518>
 800c90c:	0800cc51 	.word	0x0800cc51
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c918:	b29b      	uxth	r3, r3
 800c91a:	1ad3      	subs	r3, r2, r3
 800c91c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c924:	b29b      	uxth	r3, r3
 800c926:	2b00      	cmp	r3, #0
 800c928:	f000 808e 	beq.w	800ca48 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c92c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c930:	2b00      	cmp	r3, #0
 800c932:	f000 8089 	beq.w	800ca48 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	330c      	adds	r3, #12
 800c93c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c93e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c940:	e853 3f00 	ldrex	r3, [r3]
 800c944:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c948:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c94c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	330c      	adds	r3, #12
 800c956:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c95a:	647a      	str	r2, [r7, #68]	@ 0x44
 800c95c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c95e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c960:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c962:	e841 2300 	strex	r3, r2, [r1]
 800c966:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d1e3      	bne.n	800c936 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	3314      	adds	r3, #20
 800c974:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c978:	e853 3f00 	ldrex	r3, [r3]
 800c97c:	623b      	str	r3, [r7, #32]
   return(result);
 800c97e:	6a3b      	ldr	r3, [r7, #32]
 800c980:	f023 0301 	bic.w	r3, r3, #1
 800c984:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	3314      	adds	r3, #20
 800c98e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c992:	633a      	str	r2, [r7, #48]	@ 0x30
 800c994:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c996:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c998:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c99a:	e841 2300 	strex	r3, r2, [r1]
 800c99e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c9a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d1e3      	bne.n	800c96e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2220      	movs	r2, #32
 800c9aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	330c      	adds	r3, #12
 800c9ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9bc:	693b      	ldr	r3, [r7, #16]
 800c9be:	e853 3f00 	ldrex	r3, [r3]
 800c9c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	f023 0310 	bic.w	r3, r3, #16
 800c9ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	330c      	adds	r3, #12
 800c9d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c9d8:	61fa      	str	r2, [r7, #28]
 800c9da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9dc:	69b9      	ldr	r1, [r7, #24]
 800c9de:	69fa      	ldr	r2, [r7, #28]
 800c9e0:	e841 2300 	strex	r3, r2, [r1]
 800c9e4:	617b      	str	r3, [r7, #20]
   return(result);
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d1e3      	bne.n	800c9b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2202      	movs	r2, #2
 800c9f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c9f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f008 ff1b 	bl	8015834 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c9fe:	e023      	b.n	800ca48 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ca00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d009      	beq.n	800ca20 <HAL_UART_IRQHandler+0x4f4>
 800ca0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d003      	beq.n	800ca20 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f000 f92d 	bl	800cc78 <UART_Transmit_IT>
    return;
 800ca1e:	e014      	b.n	800ca4a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ca20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d00e      	beq.n	800ca4a <HAL_UART_IRQHandler+0x51e>
 800ca2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d008      	beq.n	800ca4a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f000 f96d 	bl	800cd18 <UART_EndTransmit_IT>
    return;
 800ca3e:	e004      	b.n	800ca4a <HAL_UART_IRQHandler+0x51e>
    return;
 800ca40:	bf00      	nop
 800ca42:	e002      	b.n	800ca4a <HAL_UART_IRQHandler+0x51e>
      return;
 800ca44:	bf00      	nop
 800ca46:	e000      	b.n	800ca4a <HAL_UART_IRQHandler+0x51e>
      return;
 800ca48:	bf00      	nop
  }
}
 800ca4a:	37e8      	adds	r7, #232	@ 0xe8
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}

0800ca50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ca50:	b480      	push	{r7}
 800ca52:	b083      	sub	sp, #12
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ca58:	bf00      	nop
 800ca5a:	370c      	adds	r7, #12
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca62:	4770      	bx	lr

0800ca64 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b086      	sub	sp, #24
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	60f8      	str	r0, [r7, #12]
 800ca6c:	60b9      	str	r1, [r7, #8]
 800ca6e:	603b      	str	r3, [r7, #0]
 800ca70:	4613      	mov	r3, r2
 800ca72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca74:	e03b      	b.n	800caee <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ca76:	6a3b      	ldr	r3, [r7, #32]
 800ca78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca7c:	d037      	beq.n	800caee <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ca7e:	f7f7 fba7 	bl	80041d0 <HAL_GetTick>
 800ca82:	4602      	mov	r2, r0
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	1ad3      	subs	r3, r2, r3
 800ca88:	6a3a      	ldr	r2, [r7, #32]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d302      	bcc.n	800ca94 <UART_WaitOnFlagUntilTimeout+0x30>
 800ca8e:	6a3b      	ldr	r3, [r7, #32]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d101      	bne.n	800ca98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ca94:	2303      	movs	r3, #3
 800ca96:	e03a      	b.n	800cb0e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	68db      	ldr	r3, [r3, #12]
 800ca9e:	f003 0304 	and.w	r3, r3, #4
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d023      	beq.n	800caee <UART_WaitOnFlagUntilTimeout+0x8a>
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	2b80      	cmp	r3, #128	@ 0x80
 800caaa:	d020      	beq.n	800caee <UART_WaitOnFlagUntilTimeout+0x8a>
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	2b40      	cmp	r3, #64	@ 0x40
 800cab0:	d01d      	beq.n	800caee <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f003 0308 	and.w	r3, r3, #8
 800cabc:	2b08      	cmp	r3, #8
 800cabe:	d116      	bne.n	800caee <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800cac0:	2300      	movs	r3, #0
 800cac2:	617b      	str	r3, [r7, #20]
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	617b      	str	r3, [r7, #20]
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	617b      	str	r3, [r7, #20]
 800cad4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cad6:	68f8      	ldr	r0, [r7, #12]
 800cad8:	f000 f857 	bl	800cb8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2208      	movs	r2, #8
 800cae0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	2200      	movs	r2, #0
 800cae6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800caea:	2301      	movs	r3, #1
 800caec:	e00f      	b.n	800cb0e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	681a      	ldr	r2, [r3, #0]
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	4013      	ands	r3, r2
 800caf8:	68ba      	ldr	r2, [r7, #8]
 800cafa:	429a      	cmp	r2, r3
 800cafc:	bf0c      	ite	eq
 800cafe:	2301      	moveq	r3, #1
 800cb00:	2300      	movne	r3, #0
 800cb02:	b2db      	uxtb	r3, r3
 800cb04:	461a      	mov	r2, r3
 800cb06:	79fb      	ldrb	r3, [r7, #7]
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d0b4      	beq.n	800ca76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cb0c:	2300      	movs	r3, #0
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3718      	adds	r7, #24
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}

0800cb16 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cb16:	b480      	push	{r7}
 800cb18:	b085      	sub	sp, #20
 800cb1a:	af00      	add	r7, sp, #0
 800cb1c:	60f8      	str	r0, [r7, #12]
 800cb1e:	60b9      	str	r1, [r7, #8]
 800cb20:	4613      	mov	r3, r2
 800cb22:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	68ba      	ldr	r2, [r7, #8]
 800cb28:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	88fa      	ldrh	r2, [r7, #6]
 800cb2e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	88fa      	ldrh	r2, [r7, #6]
 800cb34:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	2222      	movs	r2, #34	@ 0x22
 800cb40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	691b      	ldr	r3, [r3, #16]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d007      	beq.n	800cb5c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	68da      	ldr	r2, [r3, #12]
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cb5a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	695a      	ldr	r2, [r3, #20]
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f042 0201 	orr.w	r2, r2, #1
 800cb6a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	68da      	ldr	r2, [r3, #12]
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f042 0220 	orr.w	r2, r2, #32
 800cb7a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cb7c:	2300      	movs	r3, #0
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3714      	adds	r7, #20
 800cb82:	46bd      	mov	sp, r7
 800cb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb88:	4770      	bx	lr

0800cb8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cb8a:	b480      	push	{r7}
 800cb8c:	b095      	sub	sp, #84	@ 0x54
 800cb8e:	af00      	add	r7, sp, #0
 800cb90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	330c      	adds	r3, #12
 800cb98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb9c:	e853 3f00 	ldrex	r3, [r3]
 800cba0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cba4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cba8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	330c      	adds	r3, #12
 800cbb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cbb2:	643a      	str	r2, [r7, #64]	@ 0x40
 800cbb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbb6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cbb8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cbba:	e841 2300 	strex	r3, r2, [r1]
 800cbbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cbc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d1e5      	bne.n	800cb92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	3314      	adds	r3, #20
 800cbcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbce:	6a3b      	ldr	r3, [r7, #32]
 800cbd0:	e853 3f00 	ldrex	r3, [r3]
 800cbd4:	61fb      	str	r3, [r7, #28]
   return(result);
 800cbd6:	69fb      	ldr	r3, [r7, #28]
 800cbd8:	f023 0301 	bic.w	r3, r3, #1
 800cbdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	3314      	adds	r3, #20
 800cbe4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cbe6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cbe8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cbec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cbee:	e841 2300 	strex	r3, r2, [r1]
 800cbf2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cbf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d1e5      	bne.n	800cbc6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbfe:	2b01      	cmp	r3, #1
 800cc00:	d119      	bne.n	800cc36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	330c      	adds	r3, #12
 800cc08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	e853 3f00 	ldrex	r3, [r3]
 800cc10:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	f023 0310 	bic.w	r3, r3, #16
 800cc18:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	330c      	adds	r3, #12
 800cc20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc22:	61ba      	str	r2, [r7, #24]
 800cc24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc26:	6979      	ldr	r1, [r7, #20]
 800cc28:	69ba      	ldr	r2, [r7, #24]
 800cc2a:	e841 2300 	strex	r3, r2, [r1]
 800cc2e:	613b      	str	r3, [r7, #16]
   return(result);
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d1e5      	bne.n	800cc02 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2220      	movs	r2, #32
 800cc3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2200      	movs	r2, #0
 800cc42:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800cc44:	bf00      	nop
 800cc46:	3754      	adds	r7, #84	@ 0x54
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4e:	4770      	bx	lr

0800cc50 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b084      	sub	sp, #16
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	2200      	movs	r2, #0
 800cc62:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	2200      	movs	r2, #0
 800cc68:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cc6a:	68f8      	ldr	r0, [r7, #12]
 800cc6c:	f7f6 fd42 	bl	80036f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc70:	bf00      	nop
 800cc72:	3710      	adds	r7, #16
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}

0800cc78 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b085      	sub	sp, #20
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cc86:	b2db      	uxtb	r3, r3
 800cc88:	2b21      	cmp	r3, #33	@ 0x21
 800cc8a:	d13e      	bne.n	800cd0a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	689b      	ldr	r3, [r3, #8]
 800cc90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc94:	d114      	bne.n	800ccc0 <UART_Transmit_IT+0x48>
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	691b      	ldr	r3, [r3, #16]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d110      	bne.n	800ccc0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6a1b      	ldr	r3, [r3, #32]
 800cca2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	881b      	ldrh	r3, [r3, #0]
 800cca8:	461a      	mov	r2, r3
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ccb2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6a1b      	ldr	r3, [r3, #32]
 800ccb8:	1c9a      	adds	r2, r3, #2
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	621a      	str	r2, [r3, #32]
 800ccbe:	e008      	b.n	800ccd2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6a1b      	ldr	r3, [r3, #32]
 800ccc4:	1c59      	adds	r1, r3, #1
 800ccc6:	687a      	ldr	r2, [r7, #4]
 800ccc8:	6211      	str	r1, [r2, #32]
 800ccca:	781a      	ldrb	r2, [r3, #0]
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ccd6:	b29b      	uxth	r3, r3
 800ccd8:	3b01      	subs	r3, #1
 800ccda:	b29b      	uxth	r3, r3
 800ccdc:	687a      	ldr	r2, [r7, #4]
 800ccde:	4619      	mov	r1, r3
 800cce0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d10f      	bne.n	800cd06 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	68da      	ldr	r2, [r3, #12]
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ccf4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	68da      	ldr	r2, [r3, #12]
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cd04:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cd06:	2300      	movs	r3, #0
 800cd08:	e000      	b.n	800cd0c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cd0a:	2302      	movs	r3, #2
  }
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3714      	adds	r7, #20
 800cd10:	46bd      	mov	sp, r7
 800cd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd16:	4770      	bx	lr

0800cd18 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b082      	sub	sp, #8
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	68da      	ldr	r2, [r3, #12]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cd2e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2220      	movs	r2, #32
 800cd34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f7ff fe89 	bl	800ca50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cd3e:	2300      	movs	r3, #0
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3708      	adds	r7, #8
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}

0800cd48 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b08c      	sub	sp, #48	@ 0x30
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cd56:	b2db      	uxtb	r3, r3
 800cd58:	2b22      	cmp	r3, #34	@ 0x22
 800cd5a:	f040 80ae 	bne.w	800ceba <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	689b      	ldr	r3, [r3, #8]
 800cd62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd66:	d117      	bne.n	800cd98 <UART_Receive_IT+0x50>
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	691b      	ldr	r3, [r3, #16]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d113      	bne.n	800cd98 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800cd70:	2300      	movs	r3, #0
 800cd72:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd78:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	685b      	ldr	r3, [r3, #4]
 800cd80:	b29b      	uxth	r3, r3
 800cd82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd86:	b29a      	uxth	r2, r3
 800cd88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd8a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd90:	1c9a      	adds	r2, r3, #2
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	629a      	str	r2, [r3, #40]	@ 0x28
 800cd96:	e026      	b.n	800cde6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	689b      	ldr	r3, [r3, #8]
 800cda6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cdaa:	d007      	beq.n	800cdbc <UART_Receive_IT+0x74>
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	689b      	ldr	r3, [r3, #8]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d10a      	bne.n	800cdca <UART_Receive_IT+0x82>
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	691b      	ldr	r3, [r3, #16]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d106      	bne.n	800cdca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	685b      	ldr	r3, [r3, #4]
 800cdc2:	b2da      	uxtb	r2, r3
 800cdc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdc6:	701a      	strb	r2, [r3, #0]
 800cdc8:	e008      	b.n	800cddc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	b2db      	uxtb	r3, r3
 800cdd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cdd6:	b2da      	uxtb	r2, r3
 800cdd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdda:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cde0:	1c5a      	adds	r2, r3, #1
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cdea:	b29b      	uxth	r3, r3
 800cdec:	3b01      	subs	r3, #1
 800cdee:	b29b      	uxth	r3, r3
 800cdf0:	687a      	ldr	r2, [r7, #4]
 800cdf2:	4619      	mov	r1, r3
 800cdf4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d15d      	bne.n	800ceb6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	68da      	ldr	r2, [r3, #12]
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	f022 0220 	bic.w	r2, r2, #32
 800ce08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	68da      	ldr	r2, [r3, #12]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ce18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	695a      	ldr	r2, [r3, #20]
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	f022 0201 	bic.w	r2, r2, #1
 800ce28:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2220      	movs	r2, #32
 800ce2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2200      	movs	r2, #0
 800ce36:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce3c:	2b01      	cmp	r3, #1
 800ce3e:	d135      	bne.n	800ceac <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2200      	movs	r2, #0
 800ce44:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	330c      	adds	r3, #12
 800ce4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	e853 3f00 	ldrex	r3, [r3]
 800ce54:	613b      	str	r3, [r7, #16]
   return(result);
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	f023 0310 	bic.w	r3, r3, #16
 800ce5c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	330c      	adds	r3, #12
 800ce64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce66:	623a      	str	r2, [r7, #32]
 800ce68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce6a:	69f9      	ldr	r1, [r7, #28]
 800ce6c:	6a3a      	ldr	r2, [r7, #32]
 800ce6e:	e841 2300 	strex	r3, r2, [r1]
 800ce72:	61bb      	str	r3, [r7, #24]
   return(result);
 800ce74:	69bb      	ldr	r3, [r7, #24]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d1e5      	bne.n	800ce46 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f003 0310 	and.w	r3, r3, #16
 800ce84:	2b10      	cmp	r3, #16
 800ce86:	d10a      	bne.n	800ce9e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ce88:	2300      	movs	r3, #0
 800ce8a:	60fb      	str	r3, [r7, #12]
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	60fb      	str	r3, [r7, #12]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	685b      	ldr	r3, [r3, #4]
 800ce9a:	60fb      	str	r3, [r7, #12]
 800ce9c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cea2:	4619      	mov	r1, r3
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f008 fcc5 	bl	8015834 <HAL_UARTEx_RxEventCallback>
 800ceaa:	e002      	b.n	800ceb2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f002 fb41 	bl	800f534 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	e002      	b.n	800cebc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	e000      	b.n	800cebc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ceba:	2302      	movs	r3, #2
  }
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	3730      	adds	r7, #48	@ 0x30
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}

0800cec4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cec8:	b0c0      	sub	sp, #256	@ 0x100
 800ceca:	af00      	add	r7, sp, #0
 800cecc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ced0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	691b      	ldr	r3, [r3, #16]
 800ced8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800cedc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cee0:	68d9      	ldr	r1, [r3, #12]
 800cee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cee6:	681a      	ldr	r2, [r3, #0]
 800cee8:	ea40 0301 	orr.w	r3, r0, r1
 800ceec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ceee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cef2:	689a      	ldr	r2, [r3, #8]
 800cef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cef8:	691b      	ldr	r3, [r3, #16]
 800cefa:	431a      	orrs	r2, r3
 800cefc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf00:	695b      	ldr	r3, [r3, #20]
 800cf02:	431a      	orrs	r2, r3
 800cf04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf08:	69db      	ldr	r3, [r3, #28]
 800cf0a:	4313      	orrs	r3, r2
 800cf0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800cf10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	68db      	ldr	r3, [r3, #12]
 800cf18:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800cf1c:	f021 010c 	bic.w	r1, r1, #12
 800cf20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf24:	681a      	ldr	r2, [r3, #0]
 800cf26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cf2a:	430b      	orrs	r3, r1
 800cf2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cf2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	695b      	ldr	r3, [r3, #20]
 800cf36:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800cf3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf3e:	6999      	ldr	r1, [r3, #24]
 800cf40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf44:	681a      	ldr	r2, [r3, #0]
 800cf46:	ea40 0301 	orr.w	r3, r0, r1
 800cf4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cf4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf50:	681a      	ldr	r2, [r3, #0]
 800cf52:	4b8f      	ldr	r3, [pc, #572]	@ (800d190 <UART_SetConfig+0x2cc>)
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d005      	beq.n	800cf64 <UART_SetConfig+0xa0>
 800cf58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf5c:	681a      	ldr	r2, [r3, #0]
 800cf5e:	4b8d      	ldr	r3, [pc, #564]	@ (800d194 <UART_SetConfig+0x2d0>)
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d104      	bne.n	800cf6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cf64:	f7fc fa84 	bl	8009470 <HAL_RCC_GetPCLK2Freq>
 800cf68:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800cf6c:	e003      	b.n	800cf76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cf6e:	f7fc fa6b 	bl	8009448 <HAL_RCC_GetPCLK1Freq>
 800cf72:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cf76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf7a:	69db      	ldr	r3, [r3, #28]
 800cf7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cf80:	f040 810c 	bne.w	800d19c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cf84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cf88:	2200      	movs	r2, #0
 800cf8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800cf8e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800cf92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800cf96:	4622      	mov	r2, r4
 800cf98:	462b      	mov	r3, r5
 800cf9a:	1891      	adds	r1, r2, r2
 800cf9c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800cf9e:	415b      	adcs	r3, r3
 800cfa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cfa2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800cfa6:	4621      	mov	r1, r4
 800cfa8:	eb12 0801 	adds.w	r8, r2, r1
 800cfac:	4629      	mov	r1, r5
 800cfae:	eb43 0901 	adc.w	r9, r3, r1
 800cfb2:	f04f 0200 	mov.w	r2, #0
 800cfb6:	f04f 0300 	mov.w	r3, #0
 800cfba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cfbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cfc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cfc6:	4690      	mov	r8, r2
 800cfc8:	4699      	mov	r9, r3
 800cfca:	4623      	mov	r3, r4
 800cfcc:	eb18 0303 	adds.w	r3, r8, r3
 800cfd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800cfd4:	462b      	mov	r3, r5
 800cfd6:	eb49 0303 	adc.w	r3, r9, r3
 800cfda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cfde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cfe2:	685b      	ldr	r3, [r3, #4]
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cfea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800cfee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800cff2:	460b      	mov	r3, r1
 800cff4:	18db      	adds	r3, r3, r3
 800cff6:	653b      	str	r3, [r7, #80]	@ 0x50
 800cff8:	4613      	mov	r3, r2
 800cffa:	eb42 0303 	adc.w	r3, r2, r3
 800cffe:	657b      	str	r3, [r7, #84]	@ 0x54
 800d000:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d004:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800d008:	f7f3 fe56 	bl	8000cb8 <__aeabi_uldivmod>
 800d00c:	4602      	mov	r2, r0
 800d00e:	460b      	mov	r3, r1
 800d010:	4b61      	ldr	r3, [pc, #388]	@ (800d198 <UART_SetConfig+0x2d4>)
 800d012:	fba3 2302 	umull	r2, r3, r3, r2
 800d016:	095b      	lsrs	r3, r3, #5
 800d018:	011c      	lsls	r4, r3, #4
 800d01a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d01e:	2200      	movs	r2, #0
 800d020:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d024:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800d028:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800d02c:	4642      	mov	r2, r8
 800d02e:	464b      	mov	r3, r9
 800d030:	1891      	adds	r1, r2, r2
 800d032:	64b9      	str	r1, [r7, #72]	@ 0x48
 800d034:	415b      	adcs	r3, r3
 800d036:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d038:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800d03c:	4641      	mov	r1, r8
 800d03e:	eb12 0a01 	adds.w	sl, r2, r1
 800d042:	4649      	mov	r1, r9
 800d044:	eb43 0b01 	adc.w	fp, r3, r1
 800d048:	f04f 0200 	mov.w	r2, #0
 800d04c:	f04f 0300 	mov.w	r3, #0
 800d050:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d054:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d058:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d05c:	4692      	mov	sl, r2
 800d05e:	469b      	mov	fp, r3
 800d060:	4643      	mov	r3, r8
 800d062:	eb1a 0303 	adds.w	r3, sl, r3
 800d066:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d06a:	464b      	mov	r3, r9
 800d06c:	eb4b 0303 	adc.w	r3, fp, r3
 800d070:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d078:	685b      	ldr	r3, [r3, #4]
 800d07a:	2200      	movs	r2, #0
 800d07c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d080:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800d084:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d088:	460b      	mov	r3, r1
 800d08a:	18db      	adds	r3, r3, r3
 800d08c:	643b      	str	r3, [r7, #64]	@ 0x40
 800d08e:	4613      	mov	r3, r2
 800d090:	eb42 0303 	adc.w	r3, r2, r3
 800d094:	647b      	str	r3, [r7, #68]	@ 0x44
 800d096:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d09a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800d09e:	f7f3 fe0b 	bl	8000cb8 <__aeabi_uldivmod>
 800d0a2:	4602      	mov	r2, r0
 800d0a4:	460b      	mov	r3, r1
 800d0a6:	4611      	mov	r1, r2
 800d0a8:	4b3b      	ldr	r3, [pc, #236]	@ (800d198 <UART_SetConfig+0x2d4>)
 800d0aa:	fba3 2301 	umull	r2, r3, r3, r1
 800d0ae:	095b      	lsrs	r3, r3, #5
 800d0b0:	2264      	movs	r2, #100	@ 0x64
 800d0b2:	fb02 f303 	mul.w	r3, r2, r3
 800d0b6:	1acb      	subs	r3, r1, r3
 800d0b8:	00db      	lsls	r3, r3, #3
 800d0ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800d0be:	4b36      	ldr	r3, [pc, #216]	@ (800d198 <UART_SetConfig+0x2d4>)
 800d0c0:	fba3 2302 	umull	r2, r3, r3, r2
 800d0c4:	095b      	lsrs	r3, r3, #5
 800d0c6:	005b      	lsls	r3, r3, #1
 800d0c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800d0cc:	441c      	add	r4, r3
 800d0ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d0d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800d0dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800d0e0:	4642      	mov	r2, r8
 800d0e2:	464b      	mov	r3, r9
 800d0e4:	1891      	adds	r1, r2, r2
 800d0e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800d0e8:	415b      	adcs	r3, r3
 800d0ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d0ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d0f0:	4641      	mov	r1, r8
 800d0f2:	1851      	adds	r1, r2, r1
 800d0f4:	6339      	str	r1, [r7, #48]	@ 0x30
 800d0f6:	4649      	mov	r1, r9
 800d0f8:	414b      	adcs	r3, r1
 800d0fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0fc:	f04f 0200 	mov.w	r2, #0
 800d100:	f04f 0300 	mov.w	r3, #0
 800d104:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800d108:	4659      	mov	r1, fp
 800d10a:	00cb      	lsls	r3, r1, #3
 800d10c:	4651      	mov	r1, sl
 800d10e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d112:	4651      	mov	r1, sl
 800d114:	00ca      	lsls	r2, r1, #3
 800d116:	4610      	mov	r0, r2
 800d118:	4619      	mov	r1, r3
 800d11a:	4603      	mov	r3, r0
 800d11c:	4642      	mov	r2, r8
 800d11e:	189b      	adds	r3, r3, r2
 800d120:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d124:	464b      	mov	r3, r9
 800d126:	460a      	mov	r2, r1
 800d128:	eb42 0303 	adc.w	r3, r2, r3
 800d12c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d134:	685b      	ldr	r3, [r3, #4]
 800d136:	2200      	movs	r2, #0
 800d138:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d13c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800d140:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d144:	460b      	mov	r3, r1
 800d146:	18db      	adds	r3, r3, r3
 800d148:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d14a:	4613      	mov	r3, r2
 800d14c:	eb42 0303 	adc.w	r3, r2, r3
 800d150:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d152:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d156:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800d15a:	f7f3 fdad 	bl	8000cb8 <__aeabi_uldivmod>
 800d15e:	4602      	mov	r2, r0
 800d160:	460b      	mov	r3, r1
 800d162:	4b0d      	ldr	r3, [pc, #52]	@ (800d198 <UART_SetConfig+0x2d4>)
 800d164:	fba3 1302 	umull	r1, r3, r3, r2
 800d168:	095b      	lsrs	r3, r3, #5
 800d16a:	2164      	movs	r1, #100	@ 0x64
 800d16c:	fb01 f303 	mul.w	r3, r1, r3
 800d170:	1ad3      	subs	r3, r2, r3
 800d172:	00db      	lsls	r3, r3, #3
 800d174:	3332      	adds	r3, #50	@ 0x32
 800d176:	4a08      	ldr	r2, [pc, #32]	@ (800d198 <UART_SetConfig+0x2d4>)
 800d178:	fba2 2303 	umull	r2, r3, r2, r3
 800d17c:	095b      	lsrs	r3, r3, #5
 800d17e:	f003 0207 	and.w	r2, r3, #7
 800d182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	4422      	add	r2, r4
 800d18a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d18c:	e106      	b.n	800d39c <UART_SetConfig+0x4d8>
 800d18e:	bf00      	nop
 800d190:	40011000 	.word	0x40011000
 800d194:	40011400 	.word	0x40011400
 800d198:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d19c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d1a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d1aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800d1ae:	4642      	mov	r2, r8
 800d1b0:	464b      	mov	r3, r9
 800d1b2:	1891      	adds	r1, r2, r2
 800d1b4:	6239      	str	r1, [r7, #32]
 800d1b6:	415b      	adcs	r3, r3
 800d1b8:	627b      	str	r3, [r7, #36]	@ 0x24
 800d1ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d1be:	4641      	mov	r1, r8
 800d1c0:	1854      	adds	r4, r2, r1
 800d1c2:	4649      	mov	r1, r9
 800d1c4:	eb43 0501 	adc.w	r5, r3, r1
 800d1c8:	f04f 0200 	mov.w	r2, #0
 800d1cc:	f04f 0300 	mov.w	r3, #0
 800d1d0:	00eb      	lsls	r3, r5, #3
 800d1d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d1d6:	00e2      	lsls	r2, r4, #3
 800d1d8:	4614      	mov	r4, r2
 800d1da:	461d      	mov	r5, r3
 800d1dc:	4643      	mov	r3, r8
 800d1de:	18e3      	adds	r3, r4, r3
 800d1e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d1e4:	464b      	mov	r3, r9
 800d1e6:	eb45 0303 	adc.w	r3, r5, r3
 800d1ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d1ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d1fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d1fe:	f04f 0200 	mov.w	r2, #0
 800d202:	f04f 0300 	mov.w	r3, #0
 800d206:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800d20a:	4629      	mov	r1, r5
 800d20c:	008b      	lsls	r3, r1, #2
 800d20e:	4621      	mov	r1, r4
 800d210:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d214:	4621      	mov	r1, r4
 800d216:	008a      	lsls	r2, r1, #2
 800d218:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d21c:	f7f3 fd4c 	bl	8000cb8 <__aeabi_uldivmod>
 800d220:	4602      	mov	r2, r0
 800d222:	460b      	mov	r3, r1
 800d224:	4b60      	ldr	r3, [pc, #384]	@ (800d3a8 <UART_SetConfig+0x4e4>)
 800d226:	fba3 2302 	umull	r2, r3, r3, r2
 800d22a:	095b      	lsrs	r3, r3, #5
 800d22c:	011c      	lsls	r4, r3, #4
 800d22e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d232:	2200      	movs	r2, #0
 800d234:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d238:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d23c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800d240:	4642      	mov	r2, r8
 800d242:	464b      	mov	r3, r9
 800d244:	1891      	adds	r1, r2, r2
 800d246:	61b9      	str	r1, [r7, #24]
 800d248:	415b      	adcs	r3, r3
 800d24a:	61fb      	str	r3, [r7, #28]
 800d24c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d250:	4641      	mov	r1, r8
 800d252:	1851      	adds	r1, r2, r1
 800d254:	6139      	str	r1, [r7, #16]
 800d256:	4649      	mov	r1, r9
 800d258:	414b      	adcs	r3, r1
 800d25a:	617b      	str	r3, [r7, #20]
 800d25c:	f04f 0200 	mov.w	r2, #0
 800d260:	f04f 0300 	mov.w	r3, #0
 800d264:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d268:	4659      	mov	r1, fp
 800d26a:	00cb      	lsls	r3, r1, #3
 800d26c:	4651      	mov	r1, sl
 800d26e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d272:	4651      	mov	r1, sl
 800d274:	00ca      	lsls	r2, r1, #3
 800d276:	4610      	mov	r0, r2
 800d278:	4619      	mov	r1, r3
 800d27a:	4603      	mov	r3, r0
 800d27c:	4642      	mov	r2, r8
 800d27e:	189b      	adds	r3, r3, r2
 800d280:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d284:	464b      	mov	r3, r9
 800d286:	460a      	mov	r2, r1
 800d288:	eb42 0303 	adc.w	r3, r2, r3
 800d28c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d294:	685b      	ldr	r3, [r3, #4]
 800d296:	2200      	movs	r2, #0
 800d298:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d29a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d29c:	f04f 0200 	mov.w	r2, #0
 800d2a0:	f04f 0300 	mov.w	r3, #0
 800d2a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800d2a8:	4649      	mov	r1, r9
 800d2aa:	008b      	lsls	r3, r1, #2
 800d2ac:	4641      	mov	r1, r8
 800d2ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d2b2:	4641      	mov	r1, r8
 800d2b4:	008a      	lsls	r2, r1, #2
 800d2b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800d2ba:	f7f3 fcfd 	bl	8000cb8 <__aeabi_uldivmod>
 800d2be:	4602      	mov	r2, r0
 800d2c0:	460b      	mov	r3, r1
 800d2c2:	4611      	mov	r1, r2
 800d2c4:	4b38      	ldr	r3, [pc, #224]	@ (800d3a8 <UART_SetConfig+0x4e4>)
 800d2c6:	fba3 2301 	umull	r2, r3, r3, r1
 800d2ca:	095b      	lsrs	r3, r3, #5
 800d2cc:	2264      	movs	r2, #100	@ 0x64
 800d2ce:	fb02 f303 	mul.w	r3, r2, r3
 800d2d2:	1acb      	subs	r3, r1, r3
 800d2d4:	011b      	lsls	r3, r3, #4
 800d2d6:	3332      	adds	r3, #50	@ 0x32
 800d2d8:	4a33      	ldr	r2, [pc, #204]	@ (800d3a8 <UART_SetConfig+0x4e4>)
 800d2da:	fba2 2303 	umull	r2, r3, r2, r3
 800d2de:	095b      	lsrs	r3, r3, #5
 800d2e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d2e4:	441c      	add	r4, r3
 800d2e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	673b      	str	r3, [r7, #112]	@ 0x70
 800d2ee:	677a      	str	r2, [r7, #116]	@ 0x74
 800d2f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800d2f4:	4642      	mov	r2, r8
 800d2f6:	464b      	mov	r3, r9
 800d2f8:	1891      	adds	r1, r2, r2
 800d2fa:	60b9      	str	r1, [r7, #8]
 800d2fc:	415b      	adcs	r3, r3
 800d2fe:	60fb      	str	r3, [r7, #12]
 800d300:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d304:	4641      	mov	r1, r8
 800d306:	1851      	adds	r1, r2, r1
 800d308:	6039      	str	r1, [r7, #0]
 800d30a:	4649      	mov	r1, r9
 800d30c:	414b      	adcs	r3, r1
 800d30e:	607b      	str	r3, [r7, #4]
 800d310:	f04f 0200 	mov.w	r2, #0
 800d314:	f04f 0300 	mov.w	r3, #0
 800d318:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d31c:	4659      	mov	r1, fp
 800d31e:	00cb      	lsls	r3, r1, #3
 800d320:	4651      	mov	r1, sl
 800d322:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d326:	4651      	mov	r1, sl
 800d328:	00ca      	lsls	r2, r1, #3
 800d32a:	4610      	mov	r0, r2
 800d32c:	4619      	mov	r1, r3
 800d32e:	4603      	mov	r3, r0
 800d330:	4642      	mov	r2, r8
 800d332:	189b      	adds	r3, r3, r2
 800d334:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d336:	464b      	mov	r3, r9
 800d338:	460a      	mov	r2, r1
 800d33a:	eb42 0303 	adc.w	r3, r2, r3
 800d33e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d344:	685b      	ldr	r3, [r3, #4]
 800d346:	2200      	movs	r2, #0
 800d348:	663b      	str	r3, [r7, #96]	@ 0x60
 800d34a:	667a      	str	r2, [r7, #100]	@ 0x64
 800d34c:	f04f 0200 	mov.w	r2, #0
 800d350:	f04f 0300 	mov.w	r3, #0
 800d354:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800d358:	4649      	mov	r1, r9
 800d35a:	008b      	lsls	r3, r1, #2
 800d35c:	4641      	mov	r1, r8
 800d35e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d362:	4641      	mov	r1, r8
 800d364:	008a      	lsls	r2, r1, #2
 800d366:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800d36a:	f7f3 fca5 	bl	8000cb8 <__aeabi_uldivmod>
 800d36e:	4602      	mov	r2, r0
 800d370:	460b      	mov	r3, r1
 800d372:	4b0d      	ldr	r3, [pc, #52]	@ (800d3a8 <UART_SetConfig+0x4e4>)
 800d374:	fba3 1302 	umull	r1, r3, r3, r2
 800d378:	095b      	lsrs	r3, r3, #5
 800d37a:	2164      	movs	r1, #100	@ 0x64
 800d37c:	fb01 f303 	mul.w	r3, r1, r3
 800d380:	1ad3      	subs	r3, r2, r3
 800d382:	011b      	lsls	r3, r3, #4
 800d384:	3332      	adds	r3, #50	@ 0x32
 800d386:	4a08      	ldr	r2, [pc, #32]	@ (800d3a8 <UART_SetConfig+0x4e4>)
 800d388:	fba2 2303 	umull	r2, r3, r2, r3
 800d38c:	095b      	lsrs	r3, r3, #5
 800d38e:	f003 020f 	and.w	r2, r3, #15
 800d392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	4422      	add	r2, r4
 800d39a:	609a      	str	r2, [r3, #8]
}
 800d39c:	bf00      	nop
 800d39e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d3a8:	51eb851f 	.word	0x51eb851f

0800d3ac <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800d3ac:	b084      	sub	sp, #16
 800d3ae:	b480      	push	{r7}
 800d3b0:	b085      	sub	sp, #20
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	6078      	str	r0, [r7, #4]
 800d3b6:	f107 001c 	add.w	r0, r7, #28
 800d3ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d3be:	2300      	movs	r3, #0
 800d3c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d3c2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d3c4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d3c6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800d3ca:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d3cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800d3ce:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d3d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800d3d2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d3d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800d3d6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d3d8:	68fa      	ldr	r2, [r7, #12]
 800d3da:	4313      	orrs	r3, r2
 800d3dc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	685b      	ldr	r3, [r3, #4]
 800d3e2:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800d3e6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d3ea:	68fa      	ldr	r2, [r7, #12]
 800d3ec:	431a      	orrs	r2, r3
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d3f2:	2300      	movs	r3, #0
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3714      	adds	r7, #20
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fe:	b004      	add	sp, #16
 800d400:	4770      	bx	lr

0800d402 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800d402:	b480      	push	{r7}
 800d404:	b083      	sub	sp, #12
 800d406:	af00      	add	r7, sp, #0
 800d408:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800d410:	4618      	mov	r0, r3
 800d412:	370c      	adds	r7, #12
 800d414:	46bd      	mov	sp, r7
 800d416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41a:	4770      	bx	lr

0800d41c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800d41c:	b480      	push	{r7}
 800d41e:	b083      	sub	sp, #12
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
 800d424:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	681a      	ldr	r2, [r3, #0]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800d430:	2300      	movs	r3, #0
}
 800d432:	4618      	mov	r0, r3
 800d434:	370c      	adds	r7, #12
 800d436:	46bd      	mov	sp, r7
 800d438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43c:	4770      	bx	lr

0800d43e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800d43e:	b480      	push	{r7}
 800d440:	b083      	sub	sp, #12
 800d442:	af00      	add	r7, sp, #0
 800d444:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2203      	movs	r2, #3
 800d44a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d44c:	2300      	movs	r3, #0
}
 800d44e:	4618      	mov	r0, r3
 800d450:	370c      	adds	r7, #12
 800d452:	46bd      	mov	sp, r7
 800d454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d458:	4770      	bx	lr

0800d45a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800d45a:	b480      	push	{r7}
 800d45c:	b083      	sub	sp, #12
 800d45e:	af00      	add	r7, sp, #0
 800d460:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	f003 0303 	and.w	r3, r3, #3
}
 800d46a:	4618      	mov	r0, r3
 800d46c:	370c      	adds	r7, #12
 800d46e:	46bd      	mov	sp, r7
 800d470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d474:	4770      	bx	lr

0800d476 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800d476:	b480      	push	{r7}
 800d478:	b085      	sub	sp, #20
 800d47a:	af00      	add	r7, sp, #0
 800d47c:	6078      	str	r0, [r7, #4]
 800d47e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d480:	2300      	movs	r3, #0
 800d482:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	681a      	ldr	r2, [r3, #0]
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d494:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d49a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d4a0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d4a2:	68fa      	ldr	r2, [r7, #12]
 800d4a4:	4313      	orrs	r3, r2
 800d4a6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	68db      	ldr	r3, [r3, #12]
 800d4ac:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800d4b0:	f023 030f 	bic.w	r3, r3, #15
 800d4b4:	68fa      	ldr	r2, [r7, #12]
 800d4b6:	431a      	orrs	r2, r3
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d4bc:	2300      	movs	r3, #0
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3714      	adds	r7, #20
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c8:	4770      	bx	lr

0800d4ca <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800d4ca:	b480      	push	{r7}
 800d4cc:	b083      	sub	sp, #12
 800d4ce:	af00      	add	r7, sp, #0
 800d4d0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	691b      	ldr	r3, [r3, #16]
 800d4d6:	b2db      	uxtb	r3, r3
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	370c      	adds	r7, #12
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e2:	4770      	bx	lr

0800d4e4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b085      	sub	sp, #20
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	3314      	adds	r3, #20
 800d4f2:	461a      	mov	r2, r3
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	4413      	add	r3, r2
 800d4f8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681b      	ldr	r3, [r3, #0]
}  
 800d4fe:	4618      	mov	r0, r3
 800d500:	3714      	adds	r7, #20
 800d502:	46bd      	mov	sp, r7
 800d504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d508:	4770      	bx	lr

0800d50a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800d50a:	b480      	push	{r7}
 800d50c:	b085      	sub	sp, #20
 800d50e:	af00      	add	r7, sp, #0
 800d510:	6078      	str	r0, [r7, #4]
 800d512:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d514:	2300      	movs	r3, #0
 800d516:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	681a      	ldr	r2, [r3, #0]
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	685a      	ldr	r2, [r3, #4]
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d530:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d536:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d53c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d53e:	68fa      	ldr	r2, [r7, #12]
 800d540:	4313      	orrs	r3, r2
 800d542:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d548:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	431a      	orrs	r2, r3
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800d554:	2300      	movs	r3, #0

}
 800d556:	4618      	mov	r0, r3
 800d558:	3714      	adds	r7, #20
 800d55a:	46bd      	mov	sp, r7
 800d55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d560:	4770      	bx	lr

0800d562 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800d562:	b580      	push	{r7, lr}
 800d564:	b088      	sub	sp, #32
 800d566:	af00      	add	r7, sp, #0
 800d568:	6078      	str	r0, [r7, #4]
 800d56a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d570:	2310      	movs	r3, #16
 800d572:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d574:	2340      	movs	r3, #64	@ 0x40
 800d576:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d578:	2300      	movs	r3, #0
 800d57a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d57c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d580:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d582:	f107 0308 	add.w	r3, r7, #8
 800d586:	4619      	mov	r1, r3
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f7ff ff74 	bl	800d476 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800d58e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d592:	2110      	movs	r1, #16
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f000 f9d7 	bl	800d948 <SDMMC_GetCmdResp1>
 800d59a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d59c:	69fb      	ldr	r3, [r7, #28]
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3720      	adds	r7, #32
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}

0800d5a6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d5a6:	b580      	push	{r7, lr}
 800d5a8:	b088      	sub	sp, #32
 800d5aa:	af00      	add	r7, sp, #0
 800d5ac:	6078      	str	r0, [r7, #4]
 800d5ae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d5b4:	2311      	movs	r3, #17
 800d5b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d5b8:	2340      	movs	r3, #64	@ 0x40
 800d5ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d5c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d5c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d5c6:	f107 0308 	add.w	r3, r7, #8
 800d5ca:	4619      	mov	r1, r3
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f7ff ff52 	bl	800d476 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d5d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d5d6:	2111      	movs	r1, #17
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	f000 f9b5 	bl	800d948 <SDMMC_GetCmdResp1>
 800d5de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5e0:	69fb      	ldr	r3, [r7, #28]
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3720      	adds	r7, #32
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}

0800d5ea <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d5ea:	b580      	push	{r7, lr}
 800d5ec:	b088      	sub	sp, #32
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	6078      	str	r0, [r7, #4]
 800d5f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d5f8:	2312      	movs	r3, #18
 800d5fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d5fc:	2340      	movs	r3, #64	@ 0x40
 800d5fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d600:	2300      	movs	r3, #0
 800d602:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d604:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d608:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d60a:	f107 0308 	add.w	r3, r7, #8
 800d60e:	4619      	mov	r1, r3
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f7ff ff30 	bl	800d476 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d61a:	2112      	movs	r1, #18
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f000 f993 	bl	800d948 <SDMMC_GetCmdResp1>
 800d622:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d624:	69fb      	ldr	r3, [r7, #28]
}
 800d626:	4618      	mov	r0, r3
 800d628:	3720      	adds	r7, #32
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}

0800d62e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d62e:	b580      	push	{r7, lr}
 800d630:	b088      	sub	sp, #32
 800d632:	af00      	add	r7, sp, #0
 800d634:	6078      	str	r0, [r7, #4]
 800d636:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d63c:	2318      	movs	r3, #24
 800d63e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d640:	2340      	movs	r3, #64	@ 0x40
 800d642:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d644:	2300      	movs	r3, #0
 800d646:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d648:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d64c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d64e:	f107 0308 	add.w	r3, r7, #8
 800d652:	4619      	mov	r1, r3
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f7ff ff0e 	bl	800d476 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d65a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d65e:	2118      	movs	r1, #24
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f000 f971 	bl	800d948 <SDMMC_GetCmdResp1>
 800d666:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d668:	69fb      	ldr	r3, [r7, #28]
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3720      	adds	r7, #32
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}

0800d672 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d672:	b580      	push	{r7, lr}
 800d674:	b088      	sub	sp, #32
 800d676:	af00      	add	r7, sp, #0
 800d678:	6078      	str	r0, [r7, #4]
 800d67a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d680:	2319      	movs	r3, #25
 800d682:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d684:	2340      	movs	r3, #64	@ 0x40
 800d686:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d688:	2300      	movs	r3, #0
 800d68a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d68c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d690:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d692:	f107 0308 	add.w	r3, r7, #8
 800d696:	4619      	mov	r1, r3
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f7ff feec 	bl	800d476 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d69e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d6a2:	2119      	movs	r1, #25
 800d6a4:	6878      	ldr	r0, [r7, #4]
 800d6a6:	f000 f94f 	bl	800d948 <SDMMC_GetCmdResp1>
 800d6aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6ac:	69fb      	ldr	r3, [r7, #28]
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3720      	adds	r7, #32
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}
	...

0800d6b8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b088      	sub	sp, #32
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d6c4:	230c      	movs	r3, #12
 800d6c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d6c8:	2340      	movs	r3, #64	@ 0x40
 800d6ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d6d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d6d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d6d6:	f107 0308 	add.w	r3, r7, #8
 800d6da:	4619      	mov	r1, r3
 800d6dc:	6878      	ldr	r0, [r7, #4]
 800d6de:	f7ff feca 	bl	800d476 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800d6e2:	4a05      	ldr	r2, [pc, #20]	@ (800d6f8 <SDMMC_CmdStopTransfer+0x40>)
 800d6e4:	210c      	movs	r1, #12
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	f000 f92e 	bl	800d948 <SDMMC_GetCmdResp1>
 800d6ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6ee:	69fb      	ldr	r3, [r7, #28]
}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	3720      	adds	r7, #32
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}
 800d6f8:	05f5e100 	.word	0x05f5e100

0800d6fc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b08a      	sub	sp, #40	@ 0x28
 800d700:	af00      	add	r7, sp, #0
 800d702:	60f8      	str	r0, [r7, #12]
 800d704:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d70c:	2307      	movs	r3, #7
 800d70e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d710:	2340      	movs	r3, #64	@ 0x40
 800d712:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d714:	2300      	movs	r3, #0
 800d716:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d718:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d71c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d71e:	f107 0310 	add.w	r3, r7, #16
 800d722:	4619      	mov	r1, r3
 800d724:	68f8      	ldr	r0, [r7, #12]
 800d726:	f7ff fea6 	bl	800d476 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800d72a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d72e:	2107      	movs	r1, #7
 800d730:	68f8      	ldr	r0, [r7, #12]
 800d732:	f000 f909 	bl	800d948 <SDMMC_GetCmdResp1>
 800d736:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800d738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3728      	adds	r7, #40	@ 0x28
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}

0800d742 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800d742:	b580      	push	{r7, lr}
 800d744:	b088      	sub	sp, #32
 800d746:	af00      	add	r7, sp, #0
 800d748:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d74a:	2300      	movs	r3, #0
 800d74c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d74e:	2300      	movs	r3, #0
 800d750:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800d752:	2300      	movs	r3, #0
 800d754:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d756:	2300      	movs	r3, #0
 800d758:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d75a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d75e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d760:	f107 0308 	add.w	r3, r7, #8
 800d764:	4619      	mov	r1, r3
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f7ff fe85 	bl	800d476 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f000 fb23 	bl	800ddb8 <SDMMC_GetCmdError>
 800d772:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d774:	69fb      	ldr	r3, [r7, #28]
}
 800d776:	4618      	mov	r0, r3
 800d778:	3720      	adds	r7, #32
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}

0800d77e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800d77e:	b580      	push	{r7, lr}
 800d780:	b088      	sub	sp, #32
 800d782:	af00      	add	r7, sp, #0
 800d784:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d786:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800d78a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d78c:	2308      	movs	r3, #8
 800d78e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d790:	2340      	movs	r3, #64	@ 0x40
 800d792:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d794:	2300      	movs	r3, #0
 800d796:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d798:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d79c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d79e:	f107 0308 	add.w	r3, r7, #8
 800d7a2:	4619      	mov	r1, r3
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	f7ff fe66 	bl	800d476 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f000 fab6 	bl	800dd1c <SDMMC_GetCmdResp7>
 800d7b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7b2:	69fb      	ldr	r3, [r7, #28]
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3720      	adds	r7, #32
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}

0800d7bc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b088      	sub	sp, #32
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
 800d7c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d7ca:	2337      	movs	r3, #55	@ 0x37
 800d7cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d7ce:	2340      	movs	r3, #64	@ 0x40
 800d7d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d7d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d7da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d7dc:	f107 0308 	add.w	r3, r7, #8
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f7ff fe47 	bl	800d476 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800d7e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d7ec:	2137      	movs	r1, #55	@ 0x37
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f000 f8aa 	bl	800d948 <SDMMC_GetCmdResp1>
 800d7f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7f6:	69fb      	ldr	r3, [r7, #28]
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	3720      	adds	r7, #32
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}

0800d800 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b088      	sub	sp, #32
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d810:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d814:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d816:	2329      	movs	r3, #41	@ 0x29
 800d818:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d81a:	2340      	movs	r3, #64	@ 0x40
 800d81c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d81e:	2300      	movs	r3, #0
 800d820:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d822:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d826:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d828:	f107 0308 	add.w	r3, r7, #8
 800d82c:	4619      	mov	r1, r3
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f7ff fe21 	bl	800d476 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f000 f9bd 	bl	800dbb4 <SDMMC_GetCmdResp3>
 800d83a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d83c:	69fb      	ldr	r3, [r7, #28]
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3720      	adds	r7, #32
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}

0800d846 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800d846:	b580      	push	{r7, lr}
 800d848:	b088      	sub	sp, #32
 800d84a:	af00      	add	r7, sp, #0
 800d84c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d84e:	2300      	movs	r3, #0
 800d850:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d852:	2302      	movs	r3, #2
 800d854:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d856:	23c0      	movs	r3, #192	@ 0xc0
 800d858:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d85a:	2300      	movs	r3, #0
 800d85c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d85e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d862:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d864:	f107 0308 	add.w	r3, r7, #8
 800d868:	4619      	mov	r1, r3
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f7ff fe03 	bl	800d476 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f000 f957 	bl	800db24 <SDMMC_GetCmdResp2>
 800d876:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d878:	69fb      	ldr	r3, [r7, #28]
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	3720      	adds	r7, #32
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}

0800d882 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d882:	b580      	push	{r7, lr}
 800d884:	b088      	sub	sp, #32
 800d886:	af00      	add	r7, sp, #0
 800d888:	6078      	str	r0, [r7, #4]
 800d88a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d890:	2309      	movs	r3, #9
 800d892:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d894:	23c0      	movs	r3, #192	@ 0xc0
 800d896:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d898:	2300      	movs	r3, #0
 800d89a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d89c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d8a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d8a2:	f107 0308 	add.w	r3, r7, #8
 800d8a6:	4619      	mov	r1, r3
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f7ff fde4 	bl	800d476 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f000 f938 	bl	800db24 <SDMMC_GetCmdResp2>
 800d8b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8b6:	69fb      	ldr	r3, [r7, #28]
}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	3720      	adds	r7, #32
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bd80      	pop	{r7, pc}

0800d8c0 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b088      	sub	sp, #32
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d8ce:	2303      	movs	r3, #3
 800d8d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d8d2:	2340      	movs	r3, #64	@ 0x40
 800d8d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d8da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d8de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d8e0:	f107 0308 	add.w	r3, r7, #8
 800d8e4:	4619      	mov	r1, r3
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f7ff fdc5 	bl	800d476 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d8ec:	683a      	ldr	r2, [r7, #0]
 800d8ee:	2103      	movs	r1, #3
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	f000 f99d 	bl	800dc30 <SDMMC_GetCmdResp6>
 800d8f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8f8:	69fb      	ldr	r3, [r7, #28]
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3720      	adds	r7, #32
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}

0800d902 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d902:	b580      	push	{r7, lr}
 800d904:	b088      	sub	sp, #32
 800d906:	af00      	add	r7, sp, #0
 800d908:	6078      	str	r0, [r7, #4]
 800d90a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d910:	230d      	movs	r3, #13
 800d912:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d914:	2340      	movs	r3, #64	@ 0x40
 800d916:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d918:	2300      	movs	r3, #0
 800d91a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d91c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d920:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d922:	f107 0308 	add.w	r3, r7, #8
 800d926:	4619      	mov	r1, r3
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f7ff fda4 	bl	800d476 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800d92e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d932:	210d      	movs	r1, #13
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f000 f807 	bl	800d948 <SDMMC_GetCmdResp1>
 800d93a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d93c:	69fb      	ldr	r3, [r7, #28]
}
 800d93e:	4618      	mov	r0, r3
 800d940:	3720      	adds	r7, #32
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}
	...

0800d948 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b088      	sub	sp, #32
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	60f8      	str	r0, [r7, #12]
 800d950:	460b      	mov	r3, r1
 800d952:	607a      	str	r2, [r7, #4]
 800d954:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d956:	4b70      	ldr	r3, [pc, #448]	@ (800db18 <SDMMC_GetCmdResp1+0x1d0>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	4a70      	ldr	r2, [pc, #448]	@ (800db1c <SDMMC_GetCmdResp1+0x1d4>)
 800d95c:	fba2 2303 	umull	r2, r3, r2, r3
 800d960:	0a5a      	lsrs	r2, r3, #9
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	fb02 f303 	mul.w	r3, r2, r3
 800d968:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d96a:	69fb      	ldr	r3, [r7, #28]
 800d96c:	1e5a      	subs	r2, r3, #1
 800d96e:	61fa      	str	r2, [r7, #28]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d102      	bne.n	800d97a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d974:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d978:	e0c9      	b.n	800db0e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d97e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d980:	69bb      	ldr	r3, [r7, #24]
 800d982:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d986:	2b00      	cmp	r3, #0
 800d988:	d0ef      	beq.n	800d96a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d98a:	69bb      	ldr	r3, [r7, #24]
 800d98c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d990:	2b00      	cmp	r3, #0
 800d992:	d1ea      	bne.n	800d96a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d998:	f003 0304 	and.w	r3, r3, #4
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d004      	beq.n	800d9aa <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	2204      	movs	r2, #4
 800d9a4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d9a6:	2304      	movs	r3, #4
 800d9a8:	e0b1      	b.n	800db0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9ae:	f003 0301 	and.w	r3, r3, #1
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d004      	beq.n	800d9c0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	2201      	movs	r2, #1
 800d9ba:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d9bc:	2301      	movs	r3, #1
 800d9be:	e0a6      	b.n	800db0e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	22c5      	movs	r2, #197	@ 0xc5
 800d9c4:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d9c6:	68f8      	ldr	r0, [r7, #12]
 800d9c8:	f7ff fd7f 	bl	800d4ca <SDIO_GetCommandResponse>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	461a      	mov	r2, r3
 800d9d0:	7afb      	ldrb	r3, [r7, #11]
 800d9d2:	4293      	cmp	r3, r2
 800d9d4:	d001      	beq.n	800d9da <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d9d6:	2301      	movs	r3, #1
 800d9d8:	e099      	b.n	800db0e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d9da:	2100      	movs	r1, #0
 800d9dc:	68f8      	ldr	r0, [r7, #12]
 800d9de:	f7ff fd81 	bl	800d4e4 <SDIO_GetResponse>
 800d9e2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d9e4:	697a      	ldr	r2, [r7, #20]
 800d9e6:	4b4e      	ldr	r3, [pc, #312]	@ (800db20 <SDMMC_GetCmdResp1+0x1d8>)
 800d9e8:	4013      	ands	r3, r2
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d101      	bne.n	800d9f2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	e08d      	b.n	800db0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	da02      	bge.n	800d9fe <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d9f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d9fc:	e087      	b.n	800db0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800da04:	2b00      	cmp	r3, #0
 800da06:	d001      	beq.n	800da0c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800da08:	2340      	movs	r3, #64	@ 0x40
 800da0a:	e080      	b.n	800db0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800da12:	2b00      	cmp	r3, #0
 800da14:	d001      	beq.n	800da1a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800da16:	2380      	movs	r3, #128	@ 0x80
 800da18:	e079      	b.n	800db0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800da20:	2b00      	cmp	r3, #0
 800da22:	d002      	beq.n	800da2a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800da24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800da28:	e071      	b.n	800db0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800da30:	2b00      	cmp	r3, #0
 800da32:	d002      	beq.n	800da3a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800da34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800da38:	e069      	b.n	800db0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800da40:	2b00      	cmp	r3, #0
 800da42:	d002      	beq.n	800da4a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800da44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800da48:	e061      	b.n	800db0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800da50:	2b00      	cmp	r3, #0
 800da52:	d002      	beq.n	800da5a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800da54:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800da58:	e059      	b.n	800db0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800da60:	2b00      	cmp	r3, #0
 800da62:	d002      	beq.n	800da6a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800da64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800da68:	e051      	b.n	800db0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800da70:	2b00      	cmp	r3, #0
 800da72:	d002      	beq.n	800da7a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800da74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800da78:	e049      	b.n	800db0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800da80:	2b00      	cmp	r3, #0
 800da82:	d002      	beq.n	800da8a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800da84:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800da88:	e041      	b.n	800db0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800da8a:	697b      	ldr	r3, [r7, #20]
 800da8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800da90:	2b00      	cmp	r3, #0
 800da92:	d002      	beq.n	800da9a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800da94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800da98:	e039      	b.n	800db0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d002      	beq.n	800daaa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800daa4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800daa8:	e031      	b.n	800db0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d002      	beq.n	800daba <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800dab4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800dab8:	e029      	b.n	800db0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d002      	beq.n	800daca <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800dac4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800dac8:	e021      	b.n	800db0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d002      	beq.n	800dada <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800dad4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800dad8:	e019      	b.n	800db0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d002      	beq.n	800daea <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800dae4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800dae8:	e011      	b.n	800db0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d002      	beq.n	800dafa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800daf4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800daf8:	e009      	b.n	800db0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	f003 0308 	and.w	r3, r3, #8
 800db00:	2b00      	cmp	r3, #0
 800db02:	d002      	beq.n	800db0a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800db04:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800db08:	e001      	b.n	800db0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800db0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800db0e:	4618      	mov	r0, r3
 800db10:	3720      	adds	r7, #32
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}
 800db16:	bf00      	nop
 800db18:	20000010 	.word	0x20000010
 800db1c:	10624dd3 	.word	0x10624dd3
 800db20:	fdffe008 	.word	0xfdffe008

0800db24 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800db24:	b480      	push	{r7}
 800db26:	b085      	sub	sp, #20
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800db2c:	4b1f      	ldr	r3, [pc, #124]	@ (800dbac <SDMMC_GetCmdResp2+0x88>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	4a1f      	ldr	r2, [pc, #124]	@ (800dbb0 <SDMMC_GetCmdResp2+0x8c>)
 800db32:	fba2 2303 	umull	r2, r3, r2, r3
 800db36:	0a5b      	lsrs	r3, r3, #9
 800db38:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db3c:	fb02 f303 	mul.w	r3, r2, r3
 800db40:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	1e5a      	subs	r2, r3, #1
 800db46:	60fa      	str	r2, [r7, #12]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d102      	bne.n	800db52 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db4c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800db50:	e026      	b.n	800dba0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db56:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d0ef      	beq.n	800db42 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d1ea      	bne.n	800db42 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db70:	f003 0304 	and.w	r3, r3, #4
 800db74:	2b00      	cmp	r3, #0
 800db76:	d004      	beq.n	800db82 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2204      	movs	r2, #4
 800db7c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800db7e:	2304      	movs	r3, #4
 800db80:	e00e      	b.n	800dba0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db86:	f003 0301 	and.w	r3, r3, #1
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d004      	beq.n	800db98 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	2201      	movs	r2, #1
 800db92:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db94:	2301      	movs	r3, #1
 800db96:	e003      	b.n	800dba0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	22c5      	movs	r2, #197	@ 0xc5
 800db9c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800db9e:	2300      	movs	r3, #0
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	3714      	adds	r7, #20
 800dba4:	46bd      	mov	sp, r7
 800dba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbaa:	4770      	bx	lr
 800dbac:	20000010 	.word	0x20000010
 800dbb0:	10624dd3 	.word	0x10624dd3

0800dbb4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800dbb4:	b480      	push	{r7}
 800dbb6:	b085      	sub	sp, #20
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dbbc:	4b1a      	ldr	r3, [pc, #104]	@ (800dc28 <SDMMC_GetCmdResp3+0x74>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	4a1a      	ldr	r2, [pc, #104]	@ (800dc2c <SDMMC_GetCmdResp3+0x78>)
 800dbc2:	fba2 2303 	umull	r2, r3, r2, r3
 800dbc6:	0a5b      	lsrs	r3, r3, #9
 800dbc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dbcc:	fb02 f303 	mul.w	r3, r2, r3
 800dbd0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	1e5a      	subs	r2, r3, #1
 800dbd6:	60fa      	str	r2, [r7, #12]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d102      	bne.n	800dbe2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dbdc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dbe0:	e01b      	b.n	800dc1a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbe6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d0ef      	beq.n	800dbd2 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dbf2:	68bb      	ldr	r3, [r7, #8]
 800dbf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d1ea      	bne.n	800dbd2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc00:	f003 0304 	and.w	r3, r3, #4
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d004      	beq.n	800dc12 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2204      	movs	r2, #4
 800dc0c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dc0e:	2304      	movs	r3, #4
 800dc10:	e003      	b.n	800dc1a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	22c5      	movs	r2, #197	@ 0xc5
 800dc16:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dc18:	2300      	movs	r3, #0
}
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	3714      	adds	r7, #20
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc24:	4770      	bx	lr
 800dc26:	bf00      	nop
 800dc28:	20000010 	.word	0x20000010
 800dc2c:	10624dd3 	.word	0x10624dd3

0800dc30 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b088      	sub	sp, #32
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	60f8      	str	r0, [r7, #12]
 800dc38:	460b      	mov	r3, r1
 800dc3a:	607a      	str	r2, [r7, #4]
 800dc3c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dc3e:	4b35      	ldr	r3, [pc, #212]	@ (800dd14 <SDMMC_GetCmdResp6+0xe4>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	4a35      	ldr	r2, [pc, #212]	@ (800dd18 <SDMMC_GetCmdResp6+0xe8>)
 800dc44:	fba2 2303 	umull	r2, r3, r2, r3
 800dc48:	0a5b      	lsrs	r3, r3, #9
 800dc4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc4e:	fb02 f303 	mul.w	r3, r2, r3
 800dc52:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800dc54:	69fb      	ldr	r3, [r7, #28]
 800dc56:	1e5a      	subs	r2, r3, #1
 800dc58:	61fa      	str	r2, [r7, #28]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d102      	bne.n	800dc64 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dc5e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dc62:	e052      	b.n	800dd0a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc68:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dc6a:	69bb      	ldr	r3, [r7, #24]
 800dc6c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d0ef      	beq.n	800dc54 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dc74:	69bb      	ldr	r3, [r7, #24]
 800dc76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d1ea      	bne.n	800dc54 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc82:	f003 0304 	and.w	r3, r3, #4
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d004      	beq.n	800dc94 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	2204      	movs	r2, #4
 800dc8e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dc90:	2304      	movs	r3, #4
 800dc92:	e03a      	b.n	800dd0a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc98:	f003 0301 	and.w	r3, r3, #1
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d004      	beq.n	800dcaa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	2201      	movs	r2, #1
 800dca4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dca6:	2301      	movs	r3, #1
 800dca8:	e02f      	b.n	800dd0a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800dcaa:	68f8      	ldr	r0, [r7, #12]
 800dcac:	f7ff fc0d 	bl	800d4ca <SDIO_GetCommandResponse>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	461a      	mov	r2, r3
 800dcb4:	7afb      	ldrb	r3, [r7, #11]
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	d001      	beq.n	800dcbe <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dcba:	2301      	movs	r3, #1
 800dcbc:	e025      	b.n	800dd0a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	22c5      	movs	r2, #197	@ 0xc5
 800dcc2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800dcc4:	2100      	movs	r1, #0
 800dcc6:	68f8      	ldr	r0, [r7, #12]
 800dcc8:	f7ff fc0c 	bl	800d4e4 <SDIO_GetResponse>
 800dccc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d106      	bne.n	800dce6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800dcd8:	697b      	ldr	r3, [r7, #20]
 800dcda:	0c1b      	lsrs	r3, r3, #16
 800dcdc:	b29a      	uxth	r2, r3
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800dce2:	2300      	movs	r3, #0
 800dce4:	e011      	b.n	800dd0a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800dce6:	697b      	ldr	r3, [r7, #20]
 800dce8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d002      	beq.n	800dcf6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dcf0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800dcf4:	e009      	b.n	800dd0a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d002      	beq.n	800dd06 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dd00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dd04:	e001      	b.n	800dd0a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dd06:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3720      	adds	r7, #32
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
 800dd12:	bf00      	nop
 800dd14:	20000010 	.word	0x20000010
 800dd18:	10624dd3 	.word	0x10624dd3

0800dd1c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b085      	sub	sp, #20
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dd24:	4b22      	ldr	r3, [pc, #136]	@ (800ddb0 <SDMMC_GetCmdResp7+0x94>)
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	4a22      	ldr	r2, [pc, #136]	@ (800ddb4 <SDMMC_GetCmdResp7+0x98>)
 800dd2a:	fba2 2303 	umull	r2, r3, r2, r3
 800dd2e:	0a5b      	lsrs	r3, r3, #9
 800dd30:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dd34:	fb02 f303 	mul.w	r3, r2, r3
 800dd38:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	1e5a      	subs	r2, r3, #1
 800dd3e:	60fa      	str	r2, [r7, #12]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d102      	bne.n	800dd4a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dd44:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dd48:	e02c      	b.n	800dda4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd4e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d0ef      	beq.n	800dd3a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d1ea      	bne.n	800dd3a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd68:	f003 0304 	and.w	r3, r3, #4
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d004      	beq.n	800dd7a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2204      	movs	r2, #4
 800dd74:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dd76:	2304      	movs	r3, #4
 800dd78:	e014      	b.n	800dda4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd7e:	f003 0301 	and.w	r3, r3, #1
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d004      	beq.n	800dd90 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2201      	movs	r2, #1
 800dd8a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	e009      	b.n	800dda4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d002      	beq.n	800dda2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2240      	movs	r2, #64	@ 0x40
 800dda0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dda2:	2300      	movs	r3, #0
  
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	3714      	adds	r7, #20
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddae:	4770      	bx	lr
 800ddb0:	20000010 	.word	0x20000010
 800ddb4:	10624dd3 	.word	0x10624dd3

0800ddb8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800ddb8:	b480      	push	{r7}
 800ddba:	b085      	sub	sp, #20
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ddc0:	4b11      	ldr	r3, [pc, #68]	@ (800de08 <SDMMC_GetCmdError+0x50>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	4a11      	ldr	r2, [pc, #68]	@ (800de0c <SDMMC_GetCmdError+0x54>)
 800ddc6:	fba2 2303 	umull	r2, r3, r2, r3
 800ddca:	0a5b      	lsrs	r3, r3, #9
 800ddcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ddd0:	fb02 f303 	mul.w	r3, r2, r3
 800ddd4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	1e5a      	subs	r2, r3, #1
 800ddda:	60fa      	str	r2, [r7, #12]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d102      	bne.n	800dde6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dde0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dde4:	e009      	b.n	800ddfa <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ddea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d0f1      	beq.n	800ddd6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	22c5      	movs	r2, #197	@ 0xc5
 800ddf6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800ddf8:	2300      	movs	r3, #0
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	3714      	adds	r7, #20
 800ddfe:	46bd      	mov	sp, r7
 800de00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de04:	4770      	bx	lr
 800de06:	bf00      	nop
 800de08:	20000010 	.word	0x20000010
 800de0c:	10624dd3 	.word	0x10624dd3

0800de10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800de10:	b084      	sub	sp, #16
 800de12:	b580      	push	{r7, lr}
 800de14:	b084      	sub	sp, #16
 800de16:	af00      	add	r7, sp, #0
 800de18:	6078      	str	r0, [r7, #4]
 800de1a:	f107 001c 	add.w	r0, r7, #28
 800de1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800de22:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800de26:	2b01      	cmp	r3, #1
 800de28:	d123      	bne.n	800de72 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de2e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	68db      	ldr	r3, [r3, #12]
 800de3a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800de3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800de42:	687a      	ldr	r2, [r7, #4]
 800de44:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	68db      	ldr	r3, [r3, #12]
 800de4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800de52:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800de56:	2b01      	cmp	r3, #1
 800de58:	d105      	bne.n	800de66 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	68db      	ldr	r3, [r3, #12]
 800de5e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f001 fb32 	bl	800f4d0 <USB_CoreReset>
 800de6c:	4603      	mov	r3, r0
 800de6e:	73fb      	strb	r3, [r7, #15]
 800de70:	e01b      	b.n	800deaa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	68db      	ldr	r3, [r3, #12]
 800de76:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800de7e:	6878      	ldr	r0, [r7, #4]
 800de80:	f001 fb26 	bl	800f4d0 <USB_CoreReset>
 800de84:	4603      	mov	r3, r0
 800de86:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800de88:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d106      	bne.n	800de9e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de94:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	639a      	str	r2, [r3, #56]	@ 0x38
 800de9c:	e005      	b.n	800deaa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dea2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800deaa:	7fbb      	ldrb	r3, [r7, #30]
 800deac:	2b01      	cmp	r3, #1
 800deae:	d10b      	bne.n	800dec8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	689b      	ldr	r3, [r3, #8]
 800deb4:	f043 0206 	orr.w	r2, r3, #6
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	689b      	ldr	r3, [r3, #8]
 800dec0:	f043 0220 	orr.w	r2, r3, #32
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800dec8:	7bfb      	ldrb	r3, [r7, #15]
}
 800deca:	4618      	mov	r0, r3
 800decc:	3710      	adds	r7, #16
 800dece:	46bd      	mov	sp, r7
 800ded0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ded4:	b004      	add	sp, #16
 800ded6:	4770      	bx	lr

0800ded8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ded8:	b480      	push	{r7}
 800deda:	b087      	sub	sp, #28
 800dedc:	af00      	add	r7, sp, #0
 800dede:	60f8      	str	r0, [r7, #12]
 800dee0:	60b9      	str	r1, [r7, #8]
 800dee2:	4613      	mov	r3, r2
 800dee4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800dee6:	79fb      	ldrb	r3, [r7, #7]
 800dee8:	2b02      	cmp	r3, #2
 800deea:	d165      	bne.n	800dfb8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	4a41      	ldr	r2, [pc, #260]	@ (800dff4 <USB_SetTurnaroundTime+0x11c>)
 800def0:	4293      	cmp	r3, r2
 800def2:	d906      	bls.n	800df02 <USB_SetTurnaroundTime+0x2a>
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	4a40      	ldr	r2, [pc, #256]	@ (800dff8 <USB_SetTurnaroundTime+0x120>)
 800def8:	4293      	cmp	r3, r2
 800defa:	d202      	bcs.n	800df02 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800defc:	230f      	movs	r3, #15
 800defe:	617b      	str	r3, [r7, #20]
 800df00:	e062      	b.n	800dfc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	4a3c      	ldr	r2, [pc, #240]	@ (800dff8 <USB_SetTurnaroundTime+0x120>)
 800df06:	4293      	cmp	r3, r2
 800df08:	d306      	bcc.n	800df18 <USB_SetTurnaroundTime+0x40>
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	4a3b      	ldr	r2, [pc, #236]	@ (800dffc <USB_SetTurnaroundTime+0x124>)
 800df0e:	4293      	cmp	r3, r2
 800df10:	d202      	bcs.n	800df18 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800df12:	230e      	movs	r3, #14
 800df14:	617b      	str	r3, [r7, #20]
 800df16:	e057      	b.n	800dfc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	4a38      	ldr	r2, [pc, #224]	@ (800dffc <USB_SetTurnaroundTime+0x124>)
 800df1c:	4293      	cmp	r3, r2
 800df1e:	d306      	bcc.n	800df2e <USB_SetTurnaroundTime+0x56>
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	4a37      	ldr	r2, [pc, #220]	@ (800e000 <USB_SetTurnaroundTime+0x128>)
 800df24:	4293      	cmp	r3, r2
 800df26:	d202      	bcs.n	800df2e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800df28:	230d      	movs	r3, #13
 800df2a:	617b      	str	r3, [r7, #20]
 800df2c:	e04c      	b.n	800dfc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	4a33      	ldr	r2, [pc, #204]	@ (800e000 <USB_SetTurnaroundTime+0x128>)
 800df32:	4293      	cmp	r3, r2
 800df34:	d306      	bcc.n	800df44 <USB_SetTurnaroundTime+0x6c>
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	4a32      	ldr	r2, [pc, #200]	@ (800e004 <USB_SetTurnaroundTime+0x12c>)
 800df3a:	4293      	cmp	r3, r2
 800df3c:	d802      	bhi.n	800df44 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800df3e:	230c      	movs	r3, #12
 800df40:	617b      	str	r3, [r7, #20]
 800df42:	e041      	b.n	800dfc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	4a2f      	ldr	r2, [pc, #188]	@ (800e004 <USB_SetTurnaroundTime+0x12c>)
 800df48:	4293      	cmp	r3, r2
 800df4a:	d906      	bls.n	800df5a <USB_SetTurnaroundTime+0x82>
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	4a2e      	ldr	r2, [pc, #184]	@ (800e008 <USB_SetTurnaroundTime+0x130>)
 800df50:	4293      	cmp	r3, r2
 800df52:	d802      	bhi.n	800df5a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800df54:	230b      	movs	r3, #11
 800df56:	617b      	str	r3, [r7, #20]
 800df58:	e036      	b.n	800dfc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	4a2a      	ldr	r2, [pc, #168]	@ (800e008 <USB_SetTurnaroundTime+0x130>)
 800df5e:	4293      	cmp	r3, r2
 800df60:	d906      	bls.n	800df70 <USB_SetTurnaroundTime+0x98>
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	4a29      	ldr	r2, [pc, #164]	@ (800e00c <USB_SetTurnaroundTime+0x134>)
 800df66:	4293      	cmp	r3, r2
 800df68:	d802      	bhi.n	800df70 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800df6a:	230a      	movs	r3, #10
 800df6c:	617b      	str	r3, [r7, #20]
 800df6e:	e02b      	b.n	800dfc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	4a26      	ldr	r2, [pc, #152]	@ (800e00c <USB_SetTurnaroundTime+0x134>)
 800df74:	4293      	cmp	r3, r2
 800df76:	d906      	bls.n	800df86 <USB_SetTurnaroundTime+0xae>
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	4a25      	ldr	r2, [pc, #148]	@ (800e010 <USB_SetTurnaroundTime+0x138>)
 800df7c:	4293      	cmp	r3, r2
 800df7e:	d202      	bcs.n	800df86 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800df80:	2309      	movs	r3, #9
 800df82:	617b      	str	r3, [r7, #20]
 800df84:	e020      	b.n	800dfc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	4a21      	ldr	r2, [pc, #132]	@ (800e010 <USB_SetTurnaroundTime+0x138>)
 800df8a:	4293      	cmp	r3, r2
 800df8c:	d306      	bcc.n	800df9c <USB_SetTurnaroundTime+0xc4>
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	4a20      	ldr	r2, [pc, #128]	@ (800e014 <USB_SetTurnaroundTime+0x13c>)
 800df92:	4293      	cmp	r3, r2
 800df94:	d802      	bhi.n	800df9c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800df96:	2308      	movs	r3, #8
 800df98:	617b      	str	r3, [r7, #20]
 800df9a:	e015      	b.n	800dfc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	4a1d      	ldr	r2, [pc, #116]	@ (800e014 <USB_SetTurnaroundTime+0x13c>)
 800dfa0:	4293      	cmp	r3, r2
 800dfa2:	d906      	bls.n	800dfb2 <USB_SetTurnaroundTime+0xda>
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	4a1c      	ldr	r2, [pc, #112]	@ (800e018 <USB_SetTurnaroundTime+0x140>)
 800dfa8:	4293      	cmp	r3, r2
 800dfaa:	d202      	bcs.n	800dfb2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800dfac:	2307      	movs	r3, #7
 800dfae:	617b      	str	r3, [r7, #20]
 800dfb0:	e00a      	b.n	800dfc8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800dfb2:	2306      	movs	r3, #6
 800dfb4:	617b      	str	r3, [r7, #20]
 800dfb6:	e007      	b.n	800dfc8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800dfb8:	79fb      	ldrb	r3, [r7, #7]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d102      	bne.n	800dfc4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800dfbe:	2309      	movs	r3, #9
 800dfc0:	617b      	str	r3, [r7, #20]
 800dfc2:	e001      	b.n	800dfc8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800dfc4:	2309      	movs	r3, #9
 800dfc6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	68db      	ldr	r3, [r3, #12]
 800dfcc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	68da      	ldr	r2, [r3, #12]
 800dfd8:	697b      	ldr	r3, [r7, #20]
 800dfda:	029b      	lsls	r3, r3, #10
 800dfdc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800dfe0:	431a      	orrs	r2, r3
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800dfe6:	2300      	movs	r3, #0
}
 800dfe8:	4618      	mov	r0, r3
 800dfea:	371c      	adds	r7, #28
 800dfec:	46bd      	mov	sp, r7
 800dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff2:	4770      	bx	lr
 800dff4:	00d8acbf 	.word	0x00d8acbf
 800dff8:	00e4e1c0 	.word	0x00e4e1c0
 800dffc:	00f42400 	.word	0x00f42400
 800e000:	01067380 	.word	0x01067380
 800e004:	011a499f 	.word	0x011a499f
 800e008:	01312cff 	.word	0x01312cff
 800e00c:	014ca43f 	.word	0x014ca43f
 800e010:	016e3600 	.word	0x016e3600
 800e014:	01a6ab1f 	.word	0x01a6ab1f
 800e018:	01e84800 	.word	0x01e84800

0800e01c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e01c:	b480      	push	{r7}
 800e01e:	b083      	sub	sp, #12
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	689b      	ldr	r3, [r3, #8]
 800e028:	f043 0201 	orr.w	r2, r3, #1
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e030:	2300      	movs	r3, #0
}
 800e032:	4618      	mov	r0, r3
 800e034:	370c      	adds	r7, #12
 800e036:	46bd      	mov	sp, r7
 800e038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03c:	4770      	bx	lr

0800e03e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e03e:	b480      	push	{r7}
 800e040:	b083      	sub	sp, #12
 800e042:	af00      	add	r7, sp, #0
 800e044:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	689b      	ldr	r3, [r3, #8]
 800e04a:	f023 0201 	bic.w	r2, r3, #1
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e052:	2300      	movs	r3, #0
}
 800e054:	4618      	mov	r0, r3
 800e056:	370c      	adds	r7, #12
 800e058:	46bd      	mov	sp, r7
 800e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05e:	4770      	bx	lr

0800e060 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b084      	sub	sp, #16
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
 800e068:	460b      	mov	r3, r1
 800e06a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e06c:	2300      	movs	r3, #0
 800e06e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	68db      	ldr	r3, [r3, #12]
 800e074:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e07c:	78fb      	ldrb	r3, [r7, #3]
 800e07e:	2b01      	cmp	r3, #1
 800e080:	d115      	bne.n	800e0ae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	68db      	ldr	r3, [r3, #12]
 800e086:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e08e:	200a      	movs	r0, #10
 800e090:	f7f6 f8aa 	bl	80041e8 <HAL_Delay>
      ms += 10U;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	330a      	adds	r3, #10
 800e098:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f001 f988 	bl	800f3b0 <USB_GetMode>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	2b01      	cmp	r3, #1
 800e0a4:	d01e      	beq.n	800e0e4 <USB_SetCurrentMode+0x84>
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	2bc7      	cmp	r3, #199	@ 0xc7
 800e0aa:	d9f0      	bls.n	800e08e <USB_SetCurrentMode+0x2e>
 800e0ac:	e01a      	b.n	800e0e4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e0ae:	78fb      	ldrb	r3, [r7, #3]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d115      	bne.n	800e0e0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	68db      	ldr	r3, [r3, #12]
 800e0b8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e0c0:	200a      	movs	r0, #10
 800e0c2:	f7f6 f891 	bl	80041e8 <HAL_Delay>
      ms += 10U;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	330a      	adds	r3, #10
 800e0ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f001 f96f 	bl	800f3b0 <USB_GetMode>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d005      	beq.n	800e0e4 <USB_SetCurrentMode+0x84>
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	2bc7      	cmp	r3, #199	@ 0xc7
 800e0dc:	d9f0      	bls.n	800e0c0 <USB_SetCurrentMode+0x60>
 800e0de:	e001      	b.n	800e0e4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e0e0:	2301      	movs	r3, #1
 800e0e2:	e005      	b.n	800e0f0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	2bc8      	cmp	r3, #200	@ 0xc8
 800e0e8:	d101      	bne.n	800e0ee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	e000      	b.n	800e0f0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e0ee:	2300      	movs	r3, #0
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3710      	adds	r7, #16
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}

0800e0f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e0f8:	b084      	sub	sp, #16
 800e0fa:	b580      	push	{r7, lr}
 800e0fc:	b086      	sub	sp, #24
 800e0fe:	af00      	add	r7, sp, #0
 800e100:	6078      	str	r0, [r7, #4]
 800e102:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800e106:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e10a:	2300      	movs	r3, #0
 800e10c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e112:	2300      	movs	r3, #0
 800e114:	613b      	str	r3, [r7, #16]
 800e116:	e009      	b.n	800e12c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e118:	687a      	ldr	r2, [r7, #4]
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	3340      	adds	r3, #64	@ 0x40
 800e11e:	009b      	lsls	r3, r3, #2
 800e120:	4413      	add	r3, r2
 800e122:	2200      	movs	r2, #0
 800e124:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	3301      	adds	r3, #1
 800e12a:	613b      	str	r3, [r7, #16]
 800e12c:	693b      	ldr	r3, [r7, #16]
 800e12e:	2b0e      	cmp	r3, #14
 800e130:	d9f2      	bls.n	800e118 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e132:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e136:	2b00      	cmp	r3, #0
 800e138:	d11c      	bne.n	800e174 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e140:	685b      	ldr	r3, [r3, #4]
 800e142:	68fa      	ldr	r2, [r7, #12]
 800e144:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e148:	f043 0302 	orr.w	r3, r3, #2
 800e14c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e152:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e15e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e16a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	639a      	str	r2, [r3, #56]	@ 0x38
 800e172:	e00b      	b.n	800e18c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e178:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e184:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e192:	461a      	mov	r2, r3
 800e194:	2300      	movs	r3, #0
 800e196:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e198:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800e19c:	2b01      	cmp	r3, #1
 800e19e:	d10d      	bne.n	800e1bc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e1a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d104      	bne.n	800e1b2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e1a8:	2100      	movs	r1, #0
 800e1aa:	6878      	ldr	r0, [r7, #4]
 800e1ac:	f000 f968 	bl	800e480 <USB_SetDevSpeed>
 800e1b0:	e008      	b.n	800e1c4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e1b2:	2101      	movs	r1, #1
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f000 f963 	bl	800e480 <USB_SetDevSpeed>
 800e1ba:	e003      	b.n	800e1c4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e1bc:	2103      	movs	r1, #3
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f000 f95e 	bl	800e480 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e1c4:	2110      	movs	r1, #16
 800e1c6:	6878      	ldr	r0, [r7, #4]
 800e1c8:	f000 f8fa 	bl	800e3c0 <USB_FlushTxFifo>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d001      	beq.n	800e1d6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f000 f924 	bl	800e424 <USB_FlushRxFifo>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d001      	beq.n	800e1e6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e1ec:	461a      	mov	r2, r3
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e1f8:	461a      	mov	r2, r3
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e204:	461a      	mov	r2, r3
 800e206:	2300      	movs	r3, #0
 800e208:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e20a:	2300      	movs	r3, #0
 800e20c:	613b      	str	r3, [r7, #16]
 800e20e:	e043      	b.n	800e298 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	015a      	lsls	r2, r3, #5
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	4413      	add	r3, r2
 800e218:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e222:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e226:	d118      	bne.n	800e25a <USB_DevInit+0x162>
    {
      if (i == 0U)
 800e228:	693b      	ldr	r3, [r7, #16]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d10a      	bne.n	800e244 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	015a      	lsls	r2, r3, #5
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	4413      	add	r3, r2
 800e236:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e23a:	461a      	mov	r2, r3
 800e23c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e240:	6013      	str	r3, [r2, #0]
 800e242:	e013      	b.n	800e26c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e244:	693b      	ldr	r3, [r7, #16]
 800e246:	015a      	lsls	r2, r3, #5
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	4413      	add	r3, r2
 800e24c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e250:	461a      	mov	r2, r3
 800e252:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e256:	6013      	str	r3, [r2, #0]
 800e258:	e008      	b.n	800e26c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e25a:	693b      	ldr	r3, [r7, #16]
 800e25c:	015a      	lsls	r2, r3, #5
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	4413      	add	r3, r2
 800e262:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e266:	461a      	mov	r2, r3
 800e268:	2300      	movs	r3, #0
 800e26a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e26c:	693b      	ldr	r3, [r7, #16]
 800e26e:	015a      	lsls	r2, r3, #5
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	4413      	add	r3, r2
 800e274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e278:	461a      	mov	r2, r3
 800e27a:	2300      	movs	r3, #0
 800e27c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e27e:	693b      	ldr	r3, [r7, #16]
 800e280:	015a      	lsls	r2, r3, #5
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	4413      	add	r3, r2
 800e286:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e28a:	461a      	mov	r2, r3
 800e28c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e290:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	3301      	adds	r3, #1
 800e296:	613b      	str	r3, [r7, #16]
 800e298:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e29c:	461a      	mov	r2, r3
 800e29e:	693b      	ldr	r3, [r7, #16]
 800e2a0:	4293      	cmp	r3, r2
 800e2a2:	d3b5      	bcc.n	800e210 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	613b      	str	r3, [r7, #16]
 800e2a8:	e043      	b.n	800e332 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e2aa:	693b      	ldr	r3, [r7, #16]
 800e2ac:	015a      	lsls	r2, r3, #5
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	4413      	add	r3, r2
 800e2b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e2bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e2c0:	d118      	bne.n	800e2f4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800e2c2:	693b      	ldr	r3, [r7, #16]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d10a      	bne.n	800e2de <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e2c8:	693b      	ldr	r3, [r7, #16]
 800e2ca:	015a      	lsls	r2, r3, #5
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	4413      	add	r3, r2
 800e2d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2d4:	461a      	mov	r2, r3
 800e2d6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e2da:	6013      	str	r3, [r2, #0]
 800e2dc:	e013      	b.n	800e306 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e2de:	693b      	ldr	r3, [r7, #16]
 800e2e0:	015a      	lsls	r2, r3, #5
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	4413      	add	r3, r2
 800e2e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2ea:	461a      	mov	r2, r3
 800e2ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e2f0:	6013      	str	r3, [r2, #0]
 800e2f2:	e008      	b.n	800e306 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e2f4:	693b      	ldr	r3, [r7, #16]
 800e2f6:	015a      	lsls	r2, r3, #5
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	4413      	add	r3, r2
 800e2fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e300:	461a      	mov	r2, r3
 800e302:	2300      	movs	r3, #0
 800e304:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e306:	693b      	ldr	r3, [r7, #16]
 800e308:	015a      	lsls	r2, r3, #5
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	4413      	add	r3, r2
 800e30e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e312:	461a      	mov	r2, r3
 800e314:	2300      	movs	r3, #0
 800e316:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e318:	693b      	ldr	r3, [r7, #16]
 800e31a:	015a      	lsls	r2, r3, #5
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	4413      	add	r3, r2
 800e320:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e324:	461a      	mov	r2, r3
 800e326:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e32a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e32c:	693b      	ldr	r3, [r7, #16]
 800e32e:	3301      	adds	r3, #1
 800e330:	613b      	str	r3, [r7, #16]
 800e332:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e336:	461a      	mov	r2, r3
 800e338:	693b      	ldr	r3, [r7, #16]
 800e33a:	4293      	cmp	r3, r2
 800e33c:	d3b5      	bcc.n	800e2aa <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e344:	691b      	ldr	r3, [r3, #16]
 800e346:	68fa      	ldr	r2, [r7, #12]
 800e348:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e34c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e350:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2200      	movs	r2, #0
 800e356:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800e35e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e360:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e364:	2b00      	cmp	r3, #0
 800e366:	d105      	bne.n	800e374 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	699b      	ldr	r3, [r3, #24]
 800e36c:	f043 0210 	orr.w	r2, r3, #16
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	699a      	ldr	r2, [r3, #24]
 800e378:	4b10      	ldr	r3, [pc, #64]	@ (800e3bc <USB_DevInit+0x2c4>)
 800e37a:	4313      	orrs	r3, r2
 800e37c:	687a      	ldr	r2, [r7, #4]
 800e37e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e380:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800e384:	2b00      	cmp	r3, #0
 800e386:	d005      	beq.n	800e394 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	699b      	ldr	r3, [r3, #24]
 800e38c:	f043 0208 	orr.w	r2, r3, #8
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e394:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e398:	2b01      	cmp	r3, #1
 800e39a:	d107      	bne.n	800e3ac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	699b      	ldr	r3, [r3, #24]
 800e3a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e3a4:	f043 0304 	orr.w	r3, r3, #4
 800e3a8:	687a      	ldr	r2, [r7, #4]
 800e3aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e3ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	3718      	adds	r7, #24
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e3b8:	b004      	add	sp, #16
 800e3ba:	4770      	bx	lr
 800e3bc:	803c3800 	.word	0x803c3800

0800e3c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e3c0:	b480      	push	{r7}
 800e3c2:	b085      	sub	sp, #20
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	3301      	adds	r3, #1
 800e3d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e3da:	d901      	bls.n	800e3e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e3dc:	2303      	movs	r3, #3
 800e3de:	e01b      	b.n	800e418 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	691b      	ldr	r3, [r3, #16]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	daf2      	bge.n	800e3ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	019b      	lsls	r3, r3, #6
 800e3f0:	f043 0220 	orr.w	r2, r3, #32
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	3301      	adds	r3, #1
 800e3fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e404:	d901      	bls.n	800e40a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e406:	2303      	movs	r3, #3
 800e408:	e006      	b.n	800e418 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	691b      	ldr	r3, [r3, #16]
 800e40e:	f003 0320 	and.w	r3, r3, #32
 800e412:	2b20      	cmp	r3, #32
 800e414:	d0f0      	beq.n	800e3f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e416:	2300      	movs	r3, #0
}
 800e418:	4618      	mov	r0, r3
 800e41a:	3714      	adds	r7, #20
 800e41c:	46bd      	mov	sp, r7
 800e41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e422:	4770      	bx	lr

0800e424 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e424:	b480      	push	{r7}
 800e426:	b085      	sub	sp, #20
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e42c:	2300      	movs	r3, #0
 800e42e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	3301      	adds	r3, #1
 800e434:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e43c:	d901      	bls.n	800e442 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e43e:	2303      	movs	r3, #3
 800e440:	e018      	b.n	800e474 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	691b      	ldr	r3, [r3, #16]
 800e446:	2b00      	cmp	r3, #0
 800e448:	daf2      	bge.n	800e430 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e44a:	2300      	movs	r3, #0
 800e44c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2210      	movs	r2, #16
 800e452:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	3301      	adds	r3, #1
 800e458:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e460:	d901      	bls.n	800e466 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e462:	2303      	movs	r3, #3
 800e464:	e006      	b.n	800e474 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	691b      	ldr	r3, [r3, #16]
 800e46a:	f003 0310 	and.w	r3, r3, #16
 800e46e:	2b10      	cmp	r3, #16
 800e470:	d0f0      	beq.n	800e454 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e472:	2300      	movs	r3, #0
}
 800e474:	4618      	mov	r0, r3
 800e476:	3714      	adds	r7, #20
 800e478:	46bd      	mov	sp, r7
 800e47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47e:	4770      	bx	lr

0800e480 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e480:	b480      	push	{r7}
 800e482:	b085      	sub	sp, #20
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
 800e488:	460b      	mov	r3, r1
 800e48a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e496:	681a      	ldr	r2, [r3, #0]
 800e498:	78fb      	ldrb	r3, [r7, #3]
 800e49a:	68f9      	ldr	r1, [r7, #12]
 800e49c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e4a0:	4313      	orrs	r3, r2
 800e4a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e4a4:	2300      	movs	r3, #0
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	3714      	adds	r7, #20
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b0:	4770      	bx	lr

0800e4b2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800e4b2:	b480      	push	{r7}
 800e4b4:	b087      	sub	sp, #28
 800e4b6:	af00      	add	r7, sp, #0
 800e4b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e4be:	693b      	ldr	r3, [r7, #16]
 800e4c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e4c4:	689b      	ldr	r3, [r3, #8]
 800e4c6:	f003 0306 	and.w	r3, r3, #6
 800e4ca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d102      	bne.n	800e4d8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	75fb      	strb	r3, [r7, #23]
 800e4d6:	e00a      	b.n	800e4ee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	2b02      	cmp	r3, #2
 800e4dc:	d002      	beq.n	800e4e4 <USB_GetDevSpeed+0x32>
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	2b06      	cmp	r3, #6
 800e4e2:	d102      	bne.n	800e4ea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e4e4:	2302      	movs	r3, #2
 800e4e6:	75fb      	strb	r3, [r7, #23]
 800e4e8:	e001      	b.n	800e4ee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e4ea:	230f      	movs	r3, #15
 800e4ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e4ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	371c      	adds	r7, #28
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fa:	4770      	bx	lr

0800e4fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b085      	sub	sp, #20
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
 800e504:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	781b      	ldrb	r3, [r3, #0]
 800e50e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	785b      	ldrb	r3, [r3, #1]
 800e514:	2b01      	cmp	r3, #1
 800e516:	d13a      	bne.n	800e58e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e51e:	69da      	ldr	r2, [r3, #28]
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	781b      	ldrb	r3, [r3, #0]
 800e524:	f003 030f 	and.w	r3, r3, #15
 800e528:	2101      	movs	r1, #1
 800e52a:	fa01 f303 	lsl.w	r3, r1, r3
 800e52e:	b29b      	uxth	r3, r3
 800e530:	68f9      	ldr	r1, [r7, #12]
 800e532:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e536:	4313      	orrs	r3, r2
 800e538:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	015a      	lsls	r2, r3, #5
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	4413      	add	r3, r2
 800e542:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d155      	bne.n	800e5fc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	015a      	lsls	r2, r3, #5
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	4413      	add	r3, r2
 800e558:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e55c:	681a      	ldr	r2, [r3, #0]
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	689b      	ldr	r3, [r3, #8]
 800e562:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	791b      	ldrb	r3, [r3, #4]
 800e56a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e56c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e56e:	68bb      	ldr	r3, [r7, #8]
 800e570:	059b      	lsls	r3, r3, #22
 800e572:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e574:	4313      	orrs	r3, r2
 800e576:	68ba      	ldr	r2, [r7, #8]
 800e578:	0151      	lsls	r1, r2, #5
 800e57a:	68fa      	ldr	r2, [r7, #12]
 800e57c:	440a      	add	r2, r1
 800e57e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e582:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e586:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e58a:	6013      	str	r3, [r2, #0]
 800e58c:	e036      	b.n	800e5fc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e594:	69da      	ldr	r2, [r3, #28]
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	781b      	ldrb	r3, [r3, #0]
 800e59a:	f003 030f 	and.w	r3, r3, #15
 800e59e:	2101      	movs	r1, #1
 800e5a0:	fa01 f303 	lsl.w	r3, r1, r3
 800e5a4:	041b      	lsls	r3, r3, #16
 800e5a6:	68f9      	ldr	r1, [r7, #12]
 800e5a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e5ac:	4313      	orrs	r3, r2
 800e5ae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e5b0:	68bb      	ldr	r3, [r7, #8]
 800e5b2:	015a      	lsls	r2, r3, #5
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	4413      	add	r3, r2
 800e5b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d11a      	bne.n	800e5fc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	015a      	lsls	r2, r3, #5
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	4413      	add	r3, r2
 800e5ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5d2:	681a      	ldr	r2, [r3, #0]
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	689b      	ldr	r3, [r3, #8]
 800e5d8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e5dc:	683b      	ldr	r3, [r7, #0]
 800e5de:	791b      	ldrb	r3, [r3, #4]
 800e5e0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e5e2:	430b      	orrs	r3, r1
 800e5e4:	4313      	orrs	r3, r2
 800e5e6:	68ba      	ldr	r2, [r7, #8]
 800e5e8:	0151      	lsls	r1, r2, #5
 800e5ea:	68fa      	ldr	r2, [r7, #12]
 800e5ec:	440a      	add	r2, r1
 800e5ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e5f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e5f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e5fa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e5fc:	2300      	movs	r3, #0
}
 800e5fe:	4618      	mov	r0, r3
 800e600:	3714      	adds	r7, #20
 800e602:	46bd      	mov	sp, r7
 800e604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e608:	4770      	bx	lr
	...

0800e60c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e60c:	b480      	push	{r7}
 800e60e:	b085      	sub	sp, #20
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
 800e614:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	781b      	ldrb	r3, [r3, #0]
 800e61e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	785b      	ldrb	r3, [r3, #1]
 800e624:	2b01      	cmp	r3, #1
 800e626:	d161      	bne.n	800e6ec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e628:	68bb      	ldr	r3, [r7, #8]
 800e62a:	015a      	lsls	r2, r3, #5
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	4413      	add	r3, r2
 800e630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e63a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e63e:	d11f      	bne.n	800e680 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e640:	68bb      	ldr	r3, [r7, #8]
 800e642:	015a      	lsls	r2, r3, #5
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	4413      	add	r3, r2
 800e648:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	68ba      	ldr	r2, [r7, #8]
 800e650:	0151      	lsls	r1, r2, #5
 800e652:	68fa      	ldr	r2, [r7, #12]
 800e654:	440a      	add	r2, r1
 800e656:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e65a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e65e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	015a      	lsls	r2, r3, #5
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	4413      	add	r3, r2
 800e668:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	68ba      	ldr	r2, [r7, #8]
 800e670:	0151      	lsls	r1, r2, #5
 800e672:	68fa      	ldr	r2, [r7, #12]
 800e674:	440a      	add	r2, r1
 800e676:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e67a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e67e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e686:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	781b      	ldrb	r3, [r3, #0]
 800e68c:	f003 030f 	and.w	r3, r3, #15
 800e690:	2101      	movs	r1, #1
 800e692:	fa01 f303 	lsl.w	r3, r1, r3
 800e696:	b29b      	uxth	r3, r3
 800e698:	43db      	mvns	r3, r3
 800e69a:	68f9      	ldr	r1, [r7, #12]
 800e69c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e6a0:	4013      	ands	r3, r2
 800e6a2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e6aa:	69da      	ldr	r2, [r3, #28]
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	781b      	ldrb	r3, [r3, #0]
 800e6b0:	f003 030f 	and.w	r3, r3, #15
 800e6b4:	2101      	movs	r1, #1
 800e6b6:	fa01 f303 	lsl.w	r3, r1, r3
 800e6ba:	b29b      	uxth	r3, r3
 800e6bc:	43db      	mvns	r3, r3
 800e6be:	68f9      	ldr	r1, [r7, #12]
 800e6c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e6c4:	4013      	ands	r3, r2
 800e6c6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	015a      	lsls	r2, r3, #5
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	4413      	add	r3, r2
 800e6d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6d4:	681a      	ldr	r2, [r3, #0]
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	0159      	lsls	r1, r3, #5
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	440b      	add	r3, r1
 800e6de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6e2:	4619      	mov	r1, r3
 800e6e4:	4b35      	ldr	r3, [pc, #212]	@ (800e7bc <USB_DeactivateEndpoint+0x1b0>)
 800e6e6:	4013      	ands	r3, r2
 800e6e8:	600b      	str	r3, [r1, #0]
 800e6ea:	e060      	b.n	800e7ae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	015a      	lsls	r2, r3, #5
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	4413      	add	r3, r2
 800e6f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e6fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e702:	d11f      	bne.n	800e744 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	015a      	lsls	r2, r3, #5
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	4413      	add	r3, r2
 800e70c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	68ba      	ldr	r2, [r7, #8]
 800e714:	0151      	lsls	r1, r2, #5
 800e716:	68fa      	ldr	r2, [r7, #12]
 800e718:	440a      	add	r2, r1
 800e71a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e71e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e722:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	015a      	lsls	r2, r3, #5
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	4413      	add	r3, r2
 800e72c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	68ba      	ldr	r2, [r7, #8]
 800e734:	0151      	lsls	r1, r2, #5
 800e736:	68fa      	ldr	r2, [r7, #12]
 800e738:	440a      	add	r2, r1
 800e73a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e73e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e742:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e74a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e74c:	683b      	ldr	r3, [r7, #0]
 800e74e:	781b      	ldrb	r3, [r3, #0]
 800e750:	f003 030f 	and.w	r3, r3, #15
 800e754:	2101      	movs	r1, #1
 800e756:	fa01 f303 	lsl.w	r3, r1, r3
 800e75a:	041b      	lsls	r3, r3, #16
 800e75c:	43db      	mvns	r3, r3
 800e75e:	68f9      	ldr	r1, [r7, #12]
 800e760:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e764:	4013      	ands	r3, r2
 800e766:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e76e:	69da      	ldr	r2, [r3, #28]
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	781b      	ldrb	r3, [r3, #0]
 800e774:	f003 030f 	and.w	r3, r3, #15
 800e778:	2101      	movs	r1, #1
 800e77a:	fa01 f303 	lsl.w	r3, r1, r3
 800e77e:	041b      	lsls	r3, r3, #16
 800e780:	43db      	mvns	r3, r3
 800e782:	68f9      	ldr	r1, [r7, #12]
 800e784:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e788:	4013      	ands	r3, r2
 800e78a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	015a      	lsls	r2, r3, #5
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	4413      	add	r3, r2
 800e794:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e798:	681a      	ldr	r2, [r3, #0]
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	0159      	lsls	r1, r3, #5
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	440b      	add	r3, r1
 800e7a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e7a6:	4619      	mov	r1, r3
 800e7a8:	4b05      	ldr	r3, [pc, #20]	@ (800e7c0 <USB_DeactivateEndpoint+0x1b4>)
 800e7aa:	4013      	ands	r3, r2
 800e7ac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e7ae:	2300      	movs	r3, #0
}
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	3714      	adds	r7, #20
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ba:	4770      	bx	lr
 800e7bc:	ec337800 	.word	0xec337800
 800e7c0:	eff37800 	.word	0xeff37800

0800e7c4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b08a      	sub	sp, #40	@ 0x28
 800e7c8:	af02      	add	r7, sp, #8
 800e7ca:	60f8      	str	r0, [r7, #12]
 800e7cc:	60b9      	str	r1, [r7, #8]
 800e7ce:	4613      	mov	r3, r2
 800e7d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e7d6:	68bb      	ldr	r3, [r7, #8]
 800e7d8:	781b      	ldrb	r3, [r3, #0]
 800e7da:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	785b      	ldrb	r3, [r3, #1]
 800e7e0:	2b01      	cmp	r3, #1
 800e7e2:	f040 817a 	bne.w	800eada <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	691b      	ldr	r3, [r3, #16]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d132      	bne.n	800e854 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e7ee:	69bb      	ldr	r3, [r7, #24]
 800e7f0:	015a      	lsls	r2, r3, #5
 800e7f2:	69fb      	ldr	r3, [r7, #28]
 800e7f4:	4413      	add	r3, r2
 800e7f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7fa:	691b      	ldr	r3, [r3, #16]
 800e7fc:	69ba      	ldr	r2, [r7, #24]
 800e7fe:	0151      	lsls	r1, r2, #5
 800e800:	69fa      	ldr	r2, [r7, #28]
 800e802:	440a      	add	r2, r1
 800e804:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e808:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e80c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e810:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e812:	69bb      	ldr	r3, [r7, #24]
 800e814:	015a      	lsls	r2, r3, #5
 800e816:	69fb      	ldr	r3, [r7, #28]
 800e818:	4413      	add	r3, r2
 800e81a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e81e:	691b      	ldr	r3, [r3, #16]
 800e820:	69ba      	ldr	r2, [r7, #24]
 800e822:	0151      	lsls	r1, r2, #5
 800e824:	69fa      	ldr	r2, [r7, #28]
 800e826:	440a      	add	r2, r1
 800e828:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e82c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e830:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e832:	69bb      	ldr	r3, [r7, #24]
 800e834:	015a      	lsls	r2, r3, #5
 800e836:	69fb      	ldr	r3, [r7, #28]
 800e838:	4413      	add	r3, r2
 800e83a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e83e:	691b      	ldr	r3, [r3, #16]
 800e840:	69ba      	ldr	r2, [r7, #24]
 800e842:	0151      	lsls	r1, r2, #5
 800e844:	69fa      	ldr	r2, [r7, #28]
 800e846:	440a      	add	r2, r1
 800e848:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e84c:	0cdb      	lsrs	r3, r3, #19
 800e84e:	04db      	lsls	r3, r3, #19
 800e850:	6113      	str	r3, [r2, #16]
 800e852:	e092      	b.n	800e97a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e854:	69bb      	ldr	r3, [r7, #24]
 800e856:	015a      	lsls	r2, r3, #5
 800e858:	69fb      	ldr	r3, [r7, #28]
 800e85a:	4413      	add	r3, r2
 800e85c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e860:	691b      	ldr	r3, [r3, #16]
 800e862:	69ba      	ldr	r2, [r7, #24]
 800e864:	0151      	lsls	r1, r2, #5
 800e866:	69fa      	ldr	r2, [r7, #28]
 800e868:	440a      	add	r2, r1
 800e86a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e86e:	0cdb      	lsrs	r3, r3, #19
 800e870:	04db      	lsls	r3, r3, #19
 800e872:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e874:	69bb      	ldr	r3, [r7, #24]
 800e876:	015a      	lsls	r2, r3, #5
 800e878:	69fb      	ldr	r3, [r7, #28]
 800e87a:	4413      	add	r3, r2
 800e87c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e880:	691b      	ldr	r3, [r3, #16]
 800e882:	69ba      	ldr	r2, [r7, #24]
 800e884:	0151      	lsls	r1, r2, #5
 800e886:	69fa      	ldr	r2, [r7, #28]
 800e888:	440a      	add	r2, r1
 800e88a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e88e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e892:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e896:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800e898:	69bb      	ldr	r3, [r7, #24]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d11a      	bne.n	800e8d4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	691a      	ldr	r2, [r3, #16]
 800e8a2:	68bb      	ldr	r3, [r7, #8]
 800e8a4:	689b      	ldr	r3, [r3, #8]
 800e8a6:	429a      	cmp	r2, r3
 800e8a8:	d903      	bls.n	800e8b2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800e8aa:	68bb      	ldr	r3, [r7, #8]
 800e8ac:	689a      	ldr	r2, [r3, #8]
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e8b2:	69bb      	ldr	r3, [r7, #24]
 800e8b4:	015a      	lsls	r2, r3, #5
 800e8b6:	69fb      	ldr	r3, [r7, #28]
 800e8b8:	4413      	add	r3, r2
 800e8ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8be:	691b      	ldr	r3, [r3, #16]
 800e8c0:	69ba      	ldr	r2, [r7, #24]
 800e8c2:	0151      	lsls	r1, r2, #5
 800e8c4:	69fa      	ldr	r2, [r7, #28]
 800e8c6:	440a      	add	r2, r1
 800e8c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e8cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e8d0:	6113      	str	r3, [r2, #16]
 800e8d2:	e01b      	b.n	800e90c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e8d4:	69bb      	ldr	r3, [r7, #24]
 800e8d6:	015a      	lsls	r2, r3, #5
 800e8d8:	69fb      	ldr	r3, [r7, #28]
 800e8da:	4413      	add	r3, r2
 800e8dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8e0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	6919      	ldr	r1, [r3, #16]
 800e8e6:	68bb      	ldr	r3, [r7, #8]
 800e8e8:	689b      	ldr	r3, [r3, #8]
 800e8ea:	440b      	add	r3, r1
 800e8ec:	1e59      	subs	r1, r3, #1
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	689b      	ldr	r3, [r3, #8]
 800e8f2:	fbb1 f3f3 	udiv	r3, r1, r3
 800e8f6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e8f8:	4ba2      	ldr	r3, [pc, #648]	@ (800eb84 <USB_EPStartXfer+0x3c0>)
 800e8fa:	400b      	ands	r3, r1
 800e8fc:	69b9      	ldr	r1, [r7, #24]
 800e8fe:	0148      	lsls	r0, r1, #5
 800e900:	69f9      	ldr	r1, [r7, #28]
 800e902:	4401      	add	r1, r0
 800e904:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e908:	4313      	orrs	r3, r2
 800e90a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e90c:	69bb      	ldr	r3, [r7, #24]
 800e90e:	015a      	lsls	r2, r3, #5
 800e910:	69fb      	ldr	r3, [r7, #28]
 800e912:	4413      	add	r3, r2
 800e914:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e918:	691a      	ldr	r2, [r3, #16]
 800e91a:	68bb      	ldr	r3, [r7, #8]
 800e91c:	691b      	ldr	r3, [r3, #16]
 800e91e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e922:	69b9      	ldr	r1, [r7, #24]
 800e924:	0148      	lsls	r0, r1, #5
 800e926:	69f9      	ldr	r1, [r7, #28]
 800e928:	4401      	add	r1, r0
 800e92a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e92e:	4313      	orrs	r3, r2
 800e930:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	791b      	ldrb	r3, [r3, #4]
 800e936:	2b01      	cmp	r3, #1
 800e938:	d11f      	bne.n	800e97a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e93a:	69bb      	ldr	r3, [r7, #24]
 800e93c:	015a      	lsls	r2, r3, #5
 800e93e:	69fb      	ldr	r3, [r7, #28]
 800e940:	4413      	add	r3, r2
 800e942:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e946:	691b      	ldr	r3, [r3, #16]
 800e948:	69ba      	ldr	r2, [r7, #24]
 800e94a:	0151      	lsls	r1, r2, #5
 800e94c:	69fa      	ldr	r2, [r7, #28]
 800e94e:	440a      	add	r2, r1
 800e950:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e954:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800e958:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e95a:	69bb      	ldr	r3, [r7, #24]
 800e95c:	015a      	lsls	r2, r3, #5
 800e95e:	69fb      	ldr	r3, [r7, #28]
 800e960:	4413      	add	r3, r2
 800e962:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e966:	691b      	ldr	r3, [r3, #16]
 800e968:	69ba      	ldr	r2, [r7, #24]
 800e96a:	0151      	lsls	r1, r2, #5
 800e96c:	69fa      	ldr	r2, [r7, #28]
 800e96e:	440a      	add	r2, r1
 800e970:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e974:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e978:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e97a:	79fb      	ldrb	r3, [r7, #7]
 800e97c:	2b01      	cmp	r3, #1
 800e97e:	d14b      	bne.n	800ea18 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e980:	68bb      	ldr	r3, [r7, #8]
 800e982:	69db      	ldr	r3, [r3, #28]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d009      	beq.n	800e99c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e988:	69bb      	ldr	r3, [r7, #24]
 800e98a:	015a      	lsls	r2, r3, #5
 800e98c:	69fb      	ldr	r3, [r7, #28]
 800e98e:	4413      	add	r3, r2
 800e990:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e994:	461a      	mov	r2, r3
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	69db      	ldr	r3, [r3, #28]
 800e99a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e99c:	68bb      	ldr	r3, [r7, #8]
 800e99e:	791b      	ldrb	r3, [r3, #4]
 800e9a0:	2b01      	cmp	r3, #1
 800e9a2:	d128      	bne.n	800e9f6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e9a4:	69fb      	ldr	r3, [r7, #28]
 800e9a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e9aa:	689b      	ldr	r3, [r3, #8]
 800e9ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d110      	bne.n	800e9d6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e9b4:	69bb      	ldr	r3, [r7, #24]
 800e9b6:	015a      	lsls	r2, r3, #5
 800e9b8:	69fb      	ldr	r3, [r7, #28]
 800e9ba:	4413      	add	r3, r2
 800e9bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	69ba      	ldr	r2, [r7, #24]
 800e9c4:	0151      	lsls	r1, r2, #5
 800e9c6:	69fa      	ldr	r2, [r7, #28]
 800e9c8:	440a      	add	r2, r1
 800e9ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e9ce:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e9d2:	6013      	str	r3, [r2, #0]
 800e9d4:	e00f      	b.n	800e9f6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e9d6:	69bb      	ldr	r3, [r7, #24]
 800e9d8:	015a      	lsls	r2, r3, #5
 800e9da:	69fb      	ldr	r3, [r7, #28]
 800e9dc:	4413      	add	r3, r2
 800e9de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	69ba      	ldr	r2, [r7, #24]
 800e9e6:	0151      	lsls	r1, r2, #5
 800e9e8:	69fa      	ldr	r2, [r7, #28]
 800e9ea:	440a      	add	r2, r1
 800e9ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e9f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e9f4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e9f6:	69bb      	ldr	r3, [r7, #24]
 800e9f8:	015a      	lsls	r2, r3, #5
 800e9fa:	69fb      	ldr	r3, [r7, #28]
 800e9fc:	4413      	add	r3, r2
 800e9fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	69ba      	ldr	r2, [r7, #24]
 800ea06:	0151      	lsls	r1, r2, #5
 800ea08:	69fa      	ldr	r2, [r7, #28]
 800ea0a:	440a      	add	r2, r1
 800ea0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ea10:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ea14:	6013      	str	r3, [r2, #0]
 800ea16:	e165      	b.n	800ece4 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ea18:	69bb      	ldr	r3, [r7, #24]
 800ea1a:	015a      	lsls	r2, r3, #5
 800ea1c:	69fb      	ldr	r3, [r7, #28]
 800ea1e:	4413      	add	r3, r2
 800ea20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	69ba      	ldr	r2, [r7, #24]
 800ea28:	0151      	lsls	r1, r2, #5
 800ea2a:	69fa      	ldr	r2, [r7, #28]
 800ea2c:	440a      	add	r2, r1
 800ea2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ea32:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ea36:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ea38:	68bb      	ldr	r3, [r7, #8]
 800ea3a:	791b      	ldrb	r3, [r3, #4]
 800ea3c:	2b01      	cmp	r3, #1
 800ea3e:	d015      	beq.n	800ea6c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ea40:	68bb      	ldr	r3, [r7, #8]
 800ea42:	691b      	ldr	r3, [r3, #16]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	f000 814d 	beq.w	800ece4 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ea4a:	69fb      	ldr	r3, [r7, #28]
 800ea4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ea50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ea52:	68bb      	ldr	r3, [r7, #8]
 800ea54:	781b      	ldrb	r3, [r3, #0]
 800ea56:	f003 030f 	and.w	r3, r3, #15
 800ea5a:	2101      	movs	r1, #1
 800ea5c:	fa01 f303 	lsl.w	r3, r1, r3
 800ea60:	69f9      	ldr	r1, [r7, #28]
 800ea62:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ea66:	4313      	orrs	r3, r2
 800ea68:	634b      	str	r3, [r1, #52]	@ 0x34
 800ea6a:	e13b      	b.n	800ece4 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ea6c:	69fb      	ldr	r3, [r7, #28]
 800ea6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ea72:	689b      	ldr	r3, [r3, #8]
 800ea74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d110      	bne.n	800ea9e <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ea7c:	69bb      	ldr	r3, [r7, #24]
 800ea7e:	015a      	lsls	r2, r3, #5
 800ea80:	69fb      	ldr	r3, [r7, #28]
 800ea82:	4413      	add	r3, r2
 800ea84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	69ba      	ldr	r2, [r7, #24]
 800ea8c:	0151      	lsls	r1, r2, #5
 800ea8e:	69fa      	ldr	r2, [r7, #28]
 800ea90:	440a      	add	r2, r1
 800ea92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ea96:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ea9a:	6013      	str	r3, [r2, #0]
 800ea9c:	e00f      	b.n	800eabe <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ea9e:	69bb      	ldr	r3, [r7, #24]
 800eaa0:	015a      	lsls	r2, r3, #5
 800eaa2:	69fb      	ldr	r3, [r7, #28]
 800eaa4:	4413      	add	r3, r2
 800eaa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	69ba      	ldr	r2, [r7, #24]
 800eaae:	0151      	lsls	r1, r2, #5
 800eab0:	69fa      	ldr	r2, [r7, #28]
 800eab2:	440a      	add	r2, r1
 800eab4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eab8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eabc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	68d9      	ldr	r1, [r3, #12]
 800eac2:	68bb      	ldr	r3, [r7, #8]
 800eac4:	781a      	ldrb	r2, [r3, #0]
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	691b      	ldr	r3, [r3, #16]
 800eaca:	b298      	uxth	r0, r3
 800eacc:	79fb      	ldrb	r3, [r7, #7]
 800eace:	9300      	str	r3, [sp, #0]
 800ead0:	4603      	mov	r3, r0
 800ead2:	68f8      	ldr	r0, [r7, #12]
 800ead4:	f000 f9b8 	bl	800ee48 <USB_WritePacket>
 800ead8:	e104      	b.n	800ece4 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800eada:	69bb      	ldr	r3, [r7, #24]
 800eadc:	015a      	lsls	r2, r3, #5
 800eade:	69fb      	ldr	r3, [r7, #28]
 800eae0:	4413      	add	r3, r2
 800eae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eae6:	691b      	ldr	r3, [r3, #16]
 800eae8:	69ba      	ldr	r2, [r7, #24]
 800eaea:	0151      	lsls	r1, r2, #5
 800eaec:	69fa      	ldr	r2, [r7, #28]
 800eaee:	440a      	add	r2, r1
 800eaf0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eaf4:	0cdb      	lsrs	r3, r3, #19
 800eaf6:	04db      	lsls	r3, r3, #19
 800eaf8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800eafa:	69bb      	ldr	r3, [r7, #24]
 800eafc:	015a      	lsls	r2, r3, #5
 800eafe:	69fb      	ldr	r3, [r7, #28]
 800eb00:	4413      	add	r3, r2
 800eb02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb06:	691b      	ldr	r3, [r3, #16]
 800eb08:	69ba      	ldr	r2, [r7, #24]
 800eb0a:	0151      	lsls	r1, r2, #5
 800eb0c:	69fa      	ldr	r2, [r7, #28]
 800eb0e:	440a      	add	r2, r1
 800eb10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb14:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800eb18:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800eb1c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800eb1e:	69bb      	ldr	r3, [r7, #24]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d131      	bne.n	800eb88 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800eb24:	68bb      	ldr	r3, [r7, #8]
 800eb26:	691b      	ldr	r3, [r3, #16]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d003      	beq.n	800eb34 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	689a      	ldr	r2, [r3, #8]
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	689a      	ldr	r2, [r3, #8]
 800eb38:	68bb      	ldr	r3, [r7, #8]
 800eb3a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800eb3c:	69bb      	ldr	r3, [r7, #24]
 800eb3e:	015a      	lsls	r2, r3, #5
 800eb40:	69fb      	ldr	r3, [r7, #28]
 800eb42:	4413      	add	r3, r2
 800eb44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb48:	691a      	ldr	r2, [r3, #16]
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	6a1b      	ldr	r3, [r3, #32]
 800eb4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eb52:	69b9      	ldr	r1, [r7, #24]
 800eb54:	0148      	lsls	r0, r1, #5
 800eb56:	69f9      	ldr	r1, [r7, #28]
 800eb58:	4401      	add	r1, r0
 800eb5a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800eb5e:	4313      	orrs	r3, r2
 800eb60:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eb62:	69bb      	ldr	r3, [r7, #24]
 800eb64:	015a      	lsls	r2, r3, #5
 800eb66:	69fb      	ldr	r3, [r7, #28]
 800eb68:	4413      	add	r3, r2
 800eb6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb6e:	691b      	ldr	r3, [r3, #16]
 800eb70:	69ba      	ldr	r2, [r7, #24]
 800eb72:	0151      	lsls	r1, r2, #5
 800eb74:	69fa      	ldr	r2, [r7, #28]
 800eb76:	440a      	add	r2, r1
 800eb78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb7c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800eb80:	6113      	str	r3, [r2, #16]
 800eb82:	e061      	b.n	800ec48 <USB_EPStartXfer+0x484>
 800eb84:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	691b      	ldr	r3, [r3, #16]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d123      	bne.n	800ebd8 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800eb90:	69bb      	ldr	r3, [r7, #24]
 800eb92:	015a      	lsls	r2, r3, #5
 800eb94:	69fb      	ldr	r3, [r7, #28]
 800eb96:	4413      	add	r3, r2
 800eb98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb9c:	691a      	ldr	r2, [r3, #16]
 800eb9e:	68bb      	ldr	r3, [r7, #8]
 800eba0:	689b      	ldr	r3, [r3, #8]
 800eba2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eba6:	69b9      	ldr	r1, [r7, #24]
 800eba8:	0148      	lsls	r0, r1, #5
 800ebaa:	69f9      	ldr	r1, [r7, #28]
 800ebac:	4401      	add	r1, r0
 800ebae:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ebb2:	4313      	orrs	r3, r2
 800ebb4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ebb6:	69bb      	ldr	r3, [r7, #24]
 800ebb8:	015a      	lsls	r2, r3, #5
 800ebba:	69fb      	ldr	r3, [r7, #28]
 800ebbc:	4413      	add	r3, r2
 800ebbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebc2:	691b      	ldr	r3, [r3, #16]
 800ebc4:	69ba      	ldr	r2, [r7, #24]
 800ebc6:	0151      	lsls	r1, r2, #5
 800ebc8:	69fa      	ldr	r2, [r7, #28]
 800ebca:	440a      	add	r2, r1
 800ebcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ebd0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ebd4:	6113      	str	r3, [r2, #16]
 800ebd6:	e037      	b.n	800ec48 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ebd8:	68bb      	ldr	r3, [r7, #8]
 800ebda:	691a      	ldr	r2, [r3, #16]
 800ebdc:	68bb      	ldr	r3, [r7, #8]
 800ebde:	689b      	ldr	r3, [r3, #8]
 800ebe0:	4413      	add	r3, r2
 800ebe2:	1e5a      	subs	r2, r3, #1
 800ebe4:	68bb      	ldr	r3, [r7, #8]
 800ebe6:	689b      	ldr	r3, [r3, #8]
 800ebe8:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebec:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800ebee:	68bb      	ldr	r3, [r7, #8]
 800ebf0:	689b      	ldr	r3, [r3, #8]
 800ebf2:	8afa      	ldrh	r2, [r7, #22]
 800ebf4:	fb03 f202 	mul.w	r2, r3, r2
 800ebf8:	68bb      	ldr	r3, [r7, #8]
 800ebfa:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ebfc:	69bb      	ldr	r3, [r7, #24]
 800ebfe:	015a      	lsls	r2, r3, #5
 800ec00:	69fb      	ldr	r3, [r7, #28]
 800ec02:	4413      	add	r3, r2
 800ec04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec08:	691a      	ldr	r2, [r3, #16]
 800ec0a:	8afb      	ldrh	r3, [r7, #22]
 800ec0c:	04d9      	lsls	r1, r3, #19
 800ec0e:	4b38      	ldr	r3, [pc, #224]	@ (800ecf0 <USB_EPStartXfer+0x52c>)
 800ec10:	400b      	ands	r3, r1
 800ec12:	69b9      	ldr	r1, [r7, #24]
 800ec14:	0148      	lsls	r0, r1, #5
 800ec16:	69f9      	ldr	r1, [r7, #28]
 800ec18:	4401      	add	r1, r0
 800ec1a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ec1e:	4313      	orrs	r3, r2
 800ec20:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ec22:	69bb      	ldr	r3, [r7, #24]
 800ec24:	015a      	lsls	r2, r3, #5
 800ec26:	69fb      	ldr	r3, [r7, #28]
 800ec28:	4413      	add	r3, r2
 800ec2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec2e:	691a      	ldr	r2, [r3, #16]
 800ec30:	68bb      	ldr	r3, [r7, #8]
 800ec32:	6a1b      	ldr	r3, [r3, #32]
 800ec34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ec38:	69b9      	ldr	r1, [r7, #24]
 800ec3a:	0148      	lsls	r0, r1, #5
 800ec3c:	69f9      	ldr	r1, [r7, #28]
 800ec3e:	4401      	add	r1, r0
 800ec40:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ec44:	4313      	orrs	r3, r2
 800ec46:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800ec48:	79fb      	ldrb	r3, [r7, #7]
 800ec4a:	2b01      	cmp	r3, #1
 800ec4c:	d10d      	bne.n	800ec6a <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	68db      	ldr	r3, [r3, #12]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d009      	beq.n	800ec6a <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ec56:	68bb      	ldr	r3, [r7, #8]
 800ec58:	68d9      	ldr	r1, [r3, #12]
 800ec5a:	69bb      	ldr	r3, [r7, #24]
 800ec5c:	015a      	lsls	r2, r3, #5
 800ec5e:	69fb      	ldr	r3, [r7, #28]
 800ec60:	4413      	add	r3, r2
 800ec62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec66:	460a      	mov	r2, r1
 800ec68:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	791b      	ldrb	r3, [r3, #4]
 800ec6e:	2b01      	cmp	r3, #1
 800ec70:	d128      	bne.n	800ecc4 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ec72:	69fb      	ldr	r3, [r7, #28]
 800ec74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec78:	689b      	ldr	r3, [r3, #8]
 800ec7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d110      	bne.n	800eca4 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ec82:	69bb      	ldr	r3, [r7, #24]
 800ec84:	015a      	lsls	r2, r3, #5
 800ec86:	69fb      	ldr	r3, [r7, #28]
 800ec88:	4413      	add	r3, r2
 800ec8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	69ba      	ldr	r2, [r7, #24]
 800ec92:	0151      	lsls	r1, r2, #5
 800ec94:	69fa      	ldr	r2, [r7, #28]
 800ec96:	440a      	add	r2, r1
 800ec98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ec9c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800eca0:	6013      	str	r3, [r2, #0]
 800eca2:	e00f      	b.n	800ecc4 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800eca4:	69bb      	ldr	r3, [r7, #24]
 800eca6:	015a      	lsls	r2, r3, #5
 800eca8:	69fb      	ldr	r3, [r7, #28]
 800ecaa:	4413      	add	r3, r2
 800ecac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	69ba      	ldr	r2, [r7, #24]
 800ecb4:	0151      	lsls	r1, r2, #5
 800ecb6:	69fa      	ldr	r2, [r7, #28]
 800ecb8:	440a      	add	r2, r1
 800ecba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ecbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ecc2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ecc4:	69bb      	ldr	r3, [r7, #24]
 800ecc6:	015a      	lsls	r2, r3, #5
 800ecc8:	69fb      	ldr	r3, [r7, #28]
 800ecca:	4413      	add	r3, r2
 800eccc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	69ba      	ldr	r2, [r7, #24]
 800ecd4:	0151      	lsls	r1, r2, #5
 800ecd6:	69fa      	ldr	r2, [r7, #28]
 800ecd8:	440a      	add	r2, r1
 800ecda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ecde:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ece2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ece4:	2300      	movs	r3, #0
}
 800ece6:	4618      	mov	r0, r3
 800ece8:	3720      	adds	r7, #32
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd80      	pop	{r7, pc}
 800ecee:	bf00      	nop
 800ecf0:	1ff80000 	.word	0x1ff80000

0800ecf4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b087      	sub	sp, #28
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
 800ecfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ecfe:	2300      	movs	r3, #0
 800ed00:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ed02:	2300      	movs	r3, #0
 800ed04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ed0a:	683b      	ldr	r3, [r7, #0]
 800ed0c:	785b      	ldrb	r3, [r3, #1]
 800ed0e:	2b01      	cmp	r3, #1
 800ed10:	d14a      	bne.n	800eda8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	781b      	ldrb	r3, [r3, #0]
 800ed16:	015a      	lsls	r2, r3, #5
 800ed18:	693b      	ldr	r3, [r7, #16]
 800ed1a:	4413      	add	r3, r2
 800ed1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ed26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ed2a:	f040 8086 	bne.w	800ee3a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	781b      	ldrb	r3, [r3, #0]
 800ed32:	015a      	lsls	r2, r3, #5
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	4413      	add	r3, r2
 800ed38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	683a      	ldr	r2, [r7, #0]
 800ed40:	7812      	ldrb	r2, [r2, #0]
 800ed42:	0151      	lsls	r1, r2, #5
 800ed44:	693a      	ldr	r2, [r7, #16]
 800ed46:	440a      	add	r2, r1
 800ed48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ed4c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ed50:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	781b      	ldrb	r3, [r3, #0]
 800ed56:	015a      	lsls	r2, r3, #5
 800ed58:	693b      	ldr	r3, [r7, #16]
 800ed5a:	4413      	add	r3, r2
 800ed5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	683a      	ldr	r2, [r7, #0]
 800ed64:	7812      	ldrb	r2, [r2, #0]
 800ed66:	0151      	lsls	r1, r2, #5
 800ed68:	693a      	ldr	r2, [r7, #16]
 800ed6a:	440a      	add	r2, r1
 800ed6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ed70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ed74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	3301      	adds	r3, #1
 800ed7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ed82:	4293      	cmp	r3, r2
 800ed84:	d902      	bls.n	800ed8c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ed86:	2301      	movs	r3, #1
 800ed88:	75fb      	strb	r3, [r7, #23]
          break;
 800ed8a:	e056      	b.n	800ee3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	781b      	ldrb	r3, [r3, #0]
 800ed90:	015a      	lsls	r2, r3, #5
 800ed92:	693b      	ldr	r3, [r7, #16]
 800ed94:	4413      	add	r3, r2
 800ed96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800eda0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eda4:	d0e7      	beq.n	800ed76 <USB_EPStopXfer+0x82>
 800eda6:	e048      	b.n	800ee3a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	781b      	ldrb	r3, [r3, #0]
 800edac:	015a      	lsls	r2, r3, #5
 800edae:	693b      	ldr	r3, [r7, #16]
 800edb0:	4413      	add	r3, r2
 800edb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800edbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800edc0:	d13b      	bne.n	800ee3a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	781b      	ldrb	r3, [r3, #0]
 800edc6:	015a      	lsls	r2, r3, #5
 800edc8:	693b      	ldr	r3, [r7, #16]
 800edca:	4413      	add	r3, r2
 800edcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	683a      	ldr	r2, [r7, #0]
 800edd4:	7812      	ldrb	r2, [r2, #0]
 800edd6:	0151      	lsls	r1, r2, #5
 800edd8:	693a      	ldr	r2, [r7, #16]
 800edda:	440a      	add	r2, r1
 800eddc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ede0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ede4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	781b      	ldrb	r3, [r3, #0]
 800edea:	015a      	lsls	r2, r3, #5
 800edec:	693b      	ldr	r3, [r7, #16]
 800edee:	4413      	add	r3, r2
 800edf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	683a      	ldr	r2, [r7, #0]
 800edf8:	7812      	ldrb	r2, [r2, #0]
 800edfa:	0151      	lsls	r1, r2, #5
 800edfc:	693a      	ldr	r2, [r7, #16]
 800edfe:	440a      	add	r2, r1
 800ee00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ee04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ee08:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	3301      	adds	r3, #1
 800ee0e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ee16:	4293      	cmp	r3, r2
 800ee18:	d902      	bls.n	800ee20 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ee1a:	2301      	movs	r3, #1
 800ee1c:	75fb      	strb	r3, [r7, #23]
          break;
 800ee1e:	e00c      	b.n	800ee3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	015a      	lsls	r2, r3, #5
 800ee26:	693b      	ldr	r3, [r7, #16]
 800ee28:	4413      	add	r3, r2
 800ee2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ee34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ee38:	d0e7      	beq.n	800ee0a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ee3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	371c      	adds	r7, #28
 800ee40:	46bd      	mov	sp, r7
 800ee42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee46:	4770      	bx	lr

0800ee48 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ee48:	b480      	push	{r7}
 800ee4a:	b089      	sub	sp, #36	@ 0x24
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	60f8      	str	r0, [r7, #12]
 800ee50:	60b9      	str	r1, [r7, #8]
 800ee52:	4611      	mov	r1, r2
 800ee54:	461a      	mov	r2, r3
 800ee56:	460b      	mov	r3, r1
 800ee58:	71fb      	strb	r3, [r7, #7]
 800ee5a:	4613      	mov	r3, r2
 800ee5c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ee66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d123      	bne.n	800eeb6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ee6e:	88bb      	ldrh	r3, [r7, #4]
 800ee70:	3303      	adds	r3, #3
 800ee72:	089b      	lsrs	r3, r3, #2
 800ee74:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ee76:	2300      	movs	r3, #0
 800ee78:	61bb      	str	r3, [r7, #24]
 800ee7a:	e018      	b.n	800eeae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ee7c:	79fb      	ldrb	r3, [r7, #7]
 800ee7e:	031a      	lsls	r2, r3, #12
 800ee80:	697b      	ldr	r3, [r7, #20]
 800ee82:	4413      	add	r3, r2
 800ee84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ee88:	461a      	mov	r2, r3
 800ee8a:	69fb      	ldr	r3, [r7, #28]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ee90:	69fb      	ldr	r3, [r7, #28]
 800ee92:	3301      	adds	r3, #1
 800ee94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ee96:	69fb      	ldr	r3, [r7, #28]
 800ee98:	3301      	adds	r3, #1
 800ee9a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ee9c:	69fb      	ldr	r3, [r7, #28]
 800ee9e:	3301      	adds	r3, #1
 800eea0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800eea2:	69fb      	ldr	r3, [r7, #28]
 800eea4:	3301      	adds	r3, #1
 800eea6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800eea8:	69bb      	ldr	r3, [r7, #24]
 800eeaa:	3301      	adds	r3, #1
 800eeac:	61bb      	str	r3, [r7, #24]
 800eeae:	69ba      	ldr	r2, [r7, #24]
 800eeb0:	693b      	ldr	r3, [r7, #16]
 800eeb2:	429a      	cmp	r2, r3
 800eeb4:	d3e2      	bcc.n	800ee7c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800eeb6:	2300      	movs	r3, #0
}
 800eeb8:	4618      	mov	r0, r3
 800eeba:	3724      	adds	r7, #36	@ 0x24
 800eebc:	46bd      	mov	sp, r7
 800eebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec2:	4770      	bx	lr

0800eec4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800eec4:	b480      	push	{r7}
 800eec6:	b08b      	sub	sp, #44	@ 0x2c
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	60f8      	str	r0, [r7, #12]
 800eecc:	60b9      	str	r1, [r7, #8]
 800eece:	4613      	mov	r3, r2
 800eed0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800eed6:	68bb      	ldr	r3, [r7, #8]
 800eed8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800eeda:	88fb      	ldrh	r3, [r7, #6]
 800eedc:	089b      	lsrs	r3, r3, #2
 800eede:	b29b      	uxth	r3, r3
 800eee0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800eee2:	88fb      	ldrh	r3, [r7, #6]
 800eee4:	f003 0303 	and.w	r3, r3, #3
 800eee8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800eeea:	2300      	movs	r3, #0
 800eeec:	623b      	str	r3, [r7, #32]
 800eeee:	e014      	b.n	800ef1a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800eef0:	69bb      	ldr	r3, [r7, #24]
 800eef2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eef6:	681a      	ldr	r2, [r3, #0]
 800eef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eefa:	601a      	str	r2, [r3, #0]
    pDest++;
 800eefc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eefe:	3301      	adds	r3, #1
 800ef00:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ef02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef04:	3301      	adds	r3, #1
 800ef06:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ef08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef0a:	3301      	adds	r3, #1
 800ef0c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ef0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef10:	3301      	adds	r3, #1
 800ef12:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ef14:	6a3b      	ldr	r3, [r7, #32]
 800ef16:	3301      	adds	r3, #1
 800ef18:	623b      	str	r3, [r7, #32]
 800ef1a:	6a3a      	ldr	r2, [r7, #32]
 800ef1c:	697b      	ldr	r3, [r7, #20]
 800ef1e:	429a      	cmp	r2, r3
 800ef20:	d3e6      	bcc.n	800eef0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ef22:	8bfb      	ldrh	r3, [r7, #30]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d01e      	beq.n	800ef66 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ef28:	2300      	movs	r3, #0
 800ef2a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ef2c:	69bb      	ldr	r3, [r7, #24]
 800ef2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ef32:	461a      	mov	r2, r3
 800ef34:	f107 0310 	add.w	r3, r7, #16
 800ef38:	6812      	ldr	r2, [r2, #0]
 800ef3a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ef3c:	693a      	ldr	r2, [r7, #16]
 800ef3e:	6a3b      	ldr	r3, [r7, #32]
 800ef40:	b2db      	uxtb	r3, r3
 800ef42:	00db      	lsls	r3, r3, #3
 800ef44:	fa22 f303 	lsr.w	r3, r2, r3
 800ef48:	b2da      	uxtb	r2, r3
 800ef4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef4c:	701a      	strb	r2, [r3, #0]
      i++;
 800ef4e:	6a3b      	ldr	r3, [r7, #32]
 800ef50:	3301      	adds	r3, #1
 800ef52:	623b      	str	r3, [r7, #32]
      pDest++;
 800ef54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef56:	3301      	adds	r3, #1
 800ef58:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800ef5a:	8bfb      	ldrh	r3, [r7, #30]
 800ef5c:	3b01      	subs	r3, #1
 800ef5e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ef60:	8bfb      	ldrh	r3, [r7, #30]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d1ea      	bne.n	800ef3c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ef66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ef68:	4618      	mov	r0, r3
 800ef6a:	372c      	adds	r7, #44	@ 0x2c
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef72:	4770      	bx	lr

0800ef74 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ef74:	b480      	push	{r7}
 800ef76:	b085      	sub	sp, #20
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
 800ef7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	781b      	ldrb	r3, [r3, #0]
 800ef86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	785b      	ldrb	r3, [r3, #1]
 800ef8c:	2b01      	cmp	r3, #1
 800ef8e:	d12c      	bne.n	800efea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	015a      	lsls	r2, r3, #5
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	4413      	add	r3, r2
 800ef98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	db12      	blt.n	800efc8 <USB_EPSetStall+0x54>
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d00f      	beq.n	800efc8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	015a      	lsls	r2, r3, #5
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	4413      	add	r3, r2
 800efb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	68ba      	ldr	r2, [r7, #8]
 800efb8:	0151      	lsls	r1, r2, #5
 800efba:	68fa      	ldr	r2, [r7, #12]
 800efbc:	440a      	add	r2, r1
 800efbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800efc2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800efc6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	015a      	lsls	r2, r3, #5
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	4413      	add	r3, r2
 800efd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	68ba      	ldr	r2, [r7, #8]
 800efd8:	0151      	lsls	r1, r2, #5
 800efda:	68fa      	ldr	r2, [r7, #12]
 800efdc:	440a      	add	r2, r1
 800efde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800efe2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800efe6:	6013      	str	r3, [r2, #0]
 800efe8:	e02b      	b.n	800f042 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	015a      	lsls	r2, r3, #5
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	4413      	add	r3, r2
 800eff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	db12      	blt.n	800f022 <USB_EPSetStall+0xae>
 800effc:	68bb      	ldr	r3, [r7, #8]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d00f      	beq.n	800f022 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f002:	68bb      	ldr	r3, [r7, #8]
 800f004:	015a      	lsls	r2, r3, #5
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	4413      	add	r3, r2
 800f00a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	68ba      	ldr	r2, [r7, #8]
 800f012:	0151      	lsls	r1, r2, #5
 800f014:	68fa      	ldr	r2, [r7, #12]
 800f016:	440a      	add	r2, r1
 800f018:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f01c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f020:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f022:	68bb      	ldr	r3, [r7, #8]
 800f024:	015a      	lsls	r2, r3, #5
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	4413      	add	r3, r2
 800f02a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	68ba      	ldr	r2, [r7, #8]
 800f032:	0151      	lsls	r1, r2, #5
 800f034:	68fa      	ldr	r2, [r7, #12]
 800f036:	440a      	add	r2, r1
 800f038:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f03c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f040:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f042:	2300      	movs	r3, #0
}
 800f044:	4618      	mov	r0, r3
 800f046:	3714      	adds	r7, #20
 800f048:	46bd      	mov	sp, r7
 800f04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04e:	4770      	bx	lr

0800f050 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f050:	b480      	push	{r7}
 800f052:	b085      	sub	sp, #20
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
 800f058:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	781b      	ldrb	r3, [r3, #0]
 800f062:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	785b      	ldrb	r3, [r3, #1]
 800f068:	2b01      	cmp	r3, #1
 800f06a:	d128      	bne.n	800f0be <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	015a      	lsls	r2, r3, #5
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	4413      	add	r3, r2
 800f074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	68ba      	ldr	r2, [r7, #8]
 800f07c:	0151      	lsls	r1, r2, #5
 800f07e:	68fa      	ldr	r2, [r7, #12]
 800f080:	440a      	add	r2, r1
 800f082:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f086:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f08a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f08c:	683b      	ldr	r3, [r7, #0]
 800f08e:	791b      	ldrb	r3, [r3, #4]
 800f090:	2b03      	cmp	r3, #3
 800f092:	d003      	beq.n	800f09c <USB_EPClearStall+0x4c>
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	791b      	ldrb	r3, [r3, #4]
 800f098:	2b02      	cmp	r3, #2
 800f09a:	d138      	bne.n	800f10e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	015a      	lsls	r2, r3, #5
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	4413      	add	r3, r2
 800f0a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	68ba      	ldr	r2, [r7, #8]
 800f0ac:	0151      	lsls	r1, r2, #5
 800f0ae:	68fa      	ldr	r2, [r7, #12]
 800f0b0:	440a      	add	r2, r1
 800f0b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f0b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f0ba:	6013      	str	r3, [r2, #0]
 800f0bc:	e027      	b.n	800f10e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f0be:	68bb      	ldr	r3, [r7, #8]
 800f0c0:	015a      	lsls	r2, r3, #5
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	4413      	add	r3, r2
 800f0c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	68ba      	ldr	r2, [r7, #8]
 800f0ce:	0151      	lsls	r1, r2, #5
 800f0d0:	68fa      	ldr	r2, [r7, #12]
 800f0d2:	440a      	add	r2, r1
 800f0d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f0d8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f0dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	791b      	ldrb	r3, [r3, #4]
 800f0e2:	2b03      	cmp	r3, #3
 800f0e4:	d003      	beq.n	800f0ee <USB_EPClearStall+0x9e>
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	791b      	ldrb	r3, [r3, #4]
 800f0ea:	2b02      	cmp	r3, #2
 800f0ec:	d10f      	bne.n	800f10e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	015a      	lsls	r2, r3, #5
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	4413      	add	r3, r2
 800f0f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	68ba      	ldr	r2, [r7, #8]
 800f0fe:	0151      	lsls	r1, r2, #5
 800f100:	68fa      	ldr	r2, [r7, #12]
 800f102:	440a      	add	r2, r1
 800f104:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f10c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f10e:	2300      	movs	r3, #0
}
 800f110:	4618      	mov	r0, r3
 800f112:	3714      	adds	r7, #20
 800f114:	46bd      	mov	sp, r7
 800f116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11a:	4770      	bx	lr

0800f11c <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b086      	sub	sp, #24
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 800f128:	2300      	movs	r3, #0
 800f12a:	617b      	str	r3, [r7, #20]
 800f12c:	e016      	b.n	800f15c <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800f12e:	697b      	ldr	r3, [r7, #20]
 800f130:	015a      	lsls	r2, r3, #5
 800f132:	693b      	ldr	r3, [r7, #16]
 800f134:	4413      	add	r3, r2
 800f136:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f13a:	461a      	mov	r2, r3
 800f13c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800f140:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800f142:	697b      	ldr	r3, [r7, #20]
 800f144:	015a      	lsls	r2, r3, #5
 800f146:	693b      	ldr	r3, [r7, #16]
 800f148:	4413      	add	r3, r2
 800f14a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f14e:	461a      	mov	r2, r3
 800f150:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800f154:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 800f156:	697b      	ldr	r3, [r7, #20]
 800f158:	3301      	adds	r3, #1
 800f15a:	617b      	str	r3, [r7, #20]
 800f15c:	697b      	ldr	r3, [r7, #20]
 800f15e:	2b0e      	cmp	r3, #14
 800f160:	d9e5      	bls.n	800f12e <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 800f162:	693b      	ldr	r3, [r7, #16]
 800f164:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f168:	461a      	mov	r2, r3
 800f16a:	2300      	movs	r3, #0
 800f16c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 800f16e:	693b      	ldr	r3, [r7, #16]
 800f170:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f174:	461a      	mov	r2, r3
 800f176:	2300      	movs	r3, #0
 800f178:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f17a:	693b      	ldr	r3, [r7, #16]
 800f17c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f180:	461a      	mov	r2, r3
 800f182:	2300      	movs	r3, #0
 800f184:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 800f186:	6878      	ldr	r0, [r7, #4]
 800f188:	f7ff f94c 	bl	800e424 <USB_FlushRxFifo>
 800f18c:	4603      	mov	r3, r0
 800f18e:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800f190:	7bfb      	ldrb	r3, [r7, #15]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d001      	beq.n	800f19a <USB_StopDevice+0x7e>
  {
    return ret;
 800f196:	7bfb      	ldrb	r3, [r7, #15]
 800f198:	e00b      	b.n	800f1b2 <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 800f19a:	2110      	movs	r1, #16
 800f19c:	6878      	ldr	r0, [r7, #4]
 800f19e:	f7ff f90f 	bl	800e3c0 <USB_FlushTxFifo>
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800f1a6:	7bfb      	ldrb	r3, [r7, #15]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d001      	beq.n	800f1b0 <USB_StopDevice+0x94>
  {
    return ret;
 800f1ac:	7bfb      	ldrb	r3, [r7, #15]
 800f1ae:	e000      	b.n	800f1b2 <USB_StopDevice+0x96>
  }

  return ret;
 800f1b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	3718      	adds	r7, #24
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	bd80      	pop	{r7, pc}

0800f1ba <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f1ba:	b480      	push	{r7}
 800f1bc:	b085      	sub	sp, #20
 800f1be:	af00      	add	r7, sp, #0
 800f1c0:	6078      	str	r0, [r7, #4]
 800f1c2:	460b      	mov	r3, r1
 800f1c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	68fa      	ldr	r2, [r7, #12]
 800f1d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f1d8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800f1dc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f1e4:	681a      	ldr	r2, [r3, #0]
 800f1e6:	78fb      	ldrb	r3, [r7, #3]
 800f1e8:	011b      	lsls	r3, r3, #4
 800f1ea:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800f1ee:	68f9      	ldr	r1, [r7, #12]
 800f1f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f1f4:	4313      	orrs	r3, r2
 800f1f6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f1f8:	2300      	movs	r3, #0
}
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	3714      	adds	r7, #20
 800f1fe:	46bd      	mov	sp, r7
 800f200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f204:	4770      	bx	lr

0800f206 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f206:	b480      	push	{r7}
 800f208:	b085      	sub	sp, #20
 800f20a:	af00      	add	r7, sp, #0
 800f20c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	68fa      	ldr	r2, [r7, #12]
 800f21c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f220:	f023 0303 	bic.w	r3, r3, #3
 800f224:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f22c:	685b      	ldr	r3, [r3, #4]
 800f22e:	68fa      	ldr	r2, [r7, #12]
 800f230:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f234:	f023 0302 	bic.w	r3, r3, #2
 800f238:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f23a:	2300      	movs	r3, #0
}
 800f23c:	4618      	mov	r0, r3
 800f23e:	3714      	adds	r7, #20
 800f240:	46bd      	mov	sp, r7
 800f242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f246:	4770      	bx	lr

0800f248 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f248:	b480      	push	{r7}
 800f24a:	b085      	sub	sp, #20
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	68fa      	ldr	r2, [r7, #12]
 800f25e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f262:	f023 0303 	bic.w	r3, r3, #3
 800f266:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f26e:	685b      	ldr	r3, [r3, #4]
 800f270:	68fa      	ldr	r2, [r7, #12]
 800f272:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f276:	f043 0302 	orr.w	r3, r3, #2
 800f27a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f27c:	2300      	movs	r3, #0
}
 800f27e:	4618      	mov	r0, r3
 800f280:	3714      	adds	r7, #20
 800f282:	46bd      	mov	sp, r7
 800f284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f288:	4770      	bx	lr

0800f28a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800f28a:	b480      	push	{r7}
 800f28c:	b085      	sub	sp, #20
 800f28e:	af00      	add	r7, sp, #0
 800f290:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	695b      	ldr	r3, [r3, #20]
 800f296:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	699b      	ldr	r3, [r3, #24]
 800f29c:	68fa      	ldr	r2, [r7, #12]
 800f29e:	4013      	ands	r3, r2
 800f2a0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f2a2:	68fb      	ldr	r3, [r7, #12]
}
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	3714      	adds	r7, #20
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ae:	4770      	bx	lr

0800f2b0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f2b0:	b480      	push	{r7}
 800f2b2:	b085      	sub	sp, #20
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f2c2:	699b      	ldr	r3, [r3, #24]
 800f2c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f2cc:	69db      	ldr	r3, [r3, #28]
 800f2ce:	68ba      	ldr	r2, [r7, #8]
 800f2d0:	4013      	ands	r3, r2
 800f2d2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f2d4:	68bb      	ldr	r3, [r7, #8]
 800f2d6:	0c1b      	lsrs	r3, r3, #16
}
 800f2d8:	4618      	mov	r0, r3
 800f2da:	3714      	adds	r7, #20
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e2:	4770      	bx	lr

0800f2e4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f2e4:	b480      	push	{r7}
 800f2e6:	b085      	sub	sp, #20
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f2f6:	699b      	ldr	r3, [r3, #24]
 800f2f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f300:	69db      	ldr	r3, [r3, #28]
 800f302:	68ba      	ldr	r2, [r7, #8]
 800f304:	4013      	ands	r3, r2
 800f306:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	b29b      	uxth	r3, r3
}
 800f30c:	4618      	mov	r0, r3
 800f30e:	3714      	adds	r7, #20
 800f310:	46bd      	mov	sp, r7
 800f312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f316:	4770      	bx	lr

0800f318 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f318:	b480      	push	{r7}
 800f31a:	b085      	sub	sp, #20
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
 800f320:	460b      	mov	r3, r1
 800f322:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f328:	78fb      	ldrb	r3, [r7, #3]
 800f32a:	015a      	lsls	r2, r3, #5
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	4413      	add	r3, r2
 800f330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f334:	689b      	ldr	r3, [r3, #8]
 800f336:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f33e:	695b      	ldr	r3, [r3, #20]
 800f340:	68ba      	ldr	r2, [r7, #8]
 800f342:	4013      	ands	r3, r2
 800f344:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f346:	68bb      	ldr	r3, [r7, #8]
}
 800f348:	4618      	mov	r0, r3
 800f34a:	3714      	adds	r7, #20
 800f34c:	46bd      	mov	sp, r7
 800f34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f352:	4770      	bx	lr

0800f354 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f354:	b480      	push	{r7}
 800f356:	b087      	sub	sp, #28
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
 800f35c:	460b      	mov	r3, r1
 800f35e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f364:	697b      	ldr	r3, [r7, #20]
 800f366:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f36a:	691b      	ldr	r3, [r3, #16]
 800f36c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f36e:	697b      	ldr	r3, [r7, #20]
 800f370:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f376:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f378:	78fb      	ldrb	r3, [r7, #3]
 800f37a:	f003 030f 	and.w	r3, r3, #15
 800f37e:	68fa      	ldr	r2, [r7, #12]
 800f380:	fa22 f303 	lsr.w	r3, r2, r3
 800f384:	01db      	lsls	r3, r3, #7
 800f386:	b2db      	uxtb	r3, r3
 800f388:	693a      	ldr	r2, [r7, #16]
 800f38a:	4313      	orrs	r3, r2
 800f38c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f38e:	78fb      	ldrb	r3, [r7, #3]
 800f390:	015a      	lsls	r2, r3, #5
 800f392:	697b      	ldr	r3, [r7, #20]
 800f394:	4413      	add	r3, r2
 800f396:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f39a:	689b      	ldr	r3, [r3, #8]
 800f39c:	693a      	ldr	r2, [r7, #16]
 800f39e:	4013      	ands	r3, r2
 800f3a0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f3a2:	68bb      	ldr	r3, [r7, #8]
}
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	371c      	adds	r7, #28
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ae:	4770      	bx	lr

0800f3b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800f3b0:	b480      	push	{r7}
 800f3b2:	b083      	sub	sp, #12
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	695b      	ldr	r3, [r3, #20]
 800f3bc:	f003 0301 	and.w	r3, r3, #1
}
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	370c      	adds	r7, #12
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ca:	4770      	bx	lr

0800f3cc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800f3cc:	b480      	push	{r7}
 800f3ce:	b085      	sub	sp, #20
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	68fa      	ldr	r2, [r7, #12]
 800f3e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f3e6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800f3ea:	f023 0307 	bic.w	r3, r3, #7
 800f3ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f3f6:	685b      	ldr	r3, [r3, #4]
 800f3f8:	68fa      	ldr	r2, [r7, #12]
 800f3fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f3fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f402:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f404:	2300      	movs	r3, #0
}
 800f406:	4618      	mov	r0, r3
 800f408:	3714      	adds	r7, #20
 800f40a:	46bd      	mov	sp, r7
 800f40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f410:	4770      	bx	lr
	...

0800f414 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800f414:	b480      	push	{r7}
 800f416:	b087      	sub	sp, #28
 800f418:	af00      	add	r7, sp, #0
 800f41a:	60f8      	str	r0, [r7, #12]
 800f41c:	460b      	mov	r3, r1
 800f41e:	607a      	str	r2, [r7, #4]
 800f420:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	333c      	adds	r3, #60	@ 0x3c
 800f42a:	3304      	adds	r3, #4
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f430:	693b      	ldr	r3, [r7, #16]
 800f432:	4a26      	ldr	r2, [pc, #152]	@ (800f4cc <USB_EP0_OutStart+0xb8>)
 800f434:	4293      	cmp	r3, r2
 800f436:	d90a      	bls.n	800f44e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f438:	697b      	ldr	r3, [r7, #20]
 800f43a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f444:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f448:	d101      	bne.n	800f44e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f44a:	2300      	movs	r3, #0
 800f44c:	e037      	b.n	800f4be <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f44e:	697b      	ldr	r3, [r7, #20]
 800f450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f454:	461a      	mov	r2, r3
 800f456:	2300      	movs	r3, #0
 800f458:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f45a:	697b      	ldr	r3, [r7, #20]
 800f45c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f460:	691b      	ldr	r3, [r3, #16]
 800f462:	697a      	ldr	r2, [r7, #20]
 800f464:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f468:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f46c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f46e:	697b      	ldr	r3, [r7, #20]
 800f470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f474:	691b      	ldr	r3, [r3, #16]
 800f476:	697a      	ldr	r2, [r7, #20]
 800f478:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f47c:	f043 0318 	orr.w	r3, r3, #24
 800f480:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f488:	691b      	ldr	r3, [r3, #16]
 800f48a:	697a      	ldr	r2, [r7, #20]
 800f48c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f490:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800f494:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f496:	7afb      	ldrb	r3, [r7, #11]
 800f498:	2b01      	cmp	r3, #1
 800f49a:	d10f      	bne.n	800f4bc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f49c:	697b      	ldr	r3, [r7, #20]
 800f49e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f4a2:	461a      	mov	r2, r3
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	697a      	ldr	r2, [r7, #20]
 800f4b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f4b6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800f4ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f4bc:	2300      	movs	r3, #0
}
 800f4be:	4618      	mov	r0, r3
 800f4c0:	371c      	adds	r7, #28
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c8:	4770      	bx	lr
 800f4ca:	bf00      	nop
 800f4cc:	4f54300a 	.word	0x4f54300a

0800f4d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f4d0:	b480      	push	{r7}
 800f4d2:	b085      	sub	sp, #20
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f4d8:	2300      	movs	r3, #0
 800f4da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	3301      	adds	r3, #1
 800f4e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f4e8:	d901      	bls.n	800f4ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f4ea:	2303      	movs	r3, #3
 800f4ec:	e01b      	b.n	800f526 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	691b      	ldr	r3, [r3, #16]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	daf2      	bge.n	800f4dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	691b      	ldr	r3, [r3, #16]
 800f4fe:	f043 0201 	orr.w	r2, r3, #1
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	3301      	adds	r3, #1
 800f50a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f512:	d901      	bls.n	800f518 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f514:	2303      	movs	r3, #3
 800f516:	e006      	b.n	800f526 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	691b      	ldr	r3, [r3, #16]
 800f51c:	f003 0301 	and.w	r3, r3, #1
 800f520:	2b01      	cmp	r3, #1
 800f522:	d0f0      	beq.n	800f506 <USB_CoreReset+0x36>

  return HAL_OK;
 800f524:	2300      	movs	r3, #0
}
 800f526:	4618      	mov	r0, r3
 800f528:	3714      	adds	r7, #20
 800f52a:	46bd      	mov	sp, r7
 800f52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f530:	4770      	bx	lr
	...

0800f534 <HAL_UART_RxCpltCallback>:
uint8_t flag_cli = 0;
uint8_t invoke_time = 0;
uint8_t invoke_date = 0;

// STM32 UART callback function, to pass received characters to the embedded-cli
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800f534:	b580      	push	{r7, lr}
 800f536:	b084      	sub	sp, #16
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
	if (huart == UART_CLI_PERIPH && cliIsReady) {
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	4a13      	ldr	r2, [pc, #76]	@ (800f58c <HAL_UART_RxCpltCallback+0x58>)
 800f540:	4293      	cmp	r3, r2
 800f542:	d11f      	bne.n	800f584 <HAL_UART_RxCpltCallback+0x50>
 800f544:	4b12      	ldr	r3, [pc, #72]	@ (800f590 <HAL_UART_RxCpltCallback+0x5c>)
 800f546:	781b      	ldrb	r3, [r3, #0]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d01b      	beq.n	800f584 <HAL_UART_RxCpltCallback+0x50>
		HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer,
 800f54c:	2201      	movs	r2, #1
 800f54e:	4911      	ldr	r1, [pc, #68]	@ (800f594 <HAL_UART_RxCpltCallback+0x60>)
 800f550:	480e      	ldr	r0, [pc, #56]	@ (800f58c <HAL_UART_RxCpltCallback+0x58>)
 800f552:	f7fc ff68 	bl	800c426 <HAL_UART_Receive_IT>
		UART_RX_BUFF_SIZE);

		if (!cli_other) {
 800f556:	4b10      	ldr	r3, [pc, #64]	@ (800f598 <HAL_UART_RxCpltCallback+0x64>)
 800f558:	781b      	ldrb	r3, [r3, #0]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d10a      	bne.n	800f574 <HAL_UART_RxCpltCallback+0x40>
			char c = UART_CLI_rxBuffer[0];
 800f55e:	4b0d      	ldr	r3, [pc, #52]	@ (800f594 <HAL_UART_RxCpltCallback+0x60>)
 800f560:	781b      	ldrb	r3, [r3, #0]
 800f562:	73fb      	strb	r3, [r7, #15]
			embeddedCliReceiveChar(cli, c);
 800f564:	4b0d      	ldr	r3, [pc, #52]	@ (800f59c <HAL_UART_RxCpltCallback+0x68>)
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	7bfa      	ldrb	r2, [r7, #15]
 800f56a:	4611      	mov	r1, r2
 800f56c:	4618      	mov	r0, r3
 800f56e:	f003 f86d 	bl	801264c <embeddedCliReceiveChar>
 800f572:	e002      	b.n	800f57a <HAL_UART_RxCpltCallback+0x46>
		} else {
			flag_cli = 1;
 800f574:	4b0a      	ldr	r3, [pc, #40]	@ (800f5a0 <HAL_UART_RxCpltCallback+0x6c>)
 800f576:	2201      	movs	r2, #1
 800f578:	701a      	strb	r2, [r3, #0]
		}

		prev_sleep_time = HAL_GetTick();
 800f57a:	f7f4 fe29 	bl	80041d0 <HAL_GetTick>
 800f57e:	4603      	mov	r3, r0
 800f580:	4a08      	ldr	r2, [pc, #32]	@ (800f5a4 <HAL_UART_RxCpltCallback+0x70>)
 800f582:	6013      	str	r3, [r2, #0]

//	if(huart == &huart2)
//	{
//		sensirion_uart_interrupt();
//	}
}
 800f584:	bf00      	nop
 800f586:	3710      	adds	r7, #16
 800f588:	46bd      	mov	sp, r7
 800f58a:	bd80      	pop	{r7, pc}
 800f58c:	20001a74 	.word	0x20001a74
 800f590:	20001b39 	.word	0x20001b39
 800f594:	20001b38 	.word	0x20001b38
 800f598:	20001b3a 	.word	0x20001b3a
 800f59c:	20001b2c 	.word	0x20001b2c
 800f5a0:	20001b3b 	.word	0x20001b3b
 800f5a4:	200017c0 	.word	0x200017c0

0800f5a8 <writeCharToCli>:
 HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)token, tokenSize, 1000);
 }
 }
 **/

static void writeCharToCli(EmbeddedCli *embeddedCli, char c) {
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b084      	sub	sp, #16
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
 800f5b0:	460b      	mov	r3, r1
 800f5b2:	70fb      	strb	r3, [r7, #3]
	uint8_t c_to_send = c;
 800f5b4:	78fb      	ldrb	r3, [r7, #3]
 800f5b6:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(UART_CLI_PERIPH, &c_to_send, 1, 100);
 800f5b8:	f107 010f 	add.w	r1, r7, #15
 800f5bc:	2364      	movs	r3, #100	@ 0x64
 800f5be:	2201      	movs	r2, #1
 800f5c0:	4803      	ldr	r0, [pc, #12]	@ (800f5d0 <writeCharToCli+0x28>)
 800f5c2:	f7fc fea5 	bl	800c310 <HAL_UART_Transmit>
}
 800f5c6:	bf00      	nop
 800f5c8:	3710      	adds	r7, #16
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bd80      	pop	{r7, pc}
 800f5ce:	bf00      	nop
 800f5d0:	20001a74 	.word	0x20001a74

0800f5d4 <cli_printf>:

// Function to encapsulate the 'embeddedCliPrint()' call with print formatting arguments (act like printf(), but keeps cursor at correct location).
// The 'embeddedCliPrint()' function does already add a linebreak ('\r\n') to the end of the print statement, so no need to add it yourself.
void cli_printf(EmbeddedCli *cli, const char *format, ...) {
 800f5d4:	b40e      	push	{r1, r2, r3}
 800f5d6:	b580      	push	{r7, lr}
 800f5d8:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f5e2:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800f5e6:	6018      	str	r0, [r3, #0]
	// Create a buffer to store the formatted string
	char buffer[CLI_PRINT_BUFFER_SIZE];

	// Format the string using snprintf
	va_list args;
	va_start(args, format);
 800f5e8:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800f5ec:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f5f0:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800f5f4:	601a      	str	r2, [r3, #0]
	int length = vsnprintf(buffer, sizeof(buffer), format, args);
 800f5f6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f5fa:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800f5fe:	f107 000c 	add.w	r0, r7, #12
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 800f608:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f60c:	f00f fb36 	bl	801ec7c <vsniprintf>
 800f610:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
	va_end(args);

	// Check if string fitted in buffer else print error to stderr
	if (length < 0) {
 800f614:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800f618:	2b00      	cmp	r3, #0
 800f61a:	da08      	bge.n	800f62e <cli_printf+0x5a>
		fprintf(stderr, "Error formatting the string\r\n");
 800f61c:	4b0c      	ldr	r3, [pc, #48]	@ (800f650 <cli_printf+0x7c>)
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	68db      	ldr	r3, [r3, #12]
 800f622:	221d      	movs	r2, #29
 800f624:	2101      	movs	r1, #1
 800f626:	480b      	ldr	r0, [pc, #44]	@ (800f654 <cli_printf+0x80>)
 800f628:	f00f fa1c 	bl	801ea64 <fwrite>
 800f62c:	e009      	b.n	800f642 <cli_printf+0x6e>
		return;
	}

	// Call embeddedCliPrint with the formatted string
	embeddedCliPrint(cli, buffer);
 800f62e:	f107 020c 	add.w	r2, r7, #12
 800f632:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f636:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800f63a:	4611      	mov	r1, r2
 800f63c:	6818      	ldr	r0, [r3, #0]
 800f63e:	f003 f8eb 	bl	8012818 <embeddedCliPrint>
}
 800f642:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 800f646:	46bd      	mov	sp, r7
 800f648:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f64c:	b003      	add	sp, #12
 800f64e:	4770      	bx	lr
 800f650:	20000148 	.word	0x20000148
 800f654:	08022484 	.word	0x08022484

0800f658 <receiveString>:

void receiveString(EmbeddedCli *cli, char *buffer, size_t bufferSize) {
 800f658:	b580      	push	{r7, lr}
 800f65a:	b088      	sub	sp, #32
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	60f8      	str	r0, [r7, #12]
 800f660:	60b9      	str	r1, [r7, #8]
 800f662:	607a      	str	r2, [r7, #4]
	size_t index = 0;
 800f664:	2300      	movs	r3, #0
 800f666:	61fb      	str	r3, [r7, #28]
	int i, j;
	prev_max_wait_time = HAL_GetTick();
 800f668:	f7f4 fdb2 	bl	80041d0 <HAL_GetTick>
 800f66c:	4603      	mov	r3, r0
 800f66e:	4a5f      	ldr	r2, [pc, #380]	@ (800f7ec <receiveString+0x194>)
 800f670:	6013      	str	r3, [r2, #0]
	while (1) {
		if (flag_cli) {
 800f672:	4b5f      	ldr	r3, [pc, #380]	@ (800f7f0 <receiveString+0x198>)
 800f674:	781b      	ldrb	r3, [r3, #0]
 800f676:	2b00      	cmp	r3, #0
 800f678:	f000 80a0 	beq.w	800f7bc <receiveString+0x164>
			if (UART_CLI_rxBuffer[0] == '\x0d' || index == bufferSize - 1) {
 800f67c:	4b5d      	ldr	r3, [pc, #372]	@ (800f7f4 <receiveString+0x19c>)
 800f67e:	781b      	ldrb	r3, [r3, #0]
 800f680:	2b0d      	cmp	r3, #13
 800f682:	d004      	beq.n	800f68e <receiveString+0x36>
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	3b01      	subs	r3, #1
 800f688:	69fa      	ldr	r2, [r7, #28]
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d164      	bne.n	800f758 <receiveString+0x100>
				// Exit the loop when Enter key is pressed or buffer is full
				buffer[index] = '\0'; // Null-terminate the string
 800f68e:	68ba      	ldr	r2, [r7, #8]
 800f690:	69fb      	ldr	r3, [r7, #28]
 800f692:	4413      	add	r3, r2
 800f694:	2200      	movs	r2, #0
 800f696:	701a      	strb	r2, [r3, #0]
				flag_cli = 0;
 800f698:	4b55      	ldr	r3, [pc, #340]	@ (800f7f0 <receiveString+0x198>)
 800f69a:	2200      	movs	r2, #0
 800f69c:	701a      	strb	r2, [r3, #0]
				// Convert the entered string to lowercase
//				for (size_t i = 0; buffer[i]; i++) {
//					buffer[i] = tolower(buffer[i]);
//				}
				//Iterating each character and removing non alphabetical characters.
				for (i = 0; buffer[i] != '\0'; ++i) {
 800f69e:	2300      	movs	r3, #0
 800f6a0:	61bb      	str	r3, [r7, #24]
 800f6a2:	e052      	b.n	800f74a <receiveString+0xf2>
					while (!((buffer[i] >= 'a' && buffer[i] <= 'z')
							|| (buffer[i] >= 'A' && buffer[i] <= 'Z')
							|| buffer[i] == '_' || buffer[i] == ':'
							|| (buffer[i] >= 0x30 && buffer[i] <= 0x39)
							|| buffer[i] == '\0')) {
						for (j = i; buffer[j] != '\0'; ++j) {
 800f6a4:	69bb      	ldr	r3, [r7, #24]
 800f6a6:	617b      	str	r3, [r7, #20]
 800f6a8:	e00b      	b.n	800f6c2 <receiveString+0x6a>
							buffer[j] = buffer[j + 1];
 800f6aa:	697b      	ldr	r3, [r7, #20]
 800f6ac:	3301      	adds	r3, #1
 800f6ae:	68ba      	ldr	r2, [r7, #8]
 800f6b0:	441a      	add	r2, r3
 800f6b2:	697b      	ldr	r3, [r7, #20]
 800f6b4:	68b9      	ldr	r1, [r7, #8]
 800f6b6:	440b      	add	r3, r1
 800f6b8:	7812      	ldrb	r2, [r2, #0]
 800f6ba:	701a      	strb	r2, [r3, #0]
						for (j = i; buffer[j] != '\0'; ++j) {
 800f6bc:	697b      	ldr	r3, [r7, #20]
 800f6be:	3301      	adds	r3, #1
 800f6c0:	617b      	str	r3, [r7, #20]
 800f6c2:	697b      	ldr	r3, [r7, #20]
 800f6c4:	68ba      	ldr	r2, [r7, #8]
 800f6c6:	4413      	add	r3, r2
 800f6c8:	781b      	ldrb	r3, [r3, #0]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d1ed      	bne.n	800f6aa <receiveString+0x52>
						}
						buffer[j] = '\0';
 800f6ce:	697b      	ldr	r3, [r7, #20]
 800f6d0:	68ba      	ldr	r2, [r7, #8]
 800f6d2:	4413      	add	r3, r2
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	701a      	strb	r2, [r3, #0]
					while (!((buffer[i] >= 'a' && buffer[i] <= 'z')
 800f6d8:	69bb      	ldr	r3, [r7, #24]
 800f6da:	68ba      	ldr	r2, [r7, #8]
 800f6dc:	4413      	add	r3, r2
 800f6de:	781b      	ldrb	r3, [r3, #0]
 800f6e0:	2b60      	cmp	r3, #96	@ 0x60
 800f6e2:	d905      	bls.n	800f6f0 <receiveString+0x98>
 800f6e4:	69bb      	ldr	r3, [r7, #24]
 800f6e6:	68ba      	ldr	r2, [r7, #8]
 800f6e8:	4413      	add	r3, r2
 800f6ea:	781b      	ldrb	r3, [r3, #0]
 800f6ec:	2b7a      	cmp	r3, #122	@ 0x7a
 800f6ee:	d929      	bls.n	800f744 <receiveString+0xec>
							|| (buffer[i] >= 'A' && buffer[i] <= 'Z')
 800f6f0:	69bb      	ldr	r3, [r7, #24]
 800f6f2:	68ba      	ldr	r2, [r7, #8]
 800f6f4:	4413      	add	r3, r2
 800f6f6:	781b      	ldrb	r3, [r3, #0]
 800f6f8:	2b40      	cmp	r3, #64	@ 0x40
 800f6fa:	d905      	bls.n	800f708 <receiveString+0xb0>
 800f6fc:	69bb      	ldr	r3, [r7, #24]
 800f6fe:	68ba      	ldr	r2, [r7, #8]
 800f700:	4413      	add	r3, r2
 800f702:	781b      	ldrb	r3, [r3, #0]
 800f704:	2b5a      	cmp	r3, #90	@ 0x5a
 800f706:	d91d      	bls.n	800f744 <receiveString+0xec>
							|| buffer[i] == '_' || buffer[i] == ':'
 800f708:	69bb      	ldr	r3, [r7, #24]
 800f70a:	68ba      	ldr	r2, [r7, #8]
 800f70c:	4413      	add	r3, r2
 800f70e:	781b      	ldrb	r3, [r3, #0]
 800f710:	2b5f      	cmp	r3, #95	@ 0x5f
 800f712:	d017      	beq.n	800f744 <receiveString+0xec>
 800f714:	69bb      	ldr	r3, [r7, #24]
 800f716:	68ba      	ldr	r2, [r7, #8]
 800f718:	4413      	add	r3, r2
 800f71a:	781b      	ldrb	r3, [r3, #0]
 800f71c:	2b3a      	cmp	r3, #58	@ 0x3a
 800f71e:	d011      	beq.n	800f744 <receiveString+0xec>
							|| (buffer[i] >= 0x30 && buffer[i] <= 0x39)
 800f720:	69bb      	ldr	r3, [r7, #24]
 800f722:	68ba      	ldr	r2, [r7, #8]
 800f724:	4413      	add	r3, r2
 800f726:	781b      	ldrb	r3, [r3, #0]
 800f728:	2b2f      	cmp	r3, #47	@ 0x2f
 800f72a:	d905      	bls.n	800f738 <receiveString+0xe0>
 800f72c:	69bb      	ldr	r3, [r7, #24]
 800f72e:	68ba      	ldr	r2, [r7, #8]
 800f730:	4413      	add	r3, r2
 800f732:	781b      	ldrb	r3, [r3, #0]
 800f734:	2b39      	cmp	r3, #57	@ 0x39
 800f736:	d905      	bls.n	800f744 <receiveString+0xec>
							|| buffer[i] == '\0')) {
 800f738:	69bb      	ldr	r3, [r7, #24]
 800f73a:	68ba      	ldr	r2, [r7, #8]
 800f73c:	4413      	add	r3, r2
 800f73e:	781b      	ldrb	r3, [r3, #0]
					while (!((buffer[i] >= 'a' && buffer[i] <= 'z')
 800f740:	2b00      	cmp	r3, #0
 800f742:	d1af      	bne.n	800f6a4 <receiveString+0x4c>
				for (i = 0; buffer[i] != '\0'; ++i) {
 800f744:	69bb      	ldr	r3, [r7, #24]
 800f746:	3301      	adds	r3, #1
 800f748:	61bb      	str	r3, [r7, #24]
 800f74a:	69bb      	ldr	r3, [r7, #24]
 800f74c:	68ba      	ldr	r2, [r7, #8]
 800f74e:	4413      	add	r3, r2
 800f750:	781b      	ldrb	r3, [r3, #0]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d1c0      	bne.n	800f6d8 <receiveString+0x80>
					}
				}
				break;
 800f756:	e044      	b.n	800f7e2 <receiveString+0x18a>
			} else {
				// Check if the received character is an alphabet character
				if ((UART_CLI_rxBuffer[0] == '\b'
 800f758:	4b26      	ldr	r3, [pc, #152]	@ (800f7f4 <receiveString+0x19c>)
 800f75a:	781b      	ldrb	r3, [r3, #0]
 800f75c:	2b08      	cmp	r3, #8
 800f75e:	d003      	beq.n	800f768 <receiveString+0x110>
						|| UART_CLI_rxBuffer[0] == 0x7F)) {
 800f760:	4b24      	ldr	r3, [pc, #144]	@ (800f7f4 <receiveString+0x19c>)
 800f762:	781b      	ldrb	r3, [r3, #0]
 800f764:	2b7f      	cmp	r3, #127	@ 0x7f
 800f766:	d117      	bne.n	800f798 <receiveString+0x140>
					cli->writeChar(cli, '\b');
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	2108      	movs	r1, #8
 800f76e:	68f8      	ldr	r0, [r7, #12]
 800f770:	4798      	blx	r3
					cli->writeChar(cli, ' ');
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	2120      	movs	r1, #32
 800f778:	68f8      	ldr	r0, [r7, #12]
 800f77a:	4798      	blx	r3
					cli->writeChar(cli, '\b');
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	2108      	movs	r1, #8
 800f782:	68f8      	ldr	r0, [r7, #12]
 800f784:	4798      	blx	r3
					--index;
 800f786:	69fb      	ldr	r3, [r7, #28]
 800f788:	3b01      	subs	r3, #1
 800f78a:	61fb      	str	r3, [r7, #28]
					buffer[index] = '\0';
 800f78c:	68ba      	ldr	r2, [r7, #8]
 800f78e:	69fb      	ldr	r3, [r7, #28]
 800f790:	4413      	add	r3, r2
 800f792:	2200      	movs	r2, #0
 800f794:	701a      	strb	r2, [r3, #0]
 800f796:	e00e      	b.n	800f7b6 <receiveString+0x15e>
				} else {
					buffer[index++] = UART_CLI_rxBuffer[0];
 800f798:	69fb      	ldr	r3, [r7, #28]
 800f79a:	1c5a      	adds	r2, r3, #1
 800f79c:	61fa      	str	r2, [r7, #28]
 800f79e:	68ba      	ldr	r2, [r7, #8]
 800f7a0:	4413      	add	r3, r2
 800f7a2:	4a14      	ldr	r2, [pc, #80]	@ (800f7f4 <receiveString+0x19c>)
 800f7a4:	7812      	ldrb	r2, [r2, #0]
 800f7a6:	701a      	strb	r2, [r3, #0]
					cli->writeChar(cli, UART_CLI_rxBuffer[0]);
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	4a11      	ldr	r2, [pc, #68]	@ (800f7f4 <receiveString+0x19c>)
 800f7ae:	7812      	ldrb	r2, [r2, #0]
 800f7b0:	4611      	mov	r1, r2
 800f7b2:	68f8      	ldr	r0, [r7, #12]
 800f7b4:	4798      	blx	r3
				}
			}
			flag_cli = 0;
 800f7b6:	4b0e      	ldr	r3, [pc, #56]	@ (800f7f0 <receiveString+0x198>)
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	701a      	strb	r2, [r3, #0]
		}

		//incase no usb then also break it
		if ((HAL_GetTick() - prev_max_wait_time > max_wait_time) || !HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 800f7bc:	f7f4 fd08 	bl	80041d0 <HAL_GetTick>
 800f7c0:	4602      	mov	r2, r0
 800f7c2:	4b0a      	ldr	r3, [pc, #40]	@ (800f7ec <receiveString+0x194>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	1ad2      	subs	r2, r2, r3
 800f7c8:	4b0b      	ldr	r3, [pc, #44]	@ (800f7f8 <receiveString+0x1a0>)
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	429a      	cmp	r2, r3
 800f7ce:	d808      	bhi.n	800f7e2 <receiveString+0x18a>
 800f7d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f7d4:	4809      	ldr	r0, [pc, #36]	@ (800f7fc <receiveString+0x1a4>)
 800f7d6:	f7f6 fcc7 	bl	8006168 <HAL_GPIO_ReadPin>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d000      	beq.n	800f7e2 <receiveString+0x18a>
		if (flag_cli) {
 800f7e0:	e747      	b.n	800f672 <receiveString+0x1a>
			//we break the loop if time goes above 5min
			break;
		}

	}
}
 800f7e2:	bf00      	nop
 800f7e4:	3720      	adds	r7, #32
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}
 800f7ea:	bf00      	nop
 800f7ec:	20001b30 	.word	0x20001b30
 800f7f0:	20001b3b 	.word	0x20001b3b
 800f7f4:	20001b38 	.word	0x20001b38
 800f7f8:	2000001c 	.word	0x2000001c
 800f7fc:	40020000 	.word	0x40020000

0800f800 <onClearCLI>:

void onClearCLI(EmbeddedCli *cli, char *args, void *context) {
 800f800:	b580      	push	{r7, lr}
 800f802:	b084      	sub	sp, #16
 800f804:	af00      	add	r7, sp, #0
 800f806:	60f8      	str	r0, [r7, #12]
 800f808:	60b9      	str	r1, [r7, #8]
 800f80a:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "\33[2J");
 800f80c:	4903      	ldr	r1, [pc, #12]	@ (800f81c <onClearCLI+0x1c>)
 800f80e:	68f8      	ldr	r0, [r7, #12]
 800f810:	f7ff fee0 	bl	800f5d4 <cli_printf>
}
 800f814:	bf00      	nop
 800f816:	3710      	adds	r7, #16
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd80      	pop	{r7, pc}
 800f81c:	080224a4 	.word	0x080224a4

0800f820 <debug_scd4x_PM25>:

void debug_scd4x_PM25(EmbeddedCli *cli, char *args, void *context) {
 800f820:	b580      	push	{r7, lr}
 800f822:	b092      	sub	sp, #72	@ 0x48
 800f824:	af00      	add	r7, sp, #0
 800f826:	60f8      	str	r0, [r7, #12]
 800f828:	60b9      	str	r1, [r7, #8]
 800f82a:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800f82c:	4b24      	ldr	r3, [pc, #144]	@ (800f8c0 <debug_scd4x_PM25+0xa0>)
 800f82e:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Do you want to enable debug for scd4x and PM y/n?");
 800f830:	4924      	ldr	r1, [pc, #144]	@ (800f8c4 <debug_scd4x_PM25+0xa4>)
 800f832:	68f8      	ldr	r0, [r7, #12]
 800f834:	f7ff fece 	bl	800f5d4 <cli_printf>

	cli_other = 1;
 800f838:	4b23      	ldr	r3, [pc, #140]	@ (800f8c8 <debug_scd4x_PM25+0xa8>)
 800f83a:	2201      	movs	r2, #1
 800f83c:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f83e:	4b23      	ldr	r3, [pc, #140]	@ (800f8cc <debug_scd4x_PM25+0xac>)
 800f840:	2200      	movs	r2, #0
 800f842:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f844:	f107 0310 	add.w	r3, r7, #16
 800f848:	2232      	movs	r2, #50	@ 0x32
 800f84a:	4619      	mov	r1, r3
 800f84c:	68f8      	ldr	r0, [r7, #12]
 800f84e:	f7ff ff03 	bl	800f658 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f852:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f854:	f7f0 fd24 	bl	80002a0 <strlen>
 800f858:	4603      	mov	r3, r0
 800f85a:	b29a      	uxth	r2, r3
 800f85c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f860:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f862:	481b      	ldr	r0, [pc, #108]	@ (800f8d0 <debug_scd4x_PM25+0xb0>)
 800f864:	f7fc fd54 	bl	800c310 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "y")) {
 800f868:	f107 0310 	add.w	r3, r7, #16
 800f86c:	2179      	movs	r1, #121	@ 0x79
 800f86e:	4618      	mov	r0, r3
 800f870:	f00f fac8 	bl	801ee04 <strchr>
 800f874:	4603      	mov	r3, r0
 800f876:	2b00      	cmp	r3, #0
 800f878:	d007      	beq.n	800f88a <debug_scd4x_PM25+0x6a>
		debug_scd_pm = 1;
 800f87a:	4b16      	ldr	r3, [pc, #88]	@ (800f8d4 <debug_scd4x_PM25+0xb4>)
 800f87c:	2201      	movs	r2, #1
 800f87e:	701a      	strb	r2, [r3, #0]
		cli_printf(cli, "Debug enabled");
 800f880:	4915      	ldr	r1, [pc, #84]	@ (800f8d8 <debug_scd4x_PM25+0xb8>)
 800f882:	68f8      	ldr	r0, [r7, #12]
 800f884:	f7ff fea6 	bl	800f5d4 <cli_printf>
 800f888:	e00f      	b.n	800f8aa <debug_scd4x_PM25+0x8a>
	} else if (strstr(buffer, "n")) {
 800f88a:	f107 0310 	add.w	r3, r7, #16
 800f88e:	216e      	movs	r1, #110	@ 0x6e
 800f890:	4618      	mov	r0, r3
 800f892:	f00f fab7 	bl	801ee04 <strchr>
 800f896:	4603      	mov	r3, r0
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d006      	beq.n	800f8aa <debug_scd4x_PM25+0x8a>
		debug_scd_pm = 0;
 800f89c:	4b0d      	ldr	r3, [pc, #52]	@ (800f8d4 <debug_scd4x_PM25+0xb4>)
 800f89e:	2200      	movs	r2, #0
 800f8a0:	701a      	strb	r2, [r3, #0]
		cli_printf(cli, "Debug disabled");
 800f8a2:	490e      	ldr	r1, [pc, #56]	@ (800f8dc <debug_scd4x_PM25+0xbc>)
 800f8a4:	68f8      	ldr	r0, [r7, #12]
 800f8a6:	f7ff fe95 	bl	800f5d4 <cli_printf>
	}

	flag_cli = 0;
 800f8aa:	4b08      	ldr	r3, [pc, #32]	@ (800f8cc <debug_scd4x_PM25+0xac>)
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f8b0:	4b05      	ldr	r3, [pc, #20]	@ (800f8c8 <debug_scd4x_PM25+0xa8>)
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	701a      	strb	r2, [r3, #0]
}
 800f8b6:	bf00      	nop
 800f8b8:	3748      	adds	r7, #72	@ 0x48
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}
 800f8be:	bf00      	nop
 800f8c0:	080224ac 	.word	0x080224ac
 800f8c4:	080224b0 	.word	0x080224b0
 800f8c8:	20001b3a 	.word	0x20001b3a
 800f8cc:	20001b3b 	.word	0x20001b3b
 800f8d0:	20001a74 	.word	0x20001a74
 800f8d4:	20001578 	.word	0x20001578
 800f8d8:	080224e4 	.word	0x080224e4
 800f8dc:	080224f4 	.word	0x080224f4

0800f8e0 <DeviceSignature>:

void DeviceSignature(EmbeddedCli *cli, char *args, void *context) {
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b084      	sub	sp, #16
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	60f8      	str	r0, [r7, #12]
 800f8e8:	60b9      	str	r1, [r7, #8]
 800f8ea:	607a      	str	r2, [r7, #4]

//	cli_printf(cli,"Device ID/Signature: TF241_0x%04X.",_ID_GetSignature());

	cli_printf(cli, "Device ID/Signature: %s.", ver_GetUid());
 800f8ec:	f7f2 fdec 	bl	80024c8 <ver_GetUid>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	461a      	mov	r2, r3
 800f8f4:	4903      	ldr	r1, [pc, #12]	@ (800f904 <DeviceSignature+0x24>)
 800f8f6:	68f8      	ldr	r0, [r7, #12]
 800f8f8:	f7ff fe6c 	bl	800f5d4 <cli_printf>
}
 800f8fc:	bf00      	nop
 800f8fe:	3710      	adds	r7, #16
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}
 800f904:	08022504 	.word	0x08022504

0800f908 <SetID>:

void SetID(EmbeddedCli *cli, char *args, void *context) {
 800f908:	b580      	push	{r7, lr}
 800f90a:	b092      	sub	sp, #72	@ 0x48
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	60f8      	str	r0, [r7, #12]
 800f910:	60b9      	str	r1, [r7, #8]
 800f912:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800f914:	4b2d      	ldr	r3, [pc, #180]	@ (800f9cc <SetID+0xc4>)
 800f916:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800f918:	492d      	ldr	r1, [pc, #180]	@ (800f9d0 <SetID+0xc8>)
 800f91a:	68f8      	ldr	r0, [r7, #12]
 800f91c:	f7ff fe5a 	bl	800f5d4 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f920:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f922:	f7f0 fcbd 	bl	80002a0 <strlen>
 800f926:	4603      	mov	r3, r0
 800f928:	b29a      	uxth	r2, r3
 800f92a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f92e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f930:	4828      	ldr	r0, [pc, #160]	@ (800f9d4 <SetID+0xcc>)
 800f932:	f7fc fced 	bl	800c310 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Set the ID. Keep ID below 30 characters");
 800f936:	4928      	ldr	r1, [pc, #160]	@ (800f9d8 <SetID+0xd0>)
 800f938:	68f8      	ldr	r0, [r7, #12]
 800f93a:	f7ff fe4b 	bl	800f5d4 <cli_printf>
	cli_other = 1;
 800f93e:	4b27      	ldr	r3, [pc, #156]	@ (800f9dc <SetID+0xd4>)
 800f940:	2201      	movs	r2, #1
 800f942:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f944:	4b26      	ldr	r3, [pc, #152]	@ (800f9e0 <SetID+0xd8>)
 800f946:	2200      	movs	r2, #0
 800f948:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f94a:	f107 0310 	add.w	r3, r7, #16
 800f94e:	2232      	movs	r2, #50	@ 0x32
 800f950:	4619      	mov	r1, r3
 800f952:	68f8      	ldr	r0, [r7, #12]
 800f954:	f7ff fe80 	bl	800f658 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f958:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f95a:	f7f0 fca1 	bl	80002a0 <strlen>
 800f95e:	4603      	mov	r3, r0
 800f960:	b29a      	uxth	r2, r3
 800f962:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f966:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f968:	481a      	ldr	r0, [pc, #104]	@ (800f9d4 <SetID+0xcc>)
 800f96a:	f7fc fcd1 	bl	800c310 <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800f96e:	f107 0310 	add.w	r3, r7, #16
 800f972:	4618      	mov	r0, r3
 800f974:	f7f0 fc94 	bl	80002a0 <strlen>
 800f978:	4603      	mov	r3, r0
 800f97a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	if (len < 30) {
 800f97e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f982:	2b1d      	cmp	r3, #29
 800f984:	d814      	bhi.n	800f9b0 <SetID+0xa8>
		if (buffer[0] != '\0') {
 800f986:	7c3b      	ldrb	r3, [r7, #16]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d015      	beq.n	800f9b8 <SetID+0xb0>
			if (buffer !=  NULL) {
				strcpy(_Flash_Packet.id, buffer);
 800f98c:	f107 0310 	add.w	r3, r7, #16
 800f990:	4619      	mov	r1, r3
 800f992:	4814      	ldr	r0, [pc, #80]	@ (800f9e4 <SetID+0xdc>)
 800f994:	f00f fb3d 	bl	801f012 <strcpy>
				set_param_flags();
 800f998:	4b13      	ldr	r3, [pc, #76]	@ (800f9e8 <SetID+0xe0>)
 800f99a:	2201      	movs	r2, #1
 800f99c:	701a      	strb	r2, [r3, #0]
 800f99e:	4b13      	ldr	r3, [pc, #76]	@ (800f9ec <SetID+0xe4>)
 800f9a0:	2201      	movs	r2, #1
 800f9a2:	701a      	strb	r2, [r3, #0]
				cli_printf(cli, "ID is set to: %s", _Flash_Packet.id);
 800f9a4:	4a0f      	ldr	r2, [pc, #60]	@ (800f9e4 <SetID+0xdc>)
 800f9a6:	4912      	ldr	r1, [pc, #72]	@ (800f9f0 <SetID+0xe8>)
 800f9a8:	68f8      	ldr	r0, [r7, #12]
 800f9aa:	f7ff fe13 	bl	800f5d4 <cli_printf>
 800f9ae:	e003      	b.n	800f9b8 <SetID+0xb0>
			}
		}
	} else {
		cli_printf(cli, "ID is too long");
 800f9b0:	4910      	ldr	r1, [pc, #64]	@ (800f9f4 <SetID+0xec>)
 800f9b2:	68f8      	ldr	r0, [r7, #12]
 800f9b4:	f7ff fe0e 	bl	800f5d4 <cli_printf>
	}

	flag_cli = 0;
 800f9b8:	4b09      	ldr	r3, [pc, #36]	@ (800f9e0 <SetID+0xd8>)
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f9be:	4b07      	ldr	r3, [pc, #28]	@ (800f9dc <SetID+0xd4>)
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	701a      	strb	r2, [r3, #0]

}
 800f9c4:	bf00      	nop
 800f9c6:	3748      	adds	r7, #72	@ 0x48
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	bd80      	pop	{r7, pc}
 800f9cc:	080224ac 	.word	0x080224ac
 800f9d0:	08022520 	.word	0x08022520
 800f9d4:	20001a74 	.word	0x20001a74
 800f9d8:	08022558 	.word	0x08022558
 800f9dc:	20001b3a 	.word	0x20001b3a
 800f9e0:	20001b3b 	.word	0x20001b3b
 800f9e4:	20001399 	.word	0x20001399
 800f9e8:	20001579 	.word	0x20001579
 800f9ec:	2000157a 	.word	0x2000157a
 800f9f0:	08022580 	.word	0x08022580
 800f9f4:	08022594 	.word	0x08022594

0800f9f8 <SetLocation>:

void SetLocation(EmbeddedCli *cli, char *args, void *context) {
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b092      	sub	sp, #72	@ 0x48
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	60f8      	str	r0, [r7, #12]
 800fa00:	60b9      	str	r1, [r7, #8]
 800fa02:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800fa04:	4b2d      	ldr	r3, [pc, #180]	@ (800fabc <SetLocation+0xc4>)
 800fa06:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800fa08:	492d      	ldr	r1, [pc, #180]	@ (800fac0 <SetLocation+0xc8>)
 800fa0a:	68f8      	ldr	r0, [r7, #12]
 800fa0c:	f7ff fde2 	bl	800f5d4 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fa10:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fa12:	f7f0 fc45 	bl	80002a0 <strlen>
 800fa16:	4603      	mov	r3, r0
 800fa18:	b29a      	uxth	r2, r3
 800fa1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fa1e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fa20:	4828      	ldr	r0, [pc, #160]	@ (800fac4 <SetLocation+0xcc>)
 800fa22:	f7fc fc75 	bl	800c310 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Set the Location. Keep Location below 15 characters");
 800fa26:	4928      	ldr	r1, [pc, #160]	@ (800fac8 <SetLocation+0xd0>)
 800fa28:	68f8      	ldr	r0, [r7, #12]
 800fa2a:	f7ff fdd3 	bl	800f5d4 <cli_printf>
	cli_other = 1;
 800fa2e:	4b27      	ldr	r3, [pc, #156]	@ (800facc <SetLocation+0xd4>)
 800fa30:	2201      	movs	r2, #1
 800fa32:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fa34:	4b26      	ldr	r3, [pc, #152]	@ (800fad0 <SetLocation+0xd8>)
 800fa36:	2200      	movs	r2, #0
 800fa38:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800fa3a:	f107 0310 	add.w	r3, r7, #16
 800fa3e:	2232      	movs	r2, #50	@ 0x32
 800fa40:	4619      	mov	r1, r3
 800fa42:	68f8      	ldr	r0, [r7, #12]
 800fa44:	f7ff fe08 	bl	800f658 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fa48:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fa4a:	f7f0 fc29 	bl	80002a0 <strlen>
 800fa4e:	4603      	mov	r3, r0
 800fa50:	b29a      	uxth	r2, r3
 800fa52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fa56:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fa58:	481a      	ldr	r0, [pc, #104]	@ (800fac4 <SetLocation+0xcc>)
 800fa5a:	f7fc fc59 	bl	800c310 <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800fa5e:	f107 0310 	add.w	r3, r7, #16
 800fa62:	4618      	mov	r0, r3
 800fa64:	f7f0 fc1c 	bl	80002a0 <strlen>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	if (len < 15) {
 800fa6e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fa72:	2b0e      	cmp	r3, #14
 800fa74:	d814      	bhi.n	800faa0 <SetLocation+0xa8>
		if (buffer[0] != '\0') {
 800fa76:	7c3b      	ldrb	r3, [r7, #16]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d015      	beq.n	800faa8 <SetLocation+0xb0>
			if (buffer != NULL) {
				strcpy(_Flash_Packet.location, buffer);
 800fa7c:	f107 0310 	add.w	r3, r7, #16
 800fa80:	4619      	mov	r1, r3
 800fa82:	4814      	ldr	r0, [pc, #80]	@ (800fad4 <SetLocation+0xdc>)
 800fa84:	f00f fac5 	bl	801f012 <strcpy>
				set_param_flags();
 800fa88:	4b13      	ldr	r3, [pc, #76]	@ (800fad8 <SetLocation+0xe0>)
 800fa8a:	2201      	movs	r2, #1
 800fa8c:	701a      	strb	r2, [r3, #0]
 800fa8e:	4b13      	ldr	r3, [pc, #76]	@ (800fadc <SetLocation+0xe4>)
 800fa90:	2201      	movs	r2, #1
 800fa92:	701a      	strb	r2, [r3, #0]
				cli_printf(cli, "Location is set to: %s",
 800fa94:	4a0f      	ldr	r2, [pc, #60]	@ (800fad4 <SetLocation+0xdc>)
 800fa96:	4912      	ldr	r1, [pc, #72]	@ (800fae0 <SetLocation+0xe8>)
 800fa98:	68f8      	ldr	r0, [r7, #12]
 800fa9a:	f7ff fd9b 	bl	800f5d4 <cli_printf>
 800fa9e:	e003      	b.n	800faa8 <SetLocation+0xb0>
						_Flash_Packet.location);
			}
		}
	} else {
		cli_printf(cli, "Location is too long");
 800faa0:	4910      	ldr	r1, [pc, #64]	@ (800fae4 <SetLocation+0xec>)
 800faa2:	68f8      	ldr	r0, [r7, #12]
 800faa4:	f7ff fd96 	bl	800f5d4 <cli_printf>
	}

	flag_cli = 0;
 800faa8:	4b09      	ldr	r3, [pc, #36]	@ (800fad0 <SetLocation+0xd8>)
 800faaa:	2200      	movs	r2, #0
 800faac:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800faae:	4b07      	ldr	r3, [pc, #28]	@ (800facc <SetLocation+0xd4>)
 800fab0:	2200      	movs	r2, #0
 800fab2:	701a      	strb	r2, [r3, #0]

}
 800fab4:	bf00      	nop
 800fab6:	3748      	adds	r7, #72	@ 0x48
 800fab8:	46bd      	mov	sp, r7
 800faba:	bd80      	pop	{r7, pc}
 800fabc:	080224ac 	.word	0x080224ac
 800fac0:	08022520 	.word	0x08022520
 800fac4:	20001a74 	.word	0x20001a74
 800fac8:	080225a4 	.word	0x080225a4
 800facc:	20001b3a 	.word	0x20001b3a
 800fad0:	20001b3b 	.word	0x20001b3b
 800fad4:	200013cb 	.word	0x200013cb
 800fad8:	20001579 	.word	0x20001579
 800fadc:	2000157a 	.word	0x2000157a
 800fae0:	080225d8 	.word	0x080225d8
 800fae4:	080225f0 	.word	0x080225f0

0800fae8 <Setgroup>:
	flag_cli = 0;
	cli_other = 0;

}

void Setgroup(EmbeddedCli *cli, char *args, void *context) {
 800fae8:	b580      	push	{r7, lr}
 800faea:	b092      	sub	sp, #72	@ 0x48
 800faec:	af00      	add	r7, sp, #0
 800faee:	60f8      	str	r0, [r7, #12]
 800faf0:	60b9      	str	r1, [r7, #8]
 800faf2:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800faf4:	4b2d      	ldr	r3, [pc, #180]	@ (800fbac <Setgroup+0xc4>)
 800faf6:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800faf8:	492d      	ldr	r1, [pc, #180]	@ (800fbb0 <Setgroup+0xc8>)
 800fafa:	68f8      	ldr	r0, [r7, #12]
 800fafc:	f7ff fd6a 	bl	800f5d4 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fb00:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fb02:	f7f0 fbcd 	bl	80002a0 <strlen>
 800fb06:	4603      	mov	r3, r0
 800fb08:	b29a      	uxth	r2, r3
 800fb0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fb0e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fb10:	4828      	ldr	r0, [pc, #160]	@ (800fbb4 <Setgroup+0xcc>)
 800fb12:	f7fc fbfd 	bl	800c310 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Set the group. Keep name below 15 characters");
 800fb16:	4928      	ldr	r1, [pc, #160]	@ (800fbb8 <Setgroup+0xd0>)
 800fb18:	68f8      	ldr	r0, [r7, #12]
 800fb1a:	f7ff fd5b 	bl	800f5d4 <cli_printf>
	cli_other = 1;
 800fb1e:	4b27      	ldr	r3, [pc, #156]	@ (800fbbc <Setgroup+0xd4>)
 800fb20:	2201      	movs	r2, #1
 800fb22:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fb24:	4b26      	ldr	r3, [pc, #152]	@ (800fbc0 <Setgroup+0xd8>)
 800fb26:	2200      	movs	r2, #0
 800fb28:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800fb2a:	f107 0310 	add.w	r3, r7, #16
 800fb2e:	2232      	movs	r2, #50	@ 0x32
 800fb30:	4619      	mov	r1, r3
 800fb32:	68f8      	ldr	r0, [r7, #12]
 800fb34:	f7ff fd90 	bl	800f658 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fb38:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fb3a:	f7f0 fbb1 	bl	80002a0 <strlen>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	b29a      	uxth	r2, r3
 800fb42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fb46:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fb48:	481a      	ldr	r0, [pc, #104]	@ (800fbb4 <Setgroup+0xcc>)
 800fb4a:	f7fc fbe1 	bl	800c310 <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800fb4e:	f107 0310 	add.w	r3, r7, #16
 800fb52:	4618      	mov	r0, r3
 800fb54:	f7f0 fba4 	bl	80002a0 <strlen>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	if (len < 15) {
 800fb5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fb62:	2b0e      	cmp	r3, #14
 800fb64:	d814      	bhi.n	800fb90 <Setgroup+0xa8>
		if (buffer[0] != '\0') {
 800fb66:	7c3b      	ldrb	r3, [r7, #16]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d015      	beq.n	800fb98 <Setgroup+0xb0>
			if (buffer != NULL) {
				strcpy(_Flash_Packet.group, buffer);
 800fb6c:	f107 0310 	add.w	r3, r7, #16
 800fb70:	4619      	mov	r1, r3
 800fb72:	4814      	ldr	r0, [pc, #80]	@ (800fbc4 <Setgroup+0xdc>)
 800fb74:	f00f fa4d 	bl	801f012 <strcpy>
				set_param_flags();
 800fb78:	4b13      	ldr	r3, [pc, #76]	@ (800fbc8 <Setgroup+0xe0>)
 800fb7a:	2201      	movs	r2, #1
 800fb7c:	701a      	strb	r2, [r3, #0]
 800fb7e:	4b13      	ldr	r3, [pc, #76]	@ (800fbcc <Setgroup+0xe4>)
 800fb80:	2201      	movs	r2, #1
 800fb82:	701a      	strb	r2, [r3, #0]
				cli_printf(cli, "group is set to: %s", _Flash_Packet.group);
 800fb84:	4a0f      	ldr	r2, [pc, #60]	@ (800fbc4 <Setgroup+0xdc>)
 800fb86:	4912      	ldr	r1, [pc, #72]	@ (800fbd0 <Setgroup+0xe8>)
 800fb88:	68f8      	ldr	r0, [r7, #12]
 800fb8a:	f7ff fd23 	bl	800f5d4 <cli_printf>
 800fb8e:	e003      	b.n	800fb98 <Setgroup+0xb0>
			}
		}
	} else {
		cli_printf(cli, "group is too long");
 800fb90:	4910      	ldr	r1, [pc, #64]	@ (800fbd4 <Setgroup+0xec>)
 800fb92:	68f8      	ldr	r0, [r7, #12]
 800fb94:	f7ff fd1e 	bl	800f5d4 <cli_printf>
	}

	flag_cli = 0;
 800fb98:	4b09      	ldr	r3, [pc, #36]	@ (800fbc0 <Setgroup+0xd8>)
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fb9e:	4b07      	ldr	r3, [pc, #28]	@ (800fbbc <Setgroup+0xd4>)
 800fba0:	2200      	movs	r2, #0
 800fba2:	701a      	strb	r2, [r3, #0]

}
 800fba4:	bf00      	nop
 800fba6:	3748      	adds	r7, #72	@ 0x48
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}
 800fbac:	080224ac 	.word	0x080224ac
 800fbb0:	08022520 	.word	0x08022520
 800fbb4:	20001a74 	.word	0x20001a74
 800fbb8:	0802265c 	.word	0x0802265c
 800fbbc:	20001b3a 	.word	0x20001b3a
 800fbc0:	20001b3b 	.word	0x20001b3b
 800fbc4:	2000142f 	.word	0x2000142f
 800fbc8:	20001579 	.word	0x20001579
 800fbcc:	2000157a 	.word	0x2000157a
 800fbd0:	0802268c 	.word	0x0802268c
 800fbd4:	080226a0 	.word	0x080226a0

0800fbd8 <GetID>:

void GetID(EmbeddedCli *cli, char *args, void *context) {
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b084      	sub	sp, #16
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	60f8      	str	r0, [r7, #12]
 800fbe0:	60b9      	str	r1, [r7, #8]
 800fbe2:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "ID: %s", _Flash_Packet.id);
 800fbe4:	4a04      	ldr	r2, [pc, #16]	@ (800fbf8 <GetID+0x20>)
 800fbe6:	4905      	ldr	r1, [pc, #20]	@ (800fbfc <GetID+0x24>)
 800fbe8:	68f8      	ldr	r0, [r7, #12]
 800fbea:	f7ff fcf3 	bl	800f5d4 <cli_printf>
}
 800fbee:	bf00      	nop
 800fbf0:	3710      	adds	r7, #16
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bd80      	pop	{r7, pc}
 800fbf6:	bf00      	nop
 800fbf8:	20001399 	.word	0x20001399
 800fbfc:	080226b4 	.word	0x080226b4

0800fc00 <GetLocation>:

void GetLocation(EmbeddedCli *cli, char *args, void *context) {
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b084      	sub	sp, #16
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	60f8      	str	r0, [r7, #12]
 800fc08:	60b9      	str	r1, [r7, #8]
 800fc0a:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Location: %s", _Flash_Packet.location);
 800fc0c:	4a04      	ldr	r2, [pc, #16]	@ (800fc20 <GetLocation+0x20>)
 800fc0e:	4905      	ldr	r1, [pc, #20]	@ (800fc24 <GetLocation+0x24>)
 800fc10:	68f8      	ldr	r0, [r7, #12]
 800fc12:	f7ff fcdf 	bl	800f5d4 <cli_printf>

}
 800fc16:	bf00      	nop
 800fc18:	3710      	adds	r7, #16
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}
 800fc1e:	bf00      	nop
 800fc20:	200013cb 	.word	0x200013cb
 800fc24:	080226bc 	.word	0x080226bc

0800fc28 <Getgroup>:
void Getname(EmbeddedCli *cli, char *args, void *context) {
	cli_printf(cli, "Name: %s", _Flash_Packet.name);

}

void Getgroup(EmbeddedCli *cli, char *args, void *context) {
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b084      	sub	sp, #16
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	60f8      	str	r0, [r7, #12]
 800fc30:	60b9      	str	r1, [r7, #8]
 800fc32:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Group: %s", _Flash_Packet.group);
 800fc34:	4a04      	ldr	r2, [pc, #16]	@ (800fc48 <Getgroup+0x20>)
 800fc36:	4905      	ldr	r1, [pc, #20]	@ (800fc4c <Getgroup+0x24>)
 800fc38:	68f8      	ldr	r0, [r7, #12]
 800fc3a:	f7ff fccb 	bl	800f5d4 <cli_printf>

}
 800fc3e:	bf00      	nop
 800fc40:	3710      	adds	r7, #16
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bd80      	pop	{r7, pc}
 800fc46:	bf00      	nop
 800fc48:	2000142f 	.word	0x2000142f
 800fc4c:	080226d8 	.word	0x080226d8

0800fc50 <SetDate>:

void SetDate(EmbeddedCli *cli, char *args, void *context) {
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b09a      	sub	sp, #104	@ 0x68
 800fc54:	af02      	add	r7, sp, #8
 800fc56:	60f8      	str	r0, [r7, #12]
 800fc58:	60b9      	str	r1, [r7, #8]
 800fc5a:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800fc5c:	4b26      	ldr	r3, [pc, #152]	@ (800fcf8 <SetDate+0xa8>)
 800fc5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	cli_printf(cli,
 800fc60:	4926      	ldr	r1, [pc, #152]	@ (800fcfc <SetDate+0xac>)
 800fc62:	68f8      	ldr	r0, [r7, #12]
 800fc64:	f7ff fcb6 	bl	800f5d4 <cli_printf>
			"Set date in following format: day:month:year eg:(15:1:23).");
	cli_other = 1;
 800fc68:	4b25      	ldr	r3, [pc, #148]	@ (800fd00 <SetDate+0xb0>)
 800fc6a:	2201      	movs	r2, #1
 800fc6c:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fc6e:	4b25      	ldr	r3, [pc, #148]	@ (800fd04 <SetDate+0xb4>)
 800fc70:	2200      	movs	r2, #0
 800fc72:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800fc74:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fc78:	2232      	movs	r2, #50	@ 0x32
 800fc7a:	4619      	mov	r1, r3
 800fc7c:	68f8      	ldr	r0, [r7, #12]
 800fc7e:	f7ff fceb 	bl	800f658 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fc82:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800fc84:	f7f0 fb0c 	bl	80002a0 <strlen>
 800fc88:	4603      	mov	r3, r0
 800fc8a:	b29a      	uxth	r2, r3
 800fc8c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fc90:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800fc92:	481d      	ldr	r0, [pc, #116]	@ (800fd08 <SetDate+0xb8>)
 800fc94:	f7fc fb3c 	bl	800c310 <HAL_UART_Transmit>
			1000);
	if (buffer[0] != '\0') {
 800fc98:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d004      	beq.n	800fcaa <SetDate+0x5a>
		Set_Date(buffer);
 800fca0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fca4:	4618      	mov	r0, r3
 800fca6:	f004 f883 	bl	8013db0 <Set_Date>
	}
	flag_cli = 0;
 800fcaa:	4b16      	ldr	r3, [pc, #88]	@ (800fd04 <SetDate+0xb4>)
 800fcac:	2200      	movs	r2, #0
 800fcae:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fcb0:	4b13      	ldr	r3, [pc, #76]	@ (800fd00 <SetDate+0xb0>)
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	701a      	strb	r2, [r3, #0]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800fcb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fcba:	2200      	movs	r2, #0
 800fcbc:	4619      	mov	r1, r3
 800fcbe:	4813      	ldr	r0, [pc, #76]	@ (800fd0c <SetDate+0xbc>)
 800fcc0:	f7f9 ffa5 	bl	8009c0e <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800fcc4:	f107 0310 	add.w	r3, r7, #16
 800fcc8:	2200      	movs	r2, #0
 800fcca:	4619      	mov	r1, r3
 800fccc:	480f      	ldr	r0, [pc, #60]	@ (800fd0c <SetDate+0xbc>)
 800fcce:	f7f9 febc 	bl	8009a4a <HAL_RTC_GetTime>
	cli_printf(cli, "Set Date: %02d.%02d.%02d", gDate.Date, gDate.Month,
 800fcd2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fcd6:	461a      	mov	r2, r3
 800fcd8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800fcdc:	4619      	mov	r1, r3
			gDate.Year);
 800fcde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
	cli_printf(cli, "Set Date: %02d.%02d.%02d", gDate.Date, gDate.Month,
 800fce2:	9300      	str	r3, [sp, #0]
 800fce4:	460b      	mov	r3, r1
 800fce6:	490a      	ldr	r1, [pc, #40]	@ (800fd10 <SetDate+0xc0>)
 800fce8:	68f8      	ldr	r0, [r7, #12]
 800fcea:	f7ff fc73 	bl	800f5d4 <cli_printf>

}
 800fcee:	bf00      	nop
 800fcf0:	3760      	adds	r7, #96	@ 0x60
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	bd80      	pop	{r7, pc}
 800fcf6:	bf00      	nop
 800fcf8:	080224ac 	.word	0x080224ac
 800fcfc:	080226e4 	.word	0x080226e4
 800fd00:	20001b3a 	.word	0x20001b3a
 800fd04:	20001b3b 	.word	0x20001b3b
 800fd08:	20001a74 	.word	0x20001a74
 800fd0c:	20001898 	.word	0x20001898
 800fd10:	08022720 	.word	0x08022720

0800fd14 <SetTime>:

void SetTime(EmbeddedCli *cli, char *args, void *context) {
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b09a      	sub	sp, #104	@ 0x68
 800fd18:	af02      	add	r7, sp, #8
 800fd1a:	60f8      	str	r0, [r7, #12]
 800fd1c:	60b9      	str	r1, [r7, #8]
 800fd1e:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800fd20:	4b26      	ldr	r3, [pc, #152]	@ (800fdbc <SetTime+0xa8>)
 800fd22:	65fb      	str	r3, [r7, #92]	@ 0x5c
	cli_printf(cli,
 800fd24:	4926      	ldr	r1, [pc, #152]	@ (800fdc0 <SetTime+0xac>)
 800fd26:	68f8      	ldr	r0, [r7, #12]
 800fd28:	f7ff fc54 	bl	800f5d4 <cli_printf>
			"Set time in following format: hours:minutes:seconds eg:(11:15:01).");
	cli_other = 1;
 800fd2c:	4b25      	ldr	r3, [pc, #148]	@ (800fdc4 <SetTime+0xb0>)
 800fd2e:	2201      	movs	r2, #1
 800fd30:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fd32:	4b25      	ldr	r3, [pc, #148]	@ (800fdc8 <SetTime+0xb4>)
 800fd34:	2200      	movs	r2, #0
 800fd36:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800fd38:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fd3c:	2232      	movs	r2, #50	@ 0x32
 800fd3e:	4619      	mov	r1, r3
 800fd40:	68f8      	ldr	r0, [r7, #12]
 800fd42:	f7ff fc89 	bl	800f658 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fd46:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800fd48:	f7f0 faaa 	bl	80002a0 <strlen>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	b29a      	uxth	r2, r3
 800fd50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fd54:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800fd56:	481d      	ldr	r0, [pc, #116]	@ (800fdcc <SetTime+0xb8>)
 800fd58:	f7fc fada 	bl	800c310 <HAL_UART_Transmit>
			1000);
	if (buffer[0] != '\0') {
 800fd5c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d004      	beq.n	800fd6e <SetTime+0x5a>
		Set_Time(buffer);
 800fd64:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f004 f8a7 	bl	8013ebc <Set_Time>
	}
	flag_cli = 0;
 800fd6e:	4b16      	ldr	r3, [pc, #88]	@ (800fdc8 <SetTime+0xb4>)
 800fd70:	2200      	movs	r2, #0
 800fd72:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fd74:	4b13      	ldr	r3, [pc, #76]	@ (800fdc4 <SetTime+0xb0>)
 800fd76:	2200      	movs	r2, #0
 800fd78:	701a      	strb	r2, [r3, #0]
	set_alarm_Time = 1;
 800fd7a:	4b15      	ldr	r3, [pc, #84]	@ (800fdd0 <SetTime+0xbc>)
 800fd7c:	2201      	movs	r2, #1
 800fd7e:	701a      	strb	r2, [r3, #0]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800fd80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fd84:	2200      	movs	r2, #0
 800fd86:	4619      	mov	r1, r3
 800fd88:	4812      	ldr	r0, [pc, #72]	@ (800fdd4 <SetTime+0xc0>)
 800fd8a:	f7f9 ff40 	bl	8009c0e <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800fd8e:	f107 0310 	add.w	r3, r7, #16
 800fd92:	2200      	movs	r2, #0
 800fd94:	4619      	mov	r1, r3
 800fd96:	480f      	ldr	r0, [pc, #60]	@ (800fdd4 <SetTime+0xc0>)
 800fd98:	f7f9 fe57 	bl	8009a4a <HAL_RTC_GetTime>
	cli_printf(cli, "Set Time: %02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800fd9c:	7c3b      	ldrb	r3, [r7, #16]
 800fd9e:	461a      	mov	r2, r3
 800fda0:	7c7b      	ldrb	r3, [r7, #17]
 800fda2:	4619      	mov	r1, r3
			gTime.Seconds);
 800fda4:	7cbb      	ldrb	r3, [r7, #18]
	cli_printf(cli, "Set Time: %02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800fda6:	9300      	str	r3, [sp, #0]
 800fda8:	460b      	mov	r3, r1
 800fdaa:	490b      	ldr	r1, [pc, #44]	@ (800fdd8 <SetTime+0xc4>)
 800fdac:	68f8      	ldr	r0, [r7, #12]
 800fdae:	f7ff fc11 	bl	800f5d4 <cli_printf>

}
 800fdb2:	bf00      	nop
 800fdb4:	3760      	adds	r7, #96	@ 0x60
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bd80      	pop	{r7, pc}
 800fdba:	bf00      	nop
 800fdbc:	080224ac 	.word	0x080224ac
 800fdc0:	0802273c 	.word	0x0802273c
 800fdc4:	20001b3a 	.word	0x20001b3a
 800fdc8:	20001b3b 	.word	0x20001b3b
 800fdcc:	20001a74 	.word	0x20001a74
 800fdd0:	20000029 	.word	0x20000029
 800fdd4:	20001898 	.word	0x20001898
 800fdd8:	08022780 	.word	0x08022780

0800fddc <GetDate>:

void GetDate(EmbeddedCli *cli, char *args, void *context) {
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b08c      	sub	sp, #48	@ 0x30
 800fde0:	af02      	add	r7, sp, #8
 800fde2:	60f8      	str	r0, [r7, #12]
 800fde4:	60b9      	str	r1, [r7, #8]
 800fde6:	607a      	str	r2, [r7, #4]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800fde8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fdec:	2200      	movs	r2, #0
 800fdee:	4619      	mov	r1, r3
 800fdf0:	480f      	ldr	r0, [pc, #60]	@ (800fe30 <GetDate+0x54>)
 800fdf2:	f7f9 ff0c 	bl	8009c0e <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800fdf6:	f107 0310 	add.w	r3, r7, #16
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	4619      	mov	r1, r3
 800fdfe:	480c      	ldr	r0, [pc, #48]	@ (800fe30 <GetDate+0x54>)
 800fe00:	f7f9 fe23 	bl	8009a4a <HAL_RTC_GetTime>
	cli_printf(cli, "%02d.%02d.%02d", gDate.Date, gDate.Month, gDate.Year);
 800fe04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fe08:	461a      	mov	r2, r3
 800fe0a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800fe0e:	4619      	mov	r1, r3
 800fe10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fe14:	9300      	str	r3, [sp, #0]
 800fe16:	460b      	mov	r3, r1
 800fe18:	4906      	ldr	r1, [pc, #24]	@ (800fe34 <GetDate+0x58>)
 800fe1a:	68f8      	ldr	r0, [r7, #12]
 800fe1c:	f7ff fbda 	bl	800f5d4 <cli_printf>
	HAL_Delay(100);
 800fe20:	2064      	movs	r0, #100	@ 0x64
 800fe22:	f7f4 f9e1 	bl	80041e8 <HAL_Delay>
}
 800fe26:	bf00      	nop
 800fe28:	3728      	adds	r7, #40	@ 0x28
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	bd80      	pop	{r7, pc}
 800fe2e:	bf00      	nop
 800fe30:	20001898 	.word	0x20001898
 800fe34:	0802279c 	.word	0x0802279c

0800fe38 <GetTime>:

//for some reason if you dont read date the time does not update

void GetTime(EmbeddedCli *cli, char *args, void *context) {
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b08c      	sub	sp, #48	@ 0x30
 800fe3c:	af02      	add	r7, sp, #8
 800fe3e:	60f8      	str	r0, [r7, #12]
 800fe40:	60b9      	str	r1, [r7, #8]
 800fe42:	607a      	str	r2, [r7, #4]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800fe44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fe48:	2200      	movs	r2, #0
 800fe4a:	4619      	mov	r1, r3
 800fe4c:	480d      	ldr	r0, [pc, #52]	@ (800fe84 <GetTime+0x4c>)
 800fe4e:	f7f9 fede 	bl	8009c0e <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800fe52:	f107 0310 	add.w	r3, r7, #16
 800fe56:	2200      	movs	r2, #0
 800fe58:	4619      	mov	r1, r3
 800fe5a:	480a      	ldr	r0, [pc, #40]	@ (800fe84 <GetTime+0x4c>)
 800fe5c:	f7f9 fdf5 	bl	8009a4a <HAL_RTC_GetTime>
	cli_printf(cli, "%02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800fe60:	7c3b      	ldrb	r3, [r7, #16]
 800fe62:	461a      	mov	r2, r3
 800fe64:	7c7b      	ldrb	r3, [r7, #17]
 800fe66:	4619      	mov	r1, r3
			gTime.Seconds);
 800fe68:	7cbb      	ldrb	r3, [r7, #18]
	cli_printf(cli, "%02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800fe6a:	9300      	str	r3, [sp, #0]
 800fe6c:	460b      	mov	r3, r1
 800fe6e:	4906      	ldr	r1, [pc, #24]	@ (800fe88 <GetTime+0x50>)
 800fe70:	68f8      	ldr	r0, [r7, #12]
 800fe72:	f7ff fbaf 	bl	800f5d4 <cli_printf>
	HAL_Delay(100);
 800fe76:	2064      	movs	r0, #100	@ 0x64
 800fe78:	f7f4 f9b6 	bl	80041e8 <HAL_Delay>
}
 800fe7c:	bf00      	nop
 800fe7e:	3728      	adds	r7, #40	@ 0x28
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}
 800fe84:	20001898 	.word	0x20001898
 800fe88:	080227ac 	.word	0x080227ac

0800fe8c <SetInterval>:

void SetInterval(EmbeddedCli *cli, char *args, void *context) {
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b092      	sub	sp, #72	@ 0x48
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	60f8      	str	r0, [r7, #12]
 800fe94:	60b9      	str	r1, [r7, #8]
 800fe96:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800fe98:	4b54      	ldr	r3, [pc, #336]	@ (800ffec <SetInterval+0x160>)
 800fe9a:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800fe9c:	4954      	ldr	r1, [pc, #336]	@ (800fff0 <SetInterval+0x164>)
 800fe9e:	68f8      	ldr	r0, [r7, #12]
 800fea0:	f7ff fb98 	bl	800f5d4 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fea4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fea6:	f7f0 f9fb 	bl	80002a0 <strlen>
 800feaa:	4603      	mov	r3, r0
 800feac:	b29a      	uxth	r2, r3
 800feae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800feb2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800feb4:	484f      	ldr	r0, [pc, #316]	@ (800fff4 <SetInterval+0x168>)
 800feb6:	f7fc fa2b 	bl	800c310 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Enter 1 for 5min.");
 800feba:	494f      	ldr	r1, [pc, #316]	@ (800fff8 <SetInterval+0x16c>)
 800febc:	68f8      	ldr	r0, [r7, #12]
 800febe:	f7ff fb89 	bl	800f5d4 <cli_printf>
	cli_printf(cli, "Enter 2 for 15min.");
 800fec2:	494e      	ldr	r1, [pc, #312]	@ (800fffc <SetInterval+0x170>)
 800fec4:	68f8      	ldr	r0, [r7, #12]
 800fec6:	f7ff fb85 	bl	800f5d4 <cli_printf>
	cli_printf(cli, "Enter 3 for 60min.");
 800feca:	494d      	ldr	r1, [pc, #308]	@ (8010000 <SetInterval+0x174>)
 800fecc:	68f8      	ldr	r0, [r7, #12]
 800fece:	f7ff fb81 	bl	800f5d4 <cli_printf>
	cli_printf(cli,
 800fed2:	494c      	ldr	r1, [pc, #304]	@ (8010004 <SetInterval+0x178>)
 800fed4:	68f8      	ldr	r0, [r7, #12]
 800fed6:	f7ff fb7d 	bl	800f5d4 <cli_printf>
			"Disclaimer: The battery life will be reduced if interval is reduced.");
	cli_other = 1;
 800feda:	4b4b      	ldr	r3, [pc, #300]	@ (8010008 <SetInterval+0x17c>)
 800fedc:	2201      	movs	r2, #1
 800fede:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fee0:	4b4a      	ldr	r3, [pc, #296]	@ (801000c <SetInterval+0x180>)
 800fee2:	2200      	movs	r2, #0
 800fee4:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800fee6:	f107 0310 	add.w	r3, r7, #16
 800feea:	2232      	movs	r2, #50	@ 0x32
 800feec:	4619      	mov	r1, r3
 800feee:	68f8      	ldr	r0, [r7, #12]
 800fef0:	f7ff fbb2 	bl	800f658 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fef4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fef6:	f7f0 f9d3 	bl	80002a0 <strlen>
 800fefa:	4603      	mov	r3, r0
 800fefc:	b29a      	uxth	r2, r3
 800fefe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ff02:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ff04:	483b      	ldr	r0, [pc, #236]	@ (800fff4 <SetInterval+0x168>)
 800ff06:	f7fc fa03 	bl	800c310 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "1")) {
 800ff0a:	f107 0310 	add.w	r3, r7, #16
 800ff0e:	2131      	movs	r1, #49	@ 0x31
 800ff10:	4618      	mov	r0, r3
 800ff12:	f00e ff77 	bl	801ee04 <strchr>
 800ff16:	4603      	mov	r3, r0
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d015      	beq.n	800ff48 <SetInterval+0xbc>
		_Flash_Packet.Time_Interval = 5;
 800ff1c:	4b3c      	ldr	r3, [pc, #240]	@ (8010010 <SetInterval+0x184>)
 800ff1e:	2200      	movs	r2, #0
 800ff20:	f042 0205 	orr.w	r2, r2, #5
 800ff24:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 800ff28:	2200      	movs	r2, #0
 800ff2a:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 800ff2e:	2200      	movs	r2, #0
 800ff30:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
 800ff34:	2200      	movs	r2, #0
 800ff36:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
		set_param_flags();
 800ff3a:	4b36      	ldr	r3, [pc, #216]	@ (8010014 <SetInterval+0x188>)
 800ff3c:	2201      	movs	r2, #1
 800ff3e:	701a      	strb	r2, [r3, #0]
 800ff40:	4b35      	ldr	r3, [pc, #212]	@ (8010018 <SetInterval+0x18c>)
 800ff42:	2201      	movs	r2, #1
 800ff44:	701a      	strb	r2, [r3, #0]
 800ff46:	e03c      	b.n	800ffc2 <SetInterval+0x136>
	} else if (strstr(buffer, "2")) {
 800ff48:	f107 0310 	add.w	r3, r7, #16
 800ff4c:	2132      	movs	r1, #50	@ 0x32
 800ff4e:	4618      	mov	r0, r3
 800ff50:	f00e ff58 	bl	801ee04 <strchr>
 800ff54:	4603      	mov	r3, r0
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d015      	beq.n	800ff86 <SetInterval+0xfa>
		_Flash_Packet.Time_Interval = 15;
 800ff5a:	4b2d      	ldr	r3, [pc, #180]	@ (8010010 <SetInterval+0x184>)
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	f042 020f 	orr.w	r2, r2, #15
 800ff62:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 800ff66:	2200      	movs	r2, #0
 800ff68:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
 800ff72:	2200      	movs	r2, #0
 800ff74:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
		set_param_flags();
 800ff78:	4b26      	ldr	r3, [pc, #152]	@ (8010014 <SetInterval+0x188>)
 800ff7a:	2201      	movs	r2, #1
 800ff7c:	701a      	strb	r2, [r3, #0]
 800ff7e:	4b26      	ldr	r3, [pc, #152]	@ (8010018 <SetInterval+0x18c>)
 800ff80:	2201      	movs	r2, #1
 800ff82:	701a      	strb	r2, [r3, #0]
 800ff84:	e01d      	b.n	800ffc2 <SetInterval+0x136>
	} else if (strstr(buffer, "3")) {
 800ff86:	f107 0310 	add.w	r3, r7, #16
 800ff8a:	2133      	movs	r1, #51	@ 0x33
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	f00e ff39 	bl	801ee04 <strchr>
 800ff92:	4603      	mov	r3, r0
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d014      	beq.n	800ffc2 <SetInterval+0x136>
		_Flash_Packet.Time_Interval = 60;
 800ff98:	4b1d      	ldr	r3, [pc, #116]	@ (8010010 <SetInterval+0x184>)
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	f042 023c 	orr.w	r2, r2, #60	@ 0x3c
 800ffa0:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 800ffaa:	2200      	movs	r2, #0
 800ffac:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
		set_param_flags();
 800ffb6:	4b17      	ldr	r3, [pc, #92]	@ (8010014 <SetInterval+0x188>)
 800ffb8:	2201      	movs	r2, #1
 800ffba:	701a      	strb	r2, [r3, #0]
 800ffbc:	4b16      	ldr	r3, [pc, #88]	@ (8010018 <SetInterval+0x18c>)
 800ffbe:	2201      	movs	r2, #1
 800ffc0:	701a      	strb	r2, [r3, #0]
	}

	flag_cli = 0;
 800ffc2:	4b12      	ldr	r3, [pc, #72]	@ (801000c <SetInterval+0x180>)
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800ffc8:	4b0f      	ldr	r3, [pc, #60]	@ (8010008 <SetInterval+0x17c>)
 800ffca:	2200      	movs	r2, #0
 800ffcc:	701a      	strb	r2, [r3, #0]
	cli_printf(cli, "Interval is set to: %ldmin", _Flash_Packet.Time_Interval);
 800ffce:	4b10      	ldr	r3, [pc, #64]	@ (8010010 <SetInterval+0x184>)
 800ffd0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800ffd4:	461a      	mov	r2, r3
 800ffd6:	4911      	ldr	r1, [pc, #68]	@ (801001c <SetInterval+0x190>)
 800ffd8:	68f8      	ldr	r0, [r7, #12]
 800ffda:	f7ff fafb 	bl	800f5d4 <cli_printf>
	set_alarm_Time = 1;
 800ffde:	4b10      	ldr	r3, [pc, #64]	@ (8010020 <SetInterval+0x194>)
 800ffe0:	2201      	movs	r2, #1
 800ffe2:	701a      	strb	r2, [r3, #0]
}
 800ffe4:	bf00      	nop
 800ffe6:	3748      	adds	r7, #72	@ 0x48
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	bd80      	pop	{r7, pc}
 800ffec:	080224ac 	.word	0x080224ac
 800fff0:	08022520 	.word	0x08022520
 800fff4:	20001a74 	.word	0x20001a74
 800fff8:	080227bc 	.word	0x080227bc
 800fffc:	080227d0 	.word	0x080227d0
 8010000:	080227e4 	.word	0x080227e4
 8010004:	080227f8 	.word	0x080227f8
 8010008:	20001b3a 	.word	0x20001b3a
 801000c:	20001b3b 	.word	0x20001b3b
 8010010:	200012cc 	.word	0x200012cc
 8010014:	20001579 	.word	0x20001579
 8010018:	2000157a 	.word	0x2000157a
 801001c:	08022840 	.word	0x08022840
 8010020:	20000029 	.word	0x20000029

08010024 <GetInterval>:

void GetInterval(EmbeddedCli *cli, char *args, void *context) {
 8010024:	b580      	push	{r7, lr}
 8010026:	b084      	sub	sp, #16
 8010028:	af00      	add	r7, sp, #0
 801002a:	60f8      	str	r0, [r7, #12]
 801002c:	60b9      	str	r1, [r7, #8]
 801002e:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "Interval is Set to: %ldmin", _Flash_Packet.Time_Interval);
 8010030:	4b05      	ldr	r3, [pc, #20]	@ (8010048 <GetInterval+0x24>)
 8010032:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8010036:	461a      	mov	r2, r3
 8010038:	4904      	ldr	r1, [pc, #16]	@ (801004c <GetInterval+0x28>)
 801003a:	68f8      	ldr	r0, [r7, #12]
 801003c:	f7ff faca 	bl	800f5d4 <cli_printf>

}
 8010040:	bf00      	nop
 8010042:	3710      	adds	r7, #16
 8010044:	46bd      	mov	sp, r7
 8010046:	bd80      	pop	{r7, pc}
 8010048:	200012cc 	.word	0x200012cc
 801004c:	0802285c 	.word	0x0802285c

08010050 <SetFilename>:

void SetFilename(EmbeddedCli *cli, char *args, void *context) {
 8010050:	b580      	push	{r7, lr}
 8010052:	b09a      	sub	sp, #104	@ 0x68
 8010054:	af02      	add	r7, sp, #8
 8010056:	60f8      	str	r0, [r7, #12]
 8010058:	60b9      	str	r1, [r7, #8]
 801005a:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 801005c:	4b40      	ldr	r3, [pc, #256]	@ (8010160 <SetFilename+0x110>)
 801005e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 8010060:	4940      	ldr	r1, [pc, #256]	@ (8010164 <SetFilename+0x114>)
 8010062:	68f8      	ldr	r0, [r7, #12]
 8010064:	f7ff fab6 	bl	800f5d4 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010068:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801006a:	f7f0 f919 	bl	80002a0 <strlen>
 801006e:	4603      	mov	r3, r0
 8010070:	b29a      	uxth	r2, r3
 8010072:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010076:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8010078:	483b      	ldr	r0, [pc, #236]	@ (8010168 <SetFilename+0x118>)
 801007a:	f7fc f949 	bl	800c310 <HAL_UART_Transmit>
			1000);
	cli_printf(cli,
 801007e:	493b      	ldr	r1, [pc, #236]	@ (801016c <SetFilename+0x11c>)
 8010080:	68f8      	ldr	r0, [r7, #12]
 8010082:	f7ff faa7 	bl	800f5d4 <cli_printf>
			"To set file name dont use special characters or space, '_' can be used and please keep the name below 18characters.");
	cli_printf(cli,
 8010086:	493a      	ldr	r1, [pc, #232]	@ (8010170 <SetFilename+0x120>)
 8010088:	68f8      	ldr	r0, [r7, #12]
 801008a:	f7ff faa3 	bl	800f5d4 <cli_printf>
			"If any special characters they will be omitted automatically.");

	cli_other = 1;
 801008e:	4b39      	ldr	r3, [pc, #228]	@ (8010174 <SetFilename+0x124>)
 8010090:	2201      	movs	r2, #1
 8010092:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 8010094:	4b38      	ldr	r3, [pc, #224]	@ (8010178 <SetFilename+0x128>)
 8010096:	2200      	movs	r2, #0
 8010098:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 801009a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801009e:	2232      	movs	r2, #50	@ 0x32
 80100a0:	4619      	mov	r1, r3
 80100a2:	68f8      	ldr	r0, [r7, #12]
 80100a4:	f7ff fad8 	bl	800f658 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 80100a8:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80100aa:	f7f0 f8f9 	bl	80002a0 <strlen>
 80100ae:	4603      	mov	r3, r0
 80100b0:	b29a      	uxth	r2, r3
 80100b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80100b6:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80100b8:	482b      	ldr	r0, [pc, #172]	@ (8010168 <SetFilename+0x118>)
 80100ba:	f7fc f929 	bl	800c310 <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 80100be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80100c2:	4618      	mov	r0, r3
 80100c4:	f7f0 f8ec 	bl	80002a0 <strlen>
 80100c8:	4603      	mov	r3, r0
 80100ca:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	if (len < 20) {
 80100ce:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80100d2:	2b13      	cmp	r3, #19
 80100d4:	d836      	bhi.n	8010144 <SetFilename+0xf4>
		if (buffer[0] != '\0') {
 80100d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d036      	beq.n	801014c <SetFilename+0xfc>
			if (buffer != NULL) {
				strcpy(_Flash_Packet.File_Name, buffer);
 80100de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80100e2:	4619      	mov	r1, r3
 80100e4:	4825      	ldr	r0, [pc, #148]	@ (801017c <SetFilename+0x12c>)
 80100e6:	f00e ff94 	bl	801f012 <strcpy>
				set_param_flags();
 80100ea:	4b25      	ldr	r3, [pc, #148]	@ (8010180 <SetFilename+0x130>)
 80100ec:	2201      	movs	r2, #1
 80100ee:	701a      	strb	r2, [r3, #0]
 80100f0:	4b24      	ldr	r3, [pc, #144]	@ (8010184 <SetFilename+0x134>)
 80100f2:	2201      	movs	r2, #1
 80100f4:	701a      	strb	r2, [r3, #0]
				_RunTime_Packet.filename_changed = 1;
 80100f6:	4b24      	ldr	r3, [pc, #144]	@ (8010188 <SetFilename+0x138>)
 80100f8:	2201      	movs	r2, #1
 80100fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
				cli_printf(cli, "Filename is set to: %s",
 80100fe:	4a1f      	ldr	r2, [pc, #124]	@ (801017c <SetFilename+0x12c>)
 8010100:	4922      	ldr	r1, [pc, #136]	@ (801018c <SetFilename+0x13c>)
 8010102:	68f8      	ldr	r0, [r7, #12]
 8010104:	f7ff fa66 	bl	800f5d4 <cli_printf>
						_Flash_Packet.File_Name);

				RTC_DateTypeDef sDate;
				HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8010108:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801010c:	2200      	movs	r2, #0
 801010e:	4619      	mov	r1, r3
 8010110:	481f      	ldr	r0, [pc, #124]	@ (8010190 <SetFilename+0x140>)
 8010112:	f7f9 fd7c 	bl	8009c0e <HAL_RTC_GetDate>
				RTC_TimeTypeDef sTime;
				HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 8010116:	f107 0310 	add.w	r3, r7, #16
 801011a:	2200      	movs	r2, #0
 801011c:	4619      	mov	r1, r3
 801011e:	481c      	ldr	r0, [pc, #112]	@ (8010190 <SetFilename+0x140>)
 8010120:	f7f9 fc93 	bl	8009a4a <HAL_RTC_GetTime>


				sprintf(_Flash_Packet.filename_ver_date, "%s_%02d-%02d-%02d", _Flash_Packet.File_Name, sDate.Year,sDate.Month, sDate.Date);
 8010124:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010128:	4619      	mov	r1, r3
 801012a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801012e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8010132:	9201      	str	r2, [sp, #4]
 8010134:	9300      	str	r3, [sp, #0]
 8010136:	460b      	mov	r3, r1
 8010138:	4a10      	ldr	r2, [pc, #64]	@ (801017c <SetFilename+0x12c>)
 801013a:	4916      	ldr	r1, [pc, #88]	@ (8010194 <SetFilename+0x144>)
 801013c:	4816      	ldr	r0, [pc, #88]	@ (8010198 <SetFilename+0x148>)
 801013e:	f00e fd0f 	bl	801eb60 <siprintf>
 8010142:	e003      	b.n	801014c <SetFilename+0xfc>
			}
		}
	} else {
		cli_printf(cli, "Filename is too long");
 8010144:	4915      	ldr	r1, [pc, #84]	@ (801019c <SetFilename+0x14c>)
 8010146:	68f8      	ldr	r0, [r7, #12]
 8010148:	f7ff fa44 	bl	800f5d4 <cli_printf>
	}

	flag_cli = 0;
 801014c:	4b0a      	ldr	r3, [pc, #40]	@ (8010178 <SetFilename+0x128>)
 801014e:	2200      	movs	r2, #0
 8010150:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 8010152:	4b08      	ldr	r3, [pc, #32]	@ (8010174 <SetFilename+0x124>)
 8010154:	2200      	movs	r2, #0
 8010156:	701a      	strb	r2, [r3, #0]

}
 8010158:	bf00      	nop
 801015a:	3760      	adds	r7, #96	@ 0x60
 801015c:	46bd      	mov	sp, r7
 801015e:	bd80      	pop	{r7, pc}
 8010160:	080224ac 	.word	0x080224ac
 8010164:	08022520 	.word	0x08022520
 8010168:	20001a74 	.word	0x20001a74
 801016c:	08022878 	.word	0x08022878
 8010170:	080228ec 	.word	0x080228ec
 8010174:	20001b3a 	.word	0x20001b3a
 8010178:	20001b3b 	.word	0x20001b3b
 801017c:	200012cc 	.word	0x200012cc
 8010180:	20001579 	.word	0x20001579
 8010184:	2000157a 	.word	0x2000157a
 8010188:	20001530 	.word	0x20001530
 801018c:	0802292c 	.word	0x0802292c
 8010190:	20001898 	.word	0x20001898
 8010194:	08022944 	.word	0x08022944
 8010198:	200014c5 	.word	0x200014c5
 801019c:	08022958 	.word	0x08022958

080101a0 <GetFilename>:

void GetFilename(EmbeddedCli *cli, char *args, void *context) {
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b084      	sub	sp, #16
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	60f8      	str	r0, [r7, #12]
 80101a8:	60b9      	str	r1, [r7, #8]
 80101aa:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "Filename is set to: %s", _Flash_Packet.filename_ver_date);
 80101ac:	4a04      	ldr	r2, [pc, #16]	@ (80101c0 <GetFilename+0x20>)
 80101ae:	4905      	ldr	r1, [pc, #20]	@ (80101c4 <GetFilename+0x24>)
 80101b0:	68f8      	ldr	r0, [r7, #12]
 80101b2:	f7ff fa0f 	bl	800f5d4 <cli_printf>

}
 80101b6:	bf00      	nop
 80101b8:	3710      	adds	r7, #16
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}
 80101be:	bf00      	nop
 80101c0:	200014c5 	.word	0x200014c5
 80101c4:	0802292c 	.word	0x0802292c

080101c8 <SetFileformat>:

void SetFileformat(EmbeddedCli *cli, char *args, void *context) {
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b092      	sub	sp, #72	@ 0x48
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	60f8      	str	r0, [r7, #12]
 80101d0:	60b9      	str	r1, [r7, #8]
 80101d2:	607a      	str	r2, [r7, #4]

	const char *newLine = "\r\n";
 80101d4:	4b41      	ldr	r3, [pc, #260]	@ (80102dc <SetFileformat+0x114>)
 80101d6:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 80101d8:	4941      	ldr	r1, [pc, #260]	@ (80102e0 <SetFileformat+0x118>)
 80101da:	68f8      	ldr	r0, [r7, #12]
 80101dc:	f7ff f9fa 	bl	800f5d4 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 80101e0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80101e2:	f7f0 f85d 	bl	80002a0 <strlen>
 80101e6:	4603      	mov	r3, r0
 80101e8:	b29a      	uxth	r2, r3
 80101ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80101ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80101f0:	483c      	ldr	r0, [pc, #240]	@ (80102e4 <SetFileformat+0x11c>)
 80101f2:	f7fc f88d 	bl	800c310 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Following file formats are allowed:");
 80101f6:	493c      	ldr	r1, [pc, #240]	@ (80102e8 <SetFileformat+0x120>)
 80101f8:	68f8      	ldr	r0, [r7, #12]
 80101fa:	f7ff f9eb 	bl	800f5d4 <cli_printf>
	cli_printf(cli, "1. (.csv)");
 80101fe:	493b      	ldr	r1, [pc, #236]	@ (80102ec <SetFileformat+0x124>)
 8010200:	68f8      	ldr	r0, [r7, #12]
 8010202:	f7ff f9e7 	bl	800f5d4 <cli_printf>
	cli_printf(cli, "2. (.json)");
 8010206:	493a      	ldr	r1, [pc, #232]	@ (80102f0 <SetFileformat+0x128>)
 8010208:	68f8      	ldr	r0, [r7, #12]
 801020a:	f7ff f9e3 	bl	800f5d4 <cli_printf>
	cli_printf(cli, "Enter the number to select your desired format");
 801020e:	4939      	ldr	r1, [pc, #228]	@ (80102f4 <SetFileformat+0x12c>)
 8010210:	68f8      	ldr	r0, [r7, #12]
 8010212:	f7ff f9df 	bl	800f5d4 <cli_printf>

	cli_other = 1;
 8010216:	4b38      	ldr	r3, [pc, #224]	@ (80102f8 <SetFileformat+0x130>)
 8010218:	2201      	movs	r2, #1
 801021a:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 801021c:	4b37      	ldr	r3, [pc, #220]	@ (80102fc <SetFileformat+0x134>)
 801021e:	2200      	movs	r2, #0
 8010220:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 8010222:	f107 0310 	add.w	r3, r7, #16
 8010226:	2232      	movs	r2, #50	@ 0x32
 8010228:	4619      	mov	r1, r3
 801022a:	68f8      	ldr	r0, [r7, #12]
 801022c:	f7ff fa14 	bl	800f658 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010230:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010232:	f7f0 f835 	bl	80002a0 <strlen>
 8010236:	4603      	mov	r3, r0
 8010238:	b29a      	uxth	r2, r3
 801023a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801023e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010240:	4828      	ldr	r0, [pc, #160]	@ (80102e4 <SetFileformat+0x11c>)
 8010242:	f7fc f865 	bl	800c310 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "1")) {
 8010246:	f107 0310 	add.w	r3, r7, #16
 801024a:	2131      	movs	r1, #49	@ 0x31
 801024c:	4618      	mov	r0, r3
 801024e:	f00e fdd9 	bl	801ee04 <strchr>
 8010252:	4603      	mov	r3, r0
 8010254:	2b00      	cmp	r3, #0
 8010256:	d014      	beq.n	8010282 <SetFileformat+0xba>
		strcpy(_Flash_Packet.File_Format, ".CSV");
 8010258:	4b29      	ldr	r3, [pc, #164]	@ (8010300 <SetFileformat+0x138>)
 801025a:	4a2a      	ldr	r2, [pc, #168]	@ (8010304 <SetFileformat+0x13c>)
 801025c:	6810      	ldr	r0, [r2, #0]
 801025e:	6018      	str	r0, [r3, #0]
 8010260:	7912      	ldrb	r2, [r2, #4]
 8010262:	711a      	strb	r2, [r3, #4]
		set_param_flags();
 8010264:	4b28      	ldr	r3, [pc, #160]	@ (8010308 <SetFileformat+0x140>)
 8010266:	2201      	movs	r2, #1
 8010268:	701a      	strb	r2, [r3, #0]
 801026a:	4b28      	ldr	r3, [pc, #160]	@ (801030c <SetFileformat+0x144>)
 801026c:	2201      	movs	r2, #1
 801026e:	701a      	strb	r2, [r3, #0]
		_RunTime_Packet.fileformat_changed = 1;
 8010270:	4b27      	ldr	r3, [pc, #156]	@ (8010310 <SetFileformat+0x148>)
 8010272:	2201      	movs	r2, #1
 8010274:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		_RunTime_Packet.fileformat_selection = 1;
 8010278:	4b25      	ldr	r3, [pc, #148]	@ (8010310 <SetFileformat+0x148>)
 801027a:	2201      	movs	r2, #1
 801027c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 8010280:	e01c      	b.n	80102bc <SetFileformat+0xf4>
	} else if (strstr(buffer, "2")) {
 8010282:	f107 0310 	add.w	r3, r7, #16
 8010286:	2132      	movs	r1, #50	@ 0x32
 8010288:	4618      	mov	r0, r3
 801028a:	f00e fdbb 	bl	801ee04 <strchr>
 801028e:	4603      	mov	r3, r0
 8010290:	2b00      	cmp	r3, #0
 8010292:	d013      	beq.n	80102bc <SetFileformat+0xf4>
		strcpy(_Flash_Packet.File_Format, ".JSON");
 8010294:	4b1a      	ldr	r3, [pc, #104]	@ (8010300 <SetFileformat+0x138>)
 8010296:	4a1f      	ldr	r2, [pc, #124]	@ (8010314 <SetFileformat+0x14c>)
 8010298:	6810      	ldr	r0, [r2, #0]
 801029a:	6018      	str	r0, [r3, #0]
 801029c:	8892      	ldrh	r2, [r2, #4]
 801029e:	809a      	strh	r2, [r3, #4]
		set_param_flags();
 80102a0:	4b19      	ldr	r3, [pc, #100]	@ (8010308 <SetFileformat+0x140>)
 80102a2:	2201      	movs	r2, #1
 80102a4:	701a      	strb	r2, [r3, #0]
 80102a6:	4b19      	ldr	r3, [pc, #100]	@ (801030c <SetFileformat+0x144>)
 80102a8:	2201      	movs	r2, #1
 80102aa:	701a      	strb	r2, [r3, #0]
		_RunTime_Packet.fileformat_changed = 1;
 80102ac:	4b18      	ldr	r3, [pc, #96]	@ (8010310 <SetFileformat+0x148>)
 80102ae:	2201      	movs	r2, #1
 80102b0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		_RunTime_Packet.fileformat_selection = 0;
 80102b4:	4b16      	ldr	r3, [pc, #88]	@ (8010310 <SetFileformat+0x148>)
 80102b6:	2200      	movs	r2, #0
 80102b8:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	}

	flag_cli = 0;
 80102bc:	4b0f      	ldr	r3, [pc, #60]	@ (80102fc <SetFileformat+0x134>)
 80102be:	2200      	movs	r2, #0
 80102c0:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 80102c2:	4b0d      	ldr	r3, [pc, #52]	@ (80102f8 <SetFileformat+0x130>)
 80102c4:	2200      	movs	r2, #0
 80102c6:	701a      	strb	r2, [r3, #0]
	cli_printf(cli, "File format is set to: %s", _Flash_Packet.File_Format);
 80102c8:	4a0d      	ldr	r2, [pc, #52]	@ (8010300 <SetFileformat+0x138>)
 80102ca:	4913      	ldr	r1, [pc, #76]	@ (8010318 <SetFileformat+0x150>)
 80102cc:	68f8      	ldr	r0, [r7, #12]
 80102ce:	f7ff f981 	bl	800f5d4 <cli_printf>

}
 80102d2:	bf00      	nop
 80102d4:	3748      	adds	r7, #72	@ 0x48
 80102d6:	46bd      	mov	sp, r7
 80102d8:	bd80      	pop	{r7, pc}
 80102da:	bf00      	nop
 80102dc:	080224ac 	.word	0x080224ac
 80102e0:	08022520 	.word	0x08022520
 80102e4:	20001a74 	.word	0x20001a74
 80102e8:	08022970 	.word	0x08022970
 80102ec:	08022994 	.word	0x08022994
 80102f0:	080229a0 	.word	0x080229a0
 80102f4:	080229ac 	.word	0x080229ac
 80102f8:	20001b3a 	.word	0x20001b3a
 80102fc:	20001b3b 	.word	0x20001b3b
 8010300:	20001330 	.word	0x20001330
 8010304:	080229dc 	.word	0x080229dc
 8010308:	20001579 	.word	0x20001579
 801030c:	2000157a 	.word	0x2000157a
 8010310:	20001530 	.word	0x20001530
 8010314:	080229e4 	.word	0x080229e4
 8010318:	080229ec 	.word	0x080229ec

0801031c <GetFileformat>:

void GetFileformat(EmbeddedCli *cli, char *args, void *context) {
 801031c:	b580      	push	{r7, lr}
 801031e:	b084      	sub	sp, #16
 8010320:	af00      	add	r7, sp, #0
 8010322:	60f8      	str	r0, [r7, #12]
 8010324:	60b9      	str	r1, [r7, #8]
 8010326:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "File format is set to: %s", _Flash_Packet.File_Format);
 8010328:	4a04      	ldr	r2, [pc, #16]	@ (801033c <GetFileformat+0x20>)
 801032a:	4905      	ldr	r1, [pc, #20]	@ (8010340 <GetFileformat+0x24>)
 801032c:	68f8      	ldr	r0, [r7, #12]
 801032e:	f7ff f951 	bl	800f5d4 <cli_printf>

}
 8010332:	bf00      	nop
 8010334:	3710      	adds	r7, #16
 8010336:	46bd      	mov	sp, r7
 8010338:	bd80      	pop	{r7, pc}
 801033a:	bf00      	nop
 801033c:	20001330 	.word	0x20001330
 8010340:	080229ec 	.word	0x080229ec

08010344 <fanclean>:

void fanclean(EmbeddedCli *cli, char *args, void *context) {
 8010344:	b580      	push	{r7, lr}
 8010346:	b096      	sub	sp, #88	@ 0x58
 8010348:	af00      	add	r7, sp, #0
 801034a:	60f8      	str	r0, [r7, #12]
 801034c:	60b9      	str	r1, [r7, #8]
 801034e:	607a      	str	r2, [r7, #4]

	const char *newLine = "\r\n";
 8010350:	4b48      	ldr	r3, [pc, #288]	@ (8010474 <fanclean+0x130>)
 8010352:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int counter = 0;
 8010354:	2300      	movs	r3, #0
 8010356:	657b      	str	r3, [r7, #84]	@ 0x54
	const char *dot = "........";
 8010358:	4b47      	ldr	r3, [pc, #284]	@ (8010478 <fanclean+0x134>)
 801035a:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint8_t do_Calibration = 0;
 801035c:	2300      	movs	r3, #0
 801035e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	cli_printf(cli,
 8010362:	4946      	ldr	r1, [pc, #280]	@ (801047c <fanclean+0x138>)
 8010364:	68f8      	ldr	r0, [r7, #12]
 8010366:	f7ff f935 	bl	800f5d4 <cli_printf>
			"Do you want to initiate particle sensor fan-cleaning? y/n?");

	cli_other = 1;
 801036a:	4b45      	ldr	r3, [pc, #276]	@ (8010480 <fanclean+0x13c>)
 801036c:	2201      	movs	r2, #1
 801036e:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 8010370:	4b44      	ldr	r3, [pc, #272]	@ (8010484 <fanclean+0x140>)
 8010372:	2200      	movs	r2, #0
 8010374:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 8010376:	f107 0314 	add.w	r3, r7, #20
 801037a:	2232      	movs	r2, #50	@ 0x32
 801037c:	4619      	mov	r1, r3
 801037e:	68f8      	ldr	r0, [r7, #12]
 8010380:	f7ff f96a 	bl	800f658 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010384:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010386:	f7ef ff8b 	bl	80002a0 <strlen>
 801038a:	4603      	mov	r3, r0
 801038c:	b29a      	uxth	r2, r3
 801038e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010392:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010394:	483c      	ldr	r0, [pc, #240]	@ (8010488 <fanclean+0x144>)
 8010396:	f7fb ffbb 	bl	800c310 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "n")) {
 801039a:	f107 0314 	add.w	r3, r7, #20
 801039e:	216e      	movs	r1, #110	@ 0x6e
 80103a0:	4618      	mov	r0, r3
 80103a2:	f00e fd2f 	bl	801ee04 <strchr>
 80103a6:	4603      	mov	r3, r0
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d00f      	beq.n	80103cc <fanclean+0x88>
		_Flash_Packet.Calibration_Status = 0;
 80103ac:	4b37      	ldr	r3, [pc, #220]	@ (801048c <fanclean+0x148>)
 80103ae:	2200      	movs	r2, #0
 80103b0:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
		_RunTime_Packet.PM_calibration = 1;
 80103b4:	4b36      	ldr	r3, [pc, #216]	@ (8010490 <fanclean+0x14c>)
 80103b6:	2201      	movs	r2, #1
 80103b8:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
		cli_printf(cli, "Particle sensor fan-cleaning aborted.");
 80103bc:	4935      	ldr	r1, [pc, #212]	@ (8010494 <fanclean+0x150>)
 80103be:	68f8      	ldr	r0, [r7, #12]
 80103c0:	f7ff f908 	bl	800f5d4 <cli_printf>
		//set_param_flags();
		do_Calibration = 0;
 80103c4:	2300      	movs	r3, #0
 80103c6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80103ca:	e00f      	b.n	80103ec <fanclean+0xa8>
	} else if (strstr(buffer, "y")) {
 80103cc:	f107 0314 	add.w	r3, r7, #20
 80103d0:	2179      	movs	r1, #121	@ 0x79
 80103d2:	4618      	mov	r0, r3
 80103d4:	f00e fd16 	bl	801ee04 <strchr>
 80103d8:	4603      	mov	r3, r0
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d006      	beq.n	80103ec <fanclean+0xa8>
		_RunTime_Packet.PM_calibration = 0;
 80103de:	4b2c      	ldr	r3, [pc, #176]	@ (8010490 <fanclean+0x14c>)
 80103e0:	2200      	movs	r2, #0
 80103e2:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
		do_Calibration = 1;
 80103e6:	2301      	movs	r3, #1
 80103e8:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	}

	if (do_Calibration == 1) {
 80103ec:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80103f0:	2b01      	cmp	r3, #1
 80103f2:	d135      	bne.n	8010460 <fanclean+0x11c>

		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 80103f4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80103f6:	f7ef ff53 	bl	80002a0 <strlen>
 80103fa:	4603      	mov	r3, r0
 80103fc:	b29a      	uxth	r2, r3
 80103fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010402:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010404:	4820      	ldr	r0, [pc, #128]	@ (8010488 <fanclean+0x144>)
 8010406:	f7fb ff83 	bl	800c310 <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "Particle sensor fan-cleaning initiated, please wait.");
 801040a:	4923      	ldr	r1, [pc, #140]	@ (8010498 <fanclean+0x154>)
 801040c:	68f8      	ldr	r0, [r7, #12]
 801040e:	f7ff f8e1 	bl	800f5d4 <cli_printf>
		while (counter < 8) {
 8010412:	e013      	b.n	801043c <fanclean+0xf8>
			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 8010414:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8010416:	f7ef ff43 	bl	80002a0 <strlen>
 801041a:	4603      	mov	r3, r0
 801041c:	b29a      	uxth	r2, r3
 801041e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010422:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8010424:	4818      	ldr	r0, [pc, #96]	@ (8010488 <fanclean+0x144>)
 8010426:	f7fb ff73 	bl	800c310 <HAL_UART_Transmit>
					1000);
			HAL_Delay(800);
 801042a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 801042e:	f7f3 fedb 	bl	80041e8 <HAL_Delay>
			toggle_blue_led();
 8010432:	f7f0 fe43 	bl	80010bc <toggle_blue_led>
			counter++;
 8010436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010438:	3301      	adds	r3, #1
 801043a:	657b      	str	r3, [r7, #84]	@ 0x54
		while (counter < 8) {
 801043c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801043e:	2b07      	cmp	r3, #7
 8010440:	dde8      	ble.n	8010414 <fanclean+0xd0>
		}

		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010442:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010444:	f7ef ff2c 	bl	80002a0 <strlen>
 8010448:	4603      	mov	r3, r0
 801044a:	b29a      	uxth	r2, r3
 801044c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010450:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010452:	480d      	ldr	r0, [pc, #52]	@ (8010488 <fanclean+0x144>)
 8010454:	f7fb ff5c 	bl	800c310 <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "fan-cleaning done.");
 8010458:	4910      	ldr	r1, [pc, #64]	@ (801049c <fanclean+0x158>)
 801045a:	68f8      	ldr	r0, [r7, #12]
 801045c:	f7ff f8ba 	bl	800f5d4 <cli_printf>

	}

	flag_cli = 0;
 8010460:	4b08      	ldr	r3, [pc, #32]	@ (8010484 <fanclean+0x140>)
 8010462:	2200      	movs	r2, #0
 8010464:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 8010466:	4b06      	ldr	r3, [pc, #24]	@ (8010480 <fanclean+0x13c>)
 8010468:	2200      	movs	r2, #0
 801046a:	701a      	strb	r2, [r3, #0]
}
 801046c:	bf00      	nop
 801046e:	3758      	adds	r7, #88	@ 0x58
 8010470:	46bd      	mov	sp, r7
 8010472:	bd80      	pop	{r7, pc}
 8010474:	080224ac 	.word	0x080224ac
 8010478:	08022a08 	.word	0x08022a08
 801047c:	08022a14 	.word	0x08022a14
 8010480:	20001b3a 	.word	0x20001b3a
 8010484:	20001b3b 	.word	0x20001b3b
 8010488:	20001a74 	.word	0x20001a74
 801048c:	200012cc 	.word	0x200012cc
 8010490:	20001530 	.word	0x20001530
 8010494:	08022a50 	.word	0x08022a50
 8010498:	08022a78 	.word	0x08022a78
 801049c:	08022ab0 	.word	0x08022ab0

080104a0 <co2calibrate>:

void co2calibrate(EmbeddedCli *cli, char *args, void *context) {
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b096      	sub	sp, #88	@ 0x58
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	60f8      	str	r0, [r7, #12]
 80104a8:	60b9      	str	r1, [r7, #8]
 80104aa:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 80104ac:	4b57      	ldr	r3, [pc, #348]	@ (801060c <co2calibrate+0x16c>)
 80104ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t val;
	int counter = 0;
 80104b0:	2300      	movs	r3, #0
 80104b2:	657b      	str	r3, [r7, #84]	@ 0x54
	const char *dot = "........";
 80104b4:	4b56      	ldr	r3, [pc, #344]	@ (8010610 <co2calibrate+0x170>)
 80104b6:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint8_t do_Calibration = 0;
 80104b8:	2300      	movs	r3, #0
 80104ba:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

	cli_other = 1;
 80104be:	4b55      	ldr	r3, [pc, #340]	@ (8010614 <co2calibrate+0x174>)
 80104c0:	2201      	movs	r2, #1
 80104c2:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 80104c4:	4b54      	ldr	r3, [pc, #336]	@ (8010618 <co2calibrate+0x178>)
 80104c6:	2200      	movs	r2, #0
 80104c8:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	memset(buffer, '\0', sizeof(buffer));
 80104ca:	f107 0310 	add.w	r3, r7, #16
 80104ce:	2232      	movs	r2, #50	@ 0x32
 80104d0:	2100      	movs	r1, #0
 80104d2:	4618      	mov	r0, r3
 80104d4:	f00e fc8e 	bl	801edf4 <memset>
	cli_printf(cli, "Disclaimer: Only input wholenumbers, decimals and negative numbers not supported.");
 80104d8:	4950      	ldr	r1, [pc, #320]	@ (801061c <co2calibrate+0x17c>)
 80104da:	68f8      	ldr	r0, [r7, #12]
 80104dc:	f7ff f87a 	bl	800f5d4 <cli_printf>
	cli_printf(cli,
 80104e0:	494f      	ldr	r1, [pc, #316]	@ (8010620 <co2calibrate+0x180>)
 80104e2:	68f8      	ldr	r0, [r7, #12]
 80104e4:	f7ff f876 	bl	800f5d4 <cli_printf>
			"To calibrate Co2 sensor, please provide Co2 concentration value.");
	cli_printf(cli,
 80104e8:	494e      	ldr	r1, [pc, #312]	@ (8010624 <co2calibrate+0x184>)
 80104ea:	68f8      	ldr	r0, [r7, #12]
 80104ec:	f7ff f872 	bl	800f5d4 <cli_printf>
			"If Co2 concentration is unknown then just press enter to cancel the calibration.");

	receiveString(cli, buffer, sizeof(buffer));
 80104f0:	f107 0310 	add.w	r3, r7, #16
 80104f4:	2232      	movs	r2, #50	@ 0x32
 80104f6:	4619      	mov	r1, r3
 80104f8:	68f8      	ldr	r0, [r7, #12]
 80104fa:	f7ff f8ad 	bl	800f658 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 80104fe:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010500:	f7ef fece 	bl	80002a0 <strlen>
 8010504:	4603      	mov	r3, r0
 8010506:	b29a      	uxth	r2, r3
 8010508:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801050c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801050e:	4846      	ldr	r0, [pc, #280]	@ (8010628 <co2calibrate+0x188>)
 8010510:	f7fb fefe 	bl	800c310 <HAL_UART_Transmit>
			1000);

	if (buffer[0] != '\0') {
 8010514:	7c3b      	ldrb	r3, [r7, #16]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d01e      	beq.n	8010558 <co2calibrate+0xb8>
		_RunTime_Packet.CO2_calibration = 1;
 801051a:	4b44      	ldr	r3, [pc, #272]	@ (801062c <co2calibrate+0x18c>)
 801051c:	2201      	movs	r2, #1
 801051e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

		val = atoi(buffer);
 8010522:	f107 0310 	add.w	r3, r7, #16
 8010526:	4618      	mov	r0, r3
 8010528:	f00d f9e2 	bl	801d8f0 <atoi>
 801052c:	4603      	mov	r3, r0
 801052e:	647b      	str	r3, [r7, #68]	@ 0x44

		if (val < 65535) {
 8010530:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010532:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010536:	4293      	cmp	r3, r2
 8010538:	d803      	bhi.n	8010542 <co2calibrate+0xa2>
			_RunTime_Packet._target_co2_concentration = val;
 801053a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801053c:	b29a      	uxth	r2, r3
 801053e:	4b3b      	ldr	r3, [pc, #236]	@ (801062c <co2calibrate+0x18c>)
 8010540:	879a      	strh	r2, [r3, #60]	@ 0x3c
		}

		cli_printf(cli,
				"Co2 sensor is going to be Calibrated now. Co2 concentration value provided : %d",
				_RunTime_Packet._target_co2_concentration);
 8010542:	4b3a      	ldr	r3, [pc, #232]	@ (801062c <co2calibrate+0x18c>)
 8010544:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
		cli_printf(cli,
 8010546:	461a      	mov	r2, r3
 8010548:	4939      	ldr	r1, [pc, #228]	@ (8010630 <co2calibrate+0x190>)
 801054a:	68f8      	ldr	r0, [r7, #12]
 801054c:	f7ff f842 	bl	800f5d4 <cli_printf>
		do_Calibration = 1;
 8010550:	2301      	movs	r3, #1
 8010552:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8010556:	e00a      	b.n	801056e <co2calibrate+0xce>
	} else {
		cli_printf(cli, "Co2 sensor Calibration aborted.");
 8010558:	4936      	ldr	r1, [pc, #216]	@ (8010634 <co2calibrate+0x194>)
 801055a:	68f8      	ldr	r0, [r7, #12]
 801055c:	f7ff f83a 	bl	800f5d4 <cli_printf>
		_RunTime_Packet.CO2_calibration = 0;
 8010560:	4b32      	ldr	r3, [pc, #200]	@ (801062c <co2calibrate+0x18c>)
 8010562:	2200      	movs	r2, #0
 8010564:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		do_Calibration = 0;
 8010568:	2300      	movs	r3, #0
 801056a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	}

	if (do_Calibration == 1) {
 801056e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8010572:	2b01      	cmp	r3, #1
 8010574:	d13f      	bne.n	80105f6 <co2calibrate+0x156>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010576:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010578:	f7ef fe92 	bl	80002a0 <strlen>
 801057c:	4603      	mov	r3, r0
 801057e:	b29a      	uxth	r2, r3
 8010580:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010584:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010586:	4828      	ldr	r0, [pc, #160]	@ (8010628 <co2calibrate+0x188>)
 8010588:	f7fb fec2 	bl	800c310 <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "Co2 is calibrating, please wait.");
 801058c:	492a      	ldr	r1, [pc, #168]	@ (8010638 <co2calibrate+0x198>)
 801058e:	68f8      	ldr	r0, [r7, #12]
 8010590:	f7ff f820 	bl	800f5d4 <cli_printf>
		if (!_RunTime_Packet.scd4x_i2c_error) {
 8010594:	4b25      	ldr	r3, [pc, #148]	@ (801062c <co2calibrate+0x18c>)
 8010596:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801059a:	2b00      	cmp	r3, #0
 801059c:	d119      	bne.n	80105d2 <co2calibrate+0x132>
#ifdef use_scd40x
			scd4x_perform_forced_recalibration(
					_RunTime_Packet._target_co2_concentration,
					&_RunTime_Packet._frc_correction);
#elif use_scd30
		scd30_force_recalibration(_RunTime_Packet._target_co2_concentration);
 801059e:	4b23      	ldr	r3, [pc, #140]	@ (801062c <co2calibrate+0x18c>)
 80105a0:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80105a2:	4618      	mov	r0, r3
 80105a4:	f004 f904 	bl	80147b0 <scd30_force_recalibration>
#endif
		}
		while (counter < 8) {
 80105a8:	e013      	b.n	80105d2 <co2calibrate+0x132>
			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 80105aa:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80105ac:	f7ef fe78 	bl	80002a0 <strlen>
 80105b0:	4603      	mov	r3, r0
 80105b2:	b29a      	uxth	r2, r3
 80105b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80105b8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80105ba:	481b      	ldr	r0, [pc, #108]	@ (8010628 <co2calibrate+0x188>)
 80105bc:	f7fb fea8 	bl	800c310 <HAL_UART_Transmit>
					1000);
			HAL_Delay(1000);
 80105c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80105c4:	f7f3 fe10 	bl	80041e8 <HAL_Delay>
			toggle_blue_led();
 80105c8:	f7f0 fd78 	bl	80010bc <toggle_blue_led>
			counter++;
 80105cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80105ce:	3301      	adds	r3, #1
 80105d0:	657b      	str	r3, [r7, #84]	@ 0x54
		while (counter < 8) {
 80105d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80105d4:	2b07      	cmp	r3, #7
 80105d6:	dde8      	ble.n	80105aa <co2calibrate+0x10a>
		}

		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 80105d8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80105da:	f7ef fe61 	bl	80002a0 <strlen>
 80105de:	4603      	mov	r3, r0
 80105e0:	b29a      	uxth	r2, r3
 80105e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80105e6:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80105e8:	480f      	ldr	r0, [pc, #60]	@ (8010628 <co2calibrate+0x188>)
 80105ea:	f7fb fe91 	bl	800c310 <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "Sensor calibration done.");
 80105ee:	4913      	ldr	r1, [pc, #76]	@ (801063c <co2calibrate+0x19c>)
 80105f0:	68f8      	ldr	r0, [r7, #12]
 80105f2:	f7fe ffef 	bl	800f5d4 <cli_printf>
	}

	flag_cli = 0;
 80105f6:	4b08      	ldr	r3, [pc, #32]	@ (8010618 <co2calibrate+0x178>)
 80105f8:	2200      	movs	r2, #0
 80105fa:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 80105fc:	4b05      	ldr	r3, [pc, #20]	@ (8010614 <co2calibrate+0x174>)
 80105fe:	2200      	movs	r2, #0
 8010600:	701a      	strb	r2, [r3, #0]
}
 8010602:	bf00      	nop
 8010604:	3758      	adds	r7, #88	@ 0x58
 8010606:	46bd      	mov	sp, r7
 8010608:	bd80      	pop	{r7, pc}
 801060a:	bf00      	nop
 801060c:	080224ac 	.word	0x080224ac
 8010610:	08022a08 	.word	0x08022a08
 8010614:	20001b3a 	.word	0x20001b3a
 8010618:	20001b3b 	.word	0x20001b3b
 801061c:	08022ac4 	.word	0x08022ac4
 8010620:	08022b18 	.word	0x08022b18
 8010624:	08022b5c 	.word	0x08022b5c
 8010628:	20001a74 	.word	0x20001a74
 801062c:	20001530 	.word	0x20001530
 8010630:	08022bb0 	.word	0x08022bb0
 8010634:	08022c00 	.word	0x08022c00
 8010638:	08022c20 	.word	0x08022c20
 801063c:	08022c44 	.word	0x08022c44

08010640 <statco2calibrate>:


void statco2calibrate(EmbeddedCli *cli, char *args, void *context)
{
 8010640:	b580      	push	{r7, lr}
 8010642:	b08a      	sub	sp, #40	@ 0x28
 8010644:	af00      	add	r7, sp, #0
 8010646:	60f8      	str	r0, [r7, #12]
 8010648:	60b9      	str	r1, [r7, #8]
 801064a:	607a      	str	r2, [r7, #4]

	uint16_t calib_val;
	int16_t stat;
	char status[20];
	stat = scd30_get_force_recalibration_status(&calib_val);
 801064c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010650:	4618      	mov	r0, r3
 8010652:	f004 f8eb 	bl	801482c <scd30_get_force_recalibration_status>
 8010656:	4603      	mov	r3, r0
 8010658:	84fb      	strh	r3, [r7, #38]	@ 0x26

	switch(stat)
 801065a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801065e:	2b00      	cmp	r3, #0
 8010660:	d107      	bne.n	8010672 <statco2calibrate+0x32>
	{

	case 0:
	{
		strcpy(status,"Success");
 8010662:	f107 0310 	add.w	r3, r7, #16
 8010666:	4a0f      	ldr	r2, [pc, #60]	@ (80106a4 <statco2calibrate+0x64>)
 8010668:	e892 0003 	ldmia.w	r2, {r0, r1}
 801066c:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 8010670:	e007      	b.n	8010682 <statco2calibrate+0x42>
	}
	default:
	{
		strcpy(status,"Error  ");
 8010672:	f107 0310 	add.w	r3, r7, #16
 8010676:	4a0c      	ldr	r2, [pc, #48]	@ (80106a8 <statco2calibrate+0x68>)
 8010678:	e892 0003 	ldmia.w	r2, {r0, r1}
 801067c:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 8010680:	bf00      	nop
	}
	}

	cli_printf(cli, "Calibration Status: %s",status);
 8010682:	f107 0310 	add.w	r3, r7, #16
 8010686:	461a      	mov	r2, r3
 8010688:	4908      	ldr	r1, [pc, #32]	@ (80106ac <statco2calibrate+0x6c>)
 801068a:	68f8      	ldr	r0, [r7, #12]
 801068c:	f7fe ffa2 	bl	800f5d4 <cli_printf>
	cli_printf(cli, "Calibration Value: %d",calib_val);
 8010690:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010692:	461a      	mov	r2, r3
 8010694:	4906      	ldr	r1, [pc, #24]	@ (80106b0 <statco2calibrate+0x70>)
 8010696:	68f8      	ldr	r0, [r7, #12]
 8010698:	f7fe ff9c 	bl	800f5d4 <cli_printf>



}
 801069c:	bf00      	nop
 801069e:	3728      	adds	r7, #40	@ 0x28
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}
 80106a4:	08022c60 	.word	0x08022c60
 80106a8:	08022c68 	.word	0x08022c68
 80106ac:	08022c70 	.word	0x08022c70
 80106b0:	08022c88 	.word	0x08022c88

080106b4 <co2_auto_calibration>:


void co2_auto_calibration(EmbeddedCli *cli, char *args, void *context)
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b094      	sub	sp, #80	@ 0x50
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	60f8      	str	r0, [r7, #12]
 80106bc:	60b9      	str	r1, [r7, #8]
 80106be:	607a      	str	r2, [r7, #4]

	uint16_t calib;
	const char *newLine = "\r\n";
 80106c0:	4b28      	ldr	r3, [pc, #160]	@ (8010764 <co2_auto_calibration+0xb0>)
 80106c2:	64bb      	str	r3, [r7, #72]	@ 0x48
		cli_printf(cli, "Enter \"y\" to enable auto calibration!");
 80106c4:	4928      	ldr	r1, [pc, #160]	@ (8010768 <co2_auto_calibration+0xb4>)
 80106c6:	68f8      	ldr	r0, [r7, #12]
 80106c8:	f7fe ff84 	bl	800f5d4 <cli_printf>
		cli_printf(cli, "Enter \"n\" to disable auto calibration!");
 80106cc:	4927      	ldr	r1, [pc, #156]	@ (801076c <co2_auto_calibration+0xb8>)
 80106ce:	68f8      	ldr	r0, [r7, #12]
 80106d0:	f7fe ff80 	bl	800f5d4 <cli_printf>



		cli_other = 1;
 80106d4:	4b26      	ldr	r3, [pc, #152]	@ (8010770 <co2_auto_calibration+0xbc>)
 80106d6:	2201      	movs	r2, #1
 80106d8:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 80106da:	4b26      	ldr	r3, [pc, #152]	@ (8010774 <co2_auto_calibration+0xc0>)
 80106dc:	2200      	movs	r2, #0
 80106de:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		receiveString(cli, buffer, sizeof(buffer));
 80106e0:	f107 0314 	add.w	r3, r7, #20
 80106e4:	2232      	movs	r2, #50	@ 0x32
 80106e6:	4619      	mov	r1, r3
 80106e8:	68f8      	ldr	r0, [r7, #12]
 80106ea:	f7fe ffb5 	bl	800f658 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 80106ee:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80106f0:	f7ef fdd6 	bl	80002a0 <strlen>
 80106f4:	4603      	mov	r3, r0
 80106f6:	b29a      	uxth	r2, r3
 80106f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80106fc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80106fe:	481e      	ldr	r0, [pc, #120]	@ (8010778 <co2_auto_calibration+0xc4>)
 8010700:	f7fb fe06 	bl	800c310 <HAL_UART_Transmit>
				1000);

		if (strstr(buffer, "y")) {
 8010704:	f107 0314 	add.w	r3, r7, #20
 8010708:	2179      	movs	r1, #121	@ 0x79
 801070a:	4618      	mov	r0, r3
 801070c:	f00e fb7a 	bl	801ee04 <strchr>
 8010710:	4603      	mov	r3, r0
 8010712:	2b00      	cmp	r3, #0
 8010714:	d007      	beq.n	8010726 <co2_auto_calibration+0x72>
			calib = 1;
 8010716:	2301      	movs	r3, #1
 8010718:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

			cli_printf(cli, "Auto calibration enabled");
 801071c:	4917      	ldr	r1, [pc, #92]	@ (801077c <co2_auto_calibration+0xc8>)
 801071e:	68f8      	ldr	r0, [r7, #12]
 8010720:	f7fe ff58 	bl	800f5d4 <cli_printf>
 8010724:	e00f      	b.n	8010746 <co2_auto_calibration+0x92>
		} else if (strstr(buffer, "n")) {
 8010726:	f107 0314 	add.w	r3, r7, #20
 801072a:	216e      	movs	r1, #110	@ 0x6e
 801072c:	4618      	mov	r0, r3
 801072e:	f00e fb69 	bl	801ee04 <strchr>
 8010732:	4603      	mov	r3, r0
 8010734:	2b00      	cmp	r3, #0
 8010736:	d006      	beq.n	8010746 <co2_auto_calibration+0x92>
			calib = 0;
 8010738:	2300      	movs	r3, #0
 801073a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
			cli_printf(cli, "Auto calibration disabled");
 801073e:	4910      	ldr	r1, [pc, #64]	@ (8010780 <co2_auto_calibration+0xcc>)
 8010740:	68f8      	ldr	r0, [r7, #12]
 8010742:	f7fe ff47 	bl	800f5d4 <cli_printf>
		}

		flag_cli = 0;
 8010746:	4b0b      	ldr	r3, [pc, #44]	@ (8010774 <co2_auto_calibration+0xc0>)
 8010748:	2200      	movs	r2, #0
 801074a:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 801074c:	4b08      	ldr	r3, [pc, #32]	@ (8010770 <co2_auto_calibration+0xbc>)
 801074e:	2200      	movs	r2, #0
 8010750:	701a      	strb	r2, [r3, #0]



	scd30_activate_auto_calibration(calib);
 8010752:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010756:	4618      	mov	r0, r3
 8010758:	f003 ff9c 	bl	8014694 <scd30_activate_auto_calibration>
}
 801075c:	bf00      	nop
 801075e:	3750      	adds	r7, #80	@ 0x50
 8010760:	46bd      	mov	sp, r7
 8010762:	bd80      	pop	{r7, pc}
 8010764:	080224ac 	.word	0x080224ac
 8010768:	08022ca0 	.word	0x08022ca0
 801076c:	08022cc8 	.word	0x08022cc8
 8010770:	20001b3a 	.word	0x20001b3a
 8010774:	20001b3b 	.word	0x20001b3b
 8010778:	20001a74 	.word	0x20001a74
 801077c:	08022cf0 	.word	0x08022cf0
 8010780:	08022d0c 	.word	0x08022d0c

08010784 <get_auto_calibration>:


void get_auto_calibration(EmbeddedCli *cli, char *args, void *context)
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b08a      	sub	sp, #40	@ 0x28
 8010788:	af00      	add	r7, sp, #0
 801078a:	60f8      	str	r0, [r7, #12]
 801078c:	60b9      	str	r1, [r7, #8]
 801078e:	607a      	str	r2, [r7, #4]
	uint16_t calib_val;
	int16_t stat;
	char status[20];
	stat = scd30_get_auto_calibration_status(&calib_val);
 8010790:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010794:	4618      	mov	r0, r3
 8010796:	f003 ffbb 	bl	8014710 <scd30_get_auto_calibration_status>
 801079a:	4603      	mov	r3, r0
 801079c:	84fb      	strh	r3, [r7, #38]	@ 0x26

	switch(stat)
 801079e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d107      	bne.n	80107b6 <get_auto_calibration+0x32>
	{

	case 0:
	{
		strcpy(status,"Success");
 80107a6:	f107 0310 	add.w	r3, r7, #16
 80107aa:	4a0f      	ldr	r2, [pc, #60]	@ (80107e8 <get_auto_calibration+0x64>)
 80107ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80107b0:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 80107b4:	e007      	b.n	80107c6 <get_auto_calibration+0x42>
	}
	default:
	{
		strcpy(status,"Error  ");
 80107b6:	f107 0310 	add.w	r3, r7, #16
 80107ba:	4a0c      	ldr	r2, [pc, #48]	@ (80107ec <get_auto_calibration+0x68>)
 80107bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80107c0:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 80107c4:	bf00      	nop
	}
	}

	cli_printf(cli, "Calibration Status: %s",status);
 80107c6:	f107 0310 	add.w	r3, r7, #16
 80107ca:	461a      	mov	r2, r3
 80107cc:	4908      	ldr	r1, [pc, #32]	@ (80107f0 <get_auto_calibration+0x6c>)
 80107ce:	68f8      	ldr	r0, [r7, #12]
 80107d0:	f7fe ff00 	bl	800f5d4 <cli_printf>
	cli_printf(cli, "Auto calibration active status: %d",calib_val);
 80107d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80107d6:	461a      	mov	r2, r3
 80107d8:	4906      	ldr	r1, [pc, #24]	@ (80107f4 <get_auto_calibration+0x70>)
 80107da:	68f8      	ldr	r0, [r7, #12]
 80107dc:	f7fe fefa 	bl	800f5d4 <cli_printf>
}
 80107e0:	bf00      	nop
 80107e2:	3728      	adds	r7, #40	@ 0x28
 80107e4:	46bd      	mov	sp, r7
 80107e6:	bd80      	pop	{r7, pc}
 80107e8:	08022c60 	.word	0x08022c60
 80107ec:	08022c68 	.word	0x08022c68
 80107f0:	08022c70 	.word	0x08022c70
 80107f4:	08022d28 	.word	0x08022d28

080107f8 <set_co2_temp_offset>:

void set_co2_temp_offset(EmbeddedCli *cli, char *args, void *context)
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b096      	sub	sp, #88	@ 0x58
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	60f8      	str	r0, [r7, #12]
 8010800:	60b9      	str	r1, [r7, #8]
 8010802:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 8010804:	4b55      	ldr	r3, [pc, #340]	@ (801095c <set_co2_temp_offset+0x164>)
 8010806:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t val;
	int counter = 0;
 8010808:	2300      	movs	r3, #0
 801080a:	657b      	str	r3, [r7, #84]	@ 0x54
	const char *dot = "........";
 801080c:	4b54      	ldr	r3, [pc, #336]	@ (8010960 <set_co2_temp_offset+0x168>)
 801080e:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint8_t do_Calibration = 0;
 8010810:	2300      	movs	r3, #0
 8010812:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	cli_other = 1;
 8010816:	4b53      	ldr	r3, [pc, #332]	@ (8010964 <set_co2_temp_offset+0x16c>)
 8010818:	2201      	movs	r2, #1
 801081a:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 801081c:	4b52      	ldr	r3, [pc, #328]	@ (8010968 <set_co2_temp_offset+0x170>)
 801081e:	2200      	movs	r2, #0
 8010820:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		memset(buffer, '\0', sizeof(buffer));
 8010822:	f107 0310 	add.w	r3, r7, #16
 8010826:	2232      	movs	r2, #50	@ 0x32
 8010828:	2100      	movs	r1, #0
 801082a:	4618      	mov	r0, r3
 801082c:	f00e fae2 	bl	801edf4 <memset>
		cli_printf(cli, "Disclaimer: Only input wholenumbers, decimals and negative numbers not supported.");
 8010830:	494e      	ldr	r1, [pc, #312]	@ (801096c <set_co2_temp_offset+0x174>)
 8010832:	68f8      	ldr	r0, [r7, #12]
 8010834:	f7fe fece 	bl	800f5d4 <cli_printf>
		cli_printf(cli,
 8010838:	494d      	ldr	r1, [pc, #308]	@ (8010970 <set_co2_temp_offset+0x178>)
 801083a:	68f8      	ldr	r0, [r7, #12]
 801083c:	f7fe feca 	bl	800f5d4 <cli_printf>
				"To calibrate Co2 sensor Temperature offset, please provide value.");
		cli_printf(cli,
 8010840:	494c      	ldr	r1, [pc, #304]	@ (8010974 <set_co2_temp_offset+0x17c>)
 8010842:	68f8      	ldr	r0, [r7, #12]
 8010844:	f7fe fec6 	bl	800f5d4 <cli_printf>
				"If temperature offset is unknown then just press enter to cancel.");

		receiveString(cli, buffer, sizeof(buffer));
 8010848:	f107 0310 	add.w	r3, r7, #16
 801084c:	2232      	movs	r2, #50	@ 0x32
 801084e:	4619      	mov	r1, r3
 8010850:	68f8      	ldr	r0, [r7, #12]
 8010852:	f7fe ff01 	bl	800f658 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010856:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010858:	f7ef fd22 	bl	80002a0 <strlen>
 801085c:	4603      	mov	r3, r0
 801085e:	b29a      	uxth	r2, r3
 8010860:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010864:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010866:	4844      	ldr	r0, [pc, #272]	@ (8010978 <set_co2_temp_offset+0x180>)
 8010868:	f7fb fd52 	bl	800c310 <HAL_UART_Transmit>
				1000);

		if (buffer[0] != '\0') {
 801086c:	7c3b      	ldrb	r3, [r7, #16]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d01e      	beq.n	80108b0 <set_co2_temp_offset+0xb8>
			_RunTime_Packet.temp_offset = 1;
 8010872:	4b42      	ldr	r3, [pc, #264]	@ (801097c <set_co2_temp_offset+0x184>)
 8010874:	2201      	movs	r2, #1
 8010876:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

			val = atoi(buffer);
 801087a:	f107 0310 	add.w	r3, r7, #16
 801087e:	4618      	mov	r0, r3
 8010880:	f00d f836 	bl	801d8f0 <atoi>
 8010884:	4603      	mov	r3, r0
 8010886:	647b      	str	r3, [r7, #68]	@ 0x44

			if (val < 65535) {
 8010888:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801088a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801088e:	4293      	cmp	r3, r2
 8010890:	d803      	bhi.n	801089a <set_co2_temp_offset+0xa2>
				_RunTime_Packet._tempOffset_co2_concentration = val;
 8010892:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010894:	b29a      	uxth	r2, r3
 8010896:	4b39      	ldr	r3, [pc, #228]	@ (801097c <set_co2_temp_offset+0x184>)
 8010898:	87da      	strh	r2, [r3, #62]	@ 0x3e
			}

			cli_printf(cli,
					"Co2 sensor temperature offset is going to be Calibrated now : %d",
					_RunTime_Packet._tempOffset_co2_concentration);
 801089a:	4b38      	ldr	r3, [pc, #224]	@ (801097c <set_co2_temp_offset+0x184>)
 801089c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
			cli_printf(cli,
 801089e:	461a      	mov	r2, r3
 80108a0:	4937      	ldr	r1, [pc, #220]	@ (8010980 <set_co2_temp_offset+0x188>)
 80108a2:	68f8      	ldr	r0, [r7, #12]
 80108a4:	f7fe fe96 	bl	800f5d4 <cli_printf>

			do_Calibration = 1;
 80108a8:	2301      	movs	r3, #1
 80108aa:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80108ae:	e006      	b.n	80108be <set_co2_temp_offset+0xc6>
		} else {
			cli_printf(cli, "Co2 sensor Temperature Offset aborted.");
 80108b0:	4934      	ldr	r1, [pc, #208]	@ (8010984 <set_co2_temp_offset+0x18c>)
 80108b2:	68f8      	ldr	r0, [r7, #12]
 80108b4:	f7fe fe8e 	bl	800f5d4 <cli_printf>
			do_Calibration = 0;
 80108b8:	2300      	movs	r3, #0
 80108ba:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
		}

		if (do_Calibration == 1) {
 80108be:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80108c2:	2b01      	cmp	r3, #1
 80108c4:	d13f      	bne.n	8010946 <set_co2_temp_offset+0x14e>
			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 80108c6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80108c8:	f7ef fcea 	bl	80002a0 <strlen>
 80108cc:	4603      	mov	r3, r0
 80108ce:	b29a      	uxth	r2, r3
 80108d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80108d4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80108d6:	4828      	ldr	r0, [pc, #160]	@ (8010978 <set_co2_temp_offset+0x180>)
 80108d8:	f7fb fd1a 	bl	800c310 <HAL_UART_Transmit>
					1000);
			cli_printf(cli, "Co2 is calibrating temperature offset, please wait.");
 80108dc:	492a      	ldr	r1, [pc, #168]	@ (8010988 <set_co2_temp_offset+0x190>)
 80108de:	68f8      	ldr	r0, [r7, #12]
 80108e0:	f7fe fe78 	bl	800f5d4 <cli_printf>
			if (!_RunTime_Packet.scd4x_i2c_error) {
 80108e4:	4b25      	ldr	r3, [pc, #148]	@ (801097c <set_co2_temp_offset+0x184>)
 80108e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d119      	bne.n	8010922 <set_co2_temp_offset+0x12a>


				scd30_set_temperature_offset(_RunTime_Packet._tempOffset_co2_concentration);
 80108ee:	4b23      	ldr	r3, [pc, #140]	@ (801097c <set_co2_temp_offset+0x184>)
 80108f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80108f2:	4618      	mov	r0, r3
 80108f4:	f003 ffea 	bl	80148cc <scd30_set_temperature_offset>

			}
			while (counter < 8) {
 80108f8:	e013      	b.n	8010922 <set_co2_temp_offset+0x12a>
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 80108fa:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80108fc:	f7ef fcd0 	bl	80002a0 <strlen>
 8010900:	4603      	mov	r3, r0
 8010902:	b29a      	uxth	r2, r3
 8010904:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010908:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801090a:	481b      	ldr	r0, [pc, #108]	@ (8010978 <set_co2_temp_offset+0x180>)
 801090c:	f7fb fd00 	bl	800c310 <HAL_UART_Transmit>
						1000);
				HAL_Delay(1000);
 8010910:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8010914:	f7f3 fc68 	bl	80041e8 <HAL_Delay>
				toggle_blue_led();
 8010918:	f7f0 fbd0 	bl	80010bc <toggle_blue_led>
				counter++;
 801091c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801091e:	3301      	adds	r3, #1
 8010920:	657b      	str	r3, [r7, #84]	@ 0x54
			while (counter < 8) {
 8010922:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010924:	2b07      	cmp	r3, #7
 8010926:	dde8      	ble.n	80108fa <set_co2_temp_offset+0x102>
			}

			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010928:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801092a:	f7ef fcb9 	bl	80002a0 <strlen>
 801092e:	4603      	mov	r3, r0
 8010930:	b29a      	uxth	r2, r3
 8010932:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010936:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010938:	480f      	ldr	r0, [pc, #60]	@ (8010978 <set_co2_temp_offset+0x180>)
 801093a:	f7fb fce9 	bl	800c310 <HAL_UART_Transmit>
					1000);
			cli_printf(cli, "Sensor calibration done.");
 801093e:	4913      	ldr	r1, [pc, #76]	@ (801098c <set_co2_temp_offset+0x194>)
 8010940:	68f8      	ldr	r0, [r7, #12]
 8010942:	f7fe fe47 	bl	800f5d4 <cli_printf>
		}

		flag_cli = 0;
 8010946:	4b08      	ldr	r3, [pc, #32]	@ (8010968 <set_co2_temp_offset+0x170>)
 8010948:	2200      	movs	r2, #0
 801094a:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 801094c:	4b05      	ldr	r3, [pc, #20]	@ (8010964 <set_co2_temp_offset+0x16c>)
 801094e:	2200      	movs	r2, #0
 8010950:	701a      	strb	r2, [r3, #0]
}
 8010952:	bf00      	nop
 8010954:	3758      	adds	r7, #88	@ 0x58
 8010956:	46bd      	mov	sp, r7
 8010958:	bd80      	pop	{r7, pc}
 801095a:	bf00      	nop
 801095c:	080224ac 	.word	0x080224ac
 8010960:	08022a08 	.word	0x08022a08
 8010964:	20001b3a 	.word	0x20001b3a
 8010968:	20001b3b 	.word	0x20001b3b
 801096c:	08022ac4 	.word	0x08022ac4
 8010970:	08022d4c 	.word	0x08022d4c
 8010974:	08022d90 	.word	0x08022d90
 8010978:	20001a74 	.word	0x20001a74
 801097c:	20001530 	.word	0x20001530
 8010980:	08022dd4 	.word	0x08022dd4
 8010984:	08022e18 	.word	0x08022e18
 8010988:	08022e40 	.word	0x08022e40
 801098c:	08022c44 	.word	0x08022c44

08010990 <get_co2_temp_offset>:

void get_co2_temp_offset(EmbeddedCli *cli, char *args, void *context)
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b08a      	sub	sp, #40	@ 0x28
 8010994:	af00      	add	r7, sp, #0
 8010996:	60f8      	str	r0, [r7, #12]
 8010998:	60b9      	str	r1, [r7, #8]
 801099a:	607a      	str	r2, [r7, #4]
	uint16_t calib_val;
		int16_t stat;
		char status[20];
		stat = scd30_get_temperature_offset(&calib_val);
 801099c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80109a0:	4618      	mov	r0, r3
 80109a2:	f003 ffd1 	bl	8014948 <scd30_get_temperature_offset>
 80109a6:	4603      	mov	r3, r0
 80109a8:	84fb      	strh	r3, [r7, #38]	@ 0x26

		switch(stat)
 80109aa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d107      	bne.n	80109c2 <get_co2_temp_offset+0x32>
		{

		case 0:
		{
			strcpy(status,"Success");
 80109b2:	f107 0310 	add.w	r3, r7, #16
 80109b6:	4a0f      	ldr	r2, [pc, #60]	@ (80109f4 <get_co2_temp_offset+0x64>)
 80109b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80109bc:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 80109c0:	e007      	b.n	80109d2 <get_co2_temp_offset+0x42>
		}
		default:
		{
			strcpy(status,"Error  ");
 80109c2:	f107 0310 	add.w	r3, r7, #16
 80109c6:	4a0c      	ldr	r2, [pc, #48]	@ (80109f8 <get_co2_temp_offset+0x68>)
 80109c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80109cc:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 80109d0:	bf00      	nop
		}
		}

		cli_printf(cli, "Temperature Offset Status: %s",status);
 80109d2:	f107 0310 	add.w	r3, r7, #16
 80109d6:	461a      	mov	r2, r3
 80109d8:	4908      	ldr	r1, [pc, #32]	@ (80109fc <get_co2_temp_offset+0x6c>)
 80109da:	68f8      	ldr	r0, [r7, #12]
 80109dc:	f7fe fdfa 	bl	800f5d4 <cli_printf>
		cli_printf(cli, "Temperature Offset Value: %d",calib_val);
 80109e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80109e2:	461a      	mov	r2, r3
 80109e4:	4906      	ldr	r1, [pc, #24]	@ (8010a00 <get_co2_temp_offset+0x70>)
 80109e6:	68f8      	ldr	r0, [r7, #12]
 80109e8:	f7fe fdf4 	bl	800f5d4 <cli_printf>
}
 80109ec:	bf00      	nop
 80109ee:	3728      	adds	r7, #40	@ 0x28
 80109f0:	46bd      	mov	sp, r7
 80109f2:	bd80      	pop	{r7, pc}
 80109f4:	08022c60 	.word	0x08022c60
 80109f8:	08022c68 	.word	0x08022c68
 80109fc:	08022e74 	.word	0x08022e74
 8010a00:	08022e94 	.word	0x08022e94

08010a04 <set_co2_altitude_compensation>:

void set_co2_altitude_compensation(EmbeddedCli *cli, char *args, void *context)
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b096      	sub	sp, #88	@ 0x58
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	60f8      	str	r0, [r7, #12]
 8010a0c:	60b9      	str	r1, [r7, #8]
 8010a0e:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 8010a10:	4b55      	ldr	r3, [pc, #340]	@ (8010b68 <set_co2_altitude_compensation+0x164>)
 8010a12:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t val;
	int counter = 0;
 8010a14:	2300      	movs	r3, #0
 8010a16:	657b      	str	r3, [r7, #84]	@ 0x54
	const char *dot = "........";
 8010a18:	4b54      	ldr	r3, [pc, #336]	@ (8010b6c <set_co2_altitude_compensation+0x168>)
 8010a1a:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint8_t do_Calibration = 0;
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	cli_other = 1;
 8010a22:	4b53      	ldr	r3, [pc, #332]	@ (8010b70 <set_co2_altitude_compensation+0x16c>)
 8010a24:	2201      	movs	r2, #1
 8010a26:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 8010a28:	4b52      	ldr	r3, [pc, #328]	@ (8010b74 <set_co2_altitude_compensation+0x170>)
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		memset(buffer, '\0', sizeof(buffer));
 8010a2e:	f107 0310 	add.w	r3, r7, #16
 8010a32:	2232      	movs	r2, #50	@ 0x32
 8010a34:	2100      	movs	r1, #0
 8010a36:	4618      	mov	r0, r3
 8010a38:	f00e f9dc 	bl	801edf4 <memset>
		cli_printf(cli, "Disclaimer: Only input wholenumbers, decimals and negative numbers not supported.");
 8010a3c:	494e      	ldr	r1, [pc, #312]	@ (8010b78 <set_co2_altitude_compensation+0x174>)
 8010a3e:	68f8      	ldr	r0, [r7, #12]
 8010a40:	f7fe fdc8 	bl	800f5d4 <cli_printf>
		cli_printf(cli,
 8010a44:	494d      	ldr	r1, [pc, #308]	@ (8010b7c <set_co2_altitude_compensation+0x178>)
 8010a46:	68f8      	ldr	r0, [r7, #12]
 8010a48:	f7fe fdc4 	bl	800f5d4 <cli_printf>
				"To calibrate Co2 sensor Altitude compensation, please provide value.");
		cli_printf(cli,
 8010a4c:	494c      	ldr	r1, [pc, #304]	@ (8010b80 <set_co2_altitude_compensation+0x17c>)
 8010a4e:	68f8      	ldr	r0, [r7, #12]
 8010a50:	f7fe fdc0 	bl	800f5d4 <cli_printf>
				"If Altitude compensation is unknown then just press enter to cancel.");

		receiveString(cli, buffer, sizeof(buffer));
 8010a54:	f107 0310 	add.w	r3, r7, #16
 8010a58:	2232      	movs	r2, #50	@ 0x32
 8010a5a:	4619      	mov	r1, r3
 8010a5c:	68f8      	ldr	r0, [r7, #12]
 8010a5e:	f7fe fdfb 	bl	800f658 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010a62:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010a64:	f7ef fc1c 	bl	80002a0 <strlen>
 8010a68:	4603      	mov	r3, r0
 8010a6a:	b29a      	uxth	r2, r3
 8010a6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010a70:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010a72:	4844      	ldr	r0, [pc, #272]	@ (8010b84 <set_co2_altitude_compensation+0x180>)
 8010a74:	f7fb fc4c 	bl	800c310 <HAL_UART_Transmit>
				1000);

		if (buffer[0] != '\0') {
 8010a78:	7c3b      	ldrb	r3, [r7, #16]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d01e      	beq.n	8010abc <set_co2_altitude_compensation+0xb8>
			_RunTime_Packet.temp_offset = 1;
 8010a7e:	4b42      	ldr	r3, [pc, #264]	@ (8010b88 <set_co2_altitude_compensation+0x184>)
 8010a80:	2201      	movs	r2, #1
 8010a82:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

			val = atoi(buffer);
 8010a86:	f107 0310 	add.w	r3, r7, #16
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	f00c ff30 	bl	801d8f0 <atoi>
 8010a90:	4603      	mov	r3, r0
 8010a92:	647b      	str	r3, [r7, #68]	@ 0x44

			if (val < 65535) {
 8010a94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010a96:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010a9a:	4293      	cmp	r3, r2
 8010a9c:	d803      	bhi.n	8010aa6 <set_co2_altitude_compensation+0xa2>
				_RunTime_Packet._tempOffset_co2_concentration = val;
 8010a9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010aa0:	b29a      	uxth	r2, r3
 8010aa2:	4b39      	ldr	r3, [pc, #228]	@ (8010b88 <set_co2_altitude_compensation+0x184>)
 8010aa4:	87da      	strh	r2, [r3, #62]	@ 0x3e
			}

			cli_printf(cli,
					"Co2 sensor Altitude compensation is going to be Calibrated now : %d",
					_RunTime_Packet._tempOffset_co2_concentration);
 8010aa6:	4b38      	ldr	r3, [pc, #224]	@ (8010b88 <set_co2_altitude_compensation+0x184>)
 8010aa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
			cli_printf(cli,
 8010aaa:	461a      	mov	r2, r3
 8010aac:	4937      	ldr	r1, [pc, #220]	@ (8010b8c <set_co2_altitude_compensation+0x188>)
 8010aae:	68f8      	ldr	r0, [r7, #12]
 8010ab0:	f7fe fd90 	bl	800f5d4 <cli_printf>

			do_Calibration = 1;
 8010ab4:	2301      	movs	r3, #1
 8010ab6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8010aba:	e006      	b.n	8010aca <set_co2_altitude_compensation+0xc6>
		} else {
			cli_printf(cli, "Co2 sensor Altitude compensation aborted.");
 8010abc:	4934      	ldr	r1, [pc, #208]	@ (8010b90 <set_co2_altitude_compensation+0x18c>)
 8010abe:	68f8      	ldr	r0, [r7, #12]
 8010ac0:	f7fe fd88 	bl	800f5d4 <cli_printf>
			do_Calibration = 0;
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
		}

		if (do_Calibration == 1) {
 8010aca:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8010ace:	2b01      	cmp	r3, #1
 8010ad0:	d13f      	bne.n	8010b52 <set_co2_altitude_compensation+0x14e>
			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010ad2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010ad4:	f7ef fbe4 	bl	80002a0 <strlen>
 8010ad8:	4603      	mov	r3, r0
 8010ada:	b29a      	uxth	r2, r3
 8010adc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010ae0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010ae2:	4828      	ldr	r0, [pc, #160]	@ (8010b84 <set_co2_altitude_compensation+0x180>)
 8010ae4:	f7fb fc14 	bl	800c310 <HAL_UART_Transmit>
					1000);
			cli_printf(cli, "Co2 is calibrating Altitude compensation, please wait.");
 8010ae8:	492a      	ldr	r1, [pc, #168]	@ (8010b94 <set_co2_altitude_compensation+0x190>)
 8010aea:	68f8      	ldr	r0, [r7, #12]
 8010aec:	f7fe fd72 	bl	800f5d4 <cli_printf>
			if (!_RunTime_Packet.scd4x_i2c_error) {
 8010af0:	4b25      	ldr	r3, [pc, #148]	@ (8010b88 <set_co2_altitude_compensation+0x184>)
 8010af2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d119      	bne.n	8010b2e <set_co2_altitude_compensation+0x12a>


				scd30_set_altitude_compensation(_RunTime_Packet._tempOffset_co2_concentration);
 8010afa:	4b23      	ldr	r3, [pc, #140]	@ (8010b88 <set_co2_altitude_compensation+0x184>)
 8010afc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010afe:	4618      	mov	r0, r3
 8010b00:	f003 ffc2 	bl	8014a88 <scd30_set_altitude_compensation>

			}
			while (counter < 8) {
 8010b04:	e013      	b.n	8010b2e <set_co2_altitude_compensation+0x12a>
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 8010b06:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8010b08:	f7ef fbca 	bl	80002a0 <strlen>
 8010b0c:	4603      	mov	r3, r0
 8010b0e:	b29a      	uxth	r2, r3
 8010b10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010b14:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8010b16:	481b      	ldr	r0, [pc, #108]	@ (8010b84 <set_co2_altitude_compensation+0x180>)
 8010b18:	f7fb fbfa 	bl	800c310 <HAL_UART_Transmit>
						1000);
				HAL_Delay(1000);
 8010b1c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8010b20:	f7f3 fb62 	bl	80041e8 <HAL_Delay>
				toggle_blue_led();
 8010b24:	f7f0 faca 	bl	80010bc <toggle_blue_led>
				counter++;
 8010b28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010b2a:	3301      	adds	r3, #1
 8010b2c:	657b      	str	r3, [r7, #84]	@ 0x54
			while (counter < 8) {
 8010b2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010b30:	2b07      	cmp	r3, #7
 8010b32:	dde8      	ble.n	8010b06 <set_co2_altitude_compensation+0x102>
			}

			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010b34:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010b36:	f7ef fbb3 	bl	80002a0 <strlen>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	b29a      	uxth	r2, r3
 8010b3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010b42:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010b44:	480f      	ldr	r0, [pc, #60]	@ (8010b84 <set_co2_altitude_compensation+0x180>)
 8010b46:	f7fb fbe3 	bl	800c310 <HAL_UART_Transmit>
					1000);
			cli_printf(cli, "Sensor calibration done.");
 8010b4a:	4913      	ldr	r1, [pc, #76]	@ (8010b98 <set_co2_altitude_compensation+0x194>)
 8010b4c:	68f8      	ldr	r0, [r7, #12]
 8010b4e:	f7fe fd41 	bl	800f5d4 <cli_printf>
		}

		flag_cli = 0;
 8010b52:	4b08      	ldr	r3, [pc, #32]	@ (8010b74 <set_co2_altitude_compensation+0x170>)
 8010b54:	2200      	movs	r2, #0
 8010b56:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 8010b58:	4b05      	ldr	r3, [pc, #20]	@ (8010b70 <set_co2_altitude_compensation+0x16c>)
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	701a      	strb	r2, [r3, #0]
}
 8010b5e:	bf00      	nop
 8010b60:	3758      	adds	r7, #88	@ 0x58
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}
 8010b66:	bf00      	nop
 8010b68:	080224ac 	.word	0x080224ac
 8010b6c:	08022a08 	.word	0x08022a08
 8010b70:	20001b3a 	.word	0x20001b3a
 8010b74:	20001b3b 	.word	0x20001b3b
 8010b78:	08022ac4 	.word	0x08022ac4
 8010b7c:	08022eb4 	.word	0x08022eb4
 8010b80:	08022efc 	.word	0x08022efc
 8010b84:	20001a74 	.word	0x20001a74
 8010b88:	20001530 	.word	0x20001530
 8010b8c:	08022f44 	.word	0x08022f44
 8010b90:	08022f88 	.word	0x08022f88
 8010b94:	08022fb4 	.word	0x08022fb4
 8010b98:	08022c44 	.word	0x08022c44

08010b9c <get_co2_altitude_compensation>:

void get_co2_altitude_compensation(EmbeddedCli *cli, char *args, void *context)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b08a      	sub	sp, #40	@ 0x28
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	60f8      	str	r0, [r7, #12]
 8010ba4:	60b9      	str	r1, [r7, #8]
 8010ba6:	607a      	str	r2, [r7, #4]
	uint16_t calib_val;
		int16_t stat;
		char status[20];
		stat = scd30_get_altitude_compensation(&calib_val);
 8010ba8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010bac:	4618      	mov	r0, r3
 8010bae:	f003 ff1b 	bl	80149e8 <scd30_get_altitude_compensation>
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	84fb      	strh	r3, [r7, #38]	@ 0x26

		switch(stat)
 8010bb6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d107      	bne.n	8010bce <get_co2_altitude_compensation+0x32>
		{

		case 0:
		{
			strcpy(status,"Success");
 8010bbe:	f107 0310 	add.w	r3, r7, #16
 8010bc2:	4a0f      	ldr	r2, [pc, #60]	@ (8010c00 <get_co2_altitude_compensation+0x64>)
 8010bc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010bc8:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8010bcc:	e007      	b.n	8010bde <get_co2_altitude_compensation+0x42>
		}
		default:
		{
			strcpy(status,"Error  ");
 8010bce:	f107 0310 	add.w	r3, r7, #16
 8010bd2:	4a0c      	ldr	r2, [pc, #48]	@ (8010c04 <get_co2_altitude_compensation+0x68>)
 8010bd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010bd8:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8010bdc:	bf00      	nop
		}
		}

		cli_printf(cli, "Altitude_compensation Status: %s",status);
 8010bde:	f107 0310 	add.w	r3, r7, #16
 8010be2:	461a      	mov	r2, r3
 8010be4:	4908      	ldr	r1, [pc, #32]	@ (8010c08 <get_co2_altitude_compensation+0x6c>)
 8010be6:	68f8      	ldr	r0, [r7, #12]
 8010be8:	f7fe fcf4 	bl	800f5d4 <cli_printf>
		cli_printf(cli, "Altitude_compensation Value: %d",calib_val);
 8010bec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010bee:	461a      	mov	r2, r3
 8010bf0:	4906      	ldr	r1, [pc, #24]	@ (8010c0c <get_co2_altitude_compensation+0x70>)
 8010bf2:	68f8      	ldr	r0, [r7, #12]
 8010bf4:	f7fe fcee 	bl	800f5d4 <cli_printf>
}
 8010bf8:	bf00      	nop
 8010bfa:	3728      	adds	r7, #40	@ 0x28
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	bd80      	pop	{r7, pc}
 8010c00:	08022c60 	.word	0x08022c60
 8010c04:	08022c68 	.word	0x08022c68
 8010c08:	08022fec 	.word	0x08022fec
 8010c0c:	08023010 	.word	0x08023010

08010c10 <run_co2_calibration_routine>:


void run_co2_calibration_routine(EmbeddedCli *cli, char *args, void *context)
{
 8010c10:	b590      	push	{r4, r7, lr}
 8010c12:	b0a7      	sub	sp, #156	@ 0x9c
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	60f8      	str	r0, [r7, #12]
 8010c18:	60b9      	str	r1, [r7, #8]
 8010c1a:	607a      	str	r2, [r7, #4]
	uint32_t maxTime = 120000;
 8010c1c:	4bb1      	ldr	r3, [pc, #708]	@ (8010ee4 <run_co2_calibration_routine+0x2d4>)
 8010c1e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	uint32_t prev_maxTime =  HAL_GetTick();
 8010c22:	f7f3 fad5 	bl	80041d0 <HAL_GetTick>
 8010c26:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	uint32_t cur_tick = 0;
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	const char *newLine = "\r\n";
 8010c30:	4bad      	ldr	r3, [pc, #692]	@ (8010ee8 <run_co2_calibration_routine+0x2d8>)
 8010c32:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	uint32_t val;
	int counter = 0;
 8010c36:	2300      	movs	r3, #0
 8010c38:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	const char *dot = "........";
 8010c3c:	4bab      	ldr	r3, [pc, #684]	@ (8010eec <run_co2_calibration_routine+0x2dc>)
 8010c3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
	char progressbar_buf[50] = "ProgressBar: ";
 8010c40:	4aab      	ldr	r2, [pc, #684]	@ (8010ef0 <run_co2_calibration_routine+0x2e0>)
 8010c42:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8010c46:	4614      	mov	r4, r2
 8010c48:	6820      	ldr	r0, [r4, #0]
 8010c4a:	6861      	ldr	r1, [r4, #4]
 8010c4c:	68a2      	ldr	r2, [r4, #8]
 8010c4e:	c307      	stmia	r3!, {r0, r1, r2}
 8010c50:	89a2      	ldrh	r2, [r4, #12]
 8010c52:	801a      	strh	r2, [r3, #0]
 8010c54:	f107 0352 	add.w	r3, r7, #82	@ 0x52
 8010c58:	2224      	movs	r2, #36	@ 0x24
 8010c5a:	2100      	movs	r1, #0
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	f00e f8c9 	bl	801edf4 <memset>
	uint8_t calib = 0;
 8010c62:	2300      	movs	r3, #0
 8010c64:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	uint8_t do_Calibration = 0;
 8010c68:	2300      	movs	r3, #0
 8010c6a:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
	cli_other = 1;
 8010c6e:	4ba1      	ldr	r3, [pc, #644]	@ (8010ef4 <run_co2_calibration_routine+0x2e4>)
 8010c70:	2201      	movs	r2, #1
 8010c72:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 8010c74:	4ba0      	ldr	r3, [pc, #640]	@ (8010ef8 <run_co2_calibration_routine+0x2e8>)
 8010c76:	2200      	movs	r2, #0
 8010c78:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		memset(buffer, '\0', sizeof(buffer));
 8010c7a:	f107 0310 	add.w	r3, r7, #16
 8010c7e:	2232      	movs	r2, #50	@ 0x32
 8010c80:	2100      	movs	r1, #0
 8010c82:	4618      	mov	r0, r3
 8010c84:	f00e f8b6 	bl	801edf4 <memset>

		     cli_printf(cli,"");
 8010c88:	499c      	ldr	r1, [pc, #624]	@ (8010efc <run_co2_calibration_routine+0x2ec>)
 8010c8a:	68f8      	ldr	r0, [r7, #12]
 8010c8c:	f7fe fca2 	bl	800f5d4 <cli_printf>
				cli_printf(cli,"It takes about 2-3min to run complete routine. ");
 8010c90:	499b      	ldr	r1, [pc, #620]	@ (8010f00 <run_co2_calibration_routine+0x2f0>)
 8010c92:	68f8      	ldr	r0, [r7, #12]
 8010c94:	f7fe fc9e 	bl	800f5d4 <cli_printf>
				cli_printf(cli,"once this routine is activated it cant be canceled. ");
 8010c98:	499a      	ldr	r1, [pc, #616]	@ (8010f04 <run_co2_calibration_routine+0x2f4>)
 8010c9a:	68f8      	ldr	r0, [r7, #12]
 8010c9c:	f7fe fc9a 	bl	800f5d4 <cli_printf>
				cli_printf(cli,"Do you want to run calibration routine y/n?. ");
 8010ca0:	4999      	ldr	r1, [pc, #612]	@ (8010f08 <run_co2_calibration_routine+0x2f8>)
 8010ca2:	68f8      	ldr	r0, [r7, #12]
 8010ca4:	f7fe fc96 	bl	800f5d4 <cli_printf>

		receiveString(cli, buffer, sizeof(buffer));
 8010ca8:	f107 0310 	add.w	r3, r7, #16
 8010cac:	2232      	movs	r2, #50	@ 0x32
 8010cae:	4619      	mov	r1, r3
 8010cb0:	68f8      	ldr	r0, [r7, #12]
 8010cb2:	f7fe fcd1 	bl	800f658 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010cb6:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8010cba:	f7ef faf1 	bl	80002a0 <strlen>
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	b29a      	uxth	r2, r3
 8010cc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010cc6:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8010cca:	4890      	ldr	r0, [pc, #576]	@ (8010f0c <run_co2_calibration_routine+0x2fc>)
 8010ccc:	f7fb fb20 	bl	800c310 <HAL_UART_Transmit>
				1000);

		if (strstr(buffer, "y")) {
 8010cd0:	f107 0310 	add.w	r3, r7, #16
 8010cd4:	2179      	movs	r1, #121	@ 0x79
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	f00e f894 	bl	801ee04 <strchr>
 8010cdc:	4603      	mov	r3, r0
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d007      	beq.n	8010cf2 <run_co2_calibration_routine+0xe2>
			calib = 1;
 8010ce2:	2301      	movs	r3, #1
 8010ce4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

			cli_printf(cli, "Calibration routine running");
 8010ce8:	4989      	ldr	r1, [pc, #548]	@ (8010f10 <run_co2_calibration_routine+0x300>)
 8010cea:	68f8      	ldr	r0, [r7, #12]
 8010cec:	f7fe fc72 	bl	800f5d4 <cli_printf>
 8010cf0:	e00f      	b.n	8010d12 <run_co2_calibration_routine+0x102>
		} else if (strstr(buffer, "n")) {
 8010cf2:	f107 0310 	add.w	r3, r7, #16
 8010cf6:	216e      	movs	r1, #110	@ 0x6e
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	f00e f883 	bl	801ee04 <strchr>
 8010cfe:	4603      	mov	r3, r0
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d006      	beq.n	8010d12 <run_co2_calibration_routine+0x102>
			calib = 0;
 8010d04:	2300      	movs	r3, #0
 8010d06:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
			cli_printf(cli, "Calibration routine aborted");
 8010d0a:	4982      	ldr	r1, [pc, #520]	@ (8010f14 <run_co2_calibration_routine+0x304>)
 8010d0c:	68f8      	ldr	r0, [r7, #12]
 8010d0e:	f7fe fc61 	bl	800f5d4 <cli_printf>
		}


		if(calib)
 8010d12:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	f000 8141 	beq.w	8010f9e <run_co2_calibration_routine+0x38e>
		{
			if (!_RunTime_Packet.scd4x_i2c_error) {
 8010d1c:	4b7e      	ldr	r3, [pc, #504]	@ (8010f18 <run_co2_calibration_routine+0x308>)
 8010d1e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d102      	bne.n	8010d2c <run_co2_calibration_routine+0x11c>
				scd30_start_periodic_measurement(0);
 8010d26:	2000      	movs	r0, #0
 8010d28:	f003 fb54 	bl	80143d4 <scd30_start_periodic_measurement>
			}
			cli_printf(cli,"");
 8010d2c:	4973      	ldr	r1, [pc, #460]	@ (8010efc <run_co2_calibration_routine+0x2ec>)
 8010d2e:	68f8      	ldr	r0, [r7, #12]
 8010d30:	f7fe fc50 	bl	800f5d4 <cli_printf>
			cli_printf(cli,"GuideLines");
 8010d34:	4979      	ldr	r1, [pc, #484]	@ (8010f1c <run_co2_calibration_routine+0x30c>)
 8010d36:	68f8      	ldr	r0, [r7, #12]
 8010d38:	f7fe fc4c 	bl	800f5d4 <cli_printf>
			cli_printf(cli,"");
 8010d3c:	496f      	ldr	r1, [pc, #444]	@ (8010efc <run_co2_calibration_routine+0x2ec>)
 8010d3e:	68f8      	ldr	r0, [r7, #12]
 8010d40:	f7fe fc48 	bl	800f5d4 <cli_printf>
			cli_printf(cli,"1)Donot remove USB, otherwise calibrations will be canceled. ");
 8010d44:	4976      	ldr	r1, [pc, #472]	@ (8010f20 <run_co2_calibration_routine+0x310>)
 8010d46:	68f8      	ldr	r0, [r7, #12]
 8010d48:	f7fe fc44 	bl	800f5d4 <cli_printf>
			cli_printf(cli,"2)Expose the sensor to a controlled environment with a known value of Co2. ");
 8010d4c:	4975      	ldr	r1, [pc, #468]	@ (8010f24 <run_co2_calibration_routine+0x314>)
 8010d4e:	68f8      	ldr	r0, [r7, #12]
 8010d50:	f7fe fc40 	bl	800f5d4 <cli_printf>
			cli_printf(cli,"3)After 2min, apply known value of Co2. ");
 8010d54:	4974      	ldr	r1, [pc, #464]	@ (8010f28 <run_co2_calibration_routine+0x318>)
 8010d56:	68f8      	ldr	r0, [r7, #12]
 8010d58:	f7fe fc3c 	bl	800f5d4 <cli_printf>
			cli_printf(cli,"4)Calibration routine finished. ");
 8010d5c:	4973      	ldr	r1, [pc, #460]	@ (8010f2c <run_co2_calibration_routine+0x31c>)
 8010d5e:	68f8      	ldr	r0, [r7, #12]
 8010d60:	f7fe fc38 	bl	800f5d4 <cli_printf>
			memset(buffer, '\0', sizeof(buffer));
 8010d64:	f107 0310 	add.w	r3, r7, #16
 8010d68:	2232      	movs	r2, #50	@ 0x32
 8010d6a:	2100      	movs	r1, #0
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	f00e f841 	bl	801edf4 <memset>

			 prev_maxTime =  HAL_GetTick();
 8010d72:	f7f3 fa2d 	bl	80041d0 <HAL_GetTick>
 8010d76:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
				cur_tick = HAL_GetTick();
 8010d7a:	f7f3 fa29 	bl	80041d0 <HAL_GetTick>
 8010d7e:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
				cli_printf(cli,"");
 8010d82:	495e      	ldr	r1, [pc, #376]	@ (8010efc <run_co2_calibration_routine+0x2ec>)
 8010d84:	68f8      	ldr	r0, [r7, #12]
 8010d86:	f7fe fc25 	bl	800f5d4 <cli_printf>
				cli_printf(cli,"");
 8010d8a:	495c      	ldr	r1, [pc, #368]	@ (8010efc <run_co2_calibration_routine+0x2ec>)
 8010d8c:	68f8      	ldr	r0, [r7, #12]
 8010d8e:	f7fe fc21 	bl	800f5d4 <cli_printf>
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) progressbar_buf, strlen(progressbar_buf),
 8010d92:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8010d96:	4618      	mov	r0, r3
 8010d98:	f7ef fa82 	bl	80002a0 <strlen>
 8010d9c:	4603      	mov	r3, r0
 8010d9e:	b29a      	uxth	r2, r3
 8010da0:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8010da4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010da8:	4858      	ldr	r0, [pc, #352]	@ (8010f0c <run_co2_calibration_routine+0x2fc>)
 8010daa:	f7fb fab1 	bl	800c310 <HAL_UART_Transmit>
									1000);
			 while (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 8010dae:	e01e      	b.n	8010dee <run_co2_calibration_routine+0x1de>

					if ((HAL_GetTick() - cur_tick > 5000)) {
 8010db0:	f7f3 fa0e 	bl	80041d0 <HAL_GetTick>
 8010db4:	4602      	mov	r2, r0
 8010db6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8010dba:	1ad3      	subs	r3, r2, r3
 8010dbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010dc0:	4293      	cmp	r3, r2
 8010dc2:	d90a      	bls.n	8010dda <run_co2_calibration_routine+0x1ca>


							HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*)"##", 2,
 8010dc4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010dc8:	2202      	movs	r2, #2
 8010dca:	4959      	ldr	r1, [pc, #356]	@ (8010f30 <run_co2_calibration_routine+0x320>)
 8010dcc:	484f      	ldr	r0, [pc, #316]	@ (8010f0c <run_co2_calibration_routine+0x2fc>)
 8010dce:	f7fb fa9f 	bl	800c310 <HAL_UART_Transmit>
									1000);
							cur_tick = HAL_GetTick();
 8010dd2:	f7f3 f9fd 	bl	80041d0 <HAL_GetTick>
 8010dd6:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
						}

			        if ((HAL_GetTick() - prev_maxTime > maxTime)) {
 8010dda:	f7f3 f9f9 	bl	80041d0 <HAL_GetTick>
 8010dde:	4602      	mov	r2, r0
 8010de0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010de4:	1ad3      	subs	r3, r2, r3
 8010de6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8010dea:	429a      	cmp	r2, r3
 8010dec:	d308      	bcc.n	8010e00 <run_co2_calibration_routine+0x1f0>
			 while (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 8010dee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010df2:	4850      	ldr	r0, [pc, #320]	@ (8010f34 <run_co2_calibration_routine+0x324>)
 8010df4:	f7f5 f9b8 	bl	8006168 <HAL_GPIO_ReadPin>
 8010df8:	4603      	mov	r3, r0
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d1d8      	bne.n	8010db0 <run_co2_calibration_routine+0x1a0>
 8010dfe:	e000      	b.n	8010e02 <run_co2_calibration_routine+0x1f2>
					//we break the loop if time goes above 5min
					break;
 8010e00:	bf00      	nop
				}

			}

			 cli_printf(cli,"");
 8010e02:	493e      	ldr	r1, [pc, #248]	@ (8010efc <run_co2_calibration_routine+0x2ec>)
 8010e04:	68f8      	ldr	r0, [r7, #12]
 8010e06:	f7fe fbe5 	bl	800f5d4 <cli_printf>
			 cli_printf(cli,"");
 8010e0a:	493c      	ldr	r1, [pc, #240]	@ (8010efc <run_co2_calibration_routine+0x2ec>)
 8010e0c:	68f8      	ldr	r0, [r7, #12]
 8010e0e:	f7fe fbe1 	bl	800f5d4 <cli_printf>
			 cli_printf(cli,"");
 8010e12:	493a      	ldr	r1, [pc, #232]	@ (8010efc <run_co2_calibration_routine+0x2ec>)
 8010e14:	68f8      	ldr	r0, [r7, #12]
 8010e16:	f7fe fbdd 	bl	800f5d4 <cli_printf>
			 cli_printf(cli,"Enter Known Co2 reference value!");
 8010e1a:	4947      	ldr	r1, [pc, #284]	@ (8010f38 <run_co2_calibration_routine+0x328>)
 8010e1c:	68f8      	ldr	r0, [r7, #12]
 8010e1e:	f7fe fbd9 	bl	800f5d4 <cli_printf>

				receiveString(cli, buffer, sizeof(buffer));
 8010e22:	f107 0310 	add.w	r3, r7, #16
 8010e26:	2232      	movs	r2, #50	@ 0x32
 8010e28:	4619      	mov	r1, r3
 8010e2a:	68f8      	ldr	r0, [r7, #12]
 8010e2c:	f7fe fc14 	bl	800f658 <receiveString>
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010e30:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8010e34:	f7ef fa34 	bl	80002a0 <strlen>
 8010e38:	4603      	mov	r3, r0
 8010e3a:	b29a      	uxth	r2, r3
 8010e3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010e40:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8010e44:	4831      	ldr	r0, [pc, #196]	@ (8010f0c <run_co2_calibration_routine+0x2fc>)
 8010e46:	f7fb fa63 	bl	800c310 <HAL_UART_Transmit>
						1000);

				if (buffer[0] != '\0') {
 8010e4a:	7c3b      	ldrb	r3, [r7, #16]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d01e      	beq.n	8010e8e <run_co2_calibration_routine+0x27e>
					_RunTime_Packet.CO2_calibration = 1;
 8010e50:	4b31      	ldr	r3, [pc, #196]	@ (8010f18 <run_co2_calibration_routine+0x308>)
 8010e52:	2201      	movs	r2, #1
 8010e54:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

					val = atoi(buffer);
 8010e58:	f107 0310 	add.w	r3, r7, #16
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	f00c fd47 	bl	801d8f0 <atoi>
 8010e62:	4603      	mov	r3, r0
 8010e64:	67bb      	str	r3, [r7, #120]	@ 0x78

					if (val < 65535) {
 8010e66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010e68:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010e6c:	4293      	cmp	r3, r2
 8010e6e:	d803      	bhi.n	8010e78 <run_co2_calibration_routine+0x268>
						_RunTime_Packet._target_co2_concentration = val;
 8010e70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010e72:	b29a      	uxth	r2, r3
 8010e74:	4b28      	ldr	r3, [pc, #160]	@ (8010f18 <run_co2_calibration_routine+0x308>)
 8010e76:	879a      	strh	r2, [r3, #60]	@ 0x3c
					}

					cli_printf(cli,
							"Co2 sensor is going to be Calibrated now. Co2 concentration value provided : %d",
							_RunTime_Packet._target_co2_concentration);
 8010e78:	4b27      	ldr	r3, [pc, #156]	@ (8010f18 <run_co2_calibration_routine+0x308>)
 8010e7a:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
					cli_printf(cli,
 8010e7c:	461a      	mov	r2, r3
 8010e7e:	492f      	ldr	r1, [pc, #188]	@ (8010f3c <run_co2_calibration_routine+0x32c>)
 8010e80:	68f8      	ldr	r0, [r7, #12]
 8010e82:	f7fe fba7 	bl	800f5d4 <cli_printf>
					do_Calibration = 1;
 8010e86:	2301      	movs	r3, #1
 8010e88:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 8010e8c:	e00a      	b.n	8010ea4 <run_co2_calibration_routine+0x294>
				} else {
					cli_printf(cli, "Co2 sensor Calibration aborted. No value provided");
 8010e8e:	492c      	ldr	r1, [pc, #176]	@ (8010f40 <run_co2_calibration_routine+0x330>)
 8010e90:	68f8      	ldr	r0, [r7, #12]
 8010e92:	f7fe fb9f 	bl	800f5d4 <cli_printf>
					_RunTime_Packet.CO2_calibration = 0;
 8010e96:	4b20      	ldr	r3, [pc, #128]	@ (8010f18 <run_co2_calibration_routine+0x308>)
 8010e98:	2200      	movs	r2, #0
 8010e9a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
					do_Calibration = 0;
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
				}

				if (do_Calibration == 1) {
 8010ea4:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8010ea8:	2b01      	cmp	r3, #1
 8010eaa:	d178      	bne.n	8010f9e <run_co2_calibration_routine+0x38e>
					HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010eac:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8010eb0:	f7ef f9f6 	bl	80002a0 <strlen>
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	b29a      	uxth	r2, r3
 8010eb8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010ebc:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8010ec0:	4812      	ldr	r0, [pc, #72]	@ (8010f0c <run_co2_calibration_routine+0x2fc>)
 8010ec2:	f7fb fa25 	bl	800c310 <HAL_UART_Transmit>
							1000);
					cli_printf(cli, "Co2 is calibrating, please wait.");
 8010ec6:	491f      	ldr	r1, [pc, #124]	@ (8010f44 <run_co2_calibration_routine+0x334>)
 8010ec8:	68f8      	ldr	r0, [r7, #12]
 8010eca:	f7fe fb83 	bl	800f5d4 <cli_printf>
					if (!_RunTime_Packet.scd4x_i2c_error) {
 8010ece:	4b12      	ldr	r3, [pc, #72]	@ (8010f18 <run_co2_calibration_routine+0x308>)
 8010ed0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d14d      	bne.n	8010f74 <run_co2_calibration_routine+0x364>
			#ifdef use_scd40x
						scd4x_perform_forced_recalibration(
								_RunTime_Packet._target_co2_concentration,
								&_RunTime_Packet._frc_correction);
			#elif use_scd30
					scd30_force_recalibration(_RunTime_Packet._target_co2_concentration);
 8010ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8010f18 <run_co2_calibration_routine+0x308>)
 8010eda:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8010edc:	4618      	mov	r0, r3
 8010ede:	f003 fc67 	bl	80147b0 <scd30_force_recalibration>
			#endif
					}
					while (counter < 8) {
 8010ee2:	e047      	b.n	8010f74 <run_co2_calibration_routine+0x364>
 8010ee4:	0001d4c0 	.word	0x0001d4c0
 8010ee8:	080224ac 	.word	0x080224ac
 8010eec:	08022a08 	.word	0x08022a08
 8010ef0:	08023248 	.word	0x08023248
 8010ef4:	20001b3a 	.word	0x20001b3a
 8010ef8:	20001b3b 	.word	0x20001b3b
 8010efc:	08023030 	.word	0x08023030
 8010f00:	08023034 	.word	0x08023034
 8010f04:	08023064 	.word	0x08023064
 8010f08:	0802309c 	.word	0x0802309c
 8010f0c:	20001a74 	.word	0x20001a74
 8010f10:	080230cc 	.word	0x080230cc
 8010f14:	080230e8 	.word	0x080230e8
 8010f18:	20001530 	.word	0x20001530
 8010f1c:	08023104 	.word	0x08023104
 8010f20:	08023110 	.word	0x08023110
 8010f24:	08023150 	.word	0x08023150
 8010f28:	0802319c 	.word	0x0802319c
 8010f2c:	080231c8 	.word	0x080231c8
 8010f30:	080231ec 	.word	0x080231ec
 8010f34:	40020000 	.word	0x40020000
 8010f38:	080231f0 	.word	0x080231f0
 8010f3c:	08022bb0 	.word	0x08022bb0
 8010f40:	08023214 	.word	0x08023214
 8010f44:	08022c20 	.word	0x08022c20
						HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 8010f48:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8010f4a:	f7ef f9a9 	bl	80002a0 <strlen>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	b29a      	uxth	r2, r3
 8010f52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010f56:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010f58:	4816      	ldr	r0, [pc, #88]	@ (8010fb4 <run_co2_calibration_routine+0x3a4>)
 8010f5a:	f7fb f9d9 	bl	800c310 <HAL_UART_Transmit>
								1000);
						HAL_Delay(1000);
 8010f5e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8010f62:	f7f3 f941 	bl	80041e8 <HAL_Delay>
						toggle_blue_led();
 8010f66:	f7f0 f8a9 	bl	80010bc <toggle_blue_led>
						counter++;
 8010f6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010f6e:	3301      	adds	r3, #1
 8010f70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
					while (counter < 8) {
 8010f74:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010f78:	2b07      	cmp	r3, #7
 8010f7a:	dde5      	ble.n	8010f48 <run_co2_calibration_routine+0x338>
					}

					HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010f7c:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8010f80:	f7ef f98e 	bl	80002a0 <strlen>
 8010f84:	4603      	mov	r3, r0
 8010f86:	b29a      	uxth	r2, r3
 8010f88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010f8c:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8010f90:	4808      	ldr	r0, [pc, #32]	@ (8010fb4 <run_co2_calibration_routine+0x3a4>)
 8010f92:	f7fb f9bd 	bl	800c310 <HAL_UART_Transmit>
							1000);
					cli_printf(cli, "Sensor calibration done.");
 8010f96:	4908      	ldr	r1, [pc, #32]	@ (8010fb8 <run_co2_calibration_routine+0x3a8>)
 8010f98:	68f8      	ldr	r0, [r7, #12]
 8010f9a:	f7fe fb1b 	bl	800f5d4 <cli_printf>
		}




		flag_cli = 0;
 8010f9e:	4b07      	ldr	r3, [pc, #28]	@ (8010fbc <run_co2_calibration_routine+0x3ac>)
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	701a      	strb	r2, [r3, #0]
			cli_other = 0;
 8010fa4:	4b06      	ldr	r3, [pc, #24]	@ (8010fc0 <run_co2_calibration_routine+0x3b0>)
 8010fa6:	2200      	movs	r2, #0
 8010fa8:	701a      	strb	r2, [r3, #0]

}
 8010faa:	bf00      	nop
 8010fac:	379c      	adds	r7, #156	@ 0x9c
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	bd90      	pop	{r4, r7, pc}
 8010fb2:	bf00      	nop
 8010fb4:	20001a74 	.word	0x20001a74
 8010fb8:	08022c44 	.word	0x08022c44
 8010fbc:	20001b3b 	.word	0x20001b3b
 8010fc0:	20001b3a 	.word	0x20001b3a

08010fc4 <set_co2_samples>:


void set_co2_samples(EmbeddedCli *cli, char *args, void *context)
{
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b092      	sub	sp, #72	@ 0x48
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	60f8      	str	r0, [r7, #12]
 8010fcc:	60b9      	str	r1, [r7, #8]
 8010fce:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 8010fd0:	4b37      	ldr	r3, [pc, #220]	@ (80110b0 <set_co2_samples+0xec>)
 8010fd2:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: Only input wholenumbers, decimals and negative numbers not supported.");
 8010fd4:	4937      	ldr	r1, [pc, #220]	@ (80110b4 <set_co2_samples+0xf0>)
 8010fd6:	68f8      	ldr	r0, [r7, #12]
 8010fd8:	f7fe fafc 	bl	800f5d4 <cli_printf>
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 8010fdc:	4936      	ldr	r1, [pc, #216]	@ (80110b8 <set_co2_samples+0xf4>)
 8010fde:	68f8      	ldr	r0, [r7, #12]
 8010fe0:	f7fe faf8 	bl	800f5d4 <cli_printf>
	cli_printf(cli, "Disclaimer: Increase in Samples number also reduces battery life.");
 8010fe4:	4935      	ldr	r1, [pc, #212]	@ (80110bc <set_co2_samples+0xf8>)
 8010fe6:	68f8      	ldr	r0, [r7, #12]
 8010fe8:	f7fe faf4 	bl	800f5d4 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010fec:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010fee:	f7ef f957 	bl	80002a0 <strlen>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	b29a      	uxth	r2, r3
 8010ff6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010ffa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010ffc:	4830      	ldr	r0, [pc, #192]	@ (80110c0 <set_co2_samples+0xfc>)
 8010ffe:	f7fb f987 	bl	800c310 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Enter the number of Samples: ");
 8011002:	4930      	ldr	r1, [pc, #192]	@ (80110c4 <set_co2_samples+0x100>)
 8011004:	68f8      	ldr	r0, [r7, #12]
 8011006:	f7fe fae5 	bl	800f5d4 <cli_printf>

	uint16_t val;
	cli_other = 1;
 801100a:	4b2f      	ldr	r3, [pc, #188]	@ (80110c8 <set_co2_samples+0x104>)
 801100c:	2201      	movs	r2, #1
 801100e:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 8011010:	4b2e      	ldr	r3, [pc, #184]	@ (80110cc <set_co2_samples+0x108>)
 8011012:	2200      	movs	r2, #0
 8011014:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	memset(buffer, '\0', sizeof(buffer));
 8011016:	f107 0310 	add.w	r3, r7, #16
 801101a:	2232      	movs	r2, #50	@ 0x32
 801101c:	2100      	movs	r1, #0
 801101e:	4618      	mov	r0, r3
 8011020:	f00d fee8 	bl	801edf4 <memset>
	receiveString(cli, buffer, sizeof(buffer));
 8011024:	f107 0310 	add.w	r3, r7, #16
 8011028:	2232      	movs	r2, #50	@ 0x32
 801102a:	4619      	mov	r1, r3
 801102c:	68f8      	ldr	r0, [r7, #12]
 801102e:	f7fe fb13 	bl	800f658 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8011032:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011034:	f7ef f934 	bl	80002a0 <strlen>
 8011038:	4603      	mov	r3, r0
 801103a:	b29a      	uxth	r2, r3
 801103c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011040:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011042:	481f      	ldr	r0, [pc, #124]	@ (80110c0 <set_co2_samples+0xfc>)
 8011044:	f7fb f964 	bl	800c310 <HAL_UART_Transmit>
			1000);

	if (buffer[0] != '\0') {
 8011048:	7c3b      	ldrb	r3, [r7, #16]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d022      	beq.n	8011094 <set_co2_samples+0xd0>

		val = atoi(buffer);
 801104e:	f107 0310 	add.w	r3, r7, #16
 8011052:	4618      	mov	r0, r3
 8011054:	f00c fc4c 	bl	801d8f0 <atoi>
 8011058:	4603      	mov	r3, r0
 801105a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

			if (val < 65535) {
 801105e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011062:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011066:	4293      	cmp	r3, r2
 8011068:	d004      	beq.n	8011074 <set_co2_samples+0xb0>
				_Flash_Packet.co2_samples = val;
 801106a:	4b19      	ldr	r3, [pc, #100]	@ (80110d0 <set_co2_samples+0x10c>)
 801106c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011070:	f8a3 225d 	strh.w	r2, [r3, #605]	@ 0x25d
			}

		cli_printf(cli, "Samples: %d", _Flash_Packet.co2_samples);
 8011074:	4b16      	ldr	r3, [pc, #88]	@ (80110d0 <set_co2_samples+0x10c>)
 8011076:	f8b3 325d 	ldrh.w	r3, [r3, #605]	@ 0x25d
 801107a:	b29b      	uxth	r3, r3
 801107c:	461a      	mov	r2, r3
 801107e:	4915      	ldr	r1, [pc, #84]	@ (80110d4 <set_co2_samples+0x110>)
 8011080:	68f8      	ldr	r0, [r7, #12]
 8011082:	f7fe faa7 	bl	800f5d4 <cli_printf>
		set_param_flags();
 8011086:	4b14      	ldr	r3, [pc, #80]	@ (80110d8 <set_co2_samples+0x114>)
 8011088:	2201      	movs	r2, #1
 801108a:	701a      	strb	r2, [r3, #0]
 801108c:	4b13      	ldr	r3, [pc, #76]	@ (80110dc <set_co2_samples+0x118>)
 801108e:	2201      	movs	r2, #1
 8011090:	701a      	strb	r2, [r3, #0]
 8011092:	e003      	b.n	801109c <set_co2_samples+0xd8>
	}
	else
	{
		cli_printf(cli, "No Value provided, operation aborted!");
 8011094:	4912      	ldr	r1, [pc, #72]	@ (80110e0 <set_co2_samples+0x11c>)
 8011096:	68f8      	ldr	r0, [r7, #12]
 8011098:	f7fe fa9c 	bl	800f5d4 <cli_printf>
	}

	flag_cli = 0;
 801109c:	4b0b      	ldr	r3, [pc, #44]	@ (80110cc <set_co2_samples+0x108>)
 801109e:	2200      	movs	r2, #0
 80110a0:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 80110a2:	4b09      	ldr	r3, [pc, #36]	@ (80110c8 <set_co2_samples+0x104>)
 80110a4:	2200      	movs	r2, #0
 80110a6:	701a      	strb	r2, [r3, #0]

}
 80110a8:	bf00      	nop
 80110aa:	3748      	adds	r7, #72	@ 0x48
 80110ac:	46bd      	mov	sp, r7
 80110ae:	bd80      	pop	{r7, pc}
 80110b0:	080224ac 	.word	0x080224ac
 80110b4:	08022ac4 	.word	0x08022ac4
 80110b8:	08022520 	.word	0x08022520
 80110bc:	08023258 	.word	0x08023258
 80110c0:	20001a74 	.word	0x20001a74
 80110c4:	0802329c 	.word	0x0802329c
 80110c8:	20001b3a 	.word	0x20001b3a
 80110cc:	20001b3b 	.word	0x20001b3b
 80110d0:	200012cc 	.word	0x200012cc
 80110d4:	080232bc 	.word	0x080232bc
 80110d8:	20001579 	.word	0x20001579
 80110dc:	2000157a 	.word	0x2000157a
 80110e0:	080232c8 	.word	0x080232c8

080110e4 <get_co2_samples>:

void get_co2_samples(EmbeddedCli *cli, char *args, void *context)
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b084      	sub	sp, #16
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	60f8      	str	r0, [r7, #12]
 80110ec:	60b9      	str	r1, [r7, #8]
 80110ee:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Co2 Samples: %d", _Flash_Packet.co2_samples);
 80110f0:	4b06      	ldr	r3, [pc, #24]	@ (801110c <get_co2_samples+0x28>)
 80110f2:	f8b3 325d 	ldrh.w	r3, [r3, #605]	@ 0x25d
 80110f6:	b29b      	uxth	r3, r3
 80110f8:	461a      	mov	r2, r3
 80110fa:	4905      	ldr	r1, [pc, #20]	@ (8011110 <get_co2_samples+0x2c>)
 80110fc:	68f8      	ldr	r0, [r7, #12]
 80110fe:	f7fe fa69 	bl	800f5d4 <cli_printf>
}
 8011102:	bf00      	nop
 8011104:	3710      	adds	r7, #16
 8011106:	46bd      	mov	sp, r7
 8011108:	bd80      	pop	{r7, pc}
 801110a:	bf00      	nop
 801110c:	200012cc 	.word	0x200012cc
 8011110:	080232f0 	.word	0x080232f0

08011114 <SystemRestart>:


void SystemRestart(EmbeddedCli *cli, char *args, void *context) {
 8011114:	b580      	push	{r7, lr}
 8011116:	b092      	sub	sp, #72	@ 0x48
 8011118:	af00      	add	r7, sp, #0
 801111a:	60f8      	str	r0, [r7, #12]
 801111c:	60b9      	str	r1, [r7, #8]
 801111e:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 8011120:	4b22      	ldr	r3, [pc, #136]	@ (80111ac <SystemRestart+0x98>)
 8011122:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Do you want to restart the device y/n?");
 8011124:	4922      	ldr	r1, [pc, #136]	@ (80111b0 <SystemRestart+0x9c>)
 8011126:	68f8      	ldr	r0, [r7, #12]
 8011128:	f7fe fa54 	bl	800f5d4 <cli_printf>

	cli_other = 1;
 801112c:	4b21      	ldr	r3, [pc, #132]	@ (80111b4 <SystemRestart+0xa0>)
 801112e:	2201      	movs	r2, #1
 8011130:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 8011132:	4b21      	ldr	r3, [pc, #132]	@ (80111b8 <SystemRestart+0xa4>)
 8011134:	2200      	movs	r2, #0
 8011136:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 8011138:	f107 0310 	add.w	r3, r7, #16
 801113c:	2232      	movs	r2, #50	@ 0x32
 801113e:	4619      	mov	r1, r3
 8011140:	68f8      	ldr	r0, [r7, #12]
 8011142:	f7fe fa89 	bl	800f658 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8011146:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011148:	f7ef f8aa 	bl	80002a0 <strlen>
 801114c:	4603      	mov	r3, r0
 801114e:	b29a      	uxth	r2, r3
 8011150:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011154:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011156:	4819      	ldr	r0, [pc, #100]	@ (80111bc <SystemRestart+0xa8>)
 8011158:	f7fb f8da 	bl	800c310 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "y")) {
 801115c:	f107 0310 	add.w	r3, r7, #16
 8011160:	2179      	movs	r1, #121	@ 0x79
 8011162:	4618      	mov	r0, r3
 8011164:	f00d fe4e 	bl	801ee04 <strchr>
 8011168:	4603      	mov	r3, r0
 801116a:	2b00      	cmp	r3, #0
 801116c:	d006      	beq.n	801117c <SystemRestart+0x68>
		cli_printf(cli, "Device is going to restart.");
 801116e:	4914      	ldr	r1, [pc, #80]	@ (80111c0 <SystemRestart+0xac>)
 8011170:	68f8      	ldr	r0, [r7, #12]
 8011172:	f7fe fa2f 	bl	800f5d4 <cli_printf>
		HAL_NVIC_SystemReset();
 8011176:	f7f3 fe46 	bl	8004e06 <HAL_NVIC_SystemReset>
 801117a:	e00c      	b.n	8011196 <SystemRestart+0x82>
	} else if (strstr(buffer, "n")) {
 801117c:	f107 0310 	add.w	r3, r7, #16
 8011180:	216e      	movs	r1, #110	@ 0x6e
 8011182:	4618      	mov	r0, r3
 8011184:	f00d fe3e 	bl	801ee04 <strchr>
 8011188:	4603      	mov	r3, r0
 801118a:	2b00      	cmp	r3, #0
 801118c:	d003      	beq.n	8011196 <SystemRestart+0x82>
		cli_printf(cli, "Device restart aborted.");
 801118e:	490d      	ldr	r1, [pc, #52]	@ (80111c4 <SystemRestart+0xb0>)
 8011190:	68f8      	ldr	r0, [r7, #12]
 8011192:	f7fe fa1f 	bl	800f5d4 <cli_printf>
	}

	flag_cli = 0;
 8011196:	4b08      	ldr	r3, [pc, #32]	@ (80111b8 <SystemRestart+0xa4>)
 8011198:	2200      	movs	r2, #0
 801119a:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 801119c:	4b05      	ldr	r3, [pc, #20]	@ (80111b4 <SystemRestart+0xa0>)
 801119e:	2200      	movs	r2, #0
 80111a0:	701a      	strb	r2, [r3, #0]
}
 80111a2:	bf00      	nop
 80111a4:	3748      	adds	r7, #72	@ 0x48
 80111a6:	46bd      	mov	sp, r7
 80111a8:	bd80      	pop	{r7, pc}
 80111aa:	bf00      	nop
 80111ac:	080224ac 	.word	0x080224ac
 80111b0:	08023300 	.word	0x08023300
 80111b4:	20001b3a 	.word	0x20001b3a
 80111b8:	20001b3b 	.word	0x20001b3b
 80111bc:	20001a74 	.word	0x20001a74
 80111c0:	08023328 	.word	0x08023328
 80111c4:	08023344 	.word	0x08023344

080111c8 <Co2Level>:

void Co2Level(EmbeddedCli *cli, char *args, void *context) {
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b084      	sub	sp, #16
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	60f8      	str	r0, [r7, #12]
 80111d0:	60b9      	str	r1, [r7, #8]
 80111d2:	607a      	str	r2, [r7, #4]

	if (!_RunTime_Packet.scd4x_i2c_error) {
 80111d4:	4b0a      	ldr	r3, [pc, #40]	@ (8011200 <Co2Level+0x38>)
 80111d6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d101      	bne.n	80111e2 <Co2Level+0x1a>


#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	get_scd30_measurement_();
 80111de:	f7f0 fa7f 	bl	80016e0 <get_scd30_measurement_>
#endif
	}
#ifdef use_scd40x
	cli_printf(cli, "Co2 Value: %d", _RunTime_Packet.co2);
#elif use_scd30
	cli_printf(cli, "Co2 Value: %.2f", _RunTime_Packet.co2);
 80111e2:	4b07      	ldr	r3, [pc, #28]	@ (8011200 <Co2Level+0x38>)
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	4618      	mov	r0, r3
 80111e8:	f7ef f9c6 	bl	8000578 <__aeabi_f2d>
 80111ec:	4602      	mov	r2, r0
 80111ee:	460b      	mov	r3, r1
 80111f0:	4904      	ldr	r1, [pc, #16]	@ (8011204 <Co2Level+0x3c>)
 80111f2:	68f8      	ldr	r0, [r7, #12]
 80111f4:	f7fe f9ee 	bl	800f5d4 <cli_printf>
#endif
}
 80111f8:	bf00      	nop
 80111fa:	3710      	adds	r7, #16
 80111fc:	46bd      	mov	sp, r7
 80111fe:	bd80      	pop	{r7, pc}
 8011200:	20001530 	.word	0x20001530
 8011204:	0802335c 	.word	0x0802335c

08011208 <TempLevel>:

void TempLevel(EmbeddedCli *cli, char *args, void *context) {
 8011208:	b580      	push	{r7, lr}
 801120a:	b084      	sub	sp, #16
 801120c:	af00      	add	r7, sp, #0
 801120e:	60f8      	str	r0, [r7, #12]
 8011210:	60b9      	str	r1, [r7, #8]
 8011212:	607a      	str	r2, [r7, #4]

	if (!_RunTime_Packet.scd4x_i2c_error) {
 8011214:	4b0a      	ldr	r3, [pc, #40]	@ (8011240 <TempLevel+0x38>)
 8011216:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801121a:	2b00      	cmp	r3, #0
 801121c:	d101      	bne.n	8011222 <TempLevel+0x1a>
#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	get_scd30_measurement_();
 801121e:	f7f0 fa5f 	bl	80016e0 <get_scd30_measurement_>


#ifdef use_scd40x
	cli_printf(cli, "Temperature Value: %dC ", _RunTime_Packet.temperature);
#elif use_scd30
	cli_printf(cli, "Temperature Value: %.2fC ", _RunTime_Packet.temperature);
 8011222:	4b07      	ldr	r3, [pc, #28]	@ (8011240 <TempLevel+0x38>)
 8011224:	685b      	ldr	r3, [r3, #4]
 8011226:	4618      	mov	r0, r3
 8011228:	f7ef f9a6 	bl	8000578 <__aeabi_f2d>
 801122c:	4602      	mov	r2, r0
 801122e:	460b      	mov	r3, r1
 8011230:	4904      	ldr	r1, [pc, #16]	@ (8011244 <TempLevel+0x3c>)
 8011232:	68f8      	ldr	r0, [r7, #12]
 8011234:	f7fe f9ce 	bl	800f5d4 <cli_printf>
#endif
}
 8011238:	bf00      	nop
 801123a:	3710      	adds	r7, #16
 801123c:	46bd      	mov	sp, r7
 801123e:	bd80      	pop	{r7, pc}
 8011240:	20001530 	.word	0x20001530
 8011244:	0802336c 	.word	0x0802336c

08011248 <HumidLevel>:

void HumidLevel(EmbeddedCli *cli, char *args, void *context) {
 8011248:	b580      	push	{r7, lr}
 801124a:	b084      	sub	sp, #16
 801124c:	af00      	add	r7, sp, #0
 801124e:	60f8      	str	r0, [r7, #12]
 8011250:	60b9      	str	r1, [r7, #8]
 8011252:	607a      	str	r2, [r7, #4]

	if (!_RunTime_Packet.scd4x_i2c_error) {
 8011254:	4b0a      	ldr	r3, [pc, #40]	@ (8011280 <HumidLevel+0x38>)
 8011256:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801125a:	2b00      	cmp	r3, #0
 801125c:	d101      	bne.n	8011262 <HumidLevel+0x1a>
#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	get_scd30_measurement_();
 801125e:	f7f0 fa3f 	bl	80016e0 <get_scd30_measurement_>


#ifdef use_scd40x
	cli_printf(cli, "Humidity Value: %d ", _RunTime_Packet.humidity);
#elif use_scd30
	cli_printf(cli, "Humidity Value: %.2f ", _RunTime_Packet.humidity);
 8011262:	4b07      	ldr	r3, [pc, #28]	@ (8011280 <HumidLevel+0x38>)
 8011264:	689b      	ldr	r3, [r3, #8]
 8011266:	4618      	mov	r0, r3
 8011268:	f7ef f986 	bl	8000578 <__aeabi_f2d>
 801126c:	4602      	mov	r2, r0
 801126e:	460b      	mov	r3, r1
 8011270:	4904      	ldr	r1, [pc, #16]	@ (8011284 <HumidLevel+0x3c>)
 8011272:	68f8      	ldr	r0, [r7, #12]
 8011274:	f7fe f9ae 	bl	800f5d4 <cli_printf>
#endif
}
 8011278:	bf00      	nop
 801127a:	3710      	adds	r7, #16
 801127c:	46bd      	mov	sp, r7
 801127e:	bd80      	pop	{r7, pc}
 8011280:	20001530 	.word	0x20001530
 8011284:	08023388 	.word	0x08023388

08011288 <MotionDetection>:

uint8_t prev_motion;

void MotionDetection(EmbeddedCli *cli, char *args, void *context) {
 8011288:	b580      	push	{r7, lr}
 801128a:	b084      	sub	sp, #16
 801128c:	af00      	add	r7, sp, #0
 801128e:	60f8      	str	r0, [r7, #12]
 8011290:	60b9      	str	r1, [r7, #8]
 8011292:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "For 10seconds system will poll here to detect motion.");
 8011294:	491f      	ldr	r1, [pc, #124]	@ (8011314 <MotionDetection+0x8c>)
 8011296:	68f8      	ldr	r0, [r7, #12]
 8011298:	f7fe f99c 	bl	800f5d4 <cli_printf>
	HAL_Delay(2000);
 801129c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80112a0:	f7f2 ffa2 	bl	80041e8 <HAL_Delay>
	prev_max_wait_time_motion = HAL_GetTick();
 80112a4:	f7f2 ff94 	bl	80041d0 <HAL_GetTick>
 80112a8:	4603      	mov	r3, r0
 80112aa:	4a1b      	ldr	r2, [pc, #108]	@ (8011318 <MotionDetection+0x90>)
 80112ac:	6013      	str	r3, [r2, #0]
	prev_motion = 0;
 80112ae:	4b1b      	ldr	r3, [pc, #108]	@ (801131c <MotionDetection+0x94>)
 80112b0:	2200      	movs	r2, #0
 80112b2:	701a      	strb	r2, [r3, #0]
	while (HAL_GetTick() - prev_max_wait_time_motion < max_wait_time_motion) {
 80112b4:	e01c      	b.n	80112f0 <MotionDetection+0x68>

		if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 80112b6:	2101      	movs	r1, #1
 80112b8:	4819      	ldr	r0, [pc, #100]	@ (8011320 <MotionDetection+0x98>)
 80112ba:	f7f4 ff55 	bl	8006168 <HAL_GPIO_ReadPin>
 80112be:	4603      	mov	r3, r0
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d003      	beq.n	80112cc <MotionDetection+0x44>
			_RunTime_Packet.motion_detection = 1;
 80112c4:	4b17      	ldr	r3, [pc, #92]	@ (8011324 <MotionDetection+0x9c>)
 80112c6:	2201      	movs	r2, #1
 80112c8:	731a      	strb	r2, [r3, #12]
 80112ca:	e002      	b.n	80112d2 <MotionDetection+0x4a>
			//cli_printf(cli,"PIR Motion: %d\r\n",_RunTime_Packet.motion_detection);
		} else {
			_RunTime_Packet.motion_detection = 0;
 80112cc:	4b15      	ldr	r3, [pc, #84]	@ (8011324 <MotionDetection+0x9c>)
 80112ce:	2200      	movs	r2, #0
 80112d0:	731a      	strb	r2, [r3, #12]

//		if(prev_motion != _RunTime_Packet.motion_detection )
//	         	{
//			prev_motion = _RunTime_Packet.motion_detection ;
		cli_printf(cli, "PIR Motion: %s\r\n",
				_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 80112d2:	4b14      	ldr	r3, [pc, #80]	@ (8011324 <MotionDetection+0x9c>)
 80112d4:	7b1b      	ldrb	r3, [r3, #12]
		cli_printf(cli, "PIR Motion: %s\r\n",
 80112d6:	2b01      	cmp	r3, #1
 80112d8:	d101      	bne.n	80112de <MotionDetection+0x56>
 80112da:	4b13      	ldr	r3, [pc, #76]	@ (8011328 <MotionDetection+0xa0>)
 80112dc:	e000      	b.n	80112e0 <MotionDetection+0x58>
 80112de:	4b13      	ldr	r3, [pc, #76]	@ (801132c <MotionDetection+0xa4>)
 80112e0:	461a      	mov	r2, r3
 80112e2:	4913      	ldr	r1, [pc, #76]	@ (8011330 <MotionDetection+0xa8>)
 80112e4:	68f8      	ldr	r0, [r7, #12]
 80112e6:	f7fe f975 	bl	800f5d4 <cli_printf>
//	         	}
		HAL_Delay(100);
 80112ea:	2064      	movs	r0, #100	@ 0x64
 80112ec:	f7f2 ff7c 	bl	80041e8 <HAL_Delay>
	while (HAL_GetTick() - prev_max_wait_time_motion < max_wait_time_motion) {
 80112f0:	f7f2 ff6e 	bl	80041d0 <HAL_GetTick>
 80112f4:	4602      	mov	r2, r0
 80112f6:	4b08      	ldr	r3, [pc, #32]	@ (8011318 <MotionDetection+0x90>)
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	1ad2      	subs	r2, r2, r3
 80112fc:	4b0d      	ldr	r3, [pc, #52]	@ (8011334 <MotionDetection+0xac>)
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	429a      	cmp	r2, r3
 8011302:	d3d8      	bcc.n	80112b6 <MotionDetection+0x2e>
//}
//

	}

	cli_printf(cli, "Session ended");
 8011304:	490c      	ldr	r1, [pc, #48]	@ (8011338 <MotionDetection+0xb0>)
 8011306:	68f8      	ldr	r0, [r7, #12]
 8011308:	f7fe f964 	bl	800f5d4 <cli_printf>

}
 801130c:	bf00      	nop
 801130e:	3710      	adds	r7, #16
 8011310:	46bd      	mov	sp, r7
 8011312:	bd80      	pop	{r7, pc}
 8011314:	080233a0 	.word	0x080233a0
 8011318:	20001b34 	.word	0x20001b34
 801131c:	20001b3c 	.word	0x20001b3c
 8011320:	40020000 	.word	0x40020000
 8011324:	20001530 	.word	0x20001530
 8011328:	080233d8 	.word	0x080233d8
 801132c:	080233e0 	.word	0x080233e0
 8011330:	080233e8 	.word	0x080233e8
 8011334:	20000020 	.word	0x20000020
 8011338:	080233fc 	.word	0x080233fc

0801133c <AirQuality>:

void AirQuality(EmbeddedCli *cli, char *args, void *context) {
 801133c:	b580      	push	{r7, lr}
 801133e:	b084      	sub	sp, #16
 8011340:	af00      	add	r7, sp, #0
 8011342:	60f8      	str	r0, [r7, #12]
 8011344:	60b9      	str	r1, [r7, #8]
 8011346:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "AirQuality Measured Values:");
 8011348:	4922      	ldr	r1, [pc, #136]	@ (80113d4 <AirQuality+0x98>)
 801134a:	68f8      	ldr	r0, [r7, #12]
 801134c:	f7fe f942 	bl	800f5d4 <cli_printf>
//	cli_printf(cli,"%0.2f pm2.5 ",_RunTime_Packet.pm2_5);
//	cli_printf(cli,"%0.2f pm4.0 ",_RunTime_Packet.pm4_0);
//	cli_printf(cli,"%0.2f pm10.0",_RunTime_Packet.pm10_0);
//	}

	if (_RunTime_Packet.usb_detection || _RunTime_Packet.usb_first_start) {
 8011350:	4b21      	ldr	r3, [pc, #132]	@ (80113d8 <AirQuality+0x9c>)
 8011352:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011356:	2b00      	cmp	r3, #0
 8011358:	d104      	bne.n	8011364 <AirQuality+0x28>
 801135a:	4b1f      	ldr	r3, [pc, #124]	@ (80113d8 <AirQuality+0x9c>)
 801135c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8011360:	2b00      	cmp	r3, #0
 8011362:	d004      	beq.n	801136e <AirQuality+0x32>
		cli_printf(cli, "Calculating, try again later");
 8011364:	491d      	ldr	r1, [pc, #116]	@ (80113dc <AirQuality+0xa0>)
 8011366:	68f8      	ldr	r0, [r7, #12]
 8011368:	f7fe f934 	bl	800f5d4 <cli_printf>
 801136c:	e02e      	b.n	80113cc <AirQuality+0x90>
	} else {

		get_sps30_measurement();
 801136e:	f7f0 fa79 	bl	8001864 <get_sps30_measurement>
		cli_printf(cli, "%0.2f pm1.0", _RunTime_Packet.pm1_0);
 8011372:	4b19      	ldr	r3, [pc, #100]	@ (80113d8 <AirQuality+0x9c>)
 8011374:	691b      	ldr	r3, [r3, #16]
 8011376:	4618      	mov	r0, r3
 8011378:	f7ef f8fe 	bl	8000578 <__aeabi_f2d>
 801137c:	4602      	mov	r2, r0
 801137e:	460b      	mov	r3, r1
 8011380:	4917      	ldr	r1, [pc, #92]	@ (80113e0 <AirQuality+0xa4>)
 8011382:	68f8      	ldr	r0, [r7, #12]
 8011384:	f7fe f926 	bl	800f5d4 <cli_printf>
		cli_printf(cli, "%0.2f pm2.5 ", _RunTime_Packet.pm2_5);
 8011388:	4b13      	ldr	r3, [pc, #76]	@ (80113d8 <AirQuality+0x9c>)
 801138a:	695b      	ldr	r3, [r3, #20]
 801138c:	4618      	mov	r0, r3
 801138e:	f7ef f8f3 	bl	8000578 <__aeabi_f2d>
 8011392:	4602      	mov	r2, r0
 8011394:	460b      	mov	r3, r1
 8011396:	4913      	ldr	r1, [pc, #76]	@ (80113e4 <AirQuality+0xa8>)
 8011398:	68f8      	ldr	r0, [r7, #12]
 801139a:	f7fe f91b 	bl	800f5d4 <cli_printf>
		cli_printf(cli, "%0.2f pm4.0 ", _RunTime_Packet.pm4_0);
 801139e:	4b0e      	ldr	r3, [pc, #56]	@ (80113d8 <AirQuality+0x9c>)
 80113a0:	699b      	ldr	r3, [r3, #24]
 80113a2:	4618      	mov	r0, r3
 80113a4:	f7ef f8e8 	bl	8000578 <__aeabi_f2d>
 80113a8:	4602      	mov	r2, r0
 80113aa:	460b      	mov	r3, r1
 80113ac:	490e      	ldr	r1, [pc, #56]	@ (80113e8 <AirQuality+0xac>)
 80113ae:	68f8      	ldr	r0, [r7, #12]
 80113b0:	f7fe f910 	bl	800f5d4 <cli_printf>
		cli_printf(cli, "%0.2f pm10.0", _RunTime_Packet.pm10_0);
 80113b4:	4b08      	ldr	r3, [pc, #32]	@ (80113d8 <AirQuality+0x9c>)
 80113b6:	69db      	ldr	r3, [r3, #28]
 80113b8:	4618      	mov	r0, r3
 80113ba:	f7ef f8dd 	bl	8000578 <__aeabi_f2d>
 80113be:	4602      	mov	r2, r0
 80113c0:	460b      	mov	r3, r1
 80113c2:	490a      	ldr	r1, [pc, #40]	@ (80113ec <AirQuality+0xb0>)
 80113c4:	68f8      	ldr	r0, [r7, #12]
 80113c6:	f7fe f905 	bl	800f5d4 <cli_printf>
	}

}
 80113ca:	bf00      	nop
 80113cc:	bf00      	nop
 80113ce:	3710      	adds	r7, #16
 80113d0:	46bd      	mov	sp, r7
 80113d2:	bd80      	pop	{r7, pc}
 80113d4:	0802340c 	.word	0x0802340c
 80113d8:	20001530 	.word	0x20001530
 80113dc:	08023428 	.word	0x08023428
 80113e0:	08023448 	.word	0x08023448
 80113e4:	08023454 	.word	0x08023454
 80113e8:	08023464 	.word	0x08023464
 80113ec:	08023474 	.word	0x08023474

080113f0 <BattVolt>:

void BattVolt(EmbeddedCli *cli, char *args, void *context) {
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b084      	sub	sp, #16
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	60f8      	str	r0, [r7, #12]
 80113f8:	60b9      	str	r1, [r7, #8]
 80113fa:	607a      	str	r2, [r7, #4]

	//float batteryVoltage;
	adc_Measure(&_RunTime_Packet.battery_voltage);
 80113fc:	4808      	ldr	r0, [pc, #32]	@ (8011420 <BattVolt+0x30>)
 80113fe:	f002 feeb 	bl	80141d8 <adc_Measure>
	cli_printf(cli, "Battery voltage: %0.2f", _RunTime_Packet.battery_voltage);
 8011402:	4b08      	ldr	r3, [pc, #32]	@ (8011424 <BattVolt+0x34>)
 8011404:	6a1b      	ldr	r3, [r3, #32]
 8011406:	4618      	mov	r0, r3
 8011408:	f7ef f8b6 	bl	8000578 <__aeabi_f2d>
 801140c:	4602      	mov	r2, r0
 801140e:	460b      	mov	r3, r1
 8011410:	4905      	ldr	r1, [pc, #20]	@ (8011428 <BattVolt+0x38>)
 8011412:	68f8      	ldr	r0, [r7, #12]
 8011414:	f7fe f8de 	bl	800f5d4 <cli_printf>

}
 8011418:	bf00      	nop
 801141a:	3710      	adds	r7, #16
 801141c:	46bd      	mov	sp, r7
 801141e:	bd80      	pop	{r7, pc}
 8011420:	20001550 	.word	0x20001550
 8011424:	20001530 	.word	0x20001530
 8011428:	08023484 	.word	0x08023484

0801142c <port>:

void port(EmbeddedCli *cli, char *args, void *context) {
 801142c:	b580      	push	{r7, lr}
 801142e:	b084      	sub	sp, #16
 8011430:	af00      	add	r7, sp, #0
 8011432:	60f8      	str	r0, [r7, #12]
 8011434:	60b9      	str	r1, [r7, #8]
 8011436:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Auxiliary port value measured(inactive)");
 8011438:	4903      	ldr	r1, [pc, #12]	@ (8011448 <port+0x1c>)
 801143a:	68f8      	ldr	r0, [r7, #12]
 801143c:	f7fe f8ca 	bl	800f5d4 <cli_printf>
}
 8011440:	bf00      	nop
 8011442:	3710      	adds	r7, #16
 8011444:	46bd      	mov	sp, r7
 8011446:	bd80      	pop	{r7, pc}
 8011448:	0802349c 	.word	0x0802349c

0801144c <showall>:

void showall(EmbeddedCli *cli, char *args, void *context) {
 801144c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801144e:	b0bb      	sub	sp, #236	@ 0xec
 8011450:	af06      	add	r7, sp, #24
 8011452:	60f8      	str	r0, [r7, #12]
 8011454:	60b9      	str	r1, [r7, #8]
 8011456:	607a      	str	r2, [r7, #4]
	char buff_pm[20];
	char buff_filewritten[50];

	if (_RunTime_Packet.usb_detection || _RunTime_Packet.usb_first_start) {
 8011458:	4bba      	ldr	r3, [pc, #744]	@ (8011744 <showall+0x2f8>)
 801145a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801145e:	2b00      	cmp	r3, #0
 8011460:	d104      	bne.n	801146c <showall+0x20>
 8011462:	4bb8      	ldr	r3, [pc, #736]	@ (8011744 <showall+0x2f8>)
 8011464:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8011468:	2b00      	cmp	r3, #0
 801146a:	d006      	beq.n	801147a <showall+0x2e>
		sprintf(buff_pm, "Calculating");
 801146c:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8011470:	49b5      	ldr	r1, [pc, #724]	@ (8011748 <showall+0x2fc>)
 8011472:	4618      	mov	r0, r3
 8011474:	f00d fb74 	bl	801eb60 <siprintf>
 8011478:	e00d      	b.n	8011496 <showall+0x4a>
	} else {

		get_sps30_measurement();
 801147a:	f7f0 f9f3 	bl	8001864 <get_sps30_measurement>
		sprintf(buff_pm, "%0.2f", _RunTime_Packet.pm2_5);
 801147e:	4bb1      	ldr	r3, [pc, #708]	@ (8011744 <showall+0x2f8>)
 8011480:	695b      	ldr	r3, [r3, #20]
 8011482:	4618      	mov	r0, r3
 8011484:	f7ef f878 	bl	8000578 <__aeabi_f2d>
 8011488:	4602      	mov	r2, r0
 801148a:	460b      	mov	r3, r1
 801148c:	f107 00bc 	add.w	r0, r7, #188	@ 0xbc
 8011490:	49ae      	ldr	r1, [pc, #696]	@ (801174c <showall+0x300>)
 8011492:	f00d fb65 	bl	801eb60 <siprintf>

	}
	adc_Measure(&_RunTime_Packet.battery_voltage);
 8011496:	48ae      	ldr	r0, [pc, #696]	@ (8011750 <showall+0x304>)
 8011498:	f002 fe9e 	bl	80141d8 <adc_Measure>
	if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 801149c:	2101      	movs	r1, #1
 801149e:	48ad      	ldr	r0, [pc, #692]	@ (8011754 <showall+0x308>)
 80114a0:	f7f4 fe62 	bl	8006168 <HAL_GPIO_ReadPin>
 80114a4:	4603      	mov	r3, r0
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d003      	beq.n	80114b2 <showall+0x66>
		_RunTime_Packet.motion_detection = 1;
 80114aa:	4ba6      	ldr	r3, [pc, #664]	@ (8011744 <showall+0x2f8>)
 80114ac:	2201      	movs	r2, #1
 80114ae:	731a      	strb	r2, [r3, #12]
 80114b0:	e002      	b.n	80114b8 <showall+0x6c>
	} else {
		_RunTime_Packet.motion_detection = 0;
 80114b2:	4ba4      	ldr	r3, [pc, #656]	@ (8011744 <showall+0x2f8>)
 80114b4:	2200      	movs	r2, #0
 80114b6:	731a      	strb	r2, [r3, #12]
	}

	char co2_Sensor_stat[30] = "ERROR";
 80114b8:	4aa7      	ldr	r2, [pc, #668]	@ (8011758 <showall+0x30c>)
 80114ba:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80114be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80114c2:	6018      	str	r0, [r3, #0]
 80114c4:	3304      	adds	r3, #4
 80114c6:	8019      	strh	r1, [r3, #0]
 80114c8:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 80114cc:	2200      	movs	r2, #0
 80114ce:	601a      	str	r2, [r3, #0]
 80114d0:	605a      	str	r2, [r3, #4]
 80114d2:	609a      	str	r2, [r3, #8]
 80114d4:	60da      	str	r2, [r3, #12]
 80114d6:	611a      	str	r2, [r3, #16]
 80114d8:	615a      	str	r2, [r3, #20]

	if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (0x61 << 1), 5, 1000)
 80114da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80114de:	2205      	movs	r2, #5
 80114e0:	21c2      	movs	r1, #194	@ 0xc2
 80114e2:	489e      	ldr	r0, [pc, #632]	@ (801175c <showall+0x310>)
 80114e4:	f7f5 fb2e 	bl	8006b44 <HAL_I2C_IsDeviceReady>
 80114e8:	4603      	mov	r3, r0
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d01c      	beq.n	8011528 <showall+0xdc>
			!= HAL_OK) {

		if (debug_scd_pm) {
 80114ee:	4b9c      	ldr	r3, [pc, #624]	@ (8011760 <showall+0x314>)
 80114f0:	781b      	ldrb	r3, [r3, #0]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d013      	beq.n	801151e <showall+0xd2>
			char buf_error[50];
			sprintf(buf_error, "error in scd30 i2c so not running it\n");
 80114f6:	f107 0314 	add.w	r3, r7, #20
 80114fa:	499a      	ldr	r1, [pc, #616]	@ (8011764 <showall+0x318>)
 80114fc:	4618      	mov	r0, r3
 80114fe:	f00d fb2f 	bl	801eb60 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) buf_error, strlen(buf_error),
 8011502:	f107 0314 	add.w	r3, r7, #20
 8011506:	4618      	mov	r0, r3
 8011508:	f7ee feca 	bl	80002a0 <strlen>
 801150c:	4603      	mov	r3, r0
 801150e:	b29a      	uxth	r2, r3
 8011510:	f107 0114 	add.w	r1, r7, #20
 8011514:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011518:	4893      	ldr	r0, [pc, #588]	@ (8011768 <showall+0x31c>)
 801151a:	f7fa fef9 	bl	800c310 <HAL_UART_Transmit>
					1000);
		}
		_RunTime_Packet.scd4x_i2c_error = 1;
 801151e:	4b89      	ldr	r3, [pc, #548]	@ (8011744 <showall+0x2f8>)
 8011520:	2201      	movs	r2, #1
 8011522:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8011526:	e003      	b.n	8011530 <showall+0xe4>
	}
	else
	{
		_RunTime_Packet.scd4x_i2c_error = 0;
 8011528:	4b86      	ldr	r3, [pc, #536]	@ (8011744 <showall+0x2f8>)
 801152a:	2200      	movs	r2, #0
 801152c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	}
	if (!_RunTime_Packet.scd4x_i2c_error) {
 8011530:	4b84      	ldr	r3, [pc, #528]	@ (8011744 <showall+0x2f8>)
 8011532:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011536:	2b00      	cmp	r3, #0
 8011538:	d10c      	bne.n	8011554 <showall+0x108>
#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	//get_scd30_measurement();

		get_scd30_measurement_();
 801153a:	f7f0 f8d1 	bl	80016e0 <get_scd30_measurement_>
#endif
		strcpy(co2_Sensor_stat,"ACTIVE");
 801153e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011542:	4a8a      	ldr	r2, [pc, #552]	@ (801176c <showall+0x320>)
 8011544:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011548:	6018      	str	r0, [r3, #0]
 801154a:	3304      	adds	r3, #4
 801154c:	8019      	strh	r1, [r3, #0]
 801154e:	3302      	adds	r3, #2
 8011550:	0c0a      	lsrs	r2, r1, #16
 8011552:	701a      	strb	r2, [r3, #0]
	}


	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 8011554:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8011558:	2200      	movs	r2, #0
 801155a:	4619      	mov	r1, r3
 801155c:	4884      	ldr	r0, [pc, #528]	@ (8011770 <showall+0x324>)
 801155e:	f7f8 fb56 	bl	8009c0e <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 8011562:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8011566:	2200      	movs	r2, #0
 8011568:	4619      	mov	r1, r3
 801156a:	4881      	ldr	r0, [pc, #516]	@ (8011770 <showall+0x324>)
 801156c:	f7f8 fa6d 	bl	8009a4a <HAL_RTC_GetTime>

	if (datawritten == 0) {
 8011570:	4b80      	ldr	r3, [pc, #512]	@ (8011774 <showall+0x328>)
 8011572:	781b      	ldrb	r3, [r3, #0]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d106      	bne.n	8011586 <showall+0x13a>

		sprintf(buff_filewritten, "Data not written yet");
 8011578:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 801157c:	497e      	ldr	r1, [pc, #504]	@ (8011778 <showall+0x32c>)
 801157e:	4618      	mov	r0, r3
 8011580:	f00d faee 	bl	801eb60 <siprintf>
 8011584:	e014      	b.n	80115b0 <showall+0x164>

	} else if (datawritten == 1) {
 8011586:	4b7b      	ldr	r3, [pc, #492]	@ (8011774 <showall+0x328>)
 8011588:	781b      	ldrb	r3, [r3, #0]
 801158a:	2b01      	cmp	r3, #1
 801158c:	d106      	bne.n	801159c <showall+0x150>
		sprintf(buff_filewritten, " **SUCCESSFUL** ");
 801158e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8011592:	497a      	ldr	r1, [pc, #488]	@ (801177c <showall+0x330>)
 8011594:	4618      	mov	r0, r3
 8011596:	f00d fae3 	bl	801eb60 <siprintf>
 801159a:	e009      	b.n	80115b0 <showall+0x164>
	} else if (datawritten == 2) {
 801159c:	4b75      	ldr	r3, [pc, #468]	@ (8011774 <showall+0x328>)
 801159e:	781b      	ldrb	r3, [r3, #0]
 80115a0:	2b02      	cmp	r3, #2
 80115a2:	d105      	bne.n	80115b0 <showall+0x164>

		sprintf(buff_filewritten, " **FAILED** ");
 80115a4:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80115a8:	4975      	ldr	r1, [pc, #468]	@ (8011780 <showall+0x334>)
 80115aa:	4618      	mov	r0, r3
 80115ac:	f00d fad8 	bl	801eb60 <siprintf>
	}
	uint16_t calib_val = 0;
 80115b0:	2300      	movs	r3, #0
 80115b2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	uint16_t calib_stat = 0;
 80115b6:	2300      	movs	r3, #0
 80115b8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	uint16_t temp_offset = 0;
 80115bc:	2300      	movs	r3, #0
 80115be:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
	uint16_t altitude_comp = 0;
 80115c2:	2300      	movs	r3, #0
 80115c4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
	if (!_RunTime_Packet.scd4x_i2c_error) {
 80115c8:	4b5e      	ldr	r3, [pc, #376]	@ (8011744 <showall+0x2f8>)
 80115ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d113      	bne.n	80115fa <showall+0x1ae>
	scd30_get_force_recalibration_status(&calib_val);
 80115d2:	f107 034e 	add.w	r3, r7, #78	@ 0x4e
 80115d6:	4618      	mov	r0, r3
 80115d8:	f003 f928 	bl	801482c <scd30_get_force_recalibration_status>
	scd30_get_auto_calibration_status(&calib_stat);
 80115dc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80115e0:	4618      	mov	r0, r3
 80115e2:	f003 f895 	bl	8014710 <scd30_get_auto_calibration_status>
	scd30_get_altitude_compensation(&altitude_comp);
 80115e6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80115ea:	4618      	mov	r0, r3
 80115ec:	f003 f9fc 	bl	80149e8 <scd30_get_altitude_compensation>
	scd30_get_temperature_offset(&temp_offset);
 80115f0:	f107 034a 	add.w	r3, r7, #74	@ 0x4a
 80115f4:	4618      	mov	r0, r3
 80115f6:	f003 f9a7 	bl	8014948 <scd30_get_temperature_offset>
	}


	cli_printf(cli, "");
 80115fa:	4962      	ldr	r1, [pc, #392]	@ (8011784 <showall+0x338>)
 80115fc:	68f8      	ldr	r0, [r7, #12]
 80115fe:	f7fd ffe9 	bl	800f5d4 <cli_printf>
	cli_printf(cli, "");
 8011602:	4960      	ldr	r1, [pc, #384]	@ (8011784 <showall+0x338>)
 8011604:	68f8      	ldr	r0, [r7, #12]
 8011606:	f7fd ffe5 	bl	800f5d4 <cli_printf>
	cli_printf(cli, "");
 801160a:	495e      	ldr	r1, [pc, #376]	@ (8011784 <showall+0x338>)
 801160c:	68f8      	ldr	r0, [r7, #12]
 801160e:	f7fd ffe1 	bl	800f5d4 <cli_printf>

	cli_printf(cli, " *devEUI           | %s                       ",
 8011612:	f7f0 ff59 	bl	80024c8 <ver_GetUid>
 8011616:	4603      	mov	r3, r0
 8011618:	461a      	mov	r2, r3
 801161a:	495b      	ldr	r1, [pc, #364]	@ (8011788 <showall+0x33c>)
 801161c:	68f8      	ldr	r0, [r7, #12]
 801161e:	f7fd ffd9 	bl	800f5d4 <cli_printf>
			ver_GetUid());
	cli_printf(cli, " *Id               | %s                       ",
 8011622:	4a5a      	ldr	r2, [pc, #360]	@ (801178c <showall+0x340>)
 8011624:	495a      	ldr	r1, [pc, #360]	@ (8011790 <showall+0x344>)
 8011626:	68f8      	ldr	r0, [r7, #12]
 8011628:	f7fd ffd4 	bl	800f5d4 <cli_printf>
			_Flash_Packet.id);
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
			gTime.Hours, gTime.Minutes, gTime.Seconds);
 801162c:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
 8011630:	461a      	mov	r2, r3
			gTime.Hours, gTime.Minutes, gTime.Seconds);
 8011632:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
 8011636:	4619      	mov	r1, r3
			gTime.Hours, gTime.Minutes, gTime.Seconds);
 8011638:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
 801163c:	9300      	str	r3, [sp, #0]
 801163e:	460b      	mov	r3, r1
 8011640:	4954      	ldr	r1, [pc, #336]	@ (8011794 <showall+0x348>)
 8011642:	68f8      	ldr	r0, [r7, #12]
 8011644:	f7fd ffc6 	bl	800f5d4 <cli_printf>
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
			gDate.Date, gDate.Month, gDate.Year);
 8011648:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
 801164c:	461a      	mov	r2, r3
			gDate.Date, gDate.Month, gDate.Year);
 801164e:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
 8011652:	4619      	mov	r1, r3
			gDate.Date, gDate.Month, gDate.Year);
 8011654:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
 8011658:	9300      	str	r3, [sp, #0]
 801165a:	460b      	mov	r3, r1
 801165c:	494e      	ldr	r1, [pc, #312]	@ (8011798 <showall+0x34c>)
 801165e:	68f8      	ldr	r0, [r7, #12]
 8011660:	f7fd ffb8 	bl	800f5d4 <cli_printf>
	cli_printf(cli, " *Location         | %s                       ",
 8011664:	4a4d      	ldr	r2, [pc, #308]	@ (801179c <showall+0x350>)
 8011666:	494e      	ldr	r1, [pc, #312]	@ (80117a0 <showall+0x354>)
 8011668:	68f8      	ldr	r0, [r7, #12]
 801166a:	f7fd ffb3 	bl	800f5d4 <cli_printf>
			_Flash_Packet.location);
	cli_printf(cli, " *Filename         | %s                       ",
 801166e:	4a4d      	ldr	r2, [pc, #308]	@ (80117a4 <showall+0x358>)
 8011670:	494d      	ldr	r1, [pc, #308]	@ (80117a8 <showall+0x35c>)
 8011672:	68f8      	ldr	r0, [r7, #12]
 8011674:	f7fd ffae 	bl	800f5d4 <cli_printf>
			_Flash_Packet.filename_ver_date);
	cli_printf(cli, " *Fileformat       | %s                       ",
 8011678:	4a4c      	ldr	r2, [pc, #304]	@ (80117ac <showall+0x360>)
 801167a:	494d      	ldr	r1, [pc, #308]	@ (80117b0 <showall+0x364>)
 801167c:	68f8      	ldr	r0, [r7, #12]
 801167e:	f7fd ffa9 	bl	800f5d4 <cli_printf>
			_Flash_Packet.File_Format);
	cli_printf(cli, " *Group            | %s                       ",
 8011682:	4a4c      	ldr	r2, [pc, #304]	@ (80117b4 <showall+0x368>)
 8011684:	494c      	ldr	r1, [pc, #304]	@ (80117b8 <showall+0x36c>)
 8011686:	68f8      	ldr	r0, [r7, #12]
 8011688:	f7fd ffa4 	bl	800f5d4 <cli_printf>
			_Flash_Packet.group);
	cli_printf(cli, " *Interval         | %dmin                       ",
 801168c:	4b4b      	ldr	r3, [pc, #300]	@ (80117bc <showall+0x370>)
 801168e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8011692:	461a      	mov	r2, r3
 8011694:	494a      	ldr	r1, [pc, #296]	@ (80117c0 <showall+0x374>)
 8011696:	68f8      	ldr	r0, [r7, #12]
 8011698:	f7fd ff9c 	bl	800f5d4 <cli_printf>
			_Flash_Packet.Time_Interval);
	cli_printf(cli, " *Co2 sensor status| %s                       ",
 801169c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80116a0:	461a      	mov	r2, r3
 80116a2:	4948      	ldr	r1, [pc, #288]	@ (80117c4 <showall+0x378>)
 80116a4:	68f8      	ldr	r0, [r7, #12]
 80116a6:	f7fd ff95 	bl	800f5d4 <cli_printf>
			co2_Sensor_stat);
	cli_printf(cli, " *Calibration Value| %d                       ",
 80116aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80116ae:	461a      	mov	r2, r3
 80116b0:	4945      	ldr	r1, [pc, #276]	@ (80117c8 <showall+0x37c>)
 80116b2:	68f8      	ldr	r0, [r7, #12]
 80116b4:	f7fd ff8e 	bl	800f5d4 <cli_printf>
			calib_val);
	cli_printf(cli, " *Auto calibration | %d                       ",
 80116b8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80116bc:	461a      	mov	r2, r3
 80116be:	4943      	ldr	r1, [pc, #268]	@ (80117cc <showall+0x380>)
 80116c0:	68f8      	ldr	r0, [r7, #12]
 80116c2:	f7fd ff87 	bl	800f5d4 <cli_printf>
			calib_stat);
	cli_printf(cli, " *Temp offset      | %d                       ",
 80116c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80116ca:	461a      	mov	r2, r3
 80116cc:	4940      	ldr	r1, [pc, #256]	@ (80117d0 <showall+0x384>)
 80116ce:	68f8      	ldr	r0, [r7, #12]
 80116d0:	f7fd ff80 	bl	800f5d4 <cli_printf>
			temp_offset);
	cli_printf(cli, " *Altitude Comp    | %d                       ",
 80116d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80116d8:	461a      	mov	r2, r3
 80116da:	493e      	ldr	r1, [pc, #248]	@ (80117d4 <showall+0x388>)
 80116dc:	68f8      	ldr	r0, [r7, #12]
 80116de:	f7fd ff79 	bl	800f5d4 <cli_printf>
			altitude_comp);
	cli_printf(cli, " *Co2 Samples      | %d                       ",
			_Flash_Packet.co2_samples);
 80116e2:	4b36      	ldr	r3, [pc, #216]	@ (80117bc <showall+0x370>)
 80116e4:	f8b3 325d 	ldrh.w	r3, [r3, #605]	@ 0x25d
 80116e8:	b29b      	uxth	r3, r3
	cli_printf(cli, " *Co2 Samples      | %d                       ",
 80116ea:	461a      	mov	r2, r3
 80116ec:	493a      	ldr	r1, [pc, #232]	@ (80117d8 <showall+0x38c>)
 80116ee:	68f8      	ldr	r0, [r7, #12]
 80116f0:	f7fd ff70 	bl	800f5d4 <cli_printf>
			_RunTime_Packet.temperature);
	cli_printf(cli, " *Humidity         | %d%%                     ",
			_RunTime_Packet.humidity);
#elif use_scd30
	cli_printf(cli, " *Co2              | %.2f                       ",
			_RunTime_Packet.co2);
 80116f4:	4b13      	ldr	r3, [pc, #76]	@ (8011744 <showall+0x2f8>)
 80116f6:	681b      	ldr	r3, [r3, #0]
	cli_printf(cli, " *Co2              | %.2f                       ",
 80116f8:	4618      	mov	r0, r3
 80116fa:	f7ee ff3d 	bl	8000578 <__aeabi_f2d>
 80116fe:	4602      	mov	r2, r0
 8011700:	460b      	mov	r3, r1
 8011702:	4936      	ldr	r1, [pc, #216]	@ (80117dc <showall+0x390>)
 8011704:	68f8      	ldr	r0, [r7, #12]
 8011706:	f7fd ff65 	bl	800f5d4 <cli_printf>
	cli_printf(cli, " *Temperature      | %.2fC                      ",
			_RunTime_Packet.temperature);
 801170a:	4b0e      	ldr	r3, [pc, #56]	@ (8011744 <showall+0x2f8>)
 801170c:	685b      	ldr	r3, [r3, #4]
	cli_printf(cli, " *Temperature      | %.2fC                      ",
 801170e:	4618      	mov	r0, r3
 8011710:	f7ee ff32 	bl	8000578 <__aeabi_f2d>
 8011714:	4602      	mov	r2, r0
 8011716:	460b      	mov	r3, r1
 8011718:	4931      	ldr	r1, [pc, #196]	@ (80117e0 <showall+0x394>)
 801171a:	68f8      	ldr	r0, [r7, #12]
 801171c:	f7fd ff5a 	bl	800f5d4 <cli_printf>
	cli_printf(cli, " *Humidity         | %.2f%%                     ",
			_RunTime_Packet.humidity);
 8011720:	4b08      	ldr	r3, [pc, #32]	@ (8011744 <showall+0x2f8>)
 8011722:	689b      	ldr	r3, [r3, #8]
	cli_printf(cli, " *Humidity         | %.2f%%                     ",
 8011724:	4618      	mov	r0, r3
 8011726:	f7ee ff27 	bl	8000578 <__aeabi_f2d>
 801172a:	4602      	mov	r2, r0
 801172c:	460b      	mov	r3, r1
 801172e:	492d      	ldr	r1, [pc, #180]	@ (80117e4 <showall+0x398>)
 8011730:	68f8      	ldr	r0, [r7, #12]
 8011732:	f7fd ff4f 	bl	800f5d4 <cli_printf>
#endif

	cli_printf(cli, " *PIR              | %s                       ",
			_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 8011736:	4b03      	ldr	r3, [pc, #12]	@ (8011744 <showall+0x2f8>)
 8011738:	7b1b      	ldrb	r3, [r3, #12]
	cli_printf(cli, " *PIR              | %s                       ",
 801173a:	2b01      	cmp	r3, #1
 801173c:	d156      	bne.n	80117ec <showall+0x3a0>
 801173e:	4b2a      	ldr	r3, [pc, #168]	@ (80117e8 <showall+0x39c>)
 8011740:	e055      	b.n	80117ee <showall+0x3a2>
 8011742:	bf00      	nop
 8011744:	20001530 	.word	0x20001530
 8011748:	080234c4 	.word	0x080234c4
 801174c:	080234d0 	.word	0x080234d0
 8011750:	20001550 	.word	0x20001550
 8011754:	40020000 	.word	0x40020000
 8011758:	08023a0c 	.word	0x08023a0c
 801175c:	20001838 	.word	0x20001838
 8011760:	20001578 	.word	0x20001578
 8011764:	080234d8 	.word	0x080234d8
 8011768:	20001a74 	.word	0x20001a74
 801176c:	08023500 	.word	0x08023500
 8011770:	20001898 	.word	0x20001898
 8011774:	2000232c 	.word	0x2000232c
 8011778:	08023508 	.word	0x08023508
 801177c:	08023520 	.word	0x08023520
 8011780:	08023534 	.word	0x08023534
 8011784:	08023030 	.word	0x08023030
 8011788:	08023544 	.word	0x08023544
 801178c:	20001399 	.word	0x20001399
 8011790:	08023574 	.word	0x08023574
 8011794:	080235a4 	.word	0x080235a4
 8011798:	080235d4 	.word	0x080235d4
 801179c:	200013cb 	.word	0x200013cb
 80117a0:	08023604 	.word	0x08023604
 80117a4:	200014c5 	.word	0x200014c5
 80117a8:	08023634 	.word	0x08023634
 80117ac:	20001330 	.word	0x20001330
 80117b0:	08023664 	.word	0x08023664
 80117b4:	2000142f 	.word	0x2000142f
 80117b8:	08023694 	.word	0x08023694
 80117bc:	200012cc 	.word	0x200012cc
 80117c0:	080236c4 	.word	0x080236c4
 80117c4:	080236f8 	.word	0x080236f8
 80117c8:	08023728 	.word	0x08023728
 80117cc:	08023758 	.word	0x08023758
 80117d0:	08023788 	.word	0x08023788
 80117d4:	080237b8 	.word	0x080237b8
 80117d8:	080237e8 	.word	0x080237e8
 80117dc:	08023818 	.word	0x08023818
 80117e0:	0802384c 	.word	0x0802384c
 80117e4:	08023880 	.word	0x08023880
 80117e8:	080233d8 	.word	0x080233d8
 80117ec:	4b28      	ldr	r3, [pc, #160]	@ (8011890 <showall+0x444>)
 80117ee:	461a      	mov	r2, r3
 80117f0:	4928      	ldr	r1, [pc, #160]	@ (8011894 <showall+0x448>)
 80117f2:	68f8      	ldr	r0, [r7, #12]
 80117f4:	f7fd feee 	bl	800f5d4 <cli_printf>
	cli_printf(cli, " *Pm2.5            | %s                       ", buff_pm);
 80117f8:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80117fc:	461a      	mov	r2, r3
 80117fe:	4926      	ldr	r1, [pc, #152]	@ (8011898 <showall+0x44c>)
 8011800:	68f8      	ldr	r0, [r7, #12]
 8011802:	f7fd fee7 	bl	800f5d4 <cli_printf>
	cli_printf(cli, " *Port             | Inactive                 ");
 8011806:	4925      	ldr	r1, [pc, #148]	@ (801189c <showall+0x450>)
 8011808:	68f8      	ldr	r0, [r7, #12]
 801180a:	f7fd fee3 	bl	800f5d4 <cli_printf>
	cli_printf(cli, " *Battery          | %0.2f                    ",
			_RunTime_Packet.battery_voltage);
 801180e:	4b24      	ldr	r3, [pc, #144]	@ (80118a0 <showall+0x454>)
 8011810:	6a1b      	ldr	r3, [r3, #32]
	cli_printf(cli, " *Battery          | %0.2f                    ",
 8011812:	4618      	mov	r0, r3
 8011814:	f7ee feb0 	bl	8000578 <__aeabi_f2d>
 8011818:	4602      	mov	r2, r0
 801181a:	460b      	mov	r3, r1
 801181c:	4921      	ldr	r1, [pc, #132]	@ (80118a4 <showall+0x458>)
 801181e:	68f8      	ldr	r0, [r7, #12]
 8011820:	f7fd fed8 	bl	800f5d4 <cli_printf>
	cli_printf(cli, " *Last_Packet      | [Date:%02d.%02d.%02d] [Time: %02d:%02d:%02d] [Filename: %s] [Packet Status: %s]",
 8011824:	4b20      	ldr	r3, [pc, #128]	@ (80118a8 <showall+0x45c>)
 8011826:	781b      	ldrb	r3, [r3, #0]
 8011828:	461d      	mov	r5, r3
 801182a:	4b20      	ldr	r3, [pc, #128]	@ (80118ac <showall+0x460>)
 801182c:	781b      	ldrb	r3, [r3, #0]
 801182e:	461e      	mov	r6, r3
 8011830:	4b1f      	ldr	r3, [pc, #124]	@ (80118b0 <showall+0x464>)
 8011832:	781b      	ldrb	r3, [r3, #0]
 8011834:	461a      	mov	r2, r3
 8011836:	4b1f      	ldr	r3, [pc, #124]	@ (80118b4 <showall+0x468>)
 8011838:	781b      	ldrb	r3, [r3, #0]
 801183a:	4619      	mov	r1, r3
 801183c:	4b1e      	ldr	r3, [pc, #120]	@ (80118b8 <showall+0x46c>)
 801183e:	781b      	ldrb	r3, [r3, #0]
 8011840:	4618      	mov	r0, r3
 8011842:	4b1e      	ldr	r3, [pc, #120]	@ (80118bc <showall+0x470>)
 8011844:	781b      	ldrb	r3, [r3, #0]
 8011846:	461c      	mov	r4, r3
 8011848:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 801184c:	9305      	str	r3, [sp, #20]
 801184e:	4b1c      	ldr	r3, [pc, #112]	@ (80118c0 <showall+0x474>)
 8011850:	9304      	str	r3, [sp, #16]
 8011852:	9403      	str	r4, [sp, #12]
 8011854:	9002      	str	r0, [sp, #8]
 8011856:	9101      	str	r1, [sp, #4]
 8011858:	9200      	str	r2, [sp, #0]
 801185a:	4633      	mov	r3, r6
 801185c:	462a      	mov	r2, r5
 801185e:	4919      	ldr	r1, [pc, #100]	@ (80118c4 <showall+0x478>)
 8011860:	68f8      	ldr	r0, [r7, #12]
 8011862:	f7fd feb7 	bl	800f5d4 <cli_printf>
			fileWrite_day, fileWrite_month, fileWrite_year, fileWrite_hour,
			fileWrite_min, fileWrite_sec, _Flash_Packet.filename_ver_date,
			buff_filewritten);
	cli_printf(cli, " *Scheduled_Packet | [Time: %s]               ",
 8011866:	4a18      	ldr	r2, [pc, #96]	@ (80118c8 <showall+0x47c>)
 8011868:	4918      	ldr	r1, [pc, #96]	@ (80118cc <showall+0x480>)
 801186a:	68f8      	ldr	r0, [r7, #12]
 801186c:	f7fd feb2 	bl	800f5d4 <cli_printf>
			scheduled_packet);

	cli_printf(cli, "");
 8011870:	4917      	ldr	r1, [pc, #92]	@ (80118d0 <showall+0x484>)
 8011872:	68f8      	ldr	r0, [r7, #12]
 8011874:	f7fd feae 	bl	800f5d4 <cli_printf>
	cli_printf(cli, "");
 8011878:	4915      	ldr	r1, [pc, #84]	@ (80118d0 <showall+0x484>)
 801187a:	68f8      	ldr	r0, [r7, #12]
 801187c:	f7fd feaa 	bl	800f5d4 <cli_printf>
	cli_printf(cli, "");
 8011880:	4913      	ldr	r1, [pc, #76]	@ (80118d0 <showall+0x484>)
 8011882:	68f8      	ldr	r0, [r7, #12]
 8011884:	f7fd fea6 	bl	800f5d4 <cli_printf>
}
 8011888:	bf00      	nop
 801188a:	37d4      	adds	r7, #212	@ 0xd4
 801188c:	46bd      	mov	sp, r7
 801188e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011890:	080233e0 	.word	0x080233e0
 8011894:	080238b4 	.word	0x080238b4
 8011898:	080238e4 	.word	0x080238e4
 801189c:	08023914 	.word	0x08023914
 80118a0:	20001530 	.word	0x20001530
 80118a4:	08023944 	.word	0x08023944
 80118a8:	20002326 	.word	0x20002326
 80118ac:	20002327 	.word	0x20002327
 80118b0:	20002328 	.word	0x20002328
 80118b4:	20002329 	.word	0x20002329
 80118b8:	2000232a 	.word	0x2000232a
 80118bc:	2000232b 	.word	0x2000232b
 80118c0:	200014c5 	.word	0x200014c5
 80118c4:	08023974 	.word	0x08023974
 80118c8:	2000002c 	.word	0x2000002c
 80118cc:	080239dc 	.word	0x080239dc
 80118d0:	08023030 	.word	0x08023030

080118d4 <systemversion>:

void systemversion(EmbeddedCli *cli, char *args, void *context) {
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b084      	sub	sp, #16
 80118d8:	af00      	add	r7, sp, #0
 80118da:	60f8      	str	r0, [r7, #12]
 80118dc:	60b9      	str	r1, [r7, #8]
 80118de:	607a      	str	r2, [r7, #4]


	cli_printf(cli, "");
 80118e0:	4911      	ldr	r1, [pc, #68]	@ (8011928 <systemversion+0x54>)
 80118e2:	68f8      	ldr	r0, [r7, #12]
 80118e4:	f7fd fe76 	bl	800f5d4 <cli_printf>
		cli_printf(cli, "");
 80118e8:	490f      	ldr	r1, [pc, #60]	@ (8011928 <systemversion+0x54>)
 80118ea:	68f8      	ldr	r0, [r7, #12]
 80118ec:	f7fd fe72 	bl	800f5d4 <cli_printf>
		cli_printf(cli, "");
 80118f0:	490d      	ldr	r1, [pc, #52]	@ (8011928 <systemversion+0x54>)
 80118f2:	68f8      	ldr	r0, [r7, #12]
 80118f4:	f7fd fe6e 	bl	800f5d4 <cli_printf>

		cli_printf(cli, " *Hardware | TF410 Version 1.3                       ");
 80118f8:	490c      	ldr	r1, [pc, #48]	@ (801192c <systemversion+0x58>)
 80118fa:	68f8      	ldr	r0, [r7, #12]
 80118fc:	f7fd fe6a 	bl	800f5d4 <cli_printf>
		cli_printf(cli, " *Software | TF410 Version 1.5                       ");
 8011900:	490b      	ldr	r1, [pc, #44]	@ (8011930 <systemversion+0x5c>)
 8011902:	68f8      	ldr	r0, [r7, #12]
 8011904:	f7fd fe66 	bl	800f5d4 <cli_printf>

		cli_printf(cli, "");
 8011908:	4907      	ldr	r1, [pc, #28]	@ (8011928 <systemversion+0x54>)
 801190a:	68f8      	ldr	r0, [r7, #12]
 801190c:	f7fd fe62 	bl	800f5d4 <cli_printf>
			cli_printf(cli, "");
 8011910:	4905      	ldr	r1, [pc, #20]	@ (8011928 <systemversion+0x54>)
 8011912:	68f8      	ldr	r0, [r7, #12]
 8011914:	f7fd fe5e 	bl	800f5d4 <cli_printf>
			cli_printf(cli, "");
 8011918:	4903      	ldr	r1, [pc, #12]	@ (8011928 <systemversion+0x54>)
 801191a:	68f8      	ldr	r0, [r7, #12]
 801191c:	f7fd fe5a 	bl	800f5d4 <cli_printf>

}
 8011920:	bf00      	nop
 8011922:	3710      	adds	r7, #16
 8011924:	46bd      	mov	sp, r7
 8011926:	bd80      	pop	{r7, pc}
 8011928:	08023030 	.word	0x08023030
 801192c:	08023a2c 	.word	0x08023a2c
 8011930:	08023a64 	.word	0x08023a64

08011934 <aboutDev>:

void aboutDev(EmbeddedCli *cli, char *args, void *context)
{
 8011934:	b580      	push	{r7, lr}
 8011936:	b084      	sub	sp, #16
 8011938:	af00      	add	r7, sp, #0
 801193a:	60f8      	str	r0, [r7, #12]
 801193c:	60b9      	str	r1, [r7, #8]
 801193e:	607a      	str	r2, [r7, #4]
	  cli_printf(cli, "");
 8011940:	4917      	ldr	r1, [pc, #92]	@ (80119a0 <aboutDev+0x6c>)
 8011942:	68f8      	ldr	r0, [r7, #12]
 8011944:	f7fd fe46 	bl	800f5d4 <cli_printf>
	cli_printf(cli, "");
 8011948:	4915      	ldr	r1, [pc, #84]	@ (80119a0 <aboutDev+0x6c>)
 801194a:	68f8      	ldr	r0, [r7, #12]
 801194c:	f7fd fe42 	bl	800f5d4 <cli_printf>
	cli_printf(cli, "This product is powered by BuildUp! "); //TM 0x99
 8011950:	4914      	ldr	r1, [pc, #80]	@ (80119a4 <aboutDev+0x70>)
 8011952:	68f8      	ldr	r0, [r7, #12]
 8011954:	f7fd fe3e 	bl	800f5d4 <cli_printf>
	cli_printf(cli, "");
 8011958:	4911      	ldr	r1, [pc, #68]	@ (80119a0 <aboutDev+0x6c>)
 801195a:	68f8      	ldr	r0, [r7, #12]
 801195c:	f7fd fe3a 	bl	800f5d4 <cli_printf>
	cli_printf(cli, "Thingsfactory Inc. All rights reserved "); //copyright 0xA9
 8011960:	4911      	ldr	r1, [pc, #68]	@ (80119a8 <aboutDev+0x74>)
 8011962:	68f8      	ldr	r0, [r7, #12]
 8011964:	f7fd fe36 	bl	800f5d4 <cli_printf>
	cli_printf(cli, "");
 8011968:	490d      	ldr	r1, [pc, #52]	@ (80119a0 <aboutDev+0x6c>)
 801196a:	68f8      	ldr	r0, [r7, #12]
 801196c:	f7fd fe32 	bl	800f5d4 <cli_printf>
	cli_printf(cli, "Montreal, Canada");
 8011970:	490e      	ldr	r1, [pc, #56]	@ (80119ac <aboutDev+0x78>)
 8011972:	68f8      	ldr	r0, [r7, #12]
 8011974:	f7fd fe2e 	bl	800f5d4 <cli_printf>
	cli_printf(cli, "");
 8011978:	4909      	ldr	r1, [pc, #36]	@ (80119a0 <aboutDev+0x6c>)
 801197a:	68f8      	ldr	r0, [r7, #12]
 801197c:	f7fd fe2a 	bl	800f5d4 <cli_printf>
	cli_printf(cli, "https://thingsfactory.com");
 8011980:	490b      	ldr	r1, [pc, #44]	@ (80119b0 <aboutDev+0x7c>)
 8011982:	68f8      	ldr	r0, [r7, #12]
 8011984:	f7fd fe26 	bl	800f5d4 <cli_printf>
	cli_printf(cli, "");
 8011988:	4905      	ldr	r1, [pc, #20]	@ (80119a0 <aboutDev+0x6c>)
 801198a:	68f8      	ldr	r0, [r7, #12]
 801198c:	f7fd fe22 	bl	800f5d4 <cli_printf>
	cli_printf(cli, "");
 8011990:	4903      	ldr	r1, [pc, #12]	@ (80119a0 <aboutDev+0x6c>)
 8011992:	68f8      	ldr	r0, [r7, #12]
 8011994:	f7fd fe1e 	bl	800f5d4 <cli_printf>
}
 8011998:	bf00      	nop
 801199a:	3710      	adds	r7, #16
 801199c:	46bd      	mov	sp, r7
 801199e:	bd80      	pop	{r7, pc}
 80119a0:	08023030 	.word	0x08023030
 80119a4:	08023a9c 	.word	0x08023a9c
 80119a8:	08023ac4 	.word	0x08023ac4
 80119ac:	08023aec 	.word	0x08023aec
 80119b0:	08023b00 	.word	0x08023b00

080119b4 <initializeEmbeddedCli>:
/**
 * Initializes the Embedded CLI instance and sets up command bindings.
 */
void initializeEmbeddedCli() {
 80119b4:	b5b0      	push	{r4, r5, r7, lr}
 80119b6:	f5ad 7d54 	sub.w	sp, sp, #848	@ 0x350
 80119ba:	af02      	add	r7, sp, #8
	cli = embeddedCliNewDefault();
 80119bc:	f000 fe3b 	bl	8012636 <embeddedCliNewDefault>
 80119c0:	4603      	mov	r3, r0
 80119c2:	4aa9      	ldr	r2, [pc, #676]	@ (8011c68 <initializeEmbeddedCli+0x2b4>)
 80119c4:	6013      	str	r3, [r2, #0]

	CliCommandBinding clear_binding = { .name = "clear", .help =
 80119c6:	4ba9      	ldr	r3, [pc, #676]	@ (8011c6c <initializeEmbeddedCli+0x2b8>)
 80119c8:	f507 744d 	add.w	r4, r7, #820	@ 0x334
 80119cc:	461d      	mov	r5, r3
 80119ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119d2:	682b      	ldr	r3, [r5, #0]
 80119d4:	6023      	str	r3, [r4, #0]
			"Clears the console", .tokenizeArgs = true, .context = NULL,
			.binding = onClearCLI };

	CliCommandBinding Debug_scd4x_PM25 = { .name = "debug", .help =
 80119d6:	4ba6      	ldr	r3, [pc, #664]	@ (8011c70 <initializeEmbeddedCli+0x2bc>)
 80119d8:	f507 7448 	add.w	r4, r7, #800	@ 0x320
 80119dc:	461d      	mov	r5, r3
 80119de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119e2:	682b      	ldr	r3, [r5, #0]
 80119e4:	6023      	str	r3, [r4, #0]
			"Enable/Disable debug messages for scd4x and PM sensor",
			.tokenizeArgs = true, .context = NULL, .binding = debug_scd4x_PM25 };

	CliCommandBinding Get_DeviceSignature = { .name = "get-device-signature",
 80119e6:	4ba3      	ldr	r3, [pc, #652]	@ (8011c74 <initializeEmbeddedCli+0x2c0>)
 80119e8:	f507 7443 	add.w	r4, r7, #780	@ 0x30c
 80119ec:	461d      	mov	r5, r3
 80119ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119f2:	682b      	ldr	r3, [r5, #0]
 80119f4:	6023      	str	r3, [r4, #0]
			.help = "Unique device identifier(from STM32 electronic signature)",
			.tokenizeArgs = true, .context = NULL, .binding = DeviceSignature };

	CliCommandBinding Set_ID = { .name = "set-id", .help =
 80119f6:	4ba0      	ldr	r3, [pc, #640]	@ (8011c78 <initializeEmbeddedCli+0x2c4>)
 80119f8:	f507 743e 	add.w	r4, r7, #760	@ 0x2f8
 80119fc:	461d      	mov	r5, r3
 80119fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a02:	682b      	ldr	r3, [r5, #0]
 8011a04:	6023      	str	r3, [r4, #0]
			"Asset number assigned to the device", .tokenizeArgs = true,
			.context = NULL, .binding = SetID };

	CliCommandBinding Set_Location = { .name = "set-location", .help =
 8011a06:	4b9d      	ldr	r3, [pc, #628]	@ (8011c7c <initializeEmbeddedCli+0x2c8>)
 8011a08:	f507 7439 	add.w	r4, r7, #740	@ 0x2e4
 8011a0c:	461d      	mov	r5, r3
 8011a0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a12:	682b      	ldr	r3, [r5, #0]
 8011a14:	6023      	str	r3, [r4, #0]

//	CliCommandBinding Set_name = { .name = "set-name", .help =
//				"Optional field to assign name to the device", .tokenizeArgs = true, .context = NULL,
//				.binding = Setname };

	CliCommandBinding Set_group = { .name = "set-group", .help =
 8011a16:	4b9a      	ldr	r3, [pc, #616]	@ (8011c80 <initializeEmbeddedCli+0x2cc>)
 8011a18:	f507 7434 	add.w	r4, r7, #720	@ 0x2d0
 8011a1c:	461d      	mov	r5, r3
 8011a1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a22:	682b      	ldr	r3, [r5, #0]
 8011a24:	6023      	str	r3, [r4, #0]
			"Optional field to assign group to the device",
			.tokenizeArgs = true, .context = NULL, .binding = Setgroup };

	CliCommandBinding Get_ID = { .name = "get-id", .help = "gets ID",
 8011a26:	4b97      	ldr	r3, [pc, #604]	@ (8011c84 <initializeEmbeddedCli+0x2d0>)
 8011a28:	f507 742f 	add.w	r4, r7, #700	@ 0x2bc
 8011a2c:	461d      	mov	r5, r3
 8011a2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a32:	682b      	ldr	r3, [r5, #0]
 8011a34:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = GetID };

	CliCommandBinding Get_Location = { .name = "get-location", .help =
 8011a36:	4b94      	ldr	r3, [pc, #592]	@ (8011c88 <initializeEmbeddedCli+0x2d4>)
 8011a38:	f507 742a 	add.w	r4, r7, #680	@ 0x2a8
 8011a3c:	461d      	mov	r5, r3
 8011a3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a42:	682b      	ldr	r3, [r5, #0]
 8011a44:	6023      	str	r3, [r4, #0]

//	CliCommandBinding Get_name = { .name = "get-name", .help =
//				"gets name", .tokenizeArgs = true, .context = NULL,
//				.binding = Getname };

	CliCommandBinding Get_group = { .name = "get-group", .help = "gets group",
 8011a46:	4b91      	ldr	r3, [pc, #580]	@ (8011c8c <initializeEmbeddedCli+0x2d8>)
 8011a48:	f507 7425 	add.w	r4, r7, #660	@ 0x294
 8011a4c:	461d      	mov	r5, r3
 8011a4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a52:	682b      	ldr	r3, [r5, #0]
 8011a54:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = Getgroup };

	CliCommandBinding Set_Date = { .name = "set-date", .help =
 8011a56:	4b8e      	ldr	r3, [pc, #568]	@ (8011c90 <initializeEmbeddedCli+0x2dc>)
 8011a58:	f507 7420 	add.w	r4, r7, #640	@ 0x280
 8011a5c:	461d      	mov	r5, r3
 8011a5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a62:	682b      	ldr	r3, [r5, #0]
 8011a64:	6023      	str	r3, [r4, #0]
			"In day:month:year", .tokenizeArgs = true, .context = NULL,
			.binding = SetDate };

	CliCommandBinding Set_Time = { .name = "set-time", .help = "In hh:mm:ss",
 8011a66:	4b8b      	ldr	r3, [pc, #556]	@ (8011c94 <initializeEmbeddedCli+0x2e0>)
 8011a68:	f507 741b 	add.w	r4, r7, #620	@ 0x26c
 8011a6c:	461d      	mov	r5, r3
 8011a6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a72:	682b      	ldr	r3, [r5, #0]
 8011a74:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = SetTime };

	CliCommandBinding Get_Date = { .name = "get-date", .help =
 8011a76:	4b88      	ldr	r3, [pc, #544]	@ (8011c98 <initializeEmbeddedCli+0x2e4>)
 8011a78:	f507 7416 	add.w	r4, r7, #600	@ 0x258
 8011a7c:	461d      	mov	r5, r3
 8011a7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a82:	682b      	ldr	r3, [r5, #0]
 8011a84:	6023      	str	r3, [r4, #0]
			"Get Systems Date", .tokenizeArgs = true, .context = NULL,
			.binding = GetDate };

	CliCommandBinding Get_Time = { .name = "get-time", .help =
 8011a86:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011a8e:	4a83      	ldr	r2, [pc, #524]	@ (8011c9c <initializeEmbeddedCli+0x2e8>)
 8011a90:	461c      	mov	r4, r3
 8011a92:	4615      	mov	r5, r2
 8011a94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a98:	682b      	ldr	r3, [r5, #0]
 8011a9a:	6023      	str	r3, [r4, #0]
			"Get Systems Time", .tokenizeArgs = true, .context = NULL,
			.binding = GetTime };

	CliCommandBinding Set_Interval = { .name = "set-interval", .help =
 8011a9c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011aa0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011aa4:	4a7e      	ldr	r2, [pc, #504]	@ (8011ca0 <initializeEmbeddedCli+0x2ec>)
 8011aa6:	461c      	mov	r4, r3
 8011aa8:	4615      	mov	r5, r2
 8011aaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011aac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011aae:	682b      	ldr	r3, [r5, #0]
 8011ab0:	6023      	str	r3, [r4, #0]
			"Set Time Interval for fetching the data", .tokenizeArgs = true,
			.context = NULL, .binding = SetInterval };

	CliCommandBinding Get_Interval = { .name = "get-interval", .help =
 8011ab2:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011ab6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011aba:	4a7a      	ldr	r2, [pc, #488]	@ (8011ca4 <initializeEmbeddedCli+0x2f0>)
 8011abc:	461c      	mov	r4, r3
 8011abe:	4615      	mov	r5, r2
 8011ac0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ac2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011ac4:	682b      	ldr	r3, [r5, #0]
 8011ac6:	6023      	str	r3, [r4, #0]
			"Get Time Interval", .tokenizeArgs = true, .context = NULL,
			.binding = GetInterval };

	CliCommandBinding Set_Filename = { .name = "set-filename", .help =
 8011ac8:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011acc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8011ad0:	4a75      	ldr	r2, [pc, #468]	@ (8011ca8 <initializeEmbeddedCli+0x2f4>)
 8011ad2:	461c      	mov	r4, r3
 8011ad4:	4615      	mov	r5, r2
 8011ad6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ad8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011ada:	682b      	ldr	r3, [r5, #0]
 8011adc:	6023      	str	r3, [r4, #0]
			"Filename prefix as in \"value+date\" in file naming convention",
			.tokenizeArgs = true, .context = NULL, .binding = SetFilename };

	CliCommandBinding Get_Filename = { .name = "get-filename", .help =
 8011ade:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011ae2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8011ae6:	4a71      	ldr	r2, [pc, #452]	@ (8011cac <initializeEmbeddedCli+0x2f8>)
 8011ae8:	461c      	mov	r4, r3
 8011aea:	4615      	mov	r5, r2
 8011aec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011aee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011af0:	682b      	ldr	r3, [r5, #0]
 8011af2:	6023      	str	r3, [r4, #0]
			"Get filename", .tokenizeArgs = true, .context = NULL, .binding =
			GetFilename };

	CliCommandBinding Set_Fileformat = { .name = "set-fileformat", .help =
 8011af4:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011af8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8011afc:	4a6c      	ldr	r2, [pc, #432]	@ (8011cb0 <initializeEmbeddedCli+0x2fc>)
 8011afe:	461c      	mov	r4, r3
 8011b00:	4615      	mov	r5, r2
 8011b02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b06:	682b      	ldr	r3, [r5, #0]
 8011b08:	6023      	str	r3, [r4, #0]
			"Set desired file format", .tokenizeArgs = true, .context = NULL,
			.binding = SetFileformat };

	CliCommandBinding Get_Fileformat = { .name = "get-fileformat", .help =
 8011b0a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011b0e:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8011b12:	4a68      	ldr	r2, [pc, #416]	@ (8011cb4 <initializeEmbeddedCli+0x300>)
 8011b14:	461c      	mov	r4, r3
 8011b16:	4615      	mov	r5, r2
 8011b18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b1c:	682b      	ldr	r3, [r5, #0]
 8011b1e:	6023      	str	r3, [r4, #0]
			"Get file format", .tokenizeArgs = true, .context = NULL, .binding =
			GetFileformat };

	CliCommandBinding Fan_Clean = { .name = "fan-clean", .help =
 8011b20:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011b24:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8011b28:	4a63      	ldr	r2, [pc, #396]	@ (8011cb8 <initializeEmbeddedCli+0x304>)
 8011b2a:	461c      	mov	r4, r3
 8011b2c:	4615      	mov	r5, r2
 8011b2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b32:	682b      	ldr	r3, [r5, #0]
 8011b34:	6023      	str	r3, [r4, #0]
			"Particle sensor fan cleaning", .tokenizeArgs = true, .context =
			NULL, .binding = fanclean };

	CliCommandBinding Co2_Calibration = { .name = "co2-force-calibration", .help =
 8011b36:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011b3a:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8011b3e:	4a5f      	ldr	r2, [pc, #380]	@ (8011cbc <initializeEmbeddedCli+0x308>)
 8011b40:	461c      	mov	r4, r3
 8011b42:	4615      	mov	r5, r2
 8011b44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b48:	682b      	ldr	r3, [r5, #0]
 8011b4a:	6023      	str	r3, [r4, #0]
			"Force calibration of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = co2calibrate };

	CliCommandBinding getCo2_Calibration = { .name = "get-co2-force-calibration-status", .help =
 8011b4c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011b50:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8011b54:	4a5a      	ldr	r2, [pc, #360]	@ (8011cc0 <initializeEmbeddedCli+0x30c>)
 8011b56:	461c      	mov	r4, r3
 8011b58:	4615      	mov	r5, r2
 8011b5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b5e:	682b      	ldr	r3, [r5, #0]
 8011b60:	6023      	str	r3, [r4, #0]
			"Get status of Force calibration of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = statco2calibrate };


	CliCommandBinding Co2_AutoCalibration = { .name = "co2-auto-calibration", .help =
 8011b62:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011b66:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8011b6a:	4a56      	ldr	r2, [pc, #344]	@ (8011cc4 <initializeEmbeddedCli+0x310>)
 8011b6c:	461c      	mov	r4, r3
 8011b6e:	4615      	mov	r5, r2
 8011b70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b74:	682b      	ldr	r3, [r5, #0]
 8011b76:	6023      	str	r3, [r4, #0]
			"Enable/Disable auto calibration of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = co2_auto_calibration };


	CliCommandBinding getCo2_AutoCalibration = { .name = "get-co2-auto-calibration", .help =
 8011b78:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011b7c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8011b80:	4a51      	ldr	r2, [pc, #324]	@ (8011cc8 <initializeEmbeddedCli+0x314>)
 8011b82:	461c      	mov	r4, r3
 8011b84:	4615      	mov	r5, r2
 8011b86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b8a:	682b      	ldr	r3, [r5, #0]
 8011b8c:	6023      	str	r3, [r4, #0]
			"Get Co2 sensor auto calibration status ", .tokenizeArgs = true, .context = NULL,
			.binding = get_auto_calibration };

	CliCommandBinding Co2_Tempoffset = { .name = "set-co2-temp-offset", .help =
 8011b8e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011b92:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8011b96:	4a4d      	ldr	r2, [pc, #308]	@ (8011ccc <initializeEmbeddedCli+0x318>)
 8011b98:	461c      	mov	r4, r3
 8011b9a:	4615      	mov	r5, r2
 8011b9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011ba0:	682b      	ldr	r3, [r5, #0]
 8011ba2:	6023      	str	r3, [r4, #0]
			"Set temperature offset of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = set_co2_temp_offset };

	CliCommandBinding getCo2_Tempoffset = { .name = "get-co2-temp-offset", .help =
 8011ba4:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011ba8:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8011bac:	4a48      	ldr	r2, [pc, #288]	@ (8011cd0 <initializeEmbeddedCli+0x31c>)
 8011bae:	461c      	mov	r4, r3
 8011bb0:	4615      	mov	r5, r2
 8011bb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011bb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011bb6:	682b      	ldr	r3, [r5, #0]
 8011bb8:	6023      	str	r3, [r4, #0]
			"Get temperature offset of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = get_co2_temp_offset };

	CliCommandBinding Co2_altitudecompsentation = { .name = "set-co2-altitude-comp", .help =
 8011bba:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011bbe:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8011bc2:	4a44      	ldr	r2, [pc, #272]	@ (8011cd4 <initializeEmbeddedCli+0x320>)
 8011bc4:	461c      	mov	r4, r3
 8011bc6:	4615      	mov	r5, r2
 8011bc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011bca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011bcc:	682b      	ldr	r3, [r5, #0]
 8011bce:	6023      	str	r3, [r4, #0]
			"Set altitude compensation of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = set_co2_altitude_compensation };

	CliCommandBinding getCo2_altitudecompsentation = { .name = "get-co2-altitude-comp", .help =
 8011bd0:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011bd4:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8011bd8:	4a3f      	ldr	r2, [pc, #252]	@ (8011cd8 <initializeEmbeddedCli+0x324>)
 8011bda:	461c      	mov	r4, r3
 8011bdc:	4615      	mov	r5, r2
 8011bde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011be0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011be2:	682b      	ldr	r3, [r5, #0]
 8011be4:	6023      	str	r3, [r4, #0]
			"Get altitude compensation of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = get_co2_altitude_compensation };

	CliCommandBinding Co2_Calibration_program = { .name = "run-co2-calib-prog", .help =
 8011be6:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011bea:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8011bee:	4a3b      	ldr	r2, [pc, #236]	@ (8011cdc <initializeEmbeddedCli+0x328>)
 8011bf0:	461c      	mov	r4, r3
 8011bf2:	4615      	mov	r5, r2
 8011bf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011bf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011bf8:	682b      	ldr	r3, [r5, #0]
 8011bfa:	6023      	str	r3, [r4, #0]
			"Run Co2 sensor calibration program", .tokenizeArgs = true, .context = NULL,
			.binding = run_co2_calibration_routine };

	CliCommandBinding set_Co2_samples= { .name = "set-co2-samples", .help =
 8011bfc:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011c00:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8011c04:	4a36      	ldr	r2, [pc, #216]	@ (8011ce0 <initializeEmbeddedCli+0x32c>)
 8011c06:	461c      	mov	r4, r3
 8011c08:	4615      	mov	r5, r2
 8011c0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c0e:	682b      	ldr	r3, [r5, #0]
 8011c10:	6023      	str	r3, [r4, #0]
			"Set how much samples you want Co2 sensor to take", .tokenizeArgs = true, .context = NULL,
			.binding = set_co2_samples };

	CliCommandBinding get_Co2_samples= { .name = "get-co2-samples", .help =
 8011c12:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011c16:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8011c1a:	4a32      	ldr	r2, [pc, #200]	@ (8011ce4 <initializeEmbeddedCli+0x330>)
 8011c1c:	461c      	mov	r4, r3
 8011c1e:	4615      	mov	r5, r2
 8011c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c24:	682b      	ldr	r3, [r5, #0]
 8011c26:	6023      	str	r3, [r4, #0]
			"Get Co2 samples", .tokenizeArgs = true, .context = NULL,
			.binding = get_co2_samples };

	CliCommandBinding Systemreset = { .name = "system-restart", .help =
 8011c28:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011c2c:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8011c30:	4a2d      	ldr	r2, [pc, #180]	@ (8011ce8 <initializeEmbeddedCli+0x334>)
 8011c32:	461c      	mov	r4, r3
 8011c34:	4615      	mov	r5, r2
 8011c36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c3a:	682b      	ldr	r3, [r5, #0]
 8011c3c:	6023      	str	r3, [r4, #0]
			"Restart the system", .tokenizeArgs = true, .context = NULL,
			.binding = SystemRestart };

	CliCommandBinding Co2_Level = { .name = "co2-level", .help =
 8011c3e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011c42:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8011c46:	4a29      	ldr	r2, [pc, #164]	@ (8011cec <initializeEmbeddedCli+0x338>)
 8011c48:	461c      	mov	r4, r3
 8011c4a:	4615      	mov	r5, r2
 8011c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c50:	682b      	ldr	r3, [r5, #0]
 8011c52:	6023      	str	r3, [r4, #0]
			"Co2 measured in ppm", .tokenizeArgs = true, .context = NULL,
			.binding = Co2Level };

	CliCommandBinding Temp_Level = { .name = "temperature-level", .help =
 8011c54:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011c58:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8011c5c:	4a24      	ldr	r2, [pc, #144]	@ (8011cf0 <initializeEmbeddedCli+0x33c>)
 8011c5e:	461c      	mov	r4, r3
 8011c60:	4615      	mov	r5, r2
 8011c62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c66:	e045      	b.n	8011cf4 <initializeEmbeddedCli+0x340>
 8011c68:	20001b2c 	.word	0x20001b2c
 8011c6c:	08023b38 	.word	0x08023b38
 8011c70:	08023b8c 	.word	0x08023b8c
 8011c74:	08023bf4 	.word	0x08023bf4
 8011c78:	08023c34 	.word	0x08023c34
 8011c7c:	08023c94 	.word	0x08023c94
 8011c80:	08023ce4 	.word	0x08023ce4
 8011c84:	08023d08 	.word	0x08023d08
 8011c88:	08023d3c 	.word	0x08023d3c
 8011c8c:	08023d68 	.word	0x08023d68
 8011c90:	08023d9c 	.word	0x08023d9c
 8011c94:	08023dc8 	.word	0x08023dc8
 8011c98:	08023dfc 	.word	0x08023dfc
 8011c9c:	08023e30 	.word	0x08023e30
 8011ca0:	08023e7c 	.word	0x08023e7c
 8011ca4:	08023eb4 	.word	0x08023eb4
 8011ca8:	08023f18 	.word	0x08023f18
 8011cac:	08023f4c 	.word	0x08023f4c
 8011cb0:	08023f88 	.word	0x08023f88
 8011cb4:	08023fbc 	.word	0x08023fbc
 8011cb8:	08023ffc 	.word	0x08023ffc
 8011cbc:	08024048 	.word	0x08024048
 8011cc0:	080240b0 	.word	0x080240b0
 8011cc4:	0802410c 	.word	0x0802410c
 8011cc8:	08024164 	.word	0x08024164
 8011ccc:	080241b4 	.word	0x080241b4
 8011cd0:	08024204 	.word	0x08024204
 8011cd4:	08024258 	.word	0x08024258
 8011cd8:	080242ac 	.word	0x080242ac
 8011cdc:	080242f8 	.word	0x080242f8
 8011ce0:	08024350 	.word	0x08024350
 8011ce4:	08024384 	.word	0x08024384
 8011ce8:	080243bc 	.word	0x080243bc
 8011cec:	080243f0 	.word	0x080243f0
 8011cf0:	08024438 	.word	0x08024438
 8011cf4:	682b      	ldr	r3, [r5, #0]
 8011cf6:	6023      	str	r3, [r4, #0]
			"Temperature measured in Celsius", .tokenizeArgs = true, .context =
			NULL, .binding = TempLevel };

	CliCommandBinding Humid_Level = { .name = "humidity-level", .help =
 8011cf8:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011cfc:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8011d00:	4acb      	ldr	r2, [pc, #812]	@ (8012030 <initializeEmbeddedCli+0x67c>)
 8011d02:	461c      	mov	r4, r3
 8011d04:	4615      	mov	r5, r2
 8011d06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011d08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011d0a:	682b      	ldr	r3, [r5, #0]
 8011d0c:	6023      	str	r3, [r4, #0]
			"Humidity measured in % of relative", .tokenizeArgs = true,
			.context = NULL, .binding = HumidLevel };

	CliCommandBinding Motion_Detection = { .name = "motion-detection", .help =
 8011d0e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011d12:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 8011d16:	4ac7      	ldr	r2, [pc, #796]	@ (8012034 <initializeEmbeddedCli+0x680>)
 8011d18:	461c      	mov	r4, r3
 8011d1a:	4615      	mov	r5, r2
 8011d1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011d1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011d20:	682b      	ldr	r3, [r5, #0]
 8011d22:	6023      	str	r3, [r4, #0]
			"Movement detected - yes or no", .tokenizeArgs = true, .context =
			NULL, .binding = MotionDetection };

	CliCommandBinding Air_Quality = { .name = "air-quality", .help =
 8011d24:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011d28:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8011d2c:	4ac2      	ldr	r2, [pc, #776]	@ (8012038 <initializeEmbeddedCli+0x684>)
 8011d2e:	461c      	mov	r4, r3
 8011d30:	4615      	mov	r5, r2
 8011d32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011d34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011d36:	682b      	ldr	r3, [r5, #0]
 8011d38:	6023      	str	r3, [r4, #0]
			"Check air quality level", .tokenizeArgs = true, .context = NULL,
			.binding = AirQuality };

	CliCommandBinding Battery_Voltage = { .name = "battery-voltage", .help =
 8011d3a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011d3e:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 8011d42:	4abe      	ldr	r2, [pc, #760]	@ (801203c <initializeEmbeddedCli+0x688>)
 8011d44:	461c      	mov	r4, r3
 8011d46:	4615      	mov	r5, r2
 8011d48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011d4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011d4c:	682b      	ldr	r3, [r5, #0]
 8011d4e:	6023      	str	r3, [r4, #0]
			"Measure voltage from 4.17v(Full Charge) to 3.0v(Battery Low)",
			.tokenizeArgs = true, .context = NULL, .binding = BattVolt };

	CliCommandBinding _port = { .name = "port", .help = "Inactive field",
 8011d50:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011d54:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8011d58:	4ab9      	ldr	r2, [pc, #740]	@ (8012040 <initializeEmbeddedCli+0x68c>)
 8011d5a:	461c      	mov	r4, r3
 8011d5c:	4615      	mov	r5, r2
 8011d5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011d60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011d62:	682b      	ldr	r3, [r5, #0]
 8011d64:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = port };

	CliCommandBinding _showall = { .name = "show-all", .help =
 8011d66:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011d6a:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8011d6e:	4ab5      	ldr	r2, [pc, #724]	@ (8012044 <initializeEmbeddedCli+0x690>)
 8011d70:	461c      	mov	r4, r3
 8011d72:	4615      	mov	r5, r2
 8011d74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011d76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011d78:	682b      	ldr	r3, [r5, #0]
 8011d7a:	6023      	str	r3, [r4, #0]
			"Shows all parameters", .tokenizeArgs = true, .context = NULL,
			.binding = showall };

	CliCommandBinding getversion = { .name = "get-version", .help =
 8011d7c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011d80:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8011d84:	4ab0      	ldr	r2, [pc, #704]	@ (8012048 <initializeEmbeddedCli+0x694>)
 8011d86:	461c      	mov	r4, r3
 8011d88:	4615      	mov	r5, r2
 8011d8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011d8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011d8e:	682b      	ldr	r3, [r5, #0]
 8011d90:	6023      	str	r3, [r4, #0]
				"Shows hardware and software version", .tokenizeArgs = true, .context = NULL,
				.binding = systemversion };

	CliCommandBinding aboutdev = { .name = "about", .help =
 8011d92:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011d96:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 8011d9a:	4aac      	ldr	r2, [pc, #688]	@ (801204c <initializeEmbeddedCli+0x698>)
 8011d9c:	461c      	mov	r4, r3
 8011d9e:	4615      	mov	r5, r2
 8011da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011da4:	682b      	ldr	r3, [r5, #0]
 8011da6:	6023      	str	r3, [r4, #0]
				"Information about device", .tokenizeArgs = true, .context = NULL,
				.binding = aboutDev };

	// EmbeddedCli *cli = getCliPointer;debug_scd4x_PM25
	embeddedCliAddBinding(cli, clear_binding);
 8011da8:	4ba9      	ldr	r3, [pc, #676]	@ (8012050 <initializeEmbeddedCli+0x69c>)
 8011daa:	681c      	ldr	r4, [r3, #0]
 8011dac:	466a      	mov	r2, sp
 8011dae:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8011db2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011db6:	e882 0003 	stmia.w	r2, {r0, r1}
 8011dba:	f507 734d 	add.w	r3, r7, #820	@ 0x334
 8011dbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011dc0:	4620      	mov	r0, r4
 8011dc2:	f000 fcf6 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Debug_scd4x_PM25);
 8011dc6:	4ba2      	ldr	r3, [pc, #648]	@ (8012050 <initializeEmbeddedCli+0x69c>)
 8011dc8:	681c      	ldr	r4, [r3, #0]
 8011dca:	466a      	mov	r2, sp
 8011dcc:	f507 734b 	add.w	r3, r7, #812	@ 0x32c
 8011dd0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011dd4:	e882 0003 	stmia.w	r2, {r0, r1}
 8011dd8:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8011ddc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011dde:	4620      	mov	r0, r4
 8011de0:	f000 fce7 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_DeviceSignature);
 8011de4:	4b9a      	ldr	r3, [pc, #616]	@ (8012050 <initializeEmbeddedCli+0x69c>)
 8011de6:	681c      	ldr	r4, [r3, #0]
 8011de8:	466a      	mov	r2, sp
 8011dea:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8011dee:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011df2:	e882 0003 	stmia.w	r2, {r0, r1}
 8011df6:	f507 7343 	add.w	r3, r7, #780	@ 0x30c
 8011dfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011dfc:	4620      	mov	r0, r4
 8011dfe:	f000 fcd8 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_ID);
 8011e02:	4b93      	ldr	r3, [pc, #588]	@ (8012050 <initializeEmbeddedCli+0x69c>)
 8011e04:	681c      	ldr	r4, [r3, #0]
 8011e06:	466a      	mov	r2, sp
 8011e08:	f507 7341 	add.w	r3, r7, #772	@ 0x304
 8011e0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011e10:	e882 0003 	stmia.w	r2, {r0, r1}
 8011e14:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8011e18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011e1a:	4620      	mov	r0, r4
 8011e1c:	f000 fcc9 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Location);
 8011e20:	4b8b      	ldr	r3, [pc, #556]	@ (8012050 <initializeEmbeddedCli+0x69c>)
 8011e22:	681c      	ldr	r4, [r3, #0]
 8011e24:	466a      	mov	r2, sp
 8011e26:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8011e2a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011e2e:	e882 0003 	stmia.w	r2, {r0, r1}
 8011e32:	f507 7339 	add.w	r3, r7, #740	@ 0x2e4
 8011e36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011e38:	4620      	mov	r0, r4
 8011e3a:	f000 fcba 	bl	80127b2 <embeddedCliAddBinding>
//	embeddedCliAddBinding(cli, Set_name);
	embeddedCliAddBinding(cli, Set_group);
 8011e3e:	4b84      	ldr	r3, [pc, #528]	@ (8012050 <initializeEmbeddedCli+0x69c>)
 8011e40:	681c      	ldr	r4, [r3, #0]
 8011e42:	466a      	mov	r2, sp
 8011e44:	f507 7337 	add.w	r3, r7, #732	@ 0x2dc
 8011e48:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011e4c:	e882 0003 	stmia.w	r2, {r0, r1}
 8011e50:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8011e54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011e56:	4620      	mov	r0, r4
 8011e58:	f000 fcab 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_ID);
 8011e5c:	4b7c      	ldr	r3, [pc, #496]	@ (8012050 <initializeEmbeddedCli+0x69c>)
 8011e5e:	681c      	ldr	r4, [r3, #0]
 8011e60:	466a      	mov	r2, sp
 8011e62:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8011e66:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011e6a:	e882 0003 	stmia.w	r2, {r0, r1}
 8011e6e:	f507 732f 	add.w	r3, r7, #700	@ 0x2bc
 8011e72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011e74:	4620      	mov	r0, r4
 8011e76:	f000 fc9c 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Location);
 8011e7a:	4b75      	ldr	r3, [pc, #468]	@ (8012050 <initializeEmbeddedCli+0x69c>)
 8011e7c:	681c      	ldr	r4, [r3, #0]
 8011e7e:	466a      	mov	r2, sp
 8011e80:	f507 732d 	add.w	r3, r7, #692	@ 0x2b4
 8011e84:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011e88:	e882 0003 	stmia.w	r2, {r0, r1}
 8011e8c:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8011e90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011e92:	4620      	mov	r0, r4
 8011e94:	f000 fc8d 	bl	80127b2 <embeddedCliAddBinding>
//	embeddedCliAddBinding(cli, Get_name);
	embeddedCliAddBinding(cli, Get_group);
 8011e98:	4b6d      	ldr	r3, [pc, #436]	@ (8012050 <initializeEmbeddedCli+0x69c>)
 8011e9a:	681c      	ldr	r4, [r3, #0]
 8011e9c:	466a      	mov	r2, sp
 8011e9e:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8011ea2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011ea6:	e882 0003 	stmia.w	r2, {r0, r1}
 8011eaa:	f507 7325 	add.w	r3, r7, #660	@ 0x294
 8011eae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011eb0:	4620      	mov	r0, r4
 8011eb2:	f000 fc7e 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Date);
 8011eb6:	4b66      	ldr	r3, [pc, #408]	@ (8012050 <initializeEmbeddedCli+0x69c>)
 8011eb8:	681c      	ldr	r4, [r3, #0]
 8011eba:	466a      	mov	r2, sp
 8011ebc:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8011ec0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011ec4:	e882 0003 	stmia.w	r2, {r0, r1}
 8011ec8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8011ecc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011ece:	4620      	mov	r0, r4
 8011ed0:	f000 fc6f 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Time);
 8011ed4:	4b5e      	ldr	r3, [pc, #376]	@ (8012050 <initializeEmbeddedCli+0x69c>)
 8011ed6:	681c      	ldr	r4, [r3, #0]
 8011ed8:	466a      	mov	r2, sp
 8011eda:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8011ede:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011ee2:	e882 0003 	stmia.w	r2, {r0, r1}
 8011ee6:	f507 731b 	add.w	r3, r7, #620	@ 0x26c
 8011eea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011eec:	4620      	mov	r0, r4
 8011eee:	f000 fc60 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Date);
 8011ef2:	4b57      	ldr	r3, [pc, #348]	@ (8012050 <initializeEmbeddedCli+0x69c>)
 8011ef4:	681c      	ldr	r4, [r3, #0]
 8011ef6:	466a      	mov	r2, sp
 8011ef8:	f507 7319 	add.w	r3, r7, #612	@ 0x264
 8011efc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011f00:	e882 0003 	stmia.w	r2, {r0, r1}
 8011f04:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8011f08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011f0a:	4620      	mov	r0, r4
 8011f0c:	f000 fc51 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Time);
 8011f10:	4b4f      	ldr	r3, [pc, #316]	@ (8012050 <initializeEmbeddedCli+0x69c>)
 8011f12:	681c      	ldr	r4, [r3, #0]
 8011f14:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011f18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011f1c:	466d      	mov	r5, sp
 8011f1e:	f103 020c 	add.w	r2, r3, #12
 8011f22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f26:	e885 0003 	stmia.w	r5, {r0, r1}
 8011f2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011f2c:	4620      	mov	r0, r4
 8011f2e:	f000 fc40 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Interval);
 8011f32:	4b47      	ldr	r3, [pc, #284]	@ (8012050 <initializeEmbeddedCli+0x69c>)
 8011f34:	681c      	ldr	r4, [r3, #0]
 8011f36:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011f3a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011f3e:	466d      	mov	r5, sp
 8011f40:	f103 020c 	add.w	r2, r3, #12
 8011f44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f48:	e885 0003 	stmia.w	r5, {r0, r1}
 8011f4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011f4e:	4620      	mov	r0, r4
 8011f50:	f000 fc2f 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Interval);
 8011f54:	4b3e      	ldr	r3, [pc, #248]	@ (8012050 <initializeEmbeddedCli+0x69c>)
 8011f56:	681c      	ldr	r4, [r3, #0]
 8011f58:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011f5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011f60:	466d      	mov	r5, sp
 8011f62:	f103 020c 	add.w	r2, r3, #12
 8011f66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f6a:	e885 0003 	stmia.w	r5, {r0, r1}
 8011f6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011f70:	4620      	mov	r0, r4
 8011f72:	f000 fc1e 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Filename);
 8011f76:	4b36      	ldr	r3, [pc, #216]	@ (8012050 <initializeEmbeddedCli+0x69c>)
 8011f78:	681c      	ldr	r4, [r3, #0]
 8011f7a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011f7e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8011f82:	466d      	mov	r5, sp
 8011f84:	f103 020c 	add.w	r2, r3, #12
 8011f88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8011f90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011f92:	4620      	mov	r0, r4
 8011f94:	f000 fc0d 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Filename);
 8011f98:	4b2d      	ldr	r3, [pc, #180]	@ (8012050 <initializeEmbeddedCli+0x69c>)
 8011f9a:	681c      	ldr	r4, [r3, #0]
 8011f9c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011fa0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8011fa4:	466d      	mov	r5, sp
 8011fa6:	f103 020c 	add.w	r2, r3, #12
 8011faa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011fae:	e885 0003 	stmia.w	r5, {r0, r1}
 8011fb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011fb4:	4620      	mov	r0, r4
 8011fb6:	f000 fbfc 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Fileformat);
 8011fba:	4b25      	ldr	r3, [pc, #148]	@ (8012050 <initializeEmbeddedCli+0x69c>)
 8011fbc:	681c      	ldr	r4, [r3, #0]
 8011fbe:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011fc2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8011fc6:	466d      	mov	r5, sp
 8011fc8:	f103 020c 	add.w	r2, r3, #12
 8011fcc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011fd0:	e885 0003 	stmia.w	r5, {r0, r1}
 8011fd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011fd6:	4620      	mov	r0, r4
 8011fd8:	f000 fbeb 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Fileformat);
 8011fdc:	4b1c      	ldr	r3, [pc, #112]	@ (8012050 <initializeEmbeddedCli+0x69c>)
 8011fde:	681c      	ldr	r4, [r3, #0]
 8011fe0:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011fe4:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8011fe8:	466d      	mov	r5, sp
 8011fea:	f103 020c 	add.w	r2, r3, #12
 8011fee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ff2:	e885 0003 	stmia.w	r5, {r0, r1}
 8011ff6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011ff8:	4620      	mov	r0, r4
 8011ffa:	f000 fbda 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Fan_Clean);
 8011ffe:	4b14      	ldr	r3, [pc, #80]	@ (8012050 <initializeEmbeddedCli+0x69c>)
 8012000:	681c      	ldr	r4, [r3, #0]
 8012002:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012006:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 801200a:	466d      	mov	r5, sp
 801200c:	f103 020c 	add.w	r2, r3, #12
 8012010:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012014:	e885 0003 	stmia.w	r5, {r0, r1}
 8012018:	cb0e      	ldmia	r3, {r1, r2, r3}
 801201a:	4620      	mov	r0, r4
 801201c:	f000 fbc9 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Calibration);
 8012020:	4b0b      	ldr	r3, [pc, #44]	@ (8012050 <initializeEmbeddedCli+0x69c>)
 8012022:	681c      	ldr	r4, [r3, #0]
 8012024:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012028:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 801202c:	e012      	b.n	8012054 <initializeEmbeddedCli+0x6a0>
 801202e:	bf00      	nop
 8012030:	08024480 	.word	0x08024480
 8012034:	080244c8 	.word	0x080244c8
 8012038:	08024500 	.word	0x08024500
 801203c:	08024564 	.word	0x08024564
 8012040:	08024590 	.word	0x08024590
 8012044:	080245c8 	.word	0x080245c8
 8012048:	0802460c 	.word	0x0802460c
 801204c:	08024644 	.word	0x08024644
 8012050:	20001b2c 	.word	0x20001b2c
 8012054:	466d      	mov	r5, sp
 8012056:	f103 020c 	add.w	r2, r3, #12
 801205a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801205e:	e885 0003 	stmia.w	r5, {r0, r1}
 8012062:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012064:	4620      	mov	r0, r4
 8012066:	f000 fba4 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, getCo2_Calibration);
 801206a:	4bba      	ldr	r3, [pc, #744]	@ (8012354 <initializeEmbeddedCli+0x9a0>)
 801206c:	681c      	ldr	r4, [r3, #0]
 801206e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012072:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8012076:	466d      	mov	r5, sp
 8012078:	f103 020c 	add.w	r2, r3, #12
 801207c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012080:	e885 0003 	stmia.w	r5, {r0, r1}
 8012084:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012086:	4620      	mov	r0, r4
 8012088:	f000 fb93 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_AutoCalibration);
 801208c:	4bb1      	ldr	r3, [pc, #708]	@ (8012354 <initializeEmbeddedCli+0x9a0>)
 801208e:	681c      	ldr	r4, [r3, #0]
 8012090:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012094:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8012098:	466d      	mov	r5, sp
 801209a:	f103 020c 	add.w	r2, r3, #12
 801209e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80120a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80120a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80120a8:	4620      	mov	r0, r4
 80120aa:	f000 fb82 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, getCo2_AutoCalibration);
 80120ae:	4ba9      	ldr	r3, [pc, #676]	@ (8012354 <initializeEmbeddedCli+0x9a0>)
 80120b0:	681c      	ldr	r4, [r3, #0]
 80120b2:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80120b6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80120ba:	466d      	mov	r5, sp
 80120bc:	f103 020c 	add.w	r2, r3, #12
 80120c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80120c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80120c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80120ca:	4620      	mov	r0, r4
 80120cc:	f000 fb71 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Tempoffset);
 80120d0:	4ba0      	ldr	r3, [pc, #640]	@ (8012354 <initializeEmbeddedCli+0x9a0>)
 80120d2:	681c      	ldr	r4, [r3, #0]
 80120d4:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80120d8:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80120dc:	466d      	mov	r5, sp
 80120de:	f103 020c 	add.w	r2, r3, #12
 80120e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80120e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80120ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80120ec:	4620      	mov	r0, r4
 80120ee:	f000 fb60 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, getCo2_Tempoffset);
 80120f2:	4b98      	ldr	r3, [pc, #608]	@ (8012354 <initializeEmbeddedCli+0x9a0>)
 80120f4:	681c      	ldr	r4, [r3, #0]
 80120f6:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80120fa:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80120fe:	466d      	mov	r5, sp
 8012100:	f103 020c 	add.w	r2, r3, #12
 8012104:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012108:	e885 0003 	stmia.w	r5, {r0, r1}
 801210c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801210e:	4620      	mov	r0, r4
 8012110:	f000 fb4f 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_altitudecompsentation);
 8012114:	4b8f      	ldr	r3, [pc, #572]	@ (8012354 <initializeEmbeddedCli+0x9a0>)
 8012116:	681c      	ldr	r4, [r3, #0]
 8012118:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 801211c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8012120:	466d      	mov	r5, sp
 8012122:	f103 020c 	add.w	r2, r3, #12
 8012126:	e892 0003 	ldmia.w	r2, {r0, r1}
 801212a:	e885 0003 	stmia.w	r5, {r0, r1}
 801212e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012130:	4620      	mov	r0, r4
 8012132:	f000 fb3e 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, getCo2_altitudecompsentation);
 8012136:	4b87      	ldr	r3, [pc, #540]	@ (8012354 <initializeEmbeddedCli+0x9a0>)
 8012138:	681c      	ldr	r4, [r3, #0]
 801213a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 801213e:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8012142:	466d      	mov	r5, sp
 8012144:	f103 020c 	add.w	r2, r3, #12
 8012148:	e892 0003 	ldmia.w	r2, {r0, r1}
 801214c:	e885 0003 	stmia.w	r5, {r0, r1}
 8012150:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012152:	4620      	mov	r0, r4
 8012154:	f000 fb2d 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Calibration_program);
 8012158:	4b7e      	ldr	r3, [pc, #504]	@ (8012354 <initializeEmbeddedCli+0x9a0>)
 801215a:	681c      	ldr	r4, [r3, #0]
 801215c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012160:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8012164:	466d      	mov	r5, sp
 8012166:	f103 020c 	add.w	r2, r3, #12
 801216a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801216e:	e885 0003 	stmia.w	r5, {r0, r1}
 8012172:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012174:	4620      	mov	r0, r4
 8012176:	f000 fb1c 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, set_Co2_samples);
 801217a:	4b76      	ldr	r3, [pc, #472]	@ (8012354 <initializeEmbeddedCli+0x9a0>)
 801217c:	681c      	ldr	r4, [r3, #0]
 801217e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012182:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8012186:	466d      	mov	r5, sp
 8012188:	f103 020c 	add.w	r2, r3, #12
 801218c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012190:	e885 0003 	stmia.w	r5, {r0, r1}
 8012194:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012196:	4620      	mov	r0, r4
 8012198:	f000 fb0b 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, get_Co2_samples);
 801219c:	4b6d      	ldr	r3, [pc, #436]	@ (8012354 <initializeEmbeddedCli+0x9a0>)
 801219e:	681c      	ldr	r4, [r3, #0]
 80121a0:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80121a4:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 80121a8:	466d      	mov	r5, sp
 80121aa:	f103 020c 	add.w	r2, r3, #12
 80121ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80121b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80121b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80121b8:	4620      	mov	r0, r4
 80121ba:	f000 fafa 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Systemreset);
 80121be:	4b65      	ldr	r3, [pc, #404]	@ (8012354 <initializeEmbeddedCli+0x9a0>)
 80121c0:	681c      	ldr	r4, [r3, #0]
 80121c2:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80121c6:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80121ca:	466d      	mov	r5, sp
 80121cc:	f103 020c 	add.w	r2, r3, #12
 80121d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80121d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80121d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80121da:	4620      	mov	r0, r4
 80121dc:	f000 fae9 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Level);
 80121e0:	4b5c      	ldr	r3, [pc, #368]	@ (8012354 <initializeEmbeddedCli+0x9a0>)
 80121e2:	681c      	ldr	r4, [r3, #0]
 80121e4:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80121e8:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 80121ec:	466d      	mov	r5, sp
 80121ee:	f103 020c 	add.w	r2, r3, #12
 80121f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80121f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80121fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80121fc:	4620      	mov	r0, r4
 80121fe:	f000 fad8 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Temp_Level);
 8012202:	4b54      	ldr	r3, [pc, #336]	@ (8012354 <initializeEmbeddedCli+0x9a0>)
 8012204:	681c      	ldr	r4, [r3, #0]
 8012206:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 801220a:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 801220e:	466d      	mov	r5, sp
 8012210:	f103 020c 	add.w	r2, r3, #12
 8012214:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012218:	e885 0003 	stmia.w	r5, {r0, r1}
 801221c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801221e:	4620      	mov	r0, r4
 8012220:	f000 fac7 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Humid_Level);
 8012224:	4b4b      	ldr	r3, [pc, #300]	@ (8012354 <initializeEmbeddedCli+0x9a0>)
 8012226:	681c      	ldr	r4, [r3, #0]
 8012228:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 801222c:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8012230:	466d      	mov	r5, sp
 8012232:	f103 020c 	add.w	r2, r3, #12
 8012236:	e892 0003 	ldmia.w	r2, {r0, r1}
 801223a:	e885 0003 	stmia.w	r5, {r0, r1}
 801223e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012240:	4620      	mov	r0, r4
 8012242:	f000 fab6 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Motion_Detection);
 8012246:	4b43      	ldr	r3, [pc, #268]	@ (8012354 <initializeEmbeddedCli+0x9a0>)
 8012248:	681c      	ldr	r4, [r3, #0]
 801224a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 801224e:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 8012252:	466d      	mov	r5, sp
 8012254:	f103 020c 	add.w	r2, r3, #12
 8012258:	e892 0003 	ldmia.w	r2, {r0, r1}
 801225c:	e885 0003 	stmia.w	r5, {r0, r1}
 8012260:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012262:	4620      	mov	r0, r4
 8012264:	f000 faa5 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Air_Quality);
 8012268:	4b3a      	ldr	r3, [pc, #232]	@ (8012354 <initializeEmbeddedCli+0x9a0>)
 801226a:	681c      	ldr	r4, [r3, #0]
 801226c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012270:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8012274:	466d      	mov	r5, sp
 8012276:	f103 020c 	add.w	r2, r3, #12
 801227a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801227e:	e885 0003 	stmia.w	r5, {r0, r1}
 8012282:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012284:	4620      	mov	r0, r4
 8012286:	f000 fa94 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Battery_Voltage);
 801228a:	4b32      	ldr	r3, [pc, #200]	@ (8012354 <initializeEmbeddedCli+0x9a0>)
 801228c:	681c      	ldr	r4, [r3, #0]
 801228e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012292:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 8012296:	466d      	mov	r5, sp
 8012298:	f103 020c 	add.w	r2, r3, #12
 801229c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80122a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80122a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80122a6:	4620      	mov	r0, r4
 80122a8:	f000 fa83 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, _port);
 80122ac:	4b29      	ldr	r3, [pc, #164]	@ (8012354 <initializeEmbeddedCli+0x9a0>)
 80122ae:	681c      	ldr	r4, [r3, #0]
 80122b0:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80122b4:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80122b8:	466d      	mov	r5, sp
 80122ba:	f103 020c 	add.w	r2, r3, #12
 80122be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80122c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80122c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80122c8:	4620      	mov	r0, r4
 80122ca:	f000 fa72 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, _showall);
 80122ce:	4b21      	ldr	r3, [pc, #132]	@ (8012354 <initializeEmbeddedCli+0x9a0>)
 80122d0:	681c      	ldr	r4, [r3, #0]
 80122d2:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80122d6:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 80122da:	466d      	mov	r5, sp
 80122dc:	f103 020c 	add.w	r2, r3, #12
 80122e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80122e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80122e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80122ea:	4620      	mov	r0, r4
 80122ec:	f000 fa61 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, getversion);
 80122f0:	4b18      	ldr	r3, [pc, #96]	@ (8012354 <initializeEmbeddedCli+0x9a0>)
 80122f2:	681c      	ldr	r4, [r3, #0]
 80122f4:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80122f8:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 80122fc:	466d      	mov	r5, sp
 80122fe:	f103 020c 	add.w	r2, r3, #12
 8012302:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012306:	e885 0003 	stmia.w	r5, {r0, r1}
 801230a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801230c:	4620      	mov	r0, r4
 801230e:	f000 fa50 	bl	80127b2 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, aboutdev);
 8012312:	4b10      	ldr	r3, [pc, #64]	@ (8012354 <initializeEmbeddedCli+0x9a0>)
 8012314:	681c      	ldr	r4, [r3, #0]
 8012316:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 801231a:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 801231e:	466d      	mov	r5, sp
 8012320:	f103 020c 	add.w	r2, r3, #12
 8012324:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012328:	e885 0003 	stmia.w	r5, {r0, r1}
 801232c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801232e:	4620      	mov	r0, r4
 8012330:	f000 fa3f 	bl	80127b2 <embeddedCliAddBinding>
	// Assign character write function
	cli->writeChar = writeCharToCli;
 8012334:	4b07      	ldr	r3, [pc, #28]	@ (8012354 <initializeEmbeddedCli+0x9a0>)
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	4a07      	ldr	r2, [pc, #28]	@ (8012358 <initializeEmbeddedCli+0x9a4>)
 801233a:	601a      	str	r2, [r3, #0]
	// cli->onCommand = onCommand;
	// CLI has now been initialized, set bool to true to enable interrupts.
	cliIsReady = true;
 801233c:	4b07      	ldr	r3, [pc, #28]	@ (801235c <initializeEmbeddedCli+0x9a8>)
 801233e:	2201      	movs	r2, #1
 8012340:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 8012342:	4b07      	ldr	r3, [pc, #28]	@ (8012360 <initializeEmbeddedCli+0x9ac>)
 8012344:	2200      	movs	r2, #0
 8012346:	701a      	strb	r2, [r3, #0]
}
 8012348:	bf00      	nop
 801234a:	f507 7752 	add.w	r7, r7, #840	@ 0x348
 801234e:	46bd      	mov	sp, r7
 8012350:	bdb0      	pop	{r4, r5, r7, pc}
 8012352:	bf00      	nop
 8012354:	20001b2c 	.word	0x20001b2c
 8012358:	0800f5a9 	.word	0x0800f5a9
 801235c:	20001b39 	.word	0x20001b39
 8012360:	20001b3a 	.word	0x20001b3a

08012364 <console_process>:

void console_process(void) {
 8012364:	b580      	push	{r7, lr}
 8012366:	af00      	add	r7, sp, #0
	embeddedCliProcess(cli);
 8012368:	4b03      	ldr	r3, [pc, #12]	@ (8012378 <console_process+0x14>)
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	4618      	mov	r0, r3
 801236e:	f000 f990 	bl	8012692 <embeddedCliProcess>
}
 8012372:	bf00      	nop
 8012374:	bd80      	pop	{r7, pc}
 8012376:	bf00      	nop
 8012378:	20001b2c 	.word	0x20001b2c

0801237c <console_uart_deinit>:

void console_uart_deinit() {
 801237c:	b580      	push	{r7, lr}
 801237e:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 8012380:	4803      	ldr	r0, [pc, #12]	@ (8012390 <console_uart_deinit+0x14>)
 8012382:	f7f9 ff93 	bl	800c2ac <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart1);
 8012386:	4802      	ldr	r0, [pc, #8]	@ (8012390 <console_uart_deinit+0x14>)
 8012388:	f7f1 fcfa 	bl	8003d80 <HAL_UART_MspDeInit>
}
 801238c:	bf00      	nop
 801238e:	bd80      	pop	{r7, pc}
 8012390:	20001a74 	.word	0x20001a74

08012394 <console_uart_init>:
void console_uart_init() {
 8012394:	b580      	push	{r7, lr}
 8012396:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 8012398:	4815      	ldr	r0, [pc, #84]	@ (80123f0 <console_uart_init+0x5c>)
 801239a:	f7f9 ff87 	bl	800c2ac <HAL_UART_DeInit>
	huart1.Instance = USART1;
 801239e:	4b14      	ldr	r3, [pc, #80]	@ (80123f0 <console_uart_init+0x5c>)
 80123a0:	4a14      	ldr	r2, [pc, #80]	@ (80123f4 <console_uart_init+0x60>)
 80123a2:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80123a4:	4b12      	ldr	r3, [pc, #72]	@ (80123f0 <console_uart_init+0x5c>)
 80123a6:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80123aa:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80123ac:	4b10      	ldr	r3, [pc, #64]	@ (80123f0 <console_uart_init+0x5c>)
 80123ae:	2200      	movs	r2, #0
 80123b0:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80123b2:	4b0f      	ldr	r3, [pc, #60]	@ (80123f0 <console_uart_init+0x5c>)
 80123b4:	2200      	movs	r2, #0
 80123b6:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80123b8:	4b0d      	ldr	r3, [pc, #52]	@ (80123f0 <console_uart_init+0x5c>)
 80123ba:	2200      	movs	r2, #0
 80123bc:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80123be:	4b0c      	ldr	r3, [pc, #48]	@ (80123f0 <console_uart_init+0x5c>)
 80123c0:	220c      	movs	r2, #12
 80123c2:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80123c4:	4b0a      	ldr	r3, [pc, #40]	@ (80123f0 <console_uart_init+0x5c>)
 80123c6:	2200      	movs	r2, #0
 80123c8:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80123ca:	4b09      	ldr	r3, [pc, #36]	@ (80123f0 <console_uart_init+0x5c>)
 80123cc:	2200      	movs	r2, #0
 80123ce:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80123d0:	4807      	ldr	r0, [pc, #28]	@ (80123f0 <console_uart_init+0x5c>)
 80123d2:	f7f9 ff1b 	bl	800c20c <HAL_UART_Init>
 80123d6:	4603      	mov	r3, r0
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d001      	beq.n	80123e0 <console_uart_init+0x4c>
		Error_Handler();
 80123dc:	f7f1 f9ae 	bl	800373c <Error_Handler>
	}
	HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer, UART_RX_BUFF_SIZE);
 80123e0:	2201      	movs	r2, #1
 80123e2:	4905      	ldr	r1, [pc, #20]	@ (80123f8 <console_uart_init+0x64>)
 80123e4:	4802      	ldr	r0, [pc, #8]	@ (80123f0 <console_uart_init+0x5c>)
 80123e6:	f7fa f81e 	bl	800c426 <HAL_UART_Receive_IT>
}
 80123ea:	bf00      	nop
 80123ec:	bd80      	pop	{r7, pc}
 80123ee:	bf00      	nop
 80123f0:	20001a74 	.word	0x20001a74
 80123f4:	40011000 	.word	0x40011000
 80123f8:	20001b38 	.word	0x20001b38

080123fc <console_init>:

void console_init(void) {
 80123fc:	b580      	push	{r7, lr}
 80123fe:	af00      	add	r7, sp, #0
	console_uart_init();
 8012400:	f7ff ffc8 	bl	8012394 <console_uart_init>
	initializeEmbeddedCli();
 8012404:	f7ff fad6 	bl	80119b4 <initializeEmbeddedCli>
	HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer, UART_RX_BUFF_SIZE);
 8012408:	2201      	movs	r2, #1
 801240a:	4903      	ldr	r1, [pc, #12]	@ (8012418 <console_init+0x1c>)
 801240c:	4803      	ldr	r0, [pc, #12]	@ (801241c <console_init+0x20>)
 801240e:	f7fa f80a 	bl	800c426 <HAL_UART_Receive_IT>
}
 8012412:	bf00      	nop
 8012414:	bd80      	pop	{r7, pc}
 8012416:	bf00      	nop
 8012418:	20001b38 	.word	0x20001b38
 801241c:	20001a74 	.word	0x20001a74

08012420 <embeddedCliDefaultConfig>:
 * @param pos - token position (counted from 1)
 * @return index of first char of specified token
 */
static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos);

EmbeddedCliConfig *embeddedCliDefaultConfig(void) {
 8012420:	b480      	push	{r7}
 8012422:	af00      	add	r7, sp, #0
    defaultConfig.rxBufferSize = 64;
 8012424:	4b0e      	ldr	r3, [pc, #56]	@ (8012460 <embeddedCliDefaultConfig+0x40>)
 8012426:	2240      	movs	r2, #64	@ 0x40
 8012428:	809a      	strh	r2, [r3, #4]
    defaultConfig.cmdBufferSize = 64;
 801242a:	4b0d      	ldr	r3, [pc, #52]	@ (8012460 <embeddedCliDefaultConfig+0x40>)
 801242c:	2240      	movs	r2, #64	@ 0x40
 801242e:	80da      	strh	r2, [r3, #6]
    defaultConfig.historyBufferSize = 128;
 8012430:	4b0b      	ldr	r3, [pc, #44]	@ (8012460 <embeddedCliDefaultConfig+0x40>)
 8012432:	2280      	movs	r2, #128	@ 0x80
 8012434:	811a      	strh	r2, [r3, #8]
    defaultConfig.cliBuffer = NULL;
 8012436:	4b0a      	ldr	r3, [pc, #40]	@ (8012460 <embeddedCliDefaultConfig+0x40>)
 8012438:	2200      	movs	r2, #0
 801243a:	60da      	str	r2, [r3, #12]
    defaultConfig.cliBufferSize = 0;
 801243c:	4b08      	ldr	r3, [pc, #32]	@ (8012460 <embeddedCliDefaultConfig+0x40>)
 801243e:	2200      	movs	r2, #0
 8012440:	821a      	strh	r2, [r3, #16]
    defaultConfig.maxBindingCount = 70;
 8012442:	4b07      	ldr	r3, [pc, #28]	@ (8012460 <embeddedCliDefaultConfig+0x40>)
 8012444:	2246      	movs	r2, #70	@ 0x46
 8012446:	815a      	strh	r2, [r3, #10]
    defaultConfig.enableAutoComplete = true;
 8012448:	4b05      	ldr	r3, [pc, #20]	@ (8012460 <embeddedCliDefaultConfig+0x40>)
 801244a:	2201      	movs	r2, #1
 801244c:	749a      	strb	r2, [r3, #18]
    defaultConfig.invitation = "> ";
 801244e:	4b04      	ldr	r3, [pc, #16]	@ (8012460 <embeddedCliDefaultConfig+0x40>)
 8012450:	4a04      	ldr	r2, [pc, #16]	@ (8012464 <embeddedCliDefaultConfig+0x44>)
 8012452:	601a      	str	r2, [r3, #0]
    return &defaultConfig;
 8012454:	4b02      	ldr	r3, [pc, #8]	@ (8012460 <embeddedCliDefaultConfig+0x40>)
}
 8012456:	4618      	mov	r0, r3
 8012458:	46bd      	mov	sp, r7
 801245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801245e:	4770      	bx	lr
 8012460:	20001b40 	.word	0x20001b40
 8012464:	0802465c 	.word	0x0802465c

08012468 <embeddedCliRequiredSize>:

uint16_t embeddedCliRequiredSize(EmbeddedCliConfig *config) {
 8012468:	b480      	push	{r7}
 801246a:	b085      	sub	sp, #20
 801246c:	af00      	add	r7, sp, #0
 801246e:	6078      	str	r0, [r7, #4]
    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	895b      	ldrh	r3, [r3, #10]
 8012474:	2201      	movs	r2, #1
 8012476:	4413      	add	r3, r2
 8012478:	81fb      	strh	r3, [r7, #14]
    return (uint16_t) (CLI_UINT_SIZE * (
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli)) +
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl)) +
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	889b      	ldrh	r3, [r3, #4]
 801247e:	3303      	adds	r3, #3
 8012480:	089a      	lsrs	r2, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	88db      	ldrh	r3, [r3, #6]
 8012486:	3303      	adds	r3, #3
 8012488:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 801248a:	441a      	add	r2, r3
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	891b      	ldrh	r3, [r3, #8]
 8012490:	3303      	adds	r3, #3
 8012492:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 8012494:	18d1      	adds	r1, r2, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 8012496:	89fa      	ldrh	r2, [r7, #14]
 8012498:	4613      	mov	r3, r2
 801249a:	009b      	lsls	r3, r3, #2
 801249c:	4413      	add	r3, r2
 801249e:	009b      	lsls	r3, r3, #2
 80124a0:	3303      	adds	r3, #3
 80124a2:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 80124a4:	18ca      	adds	r2, r1, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(uint8_t))));
 80124a6:	89fb      	ldrh	r3, [r7, #14]
 80124a8:	3303      	adds	r3, #3
 80124aa:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 80124ac:	4413      	add	r3, r2
 80124ae:	3311      	adds	r3, #17
    return (uint16_t) (CLI_UINT_SIZE * (
 80124b0:	b29b      	uxth	r3, r3
 80124b2:	009b      	lsls	r3, r3, #2
 80124b4:	b29b      	uxth	r3, r3
}
 80124b6:	4618      	mov	r0, r3
 80124b8:	3714      	adds	r7, #20
 80124ba:	46bd      	mov	sp, r7
 80124bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c0:	4770      	bx	lr

080124c2 <embeddedCliNew>:

EmbeddedCli *embeddedCliNew(EmbeddedCliConfig *config) {
 80124c2:	b580      	push	{r7, lr}
 80124c4:	b088      	sub	sp, #32
 80124c6:	af00      	add	r7, sp, #0
 80124c8:	6078      	str	r0, [r7, #4]
    EmbeddedCli *cli = NULL;
 80124ca:	2300      	movs	r3, #0
 80124cc:	61bb      	str	r3, [r7, #24]

    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	895b      	ldrh	r3, [r3, #10]
 80124d2:	2201      	movs	r2, #1
 80124d4:	4413      	add	r3, r2
 80124d6:	82fb      	strh	r3, [r7, #22]

    size_t totalSize = embeddedCliRequiredSize(config);
 80124d8:	6878      	ldr	r0, [r7, #4]
 80124da:	f7ff ffc5 	bl	8012468 <embeddedCliRequiredSize>
 80124de:	4603      	mov	r3, r0
 80124e0:	613b      	str	r3, [r7, #16]

    bool allocated = false;
 80124e2:	2300      	movs	r3, #0
 80124e4:	77fb      	strb	r3, [r7, #31]
    if (config->cliBuffer == NULL) {
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	68db      	ldr	r3, [r3, #12]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d10f      	bne.n	801250e <embeddedCliNew+0x4c>
        config->cliBuffer = (CLI_UINT *) malloc(totalSize); // malloc guarantees alignment.
 80124ee:	6938      	ldr	r0, [r7, #16]
 80124f0:	f00b fa02 	bl	801d8f8 <malloc>
 80124f4:	4603      	mov	r3, r0
 80124f6:	461a      	mov	r2, r3
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	60da      	str	r2, [r3, #12]
        if (config->cliBuffer == NULL)
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	68db      	ldr	r3, [r3, #12]
 8012500:	2b00      	cmp	r3, #0
 8012502:	d101      	bne.n	8012508 <embeddedCliNew+0x46>
            return NULL;
 8012504:	2300      	movs	r3, #0
 8012506:	e092      	b.n	801262e <embeddedCliNew+0x16c>
        allocated = true;
 8012508:	2301      	movs	r3, #1
 801250a:	77fb      	strb	r3, [r7, #31]
 801250c:	e007      	b.n	801251e <embeddedCliNew+0x5c>
    } else if (config->cliBufferSize < totalSize) {
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	8a1b      	ldrh	r3, [r3, #16]
 8012512:	461a      	mov	r2, r3
 8012514:	693b      	ldr	r3, [r7, #16]
 8012516:	4293      	cmp	r3, r2
 8012518:	d901      	bls.n	801251e <embeddedCliNew+0x5c>
        return NULL;
 801251a:	2300      	movs	r3, #0
 801251c:	e087      	b.n	801262e <embeddedCliNew+0x16c>
    }

    CLI_UINT *buf = config->cliBuffer;
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	68db      	ldr	r3, [r3, #12]
 8012522:	60fb      	str	r3, [r7, #12]

    memset(buf, 0, totalSize);
 8012524:	693a      	ldr	r2, [r7, #16]
 8012526:	2100      	movs	r1, #0
 8012528:	68f8      	ldr	r0, [r7, #12]
 801252a:	f00c fc63 	bl	801edf4 <memset>

    cli = (EmbeddedCli *) buf;
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	61bb      	str	r3, [r7, #24]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli));
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	3310      	adds	r3, #16
 8012536:	60fb      	str	r3, [r7, #12]

    cli->_impl = (EmbeddedCliImpl *) buf;
 8012538:	69bb      	ldr	r3, [r7, #24]
 801253a:	68fa      	ldr	r2, [r7, #12]
 801253c:	60da      	str	r2, [r3, #12]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl));
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	3334      	adds	r3, #52	@ 0x34
 8012542:	60fb      	str	r3, [r7, #12]

    PREPARE_IMPL(cli);
 8012544:	69bb      	ldr	r3, [r7, #24]
 8012546:	68db      	ldr	r3, [r3, #12]
 8012548:	60bb      	str	r3, [r7, #8]
    impl->rxBuffer.buf = (char *) buf;
 801254a:	68bb      	ldr	r3, [r7, #8]
 801254c:	68fa      	ldr	r2, [r7, #12]
 801254e:	611a      	str	r2, [r3, #16]
    buf += BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char));
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	889b      	ldrh	r3, [r3, #4]
 8012554:	3303      	adds	r3, #3
 8012556:	f023 0303 	bic.w	r3, r3, #3
 801255a:	68fa      	ldr	r2, [r7, #12]
 801255c:	4413      	add	r3, r2
 801255e:	60fb      	str	r3, [r7, #12]

    impl->cmdBuffer = (char *) buf;
 8012560:	68bb      	ldr	r3, [r7, #8]
 8012562:	68fa      	ldr	r2, [r7, #12]
 8012564:	61da      	str	r2, [r3, #28]
    buf += BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char));
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	88db      	ldrh	r3, [r3, #6]
 801256a:	3303      	adds	r3, #3
 801256c:	f023 0303 	bic.w	r3, r3, #3
 8012570:	68fa      	ldr	r2, [r7, #12]
 8012572:	4413      	add	r3, r2
 8012574:	60fb      	str	r3, [r7, #12]

    impl->bindings = (CliCommandBinding *) buf;
 8012576:	68bb      	ldr	r3, [r7, #8]
 8012578:	68fa      	ldr	r2, [r7, #12]
 801257a:	625a      	str	r2, [r3, #36]	@ 0x24
    buf += BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding));
 801257c:	8afa      	ldrh	r2, [r7, #22]
 801257e:	4613      	mov	r3, r2
 8012580:	009b      	lsls	r3, r3, #2
 8012582:	4413      	add	r3, r2
 8012584:	009b      	lsls	r3, r3, #2
 8012586:	3303      	adds	r3, #3
 8012588:	f023 0303 	bic.w	r3, r3, #3
 801258c:	68fa      	ldr	r2, [r7, #12]
 801258e:	4413      	add	r3, r2
 8012590:	60fb      	str	r3, [r7, #12]

    impl->bindingsFlags = (uint8_t *) buf;
 8012592:	68bb      	ldr	r3, [r7, #8]
 8012594:	68fa      	ldr	r2, [r7, #12]
 8012596:	629a      	str	r2, [r3, #40]	@ 0x28
    buf += BYTES_TO_CLI_UINTS(bindingCount);
 8012598:	8afb      	ldrh	r3, [r7, #22]
 801259a:	3303      	adds	r3, #3
 801259c:	f023 0303 	bic.w	r3, r3, #3
 80125a0:	68fa      	ldr	r2, [r7, #12]
 80125a2:	4413      	add	r3, r2
 80125a4:	60fb      	str	r3, [r7, #12]

    impl->history.buf = (char *) buf;
 80125a6:	68bb      	ldr	r3, [r7, #8]
 80125a8:	68fa      	ldr	r2, [r7, #12]
 80125aa:	605a      	str	r2, [r3, #4]
    impl->history.bufferSize = config->historyBufferSize;
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	891a      	ldrh	r2, [r3, #8]
 80125b0:	68bb      	ldr	r3, [r7, #8]
 80125b2:	811a      	strh	r2, [r3, #8]

    if (allocated)
 80125b4:	7ffb      	ldrb	r3, [r7, #31]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d008      	beq.n	80125cc <embeddedCliNew+0x10a>
        SET_FLAG(impl->flags, CLI_FLAG_ALLOCATED);
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80125c0:	f043 0304 	orr.w	r3, r3, #4
 80125c4:	b2da      	uxtb	r2, r3
 80125c6:	68bb      	ldr	r3, [r7, #8]
 80125c8:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    if (config->enableAutoComplete)
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	7c9b      	ldrb	r3, [r3, #18]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d008      	beq.n	80125e6 <embeddedCliNew+0x124>
        SET_FLAG(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED);
 80125d4:	68bb      	ldr	r3, [r7, #8]
 80125d6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80125da:	f043 0320 	orr.w	r3, r3, #32
 80125de:	b2da      	uxtb	r2, r3
 80125e0:	68bb      	ldr	r3, [r7, #8]
 80125e2:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    impl->rxBuffer.size = config->rxBufferSize;
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	889a      	ldrh	r2, [r3, #4]
 80125ea:	68bb      	ldr	r3, [r7, #8]
 80125ec:	831a      	strh	r2, [r3, #24]
    impl->rxBuffer.front = 0;
 80125ee:	68bb      	ldr	r3, [r7, #8]
 80125f0:	2200      	movs	r2, #0
 80125f2:	829a      	strh	r2, [r3, #20]
    impl->rxBuffer.back = 0;
 80125f4:	68bb      	ldr	r3, [r7, #8]
 80125f6:	2200      	movs	r2, #0
 80125f8:	82da      	strh	r2, [r3, #22]
    impl->cmdMaxSize = config->cmdBufferSize;
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	88da      	ldrh	r2, [r3, #6]
 80125fe:	68bb      	ldr	r3, [r7, #8]
 8012600:	845a      	strh	r2, [r3, #34]	@ 0x22
    impl->bindingsCount = 0;
 8012602:	68bb      	ldr	r3, [r7, #8]
 8012604:	2200      	movs	r2, #0
 8012606:	859a      	strh	r2, [r3, #44]	@ 0x2c
    impl->maxBindingsCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	895b      	ldrh	r3, [r3, #10]
 801260c:	2201      	movs	r2, #1
 801260e:	4413      	add	r3, r2
 8012610:	b29a      	uxth	r2, r3
 8012612:	68bb      	ldr	r3, [r7, #8]
 8012614:	85da      	strh	r2, [r3, #46]	@ 0x2e
    impl->lastChar = '\0';
 8012616:	68bb      	ldr	r3, [r7, #8]
 8012618:	2200      	movs	r2, #0
 801261a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    impl->invitation = config->invitation;
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	681a      	ldr	r2, [r3, #0]
 8012622:	68bb      	ldr	r3, [r7, #8]
 8012624:	601a      	str	r2, [r3, #0]

    initInternalBindings(cli);
 8012626:	69b8      	ldr	r0, [r7, #24]
 8012628:	f000 fc5e 	bl	8012ee8 <initInternalBindings>

    return cli;
 801262c:	69bb      	ldr	r3, [r7, #24]
}
 801262e:	4618      	mov	r0, r3
 8012630:	3720      	adds	r7, #32
 8012632:	46bd      	mov	sp, r7
 8012634:	bd80      	pop	{r7, pc}

08012636 <embeddedCliNewDefault>:

EmbeddedCli *embeddedCliNewDefault(void) {
 8012636:	b580      	push	{r7, lr}
 8012638:	af00      	add	r7, sp, #0
    return embeddedCliNew(embeddedCliDefaultConfig());
 801263a:	f7ff fef1 	bl	8012420 <embeddedCliDefaultConfig>
 801263e:	4603      	mov	r3, r0
 8012640:	4618      	mov	r0, r3
 8012642:	f7ff ff3e 	bl	80124c2 <embeddedCliNew>
 8012646:	4603      	mov	r3, r0
}
 8012648:	4618      	mov	r0, r3
 801264a:	bd80      	pop	{r7, pc}

0801264c <embeddedCliReceiveChar>:

void embeddedCliReceiveChar(EmbeddedCli *cli, char c) {
 801264c:	b580      	push	{r7, lr}
 801264e:	b084      	sub	sp, #16
 8012650:	af00      	add	r7, sp, #0
 8012652:	6078      	str	r0, [r7, #4]
 8012654:	460b      	mov	r3, r1
 8012656:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	68db      	ldr	r3, [r3, #12]
 801265c:	60fb      	str	r3, [r7, #12]

    if (!fifoBufPush(&impl->rxBuffer, c)) {
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	3310      	adds	r3, #16
 8012662:	78fa      	ldrb	r2, [r7, #3]
 8012664:	4611      	mov	r1, r2
 8012666:	4618      	mov	r0, r3
 8012668:	f001 f865 	bl	8013736 <fifoBufPush>
 801266c:	4603      	mov	r3, r0
 801266e:	f083 0301 	eor.w	r3, r3, #1
 8012672:	b2db      	uxtb	r3, r3
 8012674:	2b00      	cmp	r3, #0
 8012676:	d008      	beq.n	801268a <embeddedCliReceiveChar+0x3e>
        SET_FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801267e:	f043 0301 	orr.w	r3, r3, #1
 8012682:	b2da      	uxtb	r2, r3
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    }
}
 801268a:	bf00      	nop
 801268c:	3710      	adds	r7, #16
 801268e:	46bd      	mov	sp, r7
 8012690:	bd80      	pop	{r7, pc}

08012692 <embeddedCliProcess>:

void embeddedCliProcess(EmbeddedCli *cli) {
 8012692:	b580      	push	{r7, lr}
 8012694:	b084      	sub	sp, #16
 8012696:	af00      	add	r7, sp, #0
 8012698:	6078      	str	r0, [r7, #4]
    if (cli->writeChar == NULL)
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	f000 8083 	beq.w	80127aa <embeddedCliProcess+0x118>
        return;

    PREPARE_IMPL(cli);
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	68db      	ldr	r3, [r3, #12]
 80126a8:	60fb      	str	r3, [r7, #12]


    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_INIT_COMPLETE)) {
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80126b0:	f003 0302 	and.w	r3, r3, #2
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d155      	bne.n	8012764 <embeddedCliProcess+0xd2>
        SET_FLAG(impl->flags, CLI_FLAG_INIT_COMPLETE);
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80126be:	f043 0302 	orr.w	r3, r3, #2
 80126c2:	b2da      	uxtb	r2, r3
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        writeToOutput(cli, impl->invitation);
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	4619      	mov	r1, r3
 80126d0:	6878      	ldr	r0, [r7, #4]
 80126d2:	f000 ff8f 	bl	80135f4 <writeToOutput>
    }

    while (fifoBufAvailable(&impl->rxBuffer)) {
 80126d6:	e045      	b.n	8012764 <embeddedCliProcess+0xd2>
        char c = fifoBufPop(&impl->rxBuffer);
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	3310      	adds	r3, #16
 80126dc:	4618      	mov	r0, r3
 80126de:	f001 f802 	bl	80136e6 <fifoBufPop>
 80126e2:	4603      	mov	r3, r0
 80126e4:	72fb      	strb	r3, [r7, #11]

        if (IS_FLAG_SET(impl->flags, CLI_FLAG_ESCAPE_MODE)) {
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80126ec:	f003 0308 	and.w	r3, r3, #8
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d005      	beq.n	8012700 <embeddedCliProcess+0x6e>
            onEscapedInput(cli, c);
 80126f4:	7afb      	ldrb	r3, [r7, #11]
 80126f6:	4619      	mov	r1, r3
 80126f8:	6878      	ldr	r0, [r7, #4]
 80126fa:	f000 fa17 	bl	8012b2c <onEscapedInput>
 80126fe:	e02a      	b.n	8012756 <embeddedCliProcess+0xc4>
        } else if (impl->lastChar == 0x1B && c == '[') {
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8012706:	2b1b      	cmp	r3, #27
 8012708:	d10c      	bne.n	8012724 <embeddedCliProcess+0x92>
 801270a:	7afb      	ldrb	r3, [r7, #11]
 801270c:	2b5b      	cmp	r3, #91	@ 0x5b
 801270e:	d109      	bne.n	8012724 <embeddedCliProcess+0x92>
            //enter escape mode
            SET_FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012716:	f043 0308 	orr.w	r3, r3, #8
 801271a:	b2da      	uxtb	r2, r3
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8012722:	e018      	b.n	8012756 <embeddedCliProcess+0xc4>
        } else if (isControlChar(c)) {
 8012724:	7afb      	ldrb	r3, [r7, #11]
 8012726:	4618      	mov	r0, r3
 8012728:	f000 ff85 	bl	8013636 <isControlChar>
 801272c:	4603      	mov	r3, r0
 801272e:	2b00      	cmp	r3, #0
 8012730:	d005      	beq.n	801273e <embeddedCliProcess+0xac>
            onControlInput(cli, c);
 8012732:	7afb      	ldrb	r3, [r7, #11]
 8012734:	4619      	mov	r1, r3
 8012736:	6878      	ldr	r0, [r7, #4]
 8012738:	f000 fa54 	bl	8012be4 <onControlInput>
 801273c:	e00b      	b.n	8012756 <embeddedCliProcess+0xc4>
        } else if (isDisplayableChar(c)) {
 801273e:	7afb      	ldrb	r3, [r7, #11]
 8012740:	4618      	mov	r0, r3
 8012742:	f000 ff98 	bl	8013676 <isDisplayableChar>
 8012746:	4603      	mov	r3, r0
 8012748:	2b00      	cmp	r3, #0
 801274a:	d004      	beq.n	8012756 <embeddedCliProcess+0xc4>
            onCharInput(cli, c);
 801274c:	7afb      	ldrb	r3, [r7, #11]
 801274e:	4619      	mov	r1, r3
 8012750:	6878      	ldr	r0, [r7, #4]
 8012752:	f000 fa17 	bl	8012b84 <onCharInput>
        }

        printLiveAutocompletion(cli);
 8012756:	6878      	ldr	r0, [r7, #4]
 8012758:	f000 fe35 	bl	80133c6 <printLiveAutocompletion>

        impl->lastChar = c;
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	7afa      	ldrb	r2, [r7, #11]
 8012760:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    while (fifoBufAvailable(&impl->rxBuffer)) {
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	3310      	adds	r3, #16
 8012768:	4618      	mov	r0, r3
 801276a:	f000 ff9b 	bl	80136a4 <fifoBufAvailable>
 801276e:	4603      	mov	r3, r0
 8012770:	2b00      	cmp	r3, #0
 8012772:	d1b1      	bne.n	80126d8 <embeddedCliProcess+0x46>
    }

    // discard unfinished command if overflow happened
    if (IS_FLAG_SET(impl->flags, CLI_FLAG_OVERFLOW)) {
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801277a:	f003 0301 	and.w	r3, r3, #1
 801277e:	2b00      	cmp	r3, #0
 8012780:	d014      	beq.n	80127ac <embeddedCliProcess+0x11a>
        impl->cmdSize = 0;
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	2200      	movs	r2, #0
 8012786:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	69db      	ldr	r3, [r3, #28]
 801278c:	68fa      	ldr	r2, [r7, #12]
 801278e:	8c12      	ldrh	r2, [r2, #32]
 8012790:	4413      	add	r3, r2
 8012792:	2200      	movs	r2, #0
 8012794:	701a      	strb	r2, [r3, #0]
        UNSET_U8FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801279c:	f023 0301 	bic.w	r3, r3, #1
 80127a0:	b2da      	uxtb	r2, r3
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 80127a8:	e000      	b.n	80127ac <embeddedCliProcess+0x11a>
        return;
 80127aa:	bf00      	nop
    }
}
 80127ac:	3710      	adds	r7, #16
 80127ae:	46bd      	mov	sp, r7
 80127b0:	bd80      	pop	{r7, pc}

080127b2 <embeddedCliAddBinding>:

bool embeddedCliAddBinding(EmbeddedCli *cli, CliCommandBinding binding) {
 80127b2:	b084      	sub	sp, #16
 80127b4:	b4b0      	push	{r4, r5, r7}
 80127b6:	b085      	sub	sp, #20
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
 80127bc:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80127c0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    PREPARE_IMPL(cli);
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	68db      	ldr	r3, [r3, #12]
 80127c8:	60fb      	str	r3, [r7, #12]
    if (impl->bindingsCount == impl->maxBindingsCount)
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80127d2:	429a      	cmp	r2, r3
 80127d4:	d101      	bne.n	80127da <embeddedCliAddBinding+0x28>
        return false;
 80127d6:	2300      	movs	r3, #0
 80127d8:	e017      	b.n	801280a <embeddedCliAddBinding+0x58>

    impl->bindings[impl->bindingsCount] = binding;
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80127e2:	4619      	mov	r1, r3
 80127e4:	460b      	mov	r3, r1
 80127e6:	009b      	lsls	r3, r3, #2
 80127e8:	440b      	add	r3, r1
 80127ea:	009b      	lsls	r3, r3, #2
 80127ec:	4413      	add	r3, r2
 80127ee:	461d      	mov	r5, r3
 80127f0:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80127f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80127f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80127f8:	6823      	ldr	r3, [r4, #0]
 80127fa:	602b      	str	r3, [r5, #0]

    ++impl->bindingsCount;
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012800:	3301      	adds	r3, #1
 8012802:	b29a      	uxth	r2, r3
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	859a      	strh	r2, [r3, #44]	@ 0x2c
    return true;
 8012808:	2301      	movs	r3, #1
}
 801280a:	4618      	mov	r0, r3
 801280c:	3714      	adds	r7, #20
 801280e:	46bd      	mov	sp, r7
 8012810:	bcb0      	pop	{r4, r5, r7}
 8012812:	b004      	add	sp, #16
 8012814:	4770      	bx	lr
	...

08012818 <embeddedCliPrint>:

void embeddedCliPrint(EmbeddedCli *cli, const char *string) {
 8012818:	b580      	push	{r7, lr}
 801281a:	b084      	sub	sp, #16
 801281c:	af00      	add	r7, sp, #0
 801281e:	6078      	str	r0, [r7, #4]
 8012820:	6039      	str	r1, [r7, #0]
    if (cli->writeChar == NULL)
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	2b00      	cmp	r3, #0
 8012828:	d031      	beq.n	801288e <embeddedCliPrint+0x76>
        return;

    PREPARE_IMPL(cli);
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	68db      	ldr	r3, [r3, #12]
 801282e:	60fb      	str	r3, [r7, #12]

    // remove chars for autocompletion and live command
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT))
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012836:	f003 0310 	and.w	r3, r3, #16
 801283a:	2b00      	cmp	r3, #0
 801283c:	d102      	bne.n	8012844 <embeddedCliPrint+0x2c>
        clearCurrentLine(cli);
 801283e:	6878      	ldr	r0, [r7, #4]
 8012840:	f000 fea6 	bl	8013590 <clearCurrentLine>

    // print provided string
    writeToOutput(cli, string);
 8012844:	6839      	ldr	r1, [r7, #0]
 8012846:	6878      	ldr	r0, [r7, #4]
 8012848:	f000 fed4 	bl	80135f4 <writeToOutput>
    writeToOutput(cli, lineBreak);
 801284c:	4b12      	ldr	r3, [pc, #72]	@ (8012898 <embeddedCliPrint+0x80>)
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	4619      	mov	r1, r3
 8012852:	6878      	ldr	r0, [r7, #4]
 8012854:	f000 fece 	bl	80135f4 <writeToOutput>

    // print current command back to screen
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT)) {
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801285e:	f003 0310 	and.w	r3, r3, #16
 8012862:	2b00      	cmp	r3, #0
 8012864:	d114      	bne.n	8012890 <embeddedCliPrint+0x78>
        writeToOutput(cli, impl->invitation);
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	4619      	mov	r1, r3
 801286c:	6878      	ldr	r0, [r7, #4]
 801286e:	f000 fec1 	bl	80135f4 <writeToOutput>
        writeToOutput(cli, impl->cmdBuffer);
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	69db      	ldr	r3, [r3, #28]
 8012876:	4619      	mov	r1, r3
 8012878:	6878      	ldr	r0, [r7, #4]
 801287a:	f000 febb 	bl	80135f4 <writeToOutput>
        impl->inputLineLength = impl->cmdSize;
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	8c1a      	ldrh	r2, [r3, #32]
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	861a      	strh	r2, [r3, #48]	@ 0x30

        printLiveAutocompletion(cli);
 8012886:	6878      	ldr	r0, [r7, #4]
 8012888:	f000 fd9d 	bl	80133c6 <printLiveAutocompletion>
 801288c:	e000      	b.n	8012890 <embeddedCliPrint+0x78>
        return;
 801288e:	bf00      	nop
    }
}
 8012890:	3710      	adds	r7, #16
 8012892:	46bd      	mov	sp, r7
 8012894:	bd80      	pop	{r7, pc}
 8012896:	bf00      	nop
 8012898:	20000024 	.word	0x20000024

0801289c <embeddedCliTokenizeArgs>:
        // allocation is done in single call to malloc, so need only single free
        free(cli);
    }
}

void embeddedCliTokenizeArgs(char *args) {
 801289c:	b580      	push	{r7, lr}
 801289e:	b088      	sub	sp, #32
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	6078      	str	r0, [r7, #4]
    if (args == NULL)
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d066      	beq.n	8012978 <embeddedCliTokenizeArgs+0xdc>
        return;

    // for now only space, but can add more later
    const char *separators = " ";
 80128aa:	4b35      	ldr	r3, [pc, #212]	@ (8012980 <embeddedCliTokenizeArgs+0xe4>)
 80128ac:	60fb      	str	r3, [r7, #12]

    // indicates that arg is quoted so separators are copied as is
    bool quotesEnabled = false;
 80128ae:	2300      	movs	r3, #0
 80128b0:	77fb      	strb	r3, [r7, #31]
    // indicates that previous char was a slash, so next char is copied as is
    bool escapeActivated = false;
 80128b2:	2300      	movs	r3, #0
 80128b4:	77bb      	strb	r3, [r7, #30]
    int insertPos = 0;
 80128b6:	2300      	movs	r3, #0
 80128b8:	61bb      	str	r3, [r7, #24]

    int i = 0;
 80128ba:	2300      	movs	r3, #0
 80128bc:	617b      	str	r3, [r7, #20]
    char currentChar;
    while ((currentChar = args[i]) != '\0') {
 80128be:	e047      	b.n	8012950 <embeddedCliTokenizeArgs+0xb4>
        ++i;
 80128c0:	697b      	ldr	r3, [r7, #20]
 80128c2:	3301      	adds	r3, #1
 80128c4:	617b      	str	r3, [r7, #20]

        if (escapeActivated) {
 80128c6:	7fbb      	ldrb	r3, [r7, #30]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d002      	beq.n	80128d2 <embeddedCliTokenizeArgs+0x36>
            escapeActivated = false;
 80128cc:	2300      	movs	r3, #0
 80128ce:	77bb      	strb	r3, [r7, #30]
 80128d0:	e029      	b.n	8012926 <embeddedCliTokenizeArgs+0x8a>
        } else if (currentChar == '\\') {
 80128d2:	7cfb      	ldrb	r3, [r7, #19]
 80128d4:	2b5c      	cmp	r3, #92	@ 0x5c
 80128d6:	d102      	bne.n	80128de <embeddedCliTokenizeArgs+0x42>
            escapeActivated = true;
 80128d8:	2301      	movs	r3, #1
 80128da:	77bb      	strb	r3, [r7, #30]
            continue;
 80128dc:	e038      	b.n	8012950 <embeddedCliTokenizeArgs+0xb4>
        } else if (currentChar == '"') {
 80128de:	7cfb      	ldrb	r3, [r7, #19]
 80128e0:	2b22      	cmp	r3, #34	@ 0x22
 80128e2:	d110      	bne.n	8012906 <embeddedCliTokenizeArgs+0x6a>
            quotesEnabled = !quotesEnabled;
 80128e4:	7ffb      	ldrb	r3, [r7, #31]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	bf14      	ite	ne
 80128ea:	2301      	movne	r3, #1
 80128ec:	2300      	moveq	r3, #0
 80128ee:	b2db      	uxtb	r3, r3
 80128f0:	f083 0301 	eor.w	r3, r3, #1
 80128f4:	b2db      	uxtb	r3, r3
 80128f6:	77fb      	strb	r3, [r7, #31]
 80128f8:	7ffb      	ldrb	r3, [r7, #31]
 80128fa:	f003 0301 	and.w	r3, r3, #1
 80128fe:	77fb      	strb	r3, [r7, #31]
            currentChar = '\0';
 8012900:	2300      	movs	r3, #0
 8012902:	74fb      	strb	r3, [r7, #19]
 8012904:	e00f      	b.n	8012926 <embeddedCliTokenizeArgs+0x8a>
        } else if (!quotesEnabled && strchr(separators, currentChar) != NULL) {
 8012906:	7ffb      	ldrb	r3, [r7, #31]
 8012908:	f083 0301 	eor.w	r3, r3, #1
 801290c:	b2db      	uxtb	r3, r3
 801290e:	2b00      	cmp	r3, #0
 8012910:	d009      	beq.n	8012926 <embeddedCliTokenizeArgs+0x8a>
 8012912:	7cfb      	ldrb	r3, [r7, #19]
 8012914:	4619      	mov	r1, r3
 8012916:	68f8      	ldr	r0, [r7, #12]
 8012918:	f00c fa74 	bl	801ee04 <strchr>
 801291c:	4603      	mov	r3, r0
 801291e:	2b00      	cmp	r3, #0
 8012920:	d001      	beq.n	8012926 <embeddedCliTokenizeArgs+0x8a>
            currentChar = '\0';
 8012922:	2300      	movs	r3, #0
 8012924:	74fb      	strb	r3, [r7, #19]
        }

        // null chars are only copied once and not copied to the beginning
        if (currentChar != '\0' || (insertPos > 0 && args[insertPos - 1] != '\0')) {
 8012926:	7cfb      	ldrb	r3, [r7, #19]
 8012928:	2b00      	cmp	r3, #0
 801292a:	d109      	bne.n	8012940 <embeddedCliTokenizeArgs+0xa4>
 801292c:	69bb      	ldr	r3, [r7, #24]
 801292e:	2b00      	cmp	r3, #0
 8012930:	dd0e      	ble.n	8012950 <embeddedCliTokenizeArgs+0xb4>
 8012932:	69bb      	ldr	r3, [r7, #24]
 8012934:	3b01      	subs	r3, #1
 8012936:	687a      	ldr	r2, [r7, #4]
 8012938:	4413      	add	r3, r2
 801293a:	781b      	ldrb	r3, [r3, #0]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d007      	beq.n	8012950 <embeddedCliTokenizeArgs+0xb4>
            args[insertPos] = currentChar;
 8012940:	69bb      	ldr	r3, [r7, #24]
 8012942:	687a      	ldr	r2, [r7, #4]
 8012944:	4413      	add	r3, r2
 8012946:	7cfa      	ldrb	r2, [r7, #19]
 8012948:	701a      	strb	r2, [r3, #0]
            ++insertPos;
 801294a:	69bb      	ldr	r3, [r7, #24]
 801294c:	3301      	adds	r3, #1
 801294e:	61bb      	str	r3, [r7, #24]
    while ((currentChar = args[i]) != '\0') {
 8012950:	697b      	ldr	r3, [r7, #20]
 8012952:	687a      	ldr	r2, [r7, #4]
 8012954:	4413      	add	r3, r2
 8012956:	781b      	ldrb	r3, [r3, #0]
 8012958:	74fb      	strb	r3, [r7, #19]
 801295a:	7cfb      	ldrb	r3, [r7, #19]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d1af      	bne.n	80128c0 <embeddedCliTokenizeArgs+0x24>
        }
    }

    // make args double null-terminated source buffer must be big enough to contain extra spaces
    args[insertPos] = '\0';
 8012960:	69bb      	ldr	r3, [r7, #24]
 8012962:	687a      	ldr	r2, [r7, #4]
 8012964:	4413      	add	r3, r2
 8012966:	2200      	movs	r2, #0
 8012968:	701a      	strb	r2, [r3, #0]
    args[insertPos + 1] = '\0';
 801296a:	69bb      	ldr	r3, [r7, #24]
 801296c:	3301      	adds	r3, #1
 801296e:	687a      	ldr	r2, [r7, #4]
 8012970:	4413      	add	r3, r2
 8012972:	2200      	movs	r2, #0
 8012974:	701a      	strb	r2, [r3, #0]
 8012976:	e000      	b.n	801297a <embeddedCliTokenizeArgs+0xde>
        return;
 8012978:	bf00      	nop
}
 801297a:	3720      	adds	r7, #32
 801297c:	46bd      	mov	sp, r7
 801297e:	bd80      	pop	{r7, pc}
 8012980:	08024660 	.word	0x08024660

08012984 <embeddedCliGetToken>:

const char *embeddedCliGetToken(const char *tokenizedStr, uint16_t pos) {
 8012984:	b580      	push	{r7, lr}
 8012986:	b084      	sub	sp, #16
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
 801298c:	460b      	mov	r3, r1
 801298e:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 8012990:	887b      	ldrh	r3, [r7, #2]
 8012992:	4619      	mov	r1, r3
 8012994:	6878      	ldr	r0, [r7, #4]
 8012996:	f000 ffd5 	bl	8013944 <getTokenPosition>
 801299a:	4603      	mov	r3, r0
 801299c:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 801299e:	89fb      	ldrh	r3, [r7, #14]
 80129a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80129a4:	4293      	cmp	r3, r2
 80129a6:	d003      	beq.n	80129b0 <embeddedCliGetToken+0x2c>
        return &tokenizedStr[i];
 80129a8:	89fb      	ldrh	r3, [r7, #14]
 80129aa:	687a      	ldr	r2, [r7, #4]
 80129ac:	4413      	add	r3, r2
 80129ae:	e000      	b.n	80129b2 <embeddedCliGetToken+0x2e>
    else
        return NULL;
 80129b0:	2300      	movs	r3, #0
}
 80129b2:	4618      	mov	r0, r3
 80129b4:	3710      	adds	r7, #16
 80129b6:	46bd      	mov	sp, r7
 80129b8:	bd80      	pop	{r7, pc}

080129ba <embeddedCliGetTokenVariable>:

char *embeddedCliGetTokenVariable(char *tokenizedStr, uint16_t pos) {
 80129ba:	b580      	push	{r7, lr}
 80129bc:	b084      	sub	sp, #16
 80129be:	af00      	add	r7, sp, #0
 80129c0:	6078      	str	r0, [r7, #4]
 80129c2:	460b      	mov	r3, r1
 80129c4:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 80129c6:	887b      	ldrh	r3, [r7, #2]
 80129c8:	4619      	mov	r1, r3
 80129ca:	6878      	ldr	r0, [r7, #4]
 80129cc:	f000 ffba 	bl	8013944 <getTokenPosition>
 80129d0:	4603      	mov	r3, r0
 80129d2:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 80129d4:	89fb      	ldrh	r3, [r7, #14]
 80129d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80129da:	4293      	cmp	r3, r2
 80129dc:	d003      	beq.n	80129e6 <embeddedCliGetTokenVariable+0x2c>
        return &tokenizedStr[i];
 80129de:	89fb      	ldrh	r3, [r7, #14]
 80129e0:	687a      	ldr	r2, [r7, #4]
 80129e2:	4413      	add	r3, r2
 80129e4:	e000      	b.n	80129e8 <embeddedCliGetTokenVariable+0x2e>
    else
        return NULL;
 80129e6:	2300      	movs	r3, #0
}
 80129e8:	4618      	mov	r0, r3
 80129ea:	3710      	adds	r7, #16
 80129ec:	46bd      	mov	sp, r7
 80129ee:	bd80      	pop	{r7, pc}

080129f0 <embeddedCliGetTokenCount>:
    }

    return 0;
}

uint16_t embeddedCliGetTokenCount(const char *tokenizedStr) {
 80129f0:	b480      	push	{r7}
 80129f2:	b085      	sub	sp, #20
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	6078      	str	r0, [r7, #4]
    if (tokenizedStr == NULL || tokenizedStr[0] == '\0')
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d003      	beq.n	8012a06 <embeddedCliGetTokenCount+0x16>
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	781b      	ldrb	r3, [r3, #0]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d101      	bne.n	8012a0a <embeddedCliGetTokenCount+0x1a>
        return 0;
 8012a06:	2300      	movs	r3, #0
 8012a08:	e019      	b.n	8012a3e <embeddedCliGetTokenCount+0x4e>

    int i = 0;
 8012a0a:	2300      	movs	r3, #0
 8012a0c:	60fb      	str	r3, [r7, #12]
    uint16_t tokenCount = 1;
 8012a0e:	2301      	movs	r3, #1
 8012a10:	817b      	strh	r3, [r7, #10]
    while (true) {
        if (tokenizedStr[i] == '\0') {
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	687a      	ldr	r2, [r7, #4]
 8012a16:	4413      	add	r3, r2
 8012a18:	781b      	ldrb	r3, [r3, #0]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d109      	bne.n	8012a32 <embeddedCliGetTokenCount+0x42>
            if (tokenizedStr[i + 1] == '\0')
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	3301      	adds	r3, #1
 8012a22:	687a      	ldr	r2, [r7, #4]
 8012a24:	4413      	add	r3, r2
 8012a26:	781b      	ldrb	r3, [r3, #0]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d006      	beq.n	8012a3a <embeddedCliGetTokenCount+0x4a>
                break;
            ++tokenCount;
 8012a2c:	897b      	ldrh	r3, [r7, #10]
 8012a2e:	3301      	adds	r3, #1
 8012a30:	817b      	strh	r3, [r7, #10]
        }
        ++i;
 8012a32:	68fb      	ldr	r3, [r7, #12]
 8012a34:	3301      	adds	r3, #1
 8012a36:	60fb      	str	r3, [r7, #12]
        if (tokenizedStr[i] == '\0') {
 8012a38:	e7eb      	b.n	8012a12 <embeddedCliGetTokenCount+0x22>
                break;
 8012a3a:	bf00      	nop
    }

    return tokenCount;
 8012a3c:	897b      	ldrh	r3, [r7, #10]
}
 8012a3e:	4618      	mov	r0, r3
 8012a40:	3714      	adds	r7, #20
 8012a42:	46bd      	mov	sp, r7
 8012a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a48:	4770      	bx	lr
	...

08012a4c <navigateHistory>:

static void navigateHistory(EmbeddedCli *cli, bool navigateUp) {
 8012a4c:	b580      	push	{r7, lr}
 8012a4e:	b086      	sub	sp, #24
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	6078      	str	r0, [r7, #4]
 8012a54:	460b      	mov	r3, r1
 8012a56:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	68db      	ldr	r3, [r3, #12]
 8012a5c:	613b      	str	r3, [r7, #16]
    if (impl->history.itemsCount == 0 ||
 8012a5e:	693b      	ldr	r3, [r7, #16]
 8012a60:	899b      	ldrh	r3, [r3, #12]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d05c      	beq.n	8012b20 <navigateHistory+0xd4>
 8012a66:	78fb      	ldrb	r3, [r7, #3]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d005      	beq.n	8012a78 <navigateHistory+0x2c>
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 8012a6c:	693b      	ldr	r3, [r7, #16]
 8012a6e:	895a      	ldrh	r2, [r3, #10]
 8012a70:	693b      	ldr	r3, [r7, #16]
 8012a72:	899b      	ldrh	r3, [r3, #12]
 8012a74:	429a      	cmp	r2, r3
 8012a76:	d053      	beq.n	8012b20 <navigateHistory+0xd4>
        (!navigateUp && impl->history.current == 0))
 8012a78:	78fb      	ldrb	r3, [r7, #3]
 8012a7a:	f083 0301 	eor.w	r3, r3, #1
 8012a7e:	b2db      	uxtb	r3, r3
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d003      	beq.n	8012a8c <navigateHistory+0x40>
        (!navigateUp && impl->history.current == 0))
 8012a84:	693b      	ldr	r3, [r7, #16]
 8012a86:	895b      	ldrh	r3, [r3, #10]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d049      	beq.n	8012b20 <navigateHistory+0xd4>
        return;

    clearCurrentLine(cli);
 8012a8c:	6878      	ldr	r0, [r7, #4]
 8012a8e:	f000 fd7f 	bl	8013590 <clearCurrentLine>

    writeToOutput(cli, impl->invitation);
 8012a92:	693b      	ldr	r3, [r7, #16]
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	4619      	mov	r1, r3
 8012a98:	6878      	ldr	r0, [r7, #4]
 8012a9a:	f000 fdab 	bl	80135f4 <writeToOutput>

    if (navigateUp)
 8012a9e:	78fb      	ldrb	r3, [r7, #3]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d006      	beq.n	8012ab2 <navigateHistory+0x66>
        ++impl->history.current;
 8012aa4:	693b      	ldr	r3, [r7, #16]
 8012aa6:	895b      	ldrh	r3, [r3, #10]
 8012aa8:	3301      	adds	r3, #1
 8012aaa:	b29a      	uxth	r2, r3
 8012aac:	693b      	ldr	r3, [r7, #16]
 8012aae:	815a      	strh	r2, [r3, #10]
 8012ab0:	e005      	b.n	8012abe <navigateHistory+0x72>
    else
        --impl->history.current;
 8012ab2:	693b      	ldr	r3, [r7, #16]
 8012ab4:	895b      	ldrh	r3, [r3, #10]
 8012ab6:	3b01      	subs	r3, #1
 8012ab8:	b29a      	uxth	r2, r3
 8012aba:	693b      	ldr	r3, [r7, #16]
 8012abc:	815a      	strh	r2, [r3, #10]

    const char *item = historyGet(&impl->history, impl->history.current);
 8012abe:	693b      	ldr	r3, [r7, #16]
 8012ac0:	1d1a      	adds	r2, r3, #4
 8012ac2:	693b      	ldr	r3, [r7, #16]
 8012ac4:	895b      	ldrh	r3, [r3, #10]
 8012ac6:	4619      	mov	r1, r3
 8012ac8:	4610      	mov	r0, r2
 8012aca:	f000 fec2 	bl	8013852 <historyGet>
 8012ace:	6178      	str	r0, [r7, #20]
    // simple way to handle empty command the same way as others
    if (item == NULL)
 8012ad0:	697b      	ldr	r3, [r7, #20]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d101      	bne.n	8012ada <navigateHistory+0x8e>
        item = "";
 8012ad6:	4b14      	ldr	r3, [pc, #80]	@ (8012b28 <navigateHistory+0xdc>)
 8012ad8:	617b      	str	r3, [r7, #20]
    uint16_t len = (uint16_t) strlen(item);
 8012ada:	6978      	ldr	r0, [r7, #20]
 8012adc:	f7ed fbe0 	bl	80002a0 <strlen>
 8012ae0:	4603      	mov	r3, r0
 8012ae2:	81fb      	strh	r3, [r7, #14]
    memcpy(impl->cmdBuffer, item, len);
 8012ae4:	693b      	ldr	r3, [r7, #16]
 8012ae6:	69db      	ldr	r3, [r3, #28]
 8012ae8:	89fa      	ldrh	r2, [r7, #14]
 8012aea:	6979      	ldr	r1, [r7, #20]
 8012aec:	4618      	mov	r0, r3
 8012aee:	f00c fa98 	bl	801f022 <memcpy>
    impl->cmdBuffer[len] = '\0';
 8012af2:	693b      	ldr	r3, [r7, #16]
 8012af4:	69da      	ldr	r2, [r3, #28]
 8012af6:	89fb      	ldrh	r3, [r7, #14]
 8012af8:	4413      	add	r3, r2
 8012afa:	2200      	movs	r2, #0
 8012afc:	701a      	strb	r2, [r3, #0]
    impl->cmdSize = len;
 8012afe:	693b      	ldr	r3, [r7, #16]
 8012b00:	89fa      	ldrh	r2, [r7, #14]
 8012b02:	841a      	strh	r2, [r3, #32]

    writeToOutput(cli, impl->cmdBuffer);
 8012b04:	693b      	ldr	r3, [r7, #16]
 8012b06:	69db      	ldr	r3, [r3, #28]
 8012b08:	4619      	mov	r1, r3
 8012b0a:	6878      	ldr	r0, [r7, #4]
 8012b0c:	f000 fd72 	bl	80135f4 <writeToOutput>
    impl->inputLineLength = impl->cmdSize;
 8012b10:	693b      	ldr	r3, [r7, #16]
 8012b12:	8c1a      	ldrh	r2, [r3, #32]
 8012b14:	693b      	ldr	r3, [r7, #16]
 8012b16:	861a      	strh	r2, [r3, #48]	@ 0x30

    printLiveAutocompletion(cli);
 8012b18:	6878      	ldr	r0, [r7, #4]
 8012b1a:	f000 fc54 	bl	80133c6 <printLiveAutocompletion>
 8012b1e:	e000      	b.n	8012b22 <navigateHistory+0xd6>
        return;
 8012b20:	bf00      	nop
}
 8012b22:	3718      	adds	r7, #24
 8012b24:	46bd      	mov	sp, r7
 8012b26:	bd80      	pop	{r7, pc}
 8012b28:	08024664 	.word	0x08024664

08012b2c <onEscapedInput>:

static void onEscapedInput(EmbeddedCli *cli, char c) {
 8012b2c:	b580      	push	{r7, lr}
 8012b2e:	b084      	sub	sp, #16
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	6078      	str	r0, [r7, #4]
 8012b34:	460b      	mov	r3, r1
 8012b36:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	68db      	ldr	r3, [r3, #12]
 8012b3c:	60fb      	str	r3, [r7, #12]

    if (c >= 64 && c <= 126) {
 8012b3e:	78fb      	ldrb	r3, [r7, #3]
 8012b40:	2b3f      	cmp	r3, #63	@ 0x3f
 8012b42:	d91b      	bls.n	8012b7c <onEscapedInput+0x50>
 8012b44:	78fb      	ldrb	r3, [r7, #3]
 8012b46:	2b7e      	cmp	r3, #126	@ 0x7e
 8012b48:	d818      	bhi.n	8012b7c <onEscapedInput+0x50>
        // handle escape sequence
        UNSET_U8FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012b50:	f023 0308 	bic.w	r3, r3, #8
 8012b54:	b2da      	uxtb	r2, r3
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

        if (c == 'A' || c == 'B') {
 8012b5c:	78fb      	ldrb	r3, [r7, #3]
 8012b5e:	2b41      	cmp	r3, #65	@ 0x41
 8012b60:	d002      	beq.n	8012b68 <onEscapedInput+0x3c>
 8012b62:	78fb      	ldrb	r3, [r7, #3]
 8012b64:	2b42      	cmp	r3, #66	@ 0x42
 8012b66:	d109      	bne.n	8012b7c <onEscapedInput+0x50>
            // treat \e[..A as cursor up and \e[..B as cursor down
            // there might be extra chars between [ and A/B, just ignore them
            navigateHistory(cli, c == 'A');
 8012b68:	78fb      	ldrb	r3, [r7, #3]
 8012b6a:	2b41      	cmp	r3, #65	@ 0x41
 8012b6c:	bf0c      	ite	eq
 8012b6e:	2301      	moveq	r3, #1
 8012b70:	2300      	movne	r3, #0
 8012b72:	b2db      	uxtb	r3, r3
 8012b74:	4619      	mov	r1, r3
 8012b76:	6878      	ldr	r0, [r7, #4]
 8012b78:	f7ff ff68 	bl	8012a4c <navigateHistory>
        }
    }
}
 8012b7c:	bf00      	nop
 8012b7e:	3710      	adds	r7, #16
 8012b80:	46bd      	mov	sp, r7
 8012b82:	bd80      	pop	{r7, pc}

08012b84 <onCharInput>:

static void onCharInput(EmbeddedCli *cli, char c) {
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b084      	sub	sp, #16
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	6078      	str	r0, [r7, #4]
 8012b8c:	460b      	mov	r3, r1
 8012b8e:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	68db      	ldr	r3, [r3, #12]
 8012b94:	60fb      	str	r3, [r7, #12]

    // have to reserve two extra chars for command ending (used in tokenization)
    if (impl->cmdSize + 2 >= impl->cmdMaxSize)
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	8c1b      	ldrh	r3, [r3, #32]
 8012b9a:	3302      	adds	r3, #2
 8012b9c:	68fa      	ldr	r2, [r7, #12]
 8012b9e:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8012ba0:	4293      	cmp	r3, r2
 8012ba2:	da1a      	bge.n	8012bda <onCharInput+0x56>
        return;

    impl->cmdBuffer[impl->cmdSize] = c;
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	69db      	ldr	r3, [r3, #28]
 8012ba8:	68fa      	ldr	r2, [r7, #12]
 8012baa:	8c12      	ldrh	r2, [r2, #32]
 8012bac:	4413      	add	r3, r2
 8012bae:	78fa      	ldrb	r2, [r7, #3]
 8012bb0:	701a      	strb	r2, [r3, #0]
    ++impl->cmdSize;
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	8c1b      	ldrh	r3, [r3, #32]
 8012bb6:	3301      	adds	r3, #1
 8012bb8:	b29a      	uxth	r2, r3
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	841a      	strh	r2, [r3, #32]
    impl->cmdBuffer[impl->cmdSize] = '\0';
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	69db      	ldr	r3, [r3, #28]
 8012bc2:	68fa      	ldr	r2, [r7, #12]
 8012bc4:	8c12      	ldrh	r2, [r2, #32]
 8012bc6:	4413      	add	r3, r2
 8012bc8:	2200      	movs	r2, #0
 8012bca:	701a      	strb	r2, [r3, #0]

    cli->writeChar(cli, c);
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	78fa      	ldrb	r2, [r7, #3]
 8012bd2:	4611      	mov	r1, r2
 8012bd4:	6878      	ldr	r0, [r7, #4]
 8012bd6:	4798      	blx	r3
 8012bd8:	e000      	b.n	8012bdc <onCharInput+0x58>
        return;
 8012bda:	bf00      	nop
}
 8012bdc:	3710      	adds	r7, #16
 8012bde:	46bd      	mov	sp, r7
 8012be0:	bd80      	pop	{r7, pc}
	...

08012be4 <onControlInput>:

static void onControlInput(EmbeddedCli *cli, char c) {
 8012be4:	b580      	push	{r7, lr}
 8012be6:	b084      	sub	sp, #16
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	6078      	str	r0, [r7, #4]
 8012bec:	460b      	mov	r3, r1
 8012bee:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	68db      	ldr	r3, [r3, #12]
 8012bf4:	60fb      	str	r3, [r7, #12]

    // process \r\n and \n\r as single \r\n command
    if ((impl->lastChar == '\r' && c == '\n') ||
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8012bfc:	2b0d      	cmp	r3, #13
 8012bfe:	d102      	bne.n	8012c06 <onControlInput+0x22>
 8012c00:	78fb      	ldrb	r3, [r7, #3]
 8012c02:	2b0a      	cmp	r3, #10
 8012c04:	d062      	beq.n	8012ccc <onControlInput+0xe8>
        (impl->lastChar == '\n' && c == '\r'))
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
    if ((impl->lastChar == '\r' && c == '\n') ||
 8012c0c:	2b0a      	cmp	r3, #10
 8012c0e:	d102      	bne.n	8012c16 <onControlInput+0x32>
        (impl->lastChar == '\n' && c == '\r'))
 8012c10:	78fb      	ldrb	r3, [r7, #3]
 8012c12:	2b0d      	cmp	r3, #13
 8012c14:	d05a      	beq.n	8012ccc <onControlInput+0xe8>
        return;

    if (c == '\r' || c == '\n') {
 8012c16:	78fb      	ldrb	r3, [r7, #3]
 8012c18:	2b0d      	cmp	r3, #13
 8012c1a:	d002      	beq.n	8012c22 <onControlInput+0x3e>
 8012c1c:	78fb      	ldrb	r3, [r7, #3]
 8012c1e:	2b0a      	cmp	r3, #10
 8012c20:	d126      	bne.n	8012c70 <onControlInput+0x8c>
        // try to autocomplete command and then process it
        onAutocompleteRequest(cli);
 8012c22:	6878      	ldr	r0, [r7, #4]
 8012c24:	f000 fc2a 	bl	801347c <onAutocompleteRequest>

        writeToOutput(cli, lineBreak);
 8012c28:	4b2a      	ldr	r3, [pc, #168]	@ (8012cd4 <onControlInput+0xf0>)
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	4619      	mov	r1, r3
 8012c2e:	6878      	ldr	r0, [r7, #4]
 8012c30:	f000 fce0 	bl	80135f4 <writeToOutput>

        if (impl->cmdSize > 0)
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	8c1b      	ldrh	r3, [r3, #32]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d002      	beq.n	8012c42 <onControlInput+0x5e>
            parseCommand(cli);
 8012c3c:	6878      	ldr	r0, [r7, #4]
 8012c3e:	f000 f84b 	bl	8012cd8 <parseCommand>
        impl->cmdSize = 0;
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	2200      	movs	r2, #0
 8012c46:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	69db      	ldr	r3, [r3, #28]
 8012c4c:	68fa      	ldr	r2, [r7, #12]
 8012c4e:	8c12      	ldrh	r2, [r2, #32]
 8012c50:	4413      	add	r3, r2
 8012c52:	2200      	movs	r2, #0
 8012c54:	701a      	strb	r2, [r3, #0]
        impl->inputLineLength = 0;
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	2200      	movs	r2, #0
 8012c5a:	861a      	strh	r2, [r3, #48]	@ 0x30
        impl->history.current = 0;
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	2200      	movs	r2, #0
 8012c60:	815a      	strh	r2, [r3, #10]

        writeToOutput(cli, impl->invitation);
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	4619      	mov	r1, r3
 8012c68:	6878      	ldr	r0, [r7, #4]
 8012c6a:	f000 fcc3 	bl	80135f4 <writeToOutput>
 8012c6e:	e02e      	b.n	8012cce <onControlInput+0xea>
    } else if ((c == '\b' || c == 0x7F) && impl->cmdSize > 0) {
 8012c70:	78fb      	ldrb	r3, [r7, #3]
 8012c72:	2b08      	cmp	r3, #8
 8012c74:	d002      	beq.n	8012c7c <onControlInput+0x98>
 8012c76:	78fb      	ldrb	r3, [r7, #3]
 8012c78:	2b7f      	cmp	r3, #127	@ 0x7f
 8012c7a:	d120      	bne.n	8012cbe <onControlInput+0xda>
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	8c1b      	ldrh	r3, [r3, #32]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d01c      	beq.n	8012cbe <onControlInput+0xda>
        // remove char from screen
        cli->writeChar(cli, '\b');
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	2108      	movs	r1, #8
 8012c8a:	6878      	ldr	r0, [r7, #4]
 8012c8c:	4798      	blx	r3
        cli->writeChar(cli, ' ');
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	2120      	movs	r1, #32
 8012c94:	6878      	ldr	r0, [r7, #4]
 8012c96:	4798      	blx	r3
        cli->writeChar(cli, '\b');
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	2108      	movs	r1, #8
 8012c9e:	6878      	ldr	r0, [r7, #4]
 8012ca0:	4798      	blx	r3
        // and from buffer
        --impl->cmdSize;
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	8c1b      	ldrh	r3, [r3, #32]
 8012ca6:	3b01      	subs	r3, #1
 8012ca8:	b29a      	uxth	r2, r3
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	69db      	ldr	r3, [r3, #28]
 8012cb2:	68fa      	ldr	r2, [r7, #12]
 8012cb4:	8c12      	ldrh	r2, [r2, #32]
 8012cb6:	4413      	add	r3, r2
 8012cb8:	2200      	movs	r2, #0
 8012cba:	701a      	strb	r2, [r3, #0]
 8012cbc:	e007      	b.n	8012cce <onControlInput+0xea>
    } else if (c == '\t') {
 8012cbe:	78fb      	ldrb	r3, [r7, #3]
 8012cc0:	2b09      	cmp	r3, #9
 8012cc2:	d104      	bne.n	8012cce <onControlInput+0xea>
        onAutocompleteRequest(cli);
 8012cc4:	6878      	ldr	r0, [r7, #4]
 8012cc6:	f000 fbd9 	bl	801347c <onAutocompleteRequest>
 8012cca:	e000      	b.n	8012cce <onControlInput+0xea>
        return;
 8012ccc:	bf00      	nop
    }

}
 8012cce:	3710      	adds	r7, #16
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	bd80      	pop	{r7, pc}
 8012cd4:	20000024 	.word	0x20000024

08012cd8 <parseCommand>:

static void parseCommand(EmbeddedCli *cli) {
 8012cd8:	b590      	push	{r4, r7, lr}
 8012cda:	b08f      	sub	sp, #60	@ 0x3c
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	68db      	ldr	r3, [r3, #12]
 8012ce4:	61bb      	str	r3, [r7, #24]

    bool isEmpty = true;
 8012ce6:	2301      	movs	r3, #1
 8012ce8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    for (int i = 0; i < impl->cmdSize; ++i) {
 8012cec:	2300      	movs	r3, #0
 8012cee:	633b      	str	r3, [r7, #48]	@ 0x30
 8012cf0:	e00d      	b.n	8012d0e <parseCommand+0x36>
        if (impl->cmdBuffer[i] != ' ') {
 8012cf2:	69bb      	ldr	r3, [r7, #24]
 8012cf4:	69da      	ldr	r2, [r3, #28]
 8012cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cf8:	4413      	add	r3, r2
 8012cfa:	781b      	ldrb	r3, [r3, #0]
 8012cfc:	2b20      	cmp	r3, #32
 8012cfe:	d003      	beq.n	8012d08 <parseCommand+0x30>
            isEmpty = false;
 8012d00:	2300      	movs	r3, #0
 8012d02:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            break;
 8012d06:	e008      	b.n	8012d1a <parseCommand+0x42>
    for (int i = 0; i < impl->cmdSize; ++i) {
 8012d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d0a:	3301      	adds	r3, #1
 8012d0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8012d0e:	69bb      	ldr	r3, [r7, #24]
 8012d10:	8c1b      	ldrh	r3, [r3, #32]
 8012d12:	461a      	mov	r2, r3
 8012d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d16:	4293      	cmp	r3, r2
 8012d18:	dbeb      	blt.n	8012cf2 <parseCommand+0x1a>
        }
    }
    // do not process empty commands
    if (isEmpty)
 8012d1a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	f040 80dc 	bne.w	8012edc <parseCommand+0x204>
        return;
    // push command to history before buffer is modified
    historyPut(&impl->history, impl->cmdBuffer);
 8012d24:	69bb      	ldr	r3, [r7, #24]
 8012d26:	1d1a      	adds	r2, r3, #4
 8012d28:	69bb      	ldr	r3, [r7, #24]
 8012d2a:	69db      	ldr	r3, [r3, #28]
 8012d2c:	4619      	mov	r1, r3
 8012d2e:	4610      	mov	r0, r2
 8012d30:	f000 fd2b 	bl	801378a <historyPut>

    char *cmdName = NULL;
 8012d34:	2300      	movs	r3, #0
 8012d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char *cmdArgs = NULL;
 8012d38:	2300      	movs	r3, #0
 8012d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    bool nameFinished = false;
 8012d3c:	2300      	movs	r3, #0
 8012d3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // find command name and command args inside command buffer
    for (int i = 0; i < impl->cmdSize; ++i) {
 8012d42:	2300      	movs	r3, #0
 8012d44:	623b      	str	r3, [r7, #32]
 8012d46:	e030      	b.n	8012daa <parseCommand+0xd2>
        char c = impl->cmdBuffer[i];
 8012d48:	69bb      	ldr	r3, [r7, #24]
 8012d4a:	69da      	ldr	r2, [r3, #28]
 8012d4c:	6a3b      	ldr	r3, [r7, #32]
 8012d4e:	4413      	add	r3, r2
 8012d50:	781b      	ldrb	r3, [r3, #0]
 8012d52:	75fb      	strb	r3, [r7, #23]

        if (c == ' ') {
 8012d54:	7dfb      	ldrb	r3, [r7, #23]
 8012d56:	2b20      	cmp	r3, #32
 8012d58:	d10f      	bne.n	8012d7a <parseCommand+0xa2>
            // all spaces between name and args are filled with zeros
            // so name is a correct null-terminated string
            if (cmdArgs == NULL)
 8012d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d105      	bne.n	8012d6c <parseCommand+0x94>
                impl->cmdBuffer[i] = '\0';
 8012d60:	69bb      	ldr	r3, [r7, #24]
 8012d62:	69da      	ldr	r2, [r3, #28]
 8012d64:	6a3b      	ldr	r3, [r7, #32]
 8012d66:	4413      	add	r3, r2
 8012d68:	2200      	movs	r2, #0
 8012d6a:	701a      	strb	r2, [r3, #0]
            if (cmdName != NULL)
 8012d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d018      	beq.n	8012da4 <parseCommand+0xcc>
                nameFinished = true;
 8012d72:	2301      	movs	r3, #1
 8012d74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012d78:	e014      	b.n	8012da4 <parseCommand+0xcc>

        } else if (cmdName == NULL) {
 8012d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d105      	bne.n	8012d8c <parseCommand+0xb4>
            cmdName = &impl->cmdBuffer[i];
 8012d80:	69bb      	ldr	r3, [r7, #24]
 8012d82:	69da      	ldr	r2, [r3, #28]
 8012d84:	6a3b      	ldr	r3, [r7, #32]
 8012d86:	4413      	add	r3, r2
 8012d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012d8a:	e00b      	b.n	8012da4 <parseCommand+0xcc>
        } else if (cmdArgs == NULL && nameFinished) {
 8012d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d108      	bne.n	8012da4 <parseCommand+0xcc>
 8012d92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d004      	beq.n	8012da4 <parseCommand+0xcc>
            cmdArgs = &impl->cmdBuffer[i];
 8012d9a:	69bb      	ldr	r3, [r7, #24]
 8012d9c:	69da      	ldr	r2, [r3, #28]
 8012d9e:	6a3b      	ldr	r3, [r7, #32]
 8012da0:	4413      	add	r3, r2
 8012da2:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (int i = 0; i < impl->cmdSize; ++i) {
 8012da4:	6a3b      	ldr	r3, [r7, #32]
 8012da6:	3301      	adds	r3, #1
 8012da8:	623b      	str	r3, [r7, #32]
 8012daa:	69bb      	ldr	r3, [r7, #24]
 8012dac:	8c1b      	ldrh	r3, [r3, #32]
 8012dae:	461a      	mov	r2, r3
 8012db0:	6a3b      	ldr	r3, [r7, #32]
 8012db2:	4293      	cmp	r3, r2
 8012db4:	dbc8      	blt.n	8012d48 <parseCommand+0x70>
        }
    }

    // we keep two last bytes in cmd buffer reserved so cmdSize is always by 2
    // less than cmdMaxSize
    impl->cmdBuffer[impl->cmdSize + 1] = '\0';
 8012db6:	69bb      	ldr	r3, [r7, #24]
 8012db8:	69da      	ldr	r2, [r3, #28]
 8012dba:	69bb      	ldr	r3, [r7, #24]
 8012dbc:	8c1b      	ldrh	r3, [r3, #32]
 8012dbe:	3301      	adds	r3, #1
 8012dc0:	4413      	add	r3, r2
 8012dc2:	2200      	movs	r2, #0
 8012dc4:	701a      	strb	r2, [r3, #0]

    if (cmdName == NULL)
 8012dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	f000 8089 	beq.w	8012ee0 <parseCommand+0x208>
        return;

    // try to find command in bindings
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8012dce:	2300      	movs	r3, #0
 8012dd0:	61fb      	str	r3, [r7, #28]
 8012dd2:	e054      	b.n	8012e7e <parseCommand+0x1a6>
        if (strcmp(cmdName, impl->bindings[i].name) == 0) {
 8012dd4:	69bb      	ldr	r3, [r7, #24]
 8012dd6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012dd8:	69fa      	ldr	r2, [r7, #28]
 8012dda:	4613      	mov	r3, r2
 8012ddc:	009b      	lsls	r3, r3, #2
 8012dde:	4413      	add	r3, r2
 8012de0:	009b      	lsls	r3, r3, #2
 8012de2:	440b      	add	r3, r1
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	4619      	mov	r1, r3
 8012de8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012dea:	f7ed f9f9 	bl	80001e0 <strcmp>
 8012dee:	4603      	mov	r3, r0
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d141      	bne.n	8012e78 <parseCommand+0x1a0>
            if (impl->bindings[i].binding == NULL)
 8012df4:	69bb      	ldr	r3, [r7, #24]
 8012df6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012df8:	69fa      	ldr	r2, [r7, #28]
 8012dfa:	4613      	mov	r3, r2
 8012dfc:	009b      	lsls	r3, r3, #2
 8012dfe:	4413      	add	r3, r2
 8012e00:	009b      	lsls	r3, r3, #2
 8012e02:	440b      	add	r3, r1
 8012e04:	691b      	ldr	r3, [r3, #16]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d040      	beq.n	8012e8c <parseCommand+0x1b4>
                break;

            if (impl->bindings[i].tokenizeArgs)
 8012e0a:	69bb      	ldr	r3, [r7, #24]
 8012e0c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012e0e:	69fa      	ldr	r2, [r7, #28]
 8012e10:	4613      	mov	r3, r2
 8012e12:	009b      	lsls	r3, r3, #2
 8012e14:	4413      	add	r3, r2
 8012e16:	009b      	lsls	r3, r3, #2
 8012e18:	440b      	add	r3, r1
 8012e1a:	7a1b      	ldrb	r3, [r3, #8]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d002      	beq.n	8012e26 <parseCommand+0x14e>
                embeddedCliTokenizeArgs(cmdArgs);
 8012e20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012e22:	f7ff fd3b 	bl	801289c <embeddedCliTokenizeArgs>
            // currently, output is blank line, so we can just print directly
            SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8012e26:	69bb      	ldr	r3, [r7, #24]
 8012e28:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012e2c:	f043 0310 	orr.w	r3, r3, #16
 8012e30:	b2da      	uxtb	r2, r3
 8012e32:	69bb      	ldr	r3, [r7, #24]
 8012e34:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            impl->bindings[i].binding(cli, cmdArgs, impl->bindings[i].context);
 8012e38:	69bb      	ldr	r3, [r7, #24]
 8012e3a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012e3c:	69fa      	ldr	r2, [r7, #28]
 8012e3e:	4613      	mov	r3, r2
 8012e40:	009b      	lsls	r3, r3, #2
 8012e42:	4413      	add	r3, r2
 8012e44:	009b      	lsls	r3, r3, #2
 8012e46:	440b      	add	r3, r1
 8012e48:	691c      	ldr	r4, [r3, #16]
 8012e4a:	69bb      	ldr	r3, [r7, #24]
 8012e4c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012e4e:	69fa      	ldr	r2, [r7, #28]
 8012e50:	4613      	mov	r3, r2
 8012e52:	009b      	lsls	r3, r3, #2
 8012e54:	4413      	add	r3, r2
 8012e56:	009b      	lsls	r3, r3, #2
 8012e58:	440b      	add	r3, r1
 8012e5a:	68db      	ldr	r3, [r3, #12]
 8012e5c:	461a      	mov	r2, r3
 8012e5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012e60:	6878      	ldr	r0, [r7, #4]
 8012e62:	47a0      	blx	r4
            UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8012e64:	69bb      	ldr	r3, [r7, #24]
 8012e66:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012e6a:	f023 0310 	bic.w	r3, r3, #16
 8012e6e:	b2da      	uxtb	r2, r3
 8012e70:	69bb      	ldr	r3, [r7, #24]
 8012e72:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            return;
 8012e76:	e034      	b.n	8012ee2 <parseCommand+0x20a>
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8012e78:	69fb      	ldr	r3, [r7, #28]
 8012e7a:	3301      	adds	r3, #1
 8012e7c:	61fb      	str	r3, [r7, #28]
 8012e7e:	69bb      	ldr	r3, [r7, #24]
 8012e80:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012e82:	461a      	mov	r2, r3
 8012e84:	69fb      	ldr	r3, [r7, #28]
 8012e86:	4293      	cmp	r3, r2
 8012e88:	dba4      	blt.n	8012dd4 <parseCommand+0xfc>
 8012e8a:	e000      	b.n	8012e8e <parseCommand+0x1b6>
                break;
 8012e8c:	bf00      	nop
        }
    }

    // command not found in bindings or binding was null
    // try to call default callback
    if (cli->onCommand != NULL) {
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	685b      	ldr	r3, [r3, #4]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d01d      	beq.n	8012ed2 <parseCommand+0x1fa>
        CliCommand command;
        command.name = cmdName;
 8012e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e98:	60fb      	str	r3, [r7, #12]
        command.args = cmdArgs;
 8012e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e9c:	613b      	str	r3, [r7, #16]

        // currently, output is blank line, so we can just print directly
        SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8012e9e:	69bb      	ldr	r3, [r7, #24]
 8012ea0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012ea4:	f043 0310 	orr.w	r3, r3, #16
 8012ea8:	b2da      	uxtb	r2, r3
 8012eaa:	69bb      	ldr	r3, [r7, #24]
 8012eac:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        cli->onCommand(cli, &command);
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	685b      	ldr	r3, [r3, #4]
 8012eb4:	f107 020c 	add.w	r2, r7, #12
 8012eb8:	4611      	mov	r1, r2
 8012eba:	6878      	ldr	r0, [r7, #4]
 8012ebc:	4798      	blx	r3
        UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8012ebe:	69bb      	ldr	r3, [r7, #24]
 8012ec0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012ec4:	f023 0310 	bic.w	r3, r3, #16
 8012ec8:	b2da      	uxtb	r2, r3
 8012eca:	69bb      	ldr	r3, [r7, #24]
 8012ecc:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8012ed0:	e007      	b.n	8012ee2 <parseCommand+0x20a>
    } else {
        onUnknownCommand(cli, cmdName);
 8012ed2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012ed4:	6878      	ldr	r0, [r7, #4]
 8012ed6:	f000 f997 	bl	8013208 <onUnknownCommand>
 8012eda:	e002      	b.n	8012ee2 <parseCommand+0x20a>
        return;
 8012edc:	bf00      	nop
 8012ede:	e000      	b.n	8012ee2 <parseCommand+0x20a>
        return;
 8012ee0:	bf00      	nop
    }
}
 8012ee2:	373c      	adds	r7, #60	@ 0x3c
 8012ee4:	46bd      	mov	sp, r7
 8012ee6:	bd90      	pop	{r4, r7, pc}

08012ee8 <initInternalBindings>:

static void initInternalBindings(EmbeddedCli *cli) {
 8012ee8:	b5b0      	push	{r4, r5, r7, lr}
 8012eea:	b08a      	sub	sp, #40	@ 0x28
 8012eec:	af02      	add	r7, sp, #8
 8012eee:	6078      	str	r0, [r7, #4]
    CliCommandBinding b = {
 8012ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8012f24 <initInternalBindings+0x3c>)
 8012ef2:	f107 040c 	add.w	r4, r7, #12
 8012ef6:	461d      	mov	r5, r3
 8012ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012efc:	682b      	ldr	r3, [r5, #0]
 8012efe:	6023      	str	r3, [r4, #0]
//            "Print list of commands",
//            true,
//            NULL,
//            onHelp
//    };
    embeddedCliAddBinding(cli, b);
 8012f00:	466a      	mov	r2, sp
 8012f02:	f107 0318 	add.w	r3, r7, #24
 8012f06:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012f0a:	e882 0003 	stmia.w	r2, {r0, r1}
 8012f0e:	f107 030c 	add.w	r3, r7, #12
 8012f12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012f14:	6878      	ldr	r0, [r7, #4]
 8012f16:	f7ff fc4c 	bl	80127b2 <embeddedCliAddBinding>
//    embeddedCliAddBinding(cli, _b);
}
 8012f1a:	bf00      	nop
 8012f1c:	3720      	adds	r7, #32
 8012f1e:	46bd      	mov	sp, r7
 8012f20:	bdb0      	pop	{r4, r5, r7, pc}
 8012f22:	bf00      	nop
 8012f24:	08024688 	.word	0x08024688

08012f28 <onHelp>:

static void onHelp(EmbeddedCli *cli, char *tokens, void *context) {
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	b08c      	sub	sp, #48	@ 0x30
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	60f8      	str	r0, [r7, #12]
 8012f30:	60b9      	str	r1, [r7, #8]
 8012f32:	607a      	str	r2, [r7, #4]
    UNUSED(context);
    PREPARE_IMPL(cli);
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	68db      	ldr	r3, [r3, #12]
 8012f38:	61fb      	str	r3, [r7, #28]

    if (impl->bindingsCount == 0) {
 8012f3a:	69fb      	ldr	r3, [r7, #28]
 8012f3c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d10a      	bne.n	8012f58 <onHelp+0x30>
        writeToOutput(cli, "Help is not available");
 8012f42:	49a5      	ldr	r1, [pc, #660]	@ (80131d8 <onHelp+0x2b0>)
 8012f44:	68f8      	ldr	r0, [r7, #12]
 8012f46:	f000 fb55 	bl	80135f4 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012f4a:	4ba4      	ldr	r3, [pc, #656]	@ (80131dc <onHelp+0x2b4>)
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	4619      	mov	r1, r3
 8012f50:	68f8      	ldr	r0, [r7, #12]
 8012f52:	f000 fb4f 	bl	80135f4 <writeToOutput>
        return;
 8012f56:	e13b      	b.n	80131d0 <onHelp+0x2a8>
    }

    if(_RunTime_Packet.showPrompt )
 8012f58:	4ba1      	ldr	r3, [pc, #644]	@ (80131e0 <onHelp+0x2b8>)
 8012f5a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d03d      	beq.n	8012fde <onHelp+0xb6>
    {
    	_RunTime_Packet.showPrompt  = 0;
 8012f62:	4b9f      	ldr	r3, [pc, #636]	@ (80131e0 <onHelp+0x2b8>)
 8012f64:	2200      	movs	r2, #0
 8012f66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        writeToOutput(cli, lineBreak);
 8012f6a:	4b9c      	ldr	r3, [pc, #624]	@ (80131dc <onHelp+0x2b4>)
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	4619      	mov	r1, r3
 8012f70:	68f8      	ldr	r0, [r7, #12]
 8012f72:	f000 fb3f 	bl	80135f4 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012f76:	4b99      	ldr	r3, [pc, #612]	@ (80131dc <onHelp+0x2b4>)
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	4619      	mov	r1, r3
 8012f7c:	68f8      	ldr	r0, [r7, #12]
 8012f7e:	f000 fb39 	bl	80135f4 <writeToOutput>
		writeToOutput(cli, "This product is powered by BuildUp! "); //TM 0x99
 8012f82:	4998      	ldr	r1, [pc, #608]	@ (80131e4 <onHelp+0x2bc>)
 8012f84:	68f8      	ldr	r0, [r7, #12]
 8012f86:	f000 fb35 	bl	80135f4 <writeToOutput>
		writeToOutput(cli, lineBreak);
 8012f8a:	4b94      	ldr	r3, [pc, #592]	@ (80131dc <onHelp+0x2b4>)
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	4619      	mov	r1, r3
 8012f90:	68f8      	ldr	r0, [r7, #12]
 8012f92:	f000 fb2f 	bl	80135f4 <writeToOutput>
		writeToOutput(cli, "Thingsfactory Inc. All rights reserved "); //copyright 0xA9
 8012f96:	4994      	ldr	r1, [pc, #592]	@ (80131e8 <onHelp+0x2c0>)
 8012f98:	68f8      	ldr	r0, [r7, #12]
 8012f9a:	f000 fb2b 	bl	80135f4 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012f9e:	4b8f      	ldr	r3, [pc, #572]	@ (80131dc <onHelp+0x2b4>)
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	4619      	mov	r1, r3
 8012fa4:	68f8      	ldr	r0, [r7, #12]
 8012fa6:	f000 fb25 	bl	80135f4 <writeToOutput>
        writeToOutput(cli, "Montreal, Canada");
 8012faa:	4990      	ldr	r1, [pc, #576]	@ (80131ec <onHelp+0x2c4>)
 8012fac:	68f8      	ldr	r0, [r7, #12]
 8012fae:	f000 fb21 	bl	80135f4 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012fb2:	4b8a      	ldr	r3, [pc, #552]	@ (80131dc <onHelp+0x2b4>)
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	4619      	mov	r1, r3
 8012fb8:	68f8      	ldr	r0, [r7, #12]
 8012fba:	f000 fb1b 	bl	80135f4 <writeToOutput>
        writeToOutput(cli, "https://thingsfactory.com");
 8012fbe:	498c      	ldr	r1, [pc, #560]	@ (80131f0 <onHelp+0x2c8>)
 8012fc0:	68f8      	ldr	r0, [r7, #12]
 8012fc2:	f000 fb17 	bl	80135f4 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012fc6:	4b85      	ldr	r3, [pc, #532]	@ (80131dc <onHelp+0x2b4>)
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	4619      	mov	r1, r3
 8012fcc:	68f8      	ldr	r0, [r7, #12]
 8012fce:	f000 fb11 	bl	80135f4 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012fd2:	4b82      	ldr	r3, [pc, #520]	@ (80131dc <onHelp+0x2b4>)
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	4619      	mov	r1, r3
 8012fd8:	68f8      	ldr	r0, [r7, #12]
 8012fda:	f000 fb0b 	bl	80135f4 <writeToOutput>
    }

    uint16_t tokenCount = embeddedCliGetTokenCount(tokens);
 8012fde:	68b8      	ldr	r0, [r7, #8]
 8012fe0:	f7ff fd06 	bl	80129f0 <embeddedCliGetTokenCount>
 8012fe4:	4603      	mov	r3, r0
 8012fe6:	837b      	strh	r3, [r7, #26]
    if (tokenCount == 0) {
 8012fe8:	8b7b      	ldrh	r3, [r7, #26]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d176      	bne.n	80130dc <onHelp+0x1b4>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8012fee:	2300      	movs	r3, #0
 8012ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012ff2:	e03c      	b.n	801306e <onHelp+0x146>
            writeToOutput(cli, " * ");
 8012ff4:	497f      	ldr	r1, [pc, #508]	@ (80131f4 <onHelp+0x2cc>)
 8012ff6:	68f8      	ldr	r0, [r7, #12]
 8012ff8:	f000 fafc 	bl	80135f4 <writeToOutput>
            writeToOutput(cli, impl->bindings[i].name);
 8012ffc:	69fb      	ldr	r3, [r7, #28]
 8012ffe:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013000:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013002:	4613      	mov	r3, r2
 8013004:	009b      	lsls	r3, r3, #2
 8013006:	4413      	add	r3, r2
 8013008:	009b      	lsls	r3, r3, #2
 801300a:	440b      	add	r3, r1
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	4619      	mov	r1, r3
 8013010:	68f8      	ldr	r0, [r7, #12]
 8013012:	f000 faef 	bl	80135f4 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8013016:	4b71      	ldr	r3, [pc, #452]	@ (80131dc <onHelp+0x2b4>)
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	4619      	mov	r1, r3
 801301c:	68f8      	ldr	r0, [r7, #12]
 801301e:	f000 fae9 	bl	80135f4 <writeToOutput>
            if (impl->bindings[i].help != NULL) {
 8013022:	69fb      	ldr	r3, [r7, #28]
 8013024:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013026:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013028:	4613      	mov	r3, r2
 801302a:	009b      	lsls	r3, r3, #2
 801302c:	4413      	add	r3, r2
 801302e:	009b      	lsls	r3, r3, #2
 8013030:	440b      	add	r3, r1
 8013032:	685b      	ldr	r3, [r3, #4]
 8013034:	2b00      	cmp	r3, #0
 8013036:	d017      	beq.n	8013068 <onHelp+0x140>
                cli->writeChar(cli, '\t');
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	2109      	movs	r1, #9
 801303e:	68f8      	ldr	r0, [r7, #12]
 8013040:	4798      	blx	r3
                writeToOutput(cli, impl->bindings[i].help);
 8013042:	69fb      	ldr	r3, [r7, #28]
 8013044:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013046:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013048:	4613      	mov	r3, r2
 801304a:	009b      	lsls	r3, r3, #2
 801304c:	4413      	add	r3, r2
 801304e:	009b      	lsls	r3, r3, #2
 8013050:	440b      	add	r3, r1
 8013052:	685b      	ldr	r3, [r3, #4]
 8013054:	4619      	mov	r1, r3
 8013056:	68f8      	ldr	r0, [r7, #12]
 8013058:	f000 facc 	bl	80135f4 <writeToOutput>
                writeToOutput(cli, lineBreak);
 801305c:	4b5f      	ldr	r3, [pc, #380]	@ (80131dc <onHelp+0x2b4>)
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	4619      	mov	r1, r3
 8013062:	68f8      	ldr	r0, [r7, #12]
 8013064:	f000 fac6 	bl	80135f4 <writeToOutput>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8013068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801306a:	3301      	adds	r3, #1
 801306c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801306e:	69fb      	ldr	r3, [r7, #28]
 8013070:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8013072:	461a      	mov	r2, r3
 8013074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013076:	4293      	cmp	r3, r2
 8013078:	dbbc      	blt.n	8012ff4 <onHelp+0xcc>
            }
        }

        writeToOutput(cli, lineBreak);
 801307a:	4b58      	ldr	r3, [pc, #352]	@ (80131dc <onHelp+0x2b4>)
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	4619      	mov	r1, r3
 8013080:	68f8      	ldr	r0, [r7, #12]
 8013082:	f000 fab7 	bl	80135f4 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8013086:	4b55      	ldr	r3, [pc, #340]	@ (80131dc <onHelp+0x2b4>)
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	4619      	mov	r1, r3
 801308c:	68f8      	ldr	r0, [r7, #12]
 801308e:	f000 fab1 	bl	80135f4 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8013092:	4b52      	ldr	r3, [pc, #328]	@ (80131dc <onHelp+0x2b4>)
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	4619      	mov	r1, r3
 8013098:	68f8      	ldr	r0, [r7, #12]
 801309a:	f000 faab 	bl	80135f4 <writeToOutput>
		writeToOutput(cli, "BuildUp! Edge C02 Data Logger "); //TM 0x99
 801309e:	4956      	ldr	r1, [pc, #344]	@ (80131f8 <onHelp+0x2d0>)
 80130a0:	68f8      	ldr	r0, [r7, #12]
 80130a2:	f000 faa7 	bl	80135f4 <writeToOutput>
		writeToOutput(cli, lineBreak);
 80130a6:	4b4d      	ldr	r3, [pc, #308]	@ (80131dc <onHelp+0x2b4>)
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	4619      	mov	r1, r3
 80130ac:	68f8      	ldr	r0, [r7, #12]
 80130ae:	f000 faa1 	bl	80135f4 <writeToOutput>
		writeToOutput(cli, "Thingsfactory Co. Montreal Canada "); //copyright 0xA9
 80130b2:	4952      	ldr	r1, [pc, #328]	@ (80131fc <onHelp+0x2d4>)
 80130b4:	68f8      	ldr	r0, [r7, #12]
 80130b6:	f000 fa9d 	bl	80135f4 <writeToOutput>
        writeToOutput(cli, lineBreak);
 80130ba:	4b48      	ldr	r3, [pc, #288]	@ (80131dc <onHelp+0x2b4>)
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	4619      	mov	r1, r3
 80130c0:	68f8      	ldr	r0, [r7, #12]
 80130c2:	f000 fa97 	bl	80135f4 <writeToOutput>
        writeToOutput(cli, "thingsfactory.com");
 80130c6:	494e      	ldr	r1, [pc, #312]	@ (8013200 <onHelp+0x2d8>)
 80130c8:	68f8      	ldr	r0, [r7, #12]
 80130ca:	f000 fa93 	bl	80135f4 <writeToOutput>
        writeToOutput(cli, lineBreak);
 80130ce:	4b43      	ldr	r3, [pc, #268]	@ (80131dc <onHelp+0x2b4>)
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	4619      	mov	r1, r3
 80130d4:	68f8      	ldr	r0, [r7, #12]
 80130d6:	f000 fa8d 	bl	80135f4 <writeToOutput>
 80130da:	e079      	b.n	80131d0 <onHelp+0x2a8>



    } else if (tokenCount == 1) {
 80130dc:	8b7b      	ldrh	r3, [r7, #26]
 80130de:	2b01      	cmp	r3, #1
 80130e0:	d16c      	bne.n	80131bc <onHelp+0x294>
        // try find command
        const char *helpStr = NULL;
 80130e2:	2300      	movs	r3, #0
 80130e4:	62bb      	str	r3, [r7, #40]	@ 0x28
        const char *cmdName = embeddedCliGetToken(tokens, 1);
 80130e6:	2101      	movs	r1, #1
 80130e8:	68b8      	ldr	r0, [r7, #8]
 80130ea:	f7ff fc4b 	bl	8012984 <embeddedCliGetToken>
 80130ee:	6178      	str	r0, [r7, #20]
        bool found = false;
 80130f0:	2300      	movs	r3, #0
 80130f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        for (int i = 0; i < impl->bindingsCount; ++i) {
 80130f6:	2300      	movs	r3, #0
 80130f8:	623b      	str	r3, [r7, #32]
 80130fa:	e020      	b.n	801313e <onHelp+0x216>
            if (strcmp(impl->bindings[i].name, cmdName) == 0) {
 80130fc:	69fb      	ldr	r3, [r7, #28]
 80130fe:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013100:	6a3a      	ldr	r2, [r7, #32]
 8013102:	4613      	mov	r3, r2
 8013104:	009b      	lsls	r3, r3, #2
 8013106:	4413      	add	r3, r2
 8013108:	009b      	lsls	r3, r3, #2
 801310a:	440b      	add	r3, r1
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	6979      	ldr	r1, [r7, #20]
 8013110:	4618      	mov	r0, r3
 8013112:	f7ed f865 	bl	80001e0 <strcmp>
 8013116:	4603      	mov	r3, r0
 8013118:	2b00      	cmp	r3, #0
 801311a:	d10d      	bne.n	8013138 <onHelp+0x210>
                helpStr = impl->bindings[i].help;
 801311c:	69fb      	ldr	r3, [r7, #28]
 801311e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013120:	6a3a      	ldr	r2, [r7, #32]
 8013122:	4613      	mov	r3, r2
 8013124:	009b      	lsls	r3, r3, #2
 8013126:	4413      	add	r3, r2
 8013128:	009b      	lsls	r3, r3, #2
 801312a:	440b      	add	r3, r1
 801312c:	685b      	ldr	r3, [r3, #4]
 801312e:	62bb      	str	r3, [r7, #40]	@ 0x28
                found = true;
 8013130:	2301      	movs	r3, #1
 8013132:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                break;
 8013136:	e008      	b.n	801314a <onHelp+0x222>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8013138:	6a3b      	ldr	r3, [r7, #32]
 801313a:	3301      	adds	r3, #1
 801313c:	623b      	str	r3, [r7, #32]
 801313e:	69fb      	ldr	r3, [r7, #28]
 8013140:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8013142:	461a      	mov	r2, r3
 8013144:	6a3b      	ldr	r3, [r7, #32]
 8013146:	4293      	cmp	r3, r2
 8013148:	dbd8      	blt.n	80130fc <onHelp+0x1d4>
            }
        }
        if (found && helpStr != NULL) {
 801314a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801314e:	2b00      	cmp	r3, #0
 8013150:	d020      	beq.n	8013194 <onHelp+0x26c>
 8013152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013154:	2b00      	cmp	r3, #0
 8013156:	d01d      	beq.n	8013194 <onHelp+0x26c>
            writeToOutput(cli, " * ");
 8013158:	4926      	ldr	r1, [pc, #152]	@ (80131f4 <onHelp+0x2cc>)
 801315a:	68f8      	ldr	r0, [r7, #12]
 801315c:	f000 fa4a 	bl	80135f4 <writeToOutput>
            writeToOutput(cli, cmdName);
 8013160:	6979      	ldr	r1, [r7, #20]
 8013162:	68f8      	ldr	r0, [r7, #12]
 8013164:	f000 fa46 	bl	80135f4 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8013168:	4b1c      	ldr	r3, [pc, #112]	@ (80131dc <onHelp+0x2b4>)
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	4619      	mov	r1, r3
 801316e:	68f8      	ldr	r0, [r7, #12]
 8013170:	f000 fa40 	bl	80135f4 <writeToOutput>
            cli->writeChar(cli, '\t');
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	2109      	movs	r1, #9
 801317a:	68f8      	ldr	r0, [r7, #12]
 801317c:	4798      	blx	r3
            writeToOutput(cli, helpStr);
 801317e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013180:	68f8      	ldr	r0, [r7, #12]
 8013182:	f000 fa37 	bl	80135f4 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8013186:	4b15      	ldr	r3, [pc, #84]	@ (80131dc <onHelp+0x2b4>)
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	4619      	mov	r1, r3
 801318c:	68f8      	ldr	r0, [r7, #12]
 801318e:	f000 fa31 	bl	80135f4 <writeToOutput>
 8013192:	e01d      	b.n	80131d0 <onHelp+0x2a8>
        } else if (found) {
 8013194:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013198:	2b00      	cmp	r3, #0
 801319a:	d00a      	beq.n	80131b2 <onHelp+0x28a>
            writeToOutput(cli, "Help is not available");
 801319c:	490e      	ldr	r1, [pc, #56]	@ (80131d8 <onHelp+0x2b0>)
 801319e:	68f8      	ldr	r0, [r7, #12]
 80131a0:	f000 fa28 	bl	80135f4 <writeToOutput>
            writeToOutput(cli, lineBreak);
 80131a4:	4b0d      	ldr	r3, [pc, #52]	@ (80131dc <onHelp+0x2b4>)
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	4619      	mov	r1, r3
 80131aa:	68f8      	ldr	r0, [r7, #12]
 80131ac:	f000 fa22 	bl	80135f4 <writeToOutput>
 80131b0:	e00e      	b.n	80131d0 <onHelp+0x2a8>
        } else {
            onUnknownCommand(cli, cmdName);
 80131b2:	6979      	ldr	r1, [r7, #20]
 80131b4:	68f8      	ldr	r0, [r7, #12]
 80131b6:	f000 f827 	bl	8013208 <onUnknownCommand>
 80131ba:	e009      	b.n	80131d0 <onHelp+0x2a8>
        }
    } else {
        writeToOutput(cli, "Command \"help\" receives one or zero arguments");
 80131bc:	4911      	ldr	r1, [pc, #68]	@ (8013204 <onHelp+0x2dc>)
 80131be:	68f8      	ldr	r0, [r7, #12]
 80131c0:	f000 fa18 	bl	80135f4 <writeToOutput>
        writeToOutput(cli, lineBreak);
 80131c4:	4b05      	ldr	r3, [pc, #20]	@ (80131dc <onHelp+0x2b4>)
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	4619      	mov	r1, r3
 80131ca:	68f8      	ldr	r0, [r7, #12]
 80131cc:	f000 fa12 	bl	80135f4 <writeToOutput>
    }
}
 80131d0:	3730      	adds	r7, #48	@ 0x30
 80131d2:	46bd      	mov	sp, r7
 80131d4:	bd80      	pop	{r7, pc}
 80131d6:	bf00      	nop
 80131d8:	0802469c 	.word	0x0802469c
 80131dc:	20000024 	.word	0x20000024
 80131e0:	20001530 	.word	0x20001530
 80131e4:	080246b4 	.word	0x080246b4
 80131e8:	080246dc 	.word	0x080246dc
 80131ec:	08024704 	.word	0x08024704
 80131f0:	08024718 	.word	0x08024718
 80131f4:	08024734 	.word	0x08024734
 80131f8:	08024738 	.word	0x08024738
 80131fc:	08024758 	.word	0x08024758
 8013200:	0802477c 	.word	0x0802477c
 8013204:	08024790 	.word	0x08024790

08013208 <onUnknownCommand>:

static void onUnknownCommand(EmbeddedCli *cli, const char *name) {
 8013208:	b580      	push	{r7, lr}
 801320a:	b082      	sub	sp, #8
 801320c:	af00      	add	r7, sp, #0
 801320e:	6078      	str	r0, [r7, #4]
 8013210:	6039      	str	r1, [r7, #0]
    writeToOutput(cli, "Unknown command: \"");
 8013212:	490b      	ldr	r1, [pc, #44]	@ (8013240 <onUnknownCommand+0x38>)
 8013214:	6878      	ldr	r0, [r7, #4]
 8013216:	f000 f9ed 	bl	80135f4 <writeToOutput>
    writeToOutput(cli, name);
 801321a:	6839      	ldr	r1, [r7, #0]
 801321c:	6878      	ldr	r0, [r7, #4]
 801321e:	f000 f9e9 	bl	80135f4 <writeToOutput>
    writeToOutput(cli, "\". Write \"help\" for a list of available commands");
 8013222:	4908      	ldr	r1, [pc, #32]	@ (8013244 <onUnknownCommand+0x3c>)
 8013224:	6878      	ldr	r0, [r7, #4]
 8013226:	f000 f9e5 	bl	80135f4 <writeToOutput>
    writeToOutput(cli, lineBreak);
 801322a:	4b07      	ldr	r3, [pc, #28]	@ (8013248 <onUnknownCommand+0x40>)
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	4619      	mov	r1, r3
 8013230:	6878      	ldr	r0, [r7, #4]
 8013232:	f000 f9df 	bl	80135f4 <writeToOutput>
}
 8013236:	bf00      	nop
 8013238:	3708      	adds	r7, #8
 801323a:	46bd      	mov	sp, r7
 801323c:	bd80      	pop	{r7, pc}
 801323e:	bf00      	nop
 8013240:	080247c0 	.word	0x080247c0
 8013244:	080247d4 	.word	0x080247d4
 8013248:	20000024 	.word	0x20000024

0801324c <getAutocompletedCommand>:

static AutocompletedCommand getAutocompletedCommand(EmbeddedCli *cli, const char *prefix) {
 801324c:	b580      	push	{r7, lr}
 801324e:	b08e      	sub	sp, #56	@ 0x38
 8013250:	af00      	add	r7, sp, #0
 8013252:	60f8      	str	r0, [r7, #12]
 8013254:	60b9      	str	r1, [r7, #8]
 8013256:	607a      	str	r2, [r7, #4]
    AutocompletedCommand cmd = {NULL, 0, 0};
 8013258:	2300      	movs	r3, #0
 801325a:	613b      	str	r3, [r7, #16]
 801325c:	2300      	movs	r3, #0
 801325e:	82bb      	strh	r3, [r7, #20]
 8013260:	2300      	movs	r3, #0
 8013262:	82fb      	strh	r3, [r7, #22]

    size_t prefixLen = strlen(prefix);
 8013264:	6878      	ldr	r0, [r7, #4]
 8013266:	f7ed f81b 	bl	80002a0 <strlen>
 801326a:	6278      	str	r0, [r7, #36]	@ 0x24

    PREPARE_IMPL(cli);
 801326c:	68bb      	ldr	r3, [r7, #8]
 801326e:	68db      	ldr	r3, [r3, #12]
 8013270:	623b      	str	r3, [r7, #32]
    if (impl->bindingsCount == 0 || prefixLen == 0)
 8013272:	6a3b      	ldr	r3, [r7, #32]
 8013274:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8013276:	2b00      	cmp	r3, #0
 8013278:	d002      	beq.n	8013280 <getAutocompletedCommand+0x34>
 801327a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801327c:	2b00      	cmp	r3, #0
 801327e:	d108      	bne.n	8013292 <getAutocompletedCommand+0x46>
        return cmd;
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	461a      	mov	r2, r3
 8013284:	f107 0310 	add.w	r3, r7, #16
 8013288:	e893 0003 	ldmia.w	r3, {r0, r1}
 801328c:	e882 0003 	stmia.w	r2, {r0, r1}
 8013290:	e095      	b.n	80133be <getAutocompletedCommand+0x172>


    for (int i = 0; i < impl->bindingsCount; ++i) {
 8013292:	2300      	movs	r3, #0
 8013294:	637b      	str	r3, [r7, #52]	@ 0x34
 8013296:	e083      	b.n	80133a0 <getAutocompletedCommand+0x154>
        const char *name = impl->bindings[i].name;
 8013298:	6a3b      	ldr	r3, [r7, #32]
 801329a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801329c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801329e:	4613      	mov	r3, r2
 80132a0:	009b      	lsls	r3, r3, #2
 80132a2:	4413      	add	r3, r2
 80132a4:	009b      	lsls	r3, r3, #2
 80132a6:	440b      	add	r3, r1
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	61fb      	str	r3, [r7, #28]
        size_t len = strlen(name);
 80132ac:	69f8      	ldr	r0, [r7, #28]
 80132ae:	f7ec fff7 	bl	80002a0 <strlen>
 80132b2:	61b8      	str	r0, [r7, #24]

        // unset autocomplete flag
        UNSET_U8FLAG(impl->bindingsFlags[i], BINDING_FLAG_AUTOCOMPLETE);
 80132b4:	6a3b      	ldr	r3, [r7, #32]
 80132b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80132b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80132ba:	4413      	add	r3, r2
 80132bc:	781a      	ldrb	r2, [r3, #0]
 80132be:	6a3b      	ldr	r3, [r7, #32]
 80132c0:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80132c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80132c4:	440b      	add	r3, r1
 80132c6:	f022 0201 	bic.w	r2, r2, #1
 80132ca:	b2d2      	uxtb	r2, r2
 80132cc:	701a      	strb	r2, [r3, #0]

        if (len < prefixLen)
 80132ce:	69ba      	ldr	r2, [r7, #24]
 80132d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132d2:	429a      	cmp	r2, r3
 80132d4:	d35e      	bcc.n	8013394 <getAutocompletedCommand+0x148>
            continue;

        // check if this command is candidate for autocomplete
        bool isCandidate = true;
 80132d6:	2301      	movs	r3, #1
 80132d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        for (size_t j = 0; j < prefixLen; ++j) {
 80132dc:	2300      	movs	r3, #0
 80132de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80132e0:	e010      	b.n	8013304 <getAutocompletedCommand+0xb8>
            if (prefix[j] != name[j]) {
 80132e2:	687a      	ldr	r2, [r7, #4]
 80132e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132e6:	4413      	add	r3, r2
 80132e8:	781a      	ldrb	r2, [r3, #0]
 80132ea:	69f9      	ldr	r1, [r7, #28]
 80132ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132ee:	440b      	add	r3, r1
 80132f0:	781b      	ldrb	r3, [r3, #0]
 80132f2:	429a      	cmp	r2, r3
 80132f4:	d003      	beq.n	80132fe <getAutocompletedCommand+0xb2>
                isCandidate = false;
 80132f6:	2300      	movs	r3, #0
 80132f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                break;
 80132fc:	e006      	b.n	801330c <getAutocompletedCommand+0xc0>
        for (size_t j = 0; j < prefixLen; ++j) {
 80132fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013300:	3301      	adds	r3, #1
 8013302:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013304:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013308:	429a      	cmp	r2, r3
 801330a:	d3ea      	bcc.n	80132e2 <getAutocompletedCommand+0x96>
            }
        }
        if (!isCandidate)
 801330c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013310:	f083 0301 	eor.w	r3, r3, #1
 8013314:	b2db      	uxtb	r3, r3
 8013316:	2b00      	cmp	r3, #0
 8013318:	d13e      	bne.n	8013398 <getAutocompletedCommand+0x14c>
            continue;

        impl->bindingsFlags[i] |= BINDING_FLAG_AUTOCOMPLETE;
 801331a:	6a3b      	ldr	r3, [r7, #32]
 801331c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801331e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013320:	4413      	add	r3, r2
 8013322:	781a      	ldrb	r2, [r3, #0]
 8013324:	6a3b      	ldr	r3, [r7, #32]
 8013326:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8013328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801332a:	440b      	add	r3, r1
 801332c:	f042 0201 	orr.w	r2, r2, #1
 8013330:	b2d2      	uxtb	r2, r2
 8013332:	701a      	strb	r2, [r3, #0]

        if (cmd.candidateCount == 0 || len < cmd.autocompletedLen)
 8013334:	8afb      	ldrh	r3, [r7, #22]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d004      	beq.n	8013344 <getAutocompletedCommand+0xf8>
 801333a:	8abb      	ldrh	r3, [r7, #20]
 801333c:	461a      	mov	r2, r3
 801333e:	69bb      	ldr	r3, [r7, #24]
 8013340:	4293      	cmp	r3, r2
 8013342:	d202      	bcs.n	801334a <getAutocompletedCommand+0xfe>
            cmd.autocompletedLen = (uint16_t) len;
 8013344:	69bb      	ldr	r3, [r7, #24]
 8013346:	b29b      	uxth	r3, r3
 8013348:	82bb      	strh	r3, [r7, #20]

        ++cmd.candidateCount;
 801334a:	8afb      	ldrh	r3, [r7, #22]
 801334c:	3301      	adds	r3, #1
 801334e:	b29b      	uxth	r3, r3
 8013350:	82fb      	strh	r3, [r7, #22]

        if (cmd.candidateCount == 1) {
 8013352:	8afb      	ldrh	r3, [r7, #22]
 8013354:	2b01      	cmp	r3, #1
 8013356:	d102      	bne.n	801335e <getAutocompletedCommand+0x112>
            cmd.firstCandidate = name;
 8013358:	69fb      	ldr	r3, [r7, #28]
 801335a:	613b      	str	r3, [r7, #16]
            continue;
 801335c:	e01d      	b.n	801339a <getAutocompletedCommand+0x14e>
        }

        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 801335e:	6a3b      	ldr	r3, [r7, #32]
 8013360:	8c1b      	ldrh	r3, [r3, #32]
 8013362:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013364:	e010      	b.n	8013388 <getAutocompletedCommand+0x13c>
            if (cmd.firstCandidate[j] != name[j]) {
 8013366:	693a      	ldr	r2, [r7, #16]
 8013368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801336a:	4413      	add	r3, r2
 801336c:	781a      	ldrb	r2, [r3, #0]
 801336e:	69f9      	ldr	r1, [r7, #28]
 8013370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013372:	440b      	add	r3, r1
 8013374:	781b      	ldrb	r3, [r3, #0]
 8013376:	429a      	cmp	r2, r3
 8013378:	d003      	beq.n	8013382 <getAutocompletedCommand+0x136>
                cmd.autocompletedLen = (uint16_t) j;
 801337a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801337c:	b29b      	uxth	r3, r3
 801337e:	82bb      	strh	r3, [r7, #20]
                break;
 8013380:	e00b      	b.n	801339a <getAutocompletedCommand+0x14e>
        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 8013382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013384:	3301      	adds	r3, #1
 8013386:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013388:	8abb      	ldrh	r3, [r7, #20]
 801338a:	461a      	mov	r2, r3
 801338c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801338e:	4293      	cmp	r3, r2
 8013390:	d3e9      	bcc.n	8013366 <getAutocompletedCommand+0x11a>
 8013392:	e002      	b.n	801339a <getAutocompletedCommand+0x14e>
            continue;
 8013394:	bf00      	nop
 8013396:	e000      	b.n	801339a <getAutocompletedCommand+0x14e>
            continue;
 8013398:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 801339a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801339c:	3301      	adds	r3, #1
 801339e:	637b      	str	r3, [r7, #52]	@ 0x34
 80133a0:	6a3b      	ldr	r3, [r7, #32]
 80133a2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80133a4:	461a      	mov	r2, r3
 80133a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80133a8:	4293      	cmp	r3, r2
 80133aa:	f6ff af75 	blt.w	8013298 <getAutocompletedCommand+0x4c>
            }
        }
    }

    return cmd;
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	461a      	mov	r2, r3
 80133b2:	f107 0310 	add.w	r3, r7, #16
 80133b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80133ba:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80133be:	68f8      	ldr	r0, [r7, #12]
 80133c0:	3738      	adds	r7, #56	@ 0x38
 80133c2:	46bd      	mov	sp, r7
 80133c4:	bd80      	pop	{r7, pc}

080133c6 <printLiveAutocompletion>:

static void printLiveAutocompletion(EmbeddedCli *cli) {
 80133c6:	b580      	push	{r7, lr}
 80133c8:	b088      	sub	sp, #32
 80133ca:	af00      	add	r7, sp, #0
 80133cc:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	68db      	ldr	r3, [r3, #12]
 80133d2:	617b      	str	r3, [r7, #20]

    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED))
 80133d4:	697b      	ldr	r3, [r7, #20]
 80133d6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80133da:	f003 0320 	and.w	r3, r3, #32
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d048      	beq.n	8013474 <printLiveAutocompletion+0xae>
        return;

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 80133e2:	697b      	ldr	r3, [r7, #20]
 80133e4:	69da      	ldr	r2, [r3, #28]
 80133e6:	f107 030c 	add.w	r3, r7, #12
 80133ea:	6879      	ldr	r1, [r7, #4]
 80133ec:	4618      	mov	r0, r3
 80133ee:	f7ff ff2d 	bl	801324c <getAutocompletedCommand>

    if (cmd.candidateCount == 0) {
 80133f2:	8a7b      	ldrh	r3, [r7, #18]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d102      	bne.n	80133fe <printLiveAutocompletion+0x38>
        cmd.autocompletedLen = impl->cmdSize;
 80133f8:	697b      	ldr	r3, [r7, #20]
 80133fa:	8c1b      	ldrh	r3, [r3, #32]
 80133fc:	823b      	strh	r3, [r7, #16]
    }

    // print live autocompletion (or nothing, if it doesn't exist)
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 80133fe:	697b      	ldr	r3, [r7, #20]
 8013400:	8c1b      	ldrh	r3, [r3, #32]
 8013402:	61fb      	str	r3, [r7, #28]
 8013404:	e00b      	b.n	801341e <printLiveAutocompletion+0x58>
        cli->writeChar(cli, cmd.firstCandidate[i]);
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	68f9      	ldr	r1, [r7, #12]
 801340c:	69fa      	ldr	r2, [r7, #28]
 801340e:	440a      	add	r2, r1
 8013410:	7812      	ldrb	r2, [r2, #0]
 8013412:	4611      	mov	r1, r2
 8013414:	6878      	ldr	r0, [r7, #4]
 8013416:	4798      	blx	r3
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 8013418:	69fb      	ldr	r3, [r7, #28]
 801341a:	3301      	adds	r3, #1
 801341c:	61fb      	str	r3, [r7, #28]
 801341e:	8a3b      	ldrh	r3, [r7, #16]
 8013420:	461a      	mov	r2, r3
 8013422:	69fb      	ldr	r3, [r7, #28]
 8013424:	4293      	cmp	r3, r2
 8013426:	d3ee      	bcc.n	8013406 <printLiveAutocompletion+0x40>
    }
    // replace with spaces previous autocompletion
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 8013428:	8a3b      	ldrh	r3, [r7, #16]
 801342a:	61bb      	str	r3, [r7, #24]
 801342c:	e007      	b.n	801343e <printLiveAutocompletion+0x78>
        cli->writeChar(cli, ' ');
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	2120      	movs	r1, #32
 8013434:	6878      	ldr	r0, [r7, #4]
 8013436:	4798      	blx	r3
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 8013438:	69bb      	ldr	r3, [r7, #24]
 801343a:	3301      	adds	r3, #1
 801343c:	61bb      	str	r3, [r7, #24]
 801343e:	697b      	ldr	r3, [r7, #20]
 8013440:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8013442:	461a      	mov	r2, r3
 8013444:	69bb      	ldr	r3, [r7, #24]
 8013446:	4293      	cmp	r3, r2
 8013448:	d3f1      	bcc.n	801342e <printLiveAutocompletion+0x68>
    }
    impl->inputLineLength = cmd.autocompletedLen;
 801344a:	8a3a      	ldrh	r2, [r7, #16]
 801344c:	697b      	ldr	r3, [r7, #20]
 801344e:	861a      	strh	r2, [r3, #48]	@ 0x30
    cli->writeChar(cli, '\r');
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	210d      	movs	r1, #13
 8013456:	6878      	ldr	r0, [r7, #4]
 8013458:	4798      	blx	r3
    // print current command again so cursor is moved to initial place
    writeToOutput(cli, impl->invitation);
 801345a:	697b      	ldr	r3, [r7, #20]
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	4619      	mov	r1, r3
 8013460:	6878      	ldr	r0, [r7, #4]
 8013462:	f000 f8c7 	bl	80135f4 <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 8013466:	697b      	ldr	r3, [r7, #20]
 8013468:	69db      	ldr	r3, [r3, #28]
 801346a:	4619      	mov	r1, r3
 801346c:	6878      	ldr	r0, [r7, #4]
 801346e:	f000 f8c1 	bl	80135f4 <writeToOutput>
 8013472:	e000      	b.n	8013476 <printLiveAutocompletion+0xb0>
        return;
 8013474:	bf00      	nop
}
 8013476:	3720      	adds	r7, #32
 8013478:	46bd      	mov	sp, r7
 801347a:	bd80      	pop	{r7, pc}

0801347c <onAutocompleteRequest>:

static void onAutocompleteRequest(EmbeddedCli *cli) {
 801347c:	b580      	push	{r7, lr}
 801347e:	b088      	sub	sp, #32
 8013480:	af00      	add	r7, sp, #0
 8013482:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	68db      	ldr	r3, [r3, #12]
 8013488:	61bb      	str	r3, [r7, #24]

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 801348a:	69bb      	ldr	r3, [r7, #24]
 801348c:	69da      	ldr	r2, [r3, #28]
 801348e:	f107 030c 	add.w	r3, r7, #12
 8013492:	6879      	ldr	r1, [r7, #4]
 8013494:	4618      	mov	r0, r3
 8013496:	f7ff fed9 	bl	801324c <getAutocompletedCommand>

    if (cmd.candidateCount == 0)
 801349a:	8a7b      	ldrh	r3, [r7, #18]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d071      	beq.n	8013584 <onAutocompleteRequest+0x108>
        return;

    if (cmd.candidateCount == 1 || cmd.autocompletedLen > impl->cmdSize) {
 80134a0:	8a7b      	ldrh	r3, [r7, #18]
 80134a2:	2b01      	cmp	r3, #1
 80134a4:	d004      	beq.n	80134b0 <onAutocompleteRequest+0x34>
 80134a6:	8a3a      	ldrh	r2, [r7, #16]
 80134a8:	69bb      	ldr	r3, [r7, #24]
 80134aa:	8c1b      	ldrh	r3, [r3, #32]
 80134ac:	429a      	cmp	r2, r3
 80134ae:	d92a      	bls.n	8013506 <onAutocompleteRequest+0x8a>
        // can copy from index cmdSize, but prefix is the same, so copy everything
        memcpy(impl->cmdBuffer, cmd.firstCandidate, cmd.autocompletedLen);
 80134b0:	69bb      	ldr	r3, [r7, #24]
 80134b2:	69db      	ldr	r3, [r3, #28]
 80134b4:	68f9      	ldr	r1, [r7, #12]
 80134b6:	8a3a      	ldrh	r2, [r7, #16]
 80134b8:	4618      	mov	r0, r3
 80134ba:	f00b fdb2 	bl	801f022 <memcpy>
        if (cmd.candidateCount == 1) {
 80134be:	8a7b      	ldrh	r3, [r7, #18]
 80134c0:	2b01      	cmp	r3, #1
 80134c2:	d109      	bne.n	80134d8 <onAutocompleteRequest+0x5c>
            impl->cmdBuffer[cmd.autocompletedLen] = ' ';
 80134c4:	69bb      	ldr	r3, [r7, #24]
 80134c6:	69db      	ldr	r3, [r3, #28]
 80134c8:	8a3a      	ldrh	r2, [r7, #16]
 80134ca:	4413      	add	r3, r2
 80134cc:	2220      	movs	r2, #32
 80134ce:	701a      	strb	r2, [r3, #0]
            ++cmd.autocompletedLen;
 80134d0:	8a3b      	ldrh	r3, [r7, #16]
 80134d2:	3301      	adds	r3, #1
 80134d4:	b29b      	uxth	r3, r3
 80134d6:	823b      	strh	r3, [r7, #16]
        }
        impl->cmdBuffer[cmd.autocompletedLen] = '\0';
 80134d8:	69bb      	ldr	r3, [r7, #24]
 80134da:	69db      	ldr	r3, [r3, #28]
 80134dc:	8a3a      	ldrh	r2, [r7, #16]
 80134de:	4413      	add	r3, r2
 80134e0:	2200      	movs	r2, #0
 80134e2:	701a      	strb	r2, [r3, #0]

        writeToOutput(cli, &impl->cmdBuffer[impl->cmdSize]);
 80134e4:	69bb      	ldr	r3, [r7, #24]
 80134e6:	69db      	ldr	r3, [r3, #28]
 80134e8:	69ba      	ldr	r2, [r7, #24]
 80134ea:	8c12      	ldrh	r2, [r2, #32]
 80134ec:	4413      	add	r3, r2
 80134ee:	4619      	mov	r1, r3
 80134f0:	6878      	ldr	r0, [r7, #4]
 80134f2:	f000 f87f 	bl	80135f4 <writeToOutput>
        impl->cmdSize = cmd.autocompletedLen;
 80134f6:	8a3a      	ldrh	r2, [r7, #16]
 80134f8:	69bb      	ldr	r3, [r7, #24]
 80134fa:	841a      	strh	r2, [r3, #32]
        impl->inputLineLength = impl->cmdSize;
 80134fc:	69bb      	ldr	r3, [r7, #24]
 80134fe:	8c1a      	ldrh	r2, [r3, #32]
 8013500:	69bb      	ldr	r3, [r7, #24]
 8013502:	861a      	strh	r2, [r3, #48]	@ 0x30
        return;
 8013504:	e03f      	b.n	8013586 <onAutocompleteRequest+0x10a>
    }

    // with multiple candidates when we already completed to common prefix
    // we show all candidates and print input again
    // we need to completely clear current line since it begins with invitation
    clearCurrentLine(cli);
 8013506:	6878      	ldr	r0, [r7, #4]
 8013508:	f000 f842 	bl	8013590 <clearCurrentLine>

    for (int i = 0; i < impl->bindingsCount; ++i) {
 801350c:	2300      	movs	r3, #0
 801350e:	61fb      	str	r3, [r7, #28]
 8013510:	e021      	b.n	8013556 <onAutocompleteRequest+0xda>
        // autocomplete flag is set for all candidates by last call to
        // getAutocompletedCommand
        if (!(impl->bindingsFlags[i] & BINDING_FLAG_AUTOCOMPLETE))
 8013512:	69bb      	ldr	r3, [r7, #24]
 8013514:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013516:	69fb      	ldr	r3, [r7, #28]
 8013518:	4413      	add	r3, r2
 801351a:	781b      	ldrb	r3, [r3, #0]
 801351c:	f003 0301 	and.w	r3, r3, #1
 8013520:	2b00      	cmp	r3, #0
 8013522:	d014      	beq.n	801354e <onAutocompleteRequest+0xd2>
            continue;

        const char *name = impl->bindings[i].name;
 8013524:	69bb      	ldr	r3, [r7, #24]
 8013526:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013528:	69fa      	ldr	r2, [r7, #28]
 801352a:	4613      	mov	r3, r2
 801352c:	009b      	lsls	r3, r3, #2
 801352e:	4413      	add	r3, r2
 8013530:	009b      	lsls	r3, r3, #2
 8013532:	440b      	add	r3, r1
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	617b      	str	r3, [r7, #20]

        writeToOutput(cli, name);
 8013538:	6979      	ldr	r1, [r7, #20]
 801353a:	6878      	ldr	r0, [r7, #4]
 801353c:	f000 f85a 	bl	80135f4 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8013540:	4b12      	ldr	r3, [pc, #72]	@ (801358c <onAutocompleteRequest+0x110>)
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	4619      	mov	r1, r3
 8013546:	6878      	ldr	r0, [r7, #4]
 8013548:	f000 f854 	bl	80135f4 <writeToOutput>
 801354c:	e000      	b.n	8013550 <onAutocompleteRequest+0xd4>
            continue;
 801354e:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8013550:	69fb      	ldr	r3, [r7, #28]
 8013552:	3301      	adds	r3, #1
 8013554:	61fb      	str	r3, [r7, #28]
 8013556:	69bb      	ldr	r3, [r7, #24]
 8013558:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801355a:	461a      	mov	r2, r3
 801355c:	69fb      	ldr	r3, [r7, #28]
 801355e:	4293      	cmp	r3, r2
 8013560:	dbd7      	blt.n	8013512 <onAutocompleteRequest+0x96>
    }

    writeToOutput(cli, impl->invitation);
 8013562:	69bb      	ldr	r3, [r7, #24]
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	4619      	mov	r1, r3
 8013568:	6878      	ldr	r0, [r7, #4]
 801356a:	f000 f843 	bl	80135f4 <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 801356e:	69bb      	ldr	r3, [r7, #24]
 8013570:	69db      	ldr	r3, [r3, #28]
 8013572:	4619      	mov	r1, r3
 8013574:	6878      	ldr	r0, [r7, #4]
 8013576:	f000 f83d 	bl	80135f4 <writeToOutput>

    impl->inputLineLength = impl->cmdSize;
 801357a:	69bb      	ldr	r3, [r7, #24]
 801357c:	8c1a      	ldrh	r2, [r3, #32]
 801357e:	69bb      	ldr	r3, [r7, #24]
 8013580:	861a      	strh	r2, [r3, #48]	@ 0x30
 8013582:	e000      	b.n	8013586 <onAutocompleteRequest+0x10a>
        return;
 8013584:	bf00      	nop
}
 8013586:	3720      	adds	r7, #32
 8013588:	46bd      	mov	sp, r7
 801358a:	bd80      	pop	{r7, pc}
 801358c:	20000024 	.word	0x20000024

08013590 <clearCurrentLine>:

static void clearCurrentLine(EmbeddedCli *cli) {
 8013590:	b590      	push	{r4, r7, lr}
 8013592:	b087      	sub	sp, #28
 8013594:	af00      	add	r7, sp, #0
 8013596:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	68db      	ldr	r3, [r3, #12]
 801359c:	613b      	str	r3, [r7, #16]
    size_t len = impl->inputLineLength + strlen(impl->invitation);
 801359e:	693b      	ldr	r3, [r7, #16]
 80135a0:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80135a2:	461c      	mov	r4, r3
 80135a4:	693b      	ldr	r3, [r7, #16]
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	4618      	mov	r0, r3
 80135aa:	f7ec fe79 	bl	80002a0 <strlen>
 80135ae:	4603      	mov	r3, r0
 80135b0:	4423      	add	r3, r4
 80135b2:	60fb      	str	r3, [r7, #12]

    cli->writeChar(cli, '\r');
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	210d      	movs	r1, #13
 80135ba:	6878      	ldr	r0, [r7, #4]
 80135bc:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 80135be:	2300      	movs	r3, #0
 80135c0:	617b      	str	r3, [r7, #20]
 80135c2:	e007      	b.n	80135d4 <clearCurrentLine+0x44>
        cli->writeChar(cli, ' ');
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	2120      	movs	r1, #32
 80135ca:	6878      	ldr	r0, [r7, #4]
 80135cc:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 80135ce:	697b      	ldr	r3, [r7, #20]
 80135d0:	3301      	adds	r3, #1
 80135d2:	617b      	str	r3, [r7, #20]
 80135d4:	697a      	ldr	r2, [r7, #20]
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	429a      	cmp	r2, r3
 80135da:	d3f3      	bcc.n	80135c4 <clearCurrentLine+0x34>
    }
    cli->writeChar(cli, '\r');
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	210d      	movs	r1, #13
 80135e2:	6878      	ldr	r0, [r7, #4]
 80135e4:	4798      	blx	r3
    impl->inputLineLength = 0;
 80135e6:	693b      	ldr	r3, [r7, #16]
 80135e8:	2200      	movs	r2, #0
 80135ea:	861a      	strh	r2, [r3, #48]	@ 0x30
}
 80135ec:	bf00      	nop
 80135ee:	371c      	adds	r7, #28
 80135f0:	46bd      	mov	sp, r7
 80135f2:	bd90      	pop	{r4, r7, pc}

080135f4 <writeToOutput>:

static void writeToOutput(EmbeddedCli *cli, const char *str) {
 80135f4:	b580      	push	{r7, lr}
 80135f6:	b084      	sub	sp, #16
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
 80135fc:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 80135fe:	6838      	ldr	r0, [r7, #0]
 8013600:	f7ec fe4e 	bl	80002a0 <strlen>
 8013604:	60b8      	str	r0, [r7, #8]

    for (size_t i = 0; i < len; ++i) {
 8013606:	2300      	movs	r3, #0
 8013608:	60fb      	str	r3, [r7, #12]
 801360a:	e00b      	b.n	8013624 <writeToOutput+0x30>
        cli->writeChar(cli, str[i]);
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	6839      	ldr	r1, [r7, #0]
 8013612:	68fa      	ldr	r2, [r7, #12]
 8013614:	440a      	add	r2, r1
 8013616:	7812      	ldrb	r2, [r2, #0]
 8013618:	4611      	mov	r1, r2
 801361a:	6878      	ldr	r0, [r7, #4]
 801361c:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	3301      	adds	r3, #1
 8013622:	60fb      	str	r3, [r7, #12]
 8013624:	68fa      	ldr	r2, [r7, #12]
 8013626:	68bb      	ldr	r3, [r7, #8]
 8013628:	429a      	cmp	r2, r3
 801362a:	d3ef      	bcc.n	801360c <writeToOutput+0x18>
    }
}
 801362c:	bf00      	nop
 801362e:	bf00      	nop
 8013630:	3710      	adds	r7, #16
 8013632:	46bd      	mov	sp, r7
 8013634:	bd80      	pop	{r7, pc}

08013636 <isControlChar>:

static bool isControlChar(char c) {
 8013636:	b480      	push	{r7}
 8013638:	b083      	sub	sp, #12
 801363a:	af00      	add	r7, sp, #0
 801363c:	4603      	mov	r3, r0
 801363e:	71fb      	strb	r3, [r7, #7]
    return c == '\r' || c == '\n' || c == '\b' || c == '\t' || c == 0x7F;
 8013640:	79fb      	ldrb	r3, [r7, #7]
 8013642:	2b0d      	cmp	r3, #13
 8013644:	d00b      	beq.n	801365e <isControlChar+0x28>
 8013646:	79fb      	ldrb	r3, [r7, #7]
 8013648:	2b0a      	cmp	r3, #10
 801364a:	d008      	beq.n	801365e <isControlChar+0x28>
 801364c:	79fb      	ldrb	r3, [r7, #7]
 801364e:	2b08      	cmp	r3, #8
 8013650:	d005      	beq.n	801365e <isControlChar+0x28>
 8013652:	79fb      	ldrb	r3, [r7, #7]
 8013654:	2b09      	cmp	r3, #9
 8013656:	d002      	beq.n	801365e <isControlChar+0x28>
 8013658:	79fb      	ldrb	r3, [r7, #7]
 801365a:	2b7f      	cmp	r3, #127	@ 0x7f
 801365c:	d101      	bne.n	8013662 <isControlChar+0x2c>
 801365e:	2301      	movs	r3, #1
 8013660:	e000      	b.n	8013664 <isControlChar+0x2e>
 8013662:	2300      	movs	r3, #0
 8013664:	f003 0301 	and.w	r3, r3, #1
 8013668:	b2db      	uxtb	r3, r3
}
 801366a:	4618      	mov	r0, r3
 801366c:	370c      	adds	r7, #12
 801366e:	46bd      	mov	sp, r7
 8013670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013674:	4770      	bx	lr

08013676 <isDisplayableChar>:

static bool isDisplayableChar(char c) {
 8013676:	b480      	push	{r7}
 8013678:	b083      	sub	sp, #12
 801367a:	af00      	add	r7, sp, #0
 801367c:	4603      	mov	r3, r0
 801367e:	71fb      	strb	r3, [r7, #7]
    return (c >= 32 && c <= 126);
 8013680:	79fb      	ldrb	r3, [r7, #7]
 8013682:	2b1f      	cmp	r3, #31
 8013684:	d904      	bls.n	8013690 <isDisplayableChar+0x1a>
 8013686:	79fb      	ldrb	r3, [r7, #7]
 8013688:	2b7e      	cmp	r3, #126	@ 0x7e
 801368a:	d801      	bhi.n	8013690 <isDisplayableChar+0x1a>
 801368c:	2301      	movs	r3, #1
 801368e:	e000      	b.n	8013692 <isDisplayableChar+0x1c>
 8013690:	2300      	movs	r3, #0
 8013692:	f003 0301 	and.w	r3, r3, #1
 8013696:	b2db      	uxtb	r3, r3
}
 8013698:	4618      	mov	r0, r3
 801369a:	370c      	adds	r7, #12
 801369c:	46bd      	mov	sp, r7
 801369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a2:	4770      	bx	lr

080136a4 <fifoBufAvailable>:

static uint16_t fifoBufAvailable(FifoBuf *buffer) {
 80136a4:	b480      	push	{r7}
 80136a6:	b083      	sub	sp, #12
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	6078      	str	r0, [r7, #4]
    if (buffer->back >= buffer->front)
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	88da      	ldrh	r2, [r3, #6]
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	889b      	ldrh	r3, [r3, #4]
 80136b4:	429a      	cmp	r2, r3
 80136b6:	d306      	bcc.n	80136c6 <fifoBufAvailable+0x22>
        return (uint16_t) (buffer->back - buffer->front);
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	88da      	ldrh	r2, [r3, #6]
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	889b      	ldrh	r3, [r3, #4]
 80136c0:	1ad3      	subs	r3, r2, r3
 80136c2:	b29b      	uxth	r3, r3
 80136c4:	e009      	b.n	80136da <fifoBufAvailable+0x36>
    else
        return (uint16_t) (buffer->size - buffer->front + buffer->back);
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	891a      	ldrh	r2, [r3, #8]
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	889b      	ldrh	r3, [r3, #4]
 80136ce:	1ad3      	subs	r3, r2, r3
 80136d0:	b29a      	uxth	r2, r3
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	88db      	ldrh	r3, [r3, #6]
 80136d6:	4413      	add	r3, r2
 80136d8:	b29b      	uxth	r3, r3
}
 80136da:	4618      	mov	r0, r3
 80136dc:	370c      	adds	r7, #12
 80136de:	46bd      	mov	sp, r7
 80136e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136e4:	4770      	bx	lr

080136e6 <fifoBufPop>:

static char fifoBufPop(FifoBuf *buffer) {
 80136e6:	b480      	push	{r7}
 80136e8:	b085      	sub	sp, #20
 80136ea:	af00      	add	r7, sp, #0
 80136ec:	6078      	str	r0, [r7, #4]
    char a = '\0';
 80136ee:	2300      	movs	r3, #0
 80136f0:	73fb      	strb	r3, [r7, #15]
    if (buffer->front != buffer->back) {
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	889a      	ldrh	r2, [r3, #4]
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	88db      	ldrh	r3, [r3, #6]
 80136fa:	429a      	cmp	r2, r3
 80136fc:	d014      	beq.n	8013728 <fifoBufPop+0x42>
        a = buffer->buf[buffer->front];
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	687a      	ldr	r2, [r7, #4]
 8013704:	8892      	ldrh	r2, [r2, #4]
 8013706:	4413      	add	r3, r2
 8013708:	781b      	ldrb	r3, [r3, #0]
 801370a:	73fb      	strb	r3, [r7, #15]
        buffer->front = (uint16_t) (buffer->front + 1) % buffer->size;
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	889b      	ldrh	r3, [r3, #4]
 8013710:	3301      	adds	r3, #1
 8013712:	b29b      	uxth	r3, r3
 8013714:	687a      	ldr	r2, [r7, #4]
 8013716:	8912      	ldrh	r2, [r2, #8]
 8013718:	fbb3 f1f2 	udiv	r1, r3, r2
 801371c:	fb01 f202 	mul.w	r2, r1, r2
 8013720:	1a9b      	subs	r3, r3, r2
 8013722:	b29a      	uxth	r2, r3
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	809a      	strh	r2, [r3, #4]
    }
    return a;
 8013728:	7bfb      	ldrb	r3, [r7, #15]
}
 801372a:	4618      	mov	r0, r3
 801372c:	3714      	adds	r7, #20
 801372e:	46bd      	mov	sp, r7
 8013730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013734:	4770      	bx	lr

08013736 <fifoBufPush>:

static bool fifoBufPush(FifoBuf *buffer, char a) {
 8013736:	b480      	push	{r7}
 8013738:	b085      	sub	sp, #20
 801373a:	af00      	add	r7, sp, #0
 801373c:	6078      	str	r0, [r7, #4]
 801373e:	460b      	mov	r3, r1
 8013740:	70fb      	strb	r3, [r7, #3]
    uint16_t newBack = (uint16_t) (buffer->back + 1) % buffer->size;
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	88db      	ldrh	r3, [r3, #6]
 8013746:	3301      	adds	r3, #1
 8013748:	b29b      	uxth	r3, r3
 801374a:	687a      	ldr	r2, [r7, #4]
 801374c:	8912      	ldrh	r2, [r2, #8]
 801374e:	fbb3 f1f2 	udiv	r1, r3, r2
 8013752:	fb01 f202 	mul.w	r2, r1, r2
 8013756:	1a9b      	subs	r3, r3, r2
 8013758:	81fb      	strh	r3, [r7, #14]
    if (newBack != buffer->front) {
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	889b      	ldrh	r3, [r3, #4]
 801375e:	89fa      	ldrh	r2, [r7, #14]
 8013760:	429a      	cmp	r2, r3
 8013762:	d00b      	beq.n	801377c <fifoBufPush+0x46>
        buffer->buf[buffer->back] = a;
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	687a      	ldr	r2, [r7, #4]
 801376a:	88d2      	ldrh	r2, [r2, #6]
 801376c:	4413      	add	r3, r2
 801376e:	78fa      	ldrb	r2, [r7, #3]
 8013770:	701a      	strb	r2, [r3, #0]
        buffer->back = newBack;
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	89fa      	ldrh	r2, [r7, #14]
 8013776:	80da      	strh	r2, [r3, #6]
        return true;
 8013778:	2301      	movs	r3, #1
 801377a:	e000      	b.n	801377e <fifoBufPush+0x48>
    }
    return false;
 801377c:	2300      	movs	r3, #0
}
 801377e:	4618      	mov	r0, r3
 8013780:	3714      	adds	r7, #20
 8013782:	46bd      	mov	sp, r7
 8013784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013788:	4770      	bx	lr

0801378a <historyPut>:

static bool historyPut(CliHistory *history, const char *str) {
 801378a:	b580      	push	{r7, lr}
 801378c:	b088      	sub	sp, #32
 801378e:	af00      	add	r7, sp, #0
 8013790:	6078      	str	r0, [r7, #4]
 8013792:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 8013794:	6838      	ldr	r0, [r7, #0]
 8013796:	f7ec fd83 	bl	80002a0 <strlen>
 801379a:	61b8      	str	r0, [r7, #24]
    // each item is ended with \0 so, need to have that much space at least
    if (history->bufferSize < len + 1)
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	889b      	ldrh	r3, [r3, #4]
 80137a0:	461a      	mov	r2, r3
 80137a2:	69bb      	ldr	r3, [r7, #24]
 80137a4:	3301      	adds	r3, #1
 80137a6:	429a      	cmp	r2, r3
 80137a8:	d201      	bcs.n	80137ae <historyPut+0x24>
        return false;
 80137aa:	2300      	movs	r3, #0
 80137ac:	e04d      	b.n	801384a <historyPut+0xc0>

    // remove str from history (if it's present) so we don't get duplicates
    historyRemove(history, str);
 80137ae:	6839      	ldr	r1, [r7, #0]
 80137b0:	6878      	ldr	r0, [r7, #4]
 80137b2:	f000 f86a 	bl	801388a <historyRemove>

    size_t usedSize;
    // remove old items if new one can't fit into buffer
    while (history->itemsCount > 0) {
 80137b6:	e024      	b.n	8013802 <historyPut+0x78>
        const char *item = historyGet(history, history->itemsCount);
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	891b      	ldrh	r3, [r3, #8]
 80137bc:	4619      	mov	r1, r3
 80137be:	6878      	ldr	r0, [r7, #4]
 80137c0:	f000 f847 	bl	8013852 <historyGet>
 80137c4:	6178      	str	r0, [r7, #20]
        size_t itemLen = strlen(item);
 80137c6:	6978      	ldr	r0, [r7, #20]
 80137c8:	f7ec fd6a 	bl	80002a0 <strlen>
 80137cc:	6138      	str	r0, [r7, #16]
        usedSize = ((size_t) (item - history->buf)) + itemLen + 1;
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	697a      	ldr	r2, [r7, #20]
 80137d4:	1ad3      	subs	r3, r2, r3
 80137d6:	461a      	mov	r2, r3
 80137d8:	693b      	ldr	r3, [r7, #16]
 80137da:	4413      	add	r3, r2
 80137dc:	3301      	adds	r3, #1
 80137de:	61fb      	str	r3, [r7, #28]

        size_t freeSpace = history->bufferSize - usedSize;
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	889b      	ldrh	r3, [r3, #4]
 80137e4:	461a      	mov	r2, r3
 80137e6:	69fb      	ldr	r3, [r7, #28]
 80137e8:	1ad3      	subs	r3, r2, r3
 80137ea:	60fb      	str	r3, [r7, #12]

        if (freeSpace >= len + 1)
 80137ec:	69bb      	ldr	r3, [r7, #24]
 80137ee:	3301      	adds	r3, #1
 80137f0:	68fa      	ldr	r2, [r7, #12]
 80137f2:	429a      	cmp	r2, r3
 80137f4:	d20a      	bcs.n	801380c <historyPut+0x82>
            break;

        // space not enough, remove last element
        --history->itemsCount;
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	891b      	ldrh	r3, [r3, #8]
 80137fa:	3b01      	subs	r3, #1
 80137fc:	b29a      	uxth	r2, r3
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	811a      	strh	r2, [r3, #8]
    while (history->itemsCount > 0) {
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	891b      	ldrh	r3, [r3, #8]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d1d6      	bne.n	80137b8 <historyPut+0x2e>
 801380a:	e000      	b.n	801380e <historyPut+0x84>
            break;
 801380c:	bf00      	nop
    }
    if (history->itemsCount > 0) {
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	891b      	ldrh	r3, [r3, #8]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d00a      	beq.n	801382c <historyPut+0xa2>
        // when history not empty, shift elements so new item is first
        memmove(&history->buf[len + 1], history->buf, usedSize);
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	681a      	ldr	r2, [r3, #0]
 801381a:	69bb      	ldr	r3, [r7, #24]
 801381c:	3301      	adds	r3, #1
 801381e:	18d0      	adds	r0, r2, r3
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	69fa      	ldr	r2, [r7, #28]
 8013826:	4619      	mov	r1, r3
 8013828:	f00b faca 	bl	801edc0 <memmove>
    }
    memcpy(history->buf, str, len + 1);
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	6818      	ldr	r0, [r3, #0]
 8013830:	69bb      	ldr	r3, [r7, #24]
 8013832:	3301      	adds	r3, #1
 8013834:	461a      	mov	r2, r3
 8013836:	6839      	ldr	r1, [r7, #0]
 8013838:	f00b fbf3 	bl	801f022 <memcpy>
    ++history->itemsCount;
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	891b      	ldrh	r3, [r3, #8]
 8013840:	3301      	adds	r3, #1
 8013842:	b29a      	uxth	r2, r3
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	811a      	strh	r2, [r3, #8]

    return true;
 8013848:	2301      	movs	r3, #1
}
 801384a:	4618      	mov	r0, r3
 801384c:	3720      	adds	r7, #32
 801384e:	46bd      	mov	sp, r7
 8013850:	bd80      	pop	{r7, pc}

08013852 <historyGet>:

static const char *historyGet(CliHistory *history, uint16_t item) {
 8013852:	b580      	push	{r7, lr}
 8013854:	b082      	sub	sp, #8
 8013856:	af00      	add	r7, sp, #0
 8013858:	6078      	str	r0, [r7, #4]
 801385a:	460b      	mov	r3, r1
 801385c:	807b      	strh	r3, [r7, #2]
    if (item == 0 || item > history->itemsCount)
 801385e:	887b      	ldrh	r3, [r7, #2]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d004      	beq.n	801386e <historyGet+0x1c>
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	891b      	ldrh	r3, [r3, #8]
 8013868:	887a      	ldrh	r2, [r7, #2]
 801386a:	429a      	cmp	r2, r3
 801386c:	d901      	bls.n	8013872 <historyGet+0x20>
        return NULL;
 801386e:	2300      	movs	r3, #0
 8013870:	e007      	b.n	8013882 <historyGet+0x30>

    // items are stored in the same way (separated by \0 and counted from 1),
    // so can use this call
    return embeddedCliGetToken(history->buf, item);
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	887a      	ldrh	r2, [r7, #2]
 8013878:	4611      	mov	r1, r2
 801387a:	4618      	mov	r0, r3
 801387c:	f7ff f882 	bl	8012984 <embeddedCliGetToken>
 8013880:	4603      	mov	r3, r0
}
 8013882:	4618      	mov	r0, r3
 8013884:	3708      	adds	r7, #8
 8013886:	46bd      	mov	sp, r7
 8013888:	bd80      	pop	{r7, pc}

0801388a <historyRemove>:

static void historyRemove(CliHistory *history, const char *str) {
 801388a:	b580      	push	{r7, lr}
 801388c:	b086      	sub	sp, #24
 801388e:	af00      	add	r7, sp, #0
 8013890:	6078      	str	r0, [r7, #4]
 8013892:	6039      	str	r1, [r7, #0]
    if (str == NULL || history->itemsCount == 0)
 8013894:	683b      	ldr	r3, [r7, #0]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d04c      	beq.n	8013934 <historyRemove+0xaa>
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	891b      	ldrh	r3, [r3, #8]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d048      	beq.n	8013934 <historyRemove+0xaa>
        return;
    char *item = NULL;
 80138a2:	2300      	movs	r3, #0
 80138a4:	617b      	str	r3, [r7, #20]
    uint16_t itemPosition;
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 80138a6:	2301      	movs	r3, #1
 80138a8:	827b      	strh	r3, [r7, #18]
 80138aa:	e013      	b.n	80138d4 <historyRemove+0x4a>
        // items are stored in the same way (separated by \0 and counted from 1),
        // so can use this call
        item = embeddedCliGetTokenVariable(history->buf, itemPosition);
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	8a7a      	ldrh	r2, [r7, #18]
 80138b2:	4611      	mov	r1, r2
 80138b4:	4618      	mov	r0, r3
 80138b6:	f7ff f880 	bl	80129ba <embeddedCliGetTokenVariable>
 80138ba:	6178      	str	r0, [r7, #20]
        if (strcmp(item, str) == 0) {
 80138bc:	6839      	ldr	r1, [r7, #0]
 80138be:	6978      	ldr	r0, [r7, #20]
 80138c0:	f7ec fc8e 	bl	80001e0 <strcmp>
 80138c4:	4603      	mov	r3, r0
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d00a      	beq.n	80138e0 <historyRemove+0x56>
            break;
        }
        item = NULL;
 80138ca:	2300      	movs	r3, #0
 80138cc:	617b      	str	r3, [r7, #20]
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 80138ce:	8a7b      	ldrh	r3, [r7, #18]
 80138d0:	3301      	adds	r3, #1
 80138d2:	827b      	strh	r3, [r7, #18]
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	891b      	ldrh	r3, [r3, #8]
 80138d8:	8a7a      	ldrh	r2, [r7, #18]
 80138da:	429a      	cmp	r2, r3
 80138dc:	d9e6      	bls.n	80138ac <historyRemove+0x22>
 80138de:	e000      	b.n	80138e2 <historyRemove+0x58>
            break;
 80138e0:	bf00      	nop
    }
    if (item == NULL)
 80138e2:	697b      	ldr	r3, [r7, #20]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d027      	beq.n	8013938 <historyRemove+0xae>
        return;

    --history->itemsCount;
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	891b      	ldrh	r3, [r3, #8]
 80138ec:	3b01      	subs	r3, #1
 80138ee:	b29a      	uxth	r2, r3
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	811a      	strh	r2, [r3, #8]
    if (itemPosition == (history->itemsCount + 1)) {
 80138f4:	8a7a      	ldrh	r2, [r7, #18]
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	891b      	ldrh	r3, [r3, #8]
 80138fa:	3301      	adds	r3, #1
 80138fc:	429a      	cmp	r2, r3
 80138fe:	d01d      	beq.n	801393c <historyRemove+0xb2>
        // if this is a last element, nothing is remaining to move
        return;
    }

    size_t len = strlen(item);
 8013900:	6978      	ldr	r0, [r7, #20]
 8013902:	f7ec fccd 	bl	80002a0 <strlen>
 8013906:	60f8      	str	r0, [r7, #12]
    size_t remaining = (size_t) (history->bufferSize - (item + len + 1 - history->buf));
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	889b      	ldrh	r3, [r3, #4]
 801390c:	4619      	mov	r1, r3
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	3301      	adds	r3, #1
 8013912:	697a      	ldr	r2, [r7, #20]
 8013914:	441a      	add	r2, r3
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	1ad3      	subs	r3, r2, r3
 801391c:	1acb      	subs	r3, r1, r3
 801391e:	60bb      	str	r3, [r7, #8]
    // move everything to the right of found item
    memmove(item, &item[len + 1], remaining);
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	3301      	adds	r3, #1
 8013924:	697a      	ldr	r2, [r7, #20]
 8013926:	4413      	add	r3, r2
 8013928:	68ba      	ldr	r2, [r7, #8]
 801392a:	4619      	mov	r1, r3
 801392c:	6978      	ldr	r0, [r7, #20]
 801392e:	f00b fa47 	bl	801edc0 <memmove>
 8013932:	e004      	b.n	801393e <historyRemove+0xb4>
        return;
 8013934:	bf00      	nop
 8013936:	e002      	b.n	801393e <historyRemove+0xb4>
        return;
 8013938:	bf00      	nop
 801393a:	e000      	b.n	801393e <historyRemove+0xb4>
        return;
 801393c:	bf00      	nop
}
 801393e:	3718      	adds	r7, #24
 8013940:	46bd      	mov	sp, r7
 8013942:	bd80      	pop	{r7, pc}

08013944 <getTokenPosition>:

static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos) {
 8013944:	b480      	push	{r7}
 8013946:	b085      	sub	sp, #20
 8013948:	af00      	add	r7, sp, #0
 801394a:	6078      	str	r0, [r7, #4]
 801394c:	460b      	mov	r3, r1
 801394e:	807b      	strh	r3, [r7, #2]
    if (tokenizedStr == NULL || pos == 0)
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d002      	beq.n	801395c <getTokenPosition+0x18>
 8013956:	887b      	ldrh	r3, [r7, #2]
 8013958:	2b00      	cmp	r3, #0
 801395a:	d102      	bne.n	8013962 <getTokenPosition+0x1e>
        return CLI_TOKEN_NPOS;
 801395c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013960:	e028      	b.n	80139b4 <getTokenPosition+0x70>
    uint16_t i = 0;
 8013962:	2300      	movs	r3, #0
 8013964:	81fb      	strh	r3, [r7, #14]
    uint16_t tokenCount = 1;
 8013966:	2301      	movs	r3, #1
 8013968:	81bb      	strh	r3, [r7, #12]
    while (true) {
        if (tokenCount == pos)
 801396a:	89ba      	ldrh	r2, [r7, #12]
 801396c:	887b      	ldrh	r3, [r7, #2]
 801396e:	429a      	cmp	r2, r3
 8013970:	d013      	beq.n	801399a <getTokenPosition+0x56>
            break;

        if (tokenizedStr[i] == '\0') {
 8013972:	89fb      	ldrh	r3, [r7, #14]
 8013974:	687a      	ldr	r2, [r7, #4]
 8013976:	4413      	add	r3, r2
 8013978:	781b      	ldrb	r3, [r3, #0]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d109      	bne.n	8013992 <getTokenPosition+0x4e>
            ++tokenCount;
 801397e:	89bb      	ldrh	r3, [r7, #12]
 8013980:	3301      	adds	r3, #1
 8013982:	81bb      	strh	r3, [r7, #12]
            if (tokenizedStr[i + 1] == '\0')
 8013984:	89fb      	ldrh	r3, [r7, #14]
 8013986:	3301      	adds	r3, #1
 8013988:	687a      	ldr	r2, [r7, #4]
 801398a:	4413      	add	r3, r2
 801398c:	781b      	ldrb	r3, [r3, #0]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d005      	beq.n	801399e <getTokenPosition+0x5a>
                break;
        }

        ++i;
 8013992:	89fb      	ldrh	r3, [r7, #14]
 8013994:	3301      	adds	r3, #1
 8013996:	81fb      	strh	r3, [r7, #14]
        if (tokenCount == pos)
 8013998:	e7e7      	b.n	801396a <getTokenPosition+0x26>
            break;
 801399a:	bf00      	nop
 801399c:	e000      	b.n	80139a0 <getTokenPosition+0x5c>
                break;
 801399e:	bf00      	nop
    }

    if (tokenizedStr[i] != '\0')
 80139a0:	89fb      	ldrh	r3, [r7, #14]
 80139a2:	687a      	ldr	r2, [r7, #4]
 80139a4:	4413      	add	r3, r2
 80139a6:	781b      	ldrb	r3, [r3, #0]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d001      	beq.n	80139b0 <getTokenPosition+0x6c>
        return i;
 80139ac:	89fb      	ldrh	r3, [r7, #14]
 80139ae:	e001      	b.n	80139b4 <getTokenPosition+0x70>
    else
        return CLI_TOKEN_NPOS;
 80139b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80139b4:	4618      	mov	r0, r3
 80139b6:	3714      	adds	r7, #20
 80139b8:	46bd      	mov	sp, r7
 80139ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139be:	4770      	bx	lr

080139c0 <MX_FATFS_Init>:
	retSD = FATFS_UnLinkDriver(SDPath);
}
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80139c0:	b580      	push	{r7, lr}
 80139c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80139c4:	4904      	ldr	r1, [pc, #16]	@ (80139d8 <MX_FATFS_Init+0x18>)
 80139c6:	4805      	ldr	r0, [pc, #20]	@ (80139dc <MX_FATFS_Init+0x1c>)
 80139c8:	f008 fa74 	bl	801beb4 <FATFS_LinkDriver>
 80139cc:	4603      	mov	r3, r0
 80139ce:	461a      	mov	r2, r3
 80139d0:	4b03      	ldr	r3, [pc, #12]	@ (80139e0 <MX_FATFS_Init+0x20>)
 80139d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80139d4:	bf00      	nop
 80139d6:	bd80      	pop	{r7, pc}
 80139d8:	20001b58 	.word	0x20001b58
 80139dc:	08025128 	.word	0x08025128
 80139e0:	20001b54 	.word	0x20001b54

080139e4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80139e4:	b480      	push	{r7}
 80139e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80139e8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80139ea:	4618      	mov	r0, r3
 80139ec:	46bd      	mov	sp, r7
 80139ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f2:	4770      	bx	lr

080139f4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80139f4:	b580      	push	{r7, lr}
 80139f6:	b082      	sub	sp, #8
 80139f8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80139fa:	2300      	movs	r3, #0
 80139fc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80139fe:	f000 f86b 	bl	8013ad8 <BSP_SD_IsDetected>
 8013a02:	4603      	mov	r3, r0
 8013a04:	2b01      	cmp	r3, #1
 8013a06:	d001      	beq.n	8013a0c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8013a08:	2301      	movs	r3, #1
 8013a0a:	e005      	b.n	8013a18 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8013a0c:	4804      	ldr	r0, [pc, #16]	@ (8013a20 <BSP_SD_Init+0x2c>)
 8013a0e:	f7f6 fbd1 	bl	800a1b4 <HAL_SD_Init>
 8013a12:	4603      	mov	r3, r0
 8013a14:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8013a16:	79fb      	ldrb	r3, [r7, #7]
}
 8013a18:	4618      	mov	r0, r3
 8013a1a:	3708      	adds	r7, #8
 8013a1c:	46bd      	mov	sp, r7
 8013a1e:	bd80      	pop	{r7, pc}
 8013a20:	200018b8 	.word	0x200018b8

08013a24 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8013a24:	b580      	push	{r7, lr}
 8013a26:	b088      	sub	sp, #32
 8013a28:	af02      	add	r7, sp, #8
 8013a2a:	60f8      	str	r0, [r7, #12]
 8013a2c:	60b9      	str	r1, [r7, #8]
 8013a2e:	607a      	str	r2, [r7, #4]
 8013a30:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8013a32:	2300      	movs	r3, #0
 8013a34:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8013a36:	683b      	ldr	r3, [r7, #0]
 8013a38:	9300      	str	r3, [sp, #0]
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	68ba      	ldr	r2, [r7, #8]
 8013a3e:	68f9      	ldr	r1, [r7, #12]
 8013a40:	4806      	ldr	r0, [pc, #24]	@ (8013a5c <BSP_SD_ReadBlocks+0x38>)
 8013a42:	f7f6 fc67 	bl	800a314 <HAL_SD_ReadBlocks>
 8013a46:	4603      	mov	r3, r0
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d001      	beq.n	8013a50 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8013a4c:	2301      	movs	r3, #1
 8013a4e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a52:	4618      	mov	r0, r3
 8013a54:	3718      	adds	r7, #24
 8013a56:	46bd      	mov	sp, r7
 8013a58:	bd80      	pop	{r7, pc}
 8013a5a:	bf00      	nop
 8013a5c:	200018b8 	.word	0x200018b8

08013a60 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8013a60:	b580      	push	{r7, lr}
 8013a62:	b088      	sub	sp, #32
 8013a64:	af02      	add	r7, sp, #8
 8013a66:	60f8      	str	r0, [r7, #12]
 8013a68:	60b9      	str	r1, [r7, #8]
 8013a6a:	607a      	str	r2, [r7, #4]
 8013a6c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8013a6e:	2300      	movs	r3, #0
 8013a70:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8013a72:	683b      	ldr	r3, [r7, #0]
 8013a74:	9300      	str	r3, [sp, #0]
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	68ba      	ldr	r2, [r7, #8]
 8013a7a:	68f9      	ldr	r1, [r7, #12]
 8013a7c:	4806      	ldr	r0, [pc, #24]	@ (8013a98 <BSP_SD_WriteBlocks+0x38>)
 8013a7e:	f7f6 fe2f 	bl	800a6e0 <HAL_SD_WriteBlocks>
 8013a82:	4603      	mov	r3, r0
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d001      	beq.n	8013a8c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8013a88:	2301      	movs	r3, #1
 8013a8a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a8e:	4618      	mov	r0, r3
 8013a90:	3718      	adds	r7, #24
 8013a92:	46bd      	mov	sp, r7
 8013a94:	bd80      	pop	{r7, pc}
 8013a96:	bf00      	nop
 8013a98:	200018b8 	.word	0x200018b8

08013a9c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8013aa0:	4805      	ldr	r0, [pc, #20]	@ (8013ab8 <BSP_SD_GetCardState+0x1c>)
 8013aa2:	f7f7 f97b 	bl	800ad9c <HAL_SD_GetCardState>
 8013aa6:	4603      	mov	r3, r0
 8013aa8:	2b04      	cmp	r3, #4
 8013aaa:	bf14      	ite	ne
 8013aac:	2301      	movne	r3, #1
 8013aae:	2300      	moveq	r3, #0
 8013ab0:	b2db      	uxtb	r3, r3
}
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	bd80      	pop	{r7, pc}
 8013ab6:	bf00      	nop
 8013ab8:	200018b8 	.word	0x200018b8

08013abc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8013abc:	b580      	push	{r7, lr}
 8013abe:	b082      	sub	sp, #8
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8013ac4:	6879      	ldr	r1, [r7, #4]
 8013ac6:	4803      	ldr	r0, [pc, #12]	@ (8013ad4 <BSP_SD_GetCardInfo+0x18>)
 8013ac8:	f7f7 f93c 	bl	800ad44 <HAL_SD_GetCardInfo>
}
 8013acc:	bf00      	nop
 8013ace:	3708      	adds	r7, #8
 8013ad0:	46bd      	mov	sp, r7
 8013ad2:	bd80      	pop	{r7, pc}
 8013ad4:	200018b8 	.word	0x200018b8

08013ad8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8013ad8:	b480      	push	{r7}
 8013ada:	b083      	sub	sp, #12
 8013adc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8013ade:	2301      	movs	r3, #1
 8013ae0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8013ae2:	79fb      	ldrb	r3, [r7, #7]
 8013ae4:	b2db      	uxtb	r3, r3
}
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	370c      	adds	r7, #12
 8013aea:	46bd      	mov	sp, r7
 8013aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af0:	4770      	bx	lr
	...

08013af4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b082      	sub	sp, #8
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	4603      	mov	r3, r0
 8013afc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8013afe:	4b0b      	ldr	r3, [pc, #44]	@ (8013b2c <SD_CheckStatus+0x38>)
 8013b00:	2201      	movs	r2, #1
 8013b02:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8013b04:	f7ff ffca 	bl	8013a9c <BSP_SD_GetCardState>
 8013b08:	4603      	mov	r3, r0
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d107      	bne.n	8013b1e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8013b0e:	4b07      	ldr	r3, [pc, #28]	@ (8013b2c <SD_CheckStatus+0x38>)
 8013b10:	781b      	ldrb	r3, [r3, #0]
 8013b12:	b2db      	uxtb	r3, r3
 8013b14:	f023 0301 	bic.w	r3, r3, #1
 8013b18:	b2da      	uxtb	r2, r3
 8013b1a:	4b04      	ldr	r3, [pc, #16]	@ (8013b2c <SD_CheckStatus+0x38>)
 8013b1c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8013b1e:	4b03      	ldr	r3, [pc, #12]	@ (8013b2c <SD_CheckStatus+0x38>)
 8013b20:	781b      	ldrb	r3, [r3, #0]
 8013b22:	b2db      	uxtb	r3, r3
}
 8013b24:	4618      	mov	r0, r3
 8013b26:	3708      	adds	r7, #8
 8013b28:	46bd      	mov	sp, r7
 8013b2a:	bd80      	pop	{r7, pc}
 8013b2c:	20000028 	.word	0x20000028

08013b30 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8013b30:	b580      	push	{r7, lr}
 8013b32:	b082      	sub	sp, #8
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	4603      	mov	r3, r0
 8013b38:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8013b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8013b68 <SD_initialize+0x38>)
 8013b3c:	2201      	movs	r2, #1
 8013b3e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8013b40:	f7ff ff58 	bl	80139f4 <BSP_SD_Init>
 8013b44:	4603      	mov	r3, r0
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d107      	bne.n	8013b5a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8013b4a:	79fb      	ldrb	r3, [r7, #7]
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	f7ff ffd1 	bl	8013af4 <SD_CheckStatus>
 8013b52:	4603      	mov	r3, r0
 8013b54:	461a      	mov	r2, r3
 8013b56:	4b04      	ldr	r3, [pc, #16]	@ (8013b68 <SD_initialize+0x38>)
 8013b58:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8013b5a:	4b03      	ldr	r3, [pc, #12]	@ (8013b68 <SD_initialize+0x38>)
 8013b5c:	781b      	ldrb	r3, [r3, #0]
 8013b5e:	b2db      	uxtb	r3, r3
}
 8013b60:	4618      	mov	r0, r3
 8013b62:	3708      	adds	r7, #8
 8013b64:	46bd      	mov	sp, r7
 8013b66:	bd80      	pop	{r7, pc}
 8013b68:	20000028 	.word	0x20000028

08013b6c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8013b6c:	b580      	push	{r7, lr}
 8013b6e:	b082      	sub	sp, #8
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	4603      	mov	r3, r0
 8013b74:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8013b76:	79fb      	ldrb	r3, [r7, #7]
 8013b78:	4618      	mov	r0, r3
 8013b7a:	f7ff ffbb 	bl	8013af4 <SD_CheckStatus>
 8013b7e:	4603      	mov	r3, r0
}
 8013b80:	4618      	mov	r0, r3
 8013b82:	3708      	adds	r7, #8
 8013b84:	46bd      	mov	sp, r7
 8013b86:	bd80      	pop	{r7, pc}

08013b88 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b086      	sub	sp, #24
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	60b9      	str	r1, [r7, #8]
 8013b90:	607a      	str	r2, [r7, #4]
 8013b92:	603b      	str	r3, [r7, #0]
 8013b94:	4603      	mov	r3, r0
 8013b96:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013b98:	2301      	movs	r3, #1
 8013b9a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8013b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8013ba0:	683a      	ldr	r2, [r7, #0]
 8013ba2:	6879      	ldr	r1, [r7, #4]
 8013ba4:	68b8      	ldr	r0, [r7, #8]
 8013ba6:	f7ff ff3d 	bl	8013a24 <BSP_SD_ReadBlocks>
 8013baa:	4603      	mov	r3, r0
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d107      	bne.n	8013bc0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8013bb0:	bf00      	nop
 8013bb2:	f7ff ff73 	bl	8013a9c <BSP_SD_GetCardState>
 8013bb6:	4603      	mov	r3, r0
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d1fa      	bne.n	8013bb2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8013bbc:	2300      	movs	r3, #0
 8013bbe:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8013bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	3718      	adds	r7, #24
 8013bc6:	46bd      	mov	sp, r7
 8013bc8:	bd80      	pop	{r7, pc}

08013bca <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8013bca:	b580      	push	{r7, lr}
 8013bcc:	b086      	sub	sp, #24
 8013bce:	af00      	add	r7, sp, #0
 8013bd0:	60b9      	str	r1, [r7, #8]
 8013bd2:	607a      	str	r2, [r7, #4]
 8013bd4:	603b      	str	r3, [r7, #0]
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013bda:	2301      	movs	r3, #1
 8013bdc:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8013bde:	f04f 33ff 	mov.w	r3, #4294967295
 8013be2:	683a      	ldr	r2, [r7, #0]
 8013be4:	6879      	ldr	r1, [r7, #4]
 8013be6:	68b8      	ldr	r0, [r7, #8]
 8013be8:	f7ff ff3a 	bl	8013a60 <BSP_SD_WriteBlocks>
 8013bec:	4603      	mov	r3, r0
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d107      	bne.n	8013c02 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8013bf2:	bf00      	nop
 8013bf4:	f7ff ff52 	bl	8013a9c <BSP_SD_GetCardState>
 8013bf8:	4603      	mov	r3, r0
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d1fa      	bne.n	8013bf4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8013bfe:	2300      	movs	r3, #0
 8013c00:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8013c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c04:	4618      	mov	r0, r3
 8013c06:	3718      	adds	r7, #24
 8013c08:	46bd      	mov	sp, r7
 8013c0a:	bd80      	pop	{r7, pc}

08013c0c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b08c      	sub	sp, #48	@ 0x30
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	4603      	mov	r3, r0
 8013c14:	603a      	str	r2, [r7, #0]
 8013c16:	71fb      	strb	r3, [r7, #7]
 8013c18:	460b      	mov	r3, r1
 8013c1a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8013c1c:	2301      	movs	r3, #1
 8013c1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8013c22:	4b25      	ldr	r3, [pc, #148]	@ (8013cb8 <SD_ioctl+0xac>)
 8013c24:	781b      	ldrb	r3, [r3, #0]
 8013c26:	b2db      	uxtb	r3, r3
 8013c28:	f003 0301 	and.w	r3, r3, #1
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d001      	beq.n	8013c34 <SD_ioctl+0x28>
 8013c30:	2303      	movs	r3, #3
 8013c32:	e03c      	b.n	8013cae <SD_ioctl+0xa2>

  switch (cmd)
 8013c34:	79bb      	ldrb	r3, [r7, #6]
 8013c36:	2b03      	cmp	r3, #3
 8013c38:	d834      	bhi.n	8013ca4 <SD_ioctl+0x98>
 8013c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8013c40 <SD_ioctl+0x34>)
 8013c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c40:	08013c51 	.word	0x08013c51
 8013c44:	08013c59 	.word	0x08013c59
 8013c48:	08013c71 	.word	0x08013c71
 8013c4c:	08013c8b 	.word	0x08013c8b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8013c50:	2300      	movs	r3, #0
 8013c52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8013c56:	e028      	b.n	8013caa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8013c58:	f107 030c 	add.w	r3, r7, #12
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	f7ff ff2d 	bl	8013abc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8013c62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013c64:	683b      	ldr	r3, [r7, #0]
 8013c66:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013c68:	2300      	movs	r3, #0
 8013c6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8013c6e:	e01c      	b.n	8013caa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013c70:	f107 030c 	add.w	r3, r7, #12
 8013c74:	4618      	mov	r0, r3
 8013c76:	f7ff ff21 	bl	8013abc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8013c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c7c:	b29a      	uxth	r2, r3
 8013c7e:	683b      	ldr	r3, [r7, #0]
 8013c80:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8013c82:	2300      	movs	r3, #0
 8013c84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8013c88:	e00f      	b.n	8013caa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013c8a:	f107 030c 	add.w	r3, r7, #12
 8013c8e:	4618      	mov	r0, r3
 8013c90:	f7ff ff14 	bl	8013abc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8013c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c96:	0a5a      	lsrs	r2, r3, #9
 8013c98:	683b      	ldr	r3, [r7, #0]
 8013c9a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013c9c:	2300      	movs	r3, #0
 8013c9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8013ca2:	e002      	b.n	8013caa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8013ca4:	2304      	movs	r3, #4
 8013ca6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8013caa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8013cae:	4618      	mov	r0, r3
 8013cb0:	3730      	adds	r7, #48	@ 0x30
 8013cb2:	46bd      	mov	sp, r7
 8013cb4:	bd80      	pop	{r7, pc}
 8013cb6:	bf00      	nop
 8013cb8:	20000028 	.word	0x20000028

08013cbc <RtcInt>:
uint8_t set_alarm_Time = 1;
char scheduled_packet[30] = "NULL";

uint16_t prev_min = 0;
void RtcInt()
{
 8013cbc:	b480      	push	{r7}
 8013cbe:	af00      	add	r7, sp, #0

	set_alarm_Time = 1;
 8013cc0:	4b03      	ldr	r3, [pc, #12]	@ (8013cd0 <RtcInt+0x14>)
 8013cc2:	2201      	movs	r2, #1
 8013cc4:	701a      	strb	r2, [r3, #0]
	//Rtc_set_alarm();
}
 8013cc6:	bf00      	nop
 8013cc8:	46bd      	mov	sp, r7
 8013cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cce:	4770      	bx	lr
 8013cd0:	20000029 	.word	0x20000029

08013cd4 <Rtc_Alarm_watchdog_disable>:

void Rtc_Alarm_watchdog_disable()
{
 8013cd4:	b480      	push	{r7}
 8013cd6:	af00      	add	r7, sp, #0
  __HAL_RTC_ALARM_DISABLE_IT(&hrtc, RTC_IT_ALRB);
 8013cd8:	4b06      	ldr	r3, [pc, #24]	@ (8013cf4 <Rtc_Alarm_watchdog_disable+0x20>)
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	689a      	ldr	r2, [r3, #8]
 8013cde:	4b05      	ldr	r3, [pc, #20]	@ (8013cf4 <Rtc_Alarm_watchdog_disable+0x20>)
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8013ce6:	609a      	str	r2, [r3, #8]
}
 8013ce8:	bf00      	nop
 8013cea:	46bd      	mov	sp, r7
 8013cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf0:	4770      	bx	lr
 8013cf2:	bf00      	nop
 8013cf4:	20001898 	.word	0x20001898

08013cf8 <Rtc_Alarm_watchdog>:

void Rtc_Alarm_watchdog()
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b092      	sub	sp, #72	@ 0x48
 8013cfc:	af00      	add	r7, sp, #0
	uint16_t seconds;
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 8013cfe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013d02:	2200      	movs	r2, #0
 8013d04:	4619      	mov	r1, r3
 8013d06:	4828      	ldr	r0, [pc, #160]	@ (8013da8 <Rtc_Alarm_watchdog+0xb0>)
 8013d08:	f7f5 fe9f 	bl	8009a4a <HAL_RTC_GetTime>
	RTC_DateTypeDef sDate;
    HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8013d0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013d10:	2200      	movs	r2, #0
 8013d12:	4619      	mov	r1, r3
 8013d14:	4824      	ldr	r0, [pc, #144]	@ (8013da8 <Rtc_Alarm_watchdog+0xb0>)
 8013d16:	f7f5 ff7a 	bl	8009c0e <HAL_RTC_GetDate>

    seconds = gTime.Seconds + 25;
 8013d1a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8013d1e:	3319      	adds	r3, #25
 8013d20:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    if(seconds > 59)
 8013d24:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013d28:	2b3b      	cmp	r3, #59	@ 0x3b
 8013d2a:	d902      	bls.n	8013d32 <Rtc_Alarm_watchdog+0x3a>
    {
    	seconds = 0;
 8013d2c:	2300      	movs	r3, #0
 8013d2e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    }

      RTC_AlarmTypeDef sAlarm = {0};
 8013d32:	1d3b      	adds	r3, r7, #4
 8013d34:	2228      	movs	r2, #40	@ 0x28
 8013d36:	2100      	movs	r1, #0
 8013d38:	4618      	mov	r0, r3
 8013d3a:	f00b f85b 	bl	801edf4 <memset>
	  sAlarm.AlarmTime.Hours = 0;
 8013d3e:	2300      	movs	r3, #0
 8013d40:	713b      	strb	r3, [r7, #4]
	  sAlarm.AlarmTime.Minutes = 0;
 8013d42:	2300      	movs	r3, #0
 8013d44:	717b      	strb	r3, [r7, #5]
	  sAlarm.AlarmTime.Seconds = seconds;
 8013d46:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013d4a:	b2db      	uxtb	r3, r3
 8013d4c:	71bb      	strb	r3, [r7, #6]
	  sAlarm.AlarmTime.SubSeconds = 0;
 8013d4e:	2300      	movs	r3, #0
 8013d50:	60bb      	str	r3, [r7, #8]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8013d52:	2300      	movs	r3, #0
 8013d54:	613b      	str	r3, [r7, #16]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8013d56:	2300      	movs	r3, #0
 8013d58:	617b      	str	r3, [r7, #20]
	  sAlarm.AlarmMask = RTC_ALARMMASK_MINUTES| RTC_ALARMMASK_HOURS | RTC_ALARMMASK_DATEWEEKDAY;
 8013d5a:	4b14      	ldr	r3, [pc, #80]	@ (8013dac <Rtc_Alarm_watchdog+0xb4>)
 8013d5c:	61bb      	str	r3, [r7, #24]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8013d5e:	2300      	movs	r3, #0
 8013d60:	61fb      	str	r3, [r7, #28]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8013d62:	2300      	movs	r3, #0
 8013d64:	623b      	str	r3, [r7, #32]
	  sAlarm.AlarmDateWeekDay = 1;
 8013d66:	2301      	movs	r3, #1
 8013d68:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	  sAlarm.Alarm = RTC_ALARM_B;
 8013d6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013d70:	62bb      	str	r3, [r7, #40]	@ 0x28
	  HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8013d72:	1d3b      	adds	r3, r7, #4
 8013d74:	2200      	movs	r2, #0
 8013d76:	4619      	mov	r1, r3
 8013d78:	480b      	ldr	r0, [pc, #44]	@ (8013da8 <Rtc_Alarm_watchdog+0xb0>)
 8013d7a:	f7f5 ff97 	bl	8009cac <HAL_RTC_SetAlarm_IT>

	  __HAL_RTC_ALARM_ENABLE_IT (&hrtc, RTC_IT_ALRB);
 8013d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8013da8 <Rtc_Alarm_watchdog+0xb0>)
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	689a      	ldr	r2, [r3, #8]
 8013d84:	4b08      	ldr	r3, [pc, #32]	@ (8013da8 <Rtc_Alarm_watchdog+0xb0>)
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8013d8c:	609a      	str	r2, [r3, #8]
	  __HAL_RTC_ALARM_CLEAR_FLAG (&hrtc, RTC_IT_ALRB);
 8013d8e:	4b06      	ldr	r3, [pc, #24]	@ (8013da8 <Rtc_Alarm_watchdog+0xb0>)
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	68db      	ldr	r3, [r3, #12]
 8013d94:	b2da      	uxtb	r2, r3
 8013d96:	4b04      	ldr	r3, [pc, #16]	@ (8013da8 <Rtc_Alarm_watchdog+0xb0>)
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	f462 5202 	orn	r2, r2, #8320	@ 0x2080
 8013d9e:	60da      	str	r2, [r3, #12]

}
 8013da0:	bf00      	nop
 8013da2:	3748      	adds	r7, #72	@ 0x48
 8013da4:	46bd      	mov	sp, r7
 8013da6:	bd80      	pop	{r7, pc}
 8013da8:	20001898 	.word	0x20001898
 8013dac:	80808000 	.word	0x80808000

08013db0 <Set_Date>:

void Set_Date(char *Datebuffer) {
 8013db0:	b580      	push	{r7, lr}
 8013db2:	b088      	sub	sp, #32
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	6078      	str	r0, [r7, #4]

	RTC_DateTypeDef sDate;
	uint8_t date[10];
	uint8_t flag;
	flag = Parse_Date(Datebuffer, date);
 8013db8:	f107 030c 	add.w	r3, r7, #12
 8013dbc:	4619      	mov	r1, r3
 8013dbe:	6878      	ldr	r0, [r7, #4]
 8013dc0:	f000 f8ac 	bl	8013f1c <Parse_Date>
 8013dc4:	4603      	mov	r3, r0
 8013dc6:	77fb      	strb	r3, [r7, #31]

	if (!flag) {
 8013dc8:	7ffb      	ldrb	r3, [r7, #31]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d10c      	bne.n	8013de8 <Set_Date+0x38>
		sDate.Date = date[0];
 8013dce:	7b3b      	ldrb	r3, [r7, #12]
 8013dd0:	76bb      	strb	r3, [r7, #26]
		sDate.Month = date[1];
 8013dd2:	7b7b      	ldrb	r3, [r7, #13]
 8013dd4:	767b      	strb	r3, [r7, #25]
		sDate.Year = date[2];
 8013dd6:	7bbb      	ldrb	r3, [r7, #14]
 8013dd8:	76fb      	strb	r3, [r7, #27]
		HAL_RTC_SetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8013dda:	f107 0318 	add.w	r3, r7, #24
 8013dde:	2200      	movs	r2, #0
 8013de0:	4619      	mov	r1, r3
 8013de2:	4805      	ldr	r0, [pc, #20]	@ (8013df8 <Set_Date+0x48>)
 8013de4:	f7f5 fe8f 	bl	8009b06 <HAL_RTC_SetDate>
	}
HAL_Delay(500);
 8013de8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8013dec:	f7f0 f9fc 	bl	80041e8 <HAL_Delay>
}
 8013df0:	bf00      	nop
 8013df2:	3720      	adds	r7, #32
 8013df4:	46bd      	mov	sp, r7
 8013df6:	bd80      	pop	{r7, pc}
 8013df8:	20001898 	.word	0x20001898

08013dfc <Rtc_manual_alarm>:

}


void Rtc_manual_alarm()
{
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	b08a      	sub	sp, #40	@ 0x28
 8013e00:	af02      	add	r7, sp, #8
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 8013e02:	f107 0308 	add.w	r3, r7, #8
 8013e06:	2200      	movs	r2, #0
 8013e08:	4619      	mov	r1, r3
 8013e0a:	4826      	ldr	r0, [pc, #152]	@ (8013ea4 <Rtc_manual_alarm+0xa8>)
 8013e0c:	f7f5 fe1d 	bl	8009a4a <HAL_RTC_GetTime>
	RTC_DateTypeDef sDate;
    HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8013e10:	1d3b      	adds	r3, r7, #4
 8013e12:	2200      	movs	r2, #0
 8013e14:	4619      	mov	r1, r3
 8013e16:	4823      	ldr	r0, [pc, #140]	@ (8013ea4 <Rtc_manual_alarm+0xa8>)
 8013e18:	f7f5 fef9 	bl	8009c0e <HAL_RTC_GetDate>


    uint16_t minute;
	uint8_t hour = 0;
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	77fb      	strb	r3, [r7, #31]

	   hour = gTime.Hours;
 8013e20:	7a3b      	ldrb	r3, [r7, #8]
 8013e22:	77fb      	strb	r3, [r7, #31]


    if((gTime.Minutes % _Flash_Packet.Time_Interval) == 0 && (prev_min != gTime.Minutes))
 8013e24:	7a7b      	ldrb	r3, [r7, #9]
 8013e26:	461a      	mov	r2, r3
 8013e28:	4b1f      	ldr	r3, [pc, #124]	@ (8013ea8 <Rtc_manual_alarm+0xac>)
 8013e2a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8013e2e:	fbb2 f1f3 	udiv	r1, r2, r3
 8013e32:	fb01 f303 	mul.w	r3, r1, r3
 8013e36:	1ad3      	subs	r3, r2, r3
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d128      	bne.n	8013e8e <Rtc_manual_alarm+0x92>
 8013e3c:	7a7b      	ldrb	r3, [r7, #9]
 8013e3e:	461a      	mov	r2, r3
 8013e40:	4b1a      	ldr	r3, [pc, #104]	@ (8013eac <Rtc_manual_alarm+0xb0>)
 8013e42:	881b      	ldrh	r3, [r3, #0]
 8013e44:	429a      	cmp	r2, r3
 8013e46:	d022      	beq.n	8013e8e <Rtc_manual_alarm+0x92>
    {
    	set_alarm_Time = 1;
 8013e48:	4b19      	ldr	r3, [pc, #100]	@ (8013eb0 <Rtc_manual_alarm+0xb4>)
 8013e4a:	2201      	movs	r2, #1
 8013e4c:	701a      	strb	r2, [r3, #0]
    	prev_min = gTime.Minutes;
 8013e4e:	7a7b      	ldrb	r3, [r7, #9]
 8013e50:	461a      	mov	r2, r3
 8013e52:	4b16      	ldr	r3, [pc, #88]	@ (8013eac <Rtc_manual_alarm+0xb0>)
 8013e54:	801a      	strh	r2, [r3, #0]
    	minute = gTime.Minutes +  _Flash_Packet.Time_Interval;
 8013e56:	7a7b      	ldrb	r3, [r7, #9]
 8013e58:	461a      	mov	r2, r3
 8013e5a:	4b13      	ldr	r3, [pc, #76]	@ (8013ea8 <Rtc_manual_alarm+0xac>)
 8013e5c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8013e60:	b29b      	uxth	r3, r3
 8013e62:	4413      	add	r3, r2
 8013e64:	83bb      	strh	r3, [r7, #28]
    	   if(minute > 59)
 8013e66:	8bbb      	ldrh	r3, [r7, #28]
 8013e68:	2b3b      	cmp	r3, #59	@ 0x3b
 8013e6a:	d907      	bls.n	8013e7c <Rtc_manual_alarm+0x80>
    	    {
    	    	hour = hour + 1; //we go to next hour as our time is schedualed for next hour
 8013e6c:	7ffb      	ldrb	r3, [r7, #31]
 8013e6e:	3301      	adds	r3, #1
 8013e70:	77fb      	strb	r3, [r7, #31]

    	    	if(hour > 23)
 8013e72:	7ffb      	ldrb	r3, [r7, #31]
 8013e74:	2b17      	cmp	r3, #23
 8013e76:	d901      	bls.n	8013e7c <Rtc_manual_alarm+0x80>
    	    	{
    	          hour = 0;
 8013e78:	2300      	movs	r3, #0
 8013e7a:	77fb      	strb	r3, [r7, #31]
    	    	}
    	    }

    	   sprintf(scheduled_packet,"%02d:%02d:%02d",hour,minute,gTime.Seconds);
 8013e7c:	7ffa      	ldrb	r2, [r7, #31]
 8013e7e:	8bbb      	ldrh	r3, [r7, #28]
 8013e80:	7ab9      	ldrb	r1, [r7, #10]
 8013e82:	9100      	str	r1, [sp, #0]
 8013e84:	490b      	ldr	r1, [pc, #44]	@ (8013eb4 <Rtc_manual_alarm+0xb8>)
 8013e86:	480c      	ldr	r0, [pc, #48]	@ (8013eb8 <Rtc_manual_alarm+0xbc>)
 8013e88:	f00a fe6a 	bl	801eb60 <siprintf>
    {
    	 set_alarm_Time = 0;
    }


}
 8013e8c:	e006      	b.n	8013e9c <Rtc_manual_alarm+0xa0>
    else if(set_alarm_Time)
 8013e8e:	4b08      	ldr	r3, [pc, #32]	@ (8013eb0 <Rtc_manual_alarm+0xb4>)
 8013e90:	781b      	ldrb	r3, [r3, #0]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d002      	beq.n	8013e9c <Rtc_manual_alarm+0xa0>
    	 set_alarm_Time = 0;
 8013e96:	4b06      	ldr	r3, [pc, #24]	@ (8013eb0 <Rtc_manual_alarm+0xb4>)
 8013e98:	2200      	movs	r2, #0
 8013e9a:	701a      	strb	r2, [r3, #0]
}
 8013e9c:	bf00      	nop
 8013e9e:	3720      	adds	r7, #32
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	bd80      	pop	{r7, pc}
 8013ea4:	20001898 	.word	0x20001898
 8013ea8:	200012cc 	.word	0x200012cc
 8013eac:	20001b5c 	.word	0x20001b5c
 8013eb0:	20000029 	.word	0x20000029
 8013eb4:	08024808 	.word	0x08024808
 8013eb8:	2000002c 	.word	0x2000002c

08013ebc <Set_Time>:

void Rtc_sleep_alarm()
{

}
void Set_Time(char *Timebuffer) {
 8013ebc:	b580      	push	{r7, lr}
 8013ebe:	b08c      	sub	sp, #48	@ 0x30
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime;
	uint8_t time[10];
	uint8_t flag;
	flag = Parse_Time(Timebuffer, time);
 8013ec4:	f107 030c 	add.w	r3, r7, #12
 8013ec8:	4619      	mov	r1, r3
 8013eca:	6878      	ldr	r0, [r7, #4]
 8013ecc:	f000 f890 	bl	8013ff0 <Parse_Time>
 8013ed0:	4603      	mov	r3, r0
 8013ed2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	HAL_StatusTypeDef status;
	if (!flag) {
 8013ed6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d113      	bne.n	8013f06 <Set_Time+0x4a>
		sTime.Hours = time[0];
 8013ede:	7b3b      	ldrb	r3, [r7, #12]
 8013ee0:	763b      	strb	r3, [r7, #24]
		sTime.Minutes = time[1];
 8013ee2:	7b7b      	ldrb	r3, [r7, #13]
 8013ee4:	767b      	strb	r3, [r7, #25]
		sTime.Seconds = time[2];
 8013ee6:	7bbb      	ldrb	r3, [r7, #14]
 8013ee8:	76bb      	strb	r3, [r7, #26]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8013eea:	2300      	movs	r3, #0
 8013eec:	627b      	str	r3, [r7, #36]	@ 0x24
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8013eee:	2300      	movs	r3, #0
 8013ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
		status = HAL_RTC_SetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 8013ef2:	f107 0318 	add.w	r3, r7, #24
 8013ef6:	2200      	movs	r2, #0
 8013ef8:	4619      	mov	r1, r3
 8013efa:	4807      	ldr	r0, [pc, #28]	@ (8013f18 <Set_Time+0x5c>)
 8013efc:	f7f5 fd0b 	bl	8009916 <HAL_RTC_SetTime>
 8013f00:	4603      	mov	r3, r0
 8013f02:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	}

	HAL_Delay(500);
 8013f06:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8013f0a:	f7f0 f96d 	bl	80041e8 <HAL_Delay>

}
 8013f0e:	bf00      	nop
 8013f10:	3730      	adds	r7, #48	@ 0x30
 8013f12:	46bd      	mov	sp, r7
 8013f14:	bd80      	pop	{r7, pc}
 8013f16:	bf00      	nop
 8013f18:	20001898 	.word	0x20001898

08013f1c <Parse_Date>:
 * therefore delimiter is ':'
 * we will extract date and save them in there respective variable
 * return 1 = buffer empty 0 = success
 */
uint8_t Parse_Date(char *Datebuffer,uint8_t *date)
{
 8013f1c:	b580      	push	{r7, lr}
 8013f1e:	b084      	sub	sp, #16
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	6078      	str	r0, [r7, #4]
 8013f24:	6039      	str	r1, [r7, #0]
	uint16_t i =0;
 8013f26:	2300      	movs	r3, #0
 8013f28:	81fb      	strh	r3, [r7, #14]
	int16_t val = 0;
 8013f2a:	2300      	movs	r3, #0
 8013f2c:	81bb      	strh	r3, [r7, #12]
	char *ptr = strtok(Datebuffer, ":");
 8013f2e:	492e      	ldr	r1, [pc, #184]	@ (8013fe8 <Parse_Date+0xcc>)
 8013f30:	6878      	ldr	r0, [r7, #4]
 8013f32:	f00a ff75 	bl	801ee20 <strtok>
 8013f36:	60b8      	str	r0, [r7, #8]

	if(ptr == NULL)
 8013f38:	68bb      	ldr	r3, [r7, #8]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d14b      	bne.n	8013fd6 <Parse_Date+0xba>
		{
			return 1;
 8013f3e:	2301      	movs	r3, #1
 8013f40:	e04d      	b.n	8013fde <Parse_Date+0xc2>

	while(ptr != NULL)
	{


			val = atoi(ptr);
 8013f42:	68b8      	ldr	r0, [r7, #8]
 8013f44:	f009 fcd4 	bl	801d8f0 <atoi>
 8013f48:	4603      	mov	r3, r0
 8013f4a:	81bb      	strh	r3, [r7, #12]
			if(i == 0 && (val > 31 || val <=0))
 8013f4c:	89fb      	ldrh	r3, [r7, #14]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d10a      	bne.n	8013f68 <Parse_Date+0x4c>
 8013f52:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013f56:	2b1f      	cmp	r3, #31
 8013f58:	dc03      	bgt.n	8013f62 <Parse_Date+0x46>
 8013f5a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	dc02      	bgt.n	8013f68 <Parse_Date+0x4c>
			{
				val= 1;
 8013f62:	2301      	movs	r3, #1
 8013f64:	81bb      	strh	r3, [r7, #12]
 8013f66:	e028      	b.n	8013fba <Parse_Date+0x9e>
			}
			else if(i == 1 && (val >  12 || val <=0))
 8013f68:	89fb      	ldrh	r3, [r7, #14]
 8013f6a:	2b01      	cmp	r3, #1
 8013f6c:	d10a      	bne.n	8013f84 <Parse_Date+0x68>
 8013f6e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013f72:	2b0c      	cmp	r3, #12
 8013f74:	dc03      	bgt.n	8013f7e <Parse_Date+0x62>
 8013f76:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	dc02      	bgt.n	8013f84 <Parse_Date+0x68>
			{
				val= 1;
 8013f7e:	2301      	movs	r3, #1
 8013f80:	81bb      	strh	r3, [r7, #12]
 8013f82:	e01a      	b.n	8013fba <Parse_Date+0x9e>
			}
			else if(i == 2 && val > 1000)
 8013f84:	89fb      	ldrh	r3, [r7, #14]
 8013f86:	2b02      	cmp	r3, #2
 8013f88:	d112      	bne.n	8013fb0 <Parse_Date+0x94>
 8013f8a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013f8e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8013f92:	dd0d      	ble.n	8013fb0 <Parse_Date+0x94>
			{
				val=val%100;
 8013f94:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013f98:	4a14      	ldr	r2, [pc, #80]	@ (8013fec <Parse_Date+0xd0>)
 8013f9a:	fb82 1203 	smull	r1, r2, r2, r3
 8013f9e:	1151      	asrs	r1, r2, #5
 8013fa0:	17da      	asrs	r2, r3, #31
 8013fa2:	1a8a      	subs	r2, r1, r2
 8013fa4:	2164      	movs	r1, #100	@ 0x64
 8013fa6:	fb01 f202 	mul.w	r2, r1, r2
 8013faa:	1a9b      	subs	r3, r3, r2
 8013fac:	81bb      	strh	r3, [r7, #12]
 8013fae:	e004      	b.n	8013fba <Parse_Date+0x9e>
			}
			else if(i > 2)
 8013fb0:	89fb      	ldrh	r3, [r7, #14]
 8013fb2:	2b02      	cmp	r3, #2
 8013fb4:	d901      	bls.n	8013fba <Parse_Date+0x9e>
			{
				return 1;
 8013fb6:	2301      	movs	r3, #1
 8013fb8:	e011      	b.n	8013fde <Parse_Date+0xc2>
			}


		   date[i] =val;
 8013fba:	89fb      	ldrh	r3, [r7, #14]
 8013fbc:	683a      	ldr	r2, [r7, #0]
 8013fbe:	4413      	add	r3, r2
 8013fc0:	89ba      	ldrh	r2, [r7, #12]
 8013fc2:	b2d2      	uxtb	r2, r2
 8013fc4:	701a      	strb	r2, [r3, #0]
		//printf("'%s'\n", ptr);
		ptr = strtok(NULL, ":");
 8013fc6:	4908      	ldr	r1, [pc, #32]	@ (8013fe8 <Parse_Date+0xcc>)
 8013fc8:	2000      	movs	r0, #0
 8013fca:	f00a ff29 	bl	801ee20 <strtok>
 8013fce:	60b8      	str	r0, [r7, #8]
		i++;
 8013fd0:	89fb      	ldrh	r3, [r7, #14]
 8013fd2:	3301      	adds	r3, #1
 8013fd4:	81fb      	strh	r3, [r7, #14]
	while(ptr != NULL)
 8013fd6:	68bb      	ldr	r3, [r7, #8]
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d1b2      	bne.n	8013f42 <Parse_Date+0x26>
	}

	}

	return 0;
 8013fdc:	2300      	movs	r3, #0

}
 8013fde:	4618      	mov	r0, r3
 8013fe0:	3710      	adds	r7, #16
 8013fe2:	46bd      	mov	sp, r7
 8013fe4:	bd80      	pop	{r7, pc}
 8013fe6:	bf00      	nop
 8013fe8:	08024818 	.word	0x08024818
 8013fec:	51eb851f 	.word	0x51eb851f

08013ff0 <Parse_Time>:
 * therefore delimiter is ':'
 * we will extract time and save them in there respective variable
 * return 1 = buffer empty 0 = success
 */
uint8_t Parse_Time(char *Timebuffer,uint8_t *time)
{
 8013ff0:	b580      	push	{r7, lr}
 8013ff2:	b084      	sub	sp, #16
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	6078      	str	r0, [r7, #4]
 8013ff8:	6039      	str	r1, [r7, #0]
	uint16_t i =0;
 8013ffa:	2300      	movs	r3, #0
 8013ffc:	81fb      	strh	r3, [r7, #14]
		int16_t val = 0;
 8013ffe:	2300      	movs	r3, #0
 8014000:	81bb      	strh	r3, [r7, #12]
		char *ptr = strtok(Timebuffer, ":");
 8014002:	492a      	ldr	r1, [pc, #168]	@ (80140ac <Parse_Time+0xbc>)
 8014004:	6878      	ldr	r0, [r7, #4]
 8014006:	f00a ff0b 	bl	801ee20 <strtok>
 801400a:	60b8      	str	r0, [r7, #8]

		if(ptr == NULL)
 801400c:	68bb      	ldr	r3, [r7, #8]
 801400e:	2b00      	cmp	r3, #0
 8014010:	d143      	bne.n	801409a <Parse_Time+0xaa>
			{
				return 1;
 8014012:	2301      	movs	r3, #1
 8014014:	e045      	b.n	80140a2 <Parse_Time+0xb2>

		while(ptr != NULL)
		{


				val = atoi(ptr);
 8014016:	68b8      	ldr	r0, [r7, #8]
 8014018:	f009 fc6a 	bl	801d8f0 <atoi>
 801401c:	4603      	mov	r3, r0
 801401e:	81bb      	strh	r3, [r7, #12]
				if(i == 0 && (val > 24|| val <0))
 8014020:	89fb      	ldrh	r3, [r7, #14]
 8014022:	2b00      	cmp	r3, #0
 8014024:	d10a      	bne.n	801403c <Parse_Time+0x4c>
 8014026:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801402a:	2b18      	cmp	r3, #24
 801402c:	dc03      	bgt.n	8014036 <Parse_Time+0x46>
 801402e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8014032:	2b00      	cmp	r3, #0
 8014034:	da02      	bge.n	801403c <Parse_Time+0x4c>
				{
					val= 24;
 8014036:	2318      	movs	r3, #24
 8014038:	81bb      	strh	r3, [r7, #12]
 801403a:	e020      	b.n	801407e <Parse_Time+0x8e>
				}
				else if(i == 1 && (val >  59 || val <0))
 801403c:	89fb      	ldrh	r3, [r7, #14]
 801403e:	2b01      	cmp	r3, #1
 8014040:	d10a      	bne.n	8014058 <Parse_Time+0x68>
 8014042:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8014046:	2b3b      	cmp	r3, #59	@ 0x3b
 8014048:	dc03      	bgt.n	8014052 <Parse_Time+0x62>
 801404a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801404e:	2b00      	cmp	r3, #0
 8014050:	da02      	bge.n	8014058 <Parse_Time+0x68>
				{
					val= 59;
 8014052:	233b      	movs	r3, #59	@ 0x3b
 8014054:	81bb      	strh	r3, [r7, #12]
 8014056:	e012      	b.n	801407e <Parse_Time+0x8e>
				}
				else if(i == 2 && (val > 59 || val <0))
 8014058:	89fb      	ldrh	r3, [r7, #14]
 801405a:	2b02      	cmp	r3, #2
 801405c:	d10a      	bne.n	8014074 <Parse_Time+0x84>
 801405e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8014062:	2b3b      	cmp	r3, #59	@ 0x3b
 8014064:	dc03      	bgt.n	801406e <Parse_Time+0x7e>
 8014066:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801406a:	2b00      	cmp	r3, #0
 801406c:	da02      	bge.n	8014074 <Parse_Time+0x84>
				{
					val=59;
 801406e:	233b      	movs	r3, #59	@ 0x3b
 8014070:	81bb      	strh	r3, [r7, #12]
 8014072:	e004      	b.n	801407e <Parse_Time+0x8e>
				}
				else if(i > 2)
 8014074:	89fb      	ldrh	r3, [r7, #14]
 8014076:	2b02      	cmp	r3, #2
 8014078:	d901      	bls.n	801407e <Parse_Time+0x8e>
				{
					return 1;
 801407a:	2301      	movs	r3, #1
 801407c:	e011      	b.n	80140a2 <Parse_Time+0xb2>
				}


				time[i] =val;
 801407e:	89fb      	ldrh	r3, [r7, #14]
 8014080:	683a      	ldr	r2, [r7, #0]
 8014082:	4413      	add	r3, r2
 8014084:	89ba      	ldrh	r2, [r7, #12]
 8014086:	b2d2      	uxtb	r2, r2
 8014088:	701a      	strb	r2, [r3, #0]
			//printf("'%s'\n", ptr);
			ptr = strtok(NULL, ":");
 801408a:	4908      	ldr	r1, [pc, #32]	@ (80140ac <Parse_Time+0xbc>)
 801408c:	2000      	movs	r0, #0
 801408e:	f00a fec7 	bl	801ee20 <strtok>
 8014092:	60b8      	str	r0, [r7, #8]
			i++;
 8014094:	89fb      	ldrh	r3, [r7, #14]
 8014096:	3301      	adds	r3, #1
 8014098:	81fb      	strh	r3, [r7, #14]
		while(ptr != NULL)
 801409a:	68bb      	ldr	r3, [r7, #8]
 801409c:	2b00      	cmp	r3, #0
 801409e:	d1ba      	bne.n	8014016 <Parse_Time+0x26>
		}

		}

		return 0;
 80140a0:	2300      	movs	r3, #0
}
 80140a2:	4618      	mov	r0, r3
 80140a4:	3710      	adds	r7, #16
 80140a6:	46bd      	mov	sp, r7
 80140a8:	bd80      	pop	{r7, pc}
 80140aa:	bf00      	nop
 80140ac:	08024818 	.word	0x08024818

080140b0 <CharToHexasc>:


 void CharToHexasc(uint8_t *pPos, uint8_t Wert)
{
 80140b0:	b480      	push	{r7}
 80140b2:	b083      	sub	sp, #12
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
 80140b8:	460b      	mov	r3, r1
 80140ba:	70fb      	strb	r3, [r7, #3]
      *pPos++ = kaHexAsc[Wert >> 4];
 80140bc:	78fb      	ldrb	r3, [r7, #3]
 80140be:	091b      	lsrs	r3, r3, #4
 80140c0:	b2db      	uxtb	r3, r3
 80140c2:	4619      	mov	r1, r3
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	1c5a      	adds	r2, r3, #1
 80140c8:	607a      	str	r2, [r7, #4]
 80140ca:	4a08      	ldr	r2, [pc, #32]	@ (80140ec <CharToHexasc+0x3c>)
 80140cc:	5c52      	ldrb	r2, [r2, r1]
 80140ce:	701a      	strb	r2, [r3, #0]
      *pPos = kaHexAsc[Wert & 0x0f];
 80140d0:	78fb      	ldrb	r3, [r7, #3]
 80140d2:	f003 030f 	and.w	r3, r3, #15
 80140d6:	4a05      	ldr	r2, [pc, #20]	@ (80140ec <CharToHexasc+0x3c>)
 80140d8:	5cd2      	ldrb	r2, [r2, r3]
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	701a      	strb	r2, [r3, #0]
}
 80140de:	bf00      	nop
 80140e0:	370c      	adds	r7, #12
 80140e2:	46bd      	mov	sp, r7
 80140e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e8:	4770      	bx	lr
 80140ea:	bf00      	nop
 80140ec:	0802513c 	.word	0x0802513c

080140f0 <adc_InitOneShotMode>:

#define ratio 1.27  //r1+r2/r2 465k/365k
#define offset 0    //add incase of any offset, sometimes there is offset in reading

static void adc_InitOneShotMode ()
{
 80140f0:	b580      	push	{r7, lr}
 80140f2:	b088      	sub	sp, #32
 80140f4:	af00      	add	r7, sp, #0
	adc_Disable();
 80140f6:	4830      	ldr	r0, [pc, #192]	@ (80141b8 <adc_InitOneShotMode+0xc8>)
 80140f8:	f7f0 f921 	bl	800433e <HAL_ADC_DeInit>

	 ADC_MultiModeTypeDef multimode = {0};
 80140fc:	f107 0314 	add.w	r3, r7, #20
 8014100:	2200      	movs	r2, #0
 8014102:	601a      	str	r2, [r3, #0]
 8014104:	605a      	str	r2, [r3, #4]
 8014106:	609a      	str	r2, [r3, #8]
	  hadc1.Instance = ADC1;
 8014108:	4b2b      	ldr	r3, [pc, #172]	@ (80141b8 <adc_InitOneShotMode+0xc8>)
 801410a:	4a2c      	ldr	r2, [pc, #176]	@ (80141bc <adc_InitOneShotMode+0xcc>)
 801410c:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 801410e:	4b2a      	ldr	r3, [pc, #168]	@ (80141b8 <adc_InitOneShotMode+0xc8>)
 8014110:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8014114:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8014116:	4b28      	ldr	r3, [pc, #160]	@ (80141b8 <adc_InitOneShotMode+0xc8>)
 8014118:	2200      	movs	r2, #0
 801411a:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = DISABLE;
 801411c:	4b26      	ldr	r3, [pc, #152]	@ (80141b8 <adc_InitOneShotMode+0xc8>)
 801411e:	2200      	movs	r2, #0
 8014120:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 8014122:	4b25      	ldr	r3, [pc, #148]	@ (80141b8 <adc_InitOneShotMode+0xc8>)
 8014124:	2200      	movs	r2, #0
 8014126:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8014128:	4b23      	ldr	r3, [pc, #140]	@ (80141b8 <adc_InitOneShotMode+0xc8>)
 801412a:	2200      	movs	r2, #0
 801412c:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8014130:	4b21      	ldr	r3, [pc, #132]	@ (80141b8 <adc_InitOneShotMode+0xc8>)
 8014132:	2200      	movs	r2, #0
 8014134:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8014136:	4b20      	ldr	r3, [pc, #128]	@ (80141b8 <adc_InitOneShotMode+0xc8>)
 8014138:	4a21      	ldr	r2, [pc, #132]	@ (80141c0 <adc_InitOneShotMode+0xd0>)
 801413a:	629a      	str	r2, [r3, #40]	@ 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 801413c:	4b1e      	ldr	r3, [pc, #120]	@ (80141b8 <adc_InitOneShotMode+0xc8>)
 801413e:	2200      	movs	r2, #0
 8014140:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 8014142:	4b1d      	ldr	r3, [pc, #116]	@ (80141b8 <adc_InitOneShotMode+0xc8>)
 8014144:	2201      	movs	r2, #1
 8014146:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 8014148:	4b1b      	ldr	r3, [pc, #108]	@ (80141b8 <adc_InitOneShotMode+0xc8>)
 801414a:	2200      	movs	r2, #0
 801414c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8014150:	4b19      	ldr	r3, [pc, #100]	@ (80141b8 <adc_InitOneShotMode+0xc8>)
 8014152:	2201      	movs	r2, #1
 8014154:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8014156:	4818      	ldr	r0, [pc, #96]	@ (80141b8 <adc_InitOneShotMode+0xc8>)
 8014158:	f7f0 f8ae 	bl	80042b8 <HAL_ADC_Init>
 801415c:	4603      	mov	r3, r0
 801415e:	2b00      	cmp	r3, #0
 8014160:	d001      	beq.n	8014166 <adc_InitOneShotMode+0x76>
	  {
	    Error_Handler();
 8014162:	f7ef faeb 	bl	800373c <Error_Handler>
	  }


	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 8014166:	2300      	movs	r3, #0
 8014168:	617b      	str	r3, [r7, #20]
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 801416a:	f107 0314 	add.w	r3, r7, #20
 801416e:	4619      	mov	r1, r3
 8014170:	4811      	ldr	r0, [pc, #68]	@ (80141b8 <adc_InitOneShotMode+0xc8>)
 8014172:	f7f0 fcb5 	bl	8004ae0 <HAL_ADCEx_MultiModeConfigChannel>
 8014176:	4603      	mov	r3, r0
 8014178:	2b00      	cmp	r3, #0
 801417a:	d001      	beq.n	8014180 <adc_InitOneShotMode+0x90>
	  {
	    Error_Handler();
 801417c:	f7ef fade 	bl	800373c <Error_Handler>
	  }

		ADC_ChannelConfTypeDef sConfig = {0};
 8014180:	1d3b      	adds	r3, r7, #4
 8014182:	2200      	movs	r2, #0
 8014184:	601a      	str	r2, [r3, #0]
 8014186:	605a      	str	r2, [r3, #4]
 8014188:	609a      	str	r2, [r3, #8]
 801418a:	60da      	str	r2, [r3, #12]
			  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
			  */
		sConfig.Channel = ADC_CHANNEL_10;
 801418c:	230a      	movs	r3, #10
 801418e:	607b      	str	r3, [r7, #4]
		  sConfig.Rank = 1;
 8014190:	2301      	movs	r3, #1
 8014192:	60bb      	str	r3, [r7, #8]
		  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8014194:	2302      	movs	r3, #2
 8014196:	60fb      	str	r3, [r7, #12]
		  sConfig.Offset = 0;
 8014198:	2300      	movs	r3, #0
 801419a:	613b      	str	r3, [r7, #16]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801419c:	1d3b      	adds	r3, r7, #4
 801419e:	4619      	mov	r1, r3
 80141a0:	4805      	ldr	r0, [pc, #20]	@ (80141b8 <adc_InitOneShotMode+0xc8>)
 80141a2:	f7f0 fa7f 	bl	80046a4 <HAL_ADC_ConfigChannel>
 80141a6:	4603      	mov	r3, r0
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d001      	beq.n	80141b0 <adc_InitOneShotMode+0xc0>
		  {
		    Error_Handler();
 80141ac:	f7ef fac6 	bl	800373c <Error_Handler>
		  }



}
 80141b0:	bf00      	nop
 80141b2:	3720      	adds	r7, #32
 80141b4:	46bd      	mov	sp, r7
 80141b6:	bd80      	pop	{r7, pc}
 80141b8:	200017f0 	.word	0x200017f0
 80141bc:	40012000 	.word	0x40012000
 80141c0:	0f000001 	.word	0x0f000001

080141c4 <adc_Getval>:

static uint32_t adc_Getval ()
{
 80141c4:	b580      	push	{r7, lr}
 80141c6:	af00      	add	r7, sp, #0

	return HAL_ADC_GetValue(&hadc1);
 80141c8:	4802      	ldr	r0, [pc, #8]	@ (80141d4 <adc_Getval+0x10>)
 80141ca:	f7f0 fa5d 	bl	8004688 <HAL_ADC_GetValue>
 80141ce:	4603      	mov	r3, r0

}
 80141d0:	4618      	mov	r0, r3
 80141d2:	bd80      	pop	{r7, pc}
 80141d4:	200017f0 	.word	0x200017f0

080141d8 <adc_Measure>:

uint8_t adc_Measure (float *bat_volt)
{
 80141d8:	b580      	push	{r7, lr}
 80141da:	b084      	sub	sp, #16
 80141dc:	af00      	add	r7, sp, #0
 80141de:	6078      	str	r0, [r7, #4]
	uint32_t val;
	adc_InitOneShotMode();
 80141e0:	f7ff ff86 	bl	80140f0 <adc_InitOneShotMode>
	HAL_Delay(1);
 80141e4:	2001      	movs	r0, #1
 80141e6:	f7ef ffff 	bl	80041e8 <HAL_Delay>
	adc_Start();
 80141ea:	4847      	ldr	r0, [pc, #284]	@ (8014308 <adc_Measure+0x130>)
 80141ec:	f7f0 f8da 	bl	80043a4 <HAL_ADC_Start>
	HAL_Delay(1);
 80141f0:	2001      	movs	r0, #1
 80141f2:	f7ef fff9 	bl	80041e8 <HAL_Delay>

	if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 80141f6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80141fa:	4843      	ldr	r0, [pc, #268]	@ (8014308 <adc_Measure+0x130>)
 80141fc:	f7f0 f9b9 	bl	8004572 <HAL_ADC_PollForConversion>
 8014200:	4603      	mov	r3, r0
 8014202:	2b00      	cmp	r3, #0
 8014204:	d01d      	beq.n	8014242 <adc_Measure+0x6a>
		{
		   HAL_Delay(1);
 8014206:	2001      	movs	r0, #1
 8014208:	f7ef ffee 	bl	80041e8 <HAL_Delay>
		   adc_Start();
 801420c:	483e      	ldr	r0, [pc, #248]	@ (8014308 <adc_Measure+0x130>)
 801420e:	f7f0 f8c9 	bl	80043a4 <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8014212:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014216:	483c      	ldr	r0, [pc, #240]	@ (8014308 <adc_Measure+0x130>)
 8014218:	f7f0 f9ab 	bl	8004572 <HAL_ADC_PollForConversion>
 801421c:	4603      	mov	r3, r0
 801421e:	2b00      	cmp	r3, #0
 8014220:	d00f      	beq.n	8014242 <adc_Measure+0x6a>
			{
				HAL_Delay(1);
 8014222:	2001      	movs	r0, #1
 8014224:	f7ef ffe0 	bl	80041e8 <HAL_Delay>
				adc_Start();
 8014228:	4837      	ldr	r0, [pc, #220]	@ (8014308 <adc_Measure+0x130>)
 801422a:	f7f0 f8bb 	bl	80043a4 <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 801422e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014232:	4835      	ldr	r0, [pc, #212]	@ (8014308 <adc_Measure+0x130>)
 8014234:	f7f0 f99d 	bl	8004572 <HAL_ADC_PollForConversion>
 8014238:	4603      	mov	r3, r0
 801423a:	2b00      	cmp	r3, #0
 801423c:	d001      	beq.n	8014242 <adc_Measure+0x6a>
				{
					return 0;
 801423e:	2300      	movs	r3, #0
 8014240:	e05a      	b.n	80142f8 <adc_Measure+0x120>
				}
			}
		}

	adc_Stop();
 8014242:	4831      	ldr	r0, [pc, #196]	@ (8014308 <adc_Measure+0x130>)
 8014244:	f7f0 f962 	bl	800450c <HAL_ADC_Stop>

	val = adc_Getval();
 8014248:	f7ff ffbc 	bl	80141c4 <adc_Getval>
 801424c:	60f8      	str	r0, [r7, #12]

	HAL_Delay(1);
 801424e:	2001      	movs	r0, #1
 8014250:	f7ef ffca 	bl	80041e8 <HAL_Delay>
	adc_Start();
 8014254:	482c      	ldr	r0, [pc, #176]	@ (8014308 <adc_Measure+0x130>)
 8014256:	f7f0 f8a5 	bl	80043a4 <HAL_ADC_Start>
	HAL_Delay(1);
 801425a:	2001      	movs	r0, #1
 801425c:	f7ef ffc4 	bl	80041e8 <HAL_Delay>

	if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8014260:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014264:	4828      	ldr	r0, [pc, #160]	@ (8014308 <adc_Measure+0x130>)
 8014266:	f7f0 f984 	bl	8004572 <HAL_ADC_PollForConversion>
 801426a:	4603      	mov	r3, r0
 801426c:	2b00      	cmp	r3, #0
 801426e:	d01d      	beq.n	80142ac <adc_Measure+0xd4>
		{
		   HAL_Delay(1);
 8014270:	2001      	movs	r0, #1
 8014272:	f7ef ffb9 	bl	80041e8 <HAL_Delay>
		   adc_Start();
 8014276:	4824      	ldr	r0, [pc, #144]	@ (8014308 <adc_Measure+0x130>)
 8014278:	f7f0 f894 	bl	80043a4 <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 801427c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014280:	4821      	ldr	r0, [pc, #132]	@ (8014308 <adc_Measure+0x130>)
 8014282:	f7f0 f976 	bl	8004572 <HAL_ADC_PollForConversion>
 8014286:	4603      	mov	r3, r0
 8014288:	2b00      	cmp	r3, #0
 801428a:	d00f      	beq.n	80142ac <adc_Measure+0xd4>
			{
				HAL_Delay(1);
 801428c:	2001      	movs	r0, #1
 801428e:	f7ef ffab 	bl	80041e8 <HAL_Delay>
				adc_Start();
 8014292:	481d      	ldr	r0, [pc, #116]	@ (8014308 <adc_Measure+0x130>)
 8014294:	f7f0 f886 	bl	80043a4 <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8014298:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801429c:	481a      	ldr	r0, [pc, #104]	@ (8014308 <adc_Measure+0x130>)
 801429e:	f7f0 f968 	bl	8004572 <HAL_ADC_PollForConversion>
 80142a2:	4603      	mov	r3, r0
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d001      	beq.n	80142ac <adc_Measure+0xd4>
				{
					return 0;
 80142a8:	2300      	movs	r3, #0
 80142aa:	e025      	b.n	80142f8 <adc_Measure+0x120>
				}
			}
		}

	adc_Stop();
 80142ac:	4816      	ldr	r0, [pc, #88]	@ (8014308 <adc_Measure+0x130>)
 80142ae:	f7f0 f92d 	bl	800450c <HAL_ADC_Stop>

	val =(uint32_t)((val + adc_Getval()) / 2);	//Read and average ADC
 80142b2:	f7ff ff87 	bl	80141c4 <adc_Getval>
 80142b6:	4602      	mov	r2, r0
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	4413      	add	r3, r2
 80142bc:	085b      	lsrs	r3, r3, #1
 80142be:	60fb      	str	r3, [r7, #12]




	*bat_volt = (float)(( val * (3.3f / 4096.0f))*ratio) - offset ;	// 12 bit
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	ee07 3a90 	vmov	s15, r3
 80142c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80142ca:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 801430c <adc_Measure+0x134>
 80142ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80142d2:	ee17 0a90 	vmov	r0, s15
 80142d6:	f7ec f94f 	bl	8000578 <__aeabi_f2d>
 80142da:	a309      	add	r3, pc, #36	@ (adr r3, 8014300 <adc_Measure+0x128>)
 80142dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142e0:	f7ec f9a2 	bl	8000628 <__aeabi_dmul>
 80142e4:	4602      	mov	r2, r0
 80142e6:	460b      	mov	r3, r1
 80142e8:	4610      	mov	r0, r2
 80142ea:	4619      	mov	r1, r3
 80142ec:	f7ec fc94 	bl	8000c18 <__aeabi_d2f>
 80142f0:	4602      	mov	r2, r0
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	601a      	str	r2, [r3, #0]


	return 1;
 80142f6:	2301      	movs	r3, #1


}
 80142f8:	4618      	mov	r0, r3
 80142fa:	3710      	adds	r7, #16
 80142fc:	46bd      	mov	sp, r7
 80142fe:	bd80      	pop	{r7, pc}
 8014300:	851eb852 	.word	0x851eb852
 8014304:	3ff451eb 	.word	0x3ff451eb
 8014308:	200017f0 	.word	0x200017f0
 801430c:	3a533333 	.word	0x3a533333

08014310 <init_driver>:

#define sensirion_hal_sleep_us sensirion_i2c_hal_sleep_usec

static uint8_t _i2c_address;

void init_driver(uint8_t i2c_address) {
 8014310:	b480      	push	{r7}
 8014312:	b083      	sub	sp, #12
 8014314:	af00      	add	r7, sp, #0
 8014316:	4603      	mov	r3, r0
 8014318:	71fb      	strb	r3, [r7, #7]
    _i2c_address = i2c_address;
 801431a:	4a04      	ldr	r2, [pc, #16]	@ (801432c <init_driver+0x1c>)
 801431c:	79fb      	ldrb	r3, [r7, #7]
 801431e:	7013      	strb	r3, [r2, #0]
}
 8014320:	bf00      	nop
 8014322:	370c      	adds	r7, #12
 8014324:	46bd      	mov	sp, r7
 8014326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801432a:	4770      	bx	lr
 801432c:	20001b5e 	.word	0x20001b5e

08014330 <scd30_await_data_ready>:

int16_t scd30_await_data_ready() {
 8014330:	b580      	push	{r7, lr}
 8014332:	b082      	sub	sp, #8
 8014334:	af00      	add	r7, sp, #0
    uint16_t data_ready = 0;
 8014336:	2300      	movs	r3, #0
 8014338:	80bb      	strh	r3, [r7, #4]
    int16_t local_error = 0;
 801433a:	2300      	movs	r3, #0
 801433c:	80fb      	strh	r3, [r7, #6]
    local_error = scd30_get_data_ready(&data_ready);
 801433e:	1d3b      	adds	r3, r7, #4
 8014340:	4618      	mov	r0, r3
 8014342:	f000 f8eb 	bl	801451c <scd30_get_data_ready>
 8014346:	4603      	mov	r3, r0
 8014348:	80fb      	strh	r3, [r7, #6]
    if (local_error != NO_ERROR) {
 801434a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801434e:	2b00      	cmp	r3, #0
 8014350:	d014      	beq.n	801437c <scd30_await_data_ready+0x4c>
        return local_error;
 8014352:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014356:	e016      	b.n	8014386 <scd30_await_data_ready+0x56>
    }
    while (data_ready == 0) {

        sensirion_hal_sleep_us(100000);
 8014358:	480d      	ldr	r0, [pc, #52]	@ (8014390 <scd30_await_data_ready+0x60>)
 801435a:	f000 feb3 	bl	80150c4 <sensirion_i2c_hal_sleep_usec>


        local_error = scd30_get_data_ready(&data_ready);
 801435e:	1d3b      	adds	r3, r7, #4
 8014360:	4618      	mov	r0, r3
 8014362:	f000 f8db 	bl	801451c <scd30_get_data_ready>
 8014366:	4603      	mov	r3, r0
 8014368:	80fb      	strh	r3, [r7, #6]
        if (local_error != NO_ERROR) {
 801436a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801436e:	2b00      	cmp	r3, #0
 8014370:	d002      	beq.n	8014378 <scd30_await_data_ready+0x48>
            return local_error;
 8014372:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014376:	e006      	b.n	8014386 <scd30_await_data_ready+0x56>
        }

        run_console_from_scd30();
 8014378:	f7ee f8f4 	bl	8002564 <run_console_from_scd30>
    while (data_ready == 0) {
 801437c:	88bb      	ldrh	r3, [r7, #4]
 801437e:	2b00      	cmp	r3, #0
 8014380:	d0ea      	beq.n	8014358 <scd30_await_data_ready+0x28>
    }
    return local_error;
 8014382:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8014386:	4618      	mov	r0, r3
 8014388:	3708      	adds	r7, #8
 801438a:	46bd      	mov	sp, r7
 801438c:	bd80      	pop	{r7, pc}
 801438e:	bf00      	nop
 8014390:	000186a0 	.word	0x000186a0

08014394 <scd30_blocking_read_measurement_data>:

int16_t scd30_blocking_read_measurement_data(float* co2_concentration,
                                             float* temperature,
                                             float* humidity) {
 8014394:	b580      	push	{r7, lr}
 8014396:	b086      	sub	sp, #24
 8014398:	af00      	add	r7, sp, #0
 801439a:	60f8      	str	r0, [r7, #12]
 801439c:	60b9      	str	r1, [r7, #8]
 801439e:	607a      	str	r2, [r7, #4]
    int16_t local_error = 0;
 80143a0:	2300      	movs	r3, #0
 80143a2:	82fb      	strh	r3, [r7, #22]
    local_error = scd30_await_data_ready();
 80143a4:	f7ff ffc4 	bl	8014330 <scd30_await_data_ready>
 80143a8:	4603      	mov	r3, r0
 80143aa:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 80143ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d002      	beq.n	80143ba <scd30_blocking_read_measurement_data+0x26>
        return local_error;
 80143b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80143b8:	e008      	b.n	80143cc <scd30_blocking_read_measurement_data+0x38>
    }
    local_error =
        scd30_read_measurement_data(co2_concentration, temperature, humidity);
 80143ba:	687a      	ldr	r2, [r7, #4]
 80143bc:	68b9      	ldr	r1, [r7, #8]
 80143be:	68f8      	ldr	r0, [r7, #12]
 80143c0:	f000 f8fc 	bl	80145bc <scd30_read_measurement_data>
 80143c4:	4603      	mov	r3, r0
 80143c6:	82fb      	strh	r3, [r7, #22]
    return local_error;
 80143c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80143cc:	4618      	mov	r0, r3
 80143ce:	3718      	adds	r7, #24
 80143d0:	46bd      	mov	sp, r7
 80143d2:	bd80      	pop	{r7, pc}

080143d4 <scd30_start_periodic_measurement>:

int16_t scd30_start_periodic_measurement(uint16_t ambient_pressure) {
 80143d4:	b580      	push	{r7, lr}
 80143d6:	b086      	sub	sp, #24
 80143d8:	af00      	add	r7, sp, #0
 80143da:	4603      	mov	r3, r0
 80143dc:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 80143de:	2300      	movs	r3, #0
 80143e0:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 80143e2:	2300      	movs	r3, #0
 80143e4:	60fb      	str	r3, [r7, #12]
 80143e6:	2300      	movs	r3, #0
 80143e8:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 80143ea:	2300      	movs	r3, #0
 80143ec:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x10);
 80143ee:	8ab9      	ldrh	r1, [r7, #20]
 80143f0:	f107 030c 	add.w	r3, r7, #12
 80143f4:	2210      	movs	r2, #16
 80143f6:	4618      	mov	r0, r3
 80143f8:	f000 fd25 	bl	8014e46 <sensirion_i2c_add_command_to_buffer>
 80143fc:	4603      	mov	r3, r0
 80143fe:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(
 8014400:	88fa      	ldrh	r2, [r7, #6]
 8014402:	8ab9      	ldrh	r1, [r7, #20]
 8014404:	f107 030c 	add.w	r3, r7, #12
 8014408:	4618      	mov	r0, r3
 801440a:	f000 fd3f 	bl	8014e8c <sensirion_i2c_add_uint16_t_to_buffer>
 801440e:	4603      	mov	r3, r0
 8014410:	82bb      	strh	r3, [r7, #20]
        local_buffer, local_offset, ambient_pressure);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014412:	4b0b      	ldr	r3, [pc, #44]	@ (8014440 <scd30_start_periodic_measurement+0x6c>)
 8014414:	781b      	ldrb	r3, [r3, #0]
 8014416:	8aba      	ldrh	r2, [r7, #20]
 8014418:	f107 010c 	add.w	r1, r7, #12
 801441c:	4618      	mov	r0, r3
 801441e:	f000 fd65 	bl	8014eec <sensirion_i2c_write_data>
 8014422:	4603      	mov	r3, r0
 8014424:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 8014426:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801442a:	2b00      	cmp	r3, #0
 801442c:	d002      	beq.n	8014434 <scd30_start_periodic_measurement+0x60>
        return local_error;
 801442e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014432:	e001      	b.n	8014438 <scd30_start_periodic_measurement+0x64>
    }
    return local_error;
 8014434:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8014438:	4618      	mov	r0, r3
 801443a:	3718      	adds	r7, #24
 801443c:	46bd      	mov	sp, r7
 801443e:	bd80      	pop	{r7, pc}
 8014440:	20001b5e 	.word	0x20001b5e

08014444 <scd30_stop_periodic_measurement>:

int16_t scd30_stop_periodic_measurement() {
 8014444:	b580      	push	{r7, lr}
 8014446:	b082      	sub	sp, #8
 8014448:	af00      	add	r7, sp, #0
    int16_t local_error = NO_ERROR;
 801444a:	2300      	movs	r3, #0
 801444c:	80fb      	strh	r3, [r7, #6]
    uint8_t local_buffer[2] = {0};
 801444e:	2300      	movs	r3, #0
 8014450:	803b      	strh	r3, [r7, #0]
    uint16_t local_offset = 0;
 8014452:	2300      	movs	r3, #0
 8014454:	80bb      	strh	r3, [r7, #4]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x104);
 8014456:	88b9      	ldrh	r1, [r7, #4]
 8014458:	463b      	mov	r3, r7
 801445a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 801445e:	4618      	mov	r0, r3
 8014460:	f000 fcf1 	bl	8014e46 <sensirion_i2c_add_command_to_buffer>
 8014464:	4603      	mov	r3, r0
 8014466:	80bb      	strh	r3, [r7, #4]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014468:	4b0c      	ldr	r3, [pc, #48]	@ (801449c <scd30_stop_periodic_measurement+0x58>)
 801446a:	781b      	ldrb	r3, [r3, #0]
 801446c:	88ba      	ldrh	r2, [r7, #4]
 801446e:	4639      	mov	r1, r7
 8014470:	4618      	mov	r0, r3
 8014472:	f000 fd3b 	bl	8014eec <sensirion_i2c_write_data>
 8014476:	4603      	mov	r3, r0
 8014478:	80fb      	strh	r3, [r7, #6]
    if (local_error != NO_ERROR) {
 801447a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801447e:	2b00      	cmp	r3, #0
 8014480:	d002      	beq.n	8014488 <scd30_stop_periodic_measurement+0x44>
        return local_error;
 8014482:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014486:	e005      	b.n	8014494 <scd30_stop_periodic_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014488:	f242 7010 	movw	r0, #10000	@ 0x2710
 801448c:	f000 fe1a 	bl	80150c4 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 8014490:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8014494:	4618      	mov	r0, r3
 8014496:	3708      	adds	r7, #8
 8014498:	46bd      	mov	sp, r7
 801449a:	bd80      	pop	{r7, pc}
 801449c:	20001b5e 	.word	0x20001b5e

080144a0 <scd30_set_measurement_interval>:

int16_t scd30_set_measurement_interval(uint16_t interval) {
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b086      	sub	sp, #24
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	4603      	mov	r3, r0
 80144a8:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 80144aa:	2300      	movs	r3, #0
 80144ac:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 80144ae:	2300      	movs	r3, #0
 80144b0:	60fb      	str	r3, [r7, #12]
 80144b2:	2300      	movs	r3, #0
 80144b4:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 80144b6:	2300      	movs	r3, #0
 80144b8:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x4600);
 80144ba:	8ab9      	ldrh	r1, [r7, #20]
 80144bc:	f107 030c 	add.w	r3, r7, #12
 80144c0:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 80144c4:	4618      	mov	r0, r3
 80144c6:	f000 fcbe 	bl	8014e46 <sensirion_i2c_add_command_to_buffer>
 80144ca:	4603      	mov	r3, r0
 80144cc:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(local_buffer,
 80144ce:	88fa      	ldrh	r2, [r7, #6]
 80144d0:	8ab9      	ldrh	r1, [r7, #20]
 80144d2:	f107 030c 	add.w	r3, r7, #12
 80144d6:	4618      	mov	r0, r3
 80144d8:	f000 fcd8 	bl	8014e8c <sensirion_i2c_add_uint16_t_to_buffer>
 80144dc:	4603      	mov	r3, r0
 80144de:	82bb      	strh	r3, [r7, #20]
                                                        local_offset, interval);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80144e0:	4b0d      	ldr	r3, [pc, #52]	@ (8014518 <scd30_set_measurement_interval+0x78>)
 80144e2:	781b      	ldrb	r3, [r3, #0]
 80144e4:	8aba      	ldrh	r2, [r7, #20]
 80144e6:	f107 010c 	add.w	r1, r7, #12
 80144ea:	4618      	mov	r0, r3
 80144ec:	f000 fcfe 	bl	8014eec <sensirion_i2c_write_data>
 80144f0:	4603      	mov	r3, r0
 80144f2:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 80144f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d002      	beq.n	8014502 <scd30_set_measurement_interval+0x62>
        return local_error;
 80144fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014500:	e005      	b.n	801450e <scd30_set_measurement_interval+0x6e>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014502:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014506:	f000 fddd 	bl	80150c4 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 801450a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 801450e:	4618      	mov	r0, r3
 8014510:	3718      	adds	r7, #24
 8014512:	46bd      	mov	sp, r7
 8014514:	bd80      	pop	{r7, pc}
 8014516:	bf00      	nop
 8014518:	20001b5e 	.word	0x20001b5e

0801451c <scd30_get_data_ready>:
    }
    *interval = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
    return local_error;
}

int16_t scd30_get_data_ready(uint16_t* data_ready_flag) {
 801451c:	b580      	push	{r7, lr}
 801451e:	b084      	sub	sp, #16
 8014520:	af00      	add	r7, sp, #0
 8014522:	6078      	str	r0, [r7, #4]
    int16_t local_error = NO_ERROR;
 8014524:	2300      	movs	r3, #0
 8014526:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 8014528:	4b22      	ldr	r3, [pc, #136]	@ (80145b4 <scd30_get_data_ready+0x98>)
 801452a:	881b      	ldrh	r3, [r3, #0]
 801452c:	813b      	strh	r3, [r7, #8]
 801452e:	2300      	movs	r3, #0
 8014530:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 8014532:	2300      	movs	r3, #0
 8014534:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x202);
 8014536:	89b9      	ldrh	r1, [r7, #12]
 8014538:	f107 0308 	add.w	r3, r7, #8
 801453c:	f240 2202 	movw	r2, #514	@ 0x202
 8014540:	4618      	mov	r0, r3
 8014542:	f000 fc80 	bl	8014e46 <sensirion_i2c_add_command_to_buffer>
 8014546:	4603      	mov	r3, r0
 8014548:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 801454a:	4b1b      	ldr	r3, [pc, #108]	@ (80145b8 <scd30_get_data_ready+0x9c>)
 801454c:	781b      	ldrb	r3, [r3, #0]
 801454e:	89ba      	ldrh	r2, [r7, #12]
 8014550:	f107 0108 	add.w	r1, r7, #8
 8014554:	4618      	mov	r0, r3
 8014556:	f000 fcc9 	bl	8014eec <sensirion_i2c_write_data>
 801455a:	4603      	mov	r3, r0
 801455c:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 801455e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014562:	2b00      	cmp	r3, #0
 8014564:	d002      	beq.n	801456c <scd30_get_data_ready+0x50>
        return local_error;
 8014566:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801456a:	e01f      	b.n	80145ac <scd30_get_data_ready+0x90>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 801456c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014570:	f000 fda8 	bl	80150c4 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 8014574:	4b10      	ldr	r3, [pc, #64]	@ (80145b8 <scd30_get_data_ready+0x9c>)
 8014576:	781b      	ldrb	r3, [r3, #0]
 8014578:	f107 0108 	add.w	r1, r7, #8
 801457c:	2202      	movs	r2, #2
 801457e:	4618      	mov	r0, r3
 8014580:	f000 fcc7 	bl	8014f12 <sensirion_i2c_read_data_inplace>
 8014584:	4603      	mov	r3, r0
 8014586:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014588:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801458c:	2b00      	cmp	r3, #0
 801458e:	d002      	beq.n	8014596 <scd30_get_data_ready+0x7a>
        return local_error;
 8014590:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014594:	e00a      	b.n	80145ac <scd30_get_data_ready+0x90>
    }
    *data_ready_flag = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
 8014596:	f107 0308 	add.w	r3, r7, #8
 801459a:	4618      	mov	r0, r3
 801459c:	f000 fbc1 	bl	8014d22 <sensirion_common_bytes_to_uint16_t>
 80145a0:	4603      	mov	r3, r0
 80145a2:	461a      	mov	r2, r3
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	801a      	strh	r2, [r3, #0]
    return local_error;
 80145a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80145ac:	4618      	mov	r0, r3
 80145ae:	3710      	adds	r7, #16
 80145b0:	46bd      	mov	sp, r7
 80145b2:	bd80      	pop	{r7, pc}
 80145b4:	0802481c 	.word	0x0802481c
 80145b8:	20001b5e 	.word	0x20001b5e

080145bc <scd30_read_measurement_data>:

int16_t scd30_read_measurement_data(float* co2_concentration,
                                    float* temperature, float* humidity) {
 80145bc:	b580      	push	{r7, lr}
 80145be:	b08a      	sub	sp, #40	@ 0x28
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	60f8      	str	r0, [r7, #12]
 80145c4:	60b9      	str	r1, [r7, #8]
 80145c6:	607a      	str	r2, [r7, #4]
    int16_t local_error = NO_ERROR;
 80145c8:	2300      	movs	r3, #0
 80145ca:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t local_buffer[18] = {0};
 80145cc:	2300      	movs	r3, #0
 80145ce:	613b      	str	r3, [r7, #16]
 80145d0:	f107 0314 	add.w	r3, r7, #20
 80145d4:	2200      	movs	r2, #0
 80145d6:	601a      	str	r2, [r3, #0]
 80145d8:	605a      	str	r2, [r3, #4]
 80145da:	609a      	str	r2, [r3, #8]
 80145dc:	819a      	strh	r2, [r3, #12]
    uint16_t local_offset = 0;
 80145de:	2300      	movs	r3, #0
 80145e0:	84bb      	strh	r3, [r7, #36]	@ 0x24
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x300);
 80145e2:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80145e4:	f107 0310 	add.w	r3, r7, #16
 80145e8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80145ec:	4618      	mov	r0, r3
 80145ee:	f000 fc2a 	bl	8014e46 <sensirion_i2c_add_command_to_buffer>
 80145f2:	4603      	mov	r3, r0
 80145f4:	84bb      	strh	r3, [r7, #36]	@ 0x24
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80145f6:	4b26      	ldr	r3, [pc, #152]	@ (8014690 <scd30_read_measurement_data+0xd4>)
 80145f8:	781b      	ldrb	r3, [r3, #0]
 80145fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80145fc:	f107 0110 	add.w	r1, r7, #16
 8014600:	4618      	mov	r0, r3
 8014602:	f000 fc73 	bl	8014eec <sensirion_i2c_write_data>
 8014606:	4603      	mov	r3, r0
 8014608:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (local_error != NO_ERROR) {
 801460a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801460e:	2b00      	cmp	r3, #0
 8014610:	d002      	beq.n	8014618 <scd30_read_measurement_data+0x5c>
        return local_error;
 8014612:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8014616:	e036      	b.n	8014686 <scd30_read_measurement_data+0xca>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014618:	f242 7010 	movw	r0, #10000	@ 0x2710
 801461c:	f000 fd52 	bl	80150c4 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 12);
 8014620:	4b1b      	ldr	r3, [pc, #108]	@ (8014690 <scd30_read_measurement_data+0xd4>)
 8014622:	781b      	ldrb	r3, [r3, #0]
 8014624:	f107 0110 	add.w	r1, r7, #16
 8014628:	220c      	movs	r2, #12
 801462a:	4618      	mov	r0, r3
 801462c:	f000 fc71 	bl	8014f12 <sensirion_i2c_read_data_inplace>
 8014630:	4603      	mov	r3, r0
 8014632:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (local_error != NO_ERROR) {
 8014634:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8014638:	2b00      	cmp	r3, #0
 801463a:	d002      	beq.n	8014642 <scd30_read_measurement_data+0x86>
        return local_error;
 801463c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8014640:	e021      	b.n	8014686 <scd30_read_measurement_data+0xca>
    }
    *co2_concentration = sensirion_common_bytes_to_float(&local_buffer[0]);
 8014642:	f107 0310 	add.w	r3, r7, #16
 8014646:	4618      	mov	r0, r3
 8014648:	f000 fb9b 	bl	8014d82 <sensirion_common_bytes_to_float>
 801464c:	eef0 7a40 	vmov.f32	s15, s0
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	edc3 7a00 	vstr	s15, [r3]
    *temperature = sensirion_common_bytes_to_float(&local_buffer[4]);
 8014656:	f107 0310 	add.w	r3, r7, #16
 801465a:	3304      	adds	r3, #4
 801465c:	4618      	mov	r0, r3
 801465e:	f000 fb90 	bl	8014d82 <sensirion_common_bytes_to_float>
 8014662:	eef0 7a40 	vmov.f32	s15, s0
 8014666:	68bb      	ldr	r3, [r7, #8]
 8014668:	edc3 7a00 	vstr	s15, [r3]
    *humidity = sensirion_common_bytes_to_float(&local_buffer[8]);
 801466c:	f107 0310 	add.w	r3, r7, #16
 8014670:	3308      	adds	r3, #8
 8014672:	4618      	mov	r0, r3
 8014674:	f000 fb85 	bl	8014d82 <sensirion_common_bytes_to_float>
 8014678:	eef0 7a40 	vmov.f32	s15, s0
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	edc3 7a00 	vstr	s15, [r3]
    return local_error;
 8014682:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 8014686:	4618      	mov	r0, r3
 8014688:	3728      	adds	r7, #40	@ 0x28
 801468a:	46bd      	mov	sp, r7
 801468c:	bd80      	pop	{r7, pc}
 801468e:	bf00      	nop
 8014690:	20001b5e 	.word	0x20001b5e

08014694 <scd30_activate_auto_calibration>:

int16_t scd30_activate_auto_calibration(uint16_t do_activate) {
 8014694:	b580      	push	{r7, lr}
 8014696:	b086      	sub	sp, #24
 8014698:	af00      	add	r7, sp, #0
 801469a:	4603      	mov	r3, r0
 801469c:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 801469e:	2300      	movs	r3, #0
 80146a0:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 80146a2:	2300      	movs	r3, #0
 80146a4:	60fb      	str	r3, [r7, #12]
 80146a6:	2300      	movs	r3, #0
 80146a8:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 80146aa:	2300      	movs	r3, #0
 80146ac:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5306);
 80146ae:	8ab9      	ldrh	r1, [r7, #20]
 80146b0:	f107 030c 	add.w	r3, r7, #12
 80146b4:	f245 3206 	movw	r2, #21254	@ 0x5306
 80146b8:	4618      	mov	r0, r3
 80146ba:	f000 fbc4 	bl	8014e46 <sensirion_i2c_add_command_to_buffer>
 80146be:	4603      	mov	r3, r0
 80146c0:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(
 80146c2:	88fa      	ldrh	r2, [r7, #6]
 80146c4:	8ab9      	ldrh	r1, [r7, #20]
 80146c6:	f107 030c 	add.w	r3, r7, #12
 80146ca:	4618      	mov	r0, r3
 80146cc:	f000 fbde 	bl	8014e8c <sensirion_i2c_add_uint16_t_to_buffer>
 80146d0:	4603      	mov	r3, r0
 80146d2:	82bb      	strh	r3, [r7, #20]
        local_buffer, local_offset, do_activate);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80146d4:	4b0d      	ldr	r3, [pc, #52]	@ (801470c <scd30_activate_auto_calibration+0x78>)
 80146d6:	781b      	ldrb	r3, [r3, #0]
 80146d8:	8aba      	ldrh	r2, [r7, #20]
 80146da:	f107 010c 	add.w	r1, r7, #12
 80146de:	4618      	mov	r0, r3
 80146e0:	f000 fc04 	bl	8014eec <sensirion_i2c_write_data>
 80146e4:	4603      	mov	r3, r0
 80146e6:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 80146e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d002      	beq.n	80146f6 <scd30_activate_auto_calibration+0x62>
        return local_error;
 80146f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80146f4:	e005      	b.n	8014702 <scd30_activate_auto_calibration+0x6e>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80146f6:	f242 7010 	movw	r0, #10000	@ 0x2710
 80146fa:	f000 fce3 	bl	80150c4 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 80146fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8014702:	4618      	mov	r0, r3
 8014704:	3718      	adds	r7, #24
 8014706:	46bd      	mov	sp, r7
 8014708:	bd80      	pop	{r7, pc}
 801470a:	bf00      	nop
 801470c:	20001b5e 	.word	0x20001b5e

08014710 <scd30_get_auto_calibration_status>:

int16_t scd30_get_auto_calibration_status(uint16_t* is_active) {
 8014710:	b580      	push	{r7, lr}
 8014712:	b084      	sub	sp, #16
 8014714:	af00      	add	r7, sp, #0
 8014716:	6078      	str	r0, [r7, #4]
    int16_t local_error = NO_ERROR;
 8014718:	2300      	movs	r3, #0
 801471a:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 801471c:	4b22      	ldr	r3, [pc, #136]	@ (80147a8 <scd30_get_auto_calibration_status+0x98>)
 801471e:	881b      	ldrh	r3, [r3, #0]
 8014720:	813b      	strh	r3, [r7, #8]
 8014722:	2300      	movs	r3, #0
 8014724:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 8014726:	2300      	movs	r3, #0
 8014728:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5306);
 801472a:	89b9      	ldrh	r1, [r7, #12]
 801472c:	f107 0308 	add.w	r3, r7, #8
 8014730:	f245 3206 	movw	r2, #21254	@ 0x5306
 8014734:	4618      	mov	r0, r3
 8014736:	f000 fb86 	bl	8014e46 <sensirion_i2c_add_command_to_buffer>
 801473a:	4603      	mov	r3, r0
 801473c:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 801473e:	4b1b      	ldr	r3, [pc, #108]	@ (80147ac <scd30_get_auto_calibration_status+0x9c>)
 8014740:	781b      	ldrb	r3, [r3, #0]
 8014742:	89ba      	ldrh	r2, [r7, #12]
 8014744:	f107 0108 	add.w	r1, r7, #8
 8014748:	4618      	mov	r0, r3
 801474a:	f000 fbcf 	bl	8014eec <sensirion_i2c_write_data>
 801474e:	4603      	mov	r3, r0
 8014750:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014752:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014756:	2b00      	cmp	r3, #0
 8014758:	d002      	beq.n	8014760 <scd30_get_auto_calibration_status+0x50>
        return local_error;
 801475a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801475e:	e01f      	b.n	80147a0 <scd30_get_auto_calibration_status+0x90>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014760:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014764:	f000 fcae 	bl	80150c4 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 8014768:	4b10      	ldr	r3, [pc, #64]	@ (80147ac <scd30_get_auto_calibration_status+0x9c>)
 801476a:	781b      	ldrb	r3, [r3, #0]
 801476c:	f107 0108 	add.w	r1, r7, #8
 8014770:	2202      	movs	r2, #2
 8014772:	4618      	mov	r0, r3
 8014774:	f000 fbcd 	bl	8014f12 <sensirion_i2c_read_data_inplace>
 8014778:	4603      	mov	r3, r0
 801477a:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 801477c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014780:	2b00      	cmp	r3, #0
 8014782:	d002      	beq.n	801478a <scd30_get_auto_calibration_status+0x7a>
        return local_error;
 8014784:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014788:	e00a      	b.n	80147a0 <scd30_get_auto_calibration_status+0x90>
    }
    *is_active = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
 801478a:	f107 0308 	add.w	r3, r7, #8
 801478e:	4618      	mov	r0, r3
 8014790:	f000 fac7 	bl	8014d22 <sensirion_common_bytes_to_uint16_t>
 8014794:	4603      	mov	r3, r0
 8014796:	461a      	mov	r2, r3
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	801a      	strh	r2, [r3, #0]
    return local_error;
 801479c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80147a0:	4618      	mov	r0, r3
 80147a2:	3710      	adds	r7, #16
 80147a4:	46bd      	mov	sp, r7
 80147a6:	bd80      	pop	{r7, pc}
 80147a8:	0802481c 	.word	0x0802481c
 80147ac:	20001b5e 	.word	0x20001b5e

080147b0 <scd30_force_recalibration>:

int16_t scd30_force_recalibration(uint16_t co2_ref_concentration) {
 80147b0:	b580      	push	{r7, lr}
 80147b2:	b086      	sub	sp, #24
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	4603      	mov	r3, r0
 80147b8:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 80147ba:	2300      	movs	r3, #0
 80147bc:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 80147be:	2300      	movs	r3, #0
 80147c0:	60fb      	str	r3, [r7, #12]
 80147c2:	2300      	movs	r3, #0
 80147c4:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 80147c6:	2300      	movs	r3, #0
 80147c8:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5204);
 80147ca:	8ab9      	ldrh	r1, [r7, #20]
 80147cc:	f107 030c 	add.w	r3, r7, #12
 80147d0:	f245 2204 	movw	r2, #20996	@ 0x5204
 80147d4:	4618      	mov	r0, r3
 80147d6:	f000 fb36 	bl	8014e46 <sensirion_i2c_add_command_to_buffer>
 80147da:	4603      	mov	r3, r0
 80147dc:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(
 80147de:	88fa      	ldrh	r2, [r7, #6]
 80147e0:	8ab9      	ldrh	r1, [r7, #20]
 80147e2:	f107 030c 	add.w	r3, r7, #12
 80147e6:	4618      	mov	r0, r3
 80147e8:	f000 fb50 	bl	8014e8c <sensirion_i2c_add_uint16_t_to_buffer>
 80147ec:	4603      	mov	r3, r0
 80147ee:	82bb      	strh	r3, [r7, #20]
        local_buffer, local_offset, co2_ref_concentration);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80147f0:	4b0d      	ldr	r3, [pc, #52]	@ (8014828 <scd30_force_recalibration+0x78>)
 80147f2:	781b      	ldrb	r3, [r3, #0]
 80147f4:	8aba      	ldrh	r2, [r7, #20]
 80147f6:	f107 010c 	add.w	r1, r7, #12
 80147fa:	4618      	mov	r0, r3
 80147fc:	f000 fb76 	bl	8014eec <sensirion_i2c_write_data>
 8014800:	4603      	mov	r3, r0
 8014802:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 8014804:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014808:	2b00      	cmp	r3, #0
 801480a:	d002      	beq.n	8014812 <scd30_force_recalibration+0x62>
        return local_error;
 801480c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014810:	e005      	b.n	801481e <scd30_force_recalibration+0x6e>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014812:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014816:	f000 fc55 	bl	80150c4 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 801481a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 801481e:	4618      	mov	r0, r3
 8014820:	3718      	adds	r7, #24
 8014822:	46bd      	mov	sp, r7
 8014824:	bd80      	pop	{r7, pc}
 8014826:	bf00      	nop
 8014828:	20001b5e 	.word	0x20001b5e

0801482c <scd30_get_force_recalibration_status>:

int16_t scd30_get_force_recalibration_status(uint16_t* co2_ref_concentration) {
 801482c:	b580      	push	{r7, lr}
 801482e:	b084      	sub	sp, #16
 8014830:	af00      	add	r7, sp, #0
 8014832:	6078      	str	r0, [r7, #4]
    int16_t local_error = NO_ERROR;
 8014834:	2300      	movs	r3, #0
 8014836:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 8014838:	4b22      	ldr	r3, [pc, #136]	@ (80148c4 <scd30_get_force_recalibration_status+0x98>)
 801483a:	881b      	ldrh	r3, [r3, #0]
 801483c:	813b      	strh	r3, [r7, #8]
 801483e:	2300      	movs	r3, #0
 8014840:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 8014842:	2300      	movs	r3, #0
 8014844:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5204);
 8014846:	89b9      	ldrh	r1, [r7, #12]
 8014848:	f107 0308 	add.w	r3, r7, #8
 801484c:	f245 2204 	movw	r2, #20996	@ 0x5204
 8014850:	4618      	mov	r0, r3
 8014852:	f000 faf8 	bl	8014e46 <sensirion_i2c_add_command_to_buffer>
 8014856:	4603      	mov	r3, r0
 8014858:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 801485a:	4b1b      	ldr	r3, [pc, #108]	@ (80148c8 <scd30_get_force_recalibration_status+0x9c>)
 801485c:	781b      	ldrb	r3, [r3, #0]
 801485e:	89ba      	ldrh	r2, [r7, #12]
 8014860:	f107 0108 	add.w	r1, r7, #8
 8014864:	4618      	mov	r0, r3
 8014866:	f000 fb41 	bl	8014eec <sensirion_i2c_write_data>
 801486a:	4603      	mov	r3, r0
 801486c:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 801486e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d002      	beq.n	801487c <scd30_get_force_recalibration_status+0x50>
        return local_error;
 8014876:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801487a:	e01f      	b.n	80148bc <scd30_get_force_recalibration_status+0x90>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 801487c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014880:	f000 fc20 	bl	80150c4 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 8014884:	4b10      	ldr	r3, [pc, #64]	@ (80148c8 <scd30_get_force_recalibration_status+0x9c>)
 8014886:	781b      	ldrb	r3, [r3, #0]
 8014888:	f107 0108 	add.w	r1, r7, #8
 801488c:	2202      	movs	r2, #2
 801488e:	4618      	mov	r0, r3
 8014890:	f000 fb3f 	bl	8014f12 <sensirion_i2c_read_data_inplace>
 8014894:	4603      	mov	r3, r0
 8014896:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014898:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801489c:	2b00      	cmp	r3, #0
 801489e:	d002      	beq.n	80148a6 <scd30_get_force_recalibration_status+0x7a>
        return local_error;
 80148a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80148a4:	e00a      	b.n	80148bc <scd30_get_force_recalibration_status+0x90>
    }
    *co2_ref_concentration =
        sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
 80148a6:	f107 0308 	add.w	r3, r7, #8
 80148aa:	4618      	mov	r0, r3
 80148ac:	f000 fa39 	bl	8014d22 <sensirion_common_bytes_to_uint16_t>
 80148b0:	4603      	mov	r3, r0
 80148b2:	461a      	mov	r2, r3
    *co2_ref_concentration =
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	801a      	strh	r2, [r3, #0]
    return local_error;
 80148b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80148bc:	4618      	mov	r0, r3
 80148be:	3710      	adds	r7, #16
 80148c0:	46bd      	mov	sp, r7
 80148c2:	bd80      	pop	{r7, pc}
 80148c4:	0802481c 	.word	0x0802481c
 80148c8:	20001b5e 	.word	0x20001b5e

080148cc <scd30_set_temperature_offset>:

int16_t scd30_set_temperature_offset(uint16_t temperature_offset) {
 80148cc:	b580      	push	{r7, lr}
 80148ce:	b086      	sub	sp, #24
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	4603      	mov	r3, r0
 80148d4:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 80148d6:	2300      	movs	r3, #0
 80148d8:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 80148da:	2300      	movs	r3, #0
 80148dc:	60fb      	str	r3, [r7, #12]
 80148de:	2300      	movs	r3, #0
 80148e0:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 80148e2:	2300      	movs	r3, #0
 80148e4:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5403);
 80148e6:	8ab9      	ldrh	r1, [r7, #20]
 80148e8:	f107 030c 	add.w	r3, r7, #12
 80148ec:	f245 4203 	movw	r2, #21507	@ 0x5403
 80148f0:	4618      	mov	r0, r3
 80148f2:	f000 faa8 	bl	8014e46 <sensirion_i2c_add_command_to_buffer>
 80148f6:	4603      	mov	r3, r0
 80148f8:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(
 80148fa:	88fa      	ldrh	r2, [r7, #6]
 80148fc:	8ab9      	ldrh	r1, [r7, #20]
 80148fe:	f107 030c 	add.w	r3, r7, #12
 8014902:	4618      	mov	r0, r3
 8014904:	f000 fac2 	bl	8014e8c <sensirion_i2c_add_uint16_t_to_buffer>
 8014908:	4603      	mov	r3, r0
 801490a:	82bb      	strh	r3, [r7, #20]
        local_buffer, local_offset, temperature_offset);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 801490c:	4b0d      	ldr	r3, [pc, #52]	@ (8014944 <scd30_set_temperature_offset+0x78>)
 801490e:	781b      	ldrb	r3, [r3, #0]
 8014910:	8aba      	ldrh	r2, [r7, #20]
 8014912:	f107 010c 	add.w	r1, r7, #12
 8014916:	4618      	mov	r0, r3
 8014918:	f000 fae8 	bl	8014eec <sensirion_i2c_write_data>
 801491c:	4603      	mov	r3, r0
 801491e:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 8014920:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d002      	beq.n	801492e <scd30_set_temperature_offset+0x62>
        return local_error;
 8014928:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801492c:	e005      	b.n	801493a <scd30_set_temperature_offset+0x6e>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 801492e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014932:	f000 fbc7 	bl	80150c4 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 8014936:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 801493a:	4618      	mov	r0, r3
 801493c:	3718      	adds	r7, #24
 801493e:	46bd      	mov	sp, r7
 8014940:	bd80      	pop	{r7, pc}
 8014942:	bf00      	nop
 8014944:	20001b5e 	.word	0x20001b5e

08014948 <scd30_get_temperature_offset>:

int16_t scd30_get_temperature_offset(uint16_t* temperature_offset) {
 8014948:	b580      	push	{r7, lr}
 801494a:	b084      	sub	sp, #16
 801494c:	af00      	add	r7, sp, #0
 801494e:	6078      	str	r0, [r7, #4]
    int16_t local_error = NO_ERROR;
 8014950:	2300      	movs	r3, #0
 8014952:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 8014954:	4b22      	ldr	r3, [pc, #136]	@ (80149e0 <scd30_get_temperature_offset+0x98>)
 8014956:	881b      	ldrh	r3, [r3, #0]
 8014958:	813b      	strh	r3, [r7, #8]
 801495a:	2300      	movs	r3, #0
 801495c:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 801495e:	2300      	movs	r3, #0
 8014960:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5403);
 8014962:	89b9      	ldrh	r1, [r7, #12]
 8014964:	f107 0308 	add.w	r3, r7, #8
 8014968:	f245 4203 	movw	r2, #21507	@ 0x5403
 801496c:	4618      	mov	r0, r3
 801496e:	f000 fa6a 	bl	8014e46 <sensirion_i2c_add_command_to_buffer>
 8014972:	4603      	mov	r3, r0
 8014974:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014976:	4b1b      	ldr	r3, [pc, #108]	@ (80149e4 <scd30_get_temperature_offset+0x9c>)
 8014978:	781b      	ldrb	r3, [r3, #0]
 801497a:	89ba      	ldrh	r2, [r7, #12]
 801497c:	f107 0108 	add.w	r1, r7, #8
 8014980:	4618      	mov	r0, r3
 8014982:	f000 fab3 	bl	8014eec <sensirion_i2c_write_data>
 8014986:	4603      	mov	r3, r0
 8014988:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 801498a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801498e:	2b00      	cmp	r3, #0
 8014990:	d002      	beq.n	8014998 <scd30_get_temperature_offset+0x50>
        return local_error;
 8014992:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014996:	e01f      	b.n	80149d8 <scd30_get_temperature_offset+0x90>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014998:	f242 7010 	movw	r0, #10000	@ 0x2710
 801499c:	f000 fb92 	bl	80150c4 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 80149a0:	4b10      	ldr	r3, [pc, #64]	@ (80149e4 <scd30_get_temperature_offset+0x9c>)
 80149a2:	781b      	ldrb	r3, [r3, #0]
 80149a4:	f107 0108 	add.w	r1, r7, #8
 80149a8:	2202      	movs	r2, #2
 80149aa:	4618      	mov	r0, r3
 80149ac:	f000 fab1 	bl	8014f12 <sensirion_i2c_read_data_inplace>
 80149b0:	4603      	mov	r3, r0
 80149b2:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 80149b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d002      	beq.n	80149c2 <scd30_get_temperature_offset+0x7a>
        return local_error;
 80149bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80149c0:	e00a      	b.n	80149d8 <scd30_get_temperature_offset+0x90>
    }
    *temperature_offset = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
 80149c2:	f107 0308 	add.w	r3, r7, #8
 80149c6:	4618      	mov	r0, r3
 80149c8:	f000 f9ab 	bl	8014d22 <sensirion_common_bytes_to_uint16_t>
 80149cc:	4603      	mov	r3, r0
 80149ce:	461a      	mov	r2, r3
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	801a      	strh	r2, [r3, #0]
    return local_error;
 80149d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80149d8:	4618      	mov	r0, r3
 80149da:	3710      	adds	r7, #16
 80149dc:	46bd      	mov	sp, r7
 80149de:	bd80      	pop	{r7, pc}
 80149e0:	0802481c 	.word	0x0802481c
 80149e4:	20001b5e 	.word	0x20001b5e

080149e8 <scd30_get_altitude_compensation>:

int16_t scd30_get_altitude_compensation(uint16_t* altitude) {
 80149e8:	b580      	push	{r7, lr}
 80149ea:	b084      	sub	sp, #16
 80149ec:	af00      	add	r7, sp, #0
 80149ee:	6078      	str	r0, [r7, #4]
    int16_t local_error = NO_ERROR;
 80149f0:	2300      	movs	r3, #0
 80149f2:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 80149f4:	4b22      	ldr	r3, [pc, #136]	@ (8014a80 <scd30_get_altitude_compensation+0x98>)
 80149f6:	881b      	ldrh	r3, [r3, #0]
 80149f8:	813b      	strh	r3, [r7, #8]
 80149fa:	2300      	movs	r3, #0
 80149fc:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 80149fe:	2300      	movs	r3, #0
 8014a00:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5102);
 8014a02:	89b9      	ldrh	r1, [r7, #12]
 8014a04:	f107 0308 	add.w	r3, r7, #8
 8014a08:	f245 1202 	movw	r2, #20738	@ 0x5102
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	f000 fa1a 	bl	8014e46 <sensirion_i2c_add_command_to_buffer>
 8014a12:	4603      	mov	r3, r0
 8014a14:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014a16:	4b1b      	ldr	r3, [pc, #108]	@ (8014a84 <scd30_get_altitude_compensation+0x9c>)
 8014a18:	781b      	ldrb	r3, [r3, #0]
 8014a1a:	89ba      	ldrh	r2, [r7, #12]
 8014a1c:	f107 0108 	add.w	r1, r7, #8
 8014a20:	4618      	mov	r0, r3
 8014a22:	f000 fa63 	bl	8014eec <sensirion_i2c_write_data>
 8014a26:	4603      	mov	r3, r0
 8014a28:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014a2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d002      	beq.n	8014a38 <scd30_get_altitude_compensation+0x50>
        return local_error;
 8014a32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014a36:	e01f      	b.n	8014a78 <scd30_get_altitude_compensation+0x90>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014a38:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014a3c:	f000 fb42 	bl	80150c4 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 8014a40:	4b10      	ldr	r3, [pc, #64]	@ (8014a84 <scd30_get_altitude_compensation+0x9c>)
 8014a42:	781b      	ldrb	r3, [r3, #0]
 8014a44:	f107 0108 	add.w	r1, r7, #8
 8014a48:	2202      	movs	r2, #2
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	f000 fa61 	bl	8014f12 <sensirion_i2c_read_data_inplace>
 8014a50:	4603      	mov	r3, r0
 8014a52:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014a54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d002      	beq.n	8014a62 <scd30_get_altitude_compensation+0x7a>
        return local_error;
 8014a5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014a60:	e00a      	b.n	8014a78 <scd30_get_altitude_compensation+0x90>
    }
    *altitude = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
 8014a62:	f107 0308 	add.w	r3, r7, #8
 8014a66:	4618      	mov	r0, r3
 8014a68:	f000 f95b 	bl	8014d22 <sensirion_common_bytes_to_uint16_t>
 8014a6c:	4603      	mov	r3, r0
 8014a6e:	461a      	mov	r2, r3
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	801a      	strh	r2, [r3, #0]
    return local_error;
 8014a74:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8014a78:	4618      	mov	r0, r3
 8014a7a:	3710      	adds	r7, #16
 8014a7c:	46bd      	mov	sp, r7
 8014a7e:	bd80      	pop	{r7, pc}
 8014a80:	0802481c 	.word	0x0802481c
 8014a84:	20001b5e 	.word	0x20001b5e

08014a88 <scd30_set_altitude_compensation>:

int16_t scd30_set_altitude_compensation(uint16_t altitude) {
 8014a88:	b580      	push	{r7, lr}
 8014a8a:	b086      	sub	sp, #24
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	4603      	mov	r3, r0
 8014a90:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 8014a92:	2300      	movs	r3, #0
 8014a94:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 8014a96:	2300      	movs	r3, #0
 8014a98:	60fb      	str	r3, [r7, #12]
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 8014a9e:	2300      	movs	r3, #0
 8014aa0:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5102);
 8014aa2:	8ab9      	ldrh	r1, [r7, #20]
 8014aa4:	f107 030c 	add.w	r3, r7, #12
 8014aa8:	f245 1202 	movw	r2, #20738	@ 0x5102
 8014aac:	4618      	mov	r0, r3
 8014aae:	f000 f9ca 	bl	8014e46 <sensirion_i2c_add_command_to_buffer>
 8014ab2:	4603      	mov	r3, r0
 8014ab4:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(local_buffer,
 8014ab6:	88fa      	ldrh	r2, [r7, #6]
 8014ab8:	8ab9      	ldrh	r1, [r7, #20]
 8014aba:	f107 030c 	add.w	r3, r7, #12
 8014abe:	4618      	mov	r0, r3
 8014ac0:	f000 f9e4 	bl	8014e8c <sensirion_i2c_add_uint16_t_to_buffer>
 8014ac4:	4603      	mov	r3, r0
 8014ac6:	82bb      	strh	r3, [r7, #20]
                                                        local_offset, altitude);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8014b00 <scd30_set_altitude_compensation+0x78>)
 8014aca:	781b      	ldrb	r3, [r3, #0]
 8014acc:	8aba      	ldrh	r2, [r7, #20]
 8014ace:	f107 010c 	add.w	r1, r7, #12
 8014ad2:	4618      	mov	r0, r3
 8014ad4:	f000 fa0a 	bl	8014eec <sensirion_i2c_write_data>
 8014ad8:	4603      	mov	r3, r0
 8014ada:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 8014adc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d002      	beq.n	8014aea <scd30_set_altitude_compensation+0x62>
        return local_error;
 8014ae4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014ae8:	e005      	b.n	8014af6 <scd30_set_altitude_compensation+0x6e>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014aea:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014aee:	f000 fae9 	bl	80150c4 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 8014af2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8014af6:	4618      	mov	r0, r3
 8014af8:	3718      	adds	r7, #24
 8014afa:	46bd      	mov	sp, r7
 8014afc:	bd80      	pop	{r7, pc}
 8014afe:	bf00      	nop
 8014b00:	20001b5e 	.word	0x20001b5e

08014b04 <scd30_read_firmware_version>:

int16_t scd30_read_firmware_version(uint8_t* major, uint8_t* minor) {
 8014b04:	b580      	push	{r7, lr}
 8014b06:	b084      	sub	sp, #16
 8014b08:	af00      	add	r7, sp, #0
 8014b0a:	6078      	str	r0, [r7, #4]
 8014b0c:	6039      	str	r1, [r7, #0]
    int16_t local_error = NO_ERROR;
 8014b0e:	2300      	movs	r3, #0
 8014b10:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 8014b12:	4b21      	ldr	r3, [pc, #132]	@ (8014b98 <scd30_read_firmware_version+0x94>)
 8014b14:	881b      	ldrh	r3, [r3, #0]
 8014b16:	813b      	strh	r3, [r7, #8]
 8014b18:	2300      	movs	r3, #0
 8014b1a:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 8014b1c:	2300      	movs	r3, #0
 8014b1e:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0xd100);
 8014b20:	89b9      	ldrh	r1, [r7, #12]
 8014b22:	f107 0308 	add.w	r3, r7, #8
 8014b26:	f44f 4251 	mov.w	r2, #53504	@ 0xd100
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	f000 f98b 	bl	8014e46 <sensirion_i2c_add_command_to_buffer>
 8014b30:	4603      	mov	r3, r0
 8014b32:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014b34:	4b19      	ldr	r3, [pc, #100]	@ (8014b9c <scd30_read_firmware_version+0x98>)
 8014b36:	781b      	ldrb	r3, [r3, #0]
 8014b38:	89ba      	ldrh	r2, [r7, #12]
 8014b3a:	f107 0108 	add.w	r1, r7, #8
 8014b3e:	4618      	mov	r0, r3
 8014b40:	f000 f9d4 	bl	8014eec <sensirion_i2c_write_data>
 8014b44:	4603      	mov	r3, r0
 8014b46:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014b48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d002      	beq.n	8014b56 <scd30_read_firmware_version+0x52>
        return local_error;
 8014b50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b54:	e01c      	b.n	8014b90 <scd30_read_firmware_version+0x8c>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014b56:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014b5a:	f000 fab3 	bl	80150c4 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 8014b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8014b9c <scd30_read_firmware_version+0x98>)
 8014b60:	781b      	ldrb	r3, [r3, #0]
 8014b62:	f107 0108 	add.w	r1, r7, #8
 8014b66:	2202      	movs	r2, #2
 8014b68:	4618      	mov	r0, r3
 8014b6a:	f000 f9d2 	bl	8014f12 <sensirion_i2c_read_data_inplace>
 8014b6e:	4603      	mov	r3, r0
 8014b70:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014b72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d002      	beq.n	8014b80 <scd30_read_firmware_version+0x7c>
        return local_error;
 8014b7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b7e:	e007      	b.n	8014b90 <scd30_read_firmware_version+0x8c>
    }
    *major = (uint8_t)local_buffer[0];
 8014b80:	7a3a      	ldrb	r2, [r7, #8]
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	701a      	strb	r2, [r3, #0]
    *minor = (uint8_t)local_buffer[1];
 8014b86:	7a7a      	ldrb	r2, [r7, #9]
 8014b88:	683b      	ldr	r3, [r7, #0]
 8014b8a:	701a      	strb	r2, [r3, #0]
    return local_error;
 8014b8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8014b90:	4618      	mov	r0, r3
 8014b92:	3710      	adds	r7, #16
 8014b94:	46bd      	mov	sp, r7
 8014b96:	bd80      	pop	{r7, pc}
 8014b98:	0802481c 	.word	0x0802481c
 8014b9c:	20001b5e 	.word	0x20001b5e

08014ba0 <scd30_soft_reset>:

int16_t scd30_soft_reset() {
 8014ba0:	b580      	push	{r7, lr}
 8014ba2:	b082      	sub	sp, #8
 8014ba4:	af00      	add	r7, sp, #0
    int16_t local_error = NO_ERROR;
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	80fb      	strh	r3, [r7, #6]
    uint8_t local_buffer[2] = {0};
 8014baa:	2300      	movs	r3, #0
 8014bac:	803b      	strh	r3, [r7, #0]
    uint16_t local_offset = 0;
 8014bae:	2300      	movs	r3, #0
 8014bb0:	80bb      	strh	r3, [r7, #4]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0xd304);
 8014bb2:	88b9      	ldrh	r1, [r7, #4]
 8014bb4:	463b      	mov	r3, r7
 8014bb6:	f24d 3204 	movw	r2, #54020	@ 0xd304
 8014bba:	4618      	mov	r0, r3
 8014bbc:	f000 f943 	bl	8014e46 <sensirion_i2c_add_command_to_buffer>
 8014bc0:	4603      	mov	r3, r0
 8014bc2:	80bb      	strh	r3, [r7, #4]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8014bf8 <scd30_soft_reset+0x58>)
 8014bc6:	781b      	ldrb	r3, [r3, #0]
 8014bc8:	88ba      	ldrh	r2, [r7, #4]
 8014bca:	4639      	mov	r1, r7
 8014bcc:	4618      	mov	r0, r3
 8014bce:	f000 f98d 	bl	8014eec <sensirion_i2c_write_data>
 8014bd2:	4603      	mov	r3, r0
 8014bd4:	80fb      	strh	r3, [r7, #6]
    if (local_error != NO_ERROR) {
 8014bd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d002      	beq.n	8014be4 <scd30_soft_reset+0x44>
        return local_error;
 8014bde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014be2:	e004      	b.n	8014bee <scd30_soft_reset+0x4e>
    }
    sensirion_i2c_hal_sleep_usec(2000 * 1000);
 8014be4:	4805      	ldr	r0, [pc, #20]	@ (8014bfc <scd30_soft_reset+0x5c>)
 8014be6:	f000 fa6d 	bl	80150c4 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 8014bea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8014bee:	4618      	mov	r0, r3
 8014bf0:	3708      	adds	r7, #8
 8014bf2:	46bd      	mov	sp, r7
 8014bf4:	bd80      	pop	{r7, pc}
 8014bf6:	bf00      	nop
 8014bf8:	20001b5e 	.word	0x20001b5e
 8014bfc:	001e8480 	.word	0x001e8480

08014c00 <scd4x_stop_periodic_measurement>:
    *temperature_m_deg_c = ((21875 * (int32_t)temperature) >> 13) - 45000;
    *humidity_m_percent_rh = ((12500 * (int32_t)humidity) >> 13);
    return NO_ERROR;
}

int16_t scd4x_stop_periodic_measurement() {
 8014c00:	b580      	push	{r7, lr}
 8014c02:	b082      	sub	sp, #8
 8014c04:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8014c06:	2300      	movs	r3, #0
 8014c08:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3F86);
 8014c0a:	88f9      	ldrh	r1, [r7, #6]
 8014c0c:	463b      	mov	r3, r7
 8014c0e:	f643 7286 	movw	r2, #16262	@ 0x3f86
 8014c12:	4618      	mov	r0, r3
 8014c14:	f000 f917 	bl	8014e46 <sensirion_i2c_add_command_to_buffer>
 8014c18:	4603      	mov	r3, r0
 8014c1a:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8014c1c:	88fa      	ldrh	r2, [r7, #6]
 8014c1e:	463b      	mov	r3, r7
 8014c20:	4619      	mov	r1, r3
 8014c22:	2062      	movs	r0, #98	@ 0x62
 8014c24:	f000 f962 	bl	8014eec <sensirion_i2c_write_data>
 8014c28:	4603      	mov	r3, r0
 8014c2a:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8014c2c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d002      	beq.n	8014c3a <scd4x_stop_periodic_measurement+0x3a>
        return error;
 8014c34:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014c38:	e003      	b.n	8014c42 <scd4x_stop_periodic_measurement+0x42>
    }
    sensirion_i2c_hal_sleep_usec(500000);
 8014c3a:	4804      	ldr	r0, [pc, #16]	@ (8014c4c <scd4x_stop_periodic_measurement+0x4c>)
 8014c3c:	f000 fa42 	bl	80150c4 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8014c40:	2300      	movs	r3, #0
}
 8014c42:	4618      	mov	r0, r3
 8014c44:	3708      	adds	r7, #8
 8014c46:	46bd      	mov	sp, r7
 8014c48:	bd80      	pop	{r7, pc}
 8014c4a:	bf00      	nop
 8014c4c:	0007a120 	.word	0x0007a120

08014c50 <scd4x_reinit>:
    }
    sensirion_i2c_hal_sleep_usec(800000);
    return NO_ERROR;
}

int16_t scd4x_reinit() {
 8014c50:	b580      	push	{r7, lr}
 8014c52:	b082      	sub	sp, #8
 8014c54:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8014c56:	2300      	movs	r3, #0
 8014c58:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3646);
 8014c5a:	88f9      	ldrh	r1, [r7, #6]
 8014c5c:	463b      	mov	r3, r7
 8014c5e:	f243 6246 	movw	r2, #13894	@ 0x3646
 8014c62:	4618      	mov	r0, r3
 8014c64:	f000 f8ef 	bl	8014e46 <sensirion_i2c_add_command_to_buffer>
 8014c68:	4603      	mov	r3, r0
 8014c6a:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8014c6c:	88fa      	ldrh	r2, [r7, #6]
 8014c6e:	463b      	mov	r3, r7
 8014c70:	4619      	mov	r1, r3
 8014c72:	2062      	movs	r0, #98	@ 0x62
 8014c74:	f000 f93a 	bl	8014eec <sensirion_i2c_write_data>
 8014c78:	4603      	mov	r3, r0
 8014c7a:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8014c7c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d002      	beq.n	8014c8a <scd4x_reinit+0x3a>
        return error;
 8014c84:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014c88:	e004      	b.n	8014c94 <scd4x_reinit+0x44>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 8014c8a:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8014c8e:	f000 fa19 	bl	80150c4 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8014c92:	2300      	movs	r3, #0
}
 8014c94:	4618      	mov	r0, r3
 8014c96:	3708      	adds	r7, #8
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	bd80      	pop	{r7, pc}

08014c9c <scd4x_power_down>:
    }
    sensirion_i2c_hal_sleep_usec(50000);
    return NO_ERROR;
}

int16_t scd4x_power_down() {
 8014c9c:	b580      	push	{r7, lr}
 8014c9e:	b082      	sub	sp, #8
 8014ca0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x36E0);
 8014ca6:	88f9      	ldrh	r1, [r7, #6]
 8014ca8:	463b      	mov	r3, r7
 8014caa:	f243 62e0 	movw	r2, #14048	@ 0x36e0
 8014cae:	4618      	mov	r0, r3
 8014cb0:	f000 f8c9 	bl	8014e46 <sensirion_i2c_add_command_to_buffer>
 8014cb4:	4603      	mov	r3, r0
 8014cb6:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8014cb8:	88fa      	ldrh	r2, [r7, #6]
 8014cba:	463b      	mov	r3, r7
 8014cbc:	4619      	mov	r1, r3
 8014cbe:	2062      	movs	r0, #98	@ 0x62
 8014cc0:	f000 f914 	bl	8014eec <sensirion_i2c_write_data>
 8014cc4:	4603      	mov	r3, r0
 8014cc6:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8014cc8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d002      	beq.n	8014cd6 <scd4x_power_down+0x3a>
        return error;
 8014cd0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014cd4:	e004      	b.n	8014ce0 <scd4x_power_down+0x44>
    }
    sensirion_i2c_hal_sleep_usec(1000);
 8014cd6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8014cda:	f000 f9f3 	bl	80150c4 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8014cde:	2300      	movs	r3, #0
}
 8014ce0:	4618      	mov	r0, r3
 8014ce2:	3708      	adds	r7, #8
 8014ce4:	46bd      	mov	sp, r7
 8014ce6:	bd80      	pop	{r7, pc}

08014ce8 <scd4x_wake_up>:

int16_t scd4x_wake_up() {
 8014ce8:	b580      	push	{r7, lr}
 8014cea:	b082      	sub	sp, #8
 8014cec:	af00      	add	r7, sp, #0
    uint8_t buffer[2];
    uint16_t offset = 0;
 8014cee:	2300      	movs	r3, #0
 8014cf0:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x36F6);
 8014cf2:	88f9      	ldrh	r1, [r7, #6]
 8014cf4:	1d3b      	adds	r3, r7, #4
 8014cf6:	f243 62f6 	movw	r2, #14070	@ 0x36f6
 8014cfa:	4618      	mov	r0, r3
 8014cfc:	f000 f8a3 	bl	8014e46 <sensirion_i2c_add_command_to_buffer>
 8014d00:	4603      	mov	r3, r0
 8014d02:	80fb      	strh	r3, [r7, #6]

    // Sensor does not acknowledge the wake-up call, error is ignored
    (void)sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8014d04:	88fa      	ldrh	r2, [r7, #6]
 8014d06:	1d3b      	adds	r3, r7, #4
 8014d08:	4619      	mov	r1, r3
 8014d0a:	2062      	movs	r0, #98	@ 0x62
 8014d0c:	f000 f8ee 	bl	8014eec <sensirion_i2c_write_data>
    sensirion_i2c_hal_sleep_usec(20000);
 8014d10:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8014d14:	f000 f9d6 	bl	80150c4 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8014d18:	2300      	movs	r3, #0
}
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	3708      	adds	r7, #8
 8014d1e:	46bd      	mov	sp, r7
 8014d20:	bd80      	pop	{r7, pc}

08014d22 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8014d22:	b480      	push	{r7}
 8014d24:	b083      	sub	sp, #12
 8014d26:	af00      	add	r7, sp, #0
 8014d28:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	781b      	ldrb	r3, [r3, #0]
 8014d2e:	021b      	lsls	r3, r3, #8
 8014d30:	b21a      	sxth	r2, r3
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	3301      	adds	r3, #1
 8014d36:	781b      	ldrb	r3, [r3, #0]
 8014d38:	b21b      	sxth	r3, r3
 8014d3a:	4313      	orrs	r3, r2
 8014d3c:	b21b      	sxth	r3, r3
 8014d3e:	b29b      	uxth	r3, r3
}
 8014d40:	4618      	mov	r0, r3
 8014d42:	370c      	adds	r7, #12
 8014d44:	46bd      	mov	sp, r7
 8014d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d4a:	4770      	bx	lr

08014d4c <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 8014d4c:	b480      	push	{r7}
 8014d4e:	b083      	sub	sp, #12
 8014d50:	af00      	add	r7, sp, #0
 8014d52:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	781b      	ldrb	r3, [r3, #0]
 8014d58:	061a      	lsls	r2, r3, #24
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	3301      	adds	r3, #1
 8014d5e:	781b      	ldrb	r3, [r3, #0]
 8014d60:	041b      	lsls	r3, r3, #16
 8014d62:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	3302      	adds	r3, #2
 8014d68:	781b      	ldrb	r3, [r3, #0]
 8014d6a:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8014d6c:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8014d6e:	687a      	ldr	r2, [r7, #4]
 8014d70:	3203      	adds	r2, #3
 8014d72:	7812      	ldrb	r2, [r2, #0]
 8014d74:	4313      	orrs	r3, r2
}
 8014d76:	4618      	mov	r0, r3
 8014d78:	370c      	adds	r7, #12
 8014d7a:	46bd      	mov	sp, r7
 8014d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d80:	4770      	bx	lr

08014d82 <sensirion_common_bytes_to_float>:

int32_t sensirion_common_bytes_to_int32_t(const uint8_t* bytes) {
    return (int32_t)sensirion_common_bytes_to_uint32_t(bytes);
}

float sensirion_common_bytes_to_float(const uint8_t* bytes) {
 8014d82:	b580      	push	{r7, lr}
 8014d84:	b084      	sub	sp, #16
 8014d86:	af00      	add	r7, sp, #0
 8014d88:	6078      	str	r0, [r7, #4]
    union {
        uint32_t u32_value;
        float float32;
    } tmp;

    tmp.u32_value = sensirion_common_bytes_to_uint32_t(bytes);
 8014d8a:	6878      	ldr	r0, [r7, #4]
 8014d8c:	f7ff ffde 	bl	8014d4c <sensirion_common_bytes_to_uint32_t>
 8014d90:	4603      	mov	r3, r0
 8014d92:	60fb      	str	r3, [r7, #12]
    return tmp.float32;
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	ee07 3a90 	vmov	s15, r3
}
 8014d9a:	eeb0 0a67 	vmov.f32	s0, s15
 8014d9e:	3710      	adds	r7, #16
 8014da0:	46bd      	mov	sp, r7
 8014da2:	bd80      	pop	{r7, pc}

08014da4 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8014da4:	b480      	push	{r7}
 8014da6:	b085      	sub	sp, #20
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	6078      	str	r0, [r7, #4]
 8014dac:	460b      	mov	r3, r1
 8014dae:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8014db0:	23ff      	movs	r3, #255	@ 0xff
 8014db2:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8014db4:	2300      	movs	r3, #0
 8014db6:	81fb      	strh	r3, [r7, #14]
 8014db8:	e021      	b.n	8014dfe <sensirion_i2c_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 8014dba:	89fb      	ldrh	r3, [r7, #14]
 8014dbc:	687a      	ldr	r2, [r7, #4]
 8014dbe:	4413      	add	r3, r2
 8014dc0:	781a      	ldrb	r2, [r3, #0]
 8014dc2:	7b7b      	ldrb	r3, [r7, #13]
 8014dc4:	4053      	eors	r3, r2
 8014dc6:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8014dc8:	2308      	movs	r3, #8
 8014dca:	733b      	strb	r3, [r7, #12]
 8014dcc:	e011      	b.n	8014df2 <sensirion_i2c_generate_crc+0x4e>
            if (crc & 0x80)
 8014dce:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	da07      	bge.n	8014de6 <sensirion_i2c_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8014dd6:	7b7b      	ldrb	r3, [r7, #13]
 8014dd8:	005b      	lsls	r3, r3, #1
 8014dda:	b25b      	sxtb	r3, r3
 8014ddc:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8014de0:	b25b      	sxtb	r3, r3
 8014de2:	737b      	strb	r3, [r7, #13]
 8014de4:	e002      	b.n	8014dec <sensirion_i2c_generate_crc+0x48>
            else
                crc = (crc << 1);
 8014de6:	7b7b      	ldrb	r3, [r7, #13]
 8014de8:	005b      	lsls	r3, r3, #1
 8014dea:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8014dec:	7b3b      	ldrb	r3, [r7, #12]
 8014dee:	3b01      	subs	r3, #1
 8014df0:	733b      	strb	r3, [r7, #12]
 8014df2:	7b3b      	ldrb	r3, [r7, #12]
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d1ea      	bne.n	8014dce <sensirion_i2c_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8014df8:	89fb      	ldrh	r3, [r7, #14]
 8014dfa:	3301      	adds	r3, #1
 8014dfc:	81fb      	strh	r3, [r7, #14]
 8014dfe:	89fa      	ldrh	r2, [r7, #14]
 8014e00:	887b      	ldrh	r3, [r7, #2]
 8014e02:	429a      	cmp	r2, r3
 8014e04:	d3d9      	bcc.n	8014dba <sensirion_i2c_generate_crc+0x16>
        }
    }
    return crc;
 8014e06:	7b7b      	ldrb	r3, [r7, #13]
}
 8014e08:	4618      	mov	r0, r3
 8014e0a:	3714      	adds	r7, #20
 8014e0c:	46bd      	mov	sp, r7
 8014e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e12:	4770      	bx	lr

08014e14 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 8014e14:	b580      	push	{r7, lr}
 8014e16:	b082      	sub	sp, #8
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	6078      	str	r0, [r7, #4]
 8014e1c:	460b      	mov	r3, r1
 8014e1e:	807b      	strh	r3, [r7, #2]
 8014e20:	4613      	mov	r3, r2
 8014e22:	707b      	strb	r3, [r7, #1]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8014e24:	887b      	ldrh	r3, [r7, #2]
 8014e26:	4619      	mov	r1, r3
 8014e28:	6878      	ldr	r0, [r7, #4]
 8014e2a:	f7ff ffbb 	bl	8014da4 <sensirion_i2c_generate_crc>
 8014e2e:	4603      	mov	r3, r0
 8014e30:	461a      	mov	r2, r3
 8014e32:	787b      	ldrb	r3, [r7, #1]
 8014e34:	4293      	cmp	r3, r2
 8014e36:	d001      	beq.n	8014e3c <sensirion_i2c_check_crc+0x28>
        return CRC_ERROR;
 8014e38:	2301      	movs	r3, #1
 8014e3a:	e000      	b.n	8014e3e <sensirion_i2c_check_crc+0x2a>
    return NO_ERROR;
 8014e3c:	2300      	movs	r3, #0
}
 8014e3e:	4618      	mov	r0, r3
 8014e40:	3708      	adds	r7, #8
 8014e42:	46bd      	mov	sp, r7
 8014e44:	bd80      	pop	{r7, pc}

08014e46 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 8014e46:	b480      	push	{r7}
 8014e48:	b083      	sub	sp, #12
 8014e4a:	af00      	add	r7, sp, #0
 8014e4c:	6078      	str	r0, [r7, #4]
 8014e4e:	460b      	mov	r3, r1
 8014e50:	807b      	strh	r3, [r7, #2]
 8014e52:	4613      	mov	r3, r2
 8014e54:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 8014e56:	883b      	ldrh	r3, [r7, #0]
 8014e58:	0a1b      	lsrs	r3, r3, #8
 8014e5a:	b29a      	uxth	r2, r3
 8014e5c:	887b      	ldrh	r3, [r7, #2]
 8014e5e:	1c59      	adds	r1, r3, #1
 8014e60:	8079      	strh	r1, [r7, #2]
 8014e62:	4619      	mov	r1, r3
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	440b      	add	r3, r1
 8014e68:	b2d2      	uxtb	r2, r2
 8014e6a:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 8014e6c:	887b      	ldrh	r3, [r7, #2]
 8014e6e:	1c5a      	adds	r2, r3, #1
 8014e70:	807a      	strh	r2, [r7, #2]
 8014e72:	461a      	mov	r2, r3
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	4413      	add	r3, r2
 8014e78:	883a      	ldrh	r2, [r7, #0]
 8014e7a:	b2d2      	uxtb	r2, r2
 8014e7c:	701a      	strb	r2, [r3, #0]
    return offset;
 8014e7e:	887b      	ldrh	r3, [r7, #2]
}
 8014e80:	4618      	mov	r0, r3
 8014e82:	370c      	adds	r7, #12
 8014e84:	46bd      	mov	sp, r7
 8014e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e8a:	4770      	bx	lr

08014e8c <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 8014e8c:	b590      	push	{r4, r7, lr}
 8014e8e:	b083      	sub	sp, #12
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	6078      	str	r0, [r7, #4]
 8014e94:	460b      	mov	r3, r1
 8014e96:	807b      	strh	r3, [r7, #2]
 8014e98:	4613      	mov	r3, r2
 8014e9a:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 8014e9c:	883b      	ldrh	r3, [r7, #0]
 8014e9e:	0a1b      	lsrs	r3, r3, #8
 8014ea0:	b29a      	uxth	r2, r3
 8014ea2:	887b      	ldrh	r3, [r7, #2]
 8014ea4:	1c59      	adds	r1, r3, #1
 8014ea6:	8079      	strh	r1, [r7, #2]
 8014ea8:	4619      	mov	r1, r3
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	440b      	add	r3, r1
 8014eae:	b2d2      	uxtb	r2, r2
 8014eb0:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 8014eb2:	887b      	ldrh	r3, [r7, #2]
 8014eb4:	1c5a      	adds	r2, r3, #1
 8014eb6:	807a      	strh	r2, [r7, #2]
 8014eb8:	461a      	mov	r2, r3
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	4413      	add	r3, r2
 8014ebe:	883a      	ldrh	r2, [r7, #0]
 8014ec0:	b2d2      	uxtb	r2, r2
 8014ec2:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 8014ec4:	887b      	ldrh	r3, [r7, #2]
 8014ec6:	3b02      	subs	r3, #2
 8014ec8:	687a      	ldr	r2, [r7, #4]
 8014eca:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 8014ecc:	887b      	ldrh	r3, [r7, #2]
 8014ece:	687a      	ldr	r2, [r7, #4]
 8014ed0:	18d4      	adds	r4, r2, r3
 8014ed2:	2102      	movs	r1, #2
 8014ed4:	f7ff ff66 	bl	8014da4 <sensirion_i2c_generate_crc>
 8014ed8:	4603      	mov	r3, r0
 8014eda:	7023      	strb	r3, [r4, #0]
    offset++;
 8014edc:	887b      	ldrh	r3, [r7, #2]
 8014ede:	3301      	adds	r3, #1
 8014ee0:	807b      	strh	r3, [r7, #2]

    return offset;
 8014ee2:	887b      	ldrh	r3, [r7, #2]
}
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	370c      	adds	r7, #12
 8014ee8:	46bd      	mov	sp, r7
 8014eea:	bd90      	pop	{r4, r7, pc}

08014eec <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b082      	sub	sp, #8
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	4603      	mov	r3, r0
 8014ef4:	6039      	str	r1, [r7, #0]
 8014ef6:	71fb      	strb	r3, [r7, #7]
 8014ef8:	4613      	mov	r3, r2
 8014efa:	80bb      	strh	r3, [r7, #4]
    return sensirion_i2c_hal_write(address, data, data_length);
 8014efc:	88ba      	ldrh	r2, [r7, #4]
 8014efe:	79fb      	ldrb	r3, [r7, #7]
 8014f00:	6839      	ldr	r1, [r7, #0]
 8014f02:	4618      	mov	r0, r3
 8014f04:	f000 f8c2 	bl	801508c <sensirion_i2c_hal_write>
 8014f08:	4603      	mov	r3, r0
}
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	3708      	adds	r7, #8
 8014f0e:	46bd      	mov	sp, r7
 8014f10:	bd80      	pop	{r7, pc}

08014f12 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8014f12:	b580      	push	{r7, lr}
 8014f14:	b084      	sub	sp, #16
 8014f16:	af00      	add	r7, sp, #0
 8014f18:	4603      	mov	r3, r0
 8014f1a:	6039      	str	r1, [r7, #0]
 8014f1c:	71fb      	strb	r3, [r7, #7]
 8014f1e:	4613      	mov	r3, r2
 8014f20:	80bb      	strh	r3, [r7, #4]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8014f22:	88bb      	ldrh	r3, [r7, #4]
 8014f24:	085b      	lsrs	r3, r3, #1
 8014f26:	b29b      	uxth	r3, r3
 8014f28:	461a      	mov	r2, r3
 8014f2a:	0052      	lsls	r2, r2, #1
 8014f2c:	4413      	add	r3, r2
 8014f2e:	817b      	strh	r3, [r7, #10]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8014f30:	88bb      	ldrh	r3, [r7, #4]
 8014f32:	f003 0301 	and.w	r3, r3, #1
 8014f36:	b29b      	uxth	r3, r3
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d001      	beq.n	8014f40 <sensirion_i2c_read_data_inplace+0x2e>
        return BYTE_NUM_ERROR;
 8014f3c:	2304      	movs	r3, #4
 8014f3e:	e047      	b.n	8014fd0 <sensirion_i2c_read_data_inplace+0xbe>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8014f40:	897a      	ldrh	r2, [r7, #10]
 8014f42:	79fb      	ldrb	r3, [r7, #7]
 8014f44:	6839      	ldr	r1, [r7, #0]
 8014f46:	4618      	mov	r0, r3
 8014f48:	f000 f884 	bl	8015054 <sensirion_i2c_hal_read>
 8014f4c:	4603      	mov	r3, r0
 8014f4e:	813b      	strh	r3, [r7, #8]
    if (error) {
 8014f50:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d002      	beq.n	8014f5e <sensirion_i2c_read_data_inplace+0x4c>
        return error;
 8014f58:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014f5c:	e038      	b.n	8014fd0 <sensirion_i2c_read_data_inplace+0xbe>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8014f5e:	2300      	movs	r3, #0
 8014f60:	81fb      	strh	r3, [r7, #14]
 8014f62:	2300      	movs	r3, #0
 8014f64:	81bb      	strh	r3, [r7, #12]
 8014f66:	e02e      	b.n	8014fc6 <sensirion_i2c_read_data_inplace+0xb4>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8014f68:	89fb      	ldrh	r3, [r7, #14]
 8014f6a:	683a      	ldr	r2, [r7, #0]
 8014f6c:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8014f6e:	89fb      	ldrh	r3, [r7, #14]
 8014f70:	3302      	adds	r3, #2
 8014f72:	683a      	ldr	r2, [r7, #0]
 8014f74:	4413      	add	r3, r2
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8014f76:	781b      	ldrb	r3, [r3, #0]
 8014f78:	461a      	mov	r2, r3
 8014f7a:	2102      	movs	r1, #2
 8014f7c:	f7ff ff4a 	bl	8014e14 <sensirion_i2c_check_crc>
 8014f80:	4603      	mov	r3, r0
 8014f82:	813b      	strh	r3, [r7, #8]
        if (error) {
 8014f84:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d002      	beq.n	8014f92 <sensirion_i2c_read_data_inplace+0x80>
            return error;
 8014f8c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014f90:	e01e      	b.n	8014fd0 <sensirion_i2c_read_data_inplace+0xbe>
        }
        buffer[j++] = buffer[i];
 8014f92:	89fb      	ldrh	r3, [r7, #14]
 8014f94:	683a      	ldr	r2, [r7, #0]
 8014f96:	441a      	add	r2, r3
 8014f98:	89bb      	ldrh	r3, [r7, #12]
 8014f9a:	1c59      	adds	r1, r3, #1
 8014f9c:	81b9      	strh	r1, [r7, #12]
 8014f9e:	4619      	mov	r1, r3
 8014fa0:	683b      	ldr	r3, [r7, #0]
 8014fa2:	440b      	add	r3, r1
 8014fa4:	7812      	ldrb	r2, [r2, #0]
 8014fa6:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8014fa8:	89fb      	ldrh	r3, [r7, #14]
 8014faa:	3301      	adds	r3, #1
 8014fac:	683a      	ldr	r2, [r7, #0]
 8014fae:	441a      	add	r2, r3
 8014fb0:	89bb      	ldrh	r3, [r7, #12]
 8014fb2:	1c59      	adds	r1, r3, #1
 8014fb4:	81b9      	strh	r1, [r7, #12]
 8014fb6:	4619      	mov	r1, r3
 8014fb8:	683b      	ldr	r3, [r7, #0]
 8014fba:	440b      	add	r3, r1
 8014fbc:	7812      	ldrb	r2, [r2, #0]
 8014fbe:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8014fc0:	89fb      	ldrh	r3, [r7, #14]
 8014fc2:	3303      	adds	r3, #3
 8014fc4:	81fb      	strh	r3, [r7, #14]
 8014fc6:	89fa      	ldrh	r2, [r7, #14]
 8014fc8:	897b      	ldrh	r3, [r7, #10]
 8014fca:	429a      	cmp	r2, r3
 8014fcc:	d3cc      	bcc.n	8014f68 <sensirion_i2c_read_data_inplace+0x56>
    }

    return NO_ERROR;
 8014fce:	2300      	movs	r3, #0
}
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	3710      	adds	r7, #16
 8014fd4:	46bd      	mov	sp, r7
 8014fd6:	bd80      	pop	{r7, pc}

08014fd8 <sensirion_i2c_hal_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_hal_init(void) {
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	af00      	add	r7, sp, #0
    /* TODO:IMPLEMENT */
	HAL_I2C_DeInit(&hi2c1);
 8014fdc:	4814      	ldr	r0, [pc, #80]	@ (8015030 <sensirion_i2c_hal_init+0x58>)
 8014fde:	f7f1 fa51 	bl	8006484 <HAL_I2C_DeInit>
	  hi2c1.Instance = I2C1;
 8014fe2:	4b13      	ldr	r3, [pc, #76]	@ (8015030 <sensirion_i2c_hal_init+0x58>)
 8014fe4:	4a13      	ldr	r2, [pc, #76]	@ (8015034 <sensirion_i2c_hal_init+0x5c>)
 8014fe6:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = 100000;
 8014fe8:	4b11      	ldr	r3, [pc, #68]	@ (8015030 <sensirion_i2c_hal_init+0x58>)
 8014fea:	4a13      	ldr	r2, [pc, #76]	@ (8015038 <sensirion_i2c_hal_init+0x60>)
 8014fec:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8014fee:	4b10      	ldr	r3, [pc, #64]	@ (8015030 <sensirion_i2c_hal_init+0x58>)
 8014ff0:	2200      	movs	r2, #0
 8014ff2:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0;
 8014ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8015030 <sensirion_i2c_hal_init+0x58>)
 8014ff6:	2200      	movs	r2, #0
 8014ff8:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8014ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8015030 <sensirion_i2c_hal_init+0x58>)
 8014ffc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8015000:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8015002:	4b0b      	ldr	r3, [pc, #44]	@ (8015030 <sensirion_i2c_hal_init+0x58>)
 8015004:	2200      	movs	r2, #0
 8015006:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 8015008:	4b09      	ldr	r3, [pc, #36]	@ (8015030 <sensirion_i2c_hal_init+0x58>)
 801500a:	2200      	movs	r2, #0
 801500c:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801500e:	4b08      	ldr	r3, [pc, #32]	@ (8015030 <sensirion_i2c_hal_init+0x58>)
 8015010:	2200      	movs	r2, #0
 8015012:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8015014:	4b06      	ldr	r3, [pc, #24]	@ (8015030 <sensirion_i2c_hal_init+0x58>)
 8015016:	2200      	movs	r2, #0
 8015018:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801501a:	4805      	ldr	r0, [pc, #20]	@ (8015030 <sensirion_i2c_hal_init+0x58>)
 801501c:	f7f1 f8ee 	bl	80061fc <HAL_I2C_Init>
 8015020:	4603      	mov	r3, r0
 8015022:	2b00      	cmp	r3, #0
 8015024:	d001      	beq.n	801502a <sensirion_i2c_hal_init+0x52>
	  {
	    Error_Handler();
 8015026:	f7ee fb89 	bl	800373c <Error_Handler>
	  }
}
 801502a:	bf00      	nop
 801502c:	bd80      	pop	{r7, pc}
 801502e:	bf00      	nop
 8015030:	20001838 	.word	0x20001838
 8015034:	40005400 	.word	0x40005400
 8015038:	000186a0 	.word	0x000186a0

0801503c <sensirion_i2c_hal_free>:

/**
 * Release all resources initialized by sensirion_i2c_hal_init().
 */
void sensirion_i2c_hal_free(void) {
 801503c:	b580      	push	{r7, lr}
 801503e:	af00      	add	r7, sp, #0
    /* TODO:IMPLEMENT or leave empty if no resources need to be freed */
HAL_I2C_DeInit(&hi2c1);
 8015040:	4803      	ldr	r0, [pc, #12]	@ (8015050 <sensirion_i2c_hal_free+0x14>)
 8015042:	f7f1 fa1f 	bl	8006484 <HAL_I2C_DeInit>
HAL_I2C_MspDeInit(&hi2c1);
 8015046:	4802      	ldr	r0, [pc, #8]	@ (8015050 <sensirion_i2c_hal_free+0x14>)
 8015048:	f7ee fc52 	bl	80038f0 <HAL_I2C_MspDeInit>
}
 801504c:	bf00      	nop
 801504e:	bd80      	pop	{r7, pc}
 8015050:	20001838 	.word	0x20001838

08015054 <sensirion_i2c_hal_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 8015054:	b580      	push	{r7, lr}
 8015056:	b084      	sub	sp, #16
 8015058:	af02      	add	r7, sp, #8
 801505a:	4603      	mov	r3, r0
 801505c:	6039      	str	r1, [r7, #0]
 801505e:	71fb      	strb	r3, [r7, #7]
 8015060:	4613      	mov	r3, r2
 8015062:	80bb      	strh	r3, [r7, #4]
    /* TODO:IMPLEMENT */
    return HAL_I2C_Master_Receive(&hi2c1,(uint16_t)(address << 1),data,count,HAL_MAX_DELAY);
 8015064:	79fb      	ldrb	r3, [r7, #7]
 8015066:	b29b      	uxth	r3, r3
 8015068:	005b      	lsls	r3, r3, #1
 801506a:	b299      	uxth	r1, r3
 801506c:	88bb      	ldrh	r3, [r7, #4]
 801506e:	f04f 32ff 	mov.w	r2, #4294967295
 8015072:	9200      	str	r2, [sp, #0]
 8015074:	683a      	ldr	r2, [r7, #0]
 8015076:	4804      	ldr	r0, [pc, #16]	@ (8015088 <sensirion_i2c_hal_read+0x34>)
 8015078:	f7f1 fb32 	bl	80066e0 <HAL_I2C_Master_Receive>
 801507c:	4603      	mov	r3, r0
 801507e:	b25b      	sxtb	r3, r3
	//return NOT_IMPLEMENTED_ERROR;
}
 8015080:	4618      	mov	r0, r3
 8015082:	3708      	adds	r7, #8
 8015084:	46bd      	mov	sp, r7
 8015086:	bd80      	pop	{r7, pc}
 8015088:	20001838 	.word	0x20001838

0801508c <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data,
                               uint16_t count) {
 801508c:	b580      	push	{r7, lr}
 801508e:	b084      	sub	sp, #16
 8015090:	af02      	add	r7, sp, #8
 8015092:	4603      	mov	r3, r0
 8015094:	6039      	str	r1, [r7, #0]
 8015096:	71fb      	strb	r3, [r7, #7]
 8015098:	4613      	mov	r3, r2
 801509a:	80bb      	strh	r3, [r7, #4]
    /* TODO:IMPLEMENT */
	return HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)(address << 1),(uint8_t *)data,count,HAL_MAX_DELAY);
 801509c:	79fb      	ldrb	r3, [r7, #7]
 801509e:	b29b      	uxth	r3, r3
 80150a0:	005b      	lsls	r3, r3, #1
 80150a2:	b299      	uxth	r1, r3
 80150a4:	88bb      	ldrh	r3, [r7, #4]
 80150a6:	f04f 32ff 	mov.w	r2, #4294967295
 80150aa:	9200      	str	r2, [sp, #0]
 80150ac:	683a      	ldr	r2, [r7, #0]
 80150ae:	4804      	ldr	r0, [pc, #16]	@ (80150c0 <sensirion_i2c_hal_write+0x34>)
 80150b0:	f7f1 fa18 	bl	80064e4 <HAL_I2C_Master_Transmit>
 80150b4:	4603      	mov	r3, r0
 80150b6:	b25b      	sxtb	r3, r3
	//return NOT_IMPLEMENTED_ERROR;
}
 80150b8:	4618      	mov	r0, r3
 80150ba:	3708      	adds	r7, #8
 80150bc:	46bd      	mov	sp, r7
 80150be:	bd80      	pop	{r7, pc}
 80150c0:	20001838 	.word	0x20001838

080150c4 <sensirion_i2c_hal_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 80150c4:	b580      	push	{r7, lr}
 80150c6:	b084      	sub	sp, #16
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	6078      	str	r0, [r7, #4]
    /* TODO:IMPLEMENT */
	   uint32_t msec = useconds / 1000;
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	4a0d      	ldr	r2, [pc, #52]	@ (8015104 <sensirion_i2c_hal_sleep_usec+0x40>)
 80150d0:	fba2 2303 	umull	r2, r3, r2, r3
 80150d4:	099b      	lsrs	r3, r3, #6
 80150d6:	60fb      	str	r3, [r7, #12]
	    if (useconds % 1000 > 0) {
 80150d8:	687a      	ldr	r2, [r7, #4]
 80150da:	4b0a      	ldr	r3, [pc, #40]	@ (8015104 <sensirion_i2c_hal_sleep_usec+0x40>)
 80150dc:	fba3 1302 	umull	r1, r3, r3, r2
 80150e0:	099b      	lsrs	r3, r3, #6
 80150e2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80150e6:	fb01 f303 	mul.w	r3, r1, r3
 80150ea:	1ad3      	subs	r3, r2, r3
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d002      	beq.n	80150f6 <sensirion_i2c_hal_sleep_usec+0x32>
	        msec++;
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	3301      	adds	r3, #1
 80150f4:	60fb      	str	r3, [r7, #12]
	    }
	    HAL_Delay(msec);
 80150f6:	68f8      	ldr	r0, [r7, #12]
 80150f8:	f7ef f876 	bl	80041e8 <HAL_Delay>
}
 80150fc:	bf00      	nop
 80150fe:	3710      	adds	r7, #16
 8015100:	46bd      	mov	sp, r7
 8015102:	bd80      	pop	{r7, pc}
 8015104:	10624dd3 	.word	0x10624dd3

08015108 <sensirion_bytes_to_uint32_t>:

uint16_t sensirion_bytes_to_uint16_t(const uint8_t* bytes) {
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
}

uint32_t sensirion_bytes_to_uint32_t(const uint8_t* bytes) {
 8015108:	b480      	push	{r7}
 801510a:	b083      	sub	sp, #12
 801510c:	af00      	add	r7, sp, #0
 801510e:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	781b      	ldrb	r3, [r3, #0]
 8015114:	061a      	lsls	r2, r3, #24
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	3301      	adds	r3, #1
 801511a:	781b      	ldrb	r3, [r3, #0]
 801511c:	041b      	lsls	r3, r3, #16
 801511e:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	3302      	adds	r3, #2
 8015124:	781b      	ldrb	r3, [r3, #0]
 8015126:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8015128:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 801512a:	687a      	ldr	r2, [r7, #4]
 801512c:	3203      	adds	r2, #3
 801512e:	7812      	ldrb	r2, [r2, #0]
 8015130:	4313      	orrs	r3, r2
}
 8015132:	4618      	mov	r0, r3
 8015134:	370c      	adds	r7, #12
 8015136:	46bd      	mov	sp, r7
 8015138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801513c:	4770      	bx	lr

0801513e <sensirion_bytes_to_float>:

int32_t sensirion_bytes_to_int32_t(const uint8_t* bytes) {
    return (int32_t)sensirion_bytes_to_uint32_t(bytes);
}

float sensirion_bytes_to_float(const uint8_t* bytes) {
 801513e:	b580      	push	{r7, lr}
 8015140:	b084      	sub	sp, #16
 8015142:	af00      	add	r7, sp, #0
 8015144:	6078      	str	r0, [r7, #4]
    union {
        uint32_t u32_value;
        float float32;
    } tmp;

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
 8015146:	6878      	ldr	r0, [r7, #4]
 8015148:	f7ff ffde 	bl	8015108 <sensirion_bytes_to_uint32_t>
 801514c:	4603      	mov	r3, r0
 801514e:	60fb      	str	r3, [r7, #12]
    return tmp.float32;
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	ee07 3a90 	vmov	s15, r3
}
 8015156:	eeb0 0a67 	vmov.f32	s0, s15
 801515a:	3710      	adds	r7, #16
 801515c:	46bd      	mov	sp, r7
 801515e:	bd80      	pop	{r7, pc}

08015160 <sensirion_shdlc_crc>:
    tmp.float32 = value;
    sensirion_uint32_t_to_bytes(tmp.u32_value, bytes);
}

static uint8_t sensirion_shdlc_crc(uint8_t header_sum, uint8_t data_len,
                                   const uint8_t* data) {
 8015160:	b480      	push	{r7}
 8015162:	b083      	sub	sp, #12
 8015164:	af00      	add	r7, sp, #0
 8015166:	4603      	mov	r3, r0
 8015168:	603a      	str	r2, [r7, #0]
 801516a:	71fb      	strb	r3, [r7, #7]
 801516c:	460b      	mov	r3, r1
 801516e:	71bb      	strb	r3, [r7, #6]
    header_sum += data_len;
 8015170:	79fa      	ldrb	r2, [r7, #7]
 8015172:	79bb      	ldrb	r3, [r7, #6]
 8015174:	4413      	add	r3, r2
 8015176:	71fb      	strb	r3, [r7, #7]

    while (data_len--)
 8015178:	e006      	b.n	8015188 <sensirion_shdlc_crc+0x28>
        header_sum += *(data++);
 801517a:	683b      	ldr	r3, [r7, #0]
 801517c:	1c5a      	adds	r2, r3, #1
 801517e:	603a      	str	r2, [r7, #0]
 8015180:	781a      	ldrb	r2, [r3, #0]
 8015182:	79fb      	ldrb	r3, [r7, #7]
 8015184:	4413      	add	r3, r2
 8015186:	71fb      	strb	r3, [r7, #7]
    while (data_len--)
 8015188:	79bb      	ldrb	r3, [r7, #6]
 801518a:	1e5a      	subs	r2, r3, #1
 801518c:	71ba      	strb	r2, [r7, #6]
 801518e:	2b00      	cmp	r3, #0
 8015190:	d1f3      	bne.n	801517a <sensirion_shdlc_crc+0x1a>

    return ~header_sum;
 8015192:	79fb      	ldrb	r3, [r7, #7]
 8015194:	43db      	mvns	r3, r3
 8015196:	b2db      	uxtb	r3, r3
}
 8015198:	4618      	mov	r0, r3
 801519a:	370c      	adds	r7, #12
 801519c:	46bd      	mov	sp, r7
 801519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a2:	4770      	bx	lr

080151a4 <sensirion_shdlc_stuff_data>:

static uint16_t sensirion_shdlc_stuff_data(uint8_t data_len,
                                           const uint8_t* data,
                                           uint8_t* stuffed_data) {
 80151a4:	b480      	push	{r7}
 80151a6:	b087      	sub	sp, #28
 80151a8:	af00      	add	r7, sp, #0
 80151aa:	4603      	mov	r3, r0
 80151ac:	60b9      	str	r1, [r7, #8]
 80151ae:	607a      	str	r2, [r7, #4]
 80151b0:	73fb      	strb	r3, [r7, #15]
    uint16_t output_data_len = 0;
 80151b2:	2300      	movs	r3, #0
 80151b4:	82fb      	strh	r3, [r7, #22]
    uint8_t c;

    while (data_len--) {
 80151b6:	e026      	b.n	8015206 <sensirion_shdlc_stuff_data+0x62>
        c = *(data++);
 80151b8:	68bb      	ldr	r3, [r7, #8]
 80151ba:	1c5a      	adds	r2, r3, #1
 80151bc:	60ba      	str	r2, [r7, #8]
 80151be:	781b      	ldrb	r3, [r3, #0]
 80151c0:	757b      	strb	r3, [r7, #21]
        switch (c) {
 80151c2:	7d7b      	ldrb	r3, [r7, #21]
 80151c4:	2b7e      	cmp	r3, #126	@ 0x7e
 80151c6:	dc16      	bgt.n	80151f6 <sensirion_shdlc_stuff_data+0x52>
 80151c8:	2b7d      	cmp	r3, #125	@ 0x7d
 80151ca:	da03      	bge.n	80151d4 <sensirion_shdlc_stuff_data+0x30>
 80151cc:	2b11      	cmp	r3, #17
 80151ce:	d001      	beq.n	80151d4 <sensirion_shdlc_stuff_data+0x30>
 80151d0:	2b13      	cmp	r3, #19
 80151d2:	d110      	bne.n	80151f6 <sensirion_shdlc_stuff_data+0x52>
            case 0x11:
            case 0x13:
            case 0x7d:
            case 0x7e:
                // byte stuffing is done by inserting 0x7d and inverting bit 5
                *(stuffed_data++) = 0x7d;
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	1c5a      	adds	r2, r3, #1
 80151d8:	607a      	str	r2, [r7, #4]
 80151da:	227d      	movs	r2, #125	@ 0x7d
 80151dc:	701a      	strb	r2, [r3, #0]
                *(stuffed_data++) = c ^ (1 << 5);
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	1c5a      	adds	r2, r3, #1
 80151e2:	607a      	str	r2, [r7, #4]
 80151e4:	7d7a      	ldrb	r2, [r7, #21]
 80151e6:	f082 0220 	eor.w	r2, r2, #32
 80151ea:	b2d2      	uxtb	r2, r2
 80151ec:	701a      	strb	r2, [r3, #0]
                output_data_len += 2;
 80151ee:	8afb      	ldrh	r3, [r7, #22]
 80151f0:	3302      	adds	r3, #2
 80151f2:	82fb      	strh	r3, [r7, #22]
                break;
 80151f4:	e007      	b.n	8015206 <sensirion_shdlc_stuff_data+0x62>
            default:
                *(stuffed_data++) = c;
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	1c5a      	adds	r2, r3, #1
 80151fa:	607a      	str	r2, [r7, #4]
 80151fc:	7d7a      	ldrb	r2, [r7, #21]
 80151fe:	701a      	strb	r2, [r3, #0]
                output_data_len += 1;
 8015200:	8afb      	ldrh	r3, [r7, #22]
 8015202:	3301      	adds	r3, #1
 8015204:	82fb      	strh	r3, [r7, #22]
    while (data_len--) {
 8015206:	7bfb      	ldrb	r3, [r7, #15]
 8015208:	1e5a      	subs	r2, r3, #1
 801520a:	73fa      	strb	r2, [r7, #15]
 801520c:	2b00      	cmp	r3, #0
 801520e:	d1d3      	bne.n	80151b8 <sensirion_shdlc_stuff_data+0x14>
        }
    }
    return output_data_len;
 8015210:	8afb      	ldrh	r3, [r7, #22]
}
 8015212:	4618      	mov	r0, r3
 8015214:	371c      	adds	r7, #28
 8015216:	46bd      	mov	sp, r7
 8015218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801521c:	4770      	bx	lr

0801521e <sensirion_shdlc_check_unstuff>:

static uint8_t sensirion_shdlc_check_unstuff(uint8_t data) {
 801521e:	b480      	push	{r7}
 8015220:	b083      	sub	sp, #12
 8015222:	af00      	add	r7, sp, #0
 8015224:	4603      	mov	r3, r0
 8015226:	71fb      	strb	r3, [r7, #7]
    return data == 0x7d;
 8015228:	79fb      	ldrb	r3, [r7, #7]
 801522a:	2b7d      	cmp	r3, #125	@ 0x7d
 801522c:	bf0c      	ite	eq
 801522e:	2301      	moveq	r3, #1
 8015230:	2300      	movne	r3, #0
 8015232:	b2db      	uxtb	r3, r3
}
 8015234:	4618      	mov	r0, r3
 8015236:	370c      	adds	r7, #12
 8015238:	46bd      	mov	sp, r7
 801523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801523e:	4770      	bx	lr

08015240 <sensirion_shdlc_unstuff_byte>:

static uint8_t sensirion_shdlc_unstuff_byte(uint8_t data) {
 8015240:	b480      	push	{r7}
 8015242:	b083      	sub	sp, #12
 8015244:	af00      	add	r7, sp, #0
 8015246:	4603      	mov	r3, r0
 8015248:	71fb      	strb	r3, [r7, #7]
    switch (data) {
 801524a:	79fb      	ldrb	r3, [r7, #7]
 801524c:	2b5e      	cmp	r3, #94	@ 0x5e
 801524e:	d010      	beq.n	8015272 <sensirion_shdlc_unstuff_byte+0x32>
 8015250:	2b5e      	cmp	r3, #94	@ 0x5e
 8015252:	dc10      	bgt.n	8015276 <sensirion_shdlc_unstuff_byte+0x36>
 8015254:	2b5d      	cmp	r3, #93	@ 0x5d
 8015256:	d00a      	beq.n	801526e <sensirion_shdlc_unstuff_byte+0x2e>
 8015258:	2b5d      	cmp	r3, #93	@ 0x5d
 801525a:	dc0c      	bgt.n	8015276 <sensirion_shdlc_unstuff_byte+0x36>
 801525c:	2b31      	cmp	r3, #49	@ 0x31
 801525e:	d002      	beq.n	8015266 <sensirion_shdlc_unstuff_byte+0x26>
 8015260:	2b33      	cmp	r3, #51	@ 0x33
 8015262:	d002      	beq.n	801526a <sensirion_shdlc_unstuff_byte+0x2a>
 8015264:	e007      	b.n	8015276 <sensirion_shdlc_unstuff_byte+0x36>
        case 0x31:
            return 0x11;
 8015266:	2311      	movs	r3, #17
 8015268:	e006      	b.n	8015278 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x33:
            return 0x13;
 801526a:	2313      	movs	r3, #19
 801526c:	e004      	b.n	8015278 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x5d:
            return 0x7d;
 801526e:	237d      	movs	r3, #125	@ 0x7d
 8015270:	e002      	b.n	8015278 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x5e:
            return 0x7e;
 8015272:	237e      	movs	r3, #126	@ 0x7e
 8015274:	e000      	b.n	8015278 <sensirion_shdlc_unstuff_byte+0x38>
        default:
            return data;
 8015276:	79fb      	ldrb	r3, [r7, #7]
    }
}
 8015278:	4618      	mov	r0, r3
 801527a:	370c      	adds	r7, #12
 801527c:	46bd      	mov	sp, r7
 801527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015282:	4770      	bx	lr

08015284 <sensirion_shdlc_xcv>:

int16_t sensirion_shdlc_xcv(uint8_t addr, uint8_t cmd, uint8_t tx_data_len,
                            const uint8_t* tx_data, uint8_t max_rx_data_len,
                            struct sensirion_shdlc_rx_header* rx_header,
                            uint8_t* rx_data) {
 8015284:	b580      	push	{r7, lr}
 8015286:	b084      	sub	sp, #16
 8015288:	af00      	add	r7, sp, #0
 801528a:	603b      	str	r3, [r7, #0]
 801528c:	4603      	mov	r3, r0
 801528e:	71fb      	strb	r3, [r7, #7]
 8015290:	460b      	mov	r3, r1
 8015292:	71bb      	strb	r3, [r7, #6]
 8015294:	4613      	mov	r3, r2
 8015296:	717b      	strb	r3, [r7, #5]
    int16_t ret;

    ret = sensirion_shdlc_tx(addr, cmd, tx_data_len, tx_data);
 8015298:	797a      	ldrb	r2, [r7, #5]
 801529a:	79b9      	ldrb	r1, [r7, #6]
 801529c:	79f8      	ldrb	r0, [r7, #7]
 801529e:	683b      	ldr	r3, [r7, #0]
 80152a0:	f000 f818 	bl	80152d4 <sensirion_shdlc_tx>
 80152a4:	4603      	mov	r3, r0
 80152a6:	81fb      	strh	r3, [r7, #14]
    if (ret != 0)
 80152a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d002      	beq.n	80152b6 <sensirion_shdlc_xcv+0x32>
        return ret;
 80152b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80152b4:	e00a      	b.n	80152cc <sensirion_shdlc_xcv+0x48>

    sensirion_sleep_usec(RX_DELAY_US);
 80152b6:	f644 6020 	movw	r0, #20000	@ 0x4e20
 80152ba:	f000 fb07 	bl	80158cc <sensirion_sleep_usec>
    return sensirion_shdlc_rx(max_rx_data_len, rx_header, rx_data);
 80152be:	7e3b      	ldrb	r3, [r7, #24]
 80152c0:	6a3a      	ldr	r2, [r7, #32]
 80152c2:	69f9      	ldr	r1, [r7, #28]
 80152c4:	4618      	mov	r0, r3
 80152c6:	f000 f8d7 	bl	8015478 <sensirion_shdlc_rx>
 80152ca:	4603      	mov	r3, r0
}
 80152cc:	4618      	mov	r0, r3
 80152ce:	3710      	adds	r7, #16
 80152d0:	46bd      	mov	sp, r7
 80152d2:	bd80      	pop	{r7, pc}

080152d4 <sensirion_shdlc_tx>:

int16_t sensirion_shdlc_tx(uint8_t addr, uint8_t cmd, uint8_t data_len,
                           const uint8_t* data) {
 80152d4:	b590      	push	{r4, r7, lr}
 80152d6:	f5ad 7d07 	sub.w	sp, sp, #540	@ 0x21c
 80152da:	af00      	add	r7, sp, #0
 80152dc:	4604      	mov	r4, r0
 80152de:	4608      	mov	r0, r1
 80152e0:	4611      	mov	r1, r2
 80152e2:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80152e6:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 80152ea:	6013      	str	r3, [r2, #0]
 80152ec:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80152f0:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80152f4:	4622      	mov	r2, r4
 80152f6:	701a      	strb	r2, [r3, #0]
 80152f8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80152fc:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8015300:	4602      	mov	r2, r0
 8015302:	701a      	strb	r2, [r3, #0]
 8015304:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8015308:	f2a3 2313 	subw	r3, r3, #531	@ 0x213
 801530c:	460a      	mov	r2, r1
 801530e:	701a      	strb	r2, [r3, #0]
    uint16_t len = 0;
 8015310:	2300      	movs	r3, #0
 8015312:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    int16_t ret;
    uint8_t crc;
    uint8_t tx_frame_buf[SHDLC_FRAME_MAX_TX_FRAME_SIZE];

    crc = sensirion_shdlc_crc(addr + cmd, data_len, data);
 8015316:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 801531a:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 801531e:	781a      	ldrb	r2, [r3, #0]
 8015320:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8015324:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8015328:	781b      	ldrb	r3, [r3, #0]
 801532a:	4413      	add	r3, r2
 801532c:	b2d8      	uxtb	r0, r3
 801532e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8015332:	f2a3 2313 	subw	r3, r3, #531	@ 0x213
 8015336:	7819      	ldrb	r1, [r3, #0]
 8015338:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 801533c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8015340:	681a      	ldr	r2, [r3, #0]
 8015342:	f7ff ff0d 	bl	8015160 <sensirion_shdlc_crc>
 8015346:	4603      	mov	r3, r0
 8015348:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213

    tx_frame_buf[len++] = SHDLC_START;
 801534c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015350:	1c5a      	adds	r2, r3, #1
 8015352:	f8a7 2216 	strh.w	r2, [r7, #534]	@ 0x216
 8015356:	461a      	mov	r2, r3
 8015358:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 801535c:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8015360:	217e      	movs	r1, #126	@ 0x7e
 8015362:	5499      	strb	r1, [r3, r2]
    len += sensirion_shdlc_stuff_data(1, &addr, tx_frame_buf + len);
 8015364:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015368:	f107 0208 	add.w	r2, r7, #8
 801536c:	441a      	add	r2, r3
 801536e:	1dfb      	adds	r3, r7, #7
 8015370:	4619      	mov	r1, r3
 8015372:	2001      	movs	r0, #1
 8015374:	f7ff ff16 	bl	80151a4 <sensirion_shdlc_stuff_data>
 8015378:	4603      	mov	r3, r0
 801537a:	461a      	mov	r2, r3
 801537c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015380:	4413      	add	r3, r2
 8015382:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(1, &cmd, tx_frame_buf + len);
 8015386:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 801538a:	f107 0208 	add.w	r2, r7, #8
 801538e:	441a      	add	r2, r3
 8015390:	1dbb      	adds	r3, r7, #6
 8015392:	4619      	mov	r1, r3
 8015394:	2001      	movs	r0, #1
 8015396:	f7ff ff05 	bl	80151a4 <sensirion_shdlc_stuff_data>
 801539a:	4603      	mov	r3, r0
 801539c:	461a      	mov	r2, r3
 801539e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80153a2:	4413      	add	r3, r2
 80153a4:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(1, &data_len, tx_frame_buf + len);
 80153a8:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80153ac:	f107 0208 	add.w	r2, r7, #8
 80153b0:	441a      	add	r2, r3
 80153b2:	1d7b      	adds	r3, r7, #5
 80153b4:	4619      	mov	r1, r3
 80153b6:	2001      	movs	r0, #1
 80153b8:	f7ff fef4 	bl	80151a4 <sensirion_shdlc_stuff_data>
 80153bc:	4603      	mov	r3, r0
 80153be:	461a      	mov	r2, r3
 80153c0:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80153c4:	4413      	add	r3, r2
 80153c6:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(data_len, data, tx_frame_buf + len);
 80153ca:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80153ce:	f2a3 2313 	subw	r3, r3, #531	@ 0x213
 80153d2:	7818      	ldrb	r0, [r3, #0]
 80153d4:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80153d8:	f107 0208 	add.w	r2, r7, #8
 80153dc:	441a      	add	r2, r3
 80153de:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80153e2:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80153e6:	6819      	ldr	r1, [r3, #0]
 80153e8:	f7ff fedc 	bl	80151a4 <sensirion_shdlc_stuff_data>
 80153ec:	4603      	mov	r3, r0
 80153ee:	461a      	mov	r2, r3
 80153f0:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80153f4:	4413      	add	r3, r2
 80153f6:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(1, &crc, tx_frame_buf + len);
 80153fa:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80153fe:	f107 0208 	add.w	r2, r7, #8
 8015402:	441a      	add	r2, r3
 8015404:	f207 2313 	addw	r3, r7, #531	@ 0x213
 8015408:	4619      	mov	r1, r3
 801540a:	2001      	movs	r0, #1
 801540c:	f7ff feca 	bl	80151a4 <sensirion_shdlc_stuff_data>
 8015410:	4603      	mov	r3, r0
 8015412:	461a      	mov	r2, r3
 8015414:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015418:	4413      	add	r3, r2
 801541a:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    tx_frame_buf[len++] = SHDLC_STOP;
 801541e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015422:	1c5a      	adds	r2, r3, #1
 8015424:	f8a7 2216 	strh.w	r2, [r7, #534]	@ 0x216
 8015428:	461a      	mov	r2, r3
 801542a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 801542e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8015432:	217e      	movs	r1, #126	@ 0x7e
 8015434:	5499      	strb	r1, [r3, r2]

    ret = sensirion_uart_tx(len, tx_frame_buf);
 8015436:	f107 0208 	add.w	r2, r7, #8
 801543a:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 801543e:	4611      	mov	r1, r2
 8015440:	4618      	mov	r0, r3
 8015442:	f000 f9db 	bl	80157fc <sensirion_uart_tx>
 8015446:	4603      	mov	r3, r0
 8015448:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214
    if (ret < 0)
 801544c:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	@ 0x214
 8015450:	2b00      	cmp	r3, #0
 8015452:	da02      	bge.n	801545a <sensirion_shdlc_tx+0x186>
        return ret;
 8015454:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	@ 0x214
 8015458:	e009      	b.n	801546e <sensirion_shdlc_tx+0x19a>
    if (ret != len)
 801545a:	f9b7 2214 	ldrsh.w	r2, [r7, #532]	@ 0x214
 801545e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015462:	429a      	cmp	r2, r3
 8015464:	d002      	beq.n	801546c <sensirion_shdlc_tx+0x198>
        return SENSIRION_SHDLC_ERR_TX_INCOMPLETE;
 8015466:	f06f 0305 	mvn.w	r3, #5
 801546a:	e000      	b.n	801546e <sensirion_shdlc_tx+0x19a>
    return 0;
 801546c:	2300      	movs	r3, #0
}
 801546e:	4618      	mov	r0, r3
 8015470:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 8015474:	46bd      	mov	sp, r7
 8015476:	bd90      	pop	{r4, r7, pc}

08015478 <sensirion_shdlc_rx>:

int16_t sensirion_shdlc_rx(uint8_t max_data_len,
                           struct sensirion_shdlc_rx_header* rxh,
                           uint8_t* data) {
 8015478:	b590      	push	{r4, r7, lr}
 801547a:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 801547e:	af00      	add	r7, sp, #0
 8015480:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015484:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8015488:	6019      	str	r1, [r3, #0]
 801548a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801548e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8015492:	601a      	str	r2, [r3, #0]
 8015494:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015498:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 801549c:	4602      	mov	r2, r0
 801549e:	701a      	strb	r2, [r3, #0]
    int16_t len;
    uint16_t i;
    uint8_t rx_frame[SHDLC_FRAME_MAX_RX_FRAME_SIZE];
    uint8_t* rx_header = (uint8_t*)rxh;
 80154a0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80154a4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    uint8_t j;
    uint8_t crc;
    uint8_t unstuff_next;

    len = sensirion_uart_rx(2 + (5 + (uint16_t)max_data_len) * 2, rx_frame);
 80154ae:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80154b2:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 80154b6:	781b      	ldrb	r3, [r3, #0]
 80154b8:	3306      	adds	r3, #6
 80154ba:	b29b      	uxth	r3, r3
 80154bc:	005b      	lsls	r3, r3, #1
 80154be:	b29b      	uxth	r3, r3
 80154c0:	f107 0210 	add.w	r2, r7, #16
 80154c4:	4611      	mov	r1, r2
 80154c6:	4618      	mov	r0, r3
 80154c8:	f000 f9d2 	bl	8015870 <sensirion_uart_rx>
 80154cc:	4603      	mov	r3, r0
 80154ce:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a


//      printf("First byte is : %02X \r\n", RX_Data[0]);
//      printf("Total %d bytes received \r\n", len);

      if (len < 1 || RX_Data[0] != SHDLC_START)
 80154d2:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	dd03      	ble.n	80154e2 <sensirion_shdlc_rx+0x6a>
 80154da:	4ba0      	ldr	r3, [pc, #640]	@ (801575c <sensirion_shdlc_rx+0x2e4>)
 80154dc:	781b      	ldrb	r3, [r3, #0]
 80154de:	2b7e      	cmp	r3, #126	@ 0x7e
 80154e0:	d002      	beq.n	80154e8 <sensirion_shdlc_rx+0x70>
        return SENSIRION_SHDLC_ERR_MISSING_START;
 80154e2:	f06f 0301 	mvn.w	r3, #1
 80154e6:	e133      	b.n	8015750 <sensirion_shdlc_rx+0x2d8>

    for (unstuff_next = 0, i = 1, j = 0; j < sizeof(*rxh) && i < len - 2; ++i) {
 80154e8:	2300      	movs	r3, #0
 80154ea:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 80154ee:	2301      	movs	r3, #1
 80154f0:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
 80154f4:	2300      	movs	r3, #0
 80154f6:	f887 3225 	strb.w	r3, [r7, #549]	@ 0x225
 80154fa:	e03a      	b.n	8015572 <sensirion_shdlc_rx+0xfa>
        if (unstuff_next) {
 80154fc:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8015500:	2b00      	cmp	r3, #0
 8015502:	d015      	beq.n	8015530 <sensirion_shdlc_rx+0xb8>
            rx_header[j++] = sensirion_shdlc_unstuff_byte(RX_Data[i]);
 8015504:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8015508:	4a94      	ldr	r2, [pc, #592]	@ (801575c <sensirion_shdlc_rx+0x2e4>)
 801550a:	5cd2      	ldrb	r2, [r2, r3]
 801550c:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 8015510:	1c59      	adds	r1, r3, #1
 8015512:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 8015516:	4619      	mov	r1, r3
 8015518:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 801551c:	185c      	adds	r4, r3, r1
 801551e:	4610      	mov	r0, r2
 8015520:	f7ff fe8e 	bl	8015240 <sensirion_shdlc_unstuff_byte>
 8015524:	4603      	mov	r3, r0
 8015526:	7023      	strb	r3, [r4, #0]
            unstuff_next = 0;
 8015528:	2300      	movs	r3, #0
 801552a:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 801552e:	e01b      	b.n	8015568 <sensirion_shdlc_rx+0xf0>
        } else {
            unstuff_next = sensirion_shdlc_check_unstuff(RX_Data[i]);
 8015530:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8015534:	4a89      	ldr	r2, [pc, #548]	@ (801575c <sensirion_shdlc_rx+0x2e4>)
 8015536:	5cd3      	ldrb	r3, [r2, r3]
 8015538:	4618      	mov	r0, r3
 801553a:	f7ff fe70 	bl	801521e <sensirion_shdlc_check_unstuff>
 801553e:	4603      	mov	r3, r0
 8015540:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
            if (!unstuff_next)
 8015544:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8015548:	2b00      	cmp	r3, #0
 801554a:	d10d      	bne.n	8015568 <sensirion_shdlc_rx+0xf0>
                rx_header[j++] = RX_Data[i];
 801554c:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 8015550:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 8015554:	1c59      	adds	r1, r3, #1
 8015556:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 801555a:	4619      	mov	r1, r3
 801555c:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8015560:	440b      	add	r3, r1
 8015562:	497e      	ldr	r1, [pc, #504]	@ (801575c <sensirion_shdlc_rx+0x2e4>)
 8015564:	5c8a      	ldrb	r2, [r1, r2]
 8015566:	701a      	strb	r2, [r3, #0]
    for (unstuff_next = 0, i = 1, j = 0; j < sizeof(*rxh) && i < len - 2; ++i) {
 8015568:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 801556c:	3301      	adds	r3, #1
 801556e:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
 8015572:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 8015576:	2b03      	cmp	r3, #3
 8015578:	d806      	bhi.n	8015588 <sensirion_shdlc_rx+0x110>
 801557a:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 801557e:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 8015582:	3b02      	subs	r3, #2
 8015584:	429a      	cmp	r2, r3
 8015586:	dbb9      	blt.n	80154fc <sensirion_shdlc_rx+0x84>
        }
    }
    if (j != sizeof(*rxh) || unstuff_next)
 8015588:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 801558c:	2b04      	cmp	r3, #4
 801558e:	d103      	bne.n	8015598 <sensirion_shdlc_rx+0x120>
 8015590:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8015594:	2b00      	cmp	r3, #0
 8015596:	d002      	beq.n	801559e <sensirion_shdlc_rx+0x126>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 8015598:	f06f 0304 	mvn.w	r3, #4
 801559c:	e0d8      	b.n	8015750 <sensirion_shdlc_rx+0x2d8>

    if (max_data_len < rxh->data_len)
 801559e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80155a2:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80155a6:	681b      	ldr	r3, [r3, #0]
 80155a8:	78db      	ldrb	r3, [r3, #3]
 80155aa:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 80155ae:	f2a2 2219 	subw	r2, r2, #537	@ 0x219
 80155b2:	7812      	ldrb	r2, [r2, #0]
 80155b4:	429a      	cmp	r2, r3
 80155b6:	d202      	bcs.n	80155be <sensirion_shdlc_rx+0x146>
        return SENSIRION_SHDLC_ERR_FRAME_TOO_LONG; /* more data than expected */
 80155b8:	f06f 0306 	mvn.w	r3, #6
 80155bc:	e0c8      	b.n	8015750 <sensirion_shdlc_rx+0x2d8>

    for (unstuff_next = 0, j = 0; j < rxh->data_len && i < len - 2; ++i) {
 80155be:	2300      	movs	r3, #0
 80155c0:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 80155c4:	2300      	movs	r3, #0
 80155c6:	f887 3225 	strb.w	r3, [r7, #549]	@ 0x225
 80155ca:	e040      	b.n	801564e <sensirion_shdlc_rx+0x1d6>
        if (unstuff_next) {
 80155cc:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d018      	beq.n	8015606 <sensirion_shdlc_rx+0x18e>
            data[j++] = sensirion_shdlc_unstuff_byte(RX_Data[i]);
 80155d4:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 80155d8:	4a60      	ldr	r2, [pc, #384]	@ (801575c <sensirion_shdlc_rx+0x2e4>)
 80155da:	5cd2      	ldrb	r2, [r2, r3]
 80155dc:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 80155e0:	1c59      	adds	r1, r3, #1
 80155e2:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 80155e6:	4619      	mov	r1, r3
 80155e8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80155ec:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	185c      	adds	r4, r3, r1
 80155f4:	4610      	mov	r0, r2
 80155f6:	f7ff fe23 	bl	8015240 <sensirion_shdlc_unstuff_byte>
 80155fa:	4603      	mov	r3, r0
 80155fc:	7023      	strb	r3, [r4, #0]
            unstuff_next = 0;
 80155fe:	2300      	movs	r3, #0
 8015600:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 8015604:	e01e      	b.n	8015644 <sensirion_shdlc_rx+0x1cc>
        } else {
            unstuff_next = sensirion_shdlc_check_unstuff(RX_Data[i]);
 8015606:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 801560a:	4a54      	ldr	r2, [pc, #336]	@ (801575c <sensirion_shdlc_rx+0x2e4>)
 801560c:	5cd3      	ldrb	r3, [r2, r3]
 801560e:	4618      	mov	r0, r3
 8015610:	f7ff fe05 	bl	801521e <sensirion_shdlc_check_unstuff>
 8015614:	4603      	mov	r3, r0
 8015616:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
            if (!unstuff_next)
 801561a:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 801561e:	2b00      	cmp	r3, #0
 8015620:	d110      	bne.n	8015644 <sensirion_shdlc_rx+0x1cc>
                data[j++] = RX_Data[i];
 8015622:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 8015626:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 801562a:	1c59      	adds	r1, r3, #1
 801562c:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 8015630:	4619      	mov	r1, r3
 8015632:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015636:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	440b      	add	r3, r1
 801563e:	4947      	ldr	r1, [pc, #284]	@ (801575c <sensirion_shdlc_rx+0x2e4>)
 8015640:	5c8a      	ldrb	r2, [r1, r2]
 8015642:	701a      	strb	r2, [r3, #0]
    for (unstuff_next = 0, j = 0; j < rxh->data_len && i < len - 2; ++i) {
 8015644:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8015648:	3301      	adds	r3, #1
 801564a:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
 801564e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015652:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	78db      	ldrb	r3, [r3, #3]
 801565a:	f897 2225 	ldrb.w	r2, [r7, #549]	@ 0x225
 801565e:	429a      	cmp	r2, r3
 8015660:	d206      	bcs.n	8015670 <sensirion_shdlc_rx+0x1f8>
 8015662:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 8015666:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 801566a:	3b02      	subs	r3, #2
 801566c:	429a      	cmp	r2, r3
 801566e:	dbad      	blt.n	80155cc <sensirion_shdlc_rx+0x154>
        }
    }

    if (unstuff_next)
 8015670:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8015674:	2b00      	cmp	r3, #0
 8015676:	d002      	beq.n	801567e <sensirion_shdlc_rx+0x206>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 8015678:	f06f 0304 	mvn.w	r3, #4
 801567c:	e068      	b.n	8015750 <sensirion_shdlc_rx+0x2d8>

    if (j < rxh->data_len)
 801567e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015682:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	78db      	ldrb	r3, [r3, #3]
 801568a:	f897 2225 	ldrb.w	r2, [r7, #549]	@ 0x225
 801568e:	429a      	cmp	r2, r3
 8015690:	d202      	bcs.n	8015698 <sensirion_shdlc_rx+0x220>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 8015692:	f06f 0304 	mvn.w	r3, #4
 8015696:	e05b      	b.n	8015750 <sensirion_shdlc_rx+0x2d8>

    crc = RX_Data[i++];
 8015698:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 801569c:	1c5a      	adds	r2, r3, #1
 801569e:	f8a7 2226 	strh.w	r2, [r7, #550]	@ 0x226
 80156a2:	461a      	mov	r2, r3
 80156a4:	4b2d      	ldr	r3, [pc, #180]	@ (801575c <sensirion_shdlc_rx+0x2e4>)
 80156a6:	5c9b      	ldrb	r3, [r3, r2]
 80156a8:	f887 3224 	strb.w	r3, [r7, #548]	@ 0x224
    if (sensirion_shdlc_check_unstuff(crc))
 80156ac:	f897 3224 	ldrb.w	r3, [r7, #548]	@ 0x224
 80156b0:	4618      	mov	r0, r3
 80156b2:	f7ff fdb4 	bl	801521e <sensirion_shdlc_check_unstuff>
 80156b6:	4603      	mov	r3, r0
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d00d      	beq.n	80156d8 <sensirion_shdlc_rx+0x260>
        crc = sensirion_shdlc_unstuff_byte(RX_Data[i++]);
 80156bc:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 80156c0:	1c5a      	adds	r2, r3, #1
 80156c2:	f8a7 2226 	strh.w	r2, [r7, #550]	@ 0x226
 80156c6:	461a      	mov	r2, r3
 80156c8:	4b24      	ldr	r3, [pc, #144]	@ (801575c <sensirion_shdlc_rx+0x2e4>)
 80156ca:	5c9b      	ldrb	r3, [r3, r2]
 80156cc:	4618      	mov	r0, r3
 80156ce:	f7ff fdb7 	bl	8015240 <sensirion_shdlc_unstuff_byte>
 80156d2:	4603      	mov	r3, r0
 80156d4:	f887 3224 	strb.w	r3, [r7, #548]	@ 0x224

    if (sensirion_shdlc_crc(rxh->addr + rxh->cmd + rxh->state, rxh->data_len,
 80156d8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80156dc:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80156e0:	681b      	ldr	r3, [r3, #0]
 80156e2:	781a      	ldrb	r2, [r3, #0]
 80156e4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80156e8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80156ec:	681b      	ldr	r3, [r3, #0]
 80156ee:	785b      	ldrb	r3, [r3, #1]
 80156f0:	4413      	add	r3, r2
 80156f2:	b2da      	uxtb	r2, r3
 80156f4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80156f8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	789b      	ldrb	r3, [r3, #2]
 8015700:	4413      	add	r3, r2
 8015702:	b2d8      	uxtb	r0, r3
 8015704:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015708:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801570c:	681b      	ldr	r3, [r3, #0]
 801570e:	78d9      	ldrb	r1, [r3, #3]
 8015710:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015714:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8015718:	681a      	ldr	r2, [r3, #0]
 801571a:	f7ff fd21 	bl	8015160 <sensirion_shdlc_crc>
 801571e:	4603      	mov	r3, r0
 8015720:	461a      	mov	r2, r3
 8015722:	f897 3224 	ldrb.w	r3, [r7, #548]	@ 0x224
 8015726:	4293      	cmp	r3, r2
 8015728:	d002      	beq.n	8015730 <sensirion_shdlc_rx+0x2b8>
                            data) != crc)
        return SENSIRION_SHDLC_ERR_CRC_MISMATCH;
 801572a:	f06f 0303 	mvn.w	r3, #3
 801572e:	e00f      	b.n	8015750 <sensirion_shdlc_rx+0x2d8>

    if (i >= len || RX_Data[i] != SHDLC_STOP)
 8015730:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 8015734:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 8015738:	429a      	cmp	r2, r3
 801573a:	da05      	bge.n	8015748 <sensirion_shdlc_rx+0x2d0>
 801573c:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8015740:	4a06      	ldr	r2, [pc, #24]	@ (801575c <sensirion_shdlc_rx+0x2e4>)
 8015742:	5cd3      	ldrb	r3, [r2, r3]
 8015744:	2b7e      	cmp	r3, #126	@ 0x7e
 8015746:	d002      	beq.n	801574e <sensirion_shdlc_rx+0x2d6>
        return SENSIRION_SHDLC_ERR_MISSING_STOP;
 8015748:	f06f 0302 	mvn.w	r3, #2
 801574c:	e000      	b.n	8015750 <sensirion_shdlc_rx+0x2d8>

    return 0;
 801574e:	2300      	movs	r3, #0
}
 8015750:	4618      	mov	r0, r3
 8015752:	f507 770b 	add.w	r7, r7, #556	@ 0x22c
 8015756:	46bd      	mov	sp, r7
 8015758:	bd90      	pop	{r4, r7, pc}
 801575a:	bf00      	nop
 801575c:	2000158c 	.word	0x2000158c

08015760 <sensirion_uart_open>:
/**
 * sensirion_uart_open() - initialize UART
 *
 * Return:      0 on success, an error code otherwise
 */
int16_t sensirion_uart_open() {
 8015760:	b580      	push	{r7, lr}
 8015762:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart2);
 8015764:	4819      	ldr	r0, [pc, #100]	@ (80157cc <sensirion_uart_open+0x6c>)
 8015766:	f7f6 fda1 	bl	800c2ac <HAL_UART_DeInit>
	  huart2.Instance = USART2;
 801576a:	4b18      	ldr	r3, [pc, #96]	@ (80157cc <sensirion_uart_open+0x6c>)
 801576c:	4a18      	ldr	r2, [pc, #96]	@ (80157d0 <sensirion_uart_open+0x70>)
 801576e:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 8015770:	4b16      	ldr	r3, [pc, #88]	@ (80157cc <sensirion_uart_open+0x6c>)
 8015772:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8015776:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8015778:	4b14      	ldr	r3, [pc, #80]	@ (80157cc <sensirion_uart_open+0x6c>)
 801577a:	2200      	movs	r2, #0
 801577c:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 801577e:	4b13      	ldr	r3, [pc, #76]	@ (80157cc <sensirion_uart_open+0x6c>)
 8015780:	2200      	movs	r2, #0
 8015782:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8015784:	4b11      	ldr	r3, [pc, #68]	@ (80157cc <sensirion_uart_open+0x6c>)
 8015786:	2200      	movs	r2, #0
 8015788:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 801578a:	4b10      	ldr	r3, [pc, #64]	@ (80157cc <sensirion_uart_open+0x6c>)
 801578c:	220c      	movs	r2, #12
 801578e:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8015790:	4b0e      	ldr	r3, [pc, #56]	@ (80157cc <sensirion_uart_open+0x6c>)
 8015792:	2200      	movs	r2, #0
 8015794:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8015796:	4b0d      	ldr	r3, [pc, #52]	@ (80157cc <sensirion_uart_open+0x6c>)
 8015798:	2200      	movs	r2, #0
 801579a:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 801579c:	480b      	ldr	r0, [pc, #44]	@ (80157cc <sensirion_uart_open+0x6c>)
 801579e:	f7f6 fd35 	bl	800c20c <HAL_UART_Init>
 80157a2:	4603      	mov	r3, r0
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d001      	beq.n	80157ac <sensirion_uart_open+0x4c>
	  {
	    Error_Handler();
 80157a8:	f7ed ffc8 	bl	800373c <Error_Handler>
	  }

		HAL_UARTEx_ReceiveToIdle_IT(&huart2, RX_Data, 522);
 80157ac:	f240 220a 	movw	r2, #522	@ 0x20a
 80157b0:	4908      	ldr	r1, [pc, #32]	@ (80157d4 <sensirion_uart_open+0x74>)
 80157b2:	4806      	ldr	r0, [pc, #24]	@ (80157cc <sensirion_uart_open+0x6c>)
 80157b4:	f7f6 fe5c 	bl	800c470 <HAL_UARTEx_ReceiveToIdle_IT>
		//HAL_UART_Receive_IT(&huart2, &rx_Data, 1);
		 rx_len=0;
 80157b8:	4b07      	ldr	r3, [pc, #28]	@ (80157d8 <sensirion_uart_open+0x78>)
 80157ba:	2200      	movs	r2, #0
 80157bc:	801a      	strh	r2, [r3, #0]
		rx_incre = 0;
 80157be:	4b07      	ldr	r3, [pc, #28]	@ (80157dc <sensirion_uart_open+0x7c>)
 80157c0:	2200      	movs	r2, #0
 80157c2:	801a      	strh	r2, [r3, #0]
		//HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RX_Data, 522);
    return 0;
 80157c4:	2300      	movs	r3, #0
}
 80157c6:	4618      	mov	r0, r3
 80157c8:	bd80      	pop	{r7, pc}
 80157ca:	bf00      	nop
 80157cc:	20001abc 	.word	0x20001abc
 80157d0:	40004400 	.word	0x40004400
 80157d4:	2000158c 	.word	0x2000158c
 80157d8:	20001b60 	.word	0x20001b60
 80157dc:	20001b62 	.word	0x20001b62

080157e0 <sensirion_uart_close>:
/**
 * sensirion_uart_close() - release UART resources
 *
 * Return:      0 on success, an error code otherwise
 */
int16_t sensirion_uart_close() {
 80157e0:	b580      	push	{r7, lr}
 80157e2:	af00      	add	r7, sp, #0
    // TODO: implement
	HAL_UART_DeInit(&huart2);
 80157e4:	4804      	ldr	r0, [pc, #16]	@ (80157f8 <sensirion_uart_close+0x18>)
 80157e6:	f7f6 fd61 	bl	800c2ac <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart2);
 80157ea:	4803      	ldr	r0, [pc, #12]	@ (80157f8 <sensirion_uart_close+0x18>)
 80157ec:	f7ee fac8 	bl	8003d80 <HAL_UART_MspDeInit>
    return 0;
 80157f0:	2300      	movs	r3, #0
}
 80157f2:	4618      	mov	r0, r3
 80157f4:	bd80      	pop	{r7, pc}
 80157f6:	bf00      	nop
 80157f8:	20001abc 	.word	0x20001abc

080157fc <sensirion_uart_tx>:
 *
 * @data_len:   number of bytes to send
 * @data:       data to send
 * Return:      Number of bytes sent or a negative error code
 */
int16_t sensirion_uart_tx(uint16_t data_len, const uint8_t* data) {
 80157fc:	b580      	push	{r7, lr}
 80157fe:	b082      	sub	sp, #8
 8015800:	af00      	add	r7, sp, #0
 8015802:	4603      	mov	r3, r0
 8015804:	6039      	str	r1, [r7, #0]
 8015806:	80fb      	strh	r3, [r7, #6]
    // TODO: implement
	if(HAL_UART_Transmit(&huart2, data, data_len, HAL_MAX_DELAY) == HAL_OK)
 8015808:	88fa      	ldrh	r2, [r7, #6]
 801580a:	f04f 33ff 	mov.w	r3, #4294967295
 801580e:	6839      	ldr	r1, [r7, #0]
 8015810:	4807      	ldr	r0, [pc, #28]	@ (8015830 <sensirion_uart_tx+0x34>)
 8015812:	f7f6 fd7d 	bl	800c310 <HAL_UART_Transmit>
 8015816:	4603      	mov	r3, r0
 8015818:	2b00      	cmp	r3, #0
 801581a:	d102      	bne.n	8015822 <sensirion_uart_tx+0x26>
		{
			return data_len;
 801581c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015820:	e001      	b.n	8015826 <sensirion_uart_tx+0x2a>
		}
		else
		{
			return -1;
 8015822:	f04f 33ff 	mov.w	r3, #4294967295

		}

	return data_len;
}
 8015826:	4618      	mov	r0, r3
 8015828:	3708      	adds	r7, #8
 801582a:	46bd      	mov	sp, r7
 801582c:	bd80      	pop	{r7, pc}
 801582e:	bf00      	nop
 8015830:	20001abc 	.word	0x20001abc

08015834 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8015834:	b580      	push	{r7, lr}
 8015836:	b082      	sub	sp, #8
 8015838:	af00      	add	r7, sp, #0
 801583a:	6078      	str	r0, [r7, #4]
 801583c:	460b      	mov	r3, r1
 801583e:	807b      	strh	r3, [r7, #2]

	rx_len = Size;
 8015840:	4a07      	ldr	r2, [pc, #28]	@ (8015860 <HAL_UARTEx_RxEventCallback+0x2c>)
 8015842:	887b      	ldrh	r3, [r7, #2]
 8015844:	8013      	strh	r3, [r2, #0]
	rx_Wait = 1;
 8015846:	4b07      	ldr	r3, [pc, #28]	@ (8015864 <HAL_UARTEx_RxEventCallback+0x30>)
 8015848:	2201      	movs	r2, #1
 801584a:	701a      	strb	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_IT(&huart2,RX_Data, 522);
 801584c:	f240 220a 	movw	r2, #522	@ 0x20a
 8015850:	4905      	ldr	r1, [pc, #20]	@ (8015868 <HAL_UARTEx_RxEventCallback+0x34>)
 8015852:	4806      	ldr	r0, [pc, #24]	@ (801586c <HAL_UARTEx_RxEventCallback+0x38>)
 8015854:	f7f6 fe0c 	bl	800c470 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8015858:	bf00      	nop
 801585a:	3708      	adds	r7, #8
 801585c:	46bd      	mov	sp, r7
 801585e:	bd80      	pop	{r7, pc}
 8015860:	20001b60 	.word	0x20001b60
 8015864:	20001b64 	.word	0x20001b64
 8015868:	2000158c 	.word	0x2000158c
 801586c:	20001abc 	.word	0x20001abc

08015870 <sensirion_uart_rx>:
 *
 * @data_len:   max number of bytes to receive
 * @data:       Memory where received data is stored
 * Return:      Number of bytes received or a negative error code
 */
int16_t sensirion_uart_rx(uint16_t max_data_len, uint8_t* data) {
 8015870:	b580      	push	{r7, lr}
 8015872:	b084      	sub	sp, #16
 8015874:	af00      	add	r7, sp, #0
 8015876:	4603      	mov	r3, r0
 8015878:	6039      	str	r1, [r7, #0]
 801587a:	80fb      	strh	r3, [r7, #6]
    // TODO: implement
uint32_t counter = 0;
 801587c:	2300      	movs	r3, #0
 801587e:	60fb      	str	r3, [r7, #12]

//we give 200ms of delay
		  while(!rx_Wait && counter <= 2)
 8015880:	e005      	b.n	801588e <sensirion_uart_rx+0x1e>
		  {
			  counter++;
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	3301      	adds	r3, #1
 8015886:	60fb      	str	r3, [r7, #12]
			  HAL_Delay(10);
 8015888:	200a      	movs	r0, #10
 801588a:	f7ee fcad 	bl	80041e8 <HAL_Delay>
		  while(!rx_Wait && counter <= 2)
 801588e:	4b0b      	ldr	r3, [pc, #44]	@ (80158bc <sensirion_uart_rx+0x4c>)
 8015890:	781b      	ldrb	r3, [r3, #0]
 8015892:	2b00      	cmp	r3, #0
 8015894:	d102      	bne.n	801589c <sensirion_uart_rx+0x2c>
 8015896:	68fb      	ldr	r3, [r7, #12]
 8015898:	2b02      	cmp	r3, #2
 801589a:	d9f2      	bls.n	8015882 <sensirion_uart_rx+0x12>

		  }
		    rx_Wait = 0;
 801589c:	4b07      	ldr	r3, [pc, #28]	@ (80158bc <sensirion_uart_rx+0x4c>)
 801589e:	2200      	movs	r2, #0
 80158a0:	701a      	strb	r2, [r3, #0]

//		    if(counter > 3)
//		    {
//		    	sensirion_uart_open();
//		    }
		    len = 0;
 80158a2:	4b07      	ldr	r3, [pc, #28]	@ (80158c0 <sensirion_uart_rx+0x50>)
 80158a4:	2200      	movs	r2, #0
 80158a6:	801a      	strh	r2, [r3, #0]
		    rx_incre = 0;
 80158a8:	4b06      	ldr	r3, [pc, #24]	@ (80158c4 <sensirion_uart_rx+0x54>)
 80158aa:	2200      	movs	r2, #0
 80158ac:	801a      	strh	r2, [r3, #0]
	    return rx_len;
 80158ae:	4b06      	ldr	r3, [pc, #24]	@ (80158c8 <sensirion_uart_rx+0x58>)
 80158b0:	881b      	ldrh	r3, [r3, #0]
 80158b2:	b21b      	sxth	r3, r3
	//return i;
}
 80158b4:	4618      	mov	r0, r3
 80158b6:	3710      	adds	r7, #16
 80158b8:	46bd      	mov	sp, r7
 80158ba:	bd80      	pop	{r7, pc}
 80158bc:	20001b64 	.word	0x20001b64
 80158c0:	20001b66 	.word	0x20001b66
 80158c4:	20001b62 	.word	0x20001b62
 80158c8:	20001b60 	.word	0x20001b60

080158cc <sensirion_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 80158cc:	b580      	push	{r7, lr}
 80158ce:	b082      	sub	sp, #8
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	6078      	str	r0, [r7, #4]
    // TODO: implement
	useconds = (useconds/1000);
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	4a06      	ldr	r2, [pc, #24]	@ (80158f0 <sensirion_sleep_usec+0x24>)
 80158d8:	fba2 2303 	umull	r2, r3, r2, r3
 80158dc:	099b      	lsrs	r3, r3, #6
 80158de:	607b      	str	r3, [r7, #4]
	HAL_Delay(useconds);
 80158e0:	6878      	ldr	r0, [r7, #4]
 80158e2:	f7ee fc81 	bl	80041e8 <HAL_Delay>
}
 80158e6:	bf00      	nop
 80158e8:	3708      	adds	r7, #8
 80158ea:	46bd      	mov	sp, r7
 80158ec:	bd80      	pop	{r7, pc}
 80158ee:	bf00      	nop
 80158f0:	10624dd3 	.word	0x10624dd3

080158f4 <sps30_get_serial>:
    int16_t ret = sps30_get_serial(serial);

    return ret;
}

int16_t sps30_get_serial(char* serial) {
 80158f4:	b580      	push	{r7, lr}
 80158f6:	b08a      	sub	sp, #40	@ 0x28
 80158f8:	af04      	add	r7, sp, #16
 80158fa:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    uint8_t param_buf[] = SPS30_CMD_DEV_INFO_SUBCMD_GET_SERIAL;
 80158fc:	2303      	movs	r3, #3
 80158fe:	733b      	strb	r3, [r7, #12]
    int16_t ret;

    ret = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_DEV_INFO, sizeof(param_buf),
 8015900:	f107 020c 	add.w	r2, r7, #12
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	9302      	str	r3, [sp, #8]
 8015908:	f107 0310 	add.w	r3, r7, #16
 801590c:	9301      	str	r3, [sp, #4]
 801590e:	2320      	movs	r3, #32
 8015910:	9300      	str	r3, [sp, #0]
 8015912:	4613      	mov	r3, r2
 8015914:	2201      	movs	r2, #1
 8015916:	21d0      	movs	r1, #208	@ 0xd0
 8015918:	2000      	movs	r0, #0
 801591a:	f7ff fcb3 	bl	8015284 <sensirion_shdlc_xcv>
 801591e:	4603      	mov	r3, r0
 8015920:	82fb      	strh	r3, [r7, #22]
                              param_buf, SPS30_MAX_SERIAL_LEN, &header,
                              (uint8_t*)serial);
    if (ret < 0)
 8015922:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015926:	2b00      	cmp	r3, #0
 8015928:	da02      	bge.n	8015930 <sps30_get_serial+0x3c>
        return ret;
 801592a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801592e:	e009      	b.n	8015944 <sps30_get_serial+0x50>

    if (header.state)
 8015930:	7cbb      	ldrb	r3, [r7, #18]
 8015932:	2b00      	cmp	r3, #0
 8015934:	d005      	beq.n	8015942 <sps30_get_serial+0x4e>
        return SPS30_ERR_STATE(header.state);
 8015936:	7cbb      	ldrb	r3, [r7, #18]
 8015938:	b21b      	sxth	r3, r3
 801593a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801593e:	b21b      	sxth	r3, r3
 8015940:	e000      	b.n	8015944 <sps30_get_serial+0x50>

    return 0;
 8015942:	2300      	movs	r3, #0
}
 8015944:	4618      	mov	r0, r3
 8015946:	3718      	adds	r7, #24
 8015948:	46bd      	mov	sp, r7
 801594a:	bd80      	pop	{r7, pc}

0801594c <sps30_start_measurement>:

int16_t sps30_start_measurement(void) {
 801594c:	b580      	push	{r7, lr}
 801594e:	b086      	sub	sp, #24
 8015950:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;
    uint8_t param_buf[] = SPS30_SUBCMD_MEASUREMENT_START;
 8015952:	f240 3301 	movw	r3, #769	@ 0x301
 8015956:	803b      	strh	r3, [r7, #0]

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_START_MEASUREMENT,
 8015958:	463a      	mov	r2, r7
 801595a:	2300      	movs	r3, #0
 801595c:	9302      	str	r3, [sp, #8]
 801595e:	1d3b      	adds	r3, r7, #4
 8015960:	9301      	str	r3, [sp, #4]
 8015962:	2300      	movs	r3, #0
 8015964:	9300      	str	r3, [sp, #0]
 8015966:	4613      	mov	r3, r2
 8015968:	2202      	movs	r2, #2
 801596a:	2100      	movs	r1, #0
 801596c:	2000      	movs	r0, #0
 801596e:	f7ff fc89 	bl	8015284 <sensirion_shdlc_xcv>
 8015972:	4603      	mov	r3, r0
                               sizeof(param_buf), param_buf, 0, &header,
                               (uint8_t*)NULL);
}
 8015974:	4618      	mov	r0, r3
 8015976:	3708      	adds	r7, #8
 8015978:	46bd      	mov	sp, r7
 801597a:	bd80      	pop	{r7, pc}

0801597c <sps30_read_measurement>:

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_STOP_MEASUREMENT, 0,
                               (uint8_t*)NULL, 0, &header, (uint8_t*)NULL);
}

int16_t sps30_read_measurement(struct sps30_measurement* measurement) {
 801597c:	b580      	push	{r7, lr}
 801597e:	b092      	sub	sp, #72	@ 0x48
 8015980:	af04      	add	r7, sp, #16
 8015982:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    int16_t error;
    uint8_t data[10][4];

    error = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_READ_MEASUREMENT, 0,
 8015984:	f107 0308 	add.w	r3, r7, #8
 8015988:	9302      	str	r3, [sp, #8]
 801598a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801598e:	9301      	str	r3, [sp, #4]
 8015990:	2328      	movs	r3, #40	@ 0x28
 8015992:	9300      	str	r3, [sp, #0]
 8015994:	2300      	movs	r3, #0
 8015996:	2200      	movs	r2, #0
 8015998:	2103      	movs	r1, #3
 801599a:	2000      	movs	r0, #0
 801599c:	f7ff fc72 	bl	8015284 <sensirion_shdlc_xcv>
 80159a0:	4603      	mov	r3, r0
 80159a2:	86fb      	strh	r3, [r7, #54]	@ 0x36
                                (uint8_t*)NULL, sizeof(data), &header,
                                (uint8_t*)data);
    if (error) {
 80159a4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d002      	beq.n	80159b2 <sps30_read_measurement+0x36>
        return error;
 80159ac:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80159b0:	e07f      	b.n	8015ab2 <sps30_read_measurement+0x136>
    }

    if (header.data_len != sizeof(data)) {
 80159b2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80159b6:	2b28      	cmp	r3, #40	@ 0x28
 80159b8:	d002      	beq.n	80159c0 <sps30_read_measurement+0x44>
        return SPS30_ERR_NOT_ENOUGH_DATA;
 80159ba:	f04f 33ff 	mov.w	r3, #4294967295
 80159be:	e078      	b.n	8015ab2 <sps30_read_measurement+0x136>
    }

    measurement->mc_1p0 = sensirion_bytes_to_float(data[0]);
 80159c0:	f107 0308 	add.w	r3, r7, #8
 80159c4:	4618      	mov	r0, r3
 80159c6:	f7ff fbba 	bl	801513e <sensirion_bytes_to_float>
 80159ca:	eef0 7a40 	vmov.f32	s15, s0
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	edc3 7a00 	vstr	s15, [r3]
    measurement->mc_2p5 = sensirion_bytes_to_float(data[1]);
 80159d4:	f107 0308 	add.w	r3, r7, #8
 80159d8:	3304      	adds	r3, #4
 80159da:	4618      	mov	r0, r3
 80159dc:	f7ff fbaf 	bl	801513e <sensirion_bytes_to_float>
 80159e0:	eef0 7a40 	vmov.f32	s15, s0
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	edc3 7a01 	vstr	s15, [r3, #4]
    measurement->mc_4p0 = sensirion_bytes_to_float(data[2]);
 80159ea:	f107 0308 	add.w	r3, r7, #8
 80159ee:	3308      	adds	r3, #8
 80159f0:	4618      	mov	r0, r3
 80159f2:	f7ff fba4 	bl	801513e <sensirion_bytes_to_float>
 80159f6:	eef0 7a40 	vmov.f32	s15, s0
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	edc3 7a02 	vstr	s15, [r3, #8]
    measurement->mc_10p0 = sensirion_bytes_to_float(data[3]);
 8015a00:	f107 0308 	add.w	r3, r7, #8
 8015a04:	330c      	adds	r3, #12
 8015a06:	4618      	mov	r0, r3
 8015a08:	f7ff fb99 	bl	801513e <sensirion_bytes_to_float>
 8015a0c:	eef0 7a40 	vmov.f32	s15, s0
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	edc3 7a03 	vstr	s15, [r3, #12]
    measurement->nc_0p5 = sensirion_bytes_to_float(data[4]);
 8015a16:	f107 0308 	add.w	r3, r7, #8
 8015a1a:	3310      	adds	r3, #16
 8015a1c:	4618      	mov	r0, r3
 8015a1e:	f7ff fb8e 	bl	801513e <sensirion_bytes_to_float>
 8015a22:	eef0 7a40 	vmov.f32	s15, s0
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	edc3 7a04 	vstr	s15, [r3, #16]
    measurement->nc_1p0 = sensirion_bytes_to_float(data[5]);
 8015a2c:	f107 0308 	add.w	r3, r7, #8
 8015a30:	3314      	adds	r3, #20
 8015a32:	4618      	mov	r0, r3
 8015a34:	f7ff fb83 	bl	801513e <sensirion_bytes_to_float>
 8015a38:	eef0 7a40 	vmov.f32	s15, s0
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	edc3 7a05 	vstr	s15, [r3, #20]
    measurement->nc_2p5 = sensirion_bytes_to_float(data[6]);
 8015a42:	f107 0308 	add.w	r3, r7, #8
 8015a46:	3318      	adds	r3, #24
 8015a48:	4618      	mov	r0, r3
 8015a4a:	f7ff fb78 	bl	801513e <sensirion_bytes_to_float>
 8015a4e:	eef0 7a40 	vmov.f32	s15, s0
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	edc3 7a06 	vstr	s15, [r3, #24]
    measurement->nc_4p0 = sensirion_bytes_to_float(data[7]);
 8015a58:	f107 0308 	add.w	r3, r7, #8
 8015a5c:	331c      	adds	r3, #28
 8015a5e:	4618      	mov	r0, r3
 8015a60:	f7ff fb6d 	bl	801513e <sensirion_bytes_to_float>
 8015a64:	eef0 7a40 	vmov.f32	s15, s0
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	edc3 7a07 	vstr	s15, [r3, #28]
    measurement->nc_10p0 = sensirion_bytes_to_float(data[8]);
 8015a6e:	f107 0308 	add.w	r3, r7, #8
 8015a72:	3320      	adds	r3, #32
 8015a74:	4618      	mov	r0, r3
 8015a76:	f7ff fb62 	bl	801513e <sensirion_bytes_to_float>
 8015a7a:	eef0 7a40 	vmov.f32	s15, s0
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	edc3 7a08 	vstr	s15, [r3, #32]
    measurement->typical_particle_size = sensirion_bytes_to_float(data[9]);
 8015a84:	f107 0308 	add.w	r3, r7, #8
 8015a88:	3324      	adds	r3, #36	@ 0x24
 8015a8a:	4618      	mov	r0, r3
 8015a8c:	f7ff fb57 	bl	801513e <sensirion_bytes_to_float>
 8015a90:	eef0 7a40 	vmov.f32	s15, s0
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    if (header.state) {
 8015a9a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d006      	beq.n	8015ab0 <sps30_read_measurement+0x134>
        return SPS30_ERR_STATE(header.state);
 8015aa2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8015aa6:	b21b      	sxth	r3, r3
 8015aa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015aac:	b21b      	sxth	r3, r3
 8015aae:	e000      	b.n	8015ab2 <sps30_read_measurement+0x136>
    }

    return 0;
 8015ab0:	2300      	movs	r3, #0
}
 8015ab2:	4618      	mov	r0, r3
 8015ab4:	3738      	adds	r7, #56	@ 0x38
 8015ab6:	46bd      	mov	sp, r7
 8015ab8:	bd80      	pop	{r7, pc}

08015aba <sps30_start_manual_fan_cleaning>:
int16_t sps30_set_fan_auto_cleaning_interval_days(uint8_t interval_days) {
    return sps30_set_fan_auto_cleaning_interval((uint32_t)interval_days * 24 *
                                                60 * 60);
}

int16_t sps30_start_manual_fan_cleaning(void) {
 8015aba:	b580      	push	{r7, lr}
 8015abc:	b086      	sub	sp, #24
 8015abe:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_START_FAN_CLEANING, 0,
 8015ac0:	2300      	movs	r3, #0
 8015ac2:	9302      	str	r3, [sp, #8]
 8015ac4:	1d3b      	adds	r3, r7, #4
 8015ac6:	9301      	str	r3, [sp, #4]
 8015ac8:	2300      	movs	r3, #0
 8015aca:	9300      	str	r3, [sp, #0]
 8015acc:	2300      	movs	r3, #0
 8015ace:	2200      	movs	r2, #0
 8015ad0:	2156      	movs	r1, #86	@ 0x56
 8015ad2:	2000      	movs	r0, #0
 8015ad4:	f7ff fbd6 	bl	8015284 <sensirion_shdlc_xcv>
 8015ad8:	4603      	mov	r3, r0
                               (uint8_t*)NULL, 0, &header, (uint8_t*)NULL);
}
 8015ada:	4618      	mov	r0, r3
 8015adc:	3708      	adds	r7, #8
 8015ade:	46bd      	mov	sp, r7
 8015ae0:	bd80      	pop	{r7, pc}

08015ae2 <sps30_read_version>:

int16_t
sps30_read_version(struct sps30_version_information* version_information) {
 8015ae2:	b580      	push	{r7, lr}
 8015ae4:	b08a      	sub	sp, #40	@ 0x28
 8015ae6:	af04      	add	r7, sp, #16
 8015ae8:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    int16_t error;
    uint8_t data[7];

    error = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_READ_VERSION, 0,
 8015aea:	f107 0308 	add.w	r3, r7, #8
 8015aee:	9302      	str	r3, [sp, #8]
 8015af0:	f107 0310 	add.w	r3, r7, #16
 8015af4:	9301      	str	r3, [sp, #4]
 8015af6:	2307      	movs	r3, #7
 8015af8:	9300      	str	r3, [sp, #0]
 8015afa:	2300      	movs	r3, #0
 8015afc:	2200      	movs	r2, #0
 8015afe:	21d1      	movs	r1, #209	@ 0xd1
 8015b00:	2000      	movs	r0, #0
 8015b02:	f7ff fbbf 	bl	8015284 <sensirion_shdlc_xcv>
 8015b06:	4603      	mov	r3, r0
 8015b08:	82fb      	strh	r3, [r7, #22]
                                (uint8_t*)NULL, sizeof(data), &header, data);
    if (error) {
 8015b0a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d002      	beq.n	8015b18 <sps30_read_version+0x36>
        return error;
 8015b12:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015b16:	e01f      	b.n	8015b58 <sps30_read_version+0x76>
    }

    if (header.data_len != sizeof(data)) {
 8015b18:	7cfb      	ldrb	r3, [r7, #19]
 8015b1a:	2b07      	cmp	r3, #7
 8015b1c:	d002      	beq.n	8015b24 <sps30_read_version+0x42>
        return SPS30_ERR_NOT_ENOUGH_DATA;
 8015b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8015b22:	e019      	b.n	8015b58 <sps30_read_version+0x76>
    }

    if (header.state) {
 8015b24:	7cbb      	ldrb	r3, [r7, #18]
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d005      	beq.n	8015b36 <sps30_read_version+0x54>
        return SPS30_ERR_STATE(header.state);
 8015b2a:	7cbb      	ldrb	r3, [r7, #18]
 8015b2c:	b21b      	sxth	r3, r3
 8015b2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015b32:	b21b      	sxth	r3, r3
 8015b34:	e010      	b.n	8015b58 <sps30_read_version+0x76>
    }

    version_information->firmware_major = data[0];
 8015b36:	7a3a      	ldrb	r2, [r7, #8]
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	701a      	strb	r2, [r3, #0]
    version_information->firmware_minor = data[1];
 8015b3c:	7a7a      	ldrb	r2, [r7, #9]
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	705a      	strb	r2, [r3, #1]
    version_information->hardware_revision = data[3];
 8015b42:	7afa      	ldrb	r2, [r7, #11]
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	709a      	strb	r2, [r3, #2]
    version_information->shdlc_major = data[5];
 8015b48:	7b7a      	ldrb	r2, [r7, #13]
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	70da      	strb	r2, [r3, #3]
    version_information->shdlc_minor = data[6];
 8015b4e:	7bba      	ldrb	r2, [r7, #14]
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	711a      	strb	r2, [r3, #4]

    return error;
 8015b54:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8015b58:	4618      	mov	r0, r3
 8015b5a:	3718      	adds	r7, #24
 8015b5c:	46bd      	mov	sp, r7
 8015b5e:	bd80      	pop	{r7, pc}

08015b60 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015b60:	b580      	push	{r7, lr}
 8015b62:	b084      	sub	sp, #16
 8015b64:	af00      	add	r7, sp, #0
 8015b66:	6078      	str	r0, [r7, #4]
 8015b68:	460b      	mov	r3, r1
 8015b6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8015b6c:	f640 0074 	movw	r0, #2164	@ 0x874
 8015b70:	f007 fe7a 	bl	801d868 <USBD_static_malloc>
 8015b74:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d109      	bne.n	8015b90 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	32b0      	adds	r2, #176	@ 0xb0
 8015b86:	2100      	movs	r1, #0
 8015b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8015b8c:	2302      	movs	r3, #2
 8015b8e:	e06e      	b.n	8015c6e <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	32b0      	adds	r2, #176	@ 0xb0
 8015b9a:	68f9      	ldr	r1, [r7, #12]
 8015b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	32b0      	adds	r2, #176	@ 0xb0
 8015baa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	7c1b      	ldrb	r3, [r3, #16]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d12b      	bne.n	8015c14 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8015bbc:	4b2e      	ldr	r3, [pc, #184]	@ (8015c78 <USBD_MSC_Init+0x118>)
 8015bbe:	7819      	ldrb	r1, [r3, #0]
 8015bc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015bc4:	2202      	movs	r2, #2
 8015bc6:	6878      	ldr	r0, [r7, #4]
 8015bc8:	f007 fd0b 	bl	801d5e2 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8015bcc:	4b2a      	ldr	r3, [pc, #168]	@ (8015c78 <USBD_MSC_Init+0x118>)
 8015bce:	781b      	ldrb	r3, [r3, #0]
 8015bd0:	f003 020f 	and.w	r2, r3, #15
 8015bd4:	6879      	ldr	r1, [r7, #4]
 8015bd6:	4613      	mov	r3, r2
 8015bd8:	009b      	lsls	r3, r3, #2
 8015bda:	4413      	add	r3, r2
 8015bdc:	009b      	lsls	r3, r3, #2
 8015bde:	440b      	add	r3, r1
 8015be0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015be4:	2201      	movs	r2, #1
 8015be6:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8015be8:	4b24      	ldr	r3, [pc, #144]	@ (8015c7c <USBD_MSC_Init+0x11c>)
 8015bea:	7819      	ldrb	r1, [r3, #0]
 8015bec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015bf0:	2202      	movs	r2, #2
 8015bf2:	6878      	ldr	r0, [r7, #4]
 8015bf4:	f007 fcf5 	bl	801d5e2 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8015bf8:	4b20      	ldr	r3, [pc, #128]	@ (8015c7c <USBD_MSC_Init+0x11c>)
 8015bfa:	781b      	ldrb	r3, [r3, #0]
 8015bfc:	f003 020f 	and.w	r2, r3, #15
 8015c00:	6879      	ldr	r1, [r7, #4]
 8015c02:	4613      	mov	r3, r2
 8015c04:	009b      	lsls	r3, r3, #2
 8015c06:	4413      	add	r3, r2
 8015c08:	009b      	lsls	r3, r3, #2
 8015c0a:	440b      	add	r3, r1
 8015c0c:	3324      	adds	r3, #36	@ 0x24
 8015c0e:	2201      	movs	r2, #1
 8015c10:	801a      	strh	r2, [r3, #0]
 8015c12:	e028      	b.n	8015c66 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8015c14:	4b18      	ldr	r3, [pc, #96]	@ (8015c78 <USBD_MSC_Init+0x118>)
 8015c16:	7819      	ldrb	r1, [r3, #0]
 8015c18:	2340      	movs	r3, #64	@ 0x40
 8015c1a:	2202      	movs	r2, #2
 8015c1c:	6878      	ldr	r0, [r7, #4]
 8015c1e:	f007 fce0 	bl	801d5e2 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8015c22:	4b15      	ldr	r3, [pc, #84]	@ (8015c78 <USBD_MSC_Init+0x118>)
 8015c24:	781b      	ldrb	r3, [r3, #0]
 8015c26:	f003 020f 	and.w	r2, r3, #15
 8015c2a:	6879      	ldr	r1, [r7, #4]
 8015c2c:	4613      	mov	r3, r2
 8015c2e:	009b      	lsls	r3, r3, #2
 8015c30:	4413      	add	r3, r2
 8015c32:	009b      	lsls	r3, r3, #2
 8015c34:	440b      	add	r3, r1
 8015c36:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015c3a:	2201      	movs	r2, #1
 8015c3c:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8015c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8015c7c <USBD_MSC_Init+0x11c>)
 8015c40:	7819      	ldrb	r1, [r3, #0]
 8015c42:	2340      	movs	r3, #64	@ 0x40
 8015c44:	2202      	movs	r2, #2
 8015c46:	6878      	ldr	r0, [r7, #4]
 8015c48:	f007 fccb 	bl	801d5e2 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8015c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8015c7c <USBD_MSC_Init+0x11c>)
 8015c4e:	781b      	ldrb	r3, [r3, #0]
 8015c50:	f003 020f 	and.w	r2, r3, #15
 8015c54:	6879      	ldr	r1, [r7, #4]
 8015c56:	4613      	mov	r3, r2
 8015c58:	009b      	lsls	r3, r3, #2
 8015c5a:	4413      	add	r3, r2
 8015c5c:	009b      	lsls	r3, r3, #2
 8015c5e:	440b      	add	r3, r1
 8015c60:	3324      	adds	r3, #36	@ 0x24
 8015c62:	2201      	movs	r2, #1
 8015c64:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8015c66:	6878      	ldr	r0, [r7, #4]
 8015c68:	f000 fa2c 	bl	80160c4 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8015c6c:	2300      	movs	r3, #0
}
 8015c6e:	4618      	mov	r0, r3
 8015c70:	3710      	adds	r7, #16
 8015c72:	46bd      	mov	sp, r7
 8015c74:	bd80      	pop	{r7, pc}
 8015c76:	bf00      	nop
 8015c78:	200000af 	.word	0x200000af
 8015c7c:	200000ae 	.word	0x200000ae

08015c80 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015c80:	b580      	push	{r7, lr}
 8015c82:	b082      	sub	sp, #8
 8015c84:	af00      	add	r7, sp, #0
 8015c86:	6078      	str	r0, [r7, #4]
 8015c88:	460b      	mov	r3, r1
 8015c8a:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8015c8c:	4b26      	ldr	r3, [pc, #152]	@ (8015d28 <USBD_MSC_DeInit+0xa8>)
 8015c8e:	781b      	ldrb	r3, [r3, #0]
 8015c90:	4619      	mov	r1, r3
 8015c92:	6878      	ldr	r0, [r7, #4]
 8015c94:	f007 fccb 	bl	801d62e <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8015c98:	4b23      	ldr	r3, [pc, #140]	@ (8015d28 <USBD_MSC_DeInit+0xa8>)
 8015c9a:	781b      	ldrb	r3, [r3, #0]
 8015c9c:	f003 020f 	and.w	r2, r3, #15
 8015ca0:	6879      	ldr	r1, [r7, #4]
 8015ca2:	4613      	mov	r3, r2
 8015ca4:	009b      	lsls	r3, r3, #2
 8015ca6:	4413      	add	r3, r2
 8015ca8:	009b      	lsls	r3, r3, #2
 8015caa:	440b      	add	r3, r1
 8015cac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015cb0:	2200      	movs	r2, #0
 8015cb2:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8015cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8015d2c <USBD_MSC_DeInit+0xac>)
 8015cb6:	781b      	ldrb	r3, [r3, #0]
 8015cb8:	4619      	mov	r1, r3
 8015cba:	6878      	ldr	r0, [r7, #4]
 8015cbc:	f007 fcb7 	bl	801d62e <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8015cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8015d2c <USBD_MSC_DeInit+0xac>)
 8015cc2:	781b      	ldrb	r3, [r3, #0]
 8015cc4:	f003 020f 	and.w	r2, r3, #15
 8015cc8:	6879      	ldr	r1, [r7, #4]
 8015cca:	4613      	mov	r3, r2
 8015ccc:	009b      	lsls	r3, r3, #2
 8015cce:	4413      	add	r3, r2
 8015cd0:	009b      	lsls	r3, r3, #2
 8015cd2:	440b      	add	r3, r1
 8015cd4:	3324      	adds	r3, #36	@ 0x24
 8015cd6:	2200      	movs	r2, #0
 8015cd8:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	32b0      	adds	r2, #176	@ 0xb0
 8015ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d018      	beq.n	8015d1e <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8015cec:	6878      	ldr	r0, [r7, #4]
 8015cee:	f000 fa67 	bl	80161c0 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	32b0      	adds	r2, #176	@ 0xb0
 8015cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d00:	4618      	mov	r0, r3
 8015d02:	f007 fdbf 	bl	801d884 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	32b0      	adds	r2, #176	@ 0xb0
 8015d10:	2100      	movs	r1, #0
 8015d12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	2200      	movs	r2, #0
 8015d1a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8015d1e:	2300      	movs	r3, #0
}
 8015d20:	4618      	mov	r0, r3
 8015d22:	3708      	adds	r7, #8
 8015d24:	46bd      	mov	sp, r7
 8015d26:	bd80      	pop	{r7, pc}
 8015d28:	200000af 	.word	0x200000af
 8015d2c:	200000ae 	.word	0x200000ae

08015d30 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d30:	b580      	push	{r7, lr}
 8015d32:	b086      	sub	sp, #24
 8015d34:	af00      	add	r7, sp, #0
 8015d36:	6078      	str	r0, [r7, #4]
 8015d38:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	32b0      	adds	r2, #176	@ 0xb0
 8015d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d48:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8015d4a:	2300      	movs	r3, #0
 8015d4c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8015d4e:	2300      	movs	r3, #0
 8015d50:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8015d52:	693b      	ldr	r3, [r7, #16]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d101      	bne.n	8015d5c <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8015d58:	2303      	movs	r3, #3
 8015d5a:	e0e1      	b.n	8015f20 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015d5c:	683b      	ldr	r3, [r7, #0]
 8015d5e:	781b      	ldrb	r3, [r3, #0]
 8015d60:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d053      	beq.n	8015e10 <USBD_MSC_Setup+0xe0>
 8015d68:	2b20      	cmp	r3, #32
 8015d6a:	f040 80d1 	bne.w	8015f10 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8015d6e:	683b      	ldr	r3, [r7, #0]
 8015d70:	785b      	ldrb	r3, [r3, #1]
 8015d72:	2bfe      	cmp	r3, #254	@ 0xfe
 8015d74:	d002      	beq.n	8015d7c <USBD_MSC_Setup+0x4c>
 8015d76:	2bff      	cmp	r3, #255	@ 0xff
 8015d78:	d02a      	beq.n	8015dd0 <USBD_MSC_Setup+0xa0>
 8015d7a:	e041      	b.n	8015e00 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8015d7c:	683b      	ldr	r3, [r7, #0]
 8015d7e:	885b      	ldrh	r3, [r3, #2]
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d11e      	bne.n	8015dc2 <USBD_MSC_Setup+0x92>
 8015d84:	683b      	ldr	r3, [r7, #0]
 8015d86:	88db      	ldrh	r3, [r3, #6]
 8015d88:	2b01      	cmp	r3, #1
 8015d8a:	d11a      	bne.n	8015dc2 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8015d8c:	683b      	ldr	r3, [r7, #0]
 8015d8e:	781b      	ldrb	r3, [r3, #0]
 8015d90:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	da15      	bge.n	8015dc2 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015d9c:	687a      	ldr	r2, [r7, #4]
 8015d9e:	33b0      	adds	r3, #176	@ 0xb0
 8015da0:	009b      	lsls	r3, r3, #2
 8015da2:	4413      	add	r3, r2
 8015da4:	685b      	ldr	r3, [r3, #4]
 8015da6:	699b      	ldr	r3, [r3, #24]
 8015da8:	4798      	blx	r3
 8015daa:	4603      	mov	r3, r0
 8015dac:	461a      	mov	r2, r3
 8015dae:	693b      	ldr	r3, [r7, #16]
 8015db0:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8015db2:	693b      	ldr	r3, [r7, #16]
 8015db4:	2201      	movs	r2, #1
 8015db6:	4619      	mov	r1, r3
 8015db8:	6878      	ldr	r0, [r7, #4]
 8015dba:	f003 f979 	bl	80190b0 <USBD_CtlSendData>
 8015dbe:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015dc0:	e025      	b.n	8015e0e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8015dc2:	6839      	ldr	r1, [r7, #0]
 8015dc4:	6878      	ldr	r0, [r7, #4]
 8015dc6:	f003 f902 	bl	8018fce <USBD_CtlError>
            ret = USBD_FAIL;
 8015dca:	2303      	movs	r3, #3
 8015dcc:	75fb      	strb	r3, [r7, #23]
          break;
 8015dce:	e01e      	b.n	8015e0e <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8015dd0:	683b      	ldr	r3, [r7, #0]
 8015dd2:	885b      	ldrh	r3, [r3, #2]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d10c      	bne.n	8015df2 <USBD_MSC_Setup+0xc2>
 8015dd8:	683b      	ldr	r3, [r7, #0]
 8015dda:	88db      	ldrh	r3, [r3, #6]
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d108      	bne.n	8015df2 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8015de0:	683b      	ldr	r3, [r7, #0]
 8015de2:	781b      	ldrb	r3, [r3, #0]
 8015de4:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	db03      	blt.n	8015df2 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8015dea:	6878      	ldr	r0, [r7, #4]
 8015dec:	f000 f9b4 	bl	8016158 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015df0:	e00d      	b.n	8015e0e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8015df2:	6839      	ldr	r1, [r7, #0]
 8015df4:	6878      	ldr	r0, [r7, #4]
 8015df6:	f003 f8ea 	bl	8018fce <USBD_CtlError>
            ret = USBD_FAIL;
 8015dfa:	2303      	movs	r3, #3
 8015dfc:	75fb      	strb	r3, [r7, #23]
          break;
 8015dfe:	e006      	b.n	8015e0e <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8015e00:	6839      	ldr	r1, [r7, #0]
 8015e02:	6878      	ldr	r0, [r7, #4]
 8015e04:	f003 f8e3 	bl	8018fce <USBD_CtlError>
          ret = USBD_FAIL;
 8015e08:	2303      	movs	r3, #3
 8015e0a:	75fb      	strb	r3, [r7, #23]
          break;
 8015e0c:	bf00      	nop
      }
      break;
 8015e0e:	e086      	b.n	8015f1e <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015e10:	683b      	ldr	r3, [r7, #0]
 8015e12:	785b      	ldrb	r3, [r3, #1]
 8015e14:	2b0b      	cmp	r3, #11
 8015e16:	d872      	bhi.n	8015efe <USBD_MSC_Setup+0x1ce>
 8015e18:	a201      	add	r2, pc, #4	@ (adr r2, 8015e20 <USBD_MSC_Setup+0xf0>)
 8015e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e1e:	bf00      	nop
 8015e20:	08015e51 	.word	0x08015e51
 8015e24:	08015ecd 	.word	0x08015ecd
 8015e28:	08015eff 	.word	0x08015eff
 8015e2c:	08015eff 	.word	0x08015eff
 8015e30:	08015eff 	.word	0x08015eff
 8015e34:	08015eff 	.word	0x08015eff
 8015e38:	08015eff 	.word	0x08015eff
 8015e3c:	08015eff 	.word	0x08015eff
 8015e40:	08015eff 	.word	0x08015eff
 8015e44:	08015eff 	.word	0x08015eff
 8015e48:	08015e7b 	.word	0x08015e7b
 8015e4c:	08015ea5 	.word	0x08015ea5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015e56:	b2db      	uxtb	r3, r3
 8015e58:	2b03      	cmp	r3, #3
 8015e5a:	d107      	bne.n	8015e6c <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015e5c:	f107 030e 	add.w	r3, r7, #14
 8015e60:	2202      	movs	r2, #2
 8015e62:	4619      	mov	r1, r3
 8015e64:	6878      	ldr	r0, [r7, #4]
 8015e66:	f003 f923 	bl	80190b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015e6a:	e050      	b.n	8015f0e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8015e6c:	6839      	ldr	r1, [r7, #0]
 8015e6e:	6878      	ldr	r0, [r7, #4]
 8015e70:	f003 f8ad 	bl	8018fce <USBD_CtlError>
            ret = USBD_FAIL;
 8015e74:	2303      	movs	r3, #3
 8015e76:	75fb      	strb	r3, [r7, #23]
          break;
 8015e78:	e049      	b.n	8015f0e <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015e80:	b2db      	uxtb	r3, r3
 8015e82:	2b03      	cmp	r3, #3
 8015e84:	d107      	bne.n	8015e96 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8015e86:	693b      	ldr	r3, [r7, #16]
 8015e88:	3304      	adds	r3, #4
 8015e8a:	2201      	movs	r2, #1
 8015e8c:	4619      	mov	r1, r3
 8015e8e:	6878      	ldr	r0, [r7, #4]
 8015e90:	f003 f90e 	bl	80190b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015e94:	e03b      	b.n	8015f0e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8015e96:	6839      	ldr	r1, [r7, #0]
 8015e98:	6878      	ldr	r0, [r7, #4]
 8015e9a:	f003 f898 	bl	8018fce <USBD_CtlError>
            ret = USBD_FAIL;
 8015e9e:	2303      	movs	r3, #3
 8015ea0:	75fb      	strb	r3, [r7, #23]
          break;
 8015ea2:	e034      	b.n	8015f0e <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015eaa:	b2db      	uxtb	r3, r3
 8015eac:	2b03      	cmp	r3, #3
 8015eae:	d106      	bne.n	8015ebe <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8015eb0:	683b      	ldr	r3, [r7, #0]
 8015eb2:	885b      	ldrh	r3, [r3, #2]
 8015eb4:	b2db      	uxtb	r3, r3
 8015eb6:	461a      	mov	r2, r3
 8015eb8:	693b      	ldr	r3, [r7, #16]
 8015eba:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015ebc:	e027      	b.n	8015f0e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8015ebe:	6839      	ldr	r1, [r7, #0]
 8015ec0:	6878      	ldr	r0, [r7, #4]
 8015ec2:	f003 f884 	bl	8018fce <USBD_CtlError>
            ret = USBD_FAIL;
 8015ec6:	2303      	movs	r3, #3
 8015ec8:	75fb      	strb	r3, [r7, #23]
          break;
 8015eca:	e020      	b.n	8015f0e <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015ed2:	b2db      	uxtb	r3, r3
 8015ed4:	2b03      	cmp	r3, #3
 8015ed6:	d119      	bne.n	8015f0c <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8015ed8:	683b      	ldr	r3, [r7, #0]
 8015eda:	885b      	ldrh	r3, [r3, #2]
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d115      	bne.n	8015f0c <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8015ee0:	683b      	ldr	r3, [r7, #0]
 8015ee2:	889b      	ldrh	r3, [r3, #4]
 8015ee4:	b2db      	uxtb	r3, r3
 8015ee6:	4619      	mov	r1, r3
 8015ee8:	6878      	ldr	r0, [r7, #4]
 8015eea:	f007 fbbf 	bl	801d66c <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8015eee:	683b      	ldr	r3, [r7, #0]
 8015ef0:	889b      	ldrh	r3, [r3, #4]
 8015ef2:	b2db      	uxtb	r3, r3
 8015ef4:	4619      	mov	r1, r3
 8015ef6:	6878      	ldr	r0, [r7, #4]
 8015ef8:	f000 fb2e 	bl	8016558 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8015efc:	e006      	b.n	8015f0c <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8015efe:	6839      	ldr	r1, [r7, #0]
 8015f00:	6878      	ldr	r0, [r7, #4]
 8015f02:	f003 f864 	bl	8018fce <USBD_CtlError>
          ret = USBD_FAIL;
 8015f06:	2303      	movs	r3, #3
 8015f08:	75fb      	strb	r3, [r7, #23]
          break;
 8015f0a:	e000      	b.n	8015f0e <USBD_MSC_Setup+0x1de>
          break;
 8015f0c:	bf00      	nop
      }
      break;
 8015f0e:	e006      	b.n	8015f1e <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8015f10:	6839      	ldr	r1, [r7, #0]
 8015f12:	6878      	ldr	r0, [r7, #4]
 8015f14:	f003 f85b 	bl	8018fce <USBD_CtlError>
      ret = USBD_FAIL;
 8015f18:	2303      	movs	r3, #3
 8015f1a:	75fb      	strb	r3, [r7, #23]
      break;
 8015f1c:	bf00      	nop
  }

  return (uint8_t)ret;
 8015f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015f20:	4618      	mov	r0, r3
 8015f22:	3718      	adds	r7, #24
 8015f24:	46bd      	mov	sp, r7
 8015f26:	bd80      	pop	{r7, pc}

08015f28 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015f28:	b580      	push	{r7, lr}
 8015f2a:	b082      	sub	sp, #8
 8015f2c:	af00      	add	r7, sp, #0
 8015f2e:	6078      	str	r0, [r7, #4]
 8015f30:	460b      	mov	r3, r1
 8015f32:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8015f34:	78fb      	ldrb	r3, [r7, #3]
 8015f36:	4619      	mov	r1, r3
 8015f38:	6878      	ldr	r0, [r7, #4]
 8015f3a:	f000 f959 	bl	80161f0 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8015f3e:	2300      	movs	r3, #0
}
 8015f40:	4618      	mov	r0, r3
 8015f42:	3708      	adds	r7, #8
 8015f44:	46bd      	mov	sp, r7
 8015f46:	bd80      	pop	{r7, pc}

08015f48 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015f48:	b580      	push	{r7, lr}
 8015f4a:	b082      	sub	sp, #8
 8015f4c:	af00      	add	r7, sp, #0
 8015f4e:	6078      	str	r0, [r7, #4]
 8015f50:	460b      	mov	r3, r1
 8015f52:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8015f54:	78fb      	ldrb	r3, [r7, #3]
 8015f56:	4619      	mov	r1, r3
 8015f58:	6878      	ldr	r0, [r7, #4]
 8015f5a:	f000 f983 	bl	8016264 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8015f5e:	2300      	movs	r3, #0
}
 8015f60:	4618      	mov	r0, r3
 8015f62:	3708      	adds	r7, #8
 8015f64:	46bd      	mov	sp, r7
 8015f66:	bd80      	pop	{r7, pc}

08015f68 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8015f68:	b580      	push	{r7, lr}
 8015f6a:	b084      	sub	sp, #16
 8015f6c:	af00      	add	r7, sp, #0
 8015f6e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8015f70:	2181      	movs	r1, #129	@ 0x81
 8015f72:	4812      	ldr	r0, [pc, #72]	@ (8015fbc <USBD_MSC_GetHSCfgDesc+0x54>)
 8015f74:	f002 f9f5 	bl	8018362 <USBD_GetEpDesc>
 8015f78:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8015f7a:	2101      	movs	r1, #1
 8015f7c:	480f      	ldr	r0, [pc, #60]	@ (8015fbc <USBD_MSC_GetHSCfgDesc+0x54>)
 8015f7e:	f002 f9f0 	bl	8018362 <USBD_GetEpDesc>
 8015f82:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d006      	beq.n	8015f98 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8015f8a:	68fb      	ldr	r3, [r7, #12]
 8015f8c:	2200      	movs	r2, #0
 8015f8e:	711a      	strb	r2, [r3, #4]
 8015f90:	2200      	movs	r2, #0
 8015f92:	f042 0202 	orr.w	r2, r2, #2
 8015f96:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8015f98:	68bb      	ldr	r3, [r7, #8]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d006      	beq.n	8015fac <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8015f9e:	68bb      	ldr	r3, [r7, #8]
 8015fa0:	2200      	movs	r2, #0
 8015fa2:	711a      	strb	r2, [r3, #4]
 8015fa4:	2200      	movs	r2, #0
 8015fa6:	f042 0202 	orr.w	r2, r2, #2
 8015faa:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	2220      	movs	r2, #32
 8015fb0:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8015fb2:	4b02      	ldr	r3, [pc, #8]	@ (8015fbc <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8015fb4:	4618      	mov	r0, r3
 8015fb6:	3710      	adds	r7, #16
 8015fb8:	46bd      	mov	sp, r7
 8015fba:	bd80      	pop	{r7, pc}
 8015fbc:	20000084 	.word	0x20000084

08015fc0 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8015fc0:	b580      	push	{r7, lr}
 8015fc2:	b084      	sub	sp, #16
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8015fc8:	2181      	movs	r1, #129	@ 0x81
 8015fca:	4812      	ldr	r0, [pc, #72]	@ (8016014 <USBD_MSC_GetFSCfgDesc+0x54>)
 8015fcc:	f002 f9c9 	bl	8018362 <USBD_GetEpDesc>
 8015fd0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8015fd2:	2101      	movs	r1, #1
 8015fd4:	480f      	ldr	r0, [pc, #60]	@ (8016014 <USBD_MSC_GetFSCfgDesc+0x54>)
 8015fd6:	f002 f9c4 	bl	8018362 <USBD_GetEpDesc>
 8015fda:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8015fdc:	68fb      	ldr	r3, [r7, #12]
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d006      	beq.n	8015ff0 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	2200      	movs	r2, #0
 8015fe6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015fea:	711a      	strb	r2, [r3, #4]
 8015fec:	2200      	movs	r2, #0
 8015fee:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8015ff0:	68bb      	ldr	r3, [r7, #8]
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d006      	beq.n	8016004 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8015ff6:	68bb      	ldr	r3, [r7, #8]
 8015ff8:	2200      	movs	r2, #0
 8015ffa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015ffe:	711a      	strb	r2, [r3, #4]
 8016000:	2200      	movs	r2, #0
 8016002:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	2220      	movs	r2, #32
 8016008:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 801600a:	4b02      	ldr	r3, [pc, #8]	@ (8016014 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 801600c:	4618      	mov	r0, r3
 801600e:	3710      	adds	r7, #16
 8016010:	46bd      	mov	sp, r7
 8016012:	bd80      	pop	{r7, pc}
 8016014:	20000084 	.word	0x20000084

08016018 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8016018:	b580      	push	{r7, lr}
 801601a:	b084      	sub	sp, #16
 801601c:	af00      	add	r7, sp, #0
 801601e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8016020:	2181      	movs	r1, #129	@ 0x81
 8016022:	4812      	ldr	r0, [pc, #72]	@ (801606c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8016024:	f002 f99d 	bl	8018362 <USBD_GetEpDesc>
 8016028:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 801602a:	2101      	movs	r1, #1
 801602c:	480f      	ldr	r0, [pc, #60]	@ (801606c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 801602e:	f002 f998 	bl	8018362 <USBD_GetEpDesc>
 8016032:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8016034:	68fb      	ldr	r3, [r7, #12]
 8016036:	2b00      	cmp	r3, #0
 8016038:	d006      	beq.n	8016048 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 801603a:	68fb      	ldr	r3, [r7, #12]
 801603c:	2200      	movs	r2, #0
 801603e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016042:	711a      	strb	r2, [r3, #4]
 8016044:	2200      	movs	r2, #0
 8016046:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8016048:	68bb      	ldr	r3, [r7, #8]
 801604a:	2b00      	cmp	r3, #0
 801604c:	d006      	beq.n	801605c <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 801604e:	68bb      	ldr	r3, [r7, #8]
 8016050:	2200      	movs	r2, #0
 8016052:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016056:	711a      	strb	r2, [r3, #4]
 8016058:	2200      	movs	r2, #0
 801605a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	2220      	movs	r2, #32
 8016060:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8016062:	4b02      	ldr	r3, [pc, #8]	@ (801606c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8016064:	4618      	mov	r0, r3
 8016066:	3710      	adds	r7, #16
 8016068:	46bd      	mov	sp, r7
 801606a:	bd80      	pop	{r7, pc}
 801606c:	20000084 	.word	0x20000084

08016070 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8016070:	b480      	push	{r7}
 8016072:	b083      	sub	sp, #12
 8016074:	af00      	add	r7, sp, #0
 8016076:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	220a      	movs	r2, #10
 801607c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 801607e:	4b03      	ldr	r3, [pc, #12]	@ (801608c <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8016080:	4618      	mov	r0, r3
 8016082:	370c      	adds	r7, #12
 8016084:	46bd      	mov	sp, r7
 8016086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801608a:	4770      	bx	lr
 801608c:	200000a4 	.word	0x200000a4

08016090 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8016090:	b480      	push	{r7}
 8016092:	b083      	sub	sp, #12
 8016094:	af00      	add	r7, sp, #0
 8016096:	6078      	str	r0, [r7, #4]
 8016098:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801609a:	683b      	ldr	r3, [r7, #0]
 801609c:	2b00      	cmp	r3, #0
 801609e:	d101      	bne.n	80160a4 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80160a0:	2303      	movs	r3, #3
 80160a2:	e009      	b.n	80160b8 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80160aa:	687a      	ldr	r2, [r7, #4]
 80160ac:	33b0      	adds	r3, #176	@ 0xb0
 80160ae:	009b      	lsls	r3, r3, #2
 80160b0:	4413      	add	r3, r2
 80160b2:	683a      	ldr	r2, [r7, #0]
 80160b4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80160b6:	2300      	movs	r3, #0
}
 80160b8:	4618      	mov	r0, r3
 80160ba:	370c      	adds	r7, #12
 80160bc:	46bd      	mov	sp, r7
 80160be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160c2:	4770      	bx	lr

080160c4 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80160c4:	b580      	push	{r7, lr}
 80160c6:	b084      	sub	sp, #16
 80160c8:	af00      	add	r7, sp, #0
 80160ca:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	32b0      	adds	r2, #176	@ 0xb0
 80160d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160da:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d032      	beq.n	8016148 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	2200      	movs	r2, #0
 80160e6:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	2200      	movs	r2, #0
 80160ec:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	2200      	movs	r2, #0
 80160f2:	f883 2861 	strb.w	r2, [r3, #2145]	@ 0x861
  hmsc->scsi_sense_head = 0U;
 80160f6:	68fb      	ldr	r3, [r7, #12]
 80160f8:	2200      	movs	r2, #0
 80160fa:	f883 2860 	strb.w	r2, [r3, #2144]	@ 0x860
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	2200      	movs	r2, #0
 8016102:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801610c:	687a      	ldr	r2, [r7, #4]
 801610e:	33b0      	adds	r3, #176	@ 0xb0
 8016110:	009b      	lsls	r3, r3, #2
 8016112:	4413      	add	r3, r2
 8016114:	685b      	ldr	r3, [r3, #4]
 8016116:	681b      	ldr	r3, [r3, #0]
 8016118:	2000      	movs	r0, #0
 801611a:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 801611c:	4b0c      	ldr	r3, [pc, #48]	@ (8016150 <MSC_BOT_Init+0x8c>)
 801611e:	781b      	ldrb	r3, [r3, #0]
 8016120:	4619      	mov	r1, r3
 8016122:	6878      	ldr	r0, [r7, #4]
 8016124:	f007 faa2 	bl	801d66c <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8016128:	4b0a      	ldr	r3, [pc, #40]	@ (8016154 <MSC_BOT_Init+0x90>)
 801612a:	781b      	ldrb	r3, [r3, #0]
 801612c:	4619      	mov	r1, r3
 801612e:	6878      	ldr	r0, [r7, #4]
 8016130:	f007 fa9c 	bl	801d66c <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8016134:	4b06      	ldr	r3, [pc, #24]	@ (8016150 <MSC_BOT_Init+0x8c>)
 8016136:	7819      	ldrb	r1, [r3, #0]
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	f503 6201 	add.w	r2, r3, #2064	@ 0x810
 801613e:	231f      	movs	r3, #31
 8016140:	6878      	ldr	r0, [r7, #4]
 8016142:	f007 fb5c 	bl	801d7fe <USBD_LL_PrepareReceive>
 8016146:	e000      	b.n	801614a <MSC_BOT_Init+0x86>
    return;
 8016148:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801614a:	3710      	adds	r7, #16
 801614c:	46bd      	mov	sp, r7
 801614e:	bd80      	pop	{r7, pc}
 8016150:	200000af 	.word	0x200000af
 8016154:	200000ae 	.word	0x200000ae

08016158 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8016158:	b580      	push	{r7, lr}
 801615a:	b084      	sub	sp, #16
 801615c:	af00      	add	r7, sp, #0
 801615e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	32b0      	adds	r2, #176	@ 0xb0
 801616a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801616e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	2b00      	cmp	r3, #0
 8016174:	d01b      	beq.n	80161ae <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	2200      	movs	r2, #0
 801617a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	2201      	movs	r2, #1
 8016180:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8016182:	4b0d      	ldr	r3, [pc, #52]	@ (80161b8 <MSC_BOT_Reset+0x60>)
 8016184:	781b      	ldrb	r3, [r3, #0]
 8016186:	4619      	mov	r1, r3
 8016188:	6878      	ldr	r0, [r7, #4]
 801618a:	f007 faad 	bl	801d6e8 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 801618e:	4b0b      	ldr	r3, [pc, #44]	@ (80161bc <MSC_BOT_Reset+0x64>)
 8016190:	781b      	ldrb	r3, [r3, #0]
 8016192:	4619      	mov	r1, r3
 8016194:	6878      	ldr	r0, [r7, #4]
 8016196:	f007 faa7 	bl	801d6e8 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 801619a:	4b08      	ldr	r3, [pc, #32]	@ (80161bc <MSC_BOT_Reset+0x64>)
 801619c:	7819      	ldrb	r1, [r3, #0]
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	f503 6201 	add.w	r2, r3, #2064	@ 0x810
 80161a4:	231f      	movs	r3, #31
 80161a6:	6878      	ldr	r0, [r7, #4]
 80161a8:	f007 fb29 	bl	801d7fe <USBD_LL_PrepareReceive>
 80161ac:	e000      	b.n	80161b0 <MSC_BOT_Reset+0x58>
    return;
 80161ae:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80161b0:	3710      	adds	r7, #16
 80161b2:	46bd      	mov	sp, r7
 80161b4:	bd80      	pop	{r7, pc}
 80161b6:	bf00      	nop
 80161b8:	200000ae 	.word	0x200000ae
 80161bc:	200000af 	.word	0x200000af

080161c0 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80161c0:	b480      	push	{r7}
 80161c2:	b085      	sub	sp, #20
 80161c4:	af00      	add	r7, sp, #0
 80161c6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	32b0      	adds	r2, #176	@ 0xb0
 80161d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161d6:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d002      	beq.n	80161e4 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 80161de:	68fb      	ldr	r3, [r7, #12]
 80161e0:	2200      	movs	r2, #0
 80161e2:	721a      	strb	r2, [r3, #8]
  }
}
 80161e4:	bf00      	nop
 80161e6:	3714      	adds	r7, #20
 80161e8:	46bd      	mov	sp, r7
 80161ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ee:	4770      	bx	lr

080161f0 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80161f0:	b580      	push	{r7, lr}
 80161f2:	b084      	sub	sp, #16
 80161f4:	af00      	add	r7, sp, #0
 80161f6:	6078      	str	r0, [r7, #4]
 80161f8:	460b      	mov	r3, r1
 80161fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	32b0      	adds	r2, #176	@ 0xb0
 8016206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801620a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	2b00      	cmp	r3, #0
 8016210:	d020      	beq.n	8016254 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 8016212:	68fb      	ldr	r3, [r7, #12]
 8016214:	7a1b      	ldrb	r3, [r3, #8]
 8016216:	2b02      	cmp	r3, #2
 8016218:	d005      	beq.n	8016226 <MSC_BOT_DataIn+0x36>
 801621a:	2b02      	cmp	r3, #2
 801621c:	db1c      	blt.n	8016258 <MSC_BOT_DataIn+0x68>
 801621e:	3b03      	subs	r3, #3
 8016220:	2b01      	cmp	r3, #1
 8016222:	d819      	bhi.n	8016258 <MSC_BOT_DataIn+0x68>
 8016224:	e011      	b.n	801624a <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	f603 031f 	addw	r3, r3, #2079	@ 0x81f
 8016232:	461a      	mov	r2, r3
 8016234:	6878      	ldr	r0, [r7, #4]
 8016236:	f000 f9c9 	bl	80165cc <SCSI_ProcessCmd>
 801623a:	4603      	mov	r3, r0
 801623c:	2b00      	cmp	r3, #0
 801623e:	da0d      	bge.n	801625c <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8016240:	2101      	movs	r1, #1
 8016242:	6878      	ldr	r0, [r7, #4]
 8016244:	f000 f90c 	bl	8016460 <MSC_BOT_SendCSW>
      }
      break;
 8016248:	e008      	b.n	801625c <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801624a:	2100      	movs	r1, #0
 801624c:	6878      	ldr	r0, [r7, #4]
 801624e:	f000 f907 	bl	8016460 <MSC_BOT_SendCSW>
      break;
 8016252:	e004      	b.n	801625e <MSC_BOT_DataIn+0x6e>
    return;
 8016254:	bf00      	nop
 8016256:	e002      	b.n	801625e <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8016258:	bf00      	nop
 801625a:	e000      	b.n	801625e <MSC_BOT_DataIn+0x6e>
      break;
 801625c:	bf00      	nop
  }
}
 801625e:	3710      	adds	r7, #16
 8016260:	46bd      	mov	sp, r7
 8016262:	bd80      	pop	{r7, pc}

08016264 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016264:	b580      	push	{r7, lr}
 8016266:	b084      	sub	sp, #16
 8016268:	af00      	add	r7, sp, #0
 801626a:	6078      	str	r0, [r7, #4]
 801626c:	460b      	mov	r3, r1
 801626e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	32b0      	adds	r2, #176	@ 0xb0
 801627a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801627e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8016280:	68fb      	ldr	r3, [r7, #12]
 8016282:	2b00      	cmp	r3, #0
 8016284:	d01c      	beq.n	80162c0 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	7a1b      	ldrb	r3, [r3, #8]
 801628a:	2b00      	cmp	r3, #0
 801628c:	d002      	beq.n	8016294 <MSC_BOT_DataOut+0x30>
 801628e:	2b01      	cmp	r3, #1
 8016290:	d004      	beq.n	801629c <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8016292:	e018      	b.n	80162c6 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 8016294:	6878      	ldr	r0, [r7, #4]
 8016296:	f000 f819 	bl	80162cc <MSC_BOT_CBW_Decode>
      break;
 801629a:	e014      	b.n	80162c6 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80162a2:	68fb      	ldr	r3, [r7, #12]
 80162a4:	f603 031f 	addw	r3, r3, #2079	@ 0x81f
 80162a8:	461a      	mov	r2, r3
 80162aa:	6878      	ldr	r0, [r7, #4]
 80162ac:	f000 f98e 	bl	80165cc <SCSI_ProcessCmd>
 80162b0:	4603      	mov	r3, r0
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	da06      	bge.n	80162c4 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80162b6:	2101      	movs	r1, #1
 80162b8:	6878      	ldr	r0, [r7, #4]
 80162ba:	f000 f8d1 	bl	8016460 <MSC_BOT_SendCSW>
      break;
 80162be:	e001      	b.n	80162c4 <MSC_BOT_DataOut+0x60>
    return;
 80162c0:	bf00      	nop
 80162c2:	e000      	b.n	80162c6 <MSC_BOT_DataOut+0x62>
      break;
 80162c4:	bf00      	nop
  }
}
 80162c6:	3710      	adds	r7, #16
 80162c8:	46bd      	mov	sp, r7
 80162ca:	bd80      	pop	{r7, pc}

080162cc <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80162cc:	b580      	push	{r7, lr}
 80162ce:	b084      	sub	sp, #16
 80162d0:	af00      	add	r7, sp, #0
 80162d2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	32b0      	adds	r2, #176	@ 0xb0
 80162de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80162e2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d079      	beq.n	80163de <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8016302:	4b3a      	ldr	r3, [pc, #232]	@ (80163ec <MSC_BOT_CBW_Decode+0x120>)
 8016304:	781b      	ldrb	r3, [r3, #0]
 8016306:	4619      	mov	r1, r3
 8016308:	6878      	ldr	r0, [r7, #4]
 801630a:	f007 fa99 	bl	801d840 <USBD_LL_GetRxDataSize>
 801630e:	4603      	mov	r3, r0
 8016310:	2b1f      	cmp	r3, #31
 8016312:	d114      	bne.n	801633e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	f8d3 3810 	ldr.w	r3, [r3, #2064]	@ 0x810
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 801631a:	4a35      	ldr	r2, [pc, #212]	@ (80163f0 <MSC_BOT_CBW_Decode+0x124>)
 801631c:	4293      	cmp	r3, r2
 801631e:	d10e      	bne.n	801633e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	f893 381d 	ldrb.w	r3, [r3, #2077]	@ 0x81d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8016326:	2b01      	cmp	r3, #1
 8016328:	d809      	bhi.n	801633e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	f893 381e 	ldrb.w	r3, [r3, #2078]	@ 0x81e
 8016330:	2b00      	cmp	r3, #0
 8016332:	d004      	beq.n	801633e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 8016334:	68fb      	ldr	r3, [r7, #12]
 8016336:	f893 381e 	ldrb.w	r3, [r3, #2078]	@ 0x81e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801633a:	2b10      	cmp	r3, #16
 801633c:	d90e      	bls.n	801635c <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8016344:	2320      	movs	r3, #32
 8016346:	2205      	movs	r2, #5
 8016348:	6878      	ldr	r0, [r7, #4]
 801634a:	f000 fe57 	bl	8016ffc <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	2202      	movs	r2, #2
 8016352:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8016354:	6878      	ldr	r0, [r7, #4]
 8016356:	f000 f8bd 	bl	80164d4 <MSC_BOT_Abort>
 801635a:	e043      	b.n	80163e4 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	f603 031f 	addw	r3, r3, #2079	@ 0x81f
 8016368:	461a      	mov	r2, r3
 801636a:	6878      	ldr	r0, [r7, #4]
 801636c:	f000 f92e 	bl	80165cc <SCSI_ProcessCmd>
 8016370:	4603      	mov	r3, r0
 8016372:	2b00      	cmp	r3, #0
 8016374:	da0c      	bge.n	8016390 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8016376:	68fb      	ldr	r3, [r7, #12]
 8016378:	7a1b      	ldrb	r3, [r3, #8]
 801637a:	2b05      	cmp	r3, #5
 801637c:	d104      	bne.n	8016388 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801637e:	2101      	movs	r1, #1
 8016380:	6878      	ldr	r0, [r7, #4]
 8016382:	f000 f86d 	bl	8016460 <MSC_BOT_SendCSW>
 8016386:	e02d      	b.n	80163e4 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8016388:	6878      	ldr	r0, [r7, #4]
 801638a:	f000 f8a3 	bl	80164d4 <MSC_BOT_Abort>
 801638e:	e029      	b.n	80163e4 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8016390:	68fb      	ldr	r3, [r7, #12]
 8016392:	7a1b      	ldrb	r3, [r3, #8]
 8016394:	2b02      	cmp	r3, #2
 8016396:	d024      	beq.n	80163e2 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801639c:	2b01      	cmp	r3, #1
 801639e:	d020      	beq.n	80163e2 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80163a4:	2b03      	cmp	r3, #3
 80163a6:	d01c      	beq.n	80163e2 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 80163a8:	68fb      	ldr	r3, [r7, #12]
 80163aa:	68db      	ldr	r3, [r3, #12]
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d009      	beq.n	80163c4 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	f103 0110 	add.w	r1, r3, #16
 80163b6:	68fb      	ldr	r3, [r7, #12]
 80163b8:	68db      	ldr	r3, [r3, #12]
 80163ba:	461a      	mov	r2, r3
 80163bc:	6878      	ldr	r0, [r7, #4]
 80163be:	f000 f819 	bl	80163f4 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80163c2:	e00f      	b.n	80163e4 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	68db      	ldr	r3, [r3, #12]
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d104      	bne.n	80163d6 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80163cc:	2100      	movs	r1, #0
 80163ce:	6878      	ldr	r0, [r7, #4]
 80163d0:	f000 f846 	bl	8016460 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80163d4:	e006      	b.n	80163e4 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80163d6:	6878      	ldr	r0, [r7, #4]
 80163d8:	f000 f87c 	bl	80164d4 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80163dc:	e002      	b.n	80163e4 <MSC_BOT_CBW_Decode+0x118>
    return;
 80163de:	bf00      	nop
 80163e0:	e000      	b.n	80163e4 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 80163e2:	bf00      	nop
    }
  }
}
 80163e4:	3710      	adds	r7, #16
 80163e6:	46bd      	mov	sp, r7
 80163e8:	bd80      	pop	{r7, pc}
 80163ea:	bf00      	nop
 80163ec:	200000af 	.word	0x200000af
 80163f0:	43425355 	.word	0x43425355

080163f4 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80163f4:	b580      	push	{r7, lr}
 80163f6:	b086      	sub	sp, #24
 80163f8:	af00      	add	r7, sp, #0
 80163fa:	60f8      	str	r0, [r7, #12]
 80163fc:	60b9      	str	r1, [r7, #8]
 80163fe:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	32b0      	adds	r2, #176	@ 0xb0
 801640a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801640e:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8016410:	697b      	ldr	r3, [r7, #20]
 8016412:	2b00      	cmp	r3, #0
 8016414:	d01e      	beq.n	8016454 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8016416:	697b      	ldr	r3, [r7, #20]
 8016418:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 801641c:	687a      	ldr	r2, [r7, #4]
 801641e:	4293      	cmp	r3, r2
 8016420:	bf28      	it	cs
 8016422:	4613      	movcs	r3, r2
 8016424:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8016426:	697b      	ldr	r3, [r7, #20]
 8016428:	f8d3 2838 	ldr.w	r2, [r3, #2104]	@ 0x838
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	1ad2      	subs	r2, r2, r3
 8016430:	697b      	ldr	r3, [r7, #20]
 8016432:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8016436:	697b      	ldr	r3, [r7, #20]
 8016438:	2200      	movs	r2, #0
 801643a:	f883 283c 	strb.w	r2, [r3, #2108]	@ 0x83c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 801643e:	697b      	ldr	r3, [r7, #20]
 8016440:	2204      	movs	r2, #4
 8016442:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8016444:	4b05      	ldr	r3, [pc, #20]	@ (801645c <MSC_BOT_SendData+0x68>)
 8016446:	7819      	ldrb	r1, [r3, #0]
 8016448:	693b      	ldr	r3, [r7, #16]
 801644a:	68ba      	ldr	r2, [r7, #8]
 801644c:	68f8      	ldr	r0, [r7, #12]
 801644e:	f007 f9b5 	bl	801d7bc <USBD_LL_Transmit>
 8016452:	e000      	b.n	8016456 <MSC_BOT_SendData+0x62>
    return;
 8016454:	bf00      	nop
}
 8016456:	3718      	adds	r7, #24
 8016458:	46bd      	mov	sp, r7
 801645a:	bd80      	pop	{r7, pc}
 801645c:	200000ae 	.word	0x200000ae

08016460 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8016460:	b580      	push	{r7, lr}
 8016462:	b084      	sub	sp, #16
 8016464:	af00      	add	r7, sp, #0
 8016466:	6078      	str	r0, [r7, #4]
 8016468:	460b      	mov	r3, r1
 801646a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	32b0      	adds	r2, #176	@ 0xb0
 8016476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801647a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801647c:	68fb      	ldr	r3, [r7, #12]
 801647e:	2b00      	cmp	r3, #0
 8016480:	d01d      	beq.n	80164be <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	4a10      	ldr	r2, [pc, #64]	@ (80164c8 <MSC_BOT_SendCSW+0x68>)
 8016486:	f8c3 2830 	str.w	r2, [r3, #2096]	@ 0x830
  hmsc->csw.bStatus = CSW_Status;
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	78fa      	ldrb	r2, [r7, #3]
 801648e:	f883 283c 	strb.w	r2, [r3, #2108]	@ 0x83c
  hmsc->bot_state = USBD_BOT_IDLE;
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	2200      	movs	r2, #0
 8016496:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8016498:	4b0c      	ldr	r3, [pc, #48]	@ (80164cc <MSC_BOT_SendCSW+0x6c>)
 801649a:	7819      	ldrb	r1, [r3, #0]
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	f503 6203 	add.w	r2, r3, #2096	@ 0x830
 80164a2:	230d      	movs	r3, #13
 80164a4:	6878      	ldr	r0, [r7, #4]
 80164a6:	f007 f989 	bl	801d7bc <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80164aa:	4b09      	ldr	r3, [pc, #36]	@ (80164d0 <MSC_BOT_SendCSW+0x70>)
 80164ac:	7819      	ldrb	r1, [r3, #0]
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	f503 6201 	add.w	r2, r3, #2064	@ 0x810
 80164b4:	231f      	movs	r3, #31
 80164b6:	6878      	ldr	r0, [r7, #4]
 80164b8:	f007 f9a1 	bl	801d7fe <USBD_LL_PrepareReceive>
 80164bc:	e000      	b.n	80164c0 <MSC_BOT_SendCSW+0x60>
    return;
 80164be:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80164c0:	3710      	adds	r7, #16
 80164c2:	46bd      	mov	sp, r7
 80164c4:	bd80      	pop	{r7, pc}
 80164c6:	bf00      	nop
 80164c8:	53425355 	.word	0x53425355
 80164cc:	200000ae 	.word	0x200000ae
 80164d0:	200000af 	.word	0x200000af

080164d4 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80164d4:	b580      	push	{r7, lr}
 80164d6:	b084      	sub	sp, #16
 80164d8:	af00      	add	r7, sp, #0
 80164da:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	32b0      	adds	r2, #176	@ 0xb0
 80164e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164ea:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d02a      	beq.n	8016548 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d10e      	bne.n	801651a <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 80164fc:	68fb      	ldr	r3, [r7, #12]
 80164fe:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
  if ((hmsc->cbw.bmFlags == 0U) &&
 8016502:	2b00      	cmp	r3, #0
 8016504:	d009      	beq.n	801651a <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8016506:	68fb      	ldr	r3, [r7, #12]
 8016508:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 801650a:	2b00      	cmp	r3, #0
 801650c:	d105      	bne.n	801651a <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 801650e:	4b10      	ldr	r3, [pc, #64]	@ (8016550 <MSC_BOT_Abort+0x7c>)
 8016510:	781b      	ldrb	r3, [r3, #0]
 8016512:	4619      	mov	r1, r3
 8016514:	6878      	ldr	r0, [r7, #4]
 8016516:	f007 f8c8 	bl	801d6aa <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 801651a:	4b0e      	ldr	r3, [pc, #56]	@ (8016554 <MSC_BOT_Abort+0x80>)
 801651c:	781b      	ldrb	r3, [r3, #0]
 801651e:	4619      	mov	r1, r3
 8016520:	6878      	ldr	r0, [r7, #4]
 8016522:	f007 f8c2 	bl	801d6aa <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8016526:	68fb      	ldr	r3, [r7, #12]
 8016528:	7a5b      	ldrb	r3, [r3, #9]
 801652a:	2b02      	cmp	r3, #2
 801652c:	d10d      	bne.n	801654a <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 801652e:	4b09      	ldr	r3, [pc, #36]	@ (8016554 <MSC_BOT_Abort+0x80>)
 8016530:	781b      	ldrb	r3, [r3, #0]
 8016532:	4619      	mov	r1, r3
 8016534:	6878      	ldr	r0, [r7, #4]
 8016536:	f007 f8b8 	bl	801d6aa <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 801653a:	4b05      	ldr	r3, [pc, #20]	@ (8016550 <MSC_BOT_Abort+0x7c>)
 801653c:	781b      	ldrb	r3, [r3, #0]
 801653e:	4619      	mov	r1, r3
 8016540:	6878      	ldr	r0, [r7, #4]
 8016542:	f007 f8b2 	bl	801d6aa <USBD_LL_StallEP>
 8016546:	e000      	b.n	801654a <MSC_BOT_Abort+0x76>
    return;
 8016548:	bf00      	nop
  }
}
 801654a:	3710      	adds	r7, #16
 801654c:	46bd      	mov	sp, r7
 801654e:	bd80      	pop	{r7, pc}
 8016550:	200000af 	.word	0x200000af
 8016554:	200000ae 	.word	0x200000ae

08016558 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016558:	b580      	push	{r7, lr}
 801655a:	b084      	sub	sp, #16
 801655c:	af00      	add	r7, sp, #0
 801655e:	6078      	str	r0, [r7, #4]
 8016560:	460b      	mov	r3, r1
 8016562:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	32b0      	adds	r2, #176	@ 0xb0
 801656e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016572:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8016574:	68fb      	ldr	r3, [r7, #12]
 8016576:	2b00      	cmp	r3, #0
 8016578:	d01d      	beq.n	80165b6 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 801657a:	68fb      	ldr	r3, [r7, #12]
 801657c:	7a5b      	ldrb	r3, [r3, #9]
 801657e:	2b02      	cmp	r3, #2
 8016580:	d10c      	bne.n	801659c <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8016582:	4b10      	ldr	r3, [pc, #64]	@ (80165c4 <MSC_BOT_CplClrFeature+0x6c>)
 8016584:	781b      	ldrb	r3, [r3, #0]
 8016586:	4619      	mov	r1, r3
 8016588:	6878      	ldr	r0, [r7, #4]
 801658a:	f007 f88e 	bl	801d6aa <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 801658e:	4b0e      	ldr	r3, [pc, #56]	@ (80165c8 <MSC_BOT_CplClrFeature+0x70>)
 8016590:	781b      	ldrb	r3, [r3, #0]
 8016592:	4619      	mov	r1, r3
 8016594:	6878      	ldr	r0, [r7, #4]
 8016596:	f007 f888 	bl	801d6aa <USBD_LL_StallEP>
 801659a:	e00f      	b.n	80165bc <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 801659c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	da0a      	bge.n	80165ba <MSC_BOT_CplClrFeature+0x62>
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	7a5b      	ldrb	r3, [r3, #9]
 80165a8:	2b01      	cmp	r3, #1
 80165aa:	d006      	beq.n	80165ba <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80165ac:	2101      	movs	r1, #1
 80165ae:	6878      	ldr	r0, [r7, #4]
 80165b0:	f7ff ff56 	bl	8016460 <MSC_BOT_SendCSW>
 80165b4:	e002      	b.n	80165bc <MSC_BOT_CplClrFeature+0x64>
    return;
 80165b6:	bf00      	nop
 80165b8:	e000      	b.n	80165bc <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 80165ba:	bf00      	nop
  }
}
 80165bc:	3710      	adds	r7, #16
 80165be:	46bd      	mov	sp, r7
 80165c0:	bd80      	pop	{r7, pc}
 80165c2:	bf00      	nop
 80165c4:	200000ae 	.word	0x200000ae
 80165c8:	200000af 	.word	0x200000af

080165cc <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80165cc:	b580      	push	{r7, lr}
 80165ce:	b086      	sub	sp, #24
 80165d0:	af00      	add	r7, sp, #0
 80165d2:	60f8      	str	r0, [r7, #12]
 80165d4:	460b      	mov	r3, r1
 80165d6:	607a      	str	r2, [r7, #4]
 80165d8:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80165da:	68fb      	ldr	r3, [r7, #12]
 80165dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80165e0:	68fb      	ldr	r3, [r7, #12]
 80165e2:	32b0      	adds	r2, #176	@ 0xb0
 80165e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165e8:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80165ea:	693b      	ldr	r3, [r7, #16]
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d102      	bne.n	80165f6 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 80165f0:	f04f 33ff 	mov.w	r3, #4294967295
 80165f4:	e168      	b.n	80168c8 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	781b      	ldrb	r3, [r3, #0]
 80165fa:	2baa      	cmp	r3, #170	@ 0xaa
 80165fc:	f000 8144 	beq.w	8016888 <SCSI_ProcessCmd+0x2bc>
 8016600:	2baa      	cmp	r3, #170	@ 0xaa
 8016602:	f300 8153 	bgt.w	80168ac <SCSI_ProcessCmd+0x2e0>
 8016606:	2ba8      	cmp	r3, #168	@ 0xa8
 8016608:	f000 812c 	beq.w	8016864 <SCSI_ProcessCmd+0x298>
 801660c:	2ba8      	cmp	r3, #168	@ 0xa8
 801660e:	f300 814d 	bgt.w	80168ac <SCSI_ProcessCmd+0x2e0>
 8016612:	2b5a      	cmp	r3, #90	@ 0x5a
 8016614:	f300 80c0 	bgt.w	8016798 <SCSI_ProcessCmd+0x1cc>
 8016618:	2b00      	cmp	r3, #0
 801661a:	f2c0 8147 	blt.w	80168ac <SCSI_ProcessCmd+0x2e0>
 801661e:	2b5a      	cmp	r3, #90	@ 0x5a
 8016620:	f200 8144 	bhi.w	80168ac <SCSI_ProcessCmd+0x2e0>
 8016624:	a201      	add	r2, pc, #4	@ (adr r2, 801662c <SCSI_ProcessCmd+0x60>)
 8016626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801662a:	bf00      	nop
 801662c:	0801679f 	.word	0x0801679f
 8016630:	080168ad 	.word	0x080168ad
 8016634:	080168ad 	.word	0x080168ad
 8016638:	080167b1 	.word	0x080167b1
 801663c:	080168ad 	.word	0x080168ad
 8016640:	080168ad 	.word	0x080168ad
 8016644:	080168ad 	.word	0x080168ad
 8016648:	080168ad 	.word	0x080168ad
 801664c:	080168ad 	.word	0x080168ad
 8016650:	080168ad 	.word	0x080168ad
 8016654:	080168ad 	.word	0x080168ad
 8016658:	080168ad 	.word	0x080168ad
 801665c:	080168ad 	.word	0x080168ad
 8016660:	080168ad 	.word	0x080168ad
 8016664:	080168ad 	.word	0x080168ad
 8016668:	080168ad 	.word	0x080168ad
 801666c:	080168ad 	.word	0x080168ad
 8016670:	080168ad 	.word	0x080168ad
 8016674:	080167c3 	.word	0x080167c3
 8016678:	080168ad 	.word	0x080168ad
 801667c:	080168ad 	.word	0x080168ad
 8016680:	080168ad 	.word	0x080168ad
 8016684:	080168ad 	.word	0x080168ad
 8016688:	080168ad 	.word	0x080168ad
 801668c:	080168ad 	.word	0x080168ad
 8016690:	080168ad 	.word	0x080168ad
 8016694:	080167f9 	.word	0x080167f9
 8016698:	080167d5 	.word	0x080167d5
 801669c:	080168ad 	.word	0x080168ad
 80166a0:	080168ad 	.word	0x080168ad
 80166a4:	080167e7 	.word	0x080167e7
 80166a8:	080168ad 	.word	0x080168ad
 80166ac:	080168ad 	.word	0x080168ad
 80166b0:	080168ad 	.word	0x080168ad
 80166b4:	080168ad 	.word	0x080168ad
 80166b8:	0801681d 	.word	0x0801681d
 80166bc:	080168ad 	.word	0x080168ad
 80166c0:	0801682f 	.word	0x0801682f
 80166c4:	080168ad 	.word	0x080168ad
 80166c8:	080168ad 	.word	0x080168ad
 80166cc:	08016853 	.word	0x08016853
 80166d0:	080168ad 	.word	0x080168ad
 80166d4:	08016877 	.word	0x08016877
 80166d8:	080168ad 	.word	0x080168ad
 80166dc:	080168ad 	.word	0x080168ad
 80166e0:	080168ad 	.word	0x080168ad
 80166e4:	080168ad 	.word	0x080168ad
 80166e8:	0801689b 	.word	0x0801689b
 80166ec:	080168ad 	.word	0x080168ad
 80166f0:	080168ad 	.word	0x080168ad
 80166f4:	080168ad 	.word	0x080168ad
 80166f8:	080168ad 	.word	0x080168ad
 80166fc:	080168ad 	.word	0x080168ad
 8016700:	080168ad 	.word	0x080168ad
 8016704:	080168ad 	.word	0x080168ad
 8016708:	080168ad 	.word	0x080168ad
 801670c:	080168ad 	.word	0x080168ad
 8016710:	080168ad 	.word	0x080168ad
 8016714:	080168ad 	.word	0x080168ad
 8016718:	080168ad 	.word	0x080168ad
 801671c:	080168ad 	.word	0x080168ad
 8016720:	080168ad 	.word	0x080168ad
 8016724:	080168ad 	.word	0x080168ad
 8016728:	080168ad 	.word	0x080168ad
 801672c:	080168ad 	.word	0x080168ad
 8016730:	080168ad 	.word	0x080168ad
 8016734:	080168ad 	.word	0x080168ad
 8016738:	080168ad 	.word	0x080168ad
 801673c:	080168ad 	.word	0x080168ad
 8016740:	080168ad 	.word	0x080168ad
 8016744:	080168ad 	.word	0x080168ad
 8016748:	080168ad 	.word	0x080168ad
 801674c:	080168ad 	.word	0x080168ad
 8016750:	080168ad 	.word	0x080168ad
 8016754:	080168ad 	.word	0x080168ad
 8016758:	080168ad 	.word	0x080168ad
 801675c:	080168ad 	.word	0x080168ad
 8016760:	080168ad 	.word	0x080168ad
 8016764:	080168ad 	.word	0x080168ad
 8016768:	080168ad 	.word	0x080168ad
 801676c:	080168ad 	.word	0x080168ad
 8016770:	080168ad 	.word	0x080168ad
 8016774:	080168ad 	.word	0x080168ad
 8016778:	080168ad 	.word	0x080168ad
 801677c:	080168ad 	.word	0x080168ad
 8016780:	080168ad 	.word	0x080168ad
 8016784:	080168ad 	.word	0x080168ad
 8016788:	080168ad 	.word	0x080168ad
 801678c:	080168ad 	.word	0x080168ad
 8016790:	080168ad 	.word	0x080168ad
 8016794:	0801680b 	.word	0x0801680b
 8016798:	2b9e      	cmp	r3, #158	@ 0x9e
 801679a:	d051      	beq.n	8016840 <SCSI_ProcessCmd+0x274>
 801679c:	e086      	b.n	80168ac <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 801679e:	7afb      	ldrb	r3, [r7, #11]
 80167a0:	687a      	ldr	r2, [r7, #4]
 80167a2:	4619      	mov	r1, r3
 80167a4:	68f8      	ldr	r0, [r7, #12]
 80167a6:	f000 f893 	bl	80168d0 <SCSI_TestUnitReady>
 80167aa:	4603      	mov	r3, r0
 80167ac:	75fb      	strb	r3, [r7, #23]
      break;
 80167ae:	e089      	b.n	80168c4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 80167b0:	7afb      	ldrb	r3, [r7, #11]
 80167b2:	687a      	ldr	r2, [r7, #4]
 80167b4:	4619      	mov	r1, r3
 80167b6:	68f8      	ldr	r0, [r7, #12]
 80167b8:	f000 fb9a 	bl	8016ef0 <SCSI_RequestSense>
 80167bc:	4603      	mov	r3, r0
 80167be:	75fb      	strb	r3, [r7, #23]
      break;
 80167c0:	e080      	b.n	80168c4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 80167c2:	7afb      	ldrb	r3, [r7, #11]
 80167c4:	687a      	ldr	r2, [r7, #4]
 80167c6:	4619      	mov	r1, r3
 80167c8:	68f8      	ldr	r0, [r7, #12]
 80167ca:	f000 f8db 	bl	8016984 <SCSI_Inquiry>
 80167ce:	4603      	mov	r3, r0
 80167d0:	75fb      	strb	r3, [r7, #23]
      break;
 80167d2:	e077      	b.n	80168c4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 80167d4:	7afb      	ldrb	r3, [r7, #11]
 80167d6:	687a      	ldr	r2, [r7, #4]
 80167d8:	4619      	mov	r1, r3
 80167da:	68f8      	ldr	r0, [r7, #12]
 80167dc:	f000 fc5c 	bl	8017098 <SCSI_StartStopUnit>
 80167e0:	4603      	mov	r3, r0
 80167e2:	75fb      	strb	r3, [r7, #23]
      break;
 80167e4:	e06e      	b.n	80168c4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 80167e6:	7afb      	ldrb	r3, [r7, #11]
 80167e8:	687a      	ldr	r2, [r7, #4]
 80167ea:	4619      	mov	r1, r3
 80167ec:	68f8      	ldr	r0, [r7, #12]
 80167ee:	f000 fca8 	bl	8017142 <SCSI_AllowPreventRemovable>
 80167f2:	4603      	mov	r3, r0
 80167f4:	75fb      	strb	r3, [r7, #23]
      break;
 80167f6:	e065      	b.n	80168c4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 80167f8:	7afb      	ldrb	r3, [r7, #11]
 80167fa:	687a      	ldr	r2, [r7, #4]
 80167fc:	4619      	mov	r1, r3
 80167fe:	68f8      	ldr	r0, [r7, #12]
 8016800:	f000 faea 	bl	8016dd8 <SCSI_ModeSense6>
 8016804:	4603      	mov	r3, r0
 8016806:	75fb      	strb	r3, [r7, #23]
      break;
 8016808:	e05c      	b.n	80168c4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 801680a:	7afb      	ldrb	r3, [r7, #11]
 801680c:	687a      	ldr	r2, [r7, #4]
 801680e:	4619      	mov	r1, r3
 8016810:	68f8      	ldr	r0, [r7, #12]
 8016812:	f000 fb27 	bl	8016e64 <SCSI_ModeSense10>
 8016816:	4603      	mov	r3, r0
 8016818:	75fb      	strb	r3, [r7, #23]
      break;
 801681a:	e053      	b.n	80168c4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 801681c:	7afb      	ldrb	r3, [r7, #11]
 801681e:	687a      	ldr	r2, [r7, #4]
 8016820:	4619      	mov	r1, r3
 8016822:	68f8      	ldr	r0, [r7, #12]
 8016824:	f000 fa5c 	bl	8016ce0 <SCSI_ReadFormatCapacity>
 8016828:	4603      	mov	r3, r0
 801682a:	75fb      	strb	r3, [r7, #23]
      break;
 801682c:	e04a      	b.n	80168c4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 801682e:	7afb      	ldrb	r3, [r7, #11]
 8016830:	687a      	ldr	r2, [r7, #4]
 8016832:	4619      	mov	r1, r3
 8016834:	68f8      	ldr	r0, [r7, #12]
 8016836:	f000 f921 	bl	8016a7c <SCSI_ReadCapacity10>
 801683a:	4603      	mov	r3, r0
 801683c:	75fb      	strb	r3, [r7, #23]
      break;
 801683e:	e041      	b.n	80168c4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8016840:	7afb      	ldrb	r3, [r7, #11]
 8016842:	687a      	ldr	r2, [r7, #4]
 8016844:	4619      	mov	r1, r3
 8016846:	68f8      	ldr	r0, [r7, #12]
 8016848:	f000 f996 	bl	8016b78 <SCSI_ReadCapacity16>
 801684c:	4603      	mov	r3, r0
 801684e:	75fb      	strb	r3, [r7, #23]
      break;
 8016850:	e038      	b.n	80168c4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8016852:	7afb      	ldrb	r3, [r7, #11]
 8016854:	687a      	ldr	r2, [r7, #4]
 8016856:	4619      	mov	r1, r3
 8016858:	68f8      	ldr	r0, [r7, #12]
 801685a:	f000 fc9f 	bl	801719c <SCSI_Read10>
 801685e:	4603      	mov	r3, r0
 8016860:	75fb      	strb	r3, [r7, #23]
      break;
 8016862:	e02f      	b.n	80168c4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8016864:	7afb      	ldrb	r3, [r7, #11]
 8016866:	687a      	ldr	r2, [r7, #4]
 8016868:	4619      	mov	r1, r3
 801686a:	68f8      	ldr	r0, [r7, #12]
 801686c:	f000 fd40 	bl	80172f0 <SCSI_Read12>
 8016870:	4603      	mov	r3, r0
 8016872:	75fb      	strb	r3, [r7, #23]
      break;
 8016874:	e026      	b.n	80168c4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8016876:	7afb      	ldrb	r3, [r7, #11]
 8016878:	687a      	ldr	r2, [r7, #4]
 801687a:	4619      	mov	r1, r3
 801687c:	68f8      	ldr	r0, [r7, #12]
 801687e:	f000 fdeb 	bl	8017458 <SCSI_Write10>
 8016882:	4603      	mov	r3, r0
 8016884:	75fb      	strb	r3, [r7, #23]
      break;
 8016886:	e01d      	b.n	80168c4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8016888:	7afb      	ldrb	r3, [r7, #11]
 801688a:	687a      	ldr	r2, [r7, #4]
 801688c:	4619      	mov	r1, r3
 801688e:	68f8      	ldr	r0, [r7, #12]
 8016890:	f000 feb8 	bl	8017604 <SCSI_Write12>
 8016894:	4603      	mov	r3, r0
 8016896:	75fb      	strb	r3, [r7, #23]
      break;
 8016898:	e014      	b.n	80168c4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 801689a:	7afb      	ldrb	r3, [r7, #11]
 801689c:	687a      	ldr	r2, [r7, #4]
 801689e:	4619      	mov	r1, r3
 80168a0:	68f8      	ldr	r0, [r7, #12]
 80168a2:	f000 ff95 	bl	80177d0 <SCSI_Verify10>
 80168a6:	4603      	mov	r3, r0
 80168a8:	75fb      	strb	r3, [r7, #23]
      break;
 80168aa:	e00b      	b.n	80168c4 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80168ac:	7af9      	ldrb	r1, [r7, #11]
 80168ae:	2320      	movs	r3, #32
 80168b0:	2205      	movs	r2, #5
 80168b2:	68f8      	ldr	r0, [r7, #12]
 80168b4:	f000 fba2 	bl	8016ffc <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80168b8:	693b      	ldr	r3, [r7, #16]
 80168ba:	2202      	movs	r2, #2
 80168bc:	725a      	strb	r2, [r3, #9]
      ret = -1;
 80168be:	23ff      	movs	r3, #255	@ 0xff
 80168c0:	75fb      	strb	r3, [r7, #23]
      break;
 80168c2:	bf00      	nop
  }

  return ret;
 80168c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80168c8:	4618      	mov	r0, r3
 80168ca:	3718      	adds	r7, #24
 80168cc:	46bd      	mov	sp, r7
 80168ce:	bd80      	pop	{r7, pc}

080168d0 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80168d0:	b580      	push	{r7, lr}
 80168d2:	b086      	sub	sp, #24
 80168d4:	af00      	add	r7, sp, #0
 80168d6:	60f8      	str	r0, [r7, #12]
 80168d8:	460b      	mov	r3, r1
 80168da:	607a      	str	r2, [r7, #4]
 80168dc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	32b0      	adds	r2, #176	@ 0xb0
 80168e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80168ec:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80168ee:	697b      	ldr	r3, [r7, #20]
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d102      	bne.n	80168fa <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 80168f4:	f04f 33ff 	mov.w	r3, #4294967295
 80168f8:	e03f      	b.n	801697a <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 80168fa:	697b      	ldr	r3, [r7, #20]
 80168fc:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8016900:	2b00      	cmp	r3, #0
 8016902:	d00a      	beq.n	801691a <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8016904:	697b      	ldr	r3, [r7, #20]
 8016906:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 801690a:	2320      	movs	r3, #32
 801690c:	2205      	movs	r2, #5
 801690e:	68f8      	ldr	r0, [r7, #12]
 8016910:	f000 fb74 	bl	8016ffc <SCSI_SenseCode>

    return -1;
 8016914:	f04f 33ff 	mov.w	r3, #4294967295
 8016918:	e02f      	b.n	801697a <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801691a:	697b      	ldr	r3, [r7, #20]
 801691c:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8016920:	2b02      	cmp	r3, #2
 8016922:	d10b      	bne.n	801693c <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8016924:	7af9      	ldrb	r1, [r7, #11]
 8016926:	233a      	movs	r3, #58	@ 0x3a
 8016928:	2202      	movs	r2, #2
 801692a:	68f8      	ldr	r0, [r7, #12]
 801692c:	f000 fb66 	bl	8016ffc <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8016930:	697b      	ldr	r3, [r7, #20]
 8016932:	2205      	movs	r2, #5
 8016934:	721a      	strb	r2, [r3, #8]
    return -1;
 8016936:	f04f 33ff 	mov.w	r3, #4294967295
 801693a:	e01e      	b.n	801697a <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016942:	68fa      	ldr	r2, [r7, #12]
 8016944:	33b0      	adds	r3, #176	@ 0xb0
 8016946:	009b      	lsls	r3, r3, #2
 8016948:	4413      	add	r3, r2
 801694a:	685b      	ldr	r3, [r3, #4]
 801694c:	689b      	ldr	r3, [r3, #8]
 801694e:	7afa      	ldrb	r2, [r7, #11]
 8016950:	4610      	mov	r0, r2
 8016952:	4798      	blx	r3
 8016954:	4603      	mov	r3, r0
 8016956:	2b00      	cmp	r3, #0
 8016958:	d00b      	beq.n	8016972 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801695a:	7af9      	ldrb	r1, [r7, #11]
 801695c:	233a      	movs	r3, #58	@ 0x3a
 801695e:	2202      	movs	r2, #2
 8016960:	68f8      	ldr	r0, [r7, #12]
 8016962:	f000 fb4b 	bl	8016ffc <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8016966:	697b      	ldr	r3, [r7, #20]
 8016968:	2205      	movs	r2, #5
 801696a:	721a      	strb	r2, [r3, #8]

    return -1;
 801696c:	f04f 33ff 	mov.w	r3, #4294967295
 8016970:	e003      	b.n	801697a <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 8016972:	697b      	ldr	r3, [r7, #20]
 8016974:	2200      	movs	r2, #0
 8016976:	60da      	str	r2, [r3, #12]

  return 0;
 8016978:	2300      	movs	r3, #0
}
 801697a:	4618      	mov	r0, r3
 801697c:	3718      	adds	r7, #24
 801697e:	46bd      	mov	sp, r7
 8016980:	bd80      	pop	{r7, pc}
	...

08016984 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016984:	b580      	push	{r7, lr}
 8016986:	b088      	sub	sp, #32
 8016988:	af00      	add	r7, sp, #0
 801698a:	60f8      	str	r0, [r7, #12]
 801698c:	460b      	mov	r3, r1
 801698e:	607a      	str	r2, [r7, #4]
 8016990:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	32b0      	adds	r2, #176	@ 0xb0
 801699c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80169a0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80169a2:	69bb      	ldr	r3, [r7, #24]
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d102      	bne.n	80169ae <SCSI_Inquiry+0x2a>
  {
    return -1;
 80169a8:	f04f 33ff 	mov.w	r3, #4294967295
 80169ac:	e05e      	b.n	8016a6c <SCSI_Inquiry+0xe8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80169ae:	69bb      	ldr	r3, [r7, #24]
 80169b0:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d10a      	bne.n	80169ce <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80169b8:	69bb      	ldr	r3, [r7, #24]
 80169ba:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80169be:	2320      	movs	r3, #32
 80169c0:	2205      	movs	r2, #5
 80169c2:	68f8      	ldr	r0, [r7, #12]
 80169c4:	f000 fb1a 	bl	8016ffc <SCSI_SenseCode>
    return -1;
 80169c8:	f04f 33ff 	mov.w	r3, #4294967295
 80169cc:	e04e      	b.n	8016a6c <SCSI_Inquiry+0xe8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	3301      	adds	r3, #1
 80169d2:	781b      	ldrb	r3, [r3, #0]
 80169d4:	f003 0301 	and.w	r3, r3, #1
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d020      	beq.n	8016a1e <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	3302      	adds	r3, #2
 80169e0:	781b      	ldrb	r3, [r3, #0]
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d105      	bne.n	80169f2 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 80169e6:	2206      	movs	r2, #6
 80169e8:	4922      	ldr	r1, [pc, #136]	@ (8016a74 <SCSI_Inquiry+0xf0>)
 80169ea:	69b8      	ldr	r0, [r7, #24]
 80169ec:	f001 f876 	bl	8017adc <SCSI_UpdateBotData>
 80169f0:	e03b      	b.n	8016a6a <SCSI_Inquiry+0xe6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	3302      	adds	r3, #2
 80169f6:	781b      	ldrb	r3, [r3, #0]
 80169f8:	2b80      	cmp	r3, #128	@ 0x80
 80169fa:	d105      	bne.n	8016a08 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 80169fc:	2208      	movs	r2, #8
 80169fe:	491e      	ldr	r1, [pc, #120]	@ (8016a78 <SCSI_Inquiry+0xf4>)
 8016a00:	69b8      	ldr	r0, [r7, #24]
 8016a02:	f001 f86b 	bl	8017adc <SCSI_UpdateBotData>
 8016a06:	e030      	b.n	8016a6a <SCSI_Inquiry+0xe6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8016a08:	69bb      	ldr	r3, [r7, #24]
 8016a0a:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8016a0e:	2324      	movs	r3, #36	@ 0x24
 8016a10:	2205      	movs	r2, #5
 8016a12:	68f8      	ldr	r0, [r7, #12]
 8016a14:	f000 faf2 	bl	8016ffc <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8016a18:	f04f 33ff 	mov.w	r3, #4294967295
 8016a1c:	e026      	b.n	8016a6c <SCSI_Inquiry+0xe8>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8016a1e:	68fb      	ldr	r3, [r7, #12]
 8016a20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016a24:	68fa      	ldr	r2, [r7, #12]
 8016a26:	33b0      	adds	r3, #176	@ 0xb0
 8016a28:	009b      	lsls	r3, r3, #2
 8016a2a:	4413      	add	r3, r2
 8016a2c:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8016a2e:	69d9      	ldr	r1, [r3, #28]
 8016a30:	7afa      	ldrb	r2, [r7, #11]
 8016a32:	4613      	mov	r3, r2
 8016a34:	00db      	lsls	r3, r3, #3
 8016a36:	4413      	add	r3, r2
 8016a38:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8016a3a:	440b      	add	r3, r1
 8016a3c:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8016a3e:	697b      	ldr	r3, [r7, #20]
 8016a40:	3304      	adds	r3, #4
 8016a42:	781b      	ldrb	r3, [r3, #0]
 8016a44:	3305      	adds	r3, #5
 8016a46:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	3304      	adds	r3, #4
 8016a4c:	781b      	ldrb	r3, [r3, #0]
 8016a4e:	461a      	mov	r2, r3
 8016a50:	8bfb      	ldrh	r3, [r7, #30]
 8016a52:	4293      	cmp	r3, r2
 8016a54:	d303      	bcc.n	8016a5e <SCSI_Inquiry+0xda>
    {
      len = params[4];
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	3304      	adds	r3, #4
 8016a5a:	781b      	ldrb	r3, [r3, #0]
 8016a5c:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8016a5e:	8bfb      	ldrh	r3, [r7, #30]
 8016a60:	461a      	mov	r2, r3
 8016a62:	6979      	ldr	r1, [r7, #20]
 8016a64:	69b8      	ldr	r0, [r7, #24]
 8016a66:	f001 f839 	bl	8017adc <SCSI_UpdateBotData>
  }

  return 0;
 8016a6a:	2300      	movs	r3, #0
}
 8016a6c:	4618      	mov	r0, r3
 8016a6e:	3720      	adds	r7, #32
 8016a70:	46bd      	mov	sp, r7
 8016a72:	bd80      	pop	{r7, pc}
 8016a74:	200000b0 	.word	0x200000b0
 8016a78:	200000b8 	.word	0x200000b8

08016a7c <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016a7c:	b580      	push	{r7, lr}
 8016a7e:	b086      	sub	sp, #24
 8016a80:	af00      	add	r7, sp, #0
 8016a82:	60f8      	str	r0, [r7, #12]
 8016a84:	460b      	mov	r3, r1
 8016a86:	607a      	str	r2, [r7, #4]
 8016a88:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016a8a:	68fb      	ldr	r3, [r7, #12]
 8016a8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	32b0      	adds	r2, #176	@ 0xb0
 8016a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a98:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8016a9a:	697b      	ldr	r3, [r7, #20]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d102      	bne.n	8016aa6 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8016aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8016aa4:	e064      	b.n	8016b70 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8016aa6:	68fb      	ldr	r3, [r7, #12]
 8016aa8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016aac:	68fa      	ldr	r2, [r7, #12]
 8016aae:	33b0      	adds	r3, #176	@ 0xb0
 8016ab0:	009b      	lsls	r3, r3, #2
 8016ab2:	4413      	add	r3, r2
 8016ab4:	685b      	ldr	r3, [r3, #4]
 8016ab6:	685b      	ldr	r3, [r3, #4]
 8016ab8:	697a      	ldr	r2, [r7, #20]
 8016aba:	f602 0168 	addw	r1, r2, #2152	@ 0x868
 8016abe:	697a      	ldr	r2, [r7, #20]
 8016ac0:	f602 0264 	addw	r2, r2, #2148	@ 0x864
 8016ac4:	7af8      	ldrb	r0, [r7, #11]
 8016ac6:	4798      	blx	r3
 8016ac8:	4603      	mov	r3, r0
 8016aca:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8016acc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d104      	bne.n	8016ade <SCSI_ReadCapacity10+0x62>
 8016ad4:	697b      	ldr	r3, [r7, #20]
 8016ad6:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8016ada:	2b02      	cmp	r3, #2
 8016adc:	d108      	bne.n	8016af0 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8016ade:	7af9      	ldrb	r1, [r7, #11]
 8016ae0:	233a      	movs	r3, #58	@ 0x3a
 8016ae2:	2202      	movs	r2, #2
 8016ae4:	68f8      	ldr	r0, [r7, #12]
 8016ae6:	f000 fa89 	bl	8016ffc <SCSI_SenseCode>
    return -1;
 8016aea:	f04f 33ff 	mov.w	r3, #4294967295
 8016aee:	e03f      	b.n	8016b70 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8016af0:	697b      	ldr	r3, [r7, #20]
 8016af2:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016af6:	3b01      	subs	r3, #1
 8016af8:	0e1b      	lsrs	r3, r3, #24
 8016afa:	b2da      	uxtb	r2, r3
 8016afc:	697b      	ldr	r3, [r7, #20]
 8016afe:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8016b00:	697b      	ldr	r3, [r7, #20]
 8016b02:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016b06:	3b01      	subs	r3, #1
 8016b08:	0c1b      	lsrs	r3, r3, #16
 8016b0a:	b2da      	uxtb	r2, r3
 8016b0c:	697b      	ldr	r3, [r7, #20]
 8016b0e:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8016b10:	697b      	ldr	r3, [r7, #20]
 8016b12:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016b16:	3b01      	subs	r3, #1
 8016b18:	0a1b      	lsrs	r3, r3, #8
 8016b1a:	b2da      	uxtb	r2, r3
 8016b1c:	697b      	ldr	r3, [r7, #20]
 8016b1e:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8016b20:	697b      	ldr	r3, [r7, #20]
 8016b22:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016b26:	b2db      	uxtb	r3, r3
 8016b28:	3b01      	subs	r3, #1
 8016b2a:	b2da      	uxtb	r2, r3
 8016b2c:	697b      	ldr	r3, [r7, #20]
 8016b2e:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8016b30:	697b      	ldr	r3, [r7, #20]
 8016b32:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016b36:	161b      	asrs	r3, r3, #24
 8016b38:	b2da      	uxtb	r2, r3
 8016b3a:	697b      	ldr	r3, [r7, #20]
 8016b3c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8016b3e:	697b      	ldr	r3, [r7, #20]
 8016b40:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016b44:	141b      	asrs	r3, r3, #16
 8016b46:	b2da      	uxtb	r2, r3
 8016b48:	697b      	ldr	r3, [r7, #20]
 8016b4a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8016b4c:	697b      	ldr	r3, [r7, #20]
 8016b4e:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016b52:	0a1b      	lsrs	r3, r3, #8
 8016b54:	b29b      	uxth	r3, r3
 8016b56:	b2da      	uxtb	r2, r3
 8016b58:	697b      	ldr	r3, [r7, #20]
 8016b5a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8016b5c:	697b      	ldr	r3, [r7, #20]
 8016b5e:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016b62:	b2da      	uxtb	r2, r3
 8016b64:	697b      	ldr	r3, [r7, #20]
 8016b66:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8016b68:	697b      	ldr	r3, [r7, #20]
 8016b6a:	2208      	movs	r2, #8
 8016b6c:	60da      	str	r2, [r3, #12]

  return 0;
 8016b6e:	2300      	movs	r3, #0

}
 8016b70:	4618      	mov	r0, r3
 8016b72:	3718      	adds	r7, #24
 8016b74:	46bd      	mov	sp, r7
 8016b76:	bd80      	pop	{r7, pc}

08016b78 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016b78:	b580      	push	{r7, lr}
 8016b7a:	b088      	sub	sp, #32
 8016b7c:	af00      	add	r7, sp, #0
 8016b7e:	60f8      	str	r0, [r7, #12]
 8016b80:	460b      	mov	r3, r1
 8016b82:	607a      	str	r2, [r7, #4]
 8016b84:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016b8c:	68fb      	ldr	r3, [r7, #12]
 8016b8e:	32b0      	adds	r2, #176	@ 0xb0
 8016b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b94:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8016b96:	69bb      	ldr	r3, [r7, #24]
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d102      	bne.n	8016ba2 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8016b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8016ba0:	e09a      	b.n	8016cd8 <SCSI_ReadCapacity16+0x160>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8016ba2:	68fb      	ldr	r3, [r7, #12]
 8016ba4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016ba8:	68fa      	ldr	r2, [r7, #12]
 8016baa:	33b0      	adds	r3, #176	@ 0xb0
 8016bac:	009b      	lsls	r3, r3, #2
 8016bae:	4413      	add	r3, r2
 8016bb0:	685b      	ldr	r3, [r3, #4]
 8016bb2:	685b      	ldr	r3, [r3, #4]
 8016bb4:	69ba      	ldr	r2, [r7, #24]
 8016bb6:	f602 0168 	addw	r1, r2, #2152	@ 0x868
 8016bba:	69ba      	ldr	r2, [r7, #24]
 8016bbc:	f602 0264 	addw	r2, r2, #2148	@ 0x864
 8016bc0:	7af8      	ldrb	r0, [r7, #11]
 8016bc2:	4798      	blx	r3
 8016bc4:	4603      	mov	r3, r0
 8016bc6:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8016bc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d104      	bne.n	8016bda <SCSI_ReadCapacity16+0x62>
 8016bd0:	69bb      	ldr	r3, [r7, #24]
 8016bd2:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8016bd6:	2b02      	cmp	r3, #2
 8016bd8:	d108      	bne.n	8016bec <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8016bda:	7af9      	ldrb	r1, [r7, #11]
 8016bdc:	233a      	movs	r3, #58	@ 0x3a
 8016bde:	2202      	movs	r2, #2
 8016be0:	68f8      	ldr	r0, [r7, #12]
 8016be2:	f000 fa0b 	bl	8016ffc <SCSI_SenseCode>
    return -1;
 8016be6:	f04f 33ff 	mov.w	r3, #4294967295
 8016bea:	e075      	b.n	8016cd8 <SCSI_ReadCapacity16+0x160>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	330a      	adds	r3, #10
 8016bf0:	781b      	ldrb	r3, [r3, #0]
 8016bf2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	330b      	adds	r3, #11
 8016bf8:	781b      	ldrb	r3, [r3, #0]
 8016bfa:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016bfc:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	330c      	adds	r3, #12
 8016c02:	781b      	ldrb	r3, [r3, #0]
 8016c04:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8016c06:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8016c08:	687a      	ldr	r2, [r7, #4]
 8016c0a:	320d      	adds	r2, #13
 8016c0c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8016c0e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016c10:	69bb      	ldr	r3, [r7, #24]
 8016c12:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8016c14:	2300      	movs	r3, #0
 8016c16:	61fb      	str	r3, [r7, #28]
 8016c18:	e008      	b.n	8016c2c <SCSI_ReadCapacity16+0xb4>
  {
    hmsc->bot_data[idx] = 0U;
 8016c1a:	69ba      	ldr	r2, [r7, #24]
 8016c1c:	69fb      	ldr	r3, [r7, #28]
 8016c1e:	4413      	add	r3, r2
 8016c20:	3310      	adds	r3, #16
 8016c22:	2200      	movs	r2, #0
 8016c24:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8016c26:	69fb      	ldr	r3, [r7, #28]
 8016c28:	3301      	adds	r3, #1
 8016c2a:	61fb      	str	r3, [r7, #28]
 8016c2c:	69bb      	ldr	r3, [r7, #24]
 8016c2e:	68db      	ldr	r3, [r3, #12]
 8016c30:	69fa      	ldr	r2, [r7, #28]
 8016c32:	429a      	cmp	r2, r3
 8016c34:	d3f1      	bcc.n	8016c1a <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8016c36:	69bb      	ldr	r3, [r7, #24]
 8016c38:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016c3c:	3b01      	subs	r3, #1
 8016c3e:	0e1b      	lsrs	r3, r3, #24
 8016c40:	b2da      	uxtb	r2, r3
 8016c42:	69bb      	ldr	r3, [r7, #24]
 8016c44:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8016c46:	69bb      	ldr	r3, [r7, #24]
 8016c48:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016c4c:	3b01      	subs	r3, #1
 8016c4e:	0c1b      	lsrs	r3, r3, #16
 8016c50:	b2da      	uxtb	r2, r3
 8016c52:	69bb      	ldr	r3, [r7, #24]
 8016c54:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8016c56:	69bb      	ldr	r3, [r7, #24]
 8016c58:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016c5c:	3b01      	subs	r3, #1
 8016c5e:	0a1b      	lsrs	r3, r3, #8
 8016c60:	b2da      	uxtb	r2, r3
 8016c62:	69bb      	ldr	r3, [r7, #24]
 8016c64:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8016c66:	69bb      	ldr	r3, [r7, #24]
 8016c68:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016c6c:	b2db      	uxtb	r3, r3
 8016c6e:	3b01      	subs	r3, #1
 8016c70:	b2da      	uxtb	r2, r3
 8016c72:	69bb      	ldr	r3, [r7, #24]
 8016c74:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8016c76:	69bb      	ldr	r3, [r7, #24]
 8016c78:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016c7c:	161b      	asrs	r3, r3, #24
 8016c7e:	b2da      	uxtb	r2, r3
 8016c80:	69bb      	ldr	r3, [r7, #24]
 8016c82:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8016c84:	69bb      	ldr	r3, [r7, #24]
 8016c86:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016c8a:	141b      	asrs	r3, r3, #16
 8016c8c:	b2da      	uxtb	r2, r3
 8016c8e:	69bb      	ldr	r3, [r7, #24]
 8016c90:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8016c92:	69bb      	ldr	r3, [r7, #24]
 8016c94:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016c98:	0a1b      	lsrs	r3, r3, #8
 8016c9a:	b29b      	uxth	r3, r3
 8016c9c:	b2da      	uxtb	r2, r3
 8016c9e:	69bb      	ldr	r3, [r7, #24]
 8016ca0:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8016ca2:	69bb      	ldr	r3, [r7, #24]
 8016ca4:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016ca8:	b2da      	uxtb	r2, r3
 8016caa:	69bb      	ldr	r3, [r7, #24]
 8016cac:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	330a      	adds	r3, #10
 8016cb2:	781b      	ldrb	r3, [r3, #0]
 8016cb4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	330b      	adds	r3, #11
 8016cba:	781b      	ldrb	r3, [r3, #0]
 8016cbc:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016cbe:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	330c      	adds	r3, #12
 8016cc4:	781b      	ldrb	r3, [r3, #0]
 8016cc6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8016cc8:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8016cca:	687a      	ldr	r2, [r7, #4]
 8016ccc:	320d      	adds	r2, #13
 8016cce:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8016cd0:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016cd2:	69bb      	ldr	r3, [r7, #24]
 8016cd4:	60da      	str	r2, [r3, #12]

  return 0;
 8016cd6:	2300      	movs	r3, #0
}
 8016cd8:	4618      	mov	r0, r3
 8016cda:	3720      	adds	r7, #32
 8016cdc:	46bd      	mov	sp, r7
 8016cde:	bd80      	pop	{r7, pc}

08016ce0 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016ce0:	b580      	push	{r7, lr}
 8016ce2:	b088      	sub	sp, #32
 8016ce4:	af00      	add	r7, sp, #0
 8016ce6:	60f8      	str	r0, [r7, #12]
 8016ce8:	460b      	mov	r3, r1
 8016cea:	607a      	str	r2, [r7, #4]
 8016cec:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016cf4:	68fb      	ldr	r3, [r7, #12]
 8016cf6:	32b0      	adds	r2, #176	@ 0xb0
 8016cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016cfc:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8016cfe:	69bb      	ldr	r3, [r7, #24]
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d102      	bne.n	8016d0a <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8016d04:	f04f 33ff 	mov.w	r3, #4294967295
 8016d08:	e061      	b.n	8016dce <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8016d0a:	68fb      	ldr	r3, [r7, #12]
 8016d0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016d10:	68fa      	ldr	r2, [r7, #12]
 8016d12:	33b0      	adds	r3, #176	@ 0xb0
 8016d14:	009b      	lsls	r3, r3, #2
 8016d16:	4413      	add	r3, r2
 8016d18:	685b      	ldr	r3, [r3, #4]
 8016d1a:	685b      	ldr	r3, [r3, #4]
 8016d1c:	f107 0214 	add.w	r2, r7, #20
 8016d20:	f107 0110 	add.w	r1, r7, #16
 8016d24:	7af8      	ldrb	r0, [r7, #11]
 8016d26:	4798      	blx	r3
 8016d28:	4603      	mov	r3, r0
 8016d2a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8016d2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d104      	bne.n	8016d3e <SCSI_ReadFormatCapacity+0x5e>
 8016d34:	69bb      	ldr	r3, [r7, #24]
 8016d36:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8016d3a:	2b02      	cmp	r3, #2
 8016d3c:	d108      	bne.n	8016d50 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8016d3e:	7af9      	ldrb	r1, [r7, #11]
 8016d40:	233a      	movs	r3, #58	@ 0x3a
 8016d42:	2202      	movs	r2, #2
 8016d44:	68f8      	ldr	r0, [r7, #12]
 8016d46:	f000 f959 	bl	8016ffc <SCSI_SenseCode>
    return -1;
 8016d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8016d4e:	e03e      	b.n	8016dce <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 8016d50:	2300      	movs	r3, #0
 8016d52:	83fb      	strh	r3, [r7, #30]
 8016d54:	e007      	b.n	8016d66 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8016d56:	8bfb      	ldrh	r3, [r7, #30]
 8016d58:	69ba      	ldr	r2, [r7, #24]
 8016d5a:	4413      	add	r3, r2
 8016d5c:	2200      	movs	r2, #0
 8016d5e:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8016d60:	8bfb      	ldrh	r3, [r7, #30]
 8016d62:	3301      	adds	r3, #1
 8016d64:	83fb      	strh	r3, [r7, #30]
 8016d66:	8bfb      	ldrh	r3, [r7, #30]
 8016d68:	2b0b      	cmp	r3, #11
 8016d6a:	d9f4      	bls.n	8016d56 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8016d6c:	69bb      	ldr	r3, [r7, #24]
 8016d6e:	2208      	movs	r2, #8
 8016d70:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8016d72:	693b      	ldr	r3, [r7, #16]
 8016d74:	3b01      	subs	r3, #1
 8016d76:	0e1b      	lsrs	r3, r3, #24
 8016d78:	b2da      	uxtb	r2, r3
 8016d7a:	69bb      	ldr	r3, [r7, #24]
 8016d7c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8016d7e:	693b      	ldr	r3, [r7, #16]
 8016d80:	3b01      	subs	r3, #1
 8016d82:	0c1b      	lsrs	r3, r3, #16
 8016d84:	b2da      	uxtb	r2, r3
 8016d86:	69bb      	ldr	r3, [r7, #24]
 8016d88:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8016d8a:	693b      	ldr	r3, [r7, #16]
 8016d8c:	3b01      	subs	r3, #1
 8016d8e:	0a1b      	lsrs	r3, r3, #8
 8016d90:	b2da      	uxtb	r2, r3
 8016d92:	69bb      	ldr	r3, [r7, #24]
 8016d94:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8016d96:	693b      	ldr	r3, [r7, #16]
 8016d98:	b2db      	uxtb	r3, r3
 8016d9a:	3b01      	subs	r3, #1
 8016d9c:	b2da      	uxtb	r2, r3
 8016d9e:	69bb      	ldr	r3, [r7, #24]
 8016da0:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8016da2:	69bb      	ldr	r3, [r7, #24]
 8016da4:	2202      	movs	r2, #2
 8016da6:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8016da8:	8abb      	ldrh	r3, [r7, #20]
 8016daa:	141b      	asrs	r3, r3, #16
 8016dac:	b2da      	uxtb	r2, r3
 8016dae:	69bb      	ldr	r3, [r7, #24]
 8016db0:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8016db2:	8abb      	ldrh	r3, [r7, #20]
 8016db4:	0a1b      	lsrs	r3, r3, #8
 8016db6:	b29b      	uxth	r3, r3
 8016db8:	b2da      	uxtb	r2, r3
 8016dba:	69bb      	ldr	r3, [r7, #24]
 8016dbc:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8016dbe:	8abb      	ldrh	r3, [r7, #20]
 8016dc0:	b2da      	uxtb	r2, r3
 8016dc2:	69bb      	ldr	r3, [r7, #24]
 8016dc4:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8016dc6:	69bb      	ldr	r3, [r7, #24]
 8016dc8:	220c      	movs	r2, #12
 8016dca:	60da      	str	r2, [r3, #12]

  return 0;
 8016dcc:	2300      	movs	r3, #0
}
 8016dce:	4618      	mov	r0, r3
 8016dd0:	3720      	adds	r7, #32
 8016dd2:	46bd      	mov	sp, r7
 8016dd4:	bd80      	pop	{r7, pc}
	...

08016dd8 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016dd8:	b580      	push	{r7, lr}
 8016dda:	b086      	sub	sp, #24
 8016ddc:	af00      	add	r7, sp, #0
 8016dde:	60f8      	str	r0, [r7, #12]
 8016de0:	460b      	mov	r3, r1
 8016de2:	607a      	str	r2, [r7, #4]
 8016de4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016de6:	68fb      	ldr	r3, [r7, #12]
 8016de8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	32b0      	adds	r2, #176	@ 0xb0
 8016df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016df4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8016df6:	2304      	movs	r3, #4
 8016df8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8016dfa:	693b      	ldr	r3, [r7, #16]
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d102      	bne.n	8016e06 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8016e00:	f04f 33ff 	mov.w	r3, #4294967295
 8016e04:	e027      	b.n	8016e56 <SCSI_ModeSense6+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016e0c:	68fa      	ldr	r2, [r7, #12]
 8016e0e:	33b0      	adds	r3, #176	@ 0xb0
 8016e10:	009b      	lsls	r3, r3, #2
 8016e12:	4413      	add	r3, r2
 8016e14:	685b      	ldr	r3, [r3, #4]
 8016e16:	68db      	ldr	r3, [r3, #12]
 8016e18:	7afa      	ldrb	r2, [r7, #11]
 8016e1a:	4610      	mov	r0, r2
 8016e1c:	4798      	blx	r3
 8016e1e:	4603      	mov	r3, r0
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d006      	beq.n	8016e32 <SCSI_ModeSense6+0x5a>
  {
    MSC_Mode_Sense6_data[2] |= 0x80U;
 8016e24:	4b0e      	ldr	r3, [pc, #56]	@ (8016e60 <SCSI_ModeSense6+0x88>)
 8016e26:	789b      	ldrb	r3, [r3, #2]
 8016e28:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8016e2c:	b2da      	uxtb	r2, r3
 8016e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8016e60 <SCSI_ModeSense6+0x88>)
 8016e30:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	3304      	adds	r3, #4
 8016e36:	781b      	ldrb	r3, [r3, #0]
 8016e38:	461a      	mov	r2, r3
 8016e3a:	8afb      	ldrh	r3, [r7, #22]
 8016e3c:	4293      	cmp	r3, r2
 8016e3e:	d303      	bcc.n	8016e48 <SCSI_ModeSense6+0x70>
  {
    len = params[4];
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	3304      	adds	r3, #4
 8016e44:	781b      	ldrb	r3, [r3, #0]
 8016e46:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8016e48:	8afb      	ldrh	r3, [r7, #22]
 8016e4a:	461a      	mov	r2, r3
 8016e4c:	4904      	ldr	r1, [pc, #16]	@ (8016e60 <SCSI_ModeSense6+0x88>)
 8016e4e:	6938      	ldr	r0, [r7, #16]
 8016e50:	f000 fe44 	bl	8017adc <SCSI_UpdateBotData>

  return 0;
 8016e54:	2300      	movs	r3, #0
}
 8016e56:	4618      	mov	r0, r3
 8016e58:	3718      	adds	r7, #24
 8016e5a:	46bd      	mov	sp, r7
 8016e5c:	bd80      	pop	{r7, pc}
 8016e5e:	bf00      	nop
 8016e60:	200000c0 	.word	0x200000c0

08016e64 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016e64:	b580      	push	{r7, lr}
 8016e66:	b086      	sub	sp, #24
 8016e68:	af00      	add	r7, sp, #0
 8016e6a:	60f8      	str	r0, [r7, #12]
 8016e6c:	460b      	mov	r3, r1
 8016e6e:	607a      	str	r2, [r7, #4]
 8016e70:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016e72:	68fb      	ldr	r3, [r7, #12]
 8016e74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	32b0      	adds	r2, #176	@ 0xb0
 8016e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016e80:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8016e82:	2308      	movs	r3, #8
 8016e84:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8016e86:	693b      	ldr	r3, [r7, #16]
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d102      	bne.n	8016e92 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8016e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8016e90:	e027      	b.n	8016ee2 <SCSI_ModeSense10+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8016e92:	68fb      	ldr	r3, [r7, #12]
 8016e94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016e98:	68fa      	ldr	r2, [r7, #12]
 8016e9a:	33b0      	adds	r3, #176	@ 0xb0
 8016e9c:	009b      	lsls	r3, r3, #2
 8016e9e:	4413      	add	r3, r2
 8016ea0:	685b      	ldr	r3, [r3, #4]
 8016ea2:	68db      	ldr	r3, [r3, #12]
 8016ea4:	7afa      	ldrb	r2, [r7, #11]
 8016ea6:	4610      	mov	r0, r2
 8016ea8:	4798      	blx	r3
 8016eaa:	4603      	mov	r3, r0
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d006      	beq.n	8016ebe <SCSI_ModeSense10+0x5a>
  {
    MSC_Mode_Sense10_data[3] |= 0x80U;
 8016eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8016eec <SCSI_ModeSense10+0x88>)
 8016eb2:	78db      	ldrb	r3, [r3, #3]
 8016eb4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8016eb8:	b2da      	uxtb	r2, r3
 8016eba:	4b0c      	ldr	r3, [pc, #48]	@ (8016eec <SCSI_ModeSense10+0x88>)
 8016ebc:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	3308      	adds	r3, #8
 8016ec2:	781b      	ldrb	r3, [r3, #0]
 8016ec4:	461a      	mov	r2, r3
 8016ec6:	8afb      	ldrh	r3, [r7, #22]
 8016ec8:	4293      	cmp	r3, r2
 8016eca:	d303      	bcc.n	8016ed4 <SCSI_ModeSense10+0x70>
  {
    len = params[8];
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	3308      	adds	r3, #8
 8016ed0:	781b      	ldrb	r3, [r3, #0]
 8016ed2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8016ed4:	8afb      	ldrh	r3, [r7, #22]
 8016ed6:	461a      	mov	r2, r3
 8016ed8:	4904      	ldr	r1, [pc, #16]	@ (8016eec <SCSI_ModeSense10+0x88>)
 8016eda:	6938      	ldr	r0, [r7, #16]
 8016edc:	f000 fdfe 	bl	8017adc <SCSI_UpdateBotData>

  return 0;
 8016ee0:	2300      	movs	r3, #0
}
 8016ee2:	4618      	mov	r0, r3
 8016ee4:	3718      	adds	r7, #24
 8016ee6:	46bd      	mov	sp, r7
 8016ee8:	bd80      	pop	{r7, pc}
 8016eea:	bf00      	nop
 8016eec:	200000c4 	.word	0x200000c4

08016ef0 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016ef0:	b580      	push	{r7, lr}
 8016ef2:	b086      	sub	sp, #24
 8016ef4:	af00      	add	r7, sp, #0
 8016ef6:	60f8      	str	r0, [r7, #12]
 8016ef8:	460b      	mov	r3, r1
 8016efa:	607a      	str	r2, [r7, #4]
 8016efc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016f04:	68fb      	ldr	r3, [r7, #12]
 8016f06:	32b0      	adds	r2, #176	@ 0xb0
 8016f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f0c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8016f0e:	693b      	ldr	r3, [r7, #16]
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d102      	bne.n	8016f1a <SCSI_RequestSense+0x2a>
  {
    return -1;
 8016f14:	f04f 33ff 	mov.w	r3, #4294967295
 8016f18:	e06c      	b.n	8016ff4 <SCSI_RequestSense+0x104>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8016f1a:	693b      	ldr	r3, [r7, #16]
 8016f1c:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	d10a      	bne.n	8016f3a <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8016f24:	693b      	ldr	r3, [r7, #16]
 8016f26:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8016f2a:	2320      	movs	r3, #32
 8016f2c:	2205      	movs	r2, #5
 8016f2e:	68f8      	ldr	r0, [r7, #12]
 8016f30:	f000 f864 	bl	8016ffc <SCSI_SenseCode>
    return -1;
 8016f34:	f04f 33ff 	mov.w	r3, #4294967295
 8016f38:	e05c      	b.n	8016ff4 <SCSI_RequestSense+0x104>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8016f3a:	2300      	movs	r3, #0
 8016f3c:	75fb      	strb	r3, [r7, #23]
 8016f3e:	e007      	b.n	8016f50 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8016f40:	7dfb      	ldrb	r3, [r7, #23]
 8016f42:	693a      	ldr	r2, [r7, #16]
 8016f44:	4413      	add	r3, r2
 8016f46:	2200      	movs	r2, #0
 8016f48:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8016f4a:	7dfb      	ldrb	r3, [r7, #23]
 8016f4c:	3301      	adds	r3, #1
 8016f4e:	75fb      	strb	r3, [r7, #23]
 8016f50:	7dfb      	ldrb	r3, [r7, #23]
 8016f52:	2b11      	cmp	r3, #17
 8016f54:	d9f4      	bls.n	8016f40 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 8016f56:	693b      	ldr	r3, [r7, #16]
 8016f58:	2270      	movs	r2, #112	@ 0x70
 8016f5a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8016f5c:	693b      	ldr	r3, [r7, #16]
 8016f5e:	220c      	movs	r2, #12
 8016f60:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8016f62:	693b      	ldr	r3, [r7, #16]
 8016f64:	f893 2860 	ldrb.w	r2, [r3, #2144]	@ 0x860
 8016f68:	693b      	ldr	r3, [r7, #16]
 8016f6a:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8016f6e:	429a      	cmp	r2, r3
 8016f70:	d031      	beq.n	8016fd6 <SCSI_RequestSense+0xe6>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8016f72:	693b      	ldr	r3, [r7, #16]
 8016f74:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8016f78:	461a      	mov	r2, r3
 8016f7a:	693b      	ldr	r3, [r7, #16]
 8016f7c:	f502 7284 	add.w	r2, r2, #264	@ 0x108
 8016f80:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8016f84:	693b      	ldr	r3, [r7, #16]
 8016f86:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8016f88:	693b      	ldr	r3, [r7, #16]
 8016f8a:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8016f8e:	693a      	ldr	r2, [r7, #16]
 8016f90:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8016f94:	00db      	lsls	r3, r3, #3
 8016f96:	4413      	add	r3, r2
 8016f98:	791a      	ldrb	r2, [r3, #4]
 8016f9a:	693b      	ldr	r3, [r7, #16]
 8016f9c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8016f9e:	693b      	ldr	r3, [r7, #16]
 8016fa0:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8016fa4:	693a      	ldr	r2, [r7, #16]
 8016fa6:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8016faa:	00db      	lsls	r3, r3, #3
 8016fac:	4413      	add	r3, r2
 8016fae:	795a      	ldrb	r2, [r3, #5]
 8016fb0:	693b      	ldr	r3, [r7, #16]
 8016fb2:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8016fb4:	693b      	ldr	r3, [r7, #16]
 8016fb6:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8016fba:	3301      	adds	r3, #1
 8016fbc:	b2da      	uxtb	r2, r3
 8016fbe:	693b      	ldr	r3, [r7, #16]
 8016fc0:	f883 2860 	strb.w	r2, [r3, #2144]	@ 0x860

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8016fc4:	693b      	ldr	r3, [r7, #16]
 8016fc6:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8016fca:	2b04      	cmp	r3, #4
 8016fcc:	d103      	bne.n	8016fd6 <SCSI_RequestSense+0xe6>
    {
      hmsc->scsi_sense_head = 0U;
 8016fce:	693b      	ldr	r3, [r7, #16]
 8016fd0:	2200      	movs	r2, #0
 8016fd2:	f883 2860 	strb.w	r2, [r3, #2144]	@ 0x860
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8016fd6:	693b      	ldr	r3, [r7, #16]
 8016fd8:	2212      	movs	r2, #18
 8016fda:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	3304      	adds	r3, #4
 8016fe0:	781b      	ldrb	r3, [r3, #0]
 8016fe2:	2b12      	cmp	r3, #18
 8016fe4:	d805      	bhi.n	8016ff2 <SCSI_RequestSense+0x102>
  {
    hmsc->bot_data_length = params[4];
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	3304      	adds	r3, #4
 8016fea:	781b      	ldrb	r3, [r3, #0]
 8016fec:	461a      	mov	r2, r3
 8016fee:	693b      	ldr	r3, [r7, #16]
 8016ff0:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8016ff2:	2300      	movs	r3, #0
}
 8016ff4:	4618      	mov	r0, r3
 8016ff6:	3718      	adds	r7, #24
 8016ff8:	46bd      	mov	sp, r7
 8016ffa:	bd80      	pop	{r7, pc}

08016ffc <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8016ffc:	b480      	push	{r7}
 8016ffe:	b085      	sub	sp, #20
 8017000:	af00      	add	r7, sp, #0
 8017002:	6078      	str	r0, [r7, #4]
 8017004:	4608      	mov	r0, r1
 8017006:	4611      	mov	r1, r2
 8017008:	461a      	mov	r2, r3
 801700a:	4603      	mov	r3, r0
 801700c:	70fb      	strb	r3, [r7, #3]
 801700e:	460b      	mov	r3, r1
 8017010:	70bb      	strb	r3, [r7, #2]
 8017012:	4613      	mov	r3, r2
 8017014:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	32b0      	adds	r2, #176	@ 0xb0
 8017020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017024:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8017026:	68fb      	ldr	r3, [r7, #12]
 8017028:	2b00      	cmp	r3, #0
 801702a:	d02f      	beq.n	801708c <SCSI_SenseCode+0x90>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 801702c:	68fb      	ldr	r3, [r7, #12]
 801702e:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8017032:	461a      	mov	r2, r3
 8017034:	68fb      	ldr	r3, [r7, #12]
 8017036:	f502 7284 	add.w	r2, r2, #264	@ 0x108
 801703a:	78b9      	ldrb	r1, [r7, #2]
 801703c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8017040:	68fb      	ldr	r3, [r7, #12]
 8017042:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8017046:	68fa      	ldr	r2, [r7, #12]
 8017048:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 801704c:	00db      	lsls	r3, r3, #3
 801704e:	4413      	add	r3, r2
 8017050:	787a      	ldrb	r2, [r7, #1]
 8017052:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 801705a:	68fa      	ldr	r2, [r7, #12]
 801705c:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8017060:	00db      	lsls	r3, r3, #3
 8017062:	4413      	add	r3, r2
 8017064:	2200      	movs	r2, #0
 8017066:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8017068:	68fb      	ldr	r3, [r7, #12]
 801706a:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 801706e:	3301      	adds	r3, #1
 8017070:	b2da      	uxtb	r2, r3
 8017072:	68fb      	ldr	r3, [r7, #12]
 8017074:	f883 2861 	strb.w	r2, [r3, #2145]	@ 0x861

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 801707e:	2b04      	cmp	r3, #4
 8017080:	d105      	bne.n	801708e <SCSI_SenseCode+0x92>
  {
    hmsc->scsi_sense_tail = 0U;
 8017082:	68fb      	ldr	r3, [r7, #12]
 8017084:	2200      	movs	r2, #0
 8017086:	f883 2861 	strb.w	r2, [r3, #2145]	@ 0x861
 801708a:	e000      	b.n	801708e <SCSI_SenseCode+0x92>
    return;
 801708c:	bf00      	nop
  }
}
 801708e:	3714      	adds	r7, #20
 8017090:	46bd      	mov	sp, r7
 8017092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017096:	4770      	bx	lr

08017098 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8017098:	b580      	push	{r7, lr}
 801709a:	b086      	sub	sp, #24
 801709c:	af00      	add	r7, sp, #0
 801709e:	60f8      	str	r0, [r7, #12]
 80170a0:	460b      	mov	r3, r1
 80170a2:	607a      	str	r2, [r7, #4]
 80170a4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80170ac:	68fb      	ldr	r3, [r7, #12]
 80170ae:	32b0      	adds	r2, #176	@ 0xb0
 80170b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80170b4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80170b6:	697b      	ldr	r3, [r7, #20]
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d102      	bne.n	80170c2 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 80170bc:	f04f 33ff 	mov.w	r3, #4294967295
 80170c0:	e03b      	b.n	801713a <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80170c2:	697b      	ldr	r3, [r7, #20]
 80170c4:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 80170c8:	2b01      	cmp	r3, #1
 80170ca:	d10f      	bne.n	80170ec <SCSI_StartStopUnit+0x54>
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	3304      	adds	r3, #4
 80170d0:	781b      	ldrb	r3, [r3, #0]
 80170d2:	f003 0303 	and.w	r3, r3, #3
 80170d6:	2b02      	cmp	r3, #2
 80170d8:	d108      	bne.n	80170ec <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80170da:	7af9      	ldrb	r1, [r7, #11]
 80170dc:	2324      	movs	r3, #36	@ 0x24
 80170de:	2205      	movs	r2, #5
 80170e0:	68f8      	ldr	r0, [r7, #12]
 80170e2:	f7ff ff8b 	bl	8016ffc <SCSI_SenseCode>

    return -1;
 80170e6:	f04f 33ff 	mov.w	r3, #4294967295
 80170ea:	e026      	b.n	801713a <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	3304      	adds	r3, #4
 80170f0:	781b      	ldrb	r3, [r3, #0]
 80170f2:	f003 0303 	and.w	r3, r3, #3
 80170f6:	2b01      	cmp	r3, #1
 80170f8:	d104      	bne.n	8017104 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80170fa:	697b      	ldr	r3, [r7, #20]
 80170fc:	2200      	movs	r2, #0
 80170fe:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
 8017102:	e016      	b.n	8017132 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	3304      	adds	r3, #4
 8017108:	781b      	ldrb	r3, [r3, #0]
 801710a:	f003 0303 	and.w	r3, r3, #3
 801710e:	2b02      	cmp	r3, #2
 8017110:	d104      	bne.n	801711c <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8017112:	697b      	ldr	r3, [r7, #20]
 8017114:	2202      	movs	r2, #2
 8017116:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
 801711a:	e00a      	b.n	8017132 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	3304      	adds	r3, #4
 8017120:	781b      	ldrb	r3, [r3, #0]
 8017122:	f003 0303 	and.w	r3, r3, #3
 8017126:	2b03      	cmp	r3, #3
 8017128:	d103      	bne.n	8017132 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801712a:	697b      	ldr	r3, [r7, #20]
 801712c:	2200      	movs	r2, #0
 801712e:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8017132:	697b      	ldr	r3, [r7, #20]
 8017134:	2200      	movs	r2, #0
 8017136:	60da      	str	r2, [r3, #12]

  return 0;
 8017138:	2300      	movs	r3, #0
}
 801713a:	4618      	mov	r0, r3
 801713c:	3718      	adds	r7, #24
 801713e:	46bd      	mov	sp, r7
 8017140:	bd80      	pop	{r7, pc}

08017142 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8017142:	b480      	push	{r7}
 8017144:	b087      	sub	sp, #28
 8017146:	af00      	add	r7, sp, #0
 8017148:	60f8      	str	r0, [r7, #12]
 801714a:	460b      	mov	r3, r1
 801714c:	607a      	str	r2, [r7, #4]
 801714e:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017150:	68fb      	ldr	r3, [r7, #12]
 8017152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017156:	68fb      	ldr	r3, [r7, #12]
 8017158:	32b0      	adds	r2, #176	@ 0xb0
 801715a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801715e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8017160:	697b      	ldr	r3, [r7, #20]
 8017162:	2b00      	cmp	r3, #0
 8017164:	d102      	bne.n	801716c <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8017166:	f04f 33ff 	mov.w	r3, #4294967295
 801716a:	e011      	b.n	8017190 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	3304      	adds	r3, #4
 8017170:	781b      	ldrb	r3, [r3, #0]
 8017172:	2b00      	cmp	r3, #0
 8017174:	d104      	bne.n	8017180 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8017176:	697b      	ldr	r3, [r7, #20]
 8017178:	2200      	movs	r2, #0
 801717a:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
 801717e:	e003      	b.n	8017188 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8017180:	697b      	ldr	r3, [r7, #20]
 8017182:	2201      	movs	r2, #1
 8017184:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
  }

  hmsc->bot_data_length = 0U;
 8017188:	697b      	ldr	r3, [r7, #20]
 801718a:	2200      	movs	r2, #0
 801718c:	60da      	str	r2, [r3, #12]

  return 0;
 801718e:	2300      	movs	r3, #0
}
 8017190:	4618      	mov	r0, r3
 8017192:	371c      	adds	r7, #28
 8017194:	46bd      	mov	sp, r7
 8017196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801719a:	4770      	bx	lr

0801719c <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801719c:	b580      	push	{r7, lr}
 801719e:	b086      	sub	sp, #24
 80171a0:	af00      	add	r7, sp, #0
 80171a2:	60f8      	str	r0, [r7, #12]
 80171a4:	460b      	mov	r3, r1
 80171a6:	607a      	str	r2, [r7, #4]
 80171a8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	32b0      	adds	r2, #176	@ 0xb0
 80171b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80171b8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80171ba:	697b      	ldr	r3, [r7, #20]
 80171bc:	2b00      	cmp	r3, #0
 80171be:	d102      	bne.n	80171c6 <SCSI_Read10+0x2a>
  {
    return -1;
 80171c0:	f04f 33ff 	mov.w	r3, #4294967295
 80171c4:	e090      	b.n	80172e8 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80171c6:	697b      	ldr	r3, [r7, #20]
 80171c8:	7a1b      	ldrb	r3, [r3, #8]
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	f040 8082 	bne.w	80172d4 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80171d0:	697b      	ldr	r3, [r7, #20]
 80171d2:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 80171d6:	b25b      	sxtb	r3, r3
 80171d8:	2b00      	cmp	r3, #0
 80171da:	db0a      	blt.n	80171f2 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80171dc:	697b      	ldr	r3, [r7, #20]
 80171de:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80171e2:	2320      	movs	r3, #32
 80171e4:	2205      	movs	r2, #5
 80171e6:	68f8      	ldr	r0, [r7, #12]
 80171e8:	f7ff ff08 	bl	8016ffc <SCSI_SenseCode>
      return -1;
 80171ec:	f04f 33ff 	mov.w	r3, #4294967295
 80171f0:	e07a      	b.n	80172e8 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80171f2:	697b      	ldr	r3, [r7, #20]
 80171f4:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 80171f8:	2b02      	cmp	r3, #2
 80171fa:	d108      	bne.n	801720e <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80171fc:	7af9      	ldrb	r1, [r7, #11]
 80171fe:	233a      	movs	r3, #58	@ 0x3a
 8017200:	2202      	movs	r2, #2
 8017202:	68f8      	ldr	r0, [r7, #12]
 8017204:	f7ff fefa 	bl	8016ffc <SCSI_SenseCode>

      return -1;
 8017208:	f04f 33ff 	mov.w	r3, #4294967295
 801720c:	e06c      	b.n	80172e8 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 801720e:	68fb      	ldr	r3, [r7, #12]
 8017210:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017214:	68fa      	ldr	r2, [r7, #12]
 8017216:	33b0      	adds	r3, #176	@ 0xb0
 8017218:	009b      	lsls	r3, r3, #2
 801721a:	4413      	add	r3, r2
 801721c:	685b      	ldr	r3, [r3, #4]
 801721e:	689b      	ldr	r3, [r3, #8]
 8017220:	7afa      	ldrb	r2, [r7, #11]
 8017222:	4610      	mov	r0, r2
 8017224:	4798      	blx	r3
 8017226:	4603      	mov	r3, r0
 8017228:	2b00      	cmp	r3, #0
 801722a:	d008      	beq.n	801723e <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801722c:	7af9      	ldrb	r1, [r7, #11]
 801722e:	233a      	movs	r3, #58	@ 0x3a
 8017230:	2202      	movs	r2, #2
 8017232:	68f8      	ldr	r0, [r7, #12]
 8017234:	f7ff fee2 	bl	8016ffc <SCSI_SenseCode>
      return -1;
 8017238:	f04f 33ff 	mov.w	r3, #4294967295
 801723c:	e054      	b.n	80172e8 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	3302      	adds	r3, #2
 8017242:	781b      	ldrb	r3, [r3, #0]
 8017244:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	3303      	adds	r3, #3
 801724a:	781b      	ldrb	r3, [r3, #0]
 801724c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801724e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	3304      	adds	r3, #4
 8017254:	781b      	ldrb	r3, [r3, #0]
 8017256:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8017258:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801725a:	687a      	ldr	r2, [r7, #4]
 801725c:	3205      	adds	r2, #5
 801725e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8017260:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8017262:	697b      	ldr	r3, [r7, #20]
 8017264:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	3307      	adds	r3, #7
 801726c:	781b      	ldrb	r3, [r3, #0]
 801726e:	021b      	lsls	r3, r3, #8
 8017270:	687a      	ldr	r2, [r7, #4]
 8017272:	3208      	adds	r2, #8
 8017274:	7812      	ldrb	r2, [r2, #0]
 8017276:	431a      	orrs	r2, r3
 8017278:	697b      	ldr	r3, [r7, #20]
 801727a:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801727e:	697b      	ldr	r3, [r7, #20]
 8017280:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8017284:	697b      	ldr	r3, [r7, #20]
 8017286:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 801728a:	7af9      	ldrb	r1, [r7, #11]
 801728c:	68f8      	ldr	r0, [r7, #12]
 801728e:	f000 fadc 	bl	801784a <SCSI_CheckAddressRange>
 8017292:	4603      	mov	r3, r0
 8017294:	2b00      	cmp	r3, #0
 8017296:	da02      	bge.n	801729e <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8017298:	f04f 33ff 	mov.w	r3, #4294967295
 801729c:	e024      	b.n	80172e8 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 801729e:	697b      	ldr	r3, [r7, #20]
 80172a0:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 80172a4:	697b      	ldr	r3, [r7, #20]
 80172a6:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 80172aa:	6979      	ldr	r1, [r7, #20]
 80172ac:	f8b1 1864 	ldrh.w	r1, [r1, #2148]	@ 0x864
 80172b0:	fb01 f303 	mul.w	r3, r1, r3
 80172b4:	429a      	cmp	r2, r3
 80172b6:	d00a      	beq.n	80172ce <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80172b8:	697b      	ldr	r3, [r7, #20]
 80172ba:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80172be:	2320      	movs	r3, #32
 80172c0:	2205      	movs	r2, #5
 80172c2:	68f8      	ldr	r0, [r7, #12]
 80172c4:	f7ff fe9a 	bl	8016ffc <SCSI_SenseCode>
      return -1;
 80172c8:	f04f 33ff 	mov.w	r3, #4294967295
 80172cc:	e00c      	b.n	80172e8 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80172ce:	697b      	ldr	r3, [r7, #20]
 80172d0:	2202      	movs	r2, #2
 80172d2:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80172d4:	697b      	ldr	r3, [r7, #20]
 80172d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80172da:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80172dc:	7afb      	ldrb	r3, [r7, #11]
 80172de:	4619      	mov	r1, r3
 80172e0:	68f8      	ldr	r0, [r7, #12]
 80172e2:	f000 fadf 	bl	80178a4 <SCSI_ProcessRead>
 80172e6:	4603      	mov	r3, r0
}
 80172e8:	4618      	mov	r0, r3
 80172ea:	3718      	adds	r7, #24
 80172ec:	46bd      	mov	sp, r7
 80172ee:	bd80      	pop	{r7, pc}

080172f0 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80172f0:	b580      	push	{r7, lr}
 80172f2:	b086      	sub	sp, #24
 80172f4:	af00      	add	r7, sp, #0
 80172f6:	60f8      	str	r0, [r7, #12]
 80172f8:	460b      	mov	r3, r1
 80172fa:	607a      	str	r2, [r7, #4]
 80172fc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80172fe:	68fb      	ldr	r3, [r7, #12]
 8017300:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017304:	68fb      	ldr	r3, [r7, #12]
 8017306:	32b0      	adds	r2, #176	@ 0xb0
 8017308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801730c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801730e:	697b      	ldr	r3, [r7, #20]
 8017310:	2b00      	cmp	r3, #0
 8017312:	d102      	bne.n	801731a <SCSI_Read12+0x2a>
  {
    return -1;
 8017314:	f04f 33ff 	mov.w	r3, #4294967295
 8017318:	e09a      	b.n	8017450 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801731a:	697b      	ldr	r3, [r7, #20]
 801731c:	7a1b      	ldrb	r3, [r3, #8]
 801731e:	2b00      	cmp	r3, #0
 8017320:	f040 808c 	bne.w	801743c <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8017324:	697b      	ldr	r3, [r7, #20]
 8017326:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 801732a:	b25b      	sxtb	r3, r3
 801732c:	2b00      	cmp	r3, #0
 801732e:	db0a      	blt.n	8017346 <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8017330:	697b      	ldr	r3, [r7, #20]
 8017332:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8017336:	2320      	movs	r3, #32
 8017338:	2205      	movs	r2, #5
 801733a:	68f8      	ldr	r0, [r7, #12]
 801733c:	f7ff fe5e 	bl	8016ffc <SCSI_SenseCode>
      return -1;
 8017340:	f04f 33ff 	mov.w	r3, #4294967295
 8017344:	e084      	b.n	8017450 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8017346:	697b      	ldr	r3, [r7, #20]
 8017348:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 801734c:	2b02      	cmp	r3, #2
 801734e:	d108      	bne.n	8017362 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8017350:	7af9      	ldrb	r1, [r7, #11]
 8017352:	233a      	movs	r3, #58	@ 0x3a
 8017354:	2202      	movs	r2, #2
 8017356:	68f8      	ldr	r0, [r7, #12]
 8017358:	f7ff fe50 	bl	8016ffc <SCSI_SenseCode>
      return -1;
 801735c:	f04f 33ff 	mov.w	r3, #4294967295
 8017360:	e076      	b.n	8017450 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8017362:	68fb      	ldr	r3, [r7, #12]
 8017364:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017368:	68fa      	ldr	r2, [r7, #12]
 801736a:	33b0      	adds	r3, #176	@ 0xb0
 801736c:	009b      	lsls	r3, r3, #2
 801736e:	4413      	add	r3, r2
 8017370:	685b      	ldr	r3, [r3, #4]
 8017372:	689b      	ldr	r3, [r3, #8]
 8017374:	7afa      	ldrb	r2, [r7, #11]
 8017376:	4610      	mov	r0, r2
 8017378:	4798      	blx	r3
 801737a:	4603      	mov	r3, r0
 801737c:	2b00      	cmp	r3, #0
 801737e:	d008      	beq.n	8017392 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8017380:	7af9      	ldrb	r1, [r7, #11]
 8017382:	233a      	movs	r3, #58	@ 0x3a
 8017384:	2202      	movs	r2, #2
 8017386:	68f8      	ldr	r0, [r7, #12]
 8017388:	f7ff fe38 	bl	8016ffc <SCSI_SenseCode>
      return -1;
 801738c:	f04f 33ff 	mov.w	r3, #4294967295
 8017390:	e05e      	b.n	8017450 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	3302      	adds	r3, #2
 8017396:	781b      	ldrb	r3, [r3, #0]
 8017398:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	3303      	adds	r3, #3
 801739e:	781b      	ldrb	r3, [r3, #0]
 80173a0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80173a2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	3304      	adds	r3, #4
 80173a8:	781b      	ldrb	r3, [r3, #0]
 80173aa:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80173ac:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80173ae:	687a      	ldr	r2, [r7, #4]
 80173b0:	3205      	adds	r2, #5
 80173b2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80173b4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80173b6:	697b      	ldr	r3, [r7, #20]
 80173b8:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	3306      	adds	r3, #6
 80173c0:	781b      	ldrb	r3, [r3, #0]
 80173c2:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	3307      	adds	r3, #7
 80173c8:	781b      	ldrb	r3, [r3, #0]
 80173ca:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80173cc:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	3308      	adds	r3, #8
 80173d2:	781b      	ldrb	r3, [r3, #0]
 80173d4:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80173d6:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80173d8:	687a      	ldr	r2, [r7, #4]
 80173da:	3209      	adds	r2, #9
 80173dc:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80173de:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80173e0:	697b      	ldr	r3, [r7, #20]
 80173e2:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80173e6:	697b      	ldr	r3, [r7, #20]
 80173e8:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 80173ec:	697b      	ldr	r3, [r7, #20]
 80173ee:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 80173f2:	7af9      	ldrb	r1, [r7, #11]
 80173f4:	68f8      	ldr	r0, [r7, #12]
 80173f6:	f000 fa28 	bl	801784a <SCSI_CheckAddressRange>
 80173fa:	4603      	mov	r3, r0
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	da02      	bge.n	8017406 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8017400:	f04f 33ff 	mov.w	r3, #4294967295
 8017404:	e024      	b.n	8017450 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8017406:	697b      	ldr	r3, [r7, #20]
 8017408:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 801740c:	697b      	ldr	r3, [r7, #20]
 801740e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8017412:	6979      	ldr	r1, [r7, #20]
 8017414:	f8b1 1864 	ldrh.w	r1, [r1, #2148]	@ 0x864
 8017418:	fb01 f303 	mul.w	r3, r1, r3
 801741c:	429a      	cmp	r2, r3
 801741e:	d00a      	beq.n	8017436 <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8017420:	697b      	ldr	r3, [r7, #20]
 8017422:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8017426:	2320      	movs	r3, #32
 8017428:	2205      	movs	r2, #5
 801742a:	68f8      	ldr	r0, [r7, #12]
 801742c:	f7ff fde6 	bl	8016ffc <SCSI_SenseCode>
      return -1;
 8017430:	f04f 33ff 	mov.w	r3, #4294967295
 8017434:	e00c      	b.n	8017450 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8017436:	697b      	ldr	r3, [r7, #20]
 8017438:	2202      	movs	r2, #2
 801743a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 801743c:	697b      	ldr	r3, [r7, #20]
 801743e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8017442:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8017444:	7afb      	ldrb	r3, [r7, #11]
 8017446:	4619      	mov	r1, r3
 8017448:	68f8      	ldr	r0, [r7, #12]
 801744a:	f000 fa2b 	bl	80178a4 <SCSI_ProcessRead>
 801744e:	4603      	mov	r3, r0
}
 8017450:	4618      	mov	r0, r3
 8017452:	3718      	adds	r7, #24
 8017454:	46bd      	mov	sp, r7
 8017456:	bd80      	pop	{r7, pc}

08017458 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8017458:	b580      	push	{r7, lr}
 801745a:	b086      	sub	sp, #24
 801745c:	af00      	add	r7, sp, #0
 801745e:	60f8      	str	r0, [r7, #12]
 8017460:	460b      	mov	r3, r1
 8017462:	607a      	str	r2, [r7, #4]
 8017464:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017466:	68fb      	ldr	r3, [r7, #12]
 8017468:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	32b0      	adds	r2, #176	@ 0xb0
 8017470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017474:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8017476:	697b      	ldr	r3, [r7, #20]
 8017478:	2b00      	cmp	r3, #0
 801747a:	d102      	bne.n	8017482 <SCSI_Write10+0x2a>
  {
    return -1;
 801747c:	f04f 33ff 	mov.w	r3, #4294967295
 8017480:	e0ba      	b.n	80175f8 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8017482:	697b      	ldr	r3, [r7, #20]
 8017484:	7a1b      	ldrb	r3, [r3, #8]
 8017486:	2b00      	cmp	r3, #0
 8017488:	f040 80b0 	bne.w	80175ec <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 801748c:	697b      	ldr	r3, [r7, #20]
 801748e:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8017492:	2b00      	cmp	r3, #0
 8017494:	d10a      	bne.n	80174ac <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8017496:	697b      	ldr	r3, [r7, #20]
 8017498:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 801749c:	2320      	movs	r3, #32
 801749e:	2205      	movs	r2, #5
 80174a0:	68f8      	ldr	r0, [r7, #12]
 80174a2:	f7ff fdab 	bl	8016ffc <SCSI_SenseCode>
      return -1;
 80174a6:	f04f 33ff 	mov.w	r3, #4294967295
 80174aa:	e0a5      	b.n	80175f8 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80174ac:	697b      	ldr	r3, [r7, #20]
 80174ae:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 80174b2:	b25b      	sxtb	r3, r3
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	da0a      	bge.n	80174ce <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80174b8:	697b      	ldr	r3, [r7, #20]
 80174ba:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80174be:	2320      	movs	r3, #32
 80174c0:	2205      	movs	r2, #5
 80174c2:	68f8      	ldr	r0, [r7, #12]
 80174c4:	f7ff fd9a 	bl	8016ffc <SCSI_SenseCode>
      return -1;
 80174c8:	f04f 33ff 	mov.w	r3, #4294967295
 80174cc:	e094      	b.n	80175f8 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80174ce:	68fb      	ldr	r3, [r7, #12]
 80174d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80174d4:	68fa      	ldr	r2, [r7, #12]
 80174d6:	33b0      	adds	r3, #176	@ 0xb0
 80174d8:	009b      	lsls	r3, r3, #2
 80174da:	4413      	add	r3, r2
 80174dc:	685b      	ldr	r3, [r3, #4]
 80174de:	689b      	ldr	r3, [r3, #8]
 80174e0:	7afa      	ldrb	r2, [r7, #11]
 80174e2:	4610      	mov	r0, r2
 80174e4:	4798      	blx	r3
 80174e6:	4603      	mov	r3, r0
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d008      	beq.n	80174fe <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80174ec:	7af9      	ldrb	r1, [r7, #11]
 80174ee:	233a      	movs	r3, #58	@ 0x3a
 80174f0:	2202      	movs	r2, #2
 80174f2:	68f8      	ldr	r0, [r7, #12]
 80174f4:	f7ff fd82 	bl	8016ffc <SCSI_SenseCode>
      return -1;
 80174f8:	f04f 33ff 	mov.w	r3, #4294967295
 80174fc:	e07c      	b.n	80175f8 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80174fe:	68fb      	ldr	r3, [r7, #12]
 8017500:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017504:	68fa      	ldr	r2, [r7, #12]
 8017506:	33b0      	adds	r3, #176	@ 0xb0
 8017508:	009b      	lsls	r3, r3, #2
 801750a:	4413      	add	r3, r2
 801750c:	685b      	ldr	r3, [r3, #4]
 801750e:	68db      	ldr	r3, [r3, #12]
 8017510:	7afa      	ldrb	r2, [r7, #11]
 8017512:	4610      	mov	r0, r2
 8017514:	4798      	blx	r3
 8017516:	4603      	mov	r3, r0
 8017518:	2b00      	cmp	r3, #0
 801751a:	d008      	beq.n	801752e <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 801751c:	7af9      	ldrb	r1, [r7, #11]
 801751e:	2327      	movs	r3, #39	@ 0x27
 8017520:	2202      	movs	r2, #2
 8017522:	68f8      	ldr	r0, [r7, #12]
 8017524:	f7ff fd6a 	bl	8016ffc <SCSI_SenseCode>
      return -1;
 8017528:	f04f 33ff 	mov.w	r3, #4294967295
 801752c:	e064      	b.n	80175f8 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	3302      	adds	r3, #2
 8017532:	781b      	ldrb	r3, [r3, #0]
 8017534:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	3303      	adds	r3, #3
 801753a:	781b      	ldrb	r3, [r3, #0]
 801753c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801753e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	3304      	adds	r3, #4
 8017544:	781b      	ldrb	r3, [r3, #0]
 8017546:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8017548:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801754a:	687a      	ldr	r2, [r7, #4]
 801754c:	3205      	adds	r2, #5
 801754e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8017550:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8017552:	697b      	ldr	r3, [r7, #20]
 8017554:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	3307      	adds	r3, #7
 801755c:	781b      	ldrb	r3, [r3, #0]
 801755e:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8017560:	687a      	ldr	r2, [r7, #4]
 8017562:	3208      	adds	r2, #8
 8017564:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8017566:	431a      	orrs	r2, r3
 8017568:	697b      	ldr	r3, [r7, #20]
 801756a:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801756e:	697b      	ldr	r3, [r7, #20]
 8017570:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8017574:	697b      	ldr	r3, [r7, #20]
 8017576:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 801757a:	7af9      	ldrb	r1, [r7, #11]
 801757c:	68f8      	ldr	r0, [r7, #12]
 801757e:	f000 f964 	bl	801784a <SCSI_CheckAddressRange>
 8017582:	4603      	mov	r3, r0
 8017584:	2b00      	cmp	r3, #0
 8017586:	da02      	bge.n	801758e <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8017588:	f04f 33ff 	mov.w	r3, #4294967295
 801758c:	e034      	b.n	80175f8 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801758e:	697b      	ldr	r3, [r7, #20]
 8017590:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8017594:	697a      	ldr	r2, [r7, #20]
 8017596:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 801759a:	fb02 f303 	mul.w	r3, r2, r3
 801759e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80175a0:	697b      	ldr	r3, [r7, #20]
 80175a2:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 80175a6:	693a      	ldr	r2, [r7, #16]
 80175a8:	429a      	cmp	r2, r3
 80175aa:	d00a      	beq.n	80175c2 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80175ac:	697b      	ldr	r3, [r7, #20]
 80175ae:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80175b2:	2320      	movs	r3, #32
 80175b4:	2205      	movs	r2, #5
 80175b6:	68f8      	ldr	r0, [r7, #12]
 80175b8:	f7ff fd20 	bl	8016ffc <SCSI_SenseCode>
      return -1;
 80175bc:	f04f 33ff 	mov.w	r3, #4294967295
 80175c0:	e01a      	b.n	80175f8 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80175c2:	693b      	ldr	r3, [r7, #16]
 80175c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80175c8:	bf28      	it	cs
 80175ca:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 80175ce:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80175d0:	697b      	ldr	r3, [r7, #20]
 80175d2:	2201      	movs	r2, #1
 80175d4:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80175d6:	4b0a      	ldr	r3, [pc, #40]	@ (8017600 <SCSI_Write10+0x1a8>)
 80175d8:	7819      	ldrb	r1, [r3, #0]
 80175da:	697b      	ldr	r3, [r7, #20]
 80175dc:	f103 0210 	add.w	r2, r3, #16
 80175e0:	693b      	ldr	r3, [r7, #16]
 80175e2:	68f8      	ldr	r0, [r7, #12]
 80175e4:	f006 f90b 	bl	801d7fe <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80175e8:	2300      	movs	r3, #0
 80175ea:	e005      	b.n	80175f8 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 80175ec:	7afb      	ldrb	r3, [r7, #11]
 80175ee:	4619      	mov	r1, r3
 80175f0:	68f8      	ldr	r0, [r7, #12]
 80175f2:	f000 f9dd 	bl	80179b0 <SCSI_ProcessWrite>
 80175f6:	4603      	mov	r3, r0
}
 80175f8:	4618      	mov	r0, r3
 80175fa:	3718      	adds	r7, #24
 80175fc:	46bd      	mov	sp, r7
 80175fe:	bd80      	pop	{r7, pc}
 8017600:	200000af 	.word	0x200000af

08017604 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8017604:	b580      	push	{r7, lr}
 8017606:	b086      	sub	sp, #24
 8017608:	af00      	add	r7, sp, #0
 801760a:	60f8      	str	r0, [r7, #12]
 801760c:	460b      	mov	r3, r1
 801760e:	607a      	str	r2, [r7, #4]
 8017610:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017612:	68fb      	ldr	r3, [r7, #12]
 8017614:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	32b0      	adds	r2, #176	@ 0xb0
 801761c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017620:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8017622:	697b      	ldr	r3, [r7, #20]
 8017624:	2b00      	cmp	r3, #0
 8017626:	d102      	bne.n	801762e <SCSI_Write12+0x2a>
  {
    return -1;
 8017628:	f04f 33ff 	mov.w	r3, #4294967295
 801762c:	e0ca      	b.n	80177c4 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801762e:	697b      	ldr	r3, [r7, #20]
 8017630:	7a1b      	ldrb	r3, [r3, #8]
 8017632:	2b00      	cmp	r3, #0
 8017634:	f040 80c0 	bne.w	80177b8 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8017638:	697b      	ldr	r3, [r7, #20]
 801763a:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 801763e:	2b00      	cmp	r3, #0
 8017640:	d10a      	bne.n	8017658 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8017642:	697b      	ldr	r3, [r7, #20]
 8017644:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8017648:	2320      	movs	r3, #32
 801764a:	2205      	movs	r2, #5
 801764c:	68f8      	ldr	r0, [r7, #12]
 801764e:	f7ff fcd5 	bl	8016ffc <SCSI_SenseCode>
      return -1;
 8017652:	f04f 33ff 	mov.w	r3, #4294967295
 8017656:	e0b5      	b.n	80177c4 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8017658:	697b      	ldr	r3, [r7, #20]
 801765a:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 801765e:	b25b      	sxtb	r3, r3
 8017660:	2b00      	cmp	r3, #0
 8017662:	da0a      	bge.n	801767a <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8017664:	697b      	ldr	r3, [r7, #20]
 8017666:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 801766a:	2320      	movs	r3, #32
 801766c:	2205      	movs	r2, #5
 801766e:	68f8      	ldr	r0, [r7, #12]
 8017670:	f7ff fcc4 	bl	8016ffc <SCSI_SenseCode>
      return -1;
 8017674:	f04f 33ff 	mov.w	r3, #4294967295
 8017678:	e0a4      	b.n	80177c4 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 801767a:	68fb      	ldr	r3, [r7, #12]
 801767c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017680:	68fa      	ldr	r2, [r7, #12]
 8017682:	33b0      	adds	r3, #176	@ 0xb0
 8017684:	009b      	lsls	r3, r3, #2
 8017686:	4413      	add	r3, r2
 8017688:	685b      	ldr	r3, [r3, #4]
 801768a:	689b      	ldr	r3, [r3, #8]
 801768c:	7afa      	ldrb	r2, [r7, #11]
 801768e:	4610      	mov	r0, r2
 8017690:	4798      	blx	r3
 8017692:	4603      	mov	r3, r0
 8017694:	2b00      	cmp	r3, #0
 8017696:	d00b      	beq.n	80176b0 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8017698:	7af9      	ldrb	r1, [r7, #11]
 801769a:	233a      	movs	r3, #58	@ 0x3a
 801769c:	2202      	movs	r2, #2
 801769e:	68f8      	ldr	r0, [r7, #12]
 80176a0:	f7ff fcac 	bl	8016ffc <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80176a4:	697b      	ldr	r3, [r7, #20]
 80176a6:	2205      	movs	r2, #5
 80176a8:	721a      	strb	r2, [r3, #8]
      return -1;
 80176aa:	f04f 33ff 	mov.w	r3, #4294967295
 80176ae:	e089      	b.n	80177c4 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80176b6:	68fa      	ldr	r2, [r7, #12]
 80176b8:	33b0      	adds	r3, #176	@ 0xb0
 80176ba:	009b      	lsls	r3, r3, #2
 80176bc:	4413      	add	r3, r2
 80176be:	685b      	ldr	r3, [r3, #4]
 80176c0:	68db      	ldr	r3, [r3, #12]
 80176c2:	7afa      	ldrb	r2, [r7, #11]
 80176c4:	4610      	mov	r0, r2
 80176c6:	4798      	blx	r3
 80176c8:	4603      	mov	r3, r0
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d00b      	beq.n	80176e6 <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80176ce:	7af9      	ldrb	r1, [r7, #11]
 80176d0:	2327      	movs	r3, #39	@ 0x27
 80176d2:	2202      	movs	r2, #2
 80176d4:	68f8      	ldr	r0, [r7, #12]
 80176d6:	f7ff fc91 	bl	8016ffc <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80176da:	697b      	ldr	r3, [r7, #20]
 80176dc:	2205      	movs	r2, #5
 80176de:	721a      	strb	r2, [r3, #8]
      return -1;
 80176e0:	f04f 33ff 	mov.w	r3, #4294967295
 80176e4:	e06e      	b.n	80177c4 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	3302      	adds	r3, #2
 80176ea:	781b      	ldrb	r3, [r3, #0]
 80176ec:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	3303      	adds	r3, #3
 80176f2:	781b      	ldrb	r3, [r3, #0]
 80176f4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80176f6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	3304      	adds	r3, #4
 80176fc:	781b      	ldrb	r3, [r3, #0]
 80176fe:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8017700:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8017702:	687a      	ldr	r2, [r7, #4]
 8017704:	3205      	adds	r2, #5
 8017706:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8017708:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801770a:	697b      	ldr	r3, [r7, #20]
 801770c:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	3306      	adds	r3, #6
 8017714:	781b      	ldrb	r3, [r3, #0]
 8017716:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	3307      	adds	r3, #7
 801771c:	781b      	ldrb	r3, [r3, #0]
 801771e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8017720:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	3308      	adds	r3, #8
 8017726:	781b      	ldrb	r3, [r3, #0]
 8017728:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 801772a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 801772c:	687a      	ldr	r2, [r7, #4]
 801772e:	3209      	adds	r2, #9
 8017730:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8017732:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8017734:	697b      	ldr	r3, [r7, #20]
 8017736:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801773a:	697b      	ldr	r3, [r7, #20]
 801773c:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8017740:	697b      	ldr	r3, [r7, #20]
 8017742:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8017746:	7af9      	ldrb	r1, [r7, #11]
 8017748:	68f8      	ldr	r0, [r7, #12]
 801774a:	f000 f87e 	bl	801784a <SCSI_CheckAddressRange>
 801774e:	4603      	mov	r3, r0
 8017750:	2b00      	cmp	r3, #0
 8017752:	da02      	bge.n	801775a <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8017754:	f04f 33ff 	mov.w	r3, #4294967295
 8017758:	e034      	b.n	80177c4 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801775a:	697b      	ldr	r3, [r7, #20]
 801775c:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8017760:	697a      	ldr	r2, [r7, #20]
 8017762:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 8017766:	fb02 f303 	mul.w	r3, r2, r3
 801776a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 801776c:	697b      	ldr	r3, [r7, #20]
 801776e:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8017772:	693a      	ldr	r2, [r7, #16]
 8017774:	429a      	cmp	r2, r3
 8017776:	d00a      	beq.n	801778e <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8017778:	697b      	ldr	r3, [r7, #20]
 801777a:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 801777e:	2320      	movs	r3, #32
 8017780:	2205      	movs	r2, #5
 8017782:	68f8      	ldr	r0, [r7, #12]
 8017784:	f7ff fc3a 	bl	8016ffc <SCSI_SenseCode>
      return -1;
 8017788:	f04f 33ff 	mov.w	r3, #4294967295
 801778c:	e01a      	b.n	80177c4 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 801778e:	693b      	ldr	r3, [r7, #16]
 8017790:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017794:	bf28      	it	cs
 8017796:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 801779a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 801779c:	697b      	ldr	r3, [r7, #20]
 801779e:	2201      	movs	r2, #1
 80177a0:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80177a2:	4b0a      	ldr	r3, [pc, #40]	@ (80177cc <SCSI_Write12+0x1c8>)
 80177a4:	7819      	ldrb	r1, [r3, #0]
 80177a6:	697b      	ldr	r3, [r7, #20]
 80177a8:	f103 0210 	add.w	r2, r3, #16
 80177ac:	693b      	ldr	r3, [r7, #16]
 80177ae:	68f8      	ldr	r0, [r7, #12]
 80177b0:	f006 f825 	bl	801d7fe <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80177b4:	2300      	movs	r3, #0
 80177b6:	e005      	b.n	80177c4 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 80177b8:	7afb      	ldrb	r3, [r7, #11]
 80177ba:	4619      	mov	r1, r3
 80177bc:	68f8      	ldr	r0, [r7, #12]
 80177be:	f000 f8f7 	bl	80179b0 <SCSI_ProcessWrite>
 80177c2:	4603      	mov	r3, r0
}
 80177c4:	4618      	mov	r0, r3
 80177c6:	3718      	adds	r7, #24
 80177c8:	46bd      	mov	sp, r7
 80177ca:	bd80      	pop	{r7, pc}
 80177cc:	200000af 	.word	0x200000af

080177d0 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80177d0:	b580      	push	{r7, lr}
 80177d2:	b086      	sub	sp, #24
 80177d4:	af00      	add	r7, sp, #0
 80177d6:	60f8      	str	r0, [r7, #12]
 80177d8:	460b      	mov	r3, r1
 80177da:	607a      	str	r2, [r7, #4]
 80177dc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80177de:	68fb      	ldr	r3, [r7, #12]
 80177e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80177e4:	68fb      	ldr	r3, [r7, #12]
 80177e6:	32b0      	adds	r2, #176	@ 0xb0
 80177e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80177ec:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80177ee:	697b      	ldr	r3, [r7, #20]
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d102      	bne.n	80177fa <SCSI_Verify10+0x2a>
  {
    return -1;
 80177f4:	f04f 33ff 	mov.w	r3, #4294967295
 80177f8:	e023      	b.n	8017842 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	3301      	adds	r3, #1
 80177fe:	781b      	ldrb	r3, [r3, #0]
 8017800:	f003 0302 	and.w	r3, r3, #2
 8017804:	2b00      	cmp	r3, #0
 8017806:	d008      	beq.n	801781a <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8017808:	7af9      	ldrb	r1, [r7, #11]
 801780a:	2324      	movs	r3, #36	@ 0x24
 801780c:	2205      	movs	r2, #5
 801780e:	68f8      	ldr	r0, [r7, #12]
 8017810:	f7ff fbf4 	bl	8016ffc <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8017814:	f04f 33ff 	mov.w	r3, #4294967295
 8017818:	e013      	b.n	8017842 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 801781a:	697b      	ldr	r3, [r7, #20]
 801781c:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8017820:	697b      	ldr	r3, [r7, #20]
 8017822:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8017826:	7af9      	ldrb	r1, [r7, #11]
 8017828:	68f8      	ldr	r0, [r7, #12]
 801782a:	f000 f80e 	bl	801784a <SCSI_CheckAddressRange>
 801782e:	4603      	mov	r3, r0
 8017830:	2b00      	cmp	r3, #0
 8017832:	da02      	bge.n	801783a <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 8017834:	f04f 33ff 	mov.w	r3, #4294967295
 8017838:	e003      	b.n	8017842 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 801783a:	697b      	ldr	r3, [r7, #20]
 801783c:	2200      	movs	r2, #0
 801783e:	60da      	str	r2, [r3, #12]

  return 0;
 8017840:	2300      	movs	r3, #0
}
 8017842:	4618      	mov	r0, r3
 8017844:	3718      	adds	r7, #24
 8017846:	46bd      	mov	sp, r7
 8017848:	bd80      	pop	{r7, pc}

0801784a <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 801784a:	b580      	push	{r7, lr}
 801784c:	b086      	sub	sp, #24
 801784e:	af00      	add	r7, sp, #0
 8017850:	60f8      	str	r0, [r7, #12]
 8017852:	607a      	str	r2, [r7, #4]
 8017854:	603b      	str	r3, [r7, #0]
 8017856:	460b      	mov	r3, r1
 8017858:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801785a:	68fb      	ldr	r3, [r7, #12]
 801785c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017860:	68fb      	ldr	r3, [r7, #12]
 8017862:	32b0      	adds	r2, #176	@ 0xb0
 8017864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017868:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801786a:	697b      	ldr	r3, [r7, #20]
 801786c:	2b00      	cmp	r3, #0
 801786e:	d102      	bne.n	8017876 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8017870:	f04f 33ff 	mov.w	r3, #4294967295
 8017874:	e011      	b.n	801789a <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8017876:	687a      	ldr	r2, [r7, #4]
 8017878:	683b      	ldr	r3, [r7, #0]
 801787a:	441a      	add	r2, r3
 801787c:	697b      	ldr	r3, [r7, #20]
 801787e:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8017882:	429a      	cmp	r2, r3
 8017884:	d908      	bls.n	8017898 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8017886:	7af9      	ldrb	r1, [r7, #11]
 8017888:	2321      	movs	r3, #33	@ 0x21
 801788a:	2205      	movs	r2, #5
 801788c:	68f8      	ldr	r0, [r7, #12]
 801788e:	f7ff fbb5 	bl	8016ffc <SCSI_SenseCode>
    return -1;
 8017892:	f04f 33ff 	mov.w	r3, #4294967295
 8017896:	e000      	b.n	801789a <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 8017898:	2300      	movs	r3, #0
}
 801789a:	4618      	mov	r0, r3
 801789c:	3718      	adds	r7, #24
 801789e:	46bd      	mov	sp, r7
 80178a0:	bd80      	pop	{r7, pc}
	...

080178a4 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80178a4:	b590      	push	{r4, r7, lr}
 80178a6:	b085      	sub	sp, #20
 80178a8:	af00      	add	r7, sp, #0
 80178aa:	6078      	str	r0, [r7, #4]
 80178ac:	460b      	mov	r3, r1
 80178ae:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	32b0      	adds	r2, #176	@ 0xb0
 80178ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80178be:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 80178c0:	68fb      	ldr	r3, [r7, #12]
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	d102      	bne.n	80178cc <SCSI_ProcessRead+0x28>
  {
    return -1;
 80178c6:	f04f 33ff 	mov.w	r3, #4294967295
 80178ca:	e06a      	b.n	80179a2 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80178cc:	68fb      	ldr	r3, [r7, #12]
 80178ce:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 80178d2:	68fa      	ldr	r2, [r7, #12]
 80178d4:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 80178d8:	fb02 f303 	mul.w	r3, r2, r3
 80178dc:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80178de:	68bb      	ldr	r3, [r7, #8]
 80178e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80178e4:	bf28      	it	cs
 80178e6:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 80178ea:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80178f2:	687a      	ldr	r2, [r7, #4]
 80178f4:	33b0      	adds	r3, #176	@ 0xb0
 80178f6:	009b      	lsls	r3, r3, #2
 80178f8:	4413      	add	r3, r2
 80178fa:	685b      	ldr	r3, [r3, #4]
 80178fc:	691c      	ldr	r4, [r3, #16]
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	f103 0110 	add.w	r1, r3, #16
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 801790a:	68fb      	ldr	r3, [r7, #12]
 801790c:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8017910:	4618      	mov	r0, r3
 8017912:	68bb      	ldr	r3, [r7, #8]
 8017914:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8017918:	b29b      	uxth	r3, r3
 801791a:	78f8      	ldrb	r0, [r7, #3]
 801791c:	47a0      	blx	r4
 801791e:	4603      	mov	r3, r0
 8017920:	2b00      	cmp	r3, #0
 8017922:	da08      	bge.n	8017936 <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8017924:	78f9      	ldrb	r1, [r7, #3]
 8017926:	2311      	movs	r3, #17
 8017928:	2204      	movs	r2, #4
 801792a:	6878      	ldr	r0, [r7, #4]
 801792c:	f7ff fb66 	bl	8016ffc <SCSI_SenseCode>
    return -1;
 8017930:	f04f 33ff 	mov.w	r3, #4294967295
 8017934:	e035      	b.n	80179a2 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8017936:	4b1d      	ldr	r3, [pc, #116]	@ (80179ac <SCSI_ProcessRead+0x108>)
 8017938:	7819      	ldrb	r1, [r3, #0]
 801793a:	68fb      	ldr	r3, [r7, #12]
 801793c:	f103 0210 	add.w	r2, r3, #16
 8017940:	68bb      	ldr	r3, [r7, #8]
 8017942:	6878      	ldr	r0, [r7, #4]
 8017944:	f005 ff3a 	bl	801d7bc <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8017948:	68fb      	ldr	r3, [r7, #12]
 801794a:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 801794e:	68fb      	ldr	r3, [r7, #12]
 8017950:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8017954:	4619      	mov	r1, r3
 8017956:	68bb      	ldr	r3, [r7, #8]
 8017958:	fbb3 f3f1 	udiv	r3, r3, r1
 801795c:	441a      	add	r2, r3
 801795e:	68fb      	ldr	r3, [r7, #12]
 8017960:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8017964:	68fb      	ldr	r3, [r7, #12]
 8017966:	f8d3 2870 	ldr.w	r2, [r3, #2160]	@ 0x870
 801796a:	68fb      	ldr	r3, [r7, #12]
 801796c:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8017970:	4619      	mov	r1, r3
 8017972:	68bb      	ldr	r3, [r7, #8]
 8017974:	fbb3 f3f1 	udiv	r3, r3, r1
 8017978:	1ad2      	subs	r2, r2, r3
 801797a:	68fb      	ldr	r3, [r7, #12]
 801797c:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8017980:	68fb      	ldr	r3, [r7, #12]
 8017982:	f8d3 2838 	ldr.w	r2, [r3, #2104]	@ 0x838
 8017986:	68bb      	ldr	r3, [r7, #8]
 8017988:	1ad2      	subs	r2, r2, r3
 801798a:	68fb      	ldr	r3, [r7, #12]
 801798c:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838

  if (hmsc->scsi_blk_len == 0U)
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8017996:	2b00      	cmp	r3, #0
 8017998:	d102      	bne.n	80179a0 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	2203      	movs	r2, #3
 801799e:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 80179a0:	2300      	movs	r3, #0
}
 80179a2:	4618      	mov	r0, r3
 80179a4:	3714      	adds	r7, #20
 80179a6:	46bd      	mov	sp, r7
 80179a8:	bd90      	pop	{r4, r7, pc}
 80179aa:	bf00      	nop
 80179ac:	200000ae 	.word	0x200000ae

080179b0 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80179b0:	b590      	push	{r4, r7, lr}
 80179b2:	b085      	sub	sp, #20
 80179b4:	af00      	add	r7, sp, #0
 80179b6:	6078      	str	r0, [r7, #4]
 80179b8:	460b      	mov	r3, r1
 80179ba:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	32b0      	adds	r2, #176	@ 0xb0
 80179c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80179ca:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 80179cc:	68fb      	ldr	r3, [r7, #12]
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d102      	bne.n	80179d8 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 80179d2:	f04f 33ff 	mov.w	r3, #4294967295
 80179d6:	e07a      	b.n	8017ace <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80179d8:	68fb      	ldr	r3, [r7, #12]
 80179da:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 80179de:	68fa      	ldr	r2, [r7, #12]
 80179e0:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 80179e4:	fb02 f303 	mul.w	r3, r2, r3
 80179e8:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80179ea:	68bb      	ldr	r3, [r7, #8]
 80179ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80179f0:	bf28      	it	cs
 80179f2:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 80179f6:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80179fe:	687a      	ldr	r2, [r7, #4]
 8017a00:	33b0      	adds	r3, #176	@ 0xb0
 8017a02:	009b      	lsls	r3, r3, #2
 8017a04:	4413      	add	r3, r2
 8017a06:	685b      	ldr	r3, [r3, #4]
 8017a08:	695c      	ldr	r4, [r3, #20]
 8017a0a:	68fb      	ldr	r3, [r7, #12]
 8017a0c:	f103 0110 	add.w	r1, r3, #16
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8017a1c:	4618      	mov	r0, r3
 8017a1e:	68bb      	ldr	r3, [r7, #8]
 8017a20:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8017a24:	b29b      	uxth	r3, r3
 8017a26:	78f8      	ldrb	r0, [r7, #3]
 8017a28:	47a0      	blx	r4
 8017a2a:	4603      	mov	r3, r0
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	da08      	bge.n	8017a42 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8017a30:	78f9      	ldrb	r1, [r7, #3]
 8017a32:	2303      	movs	r3, #3
 8017a34:	2204      	movs	r2, #4
 8017a36:	6878      	ldr	r0, [r7, #4]
 8017a38:	f7ff fae0 	bl	8016ffc <SCSI_SenseCode>
    return -1;
 8017a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8017a40:	e045      	b.n	8017ace <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8017a42:	68fb      	ldr	r3, [r7, #12]
 8017a44:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8017a48:	68fb      	ldr	r3, [r7, #12]
 8017a4a:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8017a4e:	4619      	mov	r1, r3
 8017a50:	68bb      	ldr	r3, [r7, #8]
 8017a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8017a56:	441a      	add	r2, r3
 8017a58:	68fb      	ldr	r3, [r7, #12]
 8017a5a:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8017a5e:	68fb      	ldr	r3, [r7, #12]
 8017a60:	f8d3 2870 	ldr.w	r2, [r3, #2160]	@ 0x870
 8017a64:	68fb      	ldr	r3, [r7, #12]
 8017a66:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8017a6a:	4619      	mov	r1, r3
 8017a6c:	68bb      	ldr	r3, [r7, #8]
 8017a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8017a72:	1ad2      	subs	r2, r2, r3
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8017a7a:	68fb      	ldr	r3, [r7, #12]
 8017a7c:	f8d3 2838 	ldr.w	r2, [r3, #2104]	@ 0x838
 8017a80:	68bb      	ldr	r3, [r7, #8]
 8017a82:	1ad2      	subs	r2, r2, r3
 8017a84:	68fb      	ldr	r3, [r7, #12]
 8017a86:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838

  if (hmsc->scsi_blk_len == 0U)
 8017a8a:	68fb      	ldr	r3, [r7, #12]
 8017a8c:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	d104      	bne.n	8017a9e <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8017a94:	2100      	movs	r1, #0
 8017a96:	6878      	ldr	r0, [r7, #4]
 8017a98:	f7fe fce2 	bl	8016460 <MSC_BOT_SendCSW>
 8017a9c:	e016      	b.n	8017acc <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8017a9e:	68fb      	ldr	r3, [r7, #12]
 8017aa0:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8017aa4:	68fa      	ldr	r2, [r7, #12]
 8017aa6:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 8017aaa:	fb02 f303 	mul.w	r3, r2, r3
 8017aae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017ab2:	bf28      	it	cs
 8017ab4:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8017ab8:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8017aba:	4b07      	ldr	r3, [pc, #28]	@ (8017ad8 <SCSI_ProcessWrite+0x128>)
 8017abc:	7819      	ldrb	r1, [r3, #0]
 8017abe:	68fb      	ldr	r3, [r7, #12]
 8017ac0:	f103 0210 	add.w	r2, r3, #16
 8017ac4:	68bb      	ldr	r3, [r7, #8]
 8017ac6:	6878      	ldr	r0, [r7, #4]
 8017ac8:	f005 fe99 	bl	801d7fe <USBD_LL_PrepareReceive>
  }

  return 0;
 8017acc:	2300      	movs	r3, #0
}
 8017ace:	4618      	mov	r0, r3
 8017ad0:	3714      	adds	r7, #20
 8017ad2:	46bd      	mov	sp, r7
 8017ad4:	bd90      	pop	{r4, r7, pc}
 8017ad6:	bf00      	nop
 8017ad8:	200000af 	.word	0x200000af

08017adc <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8017adc:	b480      	push	{r7}
 8017ade:	b087      	sub	sp, #28
 8017ae0:	af00      	add	r7, sp, #0
 8017ae2:	60f8      	str	r0, [r7, #12]
 8017ae4:	60b9      	str	r1, [r7, #8]
 8017ae6:	4613      	mov	r3, r2
 8017ae8:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8017aea:	88fb      	ldrh	r3, [r7, #6]
 8017aec:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8017aee:	68fb      	ldr	r3, [r7, #12]
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	d102      	bne.n	8017afa <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8017af4:	f04f 33ff 	mov.w	r3, #4294967295
 8017af8:	e013      	b.n	8017b22 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8017afa:	8afa      	ldrh	r2, [r7, #22]
 8017afc:	68fb      	ldr	r3, [r7, #12]
 8017afe:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8017b00:	e00b      	b.n	8017b1a <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8017b02:	8afb      	ldrh	r3, [r7, #22]
 8017b04:	3b01      	subs	r3, #1
 8017b06:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8017b08:	8afb      	ldrh	r3, [r7, #22]
 8017b0a:	68ba      	ldr	r2, [r7, #8]
 8017b0c:	441a      	add	r2, r3
 8017b0e:	8afb      	ldrh	r3, [r7, #22]
 8017b10:	7811      	ldrb	r1, [r2, #0]
 8017b12:	68fa      	ldr	r2, [r7, #12]
 8017b14:	4413      	add	r3, r2
 8017b16:	460a      	mov	r2, r1
 8017b18:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8017b1a:	8afb      	ldrh	r3, [r7, #22]
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	d1f0      	bne.n	8017b02 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8017b20:	2300      	movs	r3, #0
}
 8017b22:	4618      	mov	r0, r3
 8017b24:	371c      	adds	r7, #28
 8017b26:	46bd      	mov	sp, r7
 8017b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b2c:	4770      	bx	lr

08017b2e <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8017b2e:	b580      	push	{r7, lr}
 8017b30:	b086      	sub	sp, #24
 8017b32:	af00      	add	r7, sp, #0
 8017b34:	60f8      	str	r0, [r7, #12]
 8017b36:	60b9      	str	r1, [r7, #8]
 8017b38:	4613      	mov	r3, r2
 8017b3a:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8017b3c:	68fb      	ldr	r3, [r7, #12]
 8017b3e:	2b00      	cmp	r3, #0
 8017b40:	d101      	bne.n	8017b46 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8017b42:	2303      	movs	r3, #3
 8017b44:	e01f      	b.n	8017b86 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8017b46:	68fb      	ldr	r3, [r7, #12]
 8017b48:	2200      	movs	r2, #0
 8017b4a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8017b4e:	68fb      	ldr	r3, [r7, #12]
 8017b50:	2200      	movs	r2, #0
 8017b52:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8017b56:	68fb      	ldr	r3, [r7, #12]
 8017b58:	2200      	movs	r2, #0
 8017b5a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8017b5e:	68bb      	ldr	r3, [r7, #8]
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	d003      	beq.n	8017b6c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8017b64:	68fb      	ldr	r3, [r7, #12]
 8017b66:	68ba      	ldr	r2, [r7, #8]
 8017b68:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017b6c:	68fb      	ldr	r3, [r7, #12]
 8017b6e:	2201      	movs	r2, #1
 8017b70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8017b74:	68fb      	ldr	r3, [r7, #12]
 8017b76:	79fa      	ldrb	r2, [r7, #7]
 8017b78:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8017b7a:	68f8      	ldr	r0, [r7, #12]
 8017b7c:	f005 fc94 	bl	801d4a8 <USBD_LL_Init>
 8017b80:	4603      	mov	r3, r0
 8017b82:	75fb      	strb	r3, [r7, #23]

  return ret;
 8017b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8017b86:	4618      	mov	r0, r3
 8017b88:	3718      	adds	r7, #24
 8017b8a:	46bd      	mov	sp, r7
 8017b8c:	bd80      	pop	{r7, pc}

08017b8e <USBD_DeInit>:
  *         Re-Initialize the device library
  * @param  pdev: device instance
  * @retval status: status
  */
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 8017b8e:	b580      	push	{r7, lr}
 8017b90:	b084      	sub	sp, #16
 8017b92:	af00      	add	r7, sp, #0
 8017b94:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Disconnect the USB Device */
  (void)USBD_LL_Stop(pdev);
 8017b96:	6878      	ldr	r0, [r7, #4]
 8017b98:	f005 fd08 	bl	801d5ac <USBD_LL_Stop>

  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	2201      	movs	r2, #1
 8017ba0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
    }
  }
#else
  /* Free Class Resources */
  if (pdev->pClass[0] != NULL)
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	d009      	beq.n	8017bc2 <USBD_DeInit+0x34>
  {
    pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017bb4:	685b      	ldr	r3, [r3, #4]
 8017bb6:	687a      	ldr	r2, [r7, #4]
 8017bb8:	6852      	ldr	r2, [r2, #4]
 8017bba:	b2d2      	uxtb	r2, r2
 8017bbc:	4611      	mov	r1, r2
 8017bbe:	6878      	ldr	r0, [r7, #4]
 8017bc0:	4798      	blx	r3
  }

  pdev->pUserData[0] = NULL;
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	2200      	movs	r2, #0
 8017bc6:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

#endif /* USE_USBD_COMPOSITE */

  /* Free Device descriptors resources */
  pdev->pDesc = NULL;
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	2200      	movs	r2, #0
 8017bce:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  pdev->pConfDesc = NULL;
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	2200      	movs	r2, #0
 8017bd6:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* DeInitialize low level driver */
  ret = USBD_LL_DeInit(pdev);
 8017bda:	6878      	ldr	r0, [r7, #4]
 8017bdc:	f005 fcb0 	bl	801d540 <USBD_LL_DeInit>
 8017be0:	4603      	mov	r3, r0
 8017be2:	73fb      	strb	r3, [r7, #15]

  return ret;
 8017be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8017be6:	4618      	mov	r0, r3
 8017be8:	3710      	adds	r7, #16
 8017bea:	46bd      	mov	sp, r7
 8017bec:	bd80      	pop	{r7, pc}

08017bee <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8017bee:	b580      	push	{r7, lr}
 8017bf0:	b084      	sub	sp, #16
 8017bf2:	af00      	add	r7, sp, #0
 8017bf4:	6078      	str	r0, [r7, #4]
 8017bf6:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8017bf8:	2300      	movs	r3, #0
 8017bfa:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8017bfc:	683b      	ldr	r3, [r7, #0]
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	d101      	bne.n	8017c06 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8017c02:	2303      	movs	r3, #3
 8017c04:	e025      	b.n	8017c52 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	683a      	ldr	r2, [r7, #0]
 8017c0a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	32ae      	adds	r2, #174	@ 0xae
 8017c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d00f      	beq.n	8017c42 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	32ae      	adds	r2, #174	@ 0xae
 8017c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017c32:	f107 020e 	add.w	r2, r7, #14
 8017c36:	4610      	mov	r0, r2
 8017c38:	4798      	blx	r3
 8017c3a:	4602      	mov	r2, r0
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8017c48:	1c5a      	adds	r2, r3, #1
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8017c50:	2300      	movs	r3, #0
}
 8017c52:	4618      	mov	r0, r3
 8017c54:	3710      	adds	r7, #16
 8017c56:	46bd      	mov	sp, r7
 8017c58:	bd80      	pop	{r7, pc}

08017c5a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8017c5a:	b580      	push	{r7, lr}
 8017c5c:	b082      	sub	sp, #8
 8017c5e:	af00      	add	r7, sp, #0
 8017c60:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8017c62:	6878      	ldr	r0, [r7, #4]
 8017c64:	f005 fc87 	bl	801d576 <USBD_LL_Start>
 8017c68:	4603      	mov	r3, r0
}
 8017c6a:	4618      	mov	r0, r3
 8017c6c:	3708      	adds	r7, #8
 8017c6e:	46bd      	mov	sp, r7
 8017c70:	bd80      	pop	{r7, pc}

08017c72 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8017c72:	b580      	push	{r7, lr}
 8017c74:	b082      	sub	sp, #8
 8017c76:	af00      	add	r7, sp, #0
 8017c78:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8017c7a:	6878      	ldr	r0, [r7, #4]
 8017c7c:	f005 fc96 	bl	801d5ac <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	d009      	beq.n	8017c9e <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017c90:	685b      	ldr	r3, [r3, #4]
 8017c92:	687a      	ldr	r2, [r7, #4]
 8017c94:	6852      	ldr	r2, [r2, #4]
 8017c96:	b2d2      	uxtb	r2, r2
 8017c98:	4611      	mov	r1, r2
 8017c9a:	6878      	ldr	r0, [r7, #4]
 8017c9c:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 8017c9e:	2300      	movs	r3, #0
}
 8017ca0:	4618      	mov	r0, r3
 8017ca2:	3708      	adds	r7, #8
 8017ca4:	46bd      	mov	sp, r7
 8017ca6:	bd80      	pop	{r7, pc}

08017ca8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8017ca8:	b480      	push	{r7}
 8017caa:	b083      	sub	sp, #12
 8017cac:	af00      	add	r7, sp, #0
 8017cae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8017cb0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8017cb2:	4618      	mov	r0, r3
 8017cb4:	370c      	adds	r7, #12
 8017cb6:	46bd      	mov	sp, r7
 8017cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cbc:	4770      	bx	lr

08017cbe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017cbe:	b580      	push	{r7, lr}
 8017cc0:	b084      	sub	sp, #16
 8017cc2:	af00      	add	r7, sp, #0
 8017cc4:	6078      	str	r0, [r7, #4]
 8017cc6:	460b      	mov	r3, r1
 8017cc8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8017cca:	2300      	movs	r3, #0
 8017ccc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017cd4:	2b00      	cmp	r3, #0
 8017cd6:	d009      	beq.n	8017cec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017cde:	681b      	ldr	r3, [r3, #0]
 8017ce0:	78fa      	ldrb	r2, [r7, #3]
 8017ce2:	4611      	mov	r1, r2
 8017ce4:	6878      	ldr	r0, [r7, #4]
 8017ce6:	4798      	blx	r3
 8017ce8:	4603      	mov	r3, r0
 8017cea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8017cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8017cee:	4618      	mov	r0, r3
 8017cf0:	3710      	adds	r7, #16
 8017cf2:	46bd      	mov	sp, r7
 8017cf4:	bd80      	pop	{r7, pc}

08017cf6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017cf6:	b580      	push	{r7, lr}
 8017cf8:	b084      	sub	sp, #16
 8017cfa:	af00      	add	r7, sp, #0
 8017cfc:	6078      	str	r0, [r7, #4]
 8017cfe:	460b      	mov	r3, r1
 8017d00:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8017d02:	2300      	movs	r3, #0
 8017d04:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017d0c:	685b      	ldr	r3, [r3, #4]
 8017d0e:	78fa      	ldrb	r2, [r7, #3]
 8017d10:	4611      	mov	r1, r2
 8017d12:	6878      	ldr	r0, [r7, #4]
 8017d14:	4798      	blx	r3
 8017d16:	4603      	mov	r3, r0
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	d001      	beq.n	8017d20 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8017d1c:	2303      	movs	r3, #3
 8017d1e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8017d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d22:	4618      	mov	r0, r3
 8017d24:	3710      	adds	r7, #16
 8017d26:	46bd      	mov	sp, r7
 8017d28:	bd80      	pop	{r7, pc}

08017d2a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8017d2a:	b580      	push	{r7, lr}
 8017d2c:	b084      	sub	sp, #16
 8017d2e:	af00      	add	r7, sp, #0
 8017d30:	6078      	str	r0, [r7, #4]
 8017d32:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8017d3a:	6839      	ldr	r1, [r7, #0]
 8017d3c:	4618      	mov	r0, r3
 8017d3e:	f001 f90c 	bl	8018f5a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	2201      	movs	r2, #1
 8017d46:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8017d50:	461a      	mov	r2, r3
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8017d5e:	f003 031f 	and.w	r3, r3, #31
 8017d62:	2b02      	cmp	r3, #2
 8017d64:	d01a      	beq.n	8017d9c <USBD_LL_SetupStage+0x72>
 8017d66:	2b02      	cmp	r3, #2
 8017d68:	d822      	bhi.n	8017db0 <USBD_LL_SetupStage+0x86>
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	d002      	beq.n	8017d74 <USBD_LL_SetupStage+0x4a>
 8017d6e:	2b01      	cmp	r3, #1
 8017d70:	d00a      	beq.n	8017d88 <USBD_LL_SetupStage+0x5e>
 8017d72:	e01d      	b.n	8017db0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8017d7a:	4619      	mov	r1, r3
 8017d7c:	6878      	ldr	r0, [r7, #4]
 8017d7e:	f000 fb63 	bl	8018448 <USBD_StdDevReq>
 8017d82:	4603      	mov	r3, r0
 8017d84:	73fb      	strb	r3, [r7, #15]
      break;
 8017d86:	e020      	b.n	8017dca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8017d8e:	4619      	mov	r1, r3
 8017d90:	6878      	ldr	r0, [r7, #4]
 8017d92:	f000 fbcb 	bl	801852c <USBD_StdItfReq>
 8017d96:	4603      	mov	r3, r0
 8017d98:	73fb      	strb	r3, [r7, #15]
      break;
 8017d9a:	e016      	b.n	8017dca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8017da2:	4619      	mov	r1, r3
 8017da4:	6878      	ldr	r0, [r7, #4]
 8017da6:	f000 fc2d 	bl	8018604 <USBD_StdEPReq>
 8017daa:	4603      	mov	r3, r0
 8017dac:	73fb      	strb	r3, [r7, #15]
      break;
 8017dae:	e00c      	b.n	8017dca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8017db6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8017dba:	b2db      	uxtb	r3, r3
 8017dbc:	4619      	mov	r1, r3
 8017dbe:	6878      	ldr	r0, [r7, #4]
 8017dc0:	f005 fc73 	bl	801d6aa <USBD_LL_StallEP>
 8017dc4:	4603      	mov	r3, r0
 8017dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8017dc8:	bf00      	nop
  }

  return ret;
 8017dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8017dcc:	4618      	mov	r0, r3
 8017dce:	3710      	adds	r7, #16
 8017dd0:	46bd      	mov	sp, r7
 8017dd2:	bd80      	pop	{r7, pc}

08017dd4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8017dd4:	b580      	push	{r7, lr}
 8017dd6:	b086      	sub	sp, #24
 8017dd8:	af00      	add	r7, sp, #0
 8017dda:	60f8      	str	r0, [r7, #12]
 8017ddc:	460b      	mov	r3, r1
 8017dde:	607a      	str	r2, [r7, #4]
 8017de0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8017de2:	2300      	movs	r3, #0
 8017de4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8017de6:	7afb      	ldrb	r3, [r7, #11]
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	d16e      	bne.n	8017eca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8017dec:	68fb      	ldr	r3, [r7, #12]
 8017dee:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8017df2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8017df4:	68fb      	ldr	r3, [r7, #12]
 8017df6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8017dfa:	2b03      	cmp	r3, #3
 8017dfc:	f040 8098 	bne.w	8017f30 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8017e00:	693b      	ldr	r3, [r7, #16]
 8017e02:	689a      	ldr	r2, [r3, #8]
 8017e04:	693b      	ldr	r3, [r7, #16]
 8017e06:	68db      	ldr	r3, [r3, #12]
 8017e08:	429a      	cmp	r2, r3
 8017e0a:	d913      	bls.n	8017e34 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8017e0c:	693b      	ldr	r3, [r7, #16]
 8017e0e:	689a      	ldr	r2, [r3, #8]
 8017e10:	693b      	ldr	r3, [r7, #16]
 8017e12:	68db      	ldr	r3, [r3, #12]
 8017e14:	1ad2      	subs	r2, r2, r3
 8017e16:	693b      	ldr	r3, [r7, #16]
 8017e18:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8017e1a:	693b      	ldr	r3, [r7, #16]
 8017e1c:	68da      	ldr	r2, [r3, #12]
 8017e1e:	693b      	ldr	r3, [r7, #16]
 8017e20:	689b      	ldr	r3, [r3, #8]
 8017e22:	4293      	cmp	r3, r2
 8017e24:	bf28      	it	cs
 8017e26:	4613      	movcs	r3, r2
 8017e28:	461a      	mov	r2, r3
 8017e2a:	6879      	ldr	r1, [r7, #4]
 8017e2c:	68f8      	ldr	r0, [r7, #12]
 8017e2e:	f001 f96b 	bl	8019108 <USBD_CtlContinueRx>
 8017e32:	e07d      	b.n	8017f30 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8017e3a:	f003 031f 	and.w	r3, r3, #31
 8017e3e:	2b02      	cmp	r3, #2
 8017e40:	d014      	beq.n	8017e6c <USBD_LL_DataOutStage+0x98>
 8017e42:	2b02      	cmp	r3, #2
 8017e44:	d81d      	bhi.n	8017e82 <USBD_LL_DataOutStage+0xae>
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	d002      	beq.n	8017e50 <USBD_LL_DataOutStage+0x7c>
 8017e4a:	2b01      	cmp	r3, #1
 8017e4c:	d003      	beq.n	8017e56 <USBD_LL_DataOutStage+0x82>
 8017e4e:	e018      	b.n	8017e82 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8017e50:	2300      	movs	r3, #0
 8017e52:	75bb      	strb	r3, [r7, #22]
            break;
 8017e54:	e018      	b.n	8017e88 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8017e56:	68fb      	ldr	r3, [r7, #12]
 8017e58:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8017e5c:	b2db      	uxtb	r3, r3
 8017e5e:	4619      	mov	r1, r3
 8017e60:	68f8      	ldr	r0, [r7, #12]
 8017e62:	f000 fa64 	bl	801832e <USBD_CoreFindIF>
 8017e66:	4603      	mov	r3, r0
 8017e68:	75bb      	strb	r3, [r7, #22]
            break;
 8017e6a:	e00d      	b.n	8017e88 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8017e6c:	68fb      	ldr	r3, [r7, #12]
 8017e6e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8017e72:	b2db      	uxtb	r3, r3
 8017e74:	4619      	mov	r1, r3
 8017e76:	68f8      	ldr	r0, [r7, #12]
 8017e78:	f000 fa66 	bl	8018348 <USBD_CoreFindEP>
 8017e7c:	4603      	mov	r3, r0
 8017e7e:	75bb      	strb	r3, [r7, #22]
            break;
 8017e80:	e002      	b.n	8017e88 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8017e82:	2300      	movs	r3, #0
 8017e84:	75bb      	strb	r3, [r7, #22]
            break;
 8017e86:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8017e88:	7dbb      	ldrb	r3, [r7, #22]
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d119      	bne.n	8017ec2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017e8e:	68fb      	ldr	r3, [r7, #12]
 8017e90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017e94:	b2db      	uxtb	r3, r3
 8017e96:	2b03      	cmp	r3, #3
 8017e98:	d113      	bne.n	8017ec2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8017e9a:	7dba      	ldrb	r2, [r7, #22]
 8017e9c:	68fb      	ldr	r3, [r7, #12]
 8017e9e:	32ae      	adds	r2, #174	@ 0xae
 8017ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017ea4:	691b      	ldr	r3, [r3, #16]
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	d00b      	beq.n	8017ec2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8017eaa:	7dba      	ldrb	r2, [r7, #22]
 8017eac:	68fb      	ldr	r3, [r7, #12]
 8017eae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8017eb2:	7dba      	ldrb	r2, [r7, #22]
 8017eb4:	68fb      	ldr	r3, [r7, #12]
 8017eb6:	32ae      	adds	r2, #174	@ 0xae
 8017eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017ebc:	691b      	ldr	r3, [r3, #16]
 8017ebe:	68f8      	ldr	r0, [r7, #12]
 8017ec0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8017ec2:	68f8      	ldr	r0, [r7, #12]
 8017ec4:	f001 f931 	bl	801912a <USBD_CtlSendStatus>
 8017ec8:	e032      	b.n	8017f30 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8017eca:	7afb      	ldrb	r3, [r7, #11]
 8017ecc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017ed0:	b2db      	uxtb	r3, r3
 8017ed2:	4619      	mov	r1, r3
 8017ed4:	68f8      	ldr	r0, [r7, #12]
 8017ed6:	f000 fa37 	bl	8018348 <USBD_CoreFindEP>
 8017eda:	4603      	mov	r3, r0
 8017edc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017ede:	7dbb      	ldrb	r3, [r7, #22]
 8017ee0:	2bff      	cmp	r3, #255	@ 0xff
 8017ee2:	d025      	beq.n	8017f30 <USBD_LL_DataOutStage+0x15c>
 8017ee4:	7dbb      	ldrb	r3, [r7, #22]
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d122      	bne.n	8017f30 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017eea:	68fb      	ldr	r3, [r7, #12]
 8017eec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017ef0:	b2db      	uxtb	r3, r3
 8017ef2:	2b03      	cmp	r3, #3
 8017ef4:	d117      	bne.n	8017f26 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8017ef6:	7dba      	ldrb	r2, [r7, #22]
 8017ef8:	68fb      	ldr	r3, [r7, #12]
 8017efa:	32ae      	adds	r2, #174	@ 0xae
 8017efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017f00:	699b      	ldr	r3, [r3, #24]
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d00f      	beq.n	8017f26 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8017f06:	7dba      	ldrb	r2, [r7, #22]
 8017f08:	68fb      	ldr	r3, [r7, #12]
 8017f0a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8017f0e:	7dba      	ldrb	r2, [r7, #22]
 8017f10:	68fb      	ldr	r3, [r7, #12]
 8017f12:	32ae      	adds	r2, #174	@ 0xae
 8017f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017f18:	699b      	ldr	r3, [r3, #24]
 8017f1a:	7afa      	ldrb	r2, [r7, #11]
 8017f1c:	4611      	mov	r1, r2
 8017f1e:	68f8      	ldr	r0, [r7, #12]
 8017f20:	4798      	blx	r3
 8017f22:	4603      	mov	r3, r0
 8017f24:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8017f26:	7dfb      	ldrb	r3, [r7, #23]
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d001      	beq.n	8017f30 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8017f2c:	7dfb      	ldrb	r3, [r7, #23]
 8017f2e:	e000      	b.n	8017f32 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8017f30:	2300      	movs	r3, #0
}
 8017f32:	4618      	mov	r0, r3
 8017f34:	3718      	adds	r7, #24
 8017f36:	46bd      	mov	sp, r7
 8017f38:	bd80      	pop	{r7, pc}

08017f3a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8017f3a:	b580      	push	{r7, lr}
 8017f3c:	b086      	sub	sp, #24
 8017f3e:	af00      	add	r7, sp, #0
 8017f40:	60f8      	str	r0, [r7, #12]
 8017f42:	460b      	mov	r3, r1
 8017f44:	607a      	str	r2, [r7, #4]
 8017f46:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8017f48:	7afb      	ldrb	r3, [r7, #11]
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d16f      	bne.n	801802e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8017f4e:	68fb      	ldr	r3, [r7, #12]
 8017f50:	3314      	adds	r3, #20
 8017f52:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8017f54:	68fb      	ldr	r3, [r7, #12]
 8017f56:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8017f5a:	2b02      	cmp	r3, #2
 8017f5c:	d15a      	bne.n	8018014 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8017f5e:	693b      	ldr	r3, [r7, #16]
 8017f60:	689a      	ldr	r2, [r3, #8]
 8017f62:	693b      	ldr	r3, [r7, #16]
 8017f64:	68db      	ldr	r3, [r3, #12]
 8017f66:	429a      	cmp	r2, r3
 8017f68:	d914      	bls.n	8017f94 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8017f6a:	693b      	ldr	r3, [r7, #16]
 8017f6c:	689a      	ldr	r2, [r3, #8]
 8017f6e:	693b      	ldr	r3, [r7, #16]
 8017f70:	68db      	ldr	r3, [r3, #12]
 8017f72:	1ad2      	subs	r2, r2, r3
 8017f74:	693b      	ldr	r3, [r7, #16]
 8017f76:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8017f78:	693b      	ldr	r3, [r7, #16]
 8017f7a:	689b      	ldr	r3, [r3, #8]
 8017f7c:	461a      	mov	r2, r3
 8017f7e:	6879      	ldr	r1, [r7, #4]
 8017f80:	68f8      	ldr	r0, [r7, #12]
 8017f82:	f001 f8b0 	bl	80190e6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017f86:	2300      	movs	r3, #0
 8017f88:	2200      	movs	r2, #0
 8017f8a:	2100      	movs	r1, #0
 8017f8c:	68f8      	ldr	r0, [r7, #12]
 8017f8e:	f005 fc36 	bl	801d7fe <USBD_LL_PrepareReceive>
 8017f92:	e03f      	b.n	8018014 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8017f94:	693b      	ldr	r3, [r7, #16]
 8017f96:	68da      	ldr	r2, [r3, #12]
 8017f98:	693b      	ldr	r3, [r7, #16]
 8017f9a:	689b      	ldr	r3, [r3, #8]
 8017f9c:	429a      	cmp	r2, r3
 8017f9e:	d11c      	bne.n	8017fda <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8017fa0:	693b      	ldr	r3, [r7, #16]
 8017fa2:	685a      	ldr	r2, [r3, #4]
 8017fa4:	693b      	ldr	r3, [r7, #16]
 8017fa6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8017fa8:	429a      	cmp	r2, r3
 8017faa:	d316      	bcc.n	8017fda <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8017fac:	693b      	ldr	r3, [r7, #16]
 8017fae:	685a      	ldr	r2, [r3, #4]
 8017fb0:	68fb      	ldr	r3, [r7, #12]
 8017fb2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8017fb6:	429a      	cmp	r2, r3
 8017fb8:	d20f      	bcs.n	8017fda <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8017fba:	2200      	movs	r2, #0
 8017fbc:	2100      	movs	r1, #0
 8017fbe:	68f8      	ldr	r0, [r7, #12]
 8017fc0:	f001 f891 	bl	80190e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8017fc4:	68fb      	ldr	r3, [r7, #12]
 8017fc6:	2200      	movs	r2, #0
 8017fc8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017fcc:	2300      	movs	r3, #0
 8017fce:	2200      	movs	r2, #0
 8017fd0:	2100      	movs	r1, #0
 8017fd2:	68f8      	ldr	r0, [r7, #12]
 8017fd4:	f005 fc13 	bl	801d7fe <USBD_LL_PrepareReceive>
 8017fd8:	e01c      	b.n	8018014 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017fda:	68fb      	ldr	r3, [r7, #12]
 8017fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017fe0:	b2db      	uxtb	r3, r3
 8017fe2:	2b03      	cmp	r3, #3
 8017fe4:	d10f      	bne.n	8018006 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8017fe6:	68fb      	ldr	r3, [r7, #12]
 8017fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017fec:	68db      	ldr	r3, [r3, #12]
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d009      	beq.n	8018006 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8017ff2:	68fb      	ldr	r3, [r7, #12]
 8017ff4:	2200      	movs	r2, #0
 8017ff6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8017ffa:	68fb      	ldr	r3, [r7, #12]
 8017ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018000:	68db      	ldr	r3, [r3, #12]
 8018002:	68f8      	ldr	r0, [r7, #12]
 8018004:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8018006:	2180      	movs	r1, #128	@ 0x80
 8018008:	68f8      	ldr	r0, [r7, #12]
 801800a:	f005 fb4e 	bl	801d6aa <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801800e:	68f8      	ldr	r0, [r7, #12]
 8018010:	f001 f89e 	bl	8019150 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8018014:	68fb      	ldr	r3, [r7, #12]
 8018016:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801801a:	2b00      	cmp	r3, #0
 801801c:	d03a      	beq.n	8018094 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801801e:	68f8      	ldr	r0, [r7, #12]
 8018020:	f7ff fe42 	bl	8017ca8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8018024:	68fb      	ldr	r3, [r7, #12]
 8018026:	2200      	movs	r2, #0
 8018028:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 801802c:	e032      	b.n	8018094 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801802e:	7afb      	ldrb	r3, [r7, #11]
 8018030:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8018034:	b2db      	uxtb	r3, r3
 8018036:	4619      	mov	r1, r3
 8018038:	68f8      	ldr	r0, [r7, #12]
 801803a:	f000 f985 	bl	8018348 <USBD_CoreFindEP>
 801803e:	4603      	mov	r3, r0
 8018040:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8018042:	7dfb      	ldrb	r3, [r7, #23]
 8018044:	2bff      	cmp	r3, #255	@ 0xff
 8018046:	d025      	beq.n	8018094 <USBD_LL_DataInStage+0x15a>
 8018048:	7dfb      	ldrb	r3, [r7, #23]
 801804a:	2b00      	cmp	r3, #0
 801804c:	d122      	bne.n	8018094 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801804e:	68fb      	ldr	r3, [r7, #12]
 8018050:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018054:	b2db      	uxtb	r3, r3
 8018056:	2b03      	cmp	r3, #3
 8018058:	d11c      	bne.n	8018094 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801805a:	7dfa      	ldrb	r2, [r7, #23]
 801805c:	68fb      	ldr	r3, [r7, #12]
 801805e:	32ae      	adds	r2, #174	@ 0xae
 8018060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018064:	695b      	ldr	r3, [r3, #20]
 8018066:	2b00      	cmp	r3, #0
 8018068:	d014      	beq.n	8018094 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801806a:	7dfa      	ldrb	r2, [r7, #23]
 801806c:	68fb      	ldr	r3, [r7, #12]
 801806e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8018072:	7dfa      	ldrb	r2, [r7, #23]
 8018074:	68fb      	ldr	r3, [r7, #12]
 8018076:	32ae      	adds	r2, #174	@ 0xae
 8018078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801807c:	695b      	ldr	r3, [r3, #20]
 801807e:	7afa      	ldrb	r2, [r7, #11]
 8018080:	4611      	mov	r1, r2
 8018082:	68f8      	ldr	r0, [r7, #12]
 8018084:	4798      	blx	r3
 8018086:	4603      	mov	r3, r0
 8018088:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801808a:	7dbb      	ldrb	r3, [r7, #22]
 801808c:	2b00      	cmp	r3, #0
 801808e:	d001      	beq.n	8018094 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8018090:	7dbb      	ldrb	r3, [r7, #22]
 8018092:	e000      	b.n	8018096 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8018094:	2300      	movs	r3, #0
}
 8018096:	4618      	mov	r0, r3
 8018098:	3718      	adds	r7, #24
 801809a:	46bd      	mov	sp, r7
 801809c:	bd80      	pop	{r7, pc}

0801809e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801809e:	b580      	push	{r7, lr}
 80180a0:	b084      	sub	sp, #16
 80180a2:	af00      	add	r7, sp, #0
 80180a4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80180a6:	2300      	movs	r3, #0
 80180a8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	2201      	movs	r2, #1
 80180ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	2200      	movs	r2, #0
 80180b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	2200      	movs	r2, #0
 80180be:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	2200      	movs	r2, #0
 80180c4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	2200      	movs	r2, #0
 80180cc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	d014      	beq.n	8018104 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80180e0:	685b      	ldr	r3, [r3, #4]
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d00e      	beq.n	8018104 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80180ec:	685b      	ldr	r3, [r3, #4]
 80180ee:	687a      	ldr	r2, [r7, #4]
 80180f0:	6852      	ldr	r2, [r2, #4]
 80180f2:	b2d2      	uxtb	r2, r2
 80180f4:	4611      	mov	r1, r2
 80180f6:	6878      	ldr	r0, [r7, #4]
 80180f8:	4798      	blx	r3
 80180fa:	4603      	mov	r3, r0
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	d001      	beq.n	8018104 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8018100:	2303      	movs	r3, #3
 8018102:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8018104:	2340      	movs	r3, #64	@ 0x40
 8018106:	2200      	movs	r2, #0
 8018108:	2100      	movs	r1, #0
 801810a:	6878      	ldr	r0, [r7, #4]
 801810c:	f005 fa69 	bl	801d5e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	2201      	movs	r2, #1
 8018114:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	2240      	movs	r2, #64	@ 0x40
 801811c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8018120:	2340      	movs	r3, #64	@ 0x40
 8018122:	2200      	movs	r2, #0
 8018124:	2180      	movs	r1, #128	@ 0x80
 8018126:	6878      	ldr	r0, [r7, #4]
 8018128:	f005 fa5b 	bl	801d5e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	2201      	movs	r2, #1
 8018130:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	2240      	movs	r2, #64	@ 0x40
 8018136:	621a      	str	r2, [r3, #32]

  return ret;
 8018138:	7bfb      	ldrb	r3, [r7, #15]
}
 801813a:	4618      	mov	r0, r3
 801813c:	3710      	adds	r7, #16
 801813e:	46bd      	mov	sp, r7
 8018140:	bd80      	pop	{r7, pc}

08018142 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8018142:	b480      	push	{r7}
 8018144:	b083      	sub	sp, #12
 8018146:	af00      	add	r7, sp, #0
 8018148:	6078      	str	r0, [r7, #4]
 801814a:	460b      	mov	r3, r1
 801814c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	78fa      	ldrb	r2, [r7, #3]
 8018152:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8018154:	2300      	movs	r3, #0
}
 8018156:	4618      	mov	r0, r3
 8018158:	370c      	adds	r7, #12
 801815a:	46bd      	mov	sp, r7
 801815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018160:	4770      	bx	lr

08018162 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8018162:	b480      	push	{r7}
 8018164:	b083      	sub	sp, #12
 8018166:	af00      	add	r7, sp, #0
 8018168:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018170:	b2db      	uxtb	r3, r3
 8018172:	2b04      	cmp	r3, #4
 8018174:	d006      	beq.n	8018184 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801817c:	b2da      	uxtb	r2, r3
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	2204      	movs	r2, #4
 8018188:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 801818c:	2300      	movs	r3, #0
}
 801818e:	4618      	mov	r0, r3
 8018190:	370c      	adds	r7, #12
 8018192:	46bd      	mov	sp, r7
 8018194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018198:	4770      	bx	lr

0801819a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801819a:	b480      	push	{r7}
 801819c:	b083      	sub	sp, #12
 801819e:	af00      	add	r7, sp, #0
 80181a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80181a8:	b2db      	uxtb	r3, r3
 80181aa:	2b04      	cmp	r3, #4
 80181ac:	d106      	bne.n	80181bc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80181b4:	b2da      	uxtb	r2, r3
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80181bc:	2300      	movs	r3, #0
}
 80181be:	4618      	mov	r0, r3
 80181c0:	370c      	adds	r7, #12
 80181c2:	46bd      	mov	sp, r7
 80181c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181c8:	4770      	bx	lr

080181ca <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80181ca:	b580      	push	{r7, lr}
 80181cc:	b082      	sub	sp, #8
 80181ce:	af00      	add	r7, sp, #0
 80181d0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80181d2:	687b      	ldr	r3, [r7, #4]
 80181d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80181d8:	b2db      	uxtb	r3, r3
 80181da:	2b03      	cmp	r3, #3
 80181dc:	d110      	bne.n	8018200 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d00b      	beq.n	8018200 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80181ee:	69db      	ldr	r3, [r3, #28]
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d005      	beq.n	8018200 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80181fa:	69db      	ldr	r3, [r3, #28]
 80181fc:	6878      	ldr	r0, [r7, #4]
 80181fe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8018200:	2300      	movs	r3, #0
}
 8018202:	4618      	mov	r0, r3
 8018204:	3708      	adds	r7, #8
 8018206:	46bd      	mov	sp, r7
 8018208:	bd80      	pop	{r7, pc}

0801820a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801820a:	b580      	push	{r7, lr}
 801820c:	b082      	sub	sp, #8
 801820e:	af00      	add	r7, sp, #0
 8018210:	6078      	str	r0, [r7, #4]
 8018212:	460b      	mov	r3, r1
 8018214:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	32ae      	adds	r2, #174	@ 0xae
 8018220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018224:	2b00      	cmp	r3, #0
 8018226:	d101      	bne.n	801822c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8018228:	2303      	movs	r3, #3
 801822a:	e01c      	b.n	8018266 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018232:	b2db      	uxtb	r3, r3
 8018234:	2b03      	cmp	r3, #3
 8018236:	d115      	bne.n	8018264 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	32ae      	adds	r2, #174	@ 0xae
 8018242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018246:	6a1b      	ldr	r3, [r3, #32]
 8018248:	2b00      	cmp	r3, #0
 801824a:	d00b      	beq.n	8018264 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	32ae      	adds	r2, #174	@ 0xae
 8018256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801825a:	6a1b      	ldr	r3, [r3, #32]
 801825c:	78fa      	ldrb	r2, [r7, #3]
 801825e:	4611      	mov	r1, r2
 8018260:	6878      	ldr	r0, [r7, #4]
 8018262:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8018264:	2300      	movs	r3, #0
}
 8018266:	4618      	mov	r0, r3
 8018268:	3708      	adds	r7, #8
 801826a:	46bd      	mov	sp, r7
 801826c:	bd80      	pop	{r7, pc}

0801826e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801826e:	b580      	push	{r7, lr}
 8018270:	b082      	sub	sp, #8
 8018272:	af00      	add	r7, sp, #0
 8018274:	6078      	str	r0, [r7, #4]
 8018276:	460b      	mov	r3, r1
 8018278:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	32ae      	adds	r2, #174	@ 0xae
 8018284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018288:	2b00      	cmp	r3, #0
 801828a:	d101      	bne.n	8018290 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 801828c:	2303      	movs	r3, #3
 801828e:	e01c      	b.n	80182ca <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018296:	b2db      	uxtb	r3, r3
 8018298:	2b03      	cmp	r3, #3
 801829a:	d115      	bne.n	80182c8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	32ae      	adds	r2, #174	@ 0xae
 80182a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80182aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80182ac:	2b00      	cmp	r3, #0
 80182ae:	d00b      	beq.n	80182c8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	32ae      	adds	r2, #174	@ 0xae
 80182ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80182be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80182c0:	78fa      	ldrb	r2, [r7, #3]
 80182c2:	4611      	mov	r1, r2
 80182c4:	6878      	ldr	r0, [r7, #4]
 80182c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80182c8:	2300      	movs	r3, #0
}
 80182ca:	4618      	mov	r0, r3
 80182cc:	3708      	adds	r7, #8
 80182ce:	46bd      	mov	sp, r7
 80182d0:	bd80      	pop	{r7, pc}

080182d2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80182d2:	b480      	push	{r7}
 80182d4:	b083      	sub	sp, #12
 80182d6:	af00      	add	r7, sp, #0
 80182d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80182da:	2300      	movs	r3, #0
}
 80182dc:	4618      	mov	r0, r3
 80182de:	370c      	adds	r7, #12
 80182e0:	46bd      	mov	sp, r7
 80182e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182e6:	4770      	bx	lr

080182e8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80182e8:	b580      	push	{r7, lr}
 80182ea:	b084      	sub	sp, #16
 80182ec:	af00      	add	r7, sp, #0
 80182ee:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80182f0:	2300      	movs	r3, #0
 80182f2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	2201      	movs	r2, #1
 80182f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018302:	2b00      	cmp	r3, #0
 8018304:	d00e      	beq.n	8018324 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801830c:	685b      	ldr	r3, [r3, #4]
 801830e:	687a      	ldr	r2, [r7, #4]
 8018310:	6852      	ldr	r2, [r2, #4]
 8018312:	b2d2      	uxtb	r2, r2
 8018314:	4611      	mov	r1, r2
 8018316:	6878      	ldr	r0, [r7, #4]
 8018318:	4798      	blx	r3
 801831a:	4603      	mov	r3, r0
 801831c:	2b00      	cmp	r3, #0
 801831e:	d001      	beq.n	8018324 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8018320:	2303      	movs	r3, #3
 8018322:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8018324:	7bfb      	ldrb	r3, [r7, #15]
}
 8018326:	4618      	mov	r0, r3
 8018328:	3710      	adds	r7, #16
 801832a:	46bd      	mov	sp, r7
 801832c:	bd80      	pop	{r7, pc}

0801832e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801832e:	b480      	push	{r7}
 8018330:	b083      	sub	sp, #12
 8018332:	af00      	add	r7, sp, #0
 8018334:	6078      	str	r0, [r7, #4]
 8018336:	460b      	mov	r3, r1
 8018338:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801833a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801833c:	4618      	mov	r0, r3
 801833e:	370c      	adds	r7, #12
 8018340:	46bd      	mov	sp, r7
 8018342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018346:	4770      	bx	lr

08018348 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8018348:	b480      	push	{r7}
 801834a:	b083      	sub	sp, #12
 801834c:	af00      	add	r7, sp, #0
 801834e:	6078      	str	r0, [r7, #4]
 8018350:	460b      	mov	r3, r1
 8018352:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8018354:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8018356:	4618      	mov	r0, r3
 8018358:	370c      	adds	r7, #12
 801835a:	46bd      	mov	sp, r7
 801835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018360:	4770      	bx	lr

08018362 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8018362:	b580      	push	{r7, lr}
 8018364:	b086      	sub	sp, #24
 8018366:	af00      	add	r7, sp, #0
 8018368:	6078      	str	r0, [r7, #4]
 801836a:	460b      	mov	r3, r1
 801836c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8018376:	2300      	movs	r3, #0
 8018378:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801837a:	68fb      	ldr	r3, [r7, #12]
 801837c:	885b      	ldrh	r3, [r3, #2]
 801837e:	b29b      	uxth	r3, r3
 8018380:	68fa      	ldr	r2, [r7, #12]
 8018382:	7812      	ldrb	r2, [r2, #0]
 8018384:	4293      	cmp	r3, r2
 8018386:	d91f      	bls.n	80183c8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8018388:	68fb      	ldr	r3, [r7, #12]
 801838a:	781b      	ldrb	r3, [r3, #0]
 801838c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801838e:	e013      	b.n	80183b8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8018390:	f107 030a 	add.w	r3, r7, #10
 8018394:	4619      	mov	r1, r3
 8018396:	6978      	ldr	r0, [r7, #20]
 8018398:	f000 f81b 	bl	80183d2 <USBD_GetNextDesc>
 801839c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801839e:	697b      	ldr	r3, [r7, #20]
 80183a0:	785b      	ldrb	r3, [r3, #1]
 80183a2:	2b05      	cmp	r3, #5
 80183a4:	d108      	bne.n	80183b8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80183a6:	697b      	ldr	r3, [r7, #20]
 80183a8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80183aa:	693b      	ldr	r3, [r7, #16]
 80183ac:	789b      	ldrb	r3, [r3, #2]
 80183ae:	78fa      	ldrb	r2, [r7, #3]
 80183b0:	429a      	cmp	r2, r3
 80183b2:	d008      	beq.n	80183c6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80183b4:	2300      	movs	r3, #0
 80183b6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80183b8:	68fb      	ldr	r3, [r7, #12]
 80183ba:	885b      	ldrh	r3, [r3, #2]
 80183bc:	b29a      	uxth	r2, r3
 80183be:	897b      	ldrh	r3, [r7, #10]
 80183c0:	429a      	cmp	r2, r3
 80183c2:	d8e5      	bhi.n	8018390 <USBD_GetEpDesc+0x2e>
 80183c4:	e000      	b.n	80183c8 <USBD_GetEpDesc+0x66>
          break;
 80183c6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80183c8:	693b      	ldr	r3, [r7, #16]
}
 80183ca:	4618      	mov	r0, r3
 80183cc:	3718      	adds	r7, #24
 80183ce:	46bd      	mov	sp, r7
 80183d0:	bd80      	pop	{r7, pc}

080183d2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80183d2:	b480      	push	{r7}
 80183d4:	b085      	sub	sp, #20
 80183d6:	af00      	add	r7, sp, #0
 80183d8:	6078      	str	r0, [r7, #4]
 80183da:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80183e0:	683b      	ldr	r3, [r7, #0]
 80183e2:	881b      	ldrh	r3, [r3, #0]
 80183e4:	68fa      	ldr	r2, [r7, #12]
 80183e6:	7812      	ldrb	r2, [r2, #0]
 80183e8:	4413      	add	r3, r2
 80183ea:	b29a      	uxth	r2, r3
 80183ec:	683b      	ldr	r3, [r7, #0]
 80183ee:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80183f0:	68fb      	ldr	r3, [r7, #12]
 80183f2:	781b      	ldrb	r3, [r3, #0]
 80183f4:	461a      	mov	r2, r3
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	4413      	add	r3, r2
 80183fa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80183fc:	68fb      	ldr	r3, [r7, #12]
}
 80183fe:	4618      	mov	r0, r3
 8018400:	3714      	adds	r7, #20
 8018402:	46bd      	mov	sp, r7
 8018404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018408:	4770      	bx	lr

0801840a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801840a:	b480      	push	{r7}
 801840c:	b087      	sub	sp, #28
 801840e:	af00      	add	r7, sp, #0
 8018410:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8018416:	697b      	ldr	r3, [r7, #20]
 8018418:	781b      	ldrb	r3, [r3, #0]
 801841a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801841c:	697b      	ldr	r3, [r7, #20]
 801841e:	3301      	adds	r3, #1
 8018420:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8018422:	697b      	ldr	r3, [r7, #20]
 8018424:	781b      	ldrb	r3, [r3, #0]
 8018426:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8018428:	8a3b      	ldrh	r3, [r7, #16]
 801842a:	021b      	lsls	r3, r3, #8
 801842c:	b21a      	sxth	r2, r3
 801842e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018432:	4313      	orrs	r3, r2
 8018434:	b21b      	sxth	r3, r3
 8018436:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8018438:	89fb      	ldrh	r3, [r7, #14]
}
 801843a:	4618      	mov	r0, r3
 801843c:	371c      	adds	r7, #28
 801843e:	46bd      	mov	sp, r7
 8018440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018444:	4770      	bx	lr
	...

08018448 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018448:	b580      	push	{r7, lr}
 801844a:	b084      	sub	sp, #16
 801844c:	af00      	add	r7, sp, #0
 801844e:	6078      	str	r0, [r7, #4]
 8018450:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018452:	2300      	movs	r3, #0
 8018454:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018456:	683b      	ldr	r3, [r7, #0]
 8018458:	781b      	ldrb	r3, [r3, #0]
 801845a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801845e:	2b40      	cmp	r3, #64	@ 0x40
 8018460:	d005      	beq.n	801846e <USBD_StdDevReq+0x26>
 8018462:	2b40      	cmp	r3, #64	@ 0x40
 8018464:	d857      	bhi.n	8018516 <USBD_StdDevReq+0xce>
 8018466:	2b00      	cmp	r3, #0
 8018468:	d00f      	beq.n	801848a <USBD_StdDevReq+0x42>
 801846a:	2b20      	cmp	r3, #32
 801846c:	d153      	bne.n	8018516 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	32ae      	adds	r2, #174	@ 0xae
 8018478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801847c:	689b      	ldr	r3, [r3, #8]
 801847e:	6839      	ldr	r1, [r7, #0]
 8018480:	6878      	ldr	r0, [r7, #4]
 8018482:	4798      	blx	r3
 8018484:	4603      	mov	r3, r0
 8018486:	73fb      	strb	r3, [r7, #15]
      break;
 8018488:	e04a      	b.n	8018520 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801848a:	683b      	ldr	r3, [r7, #0]
 801848c:	785b      	ldrb	r3, [r3, #1]
 801848e:	2b09      	cmp	r3, #9
 8018490:	d83b      	bhi.n	801850a <USBD_StdDevReq+0xc2>
 8018492:	a201      	add	r2, pc, #4	@ (adr r2, 8018498 <USBD_StdDevReq+0x50>)
 8018494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018498:	080184ed 	.word	0x080184ed
 801849c:	08018501 	.word	0x08018501
 80184a0:	0801850b 	.word	0x0801850b
 80184a4:	080184f7 	.word	0x080184f7
 80184a8:	0801850b 	.word	0x0801850b
 80184ac:	080184cb 	.word	0x080184cb
 80184b0:	080184c1 	.word	0x080184c1
 80184b4:	0801850b 	.word	0x0801850b
 80184b8:	080184e3 	.word	0x080184e3
 80184bc:	080184d5 	.word	0x080184d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80184c0:	6839      	ldr	r1, [r7, #0]
 80184c2:	6878      	ldr	r0, [r7, #4]
 80184c4:	f000 fa3c 	bl	8018940 <USBD_GetDescriptor>
          break;
 80184c8:	e024      	b.n	8018514 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80184ca:	6839      	ldr	r1, [r7, #0]
 80184cc:	6878      	ldr	r0, [r7, #4]
 80184ce:	f000 fba1 	bl	8018c14 <USBD_SetAddress>
          break;
 80184d2:	e01f      	b.n	8018514 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80184d4:	6839      	ldr	r1, [r7, #0]
 80184d6:	6878      	ldr	r0, [r7, #4]
 80184d8:	f000 fbe0 	bl	8018c9c <USBD_SetConfig>
 80184dc:	4603      	mov	r3, r0
 80184de:	73fb      	strb	r3, [r7, #15]
          break;
 80184e0:	e018      	b.n	8018514 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80184e2:	6839      	ldr	r1, [r7, #0]
 80184e4:	6878      	ldr	r0, [r7, #4]
 80184e6:	f000 fc83 	bl	8018df0 <USBD_GetConfig>
          break;
 80184ea:	e013      	b.n	8018514 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80184ec:	6839      	ldr	r1, [r7, #0]
 80184ee:	6878      	ldr	r0, [r7, #4]
 80184f0:	f000 fcb4 	bl	8018e5c <USBD_GetStatus>
          break;
 80184f4:	e00e      	b.n	8018514 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80184f6:	6839      	ldr	r1, [r7, #0]
 80184f8:	6878      	ldr	r0, [r7, #4]
 80184fa:	f000 fce3 	bl	8018ec4 <USBD_SetFeature>
          break;
 80184fe:	e009      	b.n	8018514 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8018500:	6839      	ldr	r1, [r7, #0]
 8018502:	6878      	ldr	r0, [r7, #4]
 8018504:	f000 fd07 	bl	8018f16 <USBD_ClrFeature>
          break;
 8018508:	e004      	b.n	8018514 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801850a:	6839      	ldr	r1, [r7, #0]
 801850c:	6878      	ldr	r0, [r7, #4]
 801850e:	f000 fd5e 	bl	8018fce <USBD_CtlError>
          break;
 8018512:	bf00      	nop
      }
      break;
 8018514:	e004      	b.n	8018520 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8018516:	6839      	ldr	r1, [r7, #0]
 8018518:	6878      	ldr	r0, [r7, #4]
 801851a:	f000 fd58 	bl	8018fce <USBD_CtlError>
      break;
 801851e:	bf00      	nop
  }

  return ret;
 8018520:	7bfb      	ldrb	r3, [r7, #15]
}
 8018522:	4618      	mov	r0, r3
 8018524:	3710      	adds	r7, #16
 8018526:	46bd      	mov	sp, r7
 8018528:	bd80      	pop	{r7, pc}
 801852a:	bf00      	nop

0801852c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801852c:	b580      	push	{r7, lr}
 801852e:	b084      	sub	sp, #16
 8018530:	af00      	add	r7, sp, #0
 8018532:	6078      	str	r0, [r7, #4]
 8018534:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018536:	2300      	movs	r3, #0
 8018538:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801853a:	683b      	ldr	r3, [r7, #0]
 801853c:	781b      	ldrb	r3, [r3, #0]
 801853e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8018542:	2b40      	cmp	r3, #64	@ 0x40
 8018544:	d005      	beq.n	8018552 <USBD_StdItfReq+0x26>
 8018546:	2b40      	cmp	r3, #64	@ 0x40
 8018548:	d852      	bhi.n	80185f0 <USBD_StdItfReq+0xc4>
 801854a:	2b00      	cmp	r3, #0
 801854c:	d001      	beq.n	8018552 <USBD_StdItfReq+0x26>
 801854e:	2b20      	cmp	r3, #32
 8018550:	d14e      	bne.n	80185f0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018558:	b2db      	uxtb	r3, r3
 801855a:	3b01      	subs	r3, #1
 801855c:	2b02      	cmp	r3, #2
 801855e:	d840      	bhi.n	80185e2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8018560:	683b      	ldr	r3, [r7, #0]
 8018562:	889b      	ldrh	r3, [r3, #4]
 8018564:	b2db      	uxtb	r3, r3
 8018566:	2b01      	cmp	r3, #1
 8018568:	d836      	bhi.n	80185d8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801856a:	683b      	ldr	r3, [r7, #0]
 801856c:	889b      	ldrh	r3, [r3, #4]
 801856e:	b2db      	uxtb	r3, r3
 8018570:	4619      	mov	r1, r3
 8018572:	6878      	ldr	r0, [r7, #4]
 8018574:	f7ff fedb 	bl	801832e <USBD_CoreFindIF>
 8018578:	4603      	mov	r3, r0
 801857a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801857c:	7bbb      	ldrb	r3, [r7, #14]
 801857e:	2bff      	cmp	r3, #255	@ 0xff
 8018580:	d01d      	beq.n	80185be <USBD_StdItfReq+0x92>
 8018582:	7bbb      	ldrb	r3, [r7, #14]
 8018584:	2b00      	cmp	r3, #0
 8018586:	d11a      	bne.n	80185be <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8018588:	7bba      	ldrb	r2, [r7, #14]
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	32ae      	adds	r2, #174	@ 0xae
 801858e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018592:	689b      	ldr	r3, [r3, #8]
 8018594:	2b00      	cmp	r3, #0
 8018596:	d00f      	beq.n	80185b8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8018598:	7bba      	ldrb	r2, [r7, #14]
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80185a0:	7bba      	ldrb	r2, [r7, #14]
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	32ae      	adds	r2, #174	@ 0xae
 80185a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80185aa:	689b      	ldr	r3, [r3, #8]
 80185ac:	6839      	ldr	r1, [r7, #0]
 80185ae:	6878      	ldr	r0, [r7, #4]
 80185b0:	4798      	blx	r3
 80185b2:	4603      	mov	r3, r0
 80185b4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80185b6:	e004      	b.n	80185c2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80185b8:	2303      	movs	r3, #3
 80185ba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80185bc:	e001      	b.n	80185c2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80185be:	2303      	movs	r3, #3
 80185c0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80185c2:	683b      	ldr	r3, [r7, #0]
 80185c4:	88db      	ldrh	r3, [r3, #6]
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d110      	bne.n	80185ec <USBD_StdItfReq+0xc0>
 80185ca:	7bfb      	ldrb	r3, [r7, #15]
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d10d      	bne.n	80185ec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80185d0:	6878      	ldr	r0, [r7, #4]
 80185d2:	f000 fdaa 	bl	801912a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80185d6:	e009      	b.n	80185ec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80185d8:	6839      	ldr	r1, [r7, #0]
 80185da:	6878      	ldr	r0, [r7, #4]
 80185dc:	f000 fcf7 	bl	8018fce <USBD_CtlError>
          break;
 80185e0:	e004      	b.n	80185ec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80185e2:	6839      	ldr	r1, [r7, #0]
 80185e4:	6878      	ldr	r0, [r7, #4]
 80185e6:	f000 fcf2 	bl	8018fce <USBD_CtlError>
          break;
 80185ea:	e000      	b.n	80185ee <USBD_StdItfReq+0xc2>
          break;
 80185ec:	bf00      	nop
      }
      break;
 80185ee:	e004      	b.n	80185fa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80185f0:	6839      	ldr	r1, [r7, #0]
 80185f2:	6878      	ldr	r0, [r7, #4]
 80185f4:	f000 fceb 	bl	8018fce <USBD_CtlError>
      break;
 80185f8:	bf00      	nop
  }

  return ret;
 80185fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80185fc:	4618      	mov	r0, r3
 80185fe:	3710      	adds	r7, #16
 8018600:	46bd      	mov	sp, r7
 8018602:	bd80      	pop	{r7, pc}

08018604 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018604:	b580      	push	{r7, lr}
 8018606:	b084      	sub	sp, #16
 8018608:	af00      	add	r7, sp, #0
 801860a:	6078      	str	r0, [r7, #4]
 801860c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801860e:	2300      	movs	r3, #0
 8018610:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8018612:	683b      	ldr	r3, [r7, #0]
 8018614:	889b      	ldrh	r3, [r3, #4]
 8018616:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018618:	683b      	ldr	r3, [r7, #0]
 801861a:	781b      	ldrb	r3, [r3, #0]
 801861c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8018620:	2b40      	cmp	r3, #64	@ 0x40
 8018622:	d007      	beq.n	8018634 <USBD_StdEPReq+0x30>
 8018624:	2b40      	cmp	r3, #64	@ 0x40
 8018626:	f200 817f 	bhi.w	8018928 <USBD_StdEPReq+0x324>
 801862a:	2b00      	cmp	r3, #0
 801862c:	d02a      	beq.n	8018684 <USBD_StdEPReq+0x80>
 801862e:	2b20      	cmp	r3, #32
 8018630:	f040 817a 	bne.w	8018928 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8018634:	7bbb      	ldrb	r3, [r7, #14]
 8018636:	4619      	mov	r1, r3
 8018638:	6878      	ldr	r0, [r7, #4]
 801863a:	f7ff fe85 	bl	8018348 <USBD_CoreFindEP>
 801863e:	4603      	mov	r3, r0
 8018640:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8018642:	7b7b      	ldrb	r3, [r7, #13]
 8018644:	2bff      	cmp	r3, #255	@ 0xff
 8018646:	f000 8174 	beq.w	8018932 <USBD_StdEPReq+0x32e>
 801864a:	7b7b      	ldrb	r3, [r7, #13]
 801864c:	2b00      	cmp	r3, #0
 801864e:	f040 8170 	bne.w	8018932 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8018652:	7b7a      	ldrb	r2, [r7, #13]
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801865a:	7b7a      	ldrb	r2, [r7, #13]
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	32ae      	adds	r2, #174	@ 0xae
 8018660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018664:	689b      	ldr	r3, [r3, #8]
 8018666:	2b00      	cmp	r3, #0
 8018668:	f000 8163 	beq.w	8018932 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801866c:	7b7a      	ldrb	r2, [r7, #13]
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	32ae      	adds	r2, #174	@ 0xae
 8018672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018676:	689b      	ldr	r3, [r3, #8]
 8018678:	6839      	ldr	r1, [r7, #0]
 801867a:	6878      	ldr	r0, [r7, #4]
 801867c:	4798      	blx	r3
 801867e:	4603      	mov	r3, r0
 8018680:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8018682:	e156      	b.n	8018932 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018684:	683b      	ldr	r3, [r7, #0]
 8018686:	785b      	ldrb	r3, [r3, #1]
 8018688:	2b03      	cmp	r3, #3
 801868a:	d008      	beq.n	801869e <USBD_StdEPReq+0x9a>
 801868c:	2b03      	cmp	r3, #3
 801868e:	f300 8145 	bgt.w	801891c <USBD_StdEPReq+0x318>
 8018692:	2b00      	cmp	r3, #0
 8018694:	f000 809b 	beq.w	80187ce <USBD_StdEPReq+0x1ca>
 8018698:	2b01      	cmp	r3, #1
 801869a:	d03c      	beq.n	8018716 <USBD_StdEPReq+0x112>
 801869c:	e13e      	b.n	801891c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80186a4:	b2db      	uxtb	r3, r3
 80186a6:	2b02      	cmp	r3, #2
 80186a8:	d002      	beq.n	80186b0 <USBD_StdEPReq+0xac>
 80186aa:	2b03      	cmp	r3, #3
 80186ac:	d016      	beq.n	80186dc <USBD_StdEPReq+0xd8>
 80186ae:	e02c      	b.n	801870a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80186b0:	7bbb      	ldrb	r3, [r7, #14]
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	d00d      	beq.n	80186d2 <USBD_StdEPReq+0xce>
 80186b6:	7bbb      	ldrb	r3, [r7, #14]
 80186b8:	2b80      	cmp	r3, #128	@ 0x80
 80186ba:	d00a      	beq.n	80186d2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80186bc:	7bbb      	ldrb	r3, [r7, #14]
 80186be:	4619      	mov	r1, r3
 80186c0:	6878      	ldr	r0, [r7, #4]
 80186c2:	f004 fff2 	bl	801d6aa <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80186c6:	2180      	movs	r1, #128	@ 0x80
 80186c8:	6878      	ldr	r0, [r7, #4]
 80186ca:	f004 ffee 	bl	801d6aa <USBD_LL_StallEP>
 80186ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80186d0:	e020      	b.n	8018714 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80186d2:	6839      	ldr	r1, [r7, #0]
 80186d4:	6878      	ldr	r0, [r7, #4]
 80186d6:	f000 fc7a 	bl	8018fce <USBD_CtlError>
              break;
 80186da:	e01b      	b.n	8018714 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80186dc:	683b      	ldr	r3, [r7, #0]
 80186de:	885b      	ldrh	r3, [r3, #2]
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	d10e      	bne.n	8018702 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80186e4:	7bbb      	ldrb	r3, [r7, #14]
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d00b      	beq.n	8018702 <USBD_StdEPReq+0xfe>
 80186ea:	7bbb      	ldrb	r3, [r7, #14]
 80186ec:	2b80      	cmp	r3, #128	@ 0x80
 80186ee:	d008      	beq.n	8018702 <USBD_StdEPReq+0xfe>
 80186f0:	683b      	ldr	r3, [r7, #0]
 80186f2:	88db      	ldrh	r3, [r3, #6]
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d104      	bne.n	8018702 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80186f8:	7bbb      	ldrb	r3, [r7, #14]
 80186fa:	4619      	mov	r1, r3
 80186fc:	6878      	ldr	r0, [r7, #4]
 80186fe:	f004 ffd4 	bl	801d6aa <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8018702:	6878      	ldr	r0, [r7, #4]
 8018704:	f000 fd11 	bl	801912a <USBD_CtlSendStatus>

              break;
 8018708:	e004      	b.n	8018714 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801870a:	6839      	ldr	r1, [r7, #0]
 801870c:	6878      	ldr	r0, [r7, #4]
 801870e:	f000 fc5e 	bl	8018fce <USBD_CtlError>
              break;
 8018712:	bf00      	nop
          }
          break;
 8018714:	e107      	b.n	8018926 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801871c:	b2db      	uxtb	r3, r3
 801871e:	2b02      	cmp	r3, #2
 8018720:	d002      	beq.n	8018728 <USBD_StdEPReq+0x124>
 8018722:	2b03      	cmp	r3, #3
 8018724:	d016      	beq.n	8018754 <USBD_StdEPReq+0x150>
 8018726:	e04b      	b.n	80187c0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8018728:	7bbb      	ldrb	r3, [r7, #14]
 801872a:	2b00      	cmp	r3, #0
 801872c:	d00d      	beq.n	801874a <USBD_StdEPReq+0x146>
 801872e:	7bbb      	ldrb	r3, [r7, #14]
 8018730:	2b80      	cmp	r3, #128	@ 0x80
 8018732:	d00a      	beq.n	801874a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8018734:	7bbb      	ldrb	r3, [r7, #14]
 8018736:	4619      	mov	r1, r3
 8018738:	6878      	ldr	r0, [r7, #4]
 801873a:	f004 ffb6 	bl	801d6aa <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801873e:	2180      	movs	r1, #128	@ 0x80
 8018740:	6878      	ldr	r0, [r7, #4]
 8018742:	f004 ffb2 	bl	801d6aa <USBD_LL_StallEP>
 8018746:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8018748:	e040      	b.n	80187cc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801874a:	6839      	ldr	r1, [r7, #0]
 801874c:	6878      	ldr	r0, [r7, #4]
 801874e:	f000 fc3e 	bl	8018fce <USBD_CtlError>
              break;
 8018752:	e03b      	b.n	80187cc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8018754:	683b      	ldr	r3, [r7, #0]
 8018756:	885b      	ldrh	r3, [r3, #2]
 8018758:	2b00      	cmp	r3, #0
 801875a:	d136      	bne.n	80187ca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801875c:	7bbb      	ldrb	r3, [r7, #14]
 801875e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018762:	2b00      	cmp	r3, #0
 8018764:	d004      	beq.n	8018770 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8018766:	7bbb      	ldrb	r3, [r7, #14]
 8018768:	4619      	mov	r1, r3
 801876a:	6878      	ldr	r0, [r7, #4]
 801876c:	f004 ffbc 	bl	801d6e8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8018770:	6878      	ldr	r0, [r7, #4]
 8018772:	f000 fcda 	bl	801912a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8018776:	7bbb      	ldrb	r3, [r7, #14]
 8018778:	4619      	mov	r1, r3
 801877a:	6878      	ldr	r0, [r7, #4]
 801877c:	f7ff fde4 	bl	8018348 <USBD_CoreFindEP>
 8018780:	4603      	mov	r3, r0
 8018782:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8018784:	7b7b      	ldrb	r3, [r7, #13]
 8018786:	2bff      	cmp	r3, #255	@ 0xff
 8018788:	d01f      	beq.n	80187ca <USBD_StdEPReq+0x1c6>
 801878a:	7b7b      	ldrb	r3, [r7, #13]
 801878c:	2b00      	cmp	r3, #0
 801878e:	d11c      	bne.n	80187ca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8018790:	7b7a      	ldrb	r2, [r7, #13]
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8018798:	7b7a      	ldrb	r2, [r7, #13]
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	32ae      	adds	r2, #174	@ 0xae
 801879e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80187a2:	689b      	ldr	r3, [r3, #8]
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	d010      	beq.n	80187ca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80187a8:	7b7a      	ldrb	r2, [r7, #13]
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	32ae      	adds	r2, #174	@ 0xae
 80187ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80187b2:	689b      	ldr	r3, [r3, #8]
 80187b4:	6839      	ldr	r1, [r7, #0]
 80187b6:	6878      	ldr	r0, [r7, #4]
 80187b8:	4798      	blx	r3
 80187ba:	4603      	mov	r3, r0
 80187bc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80187be:	e004      	b.n	80187ca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80187c0:	6839      	ldr	r1, [r7, #0]
 80187c2:	6878      	ldr	r0, [r7, #4]
 80187c4:	f000 fc03 	bl	8018fce <USBD_CtlError>
              break;
 80187c8:	e000      	b.n	80187cc <USBD_StdEPReq+0x1c8>
              break;
 80187ca:	bf00      	nop
          }
          break;
 80187cc:	e0ab      	b.n	8018926 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80187d4:	b2db      	uxtb	r3, r3
 80187d6:	2b02      	cmp	r3, #2
 80187d8:	d002      	beq.n	80187e0 <USBD_StdEPReq+0x1dc>
 80187da:	2b03      	cmp	r3, #3
 80187dc:	d032      	beq.n	8018844 <USBD_StdEPReq+0x240>
 80187de:	e097      	b.n	8018910 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80187e0:	7bbb      	ldrb	r3, [r7, #14]
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d007      	beq.n	80187f6 <USBD_StdEPReq+0x1f2>
 80187e6:	7bbb      	ldrb	r3, [r7, #14]
 80187e8:	2b80      	cmp	r3, #128	@ 0x80
 80187ea:	d004      	beq.n	80187f6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80187ec:	6839      	ldr	r1, [r7, #0]
 80187ee:	6878      	ldr	r0, [r7, #4]
 80187f0:	f000 fbed 	bl	8018fce <USBD_CtlError>
                break;
 80187f4:	e091      	b.n	801891a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80187f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	da0b      	bge.n	8018816 <USBD_StdEPReq+0x212>
 80187fe:	7bbb      	ldrb	r3, [r7, #14]
 8018800:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018804:	4613      	mov	r3, r2
 8018806:	009b      	lsls	r3, r3, #2
 8018808:	4413      	add	r3, r2
 801880a:	009b      	lsls	r3, r3, #2
 801880c:	3310      	adds	r3, #16
 801880e:	687a      	ldr	r2, [r7, #4]
 8018810:	4413      	add	r3, r2
 8018812:	3304      	adds	r3, #4
 8018814:	e00b      	b.n	801882e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8018816:	7bbb      	ldrb	r3, [r7, #14]
 8018818:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801881c:	4613      	mov	r3, r2
 801881e:	009b      	lsls	r3, r3, #2
 8018820:	4413      	add	r3, r2
 8018822:	009b      	lsls	r3, r3, #2
 8018824:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8018828:	687a      	ldr	r2, [r7, #4]
 801882a:	4413      	add	r3, r2
 801882c:	3304      	adds	r3, #4
 801882e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8018830:	68bb      	ldr	r3, [r7, #8]
 8018832:	2200      	movs	r2, #0
 8018834:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8018836:	68bb      	ldr	r3, [r7, #8]
 8018838:	2202      	movs	r2, #2
 801883a:	4619      	mov	r1, r3
 801883c:	6878      	ldr	r0, [r7, #4]
 801883e:	f000 fc37 	bl	80190b0 <USBD_CtlSendData>
              break;
 8018842:	e06a      	b.n	801891a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8018844:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018848:	2b00      	cmp	r3, #0
 801884a:	da11      	bge.n	8018870 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801884c:	7bbb      	ldrb	r3, [r7, #14]
 801884e:	f003 020f 	and.w	r2, r3, #15
 8018852:	6879      	ldr	r1, [r7, #4]
 8018854:	4613      	mov	r3, r2
 8018856:	009b      	lsls	r3, r3, #2
 8018858:	4413      	add	r3, r2
 801885a:	009b      	lsls	r3, r3, #2
 801885c:	440b      	add	r3, r1
 801885e:	3324      	adds	r3, #36	@ 0x24
 8018860:	881b      	ldrh	r3, [r3, #0]
 8018862:	2b00      	cmp	r3, #0
 8018864:	d117      	bne.n	8018896 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8018866:	6839      	ldr	r1, [r7, #0]
 8018868:	6878      	ldr	r0, [r7, #4]
 801886a:	f000 fbb0 	bl	8018fce <USBD_CtlError>
                  break;
 801886e:	e054      	b.n	801891a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8018870:	7bbb      	ldrb	r3, [r7, #14]
 8018872:	f003 020f 	and.w	r2, r3, #15
 8018876:	6879      	ldr	r1, [r7, #4]
 8018878:	4613      	mov	r3, r2
 801887a:	009b      	lsls	r3, r3, #2
 801887c:	4413      	add	r3, r2
 801887e:	009b      	lsls	r3, r3, #2
 8018880:	440b      	add	r3, r1
 8018882:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8018886:	881b      	ldrh	r3, [r3, #0]
 8018888:	2b00      	cmp	r3, #0
 801888a:	d104      	bne.n	8018896 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801888c:	6839      	ldr	r1, [r7, #0]
 801888e:	6878      	ldr	r0, [r7, #4]
 8018890:	f000 fb9d 	bl	8018fce <USBD_CtlError>
                  break;
 8018894:	e041      	b.n	801891a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018896:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801889a:	2b00      	cmp	r3, #0
 801889c:	da0b      	bge.n	80188b6 <USBD_StdEPReq+0x2b2>
 801889e:	7bbb      	ldrb	r3, [r7, #14]
 80188a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80188a4:	4613      	mov	r3, r2
 80188a6:	009b      	lsls	r3, r3, #2
 80188a8:	4413      	add	r3, r2
 80188aa:	009b      	lsls	r3, r3, #2
 80188ac:	3310      	adds	r3, #16
 80188ae:	687a      	ldr	r2, [r7, #4]
 80188b0:	4413      	add	r3, r2
 80188b2:	3304      	adds	r3, #4
 80188b4:	e00b      	b.n	80188ce <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80188b6:	7bbb      	ldrb	r3, [r7, #14]
 80188b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80188bc:	4613      	mov	r3, r2
 80188be:	009b      	lsls	r3, r3, #2
 80188c0:	4413      	add	r3, r2
 80188c2:	009b      	lsls	r3, r3, #2
 80188c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80188c8:	687a      	ldr	r2, [r7, #4]
 80188ca:	4413      	add	r3, r2
 80188cc:	3304      	adds	r3, #4
 80188ce:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80188d0:	7bbb      	ldrb	r3, [r7, #14]
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	d002      	beq.n	80188dc <USBD_StdEPReq+0x2d8>
 80188d6:	7bbb      	ldrb	r3, [r7, #14]
 80188d8:	2b80      	cmp	r3, #128	@ 0x80
 80188da:	d103      	bne.n	80188e4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80188dc:	68bb      	ldr	r3, [r7, #8]
 80188de:	2200      	movs	r2, #0
 80188e0:	601a      	str	r2, [r3, #0]
 80188e2:	e00e      	b.n	8018902 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80188e4:	7bbb      	ldrb	r3, [r7, #14]
 80188e6:	4619      	mov	r1, r3
 80188e8:	6878      	ldr	r0, [r7, #4]
 80188ea:	f004 ff1c 	bl	801d726 <USBD_LL_IsStallEP>
 80188ee:	4603      	mov	r3, r0
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d003      	beq.n	80188fc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80188f4:	68bb      	ldr	r3, [r7, #8]
 80188f6:	2201      	movs	r2, #1
 80188f8:	601a      	str	r2, [r3, #0]
 80188fa:	e002      	b.n	8018902 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80188fc:	68bb      	ldr	r3, [r7, #8]
 80188fe:	2200      	movs	r2, #0
 8018900:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8018902:	68bb      	ldr	r3, [r7, #8]
 8018904:	2202      	movs	r2, #2
 8018906:	4619      	mov	r1, r3
 8018908:	6878      	ldr	r0, [r7, #4]
 801890a:	f000 fbd1 	bl	80190b0 <USBD_CtlSendData>
              break;
 801890e:	e004      	b.n	801891a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8018910:	6839      	ldr	r1, [r7, #0]
 8018912:	6878      	ldr	r0, [r7, #4]
 8018914:	f000 fb5b 	bl	8018fce <USBD_CtlError>
              break;
 8018918:	bf00      	nop
          }
          break;
 801891a:	e004      	b.n	8018926 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801891c:	6839      	ldr	r1, [r7, #0]
 801891e:	6878      	ldr	r0, [r7, #4]
 8018920:	f000 fb55 	bl	8018fce <USBD_CtlError>
          break;
 8018924:	bf00      	nop
      }
      break;
 8018926:	e005      	b.n	8018934 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8018928:	6839      	ldr	r1, [r7, #0]
 801892a:	6878      	ldr	r0, [r7, #4]
 801892c:	f000 fb4f 	bl	8018fce <USBD_CtlError>
      break;
 8018930:	e000      	b.n	8018934 <USBD_StdEPReq+0x330>
      break;
 8018932:	bf00      	nop
  }

  return ret;
 8018934:	7bfb      	ldrb	r3, [r7, #15]
}
 8018936:	4618      	mov	r0, r3
 8018938:	3710      	adds	r7, #16
 801893a:	46bd      	mov	sp, r7
 801893c:	bd80      	pop	{r7, pc}
	...

08018940 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018940:	b580      	push	{r7, lr}
 8018942:	b084      	sub	sp, #16
 8018944:	af00      	add	r7, sp, #0
 8018946:	6078      	str	r0, [r7, #4]
 8018948:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801894a:	2300      	movs	r3, #0
 801894c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801894e:	2300      	movs	r3, #0
 8018950:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8018952:	2300      	movs	r3, #0
 8018954:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8018956:	683b      	ldr	r3, [r7, #0]
 8018958:	885b      	ldrh	r3, [r3, #2]
 801895a:	0a1b      	lsrs	r3, r3, #8
 801895c:	b29b      	uxth	r3, r3
 801895e:	3b01      	subs	r3, #1
 8018960:	2b06      	cmp	r3, #6
 8018962:	f200 8128 	bhi.w	8018bb6 <USBD_GetDescriptor+0x276>
 8018966:	a201      	add	r2, pc, #4	@ (adr r2, 801896c <USBD_GetDescriptor+0x2c>)
 8018968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801896c:	08018989 	.word	0x08018989
 8018970:	080189a1 	.word	0x080189a1
 8018974:	080189e1 	.word	0x080189e1
 8018978:	08018bb7 	.word	0x08018bb7
 801897c:	08018bb7 	.word	0x08018bb7
 8018980:	08018b57 	.word	0x08018b57
 8018984:	08018b83 	.word	0x08018b83
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801898e:	681b      	ldr	r3, [r3, #0]
 8018990:	687a      	ldr	r2, [r7, #4]
 8018992:	7c12      	ldrb	r2, [r2, #16]
 8018994:	f107 0108 	add.w	r1, r7, #8
 8018998:	4610      	mov	r0, r2
 801899a:	4798      	blx	r3
 801899c:	60f8      	str	r0, [r7, #12]
      break;
 801899e:	e112      	b.n	8018bc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	7c1b      	ldrb	r3, [r3, #16]
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d10d      	bne.n	80189c4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80189ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80189b0:	f107 0208 	add.w	r2, r7, #8
 80189b4:	4610      	mov	r0, r2
 80189b6:	4798      	blx	r3
 80189b8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80189ba:	68fb      	ldr	r3, [r7, #12]
 80189bc:	3301      	adds	r3, #1
 80189be:	2202      	movs	r2, #2
 80189c0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80189c2:	e100      	b.n	8018bc6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80189ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80189cc:	f107 0208 	add.w	r2, r7, #8
 80189d0:	4610      	mov	r0, r2
 80189d2:	4798      	blx	r3
 80189d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80189d6:	68fb      	ldr	r3, [r7, #12]
 80189d8:	3301      	adds	r3, #1
 80189da:	2202      	movs	r2, #2
 80189dc:	701a      	strb	r2, [r3, #0]
      break;
 80189de:	e0f2      	b.n	8018bc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80189e0:	683b      	ldr	r3, [r7, #0]
 80189e2:	885b      	ldrh	r3, [r3, #2]
 80189e4:	b2db      	uxtb	r3, r3
 80189e6:	2b05      	cmp	r3, #5
 80189e8:	f200 80ac 	bhi.w	8018b44 <USBD_GetDescriptor+0x204>
 80189ec:	a201      	add	r2, pc, #4	@ (adr r2, 80189f4 <USBD_GetDescriptor+0xb4>)
 80189ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80189f2:	bf00      	nop
 80189f4:	08018a0d 	.word	0x08018a0d
 80189f8:	08018a41 	.word	0x08018a41
 80189fc:	08018a75 	.word	0x08018a75
 8018a00:	08018aa9 	.word	0x08018aa9
 8018a04:	08018add 	.word	0x08018add
 8018a08:	08018b11 	.word	0x08018b11
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018a12:	685b      	ldr	r3, [r3, #4]
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	d00b      	beq.n	8018a30 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018a1e:	685b      	ldr	r3, [r3, #4]
 8018a20:	687a      	ldr	r2, [r7, #4]
 8018a22:	7c12      	ldrb	r2, [r2, #16]
 8018a24:	f107 0108 	add.w	r1, r7, #8
 8018a28:	4610      	mov	r0, r2
 8018a2a:	4798      	blx	r3
 8018a2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018a2e:	e091      	b.n	8018b54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018a30:	6839      	ldr	r1, [r7, #0]
 8018a32:	6878      	ldr	r0, [r7, #4]
 8018a34:	f000 facb 	bl	8018fce <USBD_CtlError>
            err++;
 8018a38:	7afb      	ldrb	r3, [r7, #11]
 8018a3a:	3301      	adds	r3, #1
 8018a3c:	72fb      	strb	r3, [r7, #11]
          break;
 8018a3e:	e089      	b.n	8018b54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018a46:	689b      	ldr	r3, [r3, #8]
 8018a48:	2b00      	cmp	r3, #0
 8018a4a:	d00b      	beq.n	8018a64 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018a52:	689b      	ldr	r3, [r3, #8]
 8018a54:	687a      	ldr	r2, [r7, #4]
 8018a56:	7c12      	ldrb	r2, [r2, #16]
 8018a58:	f107 0108 	add.w	r1, r7, #8
 8018a5c:	4610      	mov	r0, r2
 8018a5e:	4798      	blx	r3
 8018a60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018a62:	e077      	b.n	8018b54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018a64:	6839      	ldr	r1, [r7, #0]
 8018a66:	6878      	ldr	r0, [r7, #4]
 8018a68:	f000 fab1 	bl	8018fce <USBD_CtlError>
            err++;
 8018a6c:	7afb      	ldrb	r3, [r7, #11]
 8018a6e:	3301      	adds	r3, #1
 8018a70:	72fb      	strb	r3, [r7, #11]
          break;
 8018a72:	e06f      	b.n	8018b54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018a7a:	68db      	ldr	r3, [r3, #12]
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d00b      	beq.n	8018a98 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018a86:	68db      	ldr	r3, [r3, #12]
 8018a88:	687a      	ldr	r2, [r7, #4]
 8018a8a:	7c12      	ldrb	r2, [r2, #16]
 8018a8c:	f107 0108 	add.w	r1, r7, #8
 8018a90:	4610      	mov	r0, r2
 8018a92:	4798      	blx	r3
 8018a94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018a96:	e05d      	b.n	8018b54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018a98:	6839      	ldr	r1, [r7, #0]
 8018a9a:	6878      	ldr	r0, [r7, #4]
 8018a9c:	f000 fa97 	bl	8018fce <USBD_CtlError>
            err++;
 8018aa0:	7afb      	ldrb	r3, [r7, #11]
 8018aa2:	3301      	adds	r3, #1
 8018aa4:	72fb      	strb	r3, [r7, #11]
          break;
 8018aa6:	e055      	b.n	8018b54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018aae:	691b      	ldr	r3, [r3, #16]
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	d00b      	beq.n	8018acc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018aba:	691b      	ldr	r3, [r3, #16]
 8018abc:	687a      	ldr	r2, [r7, #4]
 8018abe:	7c12      	ldrb	r2, [r2, #16]
 8018ac0:	f107 0108 	add.w	r1, r7, #8
 8018ac4:	4610      	mov	r0, r2
 8018ac6:	4798      	blx	r3
 8018ac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018aca:	e043      	b.n	8018b54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018acc:	6839      	ldr	r1, [r7, #0]
 8018ace:	6878      	ldr	r0, [r7, #4]
 8018ad0:	f000 fa7d 	bl	8018fce <USBD_CtlError>
            err++;
 8018ad4:	7afb      	ldrb	r3, [r7, #11]
 8018ad6:	3301      	adds	r3, #1
 8018ad8:	72fb      	strb	r3, [r7, #11]
          break;
 8018ada:	e03b      	b.n	8018b54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018ae2:	695b      	ldr	r3, [r3, #20]
 8018ae4:	2b00      	cmp	r3, #0
 8018ae6:	d00b      	beq.n	8018b00 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018aee:	695b      	ldr	r3, [r3, #20]
 8018af0:	687a      	ldr	r2, [r7, #4]
 8018af2:	7c12      	ldrb	r2, [r2, #16]
 8018af4:	f107 0108 	add.w	r1, r7, #8
 8018af8:	4610      	mov	r0, r2
 8018afa:	4798      	blx	r3
 8018afc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018afe:	e029      	b.n	8018b54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018b00:	6839      	ldr	r1, [r7, #0]
 8018b02:	6878      	ldr	r0, [r7, #4]
 8018b04:	f000 fa63 	bl	8018fce <USBD_CtlError>
            err++;
 8018b08:	7afb      	ldrb	r3, [r7, #11]
 8018b0a:	3301      	adds	r3, #1
 8018b0c:	72fb      	strb	r3, [r7, #11]
          break;
 8018b0e:	e021      	b.n	8018b54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018b16:	699b      	ldr	r3, [r3, #24]
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	d00b      	beq.n	8018b34 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018b22:	699b      	ldr	r3, [r3, #24]
 8018b24:	687a      	ldr	r2, [r7, #4]
 8018b26:	7c12      	ldrb	r2, [r2, #16]
 8018b28:	f107 0108 	add.w	r1, r7, #8
 8018b2c:	4610      	mov	r0, r2
 8018b2e:	4798      	blx	r3
 8018b30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018b32:	e00f      	b.n	8018b54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018b34:	6839      	ldr	r1, [r7, #0]
 8018b36:	6878      	ldr	r0, [r7, #4]
 8018b38:	f000 fa49 	bl	8018fce <USBD_CtlError>
            err++;
 8018b3c:	7afb      	ldrb	r3, [r7, #11]
 8018b3e:	3301      	adds	r3, #1
 8018b40:	72fb      	strb	r3, [r7, #11]
          break;
 8018b42:	e007      	b.n	8018b54 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8018b44:	6839      	ldr	r1, [r7, #0]
 8018b46:	6878      	ldr	r0, [r7, #4]
 8018b48:	f000 fa41 	bl	8018fce <USBD_CtlError>
          err++;
 8018b4c:	7afb      	ldrb	r3, [r7, #11]
 8018b4e:	3301      	adds	r3, #1
 8018b50:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8018b52:	bf00      	nop
      }
      break;
 8018b54:	e037      	b.n	8018bc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	7c1b      	ldrb	r3, [r3, #16]
 8018b5a:	2b00      	cmp	r3, #0
 8018b5c:	d109      	bne.n	8018b72 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018b66:	f107 0208 	add.w	r2, r7, #8
 8018b6a:	4610      	mov	r0, r2
 8018b6c:	4798      	blx	r3
 8018b6e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018b70:	e029      	b.n	8018bc6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8018b72:	6839      	ldr	r1, [r7, #0]
 8018b74:	6878      	ldr	r0, [r7, #4]
 8018b76:	f000 fa2a 	bl	8018fce <USBD_CtlError>
        err++;
 8018b7a:	7afb      	ldrb	r3, [r7, #11]
 8018b7c:	3301      	adds	r3, #1
 8018b7e:	72fb      	strb	r3, [r7, #11]
      break;
 8018b80:	e021      	b.n	8018bc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	7c1b      	ldrb	r3, [r3, #16]
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d10d      	bne.n	8018ba6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018b92:	f107 0208 	add.w	r2, r7, #8
 8018b96:	4610      	mov	r0, r2
 8018b98:	4798      	blx	r3
 8018b9a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8018b9c:	68fb      	ldr	r3, [r7, #12]
 8018b9e:	3301      	adds	r3, #1
 8018ba0:	2207      	movs	r2, #7
 8018ba2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018ba4:	e00f      	b.n	8018bc6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8018ba6:	6839      	ldr	r1, [r7, #0]
 8018ba8:	6878      	ldr	r0, [r7, #4]
 8018baa:	f000 fa10 	bl	8018fce <USBD_CtlError>
        err++;
 8018bae:	7afb      	ldrb	r3, [r7, #11]
 8018bb0:	3301      	adds	r3, #1
 8018bb2:	72fb      	strb	r3, [r7, #11]
      break;
 8018bb4:	e007      	b.n	8018bc6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8018bb6:	6839      	ldr	r1, [r7, #0]
 8018bb8:	6878      	ldr	r0, [r7, #4]
 8018bba:	f000 fa08 	bl	8018fce <USBD_CtlError>
      err++;
 8018bbe:	7afb      	ldrb	r3, [r7, #11]
 8018bc0:	3301      	adds	r3, #1
 8018bc2:	72fb      	strb	r3, [r7, #11]
      break;
 8018bc4:	bf00      	nop
  }

  if (err != 0U)
 8018bc6:	7afb      	ldrb	r3, [r7, #11]
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	d11e      	bne.n	8018c0a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8018bcc:	683b      	ldr	r3, [r7, #0]
 8018bce:	88db      	ldrh	r3, [r3, #6]
 8018bd0:	2b00      	cmp	r3, #0
 8018bd2:	d016      	beq.n	8018c02 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8018bd4:	893b      	ldrh	r3, [r7, #8]
 8018bd6:	2b00      	cmp	r3, #0
 8018bd8:	d00e      	beq.n	8018bf8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8018bda:	683b      	ldr	r3, [r7, #0]
 8018bdc:	88da      	ldrh	r2, [r3, #6]
 8018bde:	893b      	ldrh	r3, [r7, #8]
 8018be0:	4293      	cmp	r3, r2
 8018be2:	bf28      	it	cs
 8018be4:	4613      	movcs	r3, r2
 8018be6:	b29b      	uxth	r3, r3
 8018be8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8018bea:	893b      	ldrh	r3, [r7, #8]
 8018bec:	461a      	mov	r2, r3
 8018bee:	68f9      	ldr	r1, [r7, #12]
 8018bf0:	6878      	ldr	r0, [r7, #4]
 8018bf2:	f000 fa5d 	bl	80190b0 <USBD_CtlSendData>
 8018bf6:	e009      	b.n	8018c0c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8018bf8:	6839      	ldr	r1, [r7, #0]
 8018bfa:	6878      	ldr	r0, [r7, #4]
 8018bfc:	f000 f9e7 	bl	8018fce <USBD_CtlError>
 8018c00:	e004      	b.n	8018c0c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8018c02:	6878      	ldr	r0, [r7, #4]
 8018c04:	f000 fa91 	bl	801912a <USBD_CtlSendStatus>
 8018c08:	e000      	b.n	8018c0c <USBD_GetDescriptor+0x2cc>
    return;
 8018c0a:	bf00      	nop
  }
}
 8018c0c:	3710      	adds	r7, #16
 8018c0e:	46bd      	mov	sp, r7
 8018c10:	bd80      	pop	{r7, pc}
 8018c12:	bf00      	nop

08018c14 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018c14:	b580      	push	{r7, lr}
 8018c16:	b084      	sub	sp, #16
 8018c18:	af00      	add	r7, sp, #0
 8018c1a:	6078      	str	r0, [r7, #4]
 8018c1c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8018c1e:	683b      	ldr	r3, [r7, #0]
 8018c20:	889b      	ldrh	r3, [r3, #4]
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	d131      	bne.n	8018c8a <USBD_SetAddress+0x76>
 8018c26:	683b      	ldr	r3, [r7, #0]
 8018c28:	88db      	ldrh	r3, [r3, #6]
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d12d      	bne.n	8018c8a <USBD_SetAddress+0x76>
 8018c2e:	683b      	ldr	r3, [r7, #0]
 8018c30:	885b      	ldrh	r3, [r3, #2]
 8018c32:	2b7f      	cmp	r3, #127	@ 0x7f
 8018c34:	d829      	bhi.n	8018c8a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8018c36:	683b      	ldr	r3, [r7, #0]
 8018c38:	885b      	ldrh	r3, [r3, #2]
 8018c3a:	b2db      	uxtb	r3, r3
 8018c3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018c40:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018c48:	b2db      	uxtb	r3, r3
 8018c4a:	2b03      	cmp	r3, #3
 8018c4c:	d104      	bne.n	8018c58 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8018c4e:	6839      	ldr	r1, [r7, #0]
 8018c50:	6878      	ldr	r0, [r7, #4]
 8018c52:	f000 f9bc 	bl	8018fce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018c56:	e01d      	b.n	8018c94 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	7bfa      	ldrb	r2, [r7, #15]
 8018c5c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8018c60:	7bfb      	ldrb	r3, [r7, #15]
 8018c62:	4619      	mov	r1, r3
 8018c64:	6878      	ldr	r0, [r7, #4]
 8018c66:	f004 fd8a 	bl	801d77e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8018c6a:	6878      	ldr	r0, [r7, #4]
 8018c6c:	f000 fa5d 	bl	801912a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8018c70:	7bfb      	ldrb	r3, [r7, #15]
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d004      	beq.n	8018c80 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	2202      	movs	r2, #2
 8018c7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018c7e:	e009      	b.n	8018c94 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	2201      	movs	r2, #1
 8018c84:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018c88:	e004      	b.n	8018c94 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8018c8a:	6839      	ldr	r1, [r7, #0]
 8018c8c:	6878      	ldr	r0, [r7, #4]
 8018c8e:	f000 f99e 	bl	8018fce <USBD_CtlError>
  }
}
 8018c92:	bf00      	nop
 8018c94:	bf00      	nop
 8018c96:	3710      	adds	r7, #16
 8018c98:	46bd      	mov	sp, r7
 8018c9a:	bd80      	pop	{r7, pc}

08018c9c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018c9c:	b580      	push	{r7, lr}
 8018c9e:	b084      	sub	sp, #16
 8018ca0:	af00      	add	r7, sp, #0
 8018ca2:	6078      	str	r0, [r7, #4]
 8018ca4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018ca6:	2300      	movs	r3, #0
 8018ca8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8018caa:	683b      	ldr	r3, [r7, #0]
 8018cac:	885b      	ldrh	r3, [r3, #2]
 8018cae:	b2da      	uxtb	r2, r3
 8018cb0:	4b4e      	ldr	r3, [pc, #312]	@ (8018dec <USBD_SetConfig+0x150>)
 8018cb2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8018cb4:	4b4d      	ldr	r3, [pc, #308]	@ (8018dec <USBD_SetConfig+0x150>)
 8018cb6:	781b      	ldrb	r3, [r3, #0]
 8018cb8:	2b01      	cmp	r3, #1
 8018cba:	d905      	bls.n	8018cc8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8018cbc:	6839      	ldr	r1, [r7, #0]
 8018cbe:	6878      	ldr	r0, [r7, #4]
 8018cc0:	f000 f985 	bl	8018fce <USBD_CtlError>
    return USBD_FAIL;
 8018cc4:	2303      	movs	r3, #3
 8018cc6:	e08c      	b.n	8018de2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018cce:	b2db      	uxtb	r3, r3
 8018cd0:	2b02      	cmp	r3, #2
 8018cd2:	d002      	beq.n	8018cda <USBD_SetConfig+0x3e>
 8018cd4:	2b03      	cmp	r3, #3
 8018cd6:	d029      	beq.n	8018d2c <USBD_SetConfig+0x90>
 8018cd8:	e075      	b.n	8018dc6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8018cda:	4b44      	ldr	r3, [pc, #272]	@ (8018dec <USBD_SetConfig+0x150>)
 8018cdc:	781b      	ldrb	r3, [r3, #0]
 8018cde:	2b00      	cmp	r3, #0
 8018ce0:	d020      	beq.n	8018d24 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8018ce2:	4b42      	ldr	r3, [pc, #264]	@ (8018dec <USBD_SetConfig+0x150>)
 8018ce4:	781b      	ldrb	r3, [r3, #0]
 8018ce6:	461a      	mov	r2, r3
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8018cec:	4b3f      	ldr	r3, [pc, #252]	@ (8018dec <USBD_SetConfig+0x150>)
 8018cee:	781b      	ldrb	r3, [r3, #0]
 8018cf0:	4619      	mov	r1, r3
 8018cf2:	6878      	ldr	r0, [r7, #4]
 8018cf4:	f7fe ffe3 	bl	8017cbe <USBD_SetClassConfig>
 8018cf8:	4603      	mov	r3, r0
 8018cfa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8018cfc:	7bfb      	ldrb	r3, [r7, #15]
 8018cfe:	2b00      	cmp	r3, #0
 8018d00:	d008      	beq.n	8018d14 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8018d02:	6839      	ldr	r1, [r7, #0]
 8018d04:	6878      	ldr	r0, [r7, #4]
 8018d06:	f000 f962 	bl	8018fce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	2202      	movs	r2, #2
 8018d0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8018d12:	e065      	b.n	8018de0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8018d14:	6878      	ldr	r0, [r7, #4]
 8018d16:	f000 fa08 	bl	801912a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	2203      	movs	r2, #3
 8018d1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8018d22:	e05d      	b.n	8018de0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8018d24:	6878      	ldr	r0, [r7, #4]
 8018d26:	f000 fa00 	bl	801912a <USBD_CtlSendStatus>
      break;
 8018d2a:	e059      	b.n	8018de0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8018d2c:	4b2f      	ldr	r3, [pc, #188]	@ (8018dec <USBD_SetConfig+0x150>)
 8018d2e:	781b      	ldrb	r3, [r3, #0]
 8018d30:	2b00      	cmp	r3, #0
 8018d32:	d112      	bne.n	8018d5a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	2202      	movs	r2, #2
 8018d38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8018d3c:	4b2b      	ldr	r3, [pc, #172]	@ (8018dec <USBD_SetConfig+0x150>)
 8018d3e:	781b      	ldrb	r3, [r3, #0]
 8018d40:	461a      	mov	r2, r3
 8018d42:	687b      	ldr	r3, [r7, #4]
 8018d44:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8018d46:	4b29      	ldr	r3, [pc, #164]	@ (8018dec <USBD_SetConfig+0x150>)
 8018d48:	781b      	ldrb	r3, [r3, #0]
 8018d4a:	4619      	mov	r1, r3
 8018d4c:	6878      	ldr	r0, [r7, #4]
 8018d4e:	f7fe ffd2 	bl	8017cf6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8018d52:	6878      	ldr	r0, [r7, #4]
 8018d54:	f000 f9e9 	bl	801912a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8018d58:	e042      	b.n	8018de0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8018d5a:	4b24      	ldr	r3, [pc, #144]	@ (8018dec <USBD_SetConfig+0x150>)
 8018d5c:	781b      	ldrb	r3, [r3, #0]
 8018d5e:	461a      	mov	r2, r3
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	685b      	ldr	r3, [r3, #4]
 8018d64:	429a      	cmp	r2, r3
 8018d66:	d02a      	beq.n	8018dbe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	685b      	ldr	r3, [r3, #4]
 8018d6c:	b2db      	uxtb	r3, r3
 8018d6e:	4619      	mov	r1, r3
 8018d70:	6878      	ldr	r0, [r7, #4]
 8018d72:	f7fe ffc0 	bl	8017cf6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8018d76:	4b1d      	ldr	r3, [pc, #116]	@ (8018dec <USBD_SetConfig+0x150>)
 8018d78:	781b      	ldrb	r3, [r3, #0]
 8018d7a:	461a      	mov	r2, r3
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8018d80:	4b1a      	ldr	r3, [pc, #104]	@ (8018dec <USBD_SetConfig+0x150>)
 8018d82:	781b      	ldrb	r3, [r3, #0]
 8018d84:	4619      	mov	r1, r3
 8018d86:	6878      	ldr	r0, [r7, #4]
 8018d88:	f7fe ff99 	bl	8017cbe <USBD_SetClassConfig>
 8018d8c:	4603      	mov	r3, r0
 8018d8e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8018d90:	7bfb      	ldrb	r3, [r7, #15]
 8018d92:	2b00      	cmp	r3, #0
 8018d94:	d00f      	beq.n	8018db6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8018d96:	6839      	ldr	r1, [r7, #0]
 8018d98:	6878      	ldr	r0, [r7, #4]
 8018d9a:	f000 f918 	bl	8018fce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	685b      	ldr	r3, [r3, #4]
 8018da2:	b2db      	uxtb	r3, r3
 8018da4:	4619      	mov	r1, r3
 8018da6:	6878      	ldr	r0, [r7, #4]
 8018da8:	f7fe ffa5 	bl	8017cf6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	2202      	movs	r2, #2
 8018db0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8018db4:	e014      	b.n	8018de0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8018db6:	6878      	ldr	r0, [r7, #4]
 8018db8:	f000 f9b7 	bl	801912a <USBD_CtlSendStatus>
      break;
 8018dbc:	e010      	b.n	8018de0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8018dbe:	6878      	ldr	r0, [r7, #4]
 8018dc0:	f000 f9b3 	bl	801912a <USBD_CtlSendStatus>
      break;
 8018dc4:	e00c      	b.n	8018de0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8018dc6:	6839      	ldr	r1, [r7, #0]
 8018dc8:	6878      	ldr	r0, [r7, #4]
 8018dca:	f000 f900 	bl	8018fce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8018dce:	4b07      	ldr	r3, [pc, #28]	@ (8018dec <USBD_SetConfig+0x150>)
 8018dd0:	781b      	ldrb	r3, [r3, #0]
 8018dd2:	4619      	mov	r1, r3
 8018dd4:	6878      	ldr	r0, [r7, #4]
 8018dd6:	f7fe ff8e 	bl	8017cf6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8018dda:	2303      	movs	r3, #3
 8018ddc:	73fb      	strb	r3, [r7, #15]
      break;
 8018dde:	bf00      	nop
  }

  return ret;
 8018de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8018de2:	4618      	mov	r0, r3
 8018de4:	3710      	adds	r7, #16
 8018de6:	46bd      	mov	sp, r7
 8018de8:	bd80      	pop	{r7, pc}
 8018dea:	bf00      	nop
 8018dec:	20001b68 	.word	0x20001b68

08018df0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018df0:	b580      	push	{r7, lr}
 8018df2:	b082      	sub	sp, #8
 8018df4:	af00      	add	r7, sp, #0
 8018df6:	6078      	str	r0, [r7, #4]
 8018df8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8018dfa:	683b      	ldr	r3, [r7, #0]
 8018dfc:	88db      	ldrh	r3, [r3, #6]
 8018dfe:	2b01      	cmp	r3, #1
 8018e00:	d004      	beq.n	8018e0c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8018e02:	6839      	ldr	r1, [r7, #0]
 8018e04:	6878      	ldr	r0, [r7, #4]
 8018e06:	f000 f8e2 	bl	8018fce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8018e0a:	e023      	b.n	8018e54 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018e12:	b2db      	uxtb	r3, r3
 8018e14:	2b02      	cmp	r3, #2
 8018e16:	dc02      	bgt.n	8018e1e <USBD_GetConfig+0x2e>
 8018e18:	2b00      	cmp	r3, #0
 8018e1a:	dc03      	bgt.n	8018e24 <USBD_GetConfig+0x34>
 8018e1c:	e015      	b.n	8018e4a <USBD_GetConfig+0x5a>
 8018e1e:	2b03      	cmp	r3, #3
 8018e20:	d00b      	beq.n	8018e3a <USBD_GetConfig+0x4a>
 8018e22:	e012      	b.n	8018e4a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	2200      	movs	r2, #0
 8018e28:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	3308      	adds	r3, #8
 8018e2e:	2201      	movs	r2, #1
 8018e30:	4619      	mov	r1, r3
 8018e32:	6878      	ldr	r0, [r7, #4]
 8018e34:	f000 f93c 	bl	80190b0 <USBD_CtlSendData>
        break;
 8018e38:	e00c      	b.n	8018e54 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	3304      	adds	r3, #4
 8018e3e:	2201      	movs	r2, #1
 8018e40:	4619      	mov	r1, r3
 8018e42:	6878      	ldr	r0, [r7, #4]
 8018e44:	f000 f934 	bl	80190b0 <USBD_CtlSendData>
        break;
 8018e48:	e004      	b.n	8018e54 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8018e4a:	6839      	ldr	r1, [r7, #0]
 8018e4c:	6878      	ldr	r0, [r7, #4]
 8018e4e:	f000 f8be 	bl	8018fce <USBD_CtlError>
        break;
 8018e52:	bf00      	nop
}
 8018e54:	bf00      	nop
 8018e56:	3708      	adds	r7, #8
 8018e58:	46bd      	mov	sp, r7
 8018e5a:	bd80      	pop	{r7, pc}

08018e5c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018e5c:	b580      	push	{r7, lr}
 8018e5e:	b082      	sub	sp, #8
 8018e60:	af00      	add	r7, sp, #0
 8018e62:	6078      	str	r0, [r7, #4]
 8018e64:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018e6c:	b2db      	uxtb	r3, r3
 8018e6e:	3b01      	subs	r3, #1
 8018e70:	2b02      	cmp	r3, #2
 8018e72:	d81e      	bhi.n	8018eb2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8018e74:	683b      	ldr	r3, [r7, #0]
 8018e76:	88db      	ldrh	r3, [r3, #6]
 8018e78:	2b02      	cmp	r3, #2
 8018e7a:	d004      	beq.n	8018e86 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8018e7c:	6839      	ldr	r1, [r7, #0]
 8018e7e:	6878      	ldr	r0, [r7, #4]
 8018e80:	f000 f8a5 	bl	8018fce <USBD_CtlError>
        break;
 8018e84:	e01a      	b.n	8018ebc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	2201      	movs	r2, #1
 8018e8a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8018e92:	2b00      	cmp	r3, #0
 8018e94:	d005      	beq.n	8018ea2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	68db      	ldr	r3, [r3, #12]
 8018e9a:	f043 0202 	orr.w	r2, r3, #2
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	330c      	adds	r3, #12
 8018ea6:	2202      	movs	r2, #2
 8018ea8:	4619      	mov	r1, r3
 8018eaa:	6878      	ldr	r0, [r7, #4]
 8018eac:	f000 f900 	bl	80190b0 <USBD_CtlSendData>
      break;
 8018eb0:	e004      	b.n	8018ebc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8018eb2:	6839      	ldr	r1, [r7, #0]
 8018eb4:	6878      	ldr	r0, [r7, #4]
 8018eb6:	f000 f88a 	bl	8018fce <USBD_CtlError>
      break;
 8018eba:	bf00      	nop
  }
}
 8018ebc:	bf00      	nop
 8018ebe:	3708      	adds	r7, #8
 8018ec0:	46bd      	mov	sp, r7
 8018ec2:	bd80      	pop	{r7, pc}

08018ec4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018ec4:	b580      	push	{r7, lr}
 8018ec6:	b082      	sub	sp, #8
 8018ec8:	af00      	add	r7, sp, #0
 8018eca:	6078      	str	r0, [r7, #4]
 8018ecc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8018ece:	683b      	ldr	r3, [r7, #0]
 8018ed0:	885b      	ldrh	r3, [r3, #2]
 8018ed2:	2b01      	cmp	r3, #1
 8018ed4:	d107      	bne.n	8018ee6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	2201      	movs	r2, #1
 8018eda:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8018ede:	6878      	ldr	r0, [r7, #4]
 8018ee0:	f000 f923 	bl	801912a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8018ee4:	e013      	b.n	8018f0e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8018ee6:	683b      	ldr	r3, [r7, #0]
 8018ee8:	885b      	ldrh	r3, [r3, #2]
 8018eea:	2b02      	cmp	r3, #2
 8018eec:	d10b      	bne.n	8018f06 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8018eee:	683b      	ldr	r3, [r7, #0]
 8018ef0:	889b      	ldrh	r3, [r3, #4]
 8018ef2:	0a1b      	lsrs	r3, r3, #8
 8018ef4:	b29b      	uxth	r3, r3
 8018ef6:	b2da      	uxtb	r2, r3
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8018efe:	6878      	ldr	r0, [r7, #4]
 8018f00:	f000 f913 	bl	801912a <USBD_CtlSendStatus>
}
 8018f04:	e003      	b.n	8018f0e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8018f06:	6839      	ldr	r1, [r7, #0]
 8018f08:	6878      	ldr	r0, [r7, #4]
 8018f0a:	f000 f860 	bl	8018fce <USBD_CtlError>
}
 8018f0e:	bf00      	nop
 8018f10:	3708      	adds	r7, #8
 8018f12:	46bd      	mov	sp, r7
 8018f14:	bd80      	pop	{r7, pc}

08018f16 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018f16:	b580      	push	{r7, lr}
 8018f18:	b082      	sub	sp, #8
 8018f1a:	af00      	add	r7, sp, #0
 8018f1c:	6078      	str	r0, [r7, #4]
 8018f1e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018f26:	b2db      	uxtb	r3, r3
 8018f28:	3b01      	subs	r3, #1
 8018f2a:	2b02      	cmp	r3, #2
 8018f2c:	d80b      	bhi.n	8018f46 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8018f2e:	683b      	ldr	r3, [r7, #0]
 8018f30:	885b      	ldrh	r3, [r3, #2]
 8018f32:	2b01      	cmp	r3, #1
 8018f34:	d10c      	bne.n	8018f50 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	2200      	movs	r2, #0
 8018f3a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8018f3e:	6878      	ldr	r0, [r7, #4]
 8018f40:	f000 f8f3 	bl	801912a <USBD_CtlSendStatus>
      }
      break;
 8018f44:	e004      	b.n	8018f50 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8018f46:	6839      	ldr	r1, [r7, #0]
 8018f48:	6878      	ldr	r0, [r7, #4]
 8018f4a:	f000 f840 	bl	8018fce <USBD_CtlError>
      break;
 8018f4e:	e000      	b.n	8018f52 <USBD_ClrFeature+0x3c>
      break;
 8018f50:	bf00      	nop
  }
}
 8018f52:	bf00      	nop
 8018f54:	3708      	adds	r7, #8
 8018f56:	46bd      	mov	sp, r7
 8018f58:	bd80      	pop	{r7, pc}

08018f5a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8018f5a:	b580      	push	{r7, lr}
 8018f5c:	b084      	sub	sp, #16
 8018f5e:	af00      	add	r7, sp, #0
 8018f60:	6078      	str	r0, [r7, #4]
 8018f62:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8018f64:	683b      	ldr	r3, [r7, #0]
 8018f66:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8018f68:	68fb      	ldr	r3, [r7, #12]
 8018f6a:	781a      	ldrb	r2, [r3, #0]
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8018f70:	68fb      	ldr	r3, [r7, #12]
 8018f72:	3301      	adds	r3, #1
 8018f74:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8018f76:	68fb      	ldr	r3, [r7, #12]
 8018f78:	781a      	ldrb	r2, [r3, #0]
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8018f7e:	68fb      	ldr	r3, [r7, #12]
 8018f80:	3301      	adds	r3, #1
 8018f82:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8018f84:	68f8      	ldr	r0, [r7, #12]
 8018f86:	f7ff fa40 	bl	801840a <SWAPBYTE>
 8018f8a:	4603      	mov	r3, r0
 8018f8c:	461a      	mov	r2, r3
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8018f92:	68fb      	ldr	r3, [r7, #12]
 8018f94:	3301      	adds	r3, #1
 8018f96:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8018f98:	68fb      	ldr	r3, [r7, #12]
 8018f9a:	3301      	adds	r3, #1
 8018f9c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8018f9e:	68f8      	ldr	r0, [r7, #12]
 8018fa0:	f7ff fa33 	bl	801840a <SWAPBYTE>
 8018fa4:	4603      	mov	r3, r0
 8018fa6:	461a      	mov	r2, r3
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8018fac:	68fb      	ldr	r3, [r7, #12]
 8018fae:	3301      	adds	r3, #1
 8018fb0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8018fb2:	68fb      	ldr	r3, [r7, #12]
 8018fb4:	3301      	adds	r3, #1
 8018fb6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8018fb8:	68f8      	ldr	r0, [r7, #12]
 8018fba:	f7ff fa26 	bl	801840a <SWAPBYTE>
 8018fbe:	4603      	mov	r3, r0
 8018fc0:	461a      	mov	r2, r3
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	80da      	strh	r2, [r3, #6]
}
 8018fc6:	bf00      	nop
 8018fc8:	3710      	adds	r7, #16
 8018fca:	46bd      	mov	sp, r7
 8018fcc:	bd80      	pop	{r7, pc}

08018fce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018fce:	b580      	push	{r7, lr}
 8018fd0:	b082      	sub	sp, #8
 8018fd2:	af00      	add	r7, sp, #0
 8018fd4:	6078      	str	r0, [r7, #4]
 8018fd6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8018fd8:	2180      	movs	r1, #128	@ 0x80
 8018fda:	6878      	ldr	r0, [r7, #4]
 8018fdc:	f004 fb65 	bl	801d6aa <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8018fe0:	2100      	movs	r1, #0
 8018fe2:	6878      	ldr	r0, [r7, #4]
 8018fe4:	f004 fb61 	bl	801d6aa <USBD_LL_StallEP>
}
 8018fe8:	bf00      	nop
 8018fea:	3708      	adds	r7, #8
 8018fec:	46bd      	mov	sp, r7
 8018fee:	bd80      	pop	{r7, pc}

08018ff0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8018ff0:	b580      	push	{r7, lr}
 8018ff2:	b086      	sub	sp, #24
 8018ff4:	af00      	add	r7, sp, #0
 8018ff6:	60f8      	str	r0, [r7, #12]
 8018ff8:	60b9      	str	r1, [r7, #8]
 8018ffa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8018ffc:	2300      	movs	r3, #0
 8018ffe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8019000:	68fb      	ldr	r3, [r7, #12]
 8019002:	2b00      	cmp	r3, #0
 8019004:	d036      	beq.n	8019074 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8019006:	68fb      	ldr	r3, [r7, #12]
 8019008:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801900a:	6938      	ldr	r0, [r7, #16]
 801900c:	f000 f836 	bl	801907c <USBD_GetLen>
 8019010:	4603      	mov	r3, r0
 8019012:	3301      	adds	r3, #1
 8019014:	b29b      	uxth	r3, r3
 8019016:	005b      	lsls	r3, r3, #1
 8019018:	b29a      	uxth	r2, r3
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801901e:	7dfb      	ldrb	r3, [r7, #23]
 8019020:	68ba      	ldr	r2, [r7, #8]
 8019022:	4413      	add	r3, r2
 8019024:	687a      	ldr	r2, [r7, #4]
 8019026:	7812      	ldrb	r2, [r2, #0]
 8019028:	701a      	strb	r2, [r3, #0]
  idx++;
 801902a:	7dfb      	ldrb	r3, [r7, #23]
 801902c:	3301      	adds	r3, #1
 801902e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8019030:	7dfb      	ldrb	r3, [r7, #23]
 8019032:	68ba      	ldr	r2, [r7, #8]
 8019034:	4413      	add	r3, r2
 8019036:	2203      	movs	r2, #3
 8019038:	701a      	strb	r2, [r3, #0]
  idx++;
 801903a:	7dfb      	ldrb	r3, [r7, #23]
 801903c:	3301      	adds	r3, #1
 801903e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8019040:	e013      	b.n	801906a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8019042:	7dfb      	ldrb	r3, [r7, #23]
 8019044:	68ba      	ldr	r2, [r7, #8]
 8019046:	4413      	add	r3, r2
 8019048:	693a      	ldr	r2, [r7, #16]
 801904a:	7812      	ldrb	r2, [r2, #0]
 801904c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801904e:	693b      	ldr	r3, [r7, #16]
 8019050:	3301      	adds	r3, #1
 8019052:	613b      	str	r3, [r7, #16]
    idx++;
 8019054:	7dfb      	ldrb	r3, [r7, #23]
 8019056:	3301      	adds	r3, #1
 8019058:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801905a:	7dfb      	ldrb	r3, [r7, #23]
 801905c:	68ba      	ldr	r2, [r7, #8]
 801905e:	4413      	add	r3, r2
 8019060:	2200      	movs	r2, #0
 8019062:	701a      	strb	r2, [r3, #0]
    idx++;
 8019064:	7dfb      	ldrb	r3, [r7, #23]
 8019066:	3301      	adds	r3, #1
 8019068:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801906a:	693b      	ldr	r3, [r7, #16]
 801906c:	781b      	ldrb	r3, [r3, #0]
 801906e:	2b00      	cmp	r3, #0
 8019070:	d1e7      	bne.n	8019042 <USBD_GetString+0x52>
 8019072:	e000      	b.n	8019076 <USBD_GetString+0x86>
    return;
 8019074:	bf00      	nop
  }
}
 8019076:	3718      	adds	r7, #24
 8019078:	46bd      	mov	sp, r7
 801907a:	bd80      	pop	{r7, pc}

0801907c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801907c:	b480      	push	{r7}
 801907e:	b085      	sub	sp, #20
 8019080:	af00      	add	r7, sp, #0
 8019082:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8019084:	2300      	movs	r3, #0
 8019086:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801908c:	e005      	b.n	801909a <USBD_GetLen+0x1e>
  {
    len++;
 801908e:	7bfb      	ldrb	r3, [r7, #15]
 8019090:	3301      	adds	r3, #1
 8019092:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8019094:	68bb      	ldr	r3, [r7, #8]
 8019096:	3301      	adds	r3, #1
 8019098:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801909a:	68bb      	ldr	r3, [r7, #8]
 801909c:	781b      	ldrb	r3, [r3, #0]
 801909e:	2b00      	cmp	r3, #0
 80190a0:	d1f5      	bne.n	801908e <USBD_GetLen+0x12>
  }

  return len;
 80190a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80190a4:	4618      	mov	r0, r3
 80190a6:	3714      	adds	r7, #20
 80190a8:	46bd      	mov	sp, r7
 80190aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190ae:	4770      	bx	lr

080190b0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80190b0:	b580      	push	{r7, lr}
 80190b2:	b084      	sub	sp, #16
 80190b4:	af00      	add	r7, sp, #0
 80190b6:	60f8      	str	r0, [r7, #12]
 80190b8:	60b9      	str	r1, [r7, #8]
 80190ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80190bc:	68fb      	ldr	r3, [r7, #12]
 80190be:	2202      	movs	r2, #2
 80190c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80190c4:	68fb      	ldr	r3, [r7, #12]
 80190c6:	687a      	ldr	r2, [r7, #4]
 80190c8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80190ca:	68fb      	ldr	r3, [r7, #12]
 80190cc:	687a      	ldr	r2, [r7, #4]
 80190ce:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	68ba      	ldr	r2, [r7, #8]
 80190d4:	2100      	movs	r1, #0
 80190d6:	68f8      	ldr	r0, [r7, #12]
 80190d8:	f004 fb70 	bl	801d7bc <USBD_LL_Transmit>

  return USBD_OK;
 80190dc:	2300      	movs	r3, #0
}
 80190de:	4618      	mov	r0, r3
 80190e0:	3710      	adds	r7, #16
 80190e2:	46bd      	mov	sp, r7
 80190e4:	bd80      	pop	{r7, pc}

080190e6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80190e6:	b580      	push	{r7, lr}
 80190e8:	b084      	sub	sp, #16
 80190ea:	af00      	add	r7, sp, #0
 80190ec:	60f8      	str	r0, [r7, #12]
 80190ee:	60b9      	str	r1, [r7, #8]
 80190f0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80190f2:	687b      	ldr	r3, [r7, #4]
 80190f4:	68ba      	ldr	r2, [r7, #8]
 80190f6:	2100      	movs	r1, #0
 80190f8:	68f8      	ldr	r0, [r7, #12]
 80190fa:	f004 fb5f 	bl	801d7bc <USBD_LL_Transmit>

  return USBD_OK;
 80190fe:	2300      	movs	r3, #0
}
 8019100:	4618      	mov	r0, r3
 8019102:	3710      	adds	r7, #16
 8019104:	46bd      	mov	sp, r7
 8019106:	bd80      	pop	{r7, pc}

08019108 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8019108:	b580      	push	{r7, lr}
 801910a:	b084      	sub	sp, #16
 801910c:	af00      	add	r7, sp, #0
 801910e:	60f8      	str	r0, [r7, #12]
 8019110:	60b9      	str	r1, [r7, #8]
 8019112:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	68ba      	ldr	r2, [r7, #8]
 8019118:	2100      	movs	r1, #0
 801911a:	68f8      	ldr	r0, [r7, #12]
 801911c:	f004 fb6f 	bl	801d7fe <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019120:	2300      	movs	r3, #0
}
 8019122:	4618      	mov	r0, r3
 8019124:	3710      	adds	r7, #16
 8019126:	46bd      	mov	sp, r7
 8019128:	bd80      	pop	{r7, pc}

0801912a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801912a:	b580      	push	{r7, lr}
 801912c:	b082      	sub	sp, #8
 801912e:	af00      	add	r7, sp, #0
 8019130:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	2204      	movs	r2, #4
 8019136:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801913a:	2300      	movs	r3, #0
 801913c:	2200      	movs	r2, #0
 801913e:	2100      	movs	r1, #0
 8019140:	6878      	ldr	r0, [r7, #4]
 8019142:	f004 fb3b 	bl	801d7bc <USBD_LL_Transmit>

  return USBD_OK;
 8019146:	2300      	movs	r3, #0
}
 8019148:	4618      	mov	r0, r3
 801914a:	3708      	adds	r7, #8
 801914c:	46bd      	mov	sp, r7
 801914e:	bd80      	pop	{r7, pc}

08019150 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8019150:	b580      	push	{r7, lr}
 8019152:	b082      	sub	sp, #8
 8019154:	af00      	add	r7, sp, #0
 8019156:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	2205      	movs	r2, #5
 801915c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8019160:	2300      	movs	r3, #0
 8019162:	2200      	movs	r2, #0
 8019164:	2100      	movs	r1, #0
 8019166:	6878      	ldr	r0, [r7, #4]
 8019168:	f004 fb49 	bl	801d7fe <USBD_LL_PrepareReceive>

  return USBD_OK;
 801916c:	2300      	movs	r3, #0
}
 801916e:	4618      	mov	r0, r3
 8019170:	3708      	adds	r7, #8
 8019172:	46bd      	mov	sp, r7
 8019174:	bd80      	pop	{r7, pc}
	...

08019178 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8019178:	b580      	push	{r7, lr}
 801917a:	b084      	sub	sp, #16
 801917c:	af00      	add	r7, sp, #0
 801917e:	4603      	mov	r3, r0
 8019180:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8019182:	79fb      	ldrb	r3, [r7, #7]
 8019184:	4a08      	ldr	r2, [pc, #32]	@ (80191a8 <disk_status+0x30>)
 8019186:	009b      	lsls	r3, r3, #2
 8019188:	4413      	add	r3, r2
 801918a:	685b      	ldr	r3, [r3, #4]
 801918c:	685b      	ldr	r3, [r3, #4]
 801918e:	79fa      	ldrb	r2, [r7, #7]
 8019190:	4905      	ldr	r1, [pc, #20]	@ (80191a8 <disk_status+0x30>)
 8019192:	440a      	add	r2, r1
 8019194:	7a12      	ldrb	r2, [r2, #8]
 8019196:	4610      	mov	r0, r2
 8019198:	4798      	blx	r3
 801919a:	4603      	mov	r3, r0
 801919c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801919e:	7bfb      	ldrb	r3, [r7, #15]
}
 80191a0:	4618      	mov	r0, r3
 80191a2:	3710      	adds	r7, #16
 80191a4:	46bd      	mov	sp, r7
 80191a6:	bd80      	pop	{r7, pc}
 80191a8:	20001d94 	.word	0x20001d94

080191ac <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80191ac:	b580      	push	{r7, lr}
 80191ae:	b084      	sub	sp, #16
 80191b0:	af00      	add	r7, sp, #0
 80191b2:	4603      	mov	r3, r0
 80191b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80191b6:	2300      	movs	r3, #0
 80191b8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80191ba:	79fb      	ldrb	r3, [r7, #7]
 80191bc:	4a0e      	ldr	r2, [pc, #56]	@ (80191f8 <disk_initialize+0x4c>)
 80191be:	5cd3      	ldrb	r3, [r2, r3]
 80191c0:	2b00      	cmp	r3, #0
 80191c2:	d114      	bne.n	80191ee <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80191c4:	79fb      	ldrb	r3, [r7, #7]
 80191c6:	4a0c      	ldr	r2, [pc, #48]	@ (80191f8 <disk_initialize+0x4c>)
 80191c8:	009b      	lsls	r3, r3, #2
 80191ca:	4413      	add	r3, r2
 80191cc:	685b      	ldr	r3, [r3, #4]
 80191ce:	681b      	ldr	r3, [r3, #0]
 80191d0:	79fa      	ldrb	r2, [r7, #7]
 80191d2:	4909      	ldr	r1, [pc, #36]	@ (80191f8 <disk_initialize+0x4c>)
 80191d4:	440a      	add	r2, r1
 80191d6:	7a12      	ldrb	r2, [r2, #8]
 80191d8:	4610      	mov	r0, r2
 80191da:	4798      	blx	r3
 80191dc:	4603      	mov	r3, r0
 80191de:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80191e0:	7bfb      	ldrb	r3, [r7, #15]
 80191e2:	2b00      	cmp	r3, #0
 80191e4:	d103      	bne.n	80191ee <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80191e6:	79fb      	ldrb	r3, [r7, #7]
 80191e8:	4a03      	ldr	r2, [pc, #12]	@ (80191f8 <disk_initialize+0x4c>)
 80191ea:	2101      	movs	r1, #1
 80191ec:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80191ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80191f0:	4618      	mov	r0, r3
 80191f2:	3710      	adds	r7, #16
 80191f4:	46bd      	mov	sp, r7
 80191f6:	bd80      	pop	{r7, pc}
 80191f8:	20001d94 	.word	0x20001d94

080191fc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80191fc:	b590      	push	{r4, r7, lr}
 80191fe:	b087      	sub	sp, #28
 8019200:	af00      	add	r7, sp, #0
 8019202:	60b9      	str	r1, [r7, #8]
 8019204:	607a      	str	r2, [r7, #4]
 8019206:	603b      	str	r3, [r7, #0]
 8019208:	4603      	mov	r3, r0
 801920a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801920c:	7bfb      	ldrb	r3, [r7, #15]
 801920e:	4a0a      	ldr	r2, [pc, #40]	@ (8019238 <disk_read+0x3c>)
 8019210:	009b      	lsls	r3, r3, #2
 8019212:	4413      	add	r3, r2
 8019214:	685b      	ldr	r3, [r3, #4]
 8019216:	689c      	ldr	r4, [r3, #8]
 8019218:	7bfb      	ldrb	r3, [r7, #15]
 801921a:	4a07      	ldr	r2, [pc, #28]	@ (8019238 <disk_read+0x3c>)
 801921c:	4413      	add	r3, r2
 801921e:	7a18      	ldrb	r0, [r3, #8]
 8019220:	683b      	ldr	r3, [r7, #0]
 8019222:	687a      	ldr	r2, [r7, #4]
 8019224:	68b9      	ldr	r1, [r7, #8]
 8019226:	47a0      	blx	r4
 8019228:	4603      	mov	r3, r0
 801922a:	75fb      	strb	r3, [r7, #23]
  return res;
 801922c:	7dfb      	ldrb	r3, [r7, #23]
}
 801922e:	4618      	mov	r0, r3
 8019230:	371c      	adds	r7, #28
 8019232:	46bd      	mov	sp, r7
 8019234:	bd90      	pop	{r4, r7, pc}
 8019236:	bf00      	nop
 8019238:	20001d94 	.word	0x20001d94

0801923c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801923c:	b590      	push	{r4, r7, lr}
 801923e:	b087      	sub	sp, #28
 8019240:	af00      	add	r7, sp, #0
 8019242:	60b9      	str	r1, [r7, #8]
 8019244:	607a      	str	r2, [r7, #4]
 8019246:	603b      	str	r3, [r7, #0]
 8019248:	4603      	mov	r3, r0
 801924a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801924c:	7bfb      	ldrb	r3, [r7, #15]
 801924e:	4a0a      	ldr	r2, [pc, #40]	@ (8019278 <disk_write+0x3c>)
 8019250:	009b      	lsls	r3, r3, #2
 8019252:	4413      	add	r3, r2
 8019254:	685b      	ldr	r3, [r3, #4]
 8019256:	68dc      	ldr	r4, [r3, #12]
 8019258:	7bfb      	ldrb	r3, [r7, #15]
 801925a:	4a07      	ldr	r2, [pc, #28]	@ (8019278 <disk_write+0x3c>)
 801925c:	4413      	add	r3, r2
 801925e:	7a18      	ldrb	r0, [r3, #8]
 8019260:	683b      	ldr	r3, [r7, #0]
 8019262:	687a      	ldr	r2, [r7, #4]
 8019264:	68b9      	ldr	r1, [r7, #8]
 8019266:	47a0      	blx	r4
 8019268:	4603      	mov	r3, r0
 801926a:	75fb      	strb	r3, [r7, #23]
  return res;
 801926c:	7dfb      	ldrb	r3, [r7, #23]
}
 801926e:	4618      	mov	r0, r3
 8019270:	371c      	adds	r7, #28
 8019272:	46bd      	mov	sp, r7
 8019274:	bd90      	pop	{r4, r7, pc}
 8019276:	bf00      	nop
 8019278:	20001d94 	.word	0x20001d94

0801927c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801927c:	b580      	push	{r7, lr}
 801927e:	b084      	sub	sp, #16
 8019280:	af00      	add	r7, sp, #0
 8019282:	4603      	mov	r3, r0
 8019284:	603a      	str	r2, [r7, #0]
 8019286:	71fb      	strb	r3, [r7, #7]
 8019288:	460b      	mov	r3, r1
 801928a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801928c:	79fb      	ldrb	r3, [r7, #7]
 801928e:	4a09      	ldr	r2, [pc, #36]	@ (80192b4 <disk_ioctl+0x38>)
 8019290:	009b      	lsls	r3, r3, #2
 8019292:	4413      	add	r3, r2
 8019294:	685b      	ldr	r3, [r3, #4]
 8019296:	691b      	ldr	r3, [r3, #16]
 8019298:	79fa      	ldrb	r2, [r7, #7]
 801929a:	4906      	ldr	r1, [pc, #24]	@ (80192b4 <disk_ioctl+0x38>)
 801929c:	440a      	add	r2, r1
 801929e:	7a10      	ldrb	r0, [r2, #8]
 80192a0:	79b9      	ldrb	r1, [r7, #6]
 80192a2:	683a      	ldr	r2, [r7, #0]
 80192a4:	4798      	blx	r3
 80192a6:	4603      	mov	r3, r0
 80192a8:	73fb      	strb	r3, [r7, #15]
  return res;
 80192aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80192ac:	4618      	mov	r0, r3
 80192ae:	3710      	adds	r7, #16
 80192b0:	46bd      	mov	sp, r7
 80192b2:	bd80      	pop	{r7, pc}
 80192b4:	20001d94 	.word	0x20001d94

080192b8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80192b8:	b480      	push	{r7}
 80192ba:	b085      	sub	sp, #20
 80192bc:	af00      	add	r7, sp, #0
 80192be:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	3301      	adds	r3, #1
 80192c4:	781b      	ldrb	r3, [r3, #0]
 80192c6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80192c8:	89fb      	ldrh	r3, [r7, #14]
 80192ca:	021b      	lsls	r3, r3, #8
 80192cc:	b21a      	sxth	r2, r3
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	781b      	ldrb	r3, [r3, #0]
 80192d2:	b21b      	sxth	r3, r3
 80192d4:	4313      	orrs	r3, r2
 80192d6:	b21b      	sxth	r3, r3
 80192d8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80192da:	89fb      	ldrh	r3, [r7, #14]
}
 80192dc:	4618      	mov	r0, r3
 80192de:	3714      	adds	r7, #20
 80192e0:	46bd      	mov	sp, r7
 80192e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192e6:	4770      	bx	lr

080192e8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80192e8:	b480      	push	{r7}
 80192ea:	b085      	sub	sp, #20
 80192ec:	af00      	add	r7, sp, #0
 80192ee:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	3303      	adds	r3, #3
 80192f4:	781b      	ldrb	r3, [r3, #0]
 80192f6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80192f8:	68fb      	ldr	r3, [r7, #12]
 80192fa:	021b      	lsls	r3, r3, #8
 80192fc:	687a      	ldr	r2, [r7, #4]
 80192fe:	3202      	adds	r2, #2
 8019300:	7812      	ldrb	r2, [r2, #0]
 8019302:	4313      	orrs	r3, r2
 8019304:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8019306:	68fb      	ldr	r3, [r7, #12]
 8019308:	021b      	lsls	r3, r3, #8
 801930a:	687a      	ldr	r2, [r7, #4]
 801930c:	3201      	adds	r2, #1
 801930e:	7812      	ldrb	r2, [r2, #0]
 8019310:	4313      	orrs	r3, r2
 8019312:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8019314:	68fb      	ldr	r3, [r7, #12]
 8019316:	021b      	lsls	r3, r3, #8
 8019318:	687a      	ldr	r2, [r7, #4]
 801931a:	7812      	ldrb	r2, [r2, #0]
 801931c:	4313      	orrs	r3, r2
 801931e:	60fb      	str	r3, [r7, #12]
	return rv;
 8019320:	68fb      	ldr	r3, [r7, #12]
}
 8019322:	4618      	mov	r0, r3
 8019324:	3714      	adds	r7, #20
 8019326:	46bd      	mov	sp, r7
 8019328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801932c:	4770      	bx	lr

0801932e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801932e:	b480      	push	{r7}
 8019330:	b083      	sub	sp, #12
 8019332:	af00      	add	r7, sp, #0
 8019334:	6078      	str	r0, [r7, #4]
 8019336:	460b      	mov	r3, r1
 8019338:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	1c5a      	adds	r2, r3, #1
 801933e:	607a      	str	r2, [r7, #4]
 8019340:	887a      	ldrh	r2, [r7, #2]
 8019342:	b2d2      	uxtb	r2, r2
 8019344:	701a      	strb	r2, [r3, #0]
 8019346:	887b      	ldrh	r3, [r7, #2]
 8019348:	0a1b      	lsrs	r3, r3, #8
 801934a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	1c5a      	adds	r2, r3, #1
 8019350:	607a      	str	r2, [r7, #4]
 8019352:	887a      	ldrh	r2, [r7, #2]
 8019354:	b2d2      	uxtb	r2, r2
 8019356:	701a      	strb	r2, [r3, #0]
}
 8019358:	bf00      	nop
 801935a:	370c      	adds	r7, #12
 801935c:	46bd      	mov	sp, r7
 801935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019362:	4770      	bx	lr

08019364 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8019364:	b480      	push	{r7}
 8019366:	b083      	sub	sp, #12
 8019368:	af00      	add	r7, sp, #0
 801936a:	6078      	str	r0, [r7, #4]
 801936c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	1c5a      	adds	r2, r3, #1
 8019372:	607a      	str	r2, [r7, #4]
 8019374:	683a      	ldr	r2, [r7, #0]
 8019376:	b2d2      	uxtb	r2, r2
 8019378:	701a      	strb	r2, [r3, #0]
 801937a:	683b      	ldr	r3, [r7, #0]
 801937c:	0a1b      	lsrs	r3, r3, #8
 801937e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	1c5a      	adds	r2, r3, #1
 8019384:	607a      	str	r2, [r7, #4]
 8019386:	683a      	ldr	r2, [r7, #0]
 8019388:	b2d2      	uxtb	r2, r2
 801938a:	701a      	strb	r2, [r3, #0]
 801938c:	683b      	ldr	r3, [r7, #0]
 801938e:	0a1b      	lsrs	r3, r3, #8
 8019390:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8019392:	687b      	ldr	r3, [r7, #4]
 8019394:	1c5a      	adds	r2, r3, #1
 8019396:	607a      	str	r2, [r7, #4]
 8019398:	683a      	ldr	r2, [r7, #0]
 801939a:	b2d2      	uxtb	r2, r2
 801939c:	701a      	strb	r2, [r3, #0]
 801939e:	683b      	ldr	r3, [r7, #0]
 80193a0:	0a1b      	lsrs	r3, r3, #8
 80193a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	1c5a      	adds	r2, r3, #1
 80193a8:	607a      	str	r2, [r7, #4]
 80193aa:	683a      	ldr	r2, [r7, #0]
 80193ac:	b2d2      	uxtb	r2, r2
 80193ae:	701a      	strb	r2, [r3, #0]
}
 80193b0:	bf00      	nop
 80193b2:	370c      	adds	r7, #12
 80193b4:	46bd      	mov	sp, r7
 80193b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ba:	4770      	bx	lr

080193bc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80193bc:	b480      	push	{r7}
 80193be:	b087      	sub	sp, #28
 80193c0:	af00      	add	r7, sp, #0
 80193c2:	60f8      	str	r0, [r7, #12]
 80193c4:	60b9      	str	r1, [r7, #8]
 80193c6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80193c8:	68fb      	ldr	r3, [r7, #12]
 80193ca:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80193cc:	68bb      	ldr	r3, [r7, #8]
 80193ce:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80193d0:	687b      	ldr	r3, [r7, #4]
 80193d2:	2b00      	cmp	r3, #0
 80193d4:	d00d      	beq.n	80193f2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80193d6:	693a      	ldr	r2, [r7, #16]
 80193d8:	1c53      	adds	r3, r2, #1
 80193da:	613b      	str	r3, [r7, #16]
 80193dc:	697b      	ldr	r3, [r7, #20]
 80193de:	1c59      	adds	r1, r3, #1
 80193e0:	6179      	str	r1, [r7, #20]
 80193e2:	7812      	ldrb	r2, [r2, #0]
 80193e4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	3b01      	subs	r3, #1
 80193ea:	607b      	str	r3, [r7, #4]
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	d1f1      	bne.n	80193d6 <mem_cpy+0x1a>
	}
}
 80193f2:	bf00      	nop
 80193f4:	371c      	adds	r7, #28
 80193f6:	46bd      	mov	sp, r7
 80193f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193fc:	4770      	bx	lr

080193fe <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80193fe:	b480      	push	{r7}
 8019400:	b087      	sub	sp, #28
 8019402:	af00      	add	r7, sp, #0
 8019404:	60f8      	str	r0, [r7, #12]
 8019406:	60b9      	str	r1, [r7, #8]
 8019408:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801940a:	68fb      	ldr	r3, [r7, #12]
 801940c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801940e:	697b      	ldr	r3, [r7, #20]
 8019410:	1c5a      	adds	r2, r3, #1
 8019412:	617a      	str	r2, [r7, #20]
 8019414:	68ba      	ldr	r2, [r7, #8]
 8019416:	b2d2      	uxtb	r2, r2
 8019418:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	3b01      	subs	r3, #1
 801941e:	607b      	str	r3, [r7, #4]
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	2b00      	cmp	r3, #0
 8019424:	d1f3      	bne.n	801940e <mem_set+0x10>
}
 8019426:	bf00      	nop
 8019428:	bf00      	nop
 801942a:	371c      	adds	r7, #28
 801942c:	46bd      	mov	sp, r7
 801942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019432:	4770      	bx	lr

08019434 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8019434:	b480      	push	{r7}
 8019436:	b089      	sub	sp, #36	@ 0x24
 8019438:	af00      	add	r7, sp, #0
 801943a:	60f8      	str	r0, [r7, #12]
 801943c:	60b9      	str	r1, [r7, #8]
 801943e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8019440:	68fb      	ldr	r3, [r7, #12]
 8019442:	61fb      	str	r3, [r7, #28]
 8019444:	68bb      	ldr	r3, [r7, #8]
 8019446:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8019448:	2300      	movs	r3, #0
 801944a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801944c:	69fb      	ldr	r3, [r7, #28]
 801944e:	1c5a      	adds	r2, r3, #1
 8019450:	61fa      	str	r2, [r7, #28]
 8019452:	781b      	ldrb	r3, [r3, #0]
 8019454:	4619      	mov	r1, r3
 8019456:	69bb      	ldr	r3, [r7, #24]
 8019458:	1c5a      	adds	r2, r3, #1
 801945a:	61ba      	str	r2, [r7, #24]
 801945c:	781b      	ldrb	r3, [r3, #0]
 801945e:	1acb      	subs	r3, r1, r3
 8019460:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	3b01      	subs	r3, #1
 8019466:	607b      	str	r3, [r7, #4]
 8019468:	687b      	ldr	r3, [r7, #4]
 801946a:	2b00      	cmp	r3, #0
 801946c:	d002      	beq.n	8019474 <mem_cmp+0x40>
 801946e:	697b      	ldr	r3, [r7, #20]
 8019470:	2b00      	cmp	r3, #0
 8019472:	d0eb      	beq.n	801944c <mem_cmp+0x18>

	return r;
 8019474:	697b      	ldr	r3, [r7, #20]
}
 8019476:	4618      	mov	r0, r3
 8019478:	3724      	adds	r7, #36	@ 0x24
 801947a:	46bd      	mov	sp, r7
 801947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019480:	4770      	bx	lr

08019482 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8019482:	b480      	push	{r7}
 8019484:	b083      	sub	sp, #12
 8019486:	af00      	add	r7, sp, #0
 8019488:	6078      	str	r0, [r7, #4]
 801948a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801948c:	e002      	b.n	8019494 <chk_chr+0x12>
 801948e:	687b      	ldr	r3, [r7, #4]
 8019490:	3301      	adds	r3, #1
 8019492:	607b      	str	r3, [r7, #4]
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	781b      	ldrb	r3, [r3, #0]
 8019498:	2b00      	cmp	r3, #0
 801949a:	d005      	beq.n	80194a8 <chk_chr+0x26>
 801949c:	687b      	ldr	r3, [r7, #4]
 801949e:	781b      	ldrb	r3, [r3, #0]
 80194a0:	461a      	mov	r2, r3
 80194a2:	683b      	ldr	r3, [r7, #0]
 80194a4:	4293      	cmp	r3, r2
 80194a6:	d1f2      	bne.n	801948e <chk_chr+0xc>
	return *str;
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	781b      	ldrb	r3, [r3, #0]
}
 80194ac:	4618      	mov	r0, r3
 80194ae:	370c      	adds	r7, #12
 80194b0:	46bd      	mov	sp, r7
 80194b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194b6:	4770      	bx	lr

080194b8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80194b8:	b480      	push	{r7}
 80194ba:	b085      	sub	sp, #20
 80194bc:	af00      	add	r7, sp, #0
 80194be:	6078      	str	r0, [r7, #4]
 80194c0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80194c2:	2300      	movs	r3, #0
 80194c4:	60bb      	str	r3, [r7, #8]
 80194c6:	68bb      	ldr	r3, [r7, #8]
 80194c8:	60fb      	str	r3, [r7, #12]
 80194ca:	e029      	b.n	8019520 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80194cc:	4a27      	ldr	r2, [pc, #156]	@ (801956c <chk_lock+0xb4>)
 80194ce:	68fb      	ldr	r3, [r7, #12]
 80194d0:	011b      	lsls	r3, r3, #4
 80194d2:	4413      	add	r3, r2
 80194d4:	681b      	ldr	r3, [r3, #0]
 80194d6:	2b00      	cmp	r3, #0
 80194d8:	d01d      	beq.n	8019516 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80194da:	4a24      	ldr	r2, [pc, #144]	@ (801956c <chk_lock+0xb4>)
 80194dc:	68fb      	ldr	r3, [r7, #12]
 80194de:	011b      	lsls	r3, r3, #4
 80194e0:	4413      	add	r3, r2
 80194e2:	681a      	ldr	r2, [r3, #0]
 80194e4:	687b      	ldr	r3, [r7, #4]
 80194e6:	681b      	ldr	r3, [r3, #0]
 80194e8:	429a      	cmp	r2, r3
 80194ea:	d116      	bne.n	801951a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80194ec:	4a1f      	ldr	r2, [pc, #124]	@ (801956c <chk_lock+0xb4>)
 80194ee:	68fb      	ldr	r3, [r7, #12]
 80194f0:	011b      	lsls	r3, r3, #4
 80194f2:	4413      	add	r3, r2
 80194f4:	3304      	adds	r3, #4
 80194f6:	681a      	ldr	r2, [r3, #0]
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80194fc:	429a      	cmp	r2, r3
 80194fe:	d10c      	bne.n	801951a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8019500:	4a1a      	ldr	r2, [pc, #104]	@ (801956c <chk_lock+0xb4>)
 8019502:	68fb      	ldr	r3, [r7, #12]
 8019504:	011b      	lsls	r3, r3, #4
 8019506:	4413      	add	r3, r2
 8019508:	3308      	adds	r3, #8
 801950a:	681a      	ldr	r2, [r3, #0]
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8019510:	429a      	cmp	r2, r3
 8019512:	d102      	bne.n	801951a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8019514:	e007      	b.n	8019526 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8019516:	2301      	movs	r3, #1
 8019518:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801951a:	68fb      	ldr	r3, [r7, #12]
 801951c:	3301      	adds	r3, #1
 801951e:	60fb      	str	r3, [r7, #12]
 8019520:	68fb      	ldr	r3, [r7, #12]
 8019522:	2b01      	cmp	r3, #1
 8019524:	d9d2      	bls.n	80194cc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8019526:	68fb      	ldr	r3, [r7, #12]
 8019528:	2b02      	cmp	r3, #2
 801952a:	d109      	bne.n	8019540 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801952c:	68bb      	ldr	r3, [r7, #8]
 801952e:	2b00      	cmp	r3, #0
 8019530:	d102      	bne.n	8019538 <chk_lock+0x80>
 8019532:	683b      	ldr	r3, [r7, #0]
 8019534:	2b02      	cmp	r3, #2
 8019536:	d101      	bne.n	801953c <chk_lock+0x84>
 8019538:	2300      	movs	r3, #0
 801953a:	e010      	b.n	801955e <chk_lock+0xa6>
 801953c:	2312      	movs	r3, #18
 801953e:	e00e      	b.n	801955e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8019540:	683b      	ldr	r3, [r7, #0]
 8019542:	2b00      	cmp	r3, #0
 8019544:	d108      	bne.n	8019558 <chk_lock+0xa0>
 8019546:	4a09      	ldr	r2, [pc, #36]	@ (801956c <chk_lock+0xb4>)
 8019548:	68fb      	ldr	r3, [r7, #12]
 801954a:	011b      	lsls	r3, r3, #4
 801954c:	4413      	add	r3, r2
 801954e:	330c      	adds	r3, #12
 8019550:	881b      	ldrh	r3, [r3, #0]
 8019552:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019556:	d101      	bne.n	801955c <chk_lock+0xa4>
 8019558:	2310      	movs	r3, #16
 801955a:	e000      	b.n	801955e <chk_lock+0xa6>
 801955c:	2300      	movs	r3, #0
}
 801955e:	4618      	mov	r0, r3
 8019560:	3714      	adds	r7, #20
 8019562:	46bd      	mov	sp, r7
 8019564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019568:	4770      	bx	lr
 801956a:	bf00      	nop
 801956c:	20001b74 	.word	0x20001b74

08019570 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8019570:	b480      	push	{r7}
 8019572:	b083      	sub	sp, #12
 8019574:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8019576:	2300      	movs	r3, #0
 8019578:	607b      	str	r3, [r7, #4]
 801957a:	e002      	b.n	8019582 <enq_lock+0x12>
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	3301      	adds	r3, #1
 8019580:	607b      	str	r3, [r7, #4]
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	2b01      	cmp	r3, #1
 8019586:	d806      	bhi.n	8019596 <enq_lock+0x26>
 8019588:	4a09      	ldr	r2, [pc, #36]	@ (80195b0 <enq_lock+0x40>)
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	011b      	lsls	r3, r3, #4
 801958e:	4413      	add	r3, r2
 8019590:	681b      	ldr	r3, [r3, #0]
 8019592:	2b00      	cmp	r3, #0
 8019594:	d1f2      	bne.n	801957c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	2b02      	cmp	r3, #2
 801959a:	bf14      	ite	ne
 801959c:	2301      	movne	r3, #1
 801959e:	2300      	moveq	r3, #0
 80195a0:	b2db      	uxtb	r3, r3
}
 80195a2:	4618      	mov	r0, r3
 80195a4:	370c      	adds	r7, #12
 80195a6:	46bd      	mov	sp, r7
 80195a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195ac:	4770      	bx	lr
 80195ae:	bf00      	nop
 80195b0:	20001b74 	.word	0x20001b74

080195b4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80195b4:	b480      	push	{r7}
 80195b6:	b085      	sub	sp, #20
 80195b8:	af00      	add	r7, sp, #0
 80195ba:	6078      	str	r0, [r7, #4]
 80195bc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80195be:	2300      	movs	r3, #0
 80195c0:	60fb      	str	r3, [r7, #12]
 80195c2:	e01f      	b.n	8019604 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80195c4:	4a41      	ldr	r2, [pc, #260]	@ (80196cc <inc_lock+0x118>)
 80195c6:	68fb      	ldr	r3, [r7, #12]
 80195c8:	011b      	lsls	r3, r3, #4
 80195ca:	4413      	add	r3, r2
 80195cc:	681a      	ldr	r2, [r3, #0]
 80195ce:	687b      	ldr	r3, [r7, #4]
 80195d0:	681b      	ldr	r3, [r3, #0]
 80195d2:	429a      	cmp	r2, r3
 80195d4:	d113      	bne.n	80195fe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80195d6:	4a3d      	ldr	r2, [pc, #244]	@ (80196cc <inc_lock+0x118>)
 80195d8:	68fb      	ldr	r3, [r7, #12]
 80195da:	011b      	lsls	r3, r3, #4
 80195dc:	4413      	add	r3, r2
 80195de:	3304      	adds	r3, #4
 80195e0:	681a      	ldr	r2, [r3, #0]
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80195e6:	429a      	cmp	r2, r3
 80195e8:	d109      	bne.n	80195fe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80195ea:	4a38      	ldr	r2, [pc, #224]	@ (80196cc <inc_lock+0x118>)
 80195ec:	68fb      	ldr	r3, [r7, #12]
 80195ee:	011b      	lsls	r3, r3, #4
 80195f0:	4413      	add	r3, r2
 80195f2:	3308      	adds	r3, #8
 80195f4:	681a      	ldr	r2, [r3, #0]
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80195fa:	429a      	cmp	r2, r3
 80195fc:	d006      	beq.n	801960c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80195fe:	68fb      	ldr	r3, [r7, #12]
 8019600:	3301      	adds	r3, #1
 8019602:	60fb      	str	r3, [r7, #12]
 8019604:	68fb      	ldr	r3, [r7, #12]
 8019606:	2b01      	cmp	r3, #1
 8019608:	d9dc      	bls.n	80195c4 <inc_lock+0x10>
 801960a:	e000      	b.n	801960e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801960c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801960e:	68fb      	ldr	r3, [r7, #12]
 8019610:	2b02      	cmp	r3, #2
 8019612:	d132      	bne.n	801967a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8019614:	2300      	movs	r3, #0
 8019616:	60fb      	str	r3, [r7, #12]
 8019618:	e002      	b.n	8019620 <inc_lock+0x6c>
 801961a:	68fb      	ldr	r3, [r7, #12]
 801961c:	3301      	adds	r3, #1
 801961e:	60fb      	str	r3, [r7, #12]
 8019620:	68fb      	ldr	r3, [r7, #12]
 8019622:	2b01      	cmp	r3, #1
 8019624:	d806      	bhi.n	8019634 <inc_lock+0x80>
 8019626:	4a29      	ldr	r2, [pc, #164]	@ (80196cc <inc_lock+0x118>)
 8019628:	68fb      	ldr	r3, [r7, #12]
 801962a:	011b      	lsls	r3, r3, #4
 801962c:	4413      	add	r3, r2
 801962e:	681b      	ldr	r3, [r3, #0]
 8019630:	2b00      	cmp	r3, #0
 8019632:	d1f2      	bne.n	801961a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8019634:	68fb      	ldr	r3, [r7, #12]
 8019636:	2b02      	cmp	r3, #2
 8019638:	d101      	bne.n	801963e <inc_lock+0x8a>
 801963a:	2300      	movs	r3, #0
 801963c:	e040      	b.n	80196c0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	681a      	ldr	r2, [r3, #0]
 8019642:	4922      	ldr	r1, [pc, #136]	@ (80196cc <inc_lock+0x118>)
 8019644:	68fb      	ldr	r3, [r7, #12]
 8019646:	011b      	lsls	r3, r3, #4
 8019648:	440b      	add	r3, r1
 801964a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801964c:	687b      	ldr	r3, [r7, #4]
 801964e:	689a      	ldr	r2, [r3, #8]
 8019650:	491e      	ldr	r1, [pc, #120]	@ (80196cc <inc_lock+0x118>)
 8019652:	68fb      	ldr	r3, [r7, #12]
 8019654:	011b      	lsls	r3, r3, #4
 8019656:	440b      	add	r3, r1
 8019658:	3304      	adds	r3, #4
 801965a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801965c:	687b      	ldr	r3, [r7, #4]
 801965e:	695a      	ldr	r2, [r3, #20]
 8019660:	491a      	ldr	r1, [pc, #104]	@ (80196cc <inc_lock+0x118>)
 8019662:	68fb      	ldr	r3, [r7, #12]
 8019664:	011b      	lsls	r3, r3, #4
 8019666:	440b      	add	r3, r1
 8019668:	3308      	adds	r3, #8
 801966a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801966c:	4a17      	ldr	r2, [pc, #92]	@ (80196cc <inc_lock+0x118>)
 801966e:	68fb      	ldr	r3, [r7, #12]
 8019670:	011b      	lsls	r3, r3, #4
 8019672:	4413      	add	r3, r2
 8019674:	330c      	adds	r3, #12
 8019676:	2200      	movs	r2, #0
 8019678:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801967a:	683b      	ldr	r3, [r7, #0]
 801967c:	2b00      	cmp	r3, #0
 801967e:	d009      	beq.n	8019694 <inc_lock+0xe0>
 8019680:	4a12      	ldr	r2, [pc, #72]	@ (80196cc <inc_lock+0x118>)
 8019682:	68fb      	ldr	r3, [r7, #12]
 8019684:	011b      	lsls	r3, r3, #4
 8019686:	4413      	add	r3, r2
 8019688:	330c      	adds	r3, #12
 801968a:	881b      	ldrh	r3, [r3, #0]
 801968c:	2b00      	cmp	r3, #0
 801968e:	d001      	beq.n	8019694 <inc_lock+0xe0>
 8019690:	2300      	movs	r3, #0
 8019692:	e015      	b.n	80196c0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8019694:	683b      	ldr	r3, [r7, #0]
 8019696:	2b00      	cmp	r3, #0
 8019698:	d108      	bne.n	80196ac <inc_lock+0xf8>
 801969a:	4a0c      	ldr	r2, [pc, #48]	@ (80196cc <inc_lock+0x118>)
 801969c:	68fb      	ldr	r3, [r7, #12]
 801969e:	011b      	lsls	r3, r3, #4
 80196a0:	4413      	add	r3, r2
 80196a2:	330c      	adds	r3, #12
 80196a4:	881b      	ldrh	r3, [r3, #0]
 80196a6:	3301      	adds	r3, #1
 80196a8:	b29a      	uxth	r2, r3
 80196aa:	e001      	b.n	80196b0 <inc_lock+0xfc>
 80196ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80196b0:	4906      	ldr	r1, [pc, #24]	@ (80196cc <inc_lock+0x118>)
 80196b2:	68fb      	ldr	r3, [r7, #12]
 80196b4:	011b      	lsls	r3, r3, #4
 80196b6:	440b      	add	r3, r1
 80196b8:	330c      	adds	r3, #12
 80196ba:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80196bc:	68fb      	ldr	r3, [r7, #12]
 80196be:	3301      	adds	r3, #1
}
 80196c0:	4618      	mov	r0, r3
 80196c2:	3714      	adds	r7, #20
 80196c4:	46bd      	mov	sp, r7
 80196c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196ca:	4770      	bx	lr
 80196cc:	20001b74 	.word	0x20001b74

080196d0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80196d0:	b480      	push	{r7}
 80196d2:	b085      	sub	sp, #20
 80196d4:	af00      	add	r7, sp, #0
 80196d6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80196d8:	687b      	ldr	r3, [r7, #4]
 80196da:	3b01      	subs	r3, #1
 80196dc:	607b      	str	r3, [r7, #4]
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	2b01      	cmp	r3, #1
 80196e2:	d825      	bhi.n	8019730 <dec_lock+0x60>
		n = Files[i].ctr;
 80196e4:	4a17      	ldr	r2, [pc, #92]	@ (8019744 <dec_lock+0x74>)
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	011b      	lsls	r3, r3, #4
 80196ea:	4413      	add	r3, r2
 80196ec:	330c      	adds	r3, #12
 80196ee:	881b      	ldrh	r3, [r3, #0]
 80196f0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80196f2:	89fb      	ldrh	r3, [r7, #14]
 80196f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80196f8:	d101      	bne.n	80196fe <dec_lock+0x2e>
 80196fa:	2300      	movs	r3, #0
 80196fc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80196fe:	89fb      	ldrh	r3, [r7, #14]
 8019700:	2b00      	cmp	r3, #0
 8019702:	d002      	beq.n	801970a <dec_lock+0x3a>
 8019704:	89fb      	ldrh	r3, [r7, #14]
 8019706:	3b01      	subs	r3, #1
 8019708:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801970a:	4a0e      	ldr	r2, [pc, #56]	@ (8019744 <dec_lock+0x74>)
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	011b      	lsls	r3, r3, #4
 8019710:	4413      	add	r3, r2
 8019712:	330c      	adds	r3, #12
 8019714:	89fa      	ldrh	r2, [r7, #14]
 8019716:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8019718:	89fb      	ldrh	r3, [r7, #14]
 801971a:	2b00      	cmp	r3, #0
 801971c:	d105      	bne.n	801972a <dec_lock+0x5a>
 801971e:	4a09      	ldr	r2, [pc, #36]	@ (8019744 <dec_lock+0x74>)
 8019720:	687b      	ldr	r3, [r7, #4]
 8019722:	011b      	lsls	r3, r3, #4
 8019724:	4413      	add	r3, r2
 8019726:	2200      	movs	r2, #0
 8019728:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801972a:	2300      	movs	r3, #0
 801972c:	737b      	strb	r3, [r7, #13]
 801972e:	e001      	b.n	8019734 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8019730:	2302      	movs	r3, #2
 8019732:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8019734:	7b7b      	ldrb	r3, [r7, #13]
}
 8019736:	4618      	mov	r0, r3
 8019738:	3714      	adds	r7, #20
 801973a:	46bd      	mov	sp, r7
 801973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019740:	4770      	bx	lr
 8019742:	bf00      	nop
 8019744:	20001b74 	.word	0x20001b74

08019748 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8019748:	b480      	push	{r7}
 801974a:	b085      	sub	sp, #20
 801974c:	af00      	add	r7, sp, #0
 801974e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8019750:	2300      	movs	r3, #0
 8019752:	60fb      	str	r3, [r7, #12]
 8019754:	e010      	b.n	8019778 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8019756:	4a0d      	ldr	r2, [pc, #52]	@ (801978c <clear_lock+0x44>)
 8019758:	68fb      	ldr	r3, [r7, #12]
 801975a:	011b      	lsls	r3, r3, #4
 801975c:	4413      	add	r3, r2
 801975e:	681b      	ldr	r3, [r3, #0]
 8019760:	687a      	ldr	r2, [r7, #4]
 8019762:	429a      	cmp	r2, r3
 8019764:	d105      	bne.n	8019772 <clear_lock+0x2a>
 8019766:	4a09      	ldr	r2, [pc, #36]	@ (801978c <clear_lock+0x44>)
 8019768:	68fb      	ldr	r3, [r7, #12]
 801976a:	011b      	lsls	r3, r3, #4
 801976c:	4413      	add	r3, r2
 801976e:	2200      	movs	r2, #0
 8019770:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8019772:	68fb      	ldr	r3, [r7, #12]
 8019774:	3301      	adds	r3, #1
 8019776:	60fb      	str	r3, [r7, #12]
 8019778:	68fb      	ldr	r3, [r7, #12]
 801977a:	2b01      	cmp	r3, #1
 801977c:	d9eb      	bls.n	8019756 <clear_lock+0xe>
	}
}
 801977e:	bf00      	nop
 8019780:	bf00      	nop
 8019782:	3714      	adds	r7, #20
 8019784:	46bd      	mov	sp, r7
 8019786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801978a:	4770      	bx	lr
 801978c:	20001b74 	.word	0x20001b74

08019790 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8019790:	b580      	push	{r7, lr}
 8019792:	b086      	sub	sp, #24
 8019794:	af00      	add	r7, sp, #0
 8019796:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8019798:	2300      	movs	r3, #0
 801979a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	78db      	ldrb	r3, [r3, #3]
 80197a0:	2b00      	cmp	r3, #0
 80197a2:	d034      	beq.n	801980e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80197a8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80197aa:	687b      	ldr	r3, [r7, #4]
 80197ac:	7858      	ldrb	r0, [r3, #1]
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80197b4:	2301      	movs	r3, #1
 80197b6:	697a      	ldr	r2, [r7, #20]
 80197b8:	f7ff fd40 	bl	801923c <disk_write>
 80197bc:	4603      	mov	r3, r0
 80197be:	2b00      	cmp	r3, #0
 80197c0:	d002      	beq.n	80197c8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80197c2:	2301      	movs	r3, #1
 80197c4:	73fb      	strb	r3, [r7, #15]
 80197c6:	e022      	b.n	801980e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80197c8:	687b      	ldr	r3, [r7, #4]
 80197ca:	2200      	movs	r2, #0
 80197cc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80197ce:	687b      	ldr	r3, [r7, #4]
 80197d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80197d2:	697a      	ldr	r2, [r7, #20]
 80197d4:	1ad2      	subs	r2, r2, r3
 80197d6:	687b      	ldr	r3, [r7, #4]
 80197d8:	69db      	ldr	r3, [r3, #28]
 80197da:	429a      	cmp	r2, r3
 80197dc:	d217      	bcs.n	801980e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80197de:	687b      	ldr	r3, [r7, #4]
 80197e0:	789b      	ldrb	r3, [r3, #2]
 80197e2:	613b      	str	r3, [r7, #16]
 80197e4:	e010      	b.n	8019808 <sync_window+0x78>
					wsect += fs->fsize;
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	69db      	ldr	r3, [r3, #28]
 80197ea:	697a      	ldr	r2, [r7, #20]
 80197ec:	4413      	add	r3, r2
 80197ee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80197f0:	687b      	ldr	r3, [r7, #4]
 80197f2:	7858      	ldrb	r0, [r3, #1]
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80197fa:	2301      	movs	r3, #1
 80197fc:	697a      	ldr	r2, [r7, #20]
 80197fe:	f7ff fd1d 	bl	801923c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019802:	693b      	ldr	r3, [r7, #16]
 8019804:	3b01      	subs	r3, #1
 8019806:	613b      	str	r3, [r7, #16]
 8019808:	693b      	ldr	r3, [r7, #16]
 801980a:	2b01      	cmp	r3, #1
 801980c:	d8eb      	bhi.n	80197e6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801980e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019810:	4618      	mov	r0, r3
 8019812:	3718      	adds	r7, #24
 8019814:	46bd      	mov	sp, r7
 8019816:	bd80      	pop	{r7, pc}

08019818 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8019818:	b580      	push	{r7, lr}
 801981a:	b084      	sub	sp, #16
 801981c:	af00      	add	r7, sp, #0
 801981e:	6078      	str	r0, [r7, #4]
 8019820:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8019822:	2300      	movs	r3, #0
 8019824:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801982a:	683a      	ldr	r2, [r7, #0]
 801982c:	429a      	cmp	r2, r3
 801982e:	d01b      	beq.n	8019868 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8019830:	6878      	ldr	r0, [r7, #4]
 8019832:	f7ff ffad 	bl	8019790 <sync_window>
 8019836:	4603      	mov	r3, r0
 8019838:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801983a:	7bfb      	ldrb	r3, [r7, #15]
 801983c:	2b00      	cmp	r3, #0
 801983e:	d113      	bne.n	8019868 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8019840:	687b      	ldr	r3, [r7, #4]
 8019842:	7858      	ldrb	r0, [r3, #1]
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 801984a:	2301      	movs	r3, #1
 801984c:	683a      	ldr	r2, [r7, #0]
 801984e:	f7ff fcd5 	bl	80191fc <disk_read>
 8019852:	4603      	mov	r3, r0
 8019854:	2b00      	cmp	r3, #0
 8019856:	d004      	beq.n	8019862 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8019858:	f04f 33ff 	mov.w	r3, #4294967295
 801985c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801985e:	2301      	movs	r3, #1
 8019860:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	683a      	ldr	r2, [r7, #0]
 8019866:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8019868:	7bfb      	ldrb	r3, [r7, #15]
}
 801986a:	4618      	mov	r0, r3
 801986c:	3710      	adds	r7, #16
 801986e:	46bd      	mov	sp, r7
 8019870:	bd80      	pop	{r7, pc}
	...

08019874 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8019874:	b580      	push	{r7, lr}
 8019876:	b084      	sub	sp, #16
 8019878:	af00      	add	r7, sp, #0
 801987a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801987c:	6878      	ldr	r0, [r7, #4]
 801987e:	f7ff ff87 	bl	8019790 <sync_window>
 8019882:	4603      	mov	r3, r0
 8019884:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8019886:	7bfb      	ldrb	r3, [r7, #15]
 8019888:	2b00      	cmp	r3, #0
 801988a:	d158      	bne.n	801993e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	781b      	ldrb	r3, [r3, #0]
 8019890:	2b03      	cmp	r3, #3
 8019892:	d148      	bne.n	8019926 <sync_fs+0xb2>
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	791b      	ldrb	r3, [r3, #4]
 8019898:	2b01      	cmp	r3, #1
 801989a:	d144      	bne.n	8019926 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801989c:	687b      	ldr	r3, [r7, #4]
 801989e:	3334      	adds	r3, #52	@ 0x34
 80198a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80198a4:	2100      	movs	r1, #0
 80198a6:	4618      	mov	r0, r3
 80198a8:	f7ff fda9 	bl	80193fe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	3334      	adds	r3, #52	@ 0x34
 80198b0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80198b4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80198b8:	4618      	mov	r0, r3
 80198ba:	f7ff fd38 	bl	801932e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80198be:	687b      	ldr	r3, [r7, #4]
 80198c0:	3334      	adds	r3, #52	@ 0x34
 80198c2:	4921      	ldr	r1, [pc, #132]	@ (8019948 <sync_fs+0xd4>)
 80198c4:	4618      	mov	r0, r3
 80198c6:	f7ff fd4d 	bl	8019364 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80198ca:	687b      	ldr	r3, [r7, #4]
 80198cc:	3334      	adds	r3, #52	@ 0x34
 80198ce:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80198d2:	491e      	ldr	r1, [pc, #120]	@ (801994c <sync_fs+0xd8>)
 80198d4:	4618      	mov	r0, r3
 80198d6:	f7ff fd45 	bl	8019364 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	3334      	adds	r3, #52	@ 0x34
 80198de:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	695b      	ldr	r3, [r3, #20]
 80198e6:	4619      	mov	r1, r3
 80198e8:	4610      	mov	r0, r2
 80198ea:	f7ff fd3b 	bl	8019364 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	3334      	adds	r3, #52	@ 0x34
 80198f2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	691b      	ldr	r3, [r3, #16]
 80198fa:	4619      	mov	r1, r3
 80198fc:	4610      	mov	r0, r2
 80198fe:	f7ff fd31 	bl	8019364 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	6a1b      	ldr	r3, [r3, #32]
 8019906:	1c5a      	adds	r2, r3, #1
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	7858      	ldrb	r0, [r3, #1]
 8019910:	687b      	ldr	r3, [r7, #4]
 8019912:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801991a:	2301      	movs	r3, #1
 801991c:	f7ff fc8e 	bl	801923c <disk_write>
			fs->fsi_flag = 0;
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	2200      	movs	r2, #0
 8019924:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	785b      	ldrb	r3, [r3, #1]
 801992a:	2200      	movs	r2, #0
 801992c:	2100      	movs	r1, #0
 801992e:	4618      	mov	r0, r3
 8019930:	f7ff fca4 	bl	801927c <disk_ioctl>
 8019934:	4603      	mov	r3, r0
 8019936:	2b00      	cmp	r3, #0
 8019938:	d001      	beq.n	801993e <sync_fs+0xca>
 801993a:	2301      	movs	r3, #1
 801993c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801993e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019940:	4618      	mov	r0, r3
 8019942:	3710      	adds	r7, #16
 8019944:	46bd      	mov	sp, r7
 8019946:	bd80      	pop	{r7, pc}
 8019948:	41615252 	.word	0x41615252
 801994c:	61417272 	.word	0x61417272

08019950 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8019950:	b480      	push	{r7}
 8019952:	b083      	sub	sp, #12
 8019954:	af00      	add	r7, sp, #0
 8019956:	6078      	str	r0, [r7, #4]
 8019958:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801995a:	683b      	ldr	r3, [r7, #0]
 801995c:	3b02      	subs	r3, #2
 801995e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8019960:	687b      	ldr	r3, [r7, #4]
 8019962:	699b      	ldr	r3, [r3, #24]
 8019964:	3b02      	subs	r3, #2
 8019966:	683a      	ldr	r2, [r7, #0]
 8019968:	429a      	cmp	r2, r3
 801996a:	d301      	bcc.n	8019970 <clust2sect+0x20>
 801996c:	2300      	movs	r3, #0
 801996e:	e008      	b.n	8019982 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	895b      	ldrh	r3, [r3, #10]
 8019974:	461a      	mov	r2, r3
 8019976:	683b      	ldr	r3, [r7, #0]
 8019978:	fb03 f202 	mul.w	r2, r3, r2
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019980:	4413      	add	r3, r2
}
 8019982:	4618      	mov	r0, r3
 8019984:	370c      	adds	r7, #12
 8019986:	46bd      	mov	sp, r7
 8019988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801998c:	4770      	bx	lr

0801998e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801998e:	b580      	push	{r7, lr}
 8019990:	b086      	sub	sp, #24
 8019992:	af00      	add	r7, sp, #0
 8019994:	6078      	str	r0, [r7, #4]
 8019996:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8019998:	687b      	ldr	r3, [r7, #4]
 801999a:	681b      	ldr	r3, [r3, #0]
 801999c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801999e:	683b      	ldr	r3, [r7, #0]
 80199a0:	2b01      	cmp	r3, #1
 80199a2:	d904      	bls.n	80199ae <get_fat+0x20>
 80199a4:	693b      	ldr	r3, [r7, #16]
 80199a6:	699b      	ldr	r3, [r3, #24]
 80199a8:	683a      	ldr	r2, [r7, #0]
 80199aa:	429a      	cmp	r2, r3
 80199ac:	d302      	bcc.n	80199b4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80199ae:	2301      	movs	r3, #1
 80199b0:	617b      	str	r3, [r7, #20]
 80199b2:	e08e      	b.n	8019ad2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80199b4:	f04f 33ff 	mov.w	r3, #4294967295
 80199b8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80199ba:	693b      	ldr	r3, [r7, #16]
 80199bc:	781b      	ldrb	r3, [r3, #0]
 80199be:	2b03      	cmp	r3, #3
 80199c0:	d061      	beq.n	8019a86 <get_fat+0xf8>
 80199c2:	2b03      	cmp	r3, #3
 80199c4:	dc7b      	bgt.n	8019abe <get_fat+0x130>
 80199c6:	2b01      	cmp	r3, #1
 80199c8:	d002      	beq.n	80199d0 <get_fat+0x42>
 80199ca:	2b02      	cmp	r3, #2
 80199cc:	d041      	beq.n	8019a52 <get_fat+0xc4>
 80199ce:	e076      	b.n	8019abe <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80199d0:	683b      	ldr	r3, [r7, #0]
 80199d2:	60fb      	str	r3, [r7, #12]
 80199d4:	68fb      	ldr	r3, [r7, #12]
 80199d6:	085b      	lsrs	r3, r3, #1
 80199d8:	68fa      	ldr	r2, [r7, #12]
 80199da:	4413      	add	r3, r2
 80199dc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80199de:	693b      	ldr	r3, [r7, #16]
 80199e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80199e2:	68fb      	ldr	r3, [r7, #12]
 80199e4:	0a5b      	lsrs	r3, r3, #9
 80199e6:	4413      	add	r3, r2
 80199e8:	4619      	mov	r1, r3
 80199ea:	6938      	ldr	r0, [r7, #16]
 80199ec:	f7ff ff14 	bl	8019818 <move_window>
 80199f0:	4603      	mov	r3, r0
 80199f2:	2b00      	cmp	r3, #0
 80199f4:	d166      	bne.n	8019ac4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80199f6:	68fb      	ldr	r3, [r7, #12]
 80199f8:	1c5a      	adds	r2, r3, #1
 80199fa:	60fa      	str	r2, [r7, #12]
 80199fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019a00:	693a      	ldr	r2, [r7, #16]
 8019a02:	4413      	add	r3, r2
 8019a04:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8019a08:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8019a0a:	693b      	ldr	r3, [r7, #16]
 8019a0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019a0e:	68fb      	ldr	r3, [r7, #12]
 8019a10:	0a5b      	lsrs	r3, r3, #9
 8019a12:	4413      	add	r3, r2
 8019a14:	4619      	mov	r1, r3
 8019a16:	6938      	ldr	r0, [r7, #16]
 8019a18:	f7ff fefe 	bl	8019818 <move_window>
 8019a1c:	4603      	mov	r3, r0
 8019a1e:	2b00      	cmp	r3, #0
 8019a20:	d152      	bne.n	8019ac8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8019a22:	68fb      	ldr	r3, [r7, #12]
 8019a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019a28:	693a      	ldr	r2, [r7, #16]
 8019a2a:	4413      	add	r3, r2
 8019a2c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8019a30:	021b      	lsls	r3, r3, #8
 8019a32:	68ba      	ldr	r2, [r7, #8]
 8019a34:	4313      	orrs	r3, r2
 8019a36:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8019a38:	683b      	ldr	r3, [r7, #0]
 8019a3a:	f003 0301 	and.w	r3, r3, #1
 8019a3e:	2b00      	cmp	r3, #0
 8019a40:	d002      	beq.n	8019a48 <get_fat+0xba>
 8019a42:	68bb      	ldr	r3, [r7, #8]
 8019a44:	091b      	lsrs	r3, r3, #4
 8019a46:	e002      	b.n	8019a4e <get_fat+0xc0>
 8019a48:	68bb      	ldr	r3, [r7, #8]
 8019a4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8019a4e:	617b      	str	r3, [r7, #20]
			break;
 8019a50:	e03f      	b.n	8019ad2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8019a52:	693b      	ldr	r3, [r7, #16]
 8019a54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019a56:	683b      	ldr	r3, [r7, #0]
 8019a58:	0a1b      	lsrs	r3, r3, #8
 8019a5a:	4413      	add	r3, r2
 8019a5c:	4619      	mov	r1, r3
 8019a5e:	6938      	ldr	r0, [r7, #16]
 8019a60:	f7ff feda 	bl	8019818 <move_window>
 8019a64:	4603      	mov	r3, r0
 8019a66:	2b00      	cmp	r3, #0
 8019a68:	d130      	bne.n	8019acc <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8019a6a:	693b      	ldr	r3, [r7, #16]
 8019a6c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019a70:	683b      	ldr	r3, [r7, #0]
 8019a72:	005b      	lsls	r3, r3, #1
 8019a74:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8019a78:	4413      	add	r3, r2
 8019a7a:	4618      	mov	r0, r3
 8019a7c:	f7ff fc1c 	bl	80192b8 <ld_word>
 8019a80:	4603      	mov	r3, r0
 8019a82:	617b      	str	r3, [r7, #20]
			break;
 8019a84:	e025      	b.n	8019ad2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8019a86:	693b      	ldr	r3, [r7, #16]
 8019a88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019a8a:	683b      	ldr	r3, [r7, #0]
 8019a8c:	09db      	lsrs	r3, r3, #7
 8019a8e:	4413      	add	r3, r2
 8019a90:	4619      	mov	r1, r3
 8019a92:	6938      	ldr	r0, [r7, #16]
 8019a94:	f7ff fec0 	bl	8019818 <move_window>
 8019a98:	4603      	mov	r3, r0
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	d118      	bne.n	8019ad0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8019a9e:	693b      	ldr	r3, [r7, #16]
 8019aa0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019aa4:	683b      	ldr	r3, [r7, #0]
 8019aa6:	009b      	lsls	r3, r3, #2
 8019aa8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8019aac:	4413      	add	r3, r2
 8019aae:	4618      	mov	r0, r3
 8019ab0:	f7ff fc1a 	bl	80192e8 <ld_dword>
 8019ab4:	4603      	mov	r3, r0
 8019ab6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8019aba:	617b      	str	r3, [r7, #20]
			break;
 8019abc:	e009      	b.n	8019ad2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8019abe:	2301      	movs	r3, #1
 8019ac0:	617b      	str	r3, [r7, #20]
 8019ac2:	e006      	b.n	8019ad2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8019ac4:	bf00      	nop
 8019ac6:	e004      	b.n	8019ad2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8019ac8:	bf00      	nop
 8019aca:	e002      	b.n	8019ad2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8019acc:	bf00      	nop
 8019ace:	e000      	b.n	8019ad2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8019ad0:	bf00      	nop
		}
	}

	return val;
 8019ad2:	697b      	ldr	r3, [r7, #20]
}
 8019ad4:	4618      	mov	r0, r3
 8019ad6:	3718      	adds	r7, #24
 8019ad8:	46bd      	mov	sp, r7
 8019ada:	bd80      	pop	{r7, pc}

08019adc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8019adc:	b590      	push	{r4, r7, lr}
 8019ade:	b089      	sub	sp, #36	@ 0x24
 8019ae0:	af00      	add	r7, sp, #0
 8019ae2:	60f8      	str	r0, [r7, #12]
 8019ae4:	60b9      	str	r1, [r7, #8]
 8019ae6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8019ae8:	2302      	movs	r3, #2
 8019aea:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8019aec:	68bb      	ldr	r3, [r7, #8]
 8019aee:	2b01      	cmp	r3, #1
 8019af0:	f240 80d9 	bls.w	8019ca6 <put_fat+0x1ca>
 8019af4:	68fb      	ldr	r3, [r7, #12]
 8019af6:	699b      	ldr	r3, [r3, #24]
 8019af8:	68ba      	ldr	r2, [r7, #8]
 8019afa:	429a      	cmp	r2, r3
 8019afc:	f080 80d3 	bcs.w	8019ca6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8019b00:	68fb      	ldr	r3, [r7, #12]
 8019b02:	781b      	ldrb	r3, [r3, #0]
 8019b04:	2b03      	cmp	r3, #3
 8019b06:	f000 8096 	beq.w	8019c36 <put_fat+0x15a>
 8019b0a:	2b03      	cmp	r3, #3
 8019b0c:	f300 80cb 	bgt.w	8019ca6 <put_fat+0x1ca>
 8019b10:	2b01      	cmp	r3, #1
 8019b12:	d002      	beq.n	8019b1a <put_fat+0x3e>
 8019b14:	2b02      	cmp	r3, #2
 8019b16:	d06e      	beq.n	8019bf6 <put_fat+0x11a>
 8019b18:	e0c5      	b.n	8019ca6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8019b1a:	68bb      	ldr	r3, [r7, #8]
 8019b1c:	61bb      	str	r3, [r7, #24]
 8019b1e:	69bb      	ldr	r3, [r7, #24]
 8019b20:	085b      	lsrs	r3, r3, #1
 8019b22:	69ba      	ldr	r2, [r7, #24]
 8019b24:	4413      	add	r3, r2
 8019b26:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8019b28:	68fb      	ldr	r3, [r7, #12]
 8019b2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019b2c:	69bb      	ldr	r3, [r7, #24]
 8019b2e:	0a5b      	lsrs	r3, r3, #9
 8019b30:	4413      	add	r3, r2
 8019b32:	4619      	mov	r1, r3
 8019b34:	68f8      	ldr	r0, [r7, #12]
 8019b36:	f7ff fe6f 	bl	8019818 <move_window>
 8019b3a:	4603      	mov	r3, r0
 8019b3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019b3e:	7ffb      	ldrb	r3, [r7, #31]
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	f040 80a9 	bne.w	8019c98 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8019b46:	68fb      	ldr	r3, [r7, #12]
 8019b48:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019b4c:	69bb      	ldr	r3, [r7, #24]
 8019b4e:	1c59      	adds	r1, r3, #1
 8019b50:	61b9      	str	r1, [r7, #24]
 8019b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019b56:	4413      	add	r3, r2
 8019b58:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8019b5a:	68bb      	ldr	r3, [r7, #8]
 8019b5c:	f003 0301 	and.w	r3, r3, #1
 8019b60:	2b00      	cmp	r3, #0
 8019b62:	d00d      	beq.n	8019b80 <put_fat+0xa4>
 8019b64:	697b      	ldr	r3, [r7, #20]
 8019b66:	781b      	ldrb	r3, [r3, #0]
 8019b68:	b25b      	sxtb	r3, r3
 8019b6a:	f003 030f 	and.w	r3, r3, #15
 8019b6e:	b25a      	sxtb	r2, r3
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	b2db      	uxtb	r3, r3
 8019b74:	011b      	lsls	r3, r3, #4
 8019b76:	b25b      	sxtb	r3, r3
 8019b78:	4313      	orrs	r3, r2
 8019b7a:	b25b      	sxtb	r3, r3
 8019b7c:	b2db      	uxtb	r3, r3
 8019b7e:	e001      	b.n	8019b84 <put_fat+0xa8>
 8019b80:	687b      	ldr	r3, [r7, #4]
 8019b82:	b2db      	uxtb	r3, r3
 8019b84:	697a      	ldr	r2, [r7, #20]
 8019b86:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8019b88:	68fb      	ldr	r3, [r7, #12]
 8019b8a:	2201      	movs	r2, #1
 8019b8c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8019b8e:	68fb      	ldr	r3, [r7, #12]
 8019b90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019b92:	69bb      	ldr	r3, [r7, #24]
 8019b94:	0a5b      	lsrs	r3, r3, #9
 8019b96:	4413      	add	r3, r2
 8019b98:	4619      	mov	r1, r3
 8019b9a:	68f8      	ldr	r0, [r7, #12]
 8019b9c:	f7ff fe3c 	bl	8019818 <move_window>
 8019ba0:	4603      	mov	r3, r0
 8019ba2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019ba4:	7ffb      	ldrb	r3, [r7, #31]
 8019ba6:	2b00      	cmp	r3, #0
 8019ba8:	d178      	bne.n	8019c9c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8019baa:	68fb      	ldr	r3, [r7, #12]
 8019bac:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019bb0:	69bb      	ldr	r3, [r7, #24]
 8019bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019bb6:	4413      	add	r3, r2
 8019bb8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8019bba:	68bb      	ldr	r3, [r7, #8]
 8019bbc:	f003 0301 	and.w	r3, r3, #1
 8019bc0:	2b00      	cmp	r3, #0
 8019bc2:	d003      	beq.n	8019bcc <put_fat+0xf0>
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	091b      	lsrs	r3, r3, #4
 8019bc8:	b2db      	uxtb	r3, r3
 8019bca:	e00e      	b.n	8019bea <put_fat+0x10e>
 8019bcc:	697b      	ldr	r3, [r7, #20]
 8019bce:	781b      	ldrb	r3, [r3, #0]
 8019bd0:	b25b      	sxtb	r3, r3
 8019bd2:	f023 030f 	bic.w	r3, r3, #15
 8019bd6:	b25a      	sxtb	r2, r3
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	0a1b      	lsrs	r3, r3, #8
 8019bdc:	b25b      	sxtb	r3, r3
 8019bde:	f003 030f 	and.w	r3, r3, #15
 8019be2:	b25b      	sxtb	r3, r3
 8019be4:	4313      	orrs	r3, r2
 8019be6:	b25b      	sxtb	r3, r3
 8019be8:	b2db      	uxtb	r3, r3
 8019bea:	697a      	ldr	r2, [r7, #20]
 8019bec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8019bee:	68fb      	ldr	r3, [r7, #12]
 8019bf0:	2201      	movs	r2, #1
 8019bf2:	70da      	strb	r2, [r3, #3]
			break;
 8019bf4:	e057      	b.n	8019ca6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8019bf6:	68fb      	ldr	r3, [r7, #12]
 8019bf8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019bfa:	68bb      	ldr	r3, [r7, #8]
 8019bfc:	0a1b      	lsrs	r3, r3, #8
 8019bfe:	4413      	add	r3, r2
 8019c00:	4619      	mov	r1, r3
 8019c02:	68f8      	ldr	r0, [r7, #12]
 8019c04:	f7ff fe08 	bl	8019818 <move_window>
 8019c08:	4603      	mov	r3, r0
 8019c0a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019c0c:	7ffb      	ldrb	r3, [r7, #31]
 8019c0e:	2b00      	cmp	r3, #0
 8019c10:	d146      	bne.n	8019ca0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8019c12:	68fb      	ldr	r3, [r7, #12]
 8019c14:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019c18:	68bb      	ldr	r3, [r7, #8]
 8019c1a:	005b      	lsls	r3, r3, #1
 8019c1c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8019c20:	4413      	add	r3, r2
 8019c22:	687a      	ldr	r2, [r7, #4]
 8019c24:	b292      	uxth	r2, r2
 8019c26:	4611      	mov	r1, r2
 8019c28:	4618      	mov	r0, r3
 8019c2a:	f7ff fb80 	bl	801932e <st_word>
			fs->wflag = 1;
 8019c2e:	68fb      	ldr	r3, [r7, #12]
 8019c30:	2201      	movs	r2, #1
 8019c32:	70da      	strb	r2, [r3, #3]
			break;
 8019c34:	e037      	b.n	8019ca6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8019c36:	68fb      	ldr	r3, [r7, #12]
 8019c38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019c3a:	68bb      	ldr	r3, [r7, #8]
 8019c3c:	09db      	lsrs	r3, r3, #7
 8019c3e:	4413      	add	r3, r2
 8019c40:	4619      	mov	r1, r3
 8019c42:	68f8      	ldr	r0, [r7, #12]
 8019c44:	f7ff fde8 	bl	8019818 <move_window>
 8019c48:	4603      	mov	r3, r0
 8019c4a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019c4c:	7ffb      	ldrb	r3, [r7, #31]
 8019c4e:	2b00      	cmp	r3, #0
 8019c50:	d128      	bne.n	8019ca4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8019c58:	68fb      	ldr	r3, [r7, #12]
 8019c5a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019c5e:	68bb      	ldr	r3, [r7, #8]
 8019c60:	009b      	lsls	r3, r3, #2
 8019c62:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8019c66:	4413      	add	r3, r2
 8019c68:	4618      	mov	r0, r3
 8019c6a:	f7ff fb3d 	bl	80192e8 <ld_dword>
 8019c6e:	4603      	mov	r3, r0
 8019c70:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8019c74:	4323      	orrs	r3, r4
 8019c76:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8019c78:	68fb      	ldr	r3, [r7, #12]
 8019c7a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019c7e:	68bb      	ldr	r3, [r7, #8]
 8019c80:	009b      	lsls	r3, r3, #2
 8019c82:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8019c86:	4413      	add	r3, r2
 8019c88:	6879      	ldr	r1, [r7, #4]
 8019c8a:	4618      	mov	r0, r3
 8019c8c:	f7ff fb6a 	bl	8019364 <st_dword>
			fs->wflag = 1;
 8019c90:	68fb      	ldr	r3, [r7, #12]
 8019c92:	2201      	movs	r2, #1
 8019c94:	70da      	strb	r2, [r3, #3]
			break;
 8019c96:	e006      	b.n	8019ca6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8019c98:	bf00      	nop
 8019c9a:	e004      	b.n	8019ca6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8019c9c:	bf00      	nop
 8019c9e:	e002      	b.n	8019ca6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8019ca0:	bf00      	nop
 8019ca2:	e000      	b.n	8019ca6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8019ca4:	bf00      	nop
		}
	}
	return res;
 8019ca6:	7ffb      	ldrb	r3, [r7, #31]
}
 8019ca8:	4618      	mov	r0, r3
 8019caa:	3724      	adds	r7, #36	@ 0x24
 8019cac:	46bd      	mov	sp, r7
 8019cae:	bd90      	pop	{r4, r7, pc}

08019cb0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8019cb0:	b580      	push	{r7, lr}
 8019cb2:	b088      	sub	sp, #32
 8019cb4:	af00      	add	r7, sp, #0
 8019cb6:	60f8      	str	r0, [r7, #12]
 8019cb8:	60b9      	str	r1, [r7, #8]
 8019cba:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8019cbc:	2300      	movs	r3, #0
 8019cbe:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8019cc0:	68fb      	ldr	r3, [r7, #12]
 8019cc2:	681b      	ldr	r3, [r3, #0]
 8019cc4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8019cc6:	68bb      	ldr	r3, [r7, #8]
 8019cc8:	2b01      	cmp	r3, #1
 8019cca:	d904      	bls.n	8019cd6 <remove_chain+0x26>
 8019ccc:	69bb      	ldr	r3, [r7, #24]
 8019cce:	699b      	ldr	r3, [r3, #24]
 8019cd0:	68ba      	ldr	r2, [r7, #8]
 8019cd2:	429a      	cmp	r2, r3
 8019cd4:	d301      	bcc.n	8019cda <remove_chain+0x2a>
 8019cd6:	2302      	movs	r3, #2
 8019cd8:	e04b      	b.n	8019d72 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8019cda:	687b      	ldr	r3, [r7, #4]
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d00c      	beq.n	8019cfa <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8019ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8019ce4:	6879      	ldr	r1, [r7, #4]
 8019ce6:	69b8      	ldr	r0, [r7, #24]
 8019ce8:	f7ff fef8 	bl	8019adc <put_fat>
 8019cec:	4603      	mov	r3, r0
 8019cee:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8019cf0:	7ffb      	ldrb	r3, [r7, #31]
 8019cf2:	2b00      	cmp	r3, #0
 8019cf4:	d001      	beq.n	8019cfa <remove_chain+0x4a>
 8019cf6:	7ffb      	ldrb	r3, [r7, #31]
 8019cf8:	e03b      	b.n	8019d72 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8019cfa:	68b9      	ldr	r1, [r7, #8]
 8019cfc:	68f8      	ldr	r0, [r7, #12]
 8019cfe:	f7ff fe46 	bl	801998e <get_fat>
 8019d02:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8019d04:	697b      	ldr	r3, [r7, #20]
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d031      	beq.n	8019d6e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8019d0a:	697b      	ldr	r3, [r7, #20]
 8019d0c:	2b01      	cmp	r3, #1
 8019d0e:	d101      	bne.n	8019d14 <remove_chain+0x64>
 8019d10:	2302      	movs	r3, #2
 8019d12:	e02e      	b.n	8019d72 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8019d14:	697b      	ldr	r3, [r7, #20]
 8019d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019d1a:	d101      	bne.n	8019d20 <remove_chain+0x70>
 8019d1c:	2301      	movs	r3, #1
 8019d1e:	e028      	b.n	8019d72 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8019d20:	2200      	movs	r2, #0
 8019d22:	68b9      	ldr	r1, [r7, #8]
 8019d24:	69b8      	ldr	r0, [r7, #24]
 8019d26:	f7ff fed9 	bl	8019adc <put_fat>
 8019d2a:	4603      	mov	r3, r0
 8019d2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8019d2e:	7ffb      	ldrb	r3, [r7, #31]
 8019d30:	2b00      	cmp	r3, #0
 8019d32:	d001      	beq.n	8019d38 <remove_chain+0x88>
 8019d34:	7ffb      	ldrb	r3, [r7, #31]
 8019d36:	e01c      	b.n	8019d72 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8019d38:	69bb      	ldr	r3, [r7, #24]
 8019d3a:	695a      	ldr	r2, [r3, #20]
 8019d3c:	69bb      	ldr	r3, [r7, #24]
 8019d3e:	699b      	ldr	r3, [r3, #24]
 8019d40:	3b02      	subs	r3, #2
 8019d42:	429a      	cmp	r2, r3
 8019d44:	d20b      	bcs.n	8019d5e <remove_chain+0xae>
			fs->free_clst++;
 8019d46:	69bb      	ldr	r3, [r7, #24]
 8019d48:	695b      	ldr	r3, [r3, #20]
 8019d4a:	1c5a      	adds	r2, r3, #1
 8019d4c:	69bb      	ldr	r3, [r7, #24]
 8019d4e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8019d50:	69bb      	ldr	r3, [r7, #24]
 8019d52:	791b      	ldrb	r3, [r3, #4]
 8019d54:	f043 0301 	orr.w	r3, r3, #1
 8019d58:	b2da      	uxtb	r2, r3
 8019d5a:	69bb      	ldr	r3, [r7, #24]
 8019d5c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8019d5e:	697b      	ldr	r3, [r7, #20]
 8019d60:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8019d62:	69bb      	ldr	r3, [r7, #24]
 8019d64:	699b      	ldr	r3, [r3, #24]
 8019d66:	68ba      	ldr	r2, [r7, #8]
 8019d68:	429a      	cmp	r2, r3
 8019d6a:	d3c6      	bcc.n	8019cfa <remove_chain+0x4a>
 8019d6c:	e000      	b.n	8019d70 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8019d6e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8019d70:	2300      	movs	r3, #0
}
 8019d72:	4618      	mov	r0, r3
 8019d74:	3720      	adds	r7, #32
 8019d76:	46bd      	mov	sp, r7
 8019d78:	bd80      	pop	{r7, pc}

08019d7a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8019d7a:	b580      	push	{r7, lr}
 8019d7c:	b088      	sub	sp, #32
 8019d7e:	af00      	add	r7, sp, #0
 8019d80:	6078      	str	r0, [r7, #4]
 8019d82:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8019d84:	687b      	ldr	r3, [r7, #4]
 8019d86:	681b      	ldr	r3, [r3, #0]
 8019d88:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8019d8a:	683b      	ldr	r3, [r7, #0]
 8019d8c:	2b00      	cmp	r3, #0
 8019d8e:	d10d      	bne.n	8019dac <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8019d90:	693b      	ldr	r3, [r7, #16]
 8019d92:	691b      	ldr	r3, [r3, #16]
 8019d94:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8019d96:	69bb      	ldr	r3, [r7, #24]
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d004      	beq.n	8019da6 <create_chain+0x2c>
 8019d9c:	693b      	ldr	r3, [r7, #16]
 8019d9e:	699b      	ldr	r3, [r3, #24]
 8019da0:	69ba      	ldr	r2, [r7, #24]
 8019da2:	429a      	cmp	r2, r3
 8019da4:	d31b      	bcc.n	8019dde <create_chain+0x64>
 8019da6:	2301      	movs	r3, #1
 8019da8:	61bb      	str	r3, [r7, #24]
 8019daa:	e018      	b.n	8019dde <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8019dac:	6839      	ldr	r1, [r7, #0]
 8019dae:	6878      	ldr	r0, [r7, #4]
 8019db0:	f7ff fded 	bl	801998e <get_fat>
 8019db4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8019db6:	68fb      	ldr	r3, [r7, #12]
 8019db8:	2b01      	cmp	r3, #1
 8019dba:	d801      	bhi.n	8019dc0 <create_chain+0x46>
 8019dbc:	2301      	movs	r3, #1
 8019dbe:	e070      	b.n	8019ea2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8019dc0:	68fb      	ldr	r3, [r7, #12]
 8019dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019dc6:	d101      	bne.n	8019dcc <create_chain+0x52>
 8019dc8:	68fb      	ldr	r3, [r7, #12]
 8019dca:	e06a      	b.n	8019ea2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8019dcc:	693b      	ldr	r3, [r7, #16]
 8019dce:	699b      	ldr	r3, [r3, #24]
 8019dd0:	68fa      	ldr	r2, [r7, #12]
 8019dd2:	429a      	cmp	r2, r3
 8019dd4:	d201      	bcs.n	8019dda <create_chain+0x60>
 8019dd6:	68fb      	ldr	r3, [r7, #12]
 8019dd8:	e063      	b.n	8019ea2 <create_chain+0x128>
		scl = clst;
 8019dda:	683b      	ldr	r3, [r7, #0]
 8019ddc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8019dde:	69bb      	ldr	r3, [r7, #24]
 8019de0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8019de2:	69fb      	ldr	r3, [r7, #28]
 8019de4:	3301      	adds	r3, #1
 8019de6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8019de8:	693b      	ldr	r3, [r7, #16]
 8019dea:	699b      	ldr	r3, [r3, #24]
 8019dec:	69fa      	ldr	r2, [r7, #28]
 8019dee:	429a      	cmp	r2, r3
 8019df0:	d307      	bcc.n	8019e02 <create_chain+0x88>
				ncl = 2;
 8019df2:	2302      	movs	r3, #2
 8019df4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8019df6:	69fa      	ldr	r2, [r7, #28]
 8019df8:	69bb      	ldr	r3, [r7, #24]
 8019dfa:	429a      	cmp	r2, r3
 8019dfc:	d901      	bls.n	8019e02 <create_chain+0x88>
 8019dfe:	2300      	movs	r3, #0
 8019e00:	e04f      	b.n	8019ea2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8019e02:	69f9      	ldr	r1, [r7, #28]
 8019e04:	6878      	ldr	r0, [r7, #4]
 8019e06:	f7ff fdc2 	bl	801998e <get_fat>
 8019e0a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8019e0c:	68fb      	ldr	r3, [r7, #12]
 8019e0e:	2b00      	cmp	r3, #0
 8019e10:	d00e      	beq.n	8019e30 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8019e12:	68fb      	ldr	r3, [r7, #12]
 8019e14:	2b01      	cmp	r3, #1
 8019e16:	d003      	beq.n	8019e20 <create_chain+0xa6>
 8019e18:	68fb      	ldr	r3, [r7, #12]
 8019e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019e1e:	d101      	bne.n	8019e24 <create_chain+0xaa>
 8019e20:	68fb      	ldr	r3, [r7, #12]
 8019e22:	e03e      	b.n	8019ea2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8019e24:	69fa      	ldr	r2, [r7, #28]
 8019e26:	69bb      	ldr	r3, [r7, #24]
 8019e28:	429a      	cmp	r2, r3
 8019e2a:	d1da      	bne.n	8019de2 <create_chain+0x68>
 8019e2c:	2300      	movs	r3, #0
 8019e2e:	e038      	b.n	8019ea2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8019e30:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8019e32:	f04f 32ff 	mov.w	r2, #4294967295
 8019e36:	69f9      	ldr	r1, [r7, #28]
 8019e38:	6938      	ldr	r0, [r7, #16]
 8019e3a:	f7ff fe4f 	bl	8019adc <put_fat>
 8019e3e:	4603      	mov	r3, r0
 8019e40:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8019e42:	7dfb      	ldrb	r3, [r7, #23]
 8019e44:	2b00      	cmp	r3, #0
 8019e46:	d109      	bne.n	8019e5c <create_chain+0xe2>
 8019e48:	683b      	ldr	r3, [r7, #0]
 8019e4a:	2b00      	cmp	r3, #0
 8019e4c:	d006      	beq.n	8019e5c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8019e4e:	69fa      	ldr	r2, [r7, #28]
 8019e50:	6839      	ldr	r1, [r7, #0]
 8019e52:	6938      	ldr	r0, [r7, #16]
 8019e54:	f7ff fe42 	bl	8019adc <put_fat>
 8019e58:	4603      	mov	r3, r0
 8019e5a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8019e5c:	7dfb      	ldrb	r3, [r7, #23]
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	d116      	bne.n	8019e90 <create_chain+0x116>
		fs->last_clst = ncl;
 8019e62:	693b      	ldr	r3, [r7, #16]
 8019e64:	69fa      	ldr	r2, [r7, #28]
 8019e66:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8019e68:	693b      	ldr	r3, [r7, #16]
 8019e6a:	695a      	ldr	r2, [r3, #20]
 8019e6c:	693b      	ldr	r3, [r7, #16]
 8019e6e:	699b      	ldr	r3, [r3, #24]
 8019e70:	3b02      	subs	r3, #2
 8019e72:	429a      	cmp	r2, r3
 8019e74:	d804      	bhi.n	8019e80 <create_chain+0x106>
 8019e76:	693b      	ldr	r3, [r7, #16]
 8019e78:	695b      	ldr	r3, [r3, #20]
 8019e7a:	1e5a      	subs	r2, r3, #1
 8019e7c:	693b      	ldr	r3, [r7, #16]
 8019e7e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8019e80:	693b      	ldr	r3, [r7, #16]
 8019e82:	791b      	ldrb	r3, [r3, #4]
 8019e84:	f043 0301 	orr.w	r3, r3, #1
 8019e88:	b2da      	uxtb	r2, r3
 8019e8a:	693b      	ldr	r3, [r7, #16]
 8019e8c:	711a      	strb	r2, [r3, #4]
 8019e8e:	e007      	b.n	8019ea0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8019e90:	7dfb      	ldrb	r3, [r7, #23]
 8019e92:	2b01      	cmp	r3, #1
 8019e94:	d102      	bne.n	8019e9c <create_chain+0x122>
 8019e96:	f04f 33ff 	mov.w	r3, #4294967295
 8019e9a:	e000      	b.n	8019e9e <create_chain+0x124>
 8019e9c:	2301      	movs	r3, #1
 8019e9e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8019ea0:	69fb      	ldr	r3, [r7, #28]
}
 8019ea2:	4618      	mov	r0, r3
 8019ea4:	3720      	adds	r7, #32
 8019ea6:	46bd      	mov	sp, r7
 8019ea8:	bd80      	pop	{r7, pc}

08019eaa <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8019eaa:	b480      	push	{r7}
 8019eac:	b087      	sub	sp, #28
 8019eae:	af00      	add	r7, sp, #0
 8019eb0:	6078      	str	r0, [r7, #4]
 8019eb2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	681b      	ldr	r3, [r3, #0]
 8019eb8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019ebe:	3304      	adds	r3, #4
 8019ec0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8019ec2:	683b      	ldr	r3, [r7, #0]
 8019ec4:	0a5b      	lsrs	r3, r3, #9
 8019ec6:	68fa      	ldr	r2, [r7, #12]
 8019ec8:	8952      	ldrh	r2, [r2, #10]
 8019eca:	fbb3 f3f2 	udiv	r3, r3, r2
 8019ece:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8019ed0:	693b      	ldr	r3, [r7, #16]
 8019ed2:	1d1a      	adds	r2, r3, #4
 8019ed4:	613a      	str	r2, [r7, #16]
 8019ed6:	681b      	ldr	r3, [r3, #0]
 8019ed8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8019eda:	68bb      	ldr	r3, [r7, #8]
 8019edc:	2b00      	cmp	r3, #0
 8019ede:	d101      	bne.n	8019ee4 <clmt_clust+0x3a>
 8019ee0:	2300      	movs	r3, #0
 8019ee2:	e010      	b.n	8019f06 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8019ee4:	697a      	ldr	r2, [r7, #20]
 8019ee6:	68bb      	ldr	r3, [r7, #8]
 8019ee8:	429a      	cmp	r2, r3
 8019eea:	d307      	bcc.n	8019efc <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8019eec:	697a      	ldr	r2, [r7, #20]
 8019eee:	68bb      	ldr	r3, [r7, #8]
 8019ef0:	1ad3      	subs	r3, r2, r3
 8019ef2:	617b      	str	r3, [r7, #20]
 8019ef4:	693b      	ldr	r3, [r7, #16]
 8019ef6:	3304      	adds	r3, #4
 8019ef8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8019efa:	e7e9      	b.n	8019ed0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8019efc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8019efe:	693b      	ldr	r3, [r7, #16]
 8019f00:	681a      	ldr	r2, [r3, #0]
 8019f02:	697b      	ldr	r3, [r7, #20]
 8019f04:	4413      	add	r3, r2
}
 8019f06:	4618      	mov	r0, r3
 8019f08:	371c      	adds	r7, #28
 8019f0a:	46bd      	mov	sp, r7
 8019f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f10:	4770      	bx	lr

08019f12 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8019f12:	b580      	push	{r7, lr}
 8019f14:	b086      	sub	sp, #24
 8019f16:	af00      	add	r7, sp, #0
 8019f18:	6078      	str	r0, [r7, #4]
 8019f1a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	681b      	ldr	r3, [r3, #0]
 8019f20:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8019f22:	683b      	ldr	r3, [r7, #0]
 8019f24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8019f28:	d204      	bcs.n	8019f34 <dir_sdi+0x22>
 8019f2a:	683b      	ldr	r3, [r7, #0]
 8019f2c:	f003 031f 	and.w	r3, r3, #31
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	d001      	beq.n	8019f38 <dir_sdi+0x26>
		return FR_INT_ERR;
 8019f34:	2302      	movs	r3, #2
 8019f36:	e063      	b.n	801a000 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8019f38:	687b      	ldr	r3, [r7, #4]
 8019f3a:	683a      	ldr	r2, [r7, #0]
 8019f3c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	689b      	ldr	r3, [r3, #8]
 8019f42:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8019f44:	697b      	ldr	r3, [r7, #20]
 8019f46:	2b00      	cmp	r3, #0
 8019f48:	d106      	bne.n	8019f58 <dir_sdi+0x46>
 8019f4a:	693b      	ldr	r3, [r7, #16]
 8019f4c:	781b      	ldrb	r3, [r3, #0]
 8019f4e:	2b02      	cmp	r3, #2
 8019f50:	d902      	bls.n	8019f58 <dir_sdi+0x46>
		clst = fs->dirbase;
 8019f52:	693b      	ldr	r3, [r7, #16]
 8019f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019f56:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8019f58:	697b      	ldr	r3, [r7, #20]
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	d10c      	bne.n	8019f78 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8019f5e:	683b      	ldr	r3, [r7, #0]
 8019f60:	095b      	lsrs	r3, r3, #5
 8019f62:	693a      	ldr	r2, [r7, #16]
 8019f64:	8912      	ldrh	r2, [r2, #8]
 8019f66:	4293      	cmp	r3, r2
 8019f68:	d301      	bcc.n	8019f6e <dir_sdi+0x5c>
 8019f6a:	2302      	movs	r3, #2
 8019f6c:	e048      	b.n	801a000 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8019f6e:	693b      	ldr	r3, [r7, #16]
 8019f70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8019f72:	687b      	ldr	r3, [r7, #4]
 8019f74:	61da      	str	r2, [r3, #28]
 8019f76:	e029      	b.n	8019fcc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8019f78:	693b      	ldr	r3, [r7, #16]
 8019f7a:	895b      	ldrh	r3, [r3, #10]
 8019f7c:	025b      	lsls	r3, r3, #9
 8019f7e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8019f80:	e019      	b.n	8019fb6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	6979      	ldr	r1, [r7, #20]
 8019f86:	4618      	mov	r0, r3
 8019f88:	f7ff fd01 	bl	801998e <get_fat>
 8019f8c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8019f8e:	697b      	ldr	r3, [r7, #20]
 8019f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019f94:	d101      	bne.n	8019f9a <dir_sdi+0x88>
 8019f96:	2301      	movs	r3, #1
 8019f98:	e032      	b.n	801a000 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8019f9a:	697b      	ldr	r3, [r7, #20]
 8019f9c:	2b01      	cmp	r3, #1
 8019f9e:	d904      	bls.n	8019faa <dir_sdi+0x98>
 8019fa0:	693b      	ldr	r3, [r7, #16]
 8019fa2:	699b      	ldr	r3, [r3, #24]
 8019fa4:	697a      	ldr	r2, [r7, #20]
 8019fa6:	429a      	cmp	r2, r3
 8019fa8:	d301      	bcc.n	8019fae <dir_sdi+0x9c>
 8019faa:	2302      	movs	r3, #2
 8019fac:	e028      	b.n	801a000 <dir_sdi+0xee>
			ofs -= csz;
 8019fae:	683a      	ldr	r2, [r7, #0]
 8019fb0:	68fb      	ldr	r3, [r7, #12]
 8019fb2:	1ad3      	subs	r3, r2, r3
 8019fb4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8019fb6:	683a      	ldr	r2, [r7, #0]
 8019fb8:	68fb      	ldr	r3, [r7, #12]
 8019fba:	429a      	cmp	r2, r3
 8019fbc:	d2e1      	bcs.n	8019f82 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8019fbe:	6979      	ldr	r1, [r7, #20]
 8019fc0:	6938      	ldr	r0, [r7, #16]
 8019fc2:	f7ff fcc5 	bl	8019950 <clust2sect>
 8019fc6:	4602      	mov	r2, r0
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	697a      	ldr	r2, [r7, #20]
 8019fd0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8019fd2:	687b      	ldr	r3, [r7, #4]
 8019fd4:	69db      	ldr	r3, [r3, #28]
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	d101      	bne.n	8019fde <dir_sdi+0xcc>
 8019fda:	2302      	movs	r3, #2
 8019fdc:	e010      	b.n	801a000 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	69da      	ldr	r2, [r3, #28]
 8019fe2:	683b      	ldr	r3, [r7, #0]
 8019fe4:	0a5b      	lsrs	r3, r3, #9
 8019fe6:	441a      	add	r2, r3
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8019fec:	693b      	ldr	r3, [r7, #16]
 8019fee:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019ff2:	683b      	ldr	r3, [r7, #0]
 8019ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019ff8:	441a      	add	r2, r3
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8019ffe:	2300      	movs	r3, #0
}
 801a000:	4618      	mov	r0, r3
 801a002:	3718      	adds	r7, #24
 801a004:	46bd      	mov	sp, r7
 801a006:	bd80      	pop	{r7, pc}

0801a008 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801a008:	b580      	push	{r7, lr}
 801a00a:	b086      	sub	sp, #24
 801a00c:	af00      	add	r7, sp, #0
 801a00e:	6078      	str	r0, [r7, #4]
 801a010:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	681b      	ldr	r3, [r3, #0]
 801a016:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801a018:	687b      	ldr	r3, [r7, #4]
 801a01a:	695b      	ldr	r3, [r3, #20]
 801a01c:	3320      	adds	r3, #32
 801a01e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801a020:	687b      	ldr	r3, [r7, #4]
 801a022:	69db      	ldr	r3, [r3, #28]
 801a024:	2b00      	cmp	r3, #0
 801a026:	d003      	beq.n	801a030 <dir_next+0x28>
 801a028:	68bb      	ldr	r3, [r7, #8]
 801a02a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801a02e:	d301      	bcc.n	801a034 <dir_next+0x2c>
 801a030:	2304      	movs	r3, #4
 801a032:	e0aa      	b.n	801a18a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801a034:	68bb      	ldr	r3, [r7, #8]
 801a036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	f040 8098 	bne.w	801a170 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	69db      	ldr	r3, [r3, #28]
 801a044:	1c5a      	adds	r2, r3, #1
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	699b      	ldr	r3, [r3, #24]
 801a04e:	2b00      	cmp	r3, #0
 801a050:	d10b      	bne.n	801a06a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801a052:	68bb      	ldr	r3, [r7, #8]
 801a054:	095b      	lsrs	r3, r3, #5
 801a056:	68fa      	ldr	r2, [r7, #12]
 801a058:	8912      	ldrh	r2, [r2, #8]
 801a05a:	4293      	cmp	r3, r2
 801a05c:	f0c0 8088 	bcc.w	801a170 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801a060:	687b      	ldr	r3, [r7, #4]
 801a062:	2200      	movs	r2, #0
 801a064:	61da      	str	r2, [r3, #28]
 801a066:	2304      	movs	r3, #4
 801a068:	e08f      	b.n	801a18a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801a06a:	68bb      	ldr	r3, [r7, #8]
 801a06c:	0a5b      	lsrs	r3, r3, #9
 801a06e:	68fa      	ldr	r2, [r7, #12]
 801a070:	8952      	ldrh	r2, [r2, #10]
 801a072:	3a01      	subs	r2, #1
 801a074:	4013      	ands	r3, r2
 801a076:	2b00      	cmp	r3, #0
 801a078:	d17a      	bne.n	801a170 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801a07a:	687a      	ldr	r2, [r7, #4]
 801a07c:	687b      	ldr	r3, [r7, #4]
 801a07e:	699b      	ldr	r3, [r3, #24]
 801a080:	4619      	mov	r1, r3
 801a082:	4610      	mov	r0, r2
 801a084:	f7ff fc83 	bl	801998e <get_fat>
 801a088:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801a08a:	697b      	ldr	r3, [r7, #20]
 801a08c:	2b01      	cmp	r3, #1
 801a08e:	d801      	bhi.n	801a094 <dir_next+0x8c>
 801a090:	2302      	movs	r3, #2
 801a092:	e07a      	b.n	801a18a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801a094:	697b      	ldr	r3, [r7, #20]
 801a096:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a09a:	d101      	bne.n	801a0a0 <dir_next+0x98>
 801a09c:	2301      	movs	r3, #1
 801a09e:	e074      	b.n	801a18a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801a0a0:	68fb      	ldr	r3, [r7, #12]
 801a0a2:	699b      	ldr	r3, [r3, #24]
 801a0a4:	697a      	ldr	r2, [r7, #20]
 801a0a6:	429a      	cmp	r2, r3
 801a0a8:	d358      	bcc.n	801a15c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801a0aa:	683b      	ldr	r3, [r7, #0]
 801a0ac:	2b00      	cmp	r3, #0
 801a0ae:	d104      	bne.n	801a0ba <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	2200      	movs	r2, #0
 801a0b4:	61da      	str	r2, [r3, #28]
 801a0b6:	2304      	movs	r3, #4
 801a0b8:	e067      	b.n	801a18a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801a0ba:	687a      	ldr	r2, [r7, #4]
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	699b      	ldr	r3, [r3, #24]
 801a0c0:	4619      	mov	r1, r3
 801a0c2:	4610      	mov	r0, r2
 801a0c4:	f7ff fe59 	bl	8019d7a <create_chain>
 801a0c8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801a0ca:	697b      	ldr	r3, [r7, #20]
 801a0cc:	2b00      	cmp	r3, #0
 801a0ce:	d101      	bne.n	801a0d4 <dir_next+0xcc>
 801a0d0:	2307      	movs	r3, #7
 801a0d2:	e05a      	b.n	801a18a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801a0d4:	697b      	ldr	r3, [r7, #20]
 801a0d6:	2b01      	cmp	r3, #1
 801a0d8:	d101      	bne.n	801a0de <dir_next+0xd6>
 801a0da:	2302      	movs	r3, #2
 801a0dc:	e055      	b.n	801a18a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801a0de:	697b      	ldr	r3, [r7, #20]
 801a0e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a0e4:	d101      	bne.n	801a0ea <dir_next+0xe2>
 801a0e6:	2301      	movs	r3, #1
 801a0e8:	e04f      	b.n	801a18a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801a0ea:	68f8      	ldr	r0, [r7, #12]
 801a0ec:	f7ff fb50 	bl	8019790 <sync_window>
 801a0f0:	4603      	mov	r3, r0
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	d001      	beq.n	801a0fa <dir_next+0xf2>
 801a0f6:	2301      	movs	r3, #1
 801a0f8:	e047      	b.n	801a18a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801a0fa:	68fb      	ldr	r3, [r7, #12]
 801a0fc:	3334      	adds	r3, #52	@ 0x34
 801a0fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a102:	2100      	movs	r1, #0
 801a104:	4618      	mov	r0, r3
 801a106:	f7ff f97a 	bl	80193fe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801a10a:	2300      	movs	r3, #0
 801a10c:	613b      	str	r3, [r7, #16]
 801a10e:	6979      	ldr	r1, [r7, #20]
 801a110:	68f8      	ldr	r0, [r7, #12]
 801a112:	f7ff fc1d 	bl	8019950 <clust2sect>
 801a116:	4602      	mov	r2, r0
 801a118:	68fb      	ldr	r3, [r7, #12]
 801a11a:	631a      	str	r2, [r3, #48]	@ 0x30
 801a11c:	e012      	b.n	801a144 <dir_next+0x13c>
						fs->wflag = 1;
 801a11e:	68fb      	ldr	r3, [r7, #12]
 801a120:	2201      	movs	r2, #1
 801a122:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801a124:	68f8      	ldr	r0, [r7, #12]
 801a126:	f7ff fb33 	bl	8019790 <sync_window>
 801a12a:	4603      	mov	r3, r0
 801a12c:	2b00      	cmp	r3, #0
 801a12e:	d001      	beq.n	801a134 <dir_next+0x12c>
 801a130:	2301      	movs	r3, #1
 801a132:	e02a      	b.n	801a18a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801a134:	693b      	ldr	r3, [r7, #16]
 801a136:	3301      	adds	r3, #1
 801a138:	613b      	str	r3, [r7, #16]
 801a13a:	68fb      	ldr	r3, [r7, #12]
 801a13c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a13e:	1c5a      	adds	r2, r3, #1
 801a140:	68fb      	ldr	r3, [r7, #12]
 801a142:	631a      	str	r2, [r3, #48]	@ 0x30
 801a144:	68fb      	ldr	r3, [r7, #12]
 801a146:	895b      	ldrh	r3, [r3, #10]
 801a148:	461a      	mov	r2, r3
 801a14a:	693b      	ldr	r3, [r7, #16]
 801a14c:	4293      	cmp	r3, r2
 801a14e:	d3e6      	bcc.n	801a11e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801a150:	68fb      	ldr	r3, [r7, #12]
 801a152:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801a154:	693b      	ldr	r3, [r7, #16]
 801a156:	1ad2      	subs	r2, r2, r3
 801a158:	68fb      	ldr	r3, [r7, #12]
 801a15a:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801a15c:	687b      	ldr	r3, [r7, #4]
 801a15e:	697a      	ldr	r2, [r7, #20]
 801a160:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801a162:	6979      	ldr	r1, [r7, #20]
 801a164:	68f8      	ldr	r0, [r7, #12]
 801a166:	f7ff fbf3 	bl	8019950 <clust2sect>
 801a16a:	4602      	mov	r2, r0
 801a16c:	687b      	ldr	r3, [r7, #4]
 801a16e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	68ba      	ldr	r2, [r7, #8]
 801a174:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801a176:	68fb      	ldr	r3, [r7, #12]
 801a178:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801a17c:	68bb      	ldr	r3, [r7, #8]
 801a17e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a182:	441a      	add	r2, r3
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801a188:	2300      	movs	r3, #0
}
 801a18a:	4618      	mov	r0, r3
 801a18c:	3718      	adds	r7, #24
 801a18e:	46bd      	mov	sp, r7
 801a190:	bd80      	pop	{r7, pc}

0801a192 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801a192:	b580      	push	{r7, lr}
 801a194:	b086      	sub	sp, #24
 801a196:	af00      	add	r7, sp, #0
 801a198:	6078      	str	r0, [r7, #4]
 801a19a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801a19c:	687b      	ldr	r3, [r7, #4]
 801a19e:	681b      	ldr	r3, [r3, #0]
 801a1a0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801a1a2:	2100      	movs	r1, #0
 801a1a4:	6878      	ldr	r0, [r7, #4]
 801a1a6:	f7ff feb4 	bl	8019f12 <dir_sdi>
 801a1aa:	4603      	mov	r3, r0
 801a1ac:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801a1ae:	7dfb      	ldrb	r3, [r7, #23]
 801a1b0:	2b00      	cmp	r3, #0
 801a1b2:	d12b      	bne.n	801a20c <dir_alloc+0x7a>
		n = 0;
 801a1b4:	2300      	movs	r3, #0
 801a1b6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801a1b8:	687b      	ldr	r3, [r7, #4]
 801a1ba:	69db      	ldr	r3, [r3, #28]
 801a1bc:	4619      	mov	r1, r3
 801a1be:	68f8      	ldr	r0, [r7, #12]
 801a1c0:	f7ff fb2a 	bl	8019818 <move_window>
 801a1c4:	4603      	mov	r3, r0
 801a1c6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801a1c8:	7dfb      	ldrb	r3, [r7, #23]
 801a1ca:	2b00      	cmp	r3, #0
 801a1cc:	d11d      	bne.n	801a20a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801a1ce:	687b      	ldr	r3, [r7, #4]
 801a1d0:	6a1b      	ldr	r3, [r3, #32]
 801a1d2:	781b      	ldrb	r3, [r3, #0]
 801a1d4:	2be5      	cmp	r3, #229	@ 0xe5
 801a1d6:	d004      	beq.n	801a1e2 <dir_alloc+0x50>
 801a1d8:	687b      	ldr	r3, [r7, #4]
 801a1da:	6a1b      	ldr	r3, [r3, #32]
 801a1dc:	781b      	ldrb	r3, [r3, #0]
 801a1de:	2b00      	cmp	r3, #0
 801a1e0:	d107      	bne.n	801a1f2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801a1e2:	693b      	ldr	r3, [r7, #16]
 801a1e4:	3301      	adds	r3, #1
 801a1e6:	613b      	str	r3, [r7, #16]
 801a1e8:	693a      	ldr	r2, [r7, #16]
 801a1ea:	683b      	ldr	r3, [r7, #0]
 801a1ec:	429a      	cmp	r2, r3
 801a1ee:	d102      	bne.n	801a1f6 <dir_alloc+0x64>
 801a1f0:	e00c      	b.n	801a20c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801a1f2:	2300      	movs	r3, #0
 801a1f4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801a1f6:	2101      	movs	r1, #1
 801a1f8:	6878      	ldr	r0, [r7, #4]
 801a1fa:	f7ff ff05 	bl	801a008 <dir_next>
 801a1fe:	4603      	mov	r3, r0
 801a200:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801a202:	7dfb      	ldrb	r3, [r7, #23]
 801a204:	2b00      	cmp	r3, #0
 801a206:	d0d7      	beq.n	801a1b8 <dir_alloc+0x26>
 801a208:	e000      	b.n	801a20c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801a20a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801a20c:	7dfb      	ldrb	r3, [r7, #23]
 801a20e:	2b04      	cmp	r3, #4
 801a210:	d101      	bne.n	801a216 <dir_alloc+0x84>
 801a212:	2307      	movs	r3, #7
 801a214:	75fb      	strb	r3, [r7, #23]
	return res;
 801a216:	7dfb      	ldrb	r3, [r7, #23]
}
 801a218:	4618      	mov	r0, r3
 801a21a:	3718      	adds	r7, #24
 801a21c:	46bd      	mov	sp, r7
 801a21e:	bd80      	pop	{r7, pc}

0801a220 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801a220:	b580      	push	{r7, lr}
 801a222:	b084      	sub	sp, #16
 801a224:	af00      	add	r7, sp, #0
 801a226:	6078      	str	r0, [r7, #4]
 801a228:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801a22a:	683b      	ldr	r3, [r7, #0]
 801a22c:	331a      	adds	r3, #26
 801a22e:	4618      	mov	r0, r3
 801a230:	f7ff f842 	bl	80192b8 <ld_word>
 801a234:	4603      	mov	r3, r0
 801a236:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	781b      	ldrb	r3, [r3, #0]
 801a23c:	2b03      	cmp	r3, #3
 801a23e:	d109      	bne.n	801a254 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801a240:	683b      	ldr	r3, [r7, #0]
 801a242:	3314      	adds	r3, #20
 801a244:	4618      	mov	r0, r3
 801a246:	f7ff f837 	bl	80192b8 <ld_word>
 801a24a:	4603      	mov	r3, r0
 801a24c:	041b      	lsls	r3, r3, #16
 801a24e:	68fa      	ldr	r2, [r7, #12]
 801a250:	4313      	orrs	r3, r2
 801a252:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801a254:	68fb      	ldr	r3, [r7, #12]
}
 801a256:	4618      	mov	r0, r3
 801a258:	3710      	adds	r7, #16
 801a25a:	46bd      	mov	sp, r7
 801a25c:	bd80      	pop	{r7, pc}

0801a25e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801a25e:	b580      	push	{r7, lr}
 801a260:	b084      	sub	sp, #16
 801a262:	af00      	add	r7, sp, #0
 801a264:	60f8      	str	r0, [r7, #12]
 801a266:	60b9      	str	r1, [r7, #8]
 801a268:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801a26a:	68bb      	ldr	r3, [r7, #8]
 801a26c:	331a      	adds	r3, #26
 801a26e:	687a      	ldr	r2, [r7, #4]
 801a270:	b292      	uxth	r2, r2
 801a272:	4611      	mov	r1, r2
 801a274:	4618      	mov	r0, r3
 801a276:	f7ff f85a 	bl	801932e <st_word>
	if (fs->fs_type == FS_FAT32) {
 801a27a:	68fb      	ldr	r3, [r7, #12]
 801a27c:	781b      	ldrb	r3, [r3, #0]
 801a27e:	2b03      	cmp	r3, #3
 801a280:	d109      	bne.n	801a296 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801a282:	68bb      	ldr	r3, [r7, #8]
 801a284:	f103 0214 	add.w	r2, r3, #20
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	0c1b      	lsrs	r3, r3, #16
 801a28c:	b29b      	uxth	r3, r3
 801a28e:	4619      	mov	r1, r3
 801a290:	4610      	mov	r0, r2
 801a292:	f7ff f84c 	bl	801932e <st_word>
	}
}
 801a296:	bf00      	nop
 801a298:	3710      	adds	r7, #16
 801a29a:	46bd      	mov	sp, r7
 801a29c:	bd80      	pop	{r7, pc}
	...

0801a2a0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801a2a0:	b590      	push	{r4, r7, lr}
 801a2a2:	b087      	sub	sp, #28
 801a2a4:	af00      	add	r7, sp, #0
 801a2a6:	6078      	str	r0, [r7, #4]
 801a2a8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801a2aa:	683b      	ldr	r3, [r7, #0]
 801a2ac:	331a      	adds	r3, #26
 801a2ae:	4618      	mov	r0, r3
 801a2b0:	f7ff f802 	bl	80192b8 <ld_word>
 801a2b4:	4603      	mov	r3, r0
 801a2b6:	2b00      	cmp	r3, #0
 801a2b8:	d001      	beq.n	801a2be <cmp_lfn+0x1e>
 801a2ba:	2300      	movs	r3, #0
 801a2bc:	e059      	b.n	801a372 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801a2be:	683b      	ldr	r3, [r7, #0]
 801a2c0:	781b      	ldrb	r3, [r3, #0]
 801a2c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a2c6:	1e5a      	subs	r2, r3, #1
 801a2c8:	4613      	mov	r3, r2
 801a2ca:	005b      	lsls	r3, r3, #1
 801a2cc:	4413      	add	r3, r2
 801a2ce:	009b      	lsls	r3, r3, #2
 801a2d0:	4413      	add	r3, r2
 801a2d2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801a2d4:	2301      	movs	r3, #1
 801a2d6:	81fb      	strh	r3, [r7, #14]
 801a2d8:	2300      	movs	r3, #0
 801a2da:	613b      	str	r3, [r7, #16]
 801a2dc:	e033      	b.n	801a346 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801a2de:	4a27      	ldr	r2, [pc, #156]	@ (801a37c <cmp_lfn+0xdc>)
 801a2e0:	693b      	ldr	r3, [r7, #16]
 801a2e2:	4413      	add	r3, r2
 801a2e4:	781b      	ldrb	r3, [r3, #0]
 801a2e6:	461a      	mov	r2, r3
 801a2e8:	683b      	ldr	r3, [r7, #0]
 801a2ea:	4413      	add	r3, r2
 801a2ec:	4618      	mov	r0, r3
 801a2ee:	f7fe ffe3 	bl	80192b8 <ld_word>
 801a2f2:	4603      	mov	r3, r0
 801a2f4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801a2f6:	89fb      	ldrh	r3, [r7, #14]
 801a2f8:	2b00      	cmp	r3, #0
 801a2fa:	d01a      	beq.n	801a332 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801a2fc:	697b      	ldr	r3, [r7, #20]
 801a2fe:	2bfe      	cmp	r3, #254	@ 0xfe
 801a300:	d812      	bhi.n	801a328 <cmp_lfn+0x88>
 801a302:	89bb      	ldrh	r3, [r7, #12]
 801a304:	4618      	mov	r0, r3
 801a306:	f001 fe21 	bl	801bf4c <ff_wtoupper>
 801a30a:	4603      	mov	r3, r0
 801a30c:	461c      	mov	r4, r3
 801a30e:	697b      	ldr	r3, [r7, #20]
 801a310:	1c5a      	adds	r2, r3, #1
 801a312:	617a      	str	r2, [r7, #20]
 801a314:	005b      	lsls	r3, r3, #1
 801a316:	687a      	ldr	r2, [r7, #4]
 801a318:	4413      	add	r3, r2
 801a31a:	881b      	ldrh	r3, [r3, #0]
 801a31c:	4618      	mov	r0, r3
 801a31e:	f001 fe15 	bl	801bf4c <ff_wtoupper>
 801a322:	4603      	mov	r3, r0
 801a324:	429c      	cmp	r4, r3
 801a326:	d001      	beq.n	801a32c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801a328:	2300      	movs	r3, #0
 801a32a:	e022      	b.n	801a372 <cmp_lfn+0xd2>
			}
			wc = uc;
 801a32c:	89bb      	ldrh	r3, [r7, #12]
 801a32e:	81fb      	strh	r3, [r7, #14]
 801a330:	e006      	b.n	801a340 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801a332:	89bb      	ldrh	r3, [r7, #12]
 801a334:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a338:	4293      	cmp	r3, r2
 801a33a:	d001      	beq.n	801a340 <cmp_lfn+0xa0>
 801a33c:	2300      	movs	r3, #0
 801a33e:	e018      	b.n	801a372 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801a340:	693b      	ldr	r3, [r7, #16]
 801a342:	3301      	adds	r3, #1
 801a344:	613b      	str	r3, [r7, #16]
 801a346:	693b      	ldr	r3, [r7, #16]
 801a348:	2b0c      	cmp	r3, #12
 801a34a:	d9c8      	bls.n	801a2de <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801a34c:	683b      	ldr	r3, [r7, #0]
 801a34e:	781b      	ldrb	r3, [r3, #0]
 801a350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a354:	2b00      	cmp	r3, #0
 801a356:	d00b      	beq.n	801a370 <cmp_lfn+0xd0>
 801a358:	89fb      	ldrh	r3, [r7, #14]
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	d008      	beq.n	801a370 <cmp_lfn+0xd0>
 801a35e:	697b      	ldr	r3, [r7, #20]
 801a360:	005b      	lsls	r3, r3, #1
 801a362:	687a      	ldr	r2, [r7, #4]
 801a364:	4413      	add	r3, r2
 801a366:	881b      	ldrh	r3, [r3, #0]
 801a368:	2b00      	cmp	r3, #0
 801a36a:	d001      	beq.n	801a370 <cmp_lfn+0xd0>
 801a36c:	2300      	movs	r3, #0
 801a36e:	e000      	b.n	801a372 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801a370:	2301      	movs	r3, #1
}
 801a372:	4618      	mov	r0, r3
 801a374:	371c      	adds	r7, #28
 801a376:	46bd      	mov	sp, r7
 801a378:	bd90      	pop	{r4, r7, pc}
 801a37a:	bf00      	nop
 801a37c:	080251cc 	.word	0x080251cc

0801a380 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801a380:	b580      	push	{r7, lr}
 801a382:	b088      	sub	sp, #32
 801a384:	af00      	add	r7, sp, #0
 801a386:	60f8      	str	r0, [r7, #12]
 801a388:	60b9      	str	r1, [r7, #8]
 801a38a:	4611      	mov	r1, r2
 801a38c:	461a      	mov	r2, r3
 801a38e:	460b      	mov	r3, r1
 801a390:	71fb      	strb	r3, [r7, #7]
 801a392:	4613      	mov	r3, r2
 801a394:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801a396:	68bb      	ldr	r3, [r7, #8]
 801a398:	330d      	adds	r3, #13
 801a39a:	79ba      	ldrb	r2, [r7, #6]
 801a39c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801a39e:	68bb      	ldr	r3, [r7, #8]
 801a3a0:	330b      	adds	r3, #11
 801a3a2:	220f      	movs	r2, #15
 801a3a4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801a3a6:	68bb      	ldr	r3, [r7, #8]
 801a3a8:	330c      	adds	r3, #12
 801a3aa:	2200      	movs	r2, #0
 801a3ac:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801a3ae:	68bb      	ldr	r3, [r7, #8]
 801a3b0:	331a      	adds	r3, #26
 801a3b2:	2100      	movs	r1, #0
 801a3b4:	4618      	mov	r0, r3
 801a3b6:	f7fe ffba 	bl	801932e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801a3ba:	79fb      	ldrb	r3, [r7, #7]
 801a3bc:	1e5a      	subs	r2, r3, #1
 801a3be:	4613      	mov	r3, r2
 801a3c0:	005b      	lsls	r3, r3, #1
 801a3c2:	4413      	add	r3, r2
 801a3c4:	009b      	lsls	r3, r3, #2
 801a3c6:	4413      	add	r3, r2
 801a3c8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801a3ca:	2300      	movs	r3, #0
 801a3cc:	82fb      	strh	r3, [r7, #22]
 801a3ce:	2300      	movs	r3, #0
 801a3d0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801a3d2:	8afb      	ldrh	r3, [r7, #22]
 801a3d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a3d8:	4293      	cmp	r3, r2
 801a3da:	d007      	beq.n	801a3ec <put_lfn+0x6c>
 801a3dc:	69fb      	ldr	r3, [r7, #28]
 801a3de:	1c5a      	adds	r2, r3, #1
 801a3e0:	61fa      	str	r2, [r7, #28]
 801a3e2:	005b      	lsls	r3, r3, #1
 801a3e4:	68fa      	ldr	r2, [r7, #12]
 801a3e6:	4413      	add	r3, r2
 801a3e8:	881b      	ldrh	r3, [r3, #0]
 801a3ea:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801a3ec:	4a17      	ldr	r2, [pc, #92]	@ (801a44c <put_lfn+0xcc>)
 801a3ee:	69bb      	ldr	r3, [r7, #24]
 801a3f0:	4413      	add	r3, r2
 801a3f2:	781b      	ldrb	r3, [r3, #0]
 801a3f4:	461a      	mov	r2, r3
 801a3f6:	68bb      	ldr	r3, [r7, #8]
 801a3f8:	4413      	add	r3, r2
 801a3fa:	8afa      	ldrh	r2, [r7, #22]
 801a3fc:	4611      	mov	r1, r2
 801a3fe:	4618      	mov	r0, r3
 801a400:	f7fe ff95 	bl	801932e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801a404:	8afb      	ldrh	r3, [r7, #22]
 801a406:	2b00      	cmp	r3, #0
 801a408:	d102      	bne.n	801a410 <put_lfn+0x90>
 801a40a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a40e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801a410:	69bb      	ldr	r3, [r7, #24]
 801a412:	3301      	adds	r3, #1
 801a414:	61bb      	str	r3, [r7, #24]
 801a416:	69bb      	ldr	r3, [r7, #24]
 801a418:	2b0c      	cmp	r3, #12
 801a41a:	d9da      	bls.n	801a3d2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801a41c:	8afb      	ldrh	r3, [r7, #22]
 801a41e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a422:	4293      	cmp	r3, r2
 801a424:	d006      	beq.n	801a434 <put_lfn+0xb4>
 801a426:	69fb      	ldr	r3, [r7, #28]
 801a428:	005b      	lsls	r3, r3, #1
 801a42a:	68fa      	ldr	r2, [r7, #12]
 801a42c:	4413      	add	r3, r2
 801a42e:	881b      	ldrh	r3, [r3, #0]
 801a430:	2b00      	cmp	r3, #0
 801a432:	d103      	bne.n	801a43c <put_lfn+0xbc>
 801a434:	79fb      	ldrb	r3, [r7, #7]
 801a436:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a43a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801a43c:	68bb      	ldr	r3, [r7, #8]
 801a43e:	79fa      	ldrb	r2, [r7, #7]
 801a440:	701a      	strb	r2, [r3, #0]
}
 801a442:	bf00      	nop
 801a444:	3720      	adds	r7, #32
 801a446:	46bd      	mov	sp, r7
 801a448:	bd80      	pop	{r7, pc}
 801a44a:	bf00      	nop
 801a44c:	080251cc 	.word	0x080251cc

0801a450 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801a450:	b580      	push	{r7, lr}
 801a452:	b08c      	sub	sp, #48	@ 0x30
 801a454:	af00      	add	r7, sp, #0
 801a456:	60f8      	str	r0, [r7, #12]
 801a458:	60b9      	str	r1, [r7, #8]
 801a45a:	607a      	str	r2, [r7, #4]
 801a45c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801a45e:	220b      	movs	r2, #11
 801a460:	68b9      	ldr	r1, [r7, #8]
 801a462:	68f8      	ldr	r0, [r7, #12]
 801a464:	f7fe ffaa 	bl	80193bc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801a468:	683b      	ldr	r3, [r7, #0]
 801a46a:	2b05      	cmp	r3, #5
 801a46c:	d92b      	bls.n	801a4c6 <gen_numname+0x76>
		sr = seq;
 801a46e:	683b      	ldr	r3, [r7, #0]
 801a470:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801a472:	e022      	b.n	801a4ba <gen_numname+0x6a>
			wc = *lfn++;
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	1c9a      	adds	r2, r3, #2
 801a478:	607a      	str	r2, [r7, #4]
 801a47a:	881b      	ldrh	r3, [r3, #0]
 801a47c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801a47e:	2300      	movs	r3, #0
 801a480:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a482:	e017      	b.n	801a4b4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 801a484:	69fb      	ldr	r3, [r7, #28]
 801a486:	005a      	lsls	r2, r3, #1
 801a488:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a48a:	f003 0301 	and.w	r3, r3, #1
 801a48e:	4413      	add	r3, r2
 801a490:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801a492:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a494:	085b      	lsrs	r3, r3, #1
 801a496:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801a498:	69fb      	ldr	r3, [r7, #28]
 801a49a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801a49e:	2b00      	cmp	r3, #0
 801a4a0:	d005      	beq.n	801a4ae <gen_numname+0x5e>
 801a4a2:	69fb      	ldr	r3, [r7, #28]
 801a4a4:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 801a4a8:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 801a4ac:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801a4ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4b0:	3301      	adds	r3, #1
 801a4b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a4b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4b6:	2b0f      	cmp	r3, #15
 801a4b8:	d9e4      	bls.n	801a484 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801a4ba:	687b      	ldr	r3, [r7, #4]
 801a4bc:	881b      	ldrh	r3, [r3, #0]
 801a4be:	2b00      	cmp	r3, #0
 801a4c0:	d1d8      	bne.n	801a474 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801a4c2:	69fb      	ldr	r3, [r7, #28]
 801a4c4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801a4c6:	2307      	movs	r3, #7
 801a4c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801a4ca:	683b      	ldr	r3, [r7, #0]
 801a4cc:	b2db      	uxtb	r3, r3
 801a4ce:	f003 030f 	and.w	r3, r3, #15
 801a4d2:	b2db      	uxtb	r3, r3
 801a4d4:	3330      	adds	r3, #48	@ 0x30
 801a4d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 801a4da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a4de:	2b39      	cmp	r3, #57	@ 0x39
 801a4e0:	d904      	bls.n	801a4ec <gen_numname+0x9c>
 801a4e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a4e6:	3307      	adds	r3, #7
 801a4e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 801a4ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4ee:	1e5a      	subs	r2, r3, #1
 801a4f0:	62ba      	str	r2, [r7, #40]	@ 0x28
 801a4f2:	3330      	adds	r3, #48	@ 0x30
 801a4f4:	443b      	add	r3, r7
 801a4f6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801a4fa:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801a4fe:	683b      	ldr	r3, [r7, #0]
 801a500:	091b      	lsrs	r3, r3, #4
 801a502:	603b      	str	r3, [r7, #0]
	} while (seq);
 801a504:	683b      	ldr	r3, [r7, #0]
 801a506:	2b00      	cmp	r3, #0
 801a508:	d1df      	bne.n	801a4ca <gen_numname+0x7a>
	ns[i] = '~';
 801a50a:	f107 0214 	add.w	r2, r7, #20
 801a50e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a510:	4413      	add	r3, r2
 801a512:	227e      	movs	r2, #126	@ 0x7e
 801a514:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801a516:	2300      	movs	r3, #0
 801a518:	627b      	str	r3, [r7, #36]	@ 0x24
 801a51a:	e002      	b.n	801a522 <gen_numname+0xd2>
 801a51c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a51e:	3301      	adds	r3, #1
 801a520:	627b      	str	r3, [r7, #36]	@ 0x24
 801a522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a526:	429a      	cmp	r2, r3
 801a528:	d205      	bcs.n	801a536 <gen_numname+0xe6>
 801a52a:	68fa      	ldr	r2, [r7, #12]
 801a52c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a52e:	4413      	add	r3, r2
 801a530:	781b      	ldrb	r3, [r3, #0]
 801a532:	2b20      	cmp	r3, #32
 801a534:	d1f2      	bne.n	801a51c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801a536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a538:	2b07      	cmp	r3, #7
 801a53a:	d807      	bhi.n	801a54c <gen_numname+0xfc>
 801a53c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a53e:	1c5a      	adds	r2, r3, #1
 801a540:	62ba      	str	r2, [r7, #40]	@ 0x28
 801a542:	3330      	adds	r3, #48	@ 0x30
 801a544:	443b      	add	r3, r7
 801a546:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801a54a:	e000      	b.n	801a54e <gen_numname+0xfe>
 801a54c:	2120      	movs	r1, #32
 801a54e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a550:	1c5a      	adds	r2, r3, #1
 801a552:	627a      	str	r2, [r7, #36]	@ 0x24
 801a554:	68fa      	ldr	r2, [r7, #12]
 801a556:	4413      	add	r3, r2
 801a558:	460a      	mov	r2, r1
 801a55a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801a55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a55e:	2b07      	cmp	r3, #7
 801a560:	d9e9      	bls.n	801a536 <gen_numname+0xe6>
}
 801a562:	bf00      	nop
 801a564:	bf00      	nop
 801a566:	3730      	adds	r7, #48	@ 0x30
 801a568:	46bd      	mov	sp, r7
 801a56a:	bd80      	pop	{r7, pc}

0801a56c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801a56c:	b480      	push	{r7}
 801a56e:	b085      	sub	sp, #20
 801a570:	af00      	add	r7, sp, #0
 801a572:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801a574:	2300      	movs	r3, #0
 801a576:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801a578:	230b      	movs	r3, #11
 801a57a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801a57c:	7bfb      	ldrb	r3, [r7, #15]
 801a57e:	b2da      	uxtb	r2, r3
 801a580:	0852      	lsrs	r2, r2, #1
 801a582:	01db      	lsls	r3, r3, #7
 801a584:	4313      	orrs	r3, r2
 801a586:	b2da      	uxtb	r2, r3
 801a588:	687b      	ldr	r3, [r7, #4]
 801a58a:	1c59      	adds	r1, r3, #1
 801a58c:	6079      	str	r1, [r7, #4]
 801a58e:	781b      	ldrb	r3, [r3, #0]
 801a590:	4413      	add	r3, r2
 801a592:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801a594:	68bb      	ldr	r3, [r7, #8]
 801a596:	3b01      	subs	r3, #1
 801a598:	60bb      	str	r3, [r7, #8]
 801a59a:	68bb      	ldr	r3, [r7, #8]
 801a59c:	2b00      	cmp	r3, #0
 801a59e:	d1ed      	bne.n	801a57c <sum_sfn+0x10>
	return sum;
 801a5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 801a5a2:	4618      	mov	r0, r3
 801a5a4:	3714      	adds	r7, #20
 801a5a6:	46bd      	mov	sp, r7
 801a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5ac:	4770      	bx	lr

0801a5ae <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801a5ae:	b580      	push	{r7, lr}
 801a5b0:	b086      	sub	sp, #24
 801a5b2:	af00      	add	r7, sp, #0
 801a5b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	681b      	ldr	r3, [r3, #0]
 801a5ba:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801a5bc:	2100      	movs	r1, #0
 801a5be:	6878      	ldr	r0, [r7, #4]
 801a5c0:	f7ff fca7 	bl	8019f12 <dir_sdi>
 801a5c4:	4603      	mov	r3, r0
 801a5c6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801a5c8:	7dfb      	ldrb	r3, [r7, #23]
 801a5ca:	2b00      	cmp	r3, #0
 801a5cc:	d001      	beq.n	801a5d2 <dir_find+0x24>
 801a5ce:	7dfb      	ldrb	r3, [r7, #23]
 801a5d0:	e0a9      	b.n	801a726 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801a5d2:	23ff      	movs	r3, #255	@ 0xff
 801a5d4:	753b      	strb	r3, [r7, #20]
 801a5d6:	7d3b      	ldrb	r3, [r7, #20]
 801a5d8:	757b      	strb	r3, [r7, #21]
 801a5da:	687b      	ldr	r3, [r7, #4]
 801a5dc:	f04f 32ff 	mov.w	r2, #4294967295
 801a5e0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	69db      	ldr	r3, [r3, #28]
 801a5e6:	4619      	mov	r1, r3
 801a5e8:	6938      	ldr	r0, [r7, #16]
 801a5ea:	f7ff f915 	bl	8019818 <move_window>
 801a5ee:	4603      	mov	r3, r0
 801a5f0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801a5f2:	7dfb      	ldrb	r3, [r7, #23]
 801a5f4:	2b00      	cmp	r3, #0
 801a5f6:	f040 8090 	bne.w	801a71a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801a5fa:	687b      	ldr	r3, [r7, #4]
 801a5fc:	6a1b      	ldr	r3, [r3, #32]
 801a5fe:	781b      	ldrb	r3, [r3, #0]
 801a600:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801a602:	7dbb      	ldrb	r3, [r7, #22]
 801a604:	2b00      	cmp	r3, #0
 801a606:	d102      	bne.n	801a60e <dir_find+0x60>
 801a608:	2304      	movs	r3, #4
 801a60a:	75fb      	strb	r3, [r7, #23]
 801a60c:	e08a      	b.n	801a724 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801a60e:	687b      	ldr	r3, [r7, #4]
 801a610:	6a1b      	ldr	r3, [r3, #32]
 801a612:	330b      	adds	r3, #11
 801a614:	781b      	ldrb	r3, [r3, #0]
 801a616:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a61a:	73fb      	strb	r3, [r7, #15]
 801a61c:	687b      	ldr	r3, [r7, #4]
 801a61e:	7bfa      	ldrb	r2, [r7, #15]
 801a620:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801a622:	7dbb      	ldrb	r3, [r7, #22]
 801a624:	2be5      	cmp	r3, #229	@ 0xe5
 801a626:	d007      	beq.n	801a638 <dir_find+0x8a>
 801a628:	7bfb      	ldrb	r3, [r7, #15]
 801a62a:	f003 0308 	and.w	r3, r3, #8
 801a62e:	2b00      	cmp	r3, #0
 801a630:	d009      	beq.n	801a646 <dir_find+0x98>
 801a632:	7bfb      	ldrb	r3, [r7, #15]
 801a634:	2b0f      	cmp	r3, #15
 801a636:	d006      	beq.n	801a646 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801a638:	23ff      	movs	r3, #255	@ 0xff
 801a63a:	757b      	strb	r3, [r7, #21]
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	f04f 32ff 	mov.w	r2, #4294967295
 801a642:	631a      	str	r2, [r3, #48]	@ 0x30
 801a644:	e05e      	b.n	801a704 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801a646:	7bfb      	ldrb	r3, [r7, #15]
 801a648:	2b0f      	cmp	r3, #15
 801a64a:	d136      	bne.n	801a6ba <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801a652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a656:	2b00      	cmp	r3, #0
 801a658:	d154      	bne.n	801a704 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801a65a:	7dbb      	ldrb	r3, [r7, #22]
 801a65c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a660:	2b00      	cmp	r3, #0
 801a662:	d00d      	beq.n	801a680 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801a664:	687b      	ldr	r3, [r7, #4]
 801a666:	6a1b      	ldr	r3, [r3, #32]
 801a668:	7b5b      	ldrb	r3, [r3, #13]
 801a66a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801a66c:	7dbb      	ldrb	r3, [r7, #22]
 801a66e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801a672:	75bb      	strb	r3, [r7, #22]
 801a674:	7dbb      	ldrb	r3, [r7, #22]
 801a676:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801a678:	687b      	ldr	r3, [r7, #4]
 801a67a:	695a      	ldr	r2, [r3, #20]
 801a67c:	687b      	ldr	r3, [r7, #4]
 801a67e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801a680:	7dba      	ldrb	r2, [r7, #22]
 801a682:	7d7b      	ldrb	r3, [r7, #21]
 801a684:	429a      	cmp	r2, r3
 801a686:	d115      	bne.n	801a6b4 <dir_find+0x106>
 801a688:	687b      	ldr	r3, [r7, #4]
 801a68a:	6a1b      	ldr	r3, [r3, #32]
 801a68c:	330d      	adds	r3, #13
 801a68e:	781b      	ldrb	r3, [r3, #0]
 801a690:	7d3a      	ldrb	r2, [r7, #20]
 801a692:	429a      	cmp	r2, r3
 801a694:	d10e      	bne.n	801a6b4 <dir_find+0x106>
 801a696:	693b      	ldr	r3, [r7, #16]
 801a698:	68da      	ldr	r2, [r3, #12]
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	6a1b      	ldr	r3, [r3, #32]
 801a69e:	4619      	mov	r1, r3
 801a6a0:	4610      	mov	r0, r2
 801a6a2:	f7ff fdfd 	bl	801a2a0 <cmp_lfn>
 801a6a6:	4603      	mov	r3, r0
 801a6a8:	2b00      	cmp	r3, #0
 801a6aa:	d003      	beq.n	801a6b4 <dir_find+0x106>
 801a6ac:	7d7b      	ldrb	r3, [r7, #21]
 801a6ae:	3b01      	subs	r3, #1
 801a6b0:	b2db      	uxtb	r3, r3
 801a6b2:	e000      	b.n	801a6b6 <dir_find+0x108>
 801a6b4:	23ff      	movs	r3, #255	@ 0xff
 801a6b6:	757b      	strb	r3, [r7, #21]
 801a6b8:	e024      	b.n	801a704 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801a6ba:	7d7b      	ldrb	r3, [r7, #21]
 801a6bc:	2b00      	cmp	r3, #0
 801a6be:	d109      	bne.n	801a6d4 <dir_find+0x126>
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	6a1b      	ldr	r3, [r3, #32]
 801a6c4:	4618      	mov	r0, r3
 801a6c6:	f7ff ff51 	bl	801a56c <sum_sfn>
 801a6ca:	4603      	mov	r3, r0
 801a6cc:	461a      	mov	r2, r3
 801a6ce:	7d3b      	ldrb	r3, [r7, #20]
 801a6d0:	4293      	cmp	r3, r2
 801a6d2:	d024      	beq.n	801a71e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801a6d4:	687b      	ldr	r3, [r7, #4]
 801a6d6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801a6da:	f003 0301 	and.w	r3, r3, #1
 801a6de:	2b00      	cmp	r3, #0
 801a6e0:	d10a      	bne.n	801a6f8 <dir_find+0x14a>
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	6a18      	ldr	r0, [r3, #32]
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	3324      	adds	r3, #36	@ 0x24
 801a6ea:	220b      	movs	r2, #11
 801a6ec:	4619      	mov	r1, r3
 801a6ee:	f7fe fea1 	bl	8019434 <mem_cmp>
 801a6f2:	4603      	mov	r3, r0
 801a6f4:	2b00      	cmp	r3, #0
 801a6f6:	d014      	beq.n	801a722 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801a6f8:	23ff      	movs	r3, #255	@ 0xff
 801a6fa:	757b      	strb	r3, [r7, #21]
 801a6fc:	687b      	ldr	r3, [r7, #4]
 801a6fe:	f04f 32ff 	mov.w	r2, #4294967295
 801a702:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801a704:	2100      	movs	r1, #0
 801a706:	6878      	ldr	r0, [r7, #4]
 801a708:	f7ff fc7e 	bl	801a008 <dir_next>
 801a70c:	4603      	mov	r3, r0
 801a70e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801a710:	7dfb      	ldrb	r3, [r7, #23]
 801a712:	2b00      	cmp	r3, #0
 801a714:	f43f af65 	beq.w	801a5e2 <dir_find+0x34>
 801a718:	e004      	b.n	801a724 <dir_find+0x176>
		if (res != FR_OK) break;
 801a71a:	bf00      	nop
 801a71c:	e002      	b.n	801a724 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801a71e:	bf00      	nop
 801a720:	e000      	b.n	801a724 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801a722:	bf00      	nop

	return res;
 801a724:	7dfb      	ldrb	r3, [r7, #23]
}
 801a726:	4618      	mov	r0, r3
 801a728:	3718      	adds	r7, #24
 801a72a:	46bd      	mov	sp, r7
 801a72c:	bd80      	pop	{r7, pc}
	...

0801a730 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801a730:	b580      	push	{r7, lr}
 801a732:	b08c      	sub	sp, #48	@ 0x30
 801a734:	af00      	add	r7, sp, #0
 801a736:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801a738:	687b      	ldr	r3, [r7, #4]
 801a73a:	681b      	ldr	r3, [r3, #0]
 801a73c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801a744:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801a748:	2b00      	cmp	r3, #0
 801a74a:	d001      	beq.n	801a750 <dir_register+0x20>
 801a74c:	2306      	movs	r3, #6
 801a74e:	e0e0      	b.n	801a912 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801a750:	2300      	movs	r3, #0
 801a752:	627b      	str	r3, [r7, #36]	@ 0x24
 801a754:	e002      	b.n	801a75c <dir_register+0x2c>
 801a756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a758:	3301      	adds	r3, #1
 801a75a:	627b      	str	r3, [r7, #36]	@ 0x24
 801a75c:	69fb      	ldr	r3, [r7, #28]
 801a75e:	68da      	ldr	r2, [r3, #12]
 801a760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a762:	005b      	lsls	r3, r3, #1
 801a764:	4413      	add	r3, r2
 801a766:	881b      	ldrh	r3, [r3, #0]
 801a768:	2b00      	cmp	r3, #0
 801a76a:	d1f4      	bne.n	801a756 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801a76c:	687b      	ldr	r3, [r7, #4]
 801a76e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801a772:	f107 030c 	add.w	r3, r7, #12
 801a776:	220c      	movs	r2, #12
 801a778:	4618      	mov	r0, r3
 801a77a:	f7fe fe1f 	bl	80193bc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801a77e:	7dfb      	ldrb	r3, [r7, #23]
 801a780:	f003 0301 	and.w	r3, r3, #1
 801a784:	2b00      	cmp	r3, #0
 801a786:	d032      	beq.n	801a7ee <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801a788:	687b      	ldr	r3, [r7, #4]
 801a78a:	2240      	movs	r2, #64	@ 0x40
 801a78c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 801a790:	2301      	movs	r3, #1
 801a792:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a794:	e016      	b.n	801a7c4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801a796:	687b      	ldr	r3, [r7, #4]
 801a798:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 801a79c:	69fb      	ldr	r3, [r7, #28]
 801a79e:	68da      	ldr	r2, [r3, #12]
 801a7a0:	f107 010c 	add.w	r1, r7, #12
 801a7a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7a6:	f7ff fe53 	bl	801a450 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801a7aa:	6878      	ldr	r0, [r7, #4]
 801a7ac:	f7ff feff 	bl	801a5ae <dir_find>
 801a7b0:	4603      	mov	r3, r0
 801a7b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 801a7b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a7ba:	2b00      	cmp	r3, #0
 801a7bc:	d106      	bne.n	801a7cc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801a7be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7c0:	3301      	adds	r3, #1
 801a7c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a7c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7c6:	2b63      	cmp	r3, #99	@ 0x63
 801a7c8:	d9e5      	bls.n	801a796 <dir_register+0x66>
 801a7ca:	e000      	b.n	801a7ce <dir_register+0x9e>
			if (res != FR_OK) break;
 801a7cc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801a7ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7d0:	2b64      	cmp	r3, #100	@ 0x64
 801a7d2:	d101      	bne.n	801a7d8 <dir_register+0xa8>
 801a7d4:	2307      	movs	r3, #7
 801a7d6:	e09c      	b.n	801a912 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801a7d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a7dc:	2b04      	cmp	r3, #4
 801a7de:	d002      	beq.n	801a7e6 <dir_register+0xb6>
 801a7e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a7e4:	e095      	b.n	801a912 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801a7e6:	7dfa      	ldrb	r2, [r7, #23]
 801a7e8:	687b      	ldr	r3, [r7, #4]
 801a7ea:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801a7ee:	7dfb      	ldrb	r3, [r7, #23]
 801a7f0:	f003 0302 	and.w	r3, r3, #2
 801a7f4:	2b00      	cmp	r3, #0
 801a7f6:	d007      	beq.n	801a808 <dir_register+0xd8>
 801a7f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7fa:	330c      	adds	r3, #12
 801a7fc:	4a47      	ldr	r2, [pc, #284]	@ (801a91c <dir_register+0x1ec>)
 801a7fe:	fba2 2303 	umull	r2, r3, r2, r3
 801a802:	089b      	lsrs	r3, r3, #2
 801a804:	3301      	adds	r3, #1
 801a806:	e000      	b.n	801a80a <dir_register+0xda>
 801a808:	2301      	movs	r3, #1
 801a80a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801a80c:	6a39      	ldr	r1, [r7, #32]
 801a80e:	6878      	ldr	r0, [r7, #4]
 801a810:	f7ff fcbf 	bl	801a192 <dir_alloc>
 801a814:	4603      	mov	r3, r0
 801a816:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801a81a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a81e:	2b00      	cmp	r3, #0
 801a820:	d148      	bne.n	801a8b4 <dir_register+0x184>
 801a822:	6a3b      	ldr	r3, [r7, #32]
 801a824:	3b01      	subs	r3, #1
 801a826:	623b      	str	r3, [r7, #32]
 801a828:	6a3b      	ldr	r3, [r7, #32]
 801a82a:	2b00      	cmp	r3, #0
 801a82c:	d042      	beq.n	801a8b4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801a82e:	687b      	ldr	r3, [r7, #4]
 801a830:	695a      	ldr	r2, [r3, #20]
 801a832:	6a3b      	ldr	r3, [r7, #32]
 801a834:	015b      	lsls	r3, r3, #5
 801a836:	1ad3      	subs	r3, r2, r3
 801a838:	4619      	mov	r1, r3
 801a83a:	6878      	ldr	r0, [r7, #4]
 801a83c:	f7ff fb69 	bl	8019f12 <dir_sdi>
 801a840:	4603      	mov	r3, r0
 801a842:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801a846:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a84a:	2b00      	cmp	r3, #0
 801a84c:	d132      	bne.n	801a8b4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801a84e:	687b      	ldr	r3, [r7, #4]
 801a850:	3324      	adds	r3, #36	@ 0x24
 801a852:	4618      	mov	r0, r3
 801a854:	f7ff fe8a 	bl	801a56c <sum_sfn>
 801a858:	4603      	mov	r3, r0
 801a85a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	69db      	ldr	r3, [r3, #28]
 801a860:	4619      	mov	r1, r3
 801a862:	69f8      	ldr	r0, [r7, #28]
 801a864:	f7fe ffd8 	bl	8019818 <move_window>
 801a868:	4603      	mov	r3, r0
 801a86a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 801a86e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a872:	2b00      	cmp	r3, #0
 801a874:	d11d      	bne.n	801a8b2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801a876:	69fb      	ldr	r3, [r7, #28]
 801a878:	68d8      	ldr	r0, [r3, #12]
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	6a19      	ldr	r1, [r3, #32]
 801a87e:	6a3b      	ldr	r3, [r7, #32]
 801a880:	b2da      	uxtb	r2, r3
 801a882:	7efb      	ldrb	r3, [r7, #27]
 801a884:	f7ff fd7c 	bl	801a380 <put_lfn>
				fs->wflag = 1;
 801a888:	69fb      	ldr	r3, [r7, #28]
 801a88a:	2201      	movs	r2, #1
 801a88c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801a88e:	2100      	movs	r1, #0
 801a890:	6878      	ldr	r0, [r7, #4]
 801a892:	f7ff fbb9 	bl	801a008 <dir_next>
 801a896:	4603      	mov	r3, r0
 801a898:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 801a89c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a8a0:	2b00      	cmp	r3, #0
 801a8a2:	d107      	bne.n	801a8b4 <dir_register+0x184>
 801a8a4:	6a3b      	ldr	r3, [r7, #32]
 801a8a6:	3b01      	subs	r3, #1
 801a8a8:	623b      	str	r3, [r7, #32]
 801a8aa:	6a3b      	ldr	r3, [r7, #32]
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	d1d5      	bne.n	801a85c <dir_register+0x12c>
 801a8b0:	e000      	b.n	801a8b4 <dir_register+0x184>
				if (res != FR_OK) break;
 801a8b2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801a8b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a8b8:	2b00      	cmp	r3, #0
 801a8ba:	d128      	bne.n	801a90e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801a8bc:	687b      	ldr	r3, [r7, #4]
 801a8be:	69db      	ldr	r3, [r3, #28]
 801a8c0:	4619      	mov	r1, r3
 801a8c2:	69f8      	ldr	r0, [r7, #28]
 801a8c4:	f7fe ffa8 	bl	8019818 <move_window>
 801a8c8:	4603      	mov	r3, r0
 801a8ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801a8ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a8d2:	2b00      	cmp	r3, #0
 801a8d4:	d11b      	bne.n	801a90e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801a8d6:	687b      	ldr	r3, [r7, #4]
 801a8d8:	6a1b      	ldr	r3, [r3, #32]
 801a8da:	2220      	movs	r2, #32
 801a8dc:	2100      	movs	r1, #0
 801a8de:	4618      	mov	r0, r3
 801a8e0:	f7fe fd8d 	bl	80193fe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	6a18      	ldr	r0, [r3, #32]
 801a8e8:	687b      	ldr	r3, [r7, #4]
 801a8ea:	3324      	adds	r3, #36	@ 0x24
 801a8ec:	220b      	movs	r2, #11
 801a8ee:	4619      	mov	r1, r3
 801a8f0:	f7fe fd64 	bl	80193bc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801a8f4:	687b      	ldr	r3, [r7, #4]
 801a8f6:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 801a8fa:	687b      	ldr	r3, [r7, #4]
 801a8fc:	6a1b      	ldr	r3, [r3, #32]
 801a8fe:	330c      	adds	r3, #12
 801a900:	f002 0218 	and.w	r2, r2, #24
 801a904:	b2d2      	uxtb	r2, r2
 801a906:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801a908:	69fb      	ldr	r3, [r7, #28]
 801a90a:	2201      	movs	r2, #1
 801a90c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801a90e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801a912:	4618      	mov	r0, r3
 801a914:	3730      	adds	r7, #48	@ 0x30
 801a916:	46bd      	mov	sp, r7
 801a918:	bd80      	pop	{r7, pc}
 801a91a:	bf00      	nop
 801a91c:	4ec4ec4f 	.word	0x4ec4ec4f

0801a920 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 801a920:	b580      	push	{r7, lr}
 801a922:	b088      	sub	sp, #32
 801a924:	af00      	add	r7, sp, #0
 801a926:	6078      	str	r0, [r7, #4]
 801a928:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	681b      	ldr	r3, [r3, #0]
 801a92e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 801a930:	683b      	ldr	r3, [r7, #0]
 801a932:	2200      	movs	r2, #0
 801a934:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801a936:	687b      	ldr	r3, [r7, #4]
 801a938:	69db      	ldr	r3, [r3, #28]
 801a93a:	2b00      	cmp	r3, #0
 801a93c:	f000 80ca 	beq.w	801aad4 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 801a940:	687b      	ldr	r3, [r7, #4]
 801a942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a944:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a948:	d032      	beq.n	801a9b0 <get_fileinfo+0x90>
			i = j = 0;
 801a94a:	2300      	movs	r3, #0
 801a94c:	61bb      	str	r3, [r7, #24]
 801a94e:	69bb      	ldr	r3, [r7, #24]
 801a950:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801a952:	e01b      	b.n	801a98c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 801a954:	89fb      	ldrh	r3, [r7, #14]
 801a956:	2100      	movs	r1, #0
 801a958:	4618      	mov	r0, r3
 801a95a:	f001 fabb 	bl	801bed4 <ff_convert>
 801a95e:	4603      	mov	r3, r0
 801a960:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 801a962:	89fb      	ldrh	r3, [r7, #14]
 801a964:	2b00      	cmp	r3, #0
 801a966:	d102      	bne.n	801a96e <get_fileinfo+0x4e>
 801a968:	2300      	movs	r3, #0
 801a96a:	61fb      	str	r3, [r7, #28]
 801a96c:	e01a      	b.n	801a9a4 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 801a96e:	69fb      	ldr	r3, [r7, #28]
 801a970:	2bfe      	cmp	r3, #254	@ 0xfe
 801a972:	d902      	bls.n	801a97a <get_fileinfo+0x5a>
 801a974:	2300      	movs	r3, #0
 801a976:	61fb      	str	r3, [r7, #28]
 801a978:	e014      	b.n	801a9a4 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 801a97a:	69fb      	ldr	r3, [r7, #28]
 801a97c:	1c5a      	adds	r2, r3, #1
 801a97e:	61fa      	str	r2, [r7, #28]
 801a980:	89fa      	ldrh	r2, [r7, #14]
 801a982:	b2d1      	uxtb	r1, r2
 801a984:	683a      	ldr	r2, [r7, #0]
 801a986:	4413      	add	r3, r2
 801a988:	460a      	mov	r2, r1
 801a98a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801a98c:	693b      	ldr	r3, [r7, #16]
 801a98e:	68da      	ldr	r2, [r3, #12]
 801a990:	69bb      	ldr	r3, [r7, #24]
 801a992:	1c59      	adds	r1, r3, #1
 801a994:	61b9      	str	r1, [r7, #24]
 801a996:	005b      	lsls	r3, r3, #1
 801a998:	4413      	add	r3, r2
 801a99a:	881b      	ldrh	r3, [r3, #0]
 801a99c:	81fb      	strh	r3, [r7, #14]
 801a99e:	89fb      	ldrh	r3, [r7, #14]
 801a9a0:	2b00      	cmp	r3, #0
 801a9a2:	d1d7      	bne.n	801a954 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 801a9a4:	683a      	ldr	r2, [r7, #0]
 801a9a6:	69fb      	ldr	r3, [r7, #28]
 801a9a8:	4413      	add	r3, r2
 801a9aa:	3316      	adds	r3, #22
 801a9ac:	2200      	movs	r2, #0
 801a9ae:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 801a9b0:	2300      	movs	r3, #0
 801a9b2:	61bb      	str	r3, [r7, #24]
 801a9b4:	69bb      	ldr	r3, [r7, #24]
 801a9b6:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 801a9b8:	683a      	ldr	r2, [r7, #0]
 801a9ba:	69fb      	ldr	r3, [r7, #28]
 801a9bc:	4413      	add	r3, r2
 801a9be:	3316      	adds	r3, #22
 801a9c0:	781b      	ldrb	r3, [r3, #0]
 801a9c2:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 801a9c4:	e04d      	b.n	801aa62 <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 801a9c6:	687b      	ldr	r3, [r7, #4]
 801a9c8:	6a1a      	ldr	r2, [r3, #32]
 801a9ca:	69fb      	ldr	r3, [r7, #28]
 801a9cc:	1c59      	adds	r1, r3, #1
 801a9ce:	61f9      	str	r1, [r7, #28]
 801a9d0:	4413      	add	r3, r2
 801a9d2:	781b      	ldrb	r3, [r3, #0]
 801a9d4:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 801a9d6:	7dfb      	ldrb	r3, [r7, #23]
 801a9d8:	2b20      	cmp	r3, #32
 801a9da:	d041      	beq.n	801aa60 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801a9dc:	7dfb      	ldrb	r3, [r7, #23]
 801a9de:	2b05      	cmp	r3, #5
 801a9e0:	d101      	bne.n	801a9e6 <get_fileinfo+0xc6>
 801a9e2:	23e5      	movs	r3, #229	@ 0xe5
 801a9e4:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 801a9e6:	69fb      	ldr	r3, [r7, #28]
 801a9e8:	2b09      	cmp	r3, #9
 801a9ea:	d10f      	bne.n	801aa0c <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 801a9ec:	89bb      	ldrh	r3, [r7, #12]
 801a9ee:	2b00      	cmp	r3, #0
 801a9f0:	d105      	bne.n	801a9fe <get_fileinfo+0xde>
 801a9f2:	683a      	ldr	r2, [r7, #0]
 801a9f4:	69bb      	ldr	r3, [r7, #24]
 801a9f6:	4413      	add	r3, r2
 801a9f8:	3316      	adds	r3, #22
 801a9fa:	222e      	movs	r2, #46	@ 0x2e
 801a9fc:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 801a9fe:	69bb      	ldr	r3, [r7, #24]
 801aa00:	1c5a      	adds	r2, r3, #1
 801aa02:	61ba      	str	r2, [r7, #24]
 801aa04:	683a      	ldr	r2, [r7, #0]
 801aa06:	4413      	add	r3, r2
 801aa08:	222e      	movs	r2, #46	@ 0x2e
 801aa0a:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 801aa0c:	683a      	ldr	r2, [r7, #0]
 801aa0e:	69bb      	ldr	r3, [r7, #24]
 801aa10:	4413      	add	r3, r2
 801aa12:	3309      	adds	r3, #9
 801aa14:	7dfa      	ldrb	r2, [r7, #23]
 801aa16:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 801aa18:	89bb      	ldrh	r3, [r7, #12]
 801aa1a:	2b00      	cmp	r3, #0
 801aa1c:	d11c      	bne.n	801aa58 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 801aa1e:	7dfb      	ldrb	r3, [r7, #23]
 801aa20:	2b40      	cmp	r3, #64	@ 0x40
 801aa22:	d913      	bls.n	801aa4c <get_fileinfo+0x12c>
 801aa24:	7dfb      	ldrb	r3, [r7, #23]
 801aa26:	2b5a      	cmp	r3, #90	@ 0x5a
 801aa28:	d810      	bhi.n	801aa4c <get_fileinfo+0x12c>
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	6a1b      	ldr	r3, [r3, #32]
 801aa2e:	330c      	adds	r3, #12
 801aa30:	781b      	ldrb	r3, [r3, #0]
 801aa32:	461a      	mov	r2, r3
 801aa34:	69fb      	ldr	r3, [r7, #28]
 801aa36:	2b08      	cmp	r3, #8
 801aa38:	d901      	bls.n	801aa3e <get_fileinfo+0x11e>
 801aa3a:	2310      	movs	r3, #16
 801aa3c:	e000      	b.n	801aa40 <get_fileinfo+0x120>
 801aa3e:	2308      	movs	r3, #8
 801aa40:	4013      	ands	r3, r2
 801aa42:	2b00      	cmp	r3, #0
 801aa44:	d002      	beq.n	801aa4c <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 801aa46:	7dfb      	ldrb	r3, [r7, #23]
 801aa48:	3320      	adds	r3, #32
 801aa4a:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 801aa4c:	683a      	ldr	r2, [r7, #0]
 801aa4e:	69bb      	ldr	r3, [r7, #24]
 801aa50:	4413      	add	r3, r2
 801aa52:	3316      	adds	r3, #22
 801aa54:	7dfa      	ldrb	r2, [r7, #23]
 801aa56:	701a      	strb	r2, [r3, #0]
		}
		j++;
 801aa58:	69bb      	ldr	r3, [r7, #24]
 801aa5a:	3301      	adds	r3, #1
 801aa5c:	61bb      	str	r3, [r7, #24]
 801aa5e:	e000      	b.n	801aa62 <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 801aa60:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 801aa62:	69fb      	ldr	r3, [r7, #28]
 801aa64:	2b0a      	cmp	r3, #10
 801aa66:	d9ae      	bls.n	801a9c6 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 801aa68:	89bb      	ldrh	r3, [r7, #12]
 801aa6a:	2b00      	cmp	r3, #0
 801aa6c:	d10d      	bne.n	801aa8a <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 801aa6e:	683a      	ldr	r2, [r7, #0]
 801aa70:	69bb      	ldr	r3, [r7, #24]
 801aa72:	4413      	add	r3, r2
 801aa74:	3316      	adds	r3, #22
 801aa76:	2200      	movs	r2, #0
 801aa78:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 801aa7a:	687b      	ldr	r3, [r7, #4]
 801aa7c:	6a1b      	ldr	r3, [r3, #32]
 801aa7e:	330c      	adds	r3, #12
 801aa80:	781b      	ldrb	r3, [r3, #0]
 801aa82:	2b00      	cmp	r3, #0
 801aa84:	d101      	bne.n	801aa8a <get_fileinfo+0x16a>
 801aa86:	2300      	movs	r3, #0
 801aa88:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 801aa8a:	683a      	ldr	r2, [r7, #0]
 801aa8c:	69bb      	ldr	r3, [r7, #24]
 801aa8e:	4413      	add	r3, r2
 801aa90:	3309      	adds	r3, #9
 801aa92:	2200      	movs	r2, #0
 801aa94:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 801aa96:	687b      	ldr	r3, [r7, #4]
 801aa98:	6a1b      	ldr	r3, [r3, #32]
 801aa9a:	7ada      	ldrb	r2, [r3, #11]
 801aa9c:	683b      	ldr	r3, [r7, #0]
 801aa9e:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801aaa0:	687b      	ldr	r3, [r7, #4]
 801aaa2:	6a1b      	ldr	r3, [r3, #32]
 801aaa4:	331c      	adds	r3, #28
 801aaa6:	4618      	mov	r0, r3
 801aaa8:	f7fe fc1e 	bl	80192e8 <ld_dword>
 801aaac:	4602      	mov	r2, r0
 801aaae:	683b      	ldr	r3, [r7, #0]
 801aab0:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 801aab2:	687b      	ldr	r3, [r7, #4]
 801aab4:	6a1b      	ldr	r3, [r3, #32]
 801aab6:	3316      	adds	r3, #22
 801aab8:	4618      	mov	r0, r3
 801aaba:	f7fe fc15 	bl	80192e8 <ld_dword>
 801aabe:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801aac0:	68bb      	ldr	r3, [r7, #8]
 801aac2:	b29a      	uxth	r2, r3
 801aac4:	683b      	ldr	r3, [r7, #0]
 801aac6:	80da      	strh	r2, [r3, #6]
 801aac8:	68bb      	ldr	r3, [r7, #8]
 801aaca:	0c1b      	lsrs	r3, r3, #16
 801aacc:	b29a      	uxth	r2, r3
 801aace:	683b      	ldr	r3, [r7, #0]
 801aad0:	809a      	strh	r2, [r3, #4]
 801aad2:	e000      	b.n	801aad6 <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801aad4:	bf00      	nop
}
 801aad6:	3720      	adds	r7, #32
 801aad8:	46bd      	mov	sp, r7
 801aada:	bd80      	pop	{r7, pc}

0801aadc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801aadc:	b580      	push	{r7, lr}
 801aade:	b08a      	sub	sp, #40	@ 0x28
 801aae0:	af00      	add	r7, sp, #0
 801aae2:	6078      	str	r0, [r7, #4]
 801aae4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801aae6:	683b      	ldr	r3, [r7, #0]
 801aae8:	681b      	ldr	r3, [r3, #0]
 801aaea:	613b      	str	r3, [r7, #16]
 801aaec:	687b      	ldr	r3, [r7, #4]
 801aaee:	681b      	ldr	r3, [r3, #0]
 801aaf0:	68db      	ldr	r3, [r3, #12]
 801aaf2:	60fb      	str	r3, [r7, #12]
 801aaf4:	2300      	movs	r3, #0
 801aaf6:	617b      	str	r3, [r7, #20]
 801aaf8:	697b      	ldr	r3, [r7, #20]
 801aafa:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801aafc:	69bb      	ldr	r3, [r7, #24]
 801aafe:	1c5a      	adds	r2, r3, #1
 801ab00:	61ba      	str	r2, [r7, #24]
 801ab02:	693a      	ldr	r2, [r7, #16]
 801ab04:	4413      	add	r3, r2
 801ab06:	781b      	ldrb	r3, [r3, #0]
 801ab08:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801ab0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab0c:	2b1f      	cmp	r3, #31
 801ab0e:	d940      	bls.n	801ab92 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801ab10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab12:	2b2f      	cmp	r3, #47	@ 0x2f
 801ab14:	d006      	beq.n	801ab24 <create_name+0x48>
 801ab16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab18:	2b5c      	cmp	r3, #92	@ 0x5c
 801ab1a:	d110      	bne.n	801ab3e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801ab1c:	e002      	b.n	801ab24 <create_name+0x48>
 801ab1e:	69bb      	ldr	r3, [r7, #24]
 801ab20:	3301      	adds	r3, #1
 801ab22:	61bb      	str	r3, [r7, #24]
 801ab24:	693a      	ldr	r2, [r7, #16]
 801ab26:	69bb      	ldr	r3, [r7, #24]
 801ab28:	4413      	add	r3, r2
 801ab2a:	781b      	ldrb	r3, [r3, #0]
 801ab2c:	2b2f      	cmp	r3, #47	@ 0x2f
 801ab2e:	d0f6      	beq.n	801ab1e <create_name+0x42>
 801ab30:	693a      	ldr	r2, [r7, #16]
 801ab32:	69bb      	ldr	r3, [r7, #24]
 801ab34:	4413      	add	r3, r2
 801ab36:	781b      	ldrb	r3, [r3, #0]
 801ab38:	2b5c      	cmp	r3, #92	@ 0x5c
 801ab3a:	d0f0      	beq.n	801ab1e <create_name+0x42>
			break;
 801ab3c:	e02a      	b.n	801ab94 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801ab3e:	697b      	ldr	r3, [r7, #20]
 801ab40:	2bfe      	cmp	r3, #254	@ 0xfe
 801ab42:	d901      	bls.n	801ab48 <create_name+0x6c>
 801ab44:	2306      	movs	r3, #6
 801ab46:	e17d      	b.n	801ae44 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801ab48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab4a:	b2db      	uxtb	r3, r3
 801ab4c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801ab4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab50:	2101      	movs	r1, #1
 801ab52:	4618      	mov	r0, r3
 801ab54:	f001 f9be 	bl	801bed4 <ff_convert>
 801ab58:	4603      	mov	r3, r0
 801ab5a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801ab5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab5e:	2b00      	cmp	r3, #0
 801ab60:	d101      	bne.n	801ab66 <create_name+0x8a>
 801ab62:	2306      	movs	r3, #6
 801ab64:	e16e      	b.n	801ae44 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801ab66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab68:	2b7f      	cmp	r3, #127	@ 0x7f
 801ab6a:	d809      	bhi.n	801ab80 <create_name+0xa4>
 801ab6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab6e:	4619      	mov	r1, r3
 801ab70:	488d      	ldr	r0, [pc, #564]	@ (801ada8 <create_name+0x2cc>)
 801ab72:	f7fe fc86 	bl	8019482 <chk_chr>
 801ab76:	4603      	mov	r3, r0
 801ab78:	2b00      	cmp	r3, #0
 801ab7a:	d001      	beq.n	801ab80 <create_name+0xa4>
 801ab7c:	2306      	movs	r3, #6
 801ab7e:	e161      	b.n	801ae44 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 801ab80:	697b      	ldr	r3, [r7, #20]
 801ab82:	1c5a      	adds	r2, r3, #1
 801ab84:	617a      	str	r2, [r7, #20]
 801ab86:	005b      	lsls	r3, r3, #1
 801ab88:	68fa      	ldr	r2, [r7, #12]
 801ab8a:	4413      	add	r3, r2
 801ab8c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801ab8e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801ab90:	e7b4      	b.n	801aafc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801ab92:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801ab94:	693a      	ldr	r2, [r7, #16]
 801ab96:	69bb      	ldr	r3, [r7, #24]
 801ab98:	441a      	add	r2, r3
 801ab9a:	683b      	ldr	r3, [r7, #0]
 801ab9c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801ab9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801aba0:	2b1f      	cmp	r3, #31
 801aba2:	d801      	bhi.n	801aba8 <create_name+0xcc>
 801aba4:	2304      	movs	r3, #4
 801aba6:	e000      	b.n	801abaa <create_name+0xce>
 801aba8:	2300      	movs	r3, #0
 801abaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801abae:	e011      	b.n	801abd4 <create_name+0xf8>
		w = lfn[di - 1];
 801abb0:	697b      	ldr	r3, [r7, #20]
 801abb2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801abb6:	3b01      	subs	r3, #1
 801abb8:	005b      	lsls	r3, r3, #1
 801abba:	68fa      	ldr	r2, [r7, #12]
 801abbc:	4413      	add	r3, r2
 801abbe:	881b      	ldrh	r3, [r3, #0]
 801abc0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801abc2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801abc4:	2b20      	cmp	r3, #32
 801abc6:	d002      	beq.n	801abce <create_name+0xf2>
 801abc8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801abca:	2b2e      	cmp	r3, #46	@ 0x2e
 801abcc:	d106      	bne.n	801abdc <create_name+0x100>
		di--;
 801abce:	697b      	ldr	r3, [r7, #20]
 801abd0:	3b01      	subs	r3, #1
 801abd2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801abd4:	697b      	ldr	r3, [r7, #20]
 801abd6:	2b00      	cmp	r3, #0
 801abd8:	d1ea      	bne.n	801abb0 <create_name+0xd4>
 801abda:	e000      	b.n	801abde <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801abdc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801abde:	697b      	ldr	r3, [r7, #20]
 801abe0:	005b      	lsls	r3, r3, #1
 801abe2:	68fa      	ldr	r2, [r7, #12]
 801abe4:	4413      	add	r3, r2
 801abe6:	2200      	movs	r2, #0
 801abe8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801abea:	697b      	ldr	r3, [r7, #20]
 801abec:	2b00      	cmp	r3, #0
 801abee:	d101      	bne.n	801abf4 <create_name+0x118>
 801abf0:	2306      	movs	r3, #6
 801abf2:	e127      	b.n	801ae44 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	3324      	adds	r3, #36	@ 0x24
 801abf8:	220b      	movs	r2, #11
 801abfa:	2120      	movs	r1, #32
 801abfc:	4618      	mov	r0, r3
 801abfe:	f7fe fbfe 	bl	80193fe <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801ac02:	2300      	movs	r3, #0
 801ac04:	61bb      	str	r3, [r7, #24]
 801ac06:	e002      	b.n	801ac0e <create_name+0x132>
 801ac08:	69bb      	ldr	r3, [r7, #24]
 801ac0a:	3301      	adds	r3, #1
 801ac0c:	61bb      	str	r3, [r7, #24]
 801ac0e:	69bb      	ldr	r3, [r7, #24]
 801ac10:	005b      	lsls	r3, r3, #1
 801ac12:	68fa      	ldr	r2, [r7, #12]
 801ac14:	4413      	add	r3, r2
 801ac16:	881b      	ldrh	r3, [r3, #0]
 801ac18:	2b20      	cmp	r3, #32
 801ac1a:	d0f5      	beq.n	801ac08 <create_name+0x12c>
 801ac1c:	69bb      	ldr	r3, [r7, #24]
 801ac1e:	005b      	lsls	r3, r3, #1
 801ac20:	68fa      	ldr	r2, [r7, #12]
 801ac22:	4413      	add	r3, r2
 801ac24:	881b      	ldrh	r3, [r3, #0]
 801ac26:	2b2e      	cmp	r3, #46	@ 0x2e
 801ac28:	d0ee      	beq.n	801ac08 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801ac2a:	69bb      	ldr	r3, [r7, #24]
 801ac2c:	2b00      	cmp	r3, #0
 801ac2e:	d009      	beq.n	801ac44 <create_name+0x168>
 801ac30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ac34:	f043 0303 	orr.w	r3, r3, #3
 801ac38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801ac3c:	e002      	b.n	801ac44 <create_name+0x168>
 801ac3e:	697b      	ldr	r3, [r7, #20]
 801ac40:	3b01      	subs	r3, #1
 801ac42:	617b      	str	r3, [r7, #20]
 801ac44:	697b      	ldr	r3, [r7, #20]
 801ac46:	2b00      	cmp	r3, #0
 801ac48:	d009      	beq.n	801ac5e <create_name+0x182>
 801ac4a:	697b      	ldr	r3, [r7, #20]
 801ac4c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801ac50:	3b01      	subs	r3, #1
 801ac52:	005b      	lsls	r3, r3, #1
 801ac54:	68fa      	ldr	r2, [r7, #12]
 801ac56:	4413      	add	r3, r2
 801ac58:	881b      	ldrh	r3, [r3, #0]
 801ac5a:	2b2e      	cmp	r3, #46	@ 0x2e
 801ac5c:	d1ef      	bne.n	801ac3e <create_name+0x162>

	i = b = 0; ni = 8;
 801ac5e:	2300      	movs	r3, #0
 801ac60:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801ac64:	2300      	movs	r3, #0
 801ac66:	623b      	str	r3, [r7, #32]
 801ac68:	2308      	movs	r3, #8
 801ac6a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801ac6c:	69bb      	ldr	r3, [r7, #24]
 801ac6e:	1c5a      	adds	r2, r3, #1
 801ac70:	61ba      	str	r2, [r7, #24]
 801ac72:	005b      	lsls	r3, r3, #1
 801ac74:	68fa      	ldr	r2, [r7, #12]
 801ac76:	4413      	add	r3, r2
 801ac78:	881b      	ldrh	r3, [r3, #0]
 801ac7a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 801ac7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ac7e:	2b00      	cmp	r3, #0
 801ac80:	f000 8090 	beq.w	801ada4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801ac84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ac86:	2b20      	cmp	r3, #32
 801ac88:	d006      	beq.n	801ac98 <create_name+0x1bc>
 801ac8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ac8c:	2b2e      	cmp	r3, #46	@ 0x2e
 801ac8e:	d10a      	bne.n	801aca6 <create_name+0x1ca>
 801ac90:	69ba      	ldr	r2, [r7, #24]
 801ac92:	697b      	ldr	r3, [r7, #20]
 801ac94:	429a      	cmp	r2, r3
 801ac96:	d006      	beq.n	801aca6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801ac98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ac9c:	f043 0303 	orr.w	r3, r3, #3
 801aca0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801aca4:	e07d      	b.n	801ada2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801aca6:	6a3a      	ldr	r2, [r7, #32]
 801aca8:	69fb      	ldr	r3, [r7, #28]
 801acaa:	429a      	cmp	r2, r3
 801acac:	d203      	bcs.n	801acb6 <create_name+0x1da>
 801acae:	69ba      	ldr	r2, [r7, #24]
 801acb0:	697b      	ldr	r3, [r7, #20]
 801acb2:	429a      	cmp	r2, r3
 801acb4:	d123      	bne.n	801acfe <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801acb6:	69fb      	ldr	r3, [r7, #28]
 801acb8:	2b0b      	cmp	r3, #11
 801acba:	d106      	bne.n	801acca <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801acbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801acc0:	f043 0303 	orr.w	r3, r3, #3
 801acc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801acc8:	e075      	b.n	801adb6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801acca:	69ba      	ldr	r2, [r7, #24]
 801accc:	697b      	ldr	r3, [r7, #20]
 801acce:	429a      	cmp	r2, r3
 801acd0:	d005      	beq.n	801acde <create_name+0x202>
 801acd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801acd6:	f043 0303 	orr.w	r3, r3, #3
 801acda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801acde:	69ba      	ldr	r2, [r7, #24]
 801ace0:	697b      	ldr	r3, [r7, #20]
 801ace2:	429a      	cmp	r2, r3
 801ace4:	d866      	bhi.n	801adb4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801ace6:	697b      	ldr	r3, [r7, #20]
 801ace8:	61bb      	str	r3, [r7, #24]
 801acea:	2308      	movs	r3, #8
 801acec:	623b      	str	r3, [r7, #32]
 801acee:	230b      	movs	r3, #11
 801acf0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801acf2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801acf6:	009b      	lsls	r3, r3, #2
 801acf8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801acfc:	e051      	b.n	801ada2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801acfe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ad00:	2b7f      	cmp	r3, #127	@ 0x7f
 801ad02:	d914      	bls.n	801ad2e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801ad04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ad06:	2100      	movs	r1, #0
 801ad08:	4618      	mov	r0, r3
 801ad0a:	f001 f8e3 	bl	801bed4 <ff_convert>
 801ad0e:	4603      	mov	r3, r0
 801ad10:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801ad12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ad14:	2b00      	cmp	r3, #0
 801ad16:	d004      	beq.n	801ad22 <create_name+0x246>
 801ad18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ad1a:	3b80      	subs	r3, #128	@ 0x80
 801ad1c:	4a23      	ldr	r2, [pc, #140]	@ (801adac <create_name+0x2d0>)
 801ad1e:	5cd3      	ldrb	r3, [r2, r3]
 801ad20:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801ad22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ad26:	f043 0302 	orr.w	r3, r3, #2
 801ad2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801ad2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ad30:	2b00      	cmp	r3, #0
 801ad32:	d007      	beq.n	801ad44 <create_name+0x268>
 801ad34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ad36:	4619      	mov	r1, r3
 801ad38:	481d      	ldr	r0, [pc, #116]	@ (801adb0 <create_name+0x2d4>)
 801ad3a:	f7fe fba2 	bl	8019482 <chk_chr>
 801ad3e:	4603      	mov	r3, r0
 801ad40:	2b00      	cmp	r3, #0
 801ad42:	d008      	beq.n	801ad56 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801ad44:	235f      	movs	r3, #95	@ 0x5f
 801ad46:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801ad48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ad4c:	f043 0303 	orr.w	r3, r3, #3
 801ad50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ad54:	e01b      	b.n	801ad8e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801ad56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ad58:	2b40      	cmp	r3, #64	@ 0x40
 801ad5a:	d909      	bls.n	801ad70 <create_name+0x294>
 801ad5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ad5e:	2b5a      	cmp	r3, #90	@ 0x5a
 801ad60:	d806      	bhi.n	801ad70 <create_name+0x294>
					b |= 2;
 801ad62:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ad66:	f043 0302 	orr.w	r3, r3, #2
 801ad6a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801ad6e:	e00e      	b.n	801ad8e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801ad70:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ad72:	2b60      	cmp	r3, #96	@ 0x60
 801ad74:	d90b      	bls.n	801ad8e <create_name+0x2b2>
 801ad76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ad78:	2b7a      	cmp	r3, #122	@ 0x7a
 801ad7a:	d808      	bhi.n	801ad8e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801ad7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ad80:	f043 0301 	orr.w	r3, r3, #1
 801ad84:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801ad88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ad8a:	3b20      	subs	r3, #32
 801ad8c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801ad8e:	6a3b      	ldr	r3, [r7, #32]
 801ad90:	1c5a      	adds	r2, r3, #1
 801ad92:	623a      	str	r2, [r7, #32]
 801ad94:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801ad96:	b2d1      	uxtb	r1, r2
 801ad98:	687a      	ldr	r2, [r7, #4]
 801ad9a:	4413      	add	r3, r2
 801ad9c:	460a      	mov	r2, r1
 801ad9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801ada2:	e763      	b.n	801ac6c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801ada4:	bf00      	nop
 801ada6:	e006      	b.n	801adb6 <create_name+0x2da>
 801ada8:	08024820 	.word	0x08024820
 801adac:	0802514c 	.word	0x0802514c
 801adb0:	0802482c 	.word	0x0802482c
			if (si > di) break;			/* No extension */
 801adb4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801adb6:	687b      	ldr	r3, [r7, #4]
 801adb8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801adbc:	2be5      	cmp	r3, #229	@ 0xe5
 801adbe:	d103      	bne.n	801adc8 <create_name+0x2ec>
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	2205      	movs	r2, #5
 801adc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 801adc8:	69fb      	ldr	r3, [r7, #28]
 801adca:	2b08      	cmp	r3, #8
 801adcc:	d104      	bne.n	801add8 <create_name+0x2fc>
 801adce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801add2:	009b      	lsls	r3, r3, #2
 801add4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801add8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801addc:	f003 030c 	and.w	r3, r3, #12
 801ade0:	2b0c      	cmp	r3, #12
 801ade2:	d005      	beq.n	801adf0 <create_name+0x314>
 801ade4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ade8:	f003 0303 	and.w	r3, r3, #3
 801adec:	2b03      	cmp	r3, #3
 801adee:	d105      	bne.n	801adfc <create_name+0x320>
 801adf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801adf4:	f043 0302 	orr.w	r3, r3, #2
 801adf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801adfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ae00:	f003 0302 	and.w	r3, r3, #2
 801ae04:	2b00      	cmp	r3, #0
 801ae06:	d117      	bne.n	801ae38 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801ae08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ae0c:	f003 0303 	and.w	r3, r3, #3
 801ae10:	2b01      	cmp	r3, #1
 801ae12:	d105      	bne.n	801ae20 <create_name+0x344>
 801ae14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ae18:	f043 0310 	orr.w	r3, r3, #16
 801ae1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801ae20:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ae24:	f003 030c 	and.w	r3, r3, #12
 801ae28:	2b04      	cmp	r3, #4
 801ae2a:	d105      	bne.n	801ae38 <create_name+0x35c>
 801ae2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ae30:	f043 0308 	orr.w	r3, r3, #8
 801ae34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801ae38:	687b      	ldr	r3, [r7, #4]
 801ae3a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801ae3e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 801ae42:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801ae44:	4618      	mov	r0, r3
 801ae46:	3728      	adds	r7, #40	@ 0x28
 801ae48:	46bd      	mov	sp, r7
 801ae4a:	bd80      	pop	{r7, pc}

0801ae4c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801ae4c:	b580      	push	{r7, lr}
 801ae4e:	b086      	sub	sp, #24
 801ae50:	af00      	add	r7, sp, #0
 801ae52:	6078      	str	r0, [r7, #4]
 801ae54:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801ae56:	687b      	ldr	r3, [r7, #4]
 801ae58:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801ae5a:	693b      	ldr	r3, [r7, #16]
 801ae5c:	681b      	ldr	r3, [r3, #0]
 801ae5e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801ae60:	e002      	b.n	801ae68 <follow_path+0x1c>
 801ae62:	683b      	ldr	r3, [r7, #0]
 801ae64:	3301      	adds	r3, #1
 801ae66:	603b      	str	r3, [r7, #0]
 801ae68:	683b      	ldr	r3, [r7, #0]
 801ae6a:	781b      	ldrb	r3, [r3, #0]
 801ae6c:	2b2f      	cmp	r3, #47	@ 0x2f
 801ae6e:	d0f8      	beq.n	801ae62 <follow_path+0x16>
 801ae70:	683b      	ldr	r3, [r7, #0]
 801ae72:	781b      	ldrb	r3, [r3, #0]
 801ae74:	2b5c      	cmp	r3, #92	@ 0x5c
 801ae76:	d0f4      	beq.n	801ae62 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801ae78:	693b      	ldr	r3, [r7, #16]
 801ae7a:	2200      	movs	r2, #0
 801ae7c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801ae7e:	683b      	ldr	r3, [r7, #0]
 801ae80:	781b      	ldrb	r3, [r3, #0]
 801ae82:	2b1f      	cmp	r3, #31
 801ae84:	d80a      	bhi.n	801ae9c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801ae86:	687b      	ldr	r3, [r7, #4]
 801ae88:	2280      	movs	r2, #128	@ 0x80
 801ae8a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801ae8e:	2100      	movs	r1, #0
 801ae90:	6878      	ldr	r0, [r7, #4]
 801ae92:	f7ff f83e 	bl	8019f12 <dir_sdi>
 801ae96:	4603      	mov	r3, r0
 801ae98:	75fb      	strb	r3, [r7, #23]
 801ae9a:	e043      	b.n	801af24 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801ae9c:	463b      	mov	r3, r7
 801ae9e:	4619      	mov	r1, r3
 801aea0:	6878      	ldr	r0, [r7, #4]
 801aea2:	f7ff fe1b 	bl	801aadc <create_name>
 801aea6:	4603      	mov	r3, r0
 801aea8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801aeaa:	7dfb      	ldrb	r3, [r7, #23]
 801aeac:	2b00      	cmp	r3, #0
 801aeae:	d134      	bne.n	801af1a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801aeb0:	6878      	ldr	r0, [r7, #4]
 801aeb2:	f7ff fb7c 	bl	801a5ae <dir_find>
 801aeb6:	4603      	mov	r3, r0
 801aeb8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801aeba:	687b      	ldr	r3, [r7, #4]
 801aebc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801aec0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801aec2:	7dfb      	ldrb	r3, [r7, #23]
 801aec4:	2b00      	cmp	r3, #0
 801aec6:	d00a      	beq.n	801aede <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801aec8:	7dfb      	ldrb	r3, [r7, #23]
 801aeca:	2b04      	cmp	r3, #4
 801aecc:	d127      	bne.n	801af1e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801aece:	7afb      	ldrb	r3, [r7, #11]
 801aed0:	f003 0304 	and.w	r3, r3, #4
 801aed4:	2b00      	cmp	r3, #0
 801aed6:	d122      	bne.n	801af1e <follow_path+0xd2>
 801aed8:	2305      	movs	r3, #5
 801aeda:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801aedc:	e01f      	b.n	801af1e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801aede:	7afb      	ldrb	r3, [r7, #11]
 801aee0:	f003 0304 	and.w	r3, r3, #4
 801aee4:	2b00      	cmp	r3, #0
 801aee6:	d11c      	bne.n	801af22 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801aee8:	693b      	ldr	r3, [r7, #16]
 801aeea:	799b      	ldrb	r3, [r3, #6]
 801aeec:	f003 0310 	and.w	r3, r3, #16
 801aef0:	2b00      	cmp	r3, #0
 801aef2:	d102      	bne.n	801aefa <follow_path+0xae>
				res = FR_NO_PATH; break;
 801aef4:	2305      	movs	r3, #5
 801aef6:	75fb      	strb	r3, [r7, #23]
 801aef8:	e014      	b.n	801af24 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801aefa:	68fb      	ldr	r3, [r7, #12]
 801aefc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801af00:	687b      	ldr	r3, [r7, #4]
 801af02:	695b      	ldr	r3, [r3, #20]
 801af04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801af08:	4413      	add	r3, r2
 801af0a:	4619      	mov	r1, r3
 801af0c:	68f8      	ldr	r0, [r7, #12]
 801af0e:	f7ff f987 	bl	801a220 <ld_clust>
 801af12:	4602      	mov	r2, r0
 801af14:	693b      	ldr	r3, [r7, #16]
 801af16:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801af18:	e7c0      	b.n	801ae9c <follow_path+0x50>
			if (res != FR_OK) break;
 801af1a:	bf00      	nop
 801af1c:	e002      	b.n	801af24 <follow_path+0xd8>
				break;
 801af1e:	bf00      	nop
 801af20:	e000      	b.n	801af24 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801af22:	bf00      	nop
			}
		}
	}

	return res;
 801af24:	7dfb      	ldrb	r3, [r7, #23]
}
 801af26:	4618      	mov	r0, r3
 801af28:	3718      	adds	r7, #24
 801af2a:	46bd      	mov	sp, r7
 801af2c:	bd80      	pop	{r7, pc}

0801af2e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801af2e:	b480      	push	{r7}
 801af30:	b087      	sub	sp, #28
 801af32:	af00      	add	r7, sp, #0
 801af34:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801af36:	f04f 33ff 	mov.w	r3, #4294967295
 801af3a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801af3c:	687b      	ldr	r3, [r7, #4]
 801af3e:	681b      	ldr	r3, [r3, #0]
 801af40:	2b00      	cmp	r3, #0
 801af42:	d031      	beq.n	801afa8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801af44:	687b      	ldr	r3, [r7, #4]
 801af46:	681b      	ldr	r3, [r3, #0]
 801af48:	617b      	str	r3, [r7, #20]
 801af4a:	e002      	b.n	801af52 <get_ldnumber+0x24>
 801af4c:	697b      	ldr	r3, [r7, #20]
 801af4e:	3301      	adds	r3, #1
 801af50:	617b      	str	r3, [r7, #20]
 801af52:	697b      	ldr	r3, [r7, #20]
 801af54:	781b      	ldrb	r3, [r3, #0]
 801af56:	2b1f      	cmp	r3, #31
 801af58:	d903      	bls.n	801af62 <get_ldnumber+0x34>
 801af5a:	697b      	ldr	r3, [r7, #20]
 801af5c:	781b      	ldrb	r3, [r3, #0]
 801af5e:	2b3a      	cmp	r3, #58	@ 0x3a
 801af60:	d1f4      	bne.n	801af4c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801af62:	697b      	ldr	r3, [r7, #20]
 801af64:	781b      	ldrb	r3, [r3, #0]
 801af66:	2b3a      	cmp	r3, #58	@ 0x3a
 801af68:	d11c      	bne.n	801afa4 <get_ldnumber+0x76>
			tp = *path;
 801af6a:	687b      	ldr	r3, [r7, #4]
 801af6c:	681b      	ldr	r3, [r3, #0]
 801af6e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801af70:	68fb      	ldr	r3, [r7, #12]
 801af72:	1c5a      	adds	r2, r3, #1
 801af74:	60fa      	str	r2, [r7, #12]
 801af76:	781b      	ldrb	r3, [r3, #0]
 801af78:	3b30      	subs	r3, #48	@ 0x30
 801af7a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801af7c:	68bb      	ldr	r3, [r7, #8]
 801af7e:	2b09      	cmp	r3, #9
 801af80:	d80e      	bhi.n	801afa0 <get_ldnumber+0x72>
 801af82:	68fa      	ldr	r2, [r7, #12]
 801af84:	697b      	ldr	r3, [r7, #20]
 801af86:	429a      	cmp	r2, r3
 801af88:	d10a      	bne.n	801afa0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801af8a:	68bb      	ldr	r3, [r7, #8]
 801af8c:	2b00      	cmp	r3, #0
 801af8e:	d107      	bne.n	801afa0 <get_ldnumber+0x72>
					vol = (int)i;
 801af90:	68bb      	ldr	r3, [r7, #8]
 801af92:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801af94:	697b      	ldr	r3, [r7, #20]
 801af96:	3301      	adds	r3, #1
 801af98:	617b      	str	r3, [r7, #20]
 801af9a:	687b      	ldr	r3, [r7, #4]
 801af9c:	697a      	ldr	r2, [r7, #20]
 801af9e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801afa0:	693b      	ldr	r3, [r7, #16]
 801afa2:	e002      	b.n	801afaa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801afa4:	2300      	movs	r3, #0
 801afa6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801afa8:	693b      	ldr	r3, [r7, #16]
}
 801afaa:	4618      	mov	r0, r3
 801afac:	371c      	adds	r7, #28
 801afae:	46bd      	mov	sp, r7
 801afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afb4:	4770      	bx	lr
	...

0801afb8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801afb8:	b580      	push	{r7, lr}
 801afba:	b082      	sub	sp, #8
 801afbc:	af00      	add	r7, sp, #0
 801afbe:	6078      	str	r0, [r7, #4]
 801afc0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801afc2:	687b      	ldr	r3, [r7, #4]
 801afc4:	2200      	movs	r2, #0
 801afc6:	70da      	strb	r2, [r3, #3]
 801afc8:	687b      	ldr	r3, [r7, #4]
 801afca:	f04f 32ff 	mov.w	r2, #4294967295
 801afce:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801afd0:	6839      	ldr	r1, [r7, #0]
 801afd2:	6878      	ldr	r0, [r7, #4]
 801afd4:	f7fe fc20 	bl	8019818 <move_window>
 801afd8:	4603      	mov	r3, r0
 801afda:	2b00      	cmp	r3, #0
 801afdc:	d001      	beq.n	801afe2 <check_fs+0x2a>
 801afde:	2304      	movs	r3, #4
 801afe0:	e038      	b.n	801b054 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801afe2:	687b      	ldr	r3, [r7, #4]
 801afe4:	3334      	adds	r3, #52	@ 0x34
 801afe6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801afea:	4618      	mov	r0, r3
 801afec:	f7fe f964 	bl	80192b8 <ld_word>
 801aff0:	4603      	mov	r3, r0
 801aff2:	461a      	mov	r2, r3
 801aff4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801aff8:	429a      	cmp	r2, r3
 801affa:	d001      	beq.n	801b000 <check_fs+0x48>
 801affc:	2303      	movs	r3, #3
 801affe:	e029      	b.n	801b054 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801b000:	687b      	ldr	r3, [r7, #4]
 801b002:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801b006:	2be9      	cmp	r3, #233	@ 0xe9
 801b008:	d009      	beq.n	801b01e <check_fs+0x66>
 801b00a:	687b      	ldr	r3, [r7, #4]
 801b00c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801b010:	2beb      	cmp	r3, #235	@ 0xeb
 801b012:	d11e      	bne.n	801b052 <check_fs+0x9a>
 801b014:	687b      	ldr	r3, [r7, #4]
 801b016:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 801b01a:	2b90      	cmp	r3, #144	@ 0x90
 801b01c:	d119      	bne.n	801b052 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801b01e:	687b      	ldr	r3, [r7, #4]
 801b020:	3334      	adds	r3, #52	@ 0x34
 801b022:	3336      	adds	r3, #54	@ 0x36
 801b024:	4618      	mov	r0, r3
 801b026:	f7fe f95f 	bl	80192e8 <ld_dword>
 801b02a:	4603      	mov	r3, r0
 801b02c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801b030:	4a0a      	ldr	r2, [pc, #40]	@ (801b05c <check_fs+0xa4>)
 801b032:	4293      	cmp	r3, r2
 801b034:	d101      	bne.n	801b03a <check_fs+0x82>
 801b036:	2300      	movs	r3, #0
 801b038:	e00c      	b.n	801b054 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801b03a:	687b      	ldr	r3, [r7, #4]
 801b03c:	3334      	adds	r3, #52	@ 0x34
 801b03e:	3352      	adds	r3, #82	@ 0x52
 801b040:	4618      	mov	r0, r3
 801b042:	f7fe f951 	bl	80192e8 <ld_dword>
 801b046:	4603      	mov	r3, r0
 801b048:	4a05      	ldr	r2, [pc, #20]	@ (801b060 <check_fs+0xa8>)
 801b04a:	4293      	cmp	r3, r2
 801b04c:	d101      	bne.n	801b052 <check_fs+0x9a>
 801b04e:	2300      	movs	r3, #0
 801b050:	e000      	b.n	801b054 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801b052:	2302      	movs	r3, #2
}
 801b054:	4618      	mov	r0, r3
 801b056:	3708      	adds	r7, #8
 801b058:	46bd      	mov	sp, r7
 801b05a:	bd80      	pop	{r7, pc}
 801b05c:	00544146 	.word	0x00544146
 801b060:	33544146 	.word	0x33544146

0801b064 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801b064:	b580      	push	{r7, lr}
 801b066:	b096      	sub	sp, #88	@ 0x58
 801b068:	af00      	add	r7, sp, #0
 801b06a:	60f8      	str	r0, [r7, #12]
 801b06c:	60b9      	str	r1, [r7, #8]
 801b06e:	4613      	mov	r3, r2
 801b070:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801b072:	68bb      	ldr	r3, [r7, #8]
 801b074:	2200      	movs	r2, #0
 801b076:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801b078:	68f8      	ldr	r0, [r7, #12]
 801b07a:	f7ff ff58 	bl	801af2e <get_ldnumber>
 801b07e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801b080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b082:	2b00      	cmp	r3, #0
 801b084:	da01      	bge.n	801b08a <find_volume+0x26>
 801b086:	230b      	movs	r3, #11
 801b088:	e230      	b.n	801b4ec <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801b08a:	4aa1      	ldr	r2, [pc, #644]	@ (801b310 <find_volume+0x2ac>)
 801b08c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b08e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b092:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801b094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b096:	2b00      	cmp	r3, #0
 801b098:	d101      	bne.n	801b09e <find_volume+0x3a>
 801b09a:	230c      	movs	r3, #12
 801b09c:	e226      	b.n	801b4ec <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801b09e:	68bb      	ldr	r3, [r7, #8]
 801b0a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b0a2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801b0a4:	79fb      	ldrb	r3, [r7, #7]
 801b0a6:	f023 0301 	bic.w	r3, r3, #1
 801b0aa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801b0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b0ae:	781b      	ldrb	r3, [r3, #0]
 801b0b0:	2b00      	cmp	r3, #0
 801b0b2:	d01a      	beq.n	801b0ea <find_volume+0x86>
		stat = disk_status(fs->drv);
 801b0b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b0b6:	785b      	ldrb	r3, [r3, #1]
 801b0b8:	4618      	mov	r0, r3
 801b0ba:	f7fe f85d 	bl	8019178 <disk_status>
 801b0be:	4603      	mov	r3, r0
 801b0c0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801b0c4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b0c8:	f003 0301 	and.w	r3, r3, #1
 801b0cc:	2b00      	cmp	r3, #0
 801b0ce:	d10c      	bne.n	801b0ea <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801b0d0:	79fb      	ldrb	r3, [r7, #7]
 801b0d2:	2b00      	cmp	r3, #0
 801b0d4:	d007      	beq.n	801b0e6 <find_volume+0x82>
 801b0d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b0da:	f003 0304 	and.w	r3, r3, #4
 801b0de:	2b00      	cmp	r3, #0
 801b0e0:	d001      	beq.n	801b0e6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801b0e2:	230a      	movs	r3, #10
 801b0e4:	e202      	b.n	801b4ec <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 801b0e6:	2300      	movs	r3, #0
 801b0e8:	e200      	b.n	801b4ec <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801b0ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b0ec:	2200      	movs	r2, #0
 801b0ee:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801b0f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b0f2:	b2da      	uxtb	r2, r3
 801b0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b0f6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801b0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b0fa:	785b      	ldrb	r3, [r3, #1]
 801b0fc:	4618      	mov	r0, r3
 801b0fe:	f7fe f855 	bl	80191ac <disk_initialize>
 801b102:	4603      	mov	r3, r0
 801b104:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801b108:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b10c:	f003 0301 	and.w	r3, r3, #1
 801b110:	2b00      	cmp	r3, #0
 801b112:	d001      	beq.n	801b118 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801b114:	2303      	movs	r3, #3
 801b116:	e1e9      	b.n	801b4ec <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801b118:	79fb      	ldrb	r3, [r7, #7]
 801b11a:	2b00      	cmp	r3, #0
 801b11c:	d007      	beq.n	801b12e <find_volume+0xca>
 801b11e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b122:	f003 0304 	and.w	r3, r3, #4
 801b126:	2b00      	cmp	r3, #0
 801b128:	d001      	beq.n	801b12e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801b12a:	230a      	movs	r3, #10
 801b12c:	e1de      	b.n	801b4ec <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801b12e:	2300      	movs	r3, #0
 801b130:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801b132:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801b134:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801b136:	f7ff ff3f 	bl	801afb8 <check_fs>
 801b13a:	4603      	mov	r3, r0
 801b13c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801b140:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b144:	2b02      	cmp	r3, #2
 801b146:	d149      	bne.n	801b1dc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801b148:	2300      	movs	r3, #0
 801b14a:	643b      	str	r3, [r7, #64]	@ 0x40
 801b14c:	e01e      	b.n	801b18c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801b14e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b150:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801b154:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b156:	011b      	lsls	r3, r3, #4
 801b158:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801b15c:	4413      	add	r3, r2
 801b15e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801b160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b162:	3304      	adds	r3, #4
 801b164:	781b      	ldrb	r3, [r3, #0]
 801b166:	2b00      	cmp	r3, #0
 801b168:	d006      	beq.n	801b178 <find_volume+0x114>
 801b16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b16c:	3308      	adds	r3, #8
 801b16e:	4618      	mov	r0, r3
 801b170:	f7fe f8ba 	bl	80192e8 <ld_dword>
 801b174:	4602      	mov	r2, r0
 801b176:	e000      	b.n	801b17a <find_volume+0x116>
 801b178:	2200      	movs	r2, #0
 801b17a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b17c:	009b      	lsls	r3, r3, #2
 801b17e:	3358      	adds	r3, #88	@ 0x58
 801b180:	443b      	add	r3, r7
 801b182:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801b186:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b188:	3301      	adds	r3, #1
 801b18a:	643b      	str	r3, [r7, #64]	@ 0x40
 801b18c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b18e:	2b03      	cmp	r3, #3
 801b190:	d9dd      	bls.n	801b14e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801b192:	2300      	movs	r3, #0
 801b194:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801b196:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b198:	2b00      	cmp	r3, #0
 801b19a:	d002      	beq.n	801b1a2 <find_volume+0x13e>
 801b19c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b19e:	3b01      	subs	r3, #1
 801b1a0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801b1a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b1a4:	009b      	lsls	r3, r3, #2
 801b1a6:	3358      	adds	r3, #88	@ 0x58
 801b1a8:	443b      	add	r3, r7
 801b1aa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801b1ae:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801b1b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b1b2:	2b00      	cmp	r3, #0
 801b1b4:	d005      	beq.n	801b1c2 <find_volume+0x15e>
 801b1b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801b1b8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801b1ba:	f7ff fefd 	bl	801afb8 <check_fs>
 801b1be:	4603      	mov	r3, r0
 801b1c0:	e000      	b.n	801b1c4 <find_volume+0x160>
 801b1c2:	2303      	movs	r3, #3
 801b1c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801b1c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b1cc:	2b01      	cmp	r3, #1
 801b1ce:	d905      	bls.n	801b1dc <find_volume+0x178>
 801b1d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b1d2:	3301      	adds	r3, #1
 801b1d4:	643b      	str	r3, [r7, #64]	@ 0x40
 801b1d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b1d8:	2b03      	cmp	r3, #3
 801b1da:	d9e2      	bls.n	801b1a2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801b1dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b1e0:	2b04      	cmp	r3, #4
 801b1e2:	d101      	bne.n	801b1e8 <find_volume+0x184>
 801b1e4:	2301      	movs	r3, #1
 801b1e6:	e181      	b.n	801b4ec <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801b1e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b1ec:	2b01      	cmp	r3, #1
 801b1ee:	d901      	bls.n	801b1f4 <find_volume+0x190>
 801b1f0:	230d      	movs	r3, #13
 801b1f2:	e17b      	b.n	801b4ec <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801b1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1f6:	3334      	adds	r3, #52	@ 0x34
 801b1f8:	330b      	adds	r3, #11
 801b1fa:	4618      	mov	r0, r3
 801b1fc:	f7fe f85c 	bl	80192b8 <ld_word>
 801b200:	4603      	mov	r3, r0
 801b202:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b206:	d001      	beq.n	801b20c <find_volume+0x1a8>
 801b208:	230d      	movs	r3, #13
 801b20a:	e16f      	b.n	801b4ec <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801b20c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b20e:	3334      	adds	r3, #52	@ 0x34
 801b210:	3316      	adds	r3, #22
 801b212:	4618      	mov	r0, r3
 801b214:	f7fe f850 	bl	80192b8 <ld_word>
 801b218:	4603      	mov	r3, r0
 801b21a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801b21c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b21e:	2b00      	cmp	r3, #0
 801b220:	d106      	bne.n	801b230 <find_volume+0x1cc>
 801b222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b224:	3334      	adds	r3, #52	@ 0x34
 801b226:	3324      	adds	r3, #36	@ 0x24
 801b228:	4618      	mov	r0, r3
 801b22a:	f7fe f85d 	bl	80192e8 <ld_dword>
 801b22e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801b230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b232:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b234:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801b236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b238:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 801b23c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b23e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801b240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b242:	789b      	ldrb	r3, [r3, #2]
 801b244:	2b01      	cmp	r3, #1
 801b246:	d005      	beq.n	801b254 <find_volume+0x1f0>
 801b248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b24a:	789b      	ldrb	r3, [r3, #2]
 801b24c:	2b02      	cmp	r3, #2
 801b24e:	d001      	beq.n	801b254 <find_volume+0x1f0>
 801b250:	230d      	movs	r3, #13
 801b252:	e14b      	b.n	801b4ec <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801b254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b256:	789b      	ldrb	r3, [r3, #2]
 801b258:	461a      	mov	r2, r3
 801b25a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b25c:	fb02 f303 	mul.w	r3, r2, r3
 801b260:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801b262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b264:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801b268:	461a      	mov	r2, r3
 801b26a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b26c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801b26e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b270:	895b      	ldrh	r3, [r3, #10]
 801b272:	2b00      	cmp	r3, #0
 801b274:	d008      	beq.n	801b288 <find_volume+0x224>
 801b276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b278:	895b      	ldrh	r3, [r3, #10]
 801b27a:	461a      	mov	r2, r3
 801b27c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b27e:	895b      	ldrh	r3, [r3, #10]
 801b280:	3b01      	subs	r3, #1
 801b282:	4013      	ands	r3, r2
 801b284:	2b00      	cmp	r3, #0
 801b286:	d001      	beq.n	801b28c <find_volume+0x228>
 801b288:	230d      	movs	r3, #13
 801b28a:	e12f      	b.n	801b4ec <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801b28c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b28e:	3334      	adds	r3, #52	@ 0x34
 801b290:	3311      	adds	r3, #17
 801b292:	4618      	mov	r0, r3
 801b294:	f7fe f810 	bl	80192b8 <ld_word>
 801b298:	4603      	mov	r3, r0
 801b29a:	461a      	mov	r2, r3
 801b29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b29e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801b2a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b2a2:	891b      	ldrh	r3, [r3, #8]
 801b2a4:	f003 030f 	and.w	r3, r3, #15
 801b2a8:	b29b      	uxth	r3, r3
 801b2aa:	2b00      	cmp	r3, #0
 801b2ac:	d001      	beq.n	801b2b2 <find_volume+0x24e>
 801b2ae:	230d      	movs	r3, #13
 801b2b0:	e11c      	b.n	801b4ec <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801b2b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b2b4:	3334      	adds	r3, #52	@ 0x34
 801b2b6:	3313      	adds	r3, #19
 801b2b8:	4618      	mov	r0, r3
 801b2ba:	f7fd fffd 	bl	80192b8 <ld_word>
 801b2be:	4603      	mov	r3, r0
 801b2c0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801b2c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b2c4:	2b00      	cmp	r3, #0
 801b2c6:	d106      	bne.n	801b2d6 <find_volume+0x272>
 801b2c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b2ca:	3334      	adds	r3, #52	@ 0x34
 801b2cc:	3320      	adds	r3, #32
 801b2ce:	4618      	mov	r0, r3
 801b2d0:	f7fe f80a 	bl	80192e8 <ld_dword>
 801b2d4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801b2d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b2d8:	3334      	adds	r3, #52	@ 0x34
 801b2da:	330e      	adds	r3, #14
 801b2dc:	4618      	mov	r0, r3
 801b2de:	f7fd ffeb 	bl	80192b8 <ld_word>
 801b2e2:	4603      	mov	r3, r0
 801b2e4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801b2e6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801b2e8:	2b00      	cmp	r3, #0
 801b2ea:	d101      	bne.n	801b2f0 <find_volume+0x28c>
 801b2ec:	230d      	movs	r3, #13
 801b2ee:	e0fd      	b.n	801b4ec <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801b2f0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801b2f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b2f4:	4413      	add	r3, r2
 801b2f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b2f8:	8912      	ldrh	r2, [r2, #8]
 801b2fa:	0912      	lsrs	r2, r2, #4
 801b2fc:	b292      	uxth	r2, r2
 801b2fe:	4413      	add	r3, r2
 801b300:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801b302:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801b304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b306:	429a      	cmp	r2, r3
 801b308:	d204      	bcs.n	801b314 <find_volume+0x2b0>
 801b30a:	230d      	movs	r3, #13
 801b30c:	e0ee      	b.n	801b4ec <find_volume+0x488>
 801b30e:	bf00      	nop
 801b310:	20001b6c 	.word	0x20001b6c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801b314:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801b316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b318:	1ad3      	subs	r3, r2, r3
 801b31a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b31c:	8952      	ldrh	r2, [r2, #10]
 801b31e:	fbb3 f3f2 	udiv	r3, r3, r2
 801b322:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801b324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b326:	2b00      	cmp	r3, #0
 801b328:	d101      	bne.n	801b32e <find_volume+0x2ca>
 801b32a:	230d      	movs	r3, #13
 801b32c:	e0de      	b.n	801b4ec <find_volume+0x488>
		fmt = FS_FAT32;
 801b32e:	2303      	movs	r3, #3
 801b330:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801b334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b336:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801b33a:	4293      	cmp	r3, r2
 801b33c:	d802      	bhi.n	801b344 <find_volume+0x2e0>
 801b33e:	2302      	movs	r3, #2
 801b340:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801b344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b346:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801b34a:	4293      	cmp	r3, r2
 801b34c:	d802      	bhi.n	801b354 <find_volume+0x2f0>
 801b34e:	2301      	movs	r3, #1
 801b350:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801b354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b356:	1c9a      	adds	r2, r3, #2
 801b358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b35a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 801b35c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b35e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801b360:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801b362:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801b364:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b366:	441a      	add	r2, r3
 801b368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b36a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 801b36c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801b36e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b370:	441a      	add	r2, r3
 801b372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b374:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 801b376:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b37a:	2b03      	cmp	r3, #3
 801b37c:	d11e      	bne.n	801b3bc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801b37e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b380:	3334      	adds	r3, #52	@ 0x34
 801b382:	332a      	adds	r3, #42	@ 0x2a
 801b384:	4618      	mov	r0, r3
 801b386:	f7fd ff97 	bl	80192b8 <ld_word>
 801b38a:	4603      	mov	r3, r0
 801b38c:	2b00      	cmp	r3, #0
 801b38e:	d001      	beq.n	801b394 <find_volume+0x330>
 801b390:	230d      	movs	r3, #13
 801b392:	e0ab      	b.n	801b4ec <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801b394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b396:	891b      	ldrh	r3, [r3, #8]
 801b398:	2b00      	cmp	r3, #0
 801b39a:	d001      	beq.n	801b3a0 <find_volume+0x33c>
 801b39c:	230d      	movs	r3, #13
 801b39e:	e0a5      	b.n	801b4ec <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801b3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3a2:	3334      	adds	r3, #52	@ 0x34
 801b3a4:	332c      	adds	r3, #44	@ 0x2c
 801b3a6:	4618      	mov	r0, r3
 801b3a8:	f7fd ff9e 	bl	80192e8 <ld_dword>
 801b3ac:	4602      	mov	r2, r0
 801b3ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3b0:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801b3b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3b4:	699b      	ldr	r3, [r3, #24]
 801b3b6:	009b      	lsls	r3, r3, #2
 801b3b8:	647b      	str	r3, [r7, #68]	@ 0x44
 801b3ba:	e01f      	b.n	801b3fc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801b3bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3be:	891b      	ldrh	r3, [r3, #8]
 801b3c0:	2b00      	cmp	r3, #0
 801b3c2:	d101      	bne.n	801b3c8 <find_volume+0x364>
 801b3c4:	230d      	movs	r3, #13
 801b3c6:	e091      	b.n	801b4ec <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801b3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b3cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b3ce:	441a      	add	r2, r3
 801b3d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3d2:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801b3d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b3d8:	2b02      	cmp	r3, #2
 801b3da:	d103      	bne.n	801b3e4 <find_volume+0x380>
 801b3dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3de:	699b      	ldr	r3, [r3, #24]
 801b3e0:	005b      	lsls	r3, r3, #1
 801b3e2:	e00a      	b.n	801b3fa <find_volume+0x396>
 801b3e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3e6:	699a      	ldr	r2, [r3, #24]
 801b3e8:	4613      	mov	r3, r2
 801b3ea:	005b      	lsls	r3, r3, #1
 801b3ec:	4413      	add	r3, r2
 801b3ee:	085a      	lsrs	r2, r3, #1
 801b3f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3f2:	699b      	ldr	r3, [r3, #24]
 801b3f4:	f003 0301 	and.w	r3, r3, #1
 801b3f8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801b3fa:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801b3fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3fe:	69da      	ldr	r2, [r3, #28]
 801b400:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b402:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 801b406:	0a5b      	lsrs	r3, r3, #9
 801b408:	429a      	cmp	r2, r3
 801b40a:	d201      	bcs.n	801b410 <find_volume+0x3ac>
 801b40c:	230d      	movs	r3, #13
 801b40e:	e06d      	b.n	801b4ec <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801b410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b412:	f04f 32ff 	mov.w	r2, #4294967295
 801b416:	615a      	str	r2, [r3, #20]
 801b418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b41a:	695a      	ldr	r2, [r3, #20]
 801b41c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b41e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801b420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b422:	2280      	movs	r2, #128	@ 0x80
 801b424:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801b426:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b42a:	2b03      	cmp	r3, #3
 801b42c:	d149      	bne.n	801b4c2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801b42e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b430:	3334      	adds	r3, #52	@ 0x34
 801b432:	3330      	adds	r3, #48	@ 0x30
 801b434:	4618      	mov	r0, r3
 801b436:	f7fd ff3f 	bl	80192b8 <ld_word>
 801b43a:	4603      	mov	r3, r0
 801b43c:	2b01      	cmp	r3, #1
 801b43e:	d140      	bne.n	801b4c2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 801b440:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b442:	3301      	adds	r3, #1
 801b444:	4619      	mov	r1, r3
 801b446:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801b448:	f7fe f9e6 	bl	8019818 <move_window>
 801b44c:	4603      	mov	r3, r0
 801b44e:	2b00      	cmp	r3, #0
 801b450:	d137      	bne.n	801b4c2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801b452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b454:	2200      	movs	r2, #0
 801b456:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801b458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b45a:	3334      	adds	r3, #52	@ 0x34
 801b45c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801b460:	4618      	mov	r0, r3
 801b462:	f7fd ff29 	bl	80192b8 <ld_word>
 801b466:	4603      	mov	r3, r0
 801b468:	461a      	mov	r2, r3
 801b46a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801b46e:	429a      	cmp	r2, r3
 801b470:	d127      	bne.n	801b4c2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801b472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b474:	3334      	adds	r3, #52	@ 0x34
 801b476:	4618      	mov	r0, r3
 801b478:	f7fd ff36 	bl	80192e8 <ld_dword>
 801b47c:	4603      	mov	r3, r0
 801b47e:	4a1d      	ldr	r2, [pc, #116]	@ (801b4f4 <find_volume+0x490>)
 801b480:	4293      	cmp	r3, r2
 801b482:	d11e      	bne.n	801b4c2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801b484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b486:	3334      	adds	r3, #52	@ 0x34
 801b488:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801b48c:	4618      	mov	r0, r3
 801b48e:	f7fd ff2b 	bl	80192e8 <ld_dword>
 801b492:	4603      	mov	r3, r0
 801b494:	4a18      	ldr	r2, [pc, #96]	@ (801b4f8 <find_volume+0x494>)
 801b496:	4293      	cmp	r3, r2
 801b498:	d113      	bne.n	801b4c2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801b49a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b49c:	3334      	adds	r3, #52	@ 0x34
 801b49e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801b4a2:	4618      	mov	r0, r3
 801b4a4:	f7fd ff20 	bl	80192e8 <ld_dword>
 801b4a8:	4602      	mov	r2, r0
 801b4aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b4ac:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801b4ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b4b0:	3334      	adds	r3, #52	@ 0x34
 801b4b2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801b4b6:	4618      	mov	r0, r3
 801b4b8:	f7fd ff16 	bl	80192e8 <ld_dword>
 801b4bc:	4602      	mov	r2, r0
 801b4be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b4c0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801b4c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b4c4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801b4c8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801b4ca:	4b0c      	ldr	r3, [pc, #48]	@ (801b4fc <find_volume+0x498>)
 801b4cc:	881b      	ldrh	r3, [r3, #0]
 801b4ce:	3301      	adds	r3, #1
 801b4d0:	b29a      	uxth	r2, r3
 801b4d2:	4b0a      	ldr	r3, [pc, #40]	@ (801b4fc <find_volume+0x498>)
 801b4d4:	801a      	strh	r2, [r3, #0]
 801b4d6:	4b09      	ldr	r3, [pc, #36]	@ (801b4fc <find_volume+0x498>)
 801b4d8:	881a      	ldrh	r2, [r3, #0]
 801b4da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b4dc:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801b4de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b4e0:	4a07      	ldr	r2, [pc, #28]	@ (801b500 <find_volume+0x49c>)
 801b4e2:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801b4e4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801b4e6:	f7fe f92f 	bl	8019748 <clear_lock>
#endif
	return FR_OK;
 801b4ea:	2300      	movs	r3, #0
}
 801b4ec:	4618      	mov	r0, r3
 801b4ee:	3758      	adds	r7, #88	@ 0x58
 801b4f0:	46bd      	mov	sp, r7
 801b4f2:	bd80      	pop	{r7, pc}
 801b4f4:	41615252 	.word	0x41615252
 801b4f8:	61417272 	.word	0x61417272
 801b4fc:	20001b70 	.word	0x20001b70
 801b500:	20001b94 	.word	0x20001b94

0801b504 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801b504:	b580      	push	{r7, lr}
 801b506:	b084      	sub	sp, #16
 801b508:	af00      	add	r7, sp, #0
 801b50a:	6078      	str	r0, [r7, #4]
 801b50c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801b50e:	2309      	movs	r3, #9
 801b510:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801b512:	687b      	ldr	r3, [r7, #4]
 801b514:	2b00      	cmp	r3, #0
 801b516:	d01c      	beq.n	801b552 <validate+0x4e>
 801b518:	687b      	ldr	r3, [r7, #4]
 801b51a:	681b      	ldr	r3, [r3, #0]
 801b51c:	2b00      	cmp	r3, #0
 801b51e:	d018      	beq.n	801b552 <validate+0x4e>
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	681b      	ldr	r3, [r3, #0]
 801b524:	781b      	ldrb	r3, [r3, #0]
 801b526:	2b00      	cmp	r3, #0
 801b528:	d013      	beq.n	801b552 <validate+0x4e>
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	889a      	ldrh	r2, [r3, #4]
 801b52e:	687b      	ldr	r3, [r7, #4]
 801b530:	681b      	ldr	r3, [r3, #0]
 801b532:	88db      	ldrh	r3, [r3, #6]
 801b534:	429a      	cmp	r2, r3
 801b536:	d10c      	bne.n	801b552 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801b538:	687b      	ldr	r3, [r7, #4]
 801b53a:	681b      	ldr	r3, [r3, #0]
 801b53c:	785b      	ldrb	r3, [r3, #1]
 801b53e:	4618      	mov	r0, r3
 801b540:	f7fd fe1a 	bl	8019178 <disk_status>
 801b544:	4603      	mov	r3, r0
 801b546:	f003 0301 	and.w	r3, r3, #1
 801b54a:	2b00      	cmp	r3, #0
 801b54c:	d101      	bne.n	801b552 <validate+0x4e>
			res = FR_OK;
 801b54e:	2300      	movs	r3, #0
 801b550:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801b552:	7bfb      	ldrb	r3, [r7, #15]
 801b554:	2b00      	cmp	r3, #0
 801b556:	d102      	bne.n	801b55e <validate+0x5a>
 801b558:	687b      	ldr	r3, [r7, #4]
 801b55a:	681b      	ldr	r3, [r3, #0]
 801b55c:	e000      	b.n	801b560 <validate+0x5c>
 801b55e:	2300      	movs	r3, #0
 801b560:	683a      	ldr	r2, [r7, #0]
 801b562:	6013      	str	r3, [r2, #0]
	return res;
 801b564:	7bfb      	ldrb	r3, [r7, #15]
}
 801b566:	4618      	mov	r0, r3
 801b568:	3710      	adds	r7, #16
 801b56a:	46bd      	mov	sp, r7
 801b56c:	bd80      	pop	{r7, pc}
	...

0801b570 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801b570:	b580      	push	{r7, lr}
 801b572:	b088      	sub	sp, #32
 801b574:	af00      	add	r7, sp, #0
 801b576:	60f8      	str	r0, [r7, #12]
 801b578:	60b9      	str	r1, [r7, #8]
 801b57a:	4613      	mov	r3, r2
 801b57c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801b57e:	68bb      	ldr	r3, [r7, #8]
 801b580:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801b582:	f107 0310 	add.w	r3, r7, #16
 801b586:	4618      	mov	r0, r3
 801b588:	f7ff fcd1 	bl	801af2e <get_ldnumber>
 801b58c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801b58e:	69fb      	ldr	r3, [r7, #28]
 801b590:	2b00      	cmp	r3, #0
 801b592:	da01      	bge.n	801b598 <f_mount+0x28>
 801b594:	230b      	movs	r3, #11
 801b596:	e02b      	b.n	801b5f0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801b598:	4a17      	ldr	r2, [pc, #92]	@ (801b5f8 <f_mount+0x88>)
 801b59a:	69fb      	ldr	r3, [r7, #28]
 801b59c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b5a0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801b5a2:	69bb      	ldr	r3, [r7, #24]
 801b5a4:	2b00      	cmp	r3, #0
 801b5a6:	d005      	beq.n	801b5b4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801b5a8:	69b8      	ldr	r0, [r7, #24]
 801b5aa:	f7fe f8cd 	bl	8019748 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801b5ae:	69bb      	ldr	r3, [r7, #24]
 801b5b0:	2200      	movs	r2, #0
 801b5b2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801b5b4:	68fb      	ldr	r3, [r7, #12]
 801b5b6:	2b00      	cmp	r3, #0
 801b5b8:	d002      	beq.n	801b5c0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801b5ba:	68fb      	ldr	r3, [r7, #12]
 801b5bc:	2200      	movs	r2, #0
 801b5be:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801b5c0:	68fa      	ldr	r2, [r7, #12]
 801b5c2:	490d      	ldr	r1, [pc, #52]	@ (801b5f8 <f_mount+0x88>)
 801b5c4:	69fb      	ldr	r3, [r7, #28]
 801b5c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801b5ca:	68fb      	ldr	r3, [r7, #12]
 801b5cc:	2b00      	cmp	r3, #0
 801b5ce:	d002      	beq.n	801b5d6 <f_mount+0x66>
 801b5d0:	79fb      	ldrb	r3, [r7, #7]
 801b5d2:	2b01      	cmp	r3, #1
 801b5d4:	d001      	beq.n	801b5da <f_mount+0x6a>
 801b5d6:	2300      	movs	r3, #0
 801b5d8:	e00a      	b.n	801b5f0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801b5da:	f107 010c 	add.w	r1, r7, #12
 801b5de:	f107 0308 	add.w	r3, r7, #8
 801b5e2:	2200      	movs	r2, #0
 801b5e4:	4618      	mov	r0, r3
 801b5e6:	f7ff fd3d 	bl	801b064 <find_volume>
 801b5ea:	4603      	mov	r3, r0
 801b5ec:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801b5ee:	7dfb      	ldrb	r3, [r7, #23]
}
 801b5f0:	4618      	mov	r0, r3
 801b5f2:	3720      	adds	r7, #32
 801b5f4:	46bd      	mov	sp, r7
 801b5f6:	bd80      	pop	{r7, pc}
 801b5f8:	20001b6c 	.word	0x20001b6c

0801b5fc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801b5fc:	b580      	push	{r7, lr}
 801b5fe:	b09a      	sub	sp, #104	@ 0x68
 801b600:	af00      	add	r7, sp, #0
 801b602:	60f8      	str	r0, [r7, #12]
 801b604:	60b9      	str	r1, [r7, #8]
 801b606:	4613      	mov	r3, r2
 801b608:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801b60a:	68fb      	ldr	r3, [r7, #12]
 801b60c:	2b00      	cmp	r3, #0
 801b60e:	d101      	bne.n	801b614 <f_open+0x18>
 801b610:	2309      	movs	r3, #9
 801b612:	e1a9      	b.n	801b968 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801b614:	79fb      	ldrb	r3, [r7, #7]
 801b616:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b61a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801b61c:	79fa      	ldrb	r2, [r7, #7]
 801b61e:	f107 0114 	add.w	r1, r7, #20
 801b622:	f107 0308 	add.w	r3, r7, #8
 801b626:	4618      	mov	r0, r3
 801b628:	f7ff fd1c 	bl	801b064 <find_volume>
 801b62c:	4603      	mov	r3, r0
 801b62e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 801b632:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b636:	2b00      	cmp	r3, #0
 801b638:	f040 818d 	bne.w	801b956 <f_open+0x35a>
		dj.obj.fs = fs;
 801b63c:	697b      	ldr	r3, [r7, #20]
 801b63e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801b640:	68ba      	ldr	r2, [r7, #8]
 801b642:	f107 0318 	add.w	r3, r7, #24
 801b646:	4611      	mov	r1, r2
 801b648:	4618      	mov	r0, r3
 801b64a:	f7ff fbff 	bl	801ae4c <follow_path>
 801b64e:	4603      	mov	r3, r0
 801b650:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801b654:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b658:	2b00      	cmp	r3, #0
 801b65a:	d118      	bne.n	801b68e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801b65c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801b660:	b25b      	sxtb	r3, r3
 801b662:	2b00      	cmp	r3, #0
 801b664:	da03      	bge.n	801b66e <f_open+0x72>
				res = FR_INVALID_NAME;
 801b666:	2306      	movs	r3, #6
 801b668:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801b66c:	e00f      	b.n	801b68e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801b66e:	79fb      	ldrb	r3, [r7, #7]
 801b670:	2b01      	cmp	r3, #1
 801b672:	bf8c      	ite	hi
 801b674:	2301      	movhi	r3, #1
 801b676:	2300      	movls	r3, #0
 801b678:	b2db      	uxtb	r3, r3
 801b67a:	461a      	mov	r2, r3
 801b67c:	f107 0318 	add.w	r3, r7, #24
 801b680:	4611      	mov	r1, r2
 801b682:	4618      	mov	r0, r3
 801b684:	f7fd ff18 	bl	80194b8 <chk_lock>
 801b688:	4603      	mov	r3, r0
 801b68a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801b68e:	79fb      	ldrb	r3, [r7, #7]
 801b690:	f003 031c 	and.w	r3, r3, #28
 801b694:	2b00      	cmp	r3, #0
 801b696:	d07f      	beq.n	801b798 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801b698:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b69c:	2b00      	cmp	r3, #0
 801b69e:	d017      	beq.n	801b6d0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801b6a0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b6a4:	2b04      	cmp	r3, #4
 801b6a6:	d10e      	bne.n	801b6c6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801b6a8:	f7fd ff62 	bl	8019570 <enq_lock>
 801b6ac:	4603      	mov	r3, r0
 801b6ae:	2b00      	cmp	r3, #0
 801b6b0:	d006      	beq.n	801b6c0 <f_open+0xc4>
 801b6b2:	f107 0318 	add.w	r3, r7, #24
 801b6b6:	4618      	mov	r0, r3
 801b6b8:	f7ff f83a 	bl	801a730 <dir_register>
 801b6bc:	4603      	mov	r3, r0
 801b6be:	e000      	b.n	801b6c2 <f_open+0xc6>
 801b6c0:	2312      	movs	r3, #18
 801b6c2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801b6c6:	79fb      	ldrb	r3, [r7, #7]
 801b6c8:	f043 0308 	orr.w	r3, r3, #8
 801b6cc:	71fb      	strb	r3, [r7, #7]
 801b6ce:	e010      	b.n	801b6f2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801b6d0:	7fbb      	ldrb	r3, [r7, #30]
 801b6d2:	f003 0311 	and.w	r3, r3, #17
 801b6d6:	2b00      	cmp	r3, #0
 801b6d8:	d003      	beq.n	801b6e2 <f_open+0xe6>
					res = FR_DENIED;
 801b6da:	2307      	movs	r3, #7
 801b6dc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801b6e0:	e007      	b.n	801b6f2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801b6e2:	79fb      	ldrb	r3, [r7, #7]
 801b6e4:	f003 0304 	and.w	r3, r3, #4
 801b6e8:	2b00      	cmp	r3, #0
 801b6ea:	d002      	beq.n	801b6f2 <f_open+0xf6>
 801b6ec:	2308      	movs	r3, #8
 801b6ee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801b6f2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b6f6:	2b00      	cmp	r3, #0
 801b6f8:	d168      	bne.n	801b7cc <f_open+0x1d0>
 801b6fa:	79fb      	ldrb	r3, [r7, #7]
 801b6fc:	f003 0308 	and.w	r3, r3, #8
 801b700:	2b00      	cmp	r3, #0
 801b702:	d063      	beq.n	801b7cc <f_open+0x1d0>
				dw = GET_FATTIME();
 801b704:	f7f8 f96e 	bl	80139e4 <get_fattime>
 801b708:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801b70a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b70c:	330e      	adds	r3, #14
 801b70e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801b710:	4618      	mov	r0, r3
 801b712:	f7fd fe27 	bl	8019364 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801b716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b718:	3316      	adds	r3, #22
 801b71a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801b71c:	4618      	mov	r0, r3
 801b71e:	f7fd fe21 	bl	8019364 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801b722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b724:	330b      	adds	r3, #11
 801b726:	2220      	movs	r2, #32
 801b728:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801b72a:	697b      	ldr	r3, [r7, #20]
 801b72c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b72e:	4611      	mov	r1, r2
 801b730:	4618      	mov	r0, r3
 801b732:	f7fe fd75 	bl	801a220 <ld_clust>
 801b736:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801b738:	697b      	ldr	r3, [r7, #20]
 801b73a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801b73c:	2200      	movs	r2, #0
 801b73e:	4618      	mov	r0, r3
 801b740:	f7fe fd8d 	bl	801a25e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801b744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b746:	331c      	adds	r3, #28
 801b748:	2100      	movs	r1, #0
 801b74a:	4618      	mov	r0, r3
 801b74c:	f7fd fe0a 	bl	8019364 <st_dword>
					fs->wflag = 1;
 801b750:	697b      	ldr	r3, [r7, #20]
 801b752:	2201      	movs	r2, #1
 801b754:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801b756:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b758:	2b00      	cmp	r3, #0
 801b75a:	d037      	beq.n	801b7cc <f_open+0x1d0>
						dw = fs->winsect;
 801b75c:	697b      	ldr	r3, [r7, #20]
 801b75e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b760:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801b762:	f107 0318 	add.w	r3, r7, #24
 801b766:	2200      	movs	r2, #0
 801b768:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801b76a:	4618      	mov	r0, r3
 801b76c:	f7fe faa0 	bl	8019cb0 <remove_chain>
 801b770:	4603      	mov	r3, r0
 801b772:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 801b776:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b77a:	2b00      	cmp	r3, #0
 801b77c:	d126      	bne.n	801b7cc <f_open+0x1d0>
							res = move_window(fs, dw);
 801b77e:	697b      	ldr	r3, [r7, #20]
 801b780:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801b782:	4618      	mov	r0, r3
 801b784:	f7fe f848 	bl	8019818 <move_window>
 801b788:	4603      	mov	r3, r0
 801b78a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801b78e:	697b      	ldr	r3, [r7, #20]
 801b790:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b792:	3a01      	subs	r2, #1
 801b794:	611a      	str	r2, [r3, #16]
 801b796:	e019      	b.n	801b7cc <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801b798:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b79c:	2b00      	cmp	r3, #0
 801b79e:	d115      	bne.n	801b7cc <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801b7a0:	7fbb      	ldrb	r3, [r7, #30]
 801b7a2:	f003 0310 	and.w	r3, r3, #16
 801b7a6:	2b00      	cmp	r3, #0
 801b7a8:	d003      	beq.n	801b7b2 <f_open+0x1b6>
					res = FR_NO_FILE;
 801b7aa:	2304      	movs	r3, #4
 801b7ac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801b7b0:	e00c      	b.n	801b7cc <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801b7b2:	79fb      	ldrb	r3, [r7, #7]
 801b7b4:	f003 0302 	and.w	r3, r3, #2
 801b7b8:	2b00      	cmp	r3, #0
 801b7ba:	d007      	beq.n	801b7cc <f_open+0x1d0>
 801b7bc:	7fbb      	ldrb	r3, [r7, #30]
 801b7be:	f003 0301 	and.w	r3, r3, #1
 801b7c2:	2b00      	cmp	r3, #0
 801b7c4:	d002      	beq.n	801b7cc <f_open+0x1d0>
						res = FR_DENIED;
 801b7c6:	2307      	movs	r3, #7
 801b7c8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801b7cc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b7d0:	2b00      	cmp	r3, #0
 801b7d2:	d126      	bne.n	801b822 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801b7d4:	79fb      	ldrb	r3, [r7, #7]
 801b7d6:	f003 0308 	and.w	r3, r3, #8
 801b7da:	2b00      	cmp	r3, #0
 801b7dc:	d003      	beq.n	801b7e6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801b7de:	79fb      	ldrb	r3, [r7, #7]
 801b7e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b7e4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801b7e6:	697b      	ldr	r3, [r7, #20]
 801b7e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801b7ea:	68fb      	ldr	r3, [r7, #12]
 801b7ec:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801b7ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b7f0:	68fb      	ldr	r3, [r7, #12]
 801b7f2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801b7f4:	79fb      	ldrb	r3, [r7, #7]
 801b7f6:	2b01      	cmp	r3, #1
 801b7f8:	bf8c      	ite	hi
 801b7fa:	2301      	movhi	r3, #1
 801b7fc:	2300      	movls	r3, #0
 801b7fe:	b2db      	uxtb	r3, r3
 801b800:	461a      	mov	r2, r3
 801b802:	f107 0318 	add.w	r3, r7, #24
 801b806:	4611      	mov	r1, r2
 801b808:	4618      	mov	r0, r3
 801b80a:	f7fd fed3 	bl	80195b4 <inc_lock>
 801b80e:	4602      	mov	r2, r0
 801b810:	68fb      	ldr	r3, [r7, #12]
 801b812:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801b814:	68fb      	ldr	r3, [r7, #12]
 801b816:	691b      	ldr	r3, [r3, #16]
 801b818:	2b00      	cmp	r3, #0
 801b81a:	d102      	bne.n	801b822 <f_open+0x226>
 801b81c:	2302      	movs	r3, #2
 801b81e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801b822:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b826:	2b00      	cmp	r3, #0
 801b828:	f040 8095 	bne.w	801b956 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801b82c:	697b      	ldr	r3, [r7, #20]
 801b82e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b830:	4611      	mov	r1, r2
 801b832:	4618      	mov	r0, r3
 801b834:	f7fe fcf4 	bl	801a220 <ld_clust>
 801b838:	4602      	mov	r2, r0
 801b83a:	68fb      	ldr	r3, [r7, #12]
 801b83c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801b83e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b840:	331c      	adds	r3, #28
 801b842:	4618      	mov	r0, r3
 801b844:	f7fd fd50 	bl	80192e8 <ld_dword>
 801b848:	4602      	mov	r2, r0
 801b84a:	68fb      	ldr	r3, [r7, #12]
 801b84c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801b84e:	68fb      	ldr	r3, [r7, #12]
 801b850:	2200      	movs	r2, #0
 801b852:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801b854:	697a      	ldr	r2, [r7, #20]
 801b856:	68fb      	ldr	r3, [r7, #12]
 801b858:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801b85a:	697b      	ldr	r3, [r7, #20]
 801b85c:	88da      	ldrh	r2, [r3, #6]
 801b85e:	68fb      	ldr	r3, [r7, #12]
 801b860:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801b862:	68fb      	ldr	r3, [r7, #12]
 801b864:	79fa      	ldrb	r2, [r7, #7]
 801b866:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801b868:	68fb      	ldr	r3, [r7, #12]
 801b86a:	2200      	movs	r2, #0
 801b86c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801b86e:	68fb      	ldr	r3, [r7, #12]
 801b870:	2200      	movs	r2, #0
 801b872:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801b874:	68fb      	ldr	r3, [r7, #12]
 801b876:	2200      	movs	r2, #0
 801b878:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801b87a:	68fb      	ldr	r3, [r7, #12]
 801b87c:	3330      	adds	r3, #48	@ 0x30
 801b87e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b882:	2100      	movs	r1, #0
 801b884:	4618      	mov	r0, r3
 801b886:	f7fd fdba 	bl	80193fe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801b88a:	79fb      	ldrb	r3, [r7, #7]
 801b88c:	f003 0320 	and.w	r3, r3, #32
 801b890:	2b00      	cmp	r3, #0
 801b892:	d060      	beq.n	801b956 <f_open+0x35a>
 801b894:	68fb      	ldr	r3, [r7, #12]
 801b896:	68db      	ldr	r3, [r3, #12]
 801b898:	2b00      	cmp	r3, #0
 801b89a:	d05c      	beq.n	801b956 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801b89c:	68fb      	ldr	r3, [r7, #12]
 801b89e:	68da      	ldr	r2, [r3, #12]
 801b8a0:	68fb      	ldr	r3, [r7, #12]
 801b8a2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801b8a4:	697b      	ldr	r3, [r7, #20]
 801b8a6:	895b      	ldrh	r3, [r3, #10]
 801b8a8:	025b      	lsls	r3, r3, #9
 801b8aa:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801b8ac:	68fb      	ldr	r3, [r7, #12]
 801b8ae:	689b      	ldr	r3, [r3, #8]
 801b8b0:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801b8b2:	68fb      	ldr	r3, [r7, #12]
 801b8b4:	68db      	ldr	r3, [r3, #12]
 801b8b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801b8b8:	e016      	b.n	801b8e8 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 801b8ba:	68fb      	ldr	r3, [r7, #12]
 801b8bc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801b8be:	4618      	mov	r0, r3
 801b8c0:	f7fe f865 	bl	801998e <get_fat>
 801b8c4:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801b8c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b8c8:	2b01      	cmp	r3, #1
 801b8ca:	d802      	bhi.n	801b8d2 <f_open+0x2d6>
 801b8cc:	2302      	movs	r3, #2
 801b8ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801b8d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b8d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b8d8:	d102      	bne.n	801b8e0 <f_open+0x2e4>
 801b8da:	2301      	movs	r3, #1
 801b8dc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801b8e0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801b8e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b8e4:	1ad3      	subs	r3, r2, r3
 801b8e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801b8e8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b8ec:	2b00      	cmp	r3, #0
 801b8ee:	d103      	bne.n	801b8f8 <f_open+0x2fc>
 801b8f0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801b8f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b8f4:	429a      	cmp	r2, r3
 801b8f6:	d8e0      	bhi.n	801b8ba <f_open+0x2be>
				}
				fp->clust = clst;
 801b8f8:	68fb      	ldr	r3, [r7, #12]
 801b8fa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801b8fc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801b8fe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b902:	2b00      	cmp	r3, #0
 801b904:	d127      	bne.n	801b956 <f_open+0x35a>
 801b906:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b90c:	2b00      	cmp	r3, #0
 801b90e:	d022      	beq.n	801b956 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801b910:	697b      	ldr	r3, [r7, #20]
 801b912:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801b914:	4618      	mov	r0, r3
 801b916:	f7fe f81b 	bl	8019950 <clust2sect>
 801b91a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801b91c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b91e:	2b00      	cmp	r3, #0
 801b920:	d103      	bne.n	801b92a <f_open+0x32e>
						res = FR_INT_ERR;
 801b922:	2302      	movs	r3, #2
 801b924:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801b928:	e015      	b.n	801b956 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801b92a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b92c:	0a5a      	lsrs	r2, r3, #9
 801b92e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b930:	441a      	add	r2, r3
 801b932:	68fb      	ldr	r3, [r7, #12]
 801b934:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801b936:	697b      	ldr	r3, [r7, #20]
 801b938:	7858      	ldrb	r0, [r3, #1]
 801b93a:	68fb      	ldr	r3, [r7, #12]
 801b93c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801b940:	68fb      	ldr	r3, [r7, #12]
 801b942:	6a1a      	ldr	r2, [r3, #32]
 801b944:	2301      	movs	r3, #1
 801b946:	f7fd fc59 	bl	80191fc <disk_read>
 801b94a:	4603      	mov	r3, r0
 801b94c:	2b00      	cmp	r3, #0
 801b94e:	d002      	beq.n	801b956 <f_open+0x35a>
 801b950:	2301      	movs	r3, #1
 801b952:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801b956:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	d002      	beq.n	801b964 <f_open+0x368>
 801b95e:	68fb      	ldr	r3, [r7, #12]
 801b960:	2200      	movs	r2, #0
 801b962:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801b964:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 801b968:	4618      	mov	r0, r3
 801b96a:	3768      	adds	r7, #104	@ 0x68
 801b96c:	46bd      	mov	sp, r7
 801b96e:	bd80      	pop	{r7, pc}

0801b970 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801b970:	b580      	push	{r7, lr}
 801b972:	b08c      	sub	sp, #48	@ 0x30
 801b974:	af00      	add	r7, sp, #0
 801b976:	60f8      	str	r0, [r7, #12]
 801b978:	60b9      	str	r1, [r7, #8]
 801b97a:	607a      	str	r2, [r7, #4]
 801b97c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801b97e:	68bb      	ldr	r3, [r7, #8]
 801b980:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801b982:	683b      	ldr	r3, [r7, #0]
 801b984:	2200      	movs	r2, #0
 801b986:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801b988:	68fb      	ldr	r3, [r7, #12]
 801b98a:	f107 0210 	add.w	r2, r7, #16
 801b98e:	4611      	mov	r1, r2
 801b990:	4618      	mov	r0, r3
 801b992:	f7ff fdb7 	bl	801b504 <validate>
 801b996:	4603      	mov	r3, r0
 801b998:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801b99c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801b9a0:	2b00      	cmp	r3, #0
 801b9a2:	d107      	bne.n	801b9b4 <f_write+0x44>
 801b9a4:	68fb      	ldr	r3, [r7, #12]
 801b9a6:	7d5b      	ldrb	r3, [r3, #21]
 801b9a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801b9ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801b9b0:	2b00      	cmp	r3, #0
 801b9b2:	d002      	beq.n	801b9ba <f_write+0x4a>
 801b9b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801b9b8:	e14b      	b.n	801bc52 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801b9ba:	68fb      	ldr	r3, [r7, #12]
 801b9bc:	7d1b      	ldrb	r3, [r3, #20]
 801b9be:	f003 0302 	and.w	r3, r3, #2
 801b9c2:	2b00      	cmp	r3, #0
 801b9c4:	d101      	bne.n	801b9ca <f_write+0x5a>
 801b9c6:	2307      	movs	r3, #7
 801b9c8:	e143      	b.n	801bc52 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801b9ca:	68fb      	ldr	r3, [r7, #12]
 801b9cc:	699a      	ldr	r2, [r3, #24]
 801b9ce:	687b      	ldr	r3, [r7, #4]
 801b9d0:	441a      	add	r2, r3
 801b9d2:	68fb      	ldr	r3, [r7, #12]
 801b9d4:	699b      	ldr	r3, [r3, #24]
 801b9d6:	429a      	cmp	r2, r3
 801b9d8:	f080 812d 	bcs.w	801bc36 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801b9dc:	68fb      	ldr	r3, [r7, #12]
 801b9de:	699b      	ldr	r3, [r3, #24]
 801b9e0:	43db      	mvns	r3, r3
 801b9e2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801b9e4:	e127      	b.n	801bc36 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801b9e6:	68fb      	ldr	r3, [r7, #12]
 801b9e8:	699b      	ldr	r3, [r3, #24]
 801b9ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b9ee:	2b00      	cmp	r3, #0
 801b9f0:	f040 80e3 	bne.w	801bbba <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801b9f4:	68fb      	ldr	r3, [r7, #12]
 801b9f6:	699b      	ldr	r3, [r3, #24]
 801b9f8:	0a5b      	lsrs	r3, r3, #9
 801b9fa:	693a      	ldr	r2, [r7, #16]
 801b9fc:	8952      	ldrh	r2, [r2, #10]
 801b9fe:	3a01      	subs	r2, #1
 801ba00:	4013      	ands	r3, r2
 801ba02:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801ba04:	69bb      	ldr	r3, [r7, #24]
 801ba06:	2b00      	cmp	r3, #0
 801ba08:	d143      	bne.n	801ba92 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801ba0a:	68fb      	ldr	r3, [r7, #12]
 801ba0c:	699b      	ldr	r3, [r3, #24]
 801ba0e:	2b00      	cmp	r3, #0
 801ba10:	d10c      	bne.n	801ba2c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801ba12:	68fb      	ldr	r3, [r7, #12]
 801ba14:	689b      	ldr	r3, [r3, #8]
 801ba16:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801ba18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	d11a      	bne.n	801ba54 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801ba1e:	68fb      	ldr	r3, [r7, #12]
 801ba20:	2100      	movs	r1, #0
 801ba22:	4618      	mov	r0, r3
 801ba24:	f7fe f9a9 	bl	8019d7a <create_chain>
 801ba28:	62b8      	str	r0, [r7, #40]	@ 0x28
 801ba2a:	e013      	b.n	801ba54 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801ba2c:	68fb      	ldr	r3, [r7, #12]
 801ba2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ba30:	2b00      	cmp	r3, #0
 801ba32:	d007      	beq.n	801ba44 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801ba34:	68fb      	ldr	r3, [r7, #12]
 801ba36:	699b      	ldr	r3, [r3, #24]
 801ba38:	4619      	mov	r1, r3
 801ba3a:	68f8      	ldr	r0, [r7, #12]
 801ba3c:	f7fe fa35 	bl	8019eaa <clmt_clust>
 801ba40:	62b8      	str	r0, [r7, #40]	@ 0x28
 801ba42:	e007      	b.n	801ba54 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801ba44:	68fa      	ldr	r2, [r7, #12]
 801ba46:	68fb      	ldr	r3, [r7, #12]
 801ba48:	69db      	ldr	r3, [r3, #28]
 801ba4a:	4619      	mov	r1, r3
 801ba4c:	4610      	mov	r0, r2
 801ba4e:	f7fe f994 	bl	8019d7a <create_chain>
 801ba52:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801ba54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba56:	2b00      	cmp	r3, #0
 801ba58:	f000 80f2 	beq.w	801bc40 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801ba5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba5e:	2b01      	cmp	r3, #1
 801ba60:	d104      	bne.n	801ba6c <f_write+0xfc>
 801ba62:	68fb      	ldr	r3, [r7, #12]
 801ba64:	2202      	movs	r2, #2
 801ba66:	755a      	strb	r2, [r3, #21]
 801ba68:	2302      	movs	r3, #2
 801ba6a:	e0f2      	b.n	801bc52 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801ba6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ba72:	d104      	bne.n	801ba7e <f_write+0x10e>
 801ba74:	68fb      	ldr	r3, [r7, #12]
 801ba76:	2201      	movs	r2, #1
 801ba78:	755a      	strb	r2, [r3, #21]
 801ba7a:	2301      	movs	r3, #1
 801ba7c:	e0e9      	b.n	801bc52 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801ba7e:	68fb      	ldr	r3, [r7, #12]
 801ba80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ba82:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801ba84:	68fb      	ldr	r3, [r7, #12]
 801ba86:	689b      	ldr	r3, [r3, #8]
 801ba88:	2b00      	cmp	r3, #0
 801ba8a:	d102      	bne.n	801ba92 <f_write+0x122>
 801ba8c:	68fb      	ldr	r3, [r7, #12]
 801ba8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ba90:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801ba92:	68fb      	ldr	r3, [r7, #12]
 801ba94:	7d1b      	ldrb	r3, [r3, #20]
 801ba96:	b25b      	sxtb	r3, r3
 801ba98:	2b00      	cmp	r3, #0
 801ba9a:	da18      	bge.n	801bace <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801ba9c:	693b      	ldr	r3, [r7, #16]
 801ba9e:	7858      	ldrb	r0, [r3, #1]
 801baa0:	68fb      	ldr	r3, [r7, #12]
 801baa2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801baa6:	68fb      	ldr	r3, [r7, #12]
 801baa8:	6a1a      	ldr	r2, [r3, #32]
 801baaa:	2301      	movs	r3, #1
 801baac:	f7fd fbc6 	bl	801923c <disk_write>
 801bab0:	4603      	mov	r3, r0
 801bab2:	2b00      	cmp	r3, #0
 801bab4:	d004      	beq.n	801bac0 <f_write+0x150>
 801bab6:	68fb      	ldr	r3, [r7, #12]
 801bab8:	2201      	movs	r2, #1
 801baba:	755a      	strb	r2, [r3, #21]
 801babc:	2301      	movs	r3, #1
 801babe:	e0c8      	b.n	801bc52 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801bac0:	68fb      	ldr	r3, [r7, #12]
 801bac2:	7d1b      	ldrb	r3, [r3, #20]
 801bac4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801bac8:	b2da      	uxtb	r2, r3
 801baca:	68fb      	ldr	r3, [r7, #12]
 801bacc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801bace:	693a      	ldr	r2, [r7, #16]
 801bad0:	68fb      	ldr	r3, [r7, #12]
 801bad2:	69db      	ldr	r3, [r3, #28]
 801bad4:	4619      	mov	r1, r3
 801bad6:	4610      	mov	r0, r2
 801bad8:	f7fd ff3a 	bl	8019950 <clust2sect>
 801badc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801bade:	697b      	ldr	r3, [r7, #20]
 801bae0:	2b00      	cmp	r3, #0
 801bae2:	d104      	bne.n	801baee <f_write+0x17e>
 801bae4:	68fb      	ldr	r3, [r7, #12]
 801bae6:	2202      	movs	r2, #2
 801bae8:	755a      	strb	r2, [r3, #21]
 801baea:	2302      	movs	r3, #2
 801baec:	e0b1      	b.n	801bc52 <f_write+0x2e2>
			sect += csect;
 801baee:	697a      	ldr	r2, [r7, #20]
 801baf0:	69bb      	ldr	r3, [r7, #24]
 801baf2:	4413      	add	r3, r2
 801baf4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801baf6:	687b      	ldr	r3, [r7, #4]
 801baf8:	0a5b      	lsrs	r3, r3, #9
 801bafa:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801bafc:	6a3b      	ldr	r3, [r7, #32]
 801bafe:	2b00      	cmp	r3, #0
 801bb00:	d03c      	beq.n	801bb7c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801bb02:	69ba      	ldr	r2, [r7, #24]
 801bb04:	6a3b      	ldr	r3, [r7, #32]
 801bb06:	4413      	add	r3, r2
 801bb08:	693a      	ldr	r2, [r7, #16]
 801bb0a:	8952      	ldrh	r2, [r2, #10]
 801bb0c:	4293      	cmp	r3, r2
 801bb0e:	d905      	bls.n	801bb1c <f_write+0x1ac>
					cc = fs->csize - csect;
 801bb10:	693b      	ldr	r3, [r7, #16]
 801bb12:	895b      	ldrh	r3, [r3, #10]
 801bb14:	461a      	mov	r2, r3
 801bb16:	69bb      	ldr	r3, [r7, #24]
 801bb18:	1ad3      	subs	r3, r2, r3
 801bb1a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801bb1c:	693b      	ldr	r3, [r7, #16]
 801bb1e:	7858      	ldrb	r0, [r3, #1]
 801bb20:	6a3b      	ldr	r3, [r7, #32]
 801bb22:	697a      	ldr	r2, [r7, #20]
 801bb24:	69f9      	ldr	r1, [r7, #28]
 801bb26:	f7fd fb89 	bl	801923c <disk_write>
 801bb2a:	4603      	mov	r3, r0
 801bb2c:	2b00      	cmp	r3, #0
 801bb2e:	d004      	beq.n	801bb3a <f_write+0x1ca>
 801bb30:	68fb      	ldr	r3, [r7, #12]
 801bb32:	2201      	movs	r2, #1
 801bb34:	755a      	strb	r2, [r3, #21]
 801bb36:	2301      	movs	r3, #1
 801bb38:	e08b      	b.n	801bc52 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801bb3a:	68fb      	ldr	r3, [r7, #12]
 801bb3c:	6a1a      	ldr	r2, [r3, #32]
 801bb3e:	697b      	ldr	r3, [r7, #20]
 801bb40:	1ad3      	subs	r3, r2, r3
 801bb42:	6a3a      	ldr	r2, [r7, #32]
 801bb44:	429a      	cmp	r2, r3
 801bb46:	d915      	bls.n	801bb74 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801bb48:	68fb      	ldr	r3, [r7, #12]
 801bb4a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801bb4e:	68fb      	ldr	r3, [r7, #12]
 801bb50:	6a1a      	ldr	r2, [r3, #32]
 801bb52:	697b      	ldr	r3, [r7, #20]
 801bb54:	1ad3      	subs	r3, r2, r3
 801bb56:	025b      	lsls	r3, r3, #9
 801bb58:	69fa      	ldr	r2, [r7, #28]
 801bb5a:	4413      	add	r3, r2
 801bb5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801bb60:	4619      	mov	r1, r3
 801bb62:	f7fd fc2b 	bl	80193bc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801bb66:	68fb      	ldr	r3, [r7, #12]
 801bb68:	7d1b      	ldrb	r3, [r3, #20]
 801bb6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801bb6e:	b2da      	uxtb	r2, r3
 801bb70:	68fb      	ldr	r3, [r7, #12]
 801bb72:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801bb74:	6a3b      	ldr	r3, [r7, #32]
 801bb76:	025b      	lsls	r3, r3, #9
 801bb78:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801bb7a:	e03f      	b.n	801bbfc <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801bb7c:	68fb      	ldr	r3, [r7, #12]
 801bb7e:	6a1b      	ldr	r3, [r3, #32]
 801bb80:	697a      	ldr	r2, [r7, #20]
 801bb82:	429a      	cmp	r2, r3
 801bb84:	d016      	beq.n	801bbb4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801bb86:	68fb      	ldr	r3, [r7, #12]
 801bb88:	699a      	ldr	r2, [r3, #24]
 801bb8a:	68fb      	ldr	r3, [r7, #12]
 801bb8c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801bb8e:	429a      	cmp	r2, r3
 801bb90:	d210      	bcs.n	801bbb4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801bb92:	693b      	ldr	r3, [r7, #16]
 801bb94:	7858      	ldrb	r0, [r3, #1]
 801bb96:	68fb      	ldr	r3, [r7, #12]
 801bb98:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801bb9c:	2301      	movs	r3, #1
 801bb9e:	697a      	ldr	r2, [r7, #20]
 801bba0:	f7fd fb2c 	bl	80191fc <disk_read>
 801bba4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801bba6:	2b00      	cmp	r3, #0
 801bba8:	d004      	beq.n	801bbb4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 801bbaa:	68fb      	ldr	r3, [r7, #12]
 801bbac:	2201      	movs	r2, #1
 801bbae:	755a      	strb	r2, [r3, #21]
 801bbb0:	2301      	movs	r3, #1
 801bbb2:	e04e      	b.n	801bc52 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801bbb4:	68fb      	ldr	r3, [r7, #12]
 801bbb6:	697a      	ldr	r2, [r7, #20]
 801bbb8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801bbba:	68fb      	ldr	r3, [r7, #12]
 801bbbc:	699b      	ldr	r3, [r3, #24]
 801bbbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bbc2:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801bbc6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801bbc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bbca:	687b      	ldr	r3, [r7, #4]
 801bbcc:	429a      	cmp	r2, r3
 801bbce:	d901      	bls.n	801bbd4 <f_write+0x264>
 801bbd0:	687b      	ldr	r3, [r7, #4]
 801bbd2:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801bbd4:	68fb      	ldr	r3, [r7, #12]
 801bbd6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801bbda:	68fb      	ldr	r3, [r7, #12]
 801bbdc:	699b      	ldr	r3, [r3, #24]
 801bbde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bbe2:	4413      	add	r3, r2
 801bbe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bbe6:	69f9      	ldr	r1, [r7, #28]
 801bbe8:	4618      	mov	r0, r3
 801bbea:	f7fd fbe7 	bl	80193bc <mem_cpy>
		fp->flag |= FA_DIRTY;
 801bbee:	68fb      	ldr	r3, [r7, #12]
 801bbf0:	7d1b      	ldrb	r3, [r3, #20]
 801bbf2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801bbf6:	b2da      	uxtb	r2, r3
 801bbf8:	68fb      	ldr	r3, [r7, #12]
 801bbfa:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801bbfc:	69fa      	ldr	r2, [r7, #28]
 801bbfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bc00:	4413      	add	r3, r2
 801bc02:	61fb      	str	r3, [r7, #28]
 801bc04:	68fb      	ldr	r3, [r7, #12]
 801bc06:	699a      	ldr	r2, [r3, #24]
 801bc08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bc0a:	441a      	add	r2, r3
 801bc0c:	68fb      	ldr	r3, [r7, #12]
 801bc0e:	619a      	str	r2, [r3, #24]
 801bc10:	68fb      	ldr	r3, [r7, #12]
 801bc12:	68da      	ldr	r2, [r3, #12]
 801bc14:	68fb      	ldr	r3, [r7, #12]
 801bc16:	699b      	ldr	r3, [r3, #24]
 801bc18:	429a      	cmp	r2, r3
 801bc1a:	bf38      	it	cc
 801bc1c:	461a      	movcc	r2, r3
 801bc1e:	68fb      	ldr	r3, [r7, #12]
 801bc20:	60da      	str	r2, [r3, #12]
 801bc22:	683b      	ldr	r3, [r7, #0]
 801bc24:	681a      	ldr	r2, [r3, #0]
 801bc26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bc28:	441a      	add	r2, r3
 801bc2a:	683b      	ldr	r3, [r7, #0]
 801bc2c:	601a      	str	r2, [r3, #0]
 801bc2e:	687a      	ldr	r2, [r7, #4]
 801bc30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bc32:	1ad3      	subs	r3, r2, r3
 801bc34:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801bc36:	687b      	ldr	r3, [r7, #4]
 801bc38:	2b00      	cmp	r3, #0
 801bc3a:	f47f aed4 	bne.w	801b9e6 <f_write+0x76>
 801bc3e:	e000      	b.n	801bc42 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801bc40:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801bc42:	68fb      	ldr	r3, [r7, #12]
 801bc44:	7d1b      	ldrb	r3, [r3, #20]
 801bc46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bc4a:	b2da      	uxtb	r2, r3
 801bc4c:	68fb      	ldr	r3, [r7, #12]
 801bc4e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801bc50:	2300      	movs	r3, #0
}
 801bc52:	4618      	mov	r0, r3
 801bc54:	3730      	adds	r7, #48	@ 0x30
 801bc56:	46bd      	mov	sp, r7
 801bc58:	bd80      	pop	{r7, pc}

0801bc5a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801bc5a:	b580      	push	{r7, lr}
 801bc5c:	b086      	sub	sp, #24
 801bc5e:	af00      	add	r7, sp, #0
 801bc60:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801bc62:	687b      	ldr	r3, [r7, #4]
 801bc64:	f107 0208 	add.w	r2, r7, #8
 801bc68:	4611      	mov	r1, r2
 801bc6a:	4618      	mov	r0, r3
 801bc6c:	f7ff fc4a 	bl	801b504 <validate>
 801bc70:	4603      	mov	r3, r0
 801bc72:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801bc74:	7dfb      	ldrb	r3, [r7, #23]
 801bc76:	2b00      	cmp	r3, #0
 801bc78:	d168      	bne.n	801bd4c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801bc7a:	687b      	ldr	r3, [r7, #4]
 801bc7c:	7d1b      	ldrb	r3, [r3, #20]
 801bc7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801bc82:	2b00      	cmp	r3, #0
 801bc84:	d062      	beq.n	801bd4c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801bc86:	687b      	ldr	r3, [r7, #4]
 801bc88:	7d1b      	ldrb	r3, [r3, #20]
 801bc8a:	b25b      	sxtb	r3, r3
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	da15      	bge.n	801bcbc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801bc90:	68bb      	ldr	r3, [r7, #8]
 801bc92:	7858      	ldrb	r0, [r3, #1]
 801bc94:	687b      	ldr	r3, [r7, #4]
 801bc96:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801bc9a:	687b      	ldr	r3, [r7, #4]
 801bc9c:	6a1a      	ldr	r2, [r3, #32]
 801bc9e:	2301      	movs	r3, #1
 801bca0:	f7fd facc 	bl	801923c <disk_write>
 801bca4:	4603      	mov	r3, r0
 801bca6:	2b00      	cmp	r3, #0
 801bca8:	d001      	beq.n	801bcae <f_sync+0x54>
 801bcaa:	2301      	movs	r3, #1
 801bcac:	e04f      	b.n	801bd4e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801bcae:	687b      	ldr	r3, [r7, #4]
 801bcb0:	7d1b      	ldrb	r3, [r3, #20]
 801bcb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801bcb6:	b2da      	uxtb	r2, r3
 801bcb8:	687b      	ldr	r3, [r7, #4]
 801bcba:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801bcbc:	f7f7 fe92 	bl	80139e4 <get_fattime>
 801bcc0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801bcc2:	68ba      	ldr	r2, [r7, #8]
 801bcc4:	687b      	ldr	r3, [r7, #4]
 801bcc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bcc8:	4619      	mov	r1, r3
 801bcca:	4610      	mov	r0, r2
 801bccc:	f7fd fda4 	bl	8019818 <move_window>
 801bcd0:	4603      	mov	r3, r0
 801bcd2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801bcd4:	7dfb      	ldrb	r3, [r7, #23]
 801bcd6:	2b00      	cmp	r3, #0
 801bcd8:	d138      	bne.n	801bd4c <f_sync+0xf2>
					dir = fp->dir_ptr;
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bcde:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801bce0:	68fb      	ldr	r3, [r7, #12]
 801bce2:	330b      	adds	r3, #11
 801bce4:	781a      	ldrb	r2, [r3, #0]
 801bce6:	68fb      	ldr	r3, [r7, #12]
 801bce8:	330b      	adds	r3, #11
 801bcea:	f042 0220 	orr.w	r2, r2, #32
 801bcee:	b2d2      	uxtb	r2, r2
 801bcf0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801bcf2:	687b      	ldr	r3, [r7, #4]
 801bcf4:	6818      	ldr	r0, [r3, #0]
 801bcf6:	687b      	ldr	r3, [r7, #4]
 801bcf8:	689b      	ldr	r3, [r3, #8]
 801bcfa:	461a      	mov	r2, r3
 801bcfc:	68f9      	ldr	r1, [r7, #12]
 801bcfe:	f7fe faae 	bl	801a25e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801bd02:	68fb      	ldr	r3, [r7, #12]
 801bd04:	f103 021c 	add.w	r2, r3, #28
 801bd08:	687b      	ldr	r3, [r7, #4]
 801bd0a:	68db      	ldr	r3, [r3, #12]
 801bd0c:	4619      	mov	r1, r3
 801bd0e:	4610      	mov	r0, r2
 801bd10:	f7fd fb28 	bl	8019364 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801bd14:	68fb      	ldr	r3, [r7, #12]
 801bd16:	3316      	adds	r3, #22
 801bd18:	6939      	ldr	r1, [r7, #16]
 801bd1a:	4618      	mov	r0, r3
 801bd1c:	f7fd fb22 	bl	8019364 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801bd20:	68fb      	ldr	r3, [r7, #12]
 801bd22:	3312      	adds	r3, #18
 801bd24:	2100      	movs	r1, #0
 801bd26:	4618      	mov	r0, r3
 801bd28:	f7fd fb01 	bl	801932e <st_word>
					fs->wflag = 1;
 801bd2c:	68bb      	ldr	r3, [r7, #8]
 801bd2e:	2201      	movs	r2, #1
 801bd30:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801bd32:	68bb      	ldr	r3, [r7, #8]
 801bd34:	4618      	mov	r0, r3
 801bd36:	f7fd fd9d 	bl	8019874 <sync_fs>
 801bd3a:	4603      	mov	r3, r0
 801bd3c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801bd3e:	687b      	ldr	r3, [r7, #4]
 801bd40:	7d1b      	ldrb	r3, [r3, #20]
 801bd42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801bd46:	b2da      	uxtb	r2, r3
 801bd48:	687b      	ldr	r3, [r7, #4]
 801bd4a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801bd4c:	7dfb      	ldrb	r3, [r7, #23]
}
 801bd4e:	4618      	mov	r0, r3
 801bd50:	3718      	adds	r7, #24
 801bd52:	46bd      	mov	sp, r7
 801bd54:	bd80      	pop	{r7, pc}

0801bd56 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801bd56:	b580      	push	{r7, lr}
 801bd58:	b084      	sub	sp, #16
 801bd5a:	af00      	add	r7, sp, #0
 801bd5c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801bd5e:	6878      	ldr	r0, [r7, #4]
 801bd60:	f7ff ff7b 	bl	801bc5a <f_sync>
 801bd64:	4603      	mov	r3, r0
 801bd66:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801bd68:	7bfb      	ldrb	r3, [r7, #15]
 801bd6a:	2b00      	cmp	r3, #0
 801bd6c:	d118      	bne.n	801bda0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801bd6e:	687b      	ldr	r3, [r7, #4]
 801bd70:	f107 0208 	add.w	r2, r7, #8
 801bd74:	4611      	mov	r1, r2
 801bd76:	4618      	mov	r0, r3
 801bd78:	f7ff fbc4 	bl	801b504 <validate>
 801bd7c:	4603      	mov	r3, r0
 801bd7e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801bd80:	7bfb      	ldrb	r3, [r7, #15]
 801bd82:	2b00      	cmp	r3, #0
 801bd84:	d10c      	bne.n	801bda0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801bd86:	687b      	ldr	r3, [r7, #4]
 801bd88:	691b      	ldr	r3, [r3, #16]
 801bd8a:	4618      	mov	r0, r3
 801bd8c:	f7fd fca0 	bl	80196d0 <dec_lock>
 801bd90:	4603      	mov	r3, r0
 801bd92:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801bd94:	7bfb      	ldrb	r3, [r7, #15]
 801bd96:	2b00      	cmp	r3, #0
 801bd98:	d102      	bne.n	801bda0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801bd9a:	687b      	ldr	r3, [r7, #4]
 801bd9c:	2200      	movs	r2, #0
 801bd9e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801bda0:	7bfb      	ldrb	r3, [r7, #15]
}
 801bda2:	4618      	mov	r0, r3
 801bda4:	3710      	adds	r7, #16
 801bda6:	46bd      	mov	sp, r7
 801bda8:	bd80      	pop	{r7, pc}

0801bdaa <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801bdaa:	b580      	push	{r7, lr}
 801bdac:	b090      	sub	sp, #64	@ 0x40
 801bdae:	af00      	add	r7, sp, #0
 801bdb0:	6078      	str	r0, [r7, #4]
 801bdb2:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 801bdb4:	f107 0108 	add.w	r1, r7, #8
 801bdb8:	1d3b      	adds	r3, r7, #4
 801bdba:	2200      	movs	r2, #0
 801bdbc:	4618      	mov	r0, r3
 801bdbe:	f7ff f951 	bl	801b064 <find_volume>
 801bdc2:	4603      	mov	r3, r0
 801bdc4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 801bdc8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801bdcc:	2b00      	cmp	r3, #0
 801bdce:	d11f      	bne.n	801be10 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801bdd0:	687a      	ldr	r2, [r7, #4]
 801bdd2:	f107 0308 	add.w	r3, r7, #8
 801bdd6:	4611      	mov	r1, r2
 801bdd8:	4618      	mov	r0, r3
 801bdda:	f7ff f837 	bl	801ae4c <follow_path>
 801bdde:	4603      	mov	r3, r0
 801bde0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 801bde4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801bde8:	2b00      	cmp	r3, #0
 801bdea:	d111      	bne.n	801be10 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 801bdec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801bdf0:	b25b      	sxtb	r3, r3
 801bdf2:	2b00      	cmp	r3, #0
 801bdf4:	da03      	bge.n	801bdfe <f_stat+0x54>
				res = FR_INVALID_NAME;
 801bdf6:	2306      	movs	r3, #6
 801bdf8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801bdfc:	e008      	b.n	801be10 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 801bdfe:	683b      	ldr	r3, [r7, #0]
 801be00:	2b00      	cmp	r3, #0
 801be02:	d005      	beq.n	801be10 <f_stat+0x66>
 801be04:	f107 0308 	add.w	r3, r7, #8
 801be08:	6839      	ldr	r1, [r7, #0]
 801be0a:	4618      	mov	r0, r3
 801be0c:	f7fe fd88 	bl	801a920 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 801be10:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 801be14:	4618      	mov	r0, r3
 801be16:	3740      	adds	r7, #64	@ 0x40
 801be18:	46bd      	mov	sp, r7
 801be1a:	bd80      	pop	{r7, pc}

0801be1c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801be1c:	b480      	push	{r7}
 801be1e:	b087      	sub	sp, #28
 801be20:	af00      	add	r7, sp, #0
 801be22:	60f8      	str	r0, [r7, #12]
 801be24:	60b9      	str	r1, [r7, #8]
 801be26:	4613      	mov	r3, r2
 801be28:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801be2a:	2301      	movs	r3, #1
 801be2c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801be2e:	2300      	movs	r3, #0
 801be30:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801be32:	4b1f      	ldr	r3, [pc, #124]	@ (801beb0 <FATFS_LinkDriverEx+0x94>)
 801be34:	7a5b      	ldrb	r3, [r3, #9]
 801be36:	b2db      	uxtb	r3, r3
 801be38:	2b00      	cmp	r3, #0
 801be3a:	d131      	bne.n	801bea0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801be3c:	4b1c      	ldr	r3, [pc, #112]	@ (801beb0 <FATFS_LinkDriverEx+0x94>)
 801be3e:	7a5b      	ldrb	r3, [r3, #9]
 801be40:	b2db      	uxtb	r3, r3
 801be42:	461a      	mov	r2, r3
 801be44:	4b1a      	ldr	r3, [pc, #104]	@ (801beb0 <FATFS_LinkDriverEx+0x94>)
 801be46:	2100      	movs	r1, #0
 801be48:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801be4a:	4b19      	ldr	r3, [pc, #100]	@ (801beb0 <FATFS_LinkDriverEx+0x94>)
 801be4c:	7a5b      	ldrb	r3, [r3, #9]
 801be4e:	b2db      	uxtb	r3, r3
 801be50:	4a17      	ldr	r2, [pc, #92]	@ (801beb0 <FATFS_LinkDriverEx+0x94>)
 801be52:	009b      	lsls	r3, r3, #2
 801be54:	4413      	add	r3, r2
 801be56:	68fa      	ldr	r2, [r7, #12]
 801be58:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801be5a:	4b15      	ldr	r3, [pc, #84]	@ (801beb0 <FATFS_LinkDriverEx+0x94>)
 801be5c:	7a5b      	ldrb	r3, [r3, #9]
 801be5e:	b2db      	uxtb	r3, r3
 801be60:	461a      	mov	r2, r3
 801be62:	4b13      	ldr	r3, [pc, #76]	@ (801beb0 <FATFS_LinkDriverEx+0x94>)
 801be64:	4413      	add	r3, r2
 801be66:	79fa      	ldrb	r2, [r7, #7]
 801be68:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801be6a:	4b11      	ldr	r3, [pc, #68]	@ (801beb0 <FATFS_LinkDriverEx+0x94>)
 801be6c:	7a5b      	ldrb	r3, [r3, #9]
 801be6e:	b2db      	uxtb	r3, r3
 801be70:	1c5a      	adds	r2, r3, #1
 801be72:	b2d1      	uxtb	r1, r2
 801be74:	4a0e      	ldr	r2, [pc, #56]	@ (801beb0 <FATFS_LinkDriverEx+0x94>)
 801be76:	7251      	strb	r1, [r2, #9]
 801be78:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801be7a:	7dbb      	ldrb	r3, [r7, #22]
 801be7c:	3330      	adds	r3, #48	@ 0x30
 801be7e:	b2da      	uxtb	r2, r3
 801be80:	68bb      	ldr	r3, [r7, #8]
 801be82:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801be84:	68bb      	ldr	r3, [r7, #8]
 801be86:	3301      	adds	r3, #1
 801be88:	223a      	movs	r2, #58	@ 0x3a
 801be8a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801be8c:	68bb      	ldr	r3, [r7, #8]
 801be8e:	3302      	adds	r3, #2
 801be90:	222f      	movs	r2, #47	@ 0x2f
 801be92:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801be94:	68bb      	ldr	r3, [r7, #8]
 801be96:	3303      	adds	r3, #3
 801be98:	2200      	movs	r2, #0
 801be9a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801be9c:	2300      	movs	r3, #0
 801be9e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801bea0:	7dfb      	ldrb	r3, [r7, #23]
}
 801bea2:	4618      	mov	r0, r3
 801bea4:	371c      	adds	r7, #28
 801bea6:	46bd      	mov	sp, r7
 801bea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801beac:	4770      	bx	lr
 801beae:	bf00      	nop
 801beb0:	20001d94 	.word	0x20001d94

0801beb4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801beb4:	b580      	push	{r7, lr}
 801beb6:	b082      	sub	sp, #8
 801beb8:	af00      	add	r7, sp, #0
 801beba:	6078      	str	r0, [r7, #4]
 801bebc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801bebe:	2200      	movs	r2, #0
 801bec0:	6839      	ldr	r1, [r7, #0]
 801bec2:	6878      	ldr	r0, [r7, #4]
 801bec4:	f7ff ffaa 	bl	801be1c <FATFS_LinkDriverEx>
 801bec8:	4603      	mov	r3, r0
}
 801beca:	4618      	mov	r0, r3
 801becc:	3708      	adds	r7, #8
 801bece:	46bd      	mov	sp, r7
 801bed0:	bd80      	pop	{r7, pc}
	...

0801bed4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801bed4:	b480      	push	{r7}
 801bed6:	b085      	sub	sp, #20
 801bed8:	af00      	add	r7, sp, #0
 801beda:	4603      	mov	r3, r0
 801bedc:	6039      	str	r1, [r7, #0]
 801bede:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801bee0:	88fb      	ldrh	r3, [r7, #6]
 801bee2:	2b7f      	cmp	r3, #127	@ 0x7f
 801bee4:	d802      	bhi.n	801beec <ff_convert+0x18>
		c = chr;
 801bee6:	88fb      	ldrh	r3, [r7, #6]
 801bee8:	81fb      	strh	r3, [r7, #14]
 801beea:	e025      	b.n	801bf38 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801beec:	683b      	ldr	r3, [r7, #0]
 801beee:	2b00      	cmp	r3, #0
 801bef0:	d00b      	beq.n	801bf0a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801bef2:	88fb      	ldrh	r3, [r7, #6]
 801bef4:	2bff      	cmp	r3, #255	@ 0xff
 801bef6:	d805      	bhi.n	801bf04 <ff_convert+0x30>
 801bef8:	88fb      	ldrh	r3, [r7, #6]
 801befa:	3b80      	subs	r3, #128	@ 0x80
 801befc:	4a12      	ldr	r2, [pc, #72]	@ (801bf48 <ff_convert+0x74>)
 801befe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801bf02:	e000      	b.n	801bf06 <ff_convert+0x32>
 801bf04:	2300      	movs	r3, #0
 801bf06:	81fb      	strh	r3, [r7, #14]
 801bf08:	e016      	b.n	801bf38 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801bf0a:	2300      	movs	r3, #0
 801bf0c:	81fb      	strh	r3, [r7, #14]
 801bf0e:	e009      	b.n	801bf24 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801bf10:	89fb      	ldrh	r3, [r7, #14]
 801bf12:	4a0d      	ldr	r2, [pc, #52]	@ (801bf48 <ff_convert+0x74>)
 801bf14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801bf18:	88fa      	ldrh	r2, [r7, #6]
 801bf1a:	429a      	cmp	r2, r3
 801bf1c:	d006      	beq.n	801bf2c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801bf1e:	89fb      	ldrh	r3, [r7, #14]
 801bf20:	3301      	adds	r3, #1
 801bf22:	81fb      	strh	r3, [r7, #14]
 801bf24:	89fb      	ldrh	r3, [r7, #14]
 801bf26:	2b7f      	cmp	r3, #127	@ 0x7f
 801bf28:	d9f2      	bls.n	801bf10 <ff_convert+0x3c>
 801bf2a:	e000      	b.n	801bf2e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801bf2c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801bf2e:	89fb      	ldrh	r3, [r7, #14]
 801bf30:	3380      	adds	r3, #128	@ 0x80
 801bf32:	b29b      	uxth	r3, r3
 801bf34:	b2db      	uxtb	r3, r3
 801bf36:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801bf38:	89fb      	ldrh	r3, [r7, #14]
}
 801bf3a:	4618      	mov	r0, r3
 801bf3c:	3714      	adds	r7, #20
 801bf3e:	46bd      	mov	sp, r7
 801bf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf44:	4770      	bx	lr
 801bf46:	bf00      	nop
 801bf48:	080251dc 	.word	0x080251dc

0801bf4c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801bf4c:	b480      	push	{r7}
 801bf4e:	b087      	sub	sp, #28
 801bf50:	af00      	add	r7, sp, #0
 801bf52:	4603      	mov	r3, r0
 801bf54:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801bf56:	88fb      	ldrh	r3, [r7, #6]
 801bf58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801bf5c:	d201      	bcs.n	801bf62 <ff_wtoupper+0x16>
 801bf5e:	4b3e      	ldr	r3, [pc, #248]	@ (801c058 <ff_wtoupper+0x10c>)
 801bf60:	e000      	b.n	801bf64 <ff_wtoupper+0x18>
 801bf62:	4b3e      	ldr	r3, [pc, #248]	@ (801c05c <ff_wtoupper+0x110>)
 801bf64:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801bf66:	697b      	ldr	r3, [r7, #20]
 801bf68:	1c9a      	adds	r2, r3, #2
 801bf6a:	617a      	str	r2, [r7, #20]
 801bf6c:	881b      	ldrh	r3, [r3, #0]
 801bf6e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801bf70:	8a7b      	ldrh	r3, [r7, #18]
 801bf72:	2b00      	cmp	r3, #0
 801bf74:	d068      	beq.n	801c048 <ff_wtoupper+0xfc>
 801bf76:	88fa      	ldrh	r2, [r7, #6]
 801bf78:	8a7b      	ldrh	r3, [r7, #18]
 801bf7a:	429a      	cmp	r2, r3
 801bf7c:	d364      	bcc.n	801c048 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801bf7e:	697b      	ldr	r3, [r7, #20]
 801bf80:	1c9a      	adds	r2, r3, #2
 801bf82:	617a      	str	r2, [r7, #20]
 801bf84:	881b      	ldrh	r3, [r3, #0]
 801bf86:	823b      	strh	r3, [r7, #16]
 801bf88:	8a3b      	ldrh	r3, [r7, #16]
 801bf8a:	0a1b      	lsrs	r3, r3, #8
 801bf8c:	81fb      	strh	r3, [r7, #14]
 801bf8e:	8a3b      	ldrh	r3, [r7, #16]
 801bf90:	b2db      	uxtb	r3, r3
 801bf92:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801bf94:	88fa      	ldrh	r2, [r7, #6]
 801bf96:	8a79      	ldrh	r1, [r7, #18]
 801bf98:	8a3b      	ldrh	r3, [r7, #16]
 801bf9a:	440b      	add	r3, r1
 801bf9c:	429a      	cmp	r2, r3
 801bf9e:	da49      	bge.n	801c034 <ff_wtoupper+0xe8>
			switch (cmd) {
 801bfa0:	89fb      	ldrh	r3, [r7, #14]
 801bfa2:	2b08      	cmp	r3, #8
 801bfa4:	d84f      	bhi.n	801c046 <ff_wtoupper+0xfa>
 801bfa6:	a201      	add	r2, pc, #4	@ (adr r2, 801bfac <ff_wtoupper+0x60>)
 801bfa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bfac:	0801bfd1 	.word	0x0801bfd1
 801bfb0:	0801bfe3 	.word	0x0801bfe3
 801bfb4:	0801bff9 	.word	0x0801bff9
 801bfb8:	0801c001 	.word	0x0801c001
 801bfbc:	0801c009 	.word	0x0801c009
 801bfc0:	0801c011 	.word	0x0801c011
 801bfc4:	0801c019 	.word	0x0801c019
 801bfc8:	0801c021 	.word	0x0801c021
 801bfcc:	0801c029 	.word	0x0801c029
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801bfd0:	88fa      	ldrh	r2, [r7, #6]
 801bfd2:	8a7b      	ldrh	r3, [r7, #18]
 801bfd4:	1ad3      	subs	r3, r2, r3
 801bfd6:	005b      	lsls	r3, r3, #1
 801bfd8:	697a      	ldr	r2, [r7, #20]
 801bfda:	4413      	add	r3, r2
 801bfdc:	881b      	ldrh	r3, [r3, #0]
 801bfde:	80fb      	strh	r3, [r7, #6]
 801bfe0:	e027      	b.n	801c032 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801bfe2:	88fa      	ldrh	r2, [r7, #6]
 801bfe4:	8a7b      	ldrh	r3, [r7, #18]
 801bfe6:	1ad3      	subs	r3, r2, r3
 801bfe8:	b29b      	uxth	r3, r3
 801bfea:	f003 0301 	and.w	r3, r3, #1
 801bfee:	b29b      	uxth	r3, r3
 801bff0:	88fa      	ldrh	r2, [r7, #6]
 801bff2:	1ad3      	subs	r3, r2, r3
 801bff4:	80fb      	strh	r3, [r7, #6]
 801bff6:	e01c      	b.n	801c032 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801bff8:	88fb      	ldrh	r3, [r7, #6]
 801bffa:	3b10      	subs	r3, #16
 801bffc:	80fb      	strh	r3, [r7, #6]
 801bffe:	e018      	b.n	801c032 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801c000:	88fb      	ldrh	r3, [r7, #6]
 801c002:	3b20      	subs	r3, #32
 801c004:	80fb      	strh	r3, [r7, #6]
 801c006:	e014      	b.n	801c032 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801c008:	88fb      	ldrh	r3, [r7, #6]
 801c00a:	3b30      	subs	r3, #48	@ 0x30
 801c00c:	80fb      	strh	r3, [r7, #6]
 801c00e:	e010      	b.n	801c032 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801c010:	88fb      	ldrh	r3, [r7, #6]
 801c012:	3b1a      	subs	r3, #26
 801c014:	80fb      	strh	r3, [r7, #6]
 801c016:	e00c      	b.n	801c032 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801c018:	88fb      	ldrh	r3, [r7, #6]
 801c01a:	3308      	adds	r3, #8
 801c01c:	80fb      	strh	r3, [r7, #6]
 801c01e:	e008      	b.n	801c032 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801c020:	88fb      	ldrh	r3, [r7, #6]
 801c022:	3b50      	subs	r3, #80	@ 0x50
 801c024:	80fb      	strh	r3, [r7, #6]
 801c026:	e004      	b.n	801c032 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801c028:	88fb      	ldrh	r3, [r7, #6]
 801c02a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801c02e:	80fb      	strh	r3, [r7, #6]
 801c030:	bf00      	nop
			}
			break;
 801c032:	e008      	b.n	801c046 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801c034:	89fb      	ldrh	r3, [r7, #14]
 801c036:	2b00      	cmp	r3, #0
 801c038:	d195      	bne.n	801bf66 <ff_wtoupper+0x1a>
 801c03a:	8a3b      	ldrh	r3, [r7, #16]
 801c03c:	005b      	lsls	r3, r3, #1
 801c03e:	697a      	ldr	r2, [r7, #20]
 801c040:	4413      	add	r3, r2
 801c042:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801c044:	e78f      	b.n	801bf66 <ff_wtoupper+0x1a>
			break;
 801c046:	bf00      	nop
	}

	return chr;
 801c048:	88fb      	ldrh	r3, [r7, #6]
}
 801c04a:	4618      	mov	r0, r3
 801c04c:	371c      	adds	r7, #28
 801c04e:	46bd      	mov	sp, r7
 801c050:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c054:	4770      	bx	lr
 801c056:	bf00      	nop
 801c058:	080252dc 	.word	0x080252dc
 801c05c:	080254d0 	.word	0x080254d0

0801c060 <Mount_SD>:
//			printf("Successfully saved to SD Card\n");
//			}
//	}
//}

FRESULT Mount_SD(const TCHAR *path) {
 801c060:	b580      	push	{r7, lr}
 801c062:	b082      	sub	sp, #8
 801c064:	af00      	add	r7, sp, #0
 801c066:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 801c068:	2201      	movs	r2, #1
 801c06a:	6879      	ldr	r1, [r7, #4]
 801c06c:	480e      	ldr	r0, [pc, #56]	@ (801c0a8 <Mount_SD+0x48>)
 801c06e:	f7ff fa7f 	bl	801b570 <f_mount>
 801c072:	4603      	mov	r3, r0
 801c074:	461a      	mov	r2, r3
 801c076:	4b0d      	ldr	r3, [pc, #52]	@ (801c0ac <Mount_SD+0x4c>)
 801c078:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 801c07a:	4b0c      	ldr	r3, [pc, #48]	@ (801c0ac <Mount_SD+0x4c>)
 801c07c:	781b      	ldrb	r3, [r3, #0]
 801c07e:	2b00      	cmp	r3, #0
 801c080:	d006      	beq.n	801c090 <Mount_SD+0x30>
		if (sdioPrints)
 801c082:	2300      	movs	r3, #0
 801c084:	2b00      	cmp	r3, #0
 801c086:	d009      	beq.n	801c09c <Mount_SD+0x3c>
			printf("ERROR!!! in mounting SD CARD...\n");
 801c088:	4809      	ldr	r0, [pc, #36]	@ (801c0b0 <Mount_SD+0x50>)
 801c08a:	f002 fd61 	bl	801eb50 <puts>
 801c08e:	e005      	b.n	801c09c <Mount_SD+0x3c>
	} else if (sdioPrints)
 801c090:	2300      	movs	r3, #0
 801c092:	2b00      	cmp	r3, #0
 801c094:	d002      	beq.n	801c09c <Mount_SD+0x3c>
		printf("SD CARD mounted successfully...\n");
 801c096:	4807      	ldr	r0, [pc, #28]	@ (801c0b4 <Mount_SD+0x54>)
 801c098:	f002 fd5a 	bl	801eb50 <puts>

	return fresult;
 801c09c:	4b03      	ldr	r3, [pc, #12]	@ (801c0ac <Mount_SD+0x4c>)
 801c09e:	781b      	ldrb	r3, [r3, #0]
}
 801c0a0:	4618      	mov	r0, r3
 801c0a2:	3708      	adds	r7, #8
 801c0a4:	46bd      	mov	sp, r7
 801c0a6:	bd80      	pop	{r7, pc}
 801c0a8:	20001da0 	.word	0x20001da0
 801c0ac:	2000231c 	.word	0x2000231c
 801c0b0:	08024868 	.word	0x08024868
 801c0b4:	08024888 	.word	0x08024888

0801c0b8 <Unmount_SD>:

void Unmount_SD(const TCHAR *path) {
 801c0b8:	b580      	push	{r7, lr}
 801c0ba:	b082      	sub	sp, #8
 801c0bc:	af00      	add	r7, sp, #0
 801c0be:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 801c0c0:	2201      	movs	r2, #1
 801c0c2:	6879      	ldr	r1, [r7, #4]
 801c0c4:	2000      	movs	r0, #0
 801c0c6:	f7ff fa53 	bl	801b570 <f_mount>
 801c0ca:	4603      	mov	r3, r0
 801c0cc:	461a      	mov	r2, r3
 801c0ce:	4b0b      	ldr	r3, [pc, #44]	@ (801c0fc <Unmount_SD+0x44>)
 801c0d0:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) {
 801c0d2:	4b0a      	ldr	r3, [pc, #40]	@ (801c0fc <Unmount_SD+0x44>)
 801c0d4:	781b      	ldrb	r3, [r3, #0]
 801c0d6:	2b00      	cmp	r3, #0
 801c0d8:	d106      	bne.n	801c0e8 <Unmount_SD+0x30>
		if (sdioPrints)
 801c0da:	2300      	movs	r3, #0
 801c0dc:	2b00      	cmp	r3, #0
 801c0de:	d009      	beq.n	801c0f4 <Unmount_SD+0x3c>
			printf("SD CARD UNMOUNTED successfully...\n\n");
 801c0e0:	4807      	ldr	r0, [pc, #28]	@ (801c100 <Unmount_SD+0x48>)
 801c0e2:	f002 fd35 	bl	801eb50 <puts>
	} else if (sdioPrints)
		printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
}
 801c0e6:	e005      	b.n	801c0f4 <Unmount_SD+0x3c>
	} else if (sdioPrints)
 801c0e8:	2300      	movs	r3, #0
 801c0ea:	2b00      	cmp	r3, #0
 801c0ec:	d002      	beq.n	801c0f4 <Unmount_SD+0x3c>
		printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
 801c0ee:	4805      	ldr	r0, [pc, #20]	@ (801c104 <Unmount_SD+0x4c>)
 801c0f0:	f002 fd2e 	bl	801eb50 <puts>
}
 801c0f4:	bf00      	nop
 801c0f6:	3708      	adds	r7, #8
 801c0f8:	46bd      	mov	sp, r7
 801c0fa:	bd80      	pop	{r7, pc}
 801c0fc:	2000231c 	.word	0x2000231c
 801c100:	080248a8 	.word	0x080248a8
 801c104:	080248cc 	.word	0x080248cc

0801c108 <Create_File>:
		}
		return fresult;
	}
}

FRESULT Create_File(char *name) {
 801c108:	b580      	push	{r7, lr}
 801c10a:	b0a8      	sub	sp, #160	@ 0xa0
 801c10c:	af00      	add	r7, sp, #0
 801c10e:	6078      	str	r0, [r7, #4]
	char buf[150];
	fresult = f_stat(name, &fno);
 801c110:	4941      	ldr	r1, [pc, #260]	@ (801c218 <Create_File+0x110>)
 801c112:	6878      	ldr	r0, [r7, #4]
 801c114:	f7ff fe49 	bl	801bdaa <f_stat>
 801c118:	4603      	mov	r3, r0
 801c11a:	461a      	mov	r2, r3
 801c11c:	4b3f      	ldr	r3, [pc, #252]	@ (801c21c <Create_File+0x114>)
 801c11e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) {
 801c120:	4b3e      	ldr	r3, [pc, #248]	@ (801c21c <Create_File+0x114>)
 801c122:	781b      	ldrb	r3, [r3, #0]
 801c124:	2b00      	cmp	r3, #0
 801c126:	d114      	bne.n	801c152 <Create_File+0x4a>
		file_already_exist = 1; //file is alrready there so now we dont create csv header
 801c128:	4b3d      	ldr	r3, [pc, #244]	@ (801c220 <Create_File+0x118>)
 801c12a:	2201      	movs	r2, #1
 801c12c:	701a      	strb	r2, [r3, #0]

		sprintf(buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n",
 801c12e:	f107 0308 	add.w	r3, r7, #8
 801c132:	687a      	ldr	r2, [r7, #4]
 801c134:	493b      	ldr	r1, [pc, #236]	@ (801c224 <Create_File+0x11c>)
 801c136:	4618      	mov	r0, r3
 801c138:	f002 fd12 	bl	801eb60 <siprintf>
				name);
		if (sdioPrints)
 801c13c:	2300      	movs	r3, #0
 801c13e:	2b00      	cmp	r3, #0
 801c140:	d004      	beq.n	801c14c <Create_File+0x44>
			printf(buf);
 801c142:	f107 0308 	add.w	r3, r7, #8
 801c146:	4618      	mov	r0, r3
 801c148:	f002 fc9a 	bl	801ea80 <iprintf>

		return fresult;
 801c14c:	4b33      	ldr	r3, [pc, #204]	@ (801c21c <Create_File+0x114>)
 801c14e:	781b      	ldrb	r3, [r3, #0]
 801c150:	e05d      	b.n	801c20e <Create_File+0x106>
	} else {
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 801c152:	220b      	movs	r2, #11
 801c154:	6879      	ldr	r1, [r7, #4]
 801c156:	4834      	ldr	r0, [pc, #208]	@ (801c228 <Create_File+0x120>)
 801c158:	f7ff fa50 	bl	801b5fc <f_open>
 801c15c:	4603      	mov	r3, r0
 801c15e:	461a      	mov	r2, r3
 801c160:	4b2e      	ldr	r3, [pc, #184]	@ (801c21c <Create_File+0x114>)
 801c162:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801c164:	4b2d      	ldr	r3, [pc, #180]	@ (801c21c <Create_File+0x114>)
 801c166:	781b      	ldrb	r3, [r3, #0]
 801c168:	2b00      	cmp	r3, #0
 801c16a:	d013      	beq.n	801c194 <Create_File+0x8c>

			sprintf(buf, "ERROR!!! No. %d in creating file *%s*\n", fresult,
 801c16c:	4b2b      	ldr	r3, [pc, #172]	@ (801c21c <Create_File+0x114>)
 801c16e:	781b      	ldrb	r3, [r3, #0]
 801c170:	461a      	mov	r2, r3
 801c172:	f107 0008 	add.w	r0, r7, #8
 801c176:	687b      	ldr	r3, [r7, #4]
 801c178:	492c      	ldr	r1, [pc, #176]	@ (801c22c <Create_File+0x124>)
 801c17a:	f002 fcf1 	bl	801eb60 <siprintf>
					name);
			if (sdioPrints)
 801c17e:	2300      	movs	r3, #0
 801c180:	2b00      	cmp	r3, #0
 801c182:	d004      	beq.n	801c18e <Create_File+0x86>
				printf(buf);
 801c184:	f107 0308 	add.w	r3, r7, #8
 801c188:	4618      	mov	r0, r3
 801c18a:	f002 fc79 	bl	801ea80 <iprintf>

			return fresult;
 801c18e:	4b23      	ldr	r3, [pc, #140]	@ (801c21c <Create_File+0x114>)
 801c190:	781b      	ldrb	r3, [r3, #0]
 801c192:	e03c      	b.n	801c20e <Create_File+0x106>
		} else {

			sprintf(buf,
 801c194:	f107 0308 	add.w	r3, r7, #8
 801c198:	687a      	ldr	r2, [r7, #4]
 801c19a:	4925      	ldr	r1, [pc, #148]	@ (801c230 <Create_File+0x128>)
 801c19c:	4618      	mov	r0, r3
 801c19e:	f002 fcdf 	bl	801eb60 <siprintf>
					"*%s* created successfully\n Now use Write_File to write data\n",
					name);
			if (sdioPrints)
 801c1a2:	2300      	movs	r3, #0
 801c1a4:	2b00      	cmp	r3, #0
 801c1a6:	d004      	beq.n	801c1b2 <Create_File+0xaa>
				printf(buf);
 801c1a8:	f107 0308 	add.w	r3, r7, #8
 801c1ac:	4618      	mov	r0, r3
 801c1ae:	f002 fc67 	bl	801ea80 <iprintf>

		}

		fresult = f_close(&fil);
 801c1b2:	481d      	ldr	r0, [pc, #116]	@ (801c228 <Create_File+0x120>)
 801c1b4:	f7ff fdcf 	bl	801bd56 <f_close>
 801c1b8:	4603      	mov	r3, r0
 801c1ba:	461a      	mov	r2, r3
 801c1bc:	4b17      	ldr	r3, [pc, #92]	@ (801c21c <Create_File+0x114>)
 801c1be:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801c1c0:	4b16      	ldr	r3, [pc, #88]	@ (801c21c <Create_File+0x114>)
 801c1c2:	781b      	ldrb	r3, [r3, #0]
 801c1c4:	2b00      	cmp	r3, #0
 801c1c6:	d011      	beq.n	801c1ec <Create_File+0xe4>

			sprintf(buf, "ERROR No. %d in closing file *%s*\n", fresult, name);
 801c1c8:	4b14      	ldr	r3, [pc, #80]	@ (801c21c <Create_File+0x114>)
 801c1ca:	781b      	ldrb	r3, [r3, #0]
 801c1cc:	461a      	mov	r2, r3
 801c1ce:	f107 0008 	add.w	r0, r7, #8
 801c1d2:	687b      	ldr	r3, [r7, #4]
 801c1d4:	4917      	ldr	r1, [pc, #92]	@ (801c234 <Create_File+0x12c>)
 801c1d6:	f002 fcc3 	bl	801eb60 <siprintf>
			if (sdioPrints)
 801c1da:	2300      	movs	r3, #0
 801c1dc:	2b00      	cmp	r3, #0
 801c1de:	d014      	beq.n	801c20a <Create_File+0x102>
				printf(buf);
 801c1e0:	f107 0308 	add.w	r3, r7, #8
 801c1e4:	4618      	mov	r0, r3
 801c1e6:	f002 fc4b 	bl	801ea80 <iprintf>
 801c1ea:	e00e      	b.n	801c20a <Create_File+0x102>

		} else {

			sprintf(buf, "File *%s* CLOSED successfully\n", name);
 801c1ec:	f107 0308 	add.w	r3, r7, #8
 801c1f0:	687a      	ldr	r2, [r7, #4]
 801c1f2:	4911      	ldr	r1, [pc, #68]	@ (801c238 <Create_File+0x130>)
 801c1f4:	4618      	mov	r0, r3
 801c1f6:	f002 fcb3 	bl	801eb60 <siprintf>
			if (sdioPrints)
 801c1fa:	2300      	movs	r3, #0
 801c1fc:	2b00      	cmp	r3, #0
 801c1fe:	d004      	beq.n	801c20a <Create_File+0x102>
				printf(buf);
 801c200:	f107 0308 	add.w	r3, r7, #8
 801c204:	4618      	mov	r0, r3
 801c206:	f002 fc3b 	bl	801ea80 <iprintf>

		}
	}
	return fresult;
 801c20a:	4b04      	ldr	r3, [pc, #16]	@ (801c21c <Create_File+0x114>)
 801c20c:	781b      	ldrb	r3, [r3, #0]
}
 801c20e:	4618      	mov	r0, r3
 801c210:	37a0      	adds	r7, #160	@ 0xa0
 801c212:	46bd      	mov	sp, r7
 801c214:	bd80      	pop	{r7, pc}
 801c216:	bf00      	nop
 801c218:	20002204 	.word	0x20002204
 801c21c:	2000231c 	.word	0x2000231c
 801c220:	20002325 	.word	0x20002325
 801c224:	08024a90 	.word	0x08024a90
 801c228:	20001fd4 	.word	0x20001fd4
 801c22c:	08024ac4 	.word	0x08024ac4
 801c230:	08024aec 	.word	0x08024aec
 801c234:	08024b2c 	.word	0x08024b2c
 801c238:	08024a70 	.word	0x08024a70

0801c23c <Update_File>:

FRESULT Update_File(char *name, char *data) {
 801c23c:	b580      	push	{r7, lr}
 801c23e:	b0a8      	sub	sp, #160	@ 0xa0
 801c240:	af00      	add	r7, sp, #0
 801c242:	6078      	str	r0, [r7, #4]
 801c244:	6039      	str	r1, [r7, #0]
	char buf[150];
	/**** check whether the file exists or not ****/
	fresult = f_stat(name, &fno);
 801c246:	4951      	ldr	r1, [pc, #324]	@ (801c38c <Update_File+0x150>)
 801c248:	6878      	ldr	r0, [r7, #4]
 801c24a:	f7ff fdae 	bl	801bdaa <f_stat>
 801c24e:	4603      	mov	r3, r0
 801c250:	461a      	mov	r2, r3
 801c252:	4b4f      	ldr	r3, [pc, #316]	@ (801c390 <Update_File+0x154>)
 801c254:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 801c256:	4b4e      	ldr	r3, [pc, #312]	@ (801c390 <Update_File+0x154>)
 801c258:	781b      	ldrb	r3, [r3, #0]
 801c25a:	2b00      	cmp	r3, #0
 801c25c:	d011      	beq.n	801c282 <Update_File+0x46>

		sprintf(buf, "ERROR!!! *%s* does not exists\n", name);
 801c25e:	f107 0308 	add.w	r3, r7, #8
 801c262:	687a      	ldr	r2, [r7, #4]
 801c264:	494b      	ldr	r1, [pc, #300]	@ (801c394 <Update_File+0x158>)
 801c266:	4618      	mov	r0, r3
 801c268:	f002 fc7a 	bl	801eb60 <siprintf>
		if (sdioPrints)
 801c26c:	2300      	movs	r3, #0
 801c26e:	2b00      	cmp	r3, #0
 801c270:	d004      	beq.n	801c27c <Update_File+0x40>
			printf(buf);
 801c272:	f107 0308 	add.w	r3, r7, #8
 801c276:	4618      	mov	r0, r3
 801c278:	f002 fc02 	bl	801ea80 <iprintf>

		return fresult;
 801c27c:	4b44      	ldr	r3, [pc, #272]	@ (801c390 <Update_File+0x154>)
 801c27e:	781b      	ldrb	r3, [r3, #0]
 801c280:	e080      	b.n	801c384 <Update_File+0x148>
	}

	else {
		/* Create a file with read write access and open it */
		fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 801c282:	2232      	movs	r2, #50	@ 0x32
 801c284:	6879      	ldr	r1, [r7, #4]
 801c286:	4844      	ldr	r0, [pc, #272]	@ (801c398 <Update_File+0x15c>)
 801c288:	f7ff f9b8 	bl	801b5fc <f_open>
 801c28c:	4603      	mov	r3, r0
 801c28e:	461a      	mov	r2, r3
 801c290:	4b3f      	ldr	r3, [pc, #252]	@ (801c390 <Update_File+0x154>)
 801c292:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801c294:	4b3e      	ldr	r3, [pc, #248]	@ (801c390 <Update_File+0x154>)
 801c296:	781b      	ldrb	r3, [r3, #0]
 801c298:	2b00      	cmp	r3, #0
 801c29a:	d013      	beq.n	801c2c4 <Update_File+0x88>

			sprintf(buf, "ERROR!!! No. %d in opening file *%s*\n", fresult,
 801c29c:	4b3c      	ldr	r3, [pc, #240]	@ (801c390 <Update_File+0x154>)
 801c29e:	781b      	ldrb	r3, [r3, #0]
 801c2a0:	461a      	mov	r2, r3
 801c2a2:	f107 0008 	add.w	r0, r7, #8
 801c2a6:	687b      	ldr	r3, [r7, #4]
 801c2a8:	493c      	ldr	r1, [pc, #240]	@ (801c39c <Update_File+0x160>)
 801c2aa:	f002 fc59 	bl	801eb60 <siprintf>
					name);
			if (sdioPrints)
 801c2ae:	2300      	movs	r3, #0
 801c2b0:	2b00      	cmp	r3, #0
 801c2b2:	d004      	beq.n	801c2be <Update_File+0x82>
				printf(buf);
 801c2b4:	f107 0308 	add.w	r3, r7, #8
 801c2b8:	4618      	mov	r0, r3
 801c2ba:	f002 fbe1 	bl	801ea80 <iprintf>

			return fresult;
 801c2be:	4b34      	ldr	r3, [pc, #208]	@ (801c390 <Update_File+0x154>)
 801c2c0:	781b      	ldrb	r3, [r3, #0]
 801c2c2:	e05f      	b.n	801c384 <Update_File+0x148>
		}

		/* Writing text */
		fresult = f_write(&fil, data, strlen(data), &bw);
 801c2c4:	6838      	ldr	r0, [r7, #0]
 801c2c6:	f7e3 ffeb 	bl	80002a0 <strlen>
 801c2ca:	4602      	mov	r2, r0
 801c2cc:	4b34      	ldr	r3, [pc, #208]	@ (801c3a0 <Update_File+0x164>)
 801c2ce:	6839      	ldr	r1, [r7, #0]
 801c2d0:	4831      	ldr	r0, [pc, #196]	@ (801c398 <Update_File+0x15c>)
 801c2d2:	f7ff fb4d 	bl	801b970 <f_write>
 801c2d6:	4603      	mov	r3, r0
 801c2d8:	461a      	mov	r2, r3
 801c2da:	4b2d      	ldr	r3, [pc, #180]	@ (801c390 <Update_File+0x154>)
 801c2dc:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801c2de:	4b2c      	ldr	r3, [pc, #176]	@ (801c390 <Update_File+0x154>)
 801c2e0:	781b      	ldrb	r3, [r3, #0]
 801c2e2:	2b00      	cmp	r3, #0
 801c2e4:	d011      	beq.n	801c30a <Update_File+0xce>

			sprintf(buf, "ERROR!!! No. %d in writing file *%s*\n", fresult,
 801c2e6:	4b2a      	ldr	r3, [pc, #168]	@ (801c390 <Update_File+0x154>)
 801c2e8:	781b      	ldrb	r3, [r3, #0]
 801c2ea:	461a      	mov	r2, r3
 801c2ec:	f107 0008 	add.w	r0, r7, #8
 801c2f0:	687b      	ldr	r3, [r7, #4]
 801c2f2:	492c      	ldr	r1, [pc, #176]	@ (801c3a4 <Update_File+0x168>)
 801c2f4:	f002 fc34 	bl	801eb60 <siprintf>
					name);
			if (sdioPrints)
 801c2f8:	2300      	movs	r3, #0
 801c2fa:	2b00      	cmp	r3, #0
 801c2fc:	d014      	beq.n	801c328 <Update_File+0xec>
				printf(buf);
 801c2fe:	f107 0308 	add.w	r3, r7, #8
 801c302:	4618      	mov	r0, r3
 801c304:	f002 fbbc 	bl	801ea80 <iprintf>
 801c308:	e00e      	b.n	801c328 <Update_File+0xec>

		}

		else {

			sprintf(buf, "*%s* UPDATED successfully\n", name);
 801c30a:	f107 0308 	add.w	r3, r7, #8
 801c30e:	687a      	ldr	r2, [r7, #4]
 801c310:	4925      	ldr	r1, [pc, #148]	@ (801c3a8 <Update_File+0x16c>)
 801c312:	4618      	mov	r0, r3
 801c314:	f002 fc24 	bl	801eb60 <siprintf>
			if (sdioPrints)
 801c318:	2300      	movs	r3, #0
 801c31a:	2b00      	cmp	r3, #0
 801c31c:	d004      	beq.n	801c328 <Update_File+0xec>
				printf(buf);
 801c31e:	f107 0308 	add.w	r3, r7, #8
 801c322:	4618      	mov	r0, r3
 801c324:	f002 fbac 	bl	801ea80 <iprintf>

		}

		/* Close file */
		fresult = f_close(&fil);
 801c328:	481b      	ldr	r0, [pc, #108]	@ (801c398 <Update_File+0x15c>)
 801c32a:	f7ff fd14 	bl	801bd56 <f_close>
 801c32e:	4603      	mov	r3, r0
 801c330:	461a      	mov	r2, r3
 801c332:	4b17      	ldr	r3, [pc, #92]	@ (801c390 <Update_File+0x154>)
 801c334:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801c336:	4b16      	ldr	r3, [pc, #88]	@ (801c390 <Update_File+0x154>)
 801c338:	781b      	ldrb	r3, [r3, #0]
 801c33a:	2b00      	cmp	r3, #0
 801c33c:	d011      	beq.n	801c362 <Update_File+0x126>

			sprintf(buf, "ERROR!!! No. %d in closing file *%s*\n", fresult,
 801c33e:	4b14      	ldr	r3, [pc, #80]	@ (801c390 <Update_File+0x154>)
 801c340:	781b      	ldrb	r3, [r3, #0]
 801c342:	461a      	mov	r2, r3
 801c344:	f107 0008 	add.w	r0, r7, #8
 801c348:	687b      	ldr	r3, [r7, #4]
 801c34a:	4918      	ldr	r1, [pc, #96]	@ (801c3ac <Update_File+0x170>)
 801c34c:	f002 fc08 	bl	801eb60 <siprintf>
					name);
			if (sdioPrints)
 801c350:	2300      	movs	r3, #0
 801c352:	2b00      	cmp	r3, #0
 801c354:	d014      	beq.n	801c380 <Update_File+0x144>
				printf(buf);
 801c356:	f107 0308 	add.w	r3, r7, #8
 801c35a:	4618      	mov	r0, r3
 801c35c:	f002 fb90 	bl	801ea80 <iprintf>
 801c360:	e00e      	b.n	801c380 <Update_File+0x144>

		} else {

			sprintf(buf, "File *%s* CLOSED successfully\n", name);
 801c362:	f107 0308 	add.w	r3, r7, #8
 801c366:	687a      	ldr	r2, [r7, #4]
 801c368:	4911      	ldr	r1, [pc, #68]	@ (801c3b0 <Update_File+0x174>)
 801c36a:	4618      	mov	r0, r3
 801c36c:	f002 fbf8 	bl	801eb60 <siprintf>
			if (sdioPrints)
 801c370:	2300      	movs	r3, #0
 801c372:	2b00      	cmp	r3, #0
 801c374:	d004      	beq.n	801c380 <Update_File+0x144>
				printf(buf);
 801c376:	f107 0308 	add.w	r3, r7, #8
 801c37a:	4618      	mov	r0, r3
 801c37c:	f002 fb80 	bl	801ea80 <iprintf>

		}
	}
	return fresult;
 801c380:	4b03      	ldr	r3, [pc, #12]	@ (801c390 <Update_File+0x154>)
 801c382:	781b      	ldrb	r3, [r3, #0]
}
 801c384:	4618      	mov	r0, r3
 801c386:	37a0      	adds	r7, #160	@ 0xa0
 801c388:	46bd      	mov	sp, r7
 801c38a:	bd80      	pop	{r7, pc}
 801c38c:	20002204 	.word	0x20002204
 801c390:	2000231c 	.word	0x2000231c
 801c394:	08024920 	.word	0x08024920
 801c398:	20001fd4 	.word	0x20001fd4
 801c39c:	08024940 	.word	0x08024940
 801c3a0:	20002320 	.word	0x20002320
 801c3a4:	08024b50 	.word	0x08024b50
 801c3a8:	08024b78 	.word	0x08024b78
 801c3ac:	08024a48 	.word	0x08024a48
 801c3b0:	08024a70 	.word	0x08024a70

0801c3b4 <check_file_exists>:
/**
 * 0 file exists
 * 1 file is not there
 */
uint8_t check_file_exists(char *name)
{
 801c3b4:	b580      	push	{r7, lr}
 801c3b6:	b082      	sub	sp, #8
 801c3b8:	af00      	add	r7, sp, #0
 801c3ba:	6078      	str	r0, [r7, #4]
	fresult = f_stat(name, &fno);
 801c3bc:	4906      	ldr	r1, [pc, #24]	@ (801c3d8 <check_file_exists+0x24>)
 801c3be:	6878      	ldr	r0, [r7, #4]
 801c3c0:	f7ff fcf3 	bl	801bdaa <f_stat>
 801c3c4:	4603      	mov	r3, r0
 801c3c6:	461a      	mov	r2, r3
 801c3c8:	4b04      	ldr	r3, [pc, #16]	@ (801c3dc <check_file_exists+0x28>)
 801c3ca:	701a      	strb	r2, [r3, #0]


	return fresult;
 801c3cc:	4b03      	ldr	r3, [pc, #12]	@ (801c3dc <check_file_exists+0x28>)
 801c3ce:	781b      	ldrb	r3, [r3, #0]

}
 801c3d0:	4618      	mov	r0, r3
 801c3d2:	3708      	adds	r7, #8
 801c3d4:	46bd      	mov	sp, r7
 801c3d6:	bd80      	pop	{r7, pc}
 801c3d8:	20002204 	.word	0x20002204
 801c3dc:	2000231c 	.word	0x2000231c

0801c3e0 <json_update>:
uint8_t fileWrite_sec = 0;

uint8_t datawritten = 0;
char buffer[255];

void json_update() {
 801c3e0:	b580      	push	{r7, lr}
 801c3e2:	b088      	sub	sp, #32
 801c3e4:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801c3e6:	f107 0314 	add.w	r3, r7, #20
 801c3ea:	2200      	movs	r2, #0
 801c3ec:	4619      	mov	r1, r3
 801c3ee:	48b4      	ldr	r0, [pc, #720]	@ (801c6c0 <json_update+0x2e0>)
 801c3f0:	f7ed fc0d 	bl	8009c0e <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801c3f4:	463b      	mov	r3, r7
 801c3f6:	2200      	movs	r2, #0
 801c3f8:	4619      	mov	r1, r3
 801c3fa:	48b1      	ldr	r0, [pc, #708]	@ (801c6c0 <json_update+0x2e0>)
 801c3fc:	f7ed fb25 	bl	8009a4a <HAL_RTC_GetTime>
	fileWrite_day = sDate.Date;
 801c400:	7dba      	ldrb	r2, [r7, #22]
 801c402:	4bb0      	ldr	r3, [pc, #704]	@ (801c6c4 <json_update+0x2e4>)
 801c404:	701a      	strb	r2, [r3, #0]
	fileWrite_month = sDate.Month;
 801c406:	7d7a      	ldrb	r2, [r7, #21]
 801c408:	4baf      	ldr	r3, [pc, #700]	@ (801c6c8 <json_update+0x2e8>)
 801c40a:	701a      	strb	r2, [r3, #0]
	fileWrite_year = sDate.Year;
 801c40c:	7dfa      	ldrb	r2, [r7, #23]
 801c40e:	4baf      	ldr	r3, [pc, #700]	@ (801c6cc <json_update+0x2ec>)
 801c410:	701a      	strb	r2, [r3, #0]
	fileWrite_hour = sTime.Hours;
 801c412:	783a      	ldrb	r2, [r7, #0]
 801c414:	4bae      	ldr	r3, [pc, #696]	@ (801c6d0 <json_update+0x2f0>)
 801c416:	701a      	strb	r2, [r3, #0]
	fileWrite_min = sTime.Minutes;
 801c418:	787a      	ldrb	r2, [r7, #1]
 801c41a:	4bae      	ldr	r3, [pc, #696]	@ (801c6d4 <json_update+0x2f4>)
 801c41c:	701a      	strb	r2, [r3, #0]
	fileWrite_sec = sTime.Seconds;
 801c41e:	78ba      	ldrb	r2, [r7, #2]
 801c420:	4bad      	ldr	r3, [pc, #692]	@ (801c6d8 <json_update+0x2f8>)
 801c422:	701a      	strb	r2, [r3, #0]

	fresult1 = Mount_SD("/");
 801c424:	48ad      	ldr	r0, [pc, #692]	@ (801c6dc <json_update+0x2fc>)
 801c426:	f7ff fe1b 	bl	801c060 <Mount_SD>
 801c42a:	4603      	mov	r3, r0
 801c42c:	461a      	mov	r2, r3
 801c42e:	4bac      	ldr	r3, [pc, #688]	@ (801c6e0 <json_update+0x300>)
 801c430:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801c432:	4bab      	ldr	r3, [pc, #684]	@ (801c6e0 <json_update+0x300>)
 801c434:	781b      	ldrb	r3, [r3, #0]
 801c436:	2b00      	cmp	r3, #0
 801c438:	f040 8137 	bne.w	801c6aa <json_update+0x2ca>
		//CAN Bus
		sprintf(buffer, "{\n");
 801c43c:	49a9      	ldr	r1, [pc, #676]	@ (801c6e4 <json_update+0x304>)
 801c43e:	48aa      	ldr	r0, [pc, #680]	@ (801c6e8 <json_update+0x308>)
 801c440:	f002 fb8e 	bl	801eb60 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c444:	49a8      	ldr	r1, [pc, #672]	@ (801c6e8 <json_update+0x308>)
 801c446:	48a9      	ldr	r0, [pc, #676]	@ (801c6ec <json_update+0x30c>)
 801c448:	f7ff fef8 	bl	801c23c <Update_File>
 801c44c:	4603      	mov	r3, r0
 801c44e:	461a      	mov	r2, r3
 801c450:	4ba3      	ldr	r3, [pc, #652]	@ (801c6e0 <json_update+0x300>)
 801c452:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c454:	22ff      	movs	r2, #255	@ 0xff
 801c456:	2100      	movs	r1, #0
 801c458:	48a3      	ldr	r0, [pc, #652]	@ (801c6e8 <json_update+0x308>)
 801c45a:	f002 fccb 	bl	801edf4 <memset>
		sprintf(buffer, "\"devEUI\":\"%s\",\n", ver_GetUid());
 801c45e:	f7e6 f833 	bl	80024c8 <ver_GetUid>
 801c462:	4603      	mov	r3, r0
 801c464:	461a      	mov	r2, r3
 801c466:	49a2      	ldr	r1, [pc, #648]	@ (801c6f0 <json_update+0x310>)
 801c468:	489f      	ldr	r0, [pc, #636]	@ (801c6e8 <json_update+0x308>)
 801c46a:	f002 fb79 	bl	801eb60 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c46e:	499e      	ldr	r1, [pc, #632]	@ (801c6e8 <json_update+0x308>)
 801c470:	489e      	ldr	r0, [pc, #632]	@ (801c6ec <json_update+0x30c>)
 801c472:	f7ff fee3 	bl	801c23c <Update_File>
 801c476:	4603      	mov	r3, r0
 801c478:	461a      	mov	r2, r3
 801c47a:	4b99      	ldr	r3, [pc, #612]	@ (801c6e0 <json_update+0x300>)
 801c47c:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c47e:	22ff      	movs	r2, #255	@ 0xff
 801c480:	2100      	movs	r1, #0
 801c482:	4899      	ldr	r0, [pc, #612]	@ (801c6e8 <json_update+0x308>)
 801c484:	f002 fcb6 	bl	801edf4 <memset>
		sprintf(buffer, "\"id\":\"%s\",\n", _Flash_Packet.id);
 801c488:	4a9a      	ldr	r2, [pc, #616]	@ (801c6f4 <json_update+0x314>)
 801c48a:	499b      	ldr	r1, [pc, #620]	@ (801c6f8 <json_update+0x318>)
 801c48c:	4896      	ldr	r0, [pc, #600]	@ (801c6e8 <json_update+0x308>)
 801c48e:	f002 fb67 	bl	801eb60 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c492:	4995      	ldr	r1, [pc, #596]	@ (801c6e8 <json_update+0x308>)
 801c494:	4895      	ldr	r0, [pc, #596]	@ (801c6ec <json_update+0x30c>)
 801c496:	f7ff fed1 	bl	801c23c <Update_File>
 801c49a:	4603      	mov	r3, r0
 801c49c:	461a      	mov	r2, r3
 801c49e:	4b90      	ldr	r3, [pc, #576]	@ (801c6e0 <json_update+0x300>)
 801c4a0:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c4a2:	22ff      	movs	r2, #255	@ 0xff
 801c4a4:	2100      	movs	r1, #0
 801c4a6:	4890      	ldr	r0, [pc, #576]	@ (801c6e8 <json_update+0x308>)
 801c4a8:	f002 fca4 	bl	801edf4 <memset>
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801c4ac:	783b      	ldrb	r3, [r7, #0]
 801c4ae:	461a      	mov	r2, r3
				sTime.Minutes, sTime.Seconds);
 801c4b0:	787b      	ldrb	r3, [r7, #1]
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801c4b2:	4619      	mov	r1, r3
				sTime.Minutes, sTime.Seconds);
 801c4b4:	78bb      	ldrb	r3, [r7, #2]
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801c4b6:	9300      	str	r3, [sp, #0]
 801c4b8:	460b      	mov	r3, r1
 801c4ba:	4990      	ldr	r1, [pc, #576]	@ (801c6fc <json_update+0x31c>)
 801c4bc:	488a      	ldr	r0, [pc, #552]	@ (801c6e8 <json_update+0x308>)
 801c4be:	f002 fb4f 	bl	801eb60 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c4c2:	4989      	ldr	r1, [pc, #548]	@ (801c6e8 <json_update+0x308>)
 801c4c4:	4889      	ldr	r0, [pc, #548]	@ (801c6ec <json_update+0x30c>)
 801c4c6:	f7ff feb9 	bl	801c23c <Update_File>
 801c4ca:	4603      	mov	r3, r0
 801c4cc:	461a      	mov	r2, r3
 801c4ce:	4b84      	ldr	r3, [pc, #528]	@ (801c6e0 <json_update+0x300>)
 801c4d0:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c4d2:	22ff      	movs	r2, #255	@ 0xff
 801c4d4:	2100      	movs	r1, #0
 801c4d6:	4884      	ldr	r0, [pc, #528]	@ (801c6e8 <json_update+0x308>)
 801c4d8:	f002 fc8c 	bl	801edf4 <memset>
		sprintf(buffer, "\"location\":\"%s\",\n", _Flash_Packet.location);
 801c4dc:	4a88      	ldr	r2, [pc, #544]	@ (801c700 <json_update+0x320>)
 801c4de:	4989      	ldr	r1, [pc, #548]	@ (801c704 <json_update+0x324>)
 801c4e0:	4881      	ldr	r0, [pc, #516]	@ (801c6e8 <json_update+0x308>)
 801c4e2:	f002 fb3d 	bl	801eb60 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c4e6:	4980      	ldr	r1, [pc, #512]	@ (801c6e8 <json_update+0x308>)
 801c4e8:	4880      	ldr	r0, [pc, #512]	@ (801c6ec <json_update+0x30c>)
 801c4ea:	f7ff fea7 	bl	801c23c <Update_File>
 801c4ee:	4603      	mov	r3, r0
 801c4f0:	461a      	mov	r2, r3
 801c4f2:	4b7b      	ldr	r3, [pc, #492]	@ (801c6e0 <json_update+0x300>)
 801c4f4:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c4f6:	22ff      	movs	r2, #255	@ 0xff
 801c4f8:	2100      	movs	r1, #0
 801c4fa:	487b      	ldr	r0, [pc, #492]	@ (801c6e8 <json_update+0x308>)
 801c4fc:	f002 fc7a 	bl	801edf4 <memset>
		sprintf(buffer, "\"Filename\":\"%s\",\n", _Flash_Packet.filename_ver_date);
 801c500:	4a81      	ldr	r2, [pc, #516]	@ (801c708 <json_update+0x328>)
 801c502:	4982      	ldr	r1, [pc, #520]	@ (801c70c <json_update+0x32c>)
 801c504:	4878      	ldr	r0, [pc, #480]	@ (801c6e8 <json_update+0x308>)
 801c506:	f002 fb2b 	bl	801eb60 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c50a:	4977      	ldr	r1, [pc, #476]	@ (801c6e8 <json_update+0x308>)
 801c50c:	4877      	ldr	r0, [pc, #476]	@ (801c6ec <json_update+0x30c>)
 801c50e:	f7ff fe95 	bl	801c23c <Update_File>
 801c512:	4603      	mov	r3, r0
 801c514:	461a      	mov	r2, r3
 801c516:	4b72      	ldr	r3, [pc, #456]	@ (801c6e0 <json_update+0x300>)
 801c518:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c51a:	22ff      	movs	r2, #255	@ 0xff
 801c51c:	2100      	movs	r1, #0
 801c51e:	4872      	ldr	r0, [pc, #456]	@ (801c6e8 <json_update+0x308>)
 801c520:	f002 fc68 	bl	801edf4 <memset>
		sprintf(buffer, "\"group\":\"%s\",\n", _Flash_Packet.group);
 801c524:	4a7a      	ldr	r2, [pc, #488]	@ (801c710 <json_update+0x330>)
 801c526:	497b      	ldr	r1, [pc, #492]	@ (801c714 <json_update+0x334>)
 801c528:	486f      	ldr	r0, [pc, #444]	@ (801c6e8 <json_update+0x308>)
 801c52a:	f002 fb19 	bl	801eb60 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c52e:	496e      	ldr	r1, [pc, #440]	@ (801c6e8 <json_update+0x308>)
 801c530:	486e      	ldr	r0, [pc, #440]	@ (801c6ec <json_update+0x30c>)
 801c532:	f7ff fe83 	bl	801c23c <Update_File>
 801c536:	4603      	mov	r3, r0
 801c538:	461a      	mov	r2, r3
 801c53a:	4b69      	ldr	r3, [pc, #420]	@ (801c6e0 <json_update+0x300>)
 801c53c:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
		sprintf(buffer, "\"humidity\":\"%ld\",\n", _RunTime_Packet.humidity);
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
#elif use_scd30
		memset(buffer, 0, sizeof(buffer));
 801c53e:	22ff      	movs	r2, #255	@ 0xff
 801c540:	2100      	movs	r1, #0
 801c542:	4869      	ldr	r0, [pc, #420]	@ (801c6e8 <json_update+0x308>)
 801c544:	f002 fc56 	bl	801edf4 <memset>
		sprintf(buffer, "\"co2\":\"%.2f\",\n", _RunTime_Packet.co2);
 801c548:	4b73      	ldr	r3, [pc, #460]	@ (801c718 <json_update+0x338>)
 801c54a:	681b      	ldr	r3, [r3, #0]
 801c54c:	4618      	mov	r0, r3
 801c54e:	f7e4 f813 	bl	8000578 <__aeabi_f2d>
 801c552:	4602      	mov	r2, r0
 801c554:	460b      	mov	r3, r1
 801c556:	4971      	ldr	r1, [pc, #452]	@ (801c71c <json_update+0x33c>)
 801c558:	4863      	ldr	r0, [pc, #396]	@ (801c6e8 <json_update+0x308>)
 801c55a:	f002 fb01 	bl	801eb60 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c55e:	4962      	ldr	r1, [pc, #392]	@ (801c6e8 <json_update+0x308>)
 801c560:	4862      	ldr	r0, [pc, #392]	@ (801c6ec <json_update+0x30c>)
 801c562:	f7ff fe6b 	bl	801c23c <Update_File>
 801c566:	4603      	mov	r3, r0
 801c568:	461a      	mov	r2, r3
 801c56a:	4b5d      	ldr	r3, [pc, #372]	@ (801c6e0 <json_update+0x300>)
 801c56c:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c56e:	22ff      	movs	r2, #255	@ 0xff
 801c570:	2100      	movs	r1, #0
 801c572:	485d      	ldr	r0, [pc, #372]	@ (801c6e8 <json_update+0x308>)
 801c574:	f002 fc3e 	bl	801edf4 <memset>
		sprintf(buffer, "\"temperature\":\"%.2f\",\n",
				_RunTime_Packet.temperature);
 801c578:	4b67      	ldr	r3, [pc, #412]	@ (801c718 <json_update+0x338>)
 801c57a:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer, "\"temperature\":\"%.2f\",\n",
 801c57c:	4618      	mov	r0, r3
 801c57e:	f7e3 fffb 	bl	8000578 <__aeabi_f2d>
 801c582:	4602      	mov	r2, r0
 801c584:	460b      	mov	r3, r1
 801c586:	4966      	ldr	r1, [pc, #408]	@ (801c720 <json_update+0x340>)
 801c588:	4857      	ldr	r0, [pc, #348]	@ (801c6e8 <json_update+0x308>)
 801c58a:	f002 fae9 	bl	801eb60 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c58e:	4956      	ldr	r1, [pc, #344]	@ (801c6e8 <json_update+0x308>)
 801c590:	4856      	ldr	r0, [pc, #344]	@ (801c6ec <json_update+0x30c>)
 801c592:	f7ff fe53 	bl	801c23c <Update_File>
 801c596:	4603      	mov	r3, r0
 801c598:	461a      	mov	r2, r3
 801c59a:	4b51      	ldr	r3, [pc, #324]	@ (801c6e0 <json_update+0x300>)
 801c59c:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c59e:	22ff      	movs	r2, #255	@ 0xff
 801c5a0:	2100      	movs	r1, #0
 801c5a2:	4851      	ldr	r0, [pc, #324]	@ (801c6e8 <json_update+0x308>)
 801c5a4:	f002 fc26 	bl	801edf4 <memset>
		sprintf(buffer, "\"humidity\":\"%.2f\",\n", _RunTime_Packet.humidity);
 801c5a8:	4b5b      	ldr	r3, [pc, #364]	@ (801c718 <json_update+0x338>)
 801c5aa:	689b      	ldr	r3, [r3, #8]
 801c5ac:	4618      	mov	r0, r3
 801c5ae:	f7e3 ffe3 	bl	8000578 <__aeabi_f2d>
 801c5b2:	4602      	mov	r2, r0
 801c5b4:	460b      	mov	r3, r1
 801c5b6:	495b      	ldr	r1, [pc, #364]	@ (801c724 <json_update+0x344>)
 801c5b8:	484b      	ldr	r0, [pc, #300]	@ (801c6e8 <json_update+0x308>)
 801c5ba:	f002 fad1 	bl	801eb60 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c5be:	494a      	ldr	r1, [pc, #296]	@ (801c6e8 <json_update+0x308>)
 801c5c0:	484a      	ldr	r0, [pc, #296]	@ (801c6ec <json_update+0x30c>)
 801c5c2:	f7ff fe3b 	bl	801c23c <Update_File>
 801c5c6:	4603      	mov	r3, r0
 801c5c8:	461a      	mov	r2, r3
 801c5ca:	4b45      	ldr	r3, [pc, #276]	@ (801c6e0 <json_update+0x300>)
 801c5cc:	701a      	strb	r2, [r3, #0]
#endif
		memset(buffer, 0, sizeof(buffer));
 801c5ce:	22ff      	movs	r2, #255	@ 0xff
 801c5d0:	2100      	movs	r1, #0
 801c5d2:	4845      	ldr	r0, [pc, #276]	@ (801c6e8 <json_update+0x308>)
 801c5d4:	f002 fc0e 	bl	801edf4 <memset>
		sprintf(buffer, "\"pir\":\"%s\",\n",
				_RunTime_Packet.motion_detection ? "TRUE" : "FALSE");
 801c5d8:	4b4f      	ldr	r3, [pc, #316]	@ (801c718 <json_update+0x338>)
 801c5da:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(buffer, "\"pir\":\"%s\",\n",
 801c5dc:	2b00      	cmp	r3, #0
 801c5de:	d001      	beq.n	801c5e4 <json_update+0x204>
 801c5e0:	4b51      	ldr	r3, [pc, #324]	@ (801c728 <json_update+0x348>)
 801c5e2:	e000      	b.n	801c5e6 <json_update+0x206>
 801c5e4:	4b51      	ldr	r3, [pc, #324]	@ (801c72c <json_update+0x34c>)
 801c5e6:	461a      	mov	r2, r3
 801c5e8:	4951      	ldr	r1, [pc, #324]	@ (801c730 <json_update+0x350>)
 801c5ea:	483f      	ldr	r0, [pc, #252]	@ (801c6e8 <json_update+0x308>)
 801c5ec:	f002 fab8 	bl	801eb60 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c5f0:	493d      	ldr	r1, [pc, #244]	@ (801c6e8 <json_update+0x308>)
 801c5f2:	483e      	ldr	r0, [pc, #248]	@ (801c6ec <json_update+0x30c>)
 801c5f4:	f7ff fe22 	bl	801c23c <Update_File>
 801c5f8:	4603      	mov	r3, r0
 801c5fa:	461a      	mov	r2, r3
 801c5fc:	4b38      	ldr	r3, [pc, #224]	@ (801c6e0 <json_update+0x300>)
 801c5fe:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c600:	22ff      	movs	r2, #255	@ 0xff
 801c602:	2100      	movs	r1, #0
 801c604:	4838      	ldr	r0, [pc, #224]	@ (801c6e8 <json_update+0x308>)
 801c606:	f002 fbf5 	bl	801edf4 <memset>
		sprintf(buffer, "\"pm2.5\":\"%.02f\",\n", _RunTime_Packet.pm2_5);
 801c60a:	4b43      	ldr	r3, [pc, #268]	@ (801c718 <json_update+0x338>)
 801c60c:	695b      	ldr	r3, [r3, #20]
 801c60e:	4618      	mov	r0, r3
 801c610:	f7e3 ffb2 	bl	8000578 <__aeabi_f2d>
 801c614:	4602      	mov	r2, r0
 801c616:	460b      	mov	r3, r1
 801c618:	4946      	ldr	r1, [pc, #280]	@ (801c734 <json_update+0x354>)
 801c61a:	4833      	ldr	r0, [pc, #204]	@ (801c6e8 <json_update+0x308>)
 801c61c:	f002 faa0 	bl	801eb60 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c620:	4931      	ldr	r1, [pc, #196]	@ (801c6e8 <json_update+0x308>)
 801c622:	4832      	ldr	r0, [pc, #200]	@ (801c6ec <json_update+0x30c>)
 801c624:	f7ff fe0a 	bl	801c23c <Update_File>
 801c628:	4603      	mov	r3, r0
 801c62a:	461a      	mov	r2, r3
 801c62c:	4b2c      	ldr	r3, [pc, #176]	@ (801c6e0 <json_update+0x300>)
 801c62e:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c630:	22ff      	movs	r2, #255	@ 0xff
 801c632:	2100      	movs	r1, #0
 801c634:	482c      	ldr	r0, [pc, #176]	@ (801c6e8 <json_update+0x308>)
 801c636:	f002 fbdd 	bl	801edf4 <memset>
		sprintf(buffer, "\"port\":\"none\",\n");
 801c63a:	493f      	ldr	r1, [pc, #252]	@ (801c738 <json_update+0x358>)
 801c63c:	482a      	ldr	r0, [pc, #168]	@ (801c6e8 <json_update+0x308>)
 801c63e:	f002 fa8f 	bl	801eb60 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c642:	4929      	ldr	r1, [pc, #164]	@ (801c6e8 <json_update+0x308>)
 801c644:	4829      	ldr	r0, [pc, #164]	@ (801c6ec <json_update+0x30c>)
 801c646:	f7ff fdf9 	bl	801c23c <Update_File>
 801c64a:	4603      	mov	r3, r0
 801c64c:	461a      	mov	r2, r3
 801c64e:	4b24      	ldr	r3, [pc, #144]	@ (801c6e0 <json_update+0x300>)
 801c650:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c652:	22ff      	movs	r2, #255	@ 0xff
 801c654:	2100      	movs	r1, #0
 801c656:	4824      	ldr	r0, [pc, #144]	@ (801c6e8 <json_update+0x308>)
 801c658:	f002 fbcc 	bl	801edf4 <memset>
		sprintf(buffer, "\"battery\":\"%.02f\",\n",
				_RunTime_Packet.battery_voltage);
 801c65c:	4b2e      	ldr	r3, [pc, #184]	@ (801c718 <json_update+0x338>)
 801c65e:	6a1b      	ldr	r3, [r3, #32]
		sprintf(buffer, "\"battery\":\"%.02f\",\n",
 801c660:	4618      	mov	r0, r3
 801c662:	f7e3 ff89 	bl	8000578 <__aeabi_f2d>
 801c666:	4602      	mov	r2, r0
 801c668:	460b      	mov	r3, r1
 801c66a:	4934      	ldr	r1, [pc, #208]	@ (801c73c <json_update+0x35c>)
 801c66c:	481e      	ldr	r0, [pc, #120]	@ (801c6e8 <json_update+0x308>)
 801c66e:	f002 fa77 	bl	801eb60 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c672:	491d      	ldr	r1, [pc, #116]	@ (801c6e8 <json_update+0x308>)
 801c674:	481d      	ldr	r0, [pc, #116]	@ (801c6ec <json_update+0x30c>)
 801c676:	f7ff fde1 	bl	801c23c <Update_File>
 801c67a:	4603      	mov	r3, r0
 801c67c:	461a      	mov	r2, r3
 801c67e:	4b18      	ldr	r3, [pc, #96]	@ (801c6e0 <json_update+0x300>)
 801c680:	701a      	strb	r2, [r3, #0]

		//we end it
		memset(buffer, 0, sizeof(buffer));
 801c682:	22ff      	movs	r2, #255	@ 0xff
 801c684:	2100      	movs	r1, #0
 801c686:	4818      	ldr	r0, [pc, #96]	@ (801c6e8 <json_update+0x308>)
 801c688:	f002 fbb4 	bl	801edf4 <memset>
		sprintf(buffer, "}\n\n");
 801c68c:	492c      	ldr	r1, [pc, #176]	@ (801c740 <json_update+0x360>)
 801c68e:	4816      	ldr	r0, [pc, #88]	@ (801c6e8 <json_update+0x308>)
 801c690:	f002 fa66 	bl	801eb60 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c694:	4914      	ldr	r1, [pc, #80]	@ (801c6e8 <json_update+0x308>)
 801c696:	4815      	ldr	r0, [pc, #84]	@ (801c6ec <json_update+0x30c>)
 801c698:	f7ff fdd0 	bl	801c23c <Update_File>
 801c69c:	4603      	mov	r3, r0
 801c69e:	461a      	mov	r2, r3
 801c6a0:	4b0f      	ldr	r3, [pc, #60]	@ (801c6e0 <json_update+0x300>)
 801c6a2:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801c6a4:	480d      	ldr	r0, [pc, #52]	@ (801c6dc <json_update+0x2fc>)
 801c6a6:	f7ff fd07 	bl	801c0b8 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801c6aa:	4b0d      	ldr	r3, [pc, #52]	@ (801c6e0 <json_update+0x300>)
 801c6ac:	781b      	ldrb	r3, [r3, #0]
 801c6ae:	b25a      	sxtb	r2, r3
 801c6b0:	4b19      	ldr	r3, [pc, #100]	@ (801c718 <json_update+0x338>)
 801c6b2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
}
 801c6b6:	bf00      	nop
 801c6b8:	3718      	adds	r7, #24
 801c6ba:	46bd      	mov	sp, r7
 801c6bc:	bd80      	pop	{r7, pc}
 801c6be:	bf00      	nop
 801c6c0:	20001898 	.word	0x20001898
 801c6c4:	20002326 	.word	0x20002326
 801c6c8:	20002327 	.word	0x20002327
 801c6cc:	20002328 	.word	0x20002328
 801c6d0:	20002329 	.word	0x20002329
 801c6d4:	2000232a 	.word	0x2000232a
 801c6d8:	2000232b 	.word	0x2000232b
 801c6dc:	08024c64 	.word	0x08024c64
 801c6e0:	20002324 	.word	0x20002324
 801c6e4:	08024c68 	.word	0x08024c68
 801c6e8:	20002330 	.word	0x20002330
 801c6ec:	20001461 	.word	0x20001461
 801c6f0:	08024c6c 	.word	0x08024c6c
 801c6f4:	20001399 	.word	0x20001399
 801c6f8:	08024c7c 	.word	0x08024c7c
 801c6fc:	08024c88 	.word	0x08024c88
 801c700:	200013cb 	.word	0x200013cb
 801c704:	08024ca8 	.word	0x08024ca8
 801c708:	200014c5 	.word	0x200014c5
 801c70c:	08024cbc 	.word	0x08024cbc
 801c710:	2000142f 	.word	0x2000142f
 801c714:	08024cd0 	.word	0x08024cd0
 801c718:	20001530 	.word	0x20001530
 801c71c:	08024ce0 	.word	0x08024ce0
 801c720:	08024cf0 	.word	0x08024cf0
 801c724:	08024d08 	.word	0x08024d08
 801c728:	08024d1c 	.word	0x08024d1c
 801c72c:	08024d24 	.word	0x08024d24
 801c730:	08024d2c 	.word	0x08024d2c
 801c734:	08024d3c 	.word	0x08024d3c
 801c738:	08024d50 	.word	0x08024d50
 801c73c:	08024d60 	.word	0x08024d60
 801c740:	08024d74 	.word	0x08024d74

0801c744 <csv_update>:
void csv_update() {
 801c744:	b580      	push	{r7, lr}
 801c746:	b088      	sub	sp, #32
 801c748:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801c74a:	f107 0314 	add.w	r3, r7, #20
 801c74e:	2200      	movs	r2, #0
 801c750:	4619      	mov	r1, r3
 801c752:	48ab      	ldr	r0, [pc, #684]	@ (801ca00 <csv_update+0x2bc>)
 801c754:	f7ed fa5b 	bl	8009c0e <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801c758:	463b      	mov	r3, r7
 801c75a:	2200      	movs	r2, #0
 801c75c:	4619      	mov	r1, r3
 801c75e:	48a8      	ldr	r0, [pc, #672]	@ (801ca00 <csv_update+0x2bc>)
 801c760:	f7ed f973 	bl	8009a4a <HAL_RTC_GetTime>
	fileWrite_day = sDate.Date;
 801c764:	7dba      	ldrb	r2, [r7, #22]
 801c766:	4ba7      	ldr	r3, [pc, #668]	@ (801ca04 <csv_update+0x2c0>)
 801c768:	701a      	strb	r2, [r3, #0]
	fileWrite_month = sDate.Month;
 801c76a:	7d7a      	ldrb	r2, [r7, #21]
 801c76c:	4ba6      	ldr	r3, [pc, #664]	@ (801ca08 <csv_update+0x2c4>)
 801c76e:	701a      	strb	r2, [r3, #0]
	fileWrite_year = sDate.Year;
 801c770:	7dfa      	ldrb	r2, [r7, #23]
 801c772:	4ba6      	ldr	r3, [pc, #664]	@ (801ca0c <csv_update+0x2c8>)
 801c774:	701a      	strb	r2, [r3, #0]
	fileWrite_hour = sTime.Hours;
 801c776:	783a      	ldrb	r2, [r7, #0]
 801c778:	4ba5      	ldr	r3, [pc, #660]	@ (801ca10 <csv_update+0x2cc>)
 801c77a:	701a      	strb	r2, [r3, #0]
	fileWrite_min = sTime.Minutes;
 801c77c:	787a      	ldrb	r2, [r7, #1]
 801c77e:	4ba5      	ldr	r3, [pc, #660]	@ (801ca14 <csv_update+0x2d0>)
 801c780:	701a      	strb	r2, [r3, #0]
	fileWrite_sec = sTime.Seconds;
 801c782:	78ba      	ldrb	r2, [r7, #2]
 801c784:	4ba4      	ldr	r3, [pc, #656]	@ (801ca18 <csv_update+0x2d4>)
 801c786:	701a      	strb	r2, [r3, #0]
	fresult1 = Mount_SD("/");
 801c788:	48a4      	ldr	r0, [pc, #656]	@ (801ca1c <csv_update+0x2d8>)
 801c78a:	f7ff fc69 	bl	801c060 <Mount_SD>
 801c78e:	4603      	mov	r3, r0
 801c790:	461a      	mov	r2, r3
 801c792:	4ba3      	ldr	r3, [pc, #652]	@ (801ca20 <csv_update+0x2dc>)
 801c794:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801c796:	4ba2      	ldr	r3, [pc, #648]	@ (801ca20 <csv_update+0x2dc>)
 801c798:	781b      	ldrb	r3, [r3, #0]
 801c79a:	2b00      	cmp	r3, #0
 801c79c:	f040 8126 	bne.w	801c9ec <csv_update+0x2a8>


		sprintf(buffer, "%s ,", ver_GetUid());
 801c7a0:	f7e5 fe92 	bl	80024c8 <ver_GetUid>
 801c7a4:	4603      	mov	r3, r0
 801c7a6:	461a      	mov	r2, r3
 801c7a8:	499e      	ldr	r1, [pc, #632]	@ (801ca24 <csv_update+0x2e0>)
 801c7aa:	489f      	ldr	r0, [pc, #636]	@ (801ca28 <csv_update+0x2e4>)
 801c7ac:	f002 f9d8 	bl	801eb60 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c7b0:	499d      	ldr	r1, [pc, #628]	@ (801ca28 <csv_update+0x2e4>)
 801c7b2:	489e      	ldr	r0, [pc, #632]	@ (801ca2c <csv_update+0x2e8>)
 801c7b4:	f7ff fd42 	bl	801c23c <Update_File>
 801c7b8:	4603      	mov	r3, r0
 801c7ba:	461a      	mov	r2, r3
 801c7bc:	4b98      	ldr	r3, [pc, #608]	@ (801ca20 <csv_update+0x2dc>)
 801c7be:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c7c0:	22ff      	movs	r2, #255	@ 0xff
 801c7c2:	2100      	movs	r1, #0
 801c7c4:	4898      	ldr	r0, [pc, #608]	@ (801ca28 <csv_update+0x2e4>)
 801c7c6:	f002 fb15 	bl	801edf4 <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.id);
 801c7ca:	4a99      	ldr	r2, [pc, #612]	@ (801ca30 <csv_update+0x2ec>)
 801c7cc:	4995      	ldr	r1, [pc, #596]	@ (801ca24 <csv_update+0x2e0>)
 801c7ce:	4896      	ldr	r0, [pc, #600]	@ (801ca28 <csv_update+0x2e4>)
 801c7d0:	f002 f9c6 	bl	801eb60 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c7d4:	4994      	ldr	r1, [pc, #592]	@ (801ca28 <csv_update+0x2e4>)
 801c7d6:	4895      	ldr	r0, [pc, #596]	@ (801ca2c <csv_update+0x2e8>)
 801c7d8:	f7ff fd30 	bl	801c23c <Update_File>
 801c7dc:	4603      	mov	r3, r0
 801c7de:	461a      	mov	r2, r3
 801c7e0:	4b8f      	ldr	r3, [pc, #572]	@ (801ca20 <csv_update+0x2dc>)
 801c7e2:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c7e4:	22ff      	movs	r2, #255	@ 0xff
 801c7e6:	2100      	movs	r1, #0
 801c7e8:	488f      	ldr	r0, [pc, #572]	@ (801ca28 <csv_update+0x2e4>)
 801c7ea:	f002 fb03 	bl	801edf4 <memset>
		sprintf(buffer, "%02d:%02d:%02d ,", sTime.Hours, sTime.Minutes,
 801c7ee:	783b      	ldrb	r3, [r7, #0]
 801c7f0:	461a      	mov	r2, r3
 801c7f2:	787b      	ldrb	r3, [r7, #1]
 801c7f4:	4619      	mov	r1, r3
				sTime.Seconds);
 801c7f6:	78bb      	ldrb	r3, [r7, #2]
		sprintf(buffer, "%02d:%02d:%02d ,", sTime.Hours, sTime.Minutes,
 801c7f8:	9300      	str	r3, [sp, #0]
 801c7fa:	460b      	mov	r3, r1
 801c7fc:	498d      	ldr	r1, [pc, #564]	@ (801ca34 <csv_update+0x2f0>)
 801c7fe:	488a      	ldr	r0, [pc, #552]	@ (801ca28 <csv_update+0x2e4>)
 801c800:	f002 f9ae 	bl	801eb60 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c804:	4988      	ldr	r1, [pc, #544]	@ (801ca28 <csv_update+0x2e4>)
 801c806:	4889      	ldr	r0, [pc, #548]	@ (801ca2c <csv_update+0x2e8>)
 801c808:	f7ff fd18 	bl	801c23c <Update_File>
 801c80c:	4603      	mov	r3, r0
 801c80e:	461a      	mov	r2, r3
 801c810:	4b83      	ldr	r3, [pc, #524]	@ (801ca20 <csv_update+0x2dc>)
 801c812:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c814:	22ff      	movs	r2, #255	@ 0xff
 801c816:	2100      	movs	r1, #0
 801c818:	4883      	ldr	r0, [pc, #524]	@ (801ca28 <csv_update+0x2e4>)
 801c81a:	f002 faeb 	bl	801edf4 <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.location);
 801c81e:	4a86      	ldr	r2, [pc, #536]	@ (801ca38 <csv_update+0x2f4>)
 801c820:	4980      	ldr	r1, [pc, #512]	@ (801ca24 <csv_update+0x2e0>)
 801c822:	4881      	ldr	r0, [pc, #516]	@ (801ca28 <csv_update+0x2e4>)
 801c824:	f002 f99c 	bl	801eb60 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c828:	497f      	ldr	r1, [pc, #508]	@ (801ca28 <csv_update+0x2e4>)
 801c82a:	4880      	ldr	r0, [pc, #512]	@ (801ca2c <csv_update+0x2e8>)
 801c82c:	f7ff fd06 	bl	801c23c <Update_File>
 801c830:	4603      	mov	r3, r0
 801c832:	461a      	mov	r2, r3
 801c834:	4b7a      	ldr	r3, [pc, #488]	@ (801ca20 <csv_update+0x2dc>)
 801c836:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c838:	22ff      	movs	r2, #255	@ 0xff
 801c83a:	2100      	movs	r1, #0
 801c83c:	487a      	ldr	r0, [pc, #488]	@ (801ca28 <csv_update+0x2e4>)
 801c83e:	f002 fad9 	bl	801edf4 <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.filename_ver_date);
 801c842:	4a7e      	ldr	r2, [pc, #504]	@ (801ca3c <csv_update+0x2f8>)
 801c844:	4977      	ldr	r1, [pc, #476]	@ (801ca24 <csv_update+0x2e0>)
 801c846:	4878      	ldr	r0, [pc, #480]	@ (801ca28 <csv_update+0x2e4>)
 801c848:	f002 f98a 	bl	801eb60 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c84c:	4976      	ldr	r1, [pc, #472]	@ (801ca28 <csv_update+0x2e4>)
 801c84e:	4877      	ldr	r0, [pc, #476]	@ (801ca2c <csv_update+0x2e8>)
 801c850:	f7ff fcf4 	bl	801c23c <Update_File>
 801c854:	4603      	mov	r3, r0
 801c856:	461a      	mov	r2, r3
 801c858:	4b71      	ldr	r3, [pc, #452]	@ (801ca20 <csv_update+0x2dc>)
 801c85a:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c85c:	22ff      	movs	r2, #255	@ 0xff
 801c85e:	2100      	movs	r1, #0
 801c860:	4871      	ldr	r0, [pc, #452]	@ (801ca28 <csv_update+0x2e4>)
 801c862:	f002 fac7 	bl	801edf4 <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.group);
 801c866:	4a76      	ldr	r2, [pc, #472]	@ (801ca40 <csv_update+0x2fc>)
 801c868:	496e      	ldr	r1, [pc, #440]	@ (801ca24 <csv_update+0x2e0>)
 801c86a:	486f      	ldr	r0, [pc, #444]	@ (801ca28 <csv_update+0x2e4>)
 801c86c:	f002 f978 	bl	801eb60 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c870:	496d      	ldr	r1, [pc, #436]	@ (801ca28 <csv_update+0x2e4>)
 801c872:	486e      	ldr	r0, [pc, #440]	@ (801ca2c <csv_update+0x2e8>)
 801c874:	f7ff fce2 	bl	801c23c <Update_File>
 801c878:	4603      	mov	r3, r0
 801c87a:	461a      	mov	r2, r3
 801c87c:	4b68      	ldr	r3, [pc, #416]	@ (801ca20 <csv_update+0x2dc>)
 801c87e:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
		sprintf(buffer, "%ld ,", _RunTime_Packet.humidity);
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
#elif use_scd30
		memset(buffer, 0, sizeof(buffer));
 801c880:	22ff      	movs	r2, #255	@ 0xff
 801c882:	2100      	movs	r1, #0
 801c884:	4868      	ldr	r0, [pc, #416]	@ (801ca28 <csv_update+0x2e4>)
 801c886:	f002 fab5 	bl	801edf4 <memset>
		sprintf(buffer, "%.2f ,", _RunTime_Packet.co2);
 801c88a:	4b6e      	ldr	r3, [pc, #440]	@ (801ca44 <csv_update+0x300>)
 801c88c:	681b      	ldr	r3, [r3, #0]
 801c88e:	4618      	mov	r0, r3
 801c890:	f7e3 fe72 	bl	8000578 <__aeabi_f2d>
 801c894:	4602      	mov	r2, r0
 801c896:	460b      	mov	r3, r1
 801c898:	496b      	ldr	r1, [pc, #428]	@ (801ca48 <csv_update+0x304>)
 801c89a:	4863      	ldr	r0, [pc, #396]	@ (801ca28 <csv_update+0x2e4>)
 801c89c:	f002 f960 	bl	801eb60 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c8a0:	4961      	ldr	r1, [pc, #388]	@ (801ca28 <csv_update+0x2e4>)
 801c8a2:	4862      	ldr	r0, [pc, #392]	@ (801ca2c <csv_update+0x2e8>)
 801c8a4:	f7ff fcca 	bl	801c23c <Update_File>
 801c8a8:	4603      	mov	r3, r0
 801c8aa:	461a      	mov	r2, r3
 801c8ac:	4b5c      	ldr	r3, [pc, #368]	@ (801ca20 <csv_update+0x2dc>)
 801c8ae:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c8b0:	22ff      	movs	r2, #255	@ 0xff
 801c8b2:	2100      	movs	r1, #0
 801c8b4:	485c      	ldr	r0, [pc, #368]	@ (801ca28 <csv_update+0x2e4>)
 801c8b6:	f002 fa9d 	bl	801edf4 <memset>
		sprintf(buffer, "%.2f ,", _RunTime_Packet.temperature);
 801c8ba:	4b62      	ldr	r3, [pc, #392]	@ (801ca44 <csv_update+0x300>)
 801c8bc:	685b      	ldr	r3, [r3, #4]
 801c8be:	4618      	mov	r0, r3
 801c8c0:	f7e3 fe5a 	bl	8000578 <__aeabi_f2d>
 801c8c4:	4602      	mov	r2, r0
 801c8c6:	460b      	mov	r3, r1
 801c8c8:	495f      	ldr	r1, [pc, #380]	@ (801ca48 <csv_update+0x304>)
 801c8ca:	4857      	ldr	r0, [pc, #348]	@ (801ca28 <csv_update+0x2e4>)
 801c8cc:	f002 f948 	bl	801eb60 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c8d0:	4955      	ldr	r1, [pc, #340]	@ (801ca28 <csv_update+0x2e4>)
 801c8d2:	4856      	ldr	r0, [pc, #344]	@ (801ca2c <csv_update+0x2e8>)
 801c8d4:	f7ff fcb2 	bl	801c23c <Update_File>
 801c8d8:	4603      	mov	r3, r0
 801c8da:	461a      	mov	r2, r3
 801c8dc:	4b50      	ldr	r3, [pc, #320]	@ (801ca20 <csv_update+0x2dc>)
 801c8de:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c8e0:	22ff      	movs	r2, #255	@ 0xff
 801c8e2:	2100      	movs	r1, #0
 801c8e4:	4850      	ldr	r0, [pc, #320]	@ (801ca28 <csv_update+0x2e4>)
 801c8e6:	f002 fa85 	bl	801edf4 <memset>
		sprintf(buffer, "%.2f ,", _RunTime_Packet.humidity);
 801c8ea:	4b56      	ldr	r3, [pc, #344]	@ (801ca44 <csv_update+0x300>)
 801c8ec:	689b      	ldr	r3, [r3, #8]
 801c8ee:	4618      	mov	r0, r3
 801c8f0:	f7e3 fe42 	bl	8000578 <__aeabi_f2d>
 801c8f4:	4602      	mov	r2, r0
 801c8f6:	460b      	mov	r3, r1
 801c8f8:	4953      	ldr	r1, [pc, #332]	@ (801ca48 <csv_update+0x304>)
 801c8fa:	484b      	ldr	r0, [pc, #300]	@ (801ca28 <csv_update+0x2e4>)
 801c8fc:	f002 f930 	bl	801eb60 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c900:	4949      	ldr	r1, [pc, #292]	@ (801ca28 <csv_update+0x2e4>)
 801c902:	484a      	ldr	r0, [pc, #296]	@ (801ca2c <csv_update+0x2e8>)
 801c904:	f7ff fc9a 	bl	801c23c <Update_File>
 801c908:	4603      	mov	r3, r0
 801c90a:	461a      	mov	r2, r3
 801c90c:	4b44      	ldr	r3, [pc, #272]	@ (801ca20 <csv_update+0x2dc>)
 801c90e:	701a      	strb	r2, [r3, #0]
#endif
		memset(buffer, 0, sizeof(buffer));
 801c910:	22ff      	movs	r2, #255	@ 0xff
 801c912:	2100      	movs	r1, #0
 801c914:	4844      	ldr	r0, [pc, #272]	@ (801ca28 <csv_update+0x2e4>)
 801c916:	f002 fa6d 	bl	801edf4 <memset>
		sprintf(buffer, "%s ,",
				_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 801c91a:	4b4a      	ldr	r3, [pc, #296]	@ (801ca44 <csv_update+0x300>)
 801c91c:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(buffer, "%s ,",
 801c91e:	2b01      	cmp	r3, #1
 801c920:	d101      	bne.n	801c926 <csv_update+0x1e2>
 801c922:	4b4a      	ldr	r3, [pc, #296]	@ (801ca4c <csv_update+0x308>)
 801c924:	e000      	b.n	801c928 <csv_update+0x1e4>
 801c926:	4b4a      	ldr	r3, [pc, #296]	@ (801ca50 <csv_update+0x30c>)
 801c928:	461a      	mov	r2, r3
 801c92a:	493e      	ldr	r1, [pc, #248]	@ (801ca24 <csv_update+0x2e0>)
 801c92c:	483e      	ldr	r0, [pc, #248]	@ (801ca28 <csv_update+0x2e4>)
 801c92e:	f002 f917 	bl	801eb60 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c932:	493d      	ldr	r1, [pc, #244]	@ (801ca28 <csv_update+0x2e4>)
 801c934:	483d      	ldr	r0, [pc, #244]	@ (801ca2c <csv_update+0x2e8>)
 801c936:	f7ff fc81 	bl	801c23c <Update_File>
 801c93a:	4603      	mov	r3, r0
 801c93c:	461a      	mov	r2, r3
 801c93e:	4b38      	ldr	r3, [pc, #224]	@ (801ca20 <csv_update+0x2dc>)
 801c940:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c942:	22ff      	movs	r2, #255	@ 0xff
 801c944:	2100      	movs	r1, #0
 801c946:	4838      	ldr	r0, [pc, #224]	@ (801ca28 <csv_update+0x2e4>)
 801c948:	f002 fa54 	bl	801edf4 <memset>
		sprintf(buffer, "%.02f ,", _RunTime_Packet.pm2_5);
 801c94c:	4b3d      	ldr	r3, [pc, #244]	@ (801ca44 <csv_update+0x300>)
 801c94e:	695b      	ldr	r3, [r3, #20]
 801c950:	4618      	mov	r0, r3
 801c952:	f7e3 fe11 	bl	8000578 <__aeabi_f2d>
 801c956:	4602      	mov	r2, r0
 801c958:	460b      	mov	r3, r1
 801c95a:	493e      	ldr	r1, [pc, #248]	@ (801ca54 <csv_update+0x310>)
 801c95c:	4832      	ldr	r0, [pc, #200]	@ (801ca28 <csv_update+0x2e4>)
 801c95e:	f002 f8ff 	bl	801eb60 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c962:	4931      	ldr	r1, [pc, #196]	@ (801ca28 <csv_update+0x2e4>)
 801c964:	4831      	ldr	r0, [pc, #196]	@ (801ca2c <csv_update+0x2e8>)
 801c966:	f7ff fc69 	bl	801c23c <Update_File>
 801c96a:	4603      	mov	r3, r0
 801c96c:	461a      	mov	r2, r3
 801c96e:	4b2c      	ldr	r3, [pc, #176]	@ (801ca20 <csv_update+0x2dc>)
 801c970:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c972:	22ff      	movs	r2, #255	@ 0xff
 801c974:	2100      	movs	r1, #0
 801c976:	482c      	ldr	r0, [pc, #176]	@ (801ca28 <csv_update+0x2e4>)
 801c978:	f002 fa3c 	bl	801edf4 <memset>
		sprintf(buffer, "NONE ,");
 801c97c:	4936      	ldr	r1, [pc, #216]	@ (801ca58 <csv_update+0x314>)
 801c97e:	482a      	ldr	r0, [pc, #168]	@ (801ca28 <csv_update+0x2e4>)
 801c980:	f002 f8ee 	bl	801eb60 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c984:	4928      	ldr	r1, [pc, #160]	@ (801ca28 <csv_update+0x2e4>)
 801c986:	4829      	ldr	r0, [pc, #164]	@ (801ca2c <csv_update+0x2e8>)
 801c988:	f7ff fc58 	bl	801c23c <Update_File>
 801c98c:	4603      	mov	r3, r0
 801c98e:	461a      	mov	r2, r3
 801c990:	4b23      	ldr	r3, [pc, #140]	@ (801ca20 <csv_update+0x2dc>)
 801c992:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c994:	22ff      	movs	r2, #255	@ 0xff
 801c996:	2100      	movs	r1, #0
 801c998:	4823      	ldr	r0, [pc, #140]	@ (801ca28 <csv_update+0x2e4>)
 801c99a:	f002 fa2b 	bl	801edf4 <memset>
		sprintf(buffer, "%.02f ,", _RunTime_Packet.battery_voltage);
 801c99e:	4b29      	ldr	r3, [pc, #164]	@ (801ca44 <csv_update+0x300>)
 801c9a0:	6a1b      	ldr	r3, [r3, #32]
 801c9a2:	4618      	mov	r0, r3
 801c9a4:	f7e3 fde8 	bl	8000578 <__aeabi_f2d>
 801c9a8:	4602      	mov	r2, r0
 801c9aa:	460b      	mov	r3, r1
 801c9ac:	4929      	ldr	r1, [pc, #164]	@ (801ca54 <csv_update+0x310>)
 801c9ae:	481e      	ldr	r0, [pc, #120]	@ (801ca28 <csv_update+0x2e4>)
 801c9b0:	f002 f8d6 	bl	801eb60 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c9b4:	491c      	ldr	r1, [pc, #112]	@ (801ca28 <csv_update+0x2e4>)
 801c9b6:	481d      	ldr	r0, [pc, #116]	@ (801ca2c <csv_update+0x2e8>)
 801c9b8:	f7ff fc40 	bl	801c23c <Update_File>
 801c9bc:	4603      	mov	r3, r0
 801c9be:	461a      	mov	r2, r3
 801c9c0:	4b17      	ldr	r3, [pc, #92]	@ (801ca20 <csv_update+0x2dc>)
 801c9c2:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c9c4:	22ff      	movs	r2, #255	@ 0xff
 801c9c6:	2100      	movs	r1, #0
 801c9c8:	4817      	ldr	r0, [pc, #92]	@ (801ca28 <csv_update+0x2e4>)
 801c9ca:	f002 fa13 	bl	801edf4 <memset>
		sprintf(buffer, "\n");
 801c9ce:	4923      	ldr	r1, [pc, #140]	@ (801ca5c <csv_update+0x318>)
 801c9d0:	4815      	ldr	r0, [pc, #84]	@ (801ca28 <csv_update+0x2e4>)
 801c9d2:	f002 f8c5 	bl	801eb60 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c9d6:	4914      	ldr	r1, [pc, #80]	@ (801ca28 <csv_update+0x2e4>)
 801c9d8:	4814      	ldr	r0, [pc, #80]	@ (801ca2c <csv_update+0x2e8>)
 801c9da:	f7ff fc2f 	bl	801c23c <Update_File>
 801c9de:	4603      	mov	r3, r0
 801c9e0:	461a      	mov	r2, r3
 801c9e2:	4b0f      	ldr	r3, [pc, #60]	@ (801ca20 <csv_update+0x2dc>)
 801c9e4:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801c9e6:	480d      	ldr	r0, [pc, #52]	@ (801ca1c <csv_update+0x2d8>)
 801c9e8:	f7ff fb66 	bl	801c0b8 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801c9ec:	4b0c      	ldr	r3, [pc, #48]	@ (801ca20 <csv_update+0x2dc>)
 801c9ee:	781b      	ldrb	r3, [r3, #0]
 801c9f0:	b25a      	sxtb	r2, r3
 801c9f2:	4b14      	ldr	r3, [pc, #80]	@ (801ca44 <csv_update+0x300>)
 801c9f4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
}
 801c9f8:	bf00      	nop
 801c9fa:	3718      	adds	r7, #24
 801c9fc:	46bd      	mov	sp, r7
 801c9fe:	bd80      	pop	{r7, pc}
 801ca00:	20001898 	.word	0x20001898
 801ca04:	20002326 	.word	0x20002326
 801ca08:	20002327 	.word	0x20002327
 801ca0c:	20002328 	.word	0x20002328
 801ca10:	20002329 	.word	0x20002329
 801ca14:	2000232a 	.word	0x2000232a
 801ca18:	2000232b 	.word	0x2000232b
 801ca1c:	08024c64 	.word	0x08024c64
 801ca20:	20002324 	.word	0x20002324
 801ca24:	08024d78 	.word	0x08024d78
 801ca28:	20002330 	.word	0x20002330
 801ca2c:	20001461 	.word	0x20001461
 801ca30:	20001399 	.word	0x20001399
 801ca34:	08024d80 	.word	0x08024d80
 801ca38:	200013cb 	.word	0x200013cb
 801ca3c:	200014c5 	.word	0x200014c5
 801ca40:	2000142f 	.word	0x2000142f
 801ca44:	20001530 	.word	0x20001530
 801ca48:	08024d94 	.word	0x08024d94
 801ca4c:	08024d1c 	.word	0x08024d1c
 801ca50:	08024d24 	.word	0x08024d24
 801ca54:	08024d9c 	.word	0x08024d9c
 801ca58:	08024da4 	.word	0x08024da4
 801ca5c:	08024dac 	.word	0x08024dac

0801ca60 <csv_header>:
void csv_header() {
 801ca60:	b580      	push	{r7, lr}
 801ca62:	af00      	add	r7, sp, #0

	fresult1 = Mount_SD("/");
 801ca64:	485d      	ldr	r0, [pc, #372]	@ (801cbdc <csv_header+0x17c>)
 801ca66:	f7ff fafb 	bl	801c060 <Mount_SD>
 801ca6a:	4603      	mov	r3, r0
 801ca6c:	461a      	mov	r2, r3
 801ca6e:	4b5c      	ldr	r3, [pc, #368]	@ (801cbe0 <csv_header+0x180>)
 801ca70:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801ca72:	4b5b      	ldr	r3, [pc, #364]	@ (801cbe0 <csv_header+0x180>)
 801ca74:	781b      	ldrb	r3, [r3, #0]
 801ca76:	2b00      	cmp	r3, #0
 801ca78:	f040 80a7 	bne.w	801cbca <csv_header+0x16a>


		sprintf(buffer, "devEUI ,");
 801ca7c:	4959      	ldr	r1, [pc, #356]	@ (801cbe4 <csv_header+0x184>)
 801ca7e:	485a      	ldr	r0, [pc, #360]	@ (801cbe8 <csv_header+0x188>)
 801ca80:	f002 f86e 	bl	801eb60 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801ca84:	4958      	ldr	r1, [pc, #352]	@ (801cbe8 <csv_header+0x188>)
 801ca86:	4859      	ldr	r0, [pc, #356]	@ (801cbec <csv_header+0x18c>)
 801ca88:	f7ff fbd8 	bl	801c23c <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ca8c:	22ff      	movs	r2, #255	@ 0xff
 801ca8e:	2100      	movs	r1, #0
 801ca90:	4855      	ldr	r0, [pc, #340]	@ (801cbe8 <csv_header+0x188>)
 801ca92:	f002 f9af 	bl	801edf4 <memset>
		sprintf(buffer, "id ,");
 801ca96:	4956      	ldr	r1, [pc, #344]	@ (801cbf0 <csv_header+0x190>)
 801ca98:	4853      	ldr	r0, [pc, #332]	@ (801cbe8 <csv_header+0x188>)
 801ca9a:	f002 f861 	bl	801eb60 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801ca9e:	4952      	ldr	r1, [pc, #328]	@ (801cbe8 <csv_header+0x188>)
 801caa0:	4852      	ldr	r0, [pc, #328]	@ (801cbec <csv_header+0x18c>)
 801caa2:	f7ff fbcb 	bl	801c23c <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801caa6:	22ff      	movs	r2, #255	@ 0xff
 801caa8:	2100      	movs	r1, #0
 801caaa:	484f      	ldr	r0, [pc, #316]	@ (801cbe8 <csv_header+0x188>)
 801caac:	f002 f9a2 	bl	801edf4 <memset>
		sprintf(buffer, "timestamp ,");
 801cab0:	4950      	ldr	r1, [pc, #320]	@ (801cbf4 <csv_header+0x194>)
 801cab2:	484d      	ldr	r0, [pc, #308]	@ (801cbe8 <csv_header+0x188>)
 801cab4:	f002 f854 	bl	801eb60 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801cab8:	494b      	ldr	r1, [pc, #300]	@ (801cbe8 <csv_header+0x188>)
 801caba:	484c      	ldr	r0, [pc, #304]	@ (801cbec <csv_header+0x18c>)
 801cabc:	f7ff fbbe 	bl	801c23c <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801cac0:	22ff      	movs	r2, #255	@ 0xff
 801cac2:	2100      	movs	r1, #0
 801cac4:	4848      	ldr	r0, [pc, #288]	@ (801cbe8 <csv_header+0x188>)
 801cac6:	f002 f995 	bl	801edf4 <memset>
		sprintf(buffer, "location ,");
 801caca:	494b      	ldr	r1, [pc, #300]	@ (801cbf8 <csv_header+0x198>)
 801cacc:	4846      	ldr	r0, [pc, #280]	@ (801cbe8 <csv_header+0x188>)
 801cace:	f002 f847 	bl	801eb60 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801cad2:	4945      	ldr	r1, [pc, #276]	@ (801cbe8 <csv_header+0x188>)
 801cad4:	4845      	ldr	r0, [pc, #276]	@ (801cbec <csv_header+0x18c>)
 801cad6:	f7ff fbb1 	bl	801c23c <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801cada:	22ff      	movs	r2, #255	@ 0xff
 801cadc:	2100      	movs	r1, #0
 801cade:	4842      	ldr	r0, [pc, #264]	@ (801cbe8 <csv_header+0x188>)
 801cae0:	f002 f988 	bl	801edf4 <memset>
		sprintf(buffer, "Filename ,");
 801cae4:	4945      	ldr	r1, [pc, #276]	@ (801cbfc <csv_header+0x19c>)
 801cae6:	4840      	ldr	r0, [pc, #256]	@ (801cbe8 <csv_header+0x188>)
 801cae8:	f002 f83a 	bl	801eb60 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801caec:	493e      	ldr	r1, [pc, #248]	@ (801cbe8 <csv_header+0x188>)
 801caee:	483f      	ldr	r0, [pc, #252]	@ (801cbec <csv_header+0x18c>)
 801caf0:	f7ff fba4 	bl	801c23c <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801caf4:	22ff      	movs	r2, #255	@ 0xff
 801caf6:	2100      	movs	r1, #0
 801caf8:	483b      	ldr	r0, [pc, #236]	@ (801cbe8 <csv_header+0x188>)
 801cafa:	f002 f97b 	bl	801edf4 <memset>
		sprintf(buffer, "group ,");
 801cafe:	4940      	ldr	r1, [pc, #256]	@ (801cc00 <csv_header+0x1a0>)
 801cb00:	4839      	ldr	r0, [pc, #228]	@ (801cbe8 <csv_header+0x188>)
 801cb02:	f002 f82d 	bl	801eb60 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801cb06:	4938      	ldr	r1, [pc, #224]	@ (801cbe8 <csv_header+0x188>)
 801cb08:	4838      	ldr	r0, [pc, #224]	@ (801cbec <csv_header+0x18c>)
 801cb0a:	f7ff fb97 	bl	801c23c <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801cb0e:	22ff      	movs	r2, #255	@ 0xff
 801cb10:	2100      	movs	r1, #0
 801cb12:	4835      	ldr	r0, [pc, #212]	@ (801cbe8 <csv_header+0x188>)
 801cb14:	f002 f96e 	bl	801edf4 <memset>
		sprintf(buffer, "co2 ,");
 801cb18:	493a      	ldr	r1, [pc, #232]	@ (801cc04 <csv_header+0x1a4>)
 801cb1a:	4833      	ldr	r0, [pc, #204]	@ (801cbe8 <csv_header+0x188>)
 801cb1c:	f002 f820 	bl	801eb60 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801cb20:	4931      	ldr	r1, [pc, #196]	@ (801cbe8 <csv_header+0x188>)
 801cb22:	4832      	ldr	r0, [pc, #200]	@ (801cbec <csv_header+0x18c>)
 801cb24:	f7ff fb8a 	bl	801c23c <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801cb28:	22ff      	movs	r2, #255	@ 0xff
 801cb2a:	2100      	movs	r1, #0
 801cb2c:	482e      	ldr	r0, [pc, #184]	@ (801cbe8 <csv_header+0x188>)
 801cb2e:	f002 f961 	bl	801edf4 <memset>
		sprintf(buffer, "temperature ,");
 801cb32:	4935      	ldr	r1, [pc, #212]	@ (801cc08 <csv_header+0x1a8>)
 801cb34:	482c      	ldr	r0, [pc, #176]	@ (801cbe8 <csv_header+0x188>)
 801cb36:	f002 f813 	bl	801eb60 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801cb3a:	492b      	ldr	r1, [pc, #172]	@ (801cbe8 <csv_header+0x188>)
 801cb3c:	482b      	ldr	r0, [pc, #172]	@ (801cbec <csv_header+0x18c>)
 801cb3e:	f7ff fb7d 	bl	801c23c <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801cb42:	22ff      	movs	r2, #255	@ 0xff
 801cb44:	2100      	movs	r1, #0
 801cb46:	4828      	ldr	r0, [pc, #160]	@ (801cbe8 <csv_header+0x188>)
 801cb48:	f002 f954 	bl	801edf4 <memset>
		sprintf(buffer, "humidity ,");
 801cb4c:	492f      	ldr	r1, [pc, #188]	@ (801cc0c <csv_header+0x1ac>)
 801cb4e:	4826      	ldr	r0, [pc, #152]	@ (801cbe8 <csv_header+0x188>)
 801cb50:	f002 f806 	bl	801eb60 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801cb54:	4924      	ldr	r1, [pc, #144]	@ (801cbe8 <csv_header+0x188>)
 801cb56:	4825      	ldr	r0, [pc, #148]	@ (801cbec <csv_header+0x18c>)
 801cb58:	f7ff fb70 	bl	801c23c <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801cb5c:	22ff      	movs	r2, #255	@ 0xff
 801cb5e:	2100      	movs	r1, #0
 801cb60:	4821      	ldr	r0, [pc, #132]	@ (801cbe8 <csv_header+0x188>)
 801cb62:	f002 f947 	bl	801edf4 <memset>
		sprintf(buffer, "pir ,");
 801cb66:	492a      	ldr	r1, [pc, #168]	@ (801cc10 <csv_header+0x1b0>)
 801cb68:	481f      	ldr	r0, [pc, #124]	@ (801cbe8 <csv_header+0x188>)
 801cb6a:	f001 fff9 	bl	801eb60 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801cb6e:	491e      	ldr	r1, [pc, #120]	@ (801cbe8 <csv_header+0x188>)
 801cb70:	481e      	ldr	r0, [pc, #120]	@ (801cbec <csv_header+0x18c>)
 801cb72:	f7ff fb63 	bl	801c23c <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801cb76:	22ff      	movs	r2, #255	@ 0xff
 801cb78:	2100      	movs	r1, #0
 801cb7a:	481b      	ldr	r0, [pc, #108]	@ (801cbe8 <csv_header+0x188>)
 801cb7c:	f002 f93a 	bl	801edf4 <memset>
		sprintf(buffer, "pm2.5 ,");
 801cb80:	4924      	ldr	r1, [pc, #144]	@ (801cc14 <csv_header+0x1b4>)
 801cb82:	4819      	ldr	r0, [pc, #100]	@ (801cbe8 <csv_header+0x188>)
 801cb84:	f001 ffec 	bl	801eb60 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801cb88:	4917      	ldr	r1, [pc, #92]	@ (801cbe8 <csv_header+0x188>)
 801cb8a:	4818      	ldr	r0, [pc, #96]	@ (801cbec <csv_header+0x18c>)
 801cb8c:	f7ff fb56 	bl	801c23c <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801cb90:	22ff      	movs	r2, #255	@ 0xff
 801cb92:	2100      	movs	r1, #0
 801cb94:	4814      	ldr	r0, [pc, #80]	@ (801cbe8 <csv_header+0x188>)
 801cb96:	f002 f92d 	bl	801edf4 <memset>
		sprintf(buffer, "port ,");
 801cb9a:	491f      	ldr	r1, [pc, #124]	@ (801cc18 <csv_header+0x1b8>)
 801cb9c:	4812      	ldr	r0, [pc, #72]	@ (801cbe8 <csv_header+0x188>)
 801cb9e:	f001 ffdf 	bl	801eb60 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801cba2:	4911      	ldr	r1, [pc, #68]	@ (801cbe8 <csv_header+0x188>)
 801cba4:	4811      	ldr	r0, [pc, #68]	@ (801cbec <csv_header+0x18c>)
 801cba6:	f7ff fb49 	bl	801c23c <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801cbaa:	22ff      	movs	r2, #255	@ 0xff
 801cbac:	2100      	movs	r1, #0
 801cbae:	480e      	ldr	r0, [pc, #56]	@ (801cbe8 <csv_header+0x188>)
 801cbb0:	f002 f920 	bl	801edf4 <memset>
		sprintf(buffer, "battery \n\n");
 801cbb4:	4919      	ldr	r1, [pc, #100]	@ (801cc1c <csv_header+0x1bc>)
 801cbb6:	480c      	ldr	r0, [pc, #48]	@ (801cbe8 <csv_header+0x188>)
 801cbb8:	f001 ffd2 	bl	801eb60 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801cbbc:	490a      	ldr	r1, [pc, #40]	@ (801cbe8 <csv_header+0x188>)
 801cbbe:	480b      	ldr	r0, [pc, #44]	@ (801cbec <csv_header+0x18c>)
 801cbc0:	f7ff fb3c 	bl	801c23c <Update_File>

		Unmount_SD("/");
 801cbc4:	4805      	ldr	r0, [pc, #20]	@ (801cbdc <csv_header+0x17c>)
 801cbc6:	f7ff fa77 	bl	801c0b8 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801cbca:	4b05      	ldr	r3, [pc, #20]	@ (801cbe0 <csv_header+0x180>)
 801cbcc:	781b      	ldrb	r3, [r3, #0]
 801cbce:	b25a      	sxtb	r2, r3
 801cbd0:	4b13      	ldr	r3, [pc, #76]	@ (801cc20 <csv_header+0x1c0>)
 801cbd2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

}
 801cbd6:	bf00      	nop
 801cbd8:	bd80      	pop	{r7, pc}
 801cbda:	bf00      	nop
 801cbdc:	08024c64 	.word	0x08024c64
 801cbe0:	20002324 	.word	0x20002324
 801cbe4:	08024db0 	.word	0x08024db0
 801cbe8:	20002330 	.word	0x20002330
 801cbec:	20001461 	.word	0x20001461
 801cbf0:	08024dbc 	.word	0x08024dbc
 801cbf4:	08024dc4 	.word	0x08024dc4
 801cbf8:	08024dd0 	.word	0x08024dd0
 801cbfc:	08024ddc 	.word	0x08024ddc
 801cc00:	08024de8 	.word	0x08024de8
 801cc04:	08024df0 	.word	0x08024df0
 801cc08:	08024df8 	.word	0x08024df8
 801cc0c:	08024e08 	.word	0x08024e08
 801cc10:	08024e14 	.word	0x08024e14
 801cc14:	08024e1c 	.word	0x08024e1c
 801cc18:	08024e24 	.word	0x08024e24
 801cc1c:	08024e2c 	.word	0x08024e2c
 801cc20:	20001530 	.word	0x20001530

0801cc24 <filesaving_process>:
uint8_t filesaving_process() {
 801cc24:	b580      	push	{r7, lr}
 801cc26:	af00      	add	r7, sp, #0
//	__disable_irq();

	 Mount_SD("/");
 801cc28:	481c      	ldr	r0, [pc, #112]	@ (801cc9c <filesaving_process+0x78>)
 801cc2a:	f7ff fa19 	bl	801c060 <Mount_SD>
	 if(check_file_exists(_Flash_Packet.filename_with_format)) //if file does not exists then create it
 801cc2e:	481c      	ldr	r0, [pc, #112]	@ (801cca0 <filesaving_process+0x7c>)
 801cc30:	f7ff fbc0 	bl	801c3b4 <check_file_exists>
 801cc34:	4603      	mov	r3, r0
 801cc36:	2b00      	cmp	r3, #0
 801cc38:	d00c      	beq.n	801cc54 <filesaving_process+0x30>
	 {
		Unmount_SD("/");
 801cc3a:	4818      	ldr	r0, [pc, #96]	@ (801cc9c <filesaving_process+0x78>)
 801cc3c:	f7ff fa3c 	bl	801c0b8 <Unmount_SD>
		_RunTime_Packet.sd_file_creation = createfile(_Flash_Packet.File_Name,_Flash_Packet.File_Format);
 801cc40:	4918      	ldr	r1, [pc, #96]	@ (801cca4 <filesaving_process+0x80>)
 801cc42:	4819      	ldr	r0, [pc, #100]	@ (801cca8 <filesaving_process+0x84>)
 801cc44:	f000 f838 	bl	801ccb8 <createfile>
 801cc48:	4603      	mov	r3, r0
 801cc4a:	461a      	mov	r2, r3
 801cc4c:	4b17      	ldr	r3, [pc, #92]	@ (801ccac <filesaving_process+0x88>)
 801cc4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 801cc52:	e002      	b.n	801cc5a <filesaving_process+0x36>
	 }
	 else
	 {
		Unmount_SD("/");
 801cc54:	4811      	ldr	r0, [pc, #68]	@ (801cc9c <filesaving_process+0x78>)
 801cc56:	f7ff fa2f 	bl	801c0b8 <Unmount_SD>
	 }




	memset(buffer, 0, sizeof(buffer));
 801cc5a:	22ff      	movs	r2, #255	@ 0xff
 801cc5c:	2100      	movs	r1, #0
 801cc5e:	4814      	ldr	r0, [pc, #80]	@ (801ccb0 <filesaving_process+0x8c>)
 801cc60:	f002 f8c8 	bl	801edf4 <memset>
	if (_RunTime_Packet.fileformat_selection) {
 801cc64:	4b11      	ldr	r3, [pc, #68]	@ (801ccac <filesaving_process+0x88>)
 801cc66:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 801cc6a:	2b00      	cmp	r3, #0
 801cc6c:	d002      	beq.n	801cc74 <filesaving_process+0x50>
		csv_update();
 801cc6e:	f7ff fd69 	bl	801c744 <csv_update>
 801cc72:	e001      	b.n	801cc78 <filesaving_process+0x54>
	} else {
		json_update();
 801cc74:	f7ff fbb4 	bl	801c3e0 <json_update>
	}

	if (_RunTime_Packet.sd_card_disk_write_error != 0) //means there is error
 801cc78:	4b0c      	ldr	r3, [pc, #48]	@ (801ccac <filesaving_process+0x88>)
 801cc7a:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 801cc7e:	2b00      	cmp	r3, #0
 801cc80:	d006      	beq.n	801cc90 <filesaving_process+0x6c>
			{
		//blink red so user can know
		blink_red();
 801cc82:	f7e5 fa23 	bl	80020cc <blink_red>
		datawritten = 2;
 801cc86:	4b0b      	ldr	r3, [pc, #44]	@ (801ccb4 <filesaving_process+0x90>)
 801cc88:	2202      	movs	r2, #2
 801cc8a:	701a      	strb	r2, [r3, #0]
		return 1; //not working
 801cc8c:	2301      	movs	r3, #1
 801cc8e:	e003      	b.n	801cc98 <filesaving_process+0x74>
	} else //packet written succesfully
	{
		datawritten = 1;
 801cc90:	4b08      	ldr	r3, [pc, #32]	@ (801ccb4 <filesaving_process+0x90>)
 801cc92:	2201      	movs	r2, #1
 801cc94:	701a      	strb	r2, [r3, #0]
	}

	return 0; //all good
 801cc96:	2300      	movs	r3, #0
//	__enable_irq();
}
 801cc98:	4618      	mov	r0, r3
 801cc9a:	bd80      	pop	{r7, pc}
 801cc9c:	08024c64 	.word	0x08024c64
 801cca0:	20001461 	.word	0x20001461
 801cca4:	20001330 	.word	0x20001330
 801cca8:	200012cc 	.word	0x200012cc
 801ccac:	20001530 	.word	0x20001530
 801ccb0:	20002330 	.word	0x20002330
 801ccb4:	2000232c 	.word	0x2000232c

0801ccb8 <createfile>:
int8_t createfile(char *filename, char *fileformat) {
 801ccb8:	b580      	push	{r7, lr}
 801ccba:	b08c      	sub	sp, #48	@ 0x30
 801ccbc:	af04      	add	r7, sp, #16
 801ccbe:	6078      	str	r0, [r7, #4]
 801ccc0:	6039      	str	r1, [r7, #0]

	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801ccc2:	f107 031c 	add.w	r3, r7, #28
 801ccc6:	2200      	movs	r2, #0
 801ccc8:	4619      	mov	r1, r3
 801ccca:	4845      	ldr	r0, [pc, #276]	@ (801cde0 <createfile+0x128>)
 801cccc:	f7ec ff9f 	bl	8009c0e <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801ccd0:	f107 0308 	add.w	r3, r7, #8
 801ccd4:	2200      	movs	r2, #0
 801ccd6:	4619      	mov	r1, r3
 801ccd8:	4841      	ldr	r0, [pc, #260]	@ (801cde0 <createfile+0x128>)
 801ccda:	f7ec feb6 	bl	8009a4a <HAL_RTC_GetTime>


	//if rtc backup register has nothing or our filename with foirmat is not same as filename then create a file otheriwse just go forward
	if((HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0xBEBE) || !strstr(_Flash_Packet.filename_with_format,_Flash_Packet.File_Name)
 801ccde:	2101      	movs	r1, #1
 801cce0:	483f      	ldr	r0, [pc, #252]	@ (801cde0 <createfile+0x128>)
 801cce2:	f7ed fa45 	bl	800a170 <HAL_RTCEx_BKUPRead>
 801cce6:	4603      	mov	r3, r0
 801cce8:	f64b 62be 	movw	r2, #48830	@ 0xbebe
 801ccec:	4293      	cmp	r3, r2
 801ccee:	d11b      	bne.n	801cd28 <createfile+0x70>
 801ccf0:	493c      	ldr	r1, [pc, #240]	@ (801cde4 <createfile+0x12c>)
 801ccf2:	483d      	ldr	r0, [pc, #244]	@ (801cde8 <createfile+0x130>)
 801ccf4:	f002 f8f0 	bl	801eed8 <strstr>
 801ccf8:	4603      	mov	r3, r0
 801ccfa:	2b00      	cmp	r3, #0
 801ccfc:	d014      	beq.n	801cd28 <createfile+0x70>
			|| _RunTime_Packet.year_changed || _RunTime_Packet.filename_changed || _RunTime_Packet.fileformat_changed || (_RunTime_Packet.sd_file_creation == -1))
 801ccfe:	4b3b      	ldr	r3, [pc, #236]	@ (801cdec <createfile+0x134>)
 801cd00:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801cd04:	2b00      	cmp	r3, #0
 801cd06:	d10f      	bne.n	801cd28 <createfile+0x70>
 801cd08:	4b38      	ldr	r3, [pc, #224]	@ (801cdec <createfile+0x134>)
 801cd0a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 801cd0e:	2b00      	cmp	r3, #0
 801cd10:	d10a      	bne.n	801cd28 <createfile+0x70>
 801cd12:	4b36      	ldr	r3, [pc, #216]	@ (801cdec <createfile+0x134>)
 801cd14:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 801cd18:	2b00      	cmp	r3, #0
 801cd1a:	d105      	bne.n	801cd28 <createfile+0x70>
 801cd1c:	4b33      	ldr	r3, [pc, #204]	@ (801cdec <createfile+0x134>)
 801cd1e:	f993 3035 	ldrsb.w	r3, [r3, #53]	@ 0x35
 801cd22:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cd26:	d121      	bne.n	801cd6c <createfile+0xb4>
	{
	  sprintf(_Flash_Packet.filename_with_format, "%s_%02d-%02d-%02d%s", filename,sDate.Year, sDate.Month, sDate.Date, fileformat);
 801cd28:	7ffb      	ldrb	r3, [r7, #31]
 801cd2a:	4618      	mov	r0, r3
 801cd2c:	7f7b      	ldrb	r3, [r7, #29]
 801cd2e:	461a      	mov	r2, r3
 801cd30:	7fbb      	ldrb	r3, [r7, #30]
 801cd32:	4619      	mov	r1, r3
 801cd34:	683b      	ldr	r3, [r7, #0]
 801cd36:	9302      	str	r3, [sp, #8]
 801cd38:	9101      	str	r1, [sp, #4]
 801cd3a:	9200      	str	r2, [sp, #0]
 801cd3c:	4603      	mov	r3, r0
 801cd3e:	687a      	ldr	r2, [r7, #4]
 801cd40:	492b      	ldr	r1, [pc, #172]	@ (801cdf0 <createfile+0x138>)
 801cd42:	4829      	ldr	r0, [pc, #164]	@ (801cde8 <createfile+0x130>)
 801cd44:	f001 ff0c 	bl	801eb60 <siprintf>
	  sprintf(_Flash_Packet.filename_ver_date, "%s_%02d-%02d-%02d", filename, sDate.Year,sDate.Month, sDate.Date);
 801cd48:	7ffb      	ldrb	r3, [r7, #31]
 801cd4a:	4619      	mov	r1, r3
 801cd4c:	7f7b      	ldrb	r3, [r7, #29]
 801cd4e:	7fba      	ldrb	r2, [r7, #30]
 801cd50:	9201      	str	r2, [sp, #4]
 801cd52:	9300      	str	r3, [sp, #0]
 801cd54:	460b      	mov	r3, r1
 801cd56:	687a      	ldr	r2, [r7, #4]
 801cd58:	4926      	ldr	r1, [pc, #152]	@ (801cdf4 <createfile+0x13c>)
 801cd5a:	4827      	ldr	r0, [pc, #156]	@ (801cdf8 <createfile+0x140>)
 801cd5c:	f001 ff00 	bl	801eb60 <siprintf>
	  set_param_flags();
 801cd60:	4b26      	ldr	r3, [pc, #152]	@ (801cdfc <createfile+0x144>)
 801cd62:	2201      	movs	r2, #1
 801cd64:	701a      	strb	r2, [r3, #0]
 801cd66:	4b26      	ldr	r3, [pc, #152]	@ (801ce00 <createfile+0x148>)
 801cd68:	2201      	movs	r2, #1
 801cd6a:	701a      	strb	r2, [r3, #0]
	}
	//__disable_irq();
	if (Mount_SD("/") == FR_OK) {
 801cd6c:	4825      	ldr	r0, [pc, #148]	@ (801ce04 <createfile+0x14c>)
 801cd6e:	f7ff f977 	bl	801c060 <Mount_SD>
 801cd72:	4603      	mov	r3, r0
 801cd74:	2b00      	cmp	r3, #0
 801cd76:	d002      	beq.n	801cd7e <createfile+0xc6>
	} else {
		//	__enable_irq();
		return -1;
 801cd78:	f04f 33ff 	mov.w	r3, #4294967295
 801cd7c:	e02b      	b.n	801cdd6 <createfile+0x11e>
	}
	Unmount_SD("/");
 801cd7e:	4821      	ldr	r0, [pc, #132]	@ (801ce04 <createfile+0x14c>)
 801cd80:	f7ff f99a 	bl	801c0b8 <Unmount_SD>



	fresult1 = Mount_SD("/");
 801cd84:	481f      	ldr	r0, [pc, #124]	@ (801ce04 <createfile+0x14c>)
 801cd86:	f7ff f96b 	bl	801c060 <Mount_SD>
 801cd8a:	4603      	mov	r3, r0
 801cd8c:	461a      	mov	r2, r3
 801cd8e:	4b1e      	ldr	r3, [pc, #120]	@ (801ce08 <createfile+0x150>)
 801cd90:	701a      	strb	r2, [r3, #0]
	if (fresult1 == FR_OK) {
 801cd92:	4b1d      	ldr	r3, [pc, #116]	@ (801ce08 <createfile+0x150>)
 801cd94:	781b      	ldrb	r3, [r3, #0]
 801cd96:	2b00      	cmp	r3, #0
 801cd98:	d119      	bne.n	801cdce <createfile+0x116>





		fresult1 = Create_File(_Flash_Packet.filename_with_format);
 801cd9a:	4813      	ldr	r0, [pc, #76]	@ (801cde8 <createfile+0x130>)
 801cd9c:	f7ff f9b4 	bl	801c108 <Create_File>
 801cda0:	4603      	mov	r3, r0
 801cda2:	461a      	mov	r2, r3
 801cda4:	4b18      	ldr	r3, [pc, #96]	@ (801ce08 <createfile+0x150>)
 801cda6:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801cda8:	4816      	ldr	r0, [pc, #88]	@ (801ce04 <createfile+0x14c>)
 801cdaa:	f7ff f985 	bl	801c0b8 <Unmount_SD>

		if (_RunTime_Packet.fileformat_selection) {
 801cdae:	4b0f      	ldr	r3, [pc, #60]	@ (801cdec <createfile+0x134>)
 801cdb0:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 801cdb4:	2b00      	cmp	r3, #0
 801cdb6:	d00d      	beq.n	801cdd4 <createfile+0x11c>
			if (file_already_exist) {
 801cdb8:	4b14      	ldr	r3, [pc, #80]	@ (801ce0c <createfile+0x154>)
 801cdba:	781b      	ldrb	r3, [r3, #0]
 801cdbc:	2b00      	cmp	r3, #0
 801cdbe:	d003      	beq.n	801cdc8 <createfile+0x110>
				file_already_exist = 0;
 801cdc0:	4b12      	ldr	r3, [pc, #72]	@ (801ce0c <createfile+0x154>)
 801cdc2:	2200      	movs	r2, #0
 801cdc4:	701a      	strb	r2, [r3, #0]
 801cdc6:	e005      	b.n	801cdd4 <createfile+0x11c>
			} else {
				csv_header();  //json does not require an header only csv
 801cdc8:	f7ff fe4a 	bl	801ca60 <csv_header>
 801cdcc:	e002      	b.n	801cdd4 <createfile+0x11c>
			}
		}

	} else {
		//	__enable_irq();
		return -1;
 801cdce:	f04f 33ff 	mov.w	r3, #4294967295
 801cdd2:	e000      	b.n	801cdd6 <createfile+0x11e>
	}
//	__enable_irq();
	return 0;
 801cdd4:	2300      	movs	r3, #0
}
 801cdd6:	4618      	mov	r0, r3
 801cdd8:	3720      	adds	r7, #32
 801cdda:	46bd      	mov	sp, r7
 801cddc:	bd80      	pop	{r7, pc}
 801cdde:	bf00      	nop
 801cde0:	20001898 	.word	0x20001898
 801cde4:	200012cc 	.word	0x200012cc
 801cde8:	20001461 	.word	0x20001461
 801cdec:	20001530 	.word	0x20001530
 801cdf0:	08024e38 	.word	0x08024e38
 801cdf4:	08024e4c 	.word	0x08024e4c
 801cdf8:	200014c5 	.word	0x200014c5
 801cdfc:	20001579 	.word	0x20001579
 801ce00:	2000157a 	.word	0x2000157a
 801ce04:	08024c64 	.word	0x08024c64
 801ce08:	20002324 	.word	0x20002324
 801ce0c:	20002325 	.word	0x20002325

0801ce10 <MX_USB_DEVICE_DeInit>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_DeInit(void)
{
 801ce10:	b580      	push	{r7, lr}
 801ce12:	af00      	add	r7, sp, #0

	USBD_MSC_DeInit(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS);
 801ce14:	4905      	ldr	r1, [pc, #20]	@ (801ce2c <MX_USB_DEVICE_DeInit+0x1c>)
 801ce16:	4806      	ldr	r0, [pc, #24]	@ (801ce30 <MX_USB_DEVICE_DeInit+0x20>)
 801ce18:	f7f8 ff32 	bl	8015c80 <USBD_MSC_DeInit>
	USBD_Stop(&hUsbDeviceFS);
 801ce1c:	4804      	ldr	r0, [pc, #16]	@ (801ce30 <MX_USB_DEVICE_DeInit+0x20>)
 801ce1e:	f7fa ff28 	bl	8017c72 <USBD_Stop>
	USBD_DeInit(&hUsbDeviceFS);
 801ce22:	4803      	ldr	r0, [pc, #12]	@ (801ce30 <MX_USB_DEVICE_DeInit+0x20>)
 801ce24:	f7fa feb3 	bl	8017b8e <USBD_DeInit>

}
 801ce28:	bf00      	nop
 801ce2a:	bd80      	pop	{r7, pc}
 801ce2c:	2000011c 	.word	0x2000011c
 801ce30:	20002430 	.word	0x20002430

0801ce34 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801ce34:	b580      	push	{r7, lr}
 801ce36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801ce38:	2200      	movs	r2, #0
 801ce3a:	4912      	ldr	r1, [pc, #72]	@ (801ce84 <MX_USB_DEVICE_Init+0x50>)
 801ce3c:	4812      	ldr	r0, [pc, #72]	@ (801ce88 <MX_USB_DEVICE_Init+0x54>)
 801ce3e:	f7fa fe76 	bl	8017b2e <USBD_Init>
 801ce42:	4603      	mov	r3, r0
 801ce44:	2b00      	cmp	r3, #0
 801ce46:	d001      	beq.n	801ce4c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801ce48:	f7e6 fc78 	bl	800373c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 801ce4c:	490f      	ldr	r1, [pc, #60]	@ (801ce8c <MX_USB_DEVICE_Init+0x58>)
 801ce4e:	480e      	ldr	r0, [pc, #56]	@ (801ce88 <MX_USB_DEVICE_Init+0x54>)
 801ce50:	f7fa fecd 	bl	8017bee <USBD_RegisterClass>
 801ce54:	4603      	mov	r3, r0
 801ce56:	2b00      	cmp	r3, #0
 801ce58:	d001      	beq.n	801ce5e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801ce5a:	f7e6 fc6f 	bl	800373c <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 801ce5e:	490c      	ldr	r1, [pc, #48]	@ (801ce90 <MX_USB_DEVICE_Init+0x5c>)
 801ce60:	4809      	ldr	r0, [pc, #36]	@ (801ce88 <MX_USB_DEVICE_Init+0x54>)
 801ce62:	f7f9 f915 	bl	8016090 <USBD_MSC_RegisterStorage>
 801ce66:	4603      	mov	r3, r0
 801ce68:	2b00      	cmp	r3, #0
 801ce6a:	d001      	beq.n	801ce70 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801ce6c:	f7e6 fc66 	bl	800373c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801ce70:	4805      	ldr	r0, [pc, #20]	@ (801ce88 <MX_USB_DEVICE_Init+0x54>)
 801ce72:	f7fa fef2 	bl	8017c5a <USBD_Start>
 801ce76:	4603      	mov	r3, r0
 801ce78:	2b00      	cmp	r3, #0
 801ce7a:	d001      	beq.n	801ce80 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801ce7c:	f7e6 fc5e 	bl	800373c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801ce80:	bf00      	nop
 801ce82:	bd80      	pop	{r7, pc}
 801ce84:	200000cc 	.word	0x200000cc
 801ce88:	20002430 	.word	0x20002430
 801ce8c:	2000004c 	.word	0x2000004c
 801ce90:	2000011c 	.word	0x2000011c

0801ce94 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ce94:	b480      	push	{r7}
 801ce96:	b083      	sub	sp, #12
 801ce98:	af00      	add	r7, sp, #0
 801ce9a:	4603      	mov	r3, r0
 801ce9c:	6039      	str	r1, [r7, #0]
 801ce9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801cea0:	683b      	ldr	r3, [r7, #0]
 801cea2:	2212      	movs	r2, #18
 801cea4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801cea6:	4b03      	ldr	r3, [pc, #12]	@ (801ceb4 <USBD_FS_DeviceDescriptor+0x20>)
}
 801cea8:	4618      	mov	r0, r3
 801ceaa:	370c      	adds	r7, #12
 801ceac:	46bd      	mov	sp, r7
 801ceae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ceb2:	4770      	bx	lr
 801ceb4:	200000e8 	.word	0x200000e8

0801ceb8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ceb8:	b480      	push	{r7}
 801ceba:	b083      	sub	sp, #12
 801cebc:	af00      	add	r7, sp, #0
 801cebe:	4603      	mov	r3, r0
 801cec0:	6039      	str	r1, [r7, #0]
 801cec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801cec4:	683b      	ldr	r3, [r7, #0]
 801cec6:	2204      	movs	r2, #4
 801cec8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801ceca:	4b03      	ldr	r3, [pc, #12]	@ (801ced8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801cecc:	4618      	mov	r0, r3
 801cece:	370c      	adds	r7, #12
 801ced0:	46bd      	mov	sp, r7
 801ced2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ced6:	4770      	bx	lr
 801ced8:	200000fc 	.word	0x200000fc

0801cedc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cedc:	b580      	push	{r7, lr}
 801cede:	b082      	sub	sp, #8
 801cee0:	af00      	add	r7, sp, #0
 801cee2:	4603      	mov	r3, r0
 801cee4:	6039      	str	r1, [r7, #0]
 801cee6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801cee8:	79fb      	ldrb	r3, [r7, #7]
 801ceea:	2b00      	cmp	r3, #0
 801ceec:	d105      	bne.n	801cefa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801ceee:	683a      	ldr	r2, [r7, #0]
 801cef0:	4907      	ldr	r1, [pc, #28]	@ (801cf10 <USBD_FS_ProductStrDescriptor+0x34>)
 801cef2:	4808      	ldr	r0, [pc, #32]	@ (801cf14 <USBD_FS_ProductStrDescriptor+0x38>)
 801cef4:	f7fc f87c 	bl	8018ff0 <USBD_GetString>
 801cef8:	e004      	b.n	801cf04 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801cefa:	683a      	ldr	r2, [r7, #0]
 801cefc:	4904      	ldr	r1, [pc, #16]	@ (801cf10 <USBD_FS_ProductStrDescriptor+0x34>)
 801cefe:	4805      	ldr	r0, [pc, #20]	@ (801cf14 <USBD_FS_ProductStrDescriptor+0x38>)
 801cf00:	f7fc f876 	bl	8018ff0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801cf04:	4b02      	ldr	r3, [pc, #8]	@ (801cf10 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801cf06:	4618      	mov	r0, r3
 801cf08:	3708      	adds	r7, #8
 801cf0a:	46bd      	mov	sp, r7
 801cf0c:	bd80      	pop	{r7, pc}
 801cf0e:	bf00      	nop
 801cf10:	2000270c 	.word	0x2000270c
 801cf14:	08024e60 	.word	0x08024e60

0801cf18 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cf18:	b580      	push	{r7, lr}
 801cf1a:	b082      	sub	sp, #8
 801cf1c:	af00      	add	r7, sp, #0
 801cf1e:	4603      	mov	r3, r0
 801cf20:	6039      	str	r1, [r7, #0]
 801cf22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801cf24:	683a      	ldr	r2, [r7, #0]
 801cf26:	4904      	ldr	r1, [pc, #16]	@ (801cf38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801cf28:	4804      	ldr	r0, [pc, #16]	@ (801cf3c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801cf2a:	f7fc f861 	bl	8018ff0 <USBD_GetString>
  return USBD_StrDesc;
 801cf2e:	4b02      	ldr	r3, [pc, #8]	@ (801cf38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801cf30:	4618      	mov	r0, r3
 801cf32:	3708      	adds	r7, #8
 801cf34:	46bd      	mov	sp, r7
 801cf36:	bd80      	pop	{r7, pc}
 801cf38:	2000270c 	.word	0x2000270c
 801cf3c:	08024e74 	.word	0x08024e74

0801cf40 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cf40:	b580      	push	{r7, lr}
 801cf42:	b082      	sub	sp, #8
 801cf44:	af00      	add	r7, sp, #0
 801cf46:	4603      	mov	r3, r0
 801cf48:	6039      	str	r1, [r7, #0]
 801cf4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801cf4c:	683b      	ldr	r3, [r7, #0]
 801cf4e:	221a      	movs	r2, #26
 801cf50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801cf52:	f000 f843 	bl	801cfdc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801cf56:	4b02      	ldr	r3, [pc, #8]	@ (801cf60 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801cf58:	4618      	mov	r0, r3
 801cf5a:	3708      	adds	r7, #8
 801cf5c:	46bd      	mov	sp, r7
 801cf5e:	bd80      	pop	{r7, pc}
 801cf60:	20000100 	.word	0x20000100

0801cf64 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cf64:	b580      	push	{r7, lr}
 801cf66:	b082      	sub	sp, #8
 801cf68:	af00      	add	r7, sp, #0
 801cf6a:	4603      	mov	r3, r0
 801cf6c:	6039      	str	r1, [r7, #0]
 801cf6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801cf70:	79fb      	ldrb	r3, [r7, #7]
 801cf72:	2b00      	cmp	r3, #0
 801cf74:	d105      	bne.n	801cf82 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801cf76:	683a      	ldr	r2, [r7, #0]
 801cf78:	4907      	ldr	r1, [pc, #28]	@ (801cf98 <USBD_FS_ConfigStrDescriptor+0x34>)
 801cf7a:	4808      	ldr	r0, [pc, #32]	@ (801cf9c <USBD_FS_ConfigStrDescriptor+0x38>)
 801cf7c:	f7fc f838 	bl	8018ff0 <USBD_GetString>
 801cf80:	e004      	b.n	801cf8c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801cf82:	683a      	ldr	r2, [r7, #0]
 801cf84:	4904      	ldr	r1, [pc, #16]	@ (801cf98 <USBD_FS_ConfigStrDescriptor+0x34>)
 801cf86:	4805      	ldr	r0, [pc, #20]	@ (801cf9c <USBD_FS_ConfigStrDescriptor+0x38>)
 801cf88:	f7fc f832 	bl	8018ff0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801cf8c:	4b02      	ldr	r3, [pc, #8]	@ (801cf98 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801cf8e:	4618      	mov	r0, r3
 801cf90:	3708      	adds	r7, #8
 801cf92:	46bd      	mov	sp, r7
 801cf94:	bd80      	pop	{r7, pc}
 801cf96:	bf00      	nop
 801cf98:	2000270c 	.word	0x2000270c
 801cf9c:	08024e88 	.word	0x08024e88

0801cfa0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cfa0:	b580      	push	{r7, lr}
 801cfa2:	b082      	sub	sp, #8
 801cfa4:	af00      	add	r7, sp, #0
 801cfa6:	4603      	mov	r3, r0
 801cfa8:	6039      	str	r1, [r7, #0]
 801cfaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801cfac:	79fb      	ldrb	r3, [r7, #7]
 801cfae:	2b00      	cmp	r3, #0
 801cfb0:	d105      	bne.n	801cfbe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801cfb2:	683a      	ldr	r2, [r7, #0]
 801cfb4:	4907      	ldr	r1, [pc, #28]	@ (801cfd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801cfb6:	4808      	ldr	r0, [pc, #32]	@ (801cfd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801cfb8:	f7fc f81a 	bl	8018ff0 <USBD_GetString>
 801cfbc:	e004      	b.n	801cfc8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801cfbe:	683a      	ldr	r2, [r7, #0]
 801cfc0:	4904      	ldr	r1, [pc, #16]	@ (801cfd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801cfc2:	4805      	ldr	r0, [pc, #20]	@ (801cfd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801cfc4:	f7fc f814 	bl	8018ff0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801cfc8:	4b02      	ldr	r3, [pc, #8]	@ (801cfd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801cfca:	4618      	mov	r0, r3
 801cfcc:	3708      	adds	r7, #8
 801cfce:	46bd      	mov	sp, r7
 801cfd0:	bd80      	pop	{r7, pc}
 801cfd2:	bf00      	nop
 801cfd4:	2000270c 	.word	0x2000270c
 801cfd8:	08024e94 	.word	0x08024e94

0801cfdc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801cfdc:	b580      	push	{r7, lr}
 801cfde:	b084      	sub	sp, #16
 801cfe0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 801cfe2:	68fa      	ldr	r2, [r7, #12]
 801cfe4:	68bb      	ldr	r3, [r7, #8]
 801cfe6:	4413      	add	r3, r2
 801cfe8:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801cfea:	68fb      	ldr	r3, [r7, #12]
 801cfec:	2b00      	cmp	r3, #0
 801cfee:	d009      	beq.n	801d004 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801cff0:	2208      	movs	r2, #8
 801cff2:	4906      	ldr	r1, [pc, #24]	@ (801d00c <Get_SerialNum+0x30>)
 801cff4:	68f8      	ldr	r0, [r7, #12]
 801cff6:	f000 f80d 	bl	801d014 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801cffa:	2204      	movs	r2, #4
 801cffc:	4904      	ldr	r1, [pc, #16]	@ (801d010 <Get_SerialNum+0x34>)
 801cffe:	6878      	ldr	r0, [r7, #4]
 801d000:	f000 f808 	bl	801d014 <IntToUnicode>
  }
}
 801d004:	bf00      	nop
 801d006:	3710      	adds	r7, #16
 801d008:	46bd      	mov	sp, r7
 801d00a:	bd80      	pop	{r7, pc}
 801d00c:	20000102 	.word	0x20000102
 801d010:	20000112 	.word	0x20000112

0801d014 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801d014:	b480      	push	{r7}
 801d016:	b087      	sub	sp, #28
 801d018:	af00      	add	r7, sp, #0
 801d01a:	60f8      	str	r0, [r7, #12]
 801d01c:	60b9      	str	r1, [r7, #8]
 801d01e:	4613      	mov	r3, r2
 801d020:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801d022:	2300      	movs	r3, #0
 801d024:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801d026:	2300      	movs	r3, #0
 801d028:	75fb      	strb	r3, [r7, #23]
 801d02a:	e027      	b.n	801d07c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801d02c:	68fb      	ldr	r3, [r7, #12]
 801d02e:	0f1b      	lsrs	r3, r3, #28
 801d030:	2b09      	cmp	r3, #9
 801d032:	d80b      	bhi.n	801d04c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801d034:	68fb      	ldr	r3, [r7, #12]
 801d036:	0f1b      	lsrs	r3, r3, #28
 801d038:	b2da      	uxtb	r2, r3
 801d03a:	7dfb      	ldrb	r3, [r7, #23]
 801d03c:	005b      	lsls	r3, r3, #1
 801d03e:	4619      	mov	r1, r3
 801d040:	68bb      	ldr	r3, [r7, #8]
 801d042:	440b      	add	r3, r1
 801d044:	3230      	adds	r2, #48	@ 0x30
 801d046:	b2d2      	uxtb	r2, r2
 801d048:	701a      	strb	r2, [r3, #0]
 801d04a:	e00a      	b.n	801d062 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801d04c:	68fb      	ldr	r3, [r7, #12]
 801d04e:	0f1b      	lsrs	r3, r3, #28
 801d050:	b2da      	uxtb	r2, r3
 801d052:	7dfb      	ldrb	r3, [r7, #23]
 801d054:	005b      	lsls	r3, r3, #1
 801d056:	4619      	mov	r1, r3
 801d058:	68bb      	ldr	r3, [r7, #8]
 801d05a:	440b      	add	r3, r1
 801d05c:	3237      	adds	r2, #55	@ 0x37
 801d05e:	b2d2      	uxtb	r2, r2
 801d060:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801d062:	68fb      	ldr	r3, [r7, #12]
 801d064:	011b      	lsls	r3, r3, #4
 801d066:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801d068:	7dfb      	ldrb	r3, [r7, #23]
 801d06a:	005b      	lsls	r3, r3, #1
 801d06c:	3301      	adds	r3, #1
 801d06e:	68ba      	ldr	r2, [r7, #8]
 801d070:	4413      	add	r3, r2
 801d072:	2200      	movs	r2, #0
 801d074:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801d076:	7dfb      	ldrb	r3, [r7, #23]
 801d078:	3301      	adds	r3, #1
 801d07a:	75fb      	strb	r3, [r7, #23]
 801d07c:	7dfa      	ldrb	r2, [r7, #23]
 801d07e:	79fb      	ldrb	r3, [r7, #7]
 801d080:	429a      	cmp	r2, r3
 801d082:	d3d3      	bcc.n	801d02c <IntToUnicode+0x18>
  }
}
 801d084:	bf00      	nop
 801d086:	bf00      	nop
 801d088:	371c      	adds	r7, #28
 801d08a:	46bd      	mov	sp, r7
 801d08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d090:	4770      	bx	lr

0801d092 <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801d092:	b480      	push	{r7}
 801d094:	b083      	sub	sp, #12
 801d096:	af00      	add	r7, sp, #0
 801d098:	4603      	mov	r3, r0
 801d09a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 801d09c:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801d09e:	4618      	mov	r0, r3
 801d0a0:	370c      	adds	r7, #12
 801d0a2:	46bd      	mov	sp, r7
 801d0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0a8:	4770      	bx	lr
	...

0801d0ac <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 801d0ac:	b580      	push	{r7, lr}
 801d0ae:	b08e      	sub	sp, #56	@ 0x38
 801d0b0:	af00      	add	r7, sp, #0
 801d0b2:	4603      	mov	r3, r0
 801d0b4:	60b9      	str	r1, [r7, #8]
 801d0b6:	607a      	str	r2, [r7, #4]
 801d0b8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	  /* USER CODE BEGIN 3 */
	  HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 801d0ba:	23ff      	movs	r3, #255	@ 0xff
 801d0bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	  HAL_SD_GetCardInfo(&hsd, &info);
 801d0c0:	f107 0314 	add.w	r3, r7, #20
 801d0c4:	4619      	mov	r1, r3
 801d0c6:	480a      	ldr	r0, [pc, #40]	@ (801d0f0 <STORAGE_GetCapacity_FS+0x44>)
 801d0c8:	f7ed fe3c 	bl	800ad44 <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 801d0cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d0ce:	1e5a      	subs	r2, r3, #1
 801d0d0:	68bb      	ldr	r3, [r7, #8]
 801d0d2:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 801d0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d0d6:	b29a      	uxth	r2, r3
 801d0d8:	687b      	ldr	r3, [r7, #4]
 801d0da:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 801d0dc:	2300      	movs	r3, #0
 801d0de:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	  return ret;
 801d0e2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE END 3 */
}
 801d0e6:	4618      	mov	r0, r3
 801d0e8:	3738      	adds	r7, #56	@ 0x38
 801d0ea:	46bd      	mov	sp, r7
 801d0ec:	bd80      	pop	{r7, pc}
 801d0ee:	bf00      	nop
 801d0f0:	200018b8 	.word	0x200018b8

0801d0f4 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801d0f4:	b480      	push	{r7}
 801d0f6:	b083      	sub	sp, #12
 801d0f8:	af00      	add	r7, sp, #0
 801d0fa:	4603      	mov	r3, r0
 801d0fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 801d0fe:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801d100:	4618      	mov	r0, r3
 801d102:	370c      	adds	r7, #12
 801d104:	46bd      	mov	sp, r7
 801d106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d10a:	4770      	bx	lr

0801d10c <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 801d10c:	b480      	push	{r7}
 801d10e:	b083      	sub	sp, #12
 801d110:	af00      	add	r7, sp, #0
 801d112:	4603      	mov	r3, r0
 801d114:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 801d116:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801d118:	4618      	mov	r0, r3
 801d11a:	370c      	adds	r7, #12
 801d11c:	46bd      	mov	sp, r7
 801d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d122:	4770      	bx	lr

0801d124 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801d124:	b580      	push	{r7, lr}
 801d126:	b088      	sub	sp, #32
 801d128:	af02      	add	r7, sp, #8
 801d12a:	60b9      	str	r1, [r7, #8]
 801d12c:	607a      	str	r2, [r7, #4]
 801d12e:	461a      	mov	r2, r3
 801d130:	4603      	mov	r3, r0
 801d132:	73fb      	strb	r3, [r7, #15]
 801d134:	4613      	mov	r3, r2
 801d136:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

	   int8_t ret = -1;
 801d138:	23ff      	movs	r3, #255	@ 0xff
 801d13a:	75fb      	strb	r3, [r7, #23]

		prev_sleep_time = HAL_GetTick();
 801d13c:	f7e7 f848 	bl	80041d0 <HAL_GetTick>
 801d140:	4603      	mov	r3, r0
 801d142:	4a0d      	ldr	r2, [pc, #52]	@ (801d178 <STORAGE_Read_FS+0x54>)
 801d144:	6013      	str	r3, [r2, #0]
	  HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801d146:	89bb      	ldrh	r3, [r7, #12]
 801d148:	f04f 32ff 	mov.w	r2, #4294967295
 801d14c:	9200      	str	r2, [sp, #0]
 801d14e:	687a      	ldr	r2, [r7, #4]
 801d150:	68b9      	ldr	r1, [r7, #8]
 801d152:	480a      	ldr	r0, [pc, #40]	@ (801d17c <STORAGE_Read_FS+0x58>)
 801d154:	f7ed f8de 	bl	800a314 <HAL_SD_ReadBlocks>

	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 801d158:	bf00      	nop
 801d15a:	4808      	ldr	r0, [pc, #32]	@ (801d17c <STORAGE_Read_FS+0x58>)
 801d15c:	f7ed fe1e 	bl	800ad9c <HAL_SD_GetCardState>
 801d160:	4603      	mov	r3, r0
 801d162:	2b04      	cmp	r3, #4
 801d164:	d1f9      	bne.n	801d15a <STORAGE_Read_FS+0x36>
	  ret = 0;
 801d166:	2300      	movs	r3, #0
 801d168:	75fb      	strb	r3, [r7, #23]
	  return ret;
 801d16a:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 801d16e:	4618      	mov	r0, r3
 801d170:	3718      	adds	r7, #24
 801d172:	46bd      	mov	sp, r7
 801d174:	bd80      	pop	{r7, pc}
 801d176:	bf00      	nop
 801d178:	200017c0 	.word	0x200017c0
 801d17c:	200018b8 	.word	0x200018b8

0801d180 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801d180:	b580      	push	{r7, lr}
 801d182:	b088      	sub	sp, #32
 801d184:	af02      	add	r7, sp, #8
 801d186:	60b9      	str	r1, [r7, #8]
 801d188:	607a      	str	r2, [r7, #4]
 801d18a:	461a      	mov	r2, r3
 801d18c:	4603      	mov	r3, r0
 801d18e:	73fb      	strb	r3, [r7, #15]
 801d190:	4613      	mov	r3, r2
 801d192:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	 int8_t ret = -1;
 801d194:	23ff      	movs	r3, #255	@ 0xff
 801d196:	75fb      	strb	r3, [r7, #23]

	   HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801d198:	89bb      	ldrh	r3, [r7, #12]
 801d19a:	f04f 32ff 	mov.w	r2, #4294967295
 801d19e:	9200      	str	r2, [sp, #0]
 801d1a0:	687a      	ldr	r2, [r7, #4]
 801d1a2:	68b9      	ldr	r1, [r7, #8]
 801d1a4:	4808      	ldr	r0, [pc, #32]	@ (801d1c8 <STORAGE_Write_FS+0x48>)
 801d1a6:	f7ed fa9b 	bl	800a6e0 <HAL_SD_WriteBlocks>


	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 801d1aa:	bf00      	nop
 801d1ac:	4806      	ldr	r0, [pc, #24]	@ (801d1c8 <STORAGE_Write_FS+0x48>)
 801d1ae:	f7ed fdf5 	bl	800ad9c <HAL_SD_GetCardState>
 801d1b2:	4603      	mov	r3, r0
 801d1b4:	2b04      	cmp	r3, #4
 801d1b6:	d1f9      	bne.n	801d1ac <STORAGE_Write_FS+0x2c>
	  ret = 0;
 801d1b8:	2300      	movs	r3, #0
 801d1ba:	75fb      	strb	r3, [r7, #23]
	  return ret;
 801d1bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801d1c0:	4618      	mov	r0, r3
 801d1c2:	3718      	adds	r7, #24
 801d1c4:	46bd      	mov	sp, r7
 801d1c6:	bd80      	pop	{r7, pc}
 801d1c8:	200018b8 	.word	0x200018b8

0801d1cc <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801d1cc:	b480      	push	{r7}
 801d1ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801d1d0:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801d1d2:	4618      	mov	r0, r3
 801d1d4:	46bd      	mov	sp, r7
 801d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d1da:	4770      	bx	lr

0801d1dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801d1dc:	b580      	push	{r7, lr}
 801d1de:	b08a      	sub	sp, #40	@ 0x28
 801d1e0:	af00      	add	r7, sp, #0
 801d1e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d1e4:	f107 0314 	add.w	r3, r7, #20
 801d1e8:	2200      	movs	r2, #0
 801d1ea:	601a      	str	r2, [r3, #0]
 801d1ec:	605a      	str	r2, [r3, #4]
 801d1ee:	609a      	str	r2, [r3, #8]
 801d1f0:	60da      	str	r2, [r3, #12]
 801d1f2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801d1f4:	687b      	ldr	r3, [r7, #4]
 801d1f6:	681b      	ldr	r3, [r3, #0]
 801d1f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d1fc:	d13a      	bne.n	801d274 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801d1fe:	2300      	movs	r3, #0
 801d200:	613b      	str	r3, [r7, #16]
 801d202:	4b1e      	ldr	r3, [pc, #120]	@ (801d27c <HAL_PCD_MspInit+0xa0>)
 801d204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d206:	4a1d      	ldr	r2, [pc, #116]	@ (801d27c <HAL_PCD_MspInit+0xa0>)
 801d208:	f043 0301 	orr.w	r3, r3, #1
 801d20c:	6313      	str	r3, [r2, #48]	@ 0x30
 801d20e:	4b1b      	ldr	r3, [pc, #108]	@ (801d27c <HAL_PCD_MspInit+0xa0>)
 801d210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d212:	f003 0301 	and.w	r3, r3, #1
 801d216:	613b      	str	r3, [r7, #16]
 801d218:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801d21a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801d21e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d220:	2302      	movs	r3, #2
 801d222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d224:	2300      	movs	r3, #0
 801d226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d228:	2303      	movs	r3, #3
 801d22a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801d22c:	230a      	movs	r3, #10
 801d22e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d230:	f107 0314 	add.w	r3, r7, #20
 801d234:	4619      	mov	r1, r3
 801d236:	4812      	ldr	r0, [pc, #72]	@ (801d280 <HAL_PCD_MspInit+0xa4>)
 801d238:	f7e8 fd2e 	bl	8005c98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801d23c:	4b0f      	ldr	r3, [pc, #60]	@ (801d27c <HAL_PCD_MspInit+0xa0>)
 801d23e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d240:	4a0e      	ldr	r2, [pc, #56]	@ (801d27c <HAL_PCD_MspInit+0xa0>)
 801d242:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d246:	6353      	str	r3, [r2, #52]	@ 0x34
 801d248:	2300      	movs	r3, #0
 801d24a:	60fb      	str	r3, [r7, #12]
 801d24c:	4b0b      	ldr	r3, [pc, #44]	@ (801d27c <HAL_PCD_MspInit+0xa0>)
 801d24e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d250:	4a0a      	ldr	r2, [pc, #40]	@ (801d27c <HAL_PCD_MspInit+0xa0>)
 801d252:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801d256:	6453      	str	r3, [r2, #68]	@ 0x44
 801d258:	4b08      	ldr	r3, [pc, #32]	@ (801d27c <HAL_PCD_MspInit+0xa0>)
 801d25a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d25c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801d260:	60fb      	str	r3, [r7, #12]
 801d262:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801d264:	2200      	movs	r2, #0
 801d266:	2100      	movs	r1, #0
 801d268:	2043      	movs	r0, #67	@ 0x43
 801d26a:	f7e7 fd94 	bl	8004d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801d26e:	2043      	movs	r0, #67	@ 0x43
 801d270:	f7e7 fdad 	bl	8004dce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801d274:	bf00      	nop
 801d276:	3728      	adds	r7, #40	@ 0x28
 801d278:	46bd      	mov	sp, r7
 801d27a:	bd80      	pop	{r7, pc}
 801d27c:	40023800 	.word	0x40023800
 801d280:	40020000 	.word	0x40020000

0801d284 <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 801d284:	b580      	push	{r7, lr}
 801d286:	b082      	sub	sp, #8
 801d288:	af00      	add	r7, sp, #0
 801d28a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_OTG_FS)
 801d28c:	687b      	ldr	r3, [r7, #4]
 801d28e:	681b      	ldr	r3, [r3, #0]
 801d290:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d294:	d10d      	bne.n	801d2b2 <HAL_PCD_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 0 */

  /* USER CODE END USB_OTG_FS_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 801d296:	4b09      	ldr	r3, [pc, #36]	@ (801d2bc <HAL_PCD_MspDeInit+0x38>)
 801d298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d29a:	4a08      	ldr	r2, [pc, #32]	@ (801d2bc <HAL_PCD_MspDeInit+0x38>)
 801d29c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801d2a0:	6353      	str	r3, [r2, #52]	@ 0x34

    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 801d2a2:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 801d2a6:	4806      	ldr	r0, [pc, #24]	@ (801d2c0 <HAL_PCD_MspDeInit+0x3c>)
 801d2a8:	f7e8 fe7a 	bl	8005fa0 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 801d2ac:	2043      	movs	r0, #67	@ 0x43
 801d2ae:	f7e7 fd9c 	bl	8004dea <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 1 */

  /* USER CODE END USB_OTG_FS_MspDeInit 1 */
  }
}
 801d2b2:	bf00      	nop
 801d2b4:	3708      	adds	r7, #8
 801d2b6:	46bd      	mov	sp, r7
 801d2b8:	bd80      	pop	{r7, pc}
 801d2ba:	bf00      	nop
 801d2bc:	40023800 	.word	0x40023800
 801d2c0:	40020000 	.word	0x40020000

0801d2c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d2c4:	b580      	push	{r7, lr}
 801d2c6:	b082      	sub	sp, #8
 801d2c8:	af00      	add	r7, sp, #0
 801d2ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801d2cc:	687b      	ldr	r3, [r7, #4]
 801d2ce:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801d2d2:	687b      	ldr	r3, [r7, #4]
 801d2d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801d2d8:	4619      	mov	r1, r3
 801d2da:	4610      	mov	r0, r2
 801d2dc:	f7fa fd25 	bl	8017d2a <USBD_LL_SetupStage>
}
 801d2e0:	bf00      	nop
 801d2e2:	3708      	adds	r7, #8
 801d2e4:	46bd      	mov	sp, r7
 801d2e6:	bd80      	pop	{r7, pc}

0801d2e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d2e8:	b580      	push	{r7, lr}
 801d2ea:	b082      	sub	sp, #8
 801d2ec:	af00      	add	r7, sp, #0
 801d2ee:	6078      	str	r0, [r7, #4]
 801d2f0:	460b      	mov	r3, r1
 801d2f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801d2f4:	687b      	ldr	r3, [r7, #4]
 801d2f6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801d2fa:	78fa      	ldrb	r2, [r7, #3]
 801d2fc:	6879      	ldr	r1, [r7, #4]
 801d2fe:	4613      	mov	r3, r2
 801d300:	00db      	lsls	r3, r3, #3
 801d302:	4413      	add	r3, r2
 801d304:	009b      	lsls	r3, r3, #2
 801d306:	440b      	add	r3, r1
 801d308:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801d30c:	681a      	ldr	r2, [r3, #0]
 801d30e:	78fb      	ldrb	r3, [r7, #3]
 801d310:	4619      	mov	r1, r3
 801d312:	f7fa fd5f 	bl	8017dd4 <USBD_LL_DataOutStage>
}
 801d316:	bf00      	nop
 801d318:	3708      	adds	r7, #8
 801d31a:	46bd      	mov	sp, r7
 801d31c:	bd80      	pop	{r7, pc}

0801d31e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d31e:	b580      	push	{r7, lr}
 801d320:	b082      	sub	sp, #8
 801d322:	af00      	add	r7, sp, #0
 801d324:	6078      	str	r0, [r7, #4]
 801d326:	460b      	mov	r3, r1
 801d328:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801d32a:	687b      	ldr	r3, [r7, #4]
 801d32c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801d330:	78fa      	ldrb	r2, [r7, #3]
 801d332:	6879      	ldr	r1, [r7, #4]
 801d334:	4613      	mov	r3, r2
 801d336:	00db      	lsls	r3, r3, #3
 801d338:	4413      	add	r3, r2
 801d33a:	009b      	lsls	r3, r3, #2
 801d33c:	440b      	add	r3, r1
 801d33e:	3320      	adds	r3, #32
 801d340:	681a      	ldr	r2, [r3, #0]
 801d342:	78fb      	ldrb	r3, [r7, #3]
 801d344:	4619      	mov	r1, r3
 801d346:	f7fa fdf8 	bl	8017f3a <USBD_LL_DataInStage>
}
 801d34a:	bf00      	nop
 801d34c:	3708      	adds	r7, #8
 801d34e:	46bd      	mov	sp, r7
 801d350:	bd80      	pop	{r7, pc}

0801d352 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d352:	b580      	push	{r7, lr}
 801d354:	b082      	sub	sp, #8
 801d356:	af00      	add	r7, sp, #0
 801d358:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801d35a:	687b      	ldr	r3, [r7, #4]
 801d35c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d360:	4618      	mov	r0, r3
 801d362:	f7fa ff32 	bl	80181ca <USBD_LL_SOF>
}
 801d366:	bf00      	nop
 801d368:	3708      	adds	r7, #8
 801d36a:	46bd      	mov	sp, r7
 801d36c:	bd80      	pop	{r7, pc}

0801d36e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d36e:	b580      	push	{r7, lr}
 801d370:	b084      	sub	sp, #16
 801d372:	af00      	add	r7, sp, #0
 801d374:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801d376:	2301      	movs	r3, #1
 801d378:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801d37a:	687b      	ldr	r3, [r7, #4]
 801d37c:	79db      	ldrb	r3, [r3, #7]
 801d37e:	2b00      	cmp	r3, #0
 801d380:	d102      	bne.n	801d388 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801d382:	2300      	movs	r3, #0
 801d384:	73fb      	strb	r3, [r7, #15]
 801d386:	e008      	b.n	801d39a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801d388:	687b      	ldr	r3, [r7, #4]
 801d38a:	79db      	ldrb	r3, [r3, #7]
 801d38c:	2b02      	cmp	r3, #2
 801d38e:	d102      	bne.n	801d396 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801d390:	2301      	movs	r3, #1
 801d392:	73fb      	strb	r3, [r7, #15]
 801d394:	e001      	b.n	801d39a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801d396:	f7e6 f9d1 	bl	800373c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801d39a:	687b      	ldr	r3, [r7, #4]
 801d39c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d3a0:	7bfa      	ldrb	r2, [r7, #15]
 801d3a2:	4611      	mov	r1, r2
 801d3a4:	4618      	mov	r0, r3
 801d3a6:	f7fa fecc 	bl	8018142 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801d3aa:	687b      	ldr	r3, [r7, #4]
 801d3ac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d3b0:	4618      	mov	r0, r3
 801d3b2:	f7fa fe74 	bl	801809e <USBD_LL_Reset>
}
 801d3b6:	bf00      	nop
 801d3b8:	3710      	adds	r7, #16
 801d3ba:	46bd      	mov	sp, r7
 801d3bc:	bd80      	pop	{r7, pc}
	...

0801d3c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d3c0:	b580      	push	{r7, lr}
 801d3c2:	b082      	sub	sp, #8
 801d3c4:	af00      	add	r7, sp, #0
 801d3c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801d3c8:	687b      	ldr	r3, [r7, #4]
 801d3ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d3ce:	4618      	mov	r0, r3
 801d3d0:	f7fa fec7 	bl	8018162 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801d3d4:	687b      	ldr	r3, [r7, #4]
 801d3d6:	681b      	ldr	r3, [r3, #0]
 801d3d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801d3dc:	681b      	ldr	r3, [r3, #0]
 801d3de:	687a      	ldr	r2, [r7, #4]
 801d3e0:	6812      	ldr	r2, [r2, #0]
 801d3e2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801d3e6:	f043 0301 	orr.w	r3, r3, #1
 801d3ea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801d3ec:	687b      	ldr	r3, [r7, #4]
 801d3ee:	7adb      	ldrb	r3, [r3, #11]
 801d3f0:	2b00      	cmp	r3, #0
 801d3f2:	d005      	beq.n	801d400 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d3f4:	4b04      	ldr	r3, [pc, #16]	@ (801d408 <HAL_PCD_SuspendCallback+0x48>)
 801d3f6:	691b      	ldr	r3, [r3, #16]
 801d3f8:	4a03      	ldr	r2, [pc, #12]	@ (801d408 <HAL_PCD_SuspendCallback+0x48>)
 801d3fa:	f043 0306 	orr.w	r3, r3, #6
 801d3fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801d400:	bf00      	nop
 801d402:	3708      	adds	r7, #8
 801d404:	46bd      	mov	sp, r7
 801d406:	bd80      	pop	{r7, pc}
 801d408:	e000ed00 	.word	0xe000ed00

0801d40c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d40c:	b580      	push	{r7, lr}
 801d40e:	b082      	sub	sp, #8
 801d410:	af00      	add	r7, sp, #0
 801d412:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801d414:	687b      	ldr	r3, [r7, #4]
 801d416:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d41a:	4618      	mov	r0, r3
 801d41c:	f7fa febd 	bl	801819a <USBD_LL_Resume>
}
 801d420:	bf00      	nop
 801d422:	3708      	adds	r7, #8
 801d424:	46bd      	mov	sp, r7
 801d426:	bd80      	pop	{r7, pc}

0801d428 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d428:	b580      	push	{r7, lr}
 801d42a:	b082      	sub	sp, #8
 801d42c:	af00      	add	r7, sp, #0
 801d42e:	6078      	str	r0, [r7, #4]
 801d430:	460b      	mov	r3, r1
 801d432:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801d434:	687b      	ldr	r3, [r7, #4]
 801d436:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d43a:	78fa      	ldrb	r2, [r7, #3]
 801d43c:	4611      	mov	r1, r2
 801d43e:	4618      	mov	r0, r3
 801d440:	f7fa ff15 	bl	801826e <USBD_LL_IsoOUTIncomplete>
}
 801d444:	bf00      	nop
 801d446:	3708      	adds	r7, #8
 801d448:	46bd      	mov	sp, r7
 801d44a:	bd80      	pop	{r7, pc}

0801d44c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d44c:	b580      	push	{r7, lr}
 801d44e:	b082      	sub	sp, #8
 801d450:	af00      	add	r7, sp, #0
 801d452:	6078      	str	r0, [r7, #4]
 801d454:	460b      	mov	r3, r1
 801d456:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801d458:	687b      	ldr	r3, [r7, #4]
 801d45a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d45e:	78fa      	ldrb	r2, [r7, #3]
 801d460:	4611      	mov	r1, r2
 801d462:	4618      	mov	r0, r3
 801d464:	f7fa fed1 	bl	801820a <USBD_LL_IsoINIncomplete>
}
 801d468:	bf00      	nop
 801d46a:	3708      	adds	r7, #8
 801d46c:	46bd      	mov	sp, r7
 801d46e:	bd80      	pop	{r7, pc}

0801d470 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d470:	b580      	push	{r7, lr}
 801d472:	b082      	sub	sp, #8
 801d474:	af00      	add	r7, sp, #0
 801d476:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801d478:	687b      	ldr	r3, [r7, #4]
 801d47a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d47e:	4618      	mov	r0, r3
 801d480:	f7fa ff27 	bl	80182d2 <USBD_LL_DevConnected>
}
 801d484:	bf00      	nop
 801d486:	3708      	adds	r7, #8
 801d488:	46bd      	mov	sp, r7
 801d48a:	bd80      	pop	{r7, pc}

0801d48c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d48c:	b580      	push	{r7, lr}
 801d48e:	b082      	sub	sp, #8
 801d490:	af00      	add	r7, sp, #0
 801d492:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801d494:	687b      	ldr	r3, [r7, #4]
 801d496:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d49a:	4618      	mov	r0, r3
 801d49c:	f7fa ff24 	bl	80182e8 <USBD_LL_DevDisconnected>
}
 801d4a0:	bf00      	nop
 801d4a2:	3708      	adds	r7, #8
 801d4a4:	46bd      	mov	sp, r7
 801d4a6:	bd80      	pop	{r7, pc}

0801d4a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801d4a8:	b580      	push	{r7, lr}
 801d4aa:	b082      	sub	sp, #8
 801d4ac:	af00      	add	r7, sp, #0
 801d4ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801d4b0:	687b      	ldr	r3, [r7, #4]
 801d4b2:	781b      	ldrb	r3, [r3, #0]
 801d4b4:	2b00      	cmp	r3, #0
 801d4b6:	d13c      	bne.n	801d532 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801d4b8:	4a20      	ldr	r2, [pc, #128]	@ (801d53c <USBD_LL_Init+0x94>)
 801d4ba:	687b      	ldr	r3, [r7, #4]
 801d4bc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801d4c0:	687b      	ldr	r3, [r7, #4]
 801d4c2:	4a1e      	ldr	r2, [pc, #120]	@ (801d53c <USBD_LL_Init+0x94>)
 801d4c4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801d4c8:	4b1c      	ldr	r3, [pc, #112]	@ (801d53c <USBD_LL_Init+0x94>)
 801d4ca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801d4ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801d4d0:	4b1a      	ldr	r3, [pc, #104]	@ (801d53c <USBD_LL_Init+0x94>)
 801d4d2:	2204      	movs	r2, #4
 801d4d4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801d4d6:	4b19      	ldr	r3, [pc, #100]	@ (801d53c <USBD_LL_Init+0x94>)
 801d4d8:	2202      	movs	r2, #2
 801d4da:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801d4dc:	4b17      	ldr	r3, [pc, #92]	@ (801d53c <USBD_LL_Init+0x94>)
 801d4de:	2200      	movs	r2, #0
 801d4e0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801d4e2:	4b16      	ldr	r3, [pc, #88]	@ (801d53c <USBD_LL_Init+0x94>)
 801d4e4:	2202      	movs	r2, #2
 801d4e6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801d4e8:	4b14      	ldr	r3, [pc, #80]	@ (801d53c <USBD_LL_Init+0x94>)
 801d4ea:	2200      	movs	r2, #0
 801d4ec:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801d4ee:	4b13      	ldr	r3, [pc, #76]	@ (801d53c <USBD_LL_Init+0x94>)
 801d4f0:	2200      	movs	r2, #0
 801d4f2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801d4f4:	4b11      	ldr	r3, [pc, #68]	@ (801d53c <USBD_LL_Init+0x94>)
 801d4f6:	2200      	movs	r2, #0
 801d4f8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801d4fa:	4b10      	ldr	r3, [pc, #64]	@ (801d53c <USBD_LL_Init+0x94>)
 801d4fc:	2200      	movs	r2, #0
 801d4fe:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801d500:	4b0e      	ldr	r3, [pc, #56]	@ (801d53c <USBD_LL_Init+0x94>)
 801d502:	2200      	movs	r2, #0
 801d504:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801d506:	480d      	ldr	r0, [pc, #52]	@ (801d53c <USBD_LL_Init+0x94>)
 801d508:	f7ea f822 	bl	8007550 <HAL_PCD_Init>
 801d50c:	4603      	mov	r3, r0
 801d50e:	2b00      	cmp	r3, #0
 801d510:	d001      	beq.n	801d516 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801d512:	f7e6 f913 	bl	800373c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801d516:	2180      	movs	r1, #128	@ 0x80
 801d518:	4808      	ldr	r0, [pc, #32]	@ (801d53c <USBD_LL_Init+0x94>)
 801d51a:	f7eb fad8 	bl	8008ace <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801d51e:	2240      	movs	r2, #64	@ 0x40
 801d520:	2100      	movs	r1, #0
 801d522:	4806      	ldr	r0, [pc, #24]	@ (801d53c <USBD_LL_Init+0x94>)
 801d524:	f7eb fa8c 	bl	8008a40 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801d528:	2280      	movs	r2, #128	@ 0x80
 801d52a:	2101      	movs	r1, #1
 801d52c:	4803      	ldr	r0, [pc, #12]	@ (801d53c <USBD_LL_Init+0x94>)
 801d52e:	f7eb fa87 	bl	8008a40 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801d532:	2300      	movs	r3, #0
}
 801d534:	4618      	mov	r0, r3
 801d536:	3708      	adds	r7, #8
 801d538:	46bd      	mov	sp, r7
 801d53a:	bd80      	pop	{r7, pc}
 801d53c:	2000290c 	.word	0x2000290c

0801d540 <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 801d540:	b580      	push	{r7, lr}
 801d542:	b084      	sub	sp, #16
 801d544:	af00      	add	r7, sp, #0
 801d546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d548:	2300      	movs	r3, #0
 801d54a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d54c:	2300      	movs	r3, #0
 801d54e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_DeInit(pdev->pData);
 801d550:	687b      	ldr	r3, [r7, #4]
 801d552:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d556:	4618      	mov	r0, r3
 801d558:	f7ea f909 	bl	800776e <HAL_PCD_DeInit>
 801d55c:	4603      	mov	r3, r0
 801d55e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d560:	7bfb      	ldrb	r3, [r7, #15]
 801d562:	4618      	mov	r0, r3
 801d564:	f000 f998 	bl	801d898 <USBD_Get_USB_Status>
 801d568:	4603      	mov	r3, r0
 801d56a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d56c:	7bbb      	ldrb	r3, [r7, #14]
}
 801d56e:	4618      	mov	r0, r3
 801d570:	3710      	adds	r7, #16
 801d572:	46bd      	mov	sp, r7
 801d574:	bd80      	pop	{r7, pc}

0801d576 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801d576:	b580      	push	{r7, lr}
 801d578:	b084      	sub	sp, #16
 801d57a:	af00      	add	r7, sp, #0
 801d57c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d57e:	2300      	movs	r3, #0
 801d580:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d582:	2300      	movs	r3, #0
 801d584:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801d586:	687b      	ldr	r3, [r7, #4]
 801d588:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d58c:	4618      	mov	r0, r3
 801d58e:	f7ea f911 	bl	80077b4 <HAL_PCD_Start>
 801d592:	4603      	mov	r3, r0
 801d594:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d596:	7bfb      	ldrb	r3, [r7, #15]
 801d598:	4618      	mov	r0, r3
 801d59a:	f000 f97d 	bl	801d898 <USBD_Get_USB_Status>
 801d59e:	4603      	mov	r3, r0
 801d5a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d5a2:	7bbb      	ldrb	r3, [r7, #14]
}
 801d5a4:	4618      	mov	r0, r3
 801d5a6:	3710      	adds	r7, #16
 801d5a8:	46bd      	mov	sp, r7
 801d5aa:	bd80      	pop	{r7, pc}

0801d5ac <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 801d5ac:	b580      	push	{r7, lr}
 801d5ae:	b084      	sub	sp, #16
 801d5b0:	af00      	add	r7, sp, #0
 801d5b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d5b4:	2300      	movs	r3, #0
 801d5b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d5b8:	2300      	movs	r3, #0
 801d5ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 801d5bc:	687b      	ldr	r3, [r7, #4]
 801d5be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d5c2:	4618      	mov	r0, r3
 801d5c4:	f7ea f92b 	bl	800781e <HAL_PCD_Stop>
 801d5c8:	4603      	mov	r3, r0
 801d5ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d5cc:	7bfb      	ldrb	r3, [r7, #15]
 801d5ce:	4618      	mov	r0, r3
 801d5d0:	f000 f962 	bl	801d898 <USBD_Get_USB_Status>
 801d5d4:	4603      	mov	r3, r0
 801d5d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d5d8:	7bbb      	ldrb	r3, [r7, #14]
}
 801d5da:	4618      	mov	r0, r3
 801d5dc:	3710      	adds	r7, #16
 801d5de:	46bd      	mov	sp, r7
 801d5e0:	bd80      	pop	{r7, pc}

0801d5e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801d5e2:	b580      	push	{r7, lr}
 801d5e4:	b084      	sub	sp, #16
 801d5e6:	af00      	add	r7, sp, #0
 801d5e8:	6078      	str	r0, [r7, #4]
 801d5ea:	4608      	mov	r0, r1
 801d5ec:	4611      	mov	r1, r2
 801d5ee:	461a      	mov	r2, r3
 801d5f0:	4603      	mov	r3, r0
 801d5f2:	70fb      	strb	r3, [r7, #3]
 801d5f4:	460b      	mov	r3, r1
 801d5f6:	70bb      	strb	r3, [r7, #2]
 801d5f8:	4613      	mov	r3, r2
 801d5fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d5fc:	2300      	movs	r3, #0
 801d5fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d600:	2300      	movs	r3, #0
 801d602:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801d604:	687b      	ldr	r3, [r7, #4]
 801d606:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801d60a:	78bb      	ldrb	r3, [r7, #2]
 801d60c:	883a      	ldrh	r2, [r7, #0]
 801d60e:	78f9      	ldrb	r1, [r7, #3]
 801d610:	f7ea fe05 	bl	800821e <HAL_PCD_EP_Open>
 801d614:	4603      	mov	r3, r0
 801d616:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d618:	7bfb      	ldrb	r3, [r7, #15]
 801d61a:	4618      	mov	r0, r3
 801d61c:	f000 f93c 	bl	801d898 <USBD_Get_USB_Status>
 801d620:	4603      	mov	r3, r0
 801d622:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d624:	7bbb      	ldrb	r3, [r7, #14]
}
 801d626:	4618      	mov	r0, r3
 801d628:	3710      	adds	r7, #16
 801d62a:	46bd      	mov	sp, r7
 801d62c:	bd80      	pop	{r7, pc}

0801d62e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d62e:	b580      	push	{r7, lr}
 801d630:	b084      	sub	sp, #16
 801d632:	af00      	add	r7, sp, #0
 801d634:	6078      	str	r0, [r7, #4]
 801d636:	460b      	mov	r3, r1
 801d638:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d63a:	2300      	movs	r3, #0
 801d63c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d63e:	2300      	movs	r3, #0
 801d640:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801d642:	687b      	ldr	r3, [r7, #4]
 801d644:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d648:	78fa      	ldrb	r2, [r7, #3]
 801d64a:	4611      	mov	r1, r2
 801d64c:	4618      	mov	r0, r3
 801d64e:	f7ea fe4e 	bl	80082ee <HAL_PCD_EP_Close>
 801d652:	4603      	mov	r3, r0
 801d654:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d656:	7bfb      	ldrb	r3, [r7, #15]
 801d658:	4618      	mov	r0, r3
 801d65a:	f000 f91d 	bl	801d898 <USBD_Get_USB_Status>
 801d65e:	4603      	mov	r3, r0
 801d660:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d662:	7bbb      	ldrb	r3, [r7, #14]
}
 801d664:	4618      	mov	r0, r3
 801d666:	3710      	adds	r7, #16
 801d668:	46bd      	mov	sp, r7
 801d66a:	bd80      	pop	{r7, pc}

0801d66c <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d66c:	b580      	push	{r7, lr}
 801d66e:	b084      	sub	sp, #16
 801d670:	af00      	add	r7, sp, #0
 801d672:	6078      	str	r0, [r7, #4]
 801d674:	460b      	mov	r3, r1
 801d676:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d678:	2300      	movs	r3, #0
 801d67a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d67c:	2300      	movs	r3, #0
 801d67e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801d680:	687b      	ldr	r3, [r7, #4]
 801d682:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d686:	78fa      	ldrb	r2, [r7, #3]
 801d688:	4611      	mov	r1, r2
 801d68a:	4618      	mov	r0, r3
 801d68c:	f7ea fff0 	bl	8008670 <HAL_PCD_EP_Flush>
 801d690:	4603      	mov	r3, r0
 801d692:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d694:	7bfb      	ldrb	r3, [r7, #15]
 801d696:	4618      	mov	r0, r3
 801d698:	f000 f8fe 	bl	801d898 <USBD_Get_USB_Status>
 801d69c:	4603      	mov	r3, r0
 801d69e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d6a0:	7bbb      	ldrb	r3, [r7, #14]
}
 801d6a2:	4618      	mov	r0, r3
 801d6a4:	3710      	adds	r7, #16
 801d6a6:	46bd      	mov	sp, r7
 801d6a8:	bd80      	pop	{r7, pc}

0801d6aa <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d6aa:	b580      	push	{r7, lr}
 801d6ac:	b084      	sub	sp, #16
 801d6ae:	af00      	add	r7, sp, #0
 801d6b0:	6078      	str	r0, [r7, #4]
 801d6b2:	460b      	mov	r3, r1
 801d6b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d6b6:	2300      	movs	r3, #0
 801d6b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d6ba:	2300      	movs	r3, #0
 801d6bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801d6be:	687b      	ldr	r3, [r7, #4]
 801d6c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d6c4:	78fa      	ldrb	r2, [r7, #3]
 801d6c6:	4611      	mov	r1, r2
 801d6c8:	4618      	mov	r0, r3
 801d6ca:	f7ea fee7 	bl	800849c <HAL_PCD_EP_SetStall>
 801d6ce:	4603      	mov	r3, r0
 801d6d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d6d2:	7bfb      	ldrb	r3, [r7, #15]
 801d6d4:	4618      	mov	r0, r3
 801d6d6:	f000 f8df 	bl	801d898 <USBD_Get_USB_Status>
 801d6da:	4603      	mov	r3, r0
 801d6dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d6de:	7bbb      	ldrb	r3, [r7, #14]
}
 801d6e0:	4618      	mov	r0, r3
 801d6e2:	3710      	adds	r7, #16
 801d6e4:	46bd      	mov	sp, r7
 801d6e6:	bd80      	pop	{r7, pc}

0801d6e8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d6e8:	b580      	push	{r7, lr}
 801d6ea:	b084      	sub	sp, #16
 801d6ec:	af00      	add	r7, sp, #0
 801d6ee:	6078      	str	r0, [r7, #4]
 801d6f0:	460b      	mov	r3, r1
 801d6f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d6f4:	2300      	movs	r3, #0
 801d6f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d6f8:	2300      	movs	r3, #0
 801d6fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801d6fc:	687b      	ldr	r3, [r7, #4]
 801d6fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d702:	78fa      	ldrb	r2, [r7, #3]
 801d704:	4611      	mov	r1, r2
 801d706:	4618      	mov	r0, r3
 801d708:	f7ea ff2b 	bl	8008562 <HAL_PCD_EP_ClrStall>
 801d70c:	4603      	mov	r3, r0
 801d70e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d710:	7bfb      	ldrb	r3, [r7, #15]
 801d712:	4618      	mov	r0, r3
 801d714:	f000 f8c0 	bl	801d898 <USBD_Get_USB_Status>
 801d718:	4603      	mov	r3, r0
 801d71a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d71c:	7bbb      	ldrb	r3, [r7, #14]
}
 801d71e:	4618      	mov	r0, r3
 801d720:	3710      	adds	r7, #16
 801d722:	46bd      	mov	sp, r7
 801d724:	bd80      	pop	{r7, pc}

0801d726 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d726:	b480      	push	{r7}
 801d728:	b085      	sub	sp, #20
 801d72a:	af00      	add	r7, sp, #0
 801d72c:	6078      	str	r0, [r7, #4]
 801d72e:	460b      	mov	r3, r1
 801d730:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801d732:	687b      	ldr	r3, [r7, #4]
 801d734:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d738:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801d73a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801d73e:	2b00      	cmp	r3, #0
 801d740:	da0b      	bge.n	801d75a <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801d742:	78fb      	ldrb	r3, [r7, #3]
 801d744:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d748:	68f9      	ldr	r1, [r7, #12]
 801d74a:	4613      	mov	r3, r2
 801d74c:	00db      	lsls	r3, r3, #3
 801d74e:	4413      	add	r3, r2
 801d750:	009b      	lsls	r3, r3, #2
 801d752:	440b      	add	r3, r1
 801d754:	3316      	adds	r3, #22
 801d756:	781b      	ldrb	r3, [r3, #0]
 801d758:	e00b      	b.n	801d772 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801d75a:	78fb      	ldrb	r3, [r7, #3]
 801d75c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d760:	68f9      	ldr	r1, [r7, #12]
 801d762:	4613      	mov	r3, r2
 801d764:	00db      	lsls	r3, r3, #3
 801d766:	4413      	add	r3, r2
 801d768:	009b      	lsls	r3, r3, #2
 801d76a:	440b      	add	r3, r1
 801d76c:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801d770:	781b      	ldrb	r3, [r3, #0]
  }
}
 801d772:	4618      	mov	r0, r3
 801d774:	3714      	adds	r7, #20
 801d776:	46bd      	mov	sp, r7
 801d778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d77c:	4770      	bx	lr

0801d77e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801d77e:	b580      	push	{r7, lr}
 801d780:	b084      	sub	sp, #16
 801d782:	af00      	add	r7, sp, #0
 801d784:	6078      	str	r0, [r7, #4]
 801d786:	460b      	mov	r3, r1
 801d788:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d78a:	2300      	movs	r3, #0
 801d78c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d78e:	2300      	movs	r3, #0
 801d790:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801d792:	687b      	ldr	r3, [r7, #4]
 801d794:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d798:	78fa      	ldrb	r2, [r7, #3]
 801d79a:	4611      	mov	r1, r2
 801d79c:	4618      	mov	r0, r3
 801d79e:	f7ea fd1a 	bl	80081d6 <HAL_PCD_SetAddress>
 801d7a2:	4603      	mov	r3, r0
 801d7a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d7a6:	7bfb      	ldrb	r3, [r7, #15]
 801d7a8:	4618      	mov	r0, r3
 801d7aa:	f000 f875 	bl	801d898 <USBD_Get_USB_Status>
 801d7ae:	4603      	mov	r3, r0
 801d7b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d7b2:	7bbb      	ldrb	r3, [r7, #14]
}
 801d7b4:	4618      	mov	r0, r3
 801d7b6:	3710      	adds	r7, #16
 801d7b8:	46bd      	mov	sp, r7
 801d7ba:	bd80      	pop	{r7, pc}

0801d7bc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801d7bc:	b580      	push	{r7, lr}
 801d7be:	b086      	sub	sp, #24
 801d7c0:	af00      	add	r7, sp, #0
 801d7c2:	60f8      	str	r0, [r7, #12]
 801d7c4:	607a      	str	r2, [r7, #4]
 801d7c6:	603b      	str	r3, [r7, #0]
 801d7c8:	460b      	mov	r3, r1
 801d7ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d7cc:	2300      	movs	r3, #0
 801d7ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d7d0:	2300      	movs	r3, #0
 801d7d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801d7d4:	68fb      	ldr	r3, [r7, #12]
 801d7d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801d7da:	7af9      	ldrb	r1, [r7, #11]
 801d7dc:	683b      	ldr	r3, [r7, #0]
 801d7de:	687a      	ldr	r2, [r7, #4]
 801d7e0:	f7ea fe22 	bl	8008428 <HAL_PCD_EP_Transmit>
 801d7e4:	4603      	mov	r3, r0
 801d7e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d7e8:	7dfb      	ldrb	r3, [r7, #23]
 801d7ea:	4618      	mov	r0, r3
 801d7ec:	f000 f854 	bl	801d898 <USBD_Get_USB_Status>
 801d7f0:	4603      	mov	r3, r0
 801d7f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801d7f4:	7dbb      	ldrb	r3, [r7, #22]
}
 801d7f6:	4618      	mov	r0, r3
 801d7f8:	3718      	adds	r7, #24
 801d7fa:	46bd      	mov	sp, r7
 801d7fc:	bd80      	pop	{r7, pc}

0801d7fe <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801d7fe:	b580      	push	{r7, lr}
 801d800:	b086      	sub	sp, #24
 801d802:	af00      	add	r7, sp, #0
 801d804:	60f8      	str	r0, [r7, #12]
 801d806:	607a      	str	r2, [r7, #4]
 801d808:	603b      	str	r3, [r7, #0]
 801d80a:	460b      	mov	r3, r1
 801d80c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d80e:	2300      	movs	r3, #0
 801d810:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d812:	2300      	movs	r3, #0
 801d814:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801d816:	68fb      	ldr	r3, [r7, #12]
 801d818:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801d81c:	7af9      	ldrb	r1, [r7, #11]
 801d81e:	683b      	ldr	r3, [r7, #0]
 801d820:	687a      	ldr	r2, [r7, #4]
 801d822:	f7ea fdae 	bl	8008382 <HAL_PCD_EP_Receive>
 801d826:	4603      	mov	r3, r0
 801d828:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d82a:	7dfb      	ldrb	r3, [r7, #23]
 801d82c:	4618      	mov	r0, r3
 801d82e:	f000 f833 	bl	801d898 <USBD_Get_USB_Status>
 801d832:	4603      	mov	r3, r0
 801d834:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801d836:	7dbb      	ldrb	r3, [r7, #22]
}
 801d838:	4618      	mov	r0, r3
 801d83a:	3718      	adds	r7, #24
 801d83c:	46bd      	mov	sp, r7
 801d83e:	bd80      	pop	{r7, pc}

0801d840 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d840:	b580      	push	{r7, lr}
 801d842:	b082      	sub	sp, #8
 801d844:	af00      	add	r7, sp, #0
 801d846:	6078      	str	r0, [r7, #4]
 801d848:	460b      	mov	r3, r1
 801d84a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801d84c:	687b      	ldr	r3, [r7, #4]
 801d84e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d852:	78fa      	ldrb	r2, [r7, #3]
 801d854:	4611      	mov	r1, r2
 801d856:	4618      	mov	r0, r3
 801d858:	f7ea fdce 	bl	80083f8 <HAL_PCD_EP_GetRxCount>
 801d85c:	4603      	mov	r3, r0
}
 801d85e:	4618      	mov	r0, r3
 801d860:	3708      	adds	r7, #8
 801d862:	46bd      	mov	sp, r7
 801d864:	bd80      	pop	{r7, pc}
	...

0801d868 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801d868:	b480      	push	{r7}
 801d86a:	b083      	sub	sp, #12
 801d86c:	af00      	add	r7, sp, #0
 801d86e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801d870:	4b03      	ldr	r3, [pc, #12]	@ (801d880 <USBD_static_malloc+0x18>)
}
 801d872:	4618      	mov	r0, r3
 801d874:	370c      	adds	r7, #12
 801d876:	46bd      	mov	sp, r7
 801d878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d87c:	4770      	bx	lr
 801d87e:	bf00      	nop
 801d880:	20002df0 	.word	0x20002df0

0801d884 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801d884:	b480      	push	{r7}
 801d886:	b083      	sub	sp, #12
 801d888:	af00      	add	r7, sp, #0
 801d88a:	6078      	str	r0, [r7, #4]

}
 801d88c:	bf00      	nop
 801d88e:	370c      	adds	r7, #12
 801d890:	46bd      	mov	sp, r7
 801d892:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d896:	4770      	bx	lr

0801d898 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801d898:	b480      	push	{r7}
 801d89a:	b085      	sub	sp, #20
 801d89c:	af00      	add	r7, sp, #0
 801d89e:	4603      	mov	r3, r0
 801d8a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d8a2:	2300      	movs	r3, #0
 801d8a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801d8a6:	79fb      	ldrb	r3, [r7, #7]
 801d8a8:	2b03      	cmp	r3, #3
 801d8aa:	d817      	bhi.n	801d8dc <USBD_Get_USB_Status+0x44>
 801d8ac:	a201      	add	r2, pc, #4	@ (adr r2, 801d8b4 <USBD_Get_USB_Status+0x1c>)
 801d8ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d8b2:	bf00      	nop
 801d8b4:	0801d8c5 	.word	0x0801d8c5
 801d8b8:	0801d8cb 	.word	0x0801d8cb
 801d8bc:	0801d8d1 	.word	0x0801d8d1
 801d8c0:	0801d8d7 	.word	0x0801d8d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801d8c4:	2300      	movs	r3, #0
 801d8c6:	73fb      	strb	r3, [r7, #15]
    break;
 801d8c8:	e00b      	b.n	801d8e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801d8ca:	2303      	movs	r3, #3
 801d8cc:	73fb      	strb	r3, [r7, #15]
    break;
 801d8ce:	e008      	b.n	801d8e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801d8d0:	2301      	movs	r3, #1
 801d8d2:	73fb      	strb	r3, [r7, #15]
    break;
 801d8d4:	e005      	b.n	801d8e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801d8d6:	2303      	movs	r3, #3
 801d8d8:	73fb      	strb	r3, [r7, #15]
    break;
 801d8da:	e002      	b.n	801d8e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801d8dc:	2303      	movs	r3, #3
 801d8de:	73fb      	strb	r3, [r7, #15]
    break;
 801d8e0:	bf00      	nop
  }
  return usb_status;
 801d8e2:	7bfb      	ldrb	r3, [r7, #15]
}
 801d8e4:	4618      	mov	r0, r3
 801d8e6:	3714      	adds	r7, #20
 801d8e8:	46bd      	mov	sp, r7
 801d8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8ee:	4770      	bx	lr

0801d8f0 <atoi>:
 801d8f0:	220a      	movs	r2, #10
 801d8f2:	2100      	movs	r1, #0
 801d8f4:	f000 b932 	b.w	801db5c <strtol>

0801d8f8 <malloc>:
 801d8f8:	4b02      	ldr	r3, [pc, #8]	@ (801d904 <malloc+0xc>)
 801d8fa:	4601      	mov	r1, r0
 801d8fc:	6818      	ldr	r0, [r3, #0]
 801d8fe:	f000 b825 	b.w	801d94c <_malloc_r>
 801d902:	bf00      	nop
 801d904:	20000148 	.word	0x20000148

0801d908 <sbrk_aligned>:
 801d908:	b570      	push	{r4, r5, r6, lr}
 801d90a:	4e0f      	ldr	r6, [pc, #60]	@ (801d948 <sbrk_aligned+0x40>)
 801d90c:	460c      	mov	r4, r1
 801d90e:	6831      	ldr	r1, [r6, #0]
 801d910:	4605      	mov	r5, r0
 801d912:	b911      	cbnz	r1, 801d91a <sbrk_aligned+0x12>
 801d914:	f001 fb2e 	bl	801ef74 <_sbrk_r>
 801d918:	6030      	str	r0, [r6, #0]
 801d91a:	4621      	mov	r1, r4
 801d91c:	4628      	mov	r0, r5
 801d91e:	f001 fb29 	bl	801ef74 <_sbrk_r>
 801d922:	1c43      	adds	r3, r0, #1
 801d924:	d103      	bne.n	801d92e <sbrk_aligned+0x26>
 801d926:	f04f 34ff 	mov.w	r4, #4294967295
 801d92a:	4620      	mov	r0, r4
 801d92c:	bd70      	pop	{r4, r5, r6, pc}
 801d92e:	1cc4      	adds	r4, r0, #3
 801d930:	f024 0403 	bic.w	r4, r4, #3
 801d934:	42a0      	cmp	r0, r4
 801d936:	d0f8      	beq.n	801d92a <sbrk_aligned+0x22>
 801d938:	1a21      	subs	r1, r4, r0
 801d93a:	4628      	mov	r0, r5
 801d93c:	f001 fb1a 	bl	801ef74 <_sbrk_r>
 801d940:	3001      	adds	r0, #1
 801d942:	d1f2      	bne.n	801d92a <sbrk_aligned+0x22>
 801d944:	e7ef      	b.n	801d926 <sbrk_aligned+0x1e>
 801d946:	bf00      	nop
 801d948:	20003668 	.word	0x20003668

0801d94c <_malloc_r>:
 801d94c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d950:	1ccd      	adds	r5, r1, #3
 801d952:	f025 0503 	bic.w	r5, r5, #3
 801d956:	3508      	adds	r5, #8
 801d958:	2d0c      	cmp	r5, #12
 801d95a:	bf38      	it	cc
 801d95c:	250c      	movcc	r5, #12
 801d95e:	2d00      	cmp	r5, #0
 801d960:	4606      	mov	r6, r0
 801d962:	db01      	blt.n	801d968 <_malloc_r+0x1c>
 801d964:	42a9      	cmp	r1, r5
 801d966:	d904      	bls.n	801d972 <_malloc_r+0x26>
 801d968:	230c      	movs	r3, #12
 801d96a:	6033      	str	r3, [r6, #0]
 801d96c:	2000      	movs	r0, #0
 801d96e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d972:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801da48 <_malloc_r+0xfc>
 801d976:	f000 f869 	bl	801da4c <__malloc_lock>
 801d97a:	f8d8 3000 	ldr.w	r3, [r8]
 801d97e:	461c      	mov	r4, r3
 801d980:	bb44      	cbnz	r4, 801d9d4 <_malloc_r+0x88>
 801d982:	4629      	mov	r1, r5
 801d984:	4630      	mov	r0, r6
 801d986:	f7ff ffbf 	bl	801d908 <sbrk_aligned>
 801d98a:	1c43      	adds	r3, r0, #1
 801d98c:	4604      	mov	r4, r0
 801d98e:	d158      	bne.n	801da42 <_malloc_r+0xf6>
 801d990:	f8d8 4000 	ldr.w	r4, [r8]
 801d994:	4627      	mov	r7, r4
 801d996:	2f00      	cmp	r7, #0
 801d998:	d143      	bne.n	801da22 <_malloc_r+0xd6>
 801d99a:	2c00      	cmp	r4, #0
 801d99c:	d04b      	beq.n	801da36 <_malloc_r+0xea>
 801d99e:	6823      	ldr	r3, [r4, #0]
 801d9a0:	4639      	mov	r1, r7
 801d9a2:	4630      	mov	r0, r6
 801d9a4:	eb04 0903 	add.w	r9, r4, r3
 801d9a8:	f001 fae4 	bl	801ef74 <_sbrk_r>
 801d9ac:	4581      	cmp	r9, r0
 801d9ae:	d142      	bne.n	801da36 <_malloc_r+0xea>
 801d9b0:	6821      	ldr	r1, [r4, #0]
 801d9b2:	1a6d      	subs	r5, r5, r1
 801d9b4:	4629      	mov	r1, r5
 801d9b6:	4630      	mov	r0, r6
 801d9b8:	f7ff ffa6 	bl	801d908 <sbrk_aligned>
 801d9bc:	3001      	adds	r0, #1
 801d9be:	d03a      	beq.n	801da36 <_malloc_r+0xea>
 801d9c0:	6823      	ldr	r3, [r4, #0]
 801d9c2:	442b      	add	r3, r5
 801d9c4:	6023      	str	r3, [r4, #0]
 801d9c6:	f8d8 3000 	ldr.w	r3, [r8]
 801d9ca:	685a      	ldr	r2, [r3, #4]
 801d9cc:	bb62      	cbnz	r2, 801da28 <_malloc_r+0xdc>
 801d9ce:	f8c8 7000 	str.w	r7, [r8]
 801d9d2:	e00f      	b.n	801d9f4 <_malloc_r+0xa8>
 801d9d4:	6822      	ldr	r2, [r4, #0]
 801d9d6:	1b52      	subs	r2, r2, r5
 801d9d8:	d420      	bmi.n	801da1c <_malloc_r+0xd0>
 801d9da:	2a0b      	cmp	r2, #11
 801d9dc:	d917      	bls.n	801da0e <_malloc_r+0xc2>
 801d9de:	1961      	adds	r1, r4, r5
 801d9e0:	42a3      	cmp	r3, r4
 801d9e2:	6025      	str	r5, [r4, #0]
 801d9e4:	bf18      	it	ne
 801d9e6:	6059      	strne	r1, [r3, #4]
 801d9e8:	6863      	ldr	r3, [r4, #4]
 801d9ea:	bf08      	it	eq
 801d9ec:	f8c8 1000 	streq.w	r1, [r8]
 801d9f0:	5162      	str	r2, [r4, r5]
 801d9f2:	604b      	str	r3, [r1, #4]
 801d9f4:	4630      	mov	r0, r6
 801d9f6:	f000 f82f 	bl	801da58 <__malloc_unlock>
 801d9fa:	f104 000b 	add.w	r0, r4, #11
 801d9fe:	1d23      	adds	r3, r4, #4
 801da00:	f020 0007 	bic.w	r0, r0, #7
 801da04:	1ac2      	subs	r2, r0, r3
 801da06:	bf1c      	itt	ne
 801da08:	1a1b      	subne	r3, r3, r0
 801da0a:	50a3      	strne	r3, [r4, r2]
 801da0c:	e7af      	b.n	801d96e <_malloc_r+0x22>
 801da0e:	6862      	ldr	r2, [r4, #4]
 801da10:	42a3      	cmp	r3, r4
 801da12:	bf0c      	ite	eq
 801da14:	f8c8 2000 	streq.w	r2, [r8]
 801da18:	605a      	strne	r2, [r3, #4]
 801da1a:	e7eb      	b.n	801d9f4 <_malloc_r+0xa8>
 801da1c:	4623      	mov	r3, r4
 801da1e:	6864      	ldr	r4, [r4, #4]
 801da20:	e7ae      	b.n	801d980 <_malloc_r+0x34>
 801da22:	463c      	mov	r4, r7
 801da24:	687f      	ldr	r7, [r7, #4]
 801da26:	e7b6      	b.n	801d996 <_malloc_r+0x4a>
 801da28:	461a      	mov	r2, r3
 801da2a:	685b      	ldr	r3, [r3, #4]
 801da2c:	42a3      	cmp	r3, r4
 801da2e:	d1fb      	bne.n	801da28 <_malloc_r+0xdc>
 801da30:	2300      	movs	r3, #0
 801da32:	6053      	str	r3, [r2, #4]
 801da34:	e7de      	b.n	801d9f4 <_malloc_r+0xa8>
 801da36:	230c      	movs	r3, #12
 801da38:	6033      	str	r3, [r6, #0]
 801da3a:	4630      	mov	r0, r6
 801da3c:	f000 f80c 	bl	801da58 <__malloc_unlock>
 801da40:	e794      	b.n	801d96c <_malloc_r+0x20>
 801da42:	6005      	str	r5, [r0, #0]
 801da44:	e7d6      	b.n	801d9f4 <_malloc_r+0xa8>
 801da46:	bf00      	nop
 801da48:	2000366c 	.word	0x2000366c

0801da4c <__malloc_lock>:
 801da4c:	4801      	ldr	r0, [pc, #4]	@ (801da54 <__malloc_lock+0x8>)
 801da4e:	f001 bade 	b.w	801f00e <__retarget_lock_acquire_recursive>
 801da52:	bf00      	nop
 801da54:	200037b0 	.word	0x200037b0

0801da58 <__malloc_unlock>:
 801da58:	4801      	ldr	r0, [pc, #4]	@ (801da60 <__malloc_unlock+0x8>)
 801da5a:	f001 bad9 	b.w	801f010 <__retarget_lock_release_recursive>
 801da5e:	bf00      	nop
 801da60:	200037b0 	.word	0x200037b0

0801da64 <_strtol_l.constprop.0>:
 801da64:	2b24      	cmp	r3, #36	@ 0x24
 801da66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801da6a:	4686      	mov	lr, r0
 801da6c:	4690      	mov	r8, r2
 801da6e:	d801      	bhi.n	801da74 <_strtol_l.constprop.0+0x10>
 801da70:	2b01      	cmp	r3, #1
 801da72:	d106      	bne.n	801da82 <_strtol_l.constprop.0+0x1e>
 801da74:	f001 faa0 	bl	801efb8 <__errno>
 801da78:	2316      	movs	r3, #22
 801da7a:	6003      	str	r3, [r0, #0]
 801da7c:	2000      	movs	r0, #0
 801da7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801da82:	4834      	ldr	r0, [pc, #208]	@ (801db54 <_strtol_l.constprop.0+0xf0>)
 801da84:	460d      	mov	r5, r1
 801da86:	462a      	mov	r2, r5
 801da88:	f815 4b01 	ldrb.w	r4, [r5], #1
 801da8c:	5d06      	ldrb	r6, [r0, r4]
 801da8e:	f016 0608 	ands.w	r6, r6, #8
 801da92:	d1f8      	bne.n	801da86 <_strtol_l.constprop.0+0x22>
 801da94:	2c2d      	cmp	r4, #45	@ 0x2d
 801da96:	d12d      	bne.n	801daf4 <_strtol_l.constprop.0+0x90>
 801da98:	782c      	ldrb	r4, [r5, #0]
 801da9a:	2601      	movs	r6, #1
 801da9c:	1c95      	adds	r5, r2, #2
 801da9e:	f033 0210 	bics.w	r2, r3, #16
 801daa2:	d109      	bne.n	801dab8 <_strtol_l.constprop.0+0x54>
 801daa4:	2c30      	cmp	r4, #48	@ 0x30
 801daa6:	d12a      	bne.n	801dafe <_strtol_l.constprop.0+0x9a>
 801daa8:	782a      	ldrb	r2, [r5, #0]
 801daaa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801daae:	2a58      	cmp	r2, #88	@ 0x58
 801dab0:	d125      	bne.n	801dafe <_strtol_l.constprop.0+0x9a>
 801dab2:	786c      	ldrb	r4, [r5, #1]
 801dab4:	2310      	movs	r3, #16
 801dab6:	3502      	adds	r5, #2
 801dab8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801dabc:	f10c 3cff 	add.w	ip, ip, #4294967295
 801dac0:	2200      	movs	r2, #0
 801dac2:	fbbc f9f3 	udiv	r9, ip, r3
 801dac6:	4610      	mov	r0, r2
 801dac8:	fb03 ca19 	mls	sl, r3, r9, ip
 801dacc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801dad0:	2f09      	cmp	r7, #9
 801dad2:	d81b      	bhi.n	801db0c <_strtol_l.constprop.0+0xa8>
 801dad4:	463c      	mov	r4, r7
 801dad6:	42a3      	cmp	r3, r4
 801dad8:	dd27      	ble.n	801db2a <_strtol_l.constprop.0+0xc6>
 801dada:	1c57      	adds	r7, r2, #1
 801dadc:	d007      	beq.n	801daee <_strtol_l.constprop.0+0x8a>
 801dade:	4581      	cmp	r9, r0
 801dae0:	d320      	bcc.n	801db24 <_strtol_l.constprop.0+0xc0>
 801dae2:	d101      	bne.n	801dae8 <_strtol_l.constprop.0+0x84>
 801dae4:	45a2      	cmp	sl, r4
 801dae6:	db1d      	blt.n	801db24 <_strtol_l.constprop.0+0xc0>
 801dae8:	fb00 4003 	mla	r0, r0, r3, r4
 801daec:	2201      	movs	r2, #1
 801daee:	f815 4b01 	ldrb.w	r4, [r5], #1
 801daf2:	e7eb      	b.n	801dacc <_strtol_l.constprop.0+0x68>
 801daf4:	2c2b      	cmp	r4, #43	@ 0x2b
 801daf6:	bf04      	itt	eq
 801daf8:	782c      	ldrbeq	r4, [r5, #0]
 801dafa:	1c95      	addeq	r5, r2, #2
 801dafc:	e7cf      	b.n	801da9e <_strtol_l.constprop.0+0x3a>
 801dafe:	2b00      	cmp	r3, #0
 801db00:	d1da      	bne.n	801dab8 <_strtol_l.constprop.0+0x54>
 801db02:	2c30      	cmp	r4, #48	@ 0x30
 801db04:	bf0c      	ite	eq
 801db06:	2308      	moveq	r3, #8
 801db08:	230a      	movne	r3, #10
 801db0a:	e7d5      	b.n	801dab8 <_strtol_l.constprop.0+0x54>
 801db0c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801db10:	2f19      	cmp	r7, #25
 801db12:	d801      	bhi.n	801db18 <_strtol_l.constprop.0+0xb4>
 801db14:	3c37      	subs	r4, #55	@ 0x37
 801db16:	e7de      	b.n	801dad6 <_strtol_l.constprop.0+0x72>
 801db18:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801db1c:	2f19      	cmp	r7, #25
 801db1e:	d804      	bhi.n	801db2a <_strtol_l.constprop.0+0xc6>
 801db20:	3c57      	subs	r4, #87	@ 0x57
 801db22:	e7d8      	b.n	801dad6 <_strtol_l.constprop.0+0x72>
 801db24:	f04f 32ff 	mov.w	r2, #4294967295
 801db28:	e7e1      	b.n	801daee <_strtol_l.constprop.0+0x8a>
 801db2a:	1c53      	adds	r3, r2, #1
 801db2c:	d108      	bne.n	801db40 <_strtol_l.constprop.0+0xdc>
 801db2e:	2322      	movs	r3, #34	@ 0x22
 801db30:	f8ce 3000 	str.w	r3, [lr]
 801db34:	4660      	mov	r0, ip
 801db36:	f1b8 0f00 	cmp.w	r8, #0
 801db3a:	d0a0      	beq.n	801da7e <_strtol_l.constprop.0+0x1a>
 801db3c:	1e69      	subs	r1, r5, #1
 801db3e:	e006      	b.n	801db4e <_strtol_l.constprop.0+0xea>
 801db40:	b106      	cbz	r6, 801db44 <_strtol_l.constprop.0+0xe0>
 801db42:	4240      	negs	r0, r0
 801db44:	f1b8 0f00 	cmp.w	r8, #0
 801db48:	d099      	beq.n	801da7e <_strtol_l.constprop.0+0x1a>
 801db4a:	2a00      	cmp	r2, #0
 801db4c:	d1f6      	bne.n	801db3c <_strtol_l.constprop.0+0xd8>
 801db4e:	f8c8 1000 	str.w	r1, [r8]
 801db52:	e794      	b.n	801da7e <_strtol_l.constprop.0+0x1a>
 801db54:	080255b1 	.word	0x080255b1

0801db58 <_strtol_r>:
 801db58:	f7ff bf84 	b.w	801da64 <_strtol_l.constprop.0>

0801db5c <strtol>:
 801db5c:	4613      	mov	r3, r2
 801db5e:	460a      	mov	r2, r1
 801db60:	4601      	mov	r1, r0
 801db62:	4802      	ldr	r0, [pc, #8]	@ (801db6c <strtol+0x10>)
 801db64:	6800      	ldr	r0, [r0, #0]
 801db66:	f7ff bf7d 	b.w	801da64 <_strtol_l.constprop.0>
 801db6a:	bf00      	nop
 801db6c:	20000148 	.word	0x20000148

0801db70 <__cvt>:
 801db70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801db74:	ec57 6b10 	vmov	r6, r7, d0
 801db78:	2f00      	cmp	r7, #0
 801db7a:	460c      	mov	r4, r1
 801db7c:	4619      	mov	r1, r3
 801db7e:	463b      	mov	r3, r7
 801db80:	bfbb      	ittet	lt
 801db82:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801db86:	461f      	movlt	r7, r3
 801db88:	2300      	movge	r3, #0
 801db8a:	232d      	movlt	r3, #45	@ 0x2d
 801db8c:	700b      	strb	r3, [r1, #0]
 801db8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801db90:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801db94:	4691      	mov	r9, r2
 801db96:	f023 0820 	bic.w	r8, r3, #32
 801db9a:	bfbc      	itt	lt
 801db9c:	4632      	movlt	r2, r6
 801db9e:	4616      	movlt	r6, r2
 801dba0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801dba4:	d005      	beq.n	801dbb2 <__cvt+0x42>
 801dba6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801dbaa:	d100      	bne.n	801dbae <__cvt+0x3e>
 801dbac:	3401      	adds	r4, #1
 801dbae:	2102      	movs	r1, #2
 801dbb0:	e000      	b.n	801dbb4 <__cvt+0x44>
 801dbb2:	2103      	movs	r1, #3
 801dbb4:	ab03      	add	r3, sp, #12
 801dbb6:	9301      	str	r3, [sp, #4]
 801dbb8:	ab02      	add	r3, sp, #8
 801dbba:	9300      	str	r3, [sp, #0]
 801dbbc:	ec47 6b10 	vmov	d0, r6, r7
 801dbc0:	4653      	mov	r3, sl
 801dbc2:	4622      	mov	r2, r4
 801dbc4:	f001 fae8 	bl	801f198 <_dtoa_r>
 801dbc8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801dbcc:	4605      	mov	r5, r0
 801dbce:	d119      	bne.n	801dc04 <__cvt+0x94>
 801dbd0:	f019 0f01 	tst.w	r9, #1
 801dbd4:	d00e      	beq.n	801dbf4 <__cvt+0x84>
 801dbd6:	eb00 0904 	add.w	r9, r0, r4
 801dbda:	2200      	movs	r2, #0
 801dbdc:	2300      	movs	r3, #0
 801dbde:	4630      	mov	r0, r6
 801dbe0:	4639      	mov	r1, r7
 801dbe2:	f7e2 ff89 	bl	8000af8 <__aeabi_dcmpeq>
 801dbe6:	b108      	cbz	r0, 801dbec <__cvt+0x7c>
 801dbe8:	f8cd 900c 	str.w	r9, [sp, #12]
 801dbec:	2230      	movs	r2, #48	@ 0x30
 801dbee:	9b03      	ldr	r3, [sp, #12]
 801dbf0:	454b      	cmp	r3, r9
 801dbf2:	d31e      	bcc.n	801dc32 <__cvt+0xc2>
 801dbf4:	9b03      	ldr	r3, [sp, #12]
 801dbf6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dbf8:	1b5b      	subs	r3, r3, r5
 801dbfa:	4628      	mov	r0, r5
 801dbfc:	6013      	str	r3, [r2, #0]
 801dbfe:	b004      	add	sp, #16
 801dc00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dc04:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801dc08:	eb00 0904 	add.w	r9, r0, r4
 801dc0c:	d1e5      	bne.n	801dbda <__cvt+0x6a>
 801dc0e:	7803      	ldrb	r3, [r0, #0]
 801dc10:	2b30      	cmp	r3, #48	@ 0x30
 801dc12:	d10a      	bne.n	801dc2a <__cvt+0xba>
 801dc14:	2200      	movs	r2, #0
 801dc16:	2300      	movs	r3, #0
 801dc18:	4630      	mov	r0, r6
 801dc1a:	4639      	mov	r1, r7
 801dc1c:	f7e2 ff6c 	bl	8000af8 <__aeabi_dcmpeq>
 801dc20:	b918      	cbnz	r0, 801dc2a <__cvt+0xba>
 801dc22:	f1c4 0401 	rsb	r4, r4, #1
 801dc26:	f8ca 4000 	str.w	r4, [sl]
 801dc2a:	f8da 3000 	ldr.w	r3, [sl]
 801dc2e:	4499      	add	r9, r3
 801dc30:	e7d3      	b.n	801dbda <__cvt+0x6a>
 801dc32:	1c59      	adds	r1, r3, #1
 801dc34:	9103      	str	r1, [sp, #12]
 801dc36:	701a      	strb	r2, [r3, #0]
 801dc38:	e7d9      	b.n	801dbee <__cvt+0x7e>

0801dc3a <__exponent>:
 801dc3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dc3c:	2900      	cmp	r1, #0
 801dc3e:	bfba      	itte	lt
 801dc40:	4249      	neglt	r1, r1
 801dc42:	232d      	movlt	r3, #45	@ 0x2d
 801dc44:	232b      	movge	r3, #43	@ 0x2b
 801dc46:	2909      	cmp	r1, #9
 801dc48:	7002      	strb	r2, [r0, #0]
 801dc4a:	7043      	strb	r3, [r0, #1]
 801dc4c:	dd29      	ble.n	801dca2 <__exponent+0x68>
 801dc4e:	f10d 0307 	add.w	r3, sp, #7
 801dc52:	461d      	mov	r5, r3
 801dc54:	270a      	movs	r7, #10
 801dc56:	461a      	mov	r2, r3
 801dc58:	fbb1 f6f7 	udiv	r6, r1, r7
 801dc5c:	fb07 1416 	mls	r4, r7, r6, r1
 801dc60:	3430      	adds	r4, #48	@ 0x30
 801dc62:	f802 4c01 	strb.w	r4, [r2, #-1]
 801dc66:	460c      	mov	r4, r1
 801dc68:	2c63      	cmp	r4, #99	@ 0x63
 801dc6a:	f103 33ff 	add.w	r3, r3, #4294967295
 801dc6e:	4631      	mov	r1, r6
 801dc70:	dcf1      	bgt.n	801dc56 <__exponent+0x1c>
 801dc72:	3130      	adds	r1, #48	@ 0x30
 801dc74:	1e94      	subs	r4, r2, #2
 801dc76:	f803 1c01 	strb.w	r1, [r3, #-1]
 801dc7a:	1c41      	adds	r1, r0, #1
 801dc7c:	4623      	mov	r3, r4
 801dc7e:	42ab      	cmp	r3, r5
 801dc80:	d30a      	bcc.n	801dc98 <__exponent+0x5e>
 801dc82:	f10d 0309 	add.w	r3, sp, #9
 801dc86:	1a9b      	subs	r3, r3, r2
 801dc88:	42ac      	cmp	r4, r5
 801dc8a:	bf88      	it	hi
 801dc8c:	2300      	movhi	r3, #0
 801dc8e:	3302      	adds	r3, #2
 801dc90:	4403      	add	r3, r0
 801dc92:	1a18      	subs	r0, r3, r0
 801dc94:	b003      	add	sp, #12
 801dc96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dc98:	f813 6b01 	ldrb.w	r6, [r3], #1
 801dc9c:	f801 6f01 	strb.w	r6, [r1, #1]!
 801dca0:	e7ed      	b.n	801dc7e <__exponent+0x44>
 801dca2:	2330      	movs	r3, #48	@ 0x30
 801dca4:	3130      	adds	r1, #48	@ 0x30
 801dca6:	7083      	strb	r3, [r0, #2]
 801dca8:	70c1      	strb	r1, [r0, #3]
 801dcaa:	1d03      	adds	r3, r0, #4
 801dcac:	e7f1      	b.n	801dc92 <__exponent+0x58>
	...

0801dcb0 <_printf_float>:
 801dcb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dcb4:	b08d      	sub	sp, #52	@ 0x34
 801dcb6:	460c      	mov	r4, r1
 801dcb8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801dcbc:	4616      	mov	r6, r2
 801dcbe:	461f      	mov	r7, r3
 801dcc0:	4605      	mov	r5, r0
 801dcc2:	f001 f91f 	bl	801ef04 <_localeconv_r>
 801dcc6:	6803      	ldr	r3, [r0, #0]
 801dcc8:	9304      	str	r3, [sp, #16]
 801dcca:	4618      	mov	r0, r3
 801dccc:	f7e2 fae8 	bl	80002a0 <strlen>
 801dcd0:	2300      	movs	r3, #0
 801dcd2:	930a      	str	r3, [sp, #40]	@ 0x28
 801dcd4:	f8d8 3000 	ldr.w	r3, [r8]
 801dcd8:	9005      	str	r0, [sp, #20]
 801dcda:	3307      	adds	r3, #7
 801dcdc:	f023 0307 	bic.w	r3, r3, #7
 801dce0:	f103 0208 	add.w	r2, r3, #8
 801dce4:	f894 a018 	ldrb.w	sl, [r4, #24]
 801dce8:	f8d4 b000 	ldr.w	fp, [r4]
 801dcec:	f8c8 2000 	str.w	r2, [r8]
 801dcf0:	e9d3 8900 	ldrd	r8, r9, [r3]
 801dcf4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801dcf8:	9307      	str	r3, [sp, #28]
 801dcfa:	f8cd 8018 	str.w	r8, [sp, #24]
 801dcfe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801dd02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801dd06:	4b9c      	ldr	r3, [pc, #624]	@ (801df78 <_printf_float+0x2c8>)
 801dd08:	f04f 32ff 	mov.w	r2, #4294967295
 801dd0c:	f7e2 ff26 	bl	8000b5c <__aeabi_dcmpun>
 801dd10:	bb70      	cbnz	r0, 801dd70 <_printf_float+0xc0>
 801dd12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801dd16:	4b98      	ldr	r3, [pc, #608]	@ (801df78 <_printf_float+0x2c8>)
 801dd18:	f04f 32ff 	mov.w	r2, #4294967295
 801dd1c:	f7e2 ff00 	bl	8000b20 <__aeabi_dcmple>
 801dd20:	bb30      	cbnz	r0, 801dd70 <_printf_float+0xc0>
 801dd22:	2200      	movs	r2, #0
 801dd24:	2300      	movs	r3, #0
 801dd26:	4640      	mov	r0, r8
 801dd28:	4649      	mov	r1, r9
 801dd2a:	f7e2 feef 	bl	8000b0c <__aeabi_dcmplt>
 801dd2e:	b110      	cbz	r0, 801dd36 <_printf_float+0x86>
 801dd30:	232d      	movs	r3, #45	@ 0x2d
 801dd32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801dd36:	4a91      	ldr	r2, [pc, #580]	@ (801df7c <_printf_float+0x2cc>)
 801dd38:	4b91      	ldr	r3, [pc, #580]	@ (801df80 <_printf_float+0x2d0>)
 801dd3a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801dd3e:	bf94      	ite	ls
 801dd40:	4690      	movls	r8, r2
 801dd42:	4698      	movhi	r8, r3
 801dd44:	2303      	movs	r3, #3
 801dd46:	6123      	str	r3, [r4, #16]
 801dd48:	f02b 0304 	bic.w	r3, fp, #4
 801dd4c:	6023      	str	r3, [r4, #0]
 801dd4e:	f04f 0900 	mov.w	r9, #0
 801dd52:	9700      	str	r7, [sp, #0]
 801dd54:	4633      	mov	r3, r6
 801dd56:	aa0b      	add	r2, sp, #44	@ 0x2c
 801dd58:	4621      	mov	r1, r4
 801dd5a:	4628      	mov	r0, r5
 801dd5c:	f000 f9d2 	bl	801e104 <_printf_common>
 801dd60:	3001      	adds	r0, #1
 801dd62:	f040 808d 	bne.w	801de80 <_printf_float+0x1d0>
 801dd66:	f04f 30ff 	mov.w	r0, #4294967295
 801dd6a:	b00d      	add	sp, #52	@ 0x34
 801dd6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd70:	4642      	mov	r2, r8
 801dd72:	464b      	mov	r3, r9
 801dd74:	4640      	mov	r0, r8
 801dd76:	4649      	mov	r1, r9
 801dd78:	f7e2 fef0 	bl	8000b5c <__aeabi_dcmpun>
 801dd7c:	b140      	cbz	r0, 801dd90 <_printf_float+0xe0>
 801dd7e:	464b      	mov	r3, r9
 801dd80:	2b00      	cmp	r3, #0
 801dd82:	bfbc      	itt	lt
 801dd84:	232d      	movlt	r3, #45	@ 0x2d
 801dd86:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801dd8a:	4a7e      	ldr	r2, [pc, #504]	@ (801df84 <_printf_float+0x2d4>)
 801dd8c:	4b7e      	ldr	r3, [pc, #504]	@ (801df88 <_printf_float+0x2d8>)
 801dd8e:	e7d4      	b.n	801dd3a <_printf_float+0x8a>
 801dd90:	6863      	ldr	r3, [r4, #4]
 801dd92:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801dd96:	9206      	str	r2, [sp, #24]
 801dd98:	1c5a      	adds	r2, r3, #1
 801dd9a:	d13b      	bne.n	801de14 <_printf_float+0x164>
 801dd9c:	2306      	movs	r3, #6
 801dd9e:	6063      	str	r3, [r4, #4]
 801dda0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801dda4:	2300      	movs	r3, #0
 801dda6:	6022      	str	r2, [r4, #0]
 801dda8:	9303      	str	r3, [sp, #12]
 801ddaa:	ab0a      	add	r3, sp, #40	@ 0x28
 801ddac:	e9cd a301 	strd	sl, r3, [sp, #4]
 801ddb0:	ab09      	add	r3, sp, #36	@ 0x24
 801ddb2:	9300      	str	r3, [sp, #0]
 801ddb4:	6861      	ldr	r1, [r4, #4]
 801ddb6:	ec49 8b10 	vmov	d0, r8, r9
 801ddba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801ddbe:	4628      	mov	r0, r5
 801ddc0:	f7ff fed6 	bl	801db70 <__cvt>
 801ddc4:	9b06      	ldr	r3, [sp, #24]
 801ddc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ddc8:	2b47      	cmp	r3, #71	@ 0x47
 801ddca:	4680      	mov	r8, r0
 801ddcc:	d129      	bne.n	801de22 <_printf_float+0x172>
 801ddce:	1cc8      	adds	r0, r1, #3
 801ddd0:	db02      	blt.n	801ddd8 <_printf_float+0x128>
 801ddd2:	6863      	ldr	r3, [r4, #4]
 801ddd4:	4299      	cmp	r1, r3
 801ddd6:	dd41      	ble.n	801de5c <_printf_float+0x1ac>
 801ddd8:	f1aa 0a02 	sub.w	sl, sl, #2
 801dddc:	fa5f fa8a 	uxtb.w	sl, sl
 801dde0:	3901      	subs	r1, #1
 801dde2:	4652      	mov	r2, sl
 801dde4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801dde8:	9109      	str	r1, [sp, #36]	@ 0x24
 801ddea:	f7ff ff26 	bl	801dc3a <__exponent>
 801ddee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ddf0:	1813      	adds	r3, r2, r0
 801ddf2:	2a01      	cmp	r2, #1
 801ddf4:	4681      	mov	r9, r0
 801ddf6:	6123      	str	r3, [r4, #16]
 801ddf8:	dc02      	bgt.n	801de00 <_printf_float+0x150>
 801ddfa:	6822      	ldr	r2, [r4, #0]
 801ddfc:	07d2      	lsls	r2, r2, #31
 801ddfe:	d501      	bpl.n	801de04 <_printf_float+0x154>
 801de00:	3301      	adds	r3, #1
 801de02:	6123      	str	r3, [r4, #16]
 801de04:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801de08:	2b00      	cmp	r3, #0
 801de0a:	d0a2      	beq.n	801dd52 <_printf_float+0xa2>
 801de0c:	232d      	movs	r3, #45	@ 0x2d
 801de0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801de12:	e79e      	b.n	801dd52 <_printf_float+0xa2>
 801de14:	9a06      	ldr	r2, [sp, #24]
 801de16:	2a47      	cmp	r2, #71	@ 0x47
 801de18:	d1c2      	bne.n	801dda0 <_printf_float+0xf0>
 801de1a:	2b00      	cmp	r3, #0
 801de1c:	d1c0      	bne.n	801dda0 <_printf_float+0xf0>
 801de1e:	2301      	movs	r3, #1
 801de20:	e7bd      	b.n	801dd9e <_printf_float+0xee>
 801de22:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801de26:	d9db      	bls.n	801dde0 <_printf_float+0x130>
 801de28:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801de2c:	d118      	bne.n	801de60 <_printf_float+0x1b0>
 801de2e:	2900      	cmp	r1, #0
 801de30:	6863      	ldr	r3, [r4, #4]
 801de32:	dd0b      	ble.n	801de4c <_printf_float+0x19c>
 801de34:	6121      	str	r1, [r4, #16]
 801de36:	b913      	cbnz	r3, 801de3e <_printf_float+0x18e>
 801de38:	6822      	ldr	r2, [r4, #0]
 801de3a:	07d0      	lsls	r0, r2, #31
 801de3c:	d502      	bpl.n	801de44 <_printf_float+0x194>
 801de3e:	3301      	adds	r3, #1
 801de40:	440b      	add	r3, r1
 801de42:	6123      	str	r3, [r4, #16]
 801de44:	65a1      	str	r1, [r4, #88]	@ 0x58
 801de46:	f04f 0900 	mov.w	r9, #0
 801de4a:	e7db      	b.n	801de04 <_printf_float+0x154>
 801de4c:	b913      	cbnz	r3, 801de54 <_printf_float+0x1a4>
 801de4e:	6822      	ldr	r2, [r4, #0]
 801de50:	07d2      	lsls	r2, r2, #31
 801de52:	d501      	bpl.n	801de58 <_printf_float+0x1a8>
 801de54:	3302      	adds	r3, #2
 801de56:	e7f4      	b.n	801de42 <_printf_float+0x192>
 801de58:	2301      	movs	r3, #1
 801de5a:	e7f2      	b.n	801de42 <_printf_float+0x192>
 801de5c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801de60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801de62:	4299      	cmp	r1, r3
 801de64:	db05      	blt.n	801de72 <_printf_float+0x1c2>
 801de66:	6823      	ldr	r3, [r4, #0]
 801de68:	6121      	str	r1, [r4, #16]
 801de6a:	07d8      	lsls	r0, r3, #31
 801de6c:	d5ea      	bpl.n	801de44 <_printf_float+0x194>
 801de6e:	1c4b      	adds	r3, r1, #1
 801de70:	e7e7      	b.n	801de42 <_printf_float+0x192>
 801de72:	2900      	cmp	r1, #0
 801de74:	bfd4      	ite	le
 801de76:	f1c1 0202 	rsble	r2, r1, #2
 801de7a:	2201      	movgt	r2, #1
 801de7c:	4413      	add	r3, r2
 801de7e:	e7e0      	b.n	801de42 <_printf_float+0x192>
 801de80:	6823      	ldr	r3, [r4, #0]
 801de82:	055a      	lsls	r2, r3, #21
 801de84:	d407      	bmi.n	801de96 <_printf_float+0x1e6>
 801de86:	6923      	ldr	r3, [r4, #16]
 801de88:	4642      	mov	r2, r8
 801de8a:	4631      	mov	r1, r6
 801de8c:	4628      	mov	r0, r5
 801de8e:	47b8      	blx	r7
 801de90:	3001      	adds	r0, #1
 801de92:	d12b      	bne.n	801deec <_printf_float+0x23c>
 801de94:	e767      	b.n	801dd66 <_printf_float+0xb6>
 801de96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801de9a:	f240 80dd 	bls.w	801e058 <_printf_float+0x3a8>
 801de9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801dea2:	2200      	movs	r2, #0
 801dea4:	2300      	movs	r3, #0
 801dea6:	f7e2 fe27 	bl	8000af8 <__aeabi_dcmpeq>
 801deaa:	2800      	cmp	r0, #0
 801deac:	d033      	beq.n	801df16 <_printf_float+0x266>
 801deae:	4a37      	ldr	r2, [pc, #220]	@ (801df8c <_printf_float+0x2dc>)
 801deb0:	2301      	movs	r3, #1
 801deb2:	4631      	mov	r1, r6
 801deb4:	4628      	mov	r0, r5
 801deb6:	47b8      	blx	r7
 801deb8:	3001      	adds	r0, #1
 801deba:	f43f af54 	beq.w	801dd66 <_printf_float+0xb6>
 801debe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801dec2:	4543      	cmp	r3, r8
 801dec4:	db02      	blt.n	801decc <_printf_float+0x21c>
 801dec6:	6823      	ldr	r3, [r4, #0]
 801dec8:	07d8      	lsls	r0, r3, #31
 801deca:	d50f      	bpl.n	801deec <_printf_float+0x23c>
 801decc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ded0:	4631      	mov	r1, r6
 801ded2:	4628      	mov	r0, r5
 801ded4:	47b8      	blx	r7
 801ded6:	3001      	adds	r0, #1
 801ded8:	f43f af45 	beq.w	801dd66 <_printf_float+0xb6>
 801dedc:	f04f 0900 	mov.w	r9, #0
 801dee0:	f108 38ff 	add.w	r8, r8, #4294967295
 801dee4:	f104 0a1a 	add.w	sl, r4, #26
 801dee8:	45c8      	cmp	r8, r9
 801deea:	dc09      	bgt.n	801df00 <_printf_float+0x250>
 801deec:	6823      	ldr	r3, [r4, #0]
 801deee:	079b      	lsls	r3, r3, #30
 801def0:	f100 8103 	bmi.w	801e0fa <_printf_float+0x44a>
 801def4:	68e0      	ldr	r0, [r4, #12]
 801def6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801def8:	4298      	cmp	r0, r3
 801defa:	bfb8      	it	lt
 801defc:	4618      	movlt	r0, r3
 801defe:	e734      	b.n	801dd6a <_printf_float+0xba>
 801df00:	2301      	movs	r3, #1
 801df02:	4652      	mov	r2, sl
 801df04:	4631      	mov	r1, r6
 801df06:	4628      	mov	r0, r5
 801df08:	47b8      	blx	r7
 801df0a:	3001      	adds	r0, #1
 801df0c:	f43f af2b 	beq.w	801dd66 <_printf_float+0xb6>
 801df10:	f109 0901 	add.w	r9, r9, #1
 801df14:	e7e8      	b.n	801dee8 <_printf_float+0x238>
 801df16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df18:	2b00      	cmp	r3, #0
 801df1a:	dc39      	bgt.n	801df90 <_printf_float+0x2e0>
 801df1c:	4a1b      	ldr	r2, [pc, #108]	@ (801df8c <_printf_float+0x2dc>)
 801df1e:	2301      	movs	r3, #1
 801df20:	4631      	mov	r1, r6
 801df22:	4628      	mov	r0, r5
 801df24:	47b8      	blx	r7
 801df26:	3001      	adds	r0, #1
 801df28:	f43f af1d 	beq.w	801dd66 <_printf_float+0xb6>
 801df2c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801df30:	ea59 0303 	orrs.w	r3, r9, r3
 801df34:	d102      	bne.n	801df3c <_printf_float+0x28c>
 801df36:	6823      	ldr	r3, [r4, #0]
 801df38:	07d9      	lsls	r1, r3, #31
 801df3a:	d5d7      	bpl.n	801deec <_printf_float+0x23c>
 801df3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801df40:	4631      	mov	r1, r6
 801df42:	4628      	mov	r0, r5
 801df44:	47b8      	blx	r7
 801df46:	3001      	adds	r0, #1
 801df48:	f43f af0d 	beq.w	801dd66 <_printf_float+0xb6>
 801df4c:	f04f 0a00 	mov.w	sl, #0
 801df50:	f104 0b1a 	add.w	fp, r4, #26
 801df54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df56:	425b      	negs	r3, r3
 801df58:	4553      	cmp	r3, sl
 801df5a:	dc01      	bgt.n	801df60 <_printf_float+0x2b0>
 801df5c:	464b      	mov	r3, r9
 801df5e:	e793      	b.n	801de88 <_printf_float+0x1d8>
 801df60:	2301      	movs	r3, #1
 801df62:	465a      	mov	r2, fp
 801df64:	4631      	mov	r1, r6
 801df66:	4628      	mov	r0, r5
 801df68:	47b8      	blx	r7
 801df6a:	3001      	adds	r0, #1
 801df6c:	f43f aefb 	beq.w	801dd66 <_printf_float+0xb6>
 801df70:	f10a 0a01 	add.w	sl, sl, #1
 801df74:	e7ee      	b.n	801df54 <_printf_float+0x2a4>
 801df76:	bf00      	nop
 801df78:	7fefffff 	.word	0x7fefffff
 801df7c:	080256b1 	.word	0x080256b1
 801df80:	080256b5 	.word	0x080256b5
 801df84:	080256b9 	.word	0x080256b9
 801df88:	080256bd 	.word	0x080256bd
 801df8c:	080256c1 	.word	0x080256c1
 801df90:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801df92:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801df96:	4553      	cmp	r3, sl
 801df98:	bfa8      	it	ge
 801df9a:	4653      	movge	r3, sl
 801df9c:	2b00      	cmp	r3, #0
 801df9e:	4699      	mov	r9, r3
 801dfa0:	dc36      	bgt.n	801e010 <_printf_float+0x360>
 801dfa2:	f04f 0b00 	mov.w	fp, #0
 801dfa6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801dfaa:	f104 021a 	add.w	r2, r4, #26
 801dfae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801dfb0:	9306      	str	r3, [sp, #24]
 801dfb2:	eba3 0309 	sub.w	r3, r3, r9
 801dfb6:	455b      	cmp	r3, fp
 801dfb8:	dc31      	bgt.n	801e01e <_printf_float+0x36e>
 801dfba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dfbc:	459a      	cmp	sl, r3
 801dfbe:	dc3a      	bgt.n	801e036 <_printf_float+0x386>
 801dfc0:	6823      	ldr	r3, [r4, #0]
 801dfc2:	07da      	lsls	r2, r3, #31
 801dfc4:	d437      	bmi.n	801e036 <_printf_float+0x386>
 801dfc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dfc8:	ebaa 0903 	sub.w	r9, sl, r3
 801dfcc:	9b06      	ldr	r3, [sp, #24]
 801dfce:	ebaa 0303 	sub.w	r3, sl, r3
 801dfd2:	4599      	cmp	r9, r3
 801dfd4:	bfa8      	it	ge
 801dfd6:	4699      	movge	r9, r3
 801dfd8:	f1b9 0f00 	cmp.w	r9, #0
 801dfdc:	dc33      	bgt.n	801e046 <_printf_float+0x396>
 801dfde:	f04f 0800 	mov.w	r8, #0
 801dfe2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801dfe6:	f104 0b1a 	add.w	fp, r4, #26
 801dfea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dfec:	ebaa 0303 	sub.w	r3, sl, r3
 801dff0:	eba3 0309 	sub.w	r3, r3, r9
 801dff4:	4543      	cmp	r3, r8
 801dff6:	f77f af79 	ble.w	801deec <_printf_float+0x23c>
 801dffa:	2301      	movs	r3, #1
 801dffc:	465a      	mov	r2, fp
 801dffe:	4631      	mov	r1, r6
 801e000:	4628      	mov	r0, r5
 801e002:	47b8      	blx	r7
 801e004:	3001      	adds	r0, #1
 801e006:	f43f aeae 	beq.w	801dd66 <_printf_float+0xb6>
 801e00a:	f108 0801 	add.w	r8, r8, #1
 801e00e:	e7ec      	b.n	801dfea <_printf_float+0x33a>
 801e010:	4642      	mov	r2, r8
 801e012:	4631      	mov	r1, r6
 801e014:	4628      	mov	r0, r5
 801e016:	47b8      	blx	r7
 801e018:	3001      	adds	r0, #1
 801e01a:	d1c2      	bne.n	801dfa2 <_printf_float+0x2f2>
 801e01c:	e6a3      	b.n	801dd66 <_printf_float+0xb6>
 801e01e:	2301      	movs	r3, #1
 801e020:	4631      	mov	r1, r6
 801e022:	4628      	mov	r0, r5
 801e024:	9206      	str	r2, [sp, #24]
 801e026:	47b8      	blx	r7
 801e028:	3001      	adds	r0, #1
 801e02a:	f43f ae9c 	beq.w	801dd66 <_printf_float+0xb6>
 801e02e:	9a06      	ldr	r2, [sp, #24]
 801e030:	f10b 0b01 	add.w	fp, fp, #1
 801e034:	e7bb      	b.n	801dfae <_printf_float+0x2fe>
 801e036:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e03a:	4631      	mov	r1, r6
 801e03c:	4628      	mov	r0, r5
 801e03e:	47b8      	blx	r7
 801e040:	3001      	adds	r0, #1
 801e042:	d1c0      	bne.n	801dfc6 <_printf_float+0x316>
 801e044:	e68f      	b.n	801dd66 <_printf_float+0xb6>
 801e046:	9a06      	ldr	r2, [sp, #24]
 801e048:	464b      	mov	r3, r9
 801e04a:	4442      	add	r2, r8
 801e04c:	4631      	mov	r1, r6
 801e04e:	4628      	mov	r0, r5
 801e050:	47b8      	blx	r7
 801e052:	3001      	adds	r0, #1
 801e054:	d1c3      	bne.n	801dfde <_printf_float+0x32e>
 801e056:	e686      	b.n	801dd66 <_printf_float+0xb6>
 801e058:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801e05c:	f1ba 0f01 	cmp.w	sl, #1
 801e060:	dc01      	bgt.n	801e066 <_printf_float+0x3b6>
 801e062:	07db      	lsls	r3, r3, #31
 801e064:	d536      	bpl.n	801e0d4 <_printf_float+0x424>
 801e066:	2301      	movs	r3, #1
 801e068:	4642      	mov	r2, r8
 801e06a:	4631      	mov	r1, r6
 801e06c:	4628      	mov	r0, r5
 801e06e:	47b8      	blx	r7
 801e070:	3001      	adds	r0, #1
 801e072:	f43f ae78 	beq.w	801dd66 <_printf_float+0xb6>
 801e076:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e07a:	4631      	mov	r1, r6
 801e07c:	4628      	mov	r0, r5
 801e07e:	47b8      	blx	r7
 801e080:	3001      	adds	r0, #1
 801e082:	f43f ae70 	beq.w	801dd66 <_printf_float+0xb6>
 801e086:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801e08a:	2200      	movs	r2, #0
 801e08c:	2300      	movs	r3, #0
 801e08e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e092:	f7e2 fd31 	bl	8000af8 <__aeabi_dcmpeq>
 801e096:	b9c0      	cbnz	r0, 801e0ca <_printf_float+0x41a>
 801e098:	4653      	mov	r3, sl
 801e09a:	f108 0201 	add.w	r2, r8, #1
 801e09e:	4631      	mov	r1, r6
 801e0a0:	4628      	mov	r0, r5
 801e0a2:	47b8      	blx	r7
 801e0a4:	3001      	adds	r0, #1
 801e0a6:	d10c      	bne.n	801e0c2 <_printf_float+0x412>
 801e0a8:	e65d      	b.n	801dd66 <_printf_float+0xb6>
 801e0aa:	2301      	movs	r3, #1
 801e0ac:	465a      	mov	r2, fp
 801e0ae:	4631      	mov	r1, r6
 801e0b0:	4628      	mov	r0, r5
 801e0b2:	47b8      	blx	r7
 801e0b4:	3001      	adds	r0, #1
 801e0b6:	f43f ae56 	beq.w	801dd66 <_printf_float+0xb6>
 801e0ba:	f108 0801 	add.w	r8, r8, #1
 801e0be:	45d0      	cmp	r8, sl
 801e0c0:	dbf3      	blt.n	801e0aa <_printf_float+0x3fa>
 801e0c2:	464b      	mov	r3, r9
 801e0c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801e0c8:	e6df      	b.n	801de8a <_printf_float+0x1da>
 801e0ca:	f04f 0800 	mov.w	r8, #0
 801e0ce:	f104 0b1a 	add.w	fp, r4, #26
 801e0d2:	e7f4      	b.n	801e0be <_printf_float+0x40e>
 801e0d4:	2301      	movs	r3, #1
 801e0d6:	4642      	mov	r2, r8
 801e0d8:	e7e1      	b.n	801e09e <_printf_float+0x3ee>
 801e0da:	2301      	movs	r3, #1
 801e0dc:	464a      	mov	r2, r9
 801e0de:	4631      	mov	r1, r6
 801e0e0:	4628      	mov	r0, r5
 801e0e2:	47b8      	blx	r7
 801e0e4:	3001      	adds	r0, #1
 801e0e6:	f43f ae3e 	beq.w	801dd66 <_printf_float+0xb6>
 801e0ea:	f108 0801 	add.w	r8, r8, #1
 801e0ee:	68e3      	ldr	r3, [r4, #12]
 801e0f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e0f2:	1a5b      	subs	r3, r3, r1
 801e0f4:	4543      	cmp	r3, r8
 801e0f6:	dcf0      	bgt.n	801e0da <_printf_float+0x42a>
 801e0f8:	e6fc      	b.n	801def4 <_printf_float+0x244>
 801e0fa:	f04f 0800 	mov.w	r8, #0
 801e0fe:	f104 0919 	add.w	r9, r4, #25
 801e102:	e7f4      	b.n	801e0ee <_printf_float+0x43e>

0801e104 <_printf_common>:
 801e104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e108:	4616      	mov	r6, r2
 801e10a:	4698      	mov	r8, r3
 801e10c:	688a      	ldr	r2, [r1, #8]
 801e10e:	690b      	ldr	r3, [r1, #16]
 801e110:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801e114:	4293      	cmp	r3, r2
 801e116:	bfb8      	it	lt
 801e118:	4613      	movlt	r3, r2
 801e11a:	6033      	str	r3, [r6, #0]
 801e11c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801e120:	4607      	mov	r7, r0
 801e122:	460c      	mov	r4, r1
 801e124:	b10a      	cbz	r2, 801e12a <_printf_common+0x26>
 801e126:	3301      	adds	r3, #1
 801e128:	6033      	str	r3, [r6, #0]
 801e12a:	6823      	ldr	r3, [r4, #0]
 801e12c:	0699      	lsls	r1, r3, #26
 801e12e:	bf42      	ittt	mi
 801e130:	6833      	ldrmi	r3, [r6, #0]
 801e132:	3302      	addmi	r3, #2
 801e134:	6033      	strmi	r3, [r6, #0]
 801e136:	6825      	ldr	r5, [r4, #0]
 801e138:	f015 0506 	ands.w	r5, r5, #6
 801e13c:	d106      	bne.n	801e14c <_printf_common+0x48>
 801e13e:	f104 0a19 	add.w	sl, r4, #25
 801e142:	68e3      	ldr	r3, [r4, #12]
 801e144:	6832      	ldr	r2, [r6, #0]
 801e146:	1a9b      	subs	r3, r3, r2
 801e148:	42ab      	cmp	r3, r5
 801e14a:	dc26      	bgt.n	801e19a <_printf_common+0x96>
 801e14c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801e150:	6822      	ldr	r2, [r4, #0]
 801e152:	3b00      	subs	r3, #0
 801e154:	bf18      	it	ne
 801e156:	2301      	movne	r3, #1
 801e158:	0692      	lsls	r2, r2, #26
 801e15a:	d42b      	bmi.n	801e1b4 <_printf_common+0xb0>
 801e15c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801e160:	4641      	mov	r1, r8
 801e162:	4638      	mov	r0, r7
 801e164:	47c8      	blx	r9
 801e166:	3001      	adds	r0, #1
 801e168:	d01e      	beq.n	801e1a8 <_printf_common+0xa4>
 801e16a:	6823      	ldr	r3, [r4, #0]
 801e16c:	6922      	ldr	r2, [r4, #16]
 801e16e:	f003 0306 	and.w	r3, r3, #6
 801e172:	2b04      	cmp	r3, #4
 801e174:	bf02      	ittt	eq
 801e176:	68e5      	ldreq	r5, [r4, #12]
 801e178:	6833      	ldreq	r3, [r6, #0]
 801e17a:	1aed      	subeq	r5, r5, r3
 801e17c:	68a3      	ldr	r3, [r4, #8]
 801e17e:	bf0c      	ite	eq
 801e180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e184:	2500      	movne	r5, #0
 801e186:	4293      	cmp	r3, r2
 801e188:	bfc4      	itt	gt
 801e18a:	1a9b      	subgt	r3, r3, r2
 801e18c:	18ed      	addgt	r5, r5, r3
 801e18e:	2600      	movs	r6, #0
 801e190:	341a      	adds	r4, #26
 801e192:	42b5      	cmp	r5, r6
 801e194:	d11a      	bne.n	801e1cc <_printf_common+0xc8>
 801e196:	2000      	movs	r0, #0
 801e198:	e008      	b.n	801e1ac <_printf_common+0xa8>
 801e19a:	2301      	movs	r3, #1
 801e19c:	4652      	mov	r2, sl
 801e19e:	4641      	mov	r1, r8
 801e1a0:	4638      	mov	r0, r7
 801e1a2:	47c8      	blx	r9
 801e1a4:	3001      	adds	r0, #1
 801e1a6:	d103      	bne.n	801e1b0 <_printf_common+0xac>
 801e1a8:	f04f 30ff 	mov.w	r0, #4294967295
 801e1ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e1b0:	3501      	adds	r5, #1
 801e1b2:	e7c6      	b.n	801e142 <_printf_common+0x3e>
 801e1b4:	18e1      	adds	r1, r4, r3
 801e1b6:	1c5a      	adds	r2, r3, #1
 801e1b8:	2030      	movs	r0, #48	@ 0x30
 801e1ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801e1be:	4422      	add	r2, r4
 801e1c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801e1c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801e1c8:	3302      	adds	r3, #2
 801e1ca:	e7c7      	b.n	801e15c <_printf_common+0x58>
 801e1cc:	2301      	movs	r3, #1
 801e1ce:	4622      	mov	r2, r4
 801e1d0:	4641      	mov	r1, r8
 801e1d2:	4638      	mov	r0, r7
 801e1d4:	47c8      	blx	r9
 801e1d6:	3001      	adds	r0, #1
 801e1d8:	d0e6      	beq.n	801e1a8 <_printf_common+0xa4>
 801e1da:	3601      	adds	r6, #1
 801e1dc:	e7d9      	b.n	801e192 <_printf_common+0x8e>
	...

0801e1e0 <_printf_i>:
 801e1e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e1e4:	7e0f      	ldrb	r7, [r1, #24]
 801e1e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801e1e8:	2f78      	cmp	r7, #120	@ 0x78
 801e1ea:	4691      	mov	r9, r2
 801e1ec:	4680      	mov	r8, r0
 801e1ee:	460c      	mov	r4, r1
 801e1f0:	469a      	mov	sl, r3
 801e1f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801e1f6:	d807      	bhi.n	801e208 <_printf_i+0x28>
 801e1f8:	2f62      	cmp	r7, #98	@ 0x62
 801e1fa:	d80a      	bhi.n	801e212 <_printf_i+0x32>
 801e1fc:	2f00      	cmp	r7, #0
 801e1fe:	f000 80d2 	beq.w	801e3a6 <_printf_i+0x1c6>
 801e202:	2f58      	cmp	r7, #88	@ 0x58
 801e204:	f000 80b9 	beq.w	801e37a <_printf_i+0x19a>
 801e208:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e20c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801e210:	e03a      	b.n	801e288 <_printf_i+0xa8>
 801e212:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801e216:	2b15      	cmp	r3, #21
 801e218:	d8f6      	bhi.n	801e208 <_printf_i+0x28>
 801e21a:	a101      	add	r1, pc, #4	@ (adr r1, 801e220 <_printf_i+0x40>)
 801e21c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e220:	0801e279 	.word	0x0801e279
 801e224:	0801e28d 	.word	0x0801e28d
 801e228:	0801e209 	.word	0x0801e209
 801e22c:	0801e209 	.word	0x0801e209
 801e230:	0801e209 	.word	0x0801e209
 801e234:	0801e209 	.word	0x0801e209
 801e238:	0801e28d 	.word	0x0801e28d
 801e23c:	0801e209 	.word	0x0801e209
 801e240:	0801e209 	.word	0x0801e209
 801e244:	0801e209 	.word	0x0801e209
 801e248:	0801e209 	.word	0x0801e209
 801e24c:	0801e38d 	.word	0x0801e38d
 801e250:	0801e2b7 	.word	0x0801e2b7
 801e254:	0801e347 	.word	0x0801e347
 801e258:	0801e209 	.word	0x0801e209
 801e25c:	0801e209 	.word	0x0801e209
 801e260:	0801e3af 	.word	0x0801e3af
 801e264:	0801e209 	.word	0x0801e209
 801e268:	0801e2b7 	.word	0x0801e2b7
 801e26c:	0801e209 	.word	0x0801e209
 801e270:	0801e209 	.word	0x0801e209
 801e274:	0801e34f 	.word	0x0801e34f
 801e278:	6833      	ldr	r3, [r6, #0]
 801e27a:	1d1a      	adds	r2, r3, #4
 801e27c:	681b      	ldr	r3, [r3, #0]
 801e27e:	6032      	str	r2, [r6, #0]
 801e280:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e284:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801e288:	2301      	movs	r3, #1
 801e28a:	e09d      	b.n	801e3c8 <_printf_i+0x1e8>
 801e28c:	6833      	ldr	r3, [r6, #0]
 801e28e:	6820      	ldr	r0, [r4, #0]
 801e290:	1d19      	adds	r1, r3, #4
 801e292:	6031      	str	r1, [r6, #0]
 801e294:	0606      	lsls	r6, r0, #24
 801e296:	d501      	bpl.n	801e29c <_printf_i+0xbc>
 801e298:	681d      	ldr	r5, [r3, #0]
 801e29a:	e003      	b.n	801e2a4 <_printf_i+0xc4>
 801e29c:	0645      	lsls	r5, r0, #25
 801e29e:	d5fb      	bpl.n	801e298 <_printf_i+0xb8>
 801e2a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 801e2a4:	2d00      	cmp	r5, #0
 801e2a6:	da03      	bge.n	801e2b0 <_printf_i+0xd0>
 801e2a8:	232d      	movs	r3, #45	@ 0x2d
 801e2aa:	426d      	negs	r5, r5
 801e2ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e2b0:	4859      	ldr	r0, [pc, #356]	@ (801e418 <_printf_i+0x238>)
 801e2b2:	230a      	movs	r3, #10
 801e2b4:	e011      	b.n	801e2da <_printf_i+0xfa>
 801e2b6:	6821      	ldr	r1, [r4, #0]
 801e2b8:	6833      	ldr	r3, [r6, #0]
 801e2ba:	0608      	lsls	r0, r1, #24
 801e2bc:	f853 5b04 	ldr.w	r5, [r3], #4
 801e2c0:	d402      	bmi.n	801e2c8 <_printf_i+0xe8>
 801e2c2:	0649      	lsls	r1, r1, #25
 801e2c4:	bf48      	it	mi
 801e2c6:	b2ad      	uxthmi	r5, r5
 801e2c8:	2f6f      	cmp	r7, #111	@ 0x6f
 801e2ca:	4853      	ldr	r0, [pc, #332]	@ (801e418 <_printf_i+0x238>)
 801e2cc:	6033      	str	r3, [r6, #0]
 801e2ce:	bf14      	ite	ne
 801e2d0:	230a      	movne	r3, #10
 801e2d2:	2308      	moveq	r3, #8
 801e2d4:	2100      	movs	r1, #0
 801e2d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801e2da:	6866      	ldr	r6, [r4, #4]
 801e2dc:	60a6      	str	r6, [r4, #8]
 801e2de:	2e00      	cmp	r6, #0
 801e2e0:	bfa2      	ittt	ge
 801e2e2:	6821      	ldrge	r1, [r4, #0]
 801e2e4:	f021 0104 	bicge.w	r1, r1, #4
 801e2e8:	6021      	strge	r1, [r4, #0]
 801e2ea:	b90d      	cbnz	r5, 801e2f0 <_printf_i+0x110>
 801e2ec:	2e00      	cmp	r6, #0
 801e2ee:	d04b      	beq.n	801e388 <_printf_i+0x1a8>
 801e2f0:	4616      	mov	r6, r2
 801e2f2:	fbb5 f1f3 	udiv	r1, r5, r3
 801e2f6:	fb03 5711 	mls	r7, r3, r1, r5
 801e2fa:	5dc7      	ldrb	r7, [r0, r7]
 801e2fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801e300:	462f      	mov	r7, r5
 801e302:	42bb      	cmp	r3, r7
 801e304:	460d      	mov	r5, r1
 801e306:	d9f4      	bls.n	801e2f2 <_printf_i+0x112>
 801e308:	2b08      	cmp	r3, #8
 801e30a:	d10b      	bne.n	801e324 <_printf_i+0x144>
 801e30c:	6823      	ldr	r3, [r4, #0]
 801e30e:	07df      	lsls	r7, r3, #31
 801e310:	d508      	bpl.n	801e324 <_printf_i+0x144>
 801e312:	6923      	ldr	r3, [r4, #16]
 801e314:	6861      	ldr	r1, [r4, #4]
 801e316:	4299      	cmp	r1, r3
 801e318:	bfde      	ittt	le
 801e31a:	2330      	movle	r3, #48	@ 0x30
 801e31c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801e320:	f106 36ff 	addle.w	r6, r6, #4294967295
 801e324:	1b92      	subs	r2, r2, r6
 801e326:	6122      	str	r2, [r4, #16]
 801e328:	f8cd a000 	str.w	sl, [sp]
 801e32c:	464b      	mov	r3, r9
 801e32e:	aa03      	add	r2, sp, #12
 801e330:	4621      	mov	r1, r4
 801e332:	4640      	mov	r0, r8
 801e334:	f7ff fee6 	bl	801e104 <_printf_common>
 801e338:	3001      	adds	r0, #1
 801e33a:	d14a      	bne.n	801e3d2 <_printf_i+0x1f2>
 801e33c:	f04f 30ff 	mov.w	r0, #4294967295
 801e340:	b004      	add	sp, #16
 801e342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e346:	6823      	ldr	r3, [r4, #0]
 801e348:	f043 0320 	orr.w	r3, r3, #32
 801e34c:	6023      	str	r3, [r4, #0]
 801e34e:	4833      	ldr	r0, [pc, #204]	@ (801e41c <_printf_i+0x23c>)
 801e350:	2778      	movs	r7, #120	@ 0x78
 801e352:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801e356:	6823      	ldr	r3, [r4, #0]
 801e358:	6831      	ldr	r1, [r6, #0]
 801e35a:	061f      	lsls	r7, r3, #24
 801e35c:	f851 5b04 	ldr.w	r5, [r1], #4
 801e360:	d402      	bmi.n	801e368 <_printf_i+0x188>
 801e362:	065f      	lsls	r7, r3, #25
 801e364:	bf48      	it	mi
 801e366:	b2ad      	uxthmi	r5, r5
 801e368:	6031      	str	r1, [r6, #0]
 801e36a:	07d9      	lsls	r1, r3, #31
 801e36c:	bf44      	itt	mi
 801e36e:	f043 0320 	orrmi.w	r3, r3, #32
 801e372:	6023      	strmi	r3, [r4, #0]
 801e374:	b11d      	cbz	r5, 801e37e <_printf_i+0x19e>
 801e376:	2310      	movs	r3, #16
 801e378:	e7ac      	b.n	801e2d4 <_printf_i+0xf4>
 801e37a:	4827      	ldr	r0, [pc, #156]	@ (801e418 <_printf_i+0x238>)
 801e37c:	e7e9      	b.n	801e352 <_printf_i+0x172>
 801e37e:	6823      	ldr	r3, [r4, #0]
 801e380:	f023 0320 	bic.w	r3, r3, #32
 801e384:	6023      	str	r3, [r4, #0]
 801e386:	e7f6      	b.n	801e376 <_printf_i+0x196>
 801e388:	4616      	mov	r6, r2
 801e38a:	e7bd      	b.n	801e308 <_printf_i+0x128>
 801e38c:	6833      	ldr	r3, [r6, #0]
 801e38e:	6825      	ldr	r5, [r4, #0]
 801e390:	6961      	ldr	r1, [r4, #20]
 801e392:	1d18      	adds	r0, r3, #4
 801e394:	6030      	str	r0, [r6, #0]
 801e396:	062e      	lsls	r6, r5, #24
 801e398:	681b      	ldr	r3, [r3, #0]
 801e39a:	d501      	bpl.n	801e3a0 <_printf_i+0x1c0>
 801e39c:	6019      	str	r1, [r3, #0]
 801e39e:	e002      	b.n	801e3a6 <_printf_i+0x1c6>
 801e3a0:	0668      	lsls	r0, r5, #25
 801e3a2:	d5fb      	bpl.n	801e39c <_printf_i+0x1bc>
 801e3a4:	8019      	strh	r1, [r3, #0]
 801e3a6:	2300      	movs	r3, #0
 801e3a8:	6123      	str	r3, [r4, #16]
 801e3aa:	4616      	mov	r6, r2
 801e3ac:	e7bc      	b.n	801e328 <_printf_i+0x148>
 801e3ae:	6833      	ldr	r3, [r6, #0]
 801e3b0:	1d1a      	adds	r2, r3, #4
 801e3b2:	6032      	str	r2, [r6, #0]
 801e3b4:	681e      	ldr	r6, [r3, #0]
 801e3b6:	6862      	ldr	r2, [r4, #4]
 801e3b8:	2100      	movs	r1, #0
 801e3ba:	4630      	mov	r0, r6
 801e3bc:	f7e1 ff20 	bl	8000200 <memchr>
 801e3c0:	b108      	cbz	r0, 801e3c6 <_printf_i+0x1e6>
 801e3c2:	1b80      	subs	r0, r0, r6
 801e3c4:	6060      	str	r0, [r4, #4]
 801e3c6:	6863      	ldr	r3, [r4, #4]
 801e3c8:	6123      	str	r3, [r4, #16]
 801e3ca:	2300      	movs	r3, #0
 801e3cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e3d0:	e7aa      	b.n	801e328 <_printf_i+0x148>
 801e3d2:	6923      	ldr	r3, [r4, #16]
 801e3d4:	4632      	mov	r2, r6
 801e3d6:	4649      	mov	r1, r9
 801e3d8:	4640      	mov	r0, r8
 801e3da:	47d0      	blx	sl
 801e3dc:	3001      	adds	r0, #1
 801e3de:	d0ad      	beq.n	801e33c <_printf_i+0x15c>
 801e3e0:	6823      	ldr	r3, [r4, #0]
 801e3e2:	079b      	lsls	r3, r3, #30
 801e3e4:	d413      	bmi.n	801e40e <_printf_i+0x22e>
 801e3e6:	68e0      	ldr	r0, [r4, #12]
 801e3e8:	9b03      	ldr	r3, [sp, #12]
 801e3ea:	4298      	cmp	r0, r3
 801e3ec:	bfb8      	it	lt
 801e3ee:	4618      	movlt	r0, r3
 801e3f0:	e7a6      	b.n	801e340 <_printf_i+0x160>
 801e3f2:	2301      	movs	r3, #1
 801e3f4:	4632      	mov	r2, r6
 801e3f6:	4649      	mov	r1, r9
 801e3f8:	4640      	mov	r0, r8
 801e3fa:	47d0      	blx	sl
 801e3fc:	3001      	adds	r0, #1
 801e3fe:	d09d      	beq.n	801e33c <_printf_i+0x15c>
 801e400:	3501      	adds	r5, #1
 801e402:	68e3      	ldr	r3, [r4, #12]
 801e404:	9903      	ldr	r1, [sp, #12]
 801e406:	1a5b      	subs	r3, r3, r1
 801e408:	42ab      	cmp	r3, r5
 801e40a:	dcf2      	bgt.n	801e3f2 <_printf_i+0x212>
 801e40c:	e7eb      	b.n	801e3e6 <_printf_i+0x206>
 801e40e:	2500      	movs	r5, #0
 801e410:	f104 0619 	add.w	r6, r4, #25
 801e414:	e7f5      	b.n	801e402 <_printf_i+0x222>
 801e416:	bf00      	nop
 801e418:	080256c3 	.word	0x080256c3
 801e41c:	080256d4 	.word	0x080256d4

0801e420 <_scanf_float>:
 801e420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e424:	b087      	sub	sp, #28
 801e426:	4617      	mov	r7, r2
 801e428:	9303      	str	r3, [sp, #12]
 801e42a:	688b      	ldr	r3, [r1, #8]
 801e42c:	1e5a      	subs	r2, r3, #1
 801e42e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801e432:	bf81      	itttt	hi
 801e434:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801e438:	eb03 0b05 	addhi.w	fp, r3, r5
 801e43c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801e440:	608b      	strhi	r3, [r1, #8]
 801e442:	680b      	ldr	r3, [r1, #0]
 801e444:	460a      	mov	r2, r1
 801e446:	f04f 0500 	mov.w	r5, #0
 801e44a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801e44e:	f842 3b1c 	str.w	r3, [r2], #28
 801e452:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801e456:	4680      	mov	r8, r0
 801e458:	460c      	mov	r4, r1
 801e45a:	bf98      	it	ls
 801e45c:	f04f 0b00 	movls.w	fp, #0
 801e460:	9201      	str	r2, [sp, #4]
 801e462:	4616      	mov	r6, r2
 801e464:	46aa      	mov	sl, r5
 801e466:	46a9      	mov	r9, r5
 801e468:	9502      	str	r5, [sp, #8]
 801e46a:	68a2      	ldr	r2, [r4, #8]
 801e46c:	b152      	cbz	r2, 801e484 <_scanf_float+0x64>
 801e46e:	683b      	ldr	r3, [r7, #0]
 801e470:	781b      	ldrb	r3, [r3, #0]
 801e472:	2b4e      	cmp	r3, #78	@ 0x4e
 801e474:	d864      	bhi.n	801e540 <_scanf_float+0x120>
 801e476:	2b40      	cmp	r3, #64	@ 0x40
 801e478:	d83c      	bhi.n	801e4f4 <_scanf_float+0xd4>
 801e47a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801e47e:	b2c8      	uxtb	r0, r1
 801e480:	280e      	cmp	r0, #14
 801e482:	d93a      	bls.n	801e4fa <_scanf_float+0xda>
 801e484:	f1b9 0f00 	cmp.w	r9, #0
 801e488:	d003      	beq.n	801e492 <_scanf_float+0x72>
 801e48a:	6823      	ldr	r3, [r4, #0]
 801e48c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801e490:	6023      	str	r3, [r4, #0]
 801e492:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e496:	f1ba 0f01 	cmp.w	sl, #1
 801e49a:	f200 8117 	bhi.w	801e6cc <_scanf_float+0x2ac>
 801e49e:	9b01      	ldr	r3, [sp, #4]
 801e4a0:	429e      	cmp	r6, r3
 801e4a2:	f200 8108 	bhi.w	801e6b6 <_scanf_float+0x296>
 801e4a6:	2001      	movs	r0, #1
 801e4a8:	b007      	add	sp, #28
 801e4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4ae:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801e4b2:	2a0d      	cmp	r2, #13
 801e4b4:	d8e6      	bhi.n	801e484 <_scanf_float+0x64>
 801e4b6:	a101      	add	r1, pc, #4	@ (adr r1, 801e4bc <_scanf_float+0x9c>)
 801e4b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801e4bc:	0801e603 	.word	0x0801e603
 801e4c0:	0801e485 	.word	0x0801e485
 801e4c4:	0801e485 	.word	0x0801e485
 801e4c8:	0801e485 	.word	0x0801e485
 801e4cc:	0801e663 	.word	0x0801e663
 801e4d0:	0801e63b 	.word	0x0801e63b
 801e4d4:	0801e485 	.word	0x0801e485
 801e4d8:	0801e485 	.word	0x0801e485
 801e4dc:	0801e611 	.word	0x0801e611
 801e4e0:	0801e485 	.word	0x0801e485
 801e4e4:	0801e485 	.word	0x0801e485
 801e4e8:	0801e485 	.word	0x0801e485
 801e4ec:	0801e485 	.word	0x0801e485
 801e4f0:	0801e5c9 	.word	0x0801e5c9
 801e4f4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801e4f8:	e7db      	b.n	801e4b2 <_scanf_float+0x92>
 801e4fa:	290e      	cmp	r1, #14
 801e4fc:	d8c2      	bhi.n	801e484 <_scanf_float+0x64>
 801e4fe:	a001      	add	r0, pc, #4	@ (adr r0, 801e504 <_scanf_float+0xe4>)
 801e500:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801e504:	0801e5b9 	.word	0x0801e5b9
 801e508:	0801e485 	.word	0x0801e485
 801e50c:	0801e5b9 	.word	0x0801e5b9
 801e510:	0801e64f 	.word	0x0801e64f
 801e514:	0801e485 	.word	0x0801e485
 801e518:	0801e561 	.word	0x0801e561
 801e51c:	0801e59f 	.word	0x0801e59f
 801e520:	0801e59f 	.word	0x0801e59f
 801e524:	0801e59f 	.word	0x0801e59f
 801e528:	0801e59f 	.word	0x0801e59f
 801e52c:	0801e59f 	.word	0x0801e59f
 801e530:	0801e59f 	.word	0x0801e59f
 801e534:	0801e59f 	.word	0x0801e59f
 801e538:	0801e59f 	.word	0x0801e59f
 801e53c:	0801e59f 	.word	0x0801e59f
 801e540:	2b6e      	cmp	r3, #110	@ 0x6e
 801e542:	d809      	bhi.n	801e558 <_scanf_float+0x138>
 801e544:	2b60      	cmp	r3, #96	@ 0x60
 801e546:	d8b2      	bhi.n	801e4ae <_scanf_float+0x8e>
 801e548:	2b54      	cmp	r3, #84	@ 0x54
 801e54a:	d07b      	beq.n	801e644 <_scanf_float+0x224>
 801e54c:	2b59      	cmp	r3, #89	@ 0x59
 801e54e:	d199      	bne.n	801e484 <_scanf_float+0x64>
 801e550:	2d07      	cmp	r5, #7
 801e552:	d197      	bne.n	801e484 <_scanf_float+0x64>
 801e554:	2508      	movs	r5, #8
 801e556:	e02c      	b.n	801e5b2 <_scanf_float+0x192>
 801e558:	2b74      	cmp	r3, #116	@ 0x74
 801e55a:	d073      	beq.n	801e644 <_scanf_float+0x224>
 801e55c:	2b79      	cmp	r3, #121	@ 0x79
 801e55e:	e7f6      	b.n	801e54e <_scanf_float+0x12e>
 801e560:	6821      	ldr	r1, [r4, #0]
 801e562:	05c8      	lsls	r0, r1, #23
 801e564:	d51b      	bpl.n	801e59e <_scanf_float+0x17e>
 801e566:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801e56a:	6021      	str	r1, [r4, #0]
 801e56c:	f109 0901 	add.w	r9, r9, #1
 801e570:	f1bb 0f00 	cmp.w	fp, #0
 801e574:	d003      	beq.n	801e57e <_scanf_float+0x15e>
 801e576:	3201      	adds	r2, #1
 801e578:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e57c:	60a2      	str	r2, [r4, #8]
 801e57e:	68a3      	ldr	r3, [r4, #8]
 801e580:	3b01      	subs	r3, #1
 801e582:	60a3      	str	r3, [r4, #8]
 801e584:	6923      	ldr	r3, [r4, #16]
 801e586:	3301      	adds	r3, #1
 801e588:	6123      	str	r3, [r4, #16]
 801e58a:	687b      	ldr	r3, [r7, #4]
 801e58c:	3b01      	subs	r3, #1
 801e58e:	2b00      	cmp	r3, #0
 801e590:	607b      	str	r3, [r7, #4]
 801e592:	f340 8087 	ble.w	801e6a4 <_scanf_float+0x284>
 801e596:	683b      	ldr	r3, [r7, #0]
 801e598:	3301      	adds	r3, #1
 801e59a:	603b      	str	r3, [r7, #0]
 801e59c:	e765      	b.n	801e46a <_scanf_float+0x4a>
 801e59e:	eb1a 0105 	adds.w	r1, sl, r5
 801e5a2:	f47f af6f 	bne.w	801e484 <_scanf_float+0x64>
 801e5a6:	6822      	ldr	r2, [r4, #0]
 801e5a8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801e5ac:	6022      	str	r2, [r4, #0]
 801e5ae:	460d      	mov	r5, r1
 801e5b0:	468a      	mov	sl, r1
 801e5b2:	f806 3b01 	strb.w	r3, [r6], #1
 801e5b6:	e7e2      	b.n	801e57e <_scanf_float+0x15e>
 801e5b8:	6822      	ldr	r2, [r4, #0]
 801e5ba:	0610      	lsls	r0, r2, #24
 801e5bc:	f57f af62 	bpl.w	801e484 <_scanf_float+0x64>
 801e5c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801e5c4:	6022      	str	r2, [r4, #0]
 801e5c6:	e7f4      	b.n	801e5b2 <_scanf_float+0x192>
 801e5c8:	f1ba 0f00 	cmp.w	sl, #0
 801e5cc:	d10e      	bne.n	801e5ec <_scanf_float+0x1cc>
 801e5ce:	f1b9 0f00 	cmp.w	r9, #0
 801e5d2:	d10e      	bne.n	801e5f2 <_scanf_float+0x1d2>
 801e5d4:	6822      	ldr	r2, [r4, #0]
 801e5d6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801e5da:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801e5de:	d108      	bne.n	801e5f2 <_scanf_float+0x1d2>
 801e5e0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801e5e4:	6022      	str	r2, [r4, #0]
 801e5e6:	f04f 0a01 	mov.w	sl, #1
 801e5ea:	e7e2      	b.n	801e5b2 <_scanf_float+0x192>
 801e5ec:	f1ba 0f02 	cmp.w	sl, #2
 801e5f0:	d055      	beq.n	801e69e <_scanf_float+0x27e>
 801e5f2:	2d01      	cmp	r5, #1
 801e5f4:	d002      	beq.n	801e5fc <_scanf_float+0x1dc>
 801e5f6:	2d04      	cmp	r5, #4
 801e5f8:	f47f af44 	bne.w	801e484 <_scanf_float+0x64>
 801e5fc:	3501      	adds	r5, #1
 801e5fe:	b2ed      	uxtb	r5, r5
 801e600:	e7d7      	b.n	801e5b2 <_scanf_float+0x192>
 801e602:	f1ba 0f01 	cmp.w	sl, #1
 801e606:	f47f af3d 	bne.w	801e484 <_scanf_float+0x64>
 801e60a:	f04f 0a02 	mov.w	sl, #2
 801e60e:	e7d0      	b.n	801e5b2 <_scanf_float+0x192>
 801e610:	b97d      	cbnz	r5, 801e632 <_scanf_float+0x212>
 801e612:	f1b9 0f00 	cmp.w	r9, #0
 801e616:	f47f af38 	bne.w	801e48a <_scanf_float+0x6a>
 801e61a:	6822      	ldr	r2, [r4, #0]
 801e61c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801e620:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801e624:	f040 8108 	bne.w	801e838 <_scanf_float+0x418>
 801e628:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801e62c:	6022      	str	r2, [r4, #0]
 801e62e:	2501      	movs	r5, #1
 801e630:	e7bf      	b.n	801e5b2 <_scanf_float+0x192>
 801e632:	2d03      	cmp	r5, #3
 801e634:	d0e2      	beq.n	801e5fc <_scanf_float+0x1dc>
 801e636:	2d05      	cmp	r5, #5
 801e638:	e7de      	b.n	801e5f8 <_scanf_float+0x1d8>
 801e63a:	2d02      	cmp	r5, #2
 801e63c:	f47f af22 	bne.w	801e484 <_scanf_float+0x64>
 801e640:	2503      	movs	r5, #3
 801e642:	e7b6      	b.n	801e5b2 <_scanf_float+0x192>
 801e644:	2d06      	cmp	r5, #6
 801e646:	f47f af1d 	bne.w	801e484 <_scanf_float+0x64>
 801e64a:	2507      	movs	r5, #7
 801e64c:	e7b1      	b.n	801e5b2 <_scanf_float+0x192>
 801e64e:	6822      	ldr	r2, [r4, #0]
 801e650:	0591      	lsls	r1, r2, #22
 801e652:	f57f af17 	bpl.w	801e484 <_scanf_float+0x64>
 801e656:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801e65a:	6022      	str	r2, [r4, #0]
 801e65c:	f8cd 9008 	str.w	r9, [sp, #8]
 801e660:	e7a7      	b.n	801e5b2 <_scanf_float+0x192>
 801e662:	6822      	ldr	r2, [r4, #0]
 801e664:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801e668:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801e66c:	d006      	beq.n	801e67c <_scanf_float+0x25c>
 801e66e:	0550      	lsls	r0, r2, #21
 801e670:	f57f af08 	bpl.w	801e484 <_scanf_float+0x64>
 801e674:	f1b9 0f00 	cmp.w	r9, #0
 801e678:	f000 80de 	beq.w	801e838 <_scanf_float+0x418>
 801e67c:	0591      	lsls	r1, r2, #22
 801e67e:	bf58      	it	pl
 801e680:	9902      	ldrpl	r1, [sp, #8]
 801e682:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801e686:	bf58      	it	pl
 801e688:	eba9 0101 	subpl.w	r1, r9, r1
 801e68c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801e690:	bf58      	it	pl
 801e692:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801e696:	6022      	str	r2, [r4, #0]
 801e698:	f04f 0900 	mov.w	r9, #0
 801e69c:	e789      	b.n	801e5b2 <_scanf_float+0x192>
 801e69e:	f04f 0a03 	mov.w	sl, #3
 801e6a2:	e786      	b.n	801e5b2 <_scanf_float+0x192>
 801e6a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801e6a8:	4639      	mov	r1, r7
 801e6aa:	4640      	mov	r0, r8
 801e6ac:	4798      	blx	r3
 801e6ae:	2800      	cmp	r0, #0
 801e6b0:	f43f aedb 	beq.w	801e46a <_scanf_float+0x4a>
 801e6b4:	e6e6      	b.n	801e484 <_scanf_float+0x64>
 801e6b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e6ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e6be:	463a      	mov	r2, r7
 801e6c0:	4640      	mov	r0, r8
 801e6c2:	4798      	blx	r3
 801e6c4:	6923      	ldr	r3, [r4, #16]
 801e6c6:	3b01      	subs	r3, #1
 801e6c8:	6123      	str	r3, [r4, #16]
 801e6ca:	e6e8      	b.n	801e49e <_scanf_float+0x7e>
 801e6cc:	1e6b      	subs	r3, r5, #1
 801e6ce:	2b06      	cmp	r3, #6
 801e6d0:	d824      	bhi.n	801e71c <_scanf_float+0x2fc>
 801e6d2:	2d02      	cmp	r5, #2
 801e6d4:	d836      	bhi.n	801e744 <_scanf_float+0x324>
 801e6d6:	9b01      	ldr	r3, [sp, #4]
 801e6d8:	429e      	cmp	r6, r3
 801e6da:	f67f aee4 	bls.w	801e4a6 <_scanf_float+0x86>
 801e6de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e6e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e6e6:	463a      	mov	r2, r7
 801e6e8:	4640      	mov	r0, r8
 801e6ea:	4798      	blx	r3
 801e6ec:	6923      	ldr	r3, [r4, #16]
 801e6ee:	3b01      	subs	r3, #1
 801e6f0:	6123      	str	r3, [r4, #16]
 801e6f2:	e7f0      	b.n	801e6d6 <_scanf_float+0x2b6>
 801e6f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e6f8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801e6fc:	463a      	mov	r2, r7
 801e6fe:	4640      	mov	r0, r8
 801e700:	4798      	blx	r3
 801e702:	6923      	ldr	r3, [r4, #16]
 801e704:	3b01      	subs	r3, #1
 801e706:	6123      	str	r3, [r4, #16]
 801e708:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e70c:	fa5f fa8a 	uxtb.w	sl, sl
 801e710:	f1ba 0f02 	cmp.w	sl, #2
 801e714:	d1ee      	bne.n	801e6f4 <_scanf_float+0x2d4>
 801e716:	3d03      	subs	r5, #3
 801e718:	b2ed      	uxtb	r5, r5
 801e71a:	1b76      	subs	r6, r6, r5
 801e71c:	6823      	ldr	r3, [r4, #0]
 801e71e:	05da      	lsls	r2, r3, #23
 801e720:	d530      	bpl.n	801e784 <_scanf_float+0x364>
 801e722:	055b      	lsls	r3, r3, #21
 801e724:	d511      	bpl.n	801e74a <_scanf_float+0x32a>
 801e726:	9b01      	ldr	r3, [sp, #4]
 801e728:	429e      	cmp	r6, r3
 801e72a:	f67f aebc 	bls.w	801e4a6 <_scanf_float+0x86>
 801e72e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e732:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e736:	463a      	mov	r2, r7
 801e738:	4640      	mov	r0, r8
 801e73a:	4798      	blx	r3
 801e73c:	6923      	ldr	r3, [r4, #16]
 801e73e:	3b01      	subs	r3, #1
 801e740:	6123      	str	r3, [r4, #16]
 801e742:	e7f0      	b.n	801e726 <_scanf_float+0x306>
 801e744:	46aa      	mov	sl, r5
 801e746:	46b3      	mov	fp, r6
 801e748:	e7de      	b.n	801e708 <_scanf_float+0x2e8>
 801e74a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801e74e:	6923      	ldr	r3, [r4, #16]
 801e750:	2965      	cmp	r1, #101	@ 0x65
 801e752:	f103 33ff 	add.w	r3, r3, #4294967295
 801e756:	f106 35ff 	add.w	r5, r6, #4294967295
 801e75a:	6123      	str	r3, [r4, #16]
 801e75c:	d00c      	beq.n	801e778 <_scanf_float+0x358>
 801e75e:	2945      	cmp	r1, #69	@ 0x45
 801e760:	d00a      	beq.n	801e778 <_scanf_float+0x358>
 801e762:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e766:	463a      	mov	r2, r7
 801e768:	4640      	mov	r0, r8
 801e76a:	4798      	blx	r3
 801e76c:	6923      	ldr	r3, [r4, #16]
 801e76e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801e772:	3b01      	subs	r3, #1
 801e774:	1eb5      	subs	r5, r6, #2
 801e776:	6123      	str	r3, [r4, #16]
 801e778:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e77c:	463a      	mov	r2, r7
 801e77e:	4640      	mov	r0, r8
 801e780:	4798      	blx	r3
 801e782:	462e      	mov	r6, r5
 801e784:	6822      	ldr	r2, [r4, #0]
 801e786:	f012 0210 	ands.w	r2, r2, #16
 801e78a:	d001      	beq.n	801e790 <_scanf_float+0x370>
 801e78c:	2000      	movs	r0, #0
 801e78e:	e68b      	b.n	801e4a8 <_scanf_float+0x88>
 801e790:	7032      	strb	r2, [r6, #0]
 801e792:	6823      	ldr	r3, [r4, #0]
 801e794:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801e798:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e79c:	d11c      	bne.n	801e7d8 <_scanf_float+0x3b8>
 801e79e:	9b02      	ldr	r3, [sp, #8]
 801e7a0:	454b      	cmp	r3, r9
 801e7a2:	eba3 0209 	sub.w	r2, r3, r9
 801e7a6:	d123      	bne.n	801e7f0 <_scanf_float+0x3d0>
 801e7a8:	9901      	ldr	r1, [sp, #4]
 801e7aa:	2200      	movs	r2, #0
 801e7ac:	4640      	mov	r0, r8
 801e7ae:	f002 fdb7 	bl	8021320 <_strtod_r>
 801e7b2:	9b03      	ldr	r3, [sp, #12]
 801e7b4:	6821      	ldr	r1, [r4, #0]
 801e7b6:	681b      	ldr	r3, [r3, #0]
 801e7b8:	f011 0f02 	tst.w	r1, #2
 801e7bc:	ec57 6b10 	vmov	r6, r7, d0
 801e7c0:	f103 0204 	add.w	r2, r3, #4
 801e7c4:	d01f      	beq.n	801e806 <_scanf_float+0x3e6>
 801e7c6:	9903      	ldr	r1, [sp, #12]
 801e7c8:	600a      	str	r2, [r1, #0]
 801e7ca:	681b      	ldr	r3, [r3, #0]
 801e7cc:	e9c3 6700 	strd	r6, r7, [r3]
 801e7d0:	68e3      	ldr	r3, [r4, #12]
 801e7d2:	3301      	adds	r3, #1
 801e7d4:	60e3      	str	r3, [r4, #12]
 801e7d6:	e7d9      	b.n	801e78c <_scanf_float+0x36c>
 801e7d8:	9b04      	ldr	r3, [sp, #16]
 801e7da:	2b00      	cmp	r3, #0
 801e7dc:	d0e4      	beq.n	801e7a8 <_scanf_float+0x388>
 801e7de:	9905      	ldr	r1, [sp, #20]
 801e7e0:	230a      	movs	r3, #10
 801e7e2:	3101      	adds	r1, #1
 801e7e4:	4640      	mov	r0, r8
 801e7e6:	f7ff f9b7 	bl	801db58 <_strtol_r>
 801e7ea:	9b04      	ldr	r3, [sp, #16]
 801e7ec:	9e05      	ldr	r6, [sp, #20]
 801e7ee:	1ac2      	subs	r2, r0, r3
 801e7f0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801e7f4:	429e      	cmp	r6, r3
 801e7f6:	bf28      	it	cs
 801e7f8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801e7fc:	4910      	ldr	r1, [pc, #64]	@ (801e840 <_scanf_float+0x420>)
 801e7fe:	4630      	mov	r0, r6
 801e800:	f000 f9ae 	bl	801eb60 <siprintf>
 801e804:	e7d0      	b.n	801e7a8 <_scanf_float+0x388>
 801e806:	f011 0f04 	tst.w	r1, #4
 801e80a:	9903      	ldr	r1, [sp, #12]
 801e80c:	600a      	str	r2, [r1, #0]
 801e80e:	d1dc      	bne.n	801e7ca <_scanf_float+0x3aa>
 801e810:	681d      	ldr	r5, [r3, #0]
 801e812:	4632      	mov	r2, r6
 801e814:	463b      	mov	r3, r7
 801e816:	4630      	mov	r0, r6
 801e818:	4639      	mov	r1, r7
 801e81a:	f7e2 f99f 	bl	8000b5c <__aeabi_dcmpun>
 801e81e:	b128      	cbz	r0, 801e82c <_scanf_float+0x40c>
 801e820:	4808      	ldr	r0, [pc, #32]	@ (801e844 <_scanf_float+0x424>)
 801e822:	f000 fc0d 	bl	801f040 <nanf>
 801e826:	ed85 0a00 	vstr	s0, [r5]
 801e82a:	e7d1      	b.n	801e7d0 <_scanf_float+0x3b0>
 801e82c:	4630      	mov	r0, r6
 801e82e:	4639      	mov	r1, r7
 801e830:	f7e2 f9f2 	bl	8000c18 <__aeabi_d2f>
 801e834:	6028      	str	r0, [r5, #0]
 801e836:	e7cb      	b.n	801e7d0 <_scanf_float+0x3b0>
 801e838:	f04f 0900 	mov.w	r9, #0
 801e83c:	e629      	b.n	801e492 <_scanf_float+0x72>
 801e83e:	bf00      	nop
 801e840:	080256e5 	.word	0x080256e5
 801e844:	08025796 	.word	0x08025796

0801e848 <std>:
 801e848:	2300      	movs	r3, #0
 801e84a:	b510      	push	{r4, lr}
 801e84c:	4604      	mov	r4, r0
 801e84e:	e9c0 3300 	strd	r3, r3, [r0]
 801e852:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e856:	6083      	str	r3, [r0, #8]
 801e858:	8181      	strh	r1, [r0, #12]
 801e85a:	6643      	str	r3, [r0, #100]	@ 0x64
 801e85c:	81c2      	strh	r2, [r0, #14]
 801e85e:	6183      	str	r3, [r0, #24]
 801e860:	4619      	mov	r1, r3
 801e862:	2208      	movs	r2, #8
 801e864:	305c      	adds	r0, #92	@ 0x5c
 801e866:	f000 fac5 	bl	801edf4 <memset>
 801e86a:	4b0d      	ldr	r3, [pc, #52]	@ (801e8a0 <std+0x58>)
 801e86c:	6263      	str	r3, [r4, #36]	@ 0x24
 801e86e:	4b0d      	ldr	r3, [pc, #52]	@ (801e8a4 <std+0x5c>)
 801e870:	62a3      	str	r3, [r4, #40]	@ 0x28
 801e872:	4b0d      	ldr	r3, [pc, #52]	@ (801e8a8 <std+0x60>)
 801e874:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801e876:	4b0d      	ldr	r3, [pc, #52]	@ (801e8ac <std+0x64>)
 801e878:	6323      	str	r3, [r4, #48]	@ 0x30
 801e87a:	4b0d      	ldr	r3, [pc, #52]	@ (801e8b0 <std+0x68>)
 801e87c:	6224      	str	r4, [r4, #32]
 801e87e:	429c      	cmp	r4, r3
 801e880:	d006      	beq.n	801e890 <std+0x48>
 801e882:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801e886:	4294      	cmp	r4, r2
 801e888:	d002      	beq.n	801e890 <std+0x48>
 801e88a:	33d0      	adds	r3, #208	@ 0xd0
 801e88c:	429c      	cmp	r4, r3
 801e88e:	d105      	bne.n	801e89c <std+0x54>
 801e890:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801e894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e898:	f000 bbb8 	b.w	801f00c <__retarget_lock_init_recursive>
 801e89c:	bd10      	pop	{r4, pc}
 801e89e:	bf00      	nop
 801e8a0:	0801eba1 	.word	0x0801eba1
 801e8a4:	0801ebc3 	.word	0x0801ebc3
 801e8a8:	0801ebfb 	.word	0x0801ebfb
 801e8ac:	0801ec1f 	.word	0x0801ec1f
 801e8b0:	20003670 	.word	0x20003670

0801e8b4 <stdio_exit_handler>:
 801e8b4:	4a02      	ldr	r2, [pc, #8]	@ (801e8c0 <stdio_exit_handler+0xc>)
 801e8b6:	4903      	ldr	r1, [pc, #12]	@ (801e8c4 <stdio_exit_handler+0x10>)
 801e8b8:	4803      	ldr	r0, [pc, #12]	@ (801e8c8 <stdio_exit_handler+0x14>)
 801e8ba:	f000 b869 	b.w	801e990 <_fwalk_sglue>
 801e8be:	bf00      	nop
 801e8c0:	2000013c 	.word	0x2000013c
 801e8c4:	08021969 	.word	0x08021969
 801e8c8:	2000014c 	.word	0x2000014c

0801e8cc <cleanup_stdio>:
 801e8cc:	6841      	ldr	r1, [r0, #4]
 801e8ce:	4b0c      	ldr	r3, [pc, #48]	@ (801e900 <cleanup_stdio+0x34>)
 801e8d0:	4299      	cmp	r1, r3
 801e8d2:	b510      	push	{r4, lr}
 801e8d4:	4604      	mov	r4, r0
 801e8d6:	d001      	beq.n	801e8dc <cleanup_stdio+0x10>
 801e8d8:	f003 f846 	bl	8021968 <_fflush_r>
 801e8dc:	68a1      	ldr	r1, [r4, #8]
 801e8de:	4b09      	ldr	r3, [pc, #36]	@ (801e904 <cleanup_stdio+0x38>)
 801e8e0:	4299      	cmp	r1, r3
 801e8e2:	d002      	beq.n	801e8ea <cleanup_stdio+0x1e>
 801e8e4:	4620      	mov	r0, r4
 801e8e6:	f003 f83f 	bl	8021968 <_fflush_r>
 801e8ea:	68e1      	ldr	r1, [r4, #12]
 801e8ec:	4b06      	ldr	r3, [pc, #24]	@ (801e908 <cleanup_stdio+0x3c>)
 801e8ee:	4299      	cmp	r1, r3
 801e8f0:	d004      	beq.n	801e8fc <cleanup_stdio+0x30>
 801e8f2:	4620      	mov	r0, r4
 801e8f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e8f8:	f003 b836 	b.w	8021968 <_fflush_r>
 801e8fc:	bd10      	pop	{r4, pc}
 801e8fe:	bf00      	nop
 801e900:	20003670 	.word	0x20003670
 801e904:	200036d8 	.word	0x200036d8
 801e908:	20003740 	.word	0x20003740

0801e90c <global_stdio_init.part.0>:
 801e90c:	b510      	push	{r4, lr}
 801e90e:	4b0b      	ldr	r3, [pc, #44]	@ (801e93c <global_stdio_init.part.0+0x30>)
 801e910:	4c0b      	ldr	r4, [pc, #44]	@ (801e940 <global_stdio_init.part.0+0x34>)
 801e912:	4a0c      	ldr	r2, [pc, #48]	@ (801e944 <global_stdio_init.part.0+0x38>)
 801e914:	601a      	str	r2, [r3, #0]
 801e916:	4620      	mov	r0, r4
 801e918:	2200      	movs	r2, #0
 801e91a:	2104      	movs	r1, #4
 801e91c:	f7ff ff94 	bl	801e848 <std>
 801e920:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801e924:	2201      	movs	r2, #1
 801e926:	2109      	movs	r1, #9
 801e928:	f7ff ff8e 	bl	801e848 <std>
 801e92c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801e930:	2202      	movs	r2, #2
 801e932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e936:	2112      	movs	r1, #18
 801e938:	f7ff bf86 	b.w	801e848 <std>
 801e93c:	200037a8 	.word	0x200037a8
 801e940:	20003670 	.word	0x20003670
 801e944:	0801e8b5 	.word	0x0801e8b5

0801e948 <__sfp_lock_acquire>:
 801e948:	4801      	ldr	r0, [pc, #4]	@ (801e950 <__sfp_lock_acquire+0x8>)
 801e94a:	f000 bb60 	b.w	801f00e <__retarget_lock_acquire_recursive>
 801e94e:	bf00      	nop
 801e950:	200037b1 	.word	0x200037b1

0801e954 <__sfp_lock_release>:
 801e954:	4801      	ldr	r0, [pc, #4]	@ (801e95c <__sfp_lock_release+0x8>)
 801e956:	f000 bb5b 	b.w	801f010 <__retarget_lock_release_recursive>
 801e95a:	bf00      	nop
 801e95c:	200037b1 	.word	0x200037b1

0801e960 <__sinit>:
 801e960:	b510      	push	{r4, lr}
 801e962:	4604      	mov	r4, r0
 801e964:	f7ff fff0 	bl	801e948 <__sfp_lock_acquire>
 801e968:	6a23      	ldr	r3, [r4, #32]
 801e96a:	b11b      	cbz	r3, 801e974 <__sinit+0x14>
 801e96c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e970:	f7ff bff0 	b.w	801e954 <__sfp_lock_release>
 801e974:	4b04      	ldr	r3, [pc, #16]	@ (801e988 <__sinit+0x28>)
 801e976:	6223      	str	r3, [r4, #32]
 801e978:	4b04      	ldr	r3, [pc, #16]	@ (801e98c <__sinit+0x2c>)
 801e97a:	681b      	ldr	r3, [r3, #0]
 801e97c:	2b00      	cmp	r3, #0
 801e97e:	d1f5      	bne.n	801e96c <__sinit+0xc>
 801e980:	f7ff ffc4 	bl	801e90c <global_stdio_init.part.0>
 801e984:	e7f2      	b.n	801e96c <__sinit+0xc>
 801e986:	bf00      	nop
 801e988:	0801e8cd 	.word	0x0801e8cd
 801e98c:	200037a8 	.word	0x200037a8

0801e990 <_fwalk_sglue>:
 801e990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e994:	4607      	mov	r7, r0
 801e996:	4688      	mov	r8, r1
 801e998:	4614      	mov	r4, r2
 801e99a:	2600      	movs	r6, #0
 801e99c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e9a0:	f1b9 0901 	subs.w	r9, r9, #1
 801e9a4:	d505      	bpl.n	801e9b2 <_fwalk_sglue+0x22>
 801e9a6:	6824      	ldr	r4, [r4, #0]
 801e9a8:	2c00      	cmp	r4, #0
 801e9aa:	d1f7      	bne.n	801e99c <_fwalk_sglue+0xc>
 801e9ac:	4630      	mov	r0, r6
 801e9ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e9b2:	89ab      	ldrh	r3, [r5, #12]
 801e9b4:	2b01      	cmp	r3, #1
 801e9b6:	d907      	bls.n	801e9c8 <_fwalk_sglue+0x38>
 801e9b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e9bc:	3301      	adds	r3, #1
 801e9be:	d003      	beq.n	801e9c8 <_fwalk_sglue+0x38>
 801e9c0:	4629      	mov	r1, r5
 801e9c2:	4638      	mov	r0, r7
 801e9c4:	47c0      	blx	r8
 801e9c6:	4306      	orrs	r6, r0
 801e9c8:	3568      	adds	r5, #104	@ 0x68
 801e9ca:	e7e9      	b.n	801e9a0 <_fwalk_sglue+0x10>

0801e9cc <_fwrite_r>:
 801e9cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e9d0:	9c08      	ldr	r4, [sp, #32]
 801e9d2:	468a      	mov	sl, r1
 801e9d4:	4690      	mov	r8, r2
 801e9d6:	fb02 f903 	mul.w	r9, r2, r3
 801e9da:	4606      	mov	r6, r0
 801e9dc:	b118      	cbz	r0, 801e9e6 <_fwrite_r+0x1a>
 801e9de:	6a03      	ldr	r3, [r0, #32]
 801e9e0:	b90b      	cbnz	r3, 801e9e6 <_fwrite_r+0x1a>
 801e9e2:	f7ff ffbd 	bl	801e960 <__sinit>
 801e9e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e9e8:	07dd      	lsls	r5, r3, #31
 801e9ea:	d405      	bmi.n	801e9f8 <_fwrite_r+0x2c>
 801e9ec:	89a3      	ldrh	r3, [r4, #12]
 801e9ee:	0598      	lsls	r0, r3, #22
 801e9f0:	d402      	bmi.n	801e9f8 <_fwrite_r+0x2c>
 801e9f2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e9f4:	f000 fb0b 	bl	801f00e <__retarget_lock_acquire_recursive>
 801e9f8:	89a3      	ldrh	r3, [r4, #12]
 801e9fa:	0719      	lsls	r1, r3, #28
 801e9fc:	d516      	bpl.n	801ea2c <_fwrite_r+0x60>
 801e9fe:	6923      	ldr	r3, [r4, #16]
 801ea00:	b1a3      	cbz	r3, 801ea2c <_fwrite_r+0x60>
 801ea02:	2500      	movs	r5, #0
 801ea04:	454d      	cmp	r5, r9
 801ea06:	d01f      	beq.n	801ea48 <_fwrite_r+0x7c>
 801ea08:	68a7      	ldr	r7, [r4, #8]
 801ea0a:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801ea0e:	3f01      	subs	r7, #1
 801ea10:	2f00      	cmp	r7, #0
 801ea12:	60a7      	str	r7, [r4, #8]
 801ea14:	da04      	bge.n	801ea20 <_fwrite_r+0x54>
 801ea16:	69a3      	ldr	r3, [r4, #24]
 801ea18:	429f      	cmp	r7, r3
 801ea1a:	db0f      	blt.n	801ea3c <_fwrite_r+0x70>
 801ea1c:	290a      	cmp	r1, #10
 801ea1e:	d00d      	beq.n	801ea3c <_fwrite_r+0x70>
 801ea20:	6823      	ldr	r3, [r4, #0]
 801ea22:	1c5a      	adds	r2, r3, #1
 801ea24:	6022      	str	r2, [r4, #0]
 801ea26:	7019      	strb	r1, [r3, #0]
 801ea28:	3501      	adds	r5, #1
 801ea2a:	e7eb      	b.n	801ea04 <_fwrite_r+0x38>
 801ea2c:	4621      	mov	r1, r4
 801ea2e:	4630      	mov	r0, r6
 801ea30:	f000 f970 	bl	801ed14 <__swsetup_r>
 801ea34:	2800      	cmp	r0, #0
 801ea36:	d0e4      	beq.n	801ea02 <_fwrite_r+0x36>
 801ea38:	2500      	movs	r5, #0
 801ea3a:	e005      	b.n	801ea48 <_fwrite_r+0x7c>
 801ea3c:	4622      	mov	r2, r4
 801ea3e:	4630      	mov	r0, r6
 801ea40:	f000 f92a 	bl	801ec98 <__swbuf_r>
 801ea44:	3001      	adds	r0, #1
 801ea46:	d1ef      	bne.n	801ea28 <_fwrite_r+0x5c>
 801ea48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ea4a:	07da      	lsls	r2, r3, #31
 801ea4c:	d405      	bmi.n	801ea5a <_fwrite_r+0x8e>
 801ea4e:	89a3      	ldrh	r3, [r4, #12]
 801ea50:	059b      	lsls	r3, r3, #22
 801ea52:	d402      	bmi.n	801ea5a <_fwrite_r+0x8e>
 801ea54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ea56:	f000 fadb 	bl	801f010 <__retarget_lock_release_recursive>
 801ea5a:	fbb5 f0f8 	udiv	r0, r5, r8
 801ea5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801ea64 <fwrite>:
 801ea64:	b507      	push	{r0, r1, r2, lr}
 801ea66:	9300      	str	r3, [sp, #0]
 801ea68:	4613      	mov	r3, r2
 801ea6a:	460a      	mov	r2, r1
 801ea6c:	4601      	mov	r1, r0
 801ea6e:	4803      	ldr	r0, [pc, #12]	@ (801ea7c <fwrite+0x18>)
 801ea70:	6800      	ldr	r0, [r0, #0]
 801ea72:	f7ff ffab 	bl	801e9cc <_fwrite_r>
 801ea76:	b003      	add	sp, #12
 801ea78:	f85d fb04 	ldr.w	pc, [sp], #4
 801ea7c:	20000148 	.word	0x20000148

0801ea80 <iprintf>:
 801ea80:	b40f      	push	{r0, r1, r2, r3}
 801ea82:	b507      	push	{r0, r1, r2, lr}
 801ea84:	4906      	ldr	r1, [pc, #24]	@ (801eaa0 <iprintf+0x20>)
 801ea86:	ab04      	add	r3, sp, #16
 801ea88:	6808      	ldr	r0, [r1, #0]
 801ea8a:	f853 2b04 	ldr.w	r2, [r3], #4
 801ea8e:	6881      	ldr	r1, [r0, #8]
 801ea90:	9301      	str	r3, [sp, #4]
 801ea92:	f002 fdcd 	bl	8021630 <_vfiprintf_r>
 801ea96:	b003      	add	sp, #12
 801ea98:	f85d eb04 	ldr.w	lr, [sp], #4
 801ea9c:	b004      	add	sp, #16
 801ea9e:	4770      	bx	lr
 801eaa0:	20000148 	.word	0x20000148

0801eaa4 <_puts_r>:
 801eaa4:	6a03      	ldr	r3, [r0, #32]
 801eaa6:	b570      	push	{r4, r5, r6, lr}
 801eaa8:	6884      	ldr	r4, [r0, #8]
 801eaaa:	4605      	mov	r5, r0
 801eaac:	460e      	mov	r6, r1
 801eaae:	b90b      	cbnz	r3, 801eab4 <_puts_r+0x10>
 801eab0:	f7ff ff56 	bl	801e960 <__sinit>
 801eab4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801eab6:	07db      	lsls	r3, r3, #31
 801eab8:	d405      	bmi.n	801eac6 <_puts_r+0x22>
 801eaba:	89a3      	ldrh	r3, [r4, #12]
 801eabc:	0598      	lsls	r0, r3, #22
 801eabe:	d402      	bmi.n	801eac6 <_puts_r+0x22>
 801eac0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801eac2:	f000 faa4 	bl	801f00e <__retarget_lock_acquire_recursive>
 801eac6:	89a3      	ldrh	r3, [r4, #12]
 801eac8:	0719      	lsls	r1, r3, #28
 801eaca:	d502      	bpl.n	801ead2 <_puts_r+0x2e>
 801eacc:	6923      	ldr	r3, [r4, #16]
 801eace:	2b00      	cmp	r3, #0
 801ead0:	d135      	bne.n	801eb3e <_puts_r+0x9a>
 801ead2:	4621      	mov	r1, r4
 801ead4:	4628      	mov	r0, r5
 801ead6:	f000 f91d 	bl	801ed14 <__swsetup_r>
 801eada:	b380      	cbz	r0, 801eb3e <_puts_r+0x9a>
 801eadc:	f04f 35ff 	mov.w	r5, #4294967295
 801eae0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801eae2:	07da      	lsls	r2, r3, #31
 801eae4:	d405      	bmi.n	801eaf2 <_puts_r+0x4e>
 801eae6:	89a3      	ldrh	r3, [r4, #12]
 801eae8:	059b      	lsls	r3, r3, #22
 801eaea:	d402      	bmi.n	801eaf2 <_puts_r+0x4e>
 801eaec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801eaee:	f000 fa8f 	bl	801f010 <__retarget_lock_release_recursive>
 801eaf2:	4628      	mov	r0, r5
 801eaf4:	bd70      	pop	{r4, r5, r6, pc}
 801eaf6:	2b00      	cmp	r3, #0
 801eaf8:	da04      	bge.n	801eb04 <_puts_r+0x60>
 801eafa:	69a2      	ldr	r2, [r4, #24]
 801eafc:	429a      	cmp	r2, r3
 801eafe:	dc17      	bgt.n	801eb30 <_puts_r+0x8c>
 801eb00:	290a      	cmp	r1, #10
 801eb02:	d015      	beq.n	801eb30 <_puts_r+0x8c>
 801eb04:	6823      	ldr	r3, [r4, #0]
 801eb06:	1c5a      	adds	r2, r3, #1
 801eb08:	6022      	str	r2, [r4, #0]
 801eb0a:	7019      	strb	r1, [r3, #0]
 801eb0c:	68a3      	ldr	r3, [r4, #8]
 801eb0e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801eb12:	3b01      	subs	r3, #1
 801eb14:	60a3      	str	r3, [r4, #8]
 801eb16:	2900      	cmp	r1, #0
 801eb18:	d1ed      	bne.n	801eaf6 <_puts_r+0x52>
 801eb1a:	2b00      	cmp	r3, #0
 801eb1c:	da11      	bge.n	801eb42 <_puts_r+0x9e>
 801eb1e:	4622      	mov	r2, r4
 801eb20:	210a      	movs	r1, #10
 801eb22:	4628      	mov	r0, r5
 801eb24:	f000 f8b8 	bl	801ec98 <__swbuf_r>
 801eb28:	3001      	adds	r0, #1
 801eb2a:	d0d7      	beq.n	801eadc <_puts_r+0x38>
 801eb2c:	250a      	movs	r5, #10
 801eb2e:	e7d7      	b.n	801eae0 <_puts_r+0x3c>
 801eb30:	4622      	mov	r2, r4
 801eb32:	4628      	mov	r0, r5
 801eb34:	f000 f8b0 	bl	801ec98 <__swbuf_r>
 801eb38:	3001      	adds	r0, #1
 801eb3a:	d1e7      	bne.n	801eb0c <_puts_r+0x68>
 801eb3c:	e7ce      	b.n	801eadc <_puts_r+0x38>
 801eb3e:	3e01      	subs	r6, #1
 801eb40:	e7e4      	b.n	801eb0c <_puts_r+0x68>
 801eb42:	6823      	ldr	r3, [r4, #0]
 801eb44:	1c5a      	adds	r2, r3, #1
 801eb46:	6022      	str	r2, [r4, #0]
 801eb48:	220a      	movs	r2, #10
 801eb4a:	701a      	strb	r2, [r3, #0]
 801eb4c:	e7ee      	b.n	801eb2c <_puts_r+0x88>
	...

0801eb50 <puts>:
 801eb50:	4b02      	ldr	r3, [pc, #8]	@ (801eb5c <puts+0xc>)
 801eb52:	4601      	mov	r1, r0
 801eb54:	6818      	ldr	r0, [r3, #0]
 801eb56:	f7ff bfa5 	b.w	801eaa4 <_puts_r>
 801eb5a:	bf00      	nop
 801eb5c:	20000148 	.word	0x20000148

0801eb60 <siprintf>:
 801eb60:	b40e      	push	{r1, r2, r3}
 801eb62:	b500      	push	{lr}
 801eb64:	b09c      	sub	sp, #112	@ 0x70
 801eb66:	ab1d      	add	r3, sp, #116	@ 0x74
 801eb68:	9002      	str	r0, [sp, #8]
 801eb6a:	9006      	str	r0, [sp, #24]
 801eb6c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801eb70:	4809      	ldr	r0, [pc, #36]	@ (801eb98 <siprintf+0x38>)
 801eb72:	9107      	str	r1, [sp, #28]
 801eb74:	9104      	str	r1, [sp, #16]
 801eb76:	4909      	ldr	r1, [pc, #36]	@ (801eb9c <siprintf+0x3c>)
 801eb78:	f853 2b04 	ldr.w	r2, [r3], #4
 801eb7c:	9105      	str	r1, [sp, #20]
 801eb7e:	6800      	ldr	r0, [r0, #0]
 801eb80:	9301      	str	r3, [sp, #4]
 801eb82:	a902      	add	r1, sp, #8
 801eb84:	f002 fc2e 	bl	80213e4 <_svfiprintf_r>
 801eb88:	9b02      	ldr	r3, [sp, #8]
 801eb8a:	2200      	movs	r2, #0
 801eb8c:	701a      	strb	r2, [r3, #0]
 801eb8e:	b01c      	add	sp, #112	@ 0x70
 801eb90:	f85d eb04 	ldr.w	lr, [sp], #4
 801eb94:	b003      	add	sp, #12
 801eb96:	4770      	bx	lr
 801eb98:	20000148 	.word	0x20000148
 801eb9c:	ffff0208 	.word	0xffff0208

0801eba0 <__sread>:
 801eba0:	b510      	push	{r4, lr}
 801eba2:	460c      	mov	r4, r1
 801eba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eba8:	f000 f9d2 	bl	801ef50 <_read_r>
 801ebac:	2800      	cmp	r0, #0
 801ebae:	bfab      	itete	ge
 801ebb0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801ebb2:	89a3      	ldrhlt	r3, [r4, #12]
 801ebb4:	181b      	addge	r3, r3, r0
 801ebb6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801ebba:	bfac      	ite	ge
 801ebbc:	6563      	strge	r3, [r4, #84]	@ 0x54
 801ebbe:	81a3      	strhlt	r3, [r4, #12]
 801ebc0:	bd10      	pop	{r4, pc}

0801ebc2 <__swrite>:
 801ebc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ebc6:	461f      	mov	r7, r3
 801ebc8:	898b      	ldrh	r3, [r1, #12]
 801ebca:	05db      	lsls	r3, r3, #23
 801ebcc:	4605      	mov	r5, r0
 801ebce:	460c      	mov	r4, r1
 801ebd0:	4616      	mov	r6, r2
 801ebd2:	d505      	bpl.n	801ebe0 <__swrite+0x1e>
 801ebd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ebd8:	2302      	movs	r3, #2
 801ebda:	2200      	movs	r2, #0
 801ebdc:	f000 f9a6 	bl	801ef2c <_lseek_r>
 801ebe0:	89a3      	ldrh	r3, [r4, #12]
 801ebe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ebe6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801ebea:	81a3      	strh	r3, [r4, #12]
 801ebec:	4632      	mov	r2, r6
 801ebee:	463b      	mov	r3, r7
 801ebf0:	4628      	mov	r0, r5
 801ebf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ebf6:	f000 b9cd 	b.w	801ef94 <_write_r>

0801ebfa <__sseek>:
 801ebfa:	b510      	push	{r4, lr}
 801ebfc:	460c      	mov	r4, r1
 801ebfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ec02:	f000 f993 	bl	801ef2c <_lseek_r>
 801ec06:	1c43      	adds	r3, r0, #1
 801ec08:	89a3      	ldrh	r3, [r4, #12]
 801ec0a:	bf15      	itete	ne
 801ec0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801ec0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801ec12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801ec16:	81a3      	strheq	r3, [r4, #12]
 801ec18:	bf18      	it	ne
 801ec1a:	81a3      	strhne	r3, [r4, #12]
 801ec1c:	bd10      	pop	{r4, pc}

0801ec1e <__sclose>:
 801ec1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ec22:	f000 b973 	b.w	801ef0c <_close_r>

0801ec26 <_vsniprintf_r>:
 801ec26:	b530      	push	{r4, r5, lr}
 801ec28:	4614      	mov	r4, r2
 801ec2a:	2c00      	cmp	r4, #0
 801ec2c:	b09b      	sub	sp, #108	@ 0x6c
 801ec2e:	4605      	mov	r5, r0
 801ec30:	461a      	mov	r2, r3
 801ec32:	da05      	bge.n	801ec40 <_vsniprintf_r+0x1a>
 801ec34:	238b      	movs	r3, #139	@ 0x8b
 801ec36:	6003      	str	r3, [r0, #0]
 801ec38:	f04f 30ff 	mov.w	r0, #4294967295
 801ec3c:	b01b      	add	sp, #108	@ 0x6c
 801ec3e:	bd30      	pop	{r4, r5, pc}
 801ec40:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801ec44:	f8ad 300c 	strh.w	r3, [sp, #12]
 801ec48:	bf14      	ite	ne
 801ec4a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801ec4e:	4623      	moveq	r3, r4
 801ec50:	9302      	str	r3, [sp, #8]
 801ec52:	9305      	str	r3, [sp, #20]
 801ec54:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ec58:	9100      	str	r1, [sp, #0]
 801ec5a:	9104      	str	r1, [sp, #16]
 801ec5c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ec60:	4669      	mov	r1, sp
 801ec62:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ec64:	f002 fbbe 	bl	80213e4 <_svfiprintf_r>
 801ec68:	1c43      	adds	r3, r0, #1
 801ec6a:	bfbc      	itt	lt
 801ec6c:	238b      	movlt	r3, #139	@ 0x8b
 801ec6e:	602b      	strlt	r3, [r5, #0]
 801ec70:	2c00      	cmp	r4, #0
 801ec72:	d0e3      	beq.n	801ec3c <_vsniprintf_r+0x16>
 801ec74:	9b00      	ldr	r3, [sp, #0]
 801ec76:	2200      	movs	r2, #0
 801ec78:	701a      	strb	r2, [r3, #0]
 801ec7a:	e7df      	b.n	801ec3c <_vsniprintf_r+0x16>

0801ec7c <vsniprintf>:
 801ec7c:	b507      	push	{r0, r1, r2, lr}
 801ec7e:	9300      	str	r3, [sp, #0]
 801ec80:	4613      	mov	r3, r2
 801ec82:	460a      	mov	r2, r1
 801ec84:	4601      	mov	r1, r0
 801ec86:	4803      	ldr	r0, [pc, #12]	@ (801ec94 <vsniprintf+0x18>)
 801ec88:	6800      	ldr	r0, [r0, #0]
 801ec8a:	f7ff ffcc 	bl	801ec26 <_vsniprintf_r>
 801ec8e:	b003      	add	sp, #12
 801ec90:	f85d fb04 	ldr.w	pc, [sp], #4
 801ec94:	20000148 	.word	0x20000148

0801ec98 <__swbuf_r>:
 801ec98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec9a:	460e      	mov	r6, r1
 801ec9c:	4614      	mov	r4, r2
 801ec9e:	4605      	mov	r5, r0
 801eca0:	b118      	cbz	r0, 801ecaa <__swbuf_r+0x12>
 801eca2:	6a03      	ldr	r3, [r0, #32]
 801eca4:	b90b      	cbnz	r3, 801ecaa <__swbuf_r+0x12>
 801eca6:	f7ff fe5b 	bl	801e960 <__sinit>
 801ecaa:	69a3      	ldr	r3, [r4, #24]
 801ecac:	60a3      	str	r3, [r4, #8]
 801ecae:	89a3      	ldrh	r3, [r4, #12]
 801ecb0:	071a      	lsls	r2, r3, #28
 801ecb2:	d501      	bpl.n	801ecb8 <__swbuf_r+0x20>
 801ecb4:	6923      	ldr	r3, [r4, #16]
 801ecb6:	b943      	cbnz	r3, 801ecca <__swbuf_r+0x32>
 801ecb8:	4621      	mov	r1, r4
 801ecba:	4628      	mov	r0, r5
 801ecbc:	f000 f82a 	bl	801ed14 <__swsetup_r>
 801ecc0:	b118      	cbz	r0, 801ecca <__swbuf_r+0x32>
 801ecc2:	f04f 37ff 	mov.w	r7, #4294967295
 801ecc6:	4638      	mov	r0, r7
 801ecc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ecca:	6823      	ldr	r3, [r4, #0]
 801eccc:	6922      	ldr	r2, [r4, #16]
 801ecce:	1a98      	subs	r0, r3, r2
 801ecd0:	6963      	ldr	r3, [r4, #20]
 801ecd2:	b2f6      	uxtb	r6, r6
 801ecd4:	4283      	cmp	r3, r0
 801ecd6:	4637      	mov	r7, r6
 801ecd8:	dc05      	bgt.n	801ece6 <__swbuf_r+0x4e>
 801ecda:	4621      	mov	r1, r4
 801ecdc:	4628      	mov	r0, r5
 801ecde:	f002 fe43 	bl	8021968 <_fflush_r>
 801ece2:	2800      	cmp	r0, #0
 801ece4:	d1ed      	bne.n	801ecc2 <__swbuf_r+0x2a>
 801ece6:	68a3      	ldr	r3, [r4, #8]
 801ece8:	3b01      	subs	r3, #1
 801ecea:	60a3      	str	r3, [r4, #8]
 801ecec:	6823      	ldr	r3, [r4, #0]
 801ecee:	1c5a      	adds	r2, r3, #1
 801ecf0:	6022      	str	r2, [r4, #0]
 801ecf2:	701e      	strb	r6, [r3, #0]
 801ecf4:	6962      	ldr	r2, [r4, #20]
 801ecf6:	1c43      	adds	r3, r0, #1
 801ecf8:	429a      	cmp	r2, r3
 801ecfa:	d004      	beq.n	801ed06 <__swbuf_r+0x6e>
 801ecfc:	89a3      	ldrh	r3, [r4, #12]
 801ecfe:	07db      	lsls	r3, r3, #31
 801ed00:	d5e1      	bpl.n	801ecc6 <__swbuf_r+0x2e>
 801ed02:	2e0a      	cmp	r6, #10
 801ed04:	d1df      	bne.n	801ecc6 <__swbuf_r+0x2e>
 801ed06:	4621      	mov	r1, r4
 801ed08:	4628      	mov	r0, r5
 801ed0a:	f002 fe2d 	bl	8021968 <_fflush_r>
 801ed0e:	2800      	cmp	r0, #0
 801ed10:	d0d9      	beq.n	801ecc6 <__swbuf_r+0x2e>
 801ed12:	e7d6      	b.n	801ecc2 <__swbuf_r+0x2a>

0801ed14 <__swsetup_r>:
 801ed14:	b538      	push	{r3, r4, r5, lr}
 801ed16:	4b29      	ldr	r3, [pc, #164]	@ (801edbc <__swsetup_r+0xa8>)
 801ed18:	4605      	mov	r5, r0
 801ed1a:	6818      	ldr	r0, [r3, #0]
 801ed1c:	460c      	mov	r4, r1
 801ed1e:	b118      	cbz	r0, 801ed28 <__swsetup_r+0x14>
 801ed20:	6a03      	ldr	r3, [r0, #32]
 801ed22:	b90b      	cbnz	r3, 801ed28 <__swsetup_r+0x14>
 801ed24:	f7ff fe1c 	bl	801e960 <__sinit>
 801ed28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ed2c:	0719      	lsls	r1, r3, #28
 801ed2e:	d422      	bmi.n	801ed76 <__swsetup_r+0x62>
 801ed30:	06da      	lsls	r2, r3, #27
 801ed32:	d407      	bmi.n	801ed44 <__swsetup_r+0x30>
 801ed34:	2209      	movs	r2, #9
 801ed36:	602a      	str	r2, [r5, #0]
 801ed38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ed3c:	81a3      	strh	r3, [r4, #12]
 801ed3e:	f04f 30ff 	mov.w	r0, #4294967295
 801ed42:	e033      	b.n	801edac <__swsetup_r+0x98>
 801ed44:	0758      	lsls	r0, r3, #29
 801ed46:	d512      	bpl.n	801ed6e <__swsetup_r+0x5a>
 801ed48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ed4a:	b141      	cbz	r1, 801ed5e <__swsetup_r+0x4a>
 801ed4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ed50:	4299      	cmp	r1, r3
 801ed52:	d002      	beq.n	801ed5a <__swsetup_r+0x46>
 801ed54:	4628      	mov	r0, r5
 801ed56:	f000 ffe3 	bl	801fd20 <_free_r>
 801ed5a:	2300      	movs	r3, #0
 801ed5c:	6363      	str	r3, [r4, #52]	@ 0x34
 801ed5e:	89a3      	ldrh	r3, [r4, #12]
 801ed60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801ed64:	81a3      	strh	r3, [r4, #12]
 801ed66:	2300      	movs	r3, #0
 801ed68:	6063      	str	r3, [r4, #4]
 801ed6a:	6923      	ldr	r3, [r4, #16]
 801ed6c:	6023      	str	r3, [r4, #0]
 801ed6e:	89a3      	ldrh	r3, [r4, #12]
 801ed70:	f043 0308 	orr.w	r3, r3, #8
 801ed74:	81a3      	strh	r3, [r4, #12]
 801ed76:	6923      	ldr	r3, [r4, #16]
 801ed78:	b94b      	cbnz	r3, 801ed8e <__swsetup_r+0x7a>
 801ed7a:	89a3      	ldrh	r3, [r4, #12]
 801ed7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801ed80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ed84:	d003      	beq.n	801ed8e <__swsetup_r+0x7a>
 801ed86:	4621      	mov	r1, r4
 801ed88:	4628      	mov	r0, r5
 801ed8a:	f002 fe4d 	bl	8021a28 <__smakebuf_r>
 801ed8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ed92:	f013 0201 	ands.w	r2, r3, #1
 801ed96:	d00a      	beq.n	801edae <__swsetup_r+0x9a>
 801ed98:	2200      	movs	r2, #0
 801ed9a:	60a2      	str	r2, [r4, #8]
 801ed9c:	6962      	ldr	r2, [r4, #20]
 801ed9e:	4252      	negs	r2, r2
 801eda0:	61a2      	str	r2, [r4, #24]
 801eda2:	6922      	ldr	r2, [r4, #16]
 801eda4:	b942      	cbnz	r2, 801edb8 <__swsetup_r+0xa4>
 801eda6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801edaa:	d1c5      	bne.n	801ed38 <__swsetup_r+0x24>
 801edac:	bd38      	pop	{r3, r4, r5, pc}
 801edae:	0799      	lsls	r1, r3, #30
 801edb0:	bf58      	it	pl
 801edb2:	6962      	ldrpl	r2, [r4, #20]
 801edb4:	60a2      	str	r2, [r4, #8]
 801edb6:	e7f4      	b.n	801eda2 <__swsetup_r+0x8e>
 801edb8:	2000      	movs	r0, #0
 801edba:	e7f7      	b.n	801edac <__swsetup_r+0x98>
 801edbc:	20000148 	.word	0x20000148

0801edc0 <memmove>:
 801edc0:	4288      	cmp	r0, r1
 801edc2:	b510      	push	{r4, lr}
 801edc4:	eb01 0402 	add.w	r4, r1, r2
 801edc8:	d902      	bls.n	801edd0 <memmove+0x10>
 801edca:	4284      	cmp	r4, r0
 801edcc:	4623      	mov	r3, r4
 801edce:	d807      	bhi.n	801ede0 <memmove+0x20>
 801edd0:	1e43      	subs	r3, r0, #1
 801edd2:	42a1      	cmp	r1, r4
 801edd4:	d008      	beq.n	801ede8 <memmove+0x28>
 801edd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801edda:	f803 2f01 	strb.w	r2, [r3, #1]!
 801edde:	e7f8      	b.n	801edd2 <memmove+0x12>
 801ede0:	4402      	add	r2, r0
 801ede2:	4601      	mov	r1, r0
 801ede4:	428a      	cmp	r2, r1
 801ede6:	d100      	bne.n	801edea <memmove+0x2a>
 801ede8:	bd10      	pop	{r4, pc}
 801edea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801edee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801edf2:	e7f7      	b.n	801ede4 <memmove+0x24>

0801edf4 <memset>:
 801edf4:	4402      	add	r2, r0
 801edf6:	4603      	mov	r3, r0
 801edf8:	4293      	cmp	r3, r2
 801edfa:	d100      	bne.n	801edfe <memset+0xa>
 801edfc:	4770      	bx	lr
 801edfe:	f803 1b01 	strb.w	r1, [r3], #1
 801ee02:	e7f9      	b.n	801edf8 <memset+0x4>

0801ee04 <strchr>:
 801ee04:	b2c9      	uxtb	r1, r1
 801ee06:	4603      	mov	r3, r0
 801ee08:	4618      	mov	r0, r3
 801ee0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ee0e:	b112      	cbz	r2, 801ee16 <strchr+0x12>
 801ee10:	428a      	cmp	r2, r1
 801ee12:	d1f9      	bne.n	801ee08 <strchr+0x4>
 801ee14:	4770      	bx	lr
 801ee16:	2900      	cmp	r1, #0
 801ee18:	bf18      	it	ne
 801ee1a:	2000      	movne	r0, #0
 801ee1c:	4770      	bx	lr
	...

0801ee20 <strtok>:
 801ee20:	4b16      	ldr	r3, [pc, #88]	@ (801ee7c <strtok+0x5c>)
 801ee22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ee26:	681f      	ldr	r7, [r3, #0]
 801ee28:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801ee2a:	4605      	mov	r5, r0
 801ee2c:	460e      	mov	r6, r1
 801ee2e:	b9ec      	cbnz	r4, 801ee6c <strtok+0x4c>
 801ee30:	2050      	movs	r0, #80	@ 0x50
 801ee32:	f7fe fd61 	bl	801d8f8 <malloc>
 801ee36:	4602      	mov	r2, r0
 801ee38:	6478      	str	r0, [r7, #68]	@ 0x44
 801ee3a:	b920      	cbnz	r0, 801ee46 <strtok+0x26>
 801ee3c:	4b10      	ldr	r3, [pc, #64]	@ (801ee80 <strtok+0x60>)
 801ee3e:	4811      	ldr	r0, [pc, #68]	@ (801ee84 <strtok+0x64>)
 801ee40:	215b      	movs	r1, #91	@ 0x5b
 801ee42:	f000 f903 	bl	801f04c <__assert_func>
 801ee46:	e9c0 4400 	strd	r4, r4, [r0]
 801ee4a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801ee4e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801ee52:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801ee56:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801ee5a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801ee5e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801ee62:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801ee66:	6184      	str	r4, [r0, #24]
 801ee68:	7704      	strb	r4, [r0, #28]
 801ee6a:	6244      	str	r4, [r0, #36]	@ 0x24
 801ee6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801ee6e:	4631      	mov	r1, r6
 801ee70:	4628      	mov	r0, r5
 801ee72:	2301      	movs	r3, #1
 801ee74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ee78:	f000 b806 	b.w	801ee88 <__strtok_r>
 801ee7c:	20000148 	.word	0x20000148
 801ee80:	080256ea 	.word	0x080256ea
 801ee84:	08025701 	.word	0x08025701

0801ee88 <__strtok_r>:
 801ee88:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ee8a:	4604      	mov	r4, r0
 801ee8c:	b908      	cbnz	r0, 801ee92 <__strtok_r+0xa>
 801ee8e:	6814      	ldr	r4, [r2, #0]
 801ee90:	b144      	cbz	r4, 801eea4 <__strtok_r+0x1c>
 801ee92:	4620      	mov	r0, r4
 801ee94:	f814 5b01 	ldrb.w	r5, [r4], #1
 801ee98:	460f      	mov	r7, r1
 801ee9a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801ee9e:	b91e      	cbnz	r6, 801eea8 <__strtok_r+0x20>
 801eea0:	b965      	cbnz	r5, 801eebc <__strtok_r+0x34>
 801eea2:	6015      	str	r5, [r2, #0]
 801eea4:	2000      	movs	r0, #0
 801eea6:	e005      	b.n	801eeb4 <__strtok_r+0x2c>
 801eea8:	42b5      	cmp	r5, r6
 801eeaa:	d1f6      	bne.n	801ee9a <__strtok_r+0x12>
 801eeac:	2b00      	cmp	r3, #0
 801eeae:	d1f0      	bne.n	801ee92 <__strtok_r+0xa>
 801eeb0:	6014      	str	r4, [r2, #0]
 801eeb2:	7003      	strb	r3, [r0, #0]
 801eeb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eeb6:	461c      	mov	r4, r3
 801eeb8:	e00c      	b.n	801eed4 <__strtok_r+0x4c>
 801eeba:	b915      	cbnz	r5, 801eec2 <__strtok_r+0x3a>
 801eebc:	f814 3b01 	ldrb.w	r3, [r4], #1
 801eec0:	460e      	mov	r6, r1
 801eec2:	f816 5b01 	ldrb.w	r5, [r6], #1
 801eec6:	42ab      	cmp	r3, r5
 801eec8:	d1f7      	bne.n	801eeba <__strtok_r+0x32>
 801eeca:	2b00      	cmp	r3, #0
 801eecc:	d0f3      	beq.n	801eeb6 <__strtok_r+0x2e>
 801eece:	2300      	movs	r3, #0
 801eed0:	f804 3c01 	strb.w	r3, [r4, #-1]
 801eed4:	6014      	str	r4, [r2, #0]
 801eed6:	e7ed      	b.n	801eeb4 <__strtok_r+0x2c>

0801eed8 <strstr>:
 801eed8:	780a      	ldrb	r2, [r1, #0]
 801eeda:	b570      	push	{r4, r5, r6, lr}
 801eedc:	b96a      	cbnz	r2, 801eefa <strstr+0x22>
 801eede:	bd70      	pop	{r4, r5, r6, pc}
 801eee0:	429a      	cmp	r2, r3
 801eee2:	d109      	bne.n	801eef8 <strstr+0x20>
 801eee4:	460c      	mov	r4, r1
 801eee6:	4605      	mov	r5, r0
 801eee8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801eeec:	2b00      	cmp	r3, #0
 801eeee:	d0f6      	beq.n	801eede <strstr+0x6>
 801eef0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801eef4:	429e      	cmp	r6, r3
 801eef6:	d0f7      	beq.n	801eee8 <strstr+0x10>
 801eef8:	3001      	adds	r0, #1
 801eefa:	7803      	ldrb	r3, [r0, #0]
 801eefc:	2b00      	cmp	r3, #0
 801eefe:	d1ef      	bne.n	801eee0 <strstr+0x8>
 801ef00:	4618      	mov	r0, r3
 801ef02:	e7ec      	b.n	801eede <strstr+0x6>

0801ef04 <_localeconv_r>:
 801ef04:	4800      	ldr	r0, [pc, #0]	@ (801ef08 <_localeconv_r+0x4>)
 801ef06:	4770      	bx	lr
 801ef08:	20000288 	.word	0x20000288

0801ef0c <_close_r>:
 801ef0c:	b538      	push	{r3, r4, r5, lr}
 801ef0e:	4d06      	ldr	r5, [pc, #24]	@ (801ef28 <_close_r+0x1c>)
 801ef10:	2300      	movs	r3, #0
 801ef12:	4604      	mov	r4, r0
 801ef14:	4608      	mov	r0, r1
 801ef16:	602b      	str	r3, [r5, #0]
 801ef18:	f7e5 f84e 	bl	8003fb8 <_close>
 801ef1c:	1c43      	adds	r3, r0, #1
 801ef1e:	d102      	bne.n	801ef26 <_close_r+0x1a>
 801ef20:	682b      	ldr	r3, [r5, #0]
 801ef22:	b103      	cbz	r3, 801ef26 <_close_r+0x1a>
 801ef24:	6023      	str	r3, [r4, #0]
 801ef26:	bd38      	pop	{r3, r4, r5, pc}
 801ef28:	200037ac 	.word	0x200037ac

0801ef2c <_lseek_r>:
 801ef2c:	b538      	push	{r3, r4, r5, lr}
 801ef2e:	4d07      	ldr	r5, [pc, #28]	@ (801ef4c <_lseek_r+0x20>)
 801ef30:	4604      	mov	r4, r0
 801ef32:	4608      	mov	r0, r1
 801ef34:	4611      	mov	r1, r2
 801ef36:	2200      	movs	r2, #0
 801ef38:	602a      	str	r2, [r5, #0]
 801ef3a:	461a      	mov	r2, r3
 801ef3c:	f7e5 f863 	bl	8004006 <_lseek>
 801ef40:	1c43      	adds	r3, r0, #1
 801ef42:	d102      	bne.n	801ef4a <_lseek_r+0x1e>
 801ef44:	682b      	ldr	r3, [r5, #0]
 801ef46:	b103      	cbz	r3, 801ef4a <_lseek_r+0x1e>
 801ef48:	6023      	str	r3, [r4, #0]
 801ef4a:	bd38      	pop	{r3, r4, r5, pc}
 801ef4c:	200037ac 	.word	0x200037ac

0801ef50 <_read_r>:
 801ef50:	b538      	push	{r3, r4, r5, lr}
 801ef52:	4d07      	ldr	r5, [pc, #28]	@ (801ef70 <_read_r+0x20>)
 801ef54:	4604      	mov	r4, r0
 801ef56:	4608      	mov	r0, r1
 801ef58:	4611      	mov	r1, r2
 801ef5a:	2200      	movs	r2, #0
 801ef5c:	602a      	str	r2, [r5, #0]
 801ef5e:	461a      	mov	r2, r3
 801ef60:	f7e4 fff1 	bl	8003f46 <_read>
 801ef64:	1c43      	adds	r3, r0, #1
 801ef66:	d102      	bne.n	801ef6e <_read_r+0x1e>
 801ef68:	682b      	ldr	r3, [r5, #0]
 801ef6a:	b103      	cbz	r3, 801ef6e <_read_r+0x1e>
 801ef6c:	6023      	str	r3, [r4, #0]
 801ef6e:	bd38      	pop	{r3, r4, r5, pc}
 801ef70:	200037ac 	.word	0x200037ac

0801ef74 <_sbrk_r>:
 801ef74:	b538      	push	{r3, r4, r5, lr}
 801ef76:	4d06      	ldr	r5, [pc, #24]	@ (801ef90 <_sbrk_r+0x1c>)
 801ef78:	2300      	movs	r3, #0
 801ef7a:	4604      	mov	r4, r0
 801ef7c:	4608      	mov	r0, r1
 801ef7e:	602b      	str	r3, [r5, #0]
 801ef80:	f7e5 f84e 	bl	8004020 <_sbrk>
 801ef84:	1c43      	adds	r3, r0, #1
 801ef86:	d102      	bne.n	801ef8e <_sbrk_r+0x1a>
 801ef88:	682b      	ldr	r3, [r5, #0]
 801ef8a:	b103      	cbz	r3, 801ef8e <_sbrk_r+0x1a>
 801ef8c:	6023      	str	r3, [r4, #0]
 801ef8e:	bd38      	pop	{r3, r4, r5, pc}
 801ef90:	200037ac 	.word	0x200037ac

0801ef94 <_write_r>:
 801ef94:	b538      	push	{r3, r4, r5, lr}
 801ef96:	4d07      	ldr	r5, [pc, #28]	@ (801efb4 <_write_r+0x20>)
 801ef98:	4604      	mov	r4, r0
 801ef9a:	4608      	mov	r0, r1
 801ef9c:	4611      	mov	r1, r2
 801ef9e:	2200      	movs	r2, #0
 801efa0:	602a      	str	r2, [r5, #0]
 801efa2:	461a      	mov	r2, r3
 801efa4:	f7e4 ffec 	bl	8003f80 <_write>
 801efa8:	1c43      	adds	r3, r0, #1
 801efaa:	d102      	bne.n	801efb2 <_write_r+0x1e>
 801efac:	682b      	ldr	r3, [r5, #0]
 801efae:	b103      	cbz	r3, 801efb2 <_write_r+0x1e>
 801efb0:	6023      	str	r3, [r4, #0]
 801efb2:	bd38      	pop	{r3, r4, r5, pc}
 801efb4:	200037ac 	.word	0x200037ac

0801efb8 <__errno>:
 801efb8:	4b01      	ldr	r3, [pc, #4]	@ (801efc0 <__errno+0x8>)
 801efba:	6818      	ldr	r0, [r3, #0]
 801efbc:	4770      	bx	lr
 801efbe:	bf00      	nop
 801efc0:	20000148 	.word	0x20000148

0801efc4 <__libc_init_array>:
 801efc4:	b570      	push	{r4, r5, r6, lr}
 801efc6:	4d0d      	ldr	r5, [pc, #52]	@ (801effc <__libc_init_array+0x38>)
 801efc8:	4c0d      	ldr	r4, [pc, #52]	@ (801f000 <__libc_init_array+0x3c>)
 801efca:	1b64      	subs	r4, r4, r5
 801efcc:	10a4      	asrs	r4, r4, #2
 801efce:	2600      	movs	r6, #0
 801efd0:	42a6      	cmp	r6, r4
 801efd2:	d109      	bne.n	801efe8 <__libc_init_array+0x24>
 801efd4:	4d0b      	ldr	r5, [pc, #44]	@ (801f004 <__libc_init_array+0x40>)
 801efd6:	4c0c      	ldr	r4, [pc, #48]	@ (801f008 <__libc_init_array+0x44>)
 801efd8:	f003 f98a 	bl	80222f0 <_init>
 801efdc:	1b64      	subs	r4, r4, r5
 801efde:	10a4      	asrs	r4, r4, #2
 801efe0:	2600      	movs	r6, #0
 801efe2:	42a6      	cmp	r6, r4
 801efe4:	d105      	bne.n	801eff2 <__libc_init_array+0x2e>
 801efe6:	bd70      	pop	{r4, r5, r6, pc}
 801efe8:	f855 3b04 	ldr.w	r3, [r5], #4
 801efec:	4798      	blx	r3
 801efee:	3601      	adds	r6, #1
 801eff0:	e7ee      	b.n	801efd0 <__libc_init_array+0xc>
 801eff2:	f855 3b04 	ldr.w	r3, [r5], #4
 801eff6:	4798      	blx	r3
 801eff8:	3601      	adds	r6, #1
 801effa:	e7f2      	b.n	801efe2 <__libc_init_array+0x1e>
 801effc:	08025a44 	.word	0x08025a44
 801f000:	08025a44 	.word	0x08025a44
 801f004:	08025a44 	.word	0x08025a44
 801f008:	08025a48 	.word	0x08025a48

0801f00c <__retarget_lock_init_recursive>:
 801f00c:	4770      	bx	lr

0801f00e <__retarget_lock_acquire_recursive>:
 801f00e:	4770      	bx	lr

0801f010 <__retarget_lock_release_recursive>:
 801f010:	4770      	bx	lr

0801f012 <strcpy>:
 801f012:	4603      	mov	r3, r0
 801f014:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f018:	f803 2b01 	strb.w	r2, [r3], #1
 801f01c:	2a00      	cmp	r2, #0
 801f01e:	d1f9      	bne.n	801f014 <strcpy+0x2>
 801f020:	4770      	bx	lr

0801f022 <memcpy>:
 801f022:	440a      	add	r2, r1
 801f024:	4291      	cmp	r1, r2
 801f026:	f100 33ff 	add.w	r3, r0, #4294967295
 801f02a:	d100      	bne.n	801f02e <memcpy+0xc>
 801f02c:	4770      	bx	lr
 801f02e:	b510      	push	{r4, lr}
 801f030:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f034:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f038:	4291      	cmp	r1, r2
 801f03a:	d1f9      	bne.n	801f030 <memcpy+0xe>
 801f03c:	bd10      	pop	{r4, pc}
	...

0801f040 <nanf>:
 801f040:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801f048 <nanf+0x8>
 801f044:	4770      	bx	lr
 801f046:	bf00      	nop
 801f048:	7fc00000 	.word	0x7fc00000

0801f04c <__assert_func>:
 801f04c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f04e:	4614      	mov	r4, r2
 801f050:	461a      	mov	r2, r3
 801f052:	4b09      	ldr	r3, [pc, #36]	@ (801f078 <__assert_func+0x2c>)
 801f054:	681b      	ldr	r3, [r3, #0]
 801f056:	4605      	mov	r5, r0
 801f058:	68d8      	ldr	r0, [r3, #12]
 801f05a:	b954      	cbnz	r4, 801f072 <__assert_func+0x26>
 801f05c:	4b07      	ldr	r3, [pc, #28]	@ (801f07c <__assert_func+0x30>)
 801f05e:	461c      	mov	r4, r3
 801f060:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f064:	9100      	str	r1, [sp, #0]
 801f066:	462b      	mov	r3, r5
 801f068:	4905      	ldr	r1, [pc, #20]	@ (801f080 <__assert_func+0x34>)
 801f06a:	f002 fca5 	bl	80219b8 <fiprintf>
 801f06e:	f002 fd53 	bl	8021b18 <abort>
 801f072:	4b04      	ldr	r3, [pc, #16]	@ (801f084 <__assert_func+0x38>)
 801f074:	e7f4      	b.n	801f060 <__assert_func+0x14>
 801f076:	bf00      	nop
 801f078:	20000148 	.word	0x20000148
 801f07c:	08025796 	.word	0x08025796
 801f080:	08025768 	.word	0x08025768
 801f084:	0802575b 	.word	0x0802575b

0801f088 <quorem>:
 801f088:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f08c:	6903      	ldr	r3, [r0, #16]
 801f08e:	690c      	ldr	r4, [r1, #16]
 801f090:	42a3      	cmp	r3, r4
 801f092:	4607      	mov	r7, r0
 801f094:	db7e      	blt.n	801f194 <quorem+0x10c>
 801f096:	3c01      	subs	r4, #1
 801f098:	f101 0814 	add.w	r8, r1, #20
 801f09c:	00a3      	lsls	r3, r4, #2
 801f09e:	f100 0514 	add.w	r5, r0, #20
 801f0a2:	9300      	str	r3, [sp, #0]
 801f0a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801f0a8:	9301      	str	r3, [sp, #4]
 801f0aa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801f0ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801f0b2:	3301      	adds	r3, #1
 801f0b4:	429a      	cmp	r2, r3
 801f0b6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801f0ba:	fbb2 f6f3 	udiv	r6, r2, r3
 801f0be:	d32e      	bcc.n	801f11e <quorem+0x96>
 801f0c0:	f04f 0a00 	mov.w	sl, #0
 801f0c4:	46c4      	mov	ip, r8
 801f0c6:	46ae      	mov	lr, r5
 801f0c8:	46d3      	mov	fp, sl
 801f0ca:	f85c 3b04 	ldr.w	r3, [ip], #4
 801f0ce:	b298      	uxth	r0, r3
 801f0d0:	fb06 a000 	mla	r0, r6, r0, sl
 801f0d4:	0c02      	lsrs	r2, r0, #16
 801f0d6:	0c1b      	lsrs	r3, r3, #16
 801f0d8:	fb06 2303 	mla	r3, r6, r3, r2
 801f0dc:	f8de 2000 	ldr.w	r2, [lr]
 801f0e0:	b280      	uxth	r0, r0
 801f0e2:	b292      	uxth	r2, r2
 801f0e4:	1a12      	subs	r2, r2, r0
 801f0e6:	445a      	add	r2, fp
 801f0e8:	f8de 0000 	ldr.w	r0, [lr]
 801f0ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801f0f0:	b29b      	uxth	r3, r3
 801f0f2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801f0f6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801f0fa:	b292      	uxth	r2, r2
 801f0fc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801f100:	45e1      	cmp	r9, ip
 801f102:	f84e 2b04 	str.w	r2, [lr], #4
 801f106:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801f10a:	d2de      	bcs.n	801f0ca <quorem+0x42>
 801f10c:	9b00      	ldr	r3, [sp, #0]
 801f10e:	58eb      	ldr	r3, [r5, r3]
 801f110:	b92b      	cbnz	r3, 801f11e <quorem+0x96>
 801f112:	9b01      	ldr	r3, [sp, #4]
 801f114:	3b04      	subs	r3, #4
 801f116:	429d      	cmp	r5, r3
 801f118:	461a      	mov	r2, r3
 801f11a:	d32f      	bcc.n	801f17c <quorem+0xf4>
 801f11c:	613c      	str	r4, [r7, #16]
 801f11e:	4638      	mov	r0, r7
 801f120:	f001 f90c 	bl	802033c <__mcmp>
 801f124:	2800      	cmp	r0, #0
 801f126:	db25      	blt.n	801f174 <quorem+0xec>
 801f128:	4629      	mov	r1, r5
 801f12a:	2000      	movs	r0, #0
 801f12c:	f858 2b04 	ldr.w	r2, [r8], #4
 801f130:	f8d1 c000 	ldr.w	ip, [r1]
 801f134:	fa1f fe82 	uxth.w	lr, r2
 801f138:	fa1f f38c 	uxth.w	r3, ip
 801f13c:	eba3 030e 	sub.w	r3, r3, lr
 801f140:	4403      	add	r3, r0
 801f142:	0c12      	lsrs	r2, r2, #16
 801f144:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801f148:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801f14c:	b29b      	uxth	r3, r3
 801f14e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801f152:	45c1      	cmp	r9, r8
 801f154:	f841 3b04 	str.w	r3, [r1], #4
 801f158:	ea4f 4022 	mov.w	r0, r2, asr #16
 801f15c:	d2e6      	bcs.n	801f12c <quorem+0xa4>
 801f15e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801f162:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801f166:	b922      	cbnz	r2, 801f172 <quorem+0xea>
 801f168:	3b04      	subs	r3, #4
 801f16a:	429d      	cmp	r5, r3
 801f16c:	461a      	mov	r2, r3
 801f16e:	d30b      	bcc.n	801f188 <quorem+0x100>
 801f170:	613c      	str	r4, [r7, #16]
 801f172:	3601      	adds	r6, #1
 801f174:	4630      	mov	r0, r6
 801f176:	b003      	add	sp, #12
 801f178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f17c:	6812      	ldr	r2, [r2, #0]
 801f17e:	3b04      	subs	r3, #4
 801f180:	2a00      	cmp	r2, #0
 801f182:	d1cb      	bne.n	801f11c <quorem+0x94>
 801f184:	3c01      	subs	r4, #1
 801f186:	e7c6      	b.n	801f116 <quorem+0x8e>
 801f188:	6812      	ldr	r2, [r2, #0]
 801f18a:	3b04      	subs	r3, #4
 801f18c:	2a00      	cmp	r2, #0
 801f18e:	d1ef      	bne.n	801f170 <quorem+0xe8>
 801f190:	3c01      	subs	r4, #1
 801f192:	e7ea      	b.n	801f16a <quorem+0xe2>
 801f194:	2000      	movs	r0, #0
 801f196:	e7ee      	b.n	801f176 <quorem+0xee>

0801f198 <_dtoa_r>:
 801f198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f19c:	69c7      	ldr	r7, [r0, #28]
 801f19e:	b099      	sub	sp, #100	@ 0x64
 801f1a0:	ed8d 0b02 	vstr	d0, [sp, #8]
 801f1a4:	ec55 4b10 	vmov	r4, r5, d0
 801f1a8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801f1aa:	9109      	str	r1, [sp, #36]	@ 0x24
 801f1ac:	4683      	mov	fp, r0
 801f1ae:	920e      	str	r2, [sp, #56]	@ 0x38
 801f1b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f1b2:	b97f      	cbnz	r7, 801f1d4 <_dtoa_r+0x3c>
 801f1b4:	2010      	movs	r0, #16
 801f1b6:	f7fe fb9f 	bl	801d8f8 <malloc>
 801f1ba:	4602      	mov	r2, r0
 801f1bc:	f8cb 001c 	str.w	r0, [fp, #28]
 801f1c0:	b920      	cbnz	r0, 801f1cc <_dtoa_r+0x34>
 801f1c2:	4ba7      	ldr	r3, [pc, #668]	@ (801f460 <_dtoa_r+0x2c8>)
 801f1c4:	21ef      	movs	r1, #239	@ 0xef
 801f1c6:	48a7      	ldr	r0, [pc, #668]	@ (801f464 <_dtoa_r+0x2cc>)
 801f1c8:	f7ff ff40 	bl	801f04c <__assert_func>
 801f1cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801f1d0:	6007      	str	r7, [r0, #0]
 801f1d2:	60c7      	str	r7, [r0, #12]
 801f1d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801f1d8:	6819      	ldr	r1, [r3, #0]
 801f1da:	b159      	cbz	r1, 801f1f4 <_dtoa_r+0x5c>
 801f1dc:	685a      	ldr	r2, [r3, #4]
 801f1de:	604a      	str	r2, [r1, #4]
 801f1e0:	2301      	movs	r3, #1
 801f1e2:	4093      	lsls	r3, r2
 801f1e4:	608b      	str	r3, [r1, #8]
 801f1e6:	4658      	mov	r0, fp
 801f1e8:	f000 fe24 	bl	801fe34 <_Bfree>
 801f1ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 801f1f0:	2200      	movs	r2, #0
 801f1f2:	601a      	str	r2, [r3, #0]
 801f1f4:	1e2b      	subs	r3, r5, #0
 801f1f6:	bfb9      	ittee	lt
 801f1f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801f1fc:	9303      	strlt	r3, [sp, #12]
 801f1fe:	2300      	movge	r3, #0
 801f200:	6033      	strge	r3, [r6, #0]
 801f202:	9f03      	ldr	r7, [sp, #12]
 801f204:	4b98      	ldr	r3, [pc, #608]	@ (801f468 <_dtoa_r+0x2d0>)
 801f206:	bfbc      	itt	lt
 801f208:	2201      	movlt	r2, #1
 801f20a:	6032      	strlt	r2, [r6, #0]
 801f20c:	43bb      	bics	r3, r7
 801f20e:	d112      	bne.n	801f236 <_dtoa_r+0x9e>
 801f210:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f212:	f242 730f 	movw	r3, #9999	@ 0x270f
 801f216:	6013      	str	r3, [r2, #0]
 801f218:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801f21c:	4323      	orrs	r3, r4
 801f21e:	f000 854d 	beq.w	801fcbc <_dtoa_r+0xb24>
 801f222:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f224:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801f47c <_dtoa_r+0x2e4>
 801f228:	2b00      	cmp	r3, #0
 801f22a:	f000 854f 	beq.w	801fccc <_dtoa_r+0xb34>
 801f22e:	f10a 0303 	add.w	r3, sl, #3
 801f232:	f000 bd49 	b.w	801fcc8 <_dtoa_r+0xb30>
 801f236:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f23a:	2200      	movs	r2, #0
 801f23c:	ec51 0b17 	vmov	r0, r1, d7
 801f240:	2300      	movs	r3, #0
 801f242:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801f246:	f7e1 fc57 	bl	8000af8 <__aeabi_dcmpeq>
 801f24a:	4680      	mov	r8, r0
 801f24c:	b158      	cbz	r0, 801f266 <_dtoa_r+0xce>
 801f24e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f250:	2301      	movs	r3, #1
 801f252:	6013      	str	r3, [r2, #0]
 801f254:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f256:	b113      	cbz	r3, 801f25e <_dtoa_r+0xc6>
 801f258:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801f25a:	4b84      	ldr	r3, [pc, #528]	@ (801f46c <_dtoa_r+0x2d4>)
 801f25c:	6013      	str	r3, [r2, #0]
 801f25e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801f480 <_dtoa_r+0x2e8>
 801f262:	f000 bd33 	b.w	801fccc <_dtoa_r+0xb34>
 801f266:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801f26a:	aa16      	add	r2, sp, #88	@ 0x58
 801f26c:	a917      	add	r1, sp, #92	@ 0x5c
 801f26e:	4658      	mov	r0, fp
 801f270:	f001 f984 	bl	802057c <__d2b>
 801f274:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801f278:	4681      	mov	r9, r0
 801f27a:	2e00      	cmp	r6, #0
 801f27c:	d077      	beq.n	801f36e <_dtoa_r+0x1d6>
 801f27e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f280:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801f284:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f288:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f28c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801f290:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801f294:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801f298:	4619      	mov	r1, r3
 801f29a:	2200      	movs	r2, #0
 801f29c:	4b74      	ldr	r3, [pc, #464]	@ (801f470 <_dtoa_r+0x2d8>)
 801f29e:	f7e1 f80b 	bl	80002b8 <__aeabi_dsub>
 801f2a2:	a369      	add	r3, pc, #420	@ (adr r3, 801f448 <_dtoa_r+0x2b0>)
 801f2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2a8:	f7e1 f9be 	bl	8000628 <__aeabi_dmul>
 801f2ac:	a368      	add	r3, pc, #416	@ (adr r3, 801f450 <_dtoa_r+0x2b8>)
 801f2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2b2:	f7e1 f803 	bl	80002bc <__adddf3>
 801f2b6:	4604      	mov	r4, r0
 801f2b8:	4630      	mov	r0, r6
 801f2ba:	460d      	mov	r5, r1
 801f2bc:	f7e1 f94a 	bl	8000554 <__aeabi_i2d>
 801f2c0:	a365      	add	r3, pc, #404	@ (adr r3, 801f458 <_dtoa_r+0x2c0>)
 801f2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2c6:	f7e1 f9af 	bl	8000628 <__aeabi_dmul>
 801f2ca:	4602      	mov	r2, r0
 801f2cc:	460b      	mov	r3, r1
 801f2ce:	4620      	mov	r0, r4
 801f2d0:	4629      	mov	r1, r5
 801f2d2:	f7e0 fff3 	bl	80002bc <__adddf3>
 801f2d6:	4604      	mov	r4, r0
 801f2d8:	460d      	mov	r5, r1
 801f2da:	f7e1 fc55 	bl	8000b88 <__aeabi_d2iz>
 801f2de:	2200      	movs	r2, #0
 801f2e0:	4607      	mov	r7, r0
 801f2e2:	2300      	movs	r3, #0
 801f2e4:	4620      	mov	r0, r4
 801f2e6:	4629      	mov	r1, r5
 801f2e8:	f7e1 fc10 	bl	8000b0c <__aeabi_dcmplt>
 801f2ec:	b140      	cbz	r0, 801f300 <_dtoa_r+0x168>
 801f2ee:	4638      	mov	r0, r7
 801f2f0:	f7e1 f930 	bl	8000554 <__aeabi_i2d>
 801f2f4:	4622      	mov	r2, r4
 801f2f6:	462b      	mov	r3, r5
 801f2f8:	f7e1 fbfe 	bl	8000af8 <__aeabi_dcmpeq>
 801f2fc:	b900      	cbnz	r0, 801f300 <_dtoa_r+0x168>
 801f2fe:	3f01      	subs	r7, #1
 801f300:	2f16      	cmp	r7, #22
 801f302:	d851      	bhi.n	801f3a8 <_dtoa_r+0x210>
 801f304:	4b5b      	ldr	r3, [pc, #364]	@ (801f474 <_dtoa_r+0x2dc>)
 801f306:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801f30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f30e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f312:	f7e1 fbfb 	bl	8000b0c <__aeabi_dcmplt>
 801f316:	2800      	cmp	r0, #0
 801f318:	d048      	beq.n	801f3ac <_dtoa_r+0x214>
 801f31a:	3f01      	subs	r7, #1
 801f31c:	2300      	movs	r3, #0
 801f31e:	9312      	str	r3, [sp, #72]	@ 0x48
 801f320:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f322:	1b9b      	subs	r3, r3, r6
 801f324:	1e5a      	subs	r2, r3, #1
 801f326:	bf44      	itt	mi
 801f328:	f1c3 0801 	rsbmi	r8, r3, #1
 801f32c:	2300      	movmi	r3, #0
 801f32e:	9208      	str	r2, [sp, #32]
 801f330:	bf54      	ite	pl
 801f332:	f04f 0800 	movpl.w	r8, #0
 801f336:	9308      	strmi	r3, [sp, #32]
 801f338:	2f00      	cmp	r7, #0
 801f33a:	db39      	blt.n	801f3b0 <_dtoa_r+0x218>
 801f33c:	9b08      	ldr	r3, [sp, #32]
 801f33e:	970f      	str	r7, [sp, #60]	@ 0x3c
 801f340:	443b      	add	r3, r7
 801f342:	9308      	str	r3, [sp, #32]
 801f344:	2300      	movs	r3, #0
 801f346:	930a      	str	r3, [sp, #40]	@ 0x28
 801f348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f34a:	2b09      	cmp	r3, #9
 801f34c:	d864      	bhi.n	801f418 <_dtoa_r+0x280>
 801f34e:	2b05      	cmp	r3, #5
 801f350:	bfc4      	itt	gt
 801f352:	3b04      	subgt	r3, #4
 801f354:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801f356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f358:	f1a3 0302 	sub.w	r3, r3, #2
 801f35c:	bfcc      	ite	gt
 801f35e:	2400      	movgt	r4, #0
 801f360:	2401      	movle	r4, #1
 801f362:	2b03      	cmp	r3, #3
 801f364:	d863      	bhi.n	801f42e <_dtoa_r+0x296>
 801f366:	e8df f003 	tbb	[pc, r3]
 801f36a:	372a      	.short	0x372a
 801f36c:	5535      	.short	0x5535
 801f36e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801f372:	441e      	add	r6, r3
 801f374:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801f378:	2b20      	cmp	r3, #32
 801f37a:	bfc1      	itttt	gt
 801f37c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801f380:	409f      	lslgt	r7, r3
 801f382:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801f386:	fa24 f303 	lsrgt.w	r3, r4, r3
 801f38a:	bfd6      	itet	le
 801f38c:	f1c3 0320 	rsble	r3, r3, #32
 801f390:	ea47 0003 	orrgt.w	r0, r7, r3
 801f394:	fa04 f003 	lslle.w	r0, r4, r3
 801f398:	f7e1 f8cc 	bl	8000534 <__aeabi_ui2d>
 801f39c:	2201      	movs	r2, #1
 801f39e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801f3a2:	3e01      	subs	r6, #1
 801f3a4:	9214      	str	r2, [sp, #80]	@ 0x50
 801f3a6:	e777      	b.n	801f298 <_dtoa_r+0x100>
 801f3a8:	2301      	movs	r3, #1
 801f3aa:	e7b8      	b.n	801f31e <_dtoa_r+0x186>
 801f3ac:	9012      	str	r0, [sp, #72]	@ 0x48
 801f3ae:	e7b7      	b.n	801f320 <_dtoa_r+0x188>
 801f3b0:	427b      	negs	r3, r7
 801f3b2:	930a      	str	r3, [sp, #40]	@ 0x28
 801f3b4:	2300      	movs	r3, #0
 801f3b6:	eba8 0807 	sub.w	r8, r8, r7
 801f3ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f3bc:	e7c4      	b.n	801f348 <_dtoa_r+0x1b0>
 801f3be:	2300      	movs	r3, #0
 801f3c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f3c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f3c4:	2b00      	cmp	r3, #0
 801f3c6:	dc35      	bgt.n	801f434 <_dtoa_r+0x29c>
 801f3c8:	2301      	movs	r3, #1
 801f3ca:	9300      	str	r3, [sp, #0]
 801f3cc:	9307      	str	r3, [sp, #28]
 801f3ce:	461a      	mov	r2, r3
 801f3d0:	920e      	str	r2, [sp, #56]	@ 0x38
 801f3d2:	e00b      	b.n	801f3ec <_dtoa_r+0x254>
 801f3d4:	2301      	movs	r3, #1
 801f3d6:	e7f3      	b.n	801f3c0 <_dtoa_r+0x228>
 801f3d8:	2300      	movs	r3, #0
 801f3da:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f3dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f3de:	18fb      	adds	r3, r7, r3
 801f3e0:	9300      	str	r3, [sp, #0]
 801f3e2:	3301      	adds	r3, #1
 801f3e4:	2b01      	cmp	r3, #1
 801f3e6:	9307      	str	r3, [sp, #28]
 801f3e8:	bfb8      	it	lt
 801f3ea:	2301      	movlt	r3, #1
 801f3ec:	f8db 001c 	ldr.w	r0, [fp, #28]
 801f3f0:	2100      	movs	r1, #0
 801f3f2:	2204      	movs	r2, #4
 801f3f4:	f102 0514 	add.w	r5, r2, #20
 801f3f8:	429d      	cmp	r5, r3
 801f3fa:	d91f      	bls.n	801f43c <_dtoa_r+0x2a4>
 801f3fc:	6041      	str	r1, [r0, #4]
 801f3fe:	4658      	mov	r0, fp
 801f400:	f000 fcd8 	bl	801fdb4 <_Balloc>
 801f404:	4682      	mov	sl, r0
 801f406:	2800      	cmp	r0, #0
 801f408:	d13c      	bne.n	801f484 <_dtoa_r+0x2ec>
 801f40a:	4b1b      	ldr	r3, [pc, #108]	@ (801f478 <_dtoa_r+0x2e0>)
 801f40c:	4602      	mov	r2, r0
 801f40e:	f240 11af 	movw	r1, #431	@ 0x1af
 801f412:	e6d8      	b.n	801f1c6 <_dtoa_r+0x2e>
 801f414:	2301      	movs	r3, #1
 801f416:	e7e0      	b.n	801f3da <_dtoa_r+0x242>
 801f418:	2401      	movs	r4, #1
 801f41a:	2300      	movs	r3, #0
 801f41c:	9309      	str	r3, [sp, #36]	@ 0x24
 801f41e:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f420:	f04f 33ff 	mov.w	r3, #4294967295
 801f424:	9300      	str	r3, [sp, #0]
 801f426:	9307      	str	r3, [sp, #28]
 801f428:	2200      	movs	r2, #0
 801f42a:	2312      	movs	r3, #18
 801f42c:	e7d0      	b.n	801f3d0 <_dtoa_r+0x238>
 801f42e:	2301      	movs	r3, #1
 801f430:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f432:	e7f5      	b.n	801f420 <_dtoa_r+0x288>
 801f434:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f436:	9300      	str	r3, [sp, #0]
 801f438:	9307      	str	r3, [sp, #28]
 801f43a:	e7d7      	b.n	801f3ec <_dtoa_r+0x254>
 801f43c:	3101      	adds	r1, #1
 801f43e:	0052      	lsls	r2, r2, #1
 801f440:	e7d8      	b.n	801f3f4 <_dtoa_r+0x25c>
 801f442:	bf00      	nop
 801f444:	f3af 8000 	nop.w
 801f448:	636f4361 	.word	0x636f4361
 801f44c:	3fd287a7 	.word	0x3fd287a7
 801f450:	8b60c8b3 	.word	0x8b60c8b3
 801f454:	3fc68a28 	.word	0x3fc68a28
 801f458:	509f79fb 	.word	0x509f79fb
 801f45c:	3fd34413 	.word	0x3fd34413
 801f460:	080256ea 	.word	0x080256ea
 801f464:	080257a4 	.word	0x080257a4
 801f468:	7ff00000 	.word	0x7ff00000
 801f46c:	080256c2 	.word	0x080256c2
 801f470:	3ff80000 	.word	0x3ff80000
 801f474:	080258a0 	.word	0x080258a0
 801f478:	080257fc 	.word	0x080257fc
 801f47c:	080257a0 	.word	0x080257a0
 801f480:	080256c1 	.word	0x080256c1
 801f484:	f8db 301c 	ldr.w	r3, [fp, #28]
 801f488:	6018      	str	r0, [r3, #0]
 801f48a:	9b07      	ldr	r3, [sp, #28]
 801f48c:	2b0e      	cmp	r3, #14
 801f48e:	f200 80a4 	bhi.w	801f5da <_dtoa_r+0x442>
 801f492:	2c00      	cmp	r4, #0
 801f494:	f000 80a1 	beq.w	801f5da <_dtoa_r+0x442>
 801f498:	2f00      	cmp	r7, #0
 801f49a:	dd33      	ble.n	801f504 <_dtoa_r+0x36c>
 801f49c:	4bad      	ldr	r3, [pc, #692]	@ (801f754 <_dtoa_r+0x5bc>)
 801f49e:	f007 020f 	and.w	r2, r7, #15
 801f4a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f4a6:	ed93 7b00 	vldr	d7, [r3]
 801f4aa:	05f8      	lsls	r0, r7, #23
 801f4ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 801f4b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 801f4b4:	d516      	bpl.n	801f4e4 <_dtoa_r+0x34c>
 801f4b6:	4ba8      	ldr	r3, [pc, #672]	@ (801f758 <_dtoa_r+0x5c0>)
 801f4b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f4bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801f4c0:	f7e1 f9dc 	bl	800087c <__aeabi_ddiv>
 801f4c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f4c8:	f004 040f 	and.w	r4, r4, #15
 801f4cc:	2603      	movs	r6, #3
 801f4ce:	4da2      	ldr	r5, [pc, #648]	@ (801f758 <_dtoa_r+0x5c0>)
 801f4d0:	b954      	cbnz	r4, 801f4e8 <_dtoa_r+0x350>
 801f4d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f4d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f4da:	f7e1 f9cf 	bl	800087c <__aeabi_ddiv>
 801f4de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f4e2:	e028      	b.n	801f536 <_dtoa_r+0x39e>
 801f4e4:	2602      	movs	r6, #2
 801f4e6:	e7f2      	b.n	801f4ce <_dtoa_r+0x336>
 801f4e8:	07e1      	lsls	r1, r4, #31
 801f4ea:	d508      	bpl.n	801f4fe <_dtoa_r+0x366>
 801f4ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f4f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f4f4:	f7e1 f898 	bl	8000628 <__aeabi_dmul>
 801f4f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f4fc:	3601      	adds	r6, #1
 801f4fe:	1064      	asrs	r4, r4, #1
 801f500:	3508      	adds	r5, #8
 801f502:	e7e5      	b.n	801f4d0 <_dtoa_r+0x338>
 801f504:	f000 80d2 	beq.w	801f6ac <_dtoa_r+0x514>
 801f508:	427c      	negs	r4, r7
 801f50a:	4b92      	ldr	r3, [pc, #584]	@ (801f754 <_dtoa_r+0x5bc>)
 801f50c:	4d92      	ldr	r5, [pc, #584]	@ (801f758 <_dtoa_r+0x5c0>)
 801f50e:	f004 020f 	and.w	r2, r4, #15
 801f512:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f51a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f51e:	f7e1 f883 	bl	8000628 <__aeabi_dmul>
 801f522:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f526:	1124      	asrs	r4, r4, #4
 801f528:	2300      	movs	r3, #0
 801f52a:	2602      	movs	r6, #2
 801f52c:	2c00      	cmp	r4, #0
 801f52e:	f040 80b2 	bne.w	801f696 <_dtoa_r+0x4fe>
 801f532:	2b00      	cmp	r3, #0
 801f534:	d1d3      	bne.n	801f4de <_dtoa_r+0x346>
 801f536:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f538:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801f53c:	2b00      	cmp	r3, #0
 801f53e:	f000 80b7 	beq.w	801f6b0 <_dtoa_r+0x518>
 801f542:	4b86      	ldr	r3, [pc, #536]	@ (801f75c <_dtoa_r+0x5c4>)
 801f544:	2200      	movs	r2, #0
 801f546:	4620      	mov	r0, r4
 801f548:	4629      	mov	r1, r5
 801f54a:	f7e1 fadf 	bl	8000b0c <__aeabi_dcmplt>
 801f54e:	2800      	cmp	r0, #0
 801f550:	f000 80ae 	beq.w	801f6b0 <_dtoa_r+0x518>
 801f554:	9b07      	ldr	r3, [sp, #28]
 801f556:	2b00      	cmp	r3, #0
 801f558:	f000 80aa 	beq.w	801f6b0 <_dtoa_r+0x518>
 801f55c:	9b00      	ldr	r3, [sp, #0]
 801f55e:	2b00      	cmp	r3, #0
 801f560:	dd37      	ble.n	801f5d2 <_dtoa_r+0x43a>
 801f562:	1e7b      	subs	r3, r7, #1
 801f564:	9304      	str	r3, [sp, #16]
 801f566:	4620      	mov	r0, r4
 801f568:	4b7d      	ldr	r3, [pc, #500]	@ (801f760 <_dtoa_r+0x5c8>)
 801f56a:	2200      	movs	r2, #0
 801f56c:	4629      	mov	r1, r5
 801f56e:	f7e1 f85b 	bl	8000628 <__aeabi_dmul>
 801f572:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f576:	9c00      	ldr	r4, [sp, #0]
 801f578:	3601      	adds	r6, #1
 801f57a:	4630      	mov	r0, r6
 801f57c:	f7e0 ffea 	bl	8000554 <__aeabi_i2d>
 801f580:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f584:	f7e1 f850 	bl	8000628 <__aeabi_dmul>
 801f588:	4b76      	ldr	r3, [pc, #472]	@ (801f764 <_dtoa_r+0x5cc>)
 801f58a:	2200      	movs	r2, #0
 801f58c:	f7e0 fe96 	bl	80002bc <__adddf3>
 801f590:	4605      	mov	r5, r0
 801f592:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801f596:	2c00      	cmp	r4, #0
 801f598:	f040 808d 	bne.w	801f6b6 <_dtoa_r+0x51e>
 801f59c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f5a0:	4b71      	ldr	r3, [pc, #452]	@ (801f768 <_dtoa_r+0x5d0>)
 801f5a2:	2200      	movs	r2, #0
 801f5a4:	f7e0 fe88 	bl	80002b8 <__aeabi_dsub>
 801f5a8:	4602      	mov	r2, r0
 801f5aa:	460b      	mov	r3, r1
 801f5ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f5b0:	462a      	mov	r2, r5
 801f5b2:	4633      	mov	r3, r6
 801f5b4:	f7e1 fac8 	bl	8000b48 <__aeabi_dcmpgt>
 801f5b8:	2800      	cmp	r0, #0
 801f5ba:	f040 828b 	bne.w	801fad4 <_dtoa_r+0x93c>
 801f5be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f5c2:	462a      	mov	r2, r5
 801f5c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801f5c8:	f7e1 faa0 	bl	8000b0c <__aeabi_dcmplt>
 801f5cc:	2800      	cmp	r0, #0
 801f5ce:	f040 8128 	bne.w	801f822 <_dtoa_r+0x68a>
 801f5d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801f5d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801f5da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f5dc:	2b00      	cmp	r3, #0
 801f5de:	f2c0 815a 	blt.w	801f896 <_dtoa_r+0x6fe>
 801f5e2:	2f0e      	cmp	r7, #14
 801f5e4:	f300 8157 	bgt.w	801f896 <_dtoa_r+0x6fe>
 801f5e8:	4b5a      	ldr	r3, [pc, #360]	@ (801f754 <_dtoa_r+0x5bc>)
 801f5ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801f5ee:	ed93 7b00 	vldr	d7, [r3]
 801f5f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f5f4:	2b00      	cmp	r3, #0
 801f5f6:	ed8d 7b00 	vstr	d7, [sp]
 801f5fa:	da03      	bge.n	801f604 <_dtoa_r+0x46c>
 801f5fc:	9b07      	ldr	r3, [sp, #28]
 801f5fe:	2b00      	cmp	r3, #0
 801f600:	f340 8101 	ble.w	801f806 <_dtoa_r+0x66e>
 801f604:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801f608:	4656      	mov	r6, sl
 801f60a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f60e:	4620      	mov	r0, r4
 801f610:	4629      	mov	r1, r5
 801f612:	f7e1 f933 	bl	800087c <__aeabi_ddiv>
 801f616:	f7e1 fab7 	bl	8000b88 <__aeabi_d2iz>
 801f61a:	4680      	mov	r8, r0
 801f61c:	f7e0 ff9a 	bl	8000554 <__aeabi_i2d>
 801f620:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f624:	f7e1 f800 	bl	8000628 <__aeabi_dmul>
 801f628:	4602      	mov	r2, r0
 801f62a:	460b      	mov	r3, r1
 801f62c:	4620      	mov	r0, r4
 801f62e:	4629      	mov	r1, r5
 801f630:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801f634:	f7e0 fe40 	bl	80002b8 <__aeabi_dsub>
 801f638:	f806 4b01 	strb.w	r4, [r6], #1
 801f63c:	9d07      	ldr	r5, [sp, #28]
 801f63e:	eba6 040a 	sub.w	r4, r6, sl
 801f642:	42a5      	cmp	r5, r4
 801f644:	4602      	mov	r2, r0
 801f646:	460b      	mov	r3, r1
 801f648:	f040 8117 	bne.w	801f87a <_dtoa_r+0x6e2>
 801f64c:	f7e0 fe36 	bl	80002bc <__adddf3>
 801f650:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f654:	4604      	mov	r4, r0
 801f656:	460d      	mov	r5, r1
 801f658:	f7e1 fa76 	bl	8000b48 <__aeabi_dcmpgt>
 801f65c:	2800      	cmp	r0, #0
 801f65e:	f040 80f9 	bne.w	801f854 <_dtoa_r+0x6bc>
 801f662:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f666:	4620      	mov	r0, r4
 801f668:	4629      	mov	r1, r5
 801f66a:	f7e1 fa45 	bl	8000af8 <__aeabi_dcmpeq>
 801f66e:	b118      	cbz	r0, 801f678 <_dtoa_r+0x4e0>
 801f670:	f018 0f01 	tst.w	r8, #1
 801f674:	f040 80ee 	bne.w	801f854 <_dtoa_r+0x6bc>
 801f678:	4649      	mov	r1, r9
 801f67a:	4658      	mov	r0, fp
 801f67c:	f000 fbda 	bl	801fe34 <_Bfree>
 801f680:	2300      	movs	r3, #0
 801f682:	7033      	strb	r3, [r6, #0]
 801f684:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f686:	3701      	adds	r7, #1
 801f688:	601f      	str	r7, [r3, #0]
 801f68a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f68c:	2b00      	cmp	r3, #0
 801f68e:	f000 831d 	beq.w	801fccc <_dtoa_r+0xb34>
 801f692:	601e      	str	r6, [r3, #0]
 801f694:	e31a      	b.n	801fccc <_dtoa_r+0xb34>
 801f696:	07e2      	lsls	r2, r4, #31
 801f698:	d505      	bpl.n	801f6a6 <_dtoa_r+0x50e>
 801f69a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f69e:	f7e0 ffc3 	bl	8000628 <__aeabi_dmul>
 801f6a2:	3601      	adds	r6, #1
 801f6a4:	2301      	movs	r3, #1
 801f6a6:	1064      	asrs	r4, r4, #1
 801f6a8:	3508      	adds	r5, #8
 801f6aa:	e73f      	b.n	801f52c <_dtoa_r+0x394>
 801f6ac:	2602      	movs	r6, #2
 801f6ae:	e742      	b.n	801f536 <_dtoa_r+0x39e>
 801f6b0:	9c07      	ldr	r4, [sp, #28]
 801f6b2:	9704      	str	r7, [sp, #16]
 801f6b4:	e761      	b.n	801f57a <_dtoa_r+0x3e2>
 801f6b6:	4b27      	ldr	r3, [pc, #156]	@ (801f754 <_dtoa_r+0x5bc>)
 801f6b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f6ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f6be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801f6c2:	4454      	add	r4, sl
 801f6c4:	2900      	cmp	r1, #0
 801f6c6:	d053      	beq.n	801f770 <_dtoa_r+0x5d8>
 801f6c8:	4928      	ldr	r1, [pc, #160]	@ (801f76c <_dtoa_r+0x5d4>)
 801f6ca:	2000      	movs	r0, #0
 801f6cc:	f7e1 f8d6 	bl	800087c <__aeabi_ddiv>
 801f6d0:	4633      	mov	r3, r6
 801f6d2:	462a      	mov	r2, r5
 801f6d4:	f7e0 fdf0 	bl	80002b8 <__aeabi_dsub>
 801f6d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f6dc:	4656      	mov	r6, sl
 801f6de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f6e2:	f7e1 fa51 	bl	8000b88 <__aeabi_d2iz>
 801f6e6:	4605      	mov	r5, r0
 801f6e8:	f7e0 ff34 	bl	8000554 <__aeabi_i2d>
 801f6ec:	4602      	mov	r2, r0
 801f6ee:	460b      	mov	r3, r1
 801f6f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f6f4:	f7e0 fde0 	bl	80002b8 <__aeabi_dsub>
 801f6f8:	3530      	adds	r5, #48	@ 0x30
 801f6fa:	4602      	mov	r2, r0
 801f6fc:	460b      	mov	r3, r1
 801f6fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f702:	f806 5b01 	strb.w	r5, [r6], #1
 801f706:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f70a:	f7e1 f9ff 	bl	8000b0c <__aeabi_dcmplt>
 801f70e:	2800      	cmp	r0, #0
 801f710:	d171      	bne.n	801f7f6 <_dtoa_r+0x65e>
 801f712:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f716:	4911      	ldr	r1, [pc, #68]	@ (801f75c <_dtoa_r+0x5c4>)
 801f718:	2000      	movs	r0, #0
 801f71a:	f7e0 fdcd 	bl	80002b8 <__aeabi_dsub>
 801f71e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f722:	f7e1 f9f3 	bl	8000b0c <__aeabi_dcmplt>
 801f726:	2800      	cmp	r0, #0
 801f728:	f040 8095 	bne.w	801f856 <_dtoa_r+0x6be>
 801f72c:	42a6      	cmp	r6, r4
 801f72e:	f43f af50 	beq.w	801f5d2 <_dtoa_r+0x43a>
 801f732:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801f736:	4b0a      	ldr	r3, [pc, #40]	@ (801f760 <_dtoa_r+0x5c8>)
 801f738:	2200      	movs	r2, #0
 801f73a:	f7e0 ff75 	bl	8000628 <__aeabi_dmul>
 801f73e:	4b08      	ldr	r3, [pc, #32]	@ (801f760 <_dtoa_r+0x5c8>)
 801f740:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f744:	2200      	movs	r2, #0
 801f746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f74a:	f7e0 ff6d 	bl	8000628 <__aeabi_dmul>
 801f74e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f752:	e7c4      	b.n	801f6de <_dtoa_r+0x546>
 801f754:	080258a0 	.word	0x080258a0
 801f758:	08025878 	.word	0x08025878
 801f75c:	3ff00000 	.word	0x3ff00000
 801f760:	40240000 	.word	0x40240000
 801f764:	401c0000 	.word	0x401c0000
 801f768:	40140000 	.word	0x40140000
 801f76c:	3fe00000 	.word	0x3fe00000
 801f770:	4631      	mov	r1, r6
 801f772:	4628      	mov	r0, r5
 801f774:	f7e0 ff58 	bl	8000628 <__aeabi_dmul>
 801f778:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f77c:	9415      	str	r4, [sp, #84]	@ 0x54
 801f77e:	4656      	mov	r6, sl
 801f780:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f784:	f7e1 fa00 	bl	8000b88 <__aeabi_d2iz>
 801f788:	4605      	mov	r5, r0
 801f78a:	f7e0 fee3 	bl	8000554 <__aeabi_i2d>
 801f78e:	4602      	mov	r2, r0
 801f790:	460b      	mov	r3, r1
 801f792:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f796:	f7e0 fd8f 	bl	80002b8 <__aeabi_dsub>
 801f79a:	3530      	adds	r5, #48	@ 0x30
 801f79c:	f806 5b01 	strb.w	r5, [r6], #1
 801f7a0:	4602      	mov	r2, r0
 801f7a2:	460b      	mov	r3, r1
 801f7a4:	42a6      	cmp	r6, r4
 801f7a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f7aa:	f04f 0200 	mov.w	r2, #0
 801f7ae:	d124      	bne.n	801f7fa <_dtoa_r+0x662>
 801f7b0:	4bac      	ldr	r3, [pc, #688]	@ (801fa64 <_dtoa_r+0x8cc>)
 801f7b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801f7b6:	f7e0 fd81 	bl	80002bc <__adddf3>
 801f7ba:	4602      	mov	r2, r0
 801f7bc:	460b      	mov	r3, r1
 801f7be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f7c2:	f7e1 f9c1 	bl	8000b48 <__aeabi_dcmpgt>
 801f7c6:	2800      	cmp	r0, #0
 801f7c8:	d145      	bne.n	801f856 <_dtoa_r+0x6be>
 801f7ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f7ce:	49a5      	ldr	r1, [pc, #660]	@ (801fa64 <_dtoa_r+0x8cc>)
 801f7d0:	2000      	movs	r0, #0
 801f7d2:	f7e0 fd71 	bl	80002b8 <__aeabi_dsub>
 801f7d6:	4602      	mov	r2, r0
 801f7d8:	460b      	mov	r3, r1
 801f7da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f7de:	f7e1 f995 	bl	8000b0c <__aeabi_dcmplt>
 801f7e2:	2800      	cmp	r0, #0
 801f7e4:	f43f aef5 	beq.w	801f5d2 <_dtoa_r+0x43a>
 801f7e8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801f7ea:	1e73      	subs	r3, r6, #1
 801f7ec:	9315      	str	r3, [sp, #84]	@ 0x54
 801f7ee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801f7f2:	2b30      	cmp	r3, #48	@ 0x30
 801f7f4:	d0f8      	beq.n	801f7e8 <_dtoa_r+0x650>
 801f7f6:	9f04      	ldr	r7, [sp, #16]
 801f7f8:	e73e      	b.n	801f678 <_dtoa_r+0x4e0>
 801f7fa:	4b9b      	ldr	r3, [pc, #620]	@ (801fa68 <_dtoa_r+0x8d0>)
 801f7fc:	f7e0 ff14 	bl	8000628 <__aeabi_dmul>
 801f800:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f804:	e7bc      	b.n	801f780 <_dtoa_r+0x5e8>
 801f806:	d10c      	bne.n	801f822 <_dtoa_r+0x68a>
 801f808:	4b98      	ldr	r3, [pc, #608]	@ (801fa6c <_dtoa_r+0x8d4>)
 801f80a:	2200      	movs	r2, #0
 801f80c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f810:	f7e0 ff0a 	bl	8000628 <__aeabi_dmul>
 801f814:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f818:	f7e1 f98c 	bl	8000b34 <__aeabi_dcmpge>
 801f81c:	2800      	cmp	r0, #0
 801f81e:	f000 8157 	beq.w	801fad0 <_dtoa_r+0x938>
 801f822:	2400      	movs	r4, #0
 801f824:	4625      	mov	r5, r4
 801f826:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f828:	43db      	mvns	r3, r3
 801f82a:	9304      	str	r3, [sp, #16]
 801f82c:	4656      	mov	r6, sl
 801f82e:	2700      	movs	r7, #0
 801f830:	4621      	mov	r1, r4
 801f832:	4658      	mov	r0, fp
 801f834:	f000 fafe 	bl	801fe34 <_Bfree>
 801f838:	2d00      	cmp	r5, #0
 801f83a:	d0dc      	beq.n	801f7f6 <_dtoa_r+0x65e>
 801f83c:	b12f      	cbz	r7, 801f84a <_dtoa_r+0x6b2>
 801f83e:	42af      	cmp	r7, r5
 801f840:	d003      	beq.n	801f84a <_dtoa_r+0x6b2>
 801f842:	4639      	mov	r1, r7
 801f844:	4658      	mov	r0, fp
 801f846:	f000 faf5 	bl	801fe34 <_Bfree>
 801f84a:	4629      	mov	r1, r5
 801f84c:	4658      	mov	r0, fp
 801f84e:	f000 faf1 	bl	801fe34 <_Bfree>
 801f852:	e7d0      	b.n	801f7f6 <_dtoa_r+0x65e>
 801f854:	9704      	str	r7, [sp, #16]
 801f856:	4633      	mov	r3, r6
 801f858:	461e      	mov	r6, r3
 801f85a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f85e:	2a39      	cmp	r2, #57	@ 0x39
 801f860:	d107      	bne.n	801f872 <_dtoa_r+0x6da>
 801f862:	459a      	cmp	sl, r3
 801f864:	d1f8      	bne.n	801f858 <_dtoa_r+0x6c0>
 801f866:	9a04      	ldr	r2, [sp, #16]
 801f868:	3201      	adds	r2, #1
 801f86a:	9204      	str	r2, [sp, #16]
 801f86c:	2230      	movs	r2, #48	@ 0x30
 801f86e:	f88a 2000 	strb.w	r2, [sl]
 801f872:	781a      	ldrb	r2, [r3, #0]
 801f874:	3201      	adds	r2, #1
 801f876:	701a      	strb	r2, [r3, #0]
 801f878:	e7bd      	b.n	801f7f6 <_dtoa_r+0x65e>
 801f87a:	4b7b      	ldr	r3, [pc, #492]	@ (801fa68 <_dtoa_r+0x8d0>)
 801f87c:	2200      	movs	r2, #0
 801f87e:	f7e0 fed3 	bl	8000628 <__aeabi_dmul>
 801f882:	2200      	movs	r2, #0
 801f884:	2300      	movs	r3, #0
 801f886:	4604      	mov	r4, r0
 801f888:	460d      	mov	r5, r1
 801f88a:	f7e1 f935 	bl	8000af8 <__aeabi_dcmpeq>
 801f88e:	2800      	cmp	r0, #0
 801f890:	f43f aebb 	beq.w	801f60a <_dtoa_r+0x472>
 801f894:	e6f0      	b.n	801f678 <_dtoa_r+0x4e0>
 801f896:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f898:	2a00      	cmp	r2, #0
 801f89a:	f000 80db 	beq.w	801fa54 <_dtoa_r+0x8bc>
 801f89e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f8a0:	2a01      	cmp	r2, #1
 801f8a2:	f300 80bf 	bgt.w	801fa24 <_dtoa_r+0x88c>
 801f8a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f8a8:	2a00      	cmp	r2, #0
 801f8aa:	f000 80b7 	beq.w	801fa1c <_dtoa_r+0x884>
 801f8ae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801f8b2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f8b4:	4646      	mov	r6, r8
 801f8b6:	9a08      	ldr	r2, [sp, #32]
 801f8b8:	2101      	movs	r1, #1
 801f8ba:	441a      	add	r2, r3
 801f8bc:	4658      	mov	r0, fp
 801f8be:	4498      	add	r8, r3
 801f8c0:	9208      	str	r2, [sp, #32]
 801f8c2:	f000 fbb5 	bl	8020030 <__i2b>
 801f8c6:	4605      	mov	r5, r0
 801f8c8:	b15e      	cbz	r6, 801f8e2 <_dtoa_r+0x74a>
 801f8ca:	9b08      	ldr	r3, [sp, #32]
 801f8cc:	2b00      	cmp	r3, #0
 801f8ce:	dd08      	ble.n	801f8e2 <_dtoa_r+0x74a>
 801f8d0:	42b3      	cmp	r3, r6
 801f8d2:	9a08      	ldr	r2, [sp, #32]
 801f8d4:	bfa8      	it	ge
 801f8d6:	4633      	movge	r3, r6
 801f8d8:	eba8 0803 	sub.w	r8, r8, r3
 801f8dc:	1af6      	subs	r6, r6, r3
 801f8de:	1ad3      	subs	r3, r2, r3
 801f8e0:	9308      	str	r3, [sp, #32]
 801f8e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f8e4:	b1f3      	cbz	r3, 801f924 <_dtoa_r+0x78c>
 801f8e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f8e8:	2b00      	cmp	r3, #0
 801f8ea:	f000 80b7 	beq.w	801fa5c <_dtoa_r+0x8c4>
 801f8ee:	b18c      	cbz	r4, 801f914 <_dtoa_r+0x77c>
 801f8f0:	4629      	mov	r1, r5
 801f8f2:	4622      	mov	r2, r4
 801f8f4:	4658      	mov	r0, fp
 801f8f6:	f000 fc5b 	bl	80201b0 <__pow5mult>
 801f8fa:	464a      	mov	r2, r9
 801f8fc:	4601      	mov	r1, r0
 801f8fe:	4605      	mov	r5, r0
 801f900:	4658      	mov	r0, fp
 801f902:	f000 fbab 	bl	802005c <__multiply>
 801f906:	4649      	mov	r1, r9
 801f908:	9004      	str	r0, [sp, #16]
 801f90a:	4658      	mov	r0, fp
 801f90c:	f000 fa92 	bl	801fe34 <_Bfree>
 801f910:	9b04      	ldr	r3, [sp, #16]
 801f912:	4699      	mov	r9, r3
 801f914:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f916:	1b1a      	subs	r2, r3, r4
 801f918:	d004      	beq.n	801f924 <_dtoa_r+0x78c>
 801f91a:	4649      	mov	r1, r9
 801f91c:	4658      	mov	r0, fp
 801f91e:	f000 fc47 	bl	80201b0 <__pow5mult>
 801f922:	4681      	mov	r9, r0
 801f924:	2101      	movs	r1, #1
 801f926:	4658      	mov	r0, fp
 801f928:	f000 fb82 	bl	8020030 <__i2b>
 801f92c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f92e:	4604      	mov	r4, r0
 801f930:	2b00      	cmp	r3, #0
 801f932:	f000 81cf 	beq.w	801fcd4 <_dtoa_r+0xb3c>
 801f936:	461a      	mov	r2, r3
 801f938:	4601      	mov	r1, r0
 801f93a:	4658      	mov	r0, fp
 801f93c:	f000 fc38 	bl	80201b0 <__pow5mult>
 801f940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f942:	2b01      	cmp	r3, #1
 801f944:	4604      	mov	r4, r0
 801f946:	f300 8095 	bgt.w	801fa74 <_dtoa_r+0x8dc>
 801f94a:	9b02      	ldr	r3, [sp, #8]
 801f94c:	2b00      	cmp	r3, #0
 801f94e:	f040 8087 	bne.w	801fa60 <_dtoa_r+0x8c8>
 801f952:	9b03      	ldr	r3, [sp, #12]
 801f954:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f958:	2b00      	cmp	r3, #0
 801f95a:	f040 8089 	bne.w	801fa70 <_dtoa_r+0x8d8>
 801f95e:	9b03      	ldr	r3, [sp, #12]
 801f960:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801f964:	0d1b      	lsrs	r3, r3, #20
 801f966:	051b      	lsls	r3, r3, #20
 801f968:	b12b      	cbz	r3, 801f976 <_dtoa_r+0x7de>
 801f96a:	9b08      	ldr	r3, [sp, #32]
 801f96c:	3301      	adds	r3, #1
 801f96e:	9308      	str	r3, [sp, #32]
 801f970:	f108 0801 	add.w	r8, r8, #1
 801f974:	2301      	movs	r3, #1
 801f976:	930a      	str	r3, [sp, #40]	@ 0x28
 801f978:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f97a:	2b00      	cmp	r3, #0
 801f97c:	f000 81b0 	beq.w	801fce0 <_dtoa_r+0xb48>
 801f980:	6923      	ldr	r3, [r4, #16]
 801f982:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801f986:	6918      	ldr	r0, [r3, #16]
 801f988:	f000 fb06 	bl	801ff98 <__hi0bits>
 801f98c:	f1c0 0020 	rsb	r0, r0, #32
 801f990:	9b08      	ldr	r3, [sp, #32]
 801f992:	4418      	add	r0, r3
 801f994:	f010 001f 	ands.w	r0, r0, #31
 801f998:	d077      	beq.n	801fa8a <_dtoa_r+0x8f2>
 801f99a:	f1c0 0320 	rsb	r3, r0, #32
 801f99e:	2b04      	cmp	r3, #4
 801f9a0:	dd6b      	ble.n	801fa7a <_dtoa_r+0x8e2>
 801f9a2:	9b08      	ldr	r3, [sp, #32]
 801f9a4:	f1c0 001c 	rsb	r0, r0, #28
 801f9a8:	4403      	add	r3, r0
 801f9aa:	4480      	add	r8, r0
 801f9ac:	4406      	add	r6, r0
 801f9ae:	9308      	str	r3, [sp, #32]
 801f9b0:	f1b8 0f00 	cmp.w	r8, #0
 801f9b4:	dd05      	ble.n	801f9c2 <_dtoa_r+0x82a>
 801f9b6:	4649      	mov	r1, r9
 801f9b8:	4642      	mov	r2, r8
 801f9ba:	4658      	mov	r0, fp
 801f9bc:	f000 fc52 	bl	8020264 <__lshift>
 801f9c0:	4681      	mov	r9, r0
 801f9c2:	9b08      	ldr	r3, [sp, #32]
 801f9c4:	2b00      	cmp	r3, #0
 801f9c6:	dd05      	ble.n	801f9d4 <_dtoa_r+0x83c>
 801f9c8:	4621      	mov	r1, r4
 801f9ca:	461a      	mov	r2, r3
 801f9cc:	4658      	mov	r0, fp
 801f9ce:	f000 fc49 	bl	8020264 <__lshift>
 801f9d2:	4604      	mov	r4, r0
 801f9d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f9d6:	2b00      	cmp	r3, #0
 801f9d8:	d059      	beq.n	801fa8e <_dtoa_r+0x8f6>
 801f9da:	4621      	mov	r1, r4
 801f9dc:	4648      	mov	r0, r9
 801f9de:	f000 fcad 	bl	802033c <__mcmp>
 801f9e2:	2800      	cmp	r0, #0
 801f9e4:	da53      	bge.n	801fa8e <_dtoa_r+0x8f6>
 801f9e6:	1e7b      	subs	r3, r7, #1
 801f9e8:	9304      	str	r3, [sp, #16]
 801f9ea:	4649      	mov	r1, r9
 801f9ec:	2300      	movs	r3, #0
 801f9ee:	220a      	movs	r2, #10
 801f9f0:	4658      	mov	r0, fp
 801f9f2:	f000 fa41 	bl	801fe78 <__multadd>
 801f9f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f9f8:	4681      	mov	r9, r0
 801f9fa:	2b00      	cmp	r3, #0
 801f9fc:	f000 8172 	beq.w	801fce4 <_dtoa_r+0xb4c>
 801fa00:	2300      	movs	r3, #0
 801fa02:	4629      	mov	r1, r5
 801fa04:	220a      	movs	r2, #10
 801fa06:	4658      	mov	r0, fp
 801fa08:	f000 fa36 	bl	801fe78 <__multadd>
 801fa0c:	9b00      	ldr	r3, [sp, #0]
 801fa0e:	2b00      	cmp	r3, #0
 801fa10:	4605      	mov	r5, r0
 801fa12:	dc67      	bgt.n	801fae4 <_dtoa_r+0x94c>
 801fa14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fa16:	2b02      	cmp	r3, #2
 801fa18:	dc41      	bgt.n	801fa9e <_dtoa_r+0x906>
 801fa1a:	e063      	b.n	801fae4 <_dtoa_r+0x94c>
 801fa1c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801fa1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801fa22:	e746      	b.n	801f8b2 <_dtoa_r+0x71a>
 801fa24:	9b07      	ldr	r3, [sp, #28]
 801fa26:	1e5c      	subs	r4, r3, #1
 801fa28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fa2a:	42a3      	cmp	r3, r4
 801fa2c:	bfbf      	itttt	lt
 801fa2e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801fa30:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801fa32:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801fa34:	1ae3      	sublt	r3, r4, r3
 801fa36:	bfb4      	ite	lt
 801fa38:	18d2      	addlt	r2, r2, r3
 801fa3a:	1b1c      	subge	r4, r3, r4
 801fa3c:	9b07      	ldr	r3, [sp, #28]
 801fa3e:	bfbc      	itt	lt
 801fa40:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801fa42:	2400      	movlt	r4, #0
 801fa44:	2b00      	cmp	r3, #0
 801fa46:	bfb5      	itete	lt
 801fa48:	eba8 0603 	sublt.w	r6, r8, r3
 801fa4c:	9b07      	ldrge	r3, [sp, #28]
 801fa4e:	2300      	movlt	r3, #0
 801fa50:	4646      	movge	r6, r8
 801fa52:	e730      	b.n	801f8b6 <_dtoa_r+0x71e>
 801fa54:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801fa56:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801fa58:	4646      	mov	r6, r8
 801fa5a:	e735      	b.n	801f8c8 <_dtoa_r+0x730>
 801fa5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fa5e:	e75c      	b.n	801f91a <_dtoa_r+0x782>
 801fa60:	2300      	movs	r3, #0
 801fa62:	e788      	b.n	801f976 <_dtoa_r+0x7de>
 801fa64:	3fe00000 	.word	0x3fe00000
 801fa68:	40240000 	.word	0x40240000
 801fa6c:	40140000 	.word	0x40140000
 801fa70:	9b02      	ldr	r3, [sp, #8]
 801fa72:	e780      	b.n	801f976 <_dtoa_r+0x7de>
 801fa74:	2300      	movs	r3, #0
 801fa76:	930a      	str	r3, [sp, #40]	@ 0x28
 801fa78:	e782      	b.n	801f980 <_dtoa_r+0x7e8>
 801fa7a:	d099      	beq.n	801f9b0 <_dtoa_r+0x818>
 801fa7c:	9a08      	ldr	r2, [sp, #32]
 801fa7e:	331c      	adds	r3, #28
 801fa80:	441a      	add	r2, r3
 801fa82:	4498      	add	r8, r3
 801fa84:	441e      	add	r6, r3
 801fa86:	9208      	str	r2, [sp, #32]
 801fa88:	e792      	b.n	801f9b0 <_dtoa_r+0x818>
 801fa8a:	4603      	mov	r3, r0
 801fa8c:	e7f6      	b.n	801fa7c <_dtoa_r+0x8e4>
 801fa8e:	9b07      	ldr	r3, [sp, #28]
 801fa90:	9704      	str	r7, [sp, #16]
 801fa92:	2b00      	cmp	r3, #0
 801fa94:	dc20      	bgt.n	801fad8 <_dtoa_r+0x940>
 801fa96:	9300      	str	r3, [sp, #0]
 801fa98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fa9a:	2b02      	cmp	r3, #2
 801fa9c:	dd1e      	ble.n	801fadc <_dtoa_r+0x944>
 801fa9e:	9b00      	ldr	r3, [sp, #0]
 801faa0:	2b00      	cmp	r3, #0
 801faa2:	f47f aec0 	bne.w	801f826 <_dtoa_r+0x68e>
 801faa6:	4621      	mov	r1, r4
 801faa8:	2205      	movs	r2, #5
 801faaa:	4658      	mov	r0, fp
 801faac:	f000 f9e4 	bl	801fe78 <__multadd>
 801fab0:	4601      	mov	r1, r0
 801fab2:	4604      	mov	r4, r0
 801fab4:	4648      	mov	r0, r9
 801fab6:	f000 fc41 	bl	802033c <__mcmp>
 801faba:	2800      	cmp	r0, #0
 801fabc:	f77f aeb3 	ble.w	801f826 <_dtoa_r+0x68e>
 801fac0:	4656      	mov	r6, sl
 801fac2:	2331      	movs	r3, #49	@ 0x31
 801fac4:	f806 3b01 	strb.w	r3, [r6], #1
 801fac8:	9b04      	ldr	r3, [sp, #16]
 801faca:	3301      	adds	r3, #1
 801facc:	9304      	str	r3, [sp, #16]
 801face:	e6ae      	b.n	801f82e <_dtoa_r+0x696>
 801fad0:	9c07      	ldr	r4, [sp, #28]
 801fad2:	9704      	str	r7, [sp, #16]
 801fad4:	4625      	mov	r5, r4
 801fad6:	e7f3      	b.n	801fac0 <_dtoa_r+0x928>
 801fad8:	9b07      	ldr	r3, [sp, #28]
 801fada:	9300      	str	r3, [sp, #0]
 801fadc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fade:	2b00      	cmp	r3, #0
 801fae0:	f000 8104 	beq.w	801fcec <_dtoa_r+0xb54>
 801fae4:	2e00      	cmp	r6, #0
 801fae6:	dd05      	ble.n	801faf4 <_dtoa_r+0x95c>
 801fae8:	4629      	mov	r1, r5
 801faea:	4632      	mov	r2, r6
 801faec:	4658      	mov	r0, fp
 801faee:	f000 fbb9 	bl	8020264 <__lshift>
 801faf2:	4605      	mov	r5, r0
 801faf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801faf6:	2b00      	cmp	r3, #0
 801faf8:	d05a      	beq.n	801fbb0 <_dtoa_r+0xa18>
 801fafa:	6869      	ldr	r1, [r5, #4]
 801fafc:	4658      	mov	r0, fp
 801fafe:	f000 f959 	bl	801fdb4 <_Balloc>
 801fb02:	4606      	mov	r6, r0
 801fb04:	b928      	cbnz	r0, 801fb12 <_dtoa_r+0x97a>
 801fb06:	4b84      	ldr	r3, [pc, #528]	@ (801fd18 <_dtoa_r+0xb80>)
 801fb08:	4602      	mov	r2, r0
 801fb0a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801fb0e:	f7ff bb5a 	b.w	801f1c6 <_dtoa_r+0x2e>
 801fb12:	692a      	ldr	r2, [r5, #16]
 801fb14:	3202      	adds	r2, #2
 801fb16:	0092      	lsls	r2, r2, #2
 801fb18:	f105 010c 	add.w	r1, r5, #12
 801fb1c:	300c      	adds	r0, #12
 801fb1e:	f7ff fa80 	bl	801f022 <memcpy>
 801fb22:	2201      	movs	r2, #1
 801fb24:	4631      	mov	r1, r6
 801fb26:	4658      	mov	r0, fp
 801fb28:	f000 fb9c 	bl	8020264 <__lshift>
 801fb2c:	f10a 0301 	add.w	r3, sl, #1
 801fb30:	9307      	str	r3, [sp, #28]
 801fb32:	9b00      	ldr	r3, [sp, #0]
 801fb34:	4453      	add	r3, sl
 801fb36:	930b      	str	r3, [sp, #44]	@ 0x2c
 801fb38:	9b02      	ldr	r3, [sp, #8]
 801fb3a:	f003 0301 	and.w	r3, r3, #1
 801fb3e:	462f      	mov	r7, r5
 801fb40:	930a      	str	r3, [sp, #40]	@ 0x28
 801fb42:	4605      	mov	r5, r0
 801fb44:	9b07      	ldr	r3, [sp, #28]
 801fb46:	4621      	mov	r1, r4
 801fb48:	3b01      	subs	r3, #1
 801fb4a:	4648      	mov	r0, r9
 801fb4c:	9300      	str	r3, [sp, #0]
 801fb4e:	f7ff fa9b 	bl	801f088 <quorem>
 801fb52:	4639      	mov	r1, r7
 801fb54:	9002      	str	r0, [sp, #8]
 801fb56:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801fb5a:	4648      	mov	r0, r9
 801fb5c:	f000 fbee 	bl	802033c <__mcmp>
 801fb60:	462a      	mov	r2, r5
 801fb62:	9008      	str	r0, [sp, #32]
 801fb64:	4621      	mov	r1, r4
 801fb66:	4658      	mov	r0, fp
 801fb68:	f000 fc04 	bl	8020374 <__mdiff>
 801fb6c:	68c2      	ldr	r2, [r0, #12]
 801fb6e:	4606      	mov	r6, r0
 801fb70:	bb02      	cbnz	r2, 801fbb4 <_dtoa_r+0xa1c>
 801fb72:	4601      	mov	r1, r0
 801fb74:	4648      	mov	r0, r9
 801fb76:	f000 fbe1 	bl	802033c <__mcmp>
 801fb7a:	4602      	mov	r2, r0
 801fb7c:	4631      	mov	r1, r6
 801fb7e:	4658      	mov	r0, fp
 801fb80:	920e      	str	r2, [sp, #56]	@ 0x38
 801fb82:	f000 f957 	bl	801fe34 <_Bfree>
 801fb86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fb88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fb8a:	9e07      	ldr	r6, [sp, #28]
 801fb8c:	ea43 0102 	orr.w	r1, r3, r2
 801fb90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fb92:	4319      	orrs	r1, r3
 801fb94:	d110      	bne.n	801fbb8 <_dtoa_r+0xa20>
 801fb96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801fb9a:	d029      	beq.n	801fbf0 <_dtoa_r+0xa58>
 801fb9c:	9b08      	ldr	r3, [sp, #32]
 801fb9e:	2b00      	cmp	r3, #0
 801fba0:	dd02      	ble.n	801fba8 <_dtoa_r+0xa10>
 801fba2:	9b02      	ldr	r3, [sp, #8]
 801fba4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801fba8:	9b00      	ldr	r3, [sp, #0]
 801fbaa:	f883 8000 	strb.w	r8, [r3]
 801fbae:	e63f      	b.n	801f830 <_dtoa_r+0x698>
 801fbb0:	4628      	mov	r0, r5
 801fbb2:	e7bb      	b.n	801fb2c <_dtoa_r+0x994>
 801fbb4:	2201      	movs	r2, #1
 801fbb6:	e7e1      	b.n	801fb7c <_dtoa_r+0x9e4>
 801fbb8:	9b08      	ldr	r3, [sp, #32]
 801fbba:	2b00      	cmp	r3, #0
 801fbbc:	db04      	blt.n	801fbc8 <_dtoa_r+0xa30>
 801fbbe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801fbc0:	430b      	orrs	r3, r1
 801fbc2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fbc4:	430b      	orrs	r3, r1
 801fbc6:	d120      	bne.n	801fc0a <_dtoa_r+0xa72>
 801fbc8:	2a00      	cmp	r2, #0
 801fbca:	dded      	ble.n	801fba8 <_dtoa_r+0xa10>
 801fbcc:	4649      	mov	r1, r9
 801fbce:	2201      	movs	r2, #1
 801fbd0:	4658      	mov	r0, fp
 801fbd2:	f000 fb47 	bl	8020264 <__lshift>
 801fbd6:	4621      	mov	r1, r4
 801fbd8:	4681      	mov	r9, r0
 801fbda:	f000 fbaf 	bl	802033c <__mcmp>
 801fbde:	2800      	cmp	r0, #0
 801fbe0:	dc03      	bgt.n	801fbea <_dtoa_r+0xa52>
 801fbe2:	d1e1      	bne.n	801fba8 <_dtoa_r+0xa10>
 801fbe4:	f018 0f01 	tst.w	r8, #1
 801fbe8:	d0de      	beq.n	801fba8 <_dtoa_r+0xa10>
 801fbea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801fbee:	d1d8      	bne.n	801fba2 <_dtoa_r+0xa0a>
 801fbf0:	9a00      	ldr	r2, [sp, #0]
 801fbf2:	2339      	movs	r3, #57	@ 0x39
 801fbf4:	7013      	strb	r3, [r2, #0]
 801fbf6:	4633      	mov	r3, r6
 801fbf8:	461e      	mov	r6, r3
 801fbfa:	3b01      	subs	r3, #1
 801fbfc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801fc00:	2a39      	cmp	r2, #57	@ 0x39
 801fc02:	d052      	beq.n	801fcaa <_dtoa_r+0xb12>
 801fc04:	3201      	adds	r2, #1
 801fc06:	701a      	strb	r2, [r3, #0]
 801fc08:	e612      	b.n	801f830 <_dtoa_r+0x698>
 801fc0a:	2a00      	cmp	r2, #0
 801fc0c:	dd07      	ble.n	801fc1e <_dtoa_r+0xa86>
 801fc0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801fc12:	d0ed      	beq.n	801fbf0 <_dtoa_r+0xa58>
 801fc14:	9a00      	ldr	r2, [sp, #0]
 801fc16:	f108 0301 	add.w	r3, r8, #1
 801fc1a:	7013      	strb	r3, [r2, #0]
 801fc1c:	e608      	b.n	801f830 <_dtoa_r+0x698>
 801fc1e:	9b07      	ldr	r3, [sp, #28]
 801fc20:	9a07      	ldr	r2, [sp, #28]
 801fc22:	f803 8c01 	strb.w	r8, [r3, #-1]
 801fc26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fc28:	4293      	cmp	r3, r2
 801fc2a:	d028      	beq.n	801fc7e <_dtoa_r+0xae6>
 801fc2c:	4649      	mov	r1, r9
 801fc2e:	2300      	movs	r3, #0
 801fc30:	220a      	movs	r2, #10
 801fc32:	4658      	mov	r0, fp
 801fc34:	f000 f920 	bl	801fe78 <__multadd>
 801fc38:	42af      	cmp	r7, r5
 801fc3a:	4681      	mov	r9, r0
 801fc3c:	f04f 0300 	mov.w	r3, #0
 801fc40:	f04f 020a 	mov.w	r2, #10
 801fc44:	4639      	mov	r1, r7
 801fc46:	4658      	mov	r0, fp
 801fc48:	d107      	bne.n	801fc5a <_dtoa_r+0xac2>
 801fc4a:	f000 f915 	bl	801fe78 <__multadd>
 801fc4e:	4607      	mov	r7, r0
 801fc50:	4605      	mov	r5, r0
 801fc52:	9b07      	ldr	r3, [sp, #28]
 801fc54:	3301      	adds	r3, #1
 801fc56:	9307      	str	r3, [sp, #28]
 801fc58:	e774      	b.n	801fb44 <_dtoa_r+0x9ac>
 801fc5a:	f000 f90d 	bl	801fe78 <__multadd>
 801fc5e:	4629      	mov	r1, r5
 801fc60:	4607      	mov	r7, r0
 801fc62:	2300      	movs	r3, #0
 801fc64:	220a      	movs	r2, #10
 801fc66:	4658      	mov	r0, fp
 801fc68:	f000 f906 	bl	801fe78 <__multadd>
 801fc6c:	4605      	mov	r5, r0
 801fc6e:	e7f0      	b.n	801fc52 <_dtoa_r+0xaba>
 801fc70:	9b00      	ldr	r3, [sp, #0]
 801fc72:	2b00      	cmp	r3, #0
 801fc74:	bfcc      	ite	gt
 801fc76:	461e      	movgt	r6, r3
 801fc78:	2601      	movle	r6, #1
 801fc7a:	4456      	add	r6, sl
 801fc7c:	2700      	movs	r7, #0
 801fc7e:	4649      	mov	r1, r9
 801fc80:	2201      	movs	r2, #1
 801fc82:	4658      	mov	r0, fp
 801fc84:	f000 faee 	bl	8020264 <__lshift>
 801fc88:	4621      	mov	r1, r4
 801fc8a:	4681      	mov	r9, r0
 801fc8c:	f000 fb56 	bl	802033c <__mcmp>
 801fc90:	2800      	cmp	r0, #0
 801fc92:	dcb0      	bgt.n	801fbf6 <_dtoa_r+0xa5e>
 801fc94:	d102      	bne.n	801fc9c <_dtoa_r+0xb04>
 801fc96:	f018 0f01 	tst.w	r8, #1
 801fc9a:	d1ac      	bne.n	801fbf6 <_dtoa_r+0xa5e>
 801fc9c:	4633      	mov	r3, r6
 801fc9e:	461e      	mov	r6, r3
 801fca0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801fca4:	2a30      	cmp	r2, #48	@ 0x30
 801fca6:	d0fa      	beq.n	801fc9e <_dtoa_r+0xb06>
 801fca8:	e5c2      	b.n	801f830 <_dtoa_r+0x698>
 801fcaa:	459a      	cmp	sl, r3
 801fcac:	d1a4      	bne.n	801fbf8 <_dtoa_r+0xa60>
 801fcae:	9b04      	ldr	r3, [sp, #16]
 801fcb0:	3301      	adds	r3, #1
 801fcb2:	9304      	str	r3, [sp, #16]
 801fcb4:	2331      	movs	r3, #49	@ 0x31
 801fcb6:	f88a 3000 	strb.w	r3, [sl]
 801fcba:	e5b9      	b.n	801f830 <_dtoa_r+0x698>
 801fcbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801fcbe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801fd1c <_dtoa_r+0xb84>
 801fcc2:	b11b      	cbz	r3, 801fccc <_dtoa_r+0xb34>
 801fcc4:	f10a 0308 	add.w	r3, sl, #8
 801fcc8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801fcca:	6013      	str	r3, [r2, #0]
 801fccc:	4650      	mov	r0, sl
 801fcce:	b019      	add	sp, #100	@ 0x64
 801fcd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fcd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fcd6:	2b01      	cmp	r3, #1
 801fcd8:	f77f ae37 	ble.w	801f94a <_dtoa_r+0x7b2>
 801fcdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fcde:	930a      	str	r3, [sp, #40]	@ 0x28
 801fce0:	2001      	movs	r0, #1
 801fce2:	e655      	b.n	801f990 <_dtoa_r+0x7f8>
 801fce4:	9b00      	ldr	r3, [sp, #0]
 801fce6:	2b00      	cmp	r3, #0
 801fce8:	f77f aed6 	ble.w	801fa98 <_dtoa_r+0x900>
 801fcec:	4656      	mov	r6, sl
 801fcee:	4621      	mov	r1, r4
 801fcf0:	4648      	mov	r0, r9
 801fcf2:	f7ff f9c9 	bl	801f088 <quorem>
 801fcf6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801fcfa:	f806 8b01 	strb.w	r8, [r6], #1
 801fcfe:	9b00      	ldr	r3, [sp, #0]
 801fd00:	eba6 020a 	sub.w	r2, r6, sl
 801fd04:	4293      	cmp	r3, r2
 801fd06:	ddb3      	ble.n	801fc70 <_dtoa_r+0xad8>
 801fd08:	4649      	mov	r1, r9
 801fd0a:	2300      	movs	r3, #0
 801fd0c:	220a      	movs	r2, #10
 801fd0e:	4658      	mov	r0, fp
 801fd10:	f000 f8b2 	bl	801fe78 <__multadd>
 801fd14:	4681      	mov	r9, r0
 801fd16:	e7ea      	b.n	801fcee <_dtoa_r+0xb56>
 801fd18:	080257fc 	.word	0x080257fc
 801fd1c:	08025797 	.word	0x08025797

0801fd20 <_free_r>:
 801fd20:	b538      	push	{r3, r4, r5, lr}
 801fd22:	4605      	mov	r5, r0
 801fd24:	2900      	cmp	r1, #0
 801fd26:	d041      	beq.n	801fdac <_free_r+0x8c>
 801fd28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fd2c:	1f0c      	subs	r4, r1, #4
 801fd2e:	2b00      	cmp	r3, #0
 801fd30:	bfb8      	it	lt
 801fd32:	18e4      	addlt	r4, r4, r3
 801fd34:	f7fd fe8a 	bl	801da4c <__malloc_lock>
 801fd38:	4a1d      	ldr	r2, [pc, #116]	@ (801fdb0 <_free_r+0x90>)
 801fd3a:	6813      	ldr	r3, [r2, #0]
 801fd3c:	b933      	cbnz	r3, 801fd4c <_free_r+0x2c>
 801fd3e:	6063      	str	r3, [r4, #4]
 801fd40:	6014      	str	r4, [r2, #0]
 801fd42:	4628      	mov	r0, r5
 801fd44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fd48:	f7fd be86 	b.w	801da58 <__malloc_unlock>
 801fd4c:	42a3      	cmp	r3, r4
 801fd4e:	d908      	bls.n	801fd62 <_free_r+0x42>
 801fd50:	6820      	ldr	r0, [r4, #0]
 801fd52:	1821      	adds	r1, r4, r0
 801fd54:	428b      	cmp	r3, r1
 801fd56:	bf01      	itttt	eq
 801fd58:	6819      	ldreq	r1, [r3, #0]
 801fd5a:	685b      	ldreq	r3, [r3, #4]
 801fd5c:	1809      	addeq	r1, r1, r0
 801fd5e:	6021      	streq	r1, [r4, #0]
 801fd60:	e7ed      	b.n	801fd3e <_free_r+0x1e>
 801fd62:	461a      	mov	r2, r3
 801fd64:	685b      	ldr	r3, [r3, #4]
 801fd66:	b10b      	cbz	r3, 801fd6c <_free_r+0x4c>
 801fd68:	42a3      	cmp	r3, r4
 801fd6a:	d9fa      	bls.n	801fd62 <_free_r+0x42>
 801fd6c:	6811      	ldr	r1, [r2, #0]
 801fd6e:	1850      	adds	r0, r2, r1
 801fd70:	42a0      	cmp	r0, r4
 801fd72:	d10b      	bne.n	801fd8c <_free_r+0x6c>
 801fd74:	6820      	ldr	r0, [r4, #0]
 801fd76:	4401      	add	r1, r0
 801fd78:	1850      	adds	r0, r2, r1
 801fd7a:	4283      	cmp	r3, r0
 801fd7c:	6011      	str	r1, [r2, #0]
 801fd7e:	d1e0      	bne.n	801fd42 <_free_r+0x22>
 801fd80:	6818      	ldr	r0, [r3, #0]
 801fd82:	685b      	ldr	r3, [r3, #4]
 801fd84:	6053      	str	r3, [r2, #4]
 801fd86:	4408      	add	r0, r1
 801fd88:	6010      	str	r0, [r2, #0]
 801fd8a:	e7da      	b.n	801fd42 <_free_r+0x22>
 801fd8c:	d902      	bls.n	801fd94 <_free_r+0x74>
 801fd8e:	230c      	movs	r3, #12
 801fd90:	602b      	str	r3, [r5, #0]
 801fd92:	e7d6      	b.n	801fd42 <_free_r+0x22>
 801fd94:	6820      	ldr	r0, [r4, #0]
 801fd96:	1821      	adds	r1, r4, r0
 801fd98:	428b      	cmp	r3, r1
 801fd9a:	bf04      	itt	eq
 801fd9c:	6819      	ldreq	r1, [r3, #0]
 801fd9e:	685b      	ldreq	r3, [r3, #4]
 801fda0:	6063      	str	r3, [r4, #4]
 801fda2:	bf04      	itt	eq
 801fda4:	1809      	addeq	r1, r1, r0
 801fda6:	6021      	streq	r1, [r4, #0]
 801fda8:	6054      	str	r4, [r2, #4]
 801fdaa:	e7ca      	b.n	801fd42 <_free_r+0x22>
 801fdac:	bd38      	pop	{r3, r4, r5, pc}
 801fdae:	bf00      	nop
 801fdb0:	2000366c 	.word	0x2000366c

0801fdb4 <_Balloc>:
 801fdb4:	b570      	push	{r4, r5, r6, lr}
 801fdb6:	69c6      	ldr	r6, [r0, #28]
 801fdb8:	4604      	mov	r4, r0
 801fdba:	460d      	mov	r5, r1
 801fdbc:	b976      	cbnz	r6, 801fddc <_Balloc+0x28>
 801fdbe:	2010      	movs	r0, #16
 801fdc0:	f7fd fd9a 	bl	801d8f8 <malloc>
 801fdc4:	4602      	mov	r2, r0
 801fdc6:	61e0      	str	r0, [r4, #28]
 801fdc8:	b920      	cbnz	r0, 801fdd4 <_Balloc+0x20>
 801fdca:	4b18      	ldr	r3, [pc, #96]	@ (801fe2c <_Balloc+0x78>)
 801fdcc:	4818      	ldr	r0, [pc, #96]	@ (801fe30 <_Balloc+0x7c>)
 801fdce:	216b      	movs	r1, #107	@ 0x6b
 801fdd0:	f7ff f93c 	bl	801f04c <__assert_func>
 801fdd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801fdd8:	6006      	str	r6, [r0, #0]
 801fdda:	60c6      	str	r6, [r0, #12]
 801fddc:	69e6      	ldr	r6, [r4, #28]
 801fdde:	68f3      	ldr	r3, [r6, #12]
 801fde0:	b183      	cbz	r3, 801fe04 <_Balloc+0x50>
 801fde2:	69e3      	ldr	r3, [r4, #28]
 801fde4:	68db      	ldr	r3, [r3, #12]
 801fde6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801fdea:	b9b8      	cbnz	r0, 801fe1c <_Balloc+0x68>
 801fdec:	2101      	movs	r1, #1
 801fdee:	fa01 f605 	lsl.w	r6, r1, r5
 801fdf2:	1d72      	adds	r2, r6, #5
 801fdf4:	0092      	lsls	r2, r2, #2
 801fdf6:	4620      	mov	r0, r4
 801fdf8:	f001 fe95 	bl	8021b26 <_calloc_r>
 801fdfc:	b160      	cbz	r0, 801fe18 <_Balloc+0x64>
 801fdfe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801fe02:	e00e      	b.n	801fe22 <_Balloc+0x6e>
 801fe04:	2221      	movs	r2, #33	@ 0x21
 801fe06:	2104      	movs	r1, #4
 801fe08:	4620      	mov	r0, r4
 801fe0a:	f001 fe8c 	bl	8021b26 <_calloc_r>
 801fe0e:	69e3      	ldr	r3, [r4, #28]
 801fe10:	60f0      	str	r0, [r6, #12]
 801fe12:	68db      	ldr	r3, [r3, #12]
 801fe14:	2b00      	cmp	r3, #0
 801fe16:	d1e4      	bne.n	801fde2 <_Balloc+0x2e>
 801fe18:	2000      	movs	r0, #0
 801fe1a:	bd70      	pop	{r4, r5, r6, pc}
 801fe1c:	6802      	ldr	r2, [r0, #0]
 801fe1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801fe22:	2300      	movs	r3, #0
 801fe24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801fe28:	e7f7      	b.n	801fe1a <_Balloc+0x66>
 801fe2a:	bf00      	nop
 801fe2c:	080256ea 	.word	0x080256ea
 801fe30:	0802580d 	.word	0x0802580d

0801fe34 <_Bfree>:
 801fe34:	b570      	push	{r4, r5, r6, lr}
 801fe36:	69c6      	ldr	r6, [r0, #28]
 801fe38:	4605      	mov	r5, r0
 801fe3a:	460c      	mov	r4, r1
 801fe3c:	b976      	cbnz	r6, 801fe5c <_Bfree+0x28>
 801fe3e:	2010      	movs	r0, #16
 801fe40:	f7fd fd5a 	bl	801d8f8 <malloc>
 801fe44:	4602      	mov	r2, r0
 801fe46:	61e8      	str	r0, [r5, #28]
 801fe48:	b920      	cbnz	r0, 801fe54 <_Bfree+0x20>
 801fe4a:	4b09      	ldr	r3, [pc, #36]	@ (801fe70 <_Bfree+0x3c>)
 801fe4c:	4809      	ldr	r0, [pc, #36]	@ (801fe74 <_Bfree+0x40>)
 801fe4e:	218f      	movs	r1, #143	@ 0x8f
 801fe50:	f7ff f8fc 	bl	801f04c <__assert_func>
 801fe54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801fe58:	6006      	str	r6, [r0, #0]
 801fe5a:	60c6      	str	r6, [r0, #12]
 801fe5c:	b13c      	cbz	r4, 801fe6e <_Bfree+0x3a>
 801fe5e:	69eb      	ldr	r3, [r5, #28]
 801fe60:	6862      	ldr	r2, [r4, #4]
 801fe62:	68db      	ldr	r3, [r3, #12]
 801fe64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801fe68:	6021      	str	r1, [r4, #0]
 801fe6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801fe6e:	bd70      	pop	{r4, r5, r6, pc}
 801fe70:	080256ea 	.word	0x080256ea
 801fe74:	0802580d 	.word	0x0802580d

0801fe78 <__multadd>:
 801fe78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fe7c:	690d      	ldr	r5, [r1, #16]
 801fe7e:	4607      	mov	r7, r0
 801fe80:	460c      	mov	r4, r1
 801fe82:	461e      	mov	r6, r3
 801fe84:	f101 0c14 	add.w	ip, r1, #20
 801fe88:	2000      	movs	r0, #0
 801fe8a:	f8dc 3000 	ldr.w	r3, [ip]
 801fe8e:	b299      	uxth	r1, r3
 801fe90:	fb02 6101 	mla	r1, r2, r1, r6
 801fe94:	0c1e      	lsrs	r6, r3, #16
 801fe96:	0c0b      	lsrs	r3, r1, #16
 801fe98:	fb02 3306 	mla	r3, r2, r6, r3
 801fe9c:	b289      	uxth	r1, r1
 801fe9e:	3001      	adds	r0, #1
 801fea0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801fea4:	4285      	cmp	r5, r0
 801fea6:	f84c 1b04 	str.w	r1, [ip], #4
 801feaa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801feae:	dcec      	bgt.n	801fe8a <__multadd+0x12>
 801feb0:	b30e      	cbz	r6, 801fef6 <__multadd+0x7e>
 801feb2:	68a3      	ldr	r3, [r4, #8]
 801feb4:	42ab      	cmp	r3, r5
 801feb6:	dc19      	bgt.n	801feec <__multadd+0x74>
 801feb8:	6861      	ldr	r1, [r4, #4]
 801feba:	4638      	mov	r0, r7
 801febc:	3101      	adds	r1, #1
 801febe:	f7ff ff79 	bl	801fdb4 <_Balloc>
 801fec2:	4680      	mov	r8, r0
 801fec4:	b928      	cbnz	r0, 801fed2 <__multadd+0x5a>
 801fec6:	4602      	mov	r2, r0
 801fec8:	4b0c      	ldr	r3, [pc, #48]	@ (801fefc <__multadd+0x84>)
 801feca:	480d      	ldr	r0, [pc, #52]	@ (801ff00 <__multadd+0x88>)
 801fecc:	21ba      	movs	r1, #186	@ 0xba
 801fece:	f7ff f8bd 	bl	801f04c <__assert_func>
 801fed2:	6922      	ldr	r2, [r4, #16]
 801fed4:	3202      	adds	r2, #2
 801fed6:	f104 010c 	add.w	r1, r4, #12
 801feda:	0092      	lsls	r2, r2, #2
 801fedc:	300c      	adds	r0, #12
 801fede:	f7ff f8a0 	bl	801f022 <memcpy>
 801fee2:	4621      	mov	r1, r4
 801fee4:	4638      	mov	r0, r7
 801fee6:	f7ff ffa5 	bl	801fe34 <_Bfree>
 801feea:	4644      	mov	r4, r8
 801feec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801fef0:	3501      	adds	r5, #1
 801fef2:	615e      	str	r6, [r3, #20]
 801fef4:	6125      	str	r5, [r4, #16]
 801fef6:	4620      	mov	r0, r4
 801fef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fefc:	080257fc 	.word	0x080257fc
 801ff00:	0802580d 	.word	0x0802580d

0801ff04 <__s2b>:
 801ff04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ff08:	460c      	mov	r4, r1
 801ff0a:	4615      	mov	r5, r2
 801ff0c:	461f      	mov	r7, r3
 801ff0e:	2209      	movs	r2, #9
 801ff10:	3308      	adds	r3, #8
 801ff12:	4606      	mov	r6, r0
 801ff14:	fb93 f3f2 	sdiv	r3, r3, r2
 801ff18:	2100      	movs	r1, #0
 801ff1a:	2201      	movs	r2, #1
 801ff1c:	429a      	cmp	r2, r3
 801ff1e:	db09      	blt.n	801ff34 <__s2b+0x30>
 801ff20:	4630      	mov	r0, r6
 801ff22:	f7ff ff47 	bl	801fdb4 <_Balloc>
 801ff26:	b940      	cbnz	r0, 801ff3a <__s2b+0x36>
 801ff28:	4602      	mov	r2, r0
 801ff2a:	4b19      	ldr	r3, [pc, #100]	@ (801ff90 <__s2b+0x8c>)
 801ff2c:	4819      	ldr	r0, [pc, #100]	@ (801ff94 <__s2b+0x90>)
 801ff2e:	21d3      	movs	r1, #211	@ 0xd3
 801ff30:	f7ff f88c 	bl	801f04c <__assert_func>
 801ff34:	0052      	lsls	r2, r2, #1
 801ff36:	3101      	adds	r1, #1
 801ff38:	e7f0      	b.n	801ff1c <__s2b+0x18>
 801ff3a:	9b08      	ldr	r3, [sp, #32]
 801ff3c:	6143      	str	r3, [r0, #20]
 801ff3e:	2d09      	cmp	r5, #9
 801ff40:	f04f 0301 	mov.w	r3, #1
 801ff44:	6103      	str	r3, [r0, #16]
 801ff46:	dd16      	ble.n	801ff76 <__s2b+0x72>
 801ff48:	f104 0909 	add.w	r9, r4, #9
 801ff4c:	46c8      	mov	r8, r9
 801ff4e:	442c      	add	r4, r5
 801ff50:	f818 3b01 	ldrb.w	r3, [r8], #1
 801ff54:	4601      	mov	r1, r0
 801ff56:	3b30      	subs	r3, #48	@ 0x30
 801ff58:	220a      	movs	r2, #10
 801ff5a:	4630      	mov	r0, r6
 801ff5c:	f7ff ff8c 	bl	801fe78 <__multadd>
 801ff60:	45a0      	cmp	r8, r4
 801ff62:	d1f5      	bne.n	801ff50 <__s2b+0x4c>
 801ff64:	f1a5 0408 	sub.w	r4, r5, #8
 801ff68:	444c      	add	r4, r9
 801ff6a:	1b2d      	subs	r5, r5, r4
 801ff6c:	1963      	adds	r3, r4, r5
 801ff6e:	42bb      	cmp	r3, r7
 801ff70:	db04      	blt.n	801ff7c <__s2b+0x78>
 801ff72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ff76:	340a      	adds	r4, #10
 801ff78:	2509      	movs	r5, #9
 801ff7a:	e7f6      	b.n	801ff6a <__s2b+0x66>
 801ff7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ff80:	4601      	mov	r1, r0
 801ff82:	3b30      	subs	r3, #48	@ 0x30
 801ff84:	220a      	movs	r2, #10
 801ff86:	4630      	mov	r0, r6
 801ff88:	f7ff ff76 	bl	801fe78 <__multadd>
 801ff8c:	e7ee      	b.n	801ff6c <__s2b+0x68>
 801ff8e:	bf00      	nop
 801ff90:	080257fc 	.word	0x080257fc
 801ff94:	0802580d 	.word	0x0802580d

0801ff98 <__hi0bits>:
 801ff98:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801ff9c:	4603      	mov	r3, r0
 801ff9e:	bf36      	itet	cc
 801ffa0:	0403      	lslcc	r3, r0, #16
 801ffa2:	2000      	movcs	r0, #0
 801ffa4:	2010      	movcc	r0, #16
 801ffa6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801ffaa:	bf3c      	itt	cc
 801ffac:	021b      	lslcc	r3, r3, #8
 801ffae:	3008      	addcc	r0, #8
 801ffb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ffb4:	bf3c      	itt	cc
 801ffb6:	011b      	lslcc	r3, r3, #4
 801ffb8:	3004      	addcc	r0, #4
 801ffba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801ffbe:	bf3c      	itt	cc
 801ffc0:	009b      	lslcc	r3, r3, #2
 801ffc2:	3002      	addcc	r0, #2
 801ffc4:	2b00      	cmp	r3, #0
 801ffc6:	db05      	blt.n	801ffd4 <__hi0bits+0x3c>
 801ffc8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801ffcc:	f100 0001 	add.w	r0, r0, #1
 801ffd0:	bf08      	it	eq
 801ffd2:	2020      	moveq	r0, #32
 801ffd4:	4770      	bx	lr

0801ffd6 <__lo0bits>:
 801ffd6:	6803      	ldr	r3, [r0, #0]
 801ffd8:	4602      	mov	r2, r0
 801ffda:	f013 0007 	ands.w	r0, r3, #7
 801ffde:	d00b      	beq.n	801fff8 <__lo0bits+0x22>
 801ffe0:	07d9      	lsls	r1, r3, #31
 801ffe2:	d421      	bmi.n	8020028 <__lo0bits+0x52>
 801ffe4:	0798      	lsls	r0, r3, #30
 801ffe6:	bf49      	itett	mi
 801ffe8:	085b      	lsrmi	r3, r3, #1
 801ffea:	089b      	lsrpl	r3, r3, #2
 801ffec:	2001      	movmi	r0, #1
 801ffee:	6013      	strmi	r3, [r2, #0]
 801fff0:	bf5c      	itt	pl
 801fff2:	6013      	strpl	r3, [r2, #0]
 801fff4:	2002      	movpl	r0, #2
 801fff6:	4770      	bx	lr
 801fff8:	b299      	uxth	r1, r3
 801fffa:	b909      	cbnz	r1, 8020000 <__lo0bits+0x2a>
 801fffc:	0c1b      	lsrs	r3, r3, #16
 801fffe:	2010      	movs	r0, #16
 8020000:	b2d9      	uxtb	r1, r3
 8020002:	b909      	cbnz	r1, 8020008 <__lo0bits+0x32>
 8020004:	3008      	adds	r0, #8
 8020006:	0a1b      	lsrs	r3, r3, #8
 8020008:	0719      	lsls	r1, r3, #28
 802000a:	bf04      	itt	eq
 802000c:	091b      	lsreq	r3, r3, #4
 802000e:	3004      	addeq	r0, #4
 8020010:	0799      	lsls	r1, r3, #30
 8020012:	bf04      	itt	eq
 8020014:	089b      	lsreq	r3, r3, #2
 8020016:	3002      	addeq	r0, #2
 8020018:	07d9      	lsls	r1, r3, #31
 802001a:	d403      	bmi.n	8020024 <__lo0bits+0x4e>
 802001c:	085b      	lsrs	r3, r3, #1
 802001e:	f100 0001 	add.w	r0, r0, #1
 8020022:	d003      	beq.n	802002c <__lo0bits+0x56>
 8020024:	6013      	str	r3, [r2, #0]
 8020026:	4770      	bx	lr
 8020028:	2000      	movs	r0, #0
 802002a:	4770      	bx	lr
 802002c:	2020      	movs	r0, #32
 802002e:	4770      	bx	lr

08020030 <__i2b>:
 8020030:	b510      	push	{r4, lr}
 8020032:	460c      	mov	r4, r1
 8020034:	2101      	movs	r1, #1
 8020036:	f7ff febd 	bl	801fdb4 <_Balloc>
 802003a:	4602      	mov	r2, r0
 802003c:	b928      	cbnz	r0, 802004a <__i2b+0x1a>
 802003e:	4b05      	ldr	r3, [pc, #20]	@ (8020054 <__i2b+0x24>)
 8020040:	4805      	ldr	r0, [pc, #20]	@ (8020058 <__i2b+0x28>)
 8020042:	f240 1145 	movw	r1, #325	@ 0x145
 8020046:	f7ff f801 	bl	801f04c <__assert_func>
 802004a:	2301      	movs	r3, #1
 802004c:	6144      	str	r4, [r0, #20]
 802004e:	6103      	str	r3, [r0, #16]
 8020050:	bd10      	pop	{r4, pc}
 8020052:	bf00      	nop
 8020054:	080257fc 	.word	0x080257fc
 8020058:	0802580d 	.word	0x0802580d

0802005c <__multiply>:
 802005c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020060:	4614      	mov	r4, r2
 8020062:	690a      	ldr	r2, [r1, #16]
 8020064:	6923      	ldr	r3, [r4, #16]
 8020066:	429a      	cmp	r2, r3
 8020068:	bfa8      	it	ge
 802006a:	4623      	movge	r3, r4
 802006c:	460f      	mov	r7, r1
 802006e:	bfa4      	itt	ge
 8020070:	460c      	movge	r4, r1
 8020072:	461f      	movge	r7, r3
 8020074:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8020078:	f8d7 9010 	ldr.w	r9, [r7, #16]
 802007c:	68a3      	ldr	r3, [r4, #8]
 802007e:	6861      	ldr	r1, [r4, #4]
 8020080:	eb0a 0609 	add.w	r6, sl, r9
 8020084:	42b3      	cmp	r3, r6
 8020086:	b085      	sub	sp, #20
 8020088:	bfb8      	it	lt
 802008a:	3101      	addlt	r1, #1
 802008c:	f7ff fe92 	bl	801fdb4 <_Balloc>
 8020090:	b930      	cbnz	r0, 80200a0 <__multiply+0x44>
 8020092:	4602      	mov	r2, r0
 8020094:	4b44      	ldr	r3, [pc, #272]	@ (80201a8 <__multiply+0x14c>)
 8020096:	4845      	ldr	r0, [pc, #276]	@ (80201ac <__multiply+0x150>)
 8020098:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 802009c:	f7fe ffd6 	bl	801f04c <__assert_func>
 80200a0:	f100 0514 	add.w	r5, r0, #20
 80200a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80200a8:	462b      	mov	r3, r5
 80200aa:	2200      	movs	r2, #0
 80200ac:	4543      	cmp	r3, r8
 80200ae:	d321      	bcc.n	80200f4 <__multiply+0x98>
 80200b0:	f107 0114 	add.w	r1, r7, #20
 80200b4:	f104 0214 	add.w	r2, r4, #20
 80200b8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80200bc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80200c0:	9302      	str	r3, [sp, #8]
 80200c2:	1b13      	subs	r3, r2, r4
 80200c4:	3b15      	subs	r3, #21
 80200c6:	f023 0303 	bic.w	r3, r3, #3
 80200ca:	3304      	adds	r3, #4
 80200cc:	f104 0715 	add.w	r7, r4, #21
 80200d0:	42ba      	cmp	r2, r7
 80200d2:	bf38      	it	cc
 80200d4:	2304      	movcc	r3, #4
 80200d6:	9301      	str	r3, [sp, #4]
 80200d8:	9b02      	ldr	r3, [sp, #8]
 80200da:	9103      	str	r1, [sp, #12]
 80200dc:	428b      	cmp	r3, r1
 80200de:	d80c      	bhi.n	80200fa <__multiply+0x9e>
 80200e0:	2e00      	cmp	r6, #0
 80200e2:	dd03      	ble.n	80200ec <__multiply+0x90>
 80200e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80200e8:	2b00      	cmp	r3, #0
 80200ea:	d05b      	beq.n	80201a4 <__multiply+0x148>
 80200ec:	6106      	str	r6, [r0, #16]
 80200ee:	b005      	add	sp, #20
 80200f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80200f4:	f843 2b04 	str.w	r2, [r3], #4
 80200f8:	e7d8      	b.n	80200ac <__multiply+0x50>
 80200fa:	f8b1 a000 	ldrh.w	sl, [r1]
 80200fe:	f1ba 0f00 	cmp.w	sl, #0
 8020102:	d024      	beq.n	802014e <__multiply+0xf2>
 8020104:	f104 0e14 	add.w	lr, r4, #20
 8020108:	46a9      	mov	r9, r5
 802010a:	f04f 0c00 	mov.w	ip, #0
 802010e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8020112:	f8d9 3000 	ldr.w	r3, [r9]
 8020116:	fa1f fb87 	uxth.w	fp, r7
 802011a:	b29b      	uxth	r3, r3
 802011c:	fb0a 330b 	mla	r3, sl, fp, r3
 8020120:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8020124:	f8d9 7000 	ldr.w	r7, [r9]
 8020128:	4463      	add	r3, ip
 802012a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802012e:	fb0a c70b 	mla	r7, sl, fp, ip
 8020132:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8020136:	b29b      	uxth	r3, r3
 8020138:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802013c:	4572      	cmp	r2, lr
 802013e:	f849 3b04 	str.w	r3, [r9], #4
 8020142:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8020146:	d8e2      	bhi.n	802010e <__multiply+0xb2>
 8020148:	9b01      	ldr	r3, [sp, #4]
 802014a:	f845 c003 	str.w	ip, [r5, r3]
 802014e:	9b03      	ldr	r3, [sp, #12]
 8020150:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8020154:	3104      	adds	r1, #4
 8020156:	f1b9 0f00 	cmp.w	r9, #0
 802015a:	d021      	beq.n	80201a0 <__multiply+0x144>
 802015c:	682b      	ldr	r3, [r5, #0]
 802015e:	f104 0c14 	add.w	ip, r4, #20
 8020162:	46ae      	mov	lr, r5
 8020164:	f04f 0a00 	mov.w	sl, #0
 8020168:	f8bc b000 	ldrh.w	fp, [ip]
 802016c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8020170:	fb09 770b 	mla	r7, r9, fp, r7
 8020174:	4457      	add	r7, sl
 8020176:	b29b      	uxth	r3, r3
 8020178:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802017c:	f84e 3b04 	str.w	r3, [lr], #4
 8020180:	f85c 3b04 	ldr.w	r3, [ip], #4
 8020184:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8020188:	f8be 3000 	ldrh.w	r3, [lr]
 802018c:	fb09 330a 	mla	r3, r9, sl, r3
 8020190:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8020194:	4562      	cmp	r2, ip
 8020196:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802019a:	d8e5      	bhi.n	8020168 <__multiply+0x10c>
 802019c:	9f01      	ldr	r7, [sp, #4]
 802019e:	51eb      	str	r3, [r5, r7]
 80201a0:	3504      	adds	r5, #4
 80201a2:	e799      	b.n	80200d8 <__multiply+0x7c>
 80201a4:	3e01      	subs	r6, #1
 80201a6:	e79b      	b.n	80200e0 <__multiply+0x84>
 80201a8:	080257fc 	.word	0x080257fc
 80201ac:	0802580d 	.word	0x0802580d

080201b0 <__pow5mult>:
 80201b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80201b4:	4615      	mov	r5, r2
 80201b6:	f012 0203 	ands.w	r2, r2, #3
 80201ba:	4607      	mov	r7, r0
 80201bc:	460e      	mov	r6, r1
 80201be:	d007      	beq.n	80201d0 <__pow5mult+0x20>
 80201c0:	4c25      	ldr	r4, [pc, #148]	@ (8020258 <__pow5mult+0xa8>)
 80201c2:	3a01      	subs	r2, #1
 80201c4:	2300      	movs	r3, #0
 80201c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80201ca:	f7ff fe55 	bl	801fe78 <__multadd>
 80201ce:	4606      	mov	r6, r0
 80201d0:	10ad      	asrs	r5, r5, #2
 80201d2:	d03d      	beq.n	8020250 <__pow5mult+0xa0>
 80201d4:	69fc      	ldr	r4, [r7, #28]
 80201d6:	b97c      	cbnz	r4, 80201f8 <__pow5mult+0x48>
 80201d8:	2010      	movs	r0, #16
 80201da:	f7fd fb8d 	bl	801d8f8 <malloc>
 80201de:	4602      	mov	r2, r0
 80201e0:	61f8      	str	r0, [r7, #28]
 80201e2:	b928      	cbnz	r0, 80201f0 <__pow5mult+0x40>
 80201e4:	4b1d      	ldr	r3, [pc, #116]	@ (802025c <__pow5mult+0xac>)
 80201e6:	481e      	ldr	r0, [pc, #120]	@ (8020260 <__pow5mult+0xb0>)
 80201e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80201ec:	f7fe ff2e 	bl	801f04c <__assert_func>
 80201f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80201f4:	6004      	str	r4, [r0, #0]
 80201f6:	60c4      	str	r4, [r0, #12]
 80201f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80201fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8020200:	b94c      	cbnz	r4, 8020216 <__pow5mult+0x66>
 8020202:	f240 2171 	movw	r1, #625	@ 0x271
 8020206:	4638      	mov	r0, r7
 8020208:	f7ff ff12 	bl	8020030 <__i2b>
 802020c:	2300      	movs	r3, #0
 802020e:	f8c8 0008 	str.w	r0, [r8, #8]
 8020212:	4604      	mov	r4, r0
 8020214:	6003      	str	r3, [r0, #0]
 8020216:	f04f 0900 	mov.w	r9, #0
 802021a:	07eb      	lsls	r3, r5, #31
 802021c:	d50a      	bpl.n	8020234 <__pow5mult+0x84>
 802021e:	4631      	mov	r1, r6
 8020220:	4622      	mov	r2, r4
 8020222:	4638      	mov	r0, r7
 8020224:	f7ff ff1a 	bl	802005c <__multiply>
 8020228:	4631      	mov	r1, r6
 802022a:	4680      	mov	r8, r0
 802022c:	4638      	mov	r0, r7
 802022e:	f7ff fe01 	bl	801fe34 <_Bfree>
 8020232:	4646      	mov	r6, r8
 8020234:	106d      	asrs	r5, r5, #1
 8020236:	d00b      	beq.n	8020250 <__pow5mult+0xa0>
 8020238:	6820      	ldr	r0, [r4, #0]
 802023a:	b938      	cbnz	r0, 802024c <__pow5mult+0x9c>
 802023c:	4622      	mov	r2, r4
 802023e:	4621      	mov	r1, r4
 8020240:	4638      	mov	r0, r7
 8020242:	f7ff ff0b 	bl	802005c <__multiply>
 8020246:	6020      	str	r0, [r4, #0]
 8020248:	f8c0 9000 	str.w	r9, [r0]
 802024c:	4604      	mov	r4, r0
 802024e:	e7e4      	b.n	802021a <__pow5mult+0x6a>
 8020250:	4630      	mov	r0, r6
 8020252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020256:	bf00      	nop
 8020258:	08025868 	.word	0x08025868
 802025c:	080256ea 	.word	0x080256ea
 8020260:	0802580d 	.word	0x0802580d

08020264 <__lshift>:
 8020264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020268:	460c      	mov	r4, r1
 802026a:	6849      	ldr	r1, [r1, #4]
 802026c:	6923      	ldr	r3, [r4, #16]
 802026e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8020272:	68a3      	ldr	r3, [r4, #8]
 8020274:	4607      	mov	r7, r0
 8020276:	4691      	mov	r9, r2
 8020278:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802027c:	f108 0601 	add.w	r6, r8, #1
 8020280:	42b3      	cmp	r3, r6
 8020282:	db0b      	blt.n	802029c <__lshift+0x38>
 8020284:	4638      	mov	r0, r7
 8020286:	f7ff fd95 	bl	801fdb4 <_Balloc>
 802028a:	4605      	mov	r5, r0
 802028c:	b948      	cbnz	r0, 80202a2 <__lshift+0x3e>
 802028e:	4602      	mov	r2, r0
 8020290:	4b28      	ldr	r3, [pc, #160]	@ (8020334 <__lshift+0xd0>)
 8020292:	4829      	ldr	r0, [pc, #164]	@ (8020338 <__lshift+0xd4>)
 8020294:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8020298:	f7fe fed8 	bl	801f04c <__assert_func>
 802029c:	3101      	adds	r1, #1
 802029e:	005b      	lsls	r3, r3, #1
 80202a0:	e7ee      	b.n	8020280 <__lshift+0x1c>
 80202a2:	2300      	movs	r3, #0
 80202a4:	f100 0114 	add.w	r1, r0, #20
 80202a8:	f100 0210 	add.w	r2, r0, #16
 80202ac:	4618      	mov	r0, r3
 80202ae:	4553      	cmp	r3, sl
 80202b0:	db33      	blt.n	802031a <__lshift+0xb6>
 80202b2:	6920      	ldr	r0, [r4, #16]
 80202b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80202b8:	f104 0314 	add.w	r3, r4, #20
 80202bc:	f019 091f 	ands.w	r9, r9, #31
 80202c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80202c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80202c8:	d02b      	beq.n	8020322 <__lshift+0xbe>
 80202ca:	f1c9 0e20 	rsb	lr, r9, #32
 80202ce:	468a      	mov	sl, r1
 80202d0:	2200      	movs	r2, #0
 80202d2:	6818      	ldr	r0, [r3, #0]
 80202d4:	fa00 f009 	lsl.w	r0, r0, r9
 80202d8:	4310      	orrs	r0, r2
 80202da:	f84a 0b04 	str.w	r0, [sl], #4
 80202de:	f853 2b04 	ldr.w	r2, [r3], #4
 80202e2:	459c      	cmp	ip, r3
 80202e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80202e8:	d8f3      	bhi.n	80202d2 <__lshift+0x6e>
 80202ea:	ebac 0304 	sub.w	r3, ip, r4
 80202ee:	3b15      	subs	r3, #21
 80202f0:	f023 0303 	bic.w	r3, r3, #3
 80202f4:	3304      	adds	r3, #4
 80202f6:	f104 0015 	add.w	r0, r4, #21
 80202fa:	4584      	cmp	ip, r0
 80202fc:	bf38      	it	cc
 80202fe:	2304      	movcc	r3, #4
 8020300:	50ca      	str	r2, [r1, r3]
 8020302:	b10a      	cbz	r2, 8020308 <__lshift+0xa4>
 8020304:	f108 0602 	add.w	r6, r8, #2
 8020308:	3e01      	subs	r6, #1
 802030a:	4638      	mov	r0, r7
 802030c:	612e      	str	r6, [r5, #16]
 802030e:	4621      	mov	r1, r4
 8020310:	f7ff fd90 	bl	801fe34 <_Bfree>
 8020314:	4628      	mov	r0, r5
 8020316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802031a:	f842 0f04 	str.w	r0, [r2, #4]!
 802031e:	3301      	adds	r3, #1
 8020320:	e7c5      	b.n	80202ae <__lshift+0x4a>
 8020322:	3904      	subs	r1, #4
 8020324:	f853 2b04 	ldr.w	r2, [r3], #4
 8020328:	f841 2f04 	str.w	r2, [r1, #4]!
 802032c:	459c      	cmp	ip, r3
 802032e:	d8f9      	bhi.n	8020324 <__lshift+0xc0>
 8020330:	e7ea      	b.n	8020308 <__lshift+0xa4>
 8020332:	bf00      	nop
 8020334:	080257fc 	.word	0x080257fc
 8020338:	0802580d 	.word	0x0802580d

0802033c <__mcmp>:
 802033c:	690a      	ldr	r2, [r1, #16]
 802033e:	4603      	mov	r3, r0
 8020340:	6900      	ldr	r0, [r0, #16]
 8020342:	1a80      	subs	r0, r0, r2
 8020344:	b530      	push	{r4, r5, lr}
 8020346:	d10e      	bne.n	8020366 <__mcmp+0x2a>
 8020348:	3314      	adds	r3, #20
 802034a:	3114      	adds	r1, #20
 802034c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8020350:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8020354:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8020358:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 802035c:	4295      	cmp	r5, r2
 802035e:	d003      	beq.n	8020368 <__mcmp+0x2c>
 8020360:	d205      	bcs.n	802036e <__mcmp+0x32>
 8020362:	f04f 30ff 	mov.w	r0, #4294967295
 8020366:	bd30      	pop	{r4, r5, pc}
 8020368:	42a3      	cmp	r3, r4
 802036a:	d3f3      	bcc.n	8020354 <__mcmp+0x18>
 802036c:	e7fb      	b.n	8020366 <__mcmp+0x2a>
 802036e:	2001      	movs	r0, #1
 8020370:	e7f9      	b.n	8020366 <__mcmp+0x2a>
	...

08020374 <__mdiff>:
 8020374:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020378:	4689      	mov	r9, r1
 802037a:	4606      	mov	r6, r0
 802037c:	4611      	mov	r1, r2
 802037e:	4648      	mov	r0, r9
 8020380:	4614      	mov	r4, r2
 8020382:	f7ff ffdb 	bl	802033c <__mcmp>
 8020386:	1e05      	subs	r5, r0, #0
 8020388:	d112      	bne.n	80203b0 <__mdiff+0x3c>
 802038a:	4629      	mov	r1, r5
 802038c:	4630      	mov	r0, r6
 802038e:	f7ff fd11 	bl	801fdb4 <_Balloc>
 8020392:	4602      	mov	r2, r0
 8020394:	b928      	cbnz	r0, 80203a2 <__mdiff+0x2e>
 8020396:	4b3f      	ldr	r3, [pc, #252]	@ (8020494 <__mdiff+0x120>)
 8020398:	f240 2137 	movw	r1, #567	@ 0x237
 802039c:	483e      	ldr	r0, [pc, #248]	@ (8020498 <__mdiff+0x124>)
 802039e:	f7fe fe55 	bl	801f04c <__assert_func>
 80203a2:	2301      	movs	r3, #1
 80203a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80203a8:	4610      	mov	r0, r2
 80203aa:	b003      	add	sp, #12
 80203ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80203b0:	bfbc      	itt	lt
 80203b2:	464b      	movlt	r3, r9
 80203b4:	46a1      	movlt	r9, r4
 80203b6:	4630      	mov	r0, r6
 80203b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80203bc:	bfba      	itte	lt
 80203be:	461c      	movlt	r4, r3
 80203c0:	2501      	movlt	r5, #1
 80203c2:	2500      	movge	r5, #0
 80203c4:	f7ff fcf6 	bl	801fdb4 <_Balloc>
 80203c8:	4602      	mov	r2, r0
 80203ca:	b918      	cbnz	r0, 80203d4 <__mdiff+0x60>
 80203cc:	4b31      	ldr	r3, [pc, #196]	@ (8020494 <__mdiff+0x120>)
 80203ce:	f240 2145 	movw	r1, #581	@ 0x245
 80203d2:	e7e3      	b.n	802039c <__mdiff+0x28>
 80203d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80203d8:	6926      	ldr	r6, [r4, #16]
 80203da:	60c5      	str	r5, [r0, #12]
 80203dc:	f109 0310 	add.w	r3, r9, #16
 80203e0:	f109 0514 	add.w	r5, r9, #20
 80203e4:	f104 0e14 	add.w	lr, r4, #20
 80203e8:	f100 0b14 	add.w	fp, r0, #20
 80203ec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80203f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80203f4:	9301      	str	r3, [sp, #4]
 80203f6:	46d9      	mov	r9, fp
 80203f8:	f04f 0c00 	mov.w	ip, #0
 80203fc:	9b01      	ldr	r3, [sp, #4]
 80203fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8020402:	f853 af04 	ldr.w	sl, [r3, #4]!
 8020406:	9301      	str	r3, [sp, #4]
 8020408:	fa1f f38a 	uxth.w	r3, sl
 802040c:	4619      	mov	r1, r3
 802040e:	b283      	uxth	r3, r0
 8020410:	1acb      	subs	r3, r1, r3
 8020412:	0c00      	lsrs	r0, r0, #16
 8020414:	4463      	add	r3, ip
 8020416:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 802041a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 802041e:	b29b      	uxth	r3, r3
 8020420:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8020424:	4576      	cmp	r6, lr
 8020426:	f849 3b04 	str.w	r3, [r9], #4
 802042a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802042e:	d8e5      	bhi.n	80203fc <__mdiff+0x88>
 8020430:	1b33      	subs	r3, r6, r4
 8020432:	3b15      	subs	r3, #21
 8020434:	f023 0303 	bic.w	r3, r3, #3
 8020438:	3415      	adds	r4, #21
 802043a:	3304      	adds	r3, #4
 802043c:	42a6      	cmp	r6, r4
 802043e:	bf38      	it	cc
 8020440:	2304      	movcc	r3, #4
 8020442:	441d      	add	r5, r3
 8020444:	445b      	add	r3, fp
 8020446:	461e      	mov	r6, r3
 8020448:	462c      	mov	r4, r5
 802044a:	4544      	cmp	r4, r8
 802044c:	d30e      	bcc.n	802046c <__mdiff+0xf8>
 802044e:	f108 0103 	add.w	r1, r8, #3
 8020452:	1b49      	subs	r1, r1, r5
 8020454:	f021 0103 	bic.w	r1, r1, #3
 8020458:	3d03      	subs	r5, #3
 802045a:	45a8      	cmp	r8, r5
 802045c:	bf38      	it	cc
 802045e:	2100      	movcc	r1, #0
 8020460:	440b      	add	r3, r1
 8020462:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8020466:	b191      	cbz	r1, 802048e <__mdiff+0x11a>
 8020468:	6117      	str	r7, [r2, #16]
 802046a:	e79d      	b.n	80203a8 <__mdiff+0x34>
 802046c:	f854 1b04 	ldr.w	r1, [r4], #4
 8020470:	46e6      	mov	lr, ip
 8020472:	0c08      	lsrs	r0, r1, #16
 8020474:	fa1c fc81 	uxtah	ip, ip, r1
 8020478:	4471      	add	r1, lr
 802047a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 802047e:	b289      	uxth	r1, r1
 8020480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8020484:	f846 1b04 	str.w	r1, [r6], #4
 8020488:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802048c:	e7dd      	b.n	802044a <__mdiff+0xd6>
 802048e:	3f01      	subs	r7, #1
 8020490:	e7e7      	b.n	8020462 <__mdiff+0xee>
 8020492:	bf00      	nop
 8020494:	080257fc 	.word	0x080257fc
 8020498:	0802580d 	.word	0x0802580d

0802049c <__ulp>:
 802049c:	b082      	sub	sp, #8
 802049e:	ed8d 0b00 	vstr	d0, [sp]
 80204a2:	9a01      	ldr	r2, [sp, #4]
 80204a4:	4b0f      	ldr	r3, [pc, #60]	@ (80204e4 <__ulp+0x48>)
 80204a6:	4013      	ands	r3, r2
 80204a8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80204ac:	2b00      	cmp	r3, #0
 80204ae:	dc08      	bgt.n	80204c2 <__ulp+0x26>
 80204b0:	425b      	negs	r3, r3
 80204b2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80204b6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80204ba:	da04      	bge.n	80204c6 <__ulp+0x2a>
 80204bc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80204c0:	4113      	asrs	r3, r2
 80204c2:	2200      	movs	r2, #0
 80204c4:	e008      	b.n	80204d8 <__ulp+0x3c>
 80204c6:	f1a2 0314 	sub.w	r3, r2, #20
 80204ca:	2b1e      	cmp	r3, #30
 80204cc:	bfda      	itte	le
 80204ce:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80204d2:	40da      	lsrle	r2, r3
 80204d4:	2201      	movgt	r2, #1
 80204d6:	2300      	movs	r3, #0
 80204d8:	4619      	mov	r1, r3
 80204da:	4610      	mov	r0, r2
 80204dc:	ec41 0b10 	vmov	d0, r0, r1
 80204e0:	b002      	add	sp, #8
 80204e2:	4770      	bx	lr
 80204e4:	7ff00000 	.word	0x7ff00000

080204e8 <__b2d>:
 80204e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80204ec:	6906      	ldr	r6, [r0, #16]
 80204ee:	f100 0814 	add.w	r8, r0, #20
 80204f2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80204f6:	1f37      	subs	r7, r6, #4
 80204f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80204fc:	4610      	mov	r0, r2
 80204fe:	f7ff fd4b 	bl	801ff98 <__hi0bits>
 8020502:	f1c0 0320 	rsb	r3, r0, #32
 8020506:	280a      	cmp	r0, #10
 8020508:	600b      	str	r3, [r1, #0]
 802050a:	491b      	ldr	r1, [pc, #108]	@ (8020578 <__b2d+0x90>)
 802050c:	dc15      	bgt.n	802053a <__b2d+0x52>
 802050e:	f1c0 0c0b 	rsb	ip, r0, #11
 8020512:	fa22 f30c 	lsr.w	r3, r2, ip
 8020516:	45b8      	cmp	r8, r7
 8020518:	ea43 0501 	orr.w	r5, r3, r1
 802051c:	bf34      	ite	cc
 802051e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8020522:	2300      	movcs	r3, #0
 8020524:	3015      	adds	r0, #21
 8020526:	fa02 f000 	lsl.w	r0, r2, r0
 802052a:	fa23 f30c 	lsr.w	r3, r3, ip
 802052e:	4303      	orrs	r3, r0
 8020530:	461c      	mov	r4, r3
 8020532:	ec45 4b10 	vmov	d0, r4, r5
 8020536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802053a:	45b8      	cmp	r8, r7
 802053c:	bf3a      	itte	cc
 802053e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8020542:	f1a6 0708 	subcc.w	r7, r6, #8
 8020546:	2300      	movcs	r3, #0
 8020548:	380b      	subs	r0, #11
 802054a:	d012      	beq.n	8020572 <__b2d+0x8a>
 802054c:	f1c0 0120 	rsb	r1, r0, #32
 8020550:	fa23 f401 	lsr.w	r4, r3, r1
 8020554:	4082      	lsls	r2, r0
 8020556:	4322      	orrs	r2, r4
 8020558:	4547      	cmp	r7, r8
 802055a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 802055e:	bf8c      	ite	hi
 8020560:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8020564:	2200      	movls	r2, #0
 8020566:	4083      	lsls	r3, r0
 8020568:	40ca      	lsrs	r2, r1
 802056a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 802056e:	4313      	orrs	r3, r2
 8020570:	e7de      	b.n	8020530 <__b2d+0x48>
 8020572:	ea42 0501 	orr.w	r5, r2, r1
 8020576:	e7db      	b.n	8020530 <__b2d+0x48>
 8020578:	3ff00000 	.word	0x3ff00000

0802057c <__d2b>:
 802057c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8020580:	460f      	mov	r7, r1
 8020582:	2101      	movs	r1, #1
 8020584:	ec59 8b10 	vmov	r8, r9, d0
 8020588:	4616      	mov	r6, r2
 802058a:	f7ff fc13 	bl	801fdb4 <_Balloc>
 802058e:	4604      	mov	r4, r0
 8020590:	b930      	cbnz	r0, 80205a0 <__d2b+0x24>
 8020592:	4602      	mov	r2, r0
 8020594:	4b23      	ldr	r3, [pc, #140]	@ (8020624 <__d2b+0xa8>)
 8020596:	4824      	ldr	r0, [pc, #144]	@ (8020628 <__d2b+0xac>)
 8020598:	f240 310f 	movw	r1, #783	@ 0x30f
 802059c:	f7fe fd56 	bl	801f04c <__assert_func>
 80205a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80205a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80205a8:	b10d      	cbz	r5, 80205ae <__d2b+0x32>
 80205aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80205ae:	9301      	str	r3, [sp, #4]
 80205b0:	f1b8 0300 	subs.w	r3, r8, #0
 80205b4:	d023      	beq.n	80205fe <__d2b+0x82>
 80205b6:	4668      	mov	r0, sp
 80205b8:	9300      	str	r3, [sp, #0]
 80205ba:	f7ff fd0c 	bl	801ffd6 <__lo0bits>
 80205be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80205c2:	b1d0      	cbz	r0, 80205fa <__d2b+0x7e>
 80205c4:	f1c0 0320 	rsb	r3, r0, #32
 80205c8:	fa02 f303 	lsl.w	r3, r2, r3
 80205cc:	430b      	orrs	r3, r1
 80205ce:	40c2      	lsrs	r2, r0
 80205d0:	6163      	str	r3, [r4, #20]
 80205d2:	9201      	str	r2, [sp, #4]
 80205d4:	9b01      	ldr	r3, [sp, #4]
 80205d6:	61a3      	str	r3, [r4, #24]
 80205d8:	2b00      	cmp	r3, #0
 80205da:	bf0c      	ite	eq
 80205dc:	2201      	moveq	r2, #1
 80205de:	2202      	movne	r2, #2
 80205e0:	6122      	str	r2, [r4, #16]
 80205e2:	b1a5      	cbz	r5, 802060e <__d2b+0x92>
 80205e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80205e8:	4405      	add	r5, r0
 80205ea:	603d      	str	r5, [r7, #0]
 80205ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80205f0:	6030      	str	r0, [r6, #0]
 80205f2:	4620      	mov	r0, r4
 80205f4:	b003      	add	sp, #12
 80205f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80205fa:	6161      	str	r1, [r4, #20]
 80205fc:	e7ea      	b.n	80205d4 <__d2b+0x58>
 80205fe:	a801      	add	r0, sp, #4
 8020600:	f7ff fce9 	bl	801ffd6 <__lo0bits>
 8020604:	9b01      	ldr	r3, [sp, #4]
 8020606:	6163      	str	r3, [r4, #20]
 8020608:	3020      	adds	r0, #32
 802060a:	2201      	movs	r2, #1
 802060c:	e7e8      	b.n	80205e0 <__d2b+0x64>
 802060e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8020612:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8020616:	6038      	str	r0, [r7, #0]
 8020618:	6918      	ldr	r0, [r3, #16]
 802061a:	f7ff fcbd 	bl	801ff98 <__hi0bits>
 802061e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8020622:	e7e5      	b.n	80205f0 <__d2b+0x74>
 8020624:	080257fc 	.word	0x080257fc
 8020628:	0802580d 	.word	0x0802580d

0802062c <__ratio>:
 802062c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020630:	b085      	sub	sp, #20
 8020632:	e9cd 1000 	strd	r1, r0, [sp]
 8020636:	a902      	add	r1, sp, #8
 8020638:	f7ff ff56 	bl	80204e8 <__b2d>
 802063c:	9800      	ldr	r0, [sp, #0]
 802063e:	a903      	add	r1, sp, #12
 8020640:	ec55 4b10 	vmov	r4, r5, d0
 8020644:	f7ff ff50 	bl	80204e8 <__b2d>
 8020648:	9b01      	ldr	r3, [sp, #4]
 802064a:	6919      	ldr	r1, [r3, #16]
 802064c:	9b00      	ldr	r3, [sp, #0]
 802064e:	691b      	ldr	r3, [r3, #16]
 8020650:	1ac9      	subs	r1, r1, r3
 8020652:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8020656:	1a9b      	subs	r3, r3, r2
 8020658:	ec5b ab10 	vmov	sl, fp, d0
 802065c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8020660:	2b00      	cmp	r3, #0
 8020662:	bfce      	itee	gt
 8020664:	462a      	movgt	r2, r5
 8020666:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802066a:	465a      	movle	r2, fp
 802066c:	462f      	mov	r7, r5
 802066e:	46d9      	mov	r9, fp
 8020670:	bfcc      	ite	gt
 8020672:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8020676:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 802067a:	464b      	mov	r3, r9
 802067c:	4652      	mov	r2, sl
 802067e:	4620      	mov	r0, r4
 8020680:	4639      	mov	r1, r7
 8020682:	f7e0 f8fb 	bl	800087c <__aeabi_ddiv>
 8020686:	ec41 0b10 	vmov	d0, r0, r1
 802068a:	b005      	add	sp, #20
 802068c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020690 <__copybits>:
 8020690:	3901      	subs	r1, #1
 8020692:	b570      	push	{r4, r5, r6, lr}
 8020694:	1149      	asrs	r1, r1, #5
 8020696:	6914      	ldr	r4, [r2, #16]
 8020698:	3101      	adds	r1, #1
 802069a:	f102 0314 	add.w	r3, r2, #20
 802069e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80206a2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80206a6:	1f05      	subs	r5, r0, #4
 80206a8:	42a3      	cmp	r3, r4
 80206aa:	d30c      	bcc.n	80206c6 <__copybits+0x36>
 80206ac:	1aa3      	subs	r3, r4, r2
 80206ae:	3b11      	subs	r3, #17
 80206b0:	f023 0303 	bic.w	r3, r3, #3
 80206b4:	3211      	adds	r2, #17
 80206b6:	42a2      	cmp	r2, r4
 80206b8:	bf88      	it	hi
 80206ba:	2300      	movhi	r3, #0
 80206bc:	4418      	add	r0, r3
 80206be:	2300      	movs	r3, #0
 80206c0:	4288      	cmp	r0, r1
 80206c2:	d305      	bcc.n	80206d0 <__copybits+0x40>
 80206c4:	bd70      	pop	{r4, r5, r6, pc}
 80206c6:	f853 6b04 	ldr.w	r6, [r3], #4
 80206ca:	f845 6f04 	str.w	r6, [r5, #4]!
 80206ce:	e7eb      	b.n	80206a8 <__copybits+0x18>
 80206d0:	f840 3b04 	str.w	r3, [r0], #4
 80206d4:	e7f4      	b.n	80206c0 <__copybits+0x30>

080206d6 <__any_on>:
 80206d6:	f100 0214 	add.w	r2, r0, #20
 80206da:	6900      	ldr	r0, [r0, #16]
 80206dc:	114b      	asrs	r3, r1, #5
 80206de:	4298      	cmp	r0, r3
 80206e0:	b510      	push	{r4, lr}
 80206e2:	db11      	blt.n	8020708 <__any_on+0x32>
 80206e4:	dd0a      	ble.n	80206fc <__any_on+0x26>
 80206e6:	f011 011f 	ands.w	r1, r1, #31
 80206ea:	d007      	beq.n	80206fc <__any_on+0x26>
 80206ec:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80206f0:	fa24 f001 	lsr.w	r0, r4, r1
 80206f4:	fa00 f101 	lsl.w	r1, r0, r1
 80206f8:	428c      	cmp	r4, r1
 80206fa:	d10b      	bne.n	8020714 <__any_on+0x3e>
 80206fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8020700:	4293      	cmp	r3, r2
 8020702:	d803      	bhi.n	802070c <__any_on+0x36>
 8020704:	2000      	movs	r0, #0
 8020706:	bd10      	pop	{r4, pc}
 8020708:	4603      	mov	r3, r0
 802070a:	e7f7      	b.n	80206fc <__any_on+0x26>
 802070c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8020710:	2900      	cmp	r1, #0
 8020712:	d0f5      	beq.n	8020700 <__any_on+0x2a>
 8020714:	2001      	movs	r0, #1
 8020716:	e7f6      	b.n	8020706 <__any_on+0x30>

08020718 <sulp>:
 8020718:	b570      	push	{r4, r5, r6, lr}
 802071a:	4604      	mov	r4, r0
 802071c:	460d      	mov	r5, r1
 802071e:	ec45 4b10 	vmov	d0, r4, r5
 8020722:	4616      	mov	r6, r2
 8020724:	f7ff feba 	bl	802049c <__ulp>
 8020728:	ec51 0b10 	vmov	r0, r1, d0
 802072c:	b17e      	cbz	r6, 802074e <sulp+0x36>
 802072e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8020732:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8020736:	2b00      	cmp	r3, #0
 8020738:	dd09      	ble.n	802074e <sulp+0x36>
 802073a:	051b      	lsls	r3, r3, #20
 802073c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8020740:	2400      	movs	r4, #0
 8020742:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8020746:	4622      	mov	r2, r4
 8020748:	462b      	mov	r3, r5
 802074a:	f7df ff6d 	bl	8000628 <__aeabi_dmul>
 802074e:	ec41 0b10 	vmov	d0, r0, r1
 8020752:	bd70      	pop	{r4, r5, r6, pc}
 8020754:	0000      	movs	r0, r0
	...

08020758 <_strtod_l>:
 8020758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802075c:	b09f      	sub	sp, #124	@ 0x7c
 802075e:	460c      	mov	r4, r1
 8020760:	9217      	str	r2, [sp, #92]	@ 0x5c
 8020762:	2200      	movs	r2, #0
 8020764:	921a      	str	r2, [sp, #104]	@ 0x68
 8020766:	9005      	str	r0, [sp, #20]
 8020768:	f04f 0a00 	mov.w	sl, #0
 802076c:	f04f 0b00 	mov.w	fp, #0
 8020770:	460a      	mov	r2, r1
 8020772:	9219      	str	r2, [sp, #100]	@ 0x64
 8020774:	7811      	ldrb	r1, [r2, #0]
 8020776:	292b      	cmp	r1, #43	@ 0x2b
 8020778:	d04a      	beq.n	8020810 <_strtod_l+0xb8>
 802077a:	d838      	bhi.n	80207ee <_strtod_l+0x96>
 802077c:	290d      	cmp	r1, #13
 802077e:	d832      	bhi.n	80207e6 <_strtod_l+0x8e>
 8020780:	2908      	cmp	r1, #8
 8020782:	d832      	bhi.n	80207ea <_strtod_l+0x92>
 8020784:	2900      	cmp	r1, #0
 8020786:	d03b      	beq.n	8020800 <_strtod_l+0xa8>
 8020788:	2200      	movs	r2, #0
 802078a:	920b      	str	r2, [sp, #44]	@ 0x2c
 802078c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 802078e:	782a      	ldrb	r2, [r5, #0]
 8020790:	2a30      	cmp	r2, #48	@ 0x30
 8020792:	f040 80b3 	bne.w	80208fc <_strtod_l+0x1a4>
 8020796:	786a      	ldrb	r2, [r5, #1]
 8020798:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802079c:	2a58      	cmp	r2, #88	@ 0x58
 802079e:	d16e      	bne.n	802087e <_strtod_l+0x126>
 80207a0:	9302      	str	r3, [sp, #8]
 80207a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80207a4:	9301      	str	r3, [sp, #4]
 80207a6:	ab1a      	add	r3, sp, #104	@ 0x68
 80207a8:	9300      	str	r3, [sp, #0]
 80207aa:	4a8e      	ldr	r2, [pc, #568]	@ (80209e4 <_strtod_l+0x28c>)
 80207ac:	9805      	ldr	r0, [sp, #20]
 80207ae:	ab1b      	add	r3, sp, #108	@ 0x6c
 80207b0:	a919      	add	r1, sp, #100	@ 0x64
 80207b2:	f001 fa33 	bl	8021c1c <__gethex>
 80207b6:	f010 060f 	ands.w	r6, r0, #15
 80207ba:	4604      	mov	r4, r0
 80207bc:	d005      	beq.n	80207ca <_strtod_l+0x72>
 80207be:	2e06      	cmp	r6, #6
 80207c0:	d128      	bne.n	8020814 <_strtod_l+0xbc>
 80207c2:	3501      	adds	r5, #1
 80207c4:	2300      	movs	r3, #0
 80207c6:	9519      	str	r5, [sp, #100]	@ 0x64
 80207c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80207ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80207cc:	2b00      	cmp	r3, #0
 80207ce:	f040 858e 	bne.w	80212ee <_strtod_l+0xb96>
 80207d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80207d4:	b1cb      	cbz	r3, 802080a <_strtod_l+0xb2>
 80207d6:	4652      	mov	r2, sl
 80207d8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80207dc:	ec43 2b10 	vmov	d0, r2, r3
 80207e0:	b01f      	add	sp, #124	@ 0x7c
 80207e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207e6:	2920      	cmp	r1, #32
 80207e8:	d1ce      	bne.n	8020788 <_strtod_l+0x30>
 80207ea:	3201      	adds	r2, #1
 80207ec:	e7c1      	b.n	8020772 <_strtod_l+0x1a>
 80207ee:	292d      	cmp	r1, #45	@ 0x2d
 80207f0:	d1ca      	bne.n	8020788 <_strtod_l+0x30>
 80207f2:	2101      	movs	r1, #1
 80207f4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80207f6:	1c51      	adds	r1, r2, #1
 80207f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80207fa:	7852      	ldrb	r2, [r2, #1]
 80207fc:	2a00      	cmp	r2, #0
 80207fe:	d1c5      	bne.n	802078c <_strtod_l+0x34>
 8020800:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020802:	9419      	str	r4, [sp, #100]	@ 0x64
 8020804:	2b00      	cmp	r3, #0
 8020806:	f040 8570 	bne.w	80212ea <_strtod_l+0xb92>
 802080a:	4652      	mov	r2, sl
 802080c:	465b      	mov	r3, fp
 802080e:	e7e5      	b.n	80207dc <_strtod_l+0x84>
 8020810:	2100      	movs	r1, #0
 8020812:	e7ef      	b.n	80207f4 <_strtod_l+0x9c>
 8020814:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020816:	b13a      	cbz	r2, 8020828 <_strtod_l+0xd0>
 8020818:	2135      	movs	r1, #53	@ 0x35
 802081a:	a81c      	add	r0, sp, #112	@ 0x70
 802081c:	f7ff ff38 	bl	8020690 <__copybits>
 8020820:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020822:	9805      	ldr	r0, [sp, #20]
 8020824:	f7ff fb06 	bl	801fe34 <_Bfree>
 8020828:	3e01      	subs	r6, #1
 802082a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802082c:	2e04      	cmp	r6, #4
 802082e:	d806      	bhi.n	802083e <_strtod_l+0xe6>
 8020830:	e8df f006 	tbb	[pc, r6]
 8020834:	201d0314 	.word	0x201d0314
 8020838:	14          	.byte	0x14
 8020839:	00          	.byte	0x00
 802083a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 802083e:	05e1      	lsls	r1, r4, #23
 8020840:	bf48      	it	mi
 8020842:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8020846:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802084a:	0d1b      	lsrs	r3, r3, #20
 802084c:	051b      	lsls	r3, r3, #20
 802084e:	2b00      	cmp	r3, #0
 8020850:	d1bb      	bne.n	80207ca <_strtod_l+0x72>
 8020852:	f7fe fbb1 	bl	801efb8 <__errno>
 8020856:	2322      	movs	r3, #34	@ 0x22
 8020858:	6003      	str	r3, [r0, #0]
 802085a:	e7b6      	b.n	80207ca <_strtod_l+0x72>
 802085c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8020860:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8020864:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8020868:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 802086c:	e7e7      	b.n	802083e <_strtod_l+0xe6>
 802086e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80209ec <_strtod_l+0x294>
 8020872:	e7e4      	b.n	802083e <_strtod_l+0xe6>
 8020874:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8020878:	f04f 3aff 	mov.w	sl, #4294967295
 802087c:	e7df      	b.n	802083e <_strtod_l+0xe6>
 802087e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020880:	1c5a      	adds	r2, r3, #1
 8020882:	9219      	str	r2, [sp, #100]	@ 0x64
 8020884:	785b      	ldrb	r3, [r3, #1]
 8020886:	2b30      	cmp	r3, #48	@ 0x30
 8020888:	d0f9      	beq.n	802087e <_strtod_l+0x126>
 802088a:	2b00      	cmp	r3, #0
 802088c:	d09d      	beq.n	80207ca <_strtod_l+0x72>
 802088e:	2301      	movs	r3, #1
 8020890:	9309      	str	r3, [sp, #36]	@ 0x24
 8020892:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020894:	930c      	str	r3, [sp, #48]	@ 0x30
 8020896:	2300      	movs	r3, #0
 8020898:	9308      	str	r3, [sp, #32]
 802089a:	930a      	str	r3, [sp, #40]	@ 0x28
 802089c:	461f      	mov	r7, r3
 802089e:	220a      	movs	r2, #10
 80208a0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80208a2:	7805      	ldrb	r5, [r0, #0]
 80208a4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80208a8:	b2d9      	uxtb	r1, r3
 80208aa:	2909      	cmp	r1, #9
 80208ac:	d928      	bls.n	8020900 <_strtod_l+0x1a8>
 80208ae:	494e      	ldr	r1, [pc, #312]	@ (80209e8 <_strtod_l+0x290>)
 80208b0:	2201      	movs	r2, #1
 80208b2:	f001 f8f5 	bl	8021aa0 <strncmp>
 80208b6:	2800      	cmp	r0, #0
 80208b8:	d032      	beq.n	8020920 <_strtod_l+0x1c8>
 80208ba:	2000      	movs	r0, #0
 80208bc:	462a      	mov	r2, r5
 80208be:	4681      	mov	r9, r0
 80208c0:	463d      	mov	r5, r7
 80208c2:	4603      	mov	r3, r0
 80208c4:	2a65      	cmp	r2, #101	@ 0x65
 80208c6:	d001      	beq.n	80208cc <_strtod_l+0x174>
 80208c8:	2a45      	cmp	r2, #69	@ 0x45
 80208ca:	d114      	bne.n	80208f6 <_strtod_l+0x19e>
 80208cc:	b91d      	cbnz	r5, 80208d6 <_strtod_l+0x17e>
 80208ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80208d0:	4302      	orrs	r2, r0
 80208d2:	d095      	beq.n	8020800 <_strtod_l+0xa8>
 80208d4:	2500      	movs	r5, #0
 80208d6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80208d8:	1c62      	adds	r2, r4, #1
 80208da:	9219      	str	r2, [sp, #100]	@ 0x64
 80208dc:	7862      	ldrb	r2, [r4, #1]
 80208de:	2a2b      	cmp	r2, #43	@ 0x2b
 80208e0:	d077      	beq.n	80209d2 <_strtod_l+0x27a>
 80208e2:	2a2d      	cmp	r2, #45	@ 0x2d
 80208e4:	d07b      	beq.n	80209de <_strtod_l+0x286>
 80208e6:	f04f 0c00 	mov.w	ip, #0
 80208ea:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80208ee:	2909      	cmp	r1, #9
 80208f0:	f240 8082 	bls.w	80209f8 <_strtod_l+0x2a0>
 80208f4:	9419      	str	r4, [sp, #100]	@ 0x64
 80208f6:	f04f 0800 	mov.w	r8, #0
 80208fa:	e0a2      	b.n	8020a42 <_strtod_l+0x2ea>
 80208fc:	2300      	movs	r3, #0
 80208fe:	e7c7      	b.n	8020890 <_strtod_l+0x138>
 8020900:	2f08      	cmp	r7, #8
 8020902:	bfd5      	itete	le
 8020904:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8020906:	9908      	ldrgt	r1, [sp, #32]
 8020908:	fb02 3301 	mlale	r3, r2, r1, r3
 802090c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8020910:	f100 0001 	add.w	r0, r0, #1
 8020914:	bfd4      	ite	le
 8020916:	930a      	strle	r3, [sp, #40]	@ 0x28
 8020918:	9308      	strgt	r3, [sp, #32]
 802091a:	3701      	adds	r7, #1
 802091c:	9019      	str	r0, [sp, #100]	@ 0x64
 802091e:	e7bf      	b.n	80208a0 <_strtod_l+0x148>
 8020920:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020922:	1c5a      	adds	r2, r3, #1
 8020924:	9219      	str	r2, [sp, #100]	@ 0x64
 8020926:	785a      	ldrb	r2, [r3, #1]
 8020928:	b37f      	cbz	r7, 802098a <_strtod_l+0x232>
 802092a:	4681      	mov	r9, r0
 802092c:	463d      	mov	r5, r7
 802092e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8020932:	2b09      	cmp	r3, #9
 8020934:	d912      	bls.n	802095c <_strtod_l+0x204>
 8020936:	2301      	movs	r3, #1
 8020938:	e7c4      	b.n	80208c4 <_strtod_l+0x16c>
 802093a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802093c:	1c5a      	adds	r2, r3, #1
 802093e:	9219      	str	r2, [sp, #100]	@ 0x64
 8020940:	785a      	ldrb	r2, [r3, #1]
 8020942:	3001      	adds	r0, #1
 8020944:	2a30      	cmp	r2, #48	@ 0x30
 8020946:	d0f8      	beq.n	802093a <_strtod_l+0x1e2>
 8020948:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 802094c:	2b08      	cmp	r3, #8
 802094e:	f200 84d3 	bhi.w	80212f8 <_strtod_l+0xba0>
 8020952:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020954:	930c      	str	r3, [sp, #48]	@ 0x30
 8020956:	4681      	mov	r9, r0
 8020958:	2000      	movs	r0, #0
 802095a:	4605      	mov	r5, r0
 802095c:	3a30      	subs	r2, #48	@ 0x30
 802095e:	f100 0301 	add.w	r3, r0, #1
 8020962:	d02a      	beq.n	80209ba <_strtod_l+0x262>
 8020964:	4499      	add	r9, r3
 8020966:	eb00 0c05 	add.w	ip, r0, r5
 802096a:	462b      	mov	r3, r5
 802096c:	210a      	movs	r1, #10
 802096e:	4563      	cmp	r3, ip
 8020970:	d10d      	bne.n	802098e <_strtod_l+0x236>
 8020972:	1c69      	adds	r1, r5, #1
 8020974:	4401      	add	r1, r0
 8020976:	4428      	add	r0, r5
 8020978:	2808      	cmp	r0, #8
 802097a:	dc16      	bgt.n	80209aa <_strtod_l+0x252>
 802097c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802097e:	230a      	movs	r3, #10
 8020980:	fb03 2300 	mla	r3, r3, r0, r2
 8020984:	930a      	str	r3, [sp, #40]	@ 0x28
 8020986:	2300      	movs	r3, #0
 8020988:	e018      	b.n	80209bc <_strtod_l+0x264>
 802098a:	4638      	mov	r0, r7
 802098c:	e7da      	b.n	8020944 <_strtod_l+0x1ec>
 802098e:	2b08      	cmp	r3, #8
 8020990:	f103 0301 	add.w	r3, r3, #1
 8020994:	dc03      	bgt.n	802099e <_strtod_l+0x246>
 8020996:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8020998:	434e      	muls	r6, r1
 802099a:	960a      	str	r6, [sp, #40]	@ 0x28
 802099c:	e7e7      	b.n	802096e <_strtod_l+0x216>
 802099e:	2b10      	cmp	r3, #16
 80209a0:	bfde      	ittt	le
 80209a2:	9e08      	ldrle	r6, [sp, #32]
 80209a4:	434e      	mulle	r6, r1
 80209a6:	9608      	strle	r6, [sp, #32]
 80209a8:	e7e1      	b.n	802096e <_strtod_l+0x216>
 80209aa:	280f      	cmp	r0, #15
 80209ac:	dceb      	bgt.n	8020986 <_strtod_l+0x22e>
 80209ae:	9808      	ldr	r0, [sp, #32]
 80209b0:	230a      	movs	r3, #10
 80209b2:	fb03 2300 	mla	r3, r3, r0, r2
 80209b6:	9308      	str	r3, [sp, #32]
 80209b8:	e7e5      	b.n	8020986 <_strtod_l+0x22e>
 80209ba:	4629      	mov	r1, r5
 80209bc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80209be:	1c50      	adds	r0, r2, #1
 80209c0:	9019      	str	r0, [sp, #100]	@ 0x64
 80209c2:	7852      	ldrb	r2, [r2, #1]
 80209c4:	4618      	mov	r0, r3
 80209c6:	460d      	mov	r5, r1
 80209c8:	e7b1      	b.n	802092e <_strtod_l+0x1d6>
 80209ca:	f04f 0900 	mov.w	r9, #0
 80209ce:	2301      	movs	r3, #1
 80209d0:	e77d      	b.n	80208ce <_strtod_l+0x176>
 80209d2:	f04f 0c00 	mov.w	ip, #0
 80209d6:	1ca2      	adds	r2, r4, #2
 80209d8:	9219      	str	r2, [sp, #100]	@ 0x64
 80209da:	78a2      	ldrb	r2, [r4, #2]
 80209dc:	e785      	b.n	80208ea <_strtod_l+0x192>
 80209de:	f04f 0c01 	mov.w	ip, #1
 80209e2:	e7f8      	b.n	80209d6 <_strtod_l+0x27e>
 80209e4:	08025980 	.word	0x08025980
 80209e8:	08025968 	.word	0x08025968
 80209ec:	7ff00000 	.word	0x7ff00000
 80209f0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80209f2:	1c51      	adds	r1, r2, #1
 80209f4:	9119      	str	r1, [sp, #100]	@ 0x64
 80209f6:	7852      	ldrb	r2, [r2, #1]
 80209f8:	2a30      	cmp	r2, #48	@ 0x30
 80209fa:	d0f9      	beq.n	80209f0 <_strtod_l+0x298>
 80209fc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8020a00:	2908      	cmp	r1, #8
 8020a02:	f63f af78 	bhi.w	80208f6 <_strtod_l+0x19e>
 8020a06:	3a30      	subs	r2, #48	@ 0x30
 8020a08:	920e      	str	r2, [sp, #56]	@ 0x38
 8020a0a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8020a0c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8020a0e:	f04f 080a 	mov.w	r8, #10
 8020a12:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8020a14:	1c56      	adds	r6, r2, #1
 8020a16:	9619      	str	r6, [sp, #100]	@ 0x64
 8020a18:	7852      	ldrb	r2, [r2, #1]
 8020a1a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8020a1e:	f1be 0f09 	cmp.w	lr, #9
 8020a22:	d939      	bls.n	8020a98 <_strtod_l+0x340>
 8020a24:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8020a26:	1a76      	subs	r6, r6, r1
 8020a28:	2e08      	cmp	r6, #8
 8020a2a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8020a2e:	dc03      	bgt.n	8020a38 <_strtod_l+0x2e0>
 8020a30:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8020a32:	4588      	cmp	r8, r1
 8020a34:	bfa8      	it	ge
 8020a36:	4688      	movge	r8, r1
 8020a38:	f1bc 0f00 	cmp.w	ip, #0
 8020a3c:	d001      	beq.n	8020a42 <_strtod_l+0x2ea>
 8020a3e:	f1c8 0800 	rsb	r8, r8, #0
 8020a42:	2d00      	cmp	r5, #0
 8020a44:	d14e      	bne.n	8020ae4 <_strtod_l+0x38c>
 8020a46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020a48:	4308      	orrs	r0, r1
 8020a4a:	f47f aebe 	bne.w	80207ca <_strtod_l+0x72>
 8020a4e:	2b00      	cmp	r3, #0
 8020a50:	f47f aed6 	bne.w	8020800 <_strtod_l+0xa8>
 8020a54:	2a69      	cmp	r2, #105	@ 0x69
 8020a56:	d028      	beq.n	8020aaa <_strtod_l+0x352>
 8020a58:	dc25      	bgt.n	8020aa6 <_strtod_l+0x34e>
 8020a5a:	2a49      	cmp	r2, #73	@ 0x49
 8020a5c:	d025      	beq.n	8020aaa <_strtod_l+0x352>
 8020a5e:	2a4e      	cmp	r2, #78	@ 0x4e
 8020a60:	f47f aece 	bne.w	8020800 <_strtod_l+0xa8>
 8020a64:	499b      	ldr	r1, [pc, #620]	@ (8020cd4 <_strtod_l+0x57c>)
 8020a66:	a819      	add	r0, sp, #100	@ 0x64
 8020a68:	f001 fafa 	bl	8022060 <__match>
 8020a6c:	2800      	cmp	r0, #0
 8020a6e:	f43f aec7 	beq.w	8020800 <_strtod_l+0xa8>
 8020a72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020a74:	781b      	ldrb	r3, [r3, #0]
 8020a76:	2b28      	cmp	r3, #40	@ 0x28
 8020a78:	d12e      	bne.n	8020ad8 <_strtod_l+0x380>
 8020a7a:	4997      	ldr	r1, [pc, #604]	@ (8020cd8 <_strtod_l+0x580>)
 8020a7c:	aa1c      	add	r2, sp, #112	@ 0x70
 8020a7e:	a819      	add	r0, sp, #100	@ 0x64
 8020a80:	f001 fb02 	bl	8022088 <__hexnan>
 8020a84:	2805      	cmp	r0, #5
 8020a86:	d127      	bne.n	8020ad8 <_strtod_l+0x380>
 8020a88:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8020a8a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8020a8e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8020a92:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8020a96:	e698      	b.n	80207ca <_strtod_l+0x72>
 8020a98:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8020a9a:	fb08 2101 	mla	r1, r8, r1, r2
 8020a9e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8020aa2:	920e      	str	r2, [sp, #56]	@ 0x38
 8020aa4:	e7b5      	b.n	8020a12 <_strtod_l+0x2ba>
 8020aa6:	2a6e      	cmp	r2, #110	@ 0x6e
 8020aa8:	e7da      	b.n	8020a60 <_strtod_l+0x308>
 8020aaa:	498c      	ldr	r1, [pc, #560]	@ (8020cdc <_strtod_l+0x584>)
 8020aac:	a819      	add	r0, sp, #100	@ 0x64
 8020aae:	f001 fad7 	bl	8022060 <__match>
 8020ab2:	2800      	cmp	r0, #0
 8020ab4:	f43f aea4 	beq.w	8020800 <_strtod_l+0xa8>
 8020ab8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020aba:	4989      	ldr	r1, [pc, #548]	@ (8020ce0 <_strtod_l+0x588>)
 8020abc:	3b01      	subs	r3, #1
 8020abe:	a819      	add	r0, sp, #100	@ 0x64
 8020ac0:	9319      	str	r3, [sp, #100]	@ 0x64
 8020ac2:	f001 facd 	bl	8022060 <__match>
 8020ac6:	b910      	cbnz	r0, 8020ace <_strtod_l+0x376>
 8020ac8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020aca:	3301      	adds	r3, #1
 8020acc:	9319      	str	r3, [sp, #100]	@ 0x64
 8020ace:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8020cf0 <_strtod_l+0x598>
 8020ad2:	f04f 0a00 	mov.w	sl, #0
 8020ad6:	e678      	b.n	80207ca <_strtod_l+0x72>
 8020ad8:	4882      	ldr	r0, [pc, #520]	@ (8020ce4 <_strtod_l+0x58c>)
 8020ada:	f001 f815 	bl	8021b08 <nan>
 8020ade:	ec5b ab10 	vmov	sl, fp, d0
 8020ae2:	e672      	b.n	80207ca <_strtod_l+0x72>
 8020ae4:	eba8 0309 	sub.w	r3, r8, r9
 8020ae8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020aea:	9309      	str	r3, [sp, #36]	@ 0x24
 8020aec:	2f00      	cmp	r7, #0
 8020aee:	bf08      	it	eq
 8020af0:	462f      	moveq	r7, r5
 8020af2:	2d10      	cmp	r5, #16
 8020af4:	462c      	mov	r4, r5
 8020af6:	bfa8      	it	ge
 8020af8:	2410      	movge	r4, #16
 8020afa:	f7df fd1b 	bl	8000534 <__aeabi_ui2d>
 8020afe:	2d09      	cmp	r5, #9
 8020b00:	4682      	mov	sl, r0
 8020b02:	468b      	mov	fp, r1
 8020b04:	dc13      	bgt.n	8020b2e <_strtod_l+0x3d6>
 8020b06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020b08:	2b00      	cmp	r3, #0
 8020b0a:	f43f ae5e 	beq.w	80207ca <_strtod_l+0x72>
 8020b0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020b10:	dd78      	ble.n	8020c04 <_strtod_l+0x4ac>
 8020b12:	2b16      	cmp	r3, #22
 8020b14:	dc5f      	bgt.n	8020bd6 <_strtod_l+0x47e>
 8020b16:	4974      	ldr	r1, [pc, #464]	@ (8020ce8 <_strtod_l+0x590>)
 8020b18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8020b1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020b20:	4652      	mov	r2, sl
 8020b22:	465b      	mov	r3, fp
 8020b24:	f7df fd80 	bl	8000628 <__aeabi_dmul>
 8020b28:	4682      	mov	sl, r0
 8020b2a:	468b      	mov	fp, r1
 8020b2c:	e64d      	b.n	80207ca <_strtod_l+0x72>
 8020b2e:	4b6e      	ldr	r3, [pc, #440]	@ (8020ce8 <_strtod_l+0x590>)
 8020b30:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8020b34:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8020b38:	f7df fd76 	bl	8000628 <__aeabi_dmul>
 8020b3c:	4682      	mov	sl, r0
 8020b3e:	9808      	ldr	r0, [sp, #32]
 8020b40:	468b      	mov	fp, r1
 8020b42:	f7df fcf7 	bl	8000534 <__aeabi_ui2d>
 8020b46:	4602      	mov	r2, r0
 8020b48:	460b      	mov	r3, r1
 8020b4a:	4650      	mov	r0, sl
 8020b4c:	4659      	mov	r1, fp
 8020b4e:	f7df fbb5 	bl	80002bc <__adddf3>
 8020b52:	2d0f      	cmp	r5, #15
 8020b54:	4682      	mov	sl, r0
 8020b56:	468b      	mov	fp, r1
 8020b58:	ddd5      	ble.n	8020b06 <_strtod_l+0x3ae>
 8020b5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020b5c:	1b2c      	subs	r4, r5, r4
 8020b5e:	441c      	add	r4, r3
 8020b60:	2c00      	cmp	r4, #0
 8020b62:	f340 8096 	ble.w	8020c92 <_strtod_l+0x53a>
 8020b66:	f014 030f 	ands.w	r3, r4, #15
 8020b6a:	d00a      	beq.n	8020b82 <_strtod_l+0x42a>
 8020b6c:	495e      	ldr	r1, [pc, #376]	@ (8020ce8 <_strtod_l+0x590>)
 8020b6e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8020b72:	4652      	mov	r2, sl
 8020b74:	465b      	mov	r3, fp
 8020b76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020b7a:	f7df fd55 	bl	8000628 <__aeabi_dmul>
 8020b7e:	4682      	mov	sl, r0
 8020b80:	468b      	mov	fp, r1
 8020b82:	f034 040f 	bics.w	r4, r4, #15
 8020b86:	d073      	beq.n	8020c70 <_strtod_l+0x518>
 8020b88:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8020b8c:	dd48      	ble.n	8020c20 <_strtod_l+0x4c8>
 8020b8e:	2400      	movs	r4, #0
 8020b90:	46a0      	mov	r8, r4
 8020b92:	940a      	str	r4, [sp, #40]	@ 0x28
 8020b94:	46a1      	mov	r9, r4
 8020b96:	9a05      	ldr	r2, [sp, #20]
 8020b98:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8020cf0 <_strtod_l+0x598>
 8020b9c:	2322      	movs	r3, #34	@ 0x22
 8020b9e:	6013      	str	r3, [r2, #0]
 8020ba0:	f04f 0a00 	mov.w	sl, #0
 8020ba4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020ba6:	2b00      	cmp	r3, #0
 8020ba8:	f43f ae0f 	beq.w	80207ca <_strtod_l+0x72>
 8020bac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020bae:	9805      	ldr	r0, [sp, #20]
 8020bb0:	f7ff f940 	bl	801fe34 <_Bfree>
 8020bb4:	9805      	ldr	r0, [sp, #20]
 8020bb6:	4649      	mov	r1, r9
 8020bb8:	f7ff f93c 	bl	801fe34 <_Bfree>
 8020bbc:	9805      	ldr	r0, [sp, #20]
 8020bbe:	4641      	mov	r1, r8
 8020bc0:	f7ff f938 	bl	801fe34 <_Bfree>
 8020bc4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020bc6:	9805      	ldr	r0, [sp, #20]
 8020bc8:	f7ff f934 	bl	801fe34 <_Bfree>
 8020bcc:	9805      	ldr	r0, [sp, #20]
 8020bce:	4621      	mov	r1, r4
 8020bd0:	f7ff f930 	bl	801fe34 <_Bfree>
 8020bd4:	e5f9      	b.n	80207ca <_strtod_l+0x72>
 8020bd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020bd8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8020bdc:	4293      	cmp	r3, r2
 8020bde:	dbbc      	blt.n	8020b5a <_strtod_l+0x402>
 8020be0:	4c41      	ldr	r4, [pc, #260]	@ (8020ce8 <_strtod_l+0x590>)
 8020be2:	f1c5 050f 	rsb	r5, r5, #15
 8020be6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8020bea:	4652      	mov	r2, sl
 8020bec:	465b      	mov	r3, fp
 8020bee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020bf2:	f7df fd19 	bl	8000628 <__aeabi_dmul>
 8020bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020bf8:	1b5d      	subs	r5, r3, r5
 8020bfa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8020bfe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8020c02:	e78f      	b.n	8020b24 <_strtod_l+0x3cc>
 8020c04:	3316      	adds	r3, #22
 8020c06:	dba8      	blt.n	8020b5a <_strtod_l+0x402>
 8020c08:	4b37      	ldr	r3, [pc, #220]	@ (8020ce8 <_strtod_l+0x590>)
 8020c0a:	eba9 0808 	sub.w	r8, r9, r8
 8020c0e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8020c12:	e9d8 2300 	ldrd	r2, r3, [r8]
 8020c16:	4650      	mov	r0, sl
 8020c18:	4659      	mov	r1, fp
 8020c1a:	f7df fe2f 	bl	800087c <__aeabi_ddiv>
 8020c1e:	e783      	b.n	8020b28 <_strtod_l+0x3d0>
 8020c20:	4b32      	ldr	r3, [pc, #200]	@ (8020cec <_strtod_l+0x594>)
 8020c22:	9308      	str	r3, [sp, #32]
 8020c24:	2300      	movs	r3, #0
 8020c26:	1124      	asrs	r4, r4, #4
 8020c28:	4650      	mov	r0, sl
 8020c2a:	4659      	mov	r1, fp
 8020c2c:	461e      	mov	r6, r3
 8020c2e:	2c01      	cmp	r4, #1
 8020c30:	dc21      	bgt.n	8020c76 <_strtod_l+0x51e>
 8020c32:	b10b      	cbz	r3, 8020c38 <_strtod_l+0x4e0>
 8020c34:	4682      	mov	sl, r0
 8020c36:	468b      	mov	fp, r1
 8020c38:	492c      	ldr	r1, [pc, #176]	@ (8020cec <_strtod_l+0x594>)
 8020c3a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8020c3e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8020c42:	4652      	mov	r2, sl
 8020c44:	465b      	mov	r3, fp
 8020c46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020c4a:	f7df fced 	bl	8000628 <__aeabi_dmul>
 8020c4e:	4b28      	ldr	r3, [pc, #160]	@ (8020cf0 <_strtod_l+0x598>)
 8020c50:	460a      	mov	r2, r1
 8020c52:	400b      	ands	r3, r1
 8020c54:	4927      	ldr	r1, [pc, #156]	@ (8020cf4 <_strtod_l+0x59c>)
 8020c56:	428b      	cmp	r3, r1
 8020c58:	4682      	mov	sl, r0
 8020c5a:	d898      	bhi.n	8020b8e <_strtod_l+0x436>
 8020c5c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8020c60:	428b      	cmp	r3, r1
 8020c62:	bf86      	itte	hi
 8020c64:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8020cf8 <_strtod_l+0x5a0>
 8020c68:	f04f 3aff 	movhi.w	sl, #4294967295
 8020c6c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8020c70:	2300      	movs	r3, #0
 8020c72:	9308      	str	r3, [sp, #32]
 8020c74:	e07a      	b.n	8020d6c <_strtod_l+0x614>
 8020c76:	07e2      	lsls	r2, r4, #31
 8020c78:	d505      	bpl.n	8020c86 <_strtod_l+0x52e>
 8020c7a:	9b08      	ldr	r3, [sp, #32]
 8020c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c80:	f7df fcd2 	bl	8000628 <__aeabi_dmul>
 8020c84:	2301      	movs	r3, #1
 8020c86:	9a08      	ldr	r2, [sp, #32]
 8020c88:	3208      	adds	r2, #8
 8020c8a:	3601      	adds	r6, #1
 8020c8c:	1064      	asrs	r4, r4, #1
 8020c8e:	9208      	str	r2, [sp, #32]
 8020c90:	e7cd      	b.n	8020c2e <_strtod_l+0x4d6>
 8020c92:	d0ed      	beq.n	8020c70 <_strtod_l+0x518>
 8020c94:	4264      	negs	r4, r4
 8020c96:	f014 020f 	ands.w	r2, r4, #15
 8020c9a:	d00a      	beq.n	8020cb2 <_strtod_l+0x55a>
 8020c9c:	4b12      	ldr	r3, [pc, #72]	@ (8020ce8 <_strtod_l+0x590>)
 8020c9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020ca2:	4650      	mov	r0, sl
 8020ca4:	4659      	mov	r1, fp
 8020ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020caa:	f7df fde7 	bl	800087c <__aeabi_ddiv>
 8020cae:	4682      	mov	sl, r0
 8020cb0:	468b      	mov	fp, r1
 8020cb2:	1124      	asrs	r4, r4, #4
 8020cb4:	d0dc      	beq.n	8020c70 <_strtod_l+0x518>
 8020cb6:	2c1f      	cmp	r4, #31
 8020cb8:	dd20      	ble.n	8020cfc <_strtod_l+0x5a4>
 8020cba:	2400      	movs	r4, #0
 8020cbc:	46a0      	mov	r8, r4
 8020cbe:	940a      	str	r4, [sp, #40]	@ 0x28
 8020cc0:	46a1      	mov	r9, r4
 8020cc2:	9a05      	ldr	r2, [sp, #20]
 8020cc4:	2322      	movs	r3, #34	@ 0x22
 8020cc6:	f04f 0a00 	mov.w	sl, #0
 8020cca:	f04f 0b00 	mov.w	fp, #0
 8020cce:	6013      	str	r3, [r2, #0]
 8020cd0:	e768      	b.n	8020ba4 <_strtod_l+0x44c>
 8020cd2:	bf00      	nop
 8020cd4:	080256be 	.word	0x080256be
 8020cd8:	0802596c 	.word	0x0802596c
 8020cdc:	080256b6 	.word	0x080256b6
 8020ce0:	0802579a 	.word	0x0802579a
 8020ce4:	08025796 	.word	0x08025796
 8020ce8:	080258a0 	.word	0x080258a0
 8020cec:	08025878 	.word	0x08025878
 8020cf0:	7ff00000 	.word	0x7ff00000
 8020cf4:	7ca00000 	.word	0x7ca00000
 8020cf8:	7fefffff 	.word	0x7fefffff
 8020cfc:	f014 0310 	ands.w	r3, r4, #16
 8020d00:	bf18      	it	ne
 8020d02:	236a      	movne	r3, #106	@ 0x6a
 8020d04:	4ea9      	ldr	r6, [pc, #676]	@ (8020fac <_strtod_l+0x854>)
 8020d06:	9308      	str	r3, [sp, #32]
 8020d08:	4650      	mov	r0, sl
 8020d0a:	4659      	mov	r1, fp
 8020d0c:	2300      	movs	r3, #0
 8020d0e:	07e2      	lsls	r2, r4, #31
 8020d10:	d504      	bpl.n	8020d1c <_strtod_l+0x5c4>
 8020d12:	e9d6 2300 	ldrd	r2, r3, [r6]
 8020d16:	f7df fc87 	bl	8000628 <__aeabi_dmul>
 8020d1a:	2301      	movs	r3, #1
 8020d1c:	1064      	asrs	r4, r4, #1
 8020d1e:	f106 0608 	add.w	r6, r6, #8
 8020d22:	d1f4      	bne.n	8020d0e <_strtod_l+0x5b6>
 8020d24:	b10b      	cbz	r3, 8020d2a <_strtod_l+0x5d2>
 8020d26:	4682      	mov	sl, r0
 8020d28:	468b      	mov	fp, r1
 8020d2a:	9b08      	ldr	r3, [sp, #32]
 8020d2c:	b1b3      	cbz	r3, 8020d5c <_strtod_l+0x604>
 8020d2e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8020d32:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8020d36:	2b00      	cmp	r3, #0
 8020d38:	4659      	mov	r1, fp
 8020d3a:	dd0f      	ble.n	8020d5c <_strtod_l+0x604>
 8020d3c:	2b1f      	cmp	r3, #31
 8020d3e:	dd55      	ble.n	8020dec <_strtod_l+0x694>
 8020d40:	2b34      	cmp	r3, #52	@ 0x34
 8020d42:	bfde      	ittt	le
 8020d44:	f04f 33ff 	movle.w	r3, #4294967295
 8020d48:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8020d4c:	4093      	lslle	r3, r2
 8020d4e:	f04f 0a00 	mov.w	sl, #0
 8020d52:	bfcc      	ite	gt
 8020d54:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8020d58:	ea03 0b01 	andle.w	fp, r3, r1
 8020d5c:	2200      	movs	r2, #0
 8020d5e:	2300      	movs	r3, #0
 8020d60:	4650      	mov	r0, sl
 8020d62:	4659      	mov	r1, fp
 8020d64:	f7df fec8 	bl	8000af8 <__aeabi_dcmpeq>
 8020d68:	2800      	cmp	r0, #0
 8020d6a:	d1a6      	bne.n	8020cba <_strtod_l+0x562>
 8020d6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020d6e:	9300      	str	r3, [sp, #0]
 8020d70:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8020d72:	9805      	ldr	r0, [sp, #20]
 8020d74:	462b      	mov	r3, r5
 8020d76:	463a      	mov	r2, r7
 8020d78:	f7ff f8c4 	bl	801ff04 <__s2b>
 8020d7c:	900a      	str	r0, [sp, #40]	@ 0x28
 8020d7e:	2800      	cmp	r0, #0
 8020d80:	f43f af05 	beq.w	8020b8e <_strtod_l+0x436>
 8020d84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020d86:	2a00      	cmp	r2, #0
 8020d88:	eba9 0308 	sub.w	r3, r9, r8
 8020d8c:	bfa8      	it	ge
 8020d8e:	2300      	movge	r3, #0
 8020d90:	9312      	str	r3, [sp, #72]	@ 0x48
 8020d92:	2400      	movs	r4, #0
 8020d94:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8020d98:	9316      	str	r3, [sp, #88]	@ 0x58
 8020d9a:	46a0      	mov	r8, r4
 8020d9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020d9e:	9805      	ldr	r0, [sp, #20]
 8020da0:	6859      	ldr	r1, [r3, #4]
 8020da2:	f7ff f807 	bl	801fdb4 <_Balloc>
 8020da6:	4681      	mov	r9, r0
 8020da8:	2800      	cmp	r0, #0
 8020daa:	f43f aef4 	beq.w	8020b96 <_strtod_l+0x43e>
 8020dae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020db0:	691a      	ldr	r2, [r3, #16]
 8020db2:	3202      	adds	r2, #2
 8020db4:	f103 010c 	add.w	r1, r3, #12
 8020db8:	0092      	lsls	r2, r2, #2
 8020dba:	300c      	adds	r0, #12
 8020dbc:	f7fe f931 	bl	801f022 <memcpy>
 8020dc0:	ec4b ab10 	vmov	d0, sl, fp
 8020dc4:	9805      	ldr	r0, [sp, #20]
 8020dc6:	aa1c      	add	r2, sp, #112	@ 0x70
 8020dc8:	a91b      	add	r1, sp, #108	@ 0x6c
 8020dca:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8020dce:	f7ff fbd5 	bl	802057c <__d2b>
 8020dd2:	901a      	str	r0, [sp, #104]	@ 0x68
 8020dd4:	2800      	cmp	r0, #0
 8020dd6:	f43f aede 	beq.w	8020b96 <_strtod_l+0x43e>
 8020dda:	9805      	ldr	r0, [sp, #20]
 8020ddc:	2101      	movs	r1, #1
 8020dde:	f7ff f927 	bl	8020030 <__i2b>
 8020de2:	4680      	mov	r8, r0
 8020de4:	b948      	cbnz	r0, 8020dfa <_strtod_l+0x6a2>
 8020de6:	f04f 0800 	mov.w	r8, #0
 8020dea:	e6d4      	b.n	8020b96 <_strtod_l+0x43e>
 8020dec:	f04f 32ff 	mov.w	r2, #4294967295
 8020df0:	fa02 f303 	lsl.w	r3, r2, r3
 8020df4:	ea03 0a0a 	and.w	sl, r3, sl
 8020df8:	e7b0      	b.n	8020d5c <_strtod_l+0x604>
 8020dfa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8020dfc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8020dfe:	2d00      	cmp	r5, #0
 8020e00:	bfab      	itete	ge
 8020e02:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8020e04:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8020e06:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8020e08:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8020e0a:	bfac      	ite	ge
 8020e0c:	18ef      	addge	r7, r5, r3
 8020e0e:	1b5e      	sublt	r6, r3, r5
 8020e10:	9b08      	ldr	r3, [sp, #32]
 8020e12:	1aed      	subs	r5, r5, r3
 8020e14:	4415      	add	r5, r2
 8020e16:	4b66      	ldr	r3, [pc, #408]	@ (8020fb0 <_strtod_l+0x858>)
 8020e18:	3d01      	subs	r5, #1
 8020e1a:	429d      	cmp	r5, r3
 8020e1c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8020e20:	da50      	bge.n	8020ec4 <_strtod_l+0x76c>
 8020e22:	1b5b      	subs	r3, r3, r5
 8020e24:	2b1f      	cmp	r3, #31
 8020e26:	eba2 0203 	sub.w	r2, r2, r3
 8020e2a:	f04f 0101 	mov.w	r1, #1
 8020e2e:	dc3d      	bgt.n	8020eac <_strtod_l+0x754>
 8020e30:	fa01 f303 	lsl.w	r3, r1, r3
 8020e34:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020e36:	2300      	movs	r3, #0
 8020e38:	9310      	str	r3, [sp, #64]	@ 0x40
 8020e3a:	18bd      	adds	r5, r7, r2
 8020e3c:	9b08      	ldr	r3, [sp, #32]
 8020e3e:	42af      	cmp	r7, r5
 8020e40:	4416      	add	r6, r2
 8020e42:	441e      	add	r6, r3
 8020e44:	463b      	mov	r3, r7
 8020e46:	bfa8      	it	ge
 8020e48:	462b      	movge	r3, r5
 8020e4a:	42b3      	cmp	r3, r6
 8020e4c:	bfa8      	it	ge
 8020e4e:	4633      	movge	r3, r6
 8020e50:	2b00      	cmp	r3, #0
 8020e52:	bfc2      	ittt	gt
 8020e54:	1aed      	subgt	r5, r5, r3
 8020e56:	1af6      	subgt	r6, r6, r3
 8020e58:	1aff      	subgt	r7, r7, r3
 8020e5a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020e5c:	2b00      	cmp	r3, #0
 8020e5e:	dd16      	ble.n	8020e8e <_strtod_l+0x736>
 8020e60:	4641      	mov	r1, r8
 8020e62:	9805      	ldr	r0, [sp, #20]
 8020e64:	461a      	mov	r2, r3
 8020e66:	f7ff f9a3 	bl	80201b0 <__pow5mult>
 8020e6a:	4680      	mov	r8, r0
 8020e6c:	2800      	cmp	r0, #0
 8020e6e:	d0ba      	beq.n	8020de6 <_strtod_l+0x68e>
 8020e70:	4601      	mov	r1, r0
 8020e72:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020e74:	9805      	ldr	r0, [sp, #20]
 8020e76:	f7ff f8f1 	bl	802005c <__multiply>
 8020e7a:	900e      	str	r0, [sp, #56]	@ 0x38
 8020e7c:	2800      	cmp	r0, #0
 8020e7e:	f43f ae8a 	beq.w	8020b96 <_strtod_l+0x43e>
 8020e82:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020e84:	9805      	ldr	r0, [sp, #20]
 8020e86:	f7fe ffd5 	bl	801fe34 <_Bfree>
 8020e8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020e8c:	931a      	str	r3, [sp, #104]	@ 0x68
 8020e8e:	2d00      	cmp	r5, #0
 8020e90:	dc1d      	bgt.n	8020ece <_strtod_l+0x776>
 8020e92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020e94:	2b00      	cmp	r3, #0
 8020e96:	dd23      	ble.n	8020ee0 <_strtod_l+0x788>
 8020e98:	4649      	mov	r1, r9
 8020e9a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8020e9c:	9805      	ldr	r0, [sp, #20]
 8020e9e:	f7ff f987 	bl	80201b0 <__pow5mult>
 8020ea2:	4681      	mov	r9, r0
 8020ea4:	b9e0      	cbnz	r0, 8020ee0 <_strtod_l+0x788>
 8020ea6:	f04f 0900 	mov.w	r9, #0
 8020eaa:	e674      	b.n	8020b96 <_strtod_l+0x43e>
 8020eac:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8020eb0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8020eb4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8020eb8:	35e2      	adds	r5, #226	@ 0xe2
 8020eba:	fa01 f305 	lsl.w	r3, r1, r5
 8020ebe:	9310      	str	r3, [sp, #64]	@ 0x40
 8020ec0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8020ec2:	e7ba      	b.n	8020e3a <_strtod_l+0x6e2>
 8020ec4:	2300      	movs	r3, #0
 8020ec6:	9310      	str	r3, [sp, #64]	@ 0x40
 8020ec8:	2301      	movs	r3, #1
 8020eca:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020ecc:	e7b5      	b.n	8020e3a <_strtod_l+0x6e2>
 8020ece:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020ed0:	9805      	ldr	r0, [sp, #20]
 8020ed2:	462a      	mov	r2, r5
 8020ed4:	f7ff f9c6 	bl	8020264 <__lshift>
 8020ed8:	901a      	str	r0, [sp, #104]	@ 0x68
 8020eda:	2800      	cmp	r0, #0
 8020edc:	d1d9      	bne.n	8020e92 <_strtod_l+0x73a>
 8020ede:	e65a      	b.n	8020b96 <_strtod_l+0x43e>
 8020ee0:	2e00      	cmp	r6, #0
 8020ee2:	dd07      	ble.n	8020ef4 <_strtod_l+0x79c>
 8020ee4:	4649      	mov	r1, r9
 8020ee6:	9805      	ldr	r0, [sp, #20]
 8020ee8:	4632      	mov	r2, r6
 8020eea:	f7ff f9bb 	bl	8020264 <__lshift>
 8020eee:	4681      	mov	r9, r0
 8020ef0:	2800      	cmp	r0, #0
 8020ef2:	d0d8      	beq.n	8020ea6 <_strtod_l+0x74e>
 8020ef4:	2f00      	cmp	r7, #0
 8020ef6:	dd08      	ble.n	8020f0a <_strtod_l+0x7b2>
 8020ef8:	4641      	mov	r1, r8
 8020efa:	9805      	ldr	r0, [sp, #20]
 8020efc:	463a      	mov	r2, r7
 8020efe:	f7ff f9b1 	bl	8020264 <__lshift>
 8020f02:	4680      	mov	r8, r0
 8020f04:	2800      	cmp	r0, #0
 8020f06:	f43f ae46 	beq.w	8020b96 <_strtod_l+0x43e>
 8020f0a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020f0c:	9805      	ldr	r0, [sp, #20]
 8020f0e:	464a      	mov	r2, r9
 8020f10:	f7ff fa30 	bl	8020374 <__mdiff>
 8020f14:	4604      	mov	r4, r0
 8020f16:	2800      	cmp	r0, #0
 8020f18:	f43f ae3d 	beq.w	8020b96 <_strtod_l+0x43e>
 8020f1c:	68c3      	ldr	r3, [r0, #12]
 8020f1e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020f20:	2300      	movs	r3, #0
 8020f22:	60c3      	str	r3, [r0, #12]
 8020f24:	4641      	mov	r1, r8
 8020f26:	f7ff fa09 	bl	802033c <__mcmp>
 8020f2a:	2800      	cmp	r0, #0
 8020f2c:	da46      	bge.n	8020fbc <_strtod_l+0x864>
 8020f2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020f30:	ea53 030a 	orrs.w	r3, r3, sl
 8020f34:	d16c      	bne.n	8021010 <_strtod_l+0x8b8>
 8020f36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020f3a:	2b00      	cmp	r3, #0
 8020f3c:	d168      	bne.n	8021010 <_strtod_l+0x8b8>
 8020f3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8020f42:	0d1b      	lsrs	r3, r3, #20
 8020f44:	051b      	lsls	r3, r3, #20
 8020f46:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8020f4a:	d961      	bls.n	8021010 <_strtod_l+0x8b8>
 8020f4c:	6963      	ldr	r3, [r4, #20]
 8020f4e:	b913      	cbnz	r3, 8020f56 <_strtod_l+0x7fe>
 8020f50:	6923      	ldr	r3, [r4, #16]
 8020f52:	2b01      	cmp	r3, #1
 8020f54:	dd5c      	ble.n	8021010 <_strtod_l+0x8b8>
 8020f56:	4621      	mov	r1, r4
 8020f58:	2201      	movs	r2, #1
 8020f5a:	9805      	ldr	r0, [sp, #20]
 8020f5c:	f7ff f982 	bl	8020264 <__lshift>
 8020f60:	4641      	mov	r1, r8
 8020f62:	4604      	mov	r4, r0
 8020f64:	f7ff f9ea 	bl	802033c <__mcmp>
 8020f68:	2800      	cmp	r0, #0
 8020f6a:	dd51      	ble.n	8021010 <_strtod_l+0x8b8>
 8020f6c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8020f70:	9a08      	ldr	r2, [sp, #32]
 8020f72:	0d1b      	lsrs	r3, r3, #20
 8020f74:	051b      	lsls	r3, r3, #20
 8020f76:	2a00      	cmp	r2, #0
 8020f78:	d06b      	beq.n	8021052 <_strtod_l+0x8fa>
 8020f7a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8020f7e:	d868      	bhi.n	8021052 <_strtod_l+0x8fa>
 8020f80:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8020f84:	f67f ae9d 	bls.w	8020cc2 <_strtod_l+0x56a>
 8020f88:	4b0a      	ldr	r3, [pc, #40]	@ (8020fb4 <_strtod_l+0x85c>)
 8020f8a:	4650      	mov	r0, sl
 8020f8c:	4659      	mov	r1, fp
 8020f8e:	2200      	movs	r2, #0
 8020f90:	f7df fb4a 	bl	8000628 <__aeabi_dmul>
 8020f94:	4b08      	ldr	r3, [pc, #32]	@ (8020fb8 <_strtod_l+0x860>)
 8020f96:	400b      	ands	r3, r1
 8020f98:	4682      	mov	sl, r0
 8020f9a:	468b      	mov	fp, r1
 8020f9c:	2b00      	cmp	r3, #0
 8020f9e:	f47f ae05 	bne.w	8020bac <_strtod_l+0x454>
 8020fa2:	9a05      	ldr	r2, [sp, #20]
 8020fa4:	2322      	movs	r3, #34	@ 0x22
 8020fa6:	6013      	str	r3, [r2, #0]
 8020fa8:	e600      	b.n	8020bac <_strtod_l+0x454>
 8020faa:	bf00      	nop
 8020fac:	08025998 	.word	0x08025998
 8020fb0:	fffffc02 	.word	0xfffffc02
 8020fb4:	39500000 	.word	0x39500000
 8020fb8:	7ff00000 	.word	0x7ff00000
 8020fbc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8020fc0:	d165      	bne.n	802108e <_strtod_l+0x936>
 8020fc2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020fc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020fc8:	b35a      	cbz	r2, 8021022 <_strtod_l+0x8ca>
 8020fca:	4a9f      	ldr	r2, [pc, #636]	@ (8021248 <_strtod_l+0xaf0>)
 8020fcc:	4293      	cmp	r3, r2
 8020fce:	d12b      	bne.n	8021028 <_strtod_l+0x8d0>
 8020fd0:	9b08      	ldr	r3, [sp, #32]
 8020fd2:	4651      	mov	r1, sl
 8020fd4:	b303      	cbz	r3, 8021018 <_strtod_l+0x8c0>
 8020fd6:	4b9d      	ldr	r3, [pc, #628]	@ (802124c <_strtod_l+0xaf4>)
 8020fd8:	465a      	mov	r2, fp
 8020fda:	4013      	ands	r3, r2
 8020fdc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8020fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8020fe4:	d81b      	bhi.n	802101e <_strtod_l+0x8c6>
 8020fe6:	0d1b      	lsrs	r3, r3, #20
 8020fe8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8020fec:	fa02 f303 	lsl.w	r3, r2, r3
 8020ff0:	4299      	cmp	r1, r3
 8020ff2:	d119      	bne.n	8021028 <_strtod_l+0x8d0>
 8020ff4:	4b96      	ldr	r3, [pc, #600]	@ (8021250 <_strtod_l+0xaf8>)
 8020ff6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020ff8:	429a      	cmp	r2, r3
 8020ffa:	d102      	bne.n	8021002 <_strtod_l+0x8aa>
 8020ffc:	3101      	adds	r1, #1
 8020ffe:	f43f adca 	beq.w	8020b96 <_strtod_l+0x43e>
 8021002:	4b92      	ldr	r3, [pc, #584]	@ (802124c <_strtod_l+0xaf4>)
 8021004:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021006:	401a      	ands	r2, r3
 8021008:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 802100c:	f04f 0a00 	mov.w	sl, #0
 8021010:	9b08      	ldr	r3, [sp, #32]
 8021012:	2b00      	cmp	r3, #0
 8021014:	d1b8      	bne.n	8020f88 <_strtod_l+0x830>
 8021016:	e5c9      	b.n	8020bac <_strtod_l+0x454>
 8021018:	f04f 33ff 	mov.w	r3, #4294967295
 802101c:	e7e8      	b.n	8020ff0 <_strtod_l+0x898>
 802101e:	4613      	mov	r3, r2
 8021020:	e7e6      	b.n	8020ff0 <_strtod_l+0x898>
 8021022:	ea53 030a 	orrs.w	r3, r3, sl
 8021026:	d0a1      	beq.n	8020f6c <_strtod_l+0x814>
 8021028:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802102a:	b1db      	cbz	r3, 8021064 <_strtod_l+0x90c>
 802102c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802102e:	4213      	tst	r3, r2
 8021030:	d0ee      	beq.n	8021010 <_strtod_l+0x8b8>
 8021032:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021034:	9a08      	ldr	r2, [sp, #32]
 8021036:	4650      	mov	r0, sl
 8021038:	4659      	mov	r1, fp
 802103a:	b1bb      	cbz	r3, 802106c <_strtod_l+0x914>
 802103c:	f7ff fb6c 	bl	8020718 <sulp>
 8021040:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8021044:	ec53 2b10 	vmov	r2, r3, d0
 8021048:	f7df f938 	bl	80002bc <__adddf3>
 802104c:	4682      	mov	sl, r0
 802104e:	468b      	mov	fp, r1
 8021050:	e7de      	b.n	8021010 <_strtod_l+0x8b8>
 8021052:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8021056:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 802105a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 802105e:	f04f 3aff 	mov.w	sl, #4294967295
 8021062:	e7d5      	b.n	8021010 <_strtod_l+0x8b8>
 8021064:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021066:	ea13 0f0a 	tst.w	r3, sl
 802106a:	e7e1      	b.n	8021030 <_strtod_l+0x8d8>
 802106c:	f7ff fb54 	bl	8020718 <sulp>
 8021070:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8021074:	ec53 2b10 	vmov	r2, r3, d0
 8021078:	f7df f91e 	bl	80002b8 <__aeabi_dsub>
 802107c:	2200      	movs	r2, #0
 802107e:	2300      	movs	r3, #0
 8021080:	4682      	mov	sl, r0
 8021082:	468b      	mov	fp, r1
 8021084:	f7df fd38 	bl	8000af8 <__aeabi_dcmpeq>
 8021088:	2800      	cmp	r0, #0
 802108a:	d0c1      	beq.n	8021010 <_strtod_l+0x8b8>
 802108c:	e619      	b.n	8020cc2 <_strtod_l+0x56a>
 802108e:	4641      	mov	r1, r8
 8021090:	4620      	mov	r0, r4
 8021092:	f7ff facb 	bl	802062c <__ratio>
 8021096:	ec57 6b10 	vmov	r6, r7, d0
 802109a:	2200      	movs	r2, #0
 802109c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80210a0:	4630      	mov	r0, r6
 80210a2:	4639      	mov	r1, r7
 80210a4:	f7df fd3c 	bl	8000b20 <__aeabi_dcmple>
 80210a8:	2800      	cmp	r0, #0
 80210aa:	d06f      	beq.n	802118c <_strtod_l+0xa34>
 80210ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80210ae:	2b00      	cmp	r3, #0
 80210b0:	d17a      	bne.n	80211a8 <_strtod_l+0xa50>
 80210b2:	f1ba 0f00 	cmp.w	sl, #0
 80210b6:	d158      	bne.n	802116a <_strtod_l+0xa12>
 80210b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80210ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80210be:	2b00      	cmp	r3, #0
 80210c0:	d15a      	bne.n	8021178 <_strtod_l+0xa20>
 80210c2:	4b64      	ldr	r3, [pc, #400]	@ (8021254 <_strtod_l+0xafc>)
 80210c4:	2200      	movs	r2, #0
 80210c6:	4630      	mov	r0, r6
 80210c8:	4639      	mov	r1, r7
 80210ca:	f7df fd1f 	bl	8000b0c <__aeabi_dcmplt>
 80210ce:	2800      	cmp	r0, #0
 80210d0:	d159      	bne.n	8021186 <_strtod_l+0xa2e>
 80210d2:	4630      	mov	r0, r6
 80210d4:	4639      	mov	r1, r7
 80210d6:	4b60      	ldr	r3, [pc, #384]	@ (8021258 <_strtod_l+0xb00>)
 80210d8:	2200      	movs	r2, #0
 80210da:	f7df faa5 	bl	8000628 <__aeabi_dmul>
 80210de:	4606      	mov	r6, r0
 80210e0:	460f      	mov	r7, r1
 80210e2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80210e6:	9606      	str	r6, [sp, #24]
 80210e8:	9307      	str	r3, [sp, #28]
 80210ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80210ee:	4d57      	ldr	r5, [pc, #348]	@ (802124c <_strtod_l+0xaf4>)
 80210f0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80210f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80210f6:	401d      	ands	r5, r3
 80210f8:	4b58      	ldr	r3, [pc, #352]	@ (802125c <_strtod_l+0xb04>)
 80210fa:	429d      	cmp	r5, r3
 80210fc:	f040 80b2 	bne.w	8021264 <_strtod_l+0xb0c>
 8021100:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021102:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8021106:	ec4b ab10 	vmov	d0, sl, fp
 802110a:	f7ff f9c7 	bl	802049c <__ulp>
 802110e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8021112:	ec51 0b10 	vmov	r0, r1, d0
 8021116:	f7df fa87 	bl	8000628 <__aeabi_dmul>
 802111a:	4652      	mov	r2, sl
 802111c:	465b      	mov	r3, fp
 802111e:	f7df f8cd 	bl	80002bc <__adddf3>
 8021122:	460b      	mov	r3, r1
 8021124:	4949      	ldr	r1, [pc, #292]	@ (802124c <_strtod_l+0xaf4>)
 8021126:	4a4e      	ldr	r2, [pc, #312]	@ (8021260 <_strtod_l+0xb08>)
 8021128:	4019      	ands	r1, r3
 802112a:	4291      	cmp	r1, r2
 802112c:	4682      	mov	sl, r0
 802112e:	d942      	bls.n	80211b6 <_strtod_l+0xa5e>
 8021130:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8021132:	4b47      	ldr	r3, [pc, #284]	@ (8021250 <_strtod_l+0xaf8>)
 8021134:	429a      	cmp	r2, r3
 8021136:	d103      	bne.n	8021140 <_strtod_l+0x9e8>
 8021138:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802113a:	3301      	adds	r3, #1
 802113c:	f43f ad2b 	beq.w	8020b96 <_strtod_l+0x43e>
 8021140:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8021250 <_strtod_l+0xaf8>
 8021144:	f04f 3aff 	mov.w	sl, #4294967295
 8021148:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802114a:	9805      	ldr	r0, [sp, #20]
 802114c:	f7fe fe72 	bl	801fe34 <_Bfree>
 8021150:	9805      	ldr	r0, [sp, #20]
 8021152:	4649      	mov	r1, r9
 8021154:	f7fe fe6e 	bl	801fe34 <_Bfree>
 8021158:	9805      	ldr	r0, [sp, #20]
 802115a:	4641      	mov	r1, r8
 802115c:	f7fe fe6a 	bl	801fe34 <_Bfree>
 8021160:	9805      	ldr	r0, [sp, #20]
 8021162:	4621      	mov	r1, r4
 8021164:	f7fe fe66 	bl	801fe34 <_Bfree>
 8021168:	e618      	b.n	8020d9c <_strtod_l+0x644>
 802116a:	f1ba 0f01 	cmp.w	sl, #1
 802116e:	d103      	bne.n	8021178 <_strtod_l+0xa20>
 8021170:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021172:	2b00      	cmp	r3, #0
 8021174:	f43f ada5 	beq.w	8020cc2 <_strtod_l+0x56a>
 8021178:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8021228 <_strtod_l+0xad0>
 802117c:	4f35      	ldr	r7, [pc, #212]	@ (8021254 <_strtod_l+0xafc>)
 802117e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8021182:	2600      	movs	r6, #0
 8021184:	e7b1      	b.n	80210ea <_strtod_l+0x992>
 8021186:	4f34      	ldr	r7, [pc, #208]	@ (8021258 <_strtod_l+0xb00>)
 8021188:	2600      	movs	r6, #0
 802118a:	e7aa      	b.n	80210e2 <_strtod_l+0x98a>
 802118c:	4b32      	ldr	r3, [pc, #200]	@ (8021258 <_strtod_l+0xb00>)
 802118e:	4630      	mov	r0, r6
 8021190:	4639      	mov	r1, r7
 8021192:	2200      	movs	r2, #0
 8021194:	f7df fa48 	bl	8000628 <__aeabi_dmul>
 8021198:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802119a:	4606      	mov	r6, r0
 802119c:	460f      	mov	r7, r1
 802119e:	2b00      	cmp	r3, #0
 80211a0:	d09f      	beq.n	80210e2 <_strtod_l+0x98a>
 80211a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80211a6:	e7a0      	b.n	80210ea <_strtod_l+0x992>
 80211a8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8021230 <_strtod_l+0xad8>
 80211ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 80211b0:	ec57 6b17 	vmov	r6, r7, d7
 80211b4:	e799      	b.n	80210ea <_strtod_l+0x992>
 80211b6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80211ba:	9b08      	ldr	r3, [sp, #32]
 80211bc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80211c0:	2b00      	cmp	r3, #0
 80211c2:	d1c1      	bne.n	8021148 <_strtod_l+0x9f0>
 80211c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80211c8:	0d1b      	lsrs	r3, r3, #20
 80211ca:	051b      	lsls	r3, r3, #20
 80211cc:	429d      	cmp	r5, r3
 80211ce:	d1bb      	bne.n	8021148 <_strtod_l+0x9f0>
 80211d0:	4630      	mov	r0, r6
 80211d2:	4639      	mov	r1, r7
 80211d4:	f7df fd88 	bl	8000ce8 <__aeabi_d2lz>
 80211d8:	f7df f9f8 	bl	80005cc <__aeabi_l2d>
 80211dc:	4602      	mov	r2, r0
 80211de:	460b      	mov	r3, r1
 80211e0:	4630      	mov	r0, r6
 80211e2:	4639      	mov	r1, r7
 80211e4:	f7df f868 	bl	80002b8 <__aeabi_dsub>
 80211e8:	460b      	mov	r3, r1
 80211ea:	4602      	mov	r2, r0
 80211ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80211f0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80211f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80211f6:	ea46 060a 	orr.w	r6, r6, sl
 80211fa:	431e      	orrs	r6, r3
 80211fc:	d06f      	beq.n	80212de <_strtod_l+0xb86>
 80211fe:	a30e      	add	r3, pc, #56	@ (adr r3, 8021238 <_strtod_l+0xae0>)
 8021200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021204:	f7df fc82 	bl	8000b0c <__aeabi_dcmplt>
 8021208:	2800      	cmp	r0, #0
 802120a:	f47f accf 	bne.w	8020bac <_strtod_l+0x454>
 802120e:	a30c      	add	r3, pc, #48	@ (adr r3, 8021240 <_strtod_l+0xae8>)
 8021210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021214:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8021218:	f7df fc96 	bl	8000b48 <__aeabi_dcmpgt>
 802121c:	2800      	cmp	r0, #0
 802121e:	d093      	beq.n	8021148 <_strtod_l+0x9f0>
 8021220:	e4c4      	b.n	8020bac <_strtod_l+0x454>
 8021222:	bf00      	nop
 8021224:	f3af 8000 	nop.w
 8021228:	00000000 	.word	0x00000000
 802122c:	bff00000 	.word	0xbff00000
 8021230:	00000000 	.word	0x00000000
 8021234:	3ff00000 	.word	0x3ff00000
 8021238:	94a03595 	.word	0x94a03595
 802123c:	3fdfffff 	.word	0x3fdfffff
 8021240:	35afe535 	.word	0x35afe535
 8021244:	3fe00000 	.word	0x3fe00000
 8021248:	000fffff 	.word	0x000fffff
 802124c:	7ff00000 	.word	0x7ff00000
 8021250:	7fefffff 	.word	0x7fefffff
 8021254:	3ff00000 	.word	0x3ff00000
 8021258:	3fe00000 	.word	0x3fe00000
 802125c:	7fe00000 	.word	0x7fe00000
 8021260:	7c9fffff 	.word	0x7c9fffff
 8021264:	9b08      	ldr	r3, [sp, #32]
 8021266:	b323      	cbz	r3, 80212b2 <_strtod_l+0xb5a>
 8021268:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 802126c:	d821      	bhi.n	80212b2 <_strtod_l+0xb5a>
 802126e:	a328      	add	r3, pc, #160	@ (adr r3, 8021310 <_strtod_l+0xbb8>)
 8021270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021274:	4630      	mov	r0, r6
 8021276:	4639      	mov	r1, r7
 8021278:	f7df fc52 	bl	8000b20 <__aeabi_dcmple>
 802127c:	b1a0      	cbz	r0, 80212a8 <_strtod_l+0xb50>
 802127e:	4639      	mov	r1, r7
 8021280:	4630      	mov	r0, r6
 8021282:	f7df fca9 	bl	8000bd8 <__aeabi_d2uiz>
 8021286:	2801      	cmp	r0, #1
 8021288:	bf38      	it	cc
 802128a:	2001      	movcc	r0, #1
 802128c:	f7df f952 	bl	8000534 <__aeabi_ui2d>
 8021290:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021292:	4606      	mov	r6, r0
 8021294:	460f      	mov	r7, r1
 8021296:	b9fb      	cbnz	r3, 80212d8 <_strtod_l+0xb80>
 8021298:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 802129c:	9014      	str	r0, [sp, #80]	@ 0x50
 802129e:	9315      	str	r3, [sp, #84]	@ 0x54
 80212a0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80212a4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80212a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80212aa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80212ae:	1b5b      	subs	r3, r3, r5
 80212b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80212b2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80212b6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80212ba:	f7ff f8ef 	bl	802049c <__ulp>
 80212be:	4650      	mov	r0, sl
 80212c0:	ec53 2b10 	vmov	r2, r3, d0
 80212c4:	4659      	mov	r1, fp
 80212c6:	f7df f9af 	bl	8000628 <__aeabi_dmul>
 80212ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80212ce:	f7de fff5 	bl	80002bc <__adddf3>
 80212d2:	4682      	mov	sl, r0
 80212d4:	468b      	mov	fp, r1
 80212d6:	e770      	b.n	80211ba <_strtod_l+0xa62>
 80212d8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80212dc:	e7e0      	b.n	80212a0 <_strtod_l+0xb48>
 80212de:	a30e      	add	r3, pc, #56	@ (adr r3, 8021318 <_strtod_l+0xbc0>)
 80212e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80212e4:	f7df fc12 	bl	8000b0c <__aeabi_dcmplt>
 80212e8:	e798      	b.n	802121c <_strtod_l+0xac4>
 80212ea:	2300      	movs	r3, #0
 80212ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80212ee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80212f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80212f2:	6013      	str	r3, [r2, #0]
 80212f4:	f7ff ba6d 	b.w	80207d2 <_strtod_l+0x7a>
 80212f8:	2a65      	cmp	r2, #101	@ 0x65
 80212fa:	f43f ab66 	beq.w	80209ca <_strtod_l+0x272>
 80212fe:	2a45      	cmp	r2, #69	@ 0x45
 8021300:	f43f ab63 	beq.w	80209ca <_strtod_l+0x272>
 8021304:	2301      	movs	r3, #1
 8021306:	f7ff bb9e 	b.w	8020a46 <_strtod_l+0x2ee>
 802130a:	bf00      	nop
 802130c:	f3af 8000 	nop.w
 8021310:	ffc00000 	.word	0xffc00000
 8021314:	41dfffff 	.word	0x41dfffff
 8021318:	94a03595 	.word	0x94a03595
 802131c:	3fcfffff 	.word	0x3fcfffff

08021320 <_strtod_r>:
 8021320:	4b01      	ldr	r3, [pc, #4]	@ (8021328 <_strtod_r+0x8>)
 8021322:	f7ff ba19 	b.w	8020758 <_strtod_l>
 8021326:	bf00      	nop
 8021328:	20000198 	.word	0x20000198

0802132c <__ssputs_r>:
 802132c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021330:	688e      	ldr	r6, [r1, #8]
 8021332:	461f      	mov	r7, r3
 8021334:	42be      	cmp	r6, r7
 8021336:	680b      	ldr	r3, [r1, #0]
 8021338:	4682      	mov	sl, r0
 802133a:	460c      	mov	r4, r1
 802133c:	4690      	mov	r8, r2
 802133e:	d82d      	bhi.n	802139c <__ssputs_r+0x70>
 8021340:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8021344:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8021348:	d026      	beq.n	8021398 <__ssputs_r+0x6c>
 802134a:	6965      	ldr	r5, [r4, #20]
 802134c:	6909      	ldr	r1, [r1, #16]
 802134e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021352:	eba3 0901 	sub.w	r9, r3, r1
 8021356:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802135a:	1c7b      	adds	r3, r7, #1
 802135c:	444b      	add	r3, r9
 802135e:	106d      	asrs	r5, r5, #1
 8021360:	429d      	cmp	r5, r3
 8021362:	bf38      	it	cc
 8021364:	461d      	movcc	r5, r3
 8021366:	0553      	lsls	r3, r2, #21
 8021368:	d527      	bpl.n	80213ba <__ssputs_r+0x8e>
 802136a:	4629      	mov	r1, r5
 802136c:	f7fc faee 	bl	801d94c <_malloc_r>
 8021370:	4606      	mov	r6, r0
 8021372:	b360      	cbz	r0, 80213ce <__ssputs_r+0xa2>
 8021374:	6921      	ldr	r1, [r4, #16]
 8021376:	464a      	mov	r2, r9
 8021378:	f7fd fe53 	bl	801f022 <memcpy>
 802137c:	89a3      	ldrh	r3, [r4, #12]
 802137e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8021382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021386:	81a3      	strh	r3, [r4, #12]
 8021388:	6126      	str	r6, [r4, #16]
 802138a:	6165      	str	r5, [r4, #20]
 802138c:	444e      	add	r6, r9
 802138e:	eba5 0509 	sub.w	r5, r5, r9
 8021392:	6026      	str	r6, [r4, #0]
 8021394:	60a5      	str	r5, [r4, #8]
 8021396:	463e      	mov	r6, r7
 8021398:	42be      	cmp	r6, r7
 802139a:	d900      	bls.n	802139e <__ssputs_r+0x72>
 802139c:	463e      	mov	r6, r7
 802139e:	6820      	ldr	r0, [r4, #0]
 80213a0:	4632      	mov	r2, r6
 80213a2:	4641      	mov	r1, r8
 80213a4:	f7fd fd0c 	bl	801edc0 <memmove>
 80213a8:	68a3      	ldr	r3, [r4, #8]
 80213aa:	1b9b      	subs	r3, r3, r6
 80213ac:	60a3      	str	r3, [r4, #8]
 80213ae:	6823      	ldr	r3, [r4, #0]
 80213b0:	4433      	add	r3, r6
 80213b2:	6023      	str	r3, [r4, #0]
 80213b4:	2000      	movs	r0, #0
 80213b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80213ba:	462a      	mov	r2, r5
 80213bc:	f000 ff11 	bl	80221e2 <_realloc_r>
 80213c0:	4606      	mov	r6, r0
 80213c2:	2800      	cmp	r0, #0
 80213c4:	d1e0      	bne.n	8021388 <__ssputs_r+0x5c>
 80213c6:	6921      	ldr	r1, [r4, #16]
 80213c8:	4650      	mov	r0, sl
 80213ca:	f7fe fca9 	bl	801fd20 <_free_r>
 80213ce:	230c      	movs	r3, #12
 80213d0:	f8ca 3000 	str.w	r3, [sl]
 80213d4:	89a3      	ldrh	r3, [r4, #12]
 80213d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80213da:	81a3      	strh	r3, [r4, #12]
 80213dc:	f04f 30ff 	mov.w	r0, #4294967295
 80213e0:	e7e9      	b.n	80213b6 <__ssputs_r+0x8a>
	...

080213e4 <_svfiprintf_r>:
 80213e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213e8:	4698      	mov	r8, r3
 80213ea:	898b      	ldrh	r3, [r1, #12]
 80213ec:	061b      	lsls	r3, r3, #24
 80213ee:	b09d      	sub	sp, #116	@ 0x74
 80213f0:	4607      	mov	r7, r0
 80213f2:	460d      	mov	r5, r1
 80213f4:	4614      	mov	r4, r2
 80213f6:	d510      	bpl.n	802141a <_svfiprintf_r+0x36>
 80213f8:	690b      	ldr	r3, [r1, #16]
 80213fa:	b973      	cbnz	r3, 802141a <_svfiprintf_r+0x36>
 80213fc:	2140      	movs	r1, #64	@ 0x40
 80213fe:	f7fc faa5 	bl	801d94c <_malloc_r>
 8021402:	6028      	str	r0, [r5, #0]
 8021404:	6128      	str	r0, [r5, #16]
 8021406:	b930      	cbnz	r0, 8021416 <_svfiprintf_r+0x32>
 8021408:	230c      	movs	r3, #12
 802140a:	603b      	str	r3, [r7, #0]
 802140c:	f04f 30ff 	mov.w	r0, #4294967295
 8021410:	b01d      	add	sp, #116	@ 0x74
 8021412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021416:	2340      	movs	r3, #64	@ 0x40
 8021418:	616b      	str	r3, [r5, #20]
 802141a:	2300      	movs	r3, #0
 802141c:	9309      	str	r3, [sp, #36]	@ 0x24
 802141e:	2320      	movs	r3, #32
 8021420:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8021424:	f8cd 800c 	str.w	r8, [sp, #12]
 8021428:	2330      	movs	r3, #48	@ 0x30
 802142a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80215c8 <_svfiprintf_r+0x1e4>
 802142e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8021432:	f04f 0901 	mov.w	r9, #1
 8021436:	4623      	mov	r3, r4
 8021438:	469a      	mov	sl, r3
 802143a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802143e:	b10a      	cbz	r2, 8021444 <_svfiprintf_r+0x60>
 8021440:	2a25      	cmp	r2, #37	@ 0x25
 8021442:	d1f9      	bne.n	8021438 <_svfiprintf_r+0x54>
 8021444:	ebba 0b04 	subs.w	fp, sl, r4
 8021448:	d00b      	beq.n	8021462 <_svfiprintf_r+0x7e>
 802144a:	465b      	mov	r3, fp
 802144c:	4622      	mov	r2, r4
 802144e:	4629      	mov	r1, r5
 8021450:	4638      	mov	r0, r7
 8021452:	f7ff ff6b 	bl	802132c <__ssputs_r>
 8021456:	3001      	adds	r0, #1
 8021458:	f000 80a7 	beq.w	80215aa <_svfiprintf_r+0x1c6>
 802145c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802145e:	445a      	add	r2, fp
 8021460:	9209      	str	r2, [sp, #36]	@ 0x24
 8021462:	f89a 3000 	ldrb.w	r3, [sl]
 8021466:	2b00      	cmp	r3, #0
 8021468:	f000 809f 	beq.w	80215aa <_svfiprintf_r+0x1c6>
 802146c:	2300      	movs	r3, #0
 802146e:	f04f 32ff 	mov.w	r2, #4294967295
 8021472:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021476:	f10a 0a01 	add.w	sl, sl, #1
 802147a:	9304      	str	r3, [sp, #16]
 802147c:	9307      	str	r3, [sp, #28]
 802147e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8021482:	931a      	str	r3, [sp, #104]	@ 0x68
 8021484:	4654      	mov	r4, sl
 8021486:	2205      	movs	r2, #5
 8021488:	f814 1b01 	ldrb.w	r1, [r4], #1
 802148c:	484e      	ldr	r0, [pc, #312]	@ (80215c8 <_svfiprintf_r+0x1e4>)
 802148e:	f7de feb7 	bl	8000200 <memchr>
 8021492:	9a04      	ldr	r2, [sp, #16]
 8021494:	b9d8      	cbnz	r0, 80214ce <_svfiprintf_r+0xea>
 8021496:	06d0      	lsls	r0, r2, #27
 8021498:	bf44      	itt	mi
 802149a:	2320      	movmi	r3, #32
 802149c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80214a0:	0711      	lsls	r1, r2, #28
 80214a2:	bf44      	itt	mi
 80214a4:	232b      	movmi	r3, #43	@ 0x2b
 80214a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80214aa:	f89a 3000 	ldrb.w	r3, [sl]
 80214ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80214b0:	d015      	beq.n	80214de <_svfiprintf_r+0xfa>
 80214b2:	9a07      	ldr	r2, [sp, #28]
 80214b4:	4654      	mov	r4, sl
 80214b6:	2000      	movs	r0, #0
 80214b8:	f04f 0c0a 	mov.w	ip, #10
 80214bc:	4621      	mov	r1, r4
 80214be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80214c2:	3b30      	subs	r3, #48	@ 0x30
 80214c4:	2b09      	cmp	r3, #9
 80214c6:	d94b      	bls.n	8021560 <_svfiprintf_r+0x17c>
 80214c8:	b1b0      	cbz	r0, 80214f8 <_svfiprintf_r+0x114>
 80214ca:	9207      	str	r2, [sp, #28]
 80214cc:	e014      	b.n	80214f8 <_svfiprintf_r+0x114>
 80214ce:	eba0 0308 	sub.w	r3, r0, r8
 80214d2:	fa09 f303 	lsl.w	r3, r9, r3
 80214d6:	4313      	orrs	r3, r2
 80214d8:	9304      	str	r3, [sp, #16]
 80214da:	46a2      	mov	sl, r4
 80214dc:	e7d2      	b.n	8021484 <_svfiprintf_r+0xa0>
 80214de:	9b03      	ldr	r3, [sp, #12]
 80214e0:	1d19      	adds	r1, r3, #4
 80214e2:	681b      	ldr	r3, [r3, #0]
 80214e4:	9103      	str	r1, [sp, #12]
 80214e6:	2b00      	cmp	r3, #0
 80214e8:	bfbb      	ittet	lt
 80214ea:	425b      	neglt	r3, r3
 80214ec:	f042 0202 	orrlt.w	r2, r2, #2
 80214f0:	9307      	strge	r3, [sp, #28]
 80214f2:	9307      	strlt	r3, [sp, #28]
 80214f4:	bfb8      	it	lt
 80214f6:	9204      	strlt	r2, [sp, #16]
 80214f8:	7823      	ldrb	r3, [r4, #0]
 80214fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80214fc:	d10a      	bne.n	8021514 <_svfiprintf_r+0x130>
 80214fe:	7863      	ldrb	r3, [r4, #1]
 8021500:	2b2a      	cmp	r3, #42	@ 0x2a
 8021502:	d132      	bne.n	802156a <_svfiprintf_r+0x186>
 8021504:	9b03      	ldr	r3, [sp, #12]
 8021506:	1d1a      	adds	r2, r3, #4
 8021508:	681b      	ldr	r3, [r3, #0]
 802150a:	9203      	str	r2, [sp, #12]
 802150c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8021510:	3402      	adds	r4, #2
 8021512:	9305      	str	r3, [sp, #20]
 8021514:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80215d8 <_svfiprintf_r+0x1f4>
 8021518:	7821      	ldrb	r1, [r4, #0]
 802151a:	2203      	movs	r2, #3
 802151c:	4650      	mov	r0, sl
 802151e:	f7de fe6f 	bl	8000200 <memchr>
 8021522:	b138      	cbz	r0, 8021534 <_svfiprintf_r+0x150>
 8021524:	9b04      	ldr	r3, [sp, #16]
 8021526:	eba0 000a 	sub.w	r0, r0, sl
 802152a:	2240      	movs	r2, #64	@ 0x40
 802152c:	4082      	lsls	r2, r0
 802152e:	4313      	orrs	r3, r2
 8021530:	3401      	adds	r4, #1
 8021532:	9304      	str	r3, [sp, #16]
 8021534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021538:	4824      	ldr	r0, [pc, #144]	@ (80215cc <_svfiprintf_r+0x1e8>)
 802153a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802153e:	2206      	movs	r2, #6
 8021540:	f7de fe5e 	bl	8000200 <memchr>
 8021544:	2800      	cmp	r0, #0
 8021546:	d036      	beq.n	80215b6 <_svfiprintf_r+0x1d2>
 8021548:	4b21      	ldr	r3, [pc, #132]	@ (80215d0 <_svfiprintf_r+0x1ec>)
 802154a:	bb1b      	cbnz	r3, 8021594 <_svfiprintf_r+0x1b0>
 802154c:	9b03      	ldr	r3, [sp, #12]
 802154e:	3307      	adds	r3, #7
 8021550:	f023 0307 	bic.w	r3, r3, #7
 8021554:	3308      	adds	r3, #8
 8021556:	9303      	str	r3, [sp, #12]
 8021558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802155a:	4433      	add	r3, r6
 802155c:	9309      	str	r3, [sp, #36]	@ 0x24
 802155e:	e76a      	b.n	8021436 <_svfiprintf_r+0x52>
 8021560:	fb0c 3202 	mla	r2, ip, r2, r3
 8021564:	460c      	mov	r4, r1
 8021566:	2001      	movs	r0, #1
 8021568:	e7a8      	b.n	80214bc <_svfiprintf_r+0xd8>
 802156a:	2300      	movs	r3, #0
 802156c:	3401      	adds	r4, #1
 802156e:	9305      	str	r3, [sp, #20]
 8021570:	4619      	mov	r1, r3
 8021572:	f04f 0c0a 	mov.w	ip, #10
 8021576:	4620      	mov	r0, r4
 8021578:	f810 2b01 	ldrb.w	r2, [r0], #1
 802157c:	3a30      	subs	r2, #48	@ 0x30
 802157e:	2a09      	cmp	r2, #9
 8021580:	d903      	bls.n	802158a <_svfiprintf_r+0x1a6>
 8021582:	2b00      	cmp	r3, #0
 8021584:	d0c6      	beq.n	8021514 <_svfiprintf_r+0x130>
 8021586:	9105      	str	r1, [sp, #20]
 8021588:	e7c4      	b.n	8021514 <_svfiprintf_r+0x130>
 802158a:	fb0c 2101 	mla	r1, ip, r1, r2
 802158e:	4604      	mov	r4, r0
 8021590:	2301      	movs	r3, #1
 8021592:	e7f0      	b.n	8021576 <_svfiprintf_r+0x192>
 8021594:	ab03      	add	r3, sp, #12
 8021596:	9300      	str	r3, [sp, #0]
 8021598:	462a      	mov	r2, r5
 802159a:	4b0e      	ldr	r3, [pc, #56]	@ (80215d4 <_svfiprintf_r+0x1f0>)
 802159c:	a904      	add	r1, sp, #16
 802159e:	4638      	mov	r0, r7
 80215a0:	f7fc fb86 	bl	801dcb0 <_printf_float>
 80215a4:	1c42      	adds	r2, r0, #1
 80215a6:	4606      	mov	r6, r0
 80215a8:	d1d6      	bne.n	8021558 <_svfiprintf_r+0x174>
 80215aa:	89ab      	ldrh	r3, [r5, #12]
 80215ac:	065b      	lsls	r3, r3, #25
 80215ae:	f53f af2d 	bmi.w	802140c <_svfiprintf_r+0x28>
 80215b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80215b4:	e72c      	b.n	8021410 <_svfiprintf_r+0x2c>
 80215b6:	ab03      	add	r3, sp, #12
 80215b8:	9300      	str	r3, [sp, #0]
 80215ba:	462a      	mov	r2, r5
 80215bc:	4b05      	ldr	r3, [pc, #20]	@ (80215d4 <_svfiprintf_r+0x1f0>)
 80215be:	a904      	add	r1, sp, #16
 80215c0:	4638      	mov	r0, r7
 80215c2:	f7fc fe0d 	bl	801e1e0 <_printf_i>
 80215c6:	e7ed      	b.n	80215a4 <_svfiprintf_r+0x1c0>
 80215c8:	080259c0 	.word	0x080259c0
 80215cc:	080259ca 	.word	0x080259ca
 80215d0:	0801dcb1 	.word	0x0801dcb1
 80215d4:	0802132d 	.word	0x0802132d
 80215d8:	080259c6 	.word	0x080259c6

080215dc <__sfputc_r>:
 80215dc:	6893      	ldr	r3, [r2, #8]
 80215de:	3b01      	subs	r3, #1
 80215e0:	2b00      	cmp	r3, #0
 80215e2:	b410      	push	{r4}
 80215e4:	6093      	str	r3, [r2, #8]
 80215e6:	da08      	bge.n	80215fa <__sfputc_r+0x1e>
 80215e8:	6994      	ldr	r4, [r2, #24]
 80215ea:	42a3      	cmp	r3, r4
 80215ec:	db01      	blt.n	80215f2 <__sfputc_r+0x16>
 80215ee:	290a      	cmp	r1, #10
 80215f0:	d103      	bne.n	80215fa <__sfputc_r+0x1e>
 80215f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80215f6:	f7fd bb4f 	b.w	801ec98 <__swbuf_r>
 80215fa:	6813      	ldr	r3, [r2, #0]
 80215fc:	1c58      	adds	r0, r3, #1
 80215fe:	6010      	str	r0, [r2, #0]
 8021600:	7019      	strb	r1, [r3, #0]
 8021602:	4608      	mov	r0, r1
 8021604:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021608:	4770      	bx	lr

0802160a <__sfputs_r>:
 802160a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802160c:	4606      	mov	r6, r0
 802160e:	460f      	mov	r7, r1
 8021610:	4614      	mov	r4, r2
 8021612:	18d5      	adds	r5, r2, r3
 8021614:	42ac      	cmp	r4, r5
 8021616:	d101      	bne.n	802161c <__sfputs_r+0x12>
 8021618:	2000      	movs	r0, #0
 802161a:	e007      	b.n	802162c <__sfputs_r+0x22>
 802161c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021620:	463a      	mov	r2, r7
 8021622:	4630      	mov	r0, r6
 8021624:	f7ff ffda 	bl	80215dc <__sfputc_r>
 8021628:	1c43      	adds	r3, r0, #1
 802162a:	d1f3      	bne.n	8021614 <__sfputs_r+0xa>
 802162c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021630 <_vfiprintf_r>:
 8021630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021634:	460d      	mov	r5, r1
 8021636:	b09d      	sub	sp, #116	@ 0x74
 8021638:	4614      	mov	r4, r2
 802163a:	4698      	mov	r8, r3
 802163c:	4606      	mov	r6, r0
 802163e:	b118      	cbz	r0, 8021648 <_vfiprintf_r+0x18>
 8021640:	6a03      	ldr	r3, [r0, #32]
 8021642:	b90b      	cbnz	r3, 8021648 <_vfiprintf_r+0x18>
 8021644:	f7fd f98c 	bl	801e960 <__sinit>
 8021648:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802164a:	07d9      	lsls	r1, r3, #31
 802164c:	d405      	bmi.n	802165a <_vfiprintf_r+0x2a>
 802164e:	89ab      	ldrh	r3, [r5, #12]
 8021650:	059a      	lsls	r2, r3, #22
 8021652:	d402      	bmi.n	802165a <_vfiprintf_r+0x2a>
 8021654:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021656:	f7fd fcda 	bl	801f00e <__retarget_lock_acquire_recursive>
 802165a:	89ab      	ldrh	r3, [r5, #12]
 802165c:	071b      	lsls	r3, r3, #28
 802165e:	d501      	bpl.n	8021664 <_vfiprintf_r+0x34>
 8021660:	692b      	ldr	r3, [r5, #16]
 8021662:	b99b      	cbnz	r3, 802168c <_vfiprintf_r+0x5c>
 8021664:	4629      	mov	r1, r5
 8021666:	4630      	mov	r0, r6
 8021668:	f7fd fb54 	bl	801ed14 <__swsetup_r>
 802166c:	b170      	cbz	r0, 802168c <_vfiprintf_r+0x5c>
 802166e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021670:	07dc      	lsls	r4, r3, #31
 8021672:	d504      	bpl.n	802167e <_vfiprintf_r+0x4e>
 8021674:	f04f 30ff 	mov.w	r0, #4294967295
 8021678:	b01d      	add	sp, #116	@ 0x74
 802167a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802167e:	89ab      	ldrh	r3, [r5, #12]
 8021680:	0598      	lsls	r0, r3, #22
 8021682:	d4f7      	bmi.n	8021674 <_vfiprintf_r+0x44>
 8021684:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021686:	f7fd fcc3 	bl	801f010 <__retarget_lock_release_recursive>
 802168a:	e7f3      	b.n	8021674 <_vfiprintf_r+0x44>
 802168c:	2300      	movs	r3, #0
 802168e:	9309      	str	r3, [sp, #36]	@ 0x24
 8021690:	2320      	movs	r3, #32
 8021692:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8021696:	f8cd 800c 	str.w	r8, [sp, #12]
 802169a:	2330      	movs	r3, #48	@ 0x30
 802169c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802184c <_vfiprintf_r+0x21c>
 80216a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80216a4:	f04f 0901 	mov.w	r9, #1
 80216a8:	4623      	mov	r3, r4
 80216aa:	469a      	mov	sl, r3
 80216ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80216b0:	b10a      	cbz	r2, 80216b6 <_vfiprintf_r+0x86>
 80216b2:	2a25      	cmp	r2, #37	@ 0x25
 80216b4:	d1f9      	bne.n	80216aa <_vfiprintf_r+0x7a>
 80216b6:	ebba 0b04 	subs.w	fp, sl, r4
 80216ba:	d00b      	beq.n	80216d4 <_vfiprintf_r+0xa4>
 80216bc:	465b      	mov	r3, fp
 80216be:	4622      	mov	r2, r4
 80216c0:	4629      	mov	r1, r5
 80216c2:	4630      	mov	r0, r6
 80216c4:	f7ff ffa1 	bl	802160a <__sfputs_r>
 80216c8:	3001      	adds	r0, #1
 80216ca:	f000 80a7 	beq.w	802181c <_vfiprintf_r+0x1ec>
 80216ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80216d0:	445a      	add	r2, fp
 80216d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80216d4:	f89a 3000 	ldrb.w	r3, [sl]
 80216d8:	2b00      	cmp	r3, #0
 80216da:	f000 809f 	beq.w	802181c <_vfiprintf_r+0x1ec>
 80216de:	2300      	movs	r3, #0
 80216e0:	f04f 32ff 	mov.w	r2, #4294967295
 80216e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80216e8:	f10a 0a01 	add.w	sl, sl, #1
 80216ec:	9304      	str	r3, [sp, #16]
 80216ee:	9307      	str	r3, [sp, #28]
 80216f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80216f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80216f6:	4654      	mov	r4, sl
 80216f8:	2205      	movs	r2, #5
 80216fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80216fe:	4853      	ldr	r0, [pc, #332]	@ (802184c <_vfiprintf_r+0x21c>)
 8021700:	f7de fd7e 	bl	8000200 <memchr>
 8021704:	9a04      	ldr	r2, [sp, #16]
 8021706:	b9d8      	cbnz	r0, 8021740 <_vfiprintf_r+0x110>
 8021708:	06d1      	lsls	r1, r2, #27
 802170a:	bf44      	itt	mi
 802170c:	2320      	movmi	r3, #32
 802170e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021712:	0713      	lsls	r3, r2, #28
 8021714:	bf44      	itt	mi
 8021716:	232b      	movmi	r3, #43	@ 0x2b
 8021718:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802171c:	f89a 3000 	ldrb.w	r3, [sl]
 8021720:	2b2a      	cmp	r3, #42	@ 0x2a
 8021722:	d015      	beq.n	8021750 <_vfiprintf_r+0x120>
 8021724:	9a07      	ldr	r2, [sp, #28]
 8021726:	4654      	mov	r4, sl
 8021728:	2000      	movs	r0, #0
 802172a:	f04f 0c0a 	mov.w	ip, #10
 802172e:	4621      	mov	r1, r4
 8021730:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021734:	3b30      	subs	r3, #48	@ 0x30
 8021736:	2b09      	cmp	r3, #9
 8021738:	d94b      	bls.n	80217d2 <_vfiprintf_r+0x1a2>
 802173a:	b1b0      	cbz	r0, 802176a <_vfiprintf_r+0x13a>
 802173c:	9207      	str	r2, [sp, #28]
 802173e:	e014      	b.n	802176a <_vfiprintf_r+0x13a>
 8021740:	eba0 0308 	sub.w	r3, r0, r8
 8021744:	fa09 f303 	lsl.w	r3, r9, r3
 8021748:	4313      	orrs	r3, r2
 802174a:	9304      	str	r3, [sp, #16]
 802174c:	46a2      	mov	sl, r4
 802174e:	e7d2      	b.n	80216f6 <_vfiprintf_r+0xc6>
 8021750:	9b03      	ldr	r3, [sp, #12]
 8021752:	1d19      	adds	r1, r3, #4
 8021754:	681b      	ldr	r3, [r3, #0]
 8021756:	9103      	str	r1, [sp, #12]
 8021758:	2b00      	cmp	r3, #0
 802175a:	bfbb      	ittet	lt
 802175c:	425b      	neglt	r3, r3
 802175e:	f042 0202 	orrlt.w	r2, r2, #2
 8021762:	9307      	strge	r3, [sp, #28]
 8021764:	9307      	strlt	r3, [sp, #28]
 8021766:	bfb8      	it	lt
 8021768:	9204      	strlt	r2, [sp, #16]
 802176a:	7823      	ldrb	r3, [r4, #0]
 802176c:	2b2e      	cmp	r3, #46	@ 0x2e
 802176e:	d10a      	bne.n	8021786 <_vfiprintf_r+0x156>
 8021770:	7863      	ldrb	r3, [r4, #1]
 8021772:	2b2a      	cmp	r3, #42	@ 0x2a
 8021774:	d132      	bne.n	80217dc <_vfiprintf_r+0x1ac>
 8021776:	9b03      	ldr	r3, [sp, #12]
 8021778:	1d1a      	adds	r2, r3, #4
 802177a:	681b      	ldr	r3, [r3, #0]
 802177c:	9203      	str	r2, [sp, #12]
 802177e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8021782:	3402      	adds	r4, #2
 8021784:	9305      	str	r3, [sp, #20]
 8021786:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802185c <_vfiprintf_r+0x22c>
 802178a:	7821      	ldrb	r1, [r4, #0]
 802178c:	2203      	movs	r2, #3
 802178e:	4650      	mov	r0, sl
 8021790:	f7de fd36 	bl	8000200 <memchr>
 8021794:	b138      	cbz	r0, 80217a6 <_vfiprintf_r+0x176>
 8021796:	9b04      	ldr	r3, [sp, #16]
 8021798:	eba0 000a 	sub.w	r0, r0, sl
 802179c:	2240      	movs	r2, #64	@ 0x40
 802179e:	4082      	lsls	r2, r0
 80217a0:	4313      	orrs	r3, r2
 80217a2:	3401      	adds	r4, #1
 80217a4:	9304      	str	r3, [sp, #16]
 80217a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80217aa:	4829      	ldr	r0, [pc, #164]	@ (8021850 <_vfiprintf_r+0x220>)
 80217ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80217b0:	2206      	movs	r2, #6
 80217b2:	f7de fd25 	bl	8000200 <memchr>
 80217b6:	2800      	cmp	r0, #0
 80217b8:	d03f      	beq.n	802183a <_vfiprintf_r+0x20a>
 80217ba:	4b26      	ldr	r3, [pc, #152]	@ (8021854 <_vfiprintf_r+0x224>)
 80217bc:	bb1b      	cbnz	r3, 8021806 <_vfiprintf_r+0x1d6>
 80217be:	9b03      	ldr	r3, [sp, #12]
 80217c0:	3307      	adds	r3, #7
 80217c2:	f023 0307 	bic.w	r3, r3, #7
 80217c6:	3308      	adds	r3, #8
 80217c8:	9303      	str	r3, [sp, #12]
 80217ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80217cc:	443b      	add	r3, r7
 80217ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80217d0:	e76a      	b.n	80216a8 <_vfiprintf_r+0x78>
 80217d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80217d6:	460c      	mov	r4, r1
 80217d8:	2001      	movs	r0, #1
 80217da:	e7a8      	b.n	802172e <_vfiprintf_r+0xfe>
 80217dc:	2300      	movs	r3, #0
 80217de:	3401      	adds	r4, #1
 80217e0:	9305      	str	r3, [sp, #20]
 80217e2:	4619      	mov	r1, r3
 80217e4:	f04f 0c0a 	mov.w	ip, #10
 80217e8:	4620      	mov	r0, r4
 80217ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80217ee:	3a30      	subs	r2, #48	@ 0x30
 80217f0:	2a09      	cmp	r2, #9
 80217f2:	d903      	bls.n	80217fc <_vfiprintf_r+0x1cc>
 80217f4:	2b00      	cmp	r3, #0
 80217f6:	d0c6      	beq.n	8021786 <_vfiprintf_r+0x156>
 80217f8:	9105      	str	r1, [sp, #20]
 80217fa:	e7c4      	b.n	8021786 <_vfiprintf_r+0x156>
 80217fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8021800:	4604      	mov	r4, r0
 8021802:	2301      	movs	r3, #1
 8021804:	e7f0      	b.n	80217e8 <_vfiprintf_r+0x1b8>
 8021806:	ab03      	add	r3, sp, #12
 8021808:	9300      	str	r3, [sp, #0]
 802180a:	462a      	mov	r2, r5
 802180c:	4b12      	ldr	r3, [pc, #72]	@ (8021858 <_vfiprintf_r+0x228>)
 802180e:	a904      	add	r1, sp, #16
 8021810:	4630      	mov	r0, r6
 8021812:	f7fc fa4d 	bl	801dcb0 <_printf_float>
 8021816:	4607      	mov	r7, r0
 8021818:	1c78      	adds	r0, r7, #1
 802181a:	d1d6      	bne.n	80217ca <_vfiprintf_r+0x19a>
 802181c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802181e:	07d9      	lsls	r1, r3, #31
 8021820:	d405      	bmi.n	802182e <_vfiprintf_r+0x1fe>
 8021822:	89ab      	ldrh	r3, [r5, #12]
 8021824:	059a      	lsls	r2, r3, #22
 8021826:	d402      	bmi.n	802182e <_vfiprintf_r+0x1fe>
 8021828:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802182a:	f7fd fbf1 	bl	801f010 <__retarget_lock_release_recursive>
 802182e:	89ab      	ldrh	r3, [r5, #12]
 8021830:	065b      	lsls	r3, r3, #25
 8021832:	f53f af1f 	bmi.w	8021674 <_vfiprintf_r+0x44>
 8021836:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021838:	e71e      	b.n	8021678 <_vfiprintf_r+0x48>
 802183a:	ab03      	add	r3, sp, #12
 802183c:	9300      	str	r3, [sp, #0]
 802183e:	462a      	mov	r2, r5
 8021840:	4b05      	ldr	r3, [pc, #20]	@ (8021858 <_vfiprintf_r+0x228>)
 8021842:	a904      	add	r1, sp, #16
 8021844:	4630      	mov	r0, r6
 8021846:	f7fc fccb 	bl	801e1e0 <_printf_i>
 802184a:	e7e4      	b.n	8021816 <_vfiprintf_r+0x1e6>
 802184c:	080259c0 	.word	0x080259c0
 8021850:	080259ca 	.word	0x080259ca
 8021854:	0801dcb1 	.word	0x0801dcb1
 8021858:	0802160b 	.word	0x0802160b
 802185c:	080259c6 	.word	0x080259c6

08021860 <__sflush_r>:
 8021860:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8021864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021868:	0716      	lsls	r6, r2, #28
 802186a:	4605      	mov	r5, r0
 802186c:	460c      	mov	r4, r1
 802186e:	d454      	bmi.n	802191a <__sflush_r+0xba>
 8021870:	684b      	ldr	r3, [r1, #4]
 8021872:	2b00      	cmp	r3, #0
 8021874:	dc02      	bgt.n	802187c <__sflush_r+0x1c>
 8021876:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8021878:	2b00      	cmp	r3, #0
 802187a:	dd48      	ble.n	802190e <__sflush_r+0xae>
 802187c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802187e:	2e00      	cmp	r6, #0
 8021880:	d045      	beq.n	802190e <__sflush_r+0xae>
 8021882:	2300      	movs	r3, #0
 8021884:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8021888:	682f      	ldr	r7, [r5, #0]
 802188a:	6a21      	ldr	r1, [r4, #32]
 802188c:	602b      	str	r3, [r5, #0]
 802188e:	d030      	beq.n	80218f2 <__sflush_r+0x92>
 8021890:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8021892:	89a3      	ldrh	r3, [r4, #12]
 8021894:	0759      	lsls	r1, r3, #29
 8021896:	d505      	bpl.n	80218a4 <__sflush_r+0x44>
 8021898:	6863      	ldr	r3, [r4, #4]
 802189a:	1ad2      	subs	r2, r2, r3
 802189c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802189e:	b10b      	cbz	r3, 80218a4 <__sflush_r+0x44>
 80218a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80218a2:	1ad2      	subs	r2, r2, r3
 80218a4:	2300      	movs	r3, #0
 80218a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80218a8:	6a21      	ldr	r1, [r4, #32]
 80218aa:	4628      	mov	r0, r5
 80218ac:	47b0      	blx	r6
 80218ae:	1c43      	adds	r3, r0, #1
 80218b0:	89a3      	ldrh	r3, [r4, #12]
 80218b2:	d106      	bne.n	80218c2 <__sflush_r+0x62>
 80218b4:	6829      	ldr	r1, [r5, #0]
 80218b6:	291d      	cmp	r1, #29
 80218b8:	d82b      	bhi.n	8021912 <__sflush_r+0xb2>
 80218ba:	4a2a      	ldr	r2, [pc, #168]	@ (8021964 <__sflush_r+0x104>)
 80218bc:	410a      	asrs	r2, r1
 80218be:	07d6      	lsls	r6, r2, #31
 80218c0:	d427      	bmi.n	8021912 <__sflush_r+0xb2>
 80218c2:	2200      	movs	r2, #0
 80218c4:	6062      	str	r2, [r4, #4]
 80218c6:	04d9      	lsls	r1, r3, #19
 80218c8:	6922      	ldr	r2, [r4, #16]
 80218ca:	6022      	str	r2, [r4, #0]
 80218cc:	d504      	bpl.n	80218d8 <__sflush_r+0x78>
 80218ce:	1c42      	adds	r2, r0, #1
 80218d0:	d101      	bne.n	80218d6 <__sflush_r+0x76>
 80218d2:	682b      	ldr	r3, [r5, #0]
 80218d4:	b903      	cbnz	r3, 80218d8 <__sflush_r+0x78>
 80218d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80218d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80218da:	602f      	str	r7, [r5, #0]
 80218dc:	b1b9      	cbz	r1, 802190e <__sflush_r+0xae>
 80218de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80218e2:	4299      	cmp	r1, r3
 80218e4:	d002      	beq.n	80218ec <__sflush_r+0x8c>
 80218e6:	4628      	mov	r0, r5
 80218e8:	f7fe fa1a 	bl	801fd20 <_free_r>
 80218ec:	2300      	movs	r3, #0
 80218ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80218f0:	e00d      	b.n	802190e <__sflush_r+0xae>
 80218f2:	2301      	movs	r3, #1
 80218f4:	4628      	mov	r0, r5
 80218f6:	47b0      	blx	r6
 80218f8:	4602      	mov	r2, r0
 80218fa:	1c50      	adds	r0, r2, #1
 80218fc:	d1c9      	bne.n	8021892 <__sflush_r+0x32>
 80218fe:	682b      	ldr	r3, [r5, #0]
 8021900:	2b00      	cmp	r3, #0
 8021902:	d0c6      	beq.n	8021892 <__sflush_r+0x32>
 8021904:	2b1d      	cmp	r3, #29
 8021906:	d001      	beq.n	802190c <__sflush_r+0xac>
 8021908:	2b16      	cmp	r3, #22
 802190a:	d11e      	bne.n	802194a <__sflush_r+0xea>
 802190c:	602f      	str	r7, [r5, #0]
 802190e:	2000      	movs	r0, #0
 8021910:	e022      	b.n	8021958 <__sflush_r+0xf8>
 8021912:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021916:	b21b      	sxth	r3, r3
 8021918:	e01b      	b.n	8021952 <__sflush_r+0xf2>
 802191a:	690f      	ldr	r7, [r1, #16]
 802191c:	2f00      	cmp	r7, #0
 802191e:	d0f6      	beq.n	802190e <__sflush_r+0xae>
 8021920:	0793      	lsls	r3, r2, #30
 8021922:	680e      	ldr	r6, [r1, #0]
 8021924:	bf08      	it	eq
 8021926:	694b      	ldreq	r3, [r1, #20]
 8021928:	600f      	str	r7, [r1, #0]
 802192a:	bf18      	it	ne
 802192c:	2300      	movne	r3, #0
 802192e:	eba6 0807 	sub.w	r8, r6, r7
 8021932:	608b      	str	r3, [r1, #8]
 8021934:	f1b8 0f00 	cmp.w	r8, #0
 8021938:	dde9      	ble.n	802190e <__sflush_r+0xae>
 802193a:	6a21      	ldr	r1, [r4, #32]
 802193c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802193e:	4643      	mov	r3, r8
 8021940:	463a      	mov	r2, r7
 8021942:	4628      	mov	r0, r5
 8021944:	47b0      	blx	r6
 8021946:	2800      	cmp	r0, #0
 8021948:	dc08      	bgt.n	802195c <__sflush_r+0xfc>
 802194a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802194e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021952:	81a3      	strh	r3, [r4, #12]
 8021954:	f04f 30ff 	mov.w	r0, #4294967295
 8021958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802195c:	4407      	add	r7, r0
 802195e:	eba8 0800 	sub.w	r8, r8, r0
 8021962:	e7e7      	b.n	8021934 <__sflush_r+0xd4>
 8021964:	dfbffffe 	.word	0xdfbffffe

08021968 <_fflush_r>:
 8021968:	b538      	push	{r3, r4, r5, lr}
 802196a:	690b      	ldr	r3, [r1, #16]
 802196c:	4605      	mov	r5, r0
 802196e:	460c      	mov	r4, r1
 8021970:	b913      	cbnz	r3, 8021978 <_fflush_r+0x10>
 8021972:	2500      	movs	r5, #0
 8021974:	4628      	mov	r0, r5
 8021976:	bd38      	pop	{r3, r4, r5, pc}
 8021978:	b118      	cbz	r0, 8021982 <_fflush_r+0x1a>
 802197a:	6a03      	ldr	r3, [r0, #32]
 802197c:	b90b      	cbnz	r3, 8021982 <_fflush_r+0x1a>
 802197e:	f7fc ffef 	bl	801e960 <__sinit>
 8021982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021986:	2b00      	cmp	r3, #0
 8021988:	d0f3      	beq.n	8021972 <_fflush_r+0xa>
 802198a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802198c:	07d0      	lsls	r0, r2, #31
 802198e:	d404      	bmi.n	802199a <_fflush_r+0x32>
 8021990:	0599      	lsls	r1, r3, #22
 8021992:	d402      	bmi.n	802199a <_fflush_r+0x32>
 8021994:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021996:	f7fd fb3a 	bl	801f00e <__retarget_lock_acquire_recursive>
 802199a:	4628      	mov	r0, r5
 802199c:	4621      	mov	r1, r4
 802199e:	f7ff ff5f 	bl	8021860 <__sflush_r>
 80219a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80219a4:	07da      	lsls	r2, r3, #31
 80219a6:	4605      	mov	r5, r0
 80219a8:	d4e4      	bmi.n	8021974 <_fflush_r+0xc>
 80219aa:	89a3      	ldrh	r3, [r4, #12]
 80219ac:	059b      	lsls	r3, r3, #22
 80219ae:	d4e1      	bmi.n	8021974 <_fflush_r+0xc>
 80219b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80219b2:	f7fd fb2d 	bl	801f010 <__retarget_lock_release_recursive>
 80219b6:	e7dd      	b.n	8021974 <_fflush_r+0xc>

080219b8 <fiprintf>:
 80219b8:	b40e      	push	{r1, r2, r3}
 80219ba:	b503      	push	{r0, r1, lr}
 80219bc:	4601      	mov	r1, r0
 80219be:	ab03      	add	r3, sp, #12
 80219c0:	4805      	ldr	r0, [pc, #20]	@ (80219d8 <fiprintf+0x20>)
 80219c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80219c6:	6800      	ldr	r0, [r0, #0]
 80219c8:	9301      	str	r3, [sp, #4]
 80219ca:	f7ff fe31 	bl	8021630 <_vfiprintf_r>
 80219ce:	b002      	add	sp, #8
 80219d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80219d4:	b003      	add	sp, #12
 80219d6:	4770      	bx	lr
 80219d8:	20000148 	.word	0x20000148

080219dc <__swhatbuf_r>:
 80219dc:	b570      	push	{r4, r5, r6, lr}
 80219de:	460c      	mov	r4, r1
 80219e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80219e4:	2900      	cmp	r1, #0
 80219e6:	b096      	sub	sp, #88	@ 0x58
 80219e8:	4615      	mov	r5, r2
 80219ea:	461e      	mov	r6, r3
 80219ec:	da0d      	bge.n	8021a0a <__swhatbuf_r+0x2e>
 80219ee:	89a3      	ldrh	r3, [r4, #12]
 80219f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80219f4:	f04f 0100 	mov.w	r1, #0
 80219f8:	bf14      	ite	ne
 80219fa:	2340      	movne	r3, #64	@ 0x40
 80219fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8021a00:	2000      	movs	r0, #0
 8021a02:	6031      	str	r1, [r6, #0]
 8021a04:	602b      	str	r3, [r5, #0]
 8021a06:	b016      	add	sp, #88	@ 0x58
 8021a08:	bd70      	pop	{r4, r5, r6, pc}
 8021a0a:	466a      	mov	r2, sp
 8021a0c:	f000 f85a 	bl	8021ac4 <_fstat_r>
 8021a10:	2800      	cmp	r0, #0
 8021a12:	dbec      	blt.n	80219ee <__swhatbuf_r+0x12>
 8021a14:	9901      	ldr	r1, [sp, #4]
 8021a16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8021a1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8021a1e:	4259      	negs	r1, r3
 8021a20:	4159      	adcs	r1, r3
 8021a22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8021a26:	e7eb      	b.n	8021a00 <__swhatbuf_r+0x24>

08021a28 <__smakebuf_r>:
 8021a28:	898b      	ldrh	r3, [r1, #12]
 8021a2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021a2c:	079d      	lsls	r5, r3, #30
 8021a2e:	4606      	mov	r6, r0
 8021a30:	460c      	mov	r4, r1
 8021a32:	d507      	bpl.n	8021a44 <__smakebuf_r+0x1c>
 8021a34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8021a38:	6023      	str	r3, [r4, #0]
 8021a3a:	6123      	str	r3, [r4, #16]
 8021a3c:	2301      	movs	r3, #1
 8021a3e:	6163      	str	r3, [r4, #20]
 8021a40:	b003      	add	sp, #12
 8021a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021a44:	ab01      	add	r3, sp, #4
 8021a46:	466a      	mov	r2, sp
 8021a48:	f7ff ffc8 	bl	80219dc <__swhatbuf_r>
 8021a4c:	9f00      	ldr	r7, [sp, #0]
 8021a4e:	4605      	mov	r5, r0
 8021a50:	4639      	mov	r1, r7
 8021a52:	4630      	mov	r0, r6
 8021a54:	f7fb ff7a 	bl	801d94c <_malloc_r>
 8021a58:	b948      	cbnz	r0, 8021a6e <__smakebuf_r+0x46>
 8021a5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021a5e:	059a      	lsls	r2, r3, #22
 8021a60:	d4ee      	bmi.n	8021a40 <__smakebuf_r+0x18>
 8021a62:	f023 0303 	bic.w	r3, r3, #3
 8021a66:	f043 0302 	orr.w	r3, r3, #2
 8021a6a:	81a3      	strh	r3, [r4, #12]
 8021a6c:	e7e2      	b.n	8021a34 <__smakebuf_r+0xc>
 8021a6e:	89a3      	ldrh	r3, [r4, #12]
 8021a70:	6020      	str	r0, [r4, #0]
 8021a72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021a76:	81a3      	strh	r3, [r4, #12]
 8021a78:	9b01      	ldr	r3, [sp, #4]
 8021a7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8021a7e:	b15b      	cbz	r3, 8021a98 <__smakebuf_r+0x70>
 8021a80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021a84:	4630      	mov	r0, r6
 8021a86:	f000 f82f 	bl	8021ae8 <_isatty_r>
 8021a8a:	b128      	cbz	r0, 8021a98 <__smakebuf_r+0x70>
 8021a8c:	89a3      	ldrh	r3, [r4, #12]
 8021a8e:	f023 0303 	bic.w	r3, r3, #3
 8021a92:	f043 0301 	orr.w	r3, r3, #1
 8021a96:	81a3      	strh	r3, [r4, #12]
 8021a98:	89a3      	ldrh	r3, [r4, #12]
 8021a9a:	431d      	orrs	r5, r3
 8021a9c:	81a5      	strh	r5, [r4, #12]
 8021a9e:	e7cf      	b.n	8021a40 <__smakebuf_r+0x18>

08021aa0 <strncmp>:
 8021aa0:	b510      	push	{r4, lr}
 8021aa2:	b16a      	cbz	r2, 8021ac0 <strncmp+0x20>
 8021aa4:	3901      	subs	r1, #1
 8021aa6:	1884      	adds	r4, r0, r2
 8021aa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021aac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8021ab0:	429a      	cmp	r2, r3
 8021ab2:	d103      	bne.n	8021abc <strncmp+0x1c>
 8021ab4:	42a0      	cmp	r0, r4
 8021ab6:	d001      	beq.n	8021abc <strncmp+0x1c>
 8021ab8:	2a00      	cmp	r2, #0
 8021aba:	d1f5      	bne.n	8021aa8 <strncmp+0x8>
 8021abc:	1ad0      	subs	r0, r2, r3
 8021abe:	bd10      	pop	{r4, pc}
 8021ac0:	4610      	mov	r0, r2
 8021ac2:	e7fc      	b.n	8021abe <strncmp+0x1e>

08021ac4 <_fstat_r>:
 8021ac4:	b538      	push	{r3, r4, r5, lr}
 8021ac6:	4d07      	ldr	r5, [pc, #28]	@ (8021ae4 <_fstat_r+0x20>)
 8021ac8:	2300      	movs	r3, #0
 8021aca:	4604      	mov	r4, r0
 8021acc:	4608      	mov	r0, r1
 8021ace:	4611      	mov	r1, r2
 8021ad0:	602b      	str	r3, [r5, #0]
 8021ad2:	f7e2 fa7d 	bl	8003fd0 <_fstat>
 8021ad6:	1c43      	adds	r3, r0, #1
 8021ad8:	d102      	bne.n	8021ae0 <_fstat_r+0x1c>
 8021ada:	682b      	ldr	r3, [r5, #0]
 8021adc:	b103      	cbz	r3, 8021ae0 <_fstat_r+0x1c>
 8021ade:	6023      	str	r3, [r4, #0]
 8021ae0:	bd38      	pop	{r3, r4, r5, pc}
 8021ae2:	bf00      	nop
 8021ae4:	200037ac 	.word	0x200037ac

08021ae8 <_isatty_r>:
 8021ae8:	b538      	push	{r3, r4, r5, lr}
 8021aea:	4d06      	ldr	r5, [pc, #24]	@ (8021b04 <_isatty_r+0x1c>)
 8021aec:	2300      	movs	r3, #0
 8021aee:	4604      	mov	r4, r0
 8021af0:	4608      	mov	r0, r1
 8021af2:	602b      	str	r3, [r5, #0]
 8021af4:	f7e2 fa7c 	bl	8003ff0 <_isatty>
 8021af8:	1c43      	adds	r3, r0, #1
 8021afa:	d102      	bne.n	8021b02 <_isatty_r+0x1a>
 8021afc:	682b      	ldr	r3, [r5, #0]
 8021afe:	b103      	cbz	r3, 8021b02 <_isatty_r+0x1a>
 8021b00:	6023      	str	r3, [r4, #0]
 8021b02:	bd38      	pop	{r3, r4, r5, pc}
 8021b04:	200037ac 	.word	0x200037ac

08021b08 <nan>:
 8021b08:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8021b10 <nan+0x8>
 8021b0c:	4770      	bx	lr
 8021b0e:	bf00      	nop
 8021b10:	00000000 	.word	0x00000000
 8021b14:	7ff80000 	.word	0x7ff80000

08021b18 <abort>:
 8021b18:	b508      	push	{r3, lr}
 8021b1a:	2006      	movs	r0, #6
 8021b1c:	f000 fbc4 	bl	80222a8 <raise>
 8021b20:	2001      	movs	r0, #1
 8021b22:	f7e2 fa05 	bl	8003f30 <_exit>

08021b26 <_calloc_r>:
 8021b26:	b570      	push	{r4, r5, r6, lr}
 8021b28:	fba1 5402 	umull	r5, r4, r1, r2
 8021b2c:	b93c      	cbnz	r4, 8021b3e <_calloc_r+0x18>
 8021b2e:	4629      	mov	r1, r5
 8021b30:	f7fb ff0c 	bl	801d94c <_malloc_r>
 8021b34:	4606      	mov	r6, r0
 8021b36:	b928      	cbnz	r0, 8021b44 <_calloc_r+0x1e>
 8021b38:	2600      	movs	r6, #0
 8021b3a:	4630      	mov	r0, r6
 8021b3c:	bd70      	pop	{r4, r5, r6, pc}
 8021b3e:	220c      	movs	r2, #12
 8021b40:	6002      	str	r2, [r0, #0]
 8021b42:	e7f9      	b.n	8021b38 <_calloc_r+0x12>
 8021b44:	462a      	mov	r2, r5
 8021b46:	4621      	mov	r1, r4
 8021b48:	f7fd f954 	bl	801edf4 <memset>
 8021b4c:	e7f5      	b.n	8021b3a <_calloc_r+0x14>

08021b4e <rshift>:
 8021b4e:	6903      	ldr	r3, [r0, #16]
 8021b50:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8021b54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021b58:	ea4f 1261 	mov.w	r2, r1, asr #5
 8021b5c:	f100 0414 	add.w	r4, r0, #20
 8021b60:	dd45      	ble.n	8021bee <rshift+0xa0>
 8021b62:	f011 011f 	ands.w	r1, r1, #31
 8021b66:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8021b6a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8021b6e:	d10c      	bne.n	8021b8a <rshift+0x3c>
 8021b70:	f100 0710 	add.w	r7, r0, #16
 8021b74:	4629      	mov	r1, r5
 8021b76:	42b1      	cmp	r1, r6
 8021b78:	d334      	bcc.n	8021be4 <rshift+0x96>
 8021b7a:	1a9b      	subs	r3, r3, r2
 8021b7c:	009b      	lsls	r3, r3, #2
 8021b7e:	1eea      	subs	r2, r5, #3
 8021b80:	4296      	cmp	r6, r2
 8021b82:	bf38      	it	cc
 8021b84:	2300      	movcc	r3, #0
 8021b86:	4423      	add	r3, r4
 8021b88:	e015      	b.n	8021bb6 <rshift+0x68>
 8021b8a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8021b8e:	f1c1 0820 	rsb	r8, r1, #32
 8021b92:	40cf      	lsrs	r7, r1
 8021b94:	f105 0e04 	add.w	lr, r5, #4
 8021b98:	46a1      	mov	r9, r4
 8021b9a:	4576      	cmp	r6, lr
 8021b9c:	46f4      	mov	ip, lr
 8021b9e:	d815      	bhi.n	8021bcc <rshift+0x7e>
 8021ba0:	1a9a      	subs	r2, r3, r2
 8021ba2:	0092      	lsls	r2, r2, #2
 8021ba4:	3a04      	subs	r2, #4
 8021ba6:	3501      	adds	r5, #1
 8021ba8:	42ae      	cmp	r6, r5
 8021baa:	bf38      	it	cc
 8021bac:	2200      	movcc	r2, #0
 8021bae:	18a3      	adds	r3, r4, r2
 8021bb0:	50a7      	str	r7, [r4, r2]
 8021bb2:	b107      	cbz	r7, 8021bb6 <rshift+0x68>
 8021bb4:	3304      	adds	r3, #4
 8021bb6:	1b1a      	subs	r2, r3, r4
 8021bb8:	42a3      	cmp	r3, r4
 8021bba:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8021bbe:	bf08      	it	eq
 8021bc0:	2300      	moveq	r3, #0
 8021bc2:	6102      	str	r2, [r0, #16]
 8021bc4:	bf08      	it	eq
 8021bc6:	6143      	streq	r3, [r0, #20]
 8021bc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021bcc:	f8dc c000 	ldr.w	ip, [ip]
 8021bd0:	fa0c fc08 	lsl.w	ip, ip, r8
 8021bd4:	ea4c 0707 	orr.w	r7, ip, r7
 8021bd8:	f849 7b04 	str.w	r7, [r9], #4
 8021bdc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8021be0:	40cf      	lsrs	r7, r1
 8021be2:	e7da      	b.n	8021b9a <rshift+0x4c>
 8021be4:	f851 cb04 	ldr.w	ip, [r1], #4
 8021be8:	f847 cf04 	str.w	ip, [r7, #4]!
 8021bec:	e7c3      	b.n	8021b76 <rshift+0x28>
 8021bee:	4623      	mov	r3, r4
 8021bf0:	e7e1      	b.n	8021bb6 <rshift+0x68>

08021bf2 <__hexdig_fun>:
 8021bf2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8021bf6:	2b09      	cmp	r3, #9
 8021bf8:	d802      	bhi.n	8021c00 <__hexdig_fun+0xe>
 8021bfa:	3820      	subs	r0, #32
 8021bfc:	b2c0      	uxtb	r0, r0
 8021bfe:	4770      	bx	lr
 8021c00:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8021c04:	2b05      	cmp	r3, #5
 8021c06:	d801      	bhi.n	8021c0c <__hexdig_fun+0x1a>
 8021c08:	3847      	subs	r0, #71	@ 0x47
 8021c0a:	e7f7      	b.n	8021bfc <__hexdig_fun+0xa>
 8021c0c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8021c10:	2b05      	cmp	r3, #5
 8021c12:	d801      	bhi.n	8021c18 <__hexdig_fun+0x26>
 8021c14:	3827      	subs	r0, #39	@ 0x27
 8021c16:	e7f1      	b.n	8021bfc <__hexdig_fun+0xa>
 8021c18:	2000      	movs	r0, #0
 8021c1a:	4770      	bx	lr

08021c1c <__gethex>:
 8021c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c20:	b085      	sub	sp, #20
 8021c22:	468a      	mov	sl, r1
 8021c24:	9302      	str	r3, [sp, #8]
 8021c26:	680b      	ldr	r3, [r1, #0]
 8021c28:	9001      	str	r0, [sp, #4]
 8021c2a:	4690      	mov	r8, r2
 8021c2c:	1c9c      	adds	r4, r3, #2
 8021c2e:	46a1      	mov	r9, r4
 8021c30:	f814 0b01 	ldrb.w	r0, [r4], #1
 8021c34:	2830      	cmp	r0, #48	@ 0x30
 8021c36:	d0fa      	beq.n	8021c2e <__gethex+0x12>
 8021c38:	eba9 0303 	sub.w	r3, r9, r3
 8021c3c:	f1a3 0b02 	sub.w	fp, r3, #2
 8021c40:	f7ff ffd7 	bl	8021bf2 <__hexdig_fun>
 8021c44:	4605      	mov	r5, r0
 8021c46:	2800      	cmp	r0, #0
 8021c48:	d168      	bne.n	8021d1c <__gethex+0x100>
 8021c4a:	49a0      	ldr	r1, [pc, #640]	@ (8021ecc <__gethex+0x2b0>)
 8021c4c:	2201      	movs	r2, #1
 8021c4e:	4648      	mov	r0, r9
 8021c50:	f7ff ff26 	bl	8021aa0 <strncmp>
 8021c54:	4607      	mov	r7, r0
 8021c56:	2800      	cmp	r0, #0
 8021c58:	d167      	bne.n	8021d2a <__gethex+0x10e>
 8021c5a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8021c5e:	4626      	mov	r6, r4
 8021c60:	f7ff ffc7 	bl	8021bf2 <__hexdig_fun>
 8021c64:	2800      	cmp	r0, #0
 8021c66:	d062      	beq.n	8021d2e <__gethex+0x112>
 8021c68:	4623      	mov	r3, r4
 8021c6a:	7818      	ldrb	r0, [r3, #0]
 8021c6c:	2830      	cmp	r0, #48	@ 0x30
 8021c6e:	4699      	mov	r9, r3
 8021c70:	f103 0301 	add.w	r3, r3, #1
 8021c74:	d0f9      	beq.n	8021c6a <__gethex+0x4e>
 8021c76:	f7ff ffbc 	bl	8021bf2 <__hexdig_fun>
 8021c7a:	fab0 f580 	clz	r5, r0
 8021c7e:	096d      	lsrs	r5, r5, #5
 8021c80:	f04f 0b01 	mov.w	fp, #1
 8021c84:	464a      	mov	r2, r9
 8021c86:	4616      	mov	r6, r2
 8021c88:	3201      	adds	r2, #1
 8021c8a:	7830      	ldrb	r0, [r6, #0]
 8021c8c:	f7ff ffb1 	bl	8021bf2 <__hexdig_fun>
 8021c90:	2800      	cmp	r0, #0
 8021c92:	d1f8      	bne.n	8021c86 <__gethex+0x6a>
 8021c94:	498d      	ldr	r1, [pc, #564]	@ (8021ecc <__gethex+0x2b0>)
 8021c96:	2201      	movs	r2, #1
 8021c98:	4630      	mov	r0, r6
 8021c9a:	f7ff ff01 	bl	8021aa0 <strncmp>
 8021c9e:	2800      	cmp	r0, #0
 8021ca0:	d13f      	bne.n	8021d22 <__gethex+0x106>
 8021ca2:	b944      	cbnz	r4, 8021cb6 <__gethex+0x9a>
 8021ca4:	1c74      	adds	r4, r6, #1
 8021ca6:	4622      	mov	r2, r4
 8021ca8:	4616      	mov	r6, r2
 8021caa:	3201      	adds	r2, #1
 8021cac:	7830      	ldrb	r0, [r6, #0]
 8021cae:	f7ff ffa0 	bl	8021bf2 <__hexdig_fun>
 8021cb2:	2800      	cmp	r0, #0
 8021cb4:	d1f8      	bne.n	8021ca8 <__gethex+0x8c>
 8021cb6:	1ba4      	subs	r4, r4, r6
 8021cb8:	00a7      	lsls	r7, r4, #2
 8021cba:	7833      	ldrb	r3, [r6, #0]
 8021cbc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8021cc0:	2b50      	cmp	r3, #80	@ 0x50
 8021cc2:	d13e      	bne.n	8021d42 <__gethex+0x126>
 8021cc4:	7873      	ldrb	r3, [r6, #1]
 8021cc6:	2b2b      	cmp	r3, #43	@ 0x2b
 8021cc8:	d033      	beq.n	8021d32 <__gethex+0x116>
 8021cca:	2b2d      	cmp	r3, #45	@ 0x2d
 8021ccc:	d034      	beq.n	8021d38 <__gethex+0x11c>
 8021cce:	1c71      	adds	r1, r6, #1
 8021cd0:	2400      	movs	r4, #0
 8021cd2:	7808      	ldrb	r0, [r1, #0]
 8021cd4:	f7ff ff8d 	bl	8021bf2 <__hexdig_fun>
 8021cd8:	1e43      	subs	r3, r0, #1
 8021cda:	b2db      	uxtb	r3, r3
 8021cdc:	2b18      	cmp	r3, #24
 8021cde:	d830      	bhi.n	8021d42 <__gethex+0x126>
 8021ce0:	f1a0 0210 	sub.w	r2, r0, #16
 8021ce4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8021ce8:	f7ff ff83 	bl	8021bf2 <__hexdig_fun>
 8021cec:	f100 3cff 	add.w	ip, r0, #4294967295
 8021cf0:	fa5f fc8c 	uxtb.w	ip, ip
 8021cf4:	f1bc 0f18 	cmp.w	ip, #24
 8021cf8:	f04f 030a 	mov.w	r3, #10
 8021cfc:	d91e      	bls.n	8021d3c <__gethex+0x120>
 8021cfe:	b104      	cbz	r4, 8021d02 <__gethex+0xe6>
 8021d00:	4252      	negs	r2, r2
 8021d02:	4417      	add	r7, r2
 8021d04:	f8ca 1000 	str.w	r1, [sl]
 8021d08:	b1ed      	cbz	r5, 8021d46 <__gethex+0x12a>
 8021d0a:	f1bb 0f00 	cmp.w	fp, #0
 8021d0e:	bf0c      	ite	eq
 8021d10:	2506      	moveq	r5, #6
 8021d12:	2500      	movne	r5, #0
 8021d14:	4628      	mov	r0, r5
 8021d16:	b005      	add	sp, #20
 8021d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d1c:	2500      	movs	r5, #0
 8021d1e:	462c      	mov	r4, r5
 8021d20:	e7b0      	b.n	8021c84 <__gethex+0x68>
 8021d22:	2c00      	cmp	r4, #0
 8021d24:	d1c7      	bne.n	8021cb6 <__gethex+0x9a>
 8021d26:	4627      	mov	r7, r4
 8021d28:	e7c7      	b.n	8021cba <__gethex+0x9e>
 8021d2a:	464e      	mov	r6, r9
 8021d2c:	462f      	mov	r7, r5
 8021d2e:	2501      	movs	r5, #1
 8021d30:	e7c3      	b.n	8021cba <__gethex+0x9e>
 8021d32:	2400      	movs	r4, #0
 8021d34:	1cb1      	adds	r1, r6, #2
 8021d36:	e7cc      	b.n	8021cd2 <__gethex+0xb6>
 8021d38:	2401      	movs	r4, #1
 8021d3a:	e7fb      	b.n	8021d34 <__gethex+0x118>
 8021d3c:	fb03 0002 	mla	r0, r3, r2, r0
 8021d40:	e7ce      	b.n	8021ce0 <__gethex+0xc4>
 8021d42:	4631      	mov	r1, r6
 8021d44:	e7de      	b.n	8021d04 <__gethex+0xe8>
 8021d46:	eba6 0309 	sub.w	r3, r6, r9
 8021d4a:	3b01      	subs	r3, #1
 8021d4c:	4629      	mov	r1, r5
 8021d4e:	2b07      	cmp	r3, #7
 8021d50:	dc0a      	bgt.n	8021d68 <__gethex+0x14c>
 8021d52:	9801      	ldr	r0, [sp, #4]
 8021d54:	f7fe f82e 	bl	801fdb4 <_Balloc>
 8021d58:	4604      	mov	r4, r0
 8021d5a:	b940      	cbnz	r0, 8021d6e <__gethex+0x152>
 8021d5c:	4b5c      	ldr	r3, [pc, #368]	@ (8021ed0 <__gethex+0x2b4>)
 8021d5e:	4602      	mov	r2, r0
 8021d60:	21e4      	movs	r1, #228	@ 0xe4
 8021d62:	485c      	ldr	r0, [pc, #368]	@ (8021ed4 <__gethex+0x2b8>)
 8021d64:	f7fd f972 	bl	801f04c <__assert_func>
 8021d68:	3101      	adds	r1, #1
 8021d6a:	105b      	asrs	r3, r3, #1
 8021d6c:	e7ef      	b.n	8021d4e <__gethex+0x132>
 8021d6e:	f100 0a14 	add.w	sl, r0, #20
 8021d72:	2300      	movs	r3, #0
 8021d74:	4655      	mov	r5, sl
 8021d76:	469b      	mov	fp, r3
 8021d78:	45b1      	cmp	r9, r6
 8021d7a:	d337      	bcc.n	8021dec <__gethex+0x1d0>
 8021d7c:	f845 bb04 	str.w	fp, [r5], #4
 8021d80:	eba5 050a 	sub.w	r5, r5, sl
 8021d84:	10ad      	asrs	r5, r5, #2
 8021d86:	6125      	str	r5, [r4, #16]
 8021d88:	4658      	mov	r0, fp
 8021d8a:	f7fe f905 	bl	801ff98 <__hi0bits>
 8021d8e:	016d      	lsls	r5, r5, #5
 8021d90:	f8d8 6000 	ldr.w	r6, [r8]
 8021d94:	1a2d      	subs	r5, r5, r0
 8021d96:	42b5      	cmp	r5, r6
 8021d98:	dd54      	ble.n	8021e44 <__gethex+0x228>
 8021d9a:	1bad      	subs	r5, r5, r6
 8021d9c:	4629      	mov	r1, r5
 8021d9e:	4620      	mov	r0, r4
 8021da0:	f7fe fc99 	bl	80206d6 <__any_on>
 8021da4:	4681      	mov	r9, r0
 8021da6:	b178      	cbz	r0, 8021dc8 <__gethex+0x1ac>
 8021da8:	1e6b      	subs	r3, r5, #1
 8021daa:	1159      	asrs	r1, r3, #5
 8021dac:	f003 021f 	and.w	r2, r3, #31
 8021db0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8021db4:	f04f 0901 	mov.w	r9, #1
 8021db8:	fa09 f202 	lsl.w	r2, r9, r2
 8021dbc:	420a      	tst	r2, r1
 8021dbe:	d003      	beq.n	8021dc8 <__gethex+0x1ac>
 8021dc0:	454b      	cmp	r3, r9
 8021dc2:	dc36      	bgt.n	8021e32 <__gethex+0x216>
 8021dc4:	f04f 0902 	mov.w	r9, #2
 8021dc8:	4629      	mov	r1, r5
 8021dca:	4620      	mov	r0, r4
 8021dcc:	f7ff febf 	bl	8021b4e <rshift>
 8021dd0:	442f      	add	r7, r5
 8021dd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021dd6:	42bb      	cmp	r3, r7
 8021dd8:	da42      	bge.n	8021e60 <__gethex+0x244>
 8021dda:	9801      	ldr	r0, [sp, #4]
 8021ddc:	4621      	mov	r1, r4
 8021dde:	f7fe f829 	bl	801fe34 <_Bfree>
 8021de2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021de4:	2300      	movs	r3, #0
 8021de6:	6013      	str	r3, [r2, #0]
 8021de8:	25a3      	movs	r5, #163	@ 0xa3
 8021dea:	e793      	b.n	8021d14 <__gethex+0xf8>
 8021dec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8021df0:	2a2e      	cmp	r2, #46	@ 0x2e
 8021df2:	d012      	beq.n	8021e1a <__gethex+0x1fe>
 8021df4:	2b20      	cmp	r3, #32
 8021df6:	d104      	bne.n	8021e02 <__gethex+0x1e6>
 8021df8:	f845 bb04 	str.w	fp, [r5], #4
 8021dfc:	f04f 0b00 	mov.w	fp, #0
 8021e00:	465b      	mov	r3, fp
 8021e02:	7830      	ldrb	r0, [r6, #0]
 8021e04:	9303      	str	r3, [sp, #12]
 8021e06:	f7ff fef4 	bl	8021bf2 <__hexdig_fun>
 8021e0a:	9b03      	ldr	r3, [sp, #12]
 8021e0c:	f000 000f 	and.w	r0, r0, #15
 8021e10:	4098      	lsls	r0, r3
 8021e12:	ea4b 0b00 	orr.w	fp, fp, r0
 8021e16:	3304      	adds	r3, #4
 8021e18:	e7ae      	b.n	8021d78 <__gethex+0x15c>
 8021e1a:	45b1      	cmp	r9, r6
 8021e1c:	d8ea      	bhi.n	8021df4 <__gethex+0x1d8>
 8021e1e:	492b      	ldr	r1, [pc, #172]	@ (8021ecc <__gethex+0x2b0>)
 8021e20:	9303      	str	r3, [sp, #12]
 8021e22:	2201      	movs	r2, #1
 8021e24:	4630      	mov	r0, r6
 8021e26:	f7ff fe3b 	bl	8021aa0 <strncmp>
 8021e2a:	9b03      	ldr	r3, [sp, #12]
 8021e2c:	2800      	cmp	r0, #0
 8021e2e:	d1e1      	bne.n	8021df4 <__gethex+0x1d8>
 8021e30:	e7a2      	b.n	8021d78 <__gethex+0x15c>
 8021e32:	1ea9      	subs	r1, r5, #2
 8021e34:	4620      	mov	r0, r4
 8021e36:	f7fe fc4e 	bl	80206d6 <__any_on>
 8021e3a:	2800      	cmp	r0, #0
 8021e3c:	d0c2      	beq.n	8021dc4 <__gethex+0x1a8>
 8021e3e:	f04f 0903 	mov.w	r9, #3
 8021e42:	e7c1      	b.n	8021dc8 <__gethex+0x1ac>
 8021e44:	da09      	bge.n	8021e5a <__gethex+0x23e>
 8021e46:	1b75      	subs	r5, r6, r5
 8021e48:	4621      	mov	r1, r4
 8021e4a:	9801      	ldr	r0, [sp, #4]
 8021e4c:	462a      	mov	r2, r5
 8021e4e:	f7fe fa09 	bl	8020264 <__lshift>
 8021e52:	1b7f      	subs	r7, r7, r5
 8021e54:	4604      	mov	r4, r0
 8021e56:	f100 0a14 	add.w	sl, r0, #20
 8021e5a:	f04f 0900 	mov.w	r9, #0
 8021e5e:	e7b8      	b.n	8021dd2 <__gethex+0x1b6>
 8021e60:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8021e64:	42bd      	cmp	r5, r7
 8021e66:	dd6f      	ble.n	8021f48 <__gethex+0x32c>
 8021e68:	1bed      	subs	r5, r5, r7
 8021e6a:	42ae      	cmp	r6, r5
 8021e6c:	dc34      	bgt.n	8021ed8 <__gethex+0x2bc>
 8021e6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8021e72:	2b02      	cmp	r3, #2
 8021e74:	d022      	beq.n	8021ebc <__gethex+0x2a0>
 8021e76:	2b03      	cmp	r3, #3
 8021e78:	d024      	beq.n	8021ec4 <__gethex+0x2a8>
 8021e7a:	2b01      	cmp	r3, #1
 8021e7c:	d115      	bne.n	8021eaa <__gethex+0x28e>
 8021e7e:	42ae      	cmp	r6, r5
 8021e80:	d113      	bne.n	8021eaa <__gethex+0x28e>
 8021e82:	2e01      	cmp	r6, #1
 8021e84:	d10b      	bne.n	8021e9e <__gethex+0x282>
 8021e86:	9a02      	ldr	r2, [sp, #8]
 8021e88:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8021e8c:	6013      	str	r3, [r2, #0]
 8021e8e:	2301      	movs	r3, #1
 8021e90:	6123      	str	r3, [r4, #16]
 8021e92:	f8ca 3000 	str.w	r3, [sl]
 8021e96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021e98:	2562      	movs	r5, #98	@ 0x62
 8021e9a:	601c      	str	r4, [r3, #0]
 8021e9c:	e73a      	b.n	8021d14 <__gethex+0xf8>
 8021e9e:	1e71      	subs	r1, r6, #1
 8021ea0:	4620      	mov	r0, r4
 8021ea2:	f7fe fc18 	bl	80206d6 <__any_on>
 8021ea6:	2800      	cmp	r0, #0
 8021ea8:	d1ed      	bne.n	8021e86 <__gethex+0x26a>
 8021eaa:	9801      	ldr	r0, [sp, #4]
 8021eac:	4621      	mov	r1, r4
 8021eae:	f7fd ffc1 	bl	801fe34 <_Bfree>
 8021eb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021eb4:	2300      	movs	r3, #0
 8021eb6:	6013      	str	r3, [r2, #0]
 8021eb8:	2550      	movs	r5, #80	@ 0x50
 8021eba:	e72b      	b.n	8021d14 <__gethex+0xf8>
 8021ebc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021ebe:	2b00      	cmp	r3, #0
 8021ec0:	d1f3      	bne.n	8021eaa <__gethex+0x28e>
 8021ec2:	e7e0      	b.n	8021e86 <__gethex+0x26a>
 8021ec4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021ec6:	2b00      	cmp	r3, #0
 8021ec8:	d1dd      	bne.n	8021e86 <__gethex+0x26a>
 8021eca:	e7ee      	b.n	8021eaa <__gethex+0x28e>
 8021ecc:	08025968 	.word	0x08025968
 8021ed0:	080257fc 	.word	0x080257fc
 8021ed4:	080259d9 	.word	0x080259d9
 8021ed8:	1e6f      	subs	r7, r5, #1
 8021eda:	f1b9 0f00 	cmp.w	r9, #0
 8021ede:	d130      	bne.n	8021f42 <__gethex+0x326>
 8021ee0:	b127      	cbz	r7, 8021eec <__gethex+0x2d0>
 8021ee2:	4639      	mov	r1, r7
 8021ee4:	4620      	mov	r0, r4
 8021ee6:	f7fe fbf6 	bl	80206d6 <__any_on>
 8021eea:	4681      	mov	r9, r0
 8021eec:	117a      	asrs	r2, r7, #5
 8021eee:	2301      	movs	r3, #1
 8021ef0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8021ef4:	f007 071f 	and.w	r7, r7, #31
 8021ef8:	40bb      	lsls	r3, r7
 8021efa:	4213      	tst	r3, r2
 8021efc:	4629      	mov	r1, r5
 8021efe:	4620      	mov	r0, r4
 8021f00:	bf18      	it	ne
 8021f02:	f049 0902 	orrne.w	r9, r9, #2
 8021f06:	f7ff fe22 	bl	8021b4e <rshift>
 8021f0a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8021f0e:	1b76      	subs	r6, r6, r5
 8021f10:	2502      	movs	r5, #2
 8021f12:	f1b9 0f00 	cmp.w	r9, #0
 8021f16:	d047      	beq.n	8021fa8 <__gethex+0x38c>
 8021f18:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8021f1c:	2b02      	cmp	r3, #2
 8021f1e:	d015      	beq.n	8021f4c <__gethex+0x330>
 8021f20:	2b03      	cmp	r3, #3
 8021f22:	d017      	beq.n	8021f54 <__gethex+0x338>
 8021f24:	2b01      	cmp	r3, #1
 8021f26:	d109      	bne.n	8021f3c <__gethex+0x320>
 8021f28:	f019 0f02 	tst.w	r9, #2
 8021f2c:	d006      	beq.n	8021f3c <__gethex+0x320>
 8021f2e:	f8da 3000 	ldr.w	r3, [sl]
 8021f32:	ea49 0903 	orr.w	r9, r9, r3
 8021f36:	f019 0f01 	tst.w	r9, #1
 8021f3a:	d10e      	bne.n	8021f5a <__gethex+0x33e>
 8021f3c:	f045 0510 	orr.w	r5, r5, #16
 8021f40:	e032      	b.n	8021fa8 <__gethex+0x38c>
 8021f42:	f04f 0901 	mov.w	r9, #1
 8021f46:	e7d1      	b.n	8021eec <__gethex+0x2d0>
 8021f48:	2501      	movs	r5, #1
 8021f4a:	e7e2      	b.n	8021f12 <__gethex+0x2f6>
 8021f4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021f4e:	f1c3 0301 	rsb	r3, r3, #1
 8021f52:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021f54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021f56:	2b00      	cmp	r3, #0
 8021f58:	d0f0      	beq.n	8021f3c <__gethex+0x320>
 8021f5a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8021f5e:	f104 0314 	add.w	r3, r4, #20
 8021f62:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8021f66:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8021f6a:	f04f 0c00 	mov.w	ip, #0
 8021f6e:	4618      	mov	r0, r3
 8021f70:	f853 2b04 	ldr.w	r2, [r3], #4
 8021f74:	f1b2 3fff 	cmp.w	r2, #4294967295
 8021f78:	d01b      	beq.n	8021fb2 <__gethex+0x396>
 8021f7a:	3201      	adds	r2, #1
 8021f7c:	6002      	str	r2, [r0, #0]
 8021f7e:	2d02      	cmp	r5, #2
 8021f80:	f104 0314 	add.w	r3, r4, #20
 8021f84:	d13c      	bne.n	8022000 <__gethex+0x3e4>
 8021f86:	f8d8 2000 	ldr.w	r2, [r8]
 8021f8a:	3a01      	subs	r2, #1
 8021f8c:	42b2      	cmp	r2, r6
 8021f8e:	d109      	bne.n	8021fa4 <__gethex+0x388>
 8021f90:	1171      	asrs	r1, r6, #5
 8021f92:	2201      	movs	r2, #1
 8021f94:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8021f98:	f006 061f 	and.w	r6, r6, #31
 8021f9c:	fa02 f606 	lsl.w	r6, r2, r6
 8021fa0:	421e      	tst	r6, r3
 8021fa2:	d13a      	bne.n	802201a <__gethex+0x3fe>
 8021fa4:	f045 0520 	orr.w	r5, r5, #32
 8021fa8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021faa:	601c      	str	r4, [r3, #0]
 8021fac:	9b02      	ldr	r3, [sp, #8]
 8021fae:	601f      	str	r7, [r3, #0]
 8021fb0:	e6b0      	b.n	8021d14 <__gethex+0xf8>
 8021fb2:	4299      	cmp	r1, r3
 8021fb4:	f843 cc04 	str.w	ip, [r3, #-4]
 8021fb8:	d8d9      	bhi.n	8021f6e <__gethex+0x352>
 8021fba:	68a3      	ldr	r3, [r4, #8]
 8021fbc:	459b      	cmp	fp, r3
 8021fbe:	db17      	blt.n	8021ff0 <__gethex+0x3d4>
 8021fc0:	6861      	ldr	r1, [r4, #4]
 8021fc2:	9801      	ldr	r0, [sp, #4]
 8021fc4:	3101      	adds	r1, #1
 8021fc6:	f7fd fef5 	bl	801fdb4 <_Balloc>
 8021fca:	4681      	mov	r9, r0
 8021fcc:	b918      	cbnz	r0, 8021fd6 <__gethex+0x3ba>
 8021fce:	4b1a      	ldr	r3, [pc, #104]	@ (8022038 <__gethex+0x41c>)
 8021fd0:	4602      	mov	r2, r0
 8021fd2:	2184      	movs	r1, #132	@ 0x84
 8021fd4:	e6c5      	b.n	8021d62 <__gethex+0x146>
 8021fd6:	6922      	ldr	r2, [r4, #16]
 8021fd8:	3202      	adds	r2, #2
 8021fda:	f104 010c 	add.w	r1, r4, #12
 8021fde:	0092      	lsls	r2, r2, #2
 8021fe0:	300c      	adds	r0, #12
 8021fe2:	f7fd f81e 	bl	801f022 <memcpy>
 8021fe6:	4621      	mov	r1, r4
 8021fe8:	9801      	ldr	r0, [sp, #4]
 8021fea:	f7fd ff23 	bl	801fe34 <_Bfree>
 8021fee:	464c      	mov	r4, r9
 8021ff0:	6923      	ldr	r3, [r4, #16]
 8021ff2:	1c5a      	adds	r2, r3, #1
 8021ff4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8021ff8:	6122      	str	r2, [r4, #16]
 8021ffa:	2201      	movs	r2, #1
 8021ffc:	615a      	str	r2, [r3, #20]
 8021ffe:	e7be      	b.n	8021f7e <__gethex+0x362>
 8022000:	6922      	ldr	r2, [r4, #16]
 8022002:	455a      	cmp	r2, fp
 8022004:	dd0b      	ble.n	802201e <__gethex+0x402>
 8022006:	2101      	movs	r1, #1
 8022008:	4620      	mov	r0, r4
 802200a:	f7ff fda0 	bl	8021b4e <rshift>
 802200e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8022012:	3701      	adds	r7, #1
 8022014:	42bb      	cmp	r3, r7
 8022016:	f6ff aee0 	blt.w	8021dda <__gethex+0x1be>
 802201a:	2501      	movs	r5, #1
 802201c:	e7c2      	b.n	8021fa4 <__gethex+0x388>
 802201e:	f016 061f 	ands.w	r6, r6, #31
 8022022:	d0fa      	beq.n	802201a <__gethex+0x3fe>
 8022024:	4453      	add	r3, sl
 8022026:	f1c6 0620 	rsb	r6, r6, #32
 802202a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 802202e:	f7fd ffb3 	bl	801ff98 <__hi0bits>
 8022032:	42b0      	cmp	r0, r6
 8022034:	dbe7      	blt.n	8022006 <__gethex+0x3ea>
 8022036:	e7f0      	b.n	802201a <__gethex+0x3fe>
 8022038:	080257fc 	.word	0x080257fc

0802203c <L_shift>:
 802203c:	f1c2 0208 	rsb	r2, r2, #8
 8022040:	0092      	lsls	r2, r2, #2
 8022042:	b570      	push	{r4, r5, r6, lr}
 8022044:	f1c2 0620 	rsb	r6, r2, #32
 8022048:	6843      	ldr	r3, [r0, #4]
 802204a:	6804      	ldr	r4, [r0, #0]
 802204c:	fa03 f506 	lsl.w	r5, r3, r6
 8022050:	432c      	orrs	r4, r5
 8022052:	40d3      	lsrs	r3, r2
 8022054:	6004      	str	r4, [r0, #0]
 8022056:	f840 3f04 	str.w	r3, [r0, #4]!
 802205a:	4288      	cmp	r0, r1
 802205c:	d3f4      	bcc.n	8022048 <L_shift+0xc>
 802205e:	bd70      	pop	{r4, r5, r6, pc}

08022060 <__match>:
 8022060:	b530      	push	{r4, r5, lr}
 8022062:	6803      	ldr	r3, [r0, #0]
 8022064:	3301      	adds	r3, #1
 8022066:	f811 4b01 	ldrb.w	r4, [r1], #1
 802206a:	b914      	cbnz	r4, 8022072 <__match+0x12>
 802206c:	6003      	str	r3, [r0, #0]
 802206e:	2001      	movs	r0, #1
 8022070:	bd30      	pop	{r4, r5, pc}
 8022072:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022076:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 802207a:	2d19      	cmp	r5, #25
 802207c:	bf98      	it	ls
 802207e:	3220      	addls	r2, #32
 8022080:	42a2      	cmp	r2, r4
 8022082:	d0f0      	beq.n	8022066 <__match+0x6>
 8022084:	2000      	movs	r0, #0
 8022086:	e7f3      	b.n	8022070 <__match+0x10>

08022088 <__hexnan>:
 8022088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802208c:	680b      	ldr	r3, [r1, #0]
 802208e:	6801      	ldr	r1, [r0, #0]
 8022090:	115e      	asrs	r6, r3, #5
 8022092:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8022096:	f013 031f 	ands.w	r3, r3, #31
 802209a:	b087      	sub	sp, #28
 802209c:	bf18      	it	ne
 802209e:	3604      	addne	r6, #4
 80220a0:	2500      	movs	r5, #0
 80220a2:	1f37      	subs	r7, r6, #4
 80220a4:	4682      	mov	sl, r0
 80220a6:	4690      	mov	r8, r2
 80220a8:	9301      	str	r3, [sp, #4]
 80220aa:	f846 5c04 	str.w	r5, [r6, #-4]
 80220ae:	46b9      	mov	r9, r7
 80220b0:	463c      	mov	r4, r7
 80220b2:	9502      	str	r5, [sp, #8]
 80220b4:	46ab      	mov	fp, r5
 80220b6:	784a      	ldrb	r2, [r1, #1]
 80220b8:	1c4b      	adds	r3, r1, #1
 80220ba:	9303      	str	r3, [sp, #12]
 80220bc:	b342      	cbz	r2, 8022110 <__hexnan+0x88>
 80220be:	4610      	mov	r0, r2
 80220c0:	9105      	str	r1, [sp, #20]
 80220c2:	9204      	str	r2, [sp, #16]
 80220c4:	f7ff fd95 	bl	8021bf2 <__hexdig_fun>
 80220c8:	2800      	cmp	r0, #0
 80220ca:	d151      	bne.n	8022170 <__hexnan+0xe8>
 80220cc:	9a04      	ldr	r2, [sp, #16]
 80220ce:	9905      	ldr	r1, [sp, #20]
 80220d0:	2a20      	cmp	r2, #32
 80220d2:	d818      	bhi.n	8022106 <__hexnan+0x7e>
 80220d4:	9b02      	ldr	r3, [sp, #8]
 80220d6:	459b      	cmp	fp, r3
 80220d8:	dd13      	ble.n	8022102 <__hexnan+0x7a>
 80220da:	454c      	cmp	r4, r9
 80220dc:	d206      	bcs.n	80220ec <__hexnan+0x64>
 80220de:	2d07      	cmp	r5, #7
 80220e0:	dc04      	bgt.n	80220ec <__hexnan+0x64>
 80220e2:	462a      	mov	r2, r5
 80220e4:	4649      	mov	r1, r9
 80220e6:	4620      	mov	r0, r4
 80220e8:	f7ff ffa8 	bl	802203c <L_shift>
 80220ec:	4544      	cmp	r4, r8
 80220ee:	d952      	bls.n	8022196 <__hexnan+0x10e>
 80220f0:	2300      	movs	r3, #0
 80220f2:	f1a4 0904 	sub.w	r9, r4, #4
 80220f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80220fa:	f8cd b008 	str.w	fp, [sp, #8]
 80220fe:	464c      	mov	r4, r9
 8022100:	461d      	mov	r5, r3
 8022102:	9903      	ldr	r1, [sp, #12]
 8022104:	e7d7      	b.n	80220b6 <__hexnan+0x2e>
 8022106:	2a29      	cmp	r2, #41	@ 0x29
 8022108:	d157      	bne.n	80221ba <__hexnan+0x132>
 802210a:	3102      	adds	r1, #2
 802210c:	f8ca 1000 	str.w	r1, [sl]
 8022110:	f1bb 0f00 	cmp.w	fp, #0
 8022114:	d051      	beq.n	80221ba <__hexnan+0x132>
 8022116:	454c      	cmp	r4, r9
 8022118:	d206      	bcs.n	8022128 <__hexnan+0xa0>
 802211a:	2d07      	cmp	r5, #7
 802211c:	dc04      	bgt.n	8022128 <__hexnan+0xa0>
 802211e:	462a      	mov	r2, r5
 8022120:	4649      	mov	r1, r9
 8022122:	4620      	mov	r0, r4
 8022124:	f7ff ff8a 	bl	802203c <L_shift>
 8022128:	4544      	cmp	r4, r8
 802212a:	d936      	bls.n	802219a <__hexnan+0x112>
 802212c:	f1a8 0204 	sub.w	r2, r8, #4
 8022130:	4623      	mov	r3, r4
 8022132:	f853 1b04 	ldr.w	r1, [r3], #4
 8022136:	f842 1f04 	str.w	r1, [r2, #4]!
 802213a:	429f      	cmp	r7, r3
 802213c:	d2f9      	bcs.n	8022132 <__hexnan+0xaa>
 802213e:	1b3b      	subs	r3, r7, r4
 8022140:	f023 0303 	bic.w	r3, r3, #3
 8022144:	3304      	adds	r3, #4
 8022146:	3401      	adds	r4, #1
 8022148:	3e03      	subs	r6, #3
 802214a:	42b4      	cmp	r4, r6
 802214c:	bf88      	it	hi
 802214e:	2304      	movhi	r3, #4
 8022150:	4443      	add	r3, r8
 8022152:	2200      	movs	r2, #0
 8022154:	f843 2b04 	str.w	r2, [r3], #4
 8022158:	429f      	cmp	r7, r3
 802215a:	d2fb      	bcs.n	8022154 <__hexnan+0xcc>
 802215c:	683b      	ldr	r3, [r7, #0]
 802215e:	b91b      	cbnz	r3, 8022168 <__hexnan+0xe0>
 8022160:	4547      	cmp	r7, r8
 8022162:	d128      	bne.n	80221b6 <__hexnan+0x12e>
 8022164:	2301      	movs	r3, #1
 8022166:	603b      	str	r3, [r7, #0]
 8022168:	2005      	movs	r0, #5
 802216a:	b007      	add	sp, #28
 802216c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022170:	3501      	adds	r5, #1
 8022172:	2d08      	cmp	r5, #8
 8022174:	f10b 0b01 	add.w	fp, fp, #1
 8022178:	dd06      	ble.n	8022188 <__hexnan+0x100>
 802217a:	4544      	cmp	r4, r8
 802217c:	d9c1      	bls.n	8022102 <__hexnan+0x7a>
 802217e:	2300      	movs	r3, #0
 8022180:	f844 3c04 	str.w	r3, [r4, #-4]
 8022184:	2501      	movs	r5, #1
 8022186:	3c04      	subs	r4, #4
 8022188:	6822      	ldr	r2, [r4, #0]
 802218a:	f000 000f 	and.w	r0, r0, #15
 802218e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8022192:	6020      	str	r0, [r4, #0]
 8022194:	e7b5      	b.n	8022102 <__hexnan+0x7a>
 8022196:	2508      	movs	r5, #8
 8022198:	e7b3      	b.n	8022102 <__hexnan+0x7a>
 802219a:	9b01      	ldr	r3, [sp, #4]
 802219c:	2b00      	cmp	r3, #0
 802219e:	d0dd      	beq.n	802215c <__hexnan+0xd4>
 80221a0:	f1c3 0320 	rsb	r3, r3, #32
 80221a4:	f04f 32ff 	mov.w	r2, #4294967295
 80221a8:	40da      	lsrs	r2, r3
 80221aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80221ae:	4013      	ands	r3, r2
 80221b0:	f846 3c04 	str.w	r3, [r6, #-4]
 80221b4:	e7d2      	b.n	802215c <__hexnan+0xd4>
 80221b6:	3f04      	subs	r7, #4
 80221b8:	e7d0      	b.n	802215c <__hexnan+0xd4>
 80221ba:	2004      	movs	r0, #4
 80221bc:	e7d5      	b.n	802216a <__hexnan+0xe2>

080221be <__ascii_mbtowc>:
 80221be:	b082      	sub	sp, #8
 80221c0:	b901      	cbnz	r1, 80221c4 <__ascii_mbtowc+0x6>
 80221c2:	a901      	add	r1, sp, #4
 80221c4:	b142      	cbz	r2, 80221d8 <__ascii_mbtowc+0x1a>
 80221c6:	b14b      	cbz	r3, 80221dc <__ascii_mbtowc+0x1e>
 80221c8:	7813      	ldrb	r3, [r2, #0]
 80221ca:	600b      	str	r3, [r1, #0]
 80221cc:	7812      	ldrb	r2, [r2, #0]
 80221ce:	1e10      	subs	r0, r2, #0
 80221d0:	bf18      	it	ne
 80221d2:	2001      	movne	r0, #1
 80221d4:	b002      	add	sp, #8
 80221d6:	4770      	bx	lr
 80221d8:	4610      	mov	r0, r2
 80221da:	e7fb      	b.n	80221d4 <__ascii_mbtowc+0x16>
 80221dc:	f06f 0001 	mvn.w	r0, #1
 80221e0:	e7f8      	b.n	80221d4 <__ascii_mbtowc+0x16>

080221e2 <_realloc_r>:
 80221e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80221e6:	4680      	mov	r8, r0
 80221e8:	4615      	mov	r5, r2
 80221ea:	460c      	mov	r4, r1
 80221ec:	b921      	cbnz	r1, 80221f8 <_realloc_r+0x16>
 80221ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80221f2:	4611      	mov	r1, r2
 80221f4:	f7fb bbaa 	b.w	801d94c <_malloc_r>
 80221f8:	b92a      	cbnz	r2, 8022206 <_realloc_r+0x24>
 80221fa:	f7fd fd91 	bl	801fd20 <_free_r>
 80221fe:	2400      	movs	r4, #0
 8022200:	4620      	mov	r0, r4
 8022202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022206:	f000 f86b 	bl	80222e0 <_malloc_usable_size_r>
 802220a:	4285      	cmp	r5, r0
 802220c:	4606      	mov	r6, r0
 802220e:	d802      	bhi.n	8022216 <_realloc_r+0x34>
 8022210:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8022214:	d8f4      	bhi.n	8022200 <_realloc_r+0x1e>
 8022216:	4629      	mov	r1, r5
 8022218:	4640      	mov	r0, r8
 802221a:	f7fb fb97 	bl	801d94c <_malloc_r>
 802221e:	4607      	mov	r7, r0
 8022220:	2800      	cmp	r0, #0
 8022222:	d0ec      	beq.n	80221fe <_realloc_r+0x1c>
 8022224:	42b5      	cmp	r5, r6
 8022226:	462a      	mov	r2, r5
 8022228:	4621      	mov	r1, r4
 802222a:	bf28      	it	cs
 802222c:	4632      	movcs	r2, r6
 802222e:	f7fc fef8 	bl	801f022 <memcpy>
 8022232:	4621      	mov	r1, r4
 8022234:	4640      	mov	r0, r8
 8022236:	f7fd fd73 	bl	801fd20 <_free_r>
 802223a:	463c      	mov	r4, r7
 802223c:	e7e0      	b.n	8022200 <_realloc_r+0x1e>

0802223e <__ascii_wctomb>:
 802223e:	4603      	mov	r3, r0
 8022240:	4608      	mov	r0, r1
 8022242:	b141      	cbz	r1, 8022256 <__ascii_wctomb+0x18>
 8022244:	2aff      	cmp	r2, #255	@ 0xff
 8022246:	d904      	bls.n	8022252 <__ascii_wctomb+0x14>
 8022248:	228a      	movs	r2, #138	@ 0x8a
 802224a:	601a      	str	r2, [r3, #0]
 802224c:	f04f 30ff 	mov.w	r0, #4294967295
 8022250:	4770      	bx	lr
 8022252:	700a      	strb	r2, [r1, #0]
 8022254:	2001      	movs	r0, #1
 8022256:	4770      	bx	lr

08022258 <_raise_r>:
 8022258:	291f      	cmp	r1, #31
 802225a:	b538      	push	{r3, r4, r5, lr}
 802225c:	4605      	mov	r5, r0
 802225e:	460c      	mov	r4, r1
 8022260:	d904      	bls.n	802226c <_raise_r+0x14>
 8022262:	2316      	movs	r3, #22
 8022264:	6003      	str	r3, [r0, #0]
 8022266:	f04f 30ff 	mov.w	r0, #4294967295
 802226a:	bd38      	pop	{r3, r4, r5, pc}
 802226c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802226e:	b112      	cbz	r2, 8022276 <_raise_r+0x1e>
 8022270:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022274:	b94b      	cbnz	r3, 802228a <_raise_r+0x32>
 8022276:	4628      	mov	r0, r5
 8022278:	f000 f830 	bl	80222dc <_getpid_r>
 802227c:	4622      	mov	r2, r4
 802227e:	4601      	mov	r1, r0
 8022280:	4628      	mov	r0, r5
 8022282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022286:	f000 b817 	b.w	80222b8 <_kill_r>
 802228a:	2b01      	cmp	r3, #1
 802228c:	d00a      	beq.n	80222a4 <_raise_r+0x4c>
 802228e:	1c59      	adds	r1, r3, #1
 8022290:	d103      	bne.n	802229a <_raise_r+0x42>
 8022292:	2316      	movs	r3, #22
 8022294:	6003      	str	r3, [r0, #0]
 8022296:	2001      	movs	r0, #1
 8022298:	e7e7      	b.n	802226a <_raise_r+0x12>
 802229a:	2100      	movs	r1, #0
 802229c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80222a0:	4620      	mov	r0, r4
 80222a2:	4798      	blx	r3
 80222a4:	2000      	movs	r0, #0
 80222a6:	e7e0      	b.n	802226a <_raise_r+0x12>

080222a8 <raise>:
 80222a8:	4b02      	ldr	r3, [pc, #8]	@ (80222b4 <raise+0xc>)
 80222aa:	4601      	mov	r1, r0
 80222ac:	6818      	ldr	r0, [r3, #0]
 80222ae:	f7ff bfd3 	b.w	8022258 <_raise_r>
 80222b2:	bf00      	nop
 80222b4:	20000148 	.word	0x20000148

080222b8 <_kill_r>:
 80222b8:	b538      	push	{r3, r4, r5, lr}
 80222ba:	4d07      	ldr	r5, [pc, #28]	@ (80222d8 <_kill_r+0x20>)
 80222bc:	2300      	movs	r3, #0
 80222be:	4604      	mov	r4, r0
 80222c0:	4608      	mov	r0, r1
 80222c2:	4611      	mov	r1, r2
 80222c4:	602b      	str	r3, [r5, #0]
 80222c6:	f7e1 fe23 	bl	8003f10 <_kill>
 80222ca:	1c43      	adds	r3, r0, #1
 80222cc:	d102      	bne.n	80222d4 <_kill_r+0x1c>
 80222ce:	682b      	ldr	r3, [r5, #0]
 80222d0:	b103      	cbz	r3, 80222d4 <_kill_r+0x1c>
 80222d2:	6023      	str	r3, [r4, #0]
 80222d4:	bd38      	pop	{r3, r4, r5, pc}
 80222d6:	bf00      	nop
 80222d8:	200037ac 	.word	0x200037ac

080222dc <_getpid_r>:
 80222dc:	f7e1 be10 	b.w	8003f00 <_getpid>

080222e0 <_malloc_usable_size_r>:
 80222e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80222e4:	1f18      	subs	r0, r3, #4
 80222e6:	2b00      	cmp	r3, #0
 80222e8:	bfbc      	itt	lt
 80222ea:	580b      	ldrlt	r3, [r1, r0]
 80222ec:	18c0      	addlt	r0, r0, r3
 80222ee:	4770      	bx	lr

080222f0 <_init>:
 80222f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80222f2:	bf00      	nop
 80222f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80222f6:	bc08      	pop	{r3}
 80222f8:	469e      	mov	lr, r3
 80222fa:	4770      	bx	lr

080222fc <_fini>:
 80222fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80222fe:	bf00      	nop
 8022300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022302:	bc08      	pop	{r3}
 8022304:	469e      	mov	lr, r3
 8022306:	4770      	bx	lr
