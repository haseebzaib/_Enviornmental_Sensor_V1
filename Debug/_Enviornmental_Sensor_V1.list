
_Enviornmental_Sensor_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e100  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002310  0801e2a0  0801e2a0  0002e2a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080205b0  080205b0  00040314  2**0
                  CONTENTS
  4 .ARM          00000008  080205b0  080205b0  000305b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080205b8  080205b8  00040314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080205b8  080205b8  000305b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080205bc  080205bc  000305bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000314  20000000  080205c0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000226c  20000314  080208d4  00040314  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002580  080208d4  00042580  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040314  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037277  00000000  00000000  00040344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000808a  00000000  00000000  000775bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002d78  00000000  00000000  0007f648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002a38  00000000  00000000  000823c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025773  00000000  00000000  00084df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003e60d  00000000  00000000  000aa56b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b326f  00000000  00000000  000e8b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019bde7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d4a4  00000000  00000000  0019be38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000314 	.word	0x20000314
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801e288 	.word	0x0801e288

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000318 	.word	0x20000318
 80001dc:	0801e288 	.word	0x0801e288

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <pir_interrupt>:
uint32_t usb_time_ = 50000;
uint32_t prev_usb_time_ = 0;


//##############Interrupts###############
void pir_interrupt() {
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	debug_pir_motion = 1;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <pir_interrupt+0x2c>)
 800102e:	2201      	movs	r2, #1
 8001030:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 8001032:	2101      	movs	r1, #1
 8001034:	4808      	ldr	r0, [pc, #32]	; (8001058 <pir_interrupt+0x30>)
 8001036:	f003 fa3b 	bl	80044b0 <HAL_GPIO_ReadPin>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <pir_interrupt+0x20>
		pir_motion_flag = 1;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <pir_interrupt+0x34>)
 8001042:	2201      	movs	r2, #1
 8001044:	701a      	strb	r2, [r3, #0]
	}
	else {
		pir_motion_flag = 0;
	}
}
 8001046:	e002      	b.n	800104e <pir_interrupt+0x26>
		pir_motion_flag = 0;
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <pir_interrupt+0x34>)
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000511 	.word	0x20000511
 8001058:	40020000 	.word	0x40020000
 800105c:	20000510 	.word	0x20000510

08001060 <timer_interrupt>:


void timer_interrupt() {
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	time_keep = time_keep + 1;
 8001064:	4b09      	ldr	r3, [pc, #36]	; (800108c <timer_interrupt+0x2c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	3301      	adds	r3, #1
 800106a:	4a08      	ldr	r2, [pc, #32]	; (800108c <timer_interrupt+0x2c>)
 800106c:	6013      	str	r3, [r2, #0]
	if (time_keep > 65535) {
 800106e:	4b07      	ldr	r3, [pc, #28]	; (800108c <timer_interrupt+0x2c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001076:	d302      	bcc.n	800107e <timer_interrupt+0x1e>
		time_keep = 0;
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <timer_interrupt+0x2c>)
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
//
//	if(!save_param && !start_usb_timer)//if both are off and for some reason timer is still on we shut it down
//	{
//		HAL_TIM_Base_Stop_IT(&htim2);
//	}
	prev_sleep_time = HAL_GetTick();
 800107e:	f001 fdfd 	bl	8002c7c <HAL_GetTick>
 8001082:	4603      	mov	r3, r0
 8001084:	4a02      	ldr	r2, [pc, #8]	; (8001090 <timer_interrupt+0x30>)
 8001086:	6013      	str	r3, [r2, #0]
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000504 	.word	0x20000504
 8001090:	20000748 	.word	0x20000748

08001094 <clock_speed_slow>:

/*
 * setting clock speed to 250khz
 */
static void clock_speed_slow()
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b094      	sub	sp, #80	; 0x50
 8001098:	af00      	add	r7, sp, #0
//
//	/* Disable PLL */
//	RCC->CR &= ~RCC_CR_PLLON;

	//we will set clock speed to 250khz
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109a:	f107 0320 	add.w	r3, r7, #32
 800109e:	2230      	movs	r2, #48	; 0x30
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f018 fb52 	bl	801974c <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 80010b8:	2300      	movs	r3, #0
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	4b24      	ldr	r3, [pc, #144]	; (8001150 <clock_speed_slow+0xbc>)
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	4a23      	ldr	r2, [pc, #140]	; (8001150 <clock_speed_slow+0xbc>)
 80010c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c6:	6413      	str	r3, [r2, #64]	; 0x40
 80010c8:	4b21      	ldr	r3, [pc, #132]	; (8001150 <clock_speed_slow+0xbc>)
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010d4:	2300      	movs	r3, #0
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <clock_speed_slow+0xc0>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010e0:	4a1c      	ldr	r2, [pc, #112]	; (8001154 <clock_speed_slow+0xc0>)
 80010e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <clock_speed_slow+0xc0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80010f4:	2306      	movs	r3, #6
 80010f6:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010f8:	2301      	movs	r3, #1
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010fc:	2301      	movs	r3, #1
 80010fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001100:	2310      	movs	r3, #16
 8001102:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001104:	2300      	movs	r3, #0
 8001106:	63bb      	str	r3, [r7, #56]	; 0x38
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001108:	f107 0320 	add.w	r3, r7, #32
 800110c:	4618      	mov	r0, r3
 800110e:	f005 fe3f 	bl	8006d90 <HAL_RCC_OscConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <clock_speed_slow+0x88>
	  {
	    Error_Handler();
 8001118:	f001 f940 	bl	800239c <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111c:	230f      	movs	r3, #15
 800111e:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001120:	2300      	movs	r3, #0
 8001122:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV64;
 8001124:	23c0      	movs	r3, #192	; 0xc0
 8001126:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001128:	2300      	movs	r3, #0
 800112a:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f006 f8a2 	bl	8007280 <HAL_RCC_ClockConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <clock_speed_slow+0xb2>
	  {
	    Error_Handler();
 8001142:	f001 f92b 	bl	800239c <Error_Handler>
	  }


}
 8001146:	bf00      	nop
 8001148:	3750      	adds	r7, #80	; 0x50
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40023800 	.word	0x40023800
 8001154:	40007000 	.word	0x40007000

08001158 <clock_speed_high>:

/**
 * setting clock speed to 84Mhz
 */
static void clock_speed_high()
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b094      	sub	sp, #80	; 0x50
 800115c:	af00      	add	r7, sp, #0
	//we will set clock speed to 84Mhz
	uint16_t timeout;

	/* Enable HSI clock */
	RCC->CR |= RCC_CR_HSION;
 800115e:	4b45      	ldr	r3, [pc, #276]	; (8001274 <clock_speed_high+0x11c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a44      	ldr	r2, [pc, #272]	; (8001274 <clock_speed_high+0x11c>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6013      	str	r3, [r2, #0]

	/* Wait till HSI is ready */
	timeout = 0xFFFF;
 800116a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800116e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	while (!(RCC->CR & RCC_CR_HSIRDY) && timeout--);
 8001172:	bf00      	nop
 8001174:	4b3f      	ldr	r3, [pc, #252]	; (8001274 <clock_speed_high+0x11c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d106      	bne.n	800118e <clock_speed_high+0x36>
 8001180:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001184:	1e5a      	subs	r2, r3, #1
 8001186:	f8a7 204e 	strh.w	r2, [r7, #78]	; 0x4e
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1f2      	bne.n	8001174 <clock_speed_high+0x1c>

	/* Select HSI clock as main clock */
	RCC->CFGR = (RCC->CFGR & ~(RCC_CFGR_SW)) | RCC_CFGR_SW_HSI;
 800118e:	4b39      	ldr	r3, [pc, #228]	; (8001274 <clock_speed_high+0x11c>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	4a38      	ldr	r2, [pc, #224]	; (8001274 <clock_speed_high+0x11c>)
 8001194:	f023 0303 	bic.w	r3, r3, #3
 8001198:	6093      	str	r3, [r2, #8]

	/* Disable PLL */
	RCC->CR &= ~RCC_CR_PLLON;
 800119a:	4b36      	ldr	r3, [pc, #216]	; (8001274 <clock_speed_high+0x11c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a35      	ldr	r2, [pc, #212]	; (8001274 <clock_speed_high+0x11c>)
 80011a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011a4:	6013      	str	r3, [r2, #0]

	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	2230      	movs	r2, #48	; 0x30
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f018 facc 	bl	801974c <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b4:	f107 0308 	add.w	r3, r7, #8
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 80011c4:	2300      	movs	r3, #0
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	4b2a      	ldr	r3, [pc, #168]	; (8001274 <clock_speed_high+0x11c>)
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	4a29      	ldr	r2, [pc, #164]	; (8001274 <clock_speed_high+0x11c>)
 80011ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d2:	6413      	str	r3, [r2, #64]	; 0x40
 80011d4:	4b27      	ldr	r3, [pc, #156]	; (8001274 <clock_speed_high+0x11c>)
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	687b      	ldr	r3, [r7, #4]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011e0:	2300      	movs	r3, #0
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	4b24      	ldr	r3, [pc, #144]	; (8001278 <clock_speed_high+0x120>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011ec:	4a22      	ldr	r2, [pc, #136]	; (8001278 <clock_speed_high+0x120>)
 80011ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	4b20      	ldr	r3, [pc, #128]	; (8001278 <clock_speed_high+0x120>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011fc:	603b      	str	r3, [r7, #0]
 80011fe:	683b      	ldr	r3, [r7, #0]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001200:	2305      	movs	r3, #5
 8001202:	61fb      	str	r3, [r7, #28]
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001204:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001208:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800120a:	2301      	movs	r3, #1
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800120e:	2302      	movs	r3, #2
 8001210:	637b      	str	r3, [r7, #52]	; 0x34
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001212:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001216:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLM = 25;
 8001218:	2319      	movs	r3, #25
 800121a:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLN = 336;
 800121c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001220:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001222:	2304      	movs	r3, #4
 8001224:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001226:	2307      	movs	r3, #7
 8001228:	64bb      	str	r3, [r7, #72]	; 0x48
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800122a:	f107 031c 	add.w	r3, r7, #28
 800122e:	4618      	mov	r0, r3
 8001230:	f005 fdae 	bl	8006d90 <HAL_RCC_OscConfig>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <clock_speed_high+0xe6>
	  {
	    Error_Handler();
 800123a:	f001 f8af 	bl	800239c <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800123e:	230f      	movs	r3, #15
 8001240:	60bb      	str	r3, [r7, #8]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001242:	2302      	movs	r3, #2
 8001244:	60fb      	str	r3, [r7, #12]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800124a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124e:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001250:	2300      	movs	r3, #0
 8001252:	61bb      	str	r3, [r7, #24]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001254:	f107 0308 	add.w	r3, r7, #8
 8001258:	2102      	movs	r1, #2
 800125a:	4618      	mov	r0, r3
 800125c:	f006 f810 	bl	8007280 <HAL_RCC_ClockConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <clock_speed_high+0x112>
	  {
	    Error_Handler();
 8001266:	f001 f899 	bl	800239c <Error_Handler>
	  }



}
 800126a:	bf00      	nop
 800126c:	3750      	adds	r7, #80	; 0x50
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800
 8001278:	40007000 	.word	0x40007000

0800127c <load_param>:
/*
 * we check if there is anything stored inside internal flash
 * if nothing in available then we store our default values
 * else we take the values stroed inside the flash
 */
static void load_param() {
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0

	Flash_Packet *ipFlaPar;
	ipFlaPar = (Flash_Packet*) Address_Mem;
 8001282:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <load_param+0x78>)
 8001284:	607b      	str	r3, [r7, #4]

	if (ipFlaPar->valid_pattern == m_Flash_Packet.valid_pattern) // 1. Sentence, pattern valid ?
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f8b3 3195 	ldrh.w	r3, [r3, #405]	; 0x195
 800128c:	b29b      	uxth	r3, r3
 800128e:	f44f 52c2 	mov.w	r2, #6208	; 0x1840
 8001292:	4293      	cmp	r3, r2
 8001294:	d109      	bne.n	80012aa <load_param+0x2e>
			{
		memcpy(&_Flash_Packet, ipFlaPar, sizeof(Flash_Packet));
 8001296:	4a18      	ldr	r2, [pc, #96]	; (80012f8 <load_param+0x7c>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	f240 1397 	movw	r3, #407	; 0x197
 80012a2:	461a      	mov	r2, r3
 80012a4:	f018 fa2a 	bl	80196fc <memcpy>
 80012a8:	e008      	b.n	80012bc <load_param+0x40>
	}

	else //load default param
	{
		memcpy(&_Flash_Packet, &m_Flash_Packet, sizeof(Flash_Packet));
 80012aa:	4a13      	ldr	r2, [pc, #76]	; (80012f8 <load_param+0x7c>)
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <load_param+0x80>)
 80012ae:	4610      	mov	r0, r2
 80012b0:	4619      	mov	r1, r3
 80012b2:	f240 1397 	movw	r3, #407	; 0x197
 80012b6:	461a      	mov	r2, r3
 80012b8:	f018 fa20 	bl	80196fc <memcpy>
	}

	if(strstr(_Flash_Packet.File_Format, ".CSV"))
 80012bc:	4910      	ldr	r1, [pc, #64]	; (8001300 <load_param+0x84>)
 80012be:	4811      	ldr	r0, [pc, #68]	; (8001304 <load_param+0x88>)
 80012c0:	f019 fa7f 	bl	801a7c2 <strstr>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d004      	beq.n	80012d4 <load_param+0x58>
	{
		_RunTime_Packet.fileformat_selection = 1;
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <load_param+0x8c>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	{
		_RunTime_Packet.fileformat_selection = 0;
	}


}
 80012d2:	e00a      	b.n	80012ea <load_param+0x6e>
	else if(strstr(_Flash_Packet.File_Format, ".JSON"))
 80012d4:	490d      	ldr	r1, [pc, #52]	; (800130c <load_param+0x90>)
 80012d6:	480b      	ldr	r0, [pc, #44]	; (8001304 <load_param+0x88>)
 80012d8:	f019 fa73 	bl	801a7c2 <strstr>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <load_param+0x6e>
		_RunTime_Packet.fileformat_selection = 0;
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <load_param+0x8c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	08060000 	.word	0x08060000
 80012f8:	20000330 	.word	0x20000330
 80012fc:	0801fa70 	.word	0x0801fa70
 8001300:	0801e2a0 	.word	0x0801e2a0
 8001304:	20000394 	.word	0x20000394
 8001308:	200004c8 	.word	0x200004c8
 800130c:	0801e2a8 	.word	0x0801e2a8

08001310 <store_param>:

/*
 * we store the whole structure inside the internal flash
 */
static uint32_t store_param() {
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001316:	b672      	cpsid	i
}
 8001318:	bf00      	nop
	__disable_irq();

	uint32_t ZielAdr;
	uint32_t WrAdr;
	uint32_t QuellAdr = (uint32_t) &_Flash_Packet;
 800131a:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <store_param+0xc0>)
 800131c:	60bb      	str	r3, [r7, #8]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 800131e:	f002 fbbf 	bl	8003aa0 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001322:	4b2c      	ldr	r3, [pc, #176]	; (80013d4 <store_param+0xc4>)
 8001324:	2201      	movs	r2, #1
 8001326:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001328:	4b2a      	ldr	r3, [pc, #168]	; (80013d4 <store_param+0xc4>)
 800132a:	2202      	movs	r2, #2
 800132c:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800132e:	4b29      	ldr	r3, [pc, #164]	; (80013d4 <store_param+0xc4>)
 8001330:	2210      	movs	r2, #16
 8001332:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001334:	4b27      	ldr	r3, [pc, #156]	; (80013d4 <store_param+0xc4>)
 8001336:	2220      	movs	r2, #32
 8001338:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800133a:	4b26      	ldr	r3, [pc, #152]	; (80013d4 <store_param+0xc4>)
 800133c:	2240      	movs	r2, #64	; 0x40
 800133e:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001340:	4b24      	ldr	r3, [pc, #144]	; (80013d4 <store_param+0xc4>)
 8001342:	2280      	movs	r2, #128	; 0x80
 8001344:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001346:	4b23      	ldr	r3, [pc, #140]	; (80013d4 <store_param+0xc4>)
 8001348:	f44f 7280 	mov.w	r2, #256	; 0x100
 800134c:	60da      	str	r2, [r3, #12]

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800134e:	4b22      	ldr	r3, [pc, #136]	; (80013d8 <store_param+0xc8>)
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001354:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <store_param+0xc8>)
 8001356:	2202      	movs	r2, #2
 8001358:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector = FLASH_SECTOR_7;
 800135a:	4b1f      	ldr	r3, [pc, #124]	; (80013d8 <store_param+0xc8>)
 800135c:	2207      	movs	r2, #7
 800135e:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors = 1;
 8001360:	4b1d      	ldr	r3, [pc, #116]	; (80013d8 <store_param+0xc8>)
 8001362:	2201      	movs	r2, #1
 8001364:	60da      	str	r2, [r3, #12]

	/* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	 you have to make sure that these data are rewritten before they are accessed during code
	 execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	 DCRST and ICRST bits in the FLASH_CR register. */
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) {
 8001366:	463b      	mov	r3, r7
 8001368:	4619      	mov	r1, r3
 800136a:	481b      	ldr	r0, [pc, #108]	; (80013d8 <store_param+0xc8>)
 800136c:	f002 fd16 	bl	8003d9c <HAL_FLASHEx_Erase>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <store_param+0x6e>
		return HAL_FLASH_GetError();
 8001376:	f002 fbc5 	bl	8003b04 <HAL_FLASH_GetError>
 800137a:	4603      	mov	r3, r0
 800137c:	e024      	b.n	80013c8 <store_param+0xb8>
	}



	ZielAdr = Address_Mem + sizeof(Flash_Packet); /* - FLASH_DOUBLE_SIZE))*/
 800137e:	4b17      	ldr	r3, [pc, #92]	; (80013dc <store_param+0xcc>)
 8001380:	607b      	str	r3, [r7, #4]
	WrAdr = Address_Mem; // Pointer on 1st entry
 8001382:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <store_param+0xd0>)
 8001384:	60fb      	str	r3, [r7, #12]

	while (WrAdr < ZielAdr) {
 8001386:	e016      	b.n	80013b6 <store_param+0xa6>

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, WrAdr,
				*(uint64_t*) QuellAdr) == HAL_OK)
 8001388:	68bb      	ldr	r3, [r7, #8]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, WrAdr,
 800138a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138e:	68f9      	ldr	r1, [r7, #12]
 8001390:	2002      	movs	r0, #2
 8001392:	f002 fb31 	bl	80039f8 <HAL_FLASH_Program>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d106      	bne.n	80013aa <store_param+0x9a>

		{
			WrAdr += 4;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3304      	adds	r3, #4
 80013a0:	60fb      	str	r3, [r7, #12]
			QuellAdr += 4;
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	3304      	adds	r3, #4
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	e005      	b.n	80013b6 <store_param+0xa6>

		} else {

			HAL_FLASH_Lock();
 80013aa:	f002 fb9b 	bl	8003ae4 <HAL_FLASH_Lock>
			return HAL_FLASH_GetError();
 80013ae:	f002 fba9 	bl	8003b04 <HAL_FLASH_GetError>
 80013b2:	4603      	mov	r3, r0
 80013b4:	e008      	b.n	80013c8 <store_param+0xb8>
	while (WrAdr < ZielAdr) {
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d3e4      	bcc.n	8001388 <store_param+0x78>

		}

	}
	HAL_FLASH_Lock();
 80013be:	f002 fb91 	bl	8003ae4 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 80013c2:	b662      	cpsie	i
}
 80013c4:	bf00      	nop
//	if(start_usb_timer)
//	{
//		HAL_TIM_Base_Start_IT(&htim2);
//	}

	return 0;
 80013c6:	2300      	movs	r3, #0

}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000330 	.word	0x20000330
 80013d4:	40023c00 	.word	0x40023c00
 80013d8:	20000764 	.word	0x20000764
 80013dc:	08060197 	.word	0x08060197
 80013e0:	08060000 	.word	0x08060000

080013e4 <save_data>:
/*
 * This is to save data in internal flash. when user change something that needs to be saved in flash for future use
 * we wait for 30seconds, so in this time if user also changes something else we write to flash at once then
 */
static void save_data() {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
	if (save_param) {
 80013e8:	4b14      	ldr	r3, [pc, #80]	; (800143c <save_data+0x58>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d022      	beq.n	8001436 <save_data+0x52>
		if (start_timer) {
 80013f0:	4b13      	ldr	r3, [pc, #76]	; (8001440 <save_data+0x5c>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00b      	beq.n	8001410 <save_data+0x2c>
			HAL_TIM_Base_Stop_IT(&htim2);
 80013f8:	4812      	ldr	r0, [pc, #72]	; (8001444 <save_data+0x60>)
 80013fa:	f007 ff2f 	bl	800925c <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Start_IT(&htim2);
 80013fe:	4811      	ldr	r0, [pc, #68]	; (8001444 <save_data+0x60>)
 8001400:	f007 feca 	bl	8009198 <HAL_TIM_Base_Start_IT>
			time_keep = 0;
 8001404:	4b10      	ldr	r3, [pc, #64]	; (8001448 <save_data+0x64>)
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
			start_timer = 0;
 800140a:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <save_data+0x5c>)
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
		}

		if (time_keep >= 300) //save after 30secs when data occur happens
 8001410:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <save_data+0x64>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001418:	d30d      	bcc.n	8001436 <save_data+0x52>
				{
			//if(!start_usb_timer) //if usb timer is on dont stop timer as usb will stop itself when its operation will end
			//{
			  HAL_TIM_Base_Stop_IT(&htim2);
 800141a:	480a      	ldr	r0, [pc, #40]	; (8001444 <save_data+0x60>)
 800141c:	f007 ff1e 	bl	800925c <HAL_TIM_Base_Stop_IT>
			//}
			store_param();
 8001420:	f7ff ff76 	bl	8001310 <store_param>
			time_keep = 0;
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <save_data+0x64>)
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
			save_param = 0;
 800142a:	4b04      	ldr	r3, [pc, #16]	; (800143c <save_data+0x58>)
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]
			start_timer = 0;
 8001430:	4b03      	ldr	r3, [pc, #12]	; (8001440 <save_data+0x5c>)
 8001432:	2200      	movs	r2, #0
 8001434:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000501 	.word	0x20000501
 8001440:	20000502 	.word	0x20000502
 8001444:	200008b8 	.word	0x200008b8
 8001448:	20000504 	.word	0x20000504

0800144c <init_scd4x_i2c>:
static void init_scd4x_i2c() {
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
	int16_t error = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	80fb      	strh	r3, [r7, #6]
	sensirion_i2c_hal_init();
 8001456:	f00f fd15 	bl	8010e84 <sensirion_i2c_hal_init>
	scd4x_wake_up();
 800145a:	f00f fbc5 	bl	8010be8 <scd4x_wake_up>
	error = scd4x_stop_periodic_measurement();
 800145e:	f00f fa5d 	bl	801091c <scd4x_stop_periodic_measurement>
 8001462:	4603      	mov	r3, r0
 8001464:	80fb      	strh	r3, [r7, #6]
	scd4x_reinit();
 8001466:	f00f fb73 	bl	8010b50 <scd4x_reinit>
	uint16_t serial_0;
	uint16_t serial_1;
	uint16_t serial_2;
	error = scd4x_get_serial_number(&serial_0, &serial_1, &serial_2);
 800146a:	463a      	mov	r2, r7
 800146c:	1cb9      	adds	r1, r7, #2
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	4618      	mov	r0, r3
 8001472:	f00f fb15 	bl	8010aa0 <scd4x_get_serial_number>
 8001476:	4603      	mov	r3, r0
 8001478:	80fb      	strh	r3, [r7, #6]

}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <get_scd4x_measurement>:
static void get_scd4x_measurement() {
 8001484:	b580      	push	{r7, lr}
 8001486:	b090      	sub	sp, #64	; 0x40
 8001488:	af02      	add	r7, sp, #8
	int16_t error = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	86fb      	strh	r3, [r7, #54]	; 0x36

	error = scd4x_start_periodic_measurement();
 800148e:	f00f f995 	bl	80107bc <scd4x_start_periodic_measurement>
 8001492:	4603      	mov	r3, r0
 8001494:	86fb      	strh	r3, [r7, #54]	; 0x36
	sensirion_i2c_hal_sleep_usec(100000);
 8001496:	483e      	ldr	r0, [pc, #248]	; (8001590 <get_scd4x_measurement+0x10c>)
 8001498:	f00f fd6a 	bl	8010f70 <sensirion_i2c_hal_sleep_usec>
	bool data_ready_flag = false;
 800149c:	2300      	movs	r3, #0
 800149e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	error = scd4x_get_data_ready_flag(&data_ready_flag);
 80014a2:	f107 0335 	add.w	r3, r7, #53	; 0x35
 80014a6:	4618      	mov	r0, r3
 80014a8:	f00f faae 	bl	8010a08 <scd4x_get_data_ready_flag>
 80014ac:	4603      	mov	r3, r0
 80014ae:	86fb      	strh	r3, [r7, #54]	; 0x36

	if (data_ready_flag) {
 80014b0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d066      	beq.n	8001586 <get_scd4x_measurement+0x102>
		error = scd4x_read_measurement(&_RunTime_Packet.co2, &_RunTime_Packet.temperature, &_RunTime_Packet.humidity);
 80014b8:	4a36      	ldr	r2, [pc, #216]	; (8001594 <get_scd4x_measurement+0x110>)
 80014ba:	4937      	ldr	r1, [pc, #220]	; (8001598 <get_scd4x_measurement+0x114>)
 80014bc:	4837      	ldr	r0, [pc, #220]	; (800159c <get_scd4x_measurement+0x118>)
 80014be:	f00f f9fb 	bl	80108b8 <scd4x_read_measurement>
 80014c2:	4603      	mov	r3, r0
 80014c4:	86fb      	strh	r3, [r7, #54]	; 0x36
		_RunTime_Packet.temperature = _RunTime_Packet.temperature / 1000;
 80014c6:	4b35      	ldr	r3, [pc, #212]	; (800159c <get_scd4x_measurement+0x118>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	4a35      	ldr	r2, [pc, #212]	; (80015a0 <get_scd4x_measurement+0x11c>)
 80014cc:	fb82 1203 	smull	r1, r2, r2, r3
 80014d0:	1192      	asrs	r2, r2, #6
 80014d2:	17db      	asrs	r3, r3, #31
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	4a31      	ldr	r2, [pc, #196]	; (800159c <get_scd4x_measurement+0x118>)
 80014d8:	6053      	str	r3, [r2, #4]
		_RunTime_Packet.humidity = _RunTime_Packet.humidity / 1000;
 80014da:	4b30      	ldr	r3, [pc, #192]	; (800159c <get_scd4x_measurement+0x118>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	4a30      	ldr	r2, [pc, #192]	; (80015a0 <get_scd4x_measurement+0x11c>)
 80014e0:	fb82 1203 	smull	r1, r2, r2, r3
 80014e4:	1192      	asrs	r2, r2, #6
 80014e6:	17db      	asrs	r3, r3, #31
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	4a2c      	ldr	r2, [pc, #176]	; (800159c <get_scd4x_measurement+0x118>)
 80014ec:	6093      	str	r3, [r2, #8]

		if (debug_scd_pm) {
 80014ee:	4b2d      	ldr	r3, [pc, #180]	; (80015a4 <get_scd4x_measurement+0x120>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d047      	beq.n	8001586 <get_scd4x_measurement+0x102>
			char buf[50];
			if (error) {
 80014f6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d013      	beq.n	8001526 <get_scd4x_measurement+0xa2>
				sprintf(buf, "Error executing scd4x_read_measurement(): %i\n",
 80014fe:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8001502:	463b      	mov	r3, r7
 8001504:	4928      	ldr	r1, [pc, #160]	; (80015a8 <get_scd4x_measurement+0x124>)
 8001506:	4618      	mov	r0, r3
 8001508:	f019 f926 	bl	801a758 <siprintf>
						error);
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 800150c:	463b      	mov	r3, r7
 800150e:	4618      	mov	r0, r3
 8001510:	f7fe fe70 	bl	80001f4 <strlen>
 8001514:	4603      	mov	r3, r0
 8001516:	b29a      	uxth	r2, r3
 8001518:	4639      	mov	r1, r7
 800151a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151e:	4823      	ldr	r0, [pc, #140]	; (80015ac <get_scd4x_measurement+0x128>)
 8001520:	f008 fada 	bl	8009ad8 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
			}
		}
	}
	//error = scd4x_stop_periodic_measurement();
}
 8001524:	e02f      	b.n	8001586 <get_scd4x_measurement+0x102>
			} else if (_RunTime_Packet.co2 == 0) {
 8001526:	4b1d      	ldr	r3, [pc, #116]	; (800159c <get_scd4x_measurement+0x118>)
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d111      	bne.n	8001552 <get_scd4x_measurement+0xce>
				sprintf(buf, "Invalid sample detected, skipping.\n");
 800152e:	463b      	mov	r3, r7
 8001530:	491f      	ldr	r1, [pc, #124]	; (80015b0 <get_scd4x_measurement+0x12c>)
 8001532:	4618      	mov	r0, r3
 8001534:	f019 f910 	bl	801a758 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 8001538:	463b      	mov	r3, r7
 800153a:	4618      	mov	r0, r3
 800153c:	f7fe fe5a 	bl	80001f4 <strlen>
 8001540:	4603      	mov	r3, r0
 8001542:	b29a      	uxth	r2, r3
 8001544:	4639      	mov	r1, r7
 8001546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800154a:	4818      	ldr	r0, [pc, #96]	; (80015ac <get_scd4x_measurement+0x128>)
 800154c:	f008 fac4 	bl	8009ad8 <HAL_UART_Transmit>
}
 8001550:	e019      	b.n	8001586 <get_scd4x_measurement+0x102>
						_RunTime_Packet.co2, _RunTime_Packet.temperature, _RunTime_Packet.humidity);
 8001552:	4b12      	ldr	r3, [pc, #72]	; (800159c <get_scd4x_measurement+0x118>)
 8001554:	881b      	ldrh	r3, [r3, #0]
				sprintf(buf,
 8001556:	4619      	mov	r1, r3
 8001558:	4b10      	ldr	r3, [pc, #64]	; (800159c <get_scd4x_measurement+0x118>)
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	4b0f      	ldr	r3, [pc, #60]	; (800159c <get_scd4x_measurement+0x118>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	4638      	mov	r0, r7
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	4613      	mov	r3, r2
 8001566:	460a      	mov	r2, r1
 8001568:	4912      	ldr	r1, [pc, #72]	; (80015b4 <get_scd4x_measurement+0x130>)
 800156a:	f019 f8f5 	bl	801a758 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 800156e:	463b      	mov	r3, r7
 8001570:	4618      	mov	r0, r3
 8001572:	f7fe fe3f 	bl	80001f4 <strlen>
 8001576:	4603      	mov	r3, r0
 8001578:	b29a      	uxth	r2, r3
 800157a:	4639      	mov	r1, r7
 800157c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001580:	480a      	ldr	r0, [pc, #40]	; (80015ac <get_scd4x_measurement+0x128>)
 8001582:	f008 faa9 	bl	8009ad8 <HAL_UART_Transmit>
}
 8001586:	bf00      	nop
 8001588:	3738      	adds	r7, #56	; 0x38
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	000186a0 	.word	0x000186a0
 8001594:	200004d0 	.word	0x200004d0
 8001598:	200004cc 	.word	0x200004cc
 800159c:	200004c8 	.word	0x200004c8
 80015a0:	10624dd3 	.word	0x10624dd3
 80015a4:	20000500 	.word	0x20000500
 80015a8:	0801e2b0 	.word	0x0801e2b0
 80015ac:	20000900 	.word	0x20000900
 80015b0:	0801e2e0 	.word	0x0801e2e0
 80015b4:	0801e304 	.word	0x0801e304

080015b8 <init_sps30>:
static void init_sps30()
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08c      	sub	sp, #48	; 0x30
 80015bc:	af00      	add	r7, sp, #0
	char serial[SPS30_MAX_SERIAL_LEN];
	const uint8_t AUTO_CLEAN_DAYS = 4;
 80015be:	2304      	movs	r3, #4
 80015c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	int16_t ret;
	sensirion_sleep_usec(1000000); /* sleep for 1s */
 80015c4:	480a      	ldr	r0, [pc, #40]	; (80015f0 <init_sps30+0x38>)
 80015c6:	f010 f8e9 	bl	801179c <sensirion_sleep_usec>

	sensirion_uart_open();
 80015ca:	f010 f831 	bl	8011630 <sensirion_uart_open>


	//printf("SPS30 sensor probing successful\r\n");

	struct sps30_version_information version_information;
	ret = sps30_read_version(&version_information);
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	4618      	mov	r0, r3
 80015d2:	f010 fa23 	bl	8011a1c <sps30_read_version>
 80015d6:	4603      	mov	r3, r0
 80015d8:	85bb      	strh	r3, [r7, #44]	; 0x2c
//				version_information.hardware_revision,
//				version_information.shdlc_major,
//				version_information.shdlc_minor);
	}

	ret = sps30_get_serial(serial);
 80015da:	f107 030c 	add.w	r3, r7, #12
 80015de:	4618      	mov	r0, r3
 80015e0:	f010 f8f0 	bl	80117c4 <sps30_get_serial>
 80015e4:	4603      	mov	r3, r0
 80015e6:	85bb      	strh	r3, [r7, #44]	; 0x2c
//	{
//		//printf("error %d setting the auto-clean interval\r\n", ret);
//	}


}
 80015e8:	bf00      	nop
 80015ea:	3730      	adds	r7, #48	; 0x30
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	000f4240 	.word	0x000f4240

080015f4 <get_sps30_measurement>:
static void get_sps30_measurement()
{
 80015f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015f8:	b0a0      	sub	sp, #128	; 0x80
 80015fa:	af06      	add	r7, sp, #24

	int16_t ret;
	char buffer[100];
	ret = sps30_start_measurement();
 80015fc:	f010 f90e 	bl	801181c <sps30_start_measurement>
 8001600:	4603      	mov	r3, r0
 8001602:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
//			sprintf(buffer,"error starting measurement\r\n");
//			HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);

		}

			ret = sps30_read_measurement(&m);
 8001606:	483a      	ldr	r0, [pc, #232]	; (80016f0 <get_sps30_measurement+0xfc>)
 8001608:	f010 f934 	bl	8011874 <sps30_read_measurement>
 800160c:	4603      	mov	r3, r0
 800160e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			 _RunTime_Packet.pm1_0 = 	m.mc_1p0;
 8001612:	4b37      	ldr	r3, [pc, #220]	; (80016f0 <get_sps30_measurement+0xfc>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a37      	ldr	r2, [pc, #220]	; (80016f4 <get_sps30_measurement+0x100>)
 8001618:	6113      	str	r3, [r2, #16]
			_RunTime_Packet.pm2_5 = 	m.mc_2p5 ;
 800161a:	4b35      	ldr	r3, [pc, #212]	; (80016f0 <get_sps30_measurement+0xfc>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	4a35      	ldr	r2, [pc, #212]	; (80016f4 <get_sps30_measurement+0x100>)
 8001620:	6153      	str	r3, [r2, #20]
			_RunTime_Packet.pm4_0 = 	m.mc_4p0;
 8001622:	4b33      	ldr	r3, [pc, #204]	; (80016f0 <get_sps30_measurement+0xfc>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	4a33      	ldr	r2, [pc, #204]	; (80016f4 <get_sps30_measurement+0x100>)
 8001628:	6193      	str	r3, [r2, #24]
			 _RunTime_Packet.pm10_0 = 	m.mc_10p0;
 800162a:	4b31      	ldr	r3, [pc, #196]	; (80016f0 <get_sps30_measurement+0xfc>)
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	4a31      	ldr	r2, [pc, #196]	; (80016f4 <get_sps30_measurement+0x100>)
 8001630:	61d3      	str	r3, [r2, #28]

			if (ret < 0) {
 8001632:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8001636:	2b00      	cmp	r3, #0
 8001638:	db54      	blt.n	80016e4 <get_sps30_measurement+0xf0>
//				printf("error reading measurement\r\n");
//				HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
//				}

			} else {
				if (debug_scd_pm) {
 800163a:	4b2f      	ldr	r3, [pc, #188]	; (80016f8 <get_sps30_measurement+0x104>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d050      	beq.n	80016e4 <get_sps30_measurement+0xf0>
				if (SPS30_IS_ERR_STATE(ret)) {
 8001642:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001646:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 800164a:	b21b      	sxth	r3, r3
 800164c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001650:	4293      	cmp	r3, r2
 8001652:	d113      	bne.n	800167c <get_sps30_measurement+0x88>
					sprintf(buffer,
 8001654:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001658:	b2da      	uxtb	r2, r3
 800165a:	463b      	mov	r3, r7
 800165c:	4927      	ldr	r1, [pc, #156]	; (80016fc <get_sps30_measurement+0x108>)
 800165e:	4618      	mov	r0, r3
 8001660:	f019 f87a 	bl	801a758 <siprintf>
							"Chip state: %u - measurements may not be accurate\r\n",
							SPS30_GET_ERR_STATE(ret));
					HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8001664:	463b      	mov	r3, r7
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe fdc4 	bl	80001f4 <strlen>
 800166c:	4603      	mov	r3, r0
 800166e:	b29a      	uxth	r2, r3
 8001670:	4639      	mov	r1, r7
 8001672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001676:	4822      	ldr	r0, [pc, #136]	; (8001700 <get_sps30_measurement+0x10c>)
 8001678:	f008 fa2e 	bl	8009ad8 <HAL_UART_Transmit>
				}
				sprintf(buffer,"%0.2f pm1.0\r\n%0.2f pm2.5\r\n%0.2f pm4.0\r\n%0.2f pm10.0\r\n"
					 , m.mc_1p0,
 800167c:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <get_sps30_measurement+0xfc>)
 800167e:	681b      	ldr	r3, [r3, #0]
				sprintf(buffer,"%0.2f pm1.0\r\n%0.2f pm2.5\r\n%0.2f pm4.0\r\n%0.2f pm10.0\r\n"
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe ff79 	bl	8000578 <__aeabi_f2d>
 8001686:	4682      	mov	sl, r0
 8001688:	468b      	mov	fp, r1
						m.mc_2p5, m.mc_4p0, m.mc_10p0);
 800168a:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <get_sps30_measurement+0xfc>)
 800168c:	685b      	ldr	r3, [r3, #4]
				sprintf(buffer,"%0.2f pm1.0\r\n%0.2f pm2.5\r\n%0.2f pm4.0\r\n%0.2f pm10.0\r\n"
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe ff72 	bl	8000578 <__aeabi_f2d>
 8001694:	4604      	mov	r4, r0
 8001696:	460d      	mov	r5, r1
						m.mc_2p5, m.mc_4p0, m.mc_10p0);
 8001698:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <get_sps30_measurement+0xfc>)
 800169a:	689b      	ldr	r3, [r3, #8]
				sprintf(buffer,"%0.2f pm1.0\r\n%0.2f pm2.5\r\n%0.2f pm4.0\r\n%0.2f pm10.0\r\n"
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe ff6b 	bl	8000578 <__aeabi_f2d>
 80016a2:	4680      	mov	r8, r0
 80016a4:	4689      	mov	r9, r1
						m.mc_2p5, m.mc_4p0, m.mc_10p0);
 80016a6:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <get_sps30_measurement+0xfc>)
 80016a8:	68db      	ldr	r3, [r3, #12]
				sprintf(buffer,"%0.2f pm1.0\r\n%0.2f pm2.5\r\n%0.2f pm4.0\r\n%0.2f pm10.0\r\n"
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe ff64 	bl	8000578 <__aeabi_f2d>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4638      	mov	r0, r7
 80016b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80016ba:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80016be:	e9cd 4500 	strd	r4, r5, [sp]
 80016c2:	4652      	mov	r2, sl
 80016c4:	465b      	mov	r3, fp
 80016c6:	490f      	ldr	r1, [pc, #60]	; (8001704 <get_sps30_measurement+0x110>)
 80016c8:	f019 f846 	bl	801a758 <siprintf>


				HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 80016cc:	463b      	mov	r3, r7
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe fd90 	bl	80001f4 <strlen>
 80016d4:	4603      	mov	r3, r0
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	4639      	mov	r1, r7
 80016da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016de:	4808      	ldr	r0, [pc, #32]	; (8001700 <get_sps30_measurement+0x10c>)
 80016e0:	f008 f9fa 	bl	8009ad8 <HAL_UART_Transmit>
				}
			}

	//	ret =	sps30_stop_measurement();

}
 80016e4:	bf00      	nop
 80016e6:	3768      	adds	r7, #104	; 0x68
 80016e8:	46bd      	mov	sp, r7
 80016ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016ee:	bf00      	nop
 80016f0:	20000720 	.word	0x20000720
 80016f4:	200004c8 	.word	0x200004c8
 80016f8:	20000500 	.word	0x20000500
 80016fc:	0801e334 	.word	0x0801e334
 8001700:	20000900 	.word	0x20000900
 8001704:	0801e368 	.word	0x0801e368

08001708 <check_peripheral_error>:
static void check_peripheral_error()
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
	if(_RunTime_Packet.console_uart_error)
 800170c:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <check_peripheral_error+0x70>)
 800170e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001712:	2b00      	cmp	r3, #0
 8001714:	d005      	beq.n	8001722 <check_peripheral_error+0x1a>
	{
				_RunTime_Packet.console_uart_error = 0; //we clear it and reset the peripherals
 8001716:	4b18      	ldr	r3, [pc, #96]	; (8001778 <check_peripheral_error+0x70>)
 8001718:	2200      	movs	r2, #0
 800171a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				console_uart_init();
 800171e:	f00d f979 	bl	800ea14 <console_uart_init>
	}

	if(_RunTime_Packet.sps30_uart_error)
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <check_peripheral_error+0x70>)
 8001724:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001728:	2b00      	cmp	r3, #0
 800172a:	d015      	beq.n	8001758 <check_peripheral_error+0x50>
	{
		_RunTime_Packet.sps30_uart_error = 0;
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <check_peripheral_error+0x70>)
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		disable_5v();
 8001734:	2200      	movs	r2, #0
 8001736:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800173a:	4810      	ldr	r0, [pc, #64]	; (800177c <check_peripheral_error+0x74>)
 800173c:	f002 fed0 	bl	80044e0 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8001740:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001744:	f001 faa6 	bl	8002c94 <HAL_Delay>
		enable_5v();
 8001748:	2201      	movs	r2, #1
 800174a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800174e:	480b      	ldr	r0, [pc, #44]	; (800177c <check_peripheral_error+0x74>)
 8001750:	f002 fec6 	bl	80044e0 <HAL_GPIO_WritePin>
		init_sps30();
 8001754:	f7ff ff30 	bl	80015b8 <init_sps30>
	}

	 if (HAL_I2C_IsDeviceReady (&hi2c1,(uint16_t)(0x62 << 1), 5, 100) != HAL_OK)
 8001758:	2364      	movs	r3, #100	; 0x64
 800175a:	2205      	movs	r2, #5
 800175c:	21c4      	movs	r1, #196	; 0xc4
 800175e:	4808      	ldr	r0, [pc, #32]	; (8001780 <check_peripheral_error+0x78>)
 8001760:	f003 fb88 	bl	8004e74 <HAL_I2C_IsDeviceReady>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <check_peripheral_error+0x6a>
	    {

         _RunTime_Packet.scd4x_i2c_error = 1;
 800176a:	4b03      	ldr	r3, [pc, #12]	; (8001778 <check_peripheral_error+0x70>)
 800176c:	2201      	movs	r2, #1
 800176e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	    }


}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	200004c8 	.word	0x200004c8
 800177c:	40020400 	.word	0x40020400
 8001780:	200007c0 	.word	0x200007c0

08001784 <sensor_calibration>:
static void sensor_calibration()
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
	if(_RunTime_Packet.PM_calibration &&  !_RunTime_Packet.usb_detection)
 8001788:	4b10      	ldr	r3, [pc, #64]	; (80017cc <sensor_calibration+0x48>)
 800178a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00b      	beq.n	80017aa <sensor_calibration+0x26>
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <sensor_calibration+0x48>)
 8001794:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001798:	2b00      	cmp	r3, #0
 800179a:	d106      	bne.n	80017aa <sensor_calibration+0x26>
	{
		_RunTime_Packet.PM_calibration = 0;
 800179c:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <sensor_calibration+0x48>)
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		sps30_set_fan_auto_cleaning_interval_days(4);
 80017a4:	2004      	movs	r0, #4
 80017a6:	f010 f925 	bl	80119f4 <sps30_set_fan_auto_cleaning_interval_days>
	}

	if(_RunTime_Packet.CO2_calibration)
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <sensor_calibration+0x48>)
 80017ac:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d009      	beq.n	80017c8 <sensor_calibration+0x44>
	{
		_RunTime_Packet.CO2_calibration = 0;
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <sensor_calibration+0x48>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		scd4x_perform_forced_recalibration(_RunTime_Packet._target_co2_concentration,&_RunTime_Packet._frc_correction);
 80017bc:	4b03      	ldr	r3, [pc, #12]	; (80017cc <sensor_calibration+0x48>)
 80017be:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80017c0:	4903      	ldr	r1, [pc, #12]	; (80017d0 <sensor_calibration+0x4c>)
 80017c2:	4618      	mov	r0, r3
 80017c4:	f00f f8d2 	bl	801096c <scd4x_perform_forced_recalibration>
	}
}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	200004c8 	.word	0x200004c8
 80017d0:	200004fe 	.word	0x200004fe

080017d4 <sleep>:
static void sleep()
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0

//save stuff to sd card right here then go to sleep

HAL_ADC_DeInit(&hadc1);
 80017d8:	4816      	ldr	r0, [pc, #88]	; (8001834 <sleep+0x60>)
 80017da:	f001 fb06 	bl	8002dea <HAL_ADC_DeInit>
	HAL_UART_Transmit(&huart1, (uint8_t*) "sleepTime\r\n",11, 1000);
 80017de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e2:	220b      	movs	r2, #11
 80017e4:	4914      	ldr	r1, [pc, #80]	; (8001838 <sleep+0x64>)
 80017e6:	4815      	ldr	r0, [pc, #84]	; (800183c <sleep+0x68>)
 80017e8:	f008 f976 	bl	8009ad8 <HAL_UART_Transmit>
	disable_5v();
 80017ec:	2200      	movs	r2, #0
 80017ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017f2:	4813      	ldr	r0, [pc, #76]	; (8001840 <sleep+0x6c>)
 80017f4:	f002 fe74 	bl	80044e0 <HAL_GPIO_WritePin>
	disable_motion();
 80017f8:	2201      	movs	r2, #1
 80017fa:	2102      	movs	r1, #2
 80017fc:	4811      	ldr	r0, [pc, #68]	; (8001844 <sleep+0x70>)
 80017fe:	f002 fe6f 	bl	80044e0 <HAL_GPIO_WritePin>
	scd4x_stop_periodic_measurement();
 8001802:	f00f f88b 	bl	801091c <scd4x_stop_periodic_measurement>
	scd4x_power_down();
 8001806:	f00f f9c9 	bl	8010b9c <scd4x_power_down>
console_uart_deinit();
 800180a:	f00d f8f7 	bl	800e9fc <console_uart_deinit>
sensirion_i2c_hal_free();
 800180e:	f00f fb6b 	bl	8010ee8 <sensirion_i2c_hal_free>
sensirion_uart_close();
 8001812:	f00f ff4d 	bl	80116b0 <sensirion_uart_close>
MX_USB_DEVICE_DeInit();
 8001816:	f017 f941 	bl	8018a9c <MX_USB_DEVICE_DeInit>


HAL_TIM_Base_DeInit(&htim2);
 800181a:	480b      	ldr	r0, [pc, #44]	; (8001848 <sleep+0x74>)
 800181c:	f007 fc67 	bl	80090ee <HAL_TIM_Base_DeInit>


clock_speed_slow();
 8001820:	f7ff fc38 	bl	8001094 <clock_speed_slow>

HAL_SuspendTick();
 8001824:	f001 fa5a 	bl	8002cdc <HAL_SuspendTick>
/*## Enter Stop Mode #######################################################*/
HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001828:	2101      	movs	r1, #1
 800182a:	2001      	movs	r0, #1
 800182c:	f005 fa84 	bl	8006d38 <HAL_PWR_EnterSTOPMode>




}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000778 	.word	0x20000778
 8001838:	0801e3a0 	.word	0x0801e3a0
 800183c:	20000900 	.word	0x20000900
 8001840:	40020400 	.word	0x40020400
 8001844:	40020000 	.word	0x40020000
 8001848:	200008b8 	.word	0x200008b8

0800184c <wakeup>:
static void wakeup()
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0

	//also add usb stuff

	HAL_ResumeTick();
 8001850:	f001 fa54 	bl	8002cfc <HAL_ResumeTick>
	clock_speed_high();
 8001854:	f7ff fc80 	bl	8001158 <clock_speed_high>
	enable_5v();
 8001858:	2201      	movs	r2, #1
 800185a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800185e:	481a      	ldr	r0, [pc, #104]	; (80018c8 <wakeup+0x7c>)
 8001860:	f002 fe3e 	bl	80044e0 <HAL_GPIO_WritePin>
	enable_motion();
 8001864:	2200      	movs	r2, #0
 8001866:	2102      	movs	r1, #2
 8001868:	4818      	ldr	r0, [pc, #96]	; (80018cc <wakeup+0x80>)
 800186a:	f002 fe39 	bl	80044e0 <HAL_GPIO_WritePin>
	console_uart_init();
 800186e:	f00d f8d1 	bl	800ea14 <console_uart_init>
	MX_TIM2_Init();
 8001872:	f000 fbaf 	bl	8001fd4 <MX_TIM2_Init>
	init_scd4x_i2c();
 8001876:	f7ff fde9 	bl	800144c <init_scd4x_i2c>
	 MX_USB_DEVICE_Init(); //initialize usb anyways
 800187a:	f017 f921 	bl	8018ac0 <MX_USB_DEVICE_Init>
	if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 800187e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001882:	4812      	ldr	r0, [pc, #72]	; (80018cc <wakeup+0x80>)
 8001884:	f002 fe14 	bl	80044b0 <HAL_GPIO_ReadPin>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d102      	bne.n	8001894 <wakeup+0x48>
	init_sps30();
 800188e:	f7ff fe93 	bl	80015b8 <init_sps30>
 8001892:	e00f      	b.n	80018b4 <wakeup+0x68>
	}
	else
	{
        _RunTime_Packet.usb_detection = 1;
 8001894:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <wakeup+0x84>)
 8001896:	2201      	movs	r2, #1
 8001898:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        _RunTime_Packet.usb_start_timer = 1;
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <wakeup+0x84>)
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        usb_time_keep = 0;
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <wakeup+0x88>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
        prev_usb_time_ = HAL_GetTick();
 80018aa:	f001 f9e7 	bl	8002c7c <HAL_GetTick>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4a09      	ldr	r2, [pc, #36]	; (80018d8 <wakeup+0x8c>)
 80018b2:	6013      	str	r3, [r2, #0]
	}
	HAL_UART_Transmit(&huart1, (uint8_t*) "wakeTime\r\n",10, 1000);
 80018b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018b8:	220a      	movs	r2, #10
 80018ba:	4908      	ldr	r1, [pc, #32]	; (80018dc <wakeup+0x90>)
 80018bc:	4808      	ldr	r0, [pc, #32]	; (80018e0 <wakeup+0x94>)
 80018be:	f008 f90b 	bl	8009ad8 <HAL_UART_Transmit>
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40020400 	.word	0x40020400
 80018cc:	40020000 	.word	0x40020000
 80018d0:	200004c8 	.word	0x200004c8
 80018d4:	2000050c 	.word	0x2000050c
 80018d8:	20000750 	.word	0x20000750
 80018dc:	0801e3ac 	.word	0x0801e3ac
 80018e0:	20000900 	.word	0x20000900

080018e4 <ver_GetUid>:

static uint8_t sUid[13];	//12-bit asci

//unique ID from MCU
char *ver_GetUid(void)
{
 80018e4:	b590      	push	{r4, r7, lr}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
uint32_t iWafer;

	iWafer = HAL_GetUIDw1() & 0x00FFul;
 80018ea:	f001 fa23 	bl	8002d34 <HAL_GetUIDw1>
 80018ee:	4603      	mov	r3, r0
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	607b      	str	r3, [r7, #4]
	// 7 lot numbers are already in ASCII
	*(uint32_t *)(&sUid[0]) = HAL_GetUIDw1() >> 8;
 80018f4:	f001 fa1e 	bl	8002d34 <HAL_GetUIDw1>
 80018f8:	4603      	mov	r3, r0
 80018fa:	4a1d      	ldr	r2, [pc, #116]	; (8001970 <ver_GetUid+0x8c>)
 80018fc:	0a1b      	lsrs	r3, r3, #8
 80018fe:	6013      	str	r3, [r2, #0]
	*(uint32_t *)(&sUid[3]) = HAL_GetUIDw2();
 8001900:	4c1c      	ldr	r4, [pc, #112]	; (8001974 <ver_GetUid+0x90>)
 8001902:	f001 fa23 	bl	8002d4c <HAL_GetUIDw2>
 8001906:	4603      	mov	r3, r0
 8001908:	6023      	str	r3, [r4, #0]


	// Convert wafer number to 1 ASCII character
	if (iWafer >= 36)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b23      	cmp	r3, #35	; 0x23
 800190e:	d909      	bls.n	8001924 <ver_GetUid+0x40>
		sUid[7] = (iWafer >= 62) ? 'z' : ('a' + (iWafer - 36));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b3d      	cmp	r3, #61	; 0x3d
 8001914:	bf28      	it	cs
 8001916:	233d      	movcs	r3, #61	; 0x3d
 8001918:	b2db      	uxtb	r3, r3
 800191a:	333d      	adds	r3, #61	; 0x3d
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4b14      	ldr	r3, [pc, #80]	; (8001970 <ver_GetUid+0x8c>)
 8001920:	71da      	strb	r2, [r3, #7]
 8001922:	e00b      	b.n	800193c <ver_GetUid+0x58>
	// Display with 10 + 26 + 26 symbols
	else
		sUid[7] = ((iWafer >= 10) ? 'A' : '0') + iWafer;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b09      	cmp	r3, #9
 8001928:	d901      	bls.n	800192e <ver_GetUid+0x4a>
 800192a:	2241      	movs	r2, #65	; 0x41
 800192c:	e000      	b.n	8001930 <ver_GetUid+0x4c>
 800192e:	2230      	movs	r2, #48	; 0x30
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	b2db      	uxtb	r3, r3
 8001934:	4413      	add	r3, r2
 8001936:	b2da      	uxtb	r2, r3
 8001938:	4b0d      	ldr	r3, [pc, #52]	; (8001970 <ver_GetUid+0x8c>)
 800193a:	71da      	strb	r2, [r3, #7]

	// Convert X and Y to 4 ASCII-HEX
	CharToHexasc(&sUid[8], (HAL_GetUIDw0() >> 16) & 0x00FFul);
 800193c:	f001 f9ee 	bl	8002d1c <HAL_GetUIDw0>
 8001940:	4603      	mov	r3, r0
 8001942:	0c1b      	lsrs	r3, r3, #16
 8001944:	b2db      	uxtb	r3, r3
 8001946:	4619      	mov	r1, r3
 8001948:	480b      	ldr	r0, [pc, #44]	; (8001978 <ver_GetUid+0x94>)
 800194a:	f00e fe19 	bl	8010580 <CharToHexasc>
	CharToHexasc(&sUid[10], HAL_GetUIDw0() & 0x00FFul);
 800194e:	f001 f9e5 	bl	8002d1c <HAL_GetUIDw0>
 8001952:	4603      	mov	r3, r0
 8001954:	b2db      	uxtb	r3, r3
 8001956:	4619      	mov	r1, r3
 8001958:	4808      	ldr	r0, [pc, #32]	; (800197c <ver_GetUid+0x98>)
 800195a:	f00e fe11 	bl	8010580 <CharToHexasc>
	sUid[12] = 0;
 800195e:	4b04      	ldr	r3, [pc, #16]	; (8001970 <ver_GetUid+0x8c>)
 8001960:	2200      	movs	r2, #0
 8001962:	731a      	strb	r2, [r3, #12]
	return((char *) sUid);
 8001964:	4b02      	ldr	r3, [pc, #8]	; (8001970 <ver_GetUid+0x8c>)
}
 8001966:	4618      	mov	r0, r3
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	bd90      	pop	{r4, r7, pc}
 800196e:	bf00      	nop
 8001970:	20000754 	.word	0x20000754
 8001974:	20000757 	.word	0x20000757
 8001978:	2000075c 	.word	0x2000075c
 800197c:	2000075e 	.word	0x2000075e

08001980 <app_main>:


void app_main() {
 8001980:	b580      	push	{r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af00      	add	r7, sp, #0

	uint8_t stop_measurement = 1;
 8001986:	2301      	movs	r3, #1
 8001988:	77fb      	strb	r3, [r7, #31]
	memset(&_RunTime_Packet, 0, sizeof(_RunTime_Packet));
 800198a:	2238      	movs	r2, #56	; 0x38
 800198c:	2100      	movs	r1, #0
 800198e:	48ab      	ldr	r0, [pc, #684]	; (8001c3c <app_main+0x2bc>)
 8001990:	f017 fedc 	bl	801974c <memset>



	load_param();
 8001994:	f7ff fc72 	bl	800127c <load_param>



		 MX_USB_DEVICE_Init(); //initialize usb anyways
 8001998:	f017 f892 	bl	8018ac0 <MX_USB_DEVICE_Init>
		 prev_usb_time_ = HAL_GetTick();
 800199c:	f001 f96e 	bl	8002c7c <HAL_GetTick>
 80019a0:	4603      	mov	r3, r0
 80019a2:	4aa7      	ldr	r2, [pc, #668]	; (8001c40 <app_main+0x2c0>)
 80019a4:	6013      	str	r3, [r2, #0]
//
//
		 if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 80019a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019aa:	48a6      	ldr	r0, [pc, #664]	; (8001c44 <app_main+0x2c4>)
 80019ac:	f002 fd80 	bl	80044b0 <HAL_GPIO_ReadPin>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d102      	bne.n	80019bc <app_main+0x3c>
				init_sps30();
 80019b6:	f7ff fdff 	bl	80015b8 <init_sps30>
 80019ba:	e012      	b.n	80019e2 <app_main+0x62>
			}
		 else
		 {
			 _RunTime_Packet.usb_detection = 0;
 80019bc:	4b9f      	ldr	r3, [pc, #636]	; (8001c3c <app_main+0x2bc>)
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				 _RunTime_Packet.usb_first_start = 1;
 80019c4:	4b9d      	ldr	r3, [pc, #628]	; (8001c3c <app_main+0x2bc>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		        _RunTime_Packet.usb_active_disable_pm = 1;
 80019cc:	4b9b      	ldr	r3, [pc, #620]	; (8001c3c <app_main+0x2bc>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		        _RunTime_Packet.usb_start_timer = 1;
 80019d4:	4b99      	ldr	r3, [pc, #612]	; (8001c3c <app_main+0x2bc>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		        usb_time_keep = 0;
 80019dc:	4b9a      	ldr	r3, [pc, #616]	; (8001c48 <app_main+0x2c8>)
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
		 }


	//init_sps30();
	init_scd4x_i2c();
 80019e2:	f7ff fd33 	bl	800144c <init_scd4x_i2c>
	console_init();
 80019e6:	f00d f849 	bl	800ea7c <console_init>
	Rtc_set_alarm();
 80019ea:	f00e fc55 	bl	8010298 <Rtc_set_alarm>

	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 80019ee:	f107 0318 	add.w	r3, r7, #24
 80019f2:	2200      	movs	r2, #0
 80019f4:	4619      	mov	r1, r3
 80019f6:	4895      	ldr	r0, [pc, #596]	; (8001c4c <app_main+0x2cc>)
 80019f8:	f006 f902 	bl	8007c00 <HAL_RTC_GetDate>
	_RunTime_Packet.prev_day = sDate.Date;
 80019fc:	7eba      	ldrb	r2, [r7, #26]
 80019fe:	4b8f      	ldr	r3, [pc, #572]	; (8001c3c <app_main+0x2bc>)
 8001a00:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	//if this flag is -1 this means that file creation failed at the start of program because usb was connected
	//as accessing both usb and sdcard is not possible
	//therefore we will run file creation again when usb operation is completed. it takes about 30second
	//untill that 30second we wont even go to sleep as usb is connected so power is not the issue
	_RunTime_Packet.sd_file_creation = createfile(_Flash_Packet.File_Name,_Flash_Packet.File_Format);
 8001a04:	4992      	ldr	r1, [pc, #584]	; (8001c50 <app_main+0x2d0>)
 8001a06:	4893      	ldr	r0, [pc, #588]	; (8001c54 <app_main+0x2d4>)
 8001a08:	f016 ffde 	bl	80189c8 <createfile>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	461a      	mov	r2, r3
 8001a10:	4b8a      	ldr	r3, [pc, #552]	; (8001c3c <app_main+0x2bc>)
 8001a12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30




//MX_USB_DEVICE_DeInit();
HAL_UART_Transmit(&huart1, (uint8_t*) "System Has Started \r\n", 21, 200);
 8001a16:	23c8      	movs	r3, #200	; 0xc8
 8001a18:	2215      	movs	r2, #21
 8001a1a:	498f      	ldr	r1, [pc, #572]	; (8001c58 <app_main+0x2d8>)
 8001a1c:	488f      	ldr	r0, [pc, #572]	; (8001c5c <app_main+0x2dc>)
 8001a1e:	f008 f85b 	bl	8009ad8 <HAL_UART_Transmit>

	while (1) {


		prev_sleep_time = HAL_GetTick();
 8001a22:	f001 f92b 	bl	8002c7c <HAL_GetTick>
 8001a26:	4603      	mov	r3, r0
 8001a28:	4a8d      	ldr	r2, [pc, #564]	; (8001c60 <app_main+0x2e0>)
 8001a2a:	6013      	str	r3, [r2, #0]
		prev_sleep_time_pm_co2 =  HAL_GetTick();
 8001a2c:	f001 f926 	bl	8002c7c <HAL_GetTick>
 8001a30:	4603      	mov	r3, r0
 8001a32:	4a8c      	ldr	r2, [pc, #560]	; (8001c64 <app_main+0x2e4>)
 8001a34:	6013      	str	r3, [r2, #0]
		stop_measurement = 1;
 8001a36:	2301      	movs	r3, #1
 8001a38:	77fb      	strb	r3, [r7, #31]
		while(HAL_GetTick() - prev_sleep_time <= sleep_time ) //stay awake for only 1min and then sleep
 8001a3a:	e127      	b.n	8001c8c <app_main+0x30c>
		{

			if(HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is active dont go to sleep
 8001a3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a40:	4880      	ldr	r0, [pc, #512]	; (8001c44 <app_main+0x2c4>)
 8001a42:	f002 fd35 	bl	80044b0 <HAL_GPIO_ReadPin>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d004      	beq.n	8001a56 <app_main+0xd6>
			{
					prev_sleep_time = HAL_GetTick();
 8001a4c:	f001 f916 	bl	8002c7c <HAL_GetTick>
 8001a50:	4603      	mov	r3, r0
 8001a52:	4a83      	ldr	r2, [pc, #524]	; (8001c60 <app_main+0x2e0>)
 8001a54:	6013      	str	r3, [r2, #0]
				 * sometimes it does but this is the solution to solve it.

				 */

			RTC_TimeTypeDef gTime;
			HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 8001a56:	1d3b      	adds	r3, r7, #4
 8001a58:	2200      	movs	r2, #0
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	487b      	ldr	r0, [pc, #492]	; (8001c4c <app_main+0x2cc>)
 8001a5e:	f005 ffed 	bl	8007a3c <HAL_RTC_GetTime>
			RTC_DateTypeDef sDate;
			HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8001a62:	463b      	mov	r3, r7
 8001a64:	2200      	movs	r2, #0
 8001a66:	4619      	mov	r1, r3
 8001a68:	4878      	ldr	r0, [pc, #480]	; (8001c4c <app_main+0x2cc>)
 8001a6a:	f006 f8c9 	bl	8007c00 <HAL_RTC_GetDate>


if(_RunTime_Packet.prev_day != sDate.Date)
 8001a6e:	4b73      	ldr	r3, [pc, #460]	; (8001c3c <app_main+0x2bc>)
 8001a70:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8001a74:	78bb      	ldrb	r3, [r7, #2]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d007      	beq.n	8001a8a <app_main+0x10a>
{
_RunTime_Packet.day_changed = 1;
 8001a7a:	4b70      	ldr	r3, [pc, #448]	; (8001c3c <app_main+0x2bc>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
_RunTime_Packet.prev_day = sDate.Date;
 8001a82:	78ba      	ldrb	r2, [r7, #2]
 8001a84:	4b6d      	ldr	r3, [pc, #436]	; (8001c3c <app_main+0x2bc>)
 8001a86:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}



			check_peripheral_error();
 8001a8a:	f7ff fe3d 	bl	8001708 <check_peripheral_error>


//this routine is for when usb is detected
//the time calculated right now for mass storage to do its operation is about 30second but time is kept about 50sec to be on safe side
//this routine is specifically made for sps30 as for some reason sps30 uart stops working when usb is connected
			if( _RunTime_Packet.usb_detection || _RunTime_Packet.usb_first_start)
 8001a8e:	4b6b      	ldr	r3, [pc, #428]	; (8001c3c <app_main+0x2bc>)
 8001a90:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d104      	bne.n	8001aa2 <app_main+0x122>
 8001a98:	4b68      	ldr	r3, [pc, #416]	; (8001c3c <app_main+0x2bc>)
 8001a9a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d040      	beq.n	8001b24 <app_main+0x1a4>
			{


				if(_RunTime_Packet.usb_first_start)//part of old implementation not being used
 8001aa2:	4b66      	ldr	r3, [pc, #408]	; (8001c3c <app_main+0x2bc>)
 8001aa4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <app_main+0x134>
				{

	              start_usb_timer = 1;
 8001aac:	4b6e      	ldr	r3, [pc, #440]	; (8001c68 <app_main+0x2e8>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	701a      	strb	r2, [r3, #0]
 8001ab2:	e003      	b.n	8001abc <app_main+0x13c>
				}
				else
				{
				     _RunTime_Packet.usb_active_disable_pm = 1; //old implementation not being used
 8001ab4:	4b61      	ldr	r3, [pc, #388]	; (8001c3c <app_main+0x2bc>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				}

				if((HAL_GetTick() - prev_usb_time_ >= usb_time_)) //50sec has passed our usb must have initialized now
 8001abc:	f001 f8de 	bl	8002c7c <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	4b5f      	ldr	r3, [pc, #380]	; (8001c40 <app_main+0x2c0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	1ad2      	subs	r2, r2, r3
 8001ac8:	4b68      	ldr	r3, [pc, #416]	; (8001c6c <app_main+0x2ec>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d324      	bcc.n	8001b1a <app_main+0x19a>
				{
					if(_RunTime_Packet.sd_file_creation == -1 && _RunTime_Packet.usb_first_start)
 8001ad0:	4b5a      	ldr	r3, [pc, #360]	; (8001c3c <app_main+0x2bc>)
 8001ad2:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8001ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ada:	d108      	bne.n	8001aee <app_main+0x16e>
 8001adc:	4b57      	ldr	r3, [pc, #348]	; (8001c3c <app_main+0x2bc>)
 8001ade:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <app_main+0x16e>
					{
					   createfile(_Flash_Packet.File_Name,_Flash_Packet.File_Format);
 8001ae6:	495a      	ldr	r1, [pc, #360]	; (8001c50 <app_main+0x2d0>)
 8001ae8:	485a      	ldr	r0, [pc, #360]	; (8001c54 <app_main+0x2d4>)
 8001aea:	f016 ff6d 	bl	80189c8 <createfile>
					}

					_RunTime_Packet.usb_first_start = 0;
 8001aee:	4b53      	ldr	r3, [pc, #332]	; (8001c3c <app_main+0x2bc>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				    _RunTime_Packet.usb_detection = 0;
 8001af6:	4b51      	ldr	r3, [pc, #324]	; (8001c3c <app_main+0x2bc>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				    _RunTime_Packet.usb_active_disable_pm = 0;
 8001afe:	4b4f      	ldr	r3, [pc, #316]	; (8001c3c <app_main+0x2bc>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				    start_usb_timer = 0;
 8001b06:	4b58      	ldr	r3, [pc, #352]	; (8001c68 <app_main+0x2e8>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]


					init_sps30();
 8001b0c:	f7ff fd54 	bl	80015b8 <init_sps30>
	              //now as after connection of usb the 50seconds have passed now we can enable PM uart to access it

					prev_sleep_time_pm_co2 = HAL_GetTick(); //as we need to take measurements now
 8001b10:	f001 f8b4 	bl	8002c7c <HAL_GetTick>
 8001b14:	4603      	mov	r3, r0
 8001b16:	4a53      	ldr	r2, [pc, #332]	; (8001c64 <app_main+0x2e4>)
 8001b18:	6013      	str	r3, [r2, #0]
				}

				prev_sleep_time = HAL_GetTick();
 8001b1a:	f001 f8af 	bl	8002c7c <HAL_GetTick>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4a4f      	ldr	r2, [pc, #316]	; (8001c60 <app_main+0x2e0>)
 8001b22:	6013      	str	r3, [r2, #0]
			}



		console_process();
 8001b24:	f00c ff5e 	bl	800e9e4 <console_process>

		//we wont take measurement until usb_detection flag disables. this flag means usb is in operation right now.
		//reason of doing this is when usb is in operation sps30 does not work so we wait for usb operation to end and then take the readings
		while((HAL_GetTick() - prev_sleep_time_pm_co2 <= sleep_time_pm_co2) &&  !_RunTime_Packet.usb_detection && !_RunTime_Packet.usb_first_start)
 8001b28:	e00a      	b.n	8001b40 <app_main+0x1c0>
		//if(!_RunTime_Packet.usb_detection && !_RunTime_Packet.usb_first_start)
		{

		console_process(); //run console here also so user can still access it
 8001b2a:	f00c ff5b 	bl	800e9e4 <console_process>
		 if(!_RunTime_Packet.scd4x_i2c_error)
 8001b2e:	4b43      	ldr	r3, [pc, #268]	; (8001c3c <app_main+0x2bc>)
 8001b30:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <app_main+0x1bc>
		 {
			get_scd4x_measurement();
 8001b38:	f7ff fca4 	bl	8001484 <get_scd4x_measurement>
		 }

			 get_sps30_measurement();
 8001b3c:	f7ff fd5a 	bl	80015f4 <get_sps30_measurement>
		while((HAL_GetTick() - prev_sleep_time_pm_co2 <= sleep_time_pm_co2) &&  !_RunTime_Packet.usb_detection && !_RunTime_Packet.usb_first_start)
 8001b40:	f001 f89c 	bl	8002c7c <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	4b47      	ldr	r3, [pc, #284]	; (8001c64 <app_main+0x2e4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	1ad2      	subs	r2, r2, r3
 8001b4c:	4b48      	ldr	r3, [pc, #288]	; (8001c70 <app_main+0x2f0>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d809      	bhi.n	8001b68 <app_main+0x1e8>
 8001b54:	4b39      	ldr	r3, [pc, #228]	; (8001c3c <app_main+0x2bc>)
 8001b56:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d104      	bne.n	8001b68 <app_main+0x1e8>
 8001b5e:	4b37      	ldr	r3, [pc, #220]	; (8001c3c <app_main+0x2bc>)
 8001b60:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0e0      	beq.n	8001b2a <app_main+0x1aa>


		/*
		 * if user performs calibration
		 */
		sensor_calibration();
 8001b68:	f7ff fe0c 	bl	8001784 <sensor_calibration>


		//dont stop measurement if USB is detected, we keep taking measurement after interval as power is not an issue if usb is active
		if(stop_measurement &&  !_RunTime_Packet.usb_detection && !_RunTime_Packet.usb_first_start && !HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin))
 8001b6c:	7ffb      	ldrb	r3, [r7, #31]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d017      	beq.n	8001ba2 <app_main+0x222>
 8001b72:	4b32      	ldr	r3, [pc, #200]	; (8001c3c <app_main+0x2bc>)
 8001b74:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d112      	bne.n	8001ba2 <app_main+0x222>
 8001b7c:	4b2f      	ldr	r3, [pc, #188]	; (8001c3c <app_main+0x2bc>)
 8001b7e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10d      	bne.n	8001ba2 <app_main+0x222>
 8001b86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b8a:	482e      	ldr	r0, [pc, #184]	; (8001c44 <app_main+0x2c4>)
 8001b8c:	f002 fc90 	bl	80044b0 <HAL_GPIO_ReadPin>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d105      	bne.n	8001ba2 <app_main+0x222>
		{
		  scd4x_stop_periodic_measurement();
 8001b96:	f00e fec1 	bl	801091c <scd4x_stop_periodic_measurement>
		  sps30_stop_measurement();
 8001b9a:	f00f fe57 	bl	801184c <sps30_stop_measurement>
		  stop_measurement = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	77fb      	strb	r3, [r7, #31]

//if USB is active and time interval is passed then we still save into the file, but make sure usb is not working at that time otherwise sdcard wont take data
//thats why usb_Detection flag is used
//this routine is specifically to table the issue, if user keeps the usb plugged in for somereason
//because the mostly the system will save data before going to sleep. if usb cable is plugged in it wont go to sleep, but with routine we still save the data after set intervals
		if(HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin) && set_alarm_Time && !_RunTime_Packet.usb_detection)
 8001ba2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ba6:	4827      	ldr	r0, [pc, #156]	; (8001c44 <app_main+0x2c4>)
 8001ba8:	f002 fc82 	bl	80044b0 <HAL_GPIO_ReadPin>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d02e      	beq.n	8001c10 <app_main+0x290>
 8001bb2:	4b30      	ldr	r3, [pc, #192]	; (8001c74 <app_main+0x2f4>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d02a      	beq.n	8001c10 <app_main+0x290>
 8001bba:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <app_main+0x2bc>)
 8001bbc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d125      	bne.n	8001c10 <app_main+0x290>
			{
				//if day changes create new file
				//if user change filename or fileformat then also create new file with that format or name
			 if(_RunTime_Packet.day_changed || _RunTime_Packet.filename_changed || _RunTime_Packet.fileformat_changed)
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <app_main+0x2bc>)
 8001bc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d109      	bne.n	8001be2 <app_main+0x262>
 8001bce:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <app_main+0x2bc>)
 8001bd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d104      	bne.n	8001be2 <app_main+0x262>
 8001bd8:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <app_main+0x2bc>)
 8001bda:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00f      	beq.n	8001c02 <app_main+0x282>
				{
				 _RunTime_Packet.day_changed = 0;
 8001be2:	4b16      	ldr	r3, [pc, #88]	; (8001c3c <app_main+0x2bc>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				  _RunTime_Packet.filename_changed =0;
 8001bea:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <app_main+0x2bc>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				  _RunTime_Packet.fileformat_changed = 0;
 8001bf2:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <app_main+0x2bc>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				  createfile(_Flash_Packet.File_Name,_Flash_Packet.File_Format);
 8001bfa:	4915      	ldr	r1, [pc, #84]	; (8001c50 <app_main+0x2d0>)
 8001bfc:	4815      	ldr	r0, [pc, #84]	; (8001c54 <app_main+0x2d4>)
 8001bfe:	f016 fee3 	bl	80189c8 <createfile>
				}
				filesaving_process();
 8001c02:	f016 fec9 	bl	8018998 <filesaving_process>

				prev_sleep_time_pm_co2 =  HAL_GetTick(); //we also enable sensors to take reading then
 8001c06:	f001 f839 	bl	8002c7c <HAL_GetTick>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	4a15      	ldr	r2, [pc, #84]	; (8001c64 <app_main+0x2e4>)
 8001c0e:	6013      	str	r3, [r2, #0]
			}




		Rtc_set_alarm();
 8001c10:	f00e fb42 	bl	8010298 <Rtc_set_alarm>

		adc_Measure(&_RunTime_Packet.battery_voltage);
 8001c14:	4818      	ldr	r0, [pc, #96]	; (8001c78 <app_main+0x2f8>)
 8001c16:	f00e fd47 	bl	80106a8 <adc_Measure>
		save_data();
 8001c1a:	f7ff fbe3 	bl	80013e4 <save_data>

		if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 8001c1e:	2101      	movs	r1, #1
 8001c20:	4808      	ldr	r0, [pc, #32]	; (8001c44 <app_main+0x2c4>)
 8001c22:	f002 fc45 	bl	80044b0 <HAL_GPIO_ReadPin>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d029      	beq.n	8001c80 <app_main+0x300>
			_RunTime_Packet.motion_detection = 1;
 8001c2c:	4b03      	ldr	r3, [pc, #12]	; (8001c3c <app_main+0x2bc>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	731a      	strb	r2, [r3, #12]
			debug_pir_motion= 1;
 8001c32:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <app_main+0x2fc>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	701a      	strb	r2, [r3, #0]
 8001c38:	e028      	b.n	8001c8c <app_main+0x30c>
 8001c3a:	bf00      	nop
 8001c3c:	200004c8 	.word	0x200004c8
 8001c40:	20000750 	.word	0x20000750
 8001c44:	40020000 	.word	0x40020000
 8001c48:	2000050c 	.word	0x2000050c
 8001c4c:	20000814 	.word	0x20000814
 8001c50:	20000394 	.word	0x20000394
 8001c54:	20000330 	.word	0x20000330
 8001c58:	0801e3b8 	.word	0x0801e3b8
 8001c5c:	20000900 	.word	0x20000900
 8001c60:	20000748 	.word	0x20000748
 8001c64:	2000074c 	.word	0x2000074c
 8001c68:	20000508 	.word	0x20000508
 8001c6c:	20000008 	.word	0x20000008
 8001c70:	20000004 	.word	0x20000004
 8001c74:	20000025 	.word	0x20000025
 8001c78:	200004e8 	.word	0x200004e8
 8001c7c:	20000511 	.word	0x20000511
		}
		else {
			_RunTime_Packet.motion_detection = 0;
 8001c80:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <app_main+0x378>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	731a      	strb	r2, [r3, #12]
			debug_pir_motion = 1;
 8001c86:	4b1d      	ldr	r3, [pc, #116]	; (8001cfc <app_main+0x37c>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	701a      	strb	r2, [r3, #0]
		while(HAL_GetTick() - prev_sleep_time <= sleep_time ) //stay awake for only 1min and then sleep
 8001c8c:	f000 fff6 	bl	8002c7c <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <app_main+0x380>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	1ad2      	subs	r2, r2, r3
 8001c98:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <app_main+0x384>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	f67f aecd 	bls.w	8001a3c <app_main+0xbc>

	 }

		//if day changes create new file
		//if user change filename or fileformat then also create new file with that format or name
	 if(_RunTime_Packet.day_changed  || _RunTime_Packet.filename_changed || _RunTime_Packet.fileformat_changed)
 8001ca2:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <app_main+0x378>)
 8001ca4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d109      	bne.n	8001cc0 <app_main+0x340>
 8001cac:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <app_main+0x378>)
 8001cae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d104      	bne.n	8001cc0 <app_main+0x340>
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <app_main+0x378>)
 8001cb8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00f      	beq.n	8001ce0 <app_main+0x360>
		{
		 _RunTime_Packet.day_changed = 0;
 8001cc0:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <app_main+0x378>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		  _RunTime_Packet.filename_changed =0;
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <app_main+0x378>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		  _RunTime_Packet.fileformat_changed = 0;
 8001cd0:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <app_main+0x378>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		  createfile(_Flash_Packet.File_Name,_Flash_Packet.File_Format);
 8001cd8:	490b      	ldr	r1, [pc, #44]	; (8001d08 <app_main+0x388>)
 8001cda:	480c      	ldr	r0, [pc, #48]	; (8001d0c <app_main+0x38c>)
 8001cdc:	f016 fe74 	bl	80189c8 <createfile>
		}
		filesaving_process();
 8001ce0:	f016 fe5a 	bl	8018998 <filesaving_process>
		prev_sleep_time = HAL_GetTick();
 8001ce4:	f000 ffca 	bl	8002c7c <HAL_GetTick>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4a05      	ldr	r2, [pc, #20]	; (8001d00 <app_main+0x380>)
 8001cec:	6013      	str	r3, [r2, #0]
		sleep();
 8001cee:	f7ff fd71 	bl	80017d4 <sleep>
		wakeup();
 8001cf2:	f7ff fdab 	bl	800184c <wakeup>
		prev_sleep_time = HAL_GetTick();
 8001cf6:	e694      	b.n	8001a22 <app_main+0xa2>
 8001cf8:	200004c8 	.word	0x200004c8
 8001cfc:	20000511 	.word	0x20000511
 8001d00:	20000748 	.word	0x20000748
 8001d04:	20000000 	.word	0x20000000
 8001d08:	20000394 	.word	0x20000394
 8001d0c:	20000330 	.word	0x20000330

08001d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d14:	f000 ff4c 	bl	8002bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d18:	f000 f816 	bl	8001d48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//comment usb initialization from here
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d1c:	f000 f9fc 	bl	8002118 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 8001d20:	f000 f938 	bl	8001f94 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 8001d24:	f000 f9a4 	bl	8002070 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8001d28:	f000 f8fc 	bl	8001f24 <MX_RTC_Init>
  MX_I2C1_Init();
 8001d2c:	f000 f8cc 	bl	8001ec8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001d30:	f000 f950 	bl	8001fd4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001d34:	f000 f9c6 	bl	80020c4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001d38:	f000 f874 	bl	8001e24 <MX_ADC1_Init>
  //MX_USB_DEVICE_Init();
  MX_FATFS_Init();
 8001d3c:	f00e f8fc 	bl	800ff38 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  app_main(); //keep mx_usb_device_init off here
 8001d40:	f7ff fe1e 	bl	8001980 <app_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d44:	e7fe      	b.n	8001d44 <main+0x34>
	...

08001d48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b094      	sub	sp, #80	; 0x50
 8001d4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d4e:	f107 0320 	add.w	r3, r7, #32
 8001d52:	2230      	movs	r2, #48	; 0x30
 8001d54:	2100      	movs	r1, #0
 8001d56:	4618      	mov	r0, r3
 8001d58:	f017 fcf8 	bl	801974c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d5c:	f107 030c 	add.w	r3, r7, #12
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <SystemClock_Config+0xd4>)
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	4a29      	ldr	r2, [pc, #164]	; (8001e1c <SystemClock_Config+0xd4>)
 8001d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7c:	4b27      	ldr	r3, [pc, #156]	; (8001e1c <SystemClock_Config+0xd4>)
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d88:	2300      	movs	r3, #0
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	4b24      	ldr	r3, [pc, #144]	; (8001e20 <SystemClock_Config+0xd8>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d94:	4a22      	ldr	r2, [pc, #136]	; (8001e20 <SystemClock_Config+0xd8>)
 8001d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	4b20      	ldr	r3, [pc, #128]	; (8001e20 <SystemClock_Config+0xd8>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001da8:	2305      	movs	r3, #5
 8001daa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001db2:	2301      	movs	r3, #1
 8001db4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001db6:	2302      	movs	r3, #2
 8001db8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001dc0:	2319      	movs	r3, #25
 8001dc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001dc4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001dc8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001dca:	2304      	movs	r3, #4
 8001dcc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001dce:	2307      	movs	r3, #7
 8001dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dd2:	f107 0320 	add.w	r3, r7, #32
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f004 ffda 	bl	8006d90 <HAL_RCC_OscConfig>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001de2:	f000 fadb 	bl	800239c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001de6:	230f      	movs	r3, #15
 8001de8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dea:	2302      	movs	r3, #2
 8001dec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001df2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001dfc:	f107 030c 	add.w	r3, r7, #12
 8001e00:	2102      	movs	r1, #2
 8001e02:	4618      	mov	r0, r3
 8001e04:	f005 fa3c 	bl	8007280 <HAL_RCC_ClockConfig>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001e0e:	f000 fac5 	bl	800239c <Error_Handler>
  }
}
 8001e12:	bf00      	nop
 8001e14:	3750      	adds	r7, #80	; 0x50
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40007000 	.word	0x40007000

08001e24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e2a:	463b      	mov	r3, r7
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e36:	4b21      	ldr	r3, [pc, #132]	; (8001ebc <MX_ADC1_Init+0x98>)
 8001e38:	4a21      	ldr	r2, [pc, #132]	; (8001ec0 <MX_ADC1_Init+0x9c>)
 8001e3a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e3c:	4b1f      	ldr	r3, [pc, #124]	; (8001ebc <MX_ADC1_Init+0x98>)
 8001e3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e42:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e44:	4b1d      	ldr	r3, [pc, #116]	; (8001ebc <MX_ADC1_Init+0x98>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001e4a:	4b1c      	ldr	r3, [pc, #112]	; (8001ebc <MX_ADC1_Init+0x98>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e50:	4b1a      	ldr	r3, [pc, #104]	; (8001ebc <MX_ADC1_Init+0x98>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e56:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <MX_ADC1_Init+0x98>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e5e:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <MX_ADC1_Init+0x98>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e64:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <MX_ADC1_Init+0x98>)
 8001e66:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <MX_ADC1_Init+0xa0>)
 8001e68:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e6a:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <MX_ADC1_Init+0x98>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001e70:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <MX_ADC1_Init+0x98>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e76:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <MX_ADC1_Init+0x98>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e7e:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <MX_ADC1_Init+0x98>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e84:	480d      	ldr	r0, [pc, #52]	; (8001ebc <MX_ADC1_Init+0x98>)
 8001e86:	f000 ff6d 	bl	8002d64 <HAL_ADC_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001e90:	f000 fa84 	bl	800239c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001e94:	230a      	movs	r3, #10
 8001e96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ea0:	463b      	mov	r3, r7
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4805      	ldr	r0, [pc, #20]	; (8001ebc <MX_ADC1_Init+0x98>)
 8001ea6:	f001 f953 	bl	8003150 <HAL_ADC_ConfigChannel>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001eb0:	f000 fa74 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001eb4:	bf00      	nop
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20000778 	.word	0x20000778
 8001ec0:	40012000 	.word	0x40012000
 8001ec4:	0f000001 	.word	0x0f000001

08001ec8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ecc:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <MX_I2C1_Init+0x50>)
 8001ece:	4a13      	ldr	r2, [pc, #76]	; (8001f1c <MX_I2C1_Init+0x54>)
 8001ed0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001ed2:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <MX_I2C1_Init+0x50>)
 8001ed4:	4a12      	ldr	r2, [pc, #72]	; (8001f20 <MX_I2C1_Init+0x58>)
 8001ed6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ed8:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <MX_I2C1_Init+0x50>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <MX_I2C1_Init+0x50>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <MX_I2C1_Init+0x50>)
 8001ee6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001eea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001eec:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <MX_I2C1_Init+0x50>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ef2:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <MX_I2C1_Init+0x50>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ef8:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <MX_I2C1_Init+0x50>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <MX_I2C1_Init+0x50>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f04:	4804      	ldr	r0, [pc, #16]	; (8001f18 <MX_I2C1_Init+0x50>)
 8001f06:	f002 fb1d 	bl	8004544 <HAL_I2C_Init>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f10:	f000 fa44 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f14:	bf00      	nop
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	200007c0 	.word	0x200007c0
 8001f1c:	40005400 	.word	0x40005400
 8001f20:	00061a80 	.word	0x00061a80

08001f24 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b090      	sub	sp, #64	; 0x40
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001f2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	609a      	str	r2, [r3, #8]
 8001f36:	60da      	str	r2, [r3, #12]
 8001f38:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001f3e:	463b      	mov	r3, r7
 8001f40:	2228      	movs	r2, #40	; 0x28
 8001f42:	2100      	movs	r1, #0
 8001f44:	4618      	mov	r0, r3
 8001f46:	f017 fc01 	bl	801974c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001f4a:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <MX_RTC_Init+0x68>)
 8001f4c:	4a10      	ldr	r2, [pc, #64]	; (8001f90 <MX_RTC_Init+0x6c>)
 8001f4e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001f50:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <MX_RTC_Init+0x68>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001f56:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <MX_RTC_Init+0x68>)
 8001f58:	227f      	movs	r2, #127	; 0x7f
 8001f5a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <MX_RTC_Init+0x68>)
 8001f5e:	22ff      	movs	r2, #255	; 0xff
 8001f60:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <MX_RTC_Init+0x68>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001f68:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <MX_RTC_Init+0x68>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001f6e:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <MX_RTC_Init+0x68>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f74:	4805      	ldr	r0, [pc, #20]	; (8001f8c <MX_RTC_Init+0x68>)
 8001f76:	f005 fc51 	bl	800781c <HAL_RTC_Init>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001f80:	f000 fa0c 	bl	800239c <Error_Handler>
  /* USER CODE BEGIN RTC_Init 2 */
#endif

  /* USER CODE END RTC_Init 2 */

}
 8001f84:	bf00      	nop
 8001f86:	3740      	adds	r7, #64	; 0x40
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000814 	.word	0x20000814
 8001f90:	40002800 	.word	0x40002800

08001f94 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
void MX_SDIO_SD_Init(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001f98:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <MX_SDIO_SD_Init+0x38>)
 8001f9a:	4a0d      	ldr	r2, [pc, #52]	; (8001fd0 <MX_SDIO_SD_Init+0x3c>)
 8001f9c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001f9e:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <MX_SDIO_SD_Init+0x38>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001fa4:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <MX_SDIO_SD_Init+0x38>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001faa:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <MX_SDIO_SD_Init+0x38>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <MX_SDIO_SD_Init+0x38>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001fb6:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <MX_SDIO_SD_Init+0x38>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 5;
 8001fbc:	4b03      	ldr	r3, [pc, #12]	; (8001fcc <MX_SDIO_SD_Init+0x38>)
 8001fbe:	2205      	movs	r2, #5
 8001fc0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001fc2:	bf00      	nop
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	20000834 	.word	0x20000834
 8001fd0:	40012c00 	.word	0x40012c00

08001fd4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fda:	f107 0308 	add.w	r3, r7, #8
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	609a      	str	r2, [r3, #8]
 8001fe6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe8:	463b      	mov	r3, r7
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ff0:	4b1e      	ldr	r3, [pc, #120]	; (800206c <MX_TIM2_Init+0x98>)
 8001ff2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ff6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8001ff8:	4b1c      	ldr	r3, [pc, #112]	; (800206c <MX_TIM2_Init+0x98>)
 8001ffa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ffe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002000:	4b1a      	ldr	r3, [pc, #104]	; (800206c <MX_TIM2_Init+0x98>)
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400;
 8002006:	4b19      	ldr	r3, [pc, #100]	; (800206c <MX_TIM2_Init+0x98>)
 8002008:	f242 02d0 	movw	r2, #8400	; 0x20d0
 800200c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800200e:	4b17      	ldr	r3, [pc, #92]	; (800206c <MX_TIM2_Init+0x98>)
 8002010:	2200      	movs	r2, #0
 8002012:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002014:	4b15      	ldr	r3, [pc, #84]	; (800206c <MX_TIM2_Init+0x98>)
 8002016:	2280      	movs	r2, #128	; 0x80
 8002018:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800201a:	4814      	ldr	r0, [pc, #80]	; (800206c <MX_TIM2_Init+0x98>)
 800201c:	f007 f818 	bl	8009050 <HAL_TIM_Base_Init>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002026:	f000 f9b9 	bl	800239c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800202a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800202e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002030:	f107 0308 	add.w	r3, r7, #8
 8002034:	4619      	mov	r1, r3
 8002036:	480d      	ldr	r0, [pc, #52]	; (800206c <MX_TIM2_Init+0x98>)
 8002038:	f007 fa47 	bl	80094ca <HAL_TIM_ConfigClockSource>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002042:	f000 f9ab 	bl	800239c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002046:	2300      	movs	r3, #0
 8002048:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204a:	2300      	movs	r3, #0
 800204c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800204e:	463b      	mov	r3, r7
 8002050:	4619      	mov	r1, r3
 8002052:	4806      	ldr	r0, [pc, #24]	; (800206c <MX_TIM2_Init+0x98>)
 8002054:	f007 fc42 	bl	80098dc <HAL_TIMEx_MasterConfigSynchronization>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800205e:	f000 f99d 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002062:	bf00      	nop
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	200008b8 	.word	0x200008b8

08002070 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002074:	4b11      	ldr	r3, [pc, #68]	; (80020bc <MX_USART1_UART_Init+0x4c>)
 8002076:	4a12      	ldr	r2, [pc, #72]	; (80020c0 <MX_USART1_UART_Init+0x50>)
 8002078:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800207a:	4b10      	ldr	r3, [pc, #64]	; (80020bc <MX_USART1_UART_Init+0x4c>)
 800207c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002080:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002082:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <MX_USART1_UART_Init+0x4c>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <MX_USART1_UART_Init+0x4c>)
 800208a:	2200      	movs	r2, #0
 800208c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800208e:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <MX_USART1_UART_Init+0x4c>)
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002094:	4b09      	ldr	r3, [pc, #36]	; (80020bc <MX_USART1_UART_Init+0x4c>)
 8002096:	220c      	movs	r2, #12
 8002098:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800209a:	4b08      	ldr	r3, [pc, #32]	; (80020bc <MX_USART1_UART_Init+0x4c>)
 800209c:	2200      	movs	r2, #0
 800209e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a0:	4b06      	ldr	r3, [pc, #24]	; (80020bc <MX_USART1_UART_Init+0x4c>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020a6:	4805      	ldr	r0, [pc, #20]	; (80020bc <MX_USART1_UART_Init+0x4c>)
 80020a8:	f007 fc9a 	bl	80099e0 <HAL_UART_Init>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80020b2:	f000 f973 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000900 	.word	0x20000900
 80020c0:	40011000 	.word	0x40011000

080020c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020c8:	4b11      	ldr	r3, [pc, #68]	; (8002110 <MX_USART2_UART_Init+0x4c>)
 80020ca:	4a12      	ldr	r2, [pc, #72]	; (8002114 <MX_USART2_UART_Init+0x50>)
 80020cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020ce:	4b10      	ldr	r3, [pc, #64]	; (8002110 <MX_USART2_UART_Init+0x4c>)
 80020d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020d6:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <MX_USART2_UART_Init+0x4c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020dc:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <MX_USART2_UART_Init+0x4c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020e2:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <MX_USART2_UART_Init+0x4c>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020e8:	4b09      	ldr	r3, [pc, #36]	; (8002110 <MX_USART2_UART_Init+0x4c>)
 80020ea:	220c      	movs	r2, #12
 80020ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ee:	4b08      	ldr	r3, [pc, #32]	; (8002110 <MX_USART2_UART_Init+0x4c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020f4:	4b06      	ldr	r3, [pc, #24]	; (8002110 <MX_USART2_UART_Init+0x4c>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020fa:	4805      	ldr	r0, [pc, #20]	; (8002110 <MX_USART2_UART_Init+0x4c>)
 80020fc:	f007 fc70 	bl	80099e0 <HAL_UART_Init>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002106:	f000 f949 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000944 	.word	0x20000944
 8002114:	40004400 	.word	0x40004400

08002118 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b08a      	sub	sp, #40	; 0x28
 800211c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211e:	f107 0314 	add.w	r3, r7, #20
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	605a      	str	r2, [r3, #4]
 8002128:	609a      	str	r2, [r3, #8]
 800212a:	60da      	str	r2, [r3, #12]
 800212c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	4b5c      	ldr	r3, [pc, #368]	; (80022a4 <MX_GPIO_Init+0x18c>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	4a5b      	ldr	r2, [pc, #364]	; (80022a4 <MX_GPIO_Init+0x18c>)
 8002138:	f043 0304 	orr.w	r3, r3, #4
 800213c:	6313      	str	r3, [r2, #48]	; 0x30
 800213e:	4b59      	ldr	r3, [pc, #356]	; (80022a4 <MX_GPIO_Init+0x18c>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	4b55      	ldr	r3, [pc, #340]	; (80022a4 <MX_GPIO_Init+0x18c>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	4a54      	ldr	r2, [pc, #336]	; (80022a4 <MX_GPIO_Init+0x18c>)
 8002154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002158:	6313      	str	r3, [r2, #48]	; 0x30
 800215a:	4b52      	ldr	r3, [pc, #328]	; (80022a4 <MX_GPIO_Init+0x18c>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	4b4e      	ldr	r3, [pc, #312]	; (80022a4 <MX_GPIO_Init+0x18c>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	4a4d      	ldr	r2, [pc, #308]	; (80022a4 <MX_GPIO_Init+0x18c>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	6313      	str	r3, [r2, #48]	; 0x30
 8002176:	4b4b      	ldr	r3, [pc, #300]	; (80022a4 <MX_GPIO_Init+0x18c>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
 8002186:	4b47      	ldr	r3, [pc, #284]	; (80022a4 <MX_GPIO_Init+0x18c>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	4a46      	ldr	r2, [pc, #280]	; (80022a4 <MX_GPIO_Init+0x18c>)
 800218c:	f043 0302 	orr.w	r3, r3, #2
 8002190:	6313      	str	r3, [r2, #48]	; 0x30
 8002192:	4b44      	ldr	r3, [pc, #272]	; (80022a4 <MX_GPIO_Init+0x18c>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	607b      	str	r3, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	603b      	str	r3, [r7, #0]
 80021a2:	4b40      	ldr	r3, [pc, #256]	; (80022a4 <MX_GPIO_Init+0x18c>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	4a3f      	ldr	r2, [pc, #252]	; (80022a4 <MX_GPIO_Init+0x18c>)
 80021a8:	f043 0308 	orr.w	r3, r3, #8
 80021ac:	6313      	str	r3, [r2, #48]	; 0x30
 80021ae:	4b3d      	ldr	r3, [pc, #244]	; (80022a4 <MX_GPIO_Init+0x18c>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	603b      	str	r3, [r7, #0]
 80021b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_MOTION_GPIO_Port, EN_MOTION_Pin, GPIO_PIN_RESET);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2102      	movs	r1, #2
 80021be:	483a      	ldr	r0, [pc, #232]	; (80022a8 <MX_GPIO_Init+0x190>)
 80021c0:	f002 f98e 	bl	80044e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, GPIO_PIN_SET);
 80021c4:	2201      	movs	r2, #1
 80021c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021ca:	4838      	ldr	r0, [pc, #224]	; (80022ac <MX_GPIO_Init+0x194>)
 80021cc:	f002 f988 	bl	80044e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80021d0:	f642 63fe 	movw	r3, #12030	; 0x2efe
 80021d4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021d6:	2303      	movs	r3, #3
 80021d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021de:	f107 0314 	add.w	r3, r7, #20
 80021e2:	4619      	mov	r1, r3
 80021e4:	4832      	ldr	r0, [pc, #200]	; (80022b0 <MX_GPIO_Init+0x198>)
 80021e6:	f001 fefb 	bl	8003fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_MOTION_Pin */
  GPIO_InitStruct.Pin = OUT_MOTION_Pin;
 80021ea:	2301      	movs	r3, #1
 80021ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OUT_MOTION_GPIO_Port, &GPIO_InitStruct);
 80021f6:	f107 0314 	add.w	r3, r7, #20
 80021fa:	4619      	mov	r1, r3
 80021fc:	482a      	ldr	r0, [pc, #168]	; (80022a8 <MX_GPIO_Init+0x190>)
 80021fe:	f001 feef 	bl	8003fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_MOTION_Pin */
  GPIO_InitStruct.Pin = EN_MOTION_Pin;
 8002202:	2302      	movs	r3, #2
 8002204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002206:	2301      	movs	r3, #1
 8002208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800220e:	2302      	movs	r3, #2
 8002210:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_MOTION_GPIO_Port, &GPIO_InitStruct);
 8002212:	f107 0314 	add.w	r3, r7, #20
 8002216:	4619      	mov	r1, r3
 8002218:	4823      	ldr	r0, [pc, #140]	; (80022a8 <MX_GPIO_Init+0x190>)
 800221a:	f001 fee1 	bl	8003fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800221e:	f248 53f0 	movw	r3, #34288	; 0x85f0
 8002222:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002224:	2303      	movs	r3, #3
 8002226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	4619      	mov	r1, r3
 8002232:	481d      	ldr	r0, [pc, #116]	; (80022a8 <MX_GPIO_Init+0x190>)
 8002234:	f001 fed4 	bl	8003fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8002238:	f247 433f 	movw	r3, #29759	; 0x743f
 800223c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800223e:	2303      	movs	r3, #3
 8002240:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002246:	f107 0314 	add.w	r3, r7, #20
 800224a:	4619      	mov	r1, r3
 800224c:	4817      	ldr	r0, [pc, #92]	; (80022ac <MX_GPIO_Init+0x194>)
 800224e:	f001 fec7 	bl	8003fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_5V_Pin */
  GPIO_InitStruct.Pin = EN_5V_Pin;
 8002252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002256:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002258:	2301      	movs	r3, #1
 800225a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002260:	2302      	movs	r3, #2
 8002262:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_5V_GPIO_Port, &GPIO_InitStruct);
 8002264:	f107 0314 	add.w	r3, r7, #20
 8002268:	4619      	mov	r1, r3
 800226a:	4810      	ldr	r0, [pc, #64]	; (80022ac <MX_GPIO_Init+0x194>)
 800226c:	f001 feb8 	bl	8003fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 8002270:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002276:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800227a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800227c:	2302      	movs	r3, #2
 800227e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	4619      	mov	r1, r3
 8002286:	4808      	ldr	r0, [pc, #32]	; (80022a8 <MX_GPIO_Init+0x190>)
 8002288:	f001 feaa 	bl	8003fe0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800228c:	2200      	movs	r2, #0
 800228e:	2100      	movs	r1, #0
 8002290:	2017      	movs	r0, #23
 8002292:	f001 fad6 	bl	8003842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002296:	2017      	movs	r0, #23
 8002298:	f001 faef 	bl	800387a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800229c:	bf00      	nop
 800229e:	3728      	adds	r7, #40	; 0x28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40020000 	.word	0x40020000
 80022ac:	40020400 	.word	0x40020400
 80022b0:	40020800 	.word	0x40020800

080022b4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]

if(htim->Instance == TIM2)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c4:	d101      	bne.n	80022ca <HAL_TIM_PeriodElapsedCallback+0x16>
{
	timer_interrupt();
 80022c6:	f7fe fecb 	bl	8001060 <timer_interrupt>
}

}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == OUT_MOTION_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 80022de:	88fb      	ldrh	r3, [r7, #6]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d101      	bne.n	80022e8 <HAL_GPIO_EXTI_Callback+0x14>
    {
    	pir_interrupt();
 80022e4:	f7fe fea0 	bl	8001028 <pir_interrupt>
    }
    if(GPIO_Pin == USB_DETECT_Pin)
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ee:	d114      	bne.n	800231a <HAL_GPIO_EXTI_Callback+0x46>
    {
        _RunTime_Packet.usb_detection = 1;
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <HAL_GPIO_EXTI_Callback+0x50>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        _RunTime_Packet.usb_start_timer = 1;
 80022f8:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <HAL_GPIO_EXTI_Callback+0x50>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        usb_time_keep = 0;
 8002300:	4b09      	ldr	r3, [pc, #36]	; (8002328 <HAL_GPIO_EXTI_Callback+0x54>)
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
        prev_usb_time_ = HAL_GetTick();
 8002306:	f000 fcb9 	bl	8002c7c <HAL_GetTick>
 800230a:	4603      	mov	r3, r0
 800230c:	4a07      	ldr	r2, [pc, #28]	; (800232c <HAL_GPIO_EXTI_Callback+0x58>)
 800230e:	6013      	str	r3, [r2, #0]
		prev_sleep_time = HAL_GetTick();
 8002310:	f000 fcb4 	bl	8002c7c <HAL_GetTick>
 8002314:	4603      	mov	r3, r0
 8002316:	4a06      	ldr	r2, [pc, #24]	; (8002330 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002318:	6013      	str	r3, [r2, #0]
    }
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	200004c8 	.word	0x200004c8
 8002328:	2000050c 	.word	0x2000050c
 800232c:	20000750 	.word	0x20000750
 8002330:	20000748 	.word	0x20000748

08002334 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
	RtcInt();
 800233c:	f00d ff7a 	bl	8010234 <RtcInt>
}
 8002340:	bf00      	nop
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]


  if(huart == &huart1) //console uart
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a0f      	ldr	r2, [pc, #60]	; (8002390 <HAL_UART_ErrorCallback+0x48>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d10a      	bne.n	800236e <HAL_UART_ErrorCallback+0x26>
    {

      //HMI_uart_err = 1;
	  _RunTime_Packet.console_uart_error = 1;
 8002358:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <HAL_UART_ErrorCallback+0x4c>)
 800235a:	2201      	movs	r2, #1
 800235c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	43d2      	mvns	r2, r2
 800236a:	601a      	str	r2, [r3, #0]
   //   _RunTime_Packet.sps30_uart_error = 1;
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
    }


}
 800236c:	e009      	b.n	8002382 <HAL_UART_ErrorCallback+0x3a>
  else if(huart == &huart2) //sps30 uart
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a09      	ldr	r2, [pc, #36]	; (8002398 <HAL_UART_ErrorCallback+0x50>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d105      	bne.n	8002382 <HAL_UART_ErrorCallback+0x3a>
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	43d2      	mvns	r2, r2
 8002380:	601a      	str	r2, [r3, #0]
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	20000900 	.word	0x20000900
 8002394:	200004c8 	.word	0x200004c8
 8002398:	20000944 	.word	0x20000944

0800239c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80023a0:	b672      	cpsid	i
}
 80023a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023a4:	e7fe      	b.n	80023a4 <Error_Handler+0x8>
	...

080023a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	607b      	str	r3, [r7, #4]
 80023b2:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <HAL_MspInit+0x4c>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	4a0f      	ldr	r2, [pc, #60]	; (80023f4 <HAL_MspInit+0x4c>)
 80023b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023bc:	6453      	str	r3, [r2, #68]	; 0x44
 80023be:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <HAL_MspInit+0x4c>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c6:	607b      	str	r3, [r7, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	603b      	str	r3, [r7, #0]
 80023ce:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <HAL_MspInit+0x4c>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	4a08      	ldr	r2, [pc, #32]	; (80023f4 <HAL_MspInit+0x4c>)
 80023d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d8:	6413      	str	r3, [r2, #64]	; 0x40
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <HAL_MspInit+0x4c>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e2:	603b      	str	r3, [r7, #0]
 80023e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	40023800 	.word	0x40023800

080023f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08a      	sub	sp, #40	; 0x28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002400:	f107 0314 	add.w	r3, r7, #20
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	60da      	str	r2, [r3, #12]
 800240e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a17      	ldr	r2, [pc, #92]	; (8002474 <HAL_ADC_MspInit+0x7c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d127      	bne.n	800246a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	4b16      	ldr	r3, [pc, #88]	; (8002478 <HAL_ADC_MspInit+0x80>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	4a15      	ldr	r2, [pc, #84]	; (8002478 <HAL_ADC_MspInit+0x80>)
 8002424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002428:	6453      	str	r3, [r2, #68]	; 0x44
 800242a:	4b13      	ldr	r3, [pc, #76]	; (8002478 <HAL_ADC_MspInit+0x80>)
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002432:	613b      	str	r3, [r7, #16]
 8002434:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	4b0f      	ldr	r3, [pc, #60]	; (8002478 <HAL_ADC_MspInit+0x80>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	4a0e      	ldr	r2, [pc, #56]	; (8002478 <HAL_ADC_MspInit+0x80>)
 8002440:	f043 0304 	orr.w	r3, r3, #4
 8002444:	6313      	str	r3, [r2, #48]	; 0x30
 8002446:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <HAL_ADC_MspInit+0x80>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = BATT_ADC_IN10_Pin;
 8002452:	2301      	movs	r3, #1
 8002454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002456:	2303      	movs	r3, #3
 8002458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245a:	2300      	movs	r3, #0
 800245c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_ADC_IN10_GPIO_Port, &GPIO_InitStruct);
 800245e:	f107 0314 	add.w	r3, r7, #20
 8002462:	4619      	mov	r1, r3
 8002464:	4805      	ldr	r0, [pc, #20]	; (800247c <HAL_ADC_MspInit+0x84>)
 8002466:	f001 fdbb 	bl	8003fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800246a:	bf00      	nop
 800246c:	3728      	adds	r7, #40	; 0x28
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40012000 	.word	0x40012000
 8002478:	40023800 	.word	0x40023800
 800247c:	40020800 	.word	0x40020800

08002480 <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a08      	ldr	r2, [pc, #32]	; (80024b0 <HAL_ADC_MspDeInit+0x30>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d109      	bne.n	80024a6 <HAL_ADC_MspDeInit+0x26>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8002492:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <HAL_ADC_MspDeInit+0x34>)
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	4a07      	ldr	r2, [pc, #28]	; (80024b4 <HAL_ADC_MspDeInit+0x34>)
 8002498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800249c:	6453      	str	r3, [r2, #68]	; 0x44

    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    HAL_GPIO_DeInit(BATT_ADC_IN10_GPIO_Port, BATT_ADC_IN10_Pin);
 800249e:	2101      	movs	r1, #1
 80024a0:	4805      	ldr	r0, [pc, #20]	; (80024b8 <HAL_ADC_MspDeInit+0x38>)
 80024a2:	f001 ff21 	bl	80042e8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40012000 	.word	0x40012000
 80024b4:	40023800 	.word	0x40023800
 80024b8:	40020800 	.word	0x40020800

080024bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08a      	sub	sp, #40	; 0x28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c4:	f107 0314 	add.w	r3, r7, #20
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a19      	ldr	r2, [pc, #100]	; (8002540 <HAL_I2C_MspInit+0x84>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d12c      	bne.n	8002538 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	4b18      	ldr	r3, [pc, #96]	; (8002544 <HAL_I2C_MspInit+0x88>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	4a17      	ldr	r2, [pc, #92]	; (8002544 <HAL_I2C_MspInit+0x88>)
 80024e8:	f043 0302 	orr.w	r3, r3, #2
 80024ec:	6313      	str	r3, [r2, #48]	; 0x30
 80024ee:	4b15      	ldr	r3, [pc, #84]	; (8002544 <HAL_I2C_MspInit+0x88>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCD4x_SCL_Pin|SCD4x_SDA_Pin;
 80024fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002500:	2312      	movs	r3, #18
 8002502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002504:	2300      	movs	r3, #0
 8002506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002508:	2303      	movs	r3, #3
 800250a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800250c:	2304      	movs	r3, #4
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002510:	f107 0314 	add.w	r3, r7, #20
 8002514:	4619      	mov	r1, r3
 8002516:	480c      	ldr	r0, [pc, #48]	; (8002548 <HAL_I2C_MspInit+0x8c>)
 8002518:	f001 fd62 	bl	8003fe0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800251c:	2300      	movs	r3, #0
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	4b08      	ldr	r3, [pc, #32]	; (8002544 <HAL_I2C_MspInit+0x88>)
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	4a07      	ldr	r2, [pc, #28]	; (8002544 <HAL_I2C_MspInit+0x88>)
 8002526:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800252a:	6413      	str	r3, [r2, #64]	; 0x40
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <HAL_I2C_MspInit+0x88>)
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002538:	bf00      	nop
 800253a:	3728      	adds	r7, #40	; 0x28
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40005400 	.word	0x40005400
 8002544:	40023800 	.word	0x40023800
 8002548:	40020400 	.word	0x40020400

0800254c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a0b      	ldr	r2, [pc, #44]	; (8002588 <HAL_I2C_MspDeInit+0x3c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d10f      	bne.n	800257e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800255e:	4b0b      	ldr	r3, [pc, #44]	; (800258c <HAL_I2C_MspDeInit+0x40>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	4a0a      	ldr	r2, [pc, #40]	; (800258c <HAL_I2C_MspDeInit+0x40>)
 8002564:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002568:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(SCD4x_SCL_GPIO_Port, SCD4x_SCL_Pin);
 800256a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800256e:	4808      	ldr	r0, [pc, #32]	; (8002590 <HAL_I2C_MspDeInit+0x44>)
 8002570:	f001 feba 	bl	80042e8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SCD4x_SDA_GPIO_Port, SCD4x_SDA_Pin);
 8002574:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002578:	4805      	ldr	r0, [pc, #20]	; (8002590 <HAL_I2C_MspDeInit+0x44>)
 800257a:	f001 feb5 	bl	80042e8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40005400 	.word	0x40005400
 800258c:	40023800 	.word	0x40023800
 8002590:	40020400 	.word	0x40020400

08002594 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800259c:	f107 030c 	add.w	r3, r7, #12
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	60da      	str	r2, [r3, #12]
 80025aa:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a10      	ldr	r2, [pc, #64]	; (80025f4 <HAL_RTC_MspInit+0x60>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d119      	bne.n	80025ea <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80025b6:	2302      	movs	r3, #2
 80025b8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80025ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025be:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025c0:	f107 030c 	add.w	r3, r7, #12
 80025c4:	4618      	mov	r0, r3
 80025c6:	f005 f83b 	bl	8007640 <HAL_RCCEx_PeriphCLKConfig>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80025d0:	f7ff fee4 	bl	800239c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80025d4:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <HAL_RTC_MspInit+0x64>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	2100      	movs	r1, #0
 80025de:	2029      	movs	r0, #41	; 0x29
 80025e0:	f001 f92f 	bl	8003842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80025e4:	2029      	movs	r0, #41	; 0x29
 80025e6:	f001 f948 	bl	800387a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80025ea:	bf00      	nop
 80025ec:	3720      	adds	r7, #32
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40002800 	.word	0x40002800
 80025f8:	42470e3c 	.word	0x42470e3c

080025fc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08a      	sub	sp, #40	; 0x28
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002604:	f107 0314 	add.w	r3, r7, #20
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	60da      	str	r2, [r3, #12]
 8002612:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a28      	ldr	r2, [pc, #160]	; (80026bc <HAL_SD_MspInit+0xc0>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d14a      	bne.n	80026b4 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	4b27      	ldr	r3, [pc, #156]	; (80026c0 <HAL_SD_MspInit+0xc4>)
 8002624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002626:	4a26      	ldr	r2, [pc, #152]	; (80026c0 <HAL_SD_MspInit+0xc4>)
 8002628:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800262c:	6453      	str	r3, [r2, #68]	; 0x44
 800262e:	4b24      	ldr	r3, [pc, #144]	; (80026c0 <HAL_SD_MspInit+0xc4>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002636:	613b      	str	r3, [r7, #16]
 8002638:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	4b20      	ldr	r3, [pc, #128]	; (80026c0 <HAL_SD_MspInit+0xc4>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	4a1f      	ldr	r2, [pc, #124]	; (80026c0 <HAL_SD_MspInit+0xc4>)
 8002644:	f043 0304 	orr.w	r3, r3, #4
 8002648:	6313      	str	r3, [r2, #48]	; 0x30
 800264a:	4b1d      	ldr	r3, [pc, #116]	; (80026c0 <HAL_SD_MspInit+0xc4>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	f003 0304 	and.w	r3, r3, #4
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	4b19      	ldr	r3, [pc, #100]	; (80026c0 <HAL_SD_MspInit+0xc4>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	4a18      	ldr	r2, [pc, #96]	; (80026c0 <HAL_SD_MspInit+0xc4>)
 8002660:	f043 0308 	orr.w	r3, r3, #8
 8002664:	6313      	str	r3, [r2, #48]	; 0x30
 8002666:	4b16      	ldr	r3, [pc, #88]	; (80026c0 <HAL_SD_MspInit+0xc4>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	60bb      	str	r3, [r7, #8]
 8002670:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8002672:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8002676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002678:	2302      	movs	r3, #2
 800267a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267c:	2300      	movs	r3, #0
 800267e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002680:	2303      	movs	r3, #3
 8002682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002684:	230c      	movs	r3, #12
 8002686:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002688:	f107 0314 	add.w	r3, r7, #20
 800268c:	4619      	mov	r1, r3
 800268e:	480d      	ldr	r0, [pc, #52]	; (80026c4 <HAL_SD_MspInit+0xc8>)
 8002690:	f001 fca6 	bl	8003fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002694:	2304      	movs	r3, #4
 8002696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002698:	2302      	movs	r3, #2
 800269a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a0:	2303      	movs	r3, #3
 80026a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80026a4:	230c      	movs	r3, #12
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026a8:	f107 0314 	add.w	r3, r7, #20
 80026ac:	4619      	mov	r1, r3
 80026ae:	4806      	ldr	r0, [pc, #24]	; (80026c8 <HAL_SD_MspInit+0xcc>)
 80026b0:	f001 fc96 	bl	8003fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80026b4:	bf00      	nop
 80026b6:	3728      	adds	r7, #40	; 0x28
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40012c00 	.word	0x40012c00
 80026c0:	40023800 	.word	0x40023800
 80026c4:	40020800 	.word	0x40020800
 80026c8:	40020c00 	.word	0x40020c00

080026cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026dc:	d115      	bne.n	800270a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <HAL_TIM_Base_MspInit+0x48>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	4a0b      	ldr	r2, [pc, #44]	; (8002714 <HAL_TIM_Base_MspInit+0x48>)
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	6413      	str	r3, [r2, #64]	; 0x40
 80026ee:	4b09      	ldr	r3, [pc, #36]	; (8002714 <HAL_TIM_Base_MspInit+0x48>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80026fa:	2200      	movs	r2, #0
 80026fc:	2100      	movs	r1, #0
 80026fe:	201c      	movs	r0, #28
 8002700:	f001 f89f 	bl	8003842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002704:	201c      	movs	r0, #28
 8002706:	f001 f8b8 	bl	800387a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800270a:	bf00      	nop
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40023800 	.word	0x40023800

08002718 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002728:	d108      	bne.n	800273c <HAL_TIM_Base_MspDeInit+0x24>
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */

  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 800272a:	4b06      	ldr	r3, [pc, #24]	; (8002744 <HAL_TIM_Base_MspDeInit+0x2c>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	4a05      	ldr	r2, [pc, #20]	; (8002744 <HAL_TIM_Base_MspDeInit+0x2c>)
 8002730:	f023 0301 	bic.w	r3, r3, #1
 8002734:	6413      	str	r3, [r2, #64]	; 0x40

    /* TIM2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8002736:	201c      	movs	r0, #28
 8002738:	f001 f8ad 	bl	8003896 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM2_MspDeInit 1 */

  /* USER CODE END TIM2_MspDeInit 1 */
  }

}
 800273c:	bf00      	nop
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40023800 	.word	0x40023800

08002748 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08c      	sub	sp, #48	; 0x30
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002750:	f107 031c 	add.w	r3, r7, #28
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a3a      	ldr	r2, [pc, #232]	; (8002850 <HAL_UART_MspInit+0x108>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d134      	bne.n	80027d4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	61bb      	str	r3, [r7, #24]
 800276e:	4b39      	ldr	r3, [pc, #228]	; (8002854 <HAL_UART_MspInit+0x10c>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	4a38      	ldr	r2, [pc, #224]	; (8002854 <HAL_UART_MspInit+0x10c>)
 8002774:	f043 0310 	orr.w	r3, r3, #16
 8002778:	6453      	str	r3, [r2, #68]	; 0x44
 800277a:	4b36      	ldr	r3, [pc, #216]	; (8002854 <HAL_UART_MspInit+0x10c>)
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	f003 0310 	and.w	r3, r3, #16
 8002782:	61bb      	str	r3, [r7, #24]
 8002784:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	4b32      	ldr	r3, [pc, #200]	; (8002854 <HAL_UART_MspInit+0x10c>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	4a31      	ldr	r2, [pc, #196]	; (8002854 <HAL_UART_MspInit+0x10c>)
 8002790:	f043 0302 	orr.w	r3, r3, #2
 8002794:	6313      	str	r3, [r2, #48]	; 0x30
 8002796:	4b2f      	ldr	r3, [pc, #188]	; (8002854 <HAL_UART_MspInit+0x10c>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = CLI_UART1_TX_Pin|CLI_UART1_RX_Pin;
 80027a2:	23c0      	movs	r3, #192	; 0xc0
 80027a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a6:	2302      	movs	r3, #2
 80027a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ae:	2303      	movs	r3, #3
 80027b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027b2:	2307      	movs	r3, #7
 80027b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b6:	f107 031c 	add.w	r3, r7, #28
 80027ba:	4619      	mov	r1, r3
 80027bc:	4826      	ldr	r0, [pc, #152]	; (8002858 <HAL_UART_MspInit+0x110>)
 80027be:	f001 fc0f 	bl	8003fe0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80027c2:	2200      	movs	r2, #0
 80027c4:	2100      	movs	r1, #0
 80027c6:	2025      	movs	r0, #37	; 0x25
 80027c8:	f001 f83b 	bl	8003842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027cc:	2025      	movs	r0, #37	; 0x25
 80027ce:	f001 f854 	bl	800387a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027d2:	e038      	b.n	8002846 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a20      	ldr	r2, [pc, #128]	; (800285c <HAL_UART_MspInit+0x114>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d133      	bne.n	8002846 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	4b1c      	ldr	r3, [pc, #112]	; (8002854 <HAL_UART_MspInit+0x10c>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	4a1b      	ldr	r2, [pc, #108]	; (8002854 <HAL_UART_MspInit+0x10c>)
 80027e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ec:	6413      	str	r3, [r2, #64]	; 0x40
 80027ee:	4b19      	ldr	r3, [pc, #100]	; (8002854 <HAL_UART_MspInit+0x10c>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f6:	613b      	str	r3, [r7, #16]
 80027f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	4b15      	ldr	r3, [pc, #84]	; (8002854 <HAL_UART_MspInit+0x10c>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	4a14      	ldr	r2, [pc, #80]	; (8002854 <HAL_UART_MspInit+0x10c>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	6313      	str	r3, [r2, #48]	; 0x30
 800280a:	4b12      	ldr	r3, [pc, #72]	; (8002854 <HAL_UART_MspInit+0x10c>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PM_USART2_TX_Pin|PM_USART2_RX_Pin;
 8002816:	230c      	movs	r3, #12
 8002818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281a:	2302      	movs	r3, #2
 800281c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	2300      	movs	r3, #0
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002822:	2303      	movs	r3, #3
 8002824:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002826:	2307      	movs	r3, #7
 8002828:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800282a:	f107 031c 	add.w	r3, r7, #28
 800282e:	4619      	mov	r1, r3
 8002830:	480b      	ldr	r0, [pc, #44]	; (8002860 <HAL_UART_MspInit+0x118>)
 8002832:	f001 fbd5 	bl	8003fe0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002836:	2200      	movs	r2, #0
 8002838:	2100      	movs	r1, #0
 800283a:	2026      	movs	r0, #38	; 0x26
 800283c:	f001 f801 	bl	8003842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002840:	2026      	movs	r0, #38	; 0x26
 8002842:	f001 f81a 	bl	800387a <HAL_NVIC_EnableIRQ>
}
 8002846:	bf00      	nop
 8002848:	3730      	adds	r7, #48	; 0x30
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40011000 	.word	0x40011000
 8002854:	40023800 	.word	0x40023800
 8002858:	40020400 	.word	0x40020400
 800285c:	40004400 	.word	0x40004400
 8002860:	40020000 	.word	0x40020000

08002864 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a13      	ldr	r2, [pc, #76]	; (80028c0 <HAL_UART_MspDeInit+0x5c>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d10d      	bne.n	8002892 <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002876:	4b13      	ldr	r3, [pc, #76]	; (80028c4 <HAL_UART_MspDeInit+0x60>)
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	4a12      	ldr	r2, [pc, #72]	; (80028c4 <HAL_UART_MspDeInit+0x60>)
 800287c:	f023 0310 	bic.w	r3, r3, #16
 8002880:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, CLI_UART1_TX_Pin|CLI_UART1_RX_Pin);
 8002882:	21c0      	movs	r1, #192	; 0xc0
 8002884:	4810      	ldr	r0, [pc, #64]	; (80028c8 <HAL_UART_MspDeInit+0x64>)
 8002886:	f001 fd2f 	bl	80042e8 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800288a:	2025      	movs	r0, #37	; 0x25
 800288c:	f001 f803 	bl	8003896 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8002890:	e011      	b.n	80028b6 <HAL_UART_MspDeInit+0x52>
  else if(huart->Instance==USART2)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a0d      	ldr	r2, [pc, #52]	; (80028cc <HAL_UART_MspDeInit+0x68>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d10c      	bne.n	80028b6 <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART2_CLK_DISABLE();
 800289c:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <HAL_UART_MspDeInit+0x60>)
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	4a08      	ldr	r2, [pc, #32]	; (80028c4 <HAL_UART_MspDeInit+0x60>)
 80028a2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80028a6:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, PM_USART2_TX_Pin|PM_USART2_RX_Pin);
 80028a8:	210c      	movs	r1, #12
 80028aa:	4809      	ldr	r0, [pc, #36]	; (80028d0 <HAL_UART_MspDeInit+0x6c>)
 80028ac:	f001 fd1c 	bl	80042e8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80028b0:	2026      	movs	r0, #38	; 0x26
 80028b2:	f000 fff0 	bl	8003896 <HAL_NVIC_DisableIRQ>
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40011000 	.word	0x40011000
 80028c4:	40023800 	.word	0x40023800
 80028c8:	40020400 	.word	0x40020400
 80028cc:	40004400 	.word	0x40004400
 80028d0:	40020000 	.word	0x40020000

080028d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	HAL_NVIC_SystemReset();
 80028d8:	f000 ffeb 	bl	80038b2 <HAL_NVIC_SystemReset>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028dc:	e7fe      	b.n	80028dc <NMI_Handler+0x8>

080028de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 80028e2:	f000 ffe6 	bl	80038b2 <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028e6:	e7fe      	b.n	80028e6 <HardFault_Handler+0x8>

080028e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	HAL_NVIC_SystemReset();
 80028ec:	f000 ffe1 	bl	80038b2 <HAL_NVIC_SystemReset>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028f0:	e7fe      	b.n	80028f0 <MemManage_Handler+0x8>

080028f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 80028f6:	f000 ffdc 	bl	80038b2 <HAL_NVIC_SystemReset>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028fa:	e7fe      	b.n	80028fa <BusFault_Handler+0x8>

080028fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8002900:	f000 ffd7 	bl	80038b2 <HAL_NVIC_SystemReset>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002904:	e7fe      	b.n	8002904 <UsageFault_Handler+0x8>

08002906 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
	HAL_NVIC_SystemReset();
 800290a:	f000 ffd2 	bl	80038b2 <HAL_NVIC_SystemReset>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}

08002912 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	HAL_NVIC_SystemReset();
 8002916:	f000 ffcc 	bl	80038b2 <HAL_NVIC_SystemReset>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}

0800291e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
	HAL_NVIC_SystemReset();
 8002922:	f000 ffc6 	bl	80038b2 <HAL_NVIC_SystemReset>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}

0800292a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800292e:	f000 f991 	bl	8002c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}

08002936 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 800293a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800293e:	f001 fde9 	bl	8004514 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800294c:	4802      	ldr	r0, [pc, #8]	; (8002958 <TIM2_IRQHandler+0x10>)
 800294e:	f006 fcb4 	bl	80092ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	200008b8 	.word	0x200008b8

0800295c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002960:	4802      	ldr	r0, [pc, #8]	; (800296c <USART1_IRQHandler+0x10>)
 8002962:	f007 f9e1 	bl	8009d28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20000900 	.word	0x20000900

08002970 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002974:	4802      	ldr	r0, [pc, #8]	; (8002980 <USART2_IRQHandler+0x10>)
 8002976:	f007 f9d7 	bl	8009d28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800297a:	bf00      	nop
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20000944 	.word	0x20000944

08002984 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002988:	4802      	ldr	r0, [pc, #8]	; (8002994 <RTC_Alarm_IRQHandler+0x10>)
 800298a:	f005 facb 	bl	8007f24 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	20000814 	.word	0x20000814

08002998 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800299c:	4802      	ldr	r0, [pc, #8]	; (80029a8 <OTG_FS_IRQHandler+0x10>)
 800299e:	f003 f870 	bl	8005a82 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	200017ec 	.word	0x200017ec

080029ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  return 1;
 80029b0:	2301      	movs	r3, #1
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <_kill>:

int _kill(int pid, int sig)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029c6:	f016 fded 	bl	80195a4 <__errno>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2216      	movs	r2, #22
 80029ce:	601a      	str	r2, [r3, #0]
  return -1;
 80029d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <_exit>:

void _exit (int status)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029e4:	f04f 31ff 	mov.w	r1, #4294967295
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7ff ffe7 	bl	80029bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80029ee:	e7fe      	b.n	80029ee <_exit+0x12>

080029f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	e00a      	b.n	8002a18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a02:	f3af 8000 	nop.w
 8002a06:	4601      	mov	r1, r0
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	1c5a      	adds	r2, r3, #1
 8002a0c:	60ba      	str	r2, [r7, #8]
 8002a0e:	b2ca      	uxtb	r2, r1
 8002a10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	3301      	adds	r3, #1
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	dbf0      	blt.n	8002a02 <_read+0x12>
  }

  return len;
 8002a20:	687b      	ldr	r3, [r7, #4]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b086      	sub	sp, #24
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	60f8      	str	r0, [r7, #12]
 8002a32:	60b9      	str	r1, [r7, #8]
 8002a34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a36:	2300      	movs	r3, #0
 8002a38:	617b      	str	r3, [r7, #20]
 8002a3a:	e009      	b.n	8002a50 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	60ba      	str	r2, [r7, #8]
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	617b      	str	r3, [r7, #20]
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	dbf1      	blt.n	8002a3c <_write+0x12>
  }
  return len;
 8002a58:	687b      	ldr	r3, [r7, #4]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3718      	adds	r7, #24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <_close>:

int _close(int file)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
 8002a82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a8a:	605a      	str	r2, [r3, #4]
  return 0;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <_isatty>:

int _isatty(int file)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002aa2:	2301      	movs	r3, #1
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ad4:	4a14      	ldr	r2, [pc, #80]	; (8002b28 <_sbrk+0x5c>)
 8002ad6:	4b15      	ldr	r3, [pc, #84]	; (8002b2c <_sbrk+0x60>)
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ae0:	4b13      	ldr	r3, [pc, #76]	; (8002b30 <_sbrk+0x64>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d102      	bne.n	8002aee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ae8:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <_sbrk+0x64>)
 8002aea:	4a12      	ldr	r2, [pc, #72]	; (8002b34 <_sbrk+0x68>)
 8002aec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002aee:	4b10      	ldr	r3, [pc, #64]	; (8002b30 <_sbrk+0x64>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4413      	add	r3, r2
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d207      	bcs.n	8002b0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002afc:	f016 fd52 	bl	80195a4 <__errno>
 8002b00:	4603      	mov	r3, r0
 8002b02:	220c      	movs	r2, #12
 8002b04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b06:	f04f 33ff 	mov.w	r3, #4294967295
 8002b0a:	e009      	b.n	8002b20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b0c:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <_sbrk+0x64>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b12:	4b07      	ldr	r3, [pc, #28]	; (8002b30 <_sbrk+0x64>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4413      	add	r3, r2
 8002b1a:	4a05      	ldr	r2, [pc, #20]	; (8002b30 <_sbrk+0x64>)
 8002b1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	20018000 	.word	0x20018000
 8002b2c:	00000400 	.word	0x00000400
 8002b30:	20000988 	.word	0x20000988
 8002b34:	20002580 	.word	0x20002580

08002b38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <SystemInit+0x20>)
 8002b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b42:	4a05      	ldr	r2, [pc, #20]	; (8002b58 <SystemInit+0x20>)
 8002b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b4c:	bf00      	nop
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	e000ed00 	.word	0xe000ed00

08002b5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b60:	480d      	ldr	r0, [pc, #52]	; (8002b98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b62:	490e      	ldr	r1, [pc, #56]	; (8002b9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b64:	4a0e      	ldr	r2, [pc, #56]	; (8002ba0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b68:	e002      	b.n	8002b70 <LoopCopyDataInit>

08002b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b6e:	3304      	adds	r3, #4

08002b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b74:	d3f9      	bcc.n	8002b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b76:	4a0b      	ldr	r2, [pc, #44]	; (8002ba4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b78:	4c0b      	ldr	r4, [pc, #44]	; (8002ba8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b7c:	e001      	b.n	8002b82 <LoopFillZerobss>

08002b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b80:	3204      	adds	r2, #4

08002b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b84:	d3fb      	bcc.n	8002b7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b86:	f7ff ffd7 	bl	8002b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b8a:	f016 fd7f 	bl	801968c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b8e:	f7ff f8bf 	bl	8001d10 <main>
  bx  lr    
 8002b92:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b94:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b9c:	20000314 	.word	0x20000314
  ldr r2, =_sidata
 8002ba0:	080205c0 	.word	0x080205c0
  ldr r2, =_sbss
 8002ba4:	20000314 	.word	0x20000314
  ldr r4, =_ebss
 8002ba8:	20002580 	.word	0x20002580

08002bac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bac:	e7fe      	b.n	8002bac <ADC_IRQHandler>
	...

08002bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bb4:	4b0e      	ldr	r3, [pc, #56]	; (8002bf0 <HAL_Init+0x40>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a0d      	ldr	r2, [pc, #52]	; (8002bf0 <HAL_Init+0x40>)
 8002bba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <HAL_Init+0x40>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a0a      	ldr	r2, [pc, #40]	; (8002bf0 <HAL_Init+0x40>)
 8002bc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bcc:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <HAL_Init+0x40>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a07      	ldr	r2, [pc, #28]	; (8002bf0 <HAL_Init+0x40>)
 8002bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bd8:	2003      	movs	r0, #3
 8002bda:	f000 fe27 	bl	800382c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bde:	200f      	movs	r0, #15
 8002be0:	f000 f808 	bl	8002bf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002be4:	f7ff fbe0 	bl	80023a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40023c00 	.word	0x40023c00

08002bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bfc:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <HAL_InitTick+0x54>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <HAL_InitTick+0x58>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	4619      	mov	r1, r3
 8002c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 fe51 	bl	80038ba <HAL_SYSTICK_Config>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e00e      	b.n	8002c40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b0f      	cmp	r3, #15
 8002c26:	d80a      	bhi.n	8002c3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c28:	2200      	movs	r2, #0
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c30:	f000 fe07 	bl	8003842 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c34:	4a06      	ldr	r2, [pc, #24]	; (8002c50 <HAL_InitTick+0x5c>)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	e000      	b.n	8002c40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	2000000c 	.word	0x2000000c
 8002c4c:	20000014 	.word	0x20000014
 8002c50:	20000010 	.word	0x20000010

08002c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c58:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <HAL_IncTick+0x20>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <HAL_IncTick+0x24>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4413      	add	r3, r2
 8002c64:	4a04      	ldr	r2, [pc, #16]	; (8002c78 <HAL_IncTick+0x24>)
 8002c66:	6013      	str	r3, [r2, #0]
}
 8002c68:	bf00      	nop
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	20000014 	.word	0x20000014
 8002c78:	2000098c 	.word	0x2000098c

08002c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c80:	4b03      	ldr	r3, [pc, #12]	; (8002c90 <HAL_GetTick+0x14>)
 8002c82:	681b      	ldr	r3, [r3, #0]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	2000098c 	.word	0x2000098c

08002c94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c9c:	f7ff ffee 	bl	8002c7c <HAL_GetTick>
 8002ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cac:	d005      	beq.n	8002cba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cae:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <HAL_Delay+0x44>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cba:	bf00      	nop
 8002cbc:	f7ff ffde 	bl	8002c7c <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d8f7      	bhi.n	8002cbc <HAL_Delay+0x28>
  {
  }
}
 8002ccc:	bf00      	nop
 8002cce:	bf00      	nop
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	20000014 	.word	0x20000014

08002cdc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002ce0:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <HAL_SuspendTick+0x1c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a04      	ldr	r2, [pc, #16]	; (8002cf8 <HAL_SuspendTick+0x1c>)
 8002ce6:	f023 0302 	bic.w	r3, r3, #2
 8002cea:	6013      	str	r3, [r2, #0]
}
 8002cec:	bf00      	nop
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	e000e010 	.word	0xe000e010

08002cfc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002d00:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <HAL_ResumeTick+0x1c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a04      	ldr	r2, [pc, #16]	; (8002d18 <HAL_ResumeTick+0x1c>)
 8002d06:	f043 0302 	orr.w	r3, r3, #2
 8002d0a:	6013      	str	r3, [r2, #0]
}
 8002d0c:	bf00      	nop
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	e000e010 	.word	0xe000e010

08002d1c <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002d20:	4b03      	ldr	r3, [pc, #12]	; (8002d30 <HAL_GetUIDw0+0x14>)
 8002d22:	681b      	ldr	r3, [r3, #0]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	1fff7a10 	.word	0x1fff7a10

08002d34 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002d38:	4b03      	ldr	r3, [pc, #12]	; (8002d48 <HAL_GetUIDw1+0x14>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	1fff7a14 	.word	0x1fff7a14

08002d4c <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002d50:	4b03      	ldr	r3, [pc, #12]	; (8002d60 <HAL_GetUIDw2+0x14>)
 8002d52:	681b      	ldr	r3, [r3, #0]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	1fff7a18 	.word	0x1fff7a18

08002d64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e033      	b.n	8002de2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d109      	bne.n	8002d96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7ff fb38 	bl	80023f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	f003 0310 	and.w	r3, r3, #16
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d118      	bne.n	8002dd4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002daa:	f023 0302 	bic.w	r3, r3, #2
 8002dae:	f043 0202 	orr.w	r2, r3, #2
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 faec 	bl	8003394 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	f023 0303 	bic.w	r3, r3, #3
 8002dca:	f043 0201 	orr.w	r2, r3, #1
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	641a      	str	r2, [r3, #64]	; 0x40
 8002dd2:	e001      	b.n	8002dd8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b084      	sub	sp, #16
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e022      	b.n	8002e46 <HAL_ADC_DeInit+0x5c>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	f043 0202 	orr.w	r2, r3, #2
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689a      	ldr	r2, [r3, #8]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0201 	bic.w	r2, r2, #1
 8002e1a:	609a      	str	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d108      	bne.n	8002e3c <HAL_ADC_DeInit+0x52>

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7ff fb28 	bl	8002480 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_ADC_Start+0x1a>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e097      	b.n	8002f9a <HAL_ADC_Start+0x14a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d018      	beq.n	8002eb2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e90:	4b45      	ldr	r3, [pc, #276]	; (8002fa8 <HAL_ADC_Start+0x158>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a45      	ldr	r2, [pc, #276]	; (8002fac <HAL_ADC_Start+0x15c>)
 8002e96:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9a:	0c9a      	lsrs	r2, r3, #18
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	4413      	add	r3, r2
 8002ea2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002ea4:	e002      	b.n	8002eac <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f9      	bne.n	8002ea6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d15f      	bne.n	8002f80 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ec8:	f023 0301 	bic.w	r3, r3, #1
 8002ecc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d007      	beq.n	8002ef2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002eea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002efe:	d106      	bne.n	8002f0e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f04:	f023 0206 	bic.w	r2, r3, #6
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	645a      	str	r2, [r3, #68]	; 0x44
 8002f0c:	e002      	b.n	8002f14 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f1c:	4b24      	ldr	r3, [pc, #144]	; (8002fb0 <HAL_ADC_Start+0x160>)
 8002f1e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002f28:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f003 031f 	and.w	r3, r3, #31
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10f      	bne.n	8002f56 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d129      	bne.n	8002f98 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	e020      	b.n	8002f98 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a16      	ldr	r2, [pc, #88]	; (8002fb4 <HAL_ADC_Start+0x164>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d11b      	bne.n	8002f98 <HAL_ADC_Start+0x148>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d114      	bne.n	8002f98 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f7c:	609a      	str	r2, [r3, #8]
 8002f7e:	e00b      	b.n	8002f98 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	f043 0210 	orr.w	r2, r3, #16
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f90:	f043 0201 	orr.w	r2, r3, #1
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	2000000c 	.word	0x2000000c
 8002fac:	431bde83 	.word	0x431bde83
 8002fb0:	40012300 	.word	0x40012300
 8002fb4:	40012000 	.word	0x40012000

08002fb8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <HAL_ADC_Stop+0x16>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e021      	b.n	8003012 <HAL_ADC_Stop+0x5a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0201 	bic.w	r2, r2, #1
 8002fe4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d109      	bne.n	8003008 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ffc:	f023 0301 	bic.w	r3, r3, #1
 8003000:	f043 0201 	orr.w	r2, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b084      	sub	sp, #16
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
 8003026:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003028:	2300      	movs	r3, #0
 800302a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800303a:	d113      	bne.n	8003064 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800304a:	d10b      	bne.n	8003064 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	f043 0220 	orr.w	r2, r3, #32
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e063      	b.n	800312c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003064:	f7ff fe0a 	bl	8002c7c <HAL_GetTick>
 8003068:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800306a:	e021      	b.n	80030b0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003072:	d01d      	beq.n	80030b0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d007      	beq.n	800308a <HAL_ADC_PollForConversion+0x6c>
 800307a:	f7ff fdff 	bl	8002c7c <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d212      	bcs.n	80030b0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b02      	cmp	r3, #2
 8003096:	d00b      	beq.n	80030b0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	f043 0204 	orr.w	r2, r3, #4
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e03d      	b.n	800312c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d1d6      	bne.n	800306c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f06f 0212 	mvn.w	r2, #18
 80030c6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d123      	bne.n	800312a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d11f      	bne.n	800312a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d006      	beq.n	8003106 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003102:	2b00      	cmp	r3, #0
 8003104:	d111      	bne.n	800312a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d105      	bne.n	800312a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	f043 0201 	orr.w	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003142:	4618      	mov	r0, r3
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
	...

08003150 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800315a:	2300      	movs	r3, #0
 800315c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003164:	2b01      	cmp	r3, #1
 8003166:	d101      	bne.n	800316c <HAL_ADC_ConfigChannel+0x1c>
 8003168:	2302      	movs	r3, #2
 800316a:	e105      	b.n	8003378 <HAL_ADC_ConfigChannel+0x228>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2b09      	cmp	r3, #9
 800317a:	d925      	bls.n	80031c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68d9      	ldr	r1, [r3, #12]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	b29b      	uxth	r3, r3
 8003188:	461a      	mov	r2, r3
 800318a:	4613      	mov	r3, r2
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	4413      	add	r3, r2
 8003190:	3b1e      	subs	r3, #30
 8003192:	2207      	movs	r2, #7
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	43da      	mvns	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	400a      	ands	r2, r1
 80031a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68d9      	ldr	r1, [r3, #12]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	4618      	mov	r0, r3
 80031b4:	4603      	mov	r3, r0
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	4403      	add	r3, r0
 80031ba:	3b1e      	subs	r3, #30
 80031bc:	409a      	lsls	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	60da      	str	r2, [r3, #12]
 80031c6:	e022      	b.n	800320e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6919      	ldr	r1, [r3, #16]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	461a      	mov	r2, r3
 80031d6:	4613      	mov	r3, r2
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	4413      	add	r3, r2
 80031dc:	2207      	movs	r2, #7
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	43da      	mvns	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	400a      	ands	r2, r1
 80031ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6919      	ldr	r1, [r3, #16]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	689a      	ldr	r2, [r3, #8]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	4618      	mov	r0, r3
 80031fe:	4603      	mov	r3, r0
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	4403      	add	r3, r0
 8003204:	409a      	lsls	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b06      	cmp	r3, #6
 8003214:	d824      	bhi.n	8003260 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	4613      	mov	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	3b05      	subs	r3, #5
 8003228:	221f      	movs	r2, #31
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	43da      	mvns	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	400a      	ands	r2, r1
 8003236:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	b29b      	uxth	r3, r3
 8003244:	4618      	mov	r0, r3
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	3b05      	subs	r3, #5
 8003252:	fa00 f203 	lsl.w	r2, r0, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	635a      	str	r2, [r3, #52]	; 0x34
 800325e:	e04c      	b.n	80032fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2b0c      	cmp	r3, #12
 8003266:	d824      	bhi.n	80032b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	3b23      	subs	r3, #35	; 0x23
 800327a:	221f      	movs	r2, #31
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43da      	mvns	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	400a      	ands	r2, r1
 8003288:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	b29b      	uxth	r3, r3
 8003296:	4618      	mov	r0, r3
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	3b23      	subs	r3, #35	; 0x23
 80032a4:	fa00 f203 	lsl.w	r2, r0, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	631a      	str	r2, [r3, #48]	; 0x30
 80032b0:	e023      	b.n	80032fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4413      	add	r3, r2
 80032c2:	3b41      	subs	r3, #65	; 0x41
 80032c4:	221f      	movs	r2, #31
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43da      	mvns	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	400a      	ands	r2, r1
 80032d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	4618      	mov	r0, r3
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	3b41      	subs	r3, #65	; 0x41
 80032ee:	fa00 f203 	lsl.w	r2, r0, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032fa:	4b22      	ldr	r3, [pc, #136]	; (8003384 <HAL_ADC_ConfigChannel+0x234>)
 80032fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a21      	ldr	r2, [pc, #132]	; (8003388 <HAL_ADC_ConfigChannel+0x238>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d109      	bne.n	800331c <HAL_ADC_ConfigChannel+0x1cc>
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b12      	cmp	r3, #18
 800330e:	d105      	bne.n	800331c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a19      	ldr	r2, [pc, #100]	; (8003388 <HAL_ADC_ConfigChannel+0x238>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d123      	bne.n	800336e <HAL_ADC_ConfigChannel+0x21e>
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b10      	cmp	r3, #16
 800332c:	d003      	beq.n	8003336 <HAL_ADC_ConfigChannel+0x1e6>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b11      	cmp	r3, #17
 8003334:	d11b      	bne.n	800336e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b10      	cmp	r3, #16
 8003348:	d111      	bne.n	800336e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800334a:	4b10      	ldr	r3, [pc, #64]	; (800338c <HAL_ADC_ConfigChannel+0x23c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a10      	ldr	r2, [pc, #64]	; (8003390 <HAL_ADC_ConfigChannel+0x240>)
 8003350:	fba2 2303 	umull	r2, r3, r2, r3
 8003354:	0c9a      	lsrs	r2, r3, #18
 8003356:	4613      	mov	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003360:	e002      	b.n	8003368 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	3b01      	subs	r3, #1
 8003366:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f9      	bne.n	8003362 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	40012300 	.word	0x40012300
 8003388:	40012000 	.word	0x40012000
 800338c:	2000000c 	.word	0x2000000c
 8003390:	431bde83 	.word	0x431bde83

08003394 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800339c:	4b79      	ldr	r3, [pc, #484]	; (8003584 <ADC_Init+0x1f0>)
 800339e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	431a      	orrs	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6859      	ldr	r1, [r3, #4]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	021a      	lsls	r2, r3, #8
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80033ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6859      	ldr	r1, [r3, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800340e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6899      	ldr	r1, [r3, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68da      	ldr	r2, [r3, #12]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003426:	4a58      	ldr	r2, [pc, #352]	; (8003588 <ADC_Init+0x1f4>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d022      	beq.n	8003472 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800343a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6899      	ldr	r1, [r3, #8]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800345c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6899      	ldr	r1, [r3, #8]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	609a      	str	r2, [r3, #8]
 8003470:	e00f      	b.n	8003492 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003480:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003490:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0202 	bic.w	r2, r2, #2
 80034a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6899      	ldr	r1, [r3, #8]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	7e1b      	ldrb	r3, [r3, #24]
 80034ac:	005a      	lsls	r2, r3, #1
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d01b      	beq.n	80034f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80034de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6859      	ldr	r1, [r3, #4]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	3b01      	subs	r3, #1
 80034ec:	035a      	lsls	r2, r3, #13
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	605a      	str	r2, [r3, #4]
 80034f6:	e007      	b.n	8003508 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003506:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003516:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	3b01      	subs	r3, #1
 8003524:	051a      	lsls	r2, r3, #20
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800353c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6899      	ldr	r1, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800354a:	025a      	lsls	r2, r3, #9
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003562:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6899      	ldr	r1, [r3, #8]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	029a      	lsls	r2, r3, #10
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	609a      	str	r2, [r3, #8]
}
 8003578:	bf00      	nop
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	40012300 	.word	0x40012300
 8003588:	0f000001 	.word	0x0f000001

0800358c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e031      	b.n	8003608 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035ac:	4b19      	ldr	r3, [pc, #100]	; (8003614 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f023 021f 	bic.w	r2, r3, #31
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	431a      	orrs	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	431a      	orrs	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	431a      	orrs	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	40012300 	.word	0x40012300

08003618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003628:	4b0c      	ldr	r3, [pc, #48]	; (800365c <__NVIC_SetPriorityGrouping+0x44>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003634:	4013      	ands	r3, r2
 8003636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800364a:	4a04      	ldr	r2, [pc, #16]	; (800365c <__NVIC_SetPriorityGrouping+0x44>)
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	60d3      	str	r3, [r2, #12]
}
 8003650:	bf00      	nop
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	e000ed00 	.word	0xe000ed00

08003660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003664:	4b04      	ldr	r3, [pc, #16]	; (8003678 <__NVIC_GetPriorityGrouping+0x18>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	0a1b      	lsrs	r3, r3, #8
 800366a:	f003 0307 	and.w	r3, r3, #7
}
 800366e:	4618      	mov	r0, r3
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr
 8003678:	e000ed00 	.word	0xe000ed00

0800367c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	4603      	mov	r3, r0
 8003684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368a:	2b00      	cmp	r3, #0
 800368c:	db0b      	blt.n	80036a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800368e:	79fb      	ldrb	r3, [r7, #7]
 8003690:	f003 021f 	and.w	r2, r3, #31
 8003694:	4907      	ldr	r1, [pc, #28]	; (80036b4 <__NVIC_EnableIRQ+0x38>)
 8003696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800369a:	095b      	lsrs	r3, r3, #5
 800369c:	2001      	movs	r0, #1
 800369e:	fa00 f202 	lsl.w	r2, r0, r2
 80036a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	e000e100 	.word	0xe000e100

080036b8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	db12      	blt.n	80036f0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	f003 021f 	and.w	r2, r3, #31
 80036d0:	490a      	ldr	r1, [pc, #40]	; (80036fc <__NVIC_DisableIRQ+0x44>)
 80036d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d6:	095b      	lsrs	r3, r3, #5
 80036d8:	2001      	movs	r0, #1
 80036da:	fa00 f202 	lsl.w	r2, r0, r2
 80036de:	3320      	adds	r3, #32
 80036e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80036e4:	f3bf 8f4f 	dsb	sy
}
 80036e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80036ea:	f3bf 8f6f 	isb	sy
}
 80036ee:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	e000e100 	.word	0xe000e100

08003700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	4603      	mov	r3, r0
 8003708:	6039      	str	r1, [r7, #0]
 800370a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800370c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003710:	2b00      	cmp	r3, #0
 8003712:	db0a      	blt.n	800372a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	b2da      	uxtb	r2, r3
 8003718:	490c      	ldr	r1, [pc, #48]	; (800374c <__NVIC_SetPriority+0x4c>)
 800371a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371e:	0112      	lsls	r2, r2, #4
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	440b      	add	r3, r1
 8003724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003728:	e00a      	b.n	8003740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	b2da      	uxtb	r2, r3
 800372e:	4908      	ldr	r1, [pc, #32]	; (8003750 <__NVIC_SetPriority+0x50>)
 8003730:	79fb      	ldrb	r3, [r7, #7]
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	3b04      	subs	r3, #4
 8003738:	0112      	lsls	r2, r2, #4
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	440b      	add	r3, r1
 800373e:	761a      	strb	r2, [r3, #24]
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	e000e100 	.word	0xe000e100
 8003750:	e000ed00 	.word	0xe000ed00

08003754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003754:	b480      	push	{r7}
 8003756:	b089      	sub	sp, #36	; 0x24
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	f1c3 0307 	rsb	r3, r3, #7
 800376e:	2b04      	cmp	r3, #4
 8003770:	bf28      	it	cs
 8003772:	2304      	movcs	r3, #4
 8003774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	3304      	adds	r3, #4
 800377a:	2b06      	cmp	r3, #6
 800377c:	d902      	bls.n	8003784 <NVIC_EncodePriority+0x30>
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	3b03      	subs	r3, #3
 8003782:	e000      	b.n	8003786 <NVIC_EncodePriority+0x32>
 8003784:	2300      	movs	r3, #0
 8003786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003788:	f04f 32ff 	mov.w	r2, #4294967295
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	43da      	mvns	r2, r3
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	401a      	ands	r2, r3
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800379c:	f04f 31ff 	mov.w	r1, #4294967295
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	fa01 f303 	lsl.w	r3, r1, r3
 80037a6:	43d9      	mvns	r1, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037ac:	4313      	orrs	r3, r2
         );
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3724      	adds	r7, #36	; 0x24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
	...

080037bc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80037c0:	f3bf 8f4f 	dsb	sy
}
 80037c4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80037c6:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <__NVIC_SystemReset+0x24>)
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80037ce:	4904      	ldr	r1, [pc, #16]	; (80037e0 <__NVIC_SystemReset+0x24>)
 80037d0:	4b04      	ldr	r3, [pc, #16]	; (80037e4 <__NVIC_SystemReset+0x28>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80037d6:	f3bf 8f4f 	dsb	sy
}
 80037da:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80037dc:	bf00      	nop
 80037de:	e7fd      	b.n	80037dc <__NVIC_SystemReset+0x20>
 80037e0:	e000ed00 	.word	0xe000ed00
 80037e4:	05fa0004 	.word	0x05fa0004

080037e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037f8:	d301      	bcc.n	80037fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037fa:	2301      	movs	r3, #1
 80037fc:	e00f      	b.n	800381e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037fe:	4a0a      	ldr	r2, [pc, #40]	; (8003828 <SysTick_Config+0x40>)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3b01      	subs	r3, #1
 8003804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003806:	210f      	movs	r1, #15
 8003808:	f04f 30ff 	mov.w	r0, #4294967295
 800380c:	f7ff ff78 	bl	8003700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003810:	4b05      	ldr	r3, [pc, #20]	; (8003828 <SysTick_Config+0x40>)
 8003812:	2200      	movs	r2, #0
 8003814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003816:	4b04      	ldr	r3, [pc, #16]	; (8003828 <SysTick_Config+0x40>)
 8003818:	2207      	movs	r2, #7
 800381a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	e000e010 	.word	0xe000e010

0800382c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7ff feef 	bl	8003618 <__NVIC_SetPriorityGrouping>
}
 800383a:	bf00      	nop
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003842:	b580      	push	{r7, lr}
 8003844:	b086      	sub	sp, #24
 8003846:	af00      	add	r7, sp, #0
 8003848:	4603      	mov	r3, r0
 800384a:	60b9      	str	r1, [r7, #8]
 800384c:	607a      	str	r2, [r7, #4]
 800384e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003850:	2300      	movs	r3, #0
 8003852:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003854:	f7ff ff04 	bl	8003660 <__NVIC_GetPriorityGrouping>
 8003858:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	68b9      	ldr	r1, [r7, #8]
 800385e:	6978      	ldr	r0, [r7, #20]
 8003860:	f7ff ff78 	bl	8003754 <NVIC_EncodePriority>
 8003864:	4602      	mov	r2, r0
 8003866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800386a:	4611      	mov	r1, r2
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff ff47 	bl	8003700 <__NVIC_SetPriority>
}
 8003872:	bf00      	nop
 8003874:	3718      	adds	r7, #24
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b082      	sub	sp, #8
 800387e:	af00      	add	r7, sp, #0
 8003880:	4603      	mov	r3, r0
 8003882:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff fef7 	bl	800367c <__NVIC_EnableIRQ>
}
 800388e:	bf00      	nop
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b082      	sub	sp, #8
 800389a:	af00      	add	r7, sp, #0
 800389c:	4603      	mov	r3, r0
 800389e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80038a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff ff07 	bl	80036b8 <__NVIC_DisableIRQ>
}
 80038aa:	bf00      	nop
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80038b6:	f7ff ff81 	bl	80037bc <__NVIC_SystemReset>

080038ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b082      	sub	sp, #8
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7ff ff90 	bl	80037e8 <SysTick_Config>
 80038c8:	4603      	mov	r3, r0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b084      	sub	sp, #16
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038de:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80038e0:	f7ff f9cc 	bl	8002c7c <HAL_GetTick>
 80038e4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d008      	beq.n	8003904 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2280      	movs	r2, #128	; 0x80
 80038f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e052      	b.n	80039aa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 0216 	bic.w	r2, r2, #22
 8003912:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695a      	ldr	r2, [r3, #20]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003922:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	2b00      	cmp	r3, #0
 800392a:	d103      	bne.n	8003934 <HAL_DMA_Abort+0x62>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003930:	2b00      	cmp	r3, #0
 8003932:	d007      	beq.n	8003944 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0208 	bic.w	r2, r2, #8
 8003942:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0201 	bic.w	r2, r2, #1
 8003952:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003954:	e013      	b.n	800397e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003956:	f7ff f991 	bl	8002c7c <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b05      	cmp	r3, #5
 8003962:	d90c      	bls.n	800397e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2220      	movs	r2, #32
 8003968:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2203      	movs	r2, #3
 800396e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e015      	b.n	80039aa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1e4      	bne.n	8003956 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003990:	223f      	movs	r2, #63	; 0x3f
 8003992:	409a      	lsls	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d004      	beq.n	80039d0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2280      	movs	r2, #128	; 0x80
 80039ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e00c      	b.n	80039ea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2205      	movs	r2, #5
 80039d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0201 	bic.w	r2, r2, #1
 80039e6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
	...

080039f8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003a0a:	4b23      	ldr	r3, [pc, #140]	; (8003a98 <HAL_FLASH_Program+0xa0>)
 8003a0c:	7e1b      	ldrb	r3, [r3, #24]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d101      	bne.n	8003a16 <HAL_FLASH_Program+0x1e>
 8003a12:	2302      	movs	r3, #2
 8003a14:	e03b      	b.n	8003a8e <HAL_FLASH_Program+0x96>
 8003a16:	4b20      	ldr	r3, [pc, #128]	; (8003a98 <HAL_FLASH_Program+0xa0>)
 8003a18:	2201      	movs	r2, #1
 8003a1a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003a1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a20:	f000 f87c 	bl	8003b1c <FLASH_WaitForLastOperation>
 8003a24:	4603      	mov	r3, r0
 8003a26:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003a28:	7dfb      	ldrb	r3, [r7, #23]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d12b      	bne.n	8003a86 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d105      	bne.n	8003a40 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003a34:	783b      	ldrb	r3, [r7, #0]
 8003a36:	4619      	mov	r1, r3
 8003a38:	68b8      	ldr	r0, [r7, #8]
 8003a3a:	f000 f927 	bl	8003c8c <FLASH_Program_Byte>
 8003a3e:	e016      	b.n	8003a6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d105      	bne.n	8003a52 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003a46:	883b      	ldrh	r3, [r7, #0]
 8003a48:	4619      	mov	r1, r3
 8003a4a:	68b8      	ldr	r0, [r7, #8]
 8003a4c:	f000 f8fa 	bl	8003c44 <FLASH_Program_HalfWord>
 8003a50:	e00d      	b.n	8003a6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d105      	bne.n	8003a64 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	68b8      	ldr	r0, [r7, #8]
 8003a5e:	f000 f8cf 	bl	8003c00 <FLASH_Program_Word>
 8003a62:	e004      	b.n	8003a6e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a68:	68b8      	ldr	r0, [r7, #8]
 8003a6a:	f000 f897 	bl	8003b9c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003a6e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a72:	f000 f853 	bl	8003b1c <FLASH_WaitForLastOperation>
 8003a76:	4603      	mov	r3, r0
 8003a78:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003a7a:	4b08      	ldr	r3, [pc, #32]	; (8003a9c <HAL_FLASH_Program+0xa4>)
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	4a07      	ldr	r2, [pc, #28]	; (8003a9c <HAL_FLASH_Program+0xa4>)
 8003a80:	f023 0301 	bic.w	r3, r3, #1
 8003a84:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003a86:	4b04      	ldr	r3, [pc, #16]	; (8003a98 <HAL_FLASH_Program+0xa0>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	20000990 	.word	0x20000990
 8003a9c:	40023c00 	.word	0x40023c00

08003aa0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003aaa:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <HAL_FLASH_Unlock+0x38>)
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	da0b      	bge.n	8003aca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003ab2:	4b09      	ldr	r3, [pc, #36]	; (8003ad8 <HAL_FLASH_Unlock+0x38>)
 8003ab4:	4a09      	ldr	r2, [pc, #36]	; (8003adc <HAL_FLASH_Unlock+0x3c>)
 8003ab6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003ab8:	4b07      	ldr	r3, [pc, #28]	; (8003ad8 <HAL_FLASH_Unlock+0x38>)
 8003aba:	4a09      	ldr	r2, [pc, #36]	; (8003ae0 <HAL_FLASH_Unlock+0x40>)
 8003abc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003abe:	4b06      	ldr	r3, [pc, #24]	; (8003ad8 <HAL_FLASH_Unlock+0x38>)
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	da01      	bge.n	8003aca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003aca:	79fb      	ldrb	r3, [r7, #7]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	40023c00 	.word	0x40023c00
 8003adc:	45670123 	.word	0x45670123
 8003ae0:	cdef89ab 	.word	0xcdef89ab

08003ae4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003ae8:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <HAL_FLASH_Lock+0x1c>)
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	4a04      	ldr	r2, [pc, #16]	; (8003b00 <HAL_FLASH_Lock+0x1c>)
 8003aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003af2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	40023c00 	.word	0x40023c00

08003b04 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8003b08:	4b03      	ldr	r3, [pc, #12]	; (8003b18 <HAL_FLASH_GetError+0x14>)
 8003b0a:	69db      	ldr	r3, [r3, #28]
}  
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	20000990 	.word	0x20000990

08003b1c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b24:	2300      	movs	r3, #0
 8003b26:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003b28:	4b1a      	ldr	r3, [pc, #104]	; (8003b94 <FLASH_WaitForLastOperation+0x78>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003b2e:	f7ff f8a5 	bl	8002c7c <HAL_GetTick>
 8003b32:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003b34:	e010      	b.n	8003b58 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3c:	d00c      	beq.n	8003b58 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d007      	beq.n	8003b54 <FLASH_WaitForLastOperation+0x38>
 8003b44:	f7ff f89a 	bl	8002c7c <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d201      	bcs.n	8003b58 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e019      	b.n	8003b8c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003b58:	4b0f      	ldr	r3, [pc, #60]	; (8003b98 <FLASH_WaitForLastOperation+0x7c>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1e8      	bne.n	8003b36 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003b64:	4b0c      	ldr	r3, [pc, #48]	; (8003b98 <FLASH_WaitForLastOperation+0x7c>)
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d002      	beq.n	8003b76 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003b70:	4b09      	ldr	r3, [pc, #36]	; (8003b98 <FLASH_WaitForLastOperation+0x7c>)
 8003b72:	2201      	movs	r2, #1
 8003b74:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003b76:	4b08      	ldr	r3, [pc, #32]	; (8003b98 <FLASH_WaitForLastOperation+0x7c>)
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003b82:	f000 f8a5 	bl	8003cd0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e000      	b.n	8003b8c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
  
}  
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	20000990 	.word	0x20000990
 8003b98:	40023c00 	.word	0x40023c00

08003b9c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003ba8:	4b14      	ldr	r3, [pc, #80]	; (8003bfc <FLASH_Program_DoubleWord+0x60>)
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	4a13      	ldr	r2, [pc, #76]	; (8003bfc <FLASH_Program_DoubleWord+0x60>)
 8003bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003bb4:	4b11      	ldr	r3, [pc, #68]	; (8003bfc <FLASH_Program_DoubleWord+0x60>)
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	4a10      	ldr	r2, [pc, #64]	; (8003bfc <FLASH_Program_DoubleWord+0x60>)
 8003bba:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003bbe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003bc0:	4b0e      	ldr	r3, [pc, #56]	; (8003bfc <FLASH_Program_DoubleWord+0x60>)
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	4a0d      	ldr	r2, [pc, #52]	; (8003bfc <FLASH_Program_DoubleWord+0x60>)
 8003bc6:	f043 0301 	orr.w	r3, r3, #1
 8003bca:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003bd2:	f3bf 8f6f 	isb	sy
}
 8003bd6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003bd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	000a      	movs	r2, r1
 8003be6:	2300      	movs	r3, #0
 8003be8:	68f9      	ldr	r1, [r7, #12]
 8003bea:	3104      	adds	r1, #4
 8003bec:	4613      	mov	r3, r2
 8003bee:	600b      	str	r3, [r1, #0]
}
 8003bf0:	bf00      	nop
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	40023c00 	.word	0x40023c00

08003c00 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003c0a:	4b0d      	ldr	r3, [pc, #52]	; (8003c40 <FLASH_Program_Word+0x40>)
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	4a0c      	ldr	r2, [pc, #48]	; (8003c40 <FLASH_Program_Word+0x40>)
 8003c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c14:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003c16:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <FLASH_Program_Word+0x40>)
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	4a09      	ldr	r2, [pc, #36]	; (8003c40 <FLASH_Program_Word+0x40>)
 8003c1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c20:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003c22:	4b07      	ldr	r3, [pc, #28]	; (8003c40 <FLASH_Program_Word+0x40>)
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	4a06      	ldr	r2, [pc, #24]	; (8003c40 <FLASH_Program_Word+0x40>)
 8003c28:	f043 0301 	orr.w	r3, r3, #1
 8003c2c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	601a      	str	r2, [r3, #0]
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	40023c00 	.word	0x40023c00

08003c44 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003c50:	4b0d      	ldr	r3, [pc, #52]	; (8003c88 <FLASH_Program_HalfWord+0x44>)
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	4a0c      	ldr	r2, [pc, #48]	; (8003c88 <FLASH_Program_HalfWord+0x44>)
 8003c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003c5c:	4b0a      	ldr	r3, [pc, #40]	; (8003c88 <FLASH_Program_HalfWord+0x44>)
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	4a09      	ldr	r2, [pc, #36]	; (8003c88 <FLASH_Program_HalfWord+0x44>)
 8003c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003c68:	4b07      	ldr	r3, [pc, #28]	; (8003c88 <FLASH_Program_HalfWord+0x44>)
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	4a06      	ldr	r2, [pc, #24]	; (8003c88 <FLASH_Program_HalfWord+0x44>)
 8003c6e:	f043 0301 	orr.w	r3, r3, #1
 8003c72:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	887a      	ldrh	r2, [r7, #2]
 8003c78:	801a      	strh	r2, [r3, #0]
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40023c00 	.word	0x40023c00

08003c8c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	460b      	mov	r3, r1
 8003c96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003c98:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <FLASH_Program_Byte+0x40>)
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	4a0b      	ldr	r2, [pc, #44]	; (8003ccc <FLASH_Program_Byte+0x40>)
 8003c9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ca2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003ca4:	4b09      	ldr	r3, [pc, #36]	; (8003ccc <FLASH_Program_Byte+0x40>)
 8003ca6:	4a09      	ldr	r2, [pc, #36]	; (8003ccc <FLASH_Program_Byte+0x40>)
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003cac:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <FLASH_Program_Byte+0x40>)
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	4a06      	ldr	r2, [pc, #24]	; (8003ccc <FLASH_Program_Byte+0x40>)
 8003cb2:	f043 0301 	orr.w	r3, r3, #1
 8003cb6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	78fa      	ldrb	r2, [r7, #3]
 8003cbc:	701a      	strb	r2, [r3, #0]
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	40023c00 	.word	0x40023c00

08003cd0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003cd4:	4b2f      	ldr	r3, [pc, #188]	; (8003d94 <FLASH_SetErrorCode+0xc4>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f003 0310 	and.w	r3, r3, #16
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003ce0:	4b2d      	ldr	r3, [pc, #180]	; (8003d98 <FLASH_SetErrorCode+0xc8>)
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	f043 0310 	orr.w	r3, r3, #16
 8003ce8:	4a2b      	ldr	r2, [pc, #172]	; (8003d98 <FLASH_SetErrorCode+0xc8>)
 8003cea:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003cec:	4b29      	ldr	r3, [pc, #164]	; (8003d94 <FLASH_SetErrorCode+0xc4>)
 8003cee:	2210      	movs	r2, #16
 8003cf0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003cf2:	4b28      	ldr	r3, [pc, #160]	; (8003d94 <FLASH_SetErrorCode+0xc4>)
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d008      	beq.n	8003d10 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003cfe:	4b26      	ldr	r3, [pc, #152]	; (8003d98 <FLASH_SetErrorCode+0xc8>)
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	f043 0308 	orr.w	r3, r3, #8
 8003d06:	4a24      	ldr	r2, [pc, #144]	; (8003d98 <FLASH_SetErrorCode+0xc8>)
 8003d08:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003d0a:	4b22      	ldr	r3, [pc, #136]	; (8003d94 <FLASH_SetErrorCode+0xc4>)
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003d10:	4b20      	ldr	r3, [pc, #128]	; (8003d94 <FLASH_SetErrorCode+0xc4>)
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d008      	beq.n	8003d2e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003d1c:	4b1e      	ldr	r3, [pc, #120]	; (8003d98 <FLASH_SetErrorCode+0xc8>)
 8003d1e:	69db      	ldr	r3, [r3, #28]
 8003d20:	f043 0304 	orr.w	r3, r3, #4
 8003d24:	4a1c      	ldr	r2, [pc, #112]	; (8003d98 <FLASH_SetErrorCode+0xc8>)
 8003d26:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003d28:	4b1a      	ldr	r3, [pc, #104]	; (8003d94 <FLASH_SetErrorCode+0xc4>)
 8003d2a:	2240      	movs	r2, #64	; 0x40
 8003d2c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003d2e:	4b19      	ldr	r3, [pc, #100]	; (8003d94 <FLASH_SetErrorCode+0xc4>)
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d008      	beq.n	8003d4c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003d3a:	4b17      	ldr	r3, [pc, #92]	; (8003d98 <FLASH_SetErrorCode+0xc8>)
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	f043 0302 	orr.w	r3, r3, #2
 8003d42:	4a15      	ldr	r2, [pc, #84]	; (8003d98 <FLASH_SetErrorCode+0xc8>)
 8003d44:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003d46:	4b13      	ldr	r3, [pc, #76]	; (8003d94 <FLASH_SetErrorCode+0xc4>)
 8003d48:	2280      	movs	r2, #128	; 0x80
 8003d4a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003d4c:	4b11      	ldr	r3, [pc, #68]	; (8003d94 <FLASH_SetErrorCode+0xc4>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d009      	beq.n	8003d6c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003d58:	4b0f      	ldr	r3, [pc, #60]	; (8003d98 <FLASH_SetErrorCode+0xc8>)
 8003d5a:	69db      	ldr	r3, [r3, #28]
 8003d5c:	f043 0301 	orr.w	r3, r3, #1
 8003d60:	4a0d      	ldr	r2, [pc, #52]	; (8003d98 <FLASH_SetErrorCode+0xc8>)
 8003d62:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8003d64:	4b0b      	ldr	r3, [pc, #44]	; (8003d94 <FLASH_SetErrorCode+0xc4>)
 8003d66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d6a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003d6c:	4b09      	ldr	r3, [pc, #36]	; (8003d94 <FLASH_SetErrorCode+0xc4>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d008      	beq.n	8003d8a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003d78:	4b07      	ldr	r3, [pc, #28]	; (8003d98 <FLASH_SetErrorCode+0xc8>)
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	f043 0320 	orr.w	r3, r3, #32
 8003d80:	4a05      	ldr	r2, [pc, #20]	; (8003d98 <FLASH_SetErrorCode+0xc8>)
 8003d82:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003d84:	4b03      	ldr	r3, [pc, #12]	; (8003d94 <FLASH_SetErrorCode+0xc4>)
 8003d86:	2202      	movs	r2, #2
 8003d88:	60da      	str	r2, [r3, #12]
  }
}
 8003d8a:	bf00      	nop
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	40023c00 	.word	0x40023c00
 8003d98:	20000990 	.word	0x20000990

08003d9c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003dae:	4b31      	ldr	r3, [pc, #196]	; (8003e74 <HAL_FLASHEx_Erase+0xd8>)
 8003db0:	7e1b      	ldrb	r3, [r3, #24]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d101      	bne.n	8003dba <HAL_FLASHEx_Erase+0x1e>
 8003db6:	2302      	movs	r3, #2
 8003db8:	e058      	b.n	8003e6c <HAL_FLASHEx_Erase+0xd0>
 8003dba:	4b2e      	ldr	r3, [pc, #184]	; (8003e74 <HAL_FLASHEx_Erase+0xd8>)
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003dc0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003dc4:	f7ff feaa 	bl	8003b1c <FLASH_WaitForLastOperation>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003dcc:	7bfb      	ldrb	r3, [r7, #15]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d148      	bne.n	8003e64 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d115      	bne.n	8003e0e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	4619      	mov	r1, r3
 8003dee:	4610      	mov	r0, r2
 8003df0:	f000 f844 	bl	8003e7c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003df4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003df8:	f7ff fe90 	bl	8003b1c <FLASH_WaitForLastOperation>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003e00:	4b1d      	ldr	r3, [pc, #116]	; (8003e78 <HAL_FLASHEx_Erase+0xdc>)
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	4a1c      	ldr	r2, [pc, #112]	; (8003e78 <HAL_FLASHEx_Erase+0xdc>)
 8003e06:	f023 0304 	bic.w	r3, r3, #4
 8003e0a:	6113      	str	r3, [r2, #16]
 8003e0c:	e028      	b.n	8003e60 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	60bb      	str	r3, [r7, #8]
 8003e14:	e01c      	b.n	8003e50 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	68b8      	ldr	r0, [r7, #8]
 8003e20:	f000 f850 	bl	8003ec4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e24:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e28:	f7ff fe78 	bl	8003b1c <FLASH_WaitForLastOperation>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003e30:	4b11      	ldr	r3, [pc, #68]	; (8003e78 <HAL_FLASHEx_Erase+0xdc>)
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	4a10      	ldr	r2, [pc, #64]	; (8003e78 <HAL_FLASHEx_Erase+0xdc>)
 8003e36:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8003e3a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	601a      	str	r2, [r3, #0]
          break;
 8003e48:	e00a      	b.n	8003e60 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	60bb      	str	r3, [r7, #8]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68da      	ldr	r2, [r3, #12]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	4413      	add	r3, r2
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d3da      	bcc.n	8003e16 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003e60:	f000 f878 	bl	8003f54 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003e64:	4b03      	ldr	r3, [pc, #12]	; (8003e74 <HAL_FLASHEx_Erase+0xd8>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	761a      	strb	r2, [r3, #24]

  return status;
 8003e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	20000990 	.word	0x20000990
 8003e78:	40023c00 	.word	0x40023c00

08003e7c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	4603      	mov	r3, r0
 8003e84:	6039      	str	r1, [r7, #0]
 8003e86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003e88:	4b0d      	ldr	r3, [pc, #52]	; (8003ec0 <FLASH_MassErase+0x44>)
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	4a0c      	ldr	r2, [pc, #48]	; (8003ec0 <FLASH_MassErase+0x44>)
 8003e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8003e94:	4b0a      	ldr	r3, [pc, #40]	; (8003ec0 <FLASH_MassErase+0x44>)
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	4a09      	ldr	r2, [pc, #36]	; (8003ec0 <FLASH_MassErase+0x44>)
 8003e9a:	f043 0304 	orr.w	r3, r3, #4
 8003e9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8003ea0:	4b07      	ldr	r3, [pc, #28]	; (8003ec0 <FLASH_MassErase+0x44>)
 8003ea2:	691a      	ldr	r2, [r3, #16]
 8003ea4:	79fb      	ldrb	r3, [r7, #7]
 8003ea6:	021b      	lsls	r3, r3, #8
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	4a05      	ldr	r2, [pc, #20]	; (8003ec0 <FLASH_MassErase+0x44>)
 8003eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb0:	6113      	str	r3, [r2, #16]
}
 8003eb2:	bf00      	nop
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	40023c00 	.word	0x40023c00

08003ec4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003ed4:	78fb      	ldrb	r3, [r7, #3]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d102      	bne.n	8003ee0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003eda:	2300      	movs	r3, #0
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	e010      	b.n	8003f02 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003ee0:	78fb      	ldrb	r3, [r7, #3]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d103      	bne.n	8003eee <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003ee6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	e009      	b.n	8003f02 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003eee:	78fb      	ldrb	r3, [r7, #3]
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d103      	bne.n	8003efc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003ef4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	e002      	b.n	8003f02 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003efc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f00:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003f02:	4b13      	ldr	r3, [pc, #76]	; (8003f50 <FLASH_Erase_Sector+0x8c>)
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	4a12      	ldr	r2, [pc, #72]	; (8003f50 <FLASH_Erase_Sector+0x8c>)
 8003f08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f0c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003f0e:	4b10      	ldr	r3, [pc, #64]	; (8003f50 <FLASH_Erase_Sector+0x8c>)
 8003f10:	691a      	ldr	r2, [r3, #16]
 8003f12:	490f      	ldr	r1, [pc, #60]	; (8003f50 <FLASH_Erase_Sector+0x8c>)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003f1a:	4b0d      	ldr	r3, [pc, #52]	; (8003f50 <FLASH_Erase_Sector+0x8c>)
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	4a0c      	ldr	r2, [pc, #48]	; (8003f50 <FLASH_Erase_Sector+0x8c>)
 8003f20:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003f24:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003f26:	4b0a      	ldr	r3, [pc, #40]	; (8003f50 <FLASH_Erase_Sector+0x8c>)
 8003f28:	691a      	ldr	r2, [r3, #16]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	00db      	lsls	r3, r3, #3
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	4a07      	ldr	r2, [pc, #28]	; (8003f50 <FLASH_Erase_Sector+0x8c>)
 8003f32:	f043 0302 	orr.w	r3, r3, #2
 8003f36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003f38:	4b05      	ldr	r3, [pc, #20]	; (8003f50 <FLASH_Erase_Sector+0x8c>)
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	4a04      	ldr	r2, [pc, #16]	; (8003f50 <FLASH_Erase_Sector+0x8c>)
 8003f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f42:	6113      	str	r3, [r2, #16]
}
 8003f44:	bf00      	nop
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	40023c00 	.word	0x40023c00

08003f54 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8003f58:	4b20      	ldr	r3, [pc, #128]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d017      	beq.n	8003f94 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003f64:	4b1d      	ldr	r3, [pc, #116]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a1c      	ldr	r2, [pc, #112]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003f6a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f6e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003f70:	4b1a      	ldr	r3, [pc, #104]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a19      	ldr	r2, [pc, #100]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003f76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f7a:	6013      	str	r3, [r2, #0]
 8003f7c:	4b17      	ldr	r3, [pc, #92]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a16      	ldr	r2, [pc, #88]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003f82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f86:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f88:	4b14      	ldr	r3, [pc, #80]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a13      	ldr	r2, [pc, #76]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003f8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f92:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003f94:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d017      	beq.n	8003fd0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003fa0:	4b0e      	ldr	r3, [pc, #56]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a0d      	ldr	r2, [pc, #52]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003fa6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003faa:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003fac:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a0a      	ldr	r2, [pc, #40]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003fb2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003fb6:	6013      	str	r3, [r2, #0]
 8003fb8:	4b08      	ldr	r3, [pc, #32]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a07      	ldr	r2, [pc, #28]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003fbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fc2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003fc4:	4b05      	ldr	r3, [pc, #20]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a04      	ldr	r2, [pc, #16]	; (8003fdc <FLASH_FlushCaches+0x88>)
 8003fca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fce:	6013      	str	r3, [r2, #0]
  }
}
 8003fd0:	bf00      	nop
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40023c00 	.word	0x40023c00

08003fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b089      	sub	sp, #36	; 0x24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61fb      	str	r3, [r7, #28]
 8003ffa:	e159      	b.n	80042b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	4013      	ands	r3, r2
 800400e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	429a      	cmp	r2, r3
 8004016:	f040 8148 	bne.w	80042aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	2b01      	cmp	r3, #1
 8004024:	d005      	beq.n	8004032 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800402e:	2b02      	cmp	r3, #2
 8004030:	d130      	bne.n	8004094 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	2203      	movs	r2, #3
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	43db      	mvns	r3, r3
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	4013      	ands	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	4313      	orrs	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004068:	2201      	movs	r2, #1
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	fa02 f303 	lsl.w	r3, r2, r3
 8004070:	43db      	mvns	r3, r3
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	4013      	ands	r3, r2
 8004076:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	091b      	lsrs	r3, r3, #4
 800407e:	f003 0201 	and.w	r2, r3, #1
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	4313      	orrs	r3, r2
 800408c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f003 0303 	and.w	r3, r3, #3
 800409c:	2b03      	cmp	r3, #3
 800409e:	d017      	beq.n	80040d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	2203      	movs	r2, #3
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	43db      	mvns	r3, r3
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	4013      	ands	r3, r2
 80040b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	fa02 f303 	lsl.w	r3, r2, r3
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f003 0303 	and.w	r3, r3, #3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d123      	bne.n	8004124 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	08da      	lsrs	r2, r3, #3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3208      	adds	r2, #8
 80040e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	220f      	movs	r2, #15
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	43db      	mvns	r3, r3
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	4013      	ands	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	691a      	ldr	r2, [r3, #16]
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	4313      	orrs	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	08da      	lsrs	r2, r3, #3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	3208      	adds	r2, #8
 800411e:	69b9      	ldr	r1, [r7, #24]
 8004120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	2203      	movs	r2, #3
 8004130:	fa02 f303 	lsl.w	r3, r2, r3
 8004134:	43db      	mvns	r3, r3
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	4013      	ands	r3, r2
 800413a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f003 0203 	and.w	r2, r3, #3
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	4313      	orrs	r3, r2
 8004150:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 80a2 	beq.w	80042aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004166:	2300      	movs	r3, #0
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	4b57      	ldr	r3, [pc, #348]	; (80042c8 <HAL_GPIO_Init+0x2e8>)
 800416c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416e:	4a56      	ldr	r2, [pc, #344]	; (80042c8 <HAL_GPIO_Init+0x2e8>)
 8004170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004174:	6453      	str	r3, [r2, #68]	; 0x44
 8004176:	4b54      	ldr	r3, [pc, #336]	; (80042c8 <HAL_GPIO_Init+0x2e8>)
 8004178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004182:	4a52      	ldr	r2, [pc, #328]	; (80042cc <HAL_GPIO_Init+0x2ec>)
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	089b      	lsrs	r3, r3, #2
 8004188:	3302      	adds	r3, #2
 800418a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800418e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	220f      	movs	r2, #15
 800419a:	fa02 f303 	lsl.w	r3, r2, r3
 800419e:	43db      	mvns	r3, r3
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	4013      	ands	r3, r2
 80041a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a49      	ldr	r2, [pc, #292]	; (80042d0 <HAL_GPIO_Init+0x2f0>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d019      	beq.n	80041e2 <HAL_GPIO_Init+0x202>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a48      	ldr	r2, [pc, #288]	; (80042d4 <HAL_GPIO_Init+0x2f4>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d013      	beq.n	80041de <HAL_GPIO_Init+0x1fe>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a47      	ldr	r2, [pc, #284]	; (80042d8 <HAL_GPIO_Init+0x2f8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d00d      	beq.n	80041da <HAL_GPIO_Init+0x1fa>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a46      	ldr	r2, [pc, #280]	; (80042dc <HAL_GPIO_Init+0x2fc>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d007      	beq.n	80041d6 <HAL_GPIO_Init+0x1f6>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a45      	ldr	r2, [pc, #276]	; (80042e0 <HAL_GPIO_Init+0x300>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d101      	bne.n	80041d2 <HAL_GPIO_Init+0x1f2>
 80041ce:	2304      	movs	r3, #4
 80041d0:	e008      	b.n	80041e4 <HAL_GPIO_Init+0x204>
 80041d2:	2307      	movs	r3, #7
 80041d4:	e006      	b.n	80041e4 <HAL_GPIO_Init+0x204>
 80041d6:	2303      	movs	r3, #3
 80041d8:	e004      	b.n	80041e4 <HAL_GPIO_Init+0x204>
 80041da:	2302      	movs	r3, #2
 80041dc:	e002      	b.n	80041e4 <HAL_GPIO_Init+0x204>
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <HAL_GPIO_Init+0x204>
 80041e2:	2300      	movs	r3, #0
 80041e4:	69fa      	ldr	r2, [r7, #28]
 80041e6:	f002 0203 	and.w	r2, r2, #3
 80041ea:	0092      	lsls	r2, r2, #2
 80041ec:	4093      	lsls	r3, r2
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041f4:	4935      	ldr	r1, [pc, #212]	; (80042cc <HAL_GPIO_Init+0x2ec>)
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	089b      	lsrs	r3, r3, #2
 80041fa:	3302      	adds	r3, #2
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004202:	4b38      	ldr	r3, [pc, #224]	; (80042e4 <HAL_GPIO_Init+0x304>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	43db      	mvns	r3, r3
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	4013      	ands	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004226:	4a2f      	ldr	r2, [pc, #188]	; (80042e4 <HAL_GPIO_Init+0x304>)
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800422c:	4b2d      	ldr	r3, [pc, #180]	; (80042e4 <HAL_GPIO_Init+0x304>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	43db      	mvns	r3, r3
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	4013      	ands	r3, r2
 800423a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d003      	beq.n	8004250 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	4313      	orrs	r3, r2
 800424e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004250:	4a24      	ldr	r2, [pc, #144]	; (80042e4 <HAL_GPIO_Init+0x304>)
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004256:	4b23      	ldr	r3, [pc, #140]	; (80042e4 <HAL_GPIO_Init+0x304>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	43db      	mvns	r3, r3
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	4013      	ands	r3, r2
 8004264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	4313      	orrs	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800427a:	4a1a      	ldr	r2, [pc, #104]	; (80042e4 <HAL_GPIO_Init+0x304>)
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004280:	4b18      	ldr	r3, [pc, #96]	; (80042e4 <HAL_GPIO_Init+0x304>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	43db      	mvns	r3, r3
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	4013      	ands	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042a4:	4a0f      	ldr	r2, [pc, #60]	; (80042e4 <HAL_GPIO_Init+0x304>)
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	3301      	adds	r3, #1
 80042ae:	61fb      	str	r3, [r7, #28]
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	2b0f      	cmp	r3, #15
 80042b4:	f67f aea2 	bls.w	8003ffc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042b8:	bf00      	nop
 80042ba:	bf00      	nop
 80042bc:	3724      	adds	r7, #36	; 0x24
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40023800 	.word	0x40023800
 80042cc:	40013800 	.word	0x40013800
 80042d0:	40020000 	.word	0x40020000
 80042d4:	40020400 	.word	0x40020400
 80042d8:	40020800 	.word	0x40020800
 80042dc:	40020c00 	.word	0x40020c00
 80042e0:	40021000 	.word	0x40021000
 80042e4:	40013c00 	.word	0x40013c00

080042e8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80042f6:	2300      	movs	r3, #0
 80042f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042fe:	2300      	movs	r3, #0
 8004300:	617b      	str	r3, [r7, #20]
 8004302:	e0bb      	b.n	800447c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004304:	2201      	movs	r2, #1
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	4013      	ands	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	429a      	cmp	r2, r3
 800431c:	f040 80ab 	bne.w	8004476 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004320:	4a5c      	ldr	r2, [pc, #368]	; (8004494 <HAL_GPIO_DeInit+0x1ac>)
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	089b      	lsrs	r3, r3, #2
 8004326:	3302      	adds	r3, #2
 8004328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800432c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f003 0303 	and.w	r3, r3, #3
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	220f      	movs	r2, #15
 8004338:	fa02 f303 	lsl.w	r3, r2, r3
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	4013      	ands	r3, r2
 8004340:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a54      	ldr	r2, [pc, #336]	; (8004498 <HAL_GPIO_DeInit+0x1b0>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d019      	beq.n	800437e <HAL_GPIO_DeInit+0x96>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a53      	ldr	r2, [pc, #332]	; (800449c <HAL_GPIO_DeInit+0x1b4>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d013      	beq.n	800437a <HAL_GPIO_DeInit+0x92>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a52      	ldr	r2, [pc, #328]	; (80044a0 <HAL_GPIO_DeInit+0x1b8>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d00d      	beq.n	8004376 <HAL_GPIO_DeInit+0x8e>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a51      	ldr	r2, [pc, #324]	; (80044a4 <HAL_GPIO_DeInit+0x1bc>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d007      	beq.n	8004372 <HAL_GPIO_DeInit+0x8a>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a50      	ldr	r2, [pc, #320]	; (80044a8 <HAL_GPIO_DeInit+0x1c0>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d101      	bne.n	800436e <HAL_GPIO_DeInit+0x86>
 800436a:	2304      	movs	r3, #4
 800436c:	e008      	b.n	8004380 <HAL_GPIO_DeInit+0x98>
 800436e:	2307      	movs	r3, #7
 8004370:	e006      	b.n	8004380 <HAL_GPIO_DeInit+0x98>
 8004372:	2303      	movs	r3, #3
 8004374:	e004      	b.n	8004380 <HAL_GPIO_DeInit+0x98>
 8004376:	2302      	movs	r3, #2
 8004378:	e002      	b.n	8004380 <HAL_GPIO_DeInit+0x98>
 800437a:	2301      	movs	r3, #1
 800437c:	e000      	b.n	8004380 <HAL_GPIO_DeInit+0x98>
 800437e:	2300      	movs	r3, #0
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	f002 0203 	and.w	r2, r2, #3
 8004386:	0092      	lsls	r2, r2, #2
 8004388:	4093      	lsls	r3, r2
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	429a      	cmp	r2, r3
 800438e:	d132      	bne.n	80043f6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004390:	4b46      	ldr	r3, [pc, #280]	; (80044ac <HAL_GPIO_DeInit+0x1c4>)
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	43db      	mvns	r3, r3
 8004398:	4944      	ldr	r1, [pc, #272]	; (80044ac <HAL_GPIO_DeInit+0x1c4>)
 800439a:	4013      	ands	r3, r2
 800439c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800439e:	4b43      	ldr	r3, [pc, #268]	; (80044ac <HAL_GPIO_DeInit+0x1c4>)
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	43db      	mvns	r3, r3
 80043a6:	4941      	ldr	r1, [pc, #260]	; (80044ac <HAL_GPIO_DeInit+0x1c4>)
 80043a8:	4013      	ands	r3, r2
 80043aa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80043ac:	4b3f      	ldr	r3, [pc, #252]	; (80044ac <HAL_GPIO_DeInit+0x1c4>)
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	43db      	mvns	r3, r3
 80043b4:	493d      	ldr	r1, [pc, #244]	; (80044ac <HAL_GPIO_DeInit+0x1c4>)
 80043b6:	4013      	ands	r3, r2
 80043b8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80043ba:	4b3c      	ldr	r3, [pc, #240]	; (80044ac <HAL_GPIO_DeInit+0x1c4>)
 80043bc:	689a      	ldr	r2, [r3, #8]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	43db      	mvns	r3, r3
 80043c2:	493a      	ldr	r1, [pc, #232]	; (80044ac <HAL_GPIO_DeInit+0x1c4>)
 80043c4:	4013      	ands	r3, r2
 80043c6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	220f      	movs	r2, #15
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80043d8:	4a2e      	ldr	r2, [pc, #184]	; (8004494 <HAL_GPIO_DeInit+0x1ac>)
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	089b      	lsrs	r3, r3, #2
 80043de:	3302      	adds	r3, #2
 80043e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	43da      	mvns	r2, r3
 80043e8:	482a      	ldr	r0, [pc, #168]	; (8004494 <HAL_GPIO_DeInit+0x1ac>)
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	089b      	lsrs	r3, r3, #2
 80043ee:	400a      	ands	r2, r1
 80043f0:	3302      	adds	r3, #2
 80043f2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	2103      	movs	r1, #3
 8004400:	fa01 f303 	lsl.w	r3, r1, r3
 8004404:	43db      	mvns	r3, r3
 8004406:	401a      	ands	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	08da      	lsrs	r2, r3, #3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3208      	adds	r2, #8
 8004414:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f003 0307 	and.w	r3, r3, #7
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	220f      	movs	r2, #15
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	43db      	mvns	r3, r3
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	08d2      	lsrs	r2, r2, #3
 800442c:	4019      	ands	r1, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	3208      	adds	r2, #8
 8004432:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	2103      	movs	r1, #3
 8004440:	fa01 f303 	lsl.w	r3, r1, r3
 8004444:	43db      	mvns	r3, r3
 8004446:	401a      	ands	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	2101      	movs	r1, #1
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	fa01 f303 	lsl.w	r3, r1, r3
 8004458:	43db      	mvns	r3, r3
 800445a:	401a      	ands	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	2103      	movs	r1, #3
 800446a:	fa01 f303 	lsl.w	r3, r1, r3
 800446e:	43db      	mvns	r3, r3
 8004470:	401a      	ands	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	3301      	adds	r3, #1
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2b0f      	cmp	r3, #15
 8004480:	f67f af40 	bls.w	8004304 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004484:	bf00      	nop
 8004486:	bf00      	nop
 8004488:	371c      	adds	r7, #28
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40013800 	.word	0x40013800
 8004498:	40020000 	.word	0x40020000
 800449c:	40020400 	.word	0x40020400
 80044a0:	40020800 	.word	0x40020800
 80044a4:	40020c00 	.word	0x40020c00
 80044a8:	40021000 	.word	0x40021000
 80044ac:	40013c00 	.word	0x40013c00

080044b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	460b      	mov	r3, r1
 80044ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	691a      	ldr	r2, [r3, #16]
 80044c0:	887b      	ldrh	r3, [r7, #2]
 80044c2:	4013      	ands	r3, r2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d002      	beq.n	80044ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044c8:	2301      	movs	r3, #1
 80044ca:	73fb      	strb	r3, [r7, #15]
 80044cc:	e001      	b.n	80044d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044ce:	2300      	movs	r3, #0
 80044d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	460b      	mov	r3, r1
 80044ea:	807b      	strh	r3, [r7, #2]
 80044ec:	4613      	mov	r3, r2
 80044ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044f0:	787b      	ldrb	r3, [r7, #1]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044f6:	887a      	ldrh	r2, [r7, #2]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044fc:	e003      	b.n	8004506 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044fe:	887b      	ldrh	r3, [r7, #2]
 8004500:	041a      	lsls	r2, r3, #16
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	619a      	str	r2, [r3, #24]
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
	...

08004514 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	4603      	mov	r3, r0
 800451c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800451e:	4b08      	ldr	r3, [pc, #32]	; (8004540 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004520:	695a      	ldr	r2, [r3, #20]
 8004522:	88fb      	ldrh	r3, [r7, #6]
 8004524:	4013      	ands	r3, r2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d006      	beq.n	8004538 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800452a:	4a05      	ldr	r2, [pc, #20]	; (8004540 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800452c:	88fb      	ldrh	r3, [r7, #6]
 800452e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004530:	88fb      	ldrh	r3, [r7, #6]
 8004532:	4618      	mov	r0, r3
 8004534:	f7fd fece 	bl	80022d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004538:	bf00      	nop
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	40013c00 	.word	0x40013c00

08004544 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e12b      	b.n	80047ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d106      	bne.n	8004570 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7fd ffa6 	bl	80024bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2224      	movs	r2, #36	; 0x24
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 0201 	bic.w	r2, r2, #1
 8004586:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004596:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80045a8:	f003 f822 	bl	80075f0 <HAL_RCC_GetPCLK1Freq>
 80045ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	4a81      	ldr	r2, [pc, #516]	; (80047b8 <HAL_I2C_Init+0x274>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d807      	bhi.n	80045c8 <HAL_I2C_Init+0x84>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4a80      	ldr	r2, [pc, #512]	; (80047bc <HAL_I2C_Init+0x278>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	bf94      	ite	ls
 80045c0:	2301      	movls	r3, #1
 80045c2:	2300      	movhi	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	e006      	b.n	80045d6 <HAL_I2C_Init+0x92>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4a7d      	ldr	r2, [pc, #500]	; (80047c0 <HAL_I2C_Init+0x27c>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	bf94      	ite	ls
 80045d0:	2301      	movls	r3, #1
 80045d2:	2300      	movhi	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e0e7      	b.n	80047ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	4a78      	ldr	r2, [pc, #480]	; (80047c4 <HAL_I2C_Init+0x280>)
 80045e2:	fba2 2303 	umull	r2, r3, r2, r3
 80045e6:	0c9b      	lsrs	r3, r3, #18
 80045e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	4a6a      	ldr	r2, [pc, #424]	; (80047b8 <HAL_I2C_Init+0x274>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d802      	bhi.n	8004618 <HAL_I2C_Init+0xd4>
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	3301      	adds	r3, #1
 8004616:	e009      	b.n	800462c <HAL_I2C_Init+0xe8>
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800461e:	fb02 f303 	mul.w	r3, r2, r3
 8004622:	4a69      	ldr	r2, [pc, #420]	; (80047c8 <HAL_I2C_Init+0x284>)
 8004624:	fba2 2303 	umull	r2, r3, r2, r3
 8004628:	099b      	lsrs	r3, r3, #6
 800462a:	3301      	adds	r3, #1
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6812      	ldr	r2, [r2, #0]
 8004630:	430b      	orrs	r3, r1
 8004632:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800463e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	495c      	ldr	r1, [pc, #368]	; (80047b8 <HAL_I2C_Init+0x274>)
 8004648:	428b      	cmp	r3, r1
 800464a:	d819      	bhi.n	8004680 <HAL_I2C_Init+0x13c>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	1e59      	subs	r1, r3, #1
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	fbb1 f3f3 	udiv	r3, r1, r3
 800465a:	1c59      	adds	r1, r3, #1
 800465c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004660:	400b      	ands	r3, r1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00a      	beq.n	800467c <HAL_I2C_Init+0x138>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	1e59      	subs	r1, r3, #1
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	fbb1 f3f3 	udiv	r3, r1, r3
 8004674:	3301      	adds	r3, #1
 8004676:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800467a:	e051      	b.n	8004720 <HAL_I2C_Init+0x1dc>
 800467c:	2304      	movs	r3, #4
 800467e:	e04f      	b.n	8004720 <HAL_I2C_Init+0x1dc>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d111      	bne.n	80046ac <HAL_I2C_Init+0x168>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	1e58      	subs	r0, r3, #1
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6859      	ldr	r1, [r3, #4]
 8004690:	460b      	mov	r3, r1
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	440b      	add	r3, r1
 8004696:	fbb0 f3f3 	udiv	r3, r0, r3
 800469a:	3301      	adds	r3, #1
 800469c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	bf0c      	ite	eq
 80046a4:	2301      	moveq	r3, #1
 80046a6:	2300      	movne	r3, #0
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	e012      	b.n	80046d2 <HAL_I2C_Init+0x18e>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	1e58      	subs	r0, r3, #1
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6859      	ldr	r1, [r3, #4]
 80046b4:	460b      	mov	r3, r1
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	0099      	lsls	r1, r3, #2
 80046bc:	440b      	add	r3, r1
 80046be:	fbb0 f3f3 	udiv	r3, r0, r3
 80046c2:	3301      	adds	r3, #1
 80046c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	bf0c      	ite	eq
 80046cc:	2301      	moveq	r3, #1
 80046ce:	2300      	movne	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <HAL_I2C_Init+0x196>
 80046d6:	2301      	movs	r3, #1
 80046d8:	e022      	b.n	8004720 <HAL_I2C_Init+0x1dc>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10e      	bne.n	8004700 <HAL_I2C_Init+0x1bc>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	1e58      	subs	r0, r3, #1
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6859      	ldr	r1, [r3, #4]
 80046ea:	460b      	mov	r3, r1
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	440b      	add	r3, r1
 80046f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80046f4:	3301      	adds	r3, #1
 80046f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046fe:	e00f      	b.n	8004720 <HAL_I2C_Init+0x1dc>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	1e58      	subs	r0, r3, #1
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6859      	ldr	r1, [r3, #4]
 8004708:	460b      	mov	r3, r1
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	0099      	lsls	r1, r3, #2
 8004710:	440b      	add	r3, r1
 8004712:	fbb0 f3f3 	udiv	r3, r0, r3
 8004716:	3301      	adds	r3, #1
 8004718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800471c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004720:	6879      	ldr	r1, [r7, #4]
 8004722:	6809      	ldr	r1, [r1, #0]
 8004724:	4313      	orrs	r3, r2
 8004726:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69da      	ldr	r2, [r3, #28]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800474e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6911      	ldr	r1, [r2, #16]
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	68d2      	ldr	r2, [r2, #12]
 800475a:	4311      	orrs	r1, r2
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6812      	ldr	r2, [r2, #0]
 8004760:	430b      	orrs	r3, r1
 8004762:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	695a      	ldr	r2, [r3, #20]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f042 0201 	orr.w	r2, r2, #1
 800478e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2220      	movs	r2, #32
 800479a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	000186a0 	.word	0x000186a0
 80047bc:	001e847f 	.word	0x001e847f
 80047c0:	003d08ff 	.word	0x003d08ff
 80047c4:	431bde83 	.word	0x431bde83
 80047c8:	10624dd3 	.word	0x10624dd3

080047cc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e021      	b.n	8004822 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2224      	movs	r2, #36	; 0x24
 80047e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 0201 	bic.w	r2, r2, #1
 80047f4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7fd fea8 	bl	800254c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
	...

0800482c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b088      	sub	sp, #32
 8004830:	af02      	add	r7, sp, #8
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	607a      	str	r2, [r7, #4]
 8004836:	461a      	mov	r2, r3
 8004838:	460b      	mov	r3, r1
 800483a:	817b      	strh	r3, [r7, #10]
 800483c:	4613      	mov	r3, r2
 800483e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004840:	f7fe fa1c 	bl	8002c7c <HAL_GetTick>
 8004844:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b20      	cmp	r3, #32
 8004850:	f040 80e0 	bne.w	8004a14 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	2319      	movs	r3, #25
 800485a:	2201      	movs	r2, #1
 800485c:	4970      	ldr	r1, [pc, #448]	; (8004a20 <HAL_I2C_Master_Transmit+0x1f4>)
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 fd86 	bl	8005370 <I2C_WaitOnFlagUntilTimeout>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800486a:	2302      	movs	r3, #2
 800486c:	e0d3      	b.n	8004a16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004874:	2b01      	cmp	r3, #1
 8004876:	d101      	bne.n	800487c <HAL_I2C_Master_Transmit+0x50>
 8004878:	2302      	movs	r3, #2
 800487a:	e0cc      	b.n	8004a16 <HAL_I2C_Master_Transmit+0x1ea>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b01      	cmp	r3, #1
 8004890:	d007      	beq.n	80048a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f042 0201 	orr.w	r2, r2, #1
 80048a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2221      	movs	r2, #33	; 0x21
 80048b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2210      	movs	r2, #16
 80048be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	893a      	ldrh	r2, [r7, #8]
 80048d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d8:	b29a      	uxth	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	4a50      	ldr	r2, [pc, #320]	; (8004a24 <HAL_I2C_Master_Transmit+0x1f8>)
 80048e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80048e4:	8979      	ldrh	r1, [r7, #10]
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	6a3a      	ldr	r2, [r7, #32]
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f000 fbf0 	bl	80050d0 <I2C_MasterRequestWrite>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e08d      	b.n	8004a16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048fa:	2300      	movs	r3, #0
 80048fc:	613b      	str	r3, [r7, #16]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	613b      	str	r3, [r7, #16]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	613b      	str	r3, [r7, #16]
 800490e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004910:	e066      	b.n	80049e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	6a39      	ldr	r1, [r7, #32]
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 fe00 	bl	800551c <I2C_WaitOnTXEFlagUntilTimeout>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00d      	beq.n	800493e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	2b04      	cmp	r3, #4
 8004928:	d107      	bne.n	800493a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004938:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e06b      	b.n	8004a16 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	781a      	ldrb	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	1c5a      	adds	r2, r3, #1
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004958:	b29b      	uxth	r3, r3
 800495a:	3b01      	subs	r3, #1
 800495c:	b29a      	uxth	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004966:	3b01      	subs	r3, #1
 8004968:	b29a      	uxth	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b04      	cmp	r3, #4
 800497a:	d11b      	bne.n	80049b4 <HAL_I2C_Master_Transmit+0x188>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004980:	2b00      	cmp	r3, #0
 8004982:	d017      	beq.n	80049b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	781a      	ldrb	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004994:	1c5a      	adds	r2, r3, #1
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499e:	b29b      	uxth	r3, r3
 80049a0:	3b01      	subs	r3, #1
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	6a39      	ldr	r1, [r7, #32]
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 fdf0 	bl	800559e <I2C_WaitOnBTFFlagUntilTimeout>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00d      	beq.n	80049e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c8:	2b04      	cmp	r3, #4
 80049ca:	d107      	bne.n	80049dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e01a      	b.n	8004a16 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d194      	bne.n	8004912 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2220      	movs	r2, #32
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a10:	2300      	movs	r3, #0
 8004a12:	e000      	b.n	8004a16 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004a14:	2302      	movs	r3, #2
  }
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3718      	adds	r7, #24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	00100002 	.word	0x00100002
 8004a24:	ffff0000 	.word	0xffff0000

08004a28 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b08c      	sub	sp, #48	; 0x30
 8004a2c:	af02      	add	r7, sp, #8
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	607a      	str	r2, [r7, #4]
 8004a32:	461a      	mov	r2, r3
 8004a34:	460b      	mov	r3, r1
 8004a36:	817b      	strh	r3, [r7, #10]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a3c:	f7fe f91e 	bl	8002c7c <HAL_GetTick>
 8004a40:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b20      	cmp	r3, #32
 8004a4c:	f040 820b 	bne.w	8004e66 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	2319      	movs	r3, #25
 8004a56:	2201      	movs	r2, #1
 8004a58:	497c      	ldr	r1, [pc, #496]	; (8004c4c <HAL_I2C_Master_Receive+0x224>)
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f000 fc88 	bl	8005370 <I2C_WaitOnFlagUntilTimeout>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004a66:	2302      	movs	r3, #2
 8004a68:	e1fe      	b.n	8004e68 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d101      	bne.n	8004a78 <HAL_I2C_Master_Receive+0x50>
 8004a74:	2302      	movs	r3, #2
 8004a76:	e1f7      	b.n	8004e68 <HAL_I2C_Master_Receive+0x440>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d007      	beq.n	8004a9e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f042 0201 	orr.w	r2, r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2222      	movs	r2, #34	; 0x22
 8004ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2210      	movs	r2, #16
 8004aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	893a      	ldrh	r2, [r7, #8]
 8004ace:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4a5c      	ldr	r2, [pc, #368]	; (8004c50 <HAL_I2C_Master_Receive+0x228>)
 8004ade:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004ae0:	8979      	ldrh	r1, [r7, #10]
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f000 fb74 	bl	80051d4 <I2C_MasterRequestRead>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e1b8      	b.n	8004e68 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d113      	bne.n	8004b26 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004afe:	2300      	movs	r3, #0
 8004b00:	623b      	str	r3, [r7, #32]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	623b      	str	r3, [r7, #32]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	623b      	str	r3, [r7, #32]
 8004b12:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	e18c      	b.n	8004e40 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d11b      	bne.n	8004b66 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b3e:	2300      	movs	r3, #0
 8004b40:	61fb      	str	r3, [r7, #28]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	61fb      	str	r3, [r7, #28]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	61fb      	str	r3, [r7, #28]
 8004b52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b62:	601a      	str	r2, [r3, #0]
 8004b64:	e16c      	b.n	8004e40 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d11b      	bne.n	8004ba6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b7c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b8e:	2300      	movs	r3, #0
 8004b90:	61bb      	str	r3, [r7, #24]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	61bb      	str	r3, [r7, #24]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	61bb      	str	r3, [r7, #24]
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	e14c      	b.n	8004e40 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	617b      	str	r3, [r7, #20]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	617b      	str	r3, [r7, #20]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	617b      	str	r3, [r7, #20]
 8004bca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004bcc:	e138      	b.n	8004e40 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	f200 80f1 	bhi.w	8004dba <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d123      	bne.n	8004c28 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 fd1b 	bl	8005620 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e139      	b.n	8004e68 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	691a      	ldr	r2, [r3, #16]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfe:	b2d2      	uxtb	r2, r2
 8004c00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c10:	3b01      	subs	r3, #1
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c26:	e10b      	b.n	8004e40 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d14e      	bne.n	8004cce <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c36:	2200      	movs	r2, #0
 8004c38:	4906      	ldr	r1, [pc, #24]	; (8004c54 <HAL_I2C_Master_Receive+0x22c>)
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 fb98 	bl	8005370 <I2C_WaitOnFlagUntilTimeout>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d008      	beq.n	8004c58 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e10e      	b.n	8004e68 <HAL_I2C_Master_Receive+0x440>
 8004c4a:	bf00      	nop
 8004c4c:	00100002 	.word	0x00100002
 8004c50:	ffff0000 	.word	0xffff0000
 8004c54:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	691a      	ldr	r2, [r3, #16]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	b2d2      	uxtb	r2, r2
 8004c74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	1c5a      	adds	r2, r3, #1
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c84:	3b01      	subs	r3, #1
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	3b01      	subs	r3, #1
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	691a      	ldr	r2, [r3, #16]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	b2d2      	uxtb	r2, r2
 8004ca6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	1c5a      	adds	r2, r3, #1
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ccc:	e0b8      	b.n	8004e40 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	4966      	ldr	r1, [pc, #408]	; (8004e70 <HAL_I2C_Master_Receive+0x448>)
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f000 fb49 	bl	8005370 <I2C_WaitOnFlagUntilTimeout>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e0bf      	b.n	8004e68 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	691a      	ldr	r2, [r3, #16]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	b2d2      	uxtb	r2, r2
 8004d04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d14:	3b01      	subs	r3, #1
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	3b01      	subs	r3, #1
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d30:	2200      	movs	r2, #0
 8004d32:	494f      	ldr	r1, [pc, #316]	; (8004e70 <HAL_I2C_Master_Receive+0x448>)
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f000 fb1b 	bl	8005370 <I2C_WaitOnFlagUntilTimeout>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e091      	b.n	8004e68 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	691a      	ldr	r2, [r3, #16]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	b2d2      	uxtb	r2, r2
 8004d60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	1c5a      	adds	r2, r3, #1
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d70:	3b01      	subs	r3, #1
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	691a      	ldr	r2, [r3, #16]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d90:	b2d2      	uxtb	r2, r2
 8004d92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	1c5a      	adds	r2, r3, #1
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004db8:	e042      	b.n	8004e40 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 fc2e 	bl	8005620 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e04c      	b.n	8004e68 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	691a      	ldr	r2, [r3, #16]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd8:	b2d2      	uxtb	r2, r2
 8004dda:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	1c5a      	adds	r2, r3, #1
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	f003 0304 	and.w	r3, r3, #4
 8004e0a:	2b04      	cmp	r3, #4
 8004e0c:	d118      	bne.n	8004e40 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	691a      	ldr	r2, [r3, #16]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	1c5a      	adds	r2, r3, #1
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f47f aec2 	bne.w	8004bce <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e62:	2300      	movs	r3, #0
 8004e64:	e000      	b.n	8004e68 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004e66:	2302      	movs	r3, #2
  }
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3728      	adds	r7, #40	; 0x28
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	00010004 	.word	0x00010004

08004e74 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b08a      	sub	sp, #40	; 0x28
 8004e78:	af02      	add	r7, sp, #8
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	607a      	str	r2, [r7, #4]
 8004e7e:	603b      	str	r3, [r7, #0]
 8004e80:	460b      	mov	r3, r1
 8004e82:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004e84:	f7fd fefa 	bl	8002c7c <HAL_GetTick>
 8004e88:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b20      	cmp	r3, #32
 8004e98:	f040 8111 	bne.w	80050be <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	2319      	movs	r3, #25
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	4988      	ldr	r1, [pc, #544]	; (80050c8 <HAL_I2C_IsDeviceReady+0x254>)
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 fa62 	bl	8005370 <I2C_WaitOnFlagUntilTimeout>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	e104      	b.n	80050c0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d101      	bne.n	8004ec4 <HAL_I2C_IsDeviceReady+0x50>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	e0fd      	b.n	80050c0 <HAL_I2C_IsDeviceReady+0x24c>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d007      	beq.n	8004eea <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f042 0201 	orr.w	r2, r2, #1
 8004ee8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ef8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2224      	movs	r2, #36	; 0x24
 8004efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4a70      	ldr	r2, [pc, #448]	; (80050cc <HAL_I2C_IsDeviceReady+0x258>)
 8004f0c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f1c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 fa20 	bl	8005370 <I2C_WaitOnFlagUntilTimeout>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00d      	beq.n	8004f52 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f44:	d103      	bne.n	8004f4e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f4c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e0b6      	b.n	80050c0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f52:	897b      	ldrh	r3, [r7, #10]
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	461a      	mov	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f60:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004f62:	f7fd fe8b 	bl	8002c7c <HAL_GetTick>
 8004f66:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	bf0c      	ite	eq
 8004f76:	2301      	moveq	r3, #1
 8004f78:	2300      	movne	r3, #0
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f8c:	bf0c      	ite	eq
 8004f8e:	2301      	moveq	r3, #1
 8004f90:	2300      	movne	r3, #0
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004f96:	e025      	b.n	8004fe4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f98:	f7fd fe70 	bl	8002c7c <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d302      	bcc.n	8004fae <HAL_I2C_IsDeviceReady+0x13a>
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d103      	bne.n	8004fb6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	22a0      	movs	r2, #160	; 0xa0
 8004fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	bf0c      	ite	eq
 8004fc4:	2301      	moveq	r3, #1
 8004fc6:	2300      	movne	r3, #0
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fda:	bf0c      	ite	eq
 8004fdc:	2301      	moveq	r3, #1
 8004fde:	2300      	movne	r3, #0
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2ba0      	cmp	r3, #160	; 0xa0
 8004fee:	d005      	beq.n	8004ffc <HAL_I2C_IsDeviceReady+0x188>
 8004ff0:	7dfb      	ldrb	r3, [r7, #23]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d102      	bne.n	8004ffc <HAL_I2C_IsDeviceReady+0x188>
 8004ff6:	7dbb      	ldrb	r3, [r7, #22]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0cd      	beq.n	8004f98 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2220      	movs	r2, #32
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b02      	cmp	r3, #2
 8005010:	d129      	bne.n	8005066 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005020:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005022:	2300      	movs	r3, #0
 8005024:	613b      	str	r3, [r7, #16]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	613b      	str	r3, [r7, #16]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	613b      	str	r3, [r7, #16]
 8005036:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	2319      	movs	r3, #25
 800503e:	2201      	movs	r2, #1
 8005040:	4921      	ldr	r1, [pc, #132]	; (80050c8 <HAL_I2C_IsDeviceReady+0x254>)
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 f994 	bl	8005370 <I2C_WaitOnFlagUntilTimeout>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e036      	b.n	80050c0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2220      	movs	r2, #32
 8005056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	e02c      	b.n	80050c0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005074:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800507e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	2319      	movs	r3, #25
 8005086:	2201      	movs	r2, #1
 8005088:	490f      	ldr	r1, [pc, #60]	; (80050c8 <HAL_I2C_IsDeviceReady+0x254>)
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f000 f970 	bl	8005370 <I2C_WaitOnFlagUntilTimeout>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e012      	b.n	80050c0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	3301      	adds	r3, #1
 800509e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	f4ff af32 	bcc.w	8004f0e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2220      	movs	r2, #32
 80050ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e000      	b.n	80050c0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80050be:	2302      	movs	r3, #2
  }
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3720      	adds	r7, #32
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	00100002 	.word	0x00100002
 80050cc:	ffff0000 	.word	0xffff0000

080050d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b088      	sub	sp, #32
 80050d4:	af02      	add	r7, sp, #8
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	607a      	str	r2, [r7, #4]
 80050da:	603b      	str	r3, [r7, #0]
 80050dc:	460b      	mov	r3, r1
 80050de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2b08      	cmp	r3, #8
 80050ea:	d006      	beq.n	80050fa <I2C_MasterRequestWrite+0x2a>
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d003      	beq.n	80050fa <I2C_MasterRequestWrite+0x2a>
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050f8:	d108      	bne.n	800510c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	e00b      	b.n	8005124 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005110:	2b12      	cmp	r3, #18
 8005112:	d107      	bne.n	8005124 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005122:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 f91d 	bl	8005370 <I2C_WaitOnFlagUntilTimeout>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00d      	beq.n	8005158 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800514a:	d103      	bne.n	8005154 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005152:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e035      	b.n	80051c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005160:	d108      	bne.n	8005174 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005162:	897b      	ldrh	r3, [r7, #10]
 8005164:	b2db      	uxtb	r3, r3
 8005166:	461a      	mov	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005170:	611a      	str	r2, [r3, #16]
 8005172:	e01b      	b.n	80051ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005174:	897b      	ldrh	r3, [r7, #10]
 8005176:	11db      	asrs	r3, r3, #7
 8005178:	b2db      	uxtb	r3, r3
 800517a:	f003 0306 	and.w	r3, r3, #6
 800517e:	b2db      	uxtb	r3, r3
 8005180:	f063 030f 	orn	r3, r3, #15
 8005184:	b2da      	uxtb	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	490e      	ldr	r1, [pc, #56]	; (80051cc <I2C_MasterRequestWrite+0xfc>)
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f000 f943 	bl	800541e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e010      	b.n	80051c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80051a2:	897b      	ldrh	r3, [r7, #10]
 80051a4:	b2da      	uxtb	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	4907      	ldr	r1, [pc, #28]	; (80051d0 <I2C_MasterRequestWrite+0x100>)
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 f933 	bl	800541e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e000      	b.n	80051c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3718      	adds	r7, #24
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	00010008 	.word	0x00010008
 80051d0:	00010002 	.word	0x00010002

080051d4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b088      	sub	sp, #32
 80051d8:	af02      	add	r7, sp, #8
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	607a      	str	r2, [r7, #4]
 80051de:	603b      	str	r3, [r7, #0]
 80051e0:	460b      	mov	r3, r1
 80051e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051f8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	d006      	beq.n	800520e <I2C_MasterRequestRead+0x3a>
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d003      	beq.n	800520e <I2C_MasterRequestRead+0x3a>
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800520c:	d108      	bne.n	8005220 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	e00b      	b.n	8005238 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005224:	2b11      	cmp	r3, #17
 8005226:	d107      	bne.n	8005238 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005236:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 f893 	bl	8005370 <I2C_WaitOnFlagUntilTimeout>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00d      	beq.n	800526c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800525e:	d103      	bne.n	8005268 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005266:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e079      	b.n	8005360 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005274:	d108      	bne.n	8005288 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005276:	897b      	ldrh	r3, [r7, #10]
 8005278:	b2db      	uxtb	r3, r3
 800527a:	f043 0301 	orr.w	r3, r3, #1
 800527e:	b2da      	uxtb	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	611a      	str	r2, [r3, #16]
 8005286:	e05f      	b.n	8005348 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005288:	897b      	ldrh	r3, [r7, #10]
 800528a:	11db      	asrs	r3, r3, #7
 800528c:	b2db      	uxtb	r3, r3
 800528e:	f003 0306 	and.w	r3, r3, #6
 8005292:	b2db      	uxtb	r3, r3
 8005294:	f063 030f 	orn	r3, r3, #15
 8005298:	b2da      	uxtb	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	4930      	ldr	r1, [pc, #192]	; (8005368 <I2C_MasterRequestRead+0x194>)
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 f8b9 	bl	800541e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e054      	b.n	8005360 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80052b6:	897b      	ldrh	r3, [r7, #10]
 80052b8:	b2da      	uxtb	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	4929      	ldr	r1, [pc, #164]	; (800536c <I2C_MasterRequestRead+0x198>)
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f000 f8a9 	bl	800541e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e044      	b.n	8005360 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052d6:	2300      	movs	r3, #0
 80052d8:	613b      	str	r3, [r7, #16]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	613b      	str	r3, [r7, #16]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	613b      	str	r3, [r7, #16]
 80052ea:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052fa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f000 f831 	bl	8005370 <I2C_WaitOnFlagUntilTimeout>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00d      	beq.n	8005330 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005322:	d103      	bne.n	800532c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f44f 7200 	mov.w	r2, #512	; 0x200
 800532a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e017      	b.n	8005360 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005330:	897b      	ldrh	r3, [r7, #10]
 8005332:	11db      	asrs	r3, r3, #7
 8005334:	b2db      	uxtb	r3, r3
 8005336:	f003 0306 	and.w	r3, r3, #6
 800533a:	b2db      	uxtb	r3, r3
 800533c:	f063 030e 	orn	r3, r3, #14
 8005340:	b2da      	uxtb	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	4907      	ldr	r1, [pc, #28]	; (800536c <I2C_MasterRequestRead+0x198>)
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 f865 	bl	800541e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e000      	b.n	8005360 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3718      	adds	r7, #24
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	00010008 	.word	0x00010008
 800536c:	00010002 	.word	0x00010002

08005370 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	603b      	str	r3, [r7, #0]
 800537c:	4613      	mov	r3, r2
 800537e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005380:	e025      	b.n	80053ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005388:	d021      	beq.n	80053ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800538a:	f7fd fc77 	bl	8002c7c <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	429a      	cmp	r2, r3
 8005398:	d302      	bcc.n	80053a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d116      	bne.n	80053ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2220      	movs	r2, #32
 80053aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ba:	f043 0220 	orr.w	r2, r3, #32
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e023      	b.n	8005416 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	0c1b      	lsrs	r3, r3, #16
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d10d      	bne.n	80053f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	43da      	mvns	r2, r3
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	4013      	ands	r3, r2
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	bf0c      	ite	eq
 80053ea:	2301      	moveq	r3, #1
 80053ec:	2300      	movne	r3, #0
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	461a      	mov	r2, r3
 80053f2:	e00c      	b.n	800540e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	43da      	mvns	r2, r3
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	4013      	ands	r3, r2
 8005400:	b29b      	uxth	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	bf0c      	ite	eq
 8005406:	2301      	moveq	r3, #1
 8005408:	2300      	movne	r3, #0
 800540a:	b2db      	uxtb	r3, r3
 800540c:	461a      	mov	r2, r3
 800540e:	79fb      	ldrb	r3, [r7, #7]
 8005410:	429a      	cmp	r2, r3
 8005412:	d0b6      	beq.n	8005382 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b084      	sub	sp, #16
 8005422:	af00      	add	r7, sp, #0
 8005424:	60f8      	str	r0, [r7, #12]
 8005426:	60b9      	str	r1, [r7, #8]
 8005428:	607a      	str	r2, [r7, #4]
 800542a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800542c:	e051      	b.n	80054d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800543c:	d123      	bne.n	8005486 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800544c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005456:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2220      	movs	r2, #32
 8005462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	f043 0204 	orr.w	r2, r3, #4
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e046      	b.n	8005514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548c:	d021      	beq.n	80054d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800548e:	f7fd fbf5 	bl	8002c7c <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	429a      	cmp	r2, r3
 800549c:	d302      	bcc.n	80054a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d116      	bne.n	80054d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2220      	movs	r2, #32
 80054ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	f043 0220 	orr.w	r2, r3, #32
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e020      	b.n	8005514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	0c1b      	lsrs	r3, r3, #16
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d10c      	bne.n	80054f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	43da      	mvns	r2, r3
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	4013      	ands	r3, r2
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	bf14      	ite	ne
 80054ee:	2301      	movne	r3, #1
 80054f0:	2300      	moveq	r3, #0
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	e00b      	b.n	800550e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	43da      	mvns	r2, r3
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	4013      	ands	r3, r2
 8005502:	b29b      	uxth	r3, r3
 8005504:	2b00      	cmp	r3, #0
 8005506:	bf14      	ite	ne
 8005508:	2301      	movne	r3, #1
 800550a:	2300      	moveq	r3, #0
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d18d      	bne.n	800542e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005528:	e02d      	b.n	8005586 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f000 f8ce 	bl	80056cc <I2C_IsAcknowledgeFailed>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e02d      	b.n	8005596 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005540:	d021      	beq.n	8005586 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005542:	f7fd fb9b 	bl	8002c7c <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	429a      	cmp	r2, r3
 8005550:	d302      	bcc.n	8005558 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d116      	bne.n	8005586 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2220      	movs	r2, #32
 8005562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005572:	f043 0220 	orr.w	r2, r3, #32
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e007      	b.n	8005596 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005590:	2b80      	cmp	r3, #128	; 0x80
 8005592:	d1ca      	bne.n	800552a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b084      	sub	sp, #16
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	60f8      	str	r0, [r7, #12]
 80055a6:	60b9      	str	r1, [r7, #8]
 80055a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055aa:	e02d      	b.n	8005608 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f000 f88d 	bl	80056cc <I2C_IsAcknowledgeFailed>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d001      	beq.n	80055bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e02d      	b.n	8005618 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c2:	d021      	beq.n	8005608 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055c4:	f7fd fb5a 	bl	8002c7c <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d302      	bcc.n	80055da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d116      	bne.n	8005608 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2220      	movs	r2, #32
 80055e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f4:	f043 0220 	orr.w	r2, r3, #32
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e007      	b.n	8005618 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	f003 0304 	and.w	r3, r3, #4
 8005612:	2b04      	cmp	r3, #4
 8005614:	d1ca      	bne.n	80055ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800562c:	e042      	b.n	80056b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	f003 0310 	and.w	r3, r3, #16
 8005638:	2b10      	cmp	r3, #16
 800563a:	d119      	bne.n	8005670 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f06f 0210 	mvn.w	r2, #16
 8005644:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2220      	movs	r2, #32
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e029      	b.n	80056c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005670:	f7fd fb04 	bl	8002c7c <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	429a      	cmp	r2, r3
 800567e:	d302      	bcc.n	8005686 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d116      	bne.n	80056b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2220      	movs	r2, #32
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a0:	f043 0220 	orr.w	r2, r3, #32
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e007      	b.n	80056c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056be:	2b40      	cmp	r3, #64	; 0x40
 80056c0:	d1b5      	bne.n	800562e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056e2:	d11b      	bne.n	800571c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2220      	movs	r2, #32
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005708:	f043 0204 	orr.w	r2, r3, #4
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e000      	b.n	800571e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800572a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800572c:	b08f      	sub	sp, #60	; 0x3c
 800572e:	af0a      	add	r7, sp, #40	; 0x28
 8005730:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e10f      	b.n	800595c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d106      	bne.n	800575c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f013 fb96 	bl	8018e88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2203      	movs	r2, #3
 8005760:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800576c:	2b00      	cmp	r3, #0
 800576e:	d102      	bne.n	8005776 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4618      	mov	r0, r3
 800577c:	f006 f86d 	bl	800b85a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	603b      	str	r3, [r7, #0]
 8005786:	687e      	ldr	r6, [r7, #4]
 8005788:	466d      	mov	r5, sp
 800578a:	f106 0410 	add.w	r4, r6, #16
 800578e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005790:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005792:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005794:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005796:	e894 0003 	ldmia.w	r4, {r0, r1}
 800579a:	e885 0003 	stmia.w	r5, {r0, r1}
 800579e:	1d33      	adds	r3, r6, #4
 80057a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057a2:	6838      	ldr	r0, [r7, #0]
 80057a4:	f005 ff44 	bl	800b630 <USB_CoreInit>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d005      	beq.n	80057ba <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2202      	movs	r2, #2
 80057b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e0d0      	b.n	800595c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2100      	movs	r1, #0
 80057c0:	4618      	mov	r0, r3
 80057c2:	f006 f85b 	bl	800b87c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057c6:	2300      	movs	r3, #0
 80057c8:	73fb      	strb	r3, [r7, #15]
 80057ca:	e04a      	b.n	8005862 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80057cc:	7bfa      	ldrb	r2, [r7, #15]
 80057ce:	6879      	ldr	r1, [r7, #4]
 80057d0:	4613      	mov	r3, r2
 80057d2:	00db      	lsls	r3, r3, #3
 80057d4:	4413      	add	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	440b      	add	r3, r1
 80057da:	333d      	adds	r3, #61	; 0x3d
 80057dc:	2201      	movs	r2, #1
 80057de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80057e0:	7bfa      	ldrb	r2, [r7, #15]
 80057e2:	6879      	ldr	r1, [r7, #4]
 80057e4:	4613      	mov	r3, r2
 80057e6:	00db      	lsls	r3, r3, #3
 80057e8:	4413      	add	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	440b      	add	r3, r1
 80057ee:	333c      	adds	r3, #60	; 0x3c
 80057f0:	7bfa      	ldrb	r2, [r7, #15]
 80057f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80057f4:	7bfa      	ldrb	r2, [r7, #15]
 80057f6:	7bfb      	ldrb	r3, [r7, #15]
 80057f8:	b298      	uxth	r0, r3
 80057fa:	6879      	ldr	r1, [r7, #4]
 80057fc:	4613      	mov	r3, r2
 80057fe:	00db      	lsls	r3, r3, #3
 8005800:	4413      	add	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	440b      	add	r3, r1
 8005806:	3344      	adds	r3, #68	; 0x44
 8005808:	4602      	mov	r2, r0
 800580a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800580c:	7bfa      	ldrb	r2, [r7, #15]
 800580e:	6879      	ldr	r1, [r7, #4]
 8005810:	4613      	mov	r3, r2
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	4413      	add	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	440b      	add	r3, r1
 800581a:	3340      	adds	r3, #64	; 0x40
 800581c:	2200      	movs	r2, #0
 800581e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005820:	7bfa      	ldrb	r2, [r7, #15]
 8005822:	6879      	ldr	r1, [r7, #4]
 8005824:	4613      	mov	r3, r2
 8005826:	00db      	lsls	r3, r3, #3
 8005828:	4413      	add	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	440b      	add	r3, r1
 800582e:	3348      	adds	r3, #72	; 0x48
 8005830:	2200      	movs	r2, #0
 8005832:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005834:	7bfa      	ldrb	r2, [r7, #15]
 8005836:	6879      	ldr	r1, [r7, #4]
 8005838:	4613      	mov	r3, r2
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	4413      	add	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	440b      	add	r3, r1
 8005842:	334c      	adds	r3, #76	; 0x4c
 8005844:	2200      	movs	r2, #0
 8005846:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005848:	7bfa      	ldrb	r2, [r7, #15]
 800584a:	6879      	ldr	r1, [r7, #4]
 800584c:	4613      	mov	r3, r2
 800584e:	00db      	lsls	r3, r3, #3
 8005850:	4413      	add	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	440b      	add	r3, r1
 8005856:	3354      	adds	r3, #84	; 0x54
 8005858:	2200      	movs	r2, #0
 800585a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800585c:	7bfb      	ldrb	r3, [r7, #15]
 800585e:	3301      	adds	r3, #1
 8005860:	73fb      	strb	r3, [r7, #15]
 8005862:	7bfa      	ldrb	r2, [r7, #15]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	429a      	cmp	r2, r3
 800586a:	d3af      	bcc.n	80057cc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800586c:	2300      	movs	r3, #0
 800586e:	73fb      	strb	r3, [r7, #15]
 8005870:	e044      	b.n	80058fc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005872:	7bfa      	ldrb	r2, [r7, #15]
 8005874:	6879      	ldr	r1, [r7, #4]
 8005876:	4613      	mov	r3, r2
 8005878:	00db      	lsls	r3, r3, #3
 800587a:	4413      	add	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	440b      	add	r3, r1
 8005880:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005884:	2200      	movs	r2, #0
 8005886:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005888:	7bfa      	ldrb	r2, [r7, #15]
 800588a:	6879      	ldr	r1, [r7, #4]
 800588c:	4613      	mov	r3, r2
 800588e:	00db      	lsls	r3, r3, #3
 8005890:	4413      	add	r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	440b      	add	r3, r1
 8005896:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800589a:	7bfa      	ldrb	r2, [r7, #15]
 800589c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800589e:	7bfa      	ldrb	r2, [r7, #15]
 80058a0:	6879      	ldr	r1, [r7, #4]
 80058a2:	4613      	mov	r3, r2
 80058a4:	00db      	lsls	r3, r3, #3
 80058a6:	4413      	add	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	440b      	add	r3, r1
 80058ac:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80058b0:	2200      	movs	r2, #0
 80058b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80058b4:	7bfa      	ldrb	r2, [r7, #15]
 80058b6:	6879      	ldr	r1, [r7, #4]
 80058b8:	4613      	mov	r3, r2
 80058ba:	00db      	lsls	r3, r3, #3
 80058bc:	4413      	add	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	440b      	add	r3, r1
 80058c2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80058c6:	2200      	movs	r2, #0
 80058c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80058ca:	7bfa      	ldrb	r2, [r7, #15]
 80058cc:	6879      	ldr	r1, [r7, #4]
 80058ce:	4613      	mov	r3, r2
 80058d0:	00db      	lsls	r3, r3, #3
 80058d2:	4413      	add	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	440b      	add	r3, r1
 80058d8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80058dc:	2200      	movs	r2, #0
 80058de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80058e0:	7bfa      	ldrb	r2, [r7, #15]
 80058e2:	6879      	ldr	r1, [r7, #4]
 80058e4:	4613      	mov	r3, r2
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	4413      	add	r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	440b      	add	r3, r1
 80058ee:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80058f2:	2200      	movs	r2, #0
 80058f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058f6:	7bfb      	ldrb	r3, [r7, #15]
 80058f8:	3301      	adds	r3, #1
 80058fa:	73fb      	strb	r3, [r7, #15]
 80058fc:	7bfa      	ldrb	r2, [r7, #15]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	429a      	cmp	r2, r3
 8005904:	d3b5      	bcc.n	8005872 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	603b      	str	r3, [r7, #0]
 800590c:	687e      	ldr	r6, [r7, #4]
 800590e:	466d      	mov	r5, sp
 8005910:	f106 0410 	add.w	r4, r6, #16
 8005914:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005916:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005918:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800591a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800591c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005920:	e885 0003 	stmia.w	r5, {r0, r1}
 8005924:	1d33      	adds	r3, r6, #4
 8005926:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005928:	6838      	ldr	r0, [r7, #0]
 800592a:	f005 fff3 	bl	800b914 <USB_DevInit>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d005      	beq.n	8005940 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e00d      	b.n	800595c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4618      	mov	r0, r3
 8005956:	f007 f991 	bl	800cc7c <USB_DevDisconnect>

  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005964 <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e015      	b.n	80059a2 <HAL_PCD_DeInit+0x3e>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2203      	movs	r2, #3
 800597a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Stop Device */
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4618      	mov	r0, r3
 8005984:	f007 f8e4 	bl	800cb50 <USB_StopDevice>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <HAL_PCD_DeInit+0x2e>
  {
    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e007      	b.n	80059a2 <HAL_PCD_DeInit+0x3e>

  /* DeInit the low level hardware */
  hpcd->MspDeInitCallback(hpcd);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_PCD_MspDeInit(hpcd);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f013 facc 	bl	8018f30 <HAL_PCD_MspDeInit>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3708      	adds	r7, #8
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b084      	sub	sp, #16
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d101      	bne.n	80059c6 <HAL_PCD_Start+0x1c>
 80059c2:	2302      	movs	r3, #2
 80059c4:	e020      	b.n	8005a08 <HAL_PCD_Start+0x5e>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d109      	bne.n	80059ea <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d005      	beq.n	80059ea <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f005 ff22 	bl	800b838 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f007 f91e 	bl	800cc3a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d101      	bne.n	8005a2c <HAL_PCD_Stop+0x1c>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e026      	b.n	8005a7a <HAL_PCD_Stop+0x6a>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_DISABLE(hpcd);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f005 ff0e 	bl	800b85a <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f007 f91a 	bl	800cc7c <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2110      	movs	r1, #16
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f006 f8c4 	bl	800bbdc <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d109      	bne.n	8005a70 <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d005      	beq.n	8005a70 <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_UNLOCK(hpcd);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005a82:	b590      	push	{r4, r7, lr}
 8005a84:	b08d      	sub	sp, #52	; 0x34
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f007 f9a3 	bl	800cde4 <USB_GetMode>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f040 848a 	bne.w	80063ba <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f007 f907 	bl	800ccbe <USB_ReadInterrupts>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f000 8480 	beq.w	80063b8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	0a1b      	lsrs	r3, r3, #8
 8005ac2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f007 f8f4 	bl	800ccbe <USB_ReadInterrupts>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	f003 0302 	and.w	r3, r3, #2
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d107      	bne.n	8005af0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	695a      	ldr	r2, [r3, #20]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f002 0202 	and.w	r2, r2, #2
 8005aee:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f007 f8e2 	bl	800ccbe <USB_ReadInterrupts>
 8005afa:	4603      	mov	r3, r0
 8005afc:	f003 0310 	and.w	r3, r3, #16
 8005b00:	2b10      	cmp	r3, #16
 8005b02:	d161      	bne.n	8005bc8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	699a      	ldr	r2, [r3, #24]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 0210 	bic.w	r2, r2, #16
 8005b12:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	6a1b      	ldr	r3, [r3, #32]
 8005b18:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	f003 020f 	and.w	r2, r3, #15
 8005b20:	4613      	mov	r3, r2
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	4413      	add	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	4413      	add	r3, r2
 8005b30:	3304      	adds	r3, #4
 8005b32:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	0c5b      	lsrs	r3, r3, #17
 8005b38:	f003 030f 	and.w	r3, r3, #15
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d124      	bne.n	8005b8a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005b46:	4013      	ands	r3, r2
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d035      	beq.n	8005bb8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	091b      	lsrs	r3, r3, #4
 8005b54:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005b56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	6a38      	ldr	r0, [r7, #32]
 8005b60:	f006 feca 	bl	800c8f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	691a      	ldr	r2, [r3, #16]
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	091b      	lsrs	r3, r3, #4
 8005b6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b70:	441a      	add	r2, r3
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	6a1a      	ldr	r2, [r3, #32]
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	091b      	lsrs	r3, r3, #4
 8005b7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b82:	441a      	add	r2, r3
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	621a      	str	r2, [r3, #32]
 8005b88:	e016      	b.n	8005bb8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	0c5b      	lsrs	r3, r3, #17
 8005b8e:	f003 030f 	and.w	r3, r3, #15
 8005b92:	2b06      	cmp	r3, #6
 8005b94:	d110      	bne.n	8005bb8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005b9c:	2208      	movs	r2, #8
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	6a38      	ldr	r0, [r7, #32]
 8005ba2:	f006 fea9 	bl	800c8f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	6a1a      	ldr	r2, [r3, #32]
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	091b      	lsrs	r3, r3, #4
 8005bae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bb2:	441a      	add	r2, r3
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	699a      	ldr	r2, [r3, #24]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f042 0210 	orr.w	r2, r2, #16
 8005bc6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f007 f876 	bl	800ccbe <USB_ReadInterrupts>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bd8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005bdc:	f040 80a7 	bne.w	8005d2e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005be0:	2300      	movs	r3, #0
 8005be2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4618      	mov	r0, r3
 8005bea:	f007 f87b 	bl	800cce4 <USB_ReadDevAllOutEpInterrupt>
 8005bee:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005bf0:	e099      	b.n	8005d26 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 808e 	beq.w	8005d1a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c04:	b2d2      	uxtb	r2, r2
 8005c06:	4611      	mov	r1, r2
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f007 f89f 	bl	800cd4c <USB_ReadDevOutEPInterrupt>
 8005c0e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00c      	beq.n	8005c34 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c26:	461a      	mov	r2, r3
 8005c28:	2301      	movs	r3, #1
 8005c2a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005c2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 fef0 	bl	8006a14 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f003 0308 	and.w	r3, r3, #8
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00c      	beq.n	8005c58 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	2308      	movs	r3, #8
 8005c4e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005c50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 ffc6 	bl	8006be4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	f003 0310 	and.w	r3, r3, #16
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d008      	beq.n	8005c74 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	015a      	lsls	r2, r3, #5
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6e:	461a      	mov	r2, r3
 8005c70:	2310      	movs	r3, #16
 8005c72:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d030      	beq.n	8005ce0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c86:	2b80      	cmp	r3, #128	; 0x80
 8005c88:	d109      	bne.n	8005c9e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	69fa      	ldr	r2, [r7, #28]
 8005c94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c9c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	4413      	add	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	4413      	add	r3, r2
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	78db      	ldrb	r3, [r3, #3]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d108      	bne.n	8005cce <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f013 fa03 	bl	80190d4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd0:	015a      	lsls	r2, r3, #5
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cda:	461a      	mov	r2, r3
 8005cdc:	2302      	movs	r3, #2
 8005cde:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f003 0320 	and.w	r3, r3, #32
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d008      	beq.n	8005cfc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	2320      	movs	r3, #32
 8005cfa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d009      	beq.n	8005d1a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d12:	461a      	mov	r2, r3
 8005d14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d18:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d22:	085b      	lsrs	r3, r3, #1
 8005d24:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f47f af62 	bne.w	8005bf2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f006 ffc3 	bl	800ccbe <USB_ReadInterrupts>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d42:	f040 80db 	bne.w	8005efc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f006 ffe4 	bl	800cd18 <USB_ReadDevAllInEpInterrupt>
 8005d50:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005d56:	e0cd      	b.n	8005ef4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f000 80c2 	beq.w	8005ee8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d6a:	b2d2      	uxtb	r2, r2
 8005d6c:	4611      	mov	r1, r2
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f007 f80a 	bl	800cd88 <USB_ReadDevInEPInterrupt>
 8005d74:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d057      	beq.n	8005e30 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d82:	f003 030f 	and.w	r3, r3, #15
 8005d86:	2201      	movs	r2, #1
 8005d88:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	43db      	mvns	r3, r3
 8005d9a:	69f9      	ldr	r1, [r7, #28]
 8005d9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005da0:	4013      	ands	r3, r2
 8005da2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db0:	461a      	mov	r2, r3
 8005db2:	2301      	movs	r3, #1
 8005db4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d132      	bne.n	8005e24 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005dbe:	6879      	ldr	r1, [r7, #4]
 8005dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	00db      	lsls	r3, r3, #3
 8005dc6:	4413      	add	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	440b      	add	r3, r1
 8005dcc:	334c      	adds	r3, #76	; 0x4c
 8005dce:	6819      	ldr	r1, [r3, #0]
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	00db      	lsls	r3, r3, #3
 8005dd8:	4413      	add	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4403      	add	r3, r0
 8005dde:	3348      	adds	r3, #72	; 0x48
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4419      	add	r1, r3
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005de8:	4613      	mov	r3, r2
 8005dea:	00db      	lsls	r3, r3, #3
 8005dec:	4413      	add	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4403      	add	r3, r0
 8005df2:	334c      	adds	r3, #76	; 0x4c
 8005df4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d113      	bne.n	8005e24 <HAL_PCD_IRQHandler+0x3a2>
 8005dfc:	6879      	ldr	r1, [r7, #4]
 8005dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e00:	4613      	mov	r3, r2
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	4413      	add	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	440b      	add	r3, r1
 8005e0a:	3354      	adds	r3, #84	; 0x54
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d108      	bne.n	8005e24 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6818      	ldr	r0, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	2101      	movs	r1, #1
 8005e20:	f007 f812 	bl	800ce48 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	4619      	mov	r1, r3
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f013 f8cd 	bl	8018fca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	f003 0308 	and.w	r3, r3, #8
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d008      	beq.n	8005e4c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e46:	461a      	mov	r2, r3
 8005e48:	2308      	movs	r3, #8
 8005e4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	f003 0310 	and.w	r3, r3, #16
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d008      	beq.n	8005e68 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e62:	461a      	mov	r2, r3
 8005e64:	2310      	movs	r3, #16
 8005e66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d008      	beq.n	8005e84 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7e:	461a      	mov	r2, r3
 8005e80:	2340      	movs	r3, #64	; 0x40
 8005e82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d023      	beq.n	8005ed6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005e8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e90:	6a38      	ldr	r0, [r7, #32]
 8005e92:	f005 fea3 	bl	800bbdc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e98:	4613      	mov	r3, r2
 8005e9a:	00db      	lsls	r3, r3, #3
 8005e9c:	4413      	add	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	3338      	adds	r3, #56	; 0x38
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	3304      	adds	r3, #4
 8005ea8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	78db      	ldrb	r3, [r3, #3]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d108      	bne.n	8005ec4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f013 f91a 	bl	80190f8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	2302      	movs	r3, #2
 8005ed4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d003      	beq.n	8005ee8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005ee0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fd08 	bl	80068f8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eea:	3301      	adds	r3, #1
 8005eec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef0:	085b      	lsrs	r3, r3, #1
 8005ef2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f47f af2e 	bne.w	8005d58 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f006 fedc 	bl	800ccbe <USB_ReadInterrupts>
 8005f06:	4603      	mov	r3, r0
 8005f08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f10:	d122      	bne.n	8005f58 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	69fa      	ldr	r2, [r7, #28]
 8005f1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f20:	f023 0301 	bic.w	r3, r3, #1
 8005f24:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d108      	bne.n	8005f42 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005f38:	2100      	movs	r1, #0
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 fef0 	bl	8006d20 <HAL_PCDEx_LPM_Callback>
 8005f40:	e002      	b.n	8005f48 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f013 f8b8 	bl	80190b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	695a      	ldr	r2, [r3, #20]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005f56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f006 feae 	bl	800ccbe <USB_ReadInterrupts>
 8005f62:	4603      	mov	r3, r0
 8005f64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f6c:	d112      	bne.n	8005f94 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d102      	bne.n	8005f84 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f013 f874 	bl	801906c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	695a      	ldr	r2, [r3, #20]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005f92:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f006 fe90 	bl	800ccbe <USB_ReadInterrupts>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fa8:	f040 80b7 	bne.w	800611a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	69fa      	ldr	r2, [r7, #28]
 8005fb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fba:	f023 0301 	bic.w	r3, r3, #1
 8005fbe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2110      	movs	r1, #16
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f005 fe08 	bl	800bbdc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fcc:	2300      	movs	r3, #0
 8005fce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fd0:	e046      	b.n	8006060 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd4:	015a      	lsls	r2, r3, #5
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fde:	461a      	mov	r2, r3
 8005fe0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005fe4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe8:	015a      	lsls	r2, r3, #5
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ff6:	0151      	lsls	r1, r2, #5
 8005ff8:	69fa      	ldr	r2, [r7, #28]
 8005ffa:	440a      	add	r2, r1
 8005ffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006000:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006004:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006008:	015a      	lsls	r2, r3, #5
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	4413      	add	r3, r2
 800600e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006012:	461a      	mov	r2, r3
 8006014:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006018:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800601a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	4413      	add	r3, r2
 8006022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800602a:	0151      	lsls	r1, r2, #5
 800602c:	69fa      	ldr	r2, [r7, #28]
 800602e:	440a      	add	r2, r1
 8006030:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006034:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006038:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800603a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	4413      	add	r3, r2
 8006042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800604a:	0151      	lsls	r1, r2, #5
 800604c:	69fa      	ldr	r2, [r7, #28]
 800604e:	440a      	add	r2, r1
 8006050:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006054:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006058:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800605a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605c:	3301      	adds	r3, #1
 800605e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006066:	429a      	cmp	r2, r3
 8006068:	d3b3      	bcc.n	8005fd2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	69fa      	ldr	r2, [r7, #28]
 8006074:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006078:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800607c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006082:	2b00      	cmp	r3, #0
 8006084:	d016      	beq.n	80060b4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006090:	69fa      	ldr	r2, [r7, #28]
 8006092:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006096:	f043 030b 	orr.w	r3, r3, #11
 800609a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a6:	69fa      	ldr	r2, [r7, #28]
 80060a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060ac:	f043 030b 	orr.w	r3, r3, #11
 80060b0:	6453      	str	r3, [r2, #68]	; 0x44
 80060b2:	e015      	b.n	80060e0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ba:	695b      	ldr	r3, [r3, #20]
 80060bc:	69fa      	ldr	r2, [r7, #28]
 80060be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80060c6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80060ca:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	69fa      	ldr	r2, [r7, #28]
 80060d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060da:	f043 030b 	orr.w	r3, r3, #11
 80060de:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	69fa      	ldr	r2, [r7, #28]
 80060ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80060f2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6818      	ldr	r0, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006104:	461a      	mov	r2, r3
 8006106:	f006 fe9f 	bl	800ce48 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	695a      	ldr	r2, [r3, #20]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006118:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4618      	mov	r0, r3
 8006120:	f006 fdcd 	bl	800ccbe <USB_ReadInterrupts>
 8006124:	4603      	mov	r3, r0
 8006126:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800612a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800612e:	d124      	bne.n	800617a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4618      	mov	r0, r3
 8006136:	f006 fe63 	bl	800ce00 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4618      	mov	r0, r3
 8006140:	f005 fdc9 	bl	800bcd6 <USB_GetDevSpeed>
 8006144:	4603      	mov	r3, r0
 8006146:	461a      	mov	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681c      	ldr	r4, [r3, #0]
 8006150:	f001 fa42 	bl	80075d8 <HAL_RCC_GetHCLKFreq>
 8006154:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800615a:	b2db      	uxtb	r3, r3
 800615c:	461a      	mov	r2, r3
 800615e:	4620      	mov	r0, r4
 8006160:	f005 fac8 	bl	800b6f4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f012 ff58 	bl	801901a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	695a      	ldr	r2, [r3, #20]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006178:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4618      	mov	r0, r3
 8006180:	f006 fd9d 	bl	800ccbe <USB_ReadInterrupts>
 8006184:	4603      	mov	r3, r0
 8006186:	f003 0308 	and.w	r3, r3, #8
 800618a:	2b08      	cmp	r3, #8
 800618c:	d10a      	bne.n	80061a4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f012 ff35 	bl	8018ffe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	695a      	ldr	r2, [r3, #20]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f002 0208 	and.w	r2, r2, #8
 80061a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f006 fd88 	bl	800ccbe <USB_ReadInterrupts>
 80061ae:	4603      	mov	r3, r0
 80061b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b4:	2b80      	cmp	r3, #128	; 0x80
 80061b6:	d122      	bne.n	80061fe <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80061b8:	6a3b      	ldr	r3, [r7, #32]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061c0:	6a3b      	ldr	r3, [r7, #32]
 80061c2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80061c4:	2301      	movs	r3, #1
 80061c6:	627b      	str	r3, [r7, #36]	; 0x24
 80061c8:	e014      	b.n	80061f4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80061ca:	6879      	ldr	r1, [r7, #4]
 80061cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ce:	4613      	mov	r3, r2
 80061d0:	00db      	lsls	r3, r3, #3
 80061d2:	4413      	add	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	440b      	add	r3, r1
 80061d8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d105      	bne.n	80061ee <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80061e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	4619      	mov	r1, r3
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 fb27 	bl	800683c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80061ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f0:	3301      	adds	r3, #1
 80061f2:	627b      	str	r3, [r7, #36]	; 0x24
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d3e5      	bcc.n	80061ca <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4618      	mov	r0, r3
 8006204:	f006 fd5b 	bl	800ccbe <USB_ReadInterrupts>
 8006208:	4603      	mov	r3, r0
 800620a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800620e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006212:	d13b      	bne.n	800628c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006214:	2301      	movs	r3, #1
 8006216:	627b      	str	r3, [r7, #36]	; 0x24
 8006218:	e02b      	b.n	8006272 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621c:	015a      	lsls	r2, r3, #5
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	4413      	add	r3, r2
 8006222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800622a:	6879      	ldr	r1, [r7, #4]
 800622c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800622e:	4613      	mov	r3, r2
 8006230:	00db      	lsls	r3, r3, #3
 8006232:	4413      	add	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	440b      	add	r3, r1
 8006238:	3340      	adds	r3, #64	; 0x40
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d115      	bne.n	800626c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006240:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006242:	2b00      	cmp	r3, #0
 8006244:	da12      	bge.n	800626c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006246:	6879      	ldr	r1, [r7, #4]
 8006248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800624a:	4613      	mov	r3, r2
 800624c:	00db      	lsls	r3, r3, #3
 800624e:	4413      	add	r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	440b      	add	r3, r1
 8006254:	333f      	adds	r3, #63	; 0x3f
 8006256:	2201      	movs	r2, #1
 8006258:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800625a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625c:	b2db      	uxtb	r3, r3
 800625e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006262:	b2db      	uxtb	r3, r3
 8006264:	4619      	mov	r1, r3
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 fae8 	bl	800683c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626e:	3301      	adds	r3, #1
 8006270:	627b      	str	r3, [r7, #36]	; 0x24
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006278:	429a      	cmp	r2, r3
 800627a:	d3ce      	bcc.n	800621a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	695a      	ldr	r2, [r3, #20]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800628a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4618      	mov	r0, r3
 8006292:	f006 fd14 	bl	800ccbe <USB_ReadInterrupts>
 8006296:	4603      	mov	r3, r0
 8006298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800629c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062a0:	d155      	bne.n	800634e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80062a2:	2301      	movs	r3, #1
 80062a4:	627b      	str	r3, [r7, #36]	; 0x24
 80062a6:	e045      	b.n	8006334 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	015a      	lsls	r2, r3, #5
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	4413      	add	r3, r2
 80062b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80062b8:	6879      	ldr	r1, [r7, #4]
 80062ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062bc:	4613      	mov	r3, r2
 80062be:	00db      	lsls	r3, r3, #3
 80062c0:	4413      	add	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	440b      	add	r3, r1
 80062c6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d12e      	bne.n	800632e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80062d0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	da2b      	bge.n	800632e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80062e2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d121      	bne.n	800632e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80062ea:	6879      	ldr	r1, [r7, #4]
 80062ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ee:	4613      	mov	r3, r2
 80062f0:	00db      	lsls	r3, r3, #3
 80062f2:	4413      	add	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	440b      	add	r3, r1
 80062f8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80062fc:	2201      	movs	r2, #1
 80062fe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006300:	6a3b      	ldr	r3, [r7, #32]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800630c:	6a3b      	ldr	r3, [r7, #32]
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10a      	bne.n	800632e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	69fa      	ldr	r2, [r7, #28]
 8006322:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006326:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800632a:	6053      	str	r3, [r2, #4]
            break;
 800632c:	e007      	b.n	800633e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006330:	3301      	adds	r3, #1
 8006332:	627b      	str	r3, [r7, #36]	; 0x24
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800633a:	429a      	cmp	r2, r3
 800633c:	d3b4      	bcc.n	80062a8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	695a      	ldr	r2, [r3, #20]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800634c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4618      	mov	r0, r3
 8006354:	f006 fcb3 	bl	800ccbe <USB_ReadInterrupts>
 8006358:	4603      	mov	r3, r0
 800635a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800635e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006362:	d10a      	bne.n	800637a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f012 fed9 	bl	801911c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	695a      	ldr	r2, [r3, #20]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006378:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4618      	mov	r0, r3
 8006380:	f006 fc9d 	bl	800ccbe <USB_ReadInterrupts>
 8006384:	4603      	mov	r3, r0
 8006386:	f003 0304 	and.w	r3, r3, #4
 800638a:	2b04      	cmp	r3, #4
 800638c:	d115      	bne.n	80063ba <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	f003 0304 	and.w	r3, r3, #4
 800639c:	2b00      	cmp	r3, #0
 800639e:	d002      	beq.n	80063a6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f012 fec9 	bl	8019138 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	6859      	ldr	r1, [r3, #4]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	605a      	str	r2, [r3, #4]
 80063b6:	e000      	b.n	80063ba <HAL_PCD_IRQHandler+0x938>
      return;
 80063b8:	bf00      	nop
    }
  }
}
 80063ba:	3734      	adds	r7, #52	; 0x34
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd90      	pop	{r4, r7, pc}

080063c0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	460b      	mov	r3, r1
 80063ca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d101      	bne.n	80063da <HAL_PCD_SetAddress+0x1a>
 80063d6:	2302      	movs	r3, #2
 80063d8:	e013      	b.n	8006402 <HAL_PCD_SetAddress+0x42>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2201      	movs	r2, #1
 80063de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	78fa      	ldrb	r2, [r7, #3]
 80063e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	78fa      	ldrb	r2, [r7, #3]
 80063f0:	4611      	mov	r1, r2
 80063f2:	4618      	mov	r0, r3
 80063f4:	f006 fbfb 	bl	800cbee <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3708      	adds	r7, #8
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b084      	sub	sp, #16
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	4608      	mov	r0, r1
 8006414:	4611      	mov	r1, r2
 8006416:	461a      	mov	r2, r3
 8006418:	4603      	mov	r3, r0
 800641a:	70fb      	strb	r3, [r7, #3]
 800641c:	460b      	mov	r3, r1
 800641e:	803b      	strh	r3, [r7, #0]
 8006420:	4613      	mov	r3, r2
 8006422:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006424:	2300      	movs	r3, #0
 8006426:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006428:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800642c:	2b00      	cmp	r3, #0
 800642e:	da0f      	bge.n	8006450 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006430:	78fb      	ldrb	r3, [r7, #3]
 8006432:	f003 020f 	and.w	r2, r3, #15
 8006436:	4613      	mov	r3, r2
 8006438:	00db      	lsls	r3, r3, #3
 800643a:	4413      	add	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	3338      	adds	r3, #56	; 0x38
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	4413      	add	r3, r2
 8006444:	3304      	adds	r3, #4
 8006446:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2201      	movs	r2, #1
 800644c:	705a      	strb	r2, [r3, #1]
 800644e:	e00f      	b.n	8006470 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006450:	78fb      	ldrb	r3, [r7, #3]
 8006452:	f003 020f 	and.w	r2, r3, #15
 8006456:	4613      	mov	r3, r2
 8006458:	00db      	lsls	r3, r3, #3
 800645a:	4413      	add	r3, r2
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	4413      	add	r3, r2
 8006466:	3304      	adds	r3, #4
 8006468:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006470:	78fb      	ldrb	r3, [r7, #3]
 8006472:	f003 030f 	and.w	r3, r3, #15
 8006476:	b2da      	uxtb	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800647c:	883a      	ldrh	r2, [r7, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	78ba      	ldrb	r2, [r7, #2]
 8006486:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	785b      	ldrb	r3, [r3, #1]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d004      	beq.n	800649a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	b29a      	uxth	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800649a:	78bb      	ldrb	r3, [r7, #2]
 800649c:	2b02      	cmp	r3, #2
 800649e:	d102      	bne.n	80064a6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d101      	bne.n	80064b4 <HAL_PCD_EP_Open+0xaa>
 80064b0:	2302      	movs	r3, #2
 80064b2:	e00e      	b.n	80064d2 <HAL_PCD_EP_Open+0xc8>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68f9      	ldr	r1, [r7, #12]
 80064c2:	4618      	mov	r0, r3
 80064c4:	f005 fc2c 	bl	800bd20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80064d0:	7afb      	ldrb	r3, [r7, #11]
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b084      	sub	sp, #16
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
 80064e2:	460b      	mov	r3, r1
 80064e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80064e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	da0f      	bge.n	800650e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064ee:	78fb      	ldrb	r3, [r7, #3]
 80064f0:	f003 020f 	and.w	r2, r3, #15
 80064f4:	4613      	mov	r3, r2
 80064f6:	00db      	lsls	r3, r3, #3
 80064f8:	4413      	add	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	3338      	adds	r3, #56	; 0x38
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	4413      	add	r3, r2
 8006502:	3304      	adds	r3, #4
 8006504:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2201      	movs	r2, #1
 800650a:	705a      	strb	r2, [r3, #1]
 800650c:	e00f      	b.n	800652e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800650e:	78fb      	ldrb	r3, [r7, #3]
 8006510:	f003 020f 	and.w	r2, r3, #15
 8006514:	4613      	mov	r3, r2
 8006516:	00db      	lsls	r3, r3, #3
 8006518:	4413      	add	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	4413      	add	r3, r2
 8006524:	3304      	adds	r3, #4
 8006526:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800652e:	78fb      	ldrb	r3, [r7, #3]
 8006530:	f003 030f 	and.w	r3, r3, #15
 8006534:	b2da      	uxtb	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006540:	2b01      	cmp	r3, #1
 8006542:	d101      	bne.n	8006548 <HAL_PCD_EP_Close+0x6e>
 8006544:	2302      	movs	r3, #2
 8006546:	e00e      	b.n	8006566 <HAL_PCD_EP_Close+0x8c>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68f9      	ldr	r1, [r7, #12]
 8006556:	4618      	mov	r0, r3
 8006558:	f005 fc6a 	bl	800be30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b086      	sub	sp, #24
 8006572:	af00      	add	r7, sp, #0
 8006574:	60f8      	str	r0, [r7, #12]
 8006576:	607a      	str	r2, [r7, #4]
 8006578:	603b      	str	r3, [r7, #0]
 800657a:	460b      	mov	r3, r1
 800657c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800657e:	7afb      	ldrb	r3, [r7, #11]
 8006580:	f003 020f 	and.w	r2, r3, #15
 8006584:	4613      	mov	r3, r2
 8006586:	00db      	lsls	r3, r3, #3
 8006588:	4413      	add	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	4413      	add	r3, r2
 8006594:	3304      	adds	r3, #4
 8006596:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	683a      	ldr	r2, [r7, #0]
 80065a2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	2200      	movs	r2, #0
 80065a8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	2200      	movs	r2, #0
 80065ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80065b0:	7afb      	ldrb	r3, [r7, #11]
 80065b2:	f003 030f 	and.w	r3, r3, #15
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d102      	bne.n	80065ca <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80065ca:	7afb      	ldrb	r3, [r7, #11]
 80065cc:	f003 030f 	and.w	r3, r3, #15
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d109      	bne.n	80065e8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6818      	ldr	r0, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	461a      	mov	r2, r3
 80065e0:	6979      	ldr	r1, [r7, #20]
 80065e2:	f005 ff49 	bl	800c478 <USB_EP0StartXfer>
 80065e6:	e008      	b.n	80065fa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6818      	ldr	r0, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	461a      	mov	r2, r3
 80065f4:	6979      	ldr	r1, [r7, #20]
 80065f6:	f005 fcf7 	bl	800bfe8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3718      	adds	r7, #24
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	460b      	mov	r3, r1
 800660e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006610:	78fb      	ldrb	r3, [r7, #3]
 8006612:	f003 020f 	and.w	r2, r3, #15
 8006616:	6879      	ldr	r1, [r7, #4]
 8006618:	4613      	mov	r3, r2
 800661a:	00db      	lsls	r3, r3, #3
 800661c:	4413      	add	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	440b      	add	r3, r1
 8006622:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006626:	681b      	ldr	r3, [r3, #0]
}
 8006628:	4618      	mov	r0, r3
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b086      	sub	sp, #24
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	607a      	str	r2, [r7, #4]
 800663e:	603b      	str	r3, [r7, #0]
 8006640:	460b      	mov	r3, r1
 8006642:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006644:	7afb      	ldrb	r3, [r7, #11]
 8006646:	f003 020f 	and.w	r2, r3, #15
 800664a:	4613      	mov	r3, r2
 800664c:	00db      	lsls	r3, r3, #3
 800664e:	4413      	add	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	3338      	adds	r3, #56	; 0x38
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	4413      	add	r3, r2
 8006658:	3304      	adds	r3, #4
 800665a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	683a      	ldr	r2, [r7, #0]
 8006666:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	2200      	movs	r2, #0
 800666c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	2201      	movs	r2, #1
 8006672:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006674:	7afb      	ldrb	r3, [r7, #11]
 8006676:	f003 030f 	and.w	r3, r3, #15
 800667a:	b2da      	uxtb	r2, r3
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d102      	bne.n	800668e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800668e:	7afb      	ldrb	r3, [r7, #11]
 8006690:	f003 030f 	and.w	r3, r3, #15
 8006694:	2b00      	cmp	r3, #0
 8006696:	d109      	bne.n	80066ac <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6818      	ldr	r0, [r3, #0]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	461a      	mov	r2, r3
 80066a4:	6979      	ldr	r1, [r7, #20]
 80066a6:	f005 fee7 	bl	800c478 <USB_EP0StartXfer>
 80066aa:	e008      	b.n	80066be <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6818      	ldr	r0, [r3, #0]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	461a      	mov	r2, r3
 80066b8:	6979      	ldr	r1, [r7, #20]
 80066ba:	f005 fc95 	bl	800bfe8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3718      	adds	r7, #24
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	460b      	mov	r3, r1
 80066d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80066d4:	78fb      	ldrb	r3, [r7, #3]
 80066d6:	f003 020f 	and.w	r2, r3, #15
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d901      	bls.n	80066e6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e050      	b.n	8006788 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80066e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	da0f      	bge.n	800670e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066ee:	78fb      	ldrb	r3, [r7, #3]
 80066f0:	f003 020f 	and.w	r2, r3, #15
 80066f4:	4613      	mov	r3, r2
 80066f6:	00db      	lsls	r3, r3, #3
 80066f8:	4413      	add	r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	3338      	adds	r3, #56	; 0x38
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	4413      	add	r3, r2
 8006702:	3304      	adds	r3, #4
 8006704:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2201      	movs	r2, #1
 800670a:	705a      	strb	r2, [r3, #1]
 800670c:	e00d      	b.n	800672a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800670e:	78fa      	ldrb	r2, [r7, #3]
 8006710:	4613      	mov	r3, r2
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	4413      	add	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	4413      	add	r3, r2
 8006720:	3304      	adds	r3, #4
 8006722:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2201      	movs	r2, #1
 800672e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006730:	78fb      	ldrb	r3, [r7, #3]
 8006732:	f003 030f 	and.w	r3, r3, #15
 8006736:	b2da      	uxtb	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006742:	2b01      	cmp	r3, #1
 8006744:	d101      	bne.n	800674a <HAL_PCD_EP_SetStall+0x82>
 8006746:	2302      	movs	r3, #2
 8006748:	e01e      	b.n	8006788 <HAL_PCD_EP_SetStall+0xc0>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68f9      	ldr	r1, [r7, #12]
 8006758:	4618      	mov	r0, r3
 800675a:	f006 f925 	bl	800c9a8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800675e:	78fb      	ldrb	r3, [r7, #3]
 8006760:	f003 030f 	and.w	r3, r3, #15
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10a      	bne.n	800677e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6818      	ldr	r0, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	b2d9      	uxtb	r1, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006778:	461a      	mov	r2, r3
 800677a:	f006 fb65 	bl	800ce48 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	460b      	mov	r3, r1
 800679a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800679c:	78fb      	ldrb	r3, [r7, #3]
 800679e:	f003 020f 	and.w	r2, r3, #15
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d901      	bls.n	80067ae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e042      	b.n	8006834 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80067ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	da0f      	bge.n	80067d6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067b6:	78fb      	ldrb	r3, [r7, #3]
 80067b8:	f003 020f 	and.w	r2, r3, #15
 80067bc:	4613      	mov	r3, r2
 80067be:	00db      	lsls	r3, r3, #3
 80067c0:	4413      	add	r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	3338      	adds	r3, #56	; 0x38
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	4413      	add	r3, r2
 80067ca:	3304      	adds	r3, #4
 80067cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2201      	movs	r2, #1
 80067d2:	705a      	strb	r2, [r3, #1]
 80067d4:	e00f      	b.n	80067f6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80067d6:	78fb      	ldrb	r3, [r7, #3]
 80067d8:	f003 020f 	and.w	r2, r3, #15
 80067dc:	4613      	mov	r3, r2
 80067de:	00db      	lsls	r3, r3, #3
 80067e0:	4413      	add	r3, r2
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	4413      	add	r3, r2
 80067ec:	3304      	adds	r3, #4
 80067ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067fc:	78fb      	ldrb	r3, [r7, #3]
 80067fe:	f003 030f 	and.w	r3, r3, #15
 8006802:	b2da      	uxtb	r2, r3
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800680e:	2b01      	cmp	r3, #1
 8006810:	d101      	bne.n	8006816 <HAL_PCD_EP_ClrStall+0x86>
 8006812:	2302      	movs	r3, #2
 8006814:	e00e      	b.n	8006834 <HAL_PCD_EP_ClrStall+0xa4>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68f9      	ldr	r1, [r7, #12]
 8006824:	4618      	mov	r0, r3
 8006826:	f006 f92d 	bl	800ca84 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	460b      	mov	r3, r1
 8006846:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006848:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800684c:	2b00      	cmp	r3, #0
 800684e:	da0c      	bge.n	800686a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006850:	78fb      	ldrb	r3, [r7, #3]
 8006852:	f003 020f 	and.w	r2, r3, #15
 8006856:	4613      	mov	r3, r2
 8006858:	00db      	lsls	r3, r3, #3
 800685a:	4413      	add	r3, r2
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	3338      	adds	r3, #56	; 0x38
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	4413      	add	r3, r2
 8006864:	3304      	adds	r3, #4
 8006866:	60fb      	str	r3, [r7, #12]
 8006868:	e00c      	b.n	8006884 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800686a:	78fb      	ldrb	r3, [r7, #3]
 800686c:	f003 020f 	and.w	r2, r3, #15
 8006870:	4613      	mov	r3, r2
 8006872:	00db      	lsls	r3, r3, #3
 8006874:	4413      	add	r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	4413      	add	r3, r2
 8006880:	3304      	adds	r3, #4
 8006882:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68f9      	ldr	r1, [r7, #12]
 800688a:	4618      	mov	r0, r3
 800688c:	f005 ff4c 	bl	800c728 <USB_EPStopXfer>
 8006890:	4603      	mov	r3, r0
 8006892:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006894:	7afb      	ldrb	r3, [r7, #11]
}
 8006896:	4618      	mov	r0, r3
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b082      	sub	sp, #8
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	460b      	mov	r3, r1
 80068a8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d101      	bne.n	80068b8 <HAL_PCD_EP_Flush+0x1a>
 80068b4:	2302      	movs	r3, #2
 80068b6:	e01b      	b.n	80068f0 <HAL_PCD_EP_Flush+0x52>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 80068c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	da09      	bge.n	80068dc <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	78fb      	ldrb	r3, [r7, #3]
 80068ce:	f003 030f 	and.w	r3, r3, #15
 80068d2:	4619      	mov	r1, r3
 80068d4:	4610      	mov	r0, r2
 80068d6:	f005 f981 	bl	800bbdc <USB_FlushTxFifo>
 80068da:	e004      	b.n	80068e6 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4618      	mov	r0, r3
 80068e2:	f005 f9af 	bl	800bc44 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b08a      	sub	sp, #40	; 0x28
 80068fc:	af02      	add	r7, sp, #8
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800690c:	683a      	ldr	r2, [r7, #0]
 800690e:	4613      	mov	r3, r2
 8006910:	00db      	lsls	r3, r3, #3
 8006912:	4413      	add	r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	3338      	adds	r3, #56	; 0x38
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	4413      	add	r3, r2
 800691c:	3304      	adds	r3, #4
 800691e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6a1a      	ldr	r2, [r3, #32]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	429a      	cmp	r2, r3
 800692a:	d901      	bls.n	8006930 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e06c      	b.n	8006a0a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	699a      	ldr	r2, [r3, #24]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6a1b      	ldr	r3, [r3, #32]
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	69fa      	ldr	r2, [r7, #28]
 8006942:	429a      	cmp	r2, r3
 8006944:	d902      	bls.n	800694c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	3303      	adds	r3, #3
 8006950:	089b      	lsrs	r3, r3, #2
 8006952:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006954:	e02b      	b.n	80069ae <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	699a      	ldr	r2, [r3, #24]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6a1b      	ldr	r3, [r3, #32]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	69fa      	ldr	r2, [r7, #28]
 8006968:	429a      	cmp	r2, r3
 800696a:	d902      	bls.n	8006972 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	3303      	adds	r3, #3
 8006976:	089b      	lsrs	r3, r3, #2
 8006978:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6919      	ldr	r1, [r3, #16]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	b2da      	uxtb	r2, r3
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800698a:	b2db      	uxtb	r3, r3
 800698c:	9300      	str	r3, [sp, #0]
 800698e:	4603      	mov	r3, r0
 8006990:	6978      	ldr	r0, [r7, #20]
 8006992:	f005 ff73 	bl	800c87c <USB_WritePacket>

    ep->xfer_buff  += len;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	691a      	ldr	r2, [r3, #16]
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	441a      	add	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6a1a      	ldr	r2, [r3, #32]
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	441a      	add	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	015a      	lsls	r2, r3, #5
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	b29b      	uxth	r3, r3
 80069be:	69ba      	ldr	r2, [r7, #24]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d809      	bhi.n	80069d8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6a1a      	ldr	r2, [r3, #32]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d203      	bcs.n	80069d8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1be      	bne.n	8006956 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	699a      	ldr	r2, [r3, #24]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6a1b      	ldr	r3, [r3, #32]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d811      	bhi.n	8006a08 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	f003 030f 	and.w	r3, r3, #15
 80069ea:	2201      	movs	r2, #1
 80069ec:	fa02 f303 	lsl.w	r3, r2, r3
 80069f0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	43db      	mvns	r3, r3
 80069fe:	6939      	ldr	r1, [r7, #16]
 8006a00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a04:	4013      	ands	r3, r2
 8006a06:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3720      	adds	r7, #32
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
	...

08006a14 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b088      	sub	sp, #32
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	333c      	adds	r3, #60	; 0x3c
 8006a2c:	3304      	adds	r3, #4
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	015a      	lsls	r2, r3, #5
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	4413      	add	r3, r2
 8006a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d17b      	bne.n	8006b42 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	f003 0308 	and.w	r3, r3, #8
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d015      	beq.n	8006a80 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	4a61      	ldr	r2, [pc, #388]	; (8006bdc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	f240 80b9 	bls.w	8006bd0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f000 80b3 	beq.w	8006bd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	015a      	lsls	r2, r3, #5
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	4413      	add	r3, r2
 8006a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a76:	461a      	mov	r2, r3
 8006a78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a7c:	6093      	str	r3, [r2, #8]
 8006a7e:	e0a7      	b.n	8006bd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	f003 0320 	and.w	r3, r3, #32
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d009      	beq.n	8006a9e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	015a      	lsls	r2, r3, #5
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a96:	461a      	mov	r2, r3
 8006a98:	2320      	movs	r3, #32
 8006a9a:	6093      	str	r3, [r2, #8]
 8006a9c:	e098      	b.n	8006bd0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f040 8093 	bne.w	8006bd0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	4a4b      	ldr	r2, [pc, #300]	; (8006bdc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d90f      	bls.n	8006ad2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00a      	beq.n	8006ad2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	015a      	lsls	r2, r3, #5
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac8:	461a      	mov	r2, r3
 8006aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ace:	6093      	str	r3, [r2, #8]
 8006ad0:	e07e      	b.n	8006bd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006ad2:	683a      	ldr	r2, [r7, #0]
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	00db      	lsls	r3, r3, #3
 8006ad8:	4413      	add	r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	3304      	adds	r3, #4
 8006ae6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	69da      	ldr	r2, [r3, #28]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	0159      	lsls	r1, r3, #5
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	440b      	add	r3, r1
 8006af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006afe:	1ad2      	subs	r2, r2, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d114      	bne.n	8006b34 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d109      	bne.n	8006b26 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6818      	ldr	r0, [r3, #0]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	2101      	movs	r1, #1
 8006b20:	f006 f992 	bl	800ce48 <USB_EP0_OutStart>
 8006b24:	e006      	b.n	8006b34 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	691a      	ldr	r2, [r3, #16]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	441a      	add	r2, r3
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	4619      	mov	r1, r3
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f012 fa2a 	bl	8018f94 <HAL_PCD_DataOutStageCallback>
 8006b40:	e046      	b.n	8006bd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	4a26      	ldr	r2, [pc, #152]	; (8006be0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d124      	bne.n	8006b94 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00a      	beq.n	8006b6a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	015a      	lsls	r2, r3, #5
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b60:	461a      	mov	r2, r3
 8006b62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b66:	6093      	str	r3, [r2, #8]
 8006b68:	e032      	b.n	8006bd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	f003 0320 	and.w	r3, r3, #32
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d008      	beq.n	8006b86 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	015a      	lsls	r2, r3, #5
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b80:	461a      	mov	r2, r3
 8006b82:	2320      	movs	r3, #32
 8006b84:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f012 fa01 	bl	8018f94 <HAL_PCD_DataOutStageCallback>
 8006b92:	e01d      	b.n	8006bd0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d114      	bne.n	8006bc4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006b9a:	6879      	ldr	r1, [r7, #4]
 8006b9c:	683a      	ldr	r2, [r7, #0]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	00db      	lsls	r3, r3, #3
 8006ba2:	4413      	add	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	440b      	add	r3, r1
 8006ba8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d108      	bne.n	8006bc4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6818      	ldr	r0, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	2100      	movs	r1, #0
 8006bc0:	f006 f942 	bl	800ce48 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	4619      	mov	r1, r3
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f012 f9e2 	bl	8018f94 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3720      	adds	r7, #32
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	4f54300a 	.word	0x4f54300a
 8006be0:	4f54310a 	.word	0x4f54310a

08006be4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b086      	sub	sp, #24
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	333c      	adds	r3, #60	; 0x3c
 8006bfc:	3304      	adds	r3, #4
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	015a      	lsls	r2, r3, #5
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	4413      	add	r3, r2
 8006c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	4a15      	ldr	r2, [pc, #84]	; (8006c6c <PCD_EP_OutSetupPacket_int+0x88>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d90e      	bls.n	8006c38 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d009      	beq.n	8006c38 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	015a      	lsls	r2, r3, #5
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c30:	461a      	mov	r2, r3
 8006c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c36:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f012 f999 	bl	8018f70 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	4a0a      	ldr	r2, [pc, #40]	; (8006c6c <PCD_EP_OutSetupPacket_int+0x88>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d90c      	bls.n	8006c60 <PCD_EP_OutSetupPacket_int+0x7c>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d108      	bne.n	8006c60 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6818      	ldr	r0, [r3, #0]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006c58:	461a      	mov	r2, r3
 8006c5a:	2101      	movs	r1, #1
 8006c5c:	f006 f8f4 	bl	800ce48 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3718      	adds	r7, #24
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	4f54300a 	.word	0x4f54300a

08006c70 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	460b      	mov	r3, r1
 8006c7a:	70fb      	strb	r3, [r7, #3]
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c86:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006c88:	78fb      	ldrb	r3, [r7, #3]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d107      	bne.n	8006c9e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006c8e:	883b      	ldrh	r3, [r7, #0]
 8006c90:	0419      	lsls	r1, r3, #16
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68ba      	ldr	r2, [r7, #8]
 8006c98:	430a      	orrs	r2, r1
 8006c9a:	629a      	str	r2, [r3, #40]	; 0x28
 8006c9c:	e028      	b.n	8006cf0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca4:	0c1b      	lsrs	r3, r3, #16
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	4413      	add	r3, r2
 8006caa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006cac:	2300      	movs	r3, #0
 8006cae:	73fb      	strb	r3, [r7, #15]
 8006cb0:	e00d      	b.n	8006cce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	7bfb      	ldrb	r3, [r7, #15]
 8006cb8:	3340      	adds	r3, #64	; 0x40
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	0c1b      	lsrs	r3, r3, #16
 8006cc2:	68ba      	ldr	r2, [r7, #8]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	73fb      	strb	r3, [r7, #15]
 8006cce:	7bfa      	ldrb	r2, [r7, #15]
 8006cd0:	78fb      	ldrb	r3, [r7, #3]
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d3ec      	bcc.n	8006cb2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006cd8:	883b      	ldrh	r3, [r7, #0]
 8006cda:	0418      	lsls	r0, r3, #16
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6819      	ldr	r1, [r3, #0]
 8006ce0:	78fb      	ldrb	r3, [r7, #3]
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	68ba      	ldr	r2, [r7, #8]
 8006ce6:	4302      	orrs	r2, r0
 8006ce8:	3340      	adds	r3, #64	; 0x40
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	440b      	add	r3, r1
 8006cee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3714      	adds	r7, #20
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b083      	sub	sp, #12
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
 8006d06:	460b      	mov	r3, r1
 8006d08:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	887a      	ldrh	r2, [r7, #2]
 8006d10:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	460b      	mov	r3, r1
 8006d2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	460b      	mov	r3, r1
 8006d42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8006d44:	4b10      	ldr	r3, [pc, #64]	; (8006d88 <HAL_PWR_EnterSTOPMode+0x50>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f023 0203 	bic.w	r2, r3, #3
 8006d4c:	490e      	ldr	r1, [pc, #56]	; (8006d88 <HAL_PWR_EnterSTOPMode+0x50>)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006d54:	4b0d      	ldr	r3, [pc, #52]	; (8006d8c <HAL_PWR_EnterSTOPMode+0x54>)
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	4a0c      	ldr	r2, [pc, #48]	; (8006d8c <HAL_PWR_EnterSTOPMode+0x54>)
 8006d5a:	f043 0304 	orr.w	r3, r3, #4
 8006d5e:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8006d60:	78fb      	ldrb	r3, [r7, #3]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d101      	bne.n	8006d6a <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8006d66:	bf30      	wfi
 8006d68:	e002      	b.n	8006d70 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006d6a:	bf40      	sev
    __WFE();
 8006d6c:	bf20      	wfe
    __WFE();
 8006d6e:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8006d70:	4b06      	ldr	r3, [pc, #24]	; (8006d8c <HAL_PWR_EnterSTOPMode+0x54>)
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	4a05      	ldr	r2, [pc, #20]	; (8006d8c <HAL_PWR_EnterSTOPMode+0x54>)
 8006d76:	f023 0304 	bic.w	r3, r3, #4
 8006d7a:	6113      	str	r3, [r2, #16]
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr
 8006d88:	40007000 	.word	0x40007000
 8006d8c:	e000ed00 	.word	0xe000ed00

08006d90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d101      	bne.n	8006da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e267      	b.n	8007272 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d075      	beq.n	8006e9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006dae:	4b88      	ldr	r3, [pc, #544]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f003 030c 	and.w	r3, r3, #12
 8006db6:	2b04      	cmp	r3, #4
 8006db8:	d00c      	beq.n	8006dd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006dba:	4b85      	ldr	r3, [pc, #532]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006dc2:	2b08      	cmp	r3, #8
 8006dc4:	d112      	bne.n	8006dec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006dc6:	4b82      	ldr	r3, [pc, #520]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dd2:	d10b      	bne.n	8006dec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dd4:	4b7e      	ldr	r3, [pc, #504]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d05b      	beq.n	8006e98 <HAL_RCC_OscConfig+0x108>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d157      	bne.n	8006e98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e242      	b.n	8007272 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006df4:	d106      	bne.n	8006e04 <HAL_RCC_OscConfig+0x74>
 8006df6:	4b76      	ldr	r3, [pc, #472]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a75      	ldr	r2, [pc, #468]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e00:	6013      	str	r3, [r2, #0]
 8006e02:	e01d      	b.n	8006e40 <HAL_RCC_OscConfig+0xb0>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e0c:	d10c      	bne.n	8006e28 <HAL_RCC_OscConfig+0x98>
 8006e0e:	4b70      	ldr	r3, [pc, #448]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a6f      	ldr	r2, [pc, #444]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e18:	6013      	str	r3, [r2, #0]
 8006e1a:	4b6d      	ldr	r3, [pc, #436]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a6c      	ldr	r2, [pc, #432]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e24:	6013      	str	r3, [r2, #0]
 8006e26:	e00b      	b.n	8006e40 <HAL_RCC_OscConfig+0xb0>
 8006e28:	4b69      	ldr	r3, [pc, #420]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a68      	ldr	r2, [pc, #416]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e32:	6013      	str	r3, [r2, #0]
 8006e34:	4b66      	ldr	r3, [pc, #408]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a65      	ldr	r2, [pc, #404]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d013      	beq.n	8006e70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e48:	f7fb ff18 	bl	8002c7c <HAL_GetTick>
 8006e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e4e:	e008      	b.n	8006e62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e50:	f7fb ff14 	bl	8002c7c <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	2b64      	cmp	r3, #100	; 0x64
 8006e5c:	d901      	bls.n	8006e62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e207      	b.n	8007272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e62:	4b5b      	ldr	r3, [pc, #364]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d0f0      	beq.n	8006e50 <HAL_RCC_OscConfig+0xc0>
 8006e6e:	e014      	b.n	8006e9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e70:	f7fb ff04 	bl	8002c7c <HAL_GetTick>
 8006e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e76:	e008      	b.n	8006e8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e78:	f7fb ff00 	bl	8002c7c <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	2b64      	cmp	r3, #100	; 0x64
 8006e84:	d901      	bls.n	8006e8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e1f3      	b.n	8007272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e8a:	4b51      	ldr	r3, [pc, #324]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1f0      	bne.n	8006e78 <HAL_RCC_OscConfig+0xe8>
 8006e96:	e000      	b.n	8006e9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0302 	and.w	r3, r3, #2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d063      	beq.n	8006f6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ea6:	4b4a      	ldr	r3, [pc, #296]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f003 030c 	and.w	r3, r3, #12
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00b      	beq.n	8006eca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006eb2:	4b47      	ldr	r3, [pc, #284]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006eba:	2b08      	cmp	r3, #8
 8006ebc:	d11c      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ebe:	4b44      	ldr	r3, [pc, #272]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d116      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006eca:	4b41      	ldr	r3, [pc, #260]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0302 	and.w	r3, r3, #2
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d005      	beq.n	8006ee2 <HAL_RCC_OscConfig+0x152>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d001      	beq.n	8006ee2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e1c7      	b.n	8007272 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ee2:	4b3b      	ldr	r3, [pc, #236]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	4937      	ldr	r1, [pc, #220]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ef6:	e03a      	b.n	8006f6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d020      	beq.n	8006f42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f00:	4b34      	ldr	r3, [pc, #208]	; (8006fd4 <HAL_RCC_OscConfig+0x244>)
 8006f02:	2201      	movs	r2, #1
 8006f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f06:	f7fb feb9 	bl	8002c7c <HAL_GetTick>
 8006f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f0c:	e008      	b.n	8006f20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f0e:	f7fb feb5 	bl	8002c7c <HAL_GetTick>
 8006f12:	4602      	mov	r2, r0
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d901      	bls.n	8006f20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e1a8      	b.n	8007272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f20:	4b2b      	ldr	r3, [pc, #172]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0302 	and.w	r3, r3, #2
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d0f0      	beq.n	8006f0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f2c:	4b28      	ldr	r3, [pc, #160]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	00db      	lsls	r3, r3, #3
 8006f3a:	4925      	ldr	r1, [pc, #148]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	600b      	str	r3, [r1, #0]
 8006f40:	e015      	b.n	8006f6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f42:	4b24      	ldr	r3, [pc, #144]	; (8006fd4 <HAL_RCC_OscConfig+0x244>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f48:	f7fb fe98 	bl	8002c7c <HAL_GetTick>
 8006f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f4e:	e008      	b.n	8006f62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f50:	f7fb fe94 	bl	8002c7c <HAL_GetTick>
 8006f54:	4602      	mov	r2, r0
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d901      	bls.n	8006f62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e187      	b.n	8007272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f62:	4b1b      	ldr	r3, [pc, #108]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 0302 	and.w	r3, r3, #2
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1f0      	bne.n	8006f50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0308 	and.w	r3, r3, #8
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d036      	beq.n	8006fe8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d016      	beq.n	8006fb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f82:	4b15      	ldr	r3, [pc, #84]	; (8006fd8 <HAL_RCC_OscConfig+0x248>)
 8006f84:	2201      	movs	r2, #1
 8006f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f88:	f7fb fe78 	bl	8002c7c <HAL_GetTick>
 8006f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f8e:	e008      	b.n	8006fa2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f90:	f7fb fe74 	bl	8002c7c <HAL_GetTick>
 8006f94:	4602      	mov	r2, r0
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d901      	bls.n	8006fa2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e167      	b.n	8007272 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fa2:	4b0b      	ldr	r3, [pc, #44]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fa6:	f003 0302 	and.w	r3, r3, #2
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d0f0      	beq.n	8006f90 <HAL_RCC_OscConfig+0x200>
 8006fae:	e01b      	b.n	8006fe8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fb0:	4b09      	ldr	r3, [pc, #36]	; (8006fd8 <HAL_RCC_OscConfig+0x248>)
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fb6:	f7fb fe61 	bl	8002c7c <HAL_GetTick>
 8006fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fbc:	e00e      	b.n	8006fdc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006fbe:	f7fb fe5d 	bl	8002c7c <HAL_GetTick>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d907      	bls.n	8006fdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e150      	b.n	8007272 <HAL_RCC_OscConfig+0x4e2>
 8006fd0:	40023800 	.word	0x40023800
 8006fd4:	42470000 	.word	0x42470000
 8006fd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fdc:	4b88      	ldr	r3, [pc, #544]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 8006fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fe0:	f003 0302 	and.w	r3, r3, #2
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1ea      	bne.n	8006fbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0304 	and.w	r3, r3, #4
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f000 8097 	beq.w	8007124 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ffa:	4b81      	ldr	r3, [pc, #516]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10f      	bne.n	8007026 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007006:	2300      	movs	r3, #0
 8007008:	60bb      	str	r3, [r7, #8]
 800700a:	4b7d      	ldr	r3, [pc, #500]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 800700c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700e:	4a7c      	ldr	r2, [pc, #496]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 8007010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007014:	6413      	str	r3, [r2, #64]	; 0x40
 8007016:	4b7a      	ldr	r3, [pc, #488]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 8007018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800701e:	60bb      	str	r3, [r7, #8]
 8007020:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007022:	2301      	movs	r3, #1
 8007024:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007026:	4b77      	ldr	r3, [pc, #476]	; (8007204 <HAL_RCC_OscConfig+0x474>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800702e:	2b00      	cmp	r3, #0
 8007030:	d118      	bne.n	8007064 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007032:	4b74      	ldr	r3, [pc, #464]	; (8007204 <HAL_RCC_OscConfig+0x474>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a73      	ldr	r2, [pc, #460]	; (8007204 <HAL_RCC_OscConfig+0x474>)
 8007038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800703c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800703e:	f7fb fe1d 	bl	8002c7c <HAL_GetTick>
 8007042:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007044:	e008      	b.n	8007058 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007046:	f7fb fe19 	bl	8002c7c <HAL_GetTick>
 800704a:	4602      	mov	r2, r0
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	2b02      	cmp	r3, #2
 8007052:	d901      	bls.n	8007058 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e10c      	b.n	8007272 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007058:	4b6a      	ldr	r3, [pc, #424]	; (8007204 <HAL_RCC_OscConfig+0x474>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007060:	2b00      	cmp	r3, #0
 8007062:	d0f0      	beq.n	8007046 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d106      	bne.n	800707a <HAL_RCC_OscConfig+0x2ea>
 800706c:	4b64      	ldr	r3, [pc, #400]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 800706e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007070:	4a63      	ldr	r2, [pc, #396]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 8007072:	f043 0301 	orr.w	r3, r3, #1
 8007076:	6713      	str	r3, [r2, #112]	; 0x70
 8007078:	e01c      	b.n	80070b4 <HAL_RCC_OscConfig+0x324>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	2b05      	cmp	r3, #5
 8007080:	d10c      	bne.n	800709c <HAL_RCC_OscConfig+0x30c>
 8007082:	4b5f      	ldr	r3, [pc, #380]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 8007084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007086:	4a5e      	ldr	r2, [pc, #376]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 8007088:	f043 0304 	orr.w	r3, r3, #4
 800708c:	6713      	str	r3, [r2, #112]	; 0x70
 800708e:	4b5c      	ldr	r3, [pc, #368]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 8007090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007092:	4a5b      	ldr	r2, [pc, #364]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 8007094:	f043 0301 	orr.w	r3, r3, #1
 8007098:	6713      	str	r3, [r2, #112]	; 0x70
 800709a:	e00b      	b.n	80070b4 <HAL_RCC_OscConfig+0x324>
 800709c:	4b58      	ldr	r3, [pc, #352]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 800709e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070a0:	4a57      	ldr	r2, [pc, #348]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 80070a2:	f023 0301 	bic.w	r3, r3, #1
 80070a6:	6713      	str	r3, [r2, #112]	; 0x70
 80070a8:	4b55      	ldr	r3, [pc, #340]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 80070aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ac:	4a54      	ldr	r2, [pc, #336]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 80070ae:	f023 0304 	bic.w	r3, r3, #4
 80070b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d015      	beq.n	80070e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070bc:	f7fb fdde 	bl	8002c7c <HAL_GetTick>
 80070c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070c2:	e00a      	b.n	80070da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070c4:	f7fb fdda 	bl	8002c7c <HAL_GetTick>
 80070c8:	4602      	mov	r2, r0
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d901      	bls.n	80070da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e0cb      	b.n	8007272 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070da:	4b49      	ldr	r3, [pc, #292]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 80070dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070de:	f003 0302 	and.w	r3, r3, #2
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d0ee      	beq.n	80070c4 <HAL_RCC_OscConfig+0x334>
 80070e6:	e014      	b.n	8007112 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070e8:	f7fb fdc8 	bl	8002c7c <HAL_GetTick>
 80070ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070ee:	e00a      	b.n	8007106 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070f0:	f7fb fdc4 	bl	8002c7c <HAL_GetTick>
 80070f4:	4602      	mov	r2, r0
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80070fe:	4293      	cmp	r3, r2
 8007100:	d901      	bls.n	8007106 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e0b5      	b.n	8007272 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007106:	4b3e      	ldr	r3, [pc, #248]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 8007108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800710a:	f003 0302 	and.w	r3, r3, #2
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1ee      	bne.n	80070f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007112:	7dfb      	ldrb	r3, [r7, #23]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d105      	bne.n	8007124 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007118:	4b39      	ldr	r3, [pc, #228]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 800711a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711c:	4a38      	ldr	r2, [pc, #224]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 800711e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007122:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	2b00      	cmp	r3, #0
 800712a:	f000 80a1 	beq.w	8007270 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800712e:	4b34      	ldr	r3, [pc, #208]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f003 030c 	and.w	r3, r3, #12
 8007136:	2b08      	cmp	r3, #8
 8007138:	d05c      	beq.n	80071f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	2b02      	cmp	r3, #2
 8007140:	d141      	bne.n	80071c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007142:	4b31      	ldr	r3, [pc, #196]	; (8007208 <HAL_RCC_OscConfig+0x478>)
 8007144:	2200      	movs	r2, #0
 8007146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007148:	f7fb fd98 	bl	8002c7c <HAL_GetTick>
 800714c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800714e:	e008      	b.n	8007162 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007150:	f7fb fd94 	bl	8002c7c <HAL_GetTick>
 8007154:	4602      	mov	r2, r0
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	2b02      	cmp	r3, #2
 800715c:	d901      	bls.n	8007162 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e087      	b.n	8007272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007162:	4b27      	ldr	r3, [pc, #156]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1f0      	bne.n	8007150 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	69da      	ldr	r2, [r3, #28]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a1b      	ldr	r3, [r3, #32]
 8007176:	431a      	orrs	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717c:	019b      	lsls	r3, r3, #6
 800717e:	431a      	orrs	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007184:	085b      	lsrs	r3, r3, #1
 8007186:	3b01      	subs	r3, #1
 8007188:	041b      	lsls	r3, r3, #16
 800718a:	431a      	orrs	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007190:	061b      	lsls	r3, r3, #24
 8007192:	491b      	ldr	r1, [pc, #108]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 8007194:	4313      	orrs	r3, r2
 8007196:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007198:	4b1b      	ldr	r3, [pc, #108]	; (8007208 <HAL_RCC_OscConfig+0x478>)
 800719a:	2201      	movs	r2, #1
 800719c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800719e:	f7fb fd6d 	bl	8002c7c <HAL_GetTick>
 80071a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071a4:	e008      	b.n	80071b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071a6:	f7fb fd69 	bl	8002c7c <HAL_GetTick>
 80071aa:	4602      	mov	r2, r0
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d901      	bls.n	80071b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e05c      	b.n	8007272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071b8:	4b11      	ldr	r3, [pc, #68]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d0f0      	beq.n	80071a6 <HAL_RCC_OscConfig+0x416>
 80071c4:	e054      	b.n	8007270 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071c6:	4b10      	ldr	r3, [pc, #64]	; (8007208 <HAL_RCC_OscConfig+0x478>)
 80071c8:	2200      	movs	r2, #0
 80071ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071cc:	f7fb fd56 	bl	8002c7c <HAL_GetTick>
 80071d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071d2:	e008      	b.n	80071e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071d4:	f7fb fd52 	bl	8002c7c <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d901      	bls.n	80071e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e045      	b.n	8007272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071e6:	4b06      	ldr	r3, [pc, #24]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1f0      	bne.n	80071d4 <HAL_RCC_OscConfig+0x444>
 80071f2:	e03d      	b.n	8007270 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d107      	bne.n	800720c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e038      	b.n	8007272 <HAL_RCC_OscConfig+0x4e2>
 8007200:	40023800 	.word	0x40023800
 8007204:	40007000 	.word	0x40007000
 8007208:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800720c:	4b1b      	ldr	r3, [pc, #108]	; (800727c <HAL_RCC_OscConfig+0x4ec>)
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d028      	beq.n	800726c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007224:	429a      	cmp	r2, r3
 8007226:	d121      	bne.n	800726c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007232:	429a      	cmp	r2, r3
 8007234:	d11a      	bne.n	800726c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800723c:	4013      	ands	r3, r2
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007242:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007244:	4293      	cmp	r3, r2
 8007246:	d111      	bne.n	800726c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007252:	085b      	lsrs	r3, r3, #1
 8007254:	3b01      	subs	r3, #1
 8007256:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007258:	429a      	cmp	r2, r3
 800725a:	d107      	bne.n	800726c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007266:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007268:	429a      	cmp	r2, r3
 800726a:	d001      	beq.n	8007270 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	e000      	b.n	8007272 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3718      	adds	r7, #24
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	40023800 	.word	0x40023800

08007280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d101      	bne.n	8007294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e0cc      	b.n	800742e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007294:	4b68      	ldr	r3, [pc, #416]	; (8007438 <HAL_RCC_ClockConfig+0x1b8>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 0307 	and.w	r3, r3, #7
 800729c:	683a      	ldr	r2, [r7, #0]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d90c      	bls.n	80072bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072a2:	4b65      	ldr	r3, [pc, #404]	; (8007438 <HAL_RCC_ClockConfig+0x1b8>)
 80072a4:	683a      	ldr	r2, [r7, #0]
 80072a6:	b2d2      	uxtb	r2, r2
 80072a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072aa:	4b63      	ldr	r3, [pc, #396]	; (8007438 <HAL_RCC_ClockConfig+0x1b8>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 0307 	and.w	r3, r3, #7
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d001      	beq.n	80072bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e0b8      	b.n	800742e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0302 	and.w	r3, r3, #2
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d020      	beq.n	800730a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0304 	and.w	r3, r3, #4
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d005      	beq.n	80072e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80072d4:	4b59      	ldr	r3, [pc, #356]	; (800743c <HAL_RCC_ClockConfig+0x1bc>)
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	4a58      	ldr	r2, [pc, #352]	; (800743c <HAL_RCC_ClockConfig+0x1bc>)
 80072da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80072de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 0308 	and.w	r3, r3, #8
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d005      	beq.n	80072f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80072ec:	4b53      	ldr	r3, [pc, #332]	; (800743c <HAL_RCC_ClockConfig+0x1bc>)
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	4a52      	ldr	r2, [pc, #328]	; (800743c <HAL_RCC_ClockConfig+0x1bc>)
 80072f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80072f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072f8:	4b50      	ldr	r3, [pc, #320]	; (800743c <HAL_RCC_ClockConfig+0x1bc>)
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	494d      	ldr	r1, [pc, #308]	; (800743c <HAL_RCC_ClockConfig+0x1bc>)
 8007306:	4313      	orrs	r3, r2
 8007308:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 0301 	and.w	r3, r3, #1
 8007312:	2b00      	cmp	r3, #0
 8007314:	d044      	beq.n	80073a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d107      	bne.n	800732e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800731e:	4b47      	ldr	r3, [pc, #284]	; (800743c <HAL_RCC_ClockConfig+0x1bc>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d119      	bne.n	800735e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e07f      	b.n	800742e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	2b02      	cmp	r3, #2
 8007334:	d003      	beq.n	800733e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800733a:	2b03      	cmp	r3, #3
 800733c:	d107      	bne.n	800734e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800733e:	4b3f      	ldr	r3, [pc, #252]	; (800743c <HAL_RCC_ClockConfig+0x1bc>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d109      	bne.n	800735e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e06f      	b.n	800742e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800734e:	4b3b      	ldr	r3, [pc, #236]	; (800743c <HAL_RCC_ClockConfig+0x1bc>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0302 	and.w	r3, r3, #2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d101      	bne.n	800735e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e067      	b.n	800742e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800735e:	4b37      	ldr	r3, [pc, #220]	; (800743c <HAL_RCC_ClockConfig+0x1bc>)
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	f023 0203 	bic.w	r2, r3, #3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	4934      	ldr	r1, [pc, #208]	; (800743c <HAL_RCC_ClockConfig+0x1bc>)
 800736c:	4313      	orrs	r3, r2
 800736e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007370:	f7fb fc84 	bl	8002c7c <HAL_GetTick>
 8007374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007376:	e00a      	b.n	800738e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007378:	f7fb fc80 	bl	8002c7c <HAL_GetTick>
 800737c:	4602      	mov	r2, r0
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	f241 3288 	movw	r2, #5000	; 0x1388
 8007386:	4293      	cmp	r3, r2
 8007388:	d901      	bls.n	800738e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e04f      	b.n	800742e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800738e:	4b2b      	ldr	r3, [pc, #172]	; (800743c <HAL_RCC_ClockConfig+0x1bc>)
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f003 020c 	and.w	r2, r3, #12
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	429a      	cmp	r2, r3
 800739e:	d1eb      	bne.n	8007378 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80073a0:	4b25      	ldr	r3, [pc, #148]	; (8007438 <HAL_RCC_ClockConfig+0x1b8>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0307 	and.w	r3, r3, #7
 80073a8:	683a      	ldr	r2, [r7, #0]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d20c      	bcs.n	80073c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073ae:	4b22      	ldr	r3, [pc, #136]	; (8007438 <HAL_RCC_ClockConfig+0x1b8>)
 80073b0:	683a      	ldr	r2, [r7, #0]
 80073b2:	b2d2      	uxtb	r2, r2
 80073b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80073b6:	4b20      	ldr	r3, [pc, #128]	; (8007438 <HAL_RCC_ClockConfig+0x1b8>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 0307 	and.w	r3, r3, #7
 80073be:	683a      	ldr	r2, [r7, #0]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d001      	beq.n	80073c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e032      	b.n	800742e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0304 	and.w	r3, r3, #4
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d008      	beq.n	80073e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073d4:	4b19      	ldr	r3, [pc, #100]	; (800743c <HAL_RCC_ClockConfig+0x1bc>)
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	4916      	ldr	r1, [pc, #88]	; (800743c <HAL_RCC_ClockConfig+0x1bc>)
 80073e2:	4313      	orrs	r3, r2
 80073e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 0308 	and.w	r3, r3, #8
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d009      	beq.n	8007406 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80073f2:	4b12      	ldr	r3, [pc, #72]	; (800743c <HAL_RCC_ClockConfig+0x1bc>)
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	00db      	lsls	r3, r3, #3
 8007400:	490e      	ldr	r1, [pc, #56]	; (800743c <HAL_RCC_ClockConfig+0x1bc>)
 8007402:	4313      	orrs	r3, r2
 8007404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007406:	f000 f821 	bl	800744c <HAL_RCC_GetSysClockFreq>
 800740a:	4602      	mov	r2, r0
 800740c:	4b0b      	ldr	r3, [pc, #44]	; (800743c <HAL_RCC_ClockConfig+0x1bc>)
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	091b      	lsrs	r3, r3, #4
 8007412:	f003 030f 	and.w	r3, r3, #15
 8007416:	490a      	ldr	r1, [pc, #40]	; (8007440 <HAL_RCC_ClockConfig+0x1c0>)
 8007418:	5ccb      	ldrb	r3, [r1, r3]
 800741a:	fa22 f303 	lsr.w	r3, r2, r3
 800741e:	4a09      	ldr	r2, [pc, #36]	; (8007444 <HAL_RCC_ClockConfig+0x1c4>)
 8007420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007422:	4b09      	ldr	r3, [pc, #36]	; (8007448 <HAL_RCC_ClockConfig+0x1c8>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4618      	mov	r0, r3
 8007428:	f7fb fbe4 	bl	8002bf4 <HAL_InitTick>

  return HAL_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	40023c00 	.word	0x40023c00
 800743c:	40023800 	.word	0x40023800
 8007440:	0801fc08 	.word	0x0801fc08
 8007444:	2000000c 	.word	0x2000000c
 8007448:	20000010 	.word	0x20000010

0800744c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800744c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007450:	b090      	sub	sp, #64	; 0x40
 8007452:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007454:	2300      	movs	r3, #0
 8007456:	637b      	str	r3, [r7, #52]	; 0x34
 8007458:	2300      	movs	r3, #0
 800745a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800745c:	2300      	movs	r3, #0
 800745e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007460:	2300      	movs	r3, #0
 8007462:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007464:	4b59      	ldr	r3, [pc, #356]	; (80075cc <HAL_RCC_GetSysClockFreq+0x180>)
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f003 030c 	and.w	r3, r3, #12
 800746c:	2b08      	cmp	r3, #8
 800746e:	d00d      	beq.n	800748c <HAL_RCC_GetSysClockFreq+0x40>
 8007470:	2b08      	cmp	r3, #8
 8007472:	f200 80a1 	bhi.w	80075b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8007476:	2b00      	cmp	r3, #0
 8007478:	d002      	beq.n	8007480 <HAL_RCC_GetSysClockFreq+0x34>
 800747a:	2b04      	cmp	r3, #4
 800747c:	d003      	beq.n	8007486 <HAL_RCC_GetSysClockFreq+0x3a>
 800747e:	e09b      	b.n	80075b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007480:	4b53      	ldr	r3, [pc, #332]	; (80075d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007482:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007484:	e09b      	b.n	80075be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007486:	4b53      	ldr	r3, [pc, #332]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007488:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800748a:	e098      	b.n	80075be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800748c:	4b4f      	ldr	r3, [pc, #316]	; (80075cc <HAL_RCC_GetSysClockFreq+0x180>)
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007494:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007496:	4b4d      	ldr	r3, [pc, #308]	; (80075cc <HAL_RCC_GetSysClockFreq+0x180>)
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d028      	beq.n	80074f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074a2:	4b4a      	ldr	r3, [pc, #296]	; (80075cc <HAL_RCC_GetSysClockFreq+0x180>)
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	099b      	lsrs	r3, r3, #6
 80074a8:	2200      	movs	r2, #0
 80074aa:	623b      	str	r3, [r7, #32]
 80074ac:	627a      	str	r2, [r7, #36]	; 0x24
 80074ae:	6a3b      	ldr	r3, [r7, #32]
 80074b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80074b4:	2100      	movs	r1, #0
 80074b6:	4b47      	ldr	r3, [pc, #284]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80074b8:	fb03 f201 	mul.w	r2, r3, r1
 80074bc:	2300      	movs	r3, #0
 80074be:	fb00 f303 	mul.w	r3, r0, r3
 80074c2:	4413      	add	r3, r2
 80074c4:	4a43      	ldr	r2, [pc, #268]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80074c6:	fba0 1202 	umull	r1, r2, r0, r2
 80074ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074cc:	460a      	mov	r2, r1
 80074ce:	62ba      	str	r2, [r7, #40]	; 0x28
 80074d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074d2:	4413      	add	r3, r2
 80074d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d8:	2200      	movs	r2, #0
 80074da:	61bb      	str	r3, [r7, #24]
 80074dc:	61fa      	str	r2, [r7, #28]
 80074de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80074e6:	f7f9 fbe7 	bl	8000cb8 <__aeabi_uldivmod>
 80074ea:	4602      	mov	r2, r0
 80074ec:	460b      	mov	r3, r1
 80074ee:	4613      	mov	r3, r2
 80074f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074f2:	e053      	b.n	800759c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074f4:	4b35      	ldr	r3, [pc, #212]	; (80075cc <HAL_RCC_GetSysClockFreq+0x180>)
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	099b      	lsrs	r3, r3, #6
 80074fa:	2200      	movs	r2, #0
 80074fc:	613b      	str	r3, [r7, #16]
 80074fe:	617a      	str	r2, [r7, #20]
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007506:	f04f 0b00 	mov.w	fp, #0
 800750a:	4652      	mov	r2, sl
 800750c:	465b      	mov	r3, fp
 800750e:	f04f 0000 	mov.w	r0, #0
 8007512:	f04f 0100 	mov.w	r1, #0
 8007516:	0159      	lsls	r1, r3, #5
 8007518:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800751c:	0150      	lsls	r0, r2, #5
 800751e:	4602      	mov	r2, r0
 8007520:	460b      	mov	r3, r1
 8007522:	ebb2 080a 	subs.w	r8, r2, sl
 8007526:	eb63 090b 	sbc.w	r9, r3, fp
 800752a:	f04f 0200 	mov.w	r2, #0
 800752e:	f04f 0300 	mov.w	r3, #0
 8007532:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007536:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800753a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800753e:	ebb2 0408 	subs.w	r4, r2, r8
 8007542:	eb63 0509 	sbc.w	r5, r3, r9
 8007546:	f04f 0200 	mov.w	r2, #0
 800754a:	f04f 0300 	mov.w	r3, #0
 800754e:	00eb      	lsls	r3, r5, #3
 8007550:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007554:	00e2      	lsls	r2, r4, #3
 8007556:	4614      	mov	r4, r2
 8007558:	461d      	mov	r5, r3
 800755a:	eb14 030a 	adds.w	r3, r4, sl
 800755e:	603b      	str	r3, [r7, #0]
 8007560:	eb45 030b 	adc.w	r3, r5, fp
 8007564:	607b      	str	r3, [r7, #4]
 8007566:	f04f 0200 	mov.w	r2, #0
 800756a:	f04f 0300 	mov.w	r3, #0
 800756e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007572:	4629      	mov	r1, r5
 8007574:	028b      	lsls	r3, r1, #10
 8007576:	4621      	mov	r1, r4
 8007578:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800757c:	4621      	mov	r1, r4
 800757e:	028a      	lsls	r2, r1, #10
 8007580:	4610      	mov	r0, r2
 8007582:	4619      	mov	r1, r3
 8007584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007586:	2200      	movs	r2, #0
 8007588:	60bb      	str	r3, [r7, #8]
 800758a:	60fa      	str	r2, [r7, #12]
 800758c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007590:	f7f9 fb92 	bl	8000cb8 <__aeabi_uldivmod>
 8007594:	4602      	mov	r2, r0
 8007596:	460b      	mov	r3, r1
 8007598:	4613      	mov	r3, r2
 800759a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800759c:	4b0b      	ldr	r3, [pc, #44]	; (80075cc <HAL_RCC_GetSysClockFreq+0x180>)
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	0c1b      	lsrs	r3, r3, #16
 80075a2:	f003 0303 	and.w	r3, r3, #3
 80075a6:	3301      	adds	r3, #1
 80075a8:	005b      	lsls	r3, r3, #1
 80075aa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80075ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80075ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80075b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80075b6:	e002      	b.n	80075be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80075b8:	4b05      	ldr	r3, [pc, #20]	; (80075d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80075ba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80075bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80075be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3740      	adds	r7, #64	; 0x40
 80075c4:	46bd      	mov	sp, r7
 80075c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075ca:	bf00      	nop
 80075cc:	40023800 	.word	0x40023800
 80075d0:	00f42400 	.word	0x00f42400
 80075d4:	017d7840 	.word	0x017d7840

080075d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075d8:	b480      	push	{r7}
 80075da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075dc:	4b03      	ldr	r3, [pc, #12]	; (80075ec <HAL_RCC_GetHCLKFreq+0x14>)
 80075de:	681b      	ldr	r3, [r3, #0]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	2000000c 	.word	0x2000000c

080075f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80075f4:	f7ff fff0 	bl	80075d8 <HAL_RCC_GetHCLKFreq>
 80075f8:	4602      	mov	r2, r0
 80075fa:	4b05      	ldr	r3, [pc, #20]	; (8007610 <HAL_RCC_GetPCLK1Freq+0x20>)
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	0a9b      	lsrs	r3, r3, #10
 8007600:	f003 0307 	and.w	r3, r3, #7
 8007604:	4903      	ldr	r1, [pc, #12]	; (8007614 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007606:	5ccb      	ldrb	r3, [r1, r3]
 8007608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800760c:	4618      	mov	r0, r3
 800760e:	bd80      	pop	{r7, pc}
 8007610:	40023800 	.word	0x40023800
 8007614:	0801fc18 	.word	0x0801fc18

08007618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800761c:	f7ff ffdc 	bl	80075d8 <HAL_RCC_GetHCLKFreq>
 8007620:	4602      	mov	r2, r0
 8007622:	4b05      	ldr	r3, [pc, #20]	; (8007638 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	0b5b      	lsrs	r3, r3, #13
 8007628:	f003 0307 	and.w	r3, r3, #7
 800762c:	4903      	ldr	r1, [pc, #12]	; (800763c <HAL_RCC_GetPCLK2Freq+0x24>)
 800762e:	5ccb      	ldrb	r3, [r1, r3]
 8007630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007634:	4618      	mov	r0, r3
 8007636:	bd80      	pop	{r7, pc}
 8007638:	40023800 	.word	0x40023800
 800763c:	0801fc18 	.word	0x0801fc18

08007640 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b086      	sub	sp, #24
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007648:	2300      	movs	r3, #0
 800764a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800764c:	2300      	movs	r3, #0
 800764e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 0301 	and.w	r3, r3, #1
 8007658:	2b00      	cmp	r3, #0
 800765a:	d105      	bne.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007664:	2b00      	cmp	r3, #0
 8007666:	d035      	beq.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007668:	4b67      	ldr	r3, [pc, #412]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800766a:	2200      	movs	r2, #0
 800766c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800766e:	f7fb fb05 	bl	8002c7c <HAL_GetTick>
 8007672:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007674:	e008      	b.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007676:	f7fb fb01 	bl	8002c7c <HAL_GetTick>
 800767a:	4602      	mov	r2, r0
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	2b02      	cmp	r3, #2
 8007682:	d901      	bls.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007684:	2303      	movs	r3, #3
 8007686:	e0ba      	b.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007688:	4b60      	ldr	r3, [pc, #384]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1f0      	bne.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	019a      	lsls	r2, r3, #6
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	071b      	lsls	r3, r3, #28
 80076a0:	495a      	ldr	r1, [pc, #360]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80076a2:	4313      	orrs	r3, r2
 80076a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80076a8:	4b57      	ldr	r3, [pc, #348]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80076aa:	2201      	movs	r2, #1
 80076ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80076ae:	f7fb fae5 	bl	8002c7c <HAL_GetTick>
 80076b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80076b4:	e008      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80076b6:	f7fb fae1 	bl	8002c7c <HAL_GetTick>
 80076ba:	4602      	mov	r2, r0
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d901      	bls.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80076c4:	2303      	movs	r3, #3
 80076c6:	e09a      	b.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80076c8:	4b50      	ldr	r3, [pc, #320]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d0f0      	beq.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 0302 	and.w	r3, r3, #2
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f000 8083 	beq.w	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80076e2:	2300      	movs	r3, #0
 80076e4:	60fb      	str	r3, [r7, #12]
 80076e6:	4b49      	ldr	r3, [pc, #292]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80076e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ea:	4a48      	ldr	r2, [pc, #288]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80076ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076f0:	6413      	str	r3, [r2, #64]	; 0x40
 80076f2:	4b46      	ldr	r3, [pc, #280]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80076f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076fa:	60fb      	str	r3, [r7, #12]
 80076fc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80076fe:	4b44      	ldr	r3, [pc, #272]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a43      	ldr	r2, [pc, #268]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007708:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800770a:	f7fb fab7 	bl	8002c7c <HAL_GetTick>
 800770e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007710:	e008      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007712:	f7fb fab3 	bl	8002c7c <HAL_GetTick>
 8007716:	4602      	mov	r2, r0
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	1ad3      	subs	r3, r2, r3
 800771c:	2b02      	cmp	r3, #2
 800771e:	d901      	bls.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007720:	2303      	movs	r3, #3
 8007722:	e06c      	b.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007724:	4b3a      	ldr	r3, [pc, #232]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800772c:	2b00      	cmp	r3, #0
 800772e:	d0f0      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007730:	4b36      	ldr	r3, [pc, #216]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007734:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007738:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d02f      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	429a      	cmp	r2, r3
 800774c:	d028      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800774e:	4b2f      	ldr	r3, [pc, #188]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007756:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007758:	4b2e      	ldr	r3, [pc, #184]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800775a:	2201      	movs	r2, #1
 800775c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800775e:	4b2d      	ldr	r3, [pc, #180]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007760:	2200      	movs	r2, #0
 8007762:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007764:	4a29      	ldr	r2, [pc, #164]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800776a:	4b28      	ldr	r3, [pc, #160]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800776c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800776e:	f003 0301 	and.w	r3, r3, #1
 8007772:	2b01      	cmp	r3, #1
 8007774:	d114      	bne.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007776:	f7fb fa81 	bl	8002c7c <HAL_GetTick>
 800777a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800777c:	e00a      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800777e:	f7fb fa7d 	bl	8002c7c <HAL_GetTick>
 8007782:	4602      	mov	r2, r0
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	f241 3288 	movw	r2, #5000	; 0x1388
 800778c:	4293      	cmp	r3, r2
 800778e:	d901      	bls.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007790:	2303      	movs	r3, #3
 8007792:	e034      	b.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007794:	4b1d      	ldr	r3, [pc, #116]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007798:	f003 0302 	and.w	r3, r3, #2
 800779c:	2b00      	cmp	r3, #0
 800779e:	d0ee      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077ac:	d10d      	bne.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80077ae:	4b17      	ldr	r3, [pc, #92]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80077be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077c2:	4912      	ldr	r1, [pc, #72]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80077c4:	4313      	orrs	r3, r2
 80077c6:	608b      	str	r3, [r1, #8]
 80077c8:	e005      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80077ca:	4b10      	ldr	r3, [pc, #64]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	4a0f      	ldr	r2, [pc, #60]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80077d0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80077d4:	6093      	str	r3, [r2, #8]
 80077d6:	4b0d      	ldr	r3, [pc, #52]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80077d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077e2:	490a      	ldr	r1, [pc, #40]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80077e4:	4313      	orrs	r3, r2
 80077e6:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 0308 	and.w	r3, r3, #8
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d003      	beq.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	7c1a      	ldrb	r2, [r3, #16]
 80077f8:	4b07      	ldr	r3, [pc, #28]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80077fa:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3718      	adds	r7, #24
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	42470068 	.word	0x42470068
 800780c:	40023800 	.word	0x40023800
 8007810:	40007000 	.word	0x40007000
 8007814:	42470e40 	.word	0x42470e40
 8007818:	424711e0 	.word	0x424711e0

0800781c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d101      	bne.n	8007832 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	e066      	b.n	8007900 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	7f5b      	ldrb	r3, [r3, #29]
 8007836:	b2db      	uxtb	r3, r3
 8007838:	2b00      	cmp	r3, #0
 800783a:	d105      	bne.n	8007848 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7fa fea6 	bl	8002594 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2202      	movs	r2, #2
 800784c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	22ca      	movs	r2, #202	; 0xca
 8007854:	625a      	str	r2, [r3, #36]	; 0x24
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2253      	movs	r2, #83	; 0x53
 800785c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fbce 	bl	8008000 <RTC_EnterInitMode>
 8007864:	4603      	mov	r3, r0
 8007866:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007868:	7bfb      	ldrb	r3, [r7, #15]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d12c      	bne.n	80078c8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	6812      	ldr	r2, [r2, #0]
 8007878:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800787c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007880:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6899      	ldr	r1, [r3, #8]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	431a      	orrs	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	431a      	orrs	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	430a      	orrs	r2, r1
 800789e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	68d2      	ldr	r2, [r2, #12]
 80078a8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	6919      	ldr	r1, [r3, #16]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	041a      	lsls	r2, r3, #16
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	430a      	orrs	r2, r1
 80078bc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fbd5 	bl	800806e <RTC_ExitInitMode>
 80078c4:	4603      	mov	r3, r0
 80078c6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80078c8:	7bfb      	ldrb	r3, [r7, #15]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d113      	bne.n	80078f6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80078dc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	699a      	ldr	r2, [r3, #24]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	430a      	orrs	r2, r1
 80078ee:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	22ff      	movs	r2, #255	; 0xff
 80078fc:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80078fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007908:	b590      	push	{r4, r7, lr}
 800790a:	b087      	sub	sp, #28
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007914:	2300      	movs	r3, #0
 8007916:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	7f1b      	ldrb	r3, [r3, #28]
 800791c:	2b01      	cmp	r3, #1
 800791e:	d101      	bne.n	8007924 <HAL_RTC_SetTime+0x1c>
 8007920:	2302      	movs	r3, #2
 8007922:	e087      	b.n	8007a34 <HAL_RTC_SetTime+0x12c>
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2201      	movs	r2, #1
 8007928:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2202      	movs	r2, #2
 800792e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d126      	bne.n	8007984 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007940:	2b00      	cmp	r3, #0
 8007942:	d102      	bne.n	800794a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	2200      	movs	r2, #0
 8007948:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	4618      	mov	r0, r3
 8007950:	f000 fbb2 	bl	80080b8 <RTC_ByteToBcd2>
 8007954:	4603      	mov	r3, r0
 8007956:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	785b      	ldrb	r3, [r3, #1]
 800795c:	4618      	mov	r0, r3
 800795e:	f000 fbab 	bl	80080b8 <RTC_ByteToBcd2>
 8007962:	4603      	mov	r3, r0
 8007964:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007966:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	789b      	ldrb	r3, [r3, #2]
 800796c:	4618      	mov	r0, r3
 800796e:	f000 fba3 	bl	80080b8 <RTC_ByteToBcd2>
 8007972:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007974:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	78db      	ldrb	r3, [r3, #3]
 800797c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800797e:	4313      	orrs	r3, r2
 8007980:	617b      	str	r3, [r7, #20]
 8007982:	e018      	b.n	80079b6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800798e:	2b00      	cmp	r3, #0
 8007990:	d102      	bne.n	8007998 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	2200      	movs	r2, #0
 8007996:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	785b      	ldrb	r3, [r3, #1]
 80079a2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80079a4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80079aa:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	78db      	ldrb	r3, [r3, #3]
 80079b0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80079b2:	4313      	orrs	r3, r2
 80079b4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	22ca      	movs	r2, #202	; 0xca
 80079bc:	625a      	str	r2, [r3, #36]	; 0x24
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2253      	movs	r2, #83	; 0x53
 80079c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f000 fb1a 	bl	8008000 <RTC_EnterInitMode>
 80079cc:	4603      	mov	r3, r0
 80079ce:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80079d0:	7cfb      	ldrb	r3, [r7, #19]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d120      	bne.n	8007a18 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80079e0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80079e4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	689a      	ldr	r2, [r3, #8]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80079f4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	6899      	ldr	r1, [r3, #8]
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	68da      	ldr	r2, [r3, #12]
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	431a      	orrs	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f000 fb2d 	bl	800806e <RTC_ExitInitMode>
 8007a14:	4603      	mov	r3, r0
 8007a16:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007a18:	7cfb      	ldrb	r3, [r7, #19]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d102      	bne.n	8007a24 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2201      	movs	r2, #1
 8007a22:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	22ff      	movs	r2, #255	; 0xff
 8007a2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	771a      	strb	r2, [r3, #28]

  return status;
 8007a32:	7cfb      	ldrb	r3, [r7, #19]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	371c      	adds	r7, #28
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd90      	pop	{r4, r7, pc}

08007a3c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b086      	sub	sp, #24
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007a6e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007a72:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	0c1b      	lsrs	r3, r3, #16
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a7e:	b2da      	uxtb	r2, r3
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	0a1b      	lsrs	r3, r3, #8
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a8e:	b2da      	uxtb	r2, r3
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a9c:	b2da      	uxtb	r2, r3
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	0d9b      	lsrs	r3, r3, #22
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	f003 0301 	and.w	r3, r3, #1
 8007aac:	b2da      	uxtb	r2, r3
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d11a      	bne.n	8007aee <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	4618      	mov	r0, r3
 8007abe:	f000 fb18 	bl	80080f2 <RTC_Bcd2ToByte>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	785b      	ldrb	r3, [r3, #1]
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f000 fb0f 	bl	80080f2 <RTC_Bcd2ToByte>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	789b      	ldrb	r3, [r3, #2]
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f000 fb06 	bl	80080f2 <RTC_Bcd2ToByte>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	461a      	mov	r2, r3
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3718      	adds	r7, #24
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007af8:	b590      	push	{r4, r7, lr}
 8007afa:	b087      	sub	sp, #28
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007b04:	2300      	movs	r3, #0
 8007b06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	7f1b      	ldrb	r3, [r3, #28]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d101      	bne.n	8007b14 <HAL_RTC_SetDate+0x1c>
 8007b10:	2302      	movs	r3, #2
 8007b12:	e071      	b.n	8007bf8 <HAL_RTC_SetDate+0x100>
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2201      	movs	r2, #1
 8007b18:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2202      	movs	r2, #2
 8007b1e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d10e      	bne.n	8007b44 <HAL_RTC_SetDate+0x4c>
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	785b      	ldrb	r3, [r3, #1]
 8007b2a:	f003 0310 	and.w	r3, r3, #16
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d008      	beq.n	8007b44 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	785b      	ldrb	r3, [r3, #1]
 8007b36:	f023 0310 	bic.w	r3, r3, #16
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	330a      	adds	r3, #10
 8007b3e:	b2da      	uxtb	r2, r3
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d11c      	bne.n	8007b84 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	78db      	ldrb	r3, [r3, #3]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f000 fab2 	bl	80080b8 <RTC_ByteToBcd2>
 8007b54:	4603      	mov	r3, r0
 8007b56:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	785b      	ldrb	r3, [r3, #1]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f000 faab 	bl	80080b8 <RTC_ByteToBcd2>
 8007b62:	4603      	mov	r3, r0
 8007b64:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007b66:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	789b      	ldrb	r3, [r3, #2]
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f000 faa3 	bl	80080b8 <RTC_ByteToBcd2>
 8007b72:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007b74:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	617b      	str	r3, [r7, #20]
 8007b82:	e00e      	b.n	8007ba2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	78db      	ldrb	r3, [r3, #3]
 8007b88:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	785b      	ldrb	r3, [r3, #1]
 8007b8e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007b90:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8007b92:	68ba      	ldr	r2, [r7, #8]
 8007b94:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007b96:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	22ca      	movs	r2, #202	; 0xca
 8007ba8:	625a      	str	r2, [r3, #36]	; 0x24
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2253      	movs	r2, #83	; 0x53
 8007bb0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f000 fa24 	bl	8008000 <RTC_EnterInitMode>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007bbc:	7cfb      	ldrb	r3, [r7, #19]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10c      	bne.n	8007bdc <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007bcc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007bd0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f000 fa4b 	bl	800806e <RTC_ExitInitMode>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007bdc:	7cfb      	ldrb	r3, [r7, #19]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d102      	bne.n	8007be8 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2201      	movs	r2, #1
 8007be6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	22ff      	movs	r2, #255	; 0xff
 8007bee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	771a      	strb	r2, [r3, #28]

  return status;
 8007bf6:	7cfb      	ldrb	r3, [r7, #19]
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	371c      	adds	r7, #28
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd90      	pop	{r4, r7, pc}

08007c00 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b086      	sub	sp, #24
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007c1a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007c1e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	0c1b      	lsrs	r3, r3, #16
 8007c24:	b2da      	uxtb	r2, r3
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	0a1b      	lsrs	r3, r3, #8
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	f003 031f 	and.w	r3, r3, #31
 8007c34:	b2da      	uxtb	r2, r3
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c42:	b2da      	uxtb	r2, r3
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	0b5b      	lsrs	r3, r3, #13
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	f003 0307 	and.w	r3, r3, #7
 8007c52:	b2da      	uxtb	r2, r3
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d11a      	bne.n	8007c94 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	78db      	ldrb	r3, [r3, #3]
 8007c62:	4618      	mov	r0, r3
 8007c64:	f000 fa45 	bl	80080f2 <RTC_Bcd2ToByte>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	785b      	ldrb	r3, [r3, #1]
 8007c74:	4618      	mov	r0, r3
 8007c76:	f000 fa3c 	bl	80080f2 <RTC_Bcd2ToByte>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	789b      	ldrb	r3, [r3, #2]
 8007c86:	4618      	mov	r0, r3
 8007c88:	f000 fa33 	bl	80080f2 <RTC_Bcd2ToByte>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	461a      	mov	r2, r3
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3718      	adds	r7, #24
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
	...

08007ca0 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007ca0:	b590      	push	{r4, r7, lr}
 8007ca2:	b089      	sub	sp, #36	; 0x24
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8007cac:	4b9a      	ldr	r3, [pc, #616]	; (8007f18 <HAL_RTC_SetAlarm_IT+0x278>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a9a      	ldr	r2, [pc, #616]	; (8007f1c <HAL_RTC_SetAlarm_IT+0x27c>)
 8007cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007cb6:	0adb      	lsrs	r3, r3, #11
 8007cb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007cbc:	fb02 f303 	mul.w	r3, r2, r3
 8007cc0:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	7f1b      	ldrb	r3, [r3, #28]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d101      	bne.n	8007cd6 <HAL_RTC_SetAlarm_IT+0x36>
 8007cd2:	2302      	movs	r3, #2
 8007cd4:	e11c      	b.n	8007f10 <HAL_RTC_SetAlarm_IT+0x270>
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2202      	movs	r2, #2
 8007ce0:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d137      	bne.n	8007d58 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d102      	bne.n	8007cfc <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	4618      	mov	r0, r3
 8007d02:	f000 f9d9 	bl	80080b8 <RTC_ByteToBcd2>
 8007d06:	4603      	mov	r3, r0
 8007d08:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	785b      	ldrb	r3, [r3, #1]
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f000 f9d2 	bl	80080b8 <RTC_ByteToBcd2>
 8007d14:	4603      	mov	r3, r0
 8007d16:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007d18:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	789b      	ldrb	r3, [r3, #2]
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f000 f9ca 	bl	80080b8 <RTC_ByteToBcd2>
 8007d24:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007d26:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	78db      	ldrb	r3, [r3, #3]
 8007d2e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8007d30:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f000 f9bc 	bl	80080b8 <RTC_ByteToBcd2>
 8007d40:	4603      	mov	r3, r0
 8007d42:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8007d44:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007d4c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007d52:	4313      	orrs	r3, r2
 8007d54:	61fb      	str	r3, [r7, #28]
 8007d56:	e023      	b.n	8007da0 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d102      	bne.n	8007d6c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	785b      	ldrb	r3, [r3, #1]
 8007d76:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007d78:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8007d7e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	78db      	ldrb	r3, [r3, #3]
 8007d84:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8007d86:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d8e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8007d90:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8007d96:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8007da8:	4313      	orrs	r3, r2
 8007daa:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	22ca      	movs	r2, #202	; 0xca
 8007db2:	625a      	str	r2, [r3, #36]	; 0x24
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2253      	movs	r2, #83	; 0x53
 8007dba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dc4:	d141      	bne.n	8007e4a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	689a      	ldr	r2, [r3, #8]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007dd4:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	b2da      	uxtb	r2, r3
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007de6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	1e5a      	subs	r2, r3, #1
 8007dec:	617a      	str	r2, [r7, #20]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d10b      	bne.n	8007e0a <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	22ff      	movs	r2, #255	; 0xff
 8007df8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2203      	movs	r2, #3
 8007dfe:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2200      	movs	r2, #0
 8007e04:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007e06:	2303      	movs	r3, #3
 8007e08:	e082      	b.n	8007f10 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	f003 0301 	and.w	r3, r3, #1
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d0e7      	beq.n	8007de8 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	69fa      	ldr	r2, [r7, #28]
 8007e1e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	69ba      	ldr	r2, [r7, #24]
 8007e26:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	689a      	ldr	r2, [r3, #8]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e36:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	689a      	ldr	r2, [r3, #8]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e46:	609a      	str	r2, [r3, #8]
 8007e48:	e04b      	b.n	8007ee2 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	689a      	ldr	r2, [r3, #8]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007e58:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	b2da      	uxtb	r2, r3
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007e6a:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8007e6c:	4b2a      	ldr	r3, [pc, #168]	; (8007f18 <HAL_RTC_SetAlarm_IT+0x278>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a2a      	ldr	r2, [pc, #168]	; (8007f1c <HAL_RTC_SetAlarm_IT+0x27c>)
 8007e72:	fba2 2303 	umull	r2, r3, r2, r3
 8007e76:	0adb      	lsrs	r3, r3, #11
 8007e78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007e7c:	fb02 f303 	mul.w	r3, r2, r3
 8007e80:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	1e5a      	subs	r2, r3, #1
 8007e86:	617a      	str	r2, [r7, #20]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d10b      	bne.n	8007ea4 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	22ff      	movs	r2, #255	; 0xff
 8007e92:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2203      	movs	r2, #3
 8007e98:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	e035      	b.n	8007f10 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	f003 0302 	and.w	r3, r3, #2
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d0e7      	beq.n	8007e82 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	69fa      	ldr	r2, [r7, #28]
 8007eb8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	69ba      	ldr	r2, [r7, #24]
 8007ec0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	689a      	ldr	r2, [r3, #8]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ed0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	689a      	ldr	r2, [r3, #8]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ee0:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007ee2:	4b0f      	ldr	r3, [pc, #60]	; (8007f20 <HAL_RTC_SetAlarm_IT+0x280>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a0e      	ldr	r2, [pc, #56]	; (8007f20 <HAL_RTC_SetAlarm_IT+0x280>)
 8007ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007eec:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8007eee:	4b0c      	ldr	r3, [pc, #48]	; (8007f20 <HAL_RTC_SetAlarm_IT+0x280>)
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	4a0b      	ldr	r2, [pc, #44]	; (8007f20 <HAL_RTC_SetAlarm_IT+0x280>)
 8007ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ef8:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	22ff      	movs	r2, #255	; 0xff
 8007f00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2201      	movs	r2, #1
 8007f06:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007f0e:	2300      	movs	r3, #0
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3724      	adds	r7, #36	; 0x24
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd90      	pop	{r4, r7, pc}
 8007f18:	2000000c 	.word	0x2000000c
 8007f1c:	10624dd3 	.word	0x10624dd3
 8007f20:	40013c00 	.word	0x40013c00

08007f24 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d012      	beq.n	8007f60 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00b      	beq.n	8007f60 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f7fa f9f3 	bl	8002334 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	b2da      	uxtb	r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007f5e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d012      	beq.n	8007f94 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00b      	beq.n	8007f94 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 f8d4 	bl	800812a <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	b2da      	uxtb	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007f92:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007f94:	4b05      	ldr	r3, [pc, #20]	; (8007fac <HAL_RTC_AlarmIRQHandler+0x88>)
 8007f96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007f9a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	775a      	strb	r2, [r3, #29]
}
 8007fa2:	bf00      	nop
 8007fa4:	3708      	adds	r7, #8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	40013c00 	.word	0x40013c00

08007fb0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68da      	ldr	r2, [r3, #12]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007fca:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007fcc:	f7fa fe56 	bl	8002c7c <HAL_GetTick>
 8007fd0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007fd2:	e009      	b.n	8007fe8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007fd4:	f7fa fe52 	bl	8002c7c <HAL_GetTick>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007fe2:	d901      	bls.n	8007fe8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	e007      	b.n	8007ff8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	f003 0320 	and.w	r3, r3, #32
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d0ee      	beq.n	8007fd4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008008:	2300      	movs	r3, #0
 800800a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800800c:	2300      	movs	r3, #0
 800800e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800801a:	2b00      	cmp	r3, #0
 800801c:	d122      	bne.n	8008064 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	68da      	ldr	r2, [r3, #12]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800802c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800802e:	f7fa fe25 	bl	8002c7c <HAL_GetTick>
 8008032:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008034:	e00c      	b.n	8008050 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008036:	f7fa fe21 	bl	8002c7c <HAL_GetTick>
 800803a:	4602      	mov	r2, r0
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	1ad3      	subs	r3, r2, r3
 8008040:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008044:	d904      	bls.n	8008050 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2204      	movs	r2, #4
 800804a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800805a:	2b00      	cmp	r3, #0
 800805c:	d102      	bne.n	8008064 <RTC_EnterInitMode+0x64>
 800805e:	7bfb      	ldrb	r3, [r7, #15]
 8008060:	2b01      	cmp	r3, #1
 8008062:	d1e8      	bne.n	8008036 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008064:	7bfb      	ldrb	r3, [r7, #15]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b084      	sub	sp, #16
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008076:	2300      	movs	r3, #0
 8008078:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68da      	ldr	r2, [r3, #12]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008088:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	f003 0320 	and.w	r3, r3, #32
 8008094:	2b00      	cmp	r3, #0
 8008096:	d10a      	bne.n	80080ae <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f7ff ff89 	bl	8007fb0 <HAL_RTC_WaitForSynchro>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d004      	beq.n	80080ae <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2204      	movs	r2, #4
 80080a8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80080ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3710      	adds	r7, #16
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	4603      	mov	r3, r0
 80080c0:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80080c2:	2300      	movs	r3, #0
 80080c4:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80080c6:	e005      	b.n	80080d4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
 80080ca:	3301      	adds	r3, #1
 80080cc:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80080ce:	79fb      	ldrb	r3, [r7, #7]
 80080d0:	3b0a      	subs	r3, #10
 80080d2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80080d4:	79fb      	ldrb	r3, [r7, #7]
 80080d6:	2b09      	cmp	r3, #9
 80080d8:	d8f6      	bhi.n	80080c8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80080da:	7bfb      	ldrb	r3, [r7, #15]
 80080dc:	011b      	lsls	r3, r3, #4
 80080de:	b2da      	uxtb	r2, r3
 80080e0:	79fb      	ldrb	r3, [r7, #7]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	b2db      	uxtb	r3, r3
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3714      	adds	r7, #20
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr

080080f2 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80080f2:	b480      	push	{r7}
 80080f4:	b085      	sub	sp, #20
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	4603      	mov	r3, r0
 80080fa:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80080fc:	2300      	movs	r3, #0
 80080fe:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8008100:	79fb      	ldrb	r3, [r7, #7]
 8008102:	091b      	lsrs	r3, r3, #4
 8008104:	b2db      	uxtb	r3, r3
 8008106:	461a      	mov	r2, r3
 8008108:	0092      	lsls	r2, r2, #2
 800810a:	4413      	add	r3, r2
 800810c:	005b      	lsls	r3, r3, #1
 800810e:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8008110:	79fb      	ldrb	r3, [r7, #7]
 8008112:	f003 030f 	and.w	r3, r3, #15
 8008116:	b2da      	uxtb	r2, r3
 8008118:	7bfb      	ldrb	r3, [r7, #15]
 800811a:	4413      	add	r3, r2
 800811c:	b2db      	uxtb	r3, r3
}
 800811e:	4618      	mov	r0, r3
 8008120:	3714      	adds	r7, #20
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr

0800812a <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800812a:	b480      	push	{r7}
 800812c:	b083      	sub	sp, #12
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8008132:	bf00      	nop
 8008134:	370c      	adds	r7, #12
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr

0800813e <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800813e:	b580      	push	{r7, lr}
 8008140:	b082      	sub	sp, #8
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d101      	bne.n	8008150 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	e022      	b.n	8008196 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008156:	b2db      	uxtb	r3, r3
 8008158:	2b00      	cmp	r3, #0
 800815a:	d105      	bne.n	8008168 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f7fa fa4a 	bl	80025fc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2203      	movs	r2, #3
 800816c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 f815 	bl	80081a0 <HAL_SD_InitCard>
 8008176:	4603      	mov	r3, r0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d001      	beq.n	8008180 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	e00a      	b.n	8008196 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3708      	adds	r7, #8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
	...

080081a0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80081a0:	b5b0      	push	{r4, r5, r7, lr}
 80081a2:	b08e      	sub	sp, #56	; 0x38
 80081a4:	af04      	add	r7, sp, #16
 80081a6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80081a8:	2300      	movs	r3, #0
 80081aa:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80081ac:	2300      	movs	r3, #0
 80081ae:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80081b0:	2300      	movs	r3, #0
 80081b2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80081b4:	2300      	movs	r3, #0
 80081b6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80081b8:	2300      	movs	r3, #0
 80081ba:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80081bc:	2376      	movs	r3, #118	; 0x76
 80081be:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681d      	ldr	r5, [r3, #0]
 80081c4:	466c      	mov	r4, sp
 80081c6:	f107 0314 	add.w	r3, r7, #20
 80081ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80081ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80081d2:	f107 0308 	add.w	r3, r7, #8
 80081d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80081d8:	4628      	mov	r0, r5
 80081da:	f002 fcf7 	bl	800abcc <SDIO_Init>
 80081de:	4603      	mov	r3, r0
 80081e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80081e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d001      	beq.n	80081f0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e04f      	b.n	8008290 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80081f0:	4b29      	ldr	r3, [pc, #164]	; (8008298 <HAL_SD_InitCard+0xf8>)
 80081f2:	2200      	movs	r2, #0
 80081f4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f002 fd2f 	bl	800ac5e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008200:	4b25      	ldr	r3, [pc, #148]	; (8008298 <HAL_SD_InitCard+0xf8>)
 8008202:	2201      	movs	r2, #1
 8008204:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8008206:	2002      	movs	r0, #2
 8008208:	f7fa fd44 	bl	8002c94 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 fe69 	bl	8008ee4 <SD_PowerON>
 8008212:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008214:	6a3b      	ldr	r3, [r7, #32]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00b      	beq.n	8008232 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2201      	movs	r2, #1
 800821e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008226:	6a3b      	ldr	r3, [r7, #32]
 8008228:	431a      	orrs	r2, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e02e      	b.n	8008290 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 fd88 	bl	8008d48 <SD_InitCard>
 8008238:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800823a:	6a3b      	ldr	r3, [r7, #32]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00b      	beq.n	8008258 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800824c:	6a3b      	ldr	r3, [r7, #32]
 800824e:	431a      	orrs	r2, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	e01b      	b.n	8008290 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008260:	4618      	mov	r0, r3
 8008262:	f002 fd8e 	bl	800ad82 <SDMMC_CmdBlockLength>
 8008266:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008268:	6a3b      	ldr	r3, [r7, #32]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00f      	beq.n	800828e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a0a      	ldr	r2, [pc, #40]	; (800829c <HAL_SD_InitCard+0xfc>)
 8008274:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800827a:	6a3b      	ldr	r3, [r7, #32]
 800827c:	431a      	orrs	r2, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2201      	movs	r2, #1
 8008286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e000      	b.n	8008290 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3728      	adds	r7, #40	; 0x28
 8008294:	46bd      	mov	sp, r7
 8008296:	bdb0      	pop	{r4, r5, r7, pc}
 8008298:	422580a0 	.word	0x422580a0
 800829c:	004005ff 	.word	0x004005ff

080082a0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b092      	sub	sp, #72	; 0x48
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
 80082ac:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80082ae:	f7fa fce5 	bl	8002c7c <HAL_GetTick>
 80082b2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d107      	bne.n	80082d2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	e1bd      	b.n	800864e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	2b01      	cmp	r3, #1
 80082dc:	f040 81b0 	bne.w	8008640 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2200      	movs	r2, #0
 80082e4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80082e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	441a      	add	r2, r3
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d907      	bls.n	8008304 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	e1a4      	b.n	800864e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2203      	movs	r2, #3
 8008308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2200      	movs	r2, #0
 8008312:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008318:	2b01      	cmp	r3, #1
 800831a:	d002      	beq.n	8008322 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800831c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831e:	025b      	lsls	r3, r3, #9
 8008320:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008322:	f04f 33ff 	mov.w	r3, #4294967295
 8008326:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	025b      	lsls	r3, r3, #9
 800832c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800832e:	2390      	movs	r3, #144	; 0x90
 8008330:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008332:	2302      	movs	r3, #2
 8008334:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008336:	2300      	movs	r3, #0
 8008338:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800833a:	2301      	movs	r3, #1
 800833c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f107 0214 	add.w	r2, r7, #20
 8008346:	4611      	mov	r1, r2
 8008348:	4618      	mov	r0, r3
 800834a:	f002 fcee 	bl	800ad2a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d90a      	bls.n	800836a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2202      	movs	r2, #2
 8008358:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008360:	4618      	mov	r0, r3
 8008362:	f002 fd52 	bl	800ae0a <SDMMC_CmdReadMultiBlock>
 8008366:	6478      	str	r0, [r7, #68]	; 0x44
 8008368:	e009      	b.n	800837e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2201      	movs	r2, #1
 800836e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008376:	4618      	mov	r0, r3
 8008378:	f002 fd25 	bl	800adc6 <SDMMC_CmdReadSingleBlock>
 800837c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800837e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008380:	2b00      	cmp	r3, #0
 8008382:	d012      	beq.n	80083aa <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a7a      	ldr	r2, [pc, #488]	; (8008574 <HAL_SD_ReadBlocks+0x2d4>)
 800838a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008392:	431a      	orrs	r2, r3
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	e151      	b.n	800864e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80083ae:	e061      	b.n	8008474 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d03c      	beq.n	8008438 <HAL_SD_ReadBlocks+0x198>
 80083be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d039      	beq.n	8008438 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80083c4:	2300      	movs	r3, #0
 80083c6:	643b      	str	r3, [r7, #64]	; 0x40
 80083c8:	e033      	b.n	8008432 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4618      	mov	r0, r3
 80083d0:	f002 fc27 	bl	800ac22 <SDIO_ReadFIFO>
 80083d4:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80083d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d8:	b2da      	uxtb	r2, r3
 80083da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083dc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80083de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083e0:	3301      	adds	r3, #1
 80083e2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80083e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083e6:	3b01      	subs	r3, #1
 80083e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80083ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ec:	0a1b      	lsrs	r3, r3, #8
 80083ee:	b2da      	uxtb	r2, r3
 80083f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083f2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80083f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083f6:	3301      	adds	r3, #1
 80083f8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80083fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083fc:	3b01      	subs	r3, #1
 80083fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008402:	0c1b      	lsrs	r3, r3, #16
 8008404:	b2da      	uxtb	r2, r3
 8008406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008408:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800840a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800840c:	3301      	adds	r3, #1
 800840e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008412:	3b01      	subs	r3, #1
 8008414:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008418:	0e1b      	lsrs	r3, r3, #24
 800841a:	b2da      	uxtb	r2, r3
 800841c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800841e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008422:	3301      	adds	r3, #1
 8008424:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008428:	3b01      	subs	r3, #1
 800842a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800842c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800842e:	3301      	adds	r3, #1
 8008430:	643b      	str	r3, [r7, #64]	; 0x40
 8008432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008434:	2b07      	cmp	r3, #7
 8008436:	d9c8      	bls.n	80083ca <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008438:	f7fa fc20 	bl	8002c7c <HAL_GetTick>
 800843c:	4602      	mov	r2, r0
 800843e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008444:	429a      	cmp	r2, r3
 8008446:	d902      	bls.n	800844e <HAL_SD_ReadBlocks+0x1ae>
 8008448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800844a:	2b00      	cmp	r3, #0
 800844c:	d112      	bne.n	8008474 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a48      	ldr	r2, [pc, #288]	; (8008574 <HAL_SD_ReadBlocks+0x2d4>)
 8008454:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800845a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2201      	movs	r2, #1
 8008466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2200      	movs	r2, #0
 800846e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008470:	2303      	movs	r3, #3
 8008472:	e0ec      	b.n	800864e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800847a:	f240 332a 	movw	r3, #810	; 0x32a
 800847e:	4013      	ands	r3, r2
 8008480:	2b00      	cmp	r3, #0
 8008482:	d095      	beq.n	80083b0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800848a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800848e:	2b00      	cmp	r3, #0
 8008490:	d022      	beq.n	80084d8 <HAL_SD_ReadBlocks+0x238>
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	2b01      	cmp	r3, #1
 8008496:	d91f      	bls.n	80084d8 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800849c:	2b03      	cmp	r3, #3
 800849e:	d01b      	beq.n	80084d8 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4618      	mov	r0, r3
 80084a6:	f002 fd17 	bl	800aed8 <SDMMC_CmdStopTransfer>
 80084aa:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80084ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d012      	beq.n	80084d8 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a2f      	ldr	r2, [pc, #188]	; (8008574 <HAL_SD_ReadBlocks+0x2d4>)
 80084b8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084c0:	431a      	orrs	r2, r3
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2201      	movs	r2, #1
 80084ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2200      	movs	r2, #0
 80084d2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	e0ba      	b.n	800864e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084de:	f003 0308 	and.w	r3, r3, #8
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d012      	beq.n	800850c <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a22      	ldr	r2, [pc, #136]	; (8008574 <HAL_SD_ReadBlocks+0x2d4>)
 80084ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f2:	f043 0208 	orr.w	r2, r3, #8
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2201      	movs	r2, #1
 80084fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2200      	movs	r2, #0
 8008506:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008508:	2301      	movs	r3, #1
 800850a:	e0a0      	b.n	800864e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008512:	f003 0302 	and.w	r3, r3, #2
 8008516:	2b00      	cmp	r3, #0
 8008518:	d012      	beq.n	8008540 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a15      	ldr	r2, [pc, #84]	; (8008574 <HAL_SD_ReadBlocks+0x2d4>)
 8008520:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008526:	f043 0202 	orr.w	r2, r3, #2
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2201      	movs	r2, #1
 8008532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2200      	movs	r2, #0
 800853a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	e086      	b.n	800864e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008546:	f003 0320 	and.w	r3, r3, #32
 800854a:	2b00      	cmp	r3, #0
 800854c:	d063      	beq.n	8008616 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a08      	ldr	r2, [pc, #32]	; (8008574 <HAL_SD_ReadBlocks+0x2d4>)
 8008554:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855a:	f043 0220 	orr.w	r2, r3, #32
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2201      	movs	r2, #1
 8008566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2200      	movs	r2, #0
 800856e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	e06c      	b.n	800864e <HAL_SD_ReadBlocks+0x3ae>
 8008574:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4618      	mov	r0, r3
 800857e:	f002 fb50 	bl	800ac22 <SDIO_ReadFIFO>
 8008582:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8008584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008586:	b2da      	uxtb	r2, r3
 8008588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800858a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800858c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800858e:	3301      	adds	r3, #1
 8008590:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008594:	3b01      	subs	r3, #1
 8008596:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859a:	0a1b      	lsrs	r3, r3, #8
 800859c:	b2da      	uxtb	r2, r3
 800859e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085a0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80085a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085a4:	3301      	adds	r3, #1
 80085a6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80085a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085aa:	3b01      	subs	r3, #1
 80085ac:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80085ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b0:	0c1b      	lsrs	r3, r3, #16
 80085b2:	b2da      	uxtb	r2, r3
 80085b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80085b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ba:	3301      	adds	r3, #1
 80085bc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80085be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085c0:	3b01      	subs	r3, #1
 80085c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80085c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c6:	0e1b      	lsrs	r3, r3, #24
 80085c8:	b2da      	uxtb	r2, r3
 80085ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085cc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80085ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085d0:	3301      	adds	r3, #1
 80085d2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80085d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085d6:	3b01      	subs	r3, #1
 80085d8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80085da:	f7fa fb4f 	bl	8002c7c <HAL_GetTick>
 80085de:	4602      	mov	r2, r0
 80085e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e2:	1ad3      	subs	r3, r2, r3
 80085e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d902      	bls.n	80085f0 <HAL_SD_ReadBlocks+0x350>
 80085ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d112      	bne.n	8008616 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a18      	ldr	r2, [pc, #96]	; (8008658 <HAL_SD_ReadBlocks+0x3b8>)
 80085f6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2200      	movs	r2, #0
 8008610:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e01b      	b.n	800864e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800861c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008620:	2b00      	cmp	r3, #0
 8008622:	d002      	beq.n	800862a <HAL_SD_ReadBlocks+0x38a>
 8008624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008626:	2b00      	cmp	r3, #0
 8008628:	d1a6      	bne.n	8008578 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f240 523a 	movw	r2, #1338	; 0x53a
 8008632:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800863c:	2300      	movs	r3, #0
 800863e:	e006      	b.n	800864e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008644:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800864c:	2301      	movs	r3, #1
  }
}
 800864e:	4618      	mov	r0, r3
 8008650:	3748      	adds	r7, #72	; 0x48
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	004005ff 	.word	0x004005ff

0800865c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b092      	sub	sp, #72	; 0x48
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	607a      	str	r2, [r7, #4]
 8008668:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800866a:	f7fa fb07 	bl	8002c7c <HAL_GetTick>
 800866e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d107      	bne.n	800868e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008682:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	e166      	b.n	800895c <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008694:	b2db      	uxtb	r3, r3
 8008696:	2b01      	cmp	r3, #1
 8008698:	f040 8159 	bne.w	800894e <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2200      	movs	r2, #0
 80086a0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80086a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	441a      	add	r2, r3
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d907      	bls.n	80086c0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	e14d      	b.n	800895c <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2203      	movs	r2, #3
 80086c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2200      	movs	r2, #0
 80086ce:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d002      	beq.n	80086de <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80086d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086da:	025b      	lsls	r3, r3, #9
 80086dc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80086de:	f04f 33ff 	mov.w	r3, #4294967295
 80086e2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	025b      	lsls	r3, r3, #9
 80086e8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80086ea:	2390      	movs	r3, #144	; 0x90
 80086ec:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80086ee:	2300      	movs	r3, #0
 80086f0:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80086f2:	2300      	movs	r3, #0
 80086f4:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80086f6:	2301      	movs	r3, #1
 80086f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f107 0218 	add.w	r2, r7, #24
 8008702:	4611      	mov	r1, r2
 8008704:	4618      	mov	r0, r3
 8008706:	f002 fb10 	bl	800ad2a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	2b01      	cmp	r3, #1
 800870e:	d90a      	bls.n	8008726 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2220      	movs	r2, #32
 8008714:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800871c:	4618      	mov	r0, r3
 800871e:	f002 fbb8 	bl	800ae92 <SDMMC_CmdWriteMultiBlock>
 8008722:	6478      	str	r0, [r7, #68]	; 0x44
 8008724:	e009      	b.n	800873a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2210      	movs	r2, #16
 800872a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008732:	4618      	mov	r0, r3
 8008734:	f002 fb8b 	bl	800ae4e <SDMMC_CmdWriteSingleBlock>
 8008738:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800873a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800873c:	2b00      	cmp	r3, #0
 800873e:	d012      	beq.n	8008766 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a87      	ldr	r2, [pc, #540]	; (8008964 <HAL_SD_WriteBlocks+0x308>)
 8008746:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800874c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800874e:	431a      	orrs	r2, r3
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2200      	movs	r2, #0
 8008760:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	e0fa      	b.n	800895c <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800876a:	e065      	b.n	8008838 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008776:	2b00      	cmp	r3, #0
 8008778:	d040      	beq.n	80087fc <HAL_SD_WriteBlocks+0x1a0>
 800877a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800877c:	2b00      	cmp	r3, #0
 800877e:	d03d      	beq.n	80087fc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8008780:	2300      	movs	r3, #0
 8008782:	643b      	str	r3, [r7, #64]	; 0x40
 8008784:	e037      	b.n	80087f6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8008786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800878c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800878e:	3301      	adds	r3, #1
 8008790:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008794:	3b01      	subs	r3, #1
 8008796:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	021a      	lsls	r2, r3, #8
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80087a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087a6:	3301      	adds	r3, #1
 80087a8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80087aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ac:	3b01      	subs	r3, #1
 80087ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80087b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	041a      	lsls	r2, r3, #16
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	4313      	orrs	r3, r2
 80087ba:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80087bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087be:	3301      	adds	r3, #1
 80087c0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80087c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087c4:	3b01      	subs	r3, #1
 80087c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80087c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	061a      	lsls	r2, r3, #24
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80087d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087d6:	3301      	adds	r3, #1
 80087d8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80087da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087dc:	3b01      	subs	r3, #1
 80087de:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f107 0214 	add.w	r2, r7, #20
 80087e8:	4611      	mov	r1, r2
 80087ea:	4618      	mov	r0, r3
 80087ec:	f002 fa26 	bl	800ac3c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80087f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087f2:	3301      	adds	r3, #1
 80087f4:	643b      	str	r3, [r7, #64]	; 0x40
 80087f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087f8:	2b07      	cmp	r3, #7
 80087fa:	d9c4      	bls.n	8008786 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80087fc:	f7fa fa3e 	bl	8002c7c <HAL_GetTick>
 8008800:	4602      	mov	r2, r0
 8008802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008808:	429a      	cmp	r2, r3
 800880a:	d902      	bls.n	8008812 <HAL_SD_WriteBlocks+0x1b6>
 800880c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800880e:	2b00      	cmp	r3, #0
 8008810:	d112      	bne.n	8008838 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a53      	ldr	r2, [pc, #332]	; (8008964 <HAL_SD_WriteBlocks+0x308>)
 8008818:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800881e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008820:	431a      	orrs	r2, r3
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2201      	movs	r2, #1
 800882a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008834:	2303      	movs	r3, #3
 8008836:	e091      	b.n	800895c <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800883e:	f240 331a 	movw	r3, #794	; 0x31a
 8008842:	4013      	ands	r3, r2
 8008844:	2b00      	cmp	r3, #0
 8008846:	d091      	beq.n	800876c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800884e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008852:	2b00      	cmp	r3, #0
 8008854:	d022      	beq.n	800889c <HAL_SD_WriteBlocks+0x240>
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d91f      	bls.n	800889c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008860:	2b03      	cmp	r3, #3
 8008862:	d01b      	beq.n	800889c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4618      	mov	r0, r3
 800886a:	f002 fb35 	bl	800aed8 <SDMMC_CmdStopTransfer>
 800886e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008872:	2b00      	cmp	r3, #0
 8008874:	d012      	beq.n	800889c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a3a      	ldr	r2, [pc, #232]	; (8008964 <HAL_SD_WriteBlocks+0x308>)
 800887c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008882:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008884:	431a      	orrs	r2, r3
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2201      	movs	r2, #1
 800888e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2200      	movs	r2, #0
 8008896:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	e05f      	b.n	800895c <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088a2:	f003 0308 	and.w	r3, r3, #8
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d012      	beq.n	80088d0 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a2d      	ldr	r2, [pc, #180]	; (8008964 <HAL_SD_WriteBlocks+0x308>)
 80088b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b6:	f043 0208 	orr.w	r2, r3, #8
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2200      	movs	r2, #0
 80088ca:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	e045      	b.n	800895c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088d6:	f003 0302 	and.w	r3, r3, #2
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d012      	beq.n	8008904 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a20      	ldr	r2, [pc, #128]	; (8008964 <HAL_SD_WriteBlocks+0x308>)
 80088e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ea:	f043 0202 	orr.w	r2, r3, #2
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	e02b      	b.n	800895c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800890a:	f003 0310 	and.w	r3, r3, #16
 800890e:	2b00      	cmp	r3, #0
 8008910:	d012      	beq.n	8008938 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a13      	ldr	r2, [pc, #76]	; (8008964 <HAL_SD_WriteBlocks+0x308>)
 8008918:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800891e:	f043 0210 	orr.w	r2, r3, #16
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	e011      	b.n	800895c <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f240 523a 	movw	r2, #1338	; 0x53a
 8008940:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2201      	movs	r2, #1
 8008946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800894a:	2300      	movs	r3, #0
 800894c:	e006      	b.n	800895c <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008952:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
  }
}
 800895c:	4618      	mov	r0, r3
 800895e:	3748      	adds	r7, #72	; 0x48
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	004005ff 	.word	0x004005ff

08008968 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008976:	0f9b      	lsrs	r3, r3, #30
 8008978:	b2da      	uxtb	r2, r3
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008982:	0e9b      	lsrs	r3, r3, #26
 8008984:	b2db      	uxtb	r3, r3
 8008986:	f003 030f 	and.w	r3, r3, #15
 800898a:	b2da      	uxtb	r2, r3
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008994:	0e1b      	lsrs	r3, r3, #24
 8008996:	b2db      	uxtb	r3, r3
 8008998:	f003 0303 	and.w	r3, r3, #3
 800899c:	b2da      	uxtb	r2, r3
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089a6:	0c1b      	lsrs	r3, r3, #16
 80089a8:	b2da      	uxtb	r2, r3
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089b2:	0a1b      	lsrs	r3, r3, #8
 80089b4:	b2da      	uxtb	r2, r3
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089be:	b2da      	uxtb	r2, r3
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089c8:	0d1b      	lsrs	r3, r3, #20
 80089ca:	b29a      	uxth	r2, r3
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089d4:	0c1b      	lsrs	r3, r3, #16
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	f003 030f 	and.w	r3, r3, #15
 80089dc:	b2da      	uxtb	r2, r3
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089e6:	0bdb      	lsrs	r3, r3, #15
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	f003 0301 	and.w	r3, r3, #1
 80089ee:	b2da      	uxtb	r2, r3
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089f8:	0b9b      	lsrs	r3, r3, #14
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	f003 0301 	and.w	r3, r3, #1
 8008a00:	b2da      	uxtb	r2, r3
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a0a:	0b5b      	lsrs	r3, r3, #13
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	f003 0301 	and.w	r3, r3, #1
 8008a12:	b2da      	uxtb	r2, r3
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a1c:	0b1b      	lsrs	r3, r3, #12
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	f003 0301 	and.w	r3, r3, #1
 8008a24:	b2da      	uxtb	r2, r3
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d163      	bne.n	8008b00 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a3c:	009a      	lsls	r2, r3, #2
 8008a3e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008a42:	4013      	ands	r3, r2
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008a48:	0f92      	lsrs	r2, r2, #30
 8008a4a:	431a      	orrs	r2, r3
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a54:	0edb      	lsrs	r3, r3, #27
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	f003 0307 	and.w	r3, r3, #7
 8008a5c:	b2da      	uxtb	r2, r3
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a66:	0e1b      	lsrs	r3, r3, #24
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	f003 0307 	and.w	r3, r3, #7
 8008a6e:	b2da      	uxtb	r2, r3
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a78:	0d5b      	lsrs	r3, r3, #21
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	f003 0307 	and.w	r3, r3, #7
 8008a80:	b2da      	uxtb	r2, r3
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a8a:	0c9b      	lsrs	r3, r3, #18
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	f003 0307 	and.w	r3, r3, #7
 8008a92:	b2da      	uxtb	r2, r3
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a9c:	0bdb      	lsrs	r3, r3, #15
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	f003 0307 	and.w	r3, r3, #7
 8008aa4:	b2da      	uxtb	r2, r3
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	1c5a      	adds	r2, r3, #1
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	7e1b      	ldrb	r3, [r3, #24]
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	f003 0307 	and.w	r3, r3, #7
 8008abe:	3302      	adds	r3, #2
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008aca:	fb03 f202 	mul.w	r2, r3, r2
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	7a1b      	ldrb	r3, [r3, #8]
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	f003 030f 	and.w	r3, r3, #15
 8008adc:	2201      	movs	r2, #1
 8008ade:	409a      	lsls	r2, r3
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008aec:	0a52      	lsrs	r2, r2, #9
 8008aee:	fb03 f202 	mul.w	r2, r3, r2
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008afc:	661a      	str	r2, [r3, #96]	; 0x60
 8008afe:	e031      	b.n	8008b64 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d11d      	bne.n	8008b44 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b0c:	041b      	lsls	r3, r3, #16
 8008b0e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b16:	0c1b      	lsrs	r3, r3, #16
 8008b18:	431a      	orrs	r2, r3
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	3301      	adds	r3, #1
 8008b24:	029a      	lsls	r2, r3, #10
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b38:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	661a      	str	r2, [r3, #96]	; 0x60
 8008b42:	e00f      	b.n	8008b64 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a58      	ldr	r2, [pc, #352]	; (8008cac <HAL_SD_GetCardCSD+0x344>)
 8008b4a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	e09d      	b.n	8008ca0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b68:	0b9b      	lsrs	r3, r3, #14
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	f003 0301 	and.w	r3, r3, #1
 8008b70:	b2da      	uxtb	r2, r3
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b7a:	09db      	lsrs	r3, r3, #7
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b82:	b2da      	uxtb	r2, r3
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b92:	b2da      	uxtb	r2, r3
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b9c:	0fdb      	lsrs	r3, r3, #31
 8008b9e:	b2da      	uxtb	r2, r3
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ba8:	0f5b      	lsrs	r3, r3, #29
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	f003 0303 	and.w	r3, r3, #3
 8008bb0:	b2da      	uxtb	r2, r3
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bba:	0e9b      	lsrs	r3, r3, #26
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	f003 0307 	and.w	r3, r3, #7
 8008bc2:	b2da      	uxtb	r2, r3
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bcc:	0d9b      	lsrs	r3, r3, #22
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	f003 030f 	and.w	r3, r3, #15
 8008bd4:	b2da      	uxtb	r2, r3
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bde:	0d5b      	lsrs	r3, r3, #21
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	f003 0301 	and.w	r3, r3, #1
 8008be6:	b2da      	uxtb	r2, r3
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bfa:	0c1b      	lsrs	r3, r3, #16
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	f003 0301 	and.w	r3, r3, #1
 8008c02:	b2da      	uxtb	r2, r3
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c0e:	0bdb      	lsrs	r3, r3, #15
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	f003 0301 	and.w	r3, r3, #1
 8008c16:	b2da      	uxtb	r2, r3
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c22:	0b9b      	lsrs	r3, r3, #14
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	f003 0301 	and.w	r3, r3, #1
 8008c2a:	b2da      	uxtb	r2, r3
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c36:	0b5b      	lsrs	r3, r3, #13
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	f003 0301 	and.w	r3, r3, #1
 8008c3e:	b2da      	uxtb	r2, r3
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c4a:	0b1b      	lsrs	r3, r3, #12
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	f003 0301 	and.w	r3, r3, #1
 8008c52:	b2da      	uxtb	r2, r3
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c5e:	0a9b      	lsrs	r3, r3, #10
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	f003 0303 	and.w	r3, r3, #3
 8008c66:	b2da      	uxtb	r2, r3
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c72:	0a1b      	lsrs	r3, r3, #8
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	f003 0303 	and.w	r3, r3, #3
 8008c7a:	b2da      	uxtb	r2, r3
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c86:	085b      	lsrs	r3, r3, #1
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c8e:	b2da      	uxtb	r2, r3
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr
 8008cac:	004005ff 	.word	0x004005ff

08008cb0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	370c      	adds	r7, #12
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b086      	sub	sp, #24
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008d10:	2300      	movs	r3, #0
 8008d12:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008d14:	f107 030c 	add.w	r3, r7, #12
 8008d18:	4619      	mov	r1, r3
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 f970 	bl	8009000 <SD_SendStatus>
 8008d20:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d005      	beq.n	8008d34 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	431a      	orrs	r2, r3
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	0a5b      	lsrs	r3, r3, #9
 8008d38:	f003 030f 	and.w	r3, r3, #15
 8008d3c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008d3e:	693b      	ldr	r3, [r7, #16]
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3718      	adds	r7, #24
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008d48:	b5b0      	push	{r4, r5, r7, lr}
 8008d4a:	b094      	sub	sp, #80	; 0x50
 8008d4c:	af04      	add	r7, sp, #16
 8008d4e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008d50:	2301      	movs	r3, #1
 8008d52:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f001 ff8e 	bl	800ac7a <SDIO_GetPowerState>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d102      	bne.n	8008d6a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008d64:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008d68:	e0b8      	b.n	8008edc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d6e:	2b03      	cmp	r3, #3
 8008d70:	d02f      	beq.n	8008dd2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4618      	mov	r0, r3
 8008d78:	f002 f975 	bl	800b066 <SDMMC_CmdSendCID>
 8008d7c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d001      	beq.n	8008d88 <SD_InitCard+0x40>
    {
      return errorstate;
 8008d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d86:	e0a9      	b.n	8008edc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2100      	movs	r1, #0
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f001 ffb8 	bl	800ad04 <SDIO_GetResponse>
 8008d94:	4602      	mov	r2, r0
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2104      	movs	r1, #4
 8008da0:	4618      	mov	r0, r3
 8008da2:	f001 ffaf 	bl	800ad04 <SDIO_GetResponse>
 8008da6:	4602      	mov	r2, r0
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2108      	movs	r1, #8
 8008db2:	4618      	mov	r0, r3
 8008db4:	f001 ffa6 	bl	800ad04 <SDIO_GetResponse>
 8008db8:	4602      	mov	r2, r0
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	210c      	movs	r1, #12
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f001 ff9d 	bl	800ad04 <SDIO_GetResponse>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dd6:	2b03      	cmp	r3, #3
 8008dd8:	d00d      	beq.n	8008df6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f107 020e 	add.w	r2, r7, #14
 8008de2:	4611      	mov	r1, r2
 8008de4:	4618      	mov	r0, r3
 8008de6:	f002 f97b 	bl	800b0e0 <SDMMC_CmdSetRelAdd>
 8008dea:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d001      	beq.n	8008df6 <SD_InitCard+0xae>
    {
      return errorstate;
 8008df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008df4:	e072      	b.n	8008edc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dfa:	2b03      	cmp	r3, #3
 8008dfc:	d036      	beq.n	8008e6c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008dfe:	89fb      	ldrh	r3, [r7, #14]
 8008e00:	461a      	mov	r2, r3
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e0e:	041b      	lsls	r3, r3, #16
 8008e10:	4619      	mov	r1, r3
 8008e12:	4610      	mov	r0, r2
 8008e14:	f002 f945 	bl	800b0a2 <SDMMC_CmdSendCSD>
 8008e18:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d001      	beq.n	8008e24 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e22:	e05b      	b.n	8008edc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2100      	movs	r1, #0
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f001 ff6a 	bl	800ad04 <SDIO_GetResponse>
 8008e30:	4602      	mov	r2, r0
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2104      	movs	r1, #4
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f001 ff61 	bl	800ad04 <SDIO_GetResponse>
 8008e42:	4602      	mov	r2, r0
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2108      	movs	r1, #8
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f001 ff58 	bl	800ad04 <SDIO_GetResponse>
 8008e54:	4602      	mov	r2, r0
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	210c      	movs	r1, #12
 8008e60:	4618      	mov	r0, r3
 8008e62:	f001 ff4f 	bl	800ad04 <SDIO_GetResponse>
 8008e66:	4602      	mov	r2, r0
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2104      	movs	r1, #4
 8008e72:	4618      	mov	r0, r3
 8008e74:	f001 ff46 	bl	800ad04 <SDIO_GetResponse>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	0d1a      	lsrs	r2, r3, #20
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008e80:	f107 0310 	add.w	r3, r7, #16
 8008e84:	4619      	mov	r1, r3
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f7ff fd6e 	bl	8008968 <HAL_SD_GetCardCSD>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d002      	beq.n	8008e98 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008e96:	e021      	b.n	8008edc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6819      	ldr	r1, [r3, #0]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ea0:	041b      	lsls	r3, r3, #16
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	461c      	mov	r4, r3
 8008ea6:	4615      	mov	r5, r2
 8008ea8:	4622      	mov	r2, r4
 8008eaa:	462b      	mov	r3, r5
 8008eac:	4608      	mov	r0, r1
 8008eae:	f002 f835 	bl	800af1c <SDMMC_CmdSelDesel>
 8008eb2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d001      	beq.n	8008ebe <SD_InitCard+0x176>
  {
    return errorstate;
 8008eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ebc:	e00e      	b.n	8008edc <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681d      	ldr	r5, [r3, #0]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	466c      	mov	r4, sp
 8008ec6:	f103 0210 	add.w	r2, r3, #16
 8008eca:	ca07      	ldmia	r2, {r0, r1, r2}
 8008ecc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008ed0:	3304      	adds	r3, #4
 8008ed2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ed4:	4628      	mov	r0, r5
 8008ed6:	f001 fe79 	bl	800abcc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3740      	adds	r7, #64	; 0x40
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bdb0      	pop	{r4, r5, r7, pc}

08008ee4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b086      	sub	sp, #24
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008eec:	2300      	movs	r3, #0
 8008eee:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	617b      	str	r3, [r7, #20]
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4618      	mov	r0, r3
 8008efe:	f002 f830 	bl	800af62 <SDMMC_CmdGoIdleState>
 8008f02:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d001      	beq.n	8008f0e <SD_PowerON+0x2a>
  {
    return errorstate;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	e072      	b.n	8008ff4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4618      	mov	r0, r3
 8008f14:	f002 f843 	bl	800af9e <SDMMC_CmdOperCond>
 8008f18:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00d      	beq.n	8008f3c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f002 f819 	bl	800af62 <SDMMC_CmdGoIdleState>
 8008f30:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d004      	beq.n	8008f42 <SD_PowerON+0x5e>
    {
      return errorstate;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	e05b      	b.n	8008ff4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d137      	bne.n	8008fba <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2100      	movs	r1, #0
 8008f50:	4618      	mov	r0, r3
 8008f52:	f002 f843 	bl	800afdc <SDMMC_CmdAppCommand>
 8008f56:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d02d      	beq.n	8008fba <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f5e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f62:	e047      	b.n	8008ff4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2100      	movs	r1, #0
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f002 f836 	bl	800afdc <SDMMC_CmdAppCommand>
 8008f70:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d001      	beq.n	8008f7c <SD_PowerON+0x98>
    {
      return errorstate;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	e03b      	b.n	8008ff4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	491e      	ldr	r1, [pc, #120]	; (8008ffc <SD_PowerON+0x118>)
 8008f82:	4618      	mov	r0, r3
 8008f84:	f002 f84c 	bl	800b020 <SDMMC_CmdAppOperCommand>
 8008f88:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d002      	beq.n	8008f96 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f94:	e02e      	b.n	8008ff4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f001 feb1 	bl	800ad04 <SDIO_GetResponse>
 8008fa2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	0fdb      	lsrs	r3, r3, #31
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d101      	bne.n	8008fb0 <SD_PowerON+0xcc>
 8008fac:	2301      	movs	r3, #1
 8008fae:	e000      	b.n	8008fb2 <SD_PowerON+0xce>
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	613b      	str	r3, [r7, #16]

    count++;
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d802      	bhi.n	8008fca <SD_PowerON+0xe6>
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d0cc      	beq.n	8008f64 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d902      	bls.n	8008fda <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008fd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008fd8:	e00c      	b.n	8008ff4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d003      	beq.n	8008fec <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	645a      	str	r2, [r3, #68]	; 0x44
 8008fea:	e002      	b.n	8008ff2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3718      	adds	r7, #24
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	c1100000 	.word	0xc1100000

08009000 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d102      	bne.n	8009016 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009010:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009014:	e018      	b.n	8009048 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800901e:	041b      	lsls	r3, r3, #16
 8009020:	4619      	mov	r1, r3
 8009022:	4610      	mov	r0, r2
 8009024:	f002 f87d 	bl	800b122 <SDMMC_CmdSendStatus>
 8009028:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d001      	beq.n	8009034 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	e009      	b.n	8009048 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2100      	movs	r1, #0
 800903a:	4618      	mov	r0, r3
 800903c:	f001 fe62 	bl	800ad04 <SDIO_GetResponse>
 8009040:	4602      	mov	r2, r0
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d101      	bne.n	8009062 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	e041      	b.n	80090e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009068:	b2db      	uxtb	r3, r3
 800906a:	2b00      	cmp	r3, #0
 800906c:	d106      	bne.n	800907c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f7f9 fb28 	bl	80026cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2202      	movs	r2, #2
 8009080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	3304      	adds	r3, #4
 800908c:	4619      	mov	r1, r3
 800908e:	4610      	mov	r0, r2
 8009090:	f000 fb0a 	bl	80096a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2201      	movs	r2, #1
 80090a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2201      	movs	r2, #1
 80090b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2201      	movs	r2, #1
 80090c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3708      	adds	r7, #8
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}

080090ee <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b082      	sub	sp, #8
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2202      	movs	r2, #2
 80090fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	6a1a      	ldr	r2, [r3, #32]
 8009104:	f241 1311 	movw	r3, #4369	; 0x1111
 8009108:	4013      	ands	r3, r2
 800910a:	2b00      	cmp	r3, #0
 800910c:	d10f      	bne.n	800912e <HAL_TIM_Base_DeInit+0x40>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	6a1a      	ldr	r2, [r3, #32]
 8009114:	f240 4344 	movw	r3, #1092	; 0x444
 8009118:	4013      	ands	r3, r2
 800911a:	2b00      	cmp	r3, #0
 800911c:	d107      	bne.n	800912e <HAL_TIM_Base_DeInit+0x40>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f022 0201 	bic.w	r2, r2, #1
 800912c:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f7f9 faf2 	bl	8002718 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3708      	adds	r7, #8
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
	...

08009198 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009198:	b480      	push	{r7}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d001      	beq.n	80091b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	e044      	b.n	800923a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2202      	movs	r2, #2
 80091b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	68da      	ldr	r2, [r3, #12]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f042 0201 	orr.w	r2, r2, #1
 80091c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a1e      	ldr	r2, [pc, #120]	; (8009248 <HAL_TIM_Base_Start_IT+0xb0>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d018      	beq.n	8009204 <HAL_TIM_Base_Start_IT+0x6c>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091da:	d013      	beq.n	8009204 <HAL_TIM_Base_Start_IT+0x6c>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a1a      	ldr	r2, [pc, #104]	; (800924c <HAL_TIM_Base_Start_IT+0xb4>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d00e      	beq.n	8009204 <HAL_TIM_Base_Start_IT+0x6c>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a19      	ldr	r2, [pc, #100]	; (8009250 <HAL_TIM_Base_Start_IT+0xb8>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d009      	beq.n	8009204 <HAL_TIM_Base_Start_IT+0x6c>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a17      	ldr	r2, [pc, #92]	; (8009254 <HAL_TIM_Base_Start_IT+0xbc>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d004      	beq.n	8009204 <HAL_TIM_Base_Start_IT+0x6c>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a16      	ldr	r2, [pc, #88]	; (8009258 <HAL_TIM_Base_Start_IT+0xc0>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d111      	bne.n	8009228 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	f003 0307 	and.w	r3, r3, #7
 800920e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2b06      	cmp	r3, #6
 8009214:	d010      	beq.n	8009238 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f042 0201 	orr.w	r2, r2, #1
 8009224:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009226:	e007      	b.n	8009238 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f042 0201 	orr.w	r2, r2, #1
 8009236:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009238:	2300      	movs	r3, #0
}
 800923a:	4618      	mov	r0, r3
 800923c:	3714      	adds	r7, #20
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	40010000 	.word	0x40010000
 800924c:	40000400 	.word	0x40000400
 8009250:	40000800 	.word	0x40000800
 8009254:	40000c00 	.word	0x40000c00
 8009258:	40014000 	.word	0x40014000

0800925c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	68da      	ldr	r2, [r3, #12]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f022 0201 	bic.w	r2, r2, #1
 8009272:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	6a1a      	ldr	r2, [r3, #32]
 800927a:	f241 1311 	movw	r3, #4369	; 0x1111
 800927e:	4013      	ands	r3, r2
 8009280:	2b00      	cmp	r3, #0
 8009282:	d10f      	bne.n	80092a4 <HAL_TIM_Base_Stop_IT+0x48>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	6a1a      	ldr	r2, [r3, #32]
 800928a:	f240 4344 	movw	r3, #1092	; 0x444
 800928e:	4013      	ands	r3, r2
 8009290:	2b00      	cmp	r3, #0
 8009292:	d107      	bne.n	80092a4 <HAL_TIM_Base_Stop_IT+0x48>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f022 0201 	bic.w	r2, r2, #1
 80092a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	370c      	adds	r7, #12
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr

080092ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b082      	sub	sp, #8
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	691b      	ldr	r3, [r3, #16]
 80092c8:	f003 0302 	and.w	r3, r3, #2
 80092cc:	2b02      	cmp	r3, #2
 80092ce:	d122      	bne.n	8009316 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	68db      	ldr	r3, [r3, #12]
 80092d6:	f003 0302 	and.w	r3, r3, #2
 80092da:	2b02      	cmp	r3, #2
 80092dc:	d11b      	bne.n	8009316 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f06f 0202 	mvn.w	r2, #2
 80092e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	699b      	ldr	r3, [r3, #24]
 80092f4:	f003 0303 	and.w	r3, r3, #3
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d003      	beq.n	8009304 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 f9b5 	bl	800966c <HAL_TIM_IC_CaptureCallback>
 8009302:	e005      	b.n	8009310 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 f9a7 	bl	8009658 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 f9b8 	bl	8009680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	691b      	ldr	r3, [r3, #16]
 800931c:	f003 0304 	and.w	r3, r3, #4
 8009320:	2b04      	cmp	r3, #4
 8009322:	d122      	bne.n	800936a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	f003 0304 	and.w	r3, r3, #4
 800932e:	2b04      	cmp	r3, #4
 8009330:	d11b      	bne.n	800936a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f06f 0204 	mvn.w	r2, #4
 800933a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2202      	movs	r2, #2
 8009340:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	699b      	ldr	r3, [r3, #24]
 8009348:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800934c:	2b00      	cmp	r3, #0
 800934e:	d003      	beq.n	8009358 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 f98b 	bl	800966c <HAL_TIM_IC_CaptureCallback>
 8009356:	e005      	b.n	8009364 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 f97d 	bl	8009658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 f98e 	bl	8009680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	f003 0308 	and.w	r3, r3, #8
 8009374:	2b08      	cmp	r3, #8
 8009376:	d122      	bne.n	80093be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	f003 0308 	and.w	r3, r3, #8
 8009382:	2b08      	cmp	r3, #8
 8009384:	d11b      	bne.n	80093be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f06f 0208 	mvn.w	r2, #8
 800938e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2204      	movs	r2, #4
 8009394:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	69db      	ldr	r3, [r3, #28]
 800939c:	f003 0303 	and.w	r3, r3, #3
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d003      	beq.n	80093ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 f961 	bl	800966c <HAL_TIM_IC_CaptureCallback>
 80093aa:	e005      	b.n	80093b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 f953 	bl	8009658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 f964 	bl	8009680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	691b      	ldr	r3, [r3, #16]
 80093c4:	f003 0310 	and.w	r3, r3, #16
 80093c8:	2b10      	cmp	r3, #16
 80093ca:	d122      	bne.n	8009412 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	f003 0310 	and.w	r3, r3, #16
 80093d6:	2b10      	cmp	r3, #16
 80093d8:	d11b      	bne.n	8009412 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f06f 0210 	mvn.w	r2, #16
 80093e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2208      	movs	r2, #8
 80093e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	69db      	ldr	r3, [r3, #28]
 80093f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d003      	beq.n	8009400 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 f937 	bl	800966c <HAL_TIM_IC_CaptureCallback>
 80093fe:	e005      	b.n	800940c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 f929 	bl	8009658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f93a 	bl	8009680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	691b      	ldr	r3, [r3, #16]
 8009418:	f003 0301 	and.w	r3, r3, #1
 800941c:	2b01      	cmp	r3, #1
 800941e:	d10e      	bne.n	800943e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	68db      	ldr	r3, [r3, #12]
 8009426:	f003 0301 	and.w	r3, r3, #1
 800942a:	2b01      	cmp	r3, #1
 800942c:	d107      	bne.n	800943e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f06f 0201 	mvn.w	r2, #1
 8009436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f7f8 ff3b 	bl	80022b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	691b      	ldr	r3, [r3, #16]
 8009444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009448:	2b80      	cmp	r3, #128	; 0x80
 800944a:	d10e      	bne.n	800946a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009456:	2b80      	cmp	r3, #128	; 0x80
 8009458:	d107      	bne.n	800946a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 fab1 	bl	80099cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009474:	2b40      	cmp	r3, #64	; 0x40
 8009476:	d10e      	bne.n	8009496 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	68db      	ldr	r3, [r3, #12]
 800947e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009482:	2b40      	cmp	r3, #64	; 0x40
 8009484:	d107      	bne.n	8009496 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800948e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 f8ff 	bl	8009694 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	691b      	ldr	r3, [r3, #16]
 800949c:	f003 0320 	and.w	r3, r3, #32
 80094a0:	2b20      	cmp	r3, #32
 80094a2:	d10e      	bne.n	80094c2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	f003 0320 	and.w	r3, r3, #32
 80094ae:	2b20      	cmp	r3, #32
 80094b0:	d107      	bne.n	80094c2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f06f 0220 	mvn.w	r2, #32
 80094ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 fa7b 	bl	80099b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80094c2:	bf00      	nop
 80094c4:	3708      	adds	r7, #8
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b084      	sub	sp, #16
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
 80094d2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80094d4:	2300      	movs	r3, #0
 80094d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d101      	bne.n	80094e6 <HAL_TIM_ConfigClockSource+0x1c>
 80094e2:	2302      	movs	r3, #2
 80094e4:	e0b4      	b.n	8009650 <HAL_TIM_ConfigClockSource+0x186>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2201      	movs	r2, #1
 80094ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2202      	movs	r2, #2
 80094f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009504:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800950c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	68ba      	ldr	r2, [r7, #8]
 8009514:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800951e:	d03e      	beq.n	800959e <HAL_TIM_ConfigClockSource+0xd4>
 8009520:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009524:	f200 8087 	bhi.w	8009636 <HAL_TIM_ConfigClockSource+0x16c>
 8009528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800952c:	f000 8086 	beq.w	800963c <HAL_TIM_ConfigClockSource+0x172>
 8009530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009534:	d87f      	bhi.n	8009636 <HAL_TIM_ConfigClockSource+0x16c>
 8009536:	2b70      	cmp	r3, #112	; 0x70
 8009538:	d01a      	beq.n	8009570 <HAL_TIM_ConfigClockSource+0xa6>
 800953a:	2b70      	cmp	r3, #112	; 0x70
 800953c:	d87b      	bhi.n	8009636 <HAL_TIM_ConfigClockSource+0x16c>
 800953e:	2b60      	cmp	r3, #96	; 0x60
 8009540:	d050      	beq.n	80095e4 <HAL_TIM_ConfigClockSource+0x11a>
 8009542:	2b60      	cmp	r3, #96	; 0x60
 8009544:	d877      	bhi.n	8009636 <HAL_TIM_ConfigClockSource+0x16c>
 8009546:	2b50      	cmp	r3, #80	; 0x50
 8009548:	d03c      	beq.n	80095c4 <HAL_TIM_ConfigClockSource+0xfa>
 800954a:	2b50      	cmp	r3, #80	; 0x50
 800954c:	d873      	bhi.n	8009636 <HAL_TIM_ConfigClockSource+0x16c>
 800954e:	2b40      	cmp	r3, #64	; 0x40
 8009550:	d058      	beq.n	8009604 <HAL_TIM_ConfigClockSource+0x13a>
 8009552:	2b40      	cmp	r3, #64	; 0x40
 8009554:	d86f      	bhi.n	8009636 <HAL_TIM_ConfigClockSource+0x16c>
 8009556:	2b30      	cmp	r3, #48	; 0x30
 8009558:	d064      	beq.n	8009624 <HAL_TIM_ConfigClockSource+0x15a>
 800955a:	2b30      	cmp	r3, #48	; 0x30
 800955c:	d86b      	bhi.n	8009636 <HAL_TIM_ConfigClockSource+0x16c>
 800955e:	2b20      	cmp	r3, #32
 8009560:	d060      	beq.n	8009624 <HAL_TIM_ConfigClockSource+0x15a>
 8009562:	2b20      	cmp	r3, #32
 8009564:	d867      	bhi.n	8009636 <HAL_TIM_ConfigClockSource+0x16c>
 8009566:	2b00      	cmp	r3, #0
 8009568:	d05c      	beq.n	8009624 <HAL_TIM_ConfigClockSource+0x15a>
 800956a:	2b10      	cmp	r3, #16
 800956c:	d05a      	beq.n	8009624 <HAL_TIM_ConfigClockSource+0x15a>
 800956e:	e062      	b.n	8009636 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6818      	ldr	r0, [r3, #0]
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	6899      	ldr	r1, [r3, #8]
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	685a      	ldr	r2, [r3, #4]
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	f000 f98c 	bl	800989c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009592:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	68ba      	ldr	r2, [r7, #8]
 800959a:	609a      	str	r2, [r3, #8]
      break;
 800959c:	e04f      	b.n	800963e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6818      	ldr	r0, [r3, #0]
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	6899      	ldr	r1, [r3, #8]
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	685a      	ldr	r2, [r3, #4]
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	68db      	ldr	r3, [r3, #12]
 80095ae:	f000 f975 	bl	800989c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	689a      	ldr	r2, [r3, #8]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80095c0:	609a      	str	r2, [r3, #8]
      break;
 80095c2:	e03c      	b.n	800963e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6818      	ldr	r0, [r3, #0]
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	6859      	ldr	r1, [r3, #4]
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	461a      	mov	r2, r3
 80095d2:	f000 f8e9 	bl	80097a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2150      	movs	r1, #80	; 0x50
 80095dc:	4618      	mov	r0, r3
 80095de:	f000 f942 	bl	8009866 <TIM_ITRx_SetConfig>
      break;
 80095e2:	e02c      	b.n	800963e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6818      	ldr	r0, [r3, #0]
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	6859      	ldr	r1, [r3, #4]
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	461a      	mov	r2, r3
 80095f2:	f000 f908 	bl	8009806 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2160      	movs	r1, #96	; 0x60
 80095fc:	4618      	mov	r0, r3
 80095fe:	f000 f932 	bl	8009866 <TIM_ITRx_SetConfig>
      break;
 8009602:	e01c      	b.n	800963e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6818      	ldr	r0, [r3, #0]
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	6859      	ldr	r1, [r3, #4]
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	461a      	mov	r2, r3
 8009612:	f000 f8c9 	bl	80097a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2140      	movs	r1, #64	; 0x40
 800961c:	4618      	mov	r0, r3
 800961e:	f000 f922 	bl	8009866 <TIM_ITRx_SetConfig>
      break;
 8009622:	e00c      	b.n	800963e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4619      	mov	r1, r3
 800962e:	4610      	mov	r0, r2
 8009630:	f000 f919 	bl	8009866 <TIM_ITRx_SetConfig>
      break;
 8009634:	e003      	b.n	800963e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	73fb      	strb	r3, [r7, #15]
      break;
 800963a:	e000      	b.n	800963e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800963c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2201      	movs	r2, #1
 8009642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800964e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3710      	adds	r7, #16
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009660:	bf00      	nop
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009688:	bf00      	nop
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800969c:	bf00      	nop
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b085      	sub	sp, #20
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	4a34      	ldr	r2, [pc, #208]	; (800978c <TIM_Base_SetConfig+0xe4>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d00f      	beq.n	80096e0 <TIM_Base_SetConfig+0x38>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096c6:	d00b      	beq.n	80096e0 <TIM_Base_SetConfig+0x38>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	4a31      	ldr	r2, [pc, #196]	; (8009790 <TIM_Base_SetConfig+0xe8>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d007      	beq.n	80096e0 <TIM_Base_SetConfig+0x38>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	4a30      	ldr	r2, [pc, #192]	; (8009794 <TIM_Base_SetConfig+0xec>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d003      	beq.n	80096e0 <TIM_Base_SetConfig+0x38>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4a2f      	ldr	r2, [pc, #188]	; (8009798 <TIM_Base_SetConfig+0xf0>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d108      	bne.n	80096f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	68fa      	ldr	r2, [r7, #12]
 80096ee:	4313      	orrs	r3, r2
 80096f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4a25      	ldr	r2, [pc, #148]	; (800978c <TIM_Base_SetConfig+0xe4>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d01b      	beq.n	8009732 <TIM_Base_SetConfig+0x8a>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009700:	d017      	beq.n	8009732 <TIM_Base_SetConfig+0x8a>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a22      	ldr	r2, [pc, #136]	; (8009790 <TIM_Base_SetConfig+0xe8>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d013      	beq.n	8009732 <TIM_Base_SetConfig+0x8a>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4a21      	ldr	r2, [pc, #132]	; (8009794 <TIM_Base_SetConfig+0xec>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d00f      	beq.n	8009732 <TIM_Base_SetConfig+0x8a>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4a20      	ldr	r2, [pc, #128]	; (8009798 <TIM_Base_SetConfig+0xf0>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d00b      	beq.n	8009732 <TIM_Base_SetConfig+0x8a>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4a1f      	ldr	r2, [pc, #124]	; (800979c <TIM_Base_SetConfig+0xf4>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d007      	beq.n	8009732 <TIM_Base_SetConfig+0x8a>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	4a1e      	ldr	r2, [pc, #120]	; (80097a0 <TIM_Base_SetConfig+0xf8>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d003      	beq.n	8009732 <TIM_Base_SetConfig+0x8a>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4a1d      	ldr	r2, [pc, #116]	; (80097a4 <TIM_Base_SetConfig+0xfc>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d108      	bne.n	8009744 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	68db      	ldr	r3, [r3, #12]
 800973e:	68fa      	ldr	r2, [r7, #12]
 8009740:	4313      	orrs	r3, r2
 8009742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	695b      	ldr	r3, [r3, #20]
 800974e:	4313      	orrs	r3, r2
 8009750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	689a      	ldr	r2, [r3, #8]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4a08      	ldr	r2, [pc, #32]	; (800978c <TIM_Base_SetConfig+0xe4>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d103      	bne.n	8009778 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	691a      	ldr	r2, [r3, #16]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2201      	movs	r2, #1
 800977c:	615a      	str	r2, [r3, #20]
}
 800977e:	bf00      	nop
 8009780:	3714      	adds	r7, #20
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	40010000 	.word	0x40010000
 8009790:	40000400 	.word	0x40000400
 8009794:	40000800 	.word	0x40000800
 8009798:	40000c00 	.word	0x40000c00
 800979c:	40014000 	.word	0x40014000
 80097a0:	40014400 	.word	0x40014400
 80097a4:	40014800 	.word	0x40014800

080097a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b087      	sub	sp, #28
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	60b9      	str	r1, [r7, #8]
 80097b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	6a1b      	ldr	r3, [r3, #32]
 80097b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6a1b      	ldr	r3, [r3, #32]
 80097be:	f023 0201 	bic.w	r2, r3, #1
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	699b      	ldr	r3, [r3, #24]
 80097ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	011b      	lsls	r3, r3, #4
 80097d8:	693a      	ldr	r2, [r7, #16]
 80097da:	4313      	orrs	r3, r2
 80097dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	f023 030a 	bic.w	r3, r3, #10
 80097e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80097e6:	697a      	ldr	r2, [r7, #20]
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	4313      	orrs	r3, r2
 80097ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	693a      	ldr	r2, [r7, #16]
 80097f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	697a      	ldr	r2, [r7, #20]
 80097f8:	621a      	str	r2, [r3, #32]
}
 80097fa:	bf00      	nop
 80097fc:	371c      	adds	r7, #28
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr

08009806 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009806:	b480      	push	{r7}
 8009808:	b087      	sub	sp, #28
 800980a:	af00      	add	r7, sp, #0
 800980c:	60f8      	str	r0, [r7, #12]
 800980e:	60b9      	str	r1, [r7, #8]
 8009810:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6a1b      	ldr	r3, [r3, #32]
 8009816:	f023 0210 	bic.w	r2, r3, #16
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	699b      	ldr	r3, [r3, #24]
 8009822:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	6a1b      	ldr	r3, [r3, #32]
 8009828:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009830:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	031b      	lsls	r3, r3, #12
 8009836:	697a      	ldr	r2, [r7, #20]
 8009838:	4313      	orrs	r3, r2
 800983a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009842:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	011b      	lsls	r3, r3, #4
 8009848:	693a      	ldr	r2, [r7, #16]
 800984a:	4313      	orrs	r3, r2
 800984c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	697a      	ldr	r2, [r7, #20]
 8009852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	693a      	ldr	r2, [r7, #16]
 8009858:	621a      	str	r2, [r3, #32]
}
 800985a:	bf00      	nop
 800985c:	371c      	adds	r7, #28
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr

08009866 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009866:	b480      	push	{r7}
 8009868:	b085      	sub	sp, #20
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
 800986e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800987c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800987e:	683a      	ldr	r2, [r7, #0]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	4313      	orrs	r3, r2
 8009884:	f043 0307 	orr.w	r3, r3, #7
 8009888:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	609a      	str	r2, [r3, #8]
}
 8009890:	bf00      	nop
 8009892:	3714      	adds	r7, #20
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800989c:	b480      	push	{r7}
 800989e:	b087      	sub	sp, #28
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	60b9      	str	r1, [r7, #8]
 80098a6:	607a      	str	r2, [r7, #4]
 80098a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	689b      	ldr	r3, [r3, #8]
 80098ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80098b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	021a      	lsls	r2, r3, #8
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	431a      	orrs	r2, r3
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	4313      	orrs	r3, r2
 80098c4:	697a      	ldr	r2, [r7, #20]
 80098c6:	4313      	orrs	r3, r2
 80098c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	697a      	ldr	r2, [r7, #20]
 80098ce:	609a      	str	r2, [r3, #8]
}
 80098d0:	bf00      	nop
 80098d2:	371c      	adds	r7, #28
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr

080098dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80098dc:	b480      	push	{r7}
 80098de:	b085      	sub	sp, #20
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d101      	bne.n	80098f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80098f0:	2302      	movs	r3, #2
 80098f2:	e050      	b.n	8009996 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2201      	movs	r2, #1
 80098f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2202      	movs	r2, #2
 8009900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	689b      	ldr	r3, [r3, #8]
 8009912:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800991a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	68fa      	ldr	r2, [r7, #12]
 8009922:	4313      	orrs	r3, r2
 8009924:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	68fa      	ldr	r2, [r7, #12]
 800992c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a1c      	ldr	r2, [pc, #112]	; (80099a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d018      	beq.n	800996a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009940:	d013      	beq.n	800996a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a18      	ldr	r2, [pc, #96]	; (80099a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d00e      	beq.n	800996a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a16      	ldr	r2, [pc, #88]	; (80099ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d009      	beq.n	800996a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a15      	ldr	r2, [pc, #84]	; (80099b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d004      	beq.n	800996a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a13      	ldr	r2, [pc, #76]	; (80099b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d10c      	bne.n	8009984 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009970:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	68ba      	ldr	r2, [r7, #8]
 8009978:	4313      	orrs	r3, r2
 800997a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	68ba      	ldr	r2, [r7, #8]
 8009982:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2201      	movs	r2, #1
 8009988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009994:	2300      	movs	r3, #0
}
 8009996:	4618      	mov	r0, r3
 8009998:	3714      	adds	r7, #20
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr
 80099a2:	bf00      	nop
 80099a4:	40010000 	.word	0x40010000
 80099a8:	40000400 	.word	0x40000400
 80099ac:	40000800 	.word	0x40000800
 80099b0:	40000c00 	.word	0x40000c00
 80099b4:	40014000 	.word	0x40014000

080099b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80099c0:	bf00      	nop
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80099d4:	bf00      	nop
 80099d6:	370c      	adds	r7, #12
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d101      	bne.n	80099f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099ee:	2301      	movs	r3, #1
 80099f0:	e03f      	b.n	8009a72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d106      	bne.n	8009a0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2200      	movs	r2, #0
 8009a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f7f8 fe9e 	bl	8002748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2224      	movs	r2, #36	; 0x24
 8009a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	68da      	ldr	r2, [r3, #12]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 fe5d 	bl	800a6e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	691a      	ldr	r2, [r3, #16]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009a38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	695a      	ldr	r2, [r3, #20]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009a48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	68da      	ldr	r2, [r3, #12]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009a58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2220      	movs	r2, #32
 8009a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2220      	movs	r2, #32
 8009a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3708      	adds	r7, #8
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}

08009a7a <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8009a7a:	b580      	push	{r7, lr}
 8009a7c:	b082      	sub	sp, #8
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d101      	bne.n	8009a8c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	e021      	b.n	8009ad0 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2224      	movs	r2, #36	; 0x24
 8009a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	68da      	ldr	r2, [r3, #12]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009aa2:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f7f8 fedd 	bl	8002864 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2200      	movs	r2, #0
 8009abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ace:	2300      	movs	r3, #0
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3708      	adds	r7, #8
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b08a      	sub	sp, #40	; 0x28
 8009adc:	af02      	add	r7, sp, #8
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	603b      	str	r3, [r7, #0]
 8009ae4:	4613      	mov	r3, r2
 8009ae6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	2b20      	cmp	r3, #32
 8009af6:	d17c      	bne.n	8009bf2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d002      	beq.n	8009b04 <HAL_UART_Transmit+0x2c>
 8009afe:	88fb      	ldrh	r3, [r7, #6]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d101      	bne.n	8009b08 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009b04:	2301      	movs	r3, #1
 8009b06:	e075      	b.n	8009bf4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d101      	bne.n	8009b16 <HAL_UART_Transmit+0x3e>
 8009b12:	2302      	movs	r3, #2
 8009b14:	e06e      	b.n	8009bf4 <HAL_UART_Transmit+0x11c>
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2200      	movs	r2, #0
 8009b22:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2221      	movs	r2, #33	; 0x21
 8009b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009b2c:	f7f9 f8a6 	bl	8002c7c <HAL_GetTick>
 8009b30:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	88fa      	ldrh	r2, [r7, #6]
 8009b36:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	88fa      	ldrh	r2, [r7, #6]
 8009b3c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b46:	d108      	bne.n	8009b5a <HAL_UART_Transmit+0x82>
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	691b      	ldr	r3, [r3, #16]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d104      	bne.n	8009b5a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009b50:	2300      	movs	r3, #0
 8009b52:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	61bb      	str	r3, [r7, #24]
 8009b58:	e003      	b.n	8009b62 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009b6a:	e02a      	b.n	8009bc2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	9300      	str	r3, [sp, #0]
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	2200      	movs	r2, #0
 8009b74:	2180      	movs	r1, #128	; 0x80
 8009b76:	68f8      	ldr	r0, [r7, #12]
 8009b78:	f000 fb6e 	bl	800a258 <UART_WaitOnFlagUntilTimeout>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d001      	beq.n	8009b86 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009b82:	2303      	movs	r3, #3
 8009b84:	e036      	b.n	8009bf4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009b86:	69fb      	ldr	r3, [r7, #28]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d10b      	bne.n	8009ba4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	881b      	ldrh	r3, [r3, #0]
 8009b90:	461a      	mov	r2, r3
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b9a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009b9c:	69bb      	ldr	r3, [r7, #24]
 8009b9e:	3302      	adds	r3, #2
 8009ba0:	61bb      	str	r3, [r7, #24]
 8009ba2:	e007      	b.n	8009bb4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009ba4:	69fb      	ldr	r3, [r7, #28]
 8009ba6:	781a      	ldrb	r2, [r3, #0]
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009bae:	69fb      	ldr	r3, [r7, #28]
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	b29a      	uxth	r2, r3
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d1cf      	bne.n	8009b6c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	9300      	str	r3, [sp, #0]
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	2140      	movs	r1, #64	; 0x40
 8009bd6:	68f8      	ldr	r0, [r7, #12]
 8009bd8:	f000 fb3e 	bl	800a258 <UART_WaitOnFlagUntilTimeout>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d001      	beq.n	8009be6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009be2:	2303      	movs	r3, #3
 8009be4:	e006      	b.n	8009bf4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2220      	movs	r2, #32
 8009bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	e000      	b.n	8009bf4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009bf2:	2302      	movs	r3, #2
  }
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3720      	adds	r7, #32
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	60f8      	str	r0, [r7, #12]
 8009c04:	60b9      	str	r1, [r7, #8]
 8009c06:	4613      	mov	r3, r2
 8009c08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	2b20      	cmp	r3, #32
 8009c14:	d11d      	bne.n	8009c52 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d002      	beq.n	8009c22 <HAL_UART_Receive_IT+0x26>
 8009c1c:	88fb      	ldrh	r3, [r7, #6]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d101      	bne.n	8009c26 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009c22:	2301      	movs	r3, #1
 8009c24:	e016      	b.n	8009c54 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d101      	bne.n	8009c34 <HAL_UART_Receive_IT+0x38>
 8009c30:	2302      	movs	r3, #2
 8009c32:	e00f      	b.n	8009c54 <HAL_UART_Receive_IT+0x58>
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2201      	movs	r2, #1
 8009c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009c42:	88fb      	ldrh	r3, [r7, #6]
 8009c44:	461a      	mov	r2, r3
 8009c46:	68b9      	ldr	r1, [r7, #8]
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	f000 fb73 	bl	800a334 <UART_Start_Receive_IT>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	e000      	b.n	8009c54 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009c52:	2302      	movs	r3, #2
  }
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3710      	adds	r7, #16
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b08c      	sub	sp, #48	; 0x30
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	4613      	mov	r3, r2
 8009c68:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	2b20      	cmp	r3, #32
 8009c74:	d152      	bne.n	8009d1c <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d002      	beq.n	8009c82 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8009c7c:	88fb      	ldrh	r3, [r7, #6]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d101      	bne.n	8009c86 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8009c82:	2301      	movs	r3, #1
 8009c84:	e04b      	b.n	8009d1e <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d101      	bne.n	8009c94 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 8009c90:	2302      	movs	r3, #2
 8009c92:	e044      	b.n	8009d1e <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2201      	movs	r2, #1
 8009c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8009ca2:	88fb      	ldrh	r3, [r7, #6]
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	68b9      	ldr	r1, [r7, #8]
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f000 fb43 	bl	800a334 <UART_Start_Receive_IT>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009cb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d12c      	bne.n	8009d16 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d125      	bne.n	8009d10 <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	613b      	str	r3, [r7, #16]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	613b      	str	r3, [r7, #16]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	613b      	str	r3, [r7, #16]
 8009cd8:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	330c      	adds	r3, #12
 8009ce0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	e853 3f00 	ldrex	r3, [r3]
 8009ce8:	617b      	str	r3, [r7, #20]
   return(result);
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	f043 0310 	orr.w	r3, r3, #16
 8009cf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	330c      	adds	r3, #12
 8009cf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cfa:	627a      	str	r2, [r7, #36]	; 0x24
 8009cfc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfe:	6a39      	ldr	r1, [r7, #32]
 8009d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d02:	e841 2300 	strex	r3, r2, [r1]
 8009d06:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d08:	69fb      	ldr	r3, [r7, #28]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d1e5      	bne.n	8009cda <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 8009d0e:	e002      	b.n	8009d16 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009d10:	2301      	movs	r3, #1
 8009d12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8009d16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d1a:	e000      	b.n	8009d1e <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8009d1c:	2302      	movs	r3, #2
  }
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3730      	adds	r7, #48	; 0x30
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
	...

08009d28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b0ba      	sub	sp, #232	; 0xe8
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	695b      	ldr	r3, [r3, #20]
 8009d4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009d54:	2300      	movs	r3, #0
 8009d56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d5e:	f003 030f 	and.w	r3, r3, #15
 8009d62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009d66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d10f      	bne.n	8009d8e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d72:	f003 0320 	and.w	r3, r3, #32
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d009      	beq.n	8009d8e <HAL_UART_IRQHandler+0x66>
 8009d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d7e:	f003 0320 	and.w	r3, r3, #32
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d003      	beq.n	8009d8e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 fbf1 	bl	800a56e <UART_Receive_IT>
      return;
 8009d8c:	e256      	b.n	800a23c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009d8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	f000 80de 	beq.w	8009f54 <HAL_UART_IRQHandler+0x22c>
 8009d98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d9c:	f003 0301 	and.w	r3, r3, #1
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d106      	bne.n	8009db2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009da8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	f000 80d1 	beq.w	8009f54 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009db6:	f003 0301 	and.w	r3, r3, #1
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d00b      	beq.n	8009dd6 <HAL_UART_IRQHandler+0xae>
 8009dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d005      	beq.n	8009dd6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dce:	f043 0201 	orr.w	r2, r3, #1
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dda:	f003 0304 	and.w	r3, r3, #4
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d00b      	beq.n	8009dfa <HAL_UART_IRQHandler+0xd2>
 8009de2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009de6:	f003 0301 	and.w	r3, r3, #1
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d005      	beq.n	8009dfa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df2:	f043 0202 	orr.w	r2, r3, #2
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dfe:	f003 0302 	and.w	r3, r3, #2
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00b      	beq.n	8009e1e <HAL_UART_IRQHandler+0xf6>
 8009e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e0a:	f003 0301 	and.w	r3, r3, #1
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d005      	beq.n	8009e1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e16:	f043 0204 	orr.w	r2, r3, #4
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e22:	f003 0308 	and.w	r3, r3, #8
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d011      	beq.n	8009e4e <HAL_UART_IRQHandler+0x126>
 8009e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e2e:	f003 0320 	and.w	r3, r3, #32
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d105      	bne.n	8009e42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e3a:	f003 0301 	and.w	r3, r3, #1
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d005      	beq.n	8009e4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e46:	f043 0208 	orr.w	r2, r3, #8
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	f000 81ed 	beq.w	800a232 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e5c:	f003 0320 	and.w	r3, r3, #32
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d008      	beq.n	8009e76 <HAL_UART_IRQHandler+0x14e>
 8009e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e68:	f003 0320 	and.w	r3, r3, #32
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d002      	beq.n	8009e76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 fb7c 	bl	800a56e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	695b      	ldr	r3, [r3, #20]
 8009e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e80:	2b40      	cmp	r3, #64	; 0x40
 8009e82:	bf0c      	ite	eq
 8009e84:	2301      	moveq	r3, #1
 8009e86:	2300      	movne	r3, #0
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e92:	f003 0308 	and.w	r3, r3, #8
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d103      	bne.n	8009ea2 <HAL_UART_IRQHandler+0x17a>
 8009e9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d04f      	beq.n	8009f42 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 fa84 	bl	800a3b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	695b      	ldr	r3, [r3, #20]
 8009eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eb2:	2b40      	cmp	r3, #64	; 0x40
 8009eb4:	d141      	bne.n	8009f3a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	3314      	adds	r3, #20
 8009ebc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ec4:	e853 3f00 	ldrex	r3, [r3]
 8009ec8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009ecc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ed0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ed4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	3314      	adds	r3, #20
 8009ede:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009ee2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009ee6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009eee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009ef2:	e841 2300 	strex	r3, r2, [r1]
 8009ef6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009efa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d1d9      	bne.n	8009eb6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d013      	beq.n	8009f32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f0e:	4a7d      	ldr	r2, [pc, #500]	; (800a104 <HAL_UART_IRQHandler+0x3dc>)
 8009f10:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7f9 fd4b 	bl	80039b2 <HAL_DMA_Abort_IT>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d016      	beq.n	8009f50 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009f2c:	4610      	mov	r0, r2
 8009f2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f30:	e00e      	b.n	8009f50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f7f8 fa08 	bl	8002348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f38:	e00a      	b.n	8009f50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f7f8 fa04 	bl	8002348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f40:	e006      	b.n	8009f50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f7f8 fa00 	bl	8002348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009f4e:	e170      	b.n	800a232 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f50:	bf00      	nop
    return;
 8009f52:	e16e      	b.n	800a232 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	f040 814a 	bne.w	800a1f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f62:	f003 0310 	and.w	r3, r3, #16
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	f000 8143 	beq.w	800a1f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f70:	f003 0310 	and.w	r3, r3, #16
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	f000 813c 	beq.w	800a1f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	60bb      	str	r3, [r7, #8]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	60bb      	str	r3, [r7, #8]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	60bb      	str	r3, [r7, #8]
 8009f8e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	695b      	ldr	r3, [r3, #20]
 8009f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f9a:	2b40      	cmp	r3, #64	; 0x40
 8009f9c:	f040 80b4 	bne.w	800a108 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009fac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	f000 8140 	beq.w	800a236 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009fba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	f080 8139 	bcs.w	800a236 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009fca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd0:	69db      	ldr	r3, [r3, #28]
 8009fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fd6:	f000 8088 	beq.w	800a0ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	330c      	adds	r3, #12
 8009fe0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009fe8:	e853 3f00 	ldrex	r3, [r3]
 8009fec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009ff0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ff8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	330c      	adds	r3, #12
 800a002:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a006:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a00a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a00e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a012:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a016:	e841 2300 	strex	r3, r2, [r1]
 800a01a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a01e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a022:	2b00      	cmp	r3, #0
 800a024:	d1d9      	bne.n	8009fda <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	3314      	adds	r3, #20
 800a02c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a030:	e853 3f00 	ldrex	r3, [r3]
 800a034:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a036:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a038:	f023 0301 	bic.w	r3, r3, #1
 800a03c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	3314      	adds	r3, #20
 800a046:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a04a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a04e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a050:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a052:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a056:	e841 2300 	strex	r3, r2, [r1]
 800a05a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a05c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d1e1      	bne.n	800a026 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	3314      	adds	r3, #20
 800a068:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a06a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a06c:	e853 3f00 	ldrex	r3, [r3]
 800a070:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a072:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a078:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	3314      	adds	r3, #20
 800a082:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a086:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a088:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a08a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a08c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a08e:	e841 2300 	strex	r3, r2, [r1]
 800a092:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a094:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a096:	2b00      	cmp	r3, #0
 800a098:	d1e3      	bne.n	800a062 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2220      	movs	r2, #32
 800a09e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	330c      	adds	r3, #12
 800a0ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0b2:	e853 3f00 	ldrex	r3, [r3]
 800a0b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a0b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0ba:	f023 0310 	bic.w	r3, r3, #16
 800a0be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	330c      	adds	r3, #12
 800a0c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a0cc:	65ba      	str	r2, [r7, #88]	; 0x58
 800a0ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a0d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a0d4:	e841 2300 	strex	r3, r2, [r1]
 800a0d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a0da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d1e3      	bne.n	800a0a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7f9 fbf4 	bl	80038d2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	1ad3      	subs	r3, r2, r3
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f007 fb02 	bl	8011704 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a100:	e099      	b.n	800a236 <HAL_UART_IRQHandler+0x50e>
 800a102:	bf00      	nop
 800a104:	0800a477 	.word	0x0800a477
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a110:	b29b      	uxth	r3, r3
 800a112:	1ad3      	subs	r3, r2, r3
 800a114:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	2b00      	cmp	r3, #0
 800a120:	f000 808b 	beq.w	800a23a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a124:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a128:	2b00      	cmp	r3, #0
 800a12a:	f000 8086 	beq.w	800a23a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	330c      	adds	r3, #12
 800a134:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a138:	e853 3f00 	ldrex	r3, [r3]
 800a13c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a13e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a140:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a144:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	330c      	adds	r3, #12
 800a14e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a152:	647a      	str	r2, [r7, #68]	; 0x44
 800a154:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a156:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a158:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a15a:	e841 2300 	strex	r3, r2, [r1]
 800a15e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a162:	2b00      	cmp	r3, #0
 800a164:	d1e3      	bne.n	800a12e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	3314      	adds	r3, #20
 800a16c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a170:	e853 3f00 	ldrex	r3, [r3]
 800a174:	623b      	str	r3, [r7, #32]
   return(result);
 800a176:	6a3b      	ldr	r3, [r7, #32]
 800a178:	f023 0301 	bic.w	r3, r3, #1
 800a17c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	3314      	adds	r3, #20
 800a186:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a18a:	633a      	str	r2, [r7, #48]	; 0x30
 800a18c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a18e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a192:	e841 2300 	strex	r3, r2, [r1]
 800a196:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d1e3      	bne.n	800a166 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2220      	movs	r2, #32
 800a1a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	330c      	adds	r3, #12
 800a1b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	e853 3f00 	ldrex	r3, [r3]
 800a1ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f023 0310 	bic.w	r3, r3, #16
 800a1c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	330c      	adds	r3, #12
 800a1cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a1d0:	61fa      	str	r2, [r7, #28]
 800a1d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d4:	69b9      	ldr	r1, [r7, #24]
 800a1d6:	69fa      	ldr	r2, [r7, #28]
 800a1d8:	e841 2300 	strex	r3, r2, [r1]
 800a1dc:	617b      	str	r3, [r7, #20]
   return(result);
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d1e3      	bne.n	800a1ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a1e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f007 fa8a 	bl	8011704 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a1f0:	e023      	b.n	800a23a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a1f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d009      	beq.n	800a212 <HAL_UART_IRQHandler+0x4ea>
 800a1fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a206:	2b00      	cmp	r3, #0
 800a208:	d003      	beq.n	800a212 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f000 f947 	bl	800a49e <UART_Transmit_IT>
    return;
 800a210:	e014      	b.n	800a23c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00e      	beq.n	800a23c <HAL_UART_IRQHandler+0x514>
 800a21e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a226:	2b00      	cmp	r3, #0
 800a228:	d008      	beq.n	800a23c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 f987 	bl	800a53e <UART_EndTransmit_IT>
    return;
 800a230:	e004      	b.n	800a23c <HAL_UART_IRQHandler+0x514>
    return;
 800a232:	bf00      	nop
 800a234:	e002      	b.n	800a23c <HAL_UART_IRQHandler+0x514>
      return;
 800a236:	bf00      	nop
 800a238:	e000      	b.n	800a23c <HAL_UART_IRQHandler+0x514>
      return;
 800a23a:	bf00      	nop
  }
}
 800a23c:	37e8      	adds	r7, #232	; 0xe8
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop

0800a244 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a24c:	bf00      	nop
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b090      	sub	sp, #64	; 0x40
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	60f8      	str	r0, [r7, #12]
 800a260:	60b9      	str	r1, [r7, #8]
 800a262:	603b      	str	r3, [r7, #0]
 800a264:	4613      	mov	r3, r2
 800a266:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a268:	e050      	b.n	800a30c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a26a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a26c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a270:	d04c      	beq.n	800a30c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a274:	2b00      	cmp	r3, #0
 800a276:	d007      	beq.n	800a288 <UART_WaitOnFlagUntilTimeout+0x30>
 800a278:	f7f8 fd00 	bl	8002c7c <HAL_GetTick>
 800a27c:	4602      	mov	r2, r0
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	1ad3      	subs	r3, r2, r3
 800a282:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a284:	429a      	cmp	r2, r3
 800a286:	d241      	bcs.n	800a30c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	330c      	adds	r3, #12
 800a28e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a292:	e853 3f00 	ldrex	r3, [r3]
 800a296:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a29e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	330c      	adds	r3, #12
 800a2a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a2a8:	637a      	str	r2, [r7, #52]	; 0x34
 800a2aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a2ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2b0:	e841 2300 	strex	r3, r2, [r1]
 800a2b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d1e5      	bne.n	800a288 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	3314      	adds	r3, #20
 800a2c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	e853 3f00 	ldrex	r3, [r3]
 800a2ca:	613b      	str	r3, [r7, #16]
   return(result);
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	f023 0301 	bic.w	r3, r3, #1
 800a2d2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	3314      	adds	r3, #20
 800a2da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2dc:	623a      	str	r2, [r7, #32]
 800a2de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2e0:	69f9      	ldr	r1, [r7, #28]
 800a2e2:	6a3a      	ldr	r2, [r7, #32]
 800a2e4:	e841 2300 	strex	r3, r2, [r1]
 800a2e8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a2ea:	69bb      	ldr	r3, [r7, #24]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d1e5      	bne.n	800a2bc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2220      	movs	r2, #32
 800a2f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2220      	movs	r2, #32
 800a2fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2200      	movs	r2, #0
 800a304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a308:	2303      	movs	r3, #3
 800a30a:	e00f      	b.n	800a32c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	4013      	ands	r3, r2
 800a316:	68ba      	ldr	r2, [r7, #8]
 800a318:	429a      	cmp	r2, r3
 800a31a:	bf0c      	ite	eq
 800a31c:	2301      	moveq	r3, #1
 800a31e:	2300      	movne	r3, #0
 800a320:	b2db      	uxtb	r3, r3
 800a322:	461a      	mov	r2, r3
 800a324:	79fb      	ldrb	r3, [r7, #7]
 800a326:	429a      	cmp	r2, r3
 800a328:	d09f      	beq.n	800a26a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3740      	adds	r7, #64	; 0x40
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a334:	b480      	push	{r7}
 800a336:	b085      	sub	sp, #20
 800a338:	af00      	add	r7, sp, #0
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	60b9      	str	r1, [r7, #8]
 800a33e:	4613      	mov	r3, r2
 800a340:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	68ba      	ldr	r2, [r7, #8]
 800a346:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	88fa      	ldrh	r2, [r7, #6]
 800a34c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	88fa      	ldrh	r2, [r7, #6]
 800a352:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2200      	movs	r2, #0
 800a358:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2222      	movs	r2, #34	; 0x22
 800a35e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2200      	movs	r2, #0
 800a366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	691b      	ldr	r3, [r3, #16]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d007      	beq.n	800a382 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	68da      	ldr	r2, [r3, #12]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a380:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	695a      	ldr	r2, [r3, #20]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f042 0201 	orr.w	r2, r2, #1
 800a390:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	68da      	ldr	r2, [r3, #12]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f042 0220 	orr.w	r2, r2, #32
 800a3a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a3a2:	2300      	movs	r3, #0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3714      	adds	r7, #20
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b095      	sub	sp, #84	; 0x54
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	330c      	adds	r3, #12
 800a3be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3c2:	e853 3f00 	ldrex	r3, [r3]
 800a3c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a3ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	330c      	adds	r3, #12
 800a3d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a3d8:	643a      	str	r2, [r7, #64]	; 0x40
 800a3da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a3de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3e0:	e841 2300 	strex	r3, r2, [r1]
 800a3e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d1e5      	bne.n	800a3b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	3314      	adds	r3, #20
 800a3f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3f4:	6a3b      	ldr	r3, [r7, #32]
 800a3f6:	e853 3f00 	ldrex	r3, [r3]
 800a3fa:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3fc:	69fb      	ldr	r3, [r7, #28]
 800a3fe:	f023 0301 	bic.w	r3, r3, #1
 800a402:	64bb      	str	r3, [r7, #72]	; 0x48
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	3314      	adds	r3, #20
 800a40a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a40c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a40e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a410:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a414:	e841 2300 	strex	r3, r2, [r1]
 800a418:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d1e5      	bne.n	800a3ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a424:	2b01      	cmp	r3, #1
 800a426:	d119      	bne.n	800a45c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	330c      	adds	r3, #12
 800a42e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	e853 3f00 	ldrex	r3, [r3]
 800a436:	60bb      	str	r3, [r7, #8]
   return(result);
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	f023 0310 	bic.w	r3, r3, #16
 800a43e:	647b      	str	r3, [r7, #68]	; 0x44
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	330c      	adds	r3, #12
 800a446:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a448:	61ba      	str	r2, [r7, #24]
 800a44a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a44c:	6979      	ldr	r1, [r7, #20]
 800a44e:	69ba      	ldr	r2, [r7, #24]
 800a450:	e841 2300 	strex	r3, r2, [r1]
 800a454:	613b      	str	r3, [r7, #16]
   return(result);
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d1e5      	bne.n	800a428 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2220      	movs	r2, #32
 800a460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2200      	movs	r2, #0
 800a468:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a46a:	bf00      	nop
 800a46c:	3754      	adds	r7, #84	; 0x54
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr

0800a476 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a476:	b580      	push	{r7, lr}
 800a478:	b084      	sub	sp, #16
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a482:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2200      	movs	r2, #0
 800a488:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2200      	movs	r2, #0
 800a48e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a490:	68f8      	ldr	r0, [r7, #12]
 800a492:	f7f7 ff59 	bl	8002348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a496:	bf00      	nop
 800a498:	3710      	adds	r7, #16
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a49e:	b480      	push	{r7}
 800a4a0:	b085      	sub	sp, #20
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	2b21      	cmp	r3, #33	; 0x21
 800a4b0:	d13e      	bne.n	800a530 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	689b      	ldr	r3, [r3, #8]
 800a4b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4ba:	d114      	bne.n	800a4e6 <UART_Transmit_IT+0x48>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	691b      	ldr	r3, [r3, #16]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d110      	bne.n	800a4e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6a1b      	ldr	r3, [r3, #32]
 800a4c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	881b      	ldrh	r3, [r3, #0]
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a4d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6a1b      	ldr	r3, [r3, #32]
 800a4de:	1c9a      	adds	r2, r3, #2
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	621a      	str	r2, [r3, #32]
 800a4e4:	e008      	b.n	800a4f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6a1b      	ldr	r3, [r3, #32]
 800a4ea:	1c59      	adds	r1, r3, #1
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	6211      	str	r1, [r2, #32]
 800a4f0:	781a      	ldrb	r2, [r3, #0]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	3b01      	subs	r3, #1
 800a500:	b29b      	uxth	r3, r3
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	4619      	mov	r1, r3
 800a506:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d10f      	bne.n	800a52c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	68da      	ldr	r2, [r3, #12]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a51a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	68da      	ldr	r2, [r3, #12]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a52a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a52c:	2300      	movs	r3, #0
 800a52e:	e000      	b.n	800a532 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a530:	2302      	movs	r3, #2
  }
}
 800a532:	4618      	mov	r0, r3
 800a534:	3714      	adds	r7, #20
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr

0800a53e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b082      	sub	sp, #8
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	68da      	ldr	r2, [r3, #12]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a554:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2220      	movs	r2, #32
 800a55a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f7ff fe70 	bl	800a244 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a564:	2300      	movs	r3, #0
}
 800a566:	4618      	mov	r0, r3
 800a568:	3708      	adds	r7, #8
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}

0800a56e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a56e:	b580      	push	{r7, lr}
 800a570:	b08c      	sub	sp, #48	; 0x30
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	2b22      	cmp	r3, #34	; 0x22
 800a580:	f040 80ab 	bne.w	800a6da <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a58c:	d117      	bne.n	800a5be <UART_Receive_IT+0x50>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	691b      	ldr	r3, [r3, #16]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d113      	bne.n	800a5be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a596:	2300      	movs	r3, #0
 800a598:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a59e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5ac:	b29a      	uxth	r2, r3
 800a5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5b6:	1c9a      	adds	r2, r3, #2
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	629a      	str	r2, [r3, #40]	; 0x28
 800a5bc:	e026      	b.n	800a60c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5d0:	d007      	beq.n	800a5e2 <UART_Receive_IT+0x74>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d10a      	bne.n	800a5f0 <UART_Receive_IT+0x82>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	691b      	ldr	r3, [r3, #16]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d106      	bne.n	800a5f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	b2da      	uxtb	r2, r3
 800a5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ec:	701a      	strb	r2, [r3, #0]
 800a5ee:	e008      	b.n	800a602 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5fc:	b2da      	uxtb	r2, r3
 800a5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a600:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a606:	1c5a      	adds	r2, r3, #1
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a610:	b29b      	uxth	r3, r3
 800a612:	3b01      	subs	r3, #1
 800a614:	b29b      	uxth	r3, r3
 800a616:	687a      	ldr	r2, [r7, #4]
 800a618:	4619      	mov	r1, r3
 800a61a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d15a      	bne.n	800a6d6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	68da      	ldr	r2, [r3, #12]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f022 0220 	bic.w	r2, r2, #32
 800a62e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	68da      	ldr	r2, [r3, #12]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a63e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	695a      	ldr	r2, [r3, #20]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f022 0201 	bic.w	r2, r2, #1
 800a64e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2220      	movs	r2, #32
 800a654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	d135      	bne.n	800a6cc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	330c      	adds	r3, #12
 800a66c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	e853 3f00 	ldrex	r3, [r3]
 800a674:	613b      	str	r3, [r7, #16]
   return(result);
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	f023 0310 	bic.w	r3, r3, #16
 800a67c:	627b      	str	r3, [r7, #36]	; 0x24
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	330c      	adds	r3, #12
 800a684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a686:	623a      	str	r2, [r7, #32]
 800a688:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a68a:	69f9      	ldr	r1, [r7, #28]
 800a68c:	6a3a      	ldr	r2, [r7, #32]
 800a68e:	e841 2300 	strex	r3, r2, [r1]
 800a692:	61bb      	str	r3, [r7, #24]
   return(result);
 800a694:	69bb      	ldr	r3, [r7, #24]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d1e5      	bne.n	800a666 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f003 0310 	and.w	r3, r3, #16
 800a6a4:	2b10      	cmp	r3, #16
 800a6a6:	d10a      	bne.n	800a6be <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	60fb      	str	r3, [r7, #12]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	60fb      	str	r3, [r7, #12]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	60fb      	str	r3, [r7, #12]
 800a6bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f007 f81d 	bl	8011704 <HAL_UARTEx_RxEventCallback>
 800a6ca:	e002      	b.n	800a6d2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f002 fc4d 	bl	800cf6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	e002      	b.n	800a6dc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	e000      	b.n	800a6dc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a6da:	2302      	movs	r3, #2
  }
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3730      	adds	r7, #48	; 0x30
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a6e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a6e8:	b0c0      	sub	sp, #256	; 0x100
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a6f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	691b      	ldr	r3, [r3, #16]
 800a6f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a6fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a700:	68d9      	ldr	r1, [r3, #12]
 800a702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a706:	681a      	ldr	r2, [r3, #0]
 800a708:	ea40 0301 	orr.w	r3, r0, r1
 800a70c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a70e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a712:	689a      	ldr	r2, [r3, #8]
 800a714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a718:	691b      	ldr	r3, [r3, #16]
 800a71a:	431a      	orrs	r2, r3
 800a71c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a720:	695b      	ldr	r3, [r3, #20]
 800a722:	431a      	orrs	r2, r3
 800a724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a728:	69db      	ldr	r3, [r3, #28]
 800a72a:	4313      	orrs	r3, r2
 800a72c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a73c:	f021 010c 	bic.w	r1, r1, #12
 800a740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a74a:	430b      	orrs	r3, r1
 800a74c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a74e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	695b      	ldr	r3, [r3, #20]
 800a756:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a75a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a75e:	6999      	ldr	r1, [r3, #24]
 800a760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a764:	681a      	ldr	r2, [r3, #0]
 800a766:	ea40 0301 	orr.w	r3, r0, r1
 800a76a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a76c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	4b8f      	ldr	r3, [pc, #572]	; (800a9b0 <UART_SetConfig+0x2cc>)
 800a774:	429a      	cmp	r2, r3
 800a776:	d005      	beq.n	800a784 <UART_SetConfig+0xa0>
 800a778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	4b8d      	ldr	r3, [pc, #564]	; (800a9b4 <UART_SetConfig+0x2d0>)
 800a780:	429a      	cmp	r2, r3
 800a782:	d104      	bne.n	800a78e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a784:	f7fc ff48 	bl	8007618 <HAL_RCC_GetPCLK2Freq>
 800a788:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a78c:	e003      	b.n	800a796 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a78e:	f7fc ff2f 	bl	80075f0 <HAL_RCC_GetPCLK1Freq>
 800a792:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a79a:	69db      	ldr	r3, [r3, #28]
 800a79c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7a0:	f040 810c 	bne.w	800a9bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a7a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a7ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a7b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a7b6:	4622      	mov	r2, r4
 800a7b8:	462b      	mov	r3, r5
 800a7ba:	1891      	adds	r1, r2, r2
 800a7bc:	65b9      	str	r1, [r7, #88]	; 0x58
 800a7be:	415b      	adcs	r3, r3
 800a7c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a7c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a7c6:	4621      	mov	r1, r4
 800a7c8:	eb12 0801 	adds.w	r8, r2, r1
 800a7cc:	4629      	mov	r1, r5
 800a7ce:	eb43 0901 	adc.w	r9, r3, r1
 800a7d2:	f04f 0200 	mov.w	r2, #0
 800a7d6:	f04f 0300 	mov.w	r3, #0
 800a7da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a7de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a7e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a7e6:	4690      	mov	r8, r2
 800a7e8:	4699      	mov	r9, r3
 800a7ea:	4623      	mov	r3, r4
 800a7ec:	eb18 0303 	adds.w	r3, r8, r3
 800a7f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a7f4:	462b      	mov	r3, r5
 800a7f6:	eb49 0303 	adc.w	r3, r9, r3
 800a7fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a7fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	2200      	movs	r2, #0
 800a806:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a80a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a80e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a812:	460b      	mov	r3, r1
 800a814:	18db      	adds	r3, r3, r3
 800a816:	653b      	str	r3, [r7, #80]	; 0x50
 800a818:	4613      	mov	r3, r2
 800a81a:	eb42 0303 	adc.w	r3, r2, r3
 800a81e:	657b      	str	r3, [r7, #84]	; 0x54
 800a820:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a824:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a828:	f7f6 fa46 	bl	8000cb8 <__aeabi_uldivmod>
 800a82c:	4602      	mov	r2, r0
 800a82e:	460b      	mov	r3, r1
 800a830:	4b61      	ldr	r3, [pc, #388]	; (800a9b8 <UART_SetConfig+0x2d4>)
 800a832:	fba3 2302 	umull	r2, r3, r3, r2
 800a836:	095b      	lsrs	r3, r3, #5
 800a838:	011c      	lsls	r4, r3, #4
 800a83a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a83e:	2200      	movs	r2, #0
 800a840:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a844:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a848:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a84c:	4642      	mov	r2, r8
 800a84e:	464b      	mov	r3, r9
 800a850:	1891      	adds	r1, r2, r2
 800a852:	64b9      	str	r1, [r7, #72]	; 0x48
 800a854:	415b      	adcs	r3, r3
 800a856:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a858:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a85c:	4641      	mov	r1, r8
 800a85e:	eb12 0a01 	adds.w	sl, r2, r1
 800a862:	4649      	mov	r1, r9
 800a864:	eb43 0b01 	adc.w	fp, r3, r1
 800a868:	f04f 0200 	mov.w	r2, #0
 800a86c:	f04f 0300 	mov.w	r3, #0
 800a870:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a874:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a878:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a87c:	4692      	mov	sl, r2
 800a87e:	469b      	mov	fp, r3
 800a880:	4643      	mov	r3, r8
 800a882:	eb1a 0303 	adds.w	r3, sl, r3
 800a886:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a88a:	464b      	mov	r3, r9
 800a88c:	eb4b 0303 	adc.w	r3, fp, r3
 800a890:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	2200      	movs	r2, #0
 800a89c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a8a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a8a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a8a8:	460b      	mov	r3, r1
 800a8aa:	18db      	adds	r3, r3, r3
 800a8ac:	643b      	str	r3, [r7, #64]	; 0x40
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	eb42 0303 	adc.w	r3, r2, r3
 800a8b4:	647b      	str	r3, [r7, #68]	; 0x44
 800a8b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a8ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a8be:	f7f6 f9fb 	bl	8000cb8 <__aeabi_uldivmod>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	4611      	mov	r1, r2
 800a8c8:	4b3b      	ldr	r3, [pc, #236]	; (800a9b8 <UART_SetConfig+0x2d4>)
 800a8ca:	fba3 2301 	umull	r2, r3, r3, r1
 800a8ce:	095b      	lsrs	r3, r3, #5
 800a8d0:	2264      	movs	r2, #100	; 0x64
 800a8d2:	fb02 f303 	mul.w	r3, r2, r3
 800a8d6:	1acb      	subs	r3, r1, r3
 800a8d8:	00db      	lsls	r3, r3, #3
 800a8da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a8de:	4b36      	ldr	r3, [pc, #216]	; (800a9b8 <UART_SetConfig+0x2d4>)
 800a8e0:	fba3 2302 	umull	r2, r3, r3, r2
 800a8e4:	095b      	lsrs	r3, r3, #5
 800a8e6:	005b      	lsls	r3, r3, #1
 800a8e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a8ec:	441c      	add	r4, r3
 800a8ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a8f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a8fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a900:	4642      	mov	r2, r8
 800a902:	464b      	mov	r3, r9
 800a904:	1891      	adds	r1, r2, r2
 800a906:	63b9      	str	r1, [r7, #56]	; 0x38
 800a908:	415b      	adcs	r3, r3
 800a90a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a90c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a910:	4641      	mov	r1, r8
 800a912:	1851      	adds	r1, r2, r1
 800a914:	6339      	str	r1, [r7, #48]	; 0x30
 800a916:	4649      	mov	r1, r9
 800a918:	414b      	adcs	r3, r1
 800a91a:	637b      	str	r3, [r7, #52]	; 0x34
 800a91c:	f04f 0200 	mov.w	r2, #0
 800a920:	f04f 0300 	mov.w	r3, #0
 800a924:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a928:	4659      	mov	r1, fp
 800a92a:	00cb      	lsls	r3, r1, #3
 800a92c:	4651      	mov	r1, sl
 800a92e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a932:	4651      	mov	r1, sl
 800a934:	00ca      	lsls	r2, r1, #3
 800a936:	4610      	mov	r0, r2
 800a938:	4619      	mov	r1, r3
 800a93a:	4603      	mov	r3, r0
 800a93c:	4642      	mov	r2, r8
 800a93e:	189b      	adds	r3, r3, r2
 800a940:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a944:	464b      	mov	r3, r9
 800a946:	460a      	mov	r2, r1
 800a948:	eb42 0303 	adc.w	r3, r2, r3
 800a94c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a954:	685b      	ldr	r3, [r3, #4]
 800a956:	2200      	movs	r2, #0
 800a958:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a95c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a960:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a964:	460b      	mov	r3, r1
 800a966:	18db      	adds	r3, r3, r3
 800a968:	62bb      	str	r3, [r7, #40]	; 0x28
 800a96a:	4613      	mov	r3, r2
 800a96c:	eb42 0303 	adc.w	r3, r2, r3
 800a970:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a972:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a976:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a97a:	f7f6 f99d 	bl	8000cb8 <__aeabi_uldivmod>
 800a97e:	4602      	mov	r2, r0
 800a980:	460b      	mov	r3, r1
 800a982:	4b0d      	ldr	r3, [pc, #52]	; (800a9b8 <UART_SetConfig+0x2d4>)
 800a984:	fba3 1302 	umull	r1, r3, r3, r2
 800a988:	095b      	lsrs	r3, r3, #5
 800a98a:	2164      	movs	r1, #100	; 0x64
 800a98c:	fb01 f303 	mul.w	r3, r1, r3
 800a990:	1ad3      	subs	r3, r2, r3
 800a992:	00db      	lsls	r3, r3, #3
 800a994:	3332      	adds	r3, #50	; 0x32
 800a996:	4a08      	ldr	r2, [pc, #32]	; (800a9b8 <UART_SetConfig+0x2d4>)
 800a998:	fba2 2303 	umull	r2, r3, r2, r3
 800a99c:	095b      	lsrs	r3, r3, #5
 800a99e:	f003 0207 	and.w	r2, r3, #7
 800a9a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	4422      	add	r2, r4
 800a9aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a9ac:	e105      	b.n	800abba <UART_SetConfig+0x4d6>
 800a9ae:	bf00      	nop
 800a9b0:	40011000 	.word	0x40011000
 800a9b4:	40011400 	.word	0x40011400
 800a9b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a9bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a9c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a9ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a9ce:	4642      	mov	r2, r8
 800a9d0:	464b      	mov	r3, r9
 800a9d2:	1891      	adds	r1, r2, r2
 800a9d4:	6239      	str	r1, [r7, #32]
 800a9d6:	415b      	adcs	r3, r3
 800a9d8:	627b      	str	r3, [r7, #36]	; 0x24
 800a9da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a9de:	4641      	mov	r1, r8
 800a9e0:	1854      	adds	r4, r2, r1
 800a9e2:	4649      	mov	r1, r9
 800a9e4:	eb43 0501 	adc.w	r5, r3, r1
 800a9e8:	f04f 0200 	mov.w	r2, #0
 800a9ec:	f04f 0300 	mov.w	r3, #0
 800a9f0:	00eb      	lsls	r3, r5, #3
 800a9f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a9f6:	00e2      	lsls	r2, r4, #3
 800a9f8:	4614      	mov	r4, r2
 800a9fa:	461d      	mov	r5, r3
 800a9fc:	4643      	mov	r3, r8
 800a9fe:	18e3      	adds	r3, r4, r3
 800aa00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800aa04:	464b      	mov	r3, r9
 800aa06:	eb45 0303 	adc.w	r3, r5, r3
 800aa0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aa0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	2200      	movs	r2, #0
 800aa16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800aa1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800aa1e:	f04f 0200 	mov.w	r2, #0
 800aa22:	f04f 0300 	mov.w	r3, #0
 800aa26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800aa2a:	4629      	mov	r1, r5
 800aa2c:	008b      	lsls	r3, r1, #2
 800aa2e:	4621      	mov	r1, r4
 800aa30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aa34:	4621      	mov	r1, r4
 800aa36:	008a      	lsls	r2, r1, #2
 800aa38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800aa3c:	f7f6 f93c 	bl	8000cb8 <__aeabi_uldivmod>
 800aa40:	4602      	mov	r2, r0
 800aa42:	460b      	mov	r3, r1
 800aa44:	4b60      	ldr	r3, [pc, #384]	; (800abc8 <UART_SetConfig+0x4e4>)
 800aa46:	fba3 2302 	umull	r2, r3, r3, r2
 800aa4a:	095b      	lsrs	r3, r3, #5
 800aa4c:	011c      	lsls	r4, r3, #4
 800aa4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa52:	2200      	movs	r2, #0
 800aa54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800aa58:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800aa5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800aa60:	4642      	mov	r2, r8
 800aa62:	464b      	mov	r3, r9
 800aa64:	1891      	adds	r1, r2, r2
 800aa66:	61b9      	str	r1, [r7, #24]
 800aa68:	415b      	adcs	r3, r3
 800aa6a:	61fb      	str	r3, [r7, #28]
 800aa6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aa70:	4641      	mov	r1, r8
 800aa72:	1851      	adds	r1, r2, r1
 800aa74:	6139      	str	r1, [r7, #16]
 800aa76:	4649      	mov	r1, r9
 800aa78:	414b      	adcs	r3, r1
 800aa7a:	617b      	str	r3, [r7, #20]
 800aa7c:	f04f 0200 	mov.w	r2, #0
 800aa80:	f04f 0300 	mov.w	r3, #0
 800aa84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800aa88:	4659      	mov	r1, fp
 800aa8a:	00cb      	lsls	r3, r1, #3
 800aa8c:	4651      	mov	r1, sl
 800aa8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aa92:	4651      	mov	r1, sl
 800aa94:	00ca      	lsls	r2, r1, #3
 800aa96:	4610      	mov	r0, r2
 800aa98:	4619      	mov	r1, r3
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	4642      	mov	r2, r8
 800aa9e:	189b      	adds	r3, r3, r2
 800aaa0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aaa4:	464b      	mov	r3, r9
 800aaa6:	460a      	mov	r2, r1
 800aaa8:	eb42 0303 	adc.w	r3, r2, r3
 800aaac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800aab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	2200      	movs	r2, #0
 800aab8:	67bb      	str	r3, [r7, #120]	; 0x78
 800aaba:	67fa      	str	r2, [r7, #124]	; 0x7c
 800aabc:	f04f 0200 	mov.w	r2, #0
 800aac0:	f04f 0300 	mov.w	r3, #0
 800aac4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800aac8:	4649      	mov	r1, r9
 800aaca:	008b      	lsls	r3, r1, #2
 800aacc:	4641      	mov	r1, r8
 800aace:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aad2:	4641      	mov	r1, r8
 800aad4:	008a      	lsls	r2, r1, #2
 800aad6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800aada:	f7f6 f8ed 	bl	8000cb8 <__aeabi_uldivmod>
 800aade:	4602      	mov	r2, r0
 800aae0:	460b      	mov	r3, r1
 800aae2:	4b39      	ldr	r3, [pc, #228]	; (800abc8 <UART_SetConfig+0x4e4>)
 800aae4:	fba3 1302 	umull	r1, r3, r3, r2
 800aae8:	095b      	lsrs	r3, r3, #5
 800aaea:	2164      	movs	r1, #100	; 0x64
 800aaec:	fb01 f303 	mul.w	r3, r1, r3
 800aaf0:	1ad3      	subs	r3, r2, r3
 800aaf2:	011b      	lsls	r3, r3, #4
 800aaf4:	3332      	adds	r3, #50	; 0x32
 800aaf6:	4a34      	ldr	r2, [pc, #208]	; (800abc8 <UART_SetConfig+0x4e4>)
 800aaf8:	fba2 2303 	umull	r2, r3, r2, r3
 800aafc:	095b      	lsrs	r3, r3, #5
 800aafe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab02:	441c      	add	r4, r3
 800ab04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab08:	2200      	movs	r2, #0
 800ab0a:	673b      	str	r3, [r7, #112]	; 0x70
 800ab0c:	677a      	str	r2, [r7, #116]	; 0x74
 800ab0e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ab12:	4642      	mov	r2, r8
 800ab14:	464b      	mov	r3, r9
 800ab16:	1891      	adds	r1, r2, r2
 800ab18:	60b9      	str	r1, [r7, #8]
 800ab1a:	415b      	adcs	r3, r3
 800ab1c:	60fb      	str	r3, [r7, #12]
 800ab1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ab22:	4641      	mov	r1, r8
 800ab24:	1851      	adds	r1, r2, r1
 800ab26:	6039      	str	r1, [r7, #0]
 800ab28:	4649      	mov	r1, r9
 800ab2a:	414b      	adcs	r3, r1
 800ab2c:	607b      	str	r3, [r7, #4]
 800ab2e:	f04f 0200 	mov.w	r2, #0
 800ab32:	f04f 0300 	mov.w	r3, #0
 800ab36:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ab3a:	4659      	mov	r1, fp
 800ab3c:	00cb      	lsls	r3, r1, #3
 800ab3e:	4651      	mov	r1, sl
 800ab40:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ab44:	4651      	mov	r1, sl
 800ab46:	00ca      	lsls	r2, r1, #3
 800ab48:	4610      	mov	r0, r2
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	4642      	mov	r2, r8
 800ab50:	189b      	adds	r3, r3, r2
 800ab52:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab54:	464b      	mov	r3, r9
 800ab56:	460a      	mov	r2, r1
 800ab58:	eb42 0303 	adc.w	r3, r2, r3
 800ab5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ab5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	2200      	movs	r2, #0
 800ab66:	663b      	str	r3, [r7, #96]	; 0x60
 800ab68:	667a      	str	r2, [r7, #100]	; 0x64
 800ab6a:	f04f 0200 	mov.w	r2, #0
 800ab6e:	f04f 0300 	mov.w	r3, #0
 800ab72:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ab76:	4649      	mov	r1, r9
 800ab78:	008b      	lsls	r3, r1, #2
 800ab7a:	4641      	mov	r1, r8
 800ab7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ab80:	4641      	mov	r1, r8
 800ab82:	008a      	lsls	r2, r1, #2
 800ab84:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ab88:	f7f6 f896 	bl	8000cb8 <__aeabi_uldivmod>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	460b      	mov	r3, r1
 800ab90:	4b0d      	ldr	r3, [pc, #52]	; (800abc8 <UART_SetConfig+0x4e4>)
 800ab92:	fba3 1302 	umull	r1, r3, r3, r2
 800ab96:	095b      	lsrs	r3, r3, #5
 800ab98:	2164      	movs	r1, #100	; 0x64
 800ab9a:	fb01 f303 	mul.w	r3, r1, r3
 800ab9e:	1ad3      	subs	r3, r2, r3
 800aba0:	011b      	lsls	r3, r3, #4
 800aba2:	3332      	adds	r3, #50	; 0x32
 800aba4:	4a08      	ldr	r2, [pc, #32]	; (800abc8 <UART_SetConfig+0x4e4>)
 800aba6:	fba2 2303 	umull	r2, r3, r2, r3
 800abaa:	095b      	lsrs	r3, r3, #5
 800abac:	f003 020f 	and.w	r2, r3, #15
 800abb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4422      	add	r2, r4
 800abb8:	609a      	str	r2, [r3, #8]
}
 800abba:	bf00      	nop
 800abbc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800abc0:	46bd      	mov	sp, r7
 800abc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800abc6:	bf00      	nop
 800abc8:	51eb851f 	.word	0x51eb851f

0800abcc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800abcc:	b084      	sub	sp, #16
 800abce:	b480      	push	{r7}
 800abd0:	b085      	sub	sp, #20
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
 800abd6:	f107 001c 	add.w	r0, r7, #28
 800abda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800abde:	2300      	movs	r3, #0
 800abe0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800abe2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800abe4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800abe6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800abe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800abea:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800abec:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800abee:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800abf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800abf2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800abf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800abf6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800abf8:	68fa      	ldr	r2, [r7, #12]
 800abfa:	4313      	orrs	r3, r2
 800abfc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800ac06:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ac0a:	68fa      	ldr	r2, [r7, #12]
 800ac0c:	431a      	orrs	r2, r3
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ac12:	2300      	movs	r3, #0
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3714      	adds	r7, #20
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	b004      	add	sp, #16
 800ac20:	4770      	bx	lr

0800ac22 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800ac22:	b480      	push	{r7}
 800ac24:	b083      	sub	sp, #12
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	370c      	adds	r7, #12
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr

0800ac3c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	681a      	ldr	r2, [r3, #0]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ac50:	2300      	movs	r3, #0
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	370c      	adds	r7, #12
 800ac56:	46bd      	mov	sp, r7
 800ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5c:	4770      	bx	lr

0800ac5e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800ac5e:	b480      	push	{r7}
 800ac60:	b083      	sub	sp, #12
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2203      	movs	r2, #3
 800ac6a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ac6c:	2300      	movs	r3, #0
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	370c      	adds	r7, #12
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr

0800ac7a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800ac7a:	b480      	push	{r7}
 800ac7c:	b083      	sub	sp, #12
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f003 0303 	and.w	r3, r3, #3
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	370c      	adds	r7, #12
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr

0800ac96 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800ac96:	b480      	push	{r7}
 800ac98:	b085      	sub	sp, #20
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
 800ac9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800aca0:	2300      	movs	r3, #0
 800aca2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	681a      	ldr	r2, [r3, #0]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800acb4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800acba:	431a      	orrs	r2, r3
                       Command->CPSM);
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800acc0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800acc2:	68fa      	ldr	r2, [r7, #12]
 800acc4:	4313      	orrs	r3, r2
 800acc6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	68db      	ldr	r3, [r3, #12]
 800accc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800acd0:	f023 030f 	bic.w	r3, r3, #15
 800acd4:	68fa      	ldr	r2, [r7, #12]
 800acd6:	431a      	orrs	r2, r3
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800acdc:	2300      	movs	r3, #0
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3714      	adds	r7, #20
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr

0800acea <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800acea:	b480      	push	{r7}
 800acec:	b083      	sub	sp, #12
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	691b      	ldr	r3, [r3, #16]
 800acf6:	b2db      	uxtb	r3, r3
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	370c      	adds	r7, #12
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b085      	sub	sp, #20
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	3314      	adds	r3, #20
 800ad12:	461a      	mov	r2, r3
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	4413      	add	r3, r2
 800ad18:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
}  
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3714      	adds	r7, #20
 800ad22:	46bd      	mov	sp, r7
 800ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad28:	4770      	bx	lr

0800ad2a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800ad2a:	b480      	push	{r7}
 800ad2c:	b085      	sub	sp, #20
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]
 800ad32:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ad34:	2300      	movs	r3, #0
 800ad36:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	681a      	ldr	r2, [r3, #0]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	685a      	ldr	r2, [r3, #4]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ad50:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ad56:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ad5c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ad5e:	68fa      	ldr	r2, [r7, #12]
 800ad60:	4313      	orrs	r3, r2
 800ad62:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad68:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	431a      	orrs	r2, r3
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ad74:	2300      	movs	r3, #0

}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3714      	adds	r7, #20
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad80:	4770      	bx	lr

0800ad82 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800ad82:	b580      	push	{r7, lr}
 800ad84:	b088      	sub	sp, #32
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	6078      	str	r0, [r7, #4]
 800ad8a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ad90:	2310      	movs	r3, #16
 800ad92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad94:	2340      	movs	r3, #64	; 0x40
 800ad96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ada0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ada2:	f107 0308 	add.w	r3, r7, #8
 800ada6:	4619      	mov	r1, r3
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f7ff ff74 	bl	800ac96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800adae:	f241 3288 	movw	r2, #5000	; 0x1388
 800adb2:	2110      	movs	r1, #16
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 f9d7 	bl	800b168 <SDMMC_GetCmdResp1>
 800adba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adbc:	69fb      	ldr	r3, [r7, #28]
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3720      	adds	r7, #32
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}

0800adc6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b088      	sub	sp, #32
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6078      	str	r0, [r7, #4]
 800adce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800add4:	2311      	movs	r3, #17
 800add6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800add8:	2340      	movs	r3, #64	; 0x40
 800adda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800addc:	2300      	movs	r3, #0
 800adde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ade0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ade4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ade6:	f107 0308 	add.w	r3, r7, #8
 800adea:	4619      	mov	r1, r3
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f7ff ff52 	bl	800ac96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800adf2:	f241 3288 	movw	r2, #5000	; 0x1388
 800adf6:	2111      	movs	r1, #17
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f000 f9b5 	bl	800b168 <SDMMC_GetCmdResp1>
 800adfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae00:	69fb      	ldr	r3, [r7, #28]
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3720      	adds	r7, #32
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b088      	sub	sp, #32
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
 800ae12:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ae18:	2312      	movs	r3, #18
 800ae1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ae1c:	2340      	movs	r3, #64	; 0x40
 800ae1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae20:	2300      	movs	r3, #0
 800ae22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae2a:	f107 0308 	add.w	r3, r7, #8
 800ae2e:	4619      	mov	r1, r3
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f7ff ff30 	bl	800ac96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ae36:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae3a:	2112      	movs	r1, #18
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 f993 	bl	800b168 <SDMMC_GetCmdResp1>
 800ae42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae44:	69fb      	ldr	r3, [r7, #28]
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3720      	adds	r7, #32
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}

0800ae4e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ae4e:	b580      	push	{r7, lr}
 800ae50:	b088      	sub	sp, #32
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	6078      	str	r0, [r7, #4]
 800ae56:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ae5c:	2318      	movs	r3, #24
 800ae5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ae60:	2340      	movs	r3, #64	; 0x40
 800ae62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae64:	2300      	movs	r3, #0
 800ae66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae6c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae6e:	f107 0308 	add.w	r3, r7, #8
 800ae72:	4619      	mov	r1, r3
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f7ff ff0e 	bl	800ac96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ae7a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae7e:	2118      	movs	r1, #24
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 f971 	bl	800b168 <SDMMC_GetCmdResp1>
 800ae86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae88:	69fb      	ldr	r3, [r7, #28]
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3720      	adds	r7, #32
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}

0800ae92 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ae92:	b580      	push	{r7, lr}
 800ae94:	b088      	sub	sp, #32
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]
 800ae9a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800aea0:	2319      	movs	r3, #25
 800aea2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aea4:	2340      	movs	r3, #64	; 0x40
 800aea6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aeac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aeb0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aeb2:	f107 0308 	add.w	r3, r7, #8
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f7ff feec 	bl	800ac96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800aebe:	f241 3288 	movw	r2, #5000	; 0x1388
 800aec2:	2119      	movs	r1, #25
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 f94f 	bl	800b168 <SDMMC_GetCmdResp1>
 800aeca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aecc:	69fb      	ldr	r3, [r7, #28]
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3720      	adds	r7, #32
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
	...

0800aed8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b088      	sub	sp, #32
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800aee0:	2300      	movs	r3, #0
 800aee2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800aee4:	230c      	movs	r3, #12
 800aee6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aee8:	2340      	movs	r3, #64	; 0x40
 800aeea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aeec:	2300      	movs	r3, #0
 800aeee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aef4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aef6:	f107 0308 	add.w	r3, r7, #8
 800aefa:	4619      	mov	r1, r3
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f7ff feca 	bl	800ac96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800af02:	4a05      	ldr	r2, [pc, #20]	; (800af18 <SDMMC_CmdStopTransfer+0x40>)
 800af04:	210c      	movs	r1, #12
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 f92e 	bl	800b168 <SDMMC_GetCmdResp1>
 800af0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af0e:	69fb      	ldr	r3, [r7, #28]
}
 800af10:	4618      	mov	r0, r3
 800af12:	3720      	adds	r7, #32
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}
 800af18:	05f5e100 	.word	0x05f5e100

0800af1c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b08a      	sub	sp, #40	; 0x28
 800af20:	af00      	add	r7, sp, #0
 800af22:	60f8      	str	r0, [r7, #12]
 800af24:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800af2c:	2307      	movs	r3, #7
 800af2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800af30:	2340      	movs	r3, #64	; 0x40
 800af32:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800af34:	2300      	movs	r3, #0
 800af36:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800af38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af3c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800af3e:	f107 0310 	add.w	r3, r7, #16
 800af42:	4619      	mov	r1, r3
 800af44:	68f8      	ldr	r0, [r7, #12]
 800af46:	f7ff fea6 	bl	800ac96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800af4a:	f241 3288 	movw	r2, #5000	; 0x1388
 800af4e:	2107      	movs	r1, #7
 800af50:	68f8      	ldr	r0, [r7, #12]
 800af52:	f000 f909 	bl	800b168 <SDMMC_GetCmdResp1>
 800af56:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800af58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3728      	adds	r7, #40	; 0x28
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}

0800af62 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800af62:	b580      	push	{r7, lr}
 800af64:	b088      	sub	sp, #32
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800af6a:	2300      	movs	r3, #0
 800af6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800af6e:	2300      	movs	r3, #0
 800af70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800af72:	2300      	movs	r3, #0
 800af74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800af76:	2300      	movs	r3, #0
 800af78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800af7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800af80:	f107 0308 	add.w	r3, r7, #8
 800af84:	4619      	mov	r1, r3
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f7ff fe85 	bl	800ac96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f000 fb23 	bl	800b5d8 <SDMMC_GetCmdError>
 800af92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af94:	69fb      	ldr	r3, [r7, #28]
}
 800af96:	4618      	mov	r0, r3
 800af98:	3720      	adds	r7, #32
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800af9e:	b580      	push	{r7, lr}
 800afa0:	b088      	sub	sp, #32
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800afa6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800afaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800afac:	2308      	movs	r3, #8
 800afae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800afb0:	2340      	movs	r3, #64	; 0x40
 800afb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800afb4:	2300      	movs	r3, #0
 800afb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800afb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afbc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800afbe:	f107 0308 	add.w	r3, r7, #8
 800afc2:	4619      	mov	r1, r3
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f7ff fe66 	bl	800ac96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f000 fab6 	bl	800b53c <SDMMC_GetCmdResp7>
 800afd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afd2:	69fb      	ldr	r3, [r7, #28]
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3720      	adds	r7, #32
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b088      	sub	sp, #32
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800afea:	2337      	movs	r3, #55	; 0x37
 800afec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800afee:	2340      	movs	r3, #64	; 0x40
 800aff0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aff2:	2300      	movs	r3, #0
 800aff4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aff6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800affa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800affc:	f107 0308 	add.w	r3, r7, #8
 800b000:	4619      	mov	r1, r3
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f7ff fe47 	bl	800ac96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800b008:	f241 3288 	movw	r2, #5000	; 0x1388
 800b00c:	2137      	movs	r1, #55	; 0x37
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 f8aa 	bl	800b168 <SDMMC_GetCmdResp1>
 800b014:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b016:	69fb      	ldr	r3, [r7, #28]
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3720      	adds	r7, #32
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b088      	sub	sp, #32
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b030:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b034:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b036:	2329      	movs	r3, #41	; 0x29
 800b038:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b03a:	2340      	movs	r3, #64	; 0x40
 800b03c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b03e:	2300      	movs	r3, #0
 800b040:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b046:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b048:	f107 0308 	add.w	r3, r7, #8
 800b04c:	4619      	mov	r1, r3
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f7ff fe21 	bl	800ac96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f000 f9bd 	bl	800b3d4 <SDMMC_GetCmdResp3>
 800b05a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b05c:	69fb      	ldr	r3, [r7, #28]
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3720      	adds	r7, #32
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}

0800b066 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800b066:	b580      	push	{r7, lr}
 800b068:	b088      	sub	sp, #32
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b06e:	2300      	movs	r3, #0
 800b070:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b072:	2302      	movs	r3, #2
 800b074:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b076:	23c0      	movs	r3, #192	; 0xc0
 800b078:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b07a:	2300      	movs	r3, #0
 800b07c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b07e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b082:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b084:	f107 0308 	add.w	r3, r7, #8
 800b088:	4619      	mov	r1, r3
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f7ff fe03 	bl	800ac96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f000 f957 	bl	800b344 <SDMMC_GetCmdResp2>
 800b096:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b098:	69fb      	ldr	r3, [r7, #28]
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3720      	adds	r7, #32
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}

0800b0a2 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b0a2:	b580      	push	{r7, lr}
 800b0a4:	b088      	sub	sp, #32
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	6078      	str	r0, [r7, #4]
 800b0aa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b0b0:	2309      	movs	r3, #9
 800b0b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b0b4:	23c0      	movs	r3, #192	; 0xc0
 800b0b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b0bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b0c2:	f107 0308 	add.w	r3, r7, #8
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f7ff fde4 	bl	800ac96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 f938 	bl	800b344 <SDMMC_GetCmdResp2>
 800b0d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0d6:	69fb      	ldr	r3, [r7, #28]
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3720      	adds	r7, #32
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b088      	sub	sp, #32
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b0ee:	2303      	movs	r3, #3
 800b0f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b0f2:	2340      	movs	r3, #64	; 0x40
 800b0f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b0fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b100:	f107 0308 	add.w	r3, r7, #8
 800b104:	4619      	mov	r1, r3
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f7ff fdc5 	bl	800ac96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b10c:	683a      	ldr	r2, [r7, #0]
 800b10e:	2103      	movs	r1, #3
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 f99d 	bl	800b450 <SDMMC_GetCmdResp6>
 800b116:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b118:	69fb      	ldr	r3, [r7, #28]
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3720      	adds	r7, #32
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}

0800b122 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b122:	b580      	push	{r7, lr}
 800b124:	b088      	sub	sp, #32
 800b126:	af00      	add	r7, sp, #0
 800b128:	6078      	str	r0, [r7, #4]
 800b12a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b130:	230d      	movs	r3, #13
 800b132:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b134:	2340      	movs	r3, #64	; 0x40
 800b136:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b138:	2300      	movs	r3, #0
 800b13a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b13c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b140:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b142:	f107 0308 	add.w	r3, r7, #8
 800b146:	4619      	mov	r1, r3
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f7ff fda4 	bl	800ac96 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800b14e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b152:	210d      	movs	r1, #13
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 f807 	bl	800b168 <SDMMC_GetCmdResp1>
 800b15a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b15c:	69fb      	ldr	r3, [r7, #28]
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3720      	adds	r7, #32
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}
	...

0800b168 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b088      	sub	sp, #32
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	60f8      	str	r0, [r7, #12]
 800b170:	460b      	mov	r3, r1
 800b172:	607a      	str	r2, [r7, #4]
 800b174:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b176:	4b70      	ldr	r3, [pc, #448]	; (800b338 <SDMMC_GetCmdResp1+0x1d0>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	4a70      	ldr	r2, [pc, #448]	; (800b33c <SDMMC_GetCmdResp1+0x1d4>)
 800b17c:	fba2 2303 	umull	r2, r3, r2, r3
 800b180:	0a5a      	lsrs	r2, r3, #9
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	fb02 f303 	mul.w	r3, r2, r3
 800b188:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b18a:	69fb      	ldr	r3, [r7, #28]
 800b18c:	1e5a      	subs	r2, r3, #1
 800b18e:	61fa      	str	r2, [r7, #28]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d102      	bne.n	800b19a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b194:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b198:	e0c9      	b.n	800b32e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b19e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b1a0:	69bb      	ldr	r3, [r7, #24]
 800b1a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d0ef      	beq.n	800b18a <SDMMC_GetCmdResp1+0x22>
 800b1aa:	69bb      	ldr	r3, [r7, #24]
 800b1ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d1ea      	bne.n	800b18a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1b8:	f003 0304 	and.w	r3, r3, #4
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d004      	beq.n	800b1ca <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2204      	movs	r2, #4
 800b1c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b1c6:	2304      	movs	r3, #4
 800b1c8:	e0b1      	b.n	800b32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1ce:	f003 0301 	and.w	r3, r3, #1
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d004      	beq.n	800b1e0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2201      	movs	r2, #1
 800b1da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	e0a6      	b.n	800b32e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	22c5      	movs	r2, #197	; 0xc5
 800b1e4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b1e6:	68f8      	ldr	r0, [r7, #12]
 800b1e8:	f7ff fd7f 	bl	800acea <SDIO_GetCommandResponse>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	7afb      	ldrb	r3, [r7, #11]
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d001      	beq.n	800b1fa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e099      	b.n	800b32e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b1fa:	2100      	movs	r1, #0
 800b1fc:	68f8      	ldr	r0, [r7, #12]
 800b1fe:	f7ff fd81 	bl	800ad04 <SDIO_GetResponse>
 800b202:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b204:	697a      	ldr	r2, [r7, #20]
 800b206:	4b4e      	ldr	r3, [pc, #312]	; (800b340 <SDMMC_GetCmdResp1+0x1d8>)
 800b208:	4013      	ands	r3, r2
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d101      	bne.n	800b212 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b20e:	2300      	movs	r3, #0
 800b210:	e08d      	b.n	800b32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	2b00      	cmp	r3, #0
 800b216:	da02      	bge.n	800b21e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b218:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b21c:	e087      	b.n	800b32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b224:	2b00      	cmp	r3, #0
 800b226:	d001      	beq.n	800b22c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b228:	2340      	movs	r3, #64	; 0x40
 800b22a:	e080      	b.n	800b32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b232:	2b00      	cmp	r3, #0
 800b234:	d001      	beq.n	800b23a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b236:	2380      	movs	r3, #128	; 0x80
 800b238:	e079      	b.n	800b32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b240:	2b00      	cmp	r3, #0
 800b242:	d002      	beq.n	800b24a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b244:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b248:	e071      	b.n	800b32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b250:	2b00      	cmp	r3, #0
 800b252:	d002      	beq.n	800b25a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b254:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b258:	e069      	b.n	800b32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b260:	2b00      	cmp	r3, #0
 800b262:	d002      	beq.n	800b26a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b264:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b268:	e061      	b.n	800b32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b270:	2b00      	cmp	r3, #0
 800b272:	d002      	beq.n	800b27a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b274:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b278:	e059      	b.n	800b32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b280:	2b00      	cmp	r3, #0
 800b282:	d002      	beq.n	800b28a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b288:	e051      	b.n	800b32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b290:	2b00      	cmp	r3, #0
 800b292:	d002      	beq.n	800b29a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b294:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b298:	e049      	b.n	800b32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d002      	beq.n	800b2aa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b2a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b2a8:	e041      	b.n	800b32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d002      	beq.n	800b2ba <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b2b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2b8:	e039      	b.n	800b32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d002      	beq.n	800b2ca <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b2c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b2c8:	e031      	b.n	800b32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d002      	beq.n	800b2da <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b2d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b2d8:	e029      	b.n	800b32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d002      	beq.n	800b2ea <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b2e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b2e8:	e021      	b.n	800b32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d002      	beq.n	800b2fa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b2f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b2f8:	e019      	b.n	800b32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b300:	2b00      	cmp	r3, #0
 800b302:	d002      	beq.n	800b30a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b304:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b308:	e011      	b.n	800b32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b310:	2b00      	cmp	r3, #0
 800b312:	d002      	beq.n	800b31a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b314:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b318:	e009      	b.n	800b32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	f003 0308 	and.w	r3, r3, #8
 800b320:	2b00      	cmp	r3, #0
 800b322:	d002      	beq.n	800b32a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b324:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b328:	e001      	b.n	800b32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b32a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3720      	adds	r7, #32
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop
 800b338:	2000000c 	.word	0x2000000c
 800b33c:	10624dd3 	.word	0x10624dd3
 800b340:	fdffe008 	.word	0xfdffe008

0800b344 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b344:	b480      	push	{r7}
 800b346:	b085      	sub	sp, #20
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b34c:	4b1f      	ldr	r3, [pc, #124]	; (800b3cc <SDMMC_GetCmdResp2+0x88>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a1f      	ldr	r2, [pc, #124]	; (800b3d0 <SDMMC_GetCmdResp2+0x8c>)
 800b352:	fba2 2303 	umull	r2, r3, r2, r3
 800b356:	0a5b      	lsrs	r3, r3, #9
 800b358:	f241 3288 	movw	r2, #5000	; 0x1388
 800b35c:	fb02 f303 	mul.w	r3, r2, r3
 800b360:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	1e5a      	subs	r2, r3, #1
 800b366:	60fa      	str	r2, [r7, #12]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d102      	bne.n	800b372 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b36c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b370:	e026      	b.n	800b3c0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b376:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d0ef      	beq.n	800b362 <SDMMC_GetCmdResp2+0x1e>
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d1ea      	bne.n	800b362 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b390:	f003 0304 	and.w	r3, r3, #4
 800b394:	2b00      	cmp	r3, #0
 800b396:	d004      	beq.n	800b3a2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2204      	movs	r2, #4
 800b39c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b39e:	2304      	movs	r3, #4
 800b3a0:	e00e      	b.n	800b3c0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3a6:	f003 0301 	and.w	r3, r3, #1
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d004      	beq.n	800b3b8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	e003      	b.n	800b3c0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	22c5      	movs	r2, #197	; 0xc5
 800b3bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b3be:	2300      	movs	r3, #0
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3714      	adds	r7, #20
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ca:	4770      	bx	lr
 800b3cc:	2000000c 	.word	0x2000000c
 800b3d0:	10624dd3 	.word	0x10624dd3

0800b3d4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b085      	sub	sp, #20
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b3dc:	4b1a      	ldr	r3, [pc, #104]	; (800b448 <SDMMC_GetCmdResp3+0x74>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4a1a      	ldr	r2, [pc, #104]	; (800b44c <SDMMC_GetCmdResp3+0x78>)
 800b3e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b3e6:	0a5b      	lsrs	r3, r3, #9
 800b3e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3ec:	fb02 f303 	mul.w	r3, r2, r3
 800b3f0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	1e5a      	subs	r2, r3, #1
 800b3f6:	60fa      	str	r2, [r7, #12]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d102      	bne.n	800b402 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b3fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b400:	e01b      	b.n	800b43a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b406:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d0ef      	beq.n	800b3f2 <SDMMC_GetCmdResp3+0x1e>
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d1ea      	bne.n	800b3f2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b420:	f003 0304 	and.w	r3, r3, #4
 800b424:	2b00      	cmp	r3, #0
 800b426:	d004      	beq.n	800b432 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2204      	movs	r2, #4
 800b42c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b42e:	2304      	movs	r3, #4
 800b430:	e003      	b.n	800b43a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	22c5      	movs	r2, #197	; 0xc5
 800b436:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b438:	2300      	movs	r3, #0
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3714      	adds	r7, #20
 800b43e:	46bd      	mov	sp, r7
 800b440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b444:	4770      	bx	lr
 800b446:	bf00      	nop
 800b448:	2000000c 	.word	0x2000000c
 800b44c:	10624dd3 	.word	0x10624dd3

0800b450 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b088      	sub	sp, #32
 800b454:	af00      	add	r7, sp, #0
 800b456:	60f8      	str	r0, [r7, #12]
 800b458:	460b      	mov	r3, r1
 800b45a:	607a      	str	r2, [r7, #4]
 800b45c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b45e:	4b35      	ldr	r3, [pc, #212]	; (800b534 <SDMMC_GetCmdResp6+0xe4>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4a35      	ldr	r2, [pc, #212]	; (800b538 <SDMMC_GetCmdResp6+0xe8>)
 800b464:	fba2 2303 	umull	r2, r3, r2, r3
 800b468:	0a5b      	lsrs	r3, r3, #9
 800b46a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b46e:	fb02 f303 	mul.w	r3, r2, r3
 800b472:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b474:	69fb      	ldr	r3, [r7, #28]
 800b476:	1e5a      	subs	r2, r3, #1
 800b478:	61fa      	str	r2, [r7, #28]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d102      	bne.n	800b484 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b47e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b482:	e052      	b.n	800b52a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b488:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b48a:	69bb      	ldr	r3, [r7, #24]
 800b48c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b490:	2b00      	cmp	r3, #0
 800b492:	d0ef      	beq.n	800b474 <SDMMC_GetCmdResp6+0x24>
 800b494:	69bb      	ldr	r3, [r7, #24]
 800b496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d1ea      	bne.n	800b474 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4a2:	f003 0304 	and.w	r3, r3, #4
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d004      	beq.n	800b4b4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	2204      	movs	r2, #4
 800b4ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b4b0:	2304      	movs	r3, #4
 800b4b2:	e03a      	b.n	800b52a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4b8:	f003 0301 	and.w	r3, r3, #1
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d004      	beq.n	800b4ca <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	e02f      	b.n	800b52a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b4ca:	68f8      	ldr	r0, [r7, #12]
 800b4cc:	f7ff fc0d 	bl	800acea <SDIO_GetCommandResponse>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	7afb      	ldrb	r3, [r7, #11]
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d001      	beq.n	800b4de <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b4da:	2301      	movs	r3, #1
 800b4dc:	e025      	b.n	800b52a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	22c5      	movs	r2, #197	; 0xc5
 800b4e2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b4e4:	2100      	movs	r1, #0
 800b4e6:	68f8      	ldr	r0, [r7, #12]
 800b4e8:	f7ff fc0c 	bl	800ad04 <SDIO_GetResponse>
 800b4ec:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d106      	bne.n	800b506 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	0c1b      	lsrs	r3, r3, #16
 800b4fc:	b29a      	uxth	r2, r3
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b502:	2300      	movs	r3, #0
 800b504:	e011      	b.n	800b52a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d002      	beq.n	800b516 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b510:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b514:	e009      	b.n	800b52a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d002      	beq.n	800b526 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b524:	e001      	b.n	800b52a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b526:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3720      	adds	r7, #32
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
 800b532:	bf00      	nop
 800b534:	2000000c 	.word	0x2000000c
 800b538:	10624dd3 	.word	0x10624dd3

0800b53c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b085      	sub	sp, #20
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b544:	4b22      	ldr	r3, [pc, #136]	; (800b5d0 <SDMMC_GetCmdResp7+0x94>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	4a22      	ldr	r2, [pc, #136]	; (800b5d4 <SDMMC_GetCmdResp7+0x98>)
 800b54a:	fba2 2303 	umull	r2, r3, r2, r3
 800b54e:	0a5b      	lsrs	r3, r3, #9
 800b550:	f241 3288 	movw	r2, #5000	; 0x1388
 800b554:	fb02 f303 	mul.w	r3, r2, r3
 800b558:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	1e5a      	subs	r2, r3, #1
 800b55e:	60fa      	str	r2, [r7, #12]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d102      	bne.n	800b56a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b564:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b568:	e02c      	b.n	800b5c4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b56e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b576:	2b00      	cmp	r3, #0
 800b578:	d0ef      	beq.n	800b55a <SDMMC_GetCmdResp7+0x1e>
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b580:	2b00      	cmp	r3, #0
 800b582:	d1ea      	bne.n	800b55a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b588:	f003 0304 	and.w	r3, r3, #4
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d004      	beq.n	800b59a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2204      	movs	r2, #4
 800b594:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b596:	2304      	movs	r3, #4
 800b598:	e014      	b.n	800b5c4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b59e:	f003 0301 	and.w	r3, r3, #1
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d004      	beq.n	800b5b0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2201      	movs	r2, #1
 800b5aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	e009      	b.n	800b5c4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d002      	beq.n	800b5c2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2240      	movs	r2, #64	; 0x40
 800b5c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b5c2:	2300      	movs	r3, #0
  
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3714      	adds	r7, #20
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr
 800b5d0:	2000000c 	.word	0x2000000c
 800b5d4:	10624dd3 	.word	0x10624dd3

0800b5d8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b085      	sub	sp, #20
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b5e0:	4b11      	ldr	r3, [pc, #68]	; (800b628 <SDMMC_GetCmdError+0x50>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4a11      	ldr	r2, [pc, #68]	; (800b62c <SDMMC_GetCmdError+0x54>)
 800b5e6:	fba2 2303 	umull	r2, r3, r2, r3
 800b5ea:	0a5b      	lsrs	r3, r3, #9
 800b5ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5f0:	fb02 f303 	mul.w	r3, r2, r3
 800b5f4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	1e5a      	subs	r2, r3, #1
 800b5fa:	60fa      	str	r2, [r7, #12]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d102      	bne.n	800b606 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b600:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b604:	e009      	b.n	800b61a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b60a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d0f1      	beq.n	800b5f6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	22c5      	movs	r2, #197	; 0xc5
 800b616:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b618:	2300      	movs	r3, #0
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3714      	adds	r7, #20
 800b61e:	46bd      	mov	sp, r7
 800b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b624:	4770      	bx	lr
 800b626:	bf00      	nop
 800b628:	2000000c 	.word	0x2000000c
 800b62c:	10624dd3 	.word	0x10624dd3

0800b630 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b630:	b084      	sub	sp, #16
 800b632:	b580      	push	{r7, lr}
 800b634:	b084      	sub	sp, #16
 800b636:	af00      	add	r7, sp, #0
 800b638:	6078      	str	r0, [r7, #4]
 800b63a:	f107 001c 	add.w	r0, r7, #28
 800b63e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b644:	2b01      	cmp	r3, #1
 800b646:	d122      	bne.n	800b68e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b64c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	68db      	ldr	r3, [r3, #12]
 800b658:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b65c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b660:	687a      	ldr	r2, [r7, #4]
 800b662:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	68db      	ldr	r3, [r3, #12]
 800b668:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b672:	2b01      	cmp	r3, #1
 800b674:	d105      	bne.n	800b682 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	68db      	ldr	r3, [r3, #12]
 800b67a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f001 fc3e 	bl	800cf04 <USB_CoreReset>
 800b688:	4603      	mov	r3, r0
 800b68a:	73fb      	strb	r3, [r7, #15]
 800b68c:	e01a      	b.n	800b6c4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	68db      	ldr	r3, [r3, #12]
 800b692:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f001 fc32 	bl	800cf04 <USB_CoreReset>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b6a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d106      	bne.n	800b6b8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	639a      	str	r2, [r3, #56]	; 0x38
 800b6b6:	e005      	b.n	800b6c4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	d10b      	bne.n	800b6e2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	689b      	ldr	r3, [r3, #8]
 800b6ce:	f043 0206 	orr.w	r2, r3, #6
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	689b      	ldr	r3, [r3, #8]
 800b6da:	f043 0220 	orr.w	r2, r3, #32
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b6e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3710      	adds	r7, #16
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b6ee:	b004      	add	sp, #16
 800b6f0:	4770      	bx	lr
	...

0800b6f4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b087      	sub	sp, #28
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	4613      	mov	r3, r2
 800b700:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b702:	79fb      	ldrb	r3, [r7, #7]
 800b704:	2b02      	cmp	r3, #2
 800b706:	d165      	bne.n	800b7d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	4a41      	ldr	r2, [pc, #260]	; (800b810 <USB_SetTurnaroundTime+0x11c>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d906      	bls.n	800b71e <USB_SetTurnaroundTime+0x2a>
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	4a40      	ldr	r2, [pc, #256]	; (800b814 <USB_SetTurnaroundTime+0x120>)
 800b714:	4293      	cmp	r3, r2
 800b716:	d202      	bcs.n	800b71e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b718:	230f      	movs	r3, #15
 800b71a:	617b      	str	r3, [r7, #20]
 800b71c:	e062      	b.n	800b7e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	4a3c      	ldr	r2, [pc, #240]	; (800b814 <USB_SetTurnaroundTime+0x120>)
 800b722:	4293      	cmp	r3, r2
 800b724:	d306      	bcc.n	800b734 <USB_SetTurnaroundTime+0x40>
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	4a3b      	ldr	r2, [pc, #236]	; (800b818 <USB_SetTurnaroundTime+0x124>)
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d202      	bcs.n	800b734 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b72e:	230e      	movs	r3, #14
 800b730:	617b      	str	r3, [r7, #20]
 800b732:	e057      	b.n	800b7e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	4a38      	ldr	r2, [pc, #224]	; (800b818 <USB_SetTurnaroundTime+0x124>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	d306      	bcc.n	800b74a <USB_SetTurnaroundTime+0x56>
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	4a37      	ldr	r2, [pc, #220]	; (800b81c <USB_SetTurnaroundTime+0x128>)
 800b740:	4293      	cmp	r3, r2
 800b742:	d202      	bcs.n	800b74a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b744:	230d      	movs	r3, #13
 800b746:	617b      	str	r3, [r7, #20]
 800b748:	e04c      	b.n	800b7e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	4a33      	ldr	r2, [pc, #204]	; (800b81c <USB_SetTurnaroundTime+0x128>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d306      	bcc.n	800b760 <USB_SetTurnaroundTime+0x6c>
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	4a32      	ldr	r2, [pc, #200]	; (800b820 <USB_SetTurnaroundTime+0x12c>)
 800b756:	4293      	cmp	r3, r2
 800b758:	d802      	bhi.n	800b760 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b75a:	230c      	movs	r3, #12
 800b75c:	617b      	str	r3, [r7, #20]
 800b75e:	e041      	b.n	800b7e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	4a2f      	ldr	r2, [pc, #188]	; (800b820 <USB_SetTurnaroundTime+0x12c>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d906      	bls.n	800b776 <USB_SetTurnaroundTime+0x82>
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	4a2e      	ldr	r2, [pc, #184]	; (800b824 <USB_SetTurnaroundTime+0x130>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d802      	bhi.n	800b776 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b770:	230b      	movs	r3, #11
 800b772:	617b      	str	r3, [r7, #20]
 800b774:	e036      	b.n	800b7e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	4a2a      	ldr	r2, [pc, #168]	; (800b824 <USB_SetTurnaroundTime+0x130>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d906      	bls.n	800b78c <USB_SetTurnaroundTime+0x98>
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	4a29      	ldr	r2, [pc, #164]	; (800b828 <USB_SetTurnaroundTime+0x134>)
 800b782:	4293      	cmp	r3, r2
 800b784:	d802      	bhi.n	800b78c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b786:	230a      	movs	r3, #10
 800b788:	617b      	str	r3, [r7, #20]
 800b78a:	e02b      	b.n	800b7e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	4a26      	ldr	r2, [pc, #152]	; (800b828 <USB_SetTurnaroundTime+0x134>)
 800b790:	4293      	cmp	r3, r2
 800b792:	d906      	bls.n	800b7a2 <USB_SetTurnaroundTime+0xae>
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	4a25      	ldr	r2, [pc, #148]	; (800b82c <USB_SetTurnaroundTime+0x138>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d202      	bcs.n	800b7a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b79c:	2309      	movs	r3, #9
 800b79e:	617b      	str	r3, [r7, #20]
 800b7a0:	e020      	b.n	800b7e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	4a21      	ldr	r2, [pc, #132]	; (800b82c <USB_SetTurnaroundTime+0x138>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d306      	bcc.n	800b7b8 <USB_SetTurnaroundTime+0xc4>
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	4a20      	ldr	r2, [pc, #128]	; (800b830 <USB_SetTurnaroundTime+0x13c>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d802      	bhi.n	800b7b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b7b2:	2308      	movs	r3, #8
 800b7b4:	617b      	str	r3, [r7, #20]
 800b7b6:	e015      	b.n	800b7e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	4a1d      	ldr	r2, [pc, #116]	; (800b830 <USB_SetTurnaroundTime+0x13c>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d906      	bls.n	800b7ce <USB_SetTurnaroundTime+0xda>
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	4a1c      	ldr	r2, [pc, #112]	; (800b834 <USB_SetTurnaroundTime+0x140>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d202      	bcs.n	800b7ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b7c8:	2307      	movs	r3, #7
 800b7ca:	617b      	str	r3, [r7, #20]
 800b7cc:	e00a      	b.n	800b7e4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b7ce:	2306      	movs	r3, #6
 800b7d0:	617b      	str	r3, [r7, #20]
 800b7d2:	e007      	b.n	800b7e4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b7d4:	79fb      	ldrb	r3, [r7, #7]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d102      	bne.n	800b7e0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b7da:	2309      	movs	r3, #9
 800b7dc:	617b      	str	r3, [r7, #20]
 800b7de:	e001      	b.n	800b7e4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b7e0:	2309      	movs	r3, #9
 800b7e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	68da      	ldr	r2, [r3, #12]
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	029b      	lsls	r3, r3, #10
 800b7f8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b7fc:	431a      	orrs	r2, r3
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b802:	2300      	movs	r3, #0
}
 800b804:	4618      	mov	r0, r3
 800b806:	371c      	adds	r7, #28
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr
 800b810:	00d8acbf 	.word	0x00d8acbf
 800b814:	00e4e1c0 	.word	0x00e4e1c0
 800b818:	00f42400 	.word	0x00f42400
 800b81c:	01067380 	.word	0x01067380
 800b820:	011a499f 	.word	0x011a499f
 800b824:	01312cff 	.word	0x01312cff
 800b828:	014ca43f 	.word	0x014ca43f
 800b82c:	016e3600 	.word	0x016e3600
 800b830:	01a6ab1f 	.word	0x01a6ab1f
 800b834:	01e84800 	.word	0x01e84800

0800b838 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b838:	b480      	push	{r7}
 800b83a:	b083      	sub	sp, #12
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	689b      	ldr	r3, [r3, #8]
 800b844:	f043 0201 	orr.w	r2, r3, #1
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b84c:	2300      	movs	r3, #0
}
 800b84e:	4618      	mov	r0, r3
 800b850:	370c      	adds	r7, #12
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr

0800b85a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b85a:	b480      	push	{r7}
 800b85c:	b083      	sub	sp, #12
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	689b      	ldr	r3, [r3, #8]
 800b866:	f023 0201 	bic.w	r2, r3, #1
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b86e:	2300      	movs	r3, #0
}
 800b870:	4618      	mov	r0, r3
 800b872:	370c      	adds	r7, #12
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr

0800b87c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	460b      	mov	r3, r1
 800b886:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b888:	2300      	movs	r3, #0
 800b88a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	68db      	ldr	r3, [r3, #12]
 800b890:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b898:	78fb      	ldrb	r3, [r7, #3]
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	d115      	bne.n	800b8ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	68db      	ldr	r3, [r3, #12]
 800b8a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b8aa:	2001      	movs	r0, #1
 800b8ac:	f7f7 f9f2 	bl	8002c94 <HAL_Delay>
      ms++;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f001 fa94 	bl	800cde4 <USB_GetMode>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b01      	cmp	r3, #1
 800b8c0:	d01e      	beq.n	800b900 <USB_SetCurrentMode+0x84>
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2b31      	cmp	r3, #49	; 0x31
 800b8c6:	d9f0      	bls.n	800b8aa <USB_SetCurrentMode+0x2e>
 800b8c8:	e01a      	b.n	800b900 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b8ca:	78fb      	ldrb	r3, [r7, #3]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d115      	bne.n	800b8fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	68db      	ldr	r3, [r3, #12]
 800b8d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b8dc:	2001      	movs	r0, #1
 800b8de:	f7f7 f9d9 	bl	8002c94 <HAL_Delay>
      ms++;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f001 fa7b 	bl	800cde4 <USB_GetMode>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d005      	beq.n	800b900 <USB_SetCurrentMode+0x84>
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2b31      	cmp	r3, #49	; 0x31
 800b8f8:	d9f0      	bls.n	800b8dc <USB_SetCurrentMode+0x60>
 800b8fa:	e001      	b.n	800b900 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	e005      	b.n	800b90c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	2b32      	cmp	r3, #50	; 0x32
 800b904:	d101      	bne.n	800b90a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b906:	2301      	movs	r3, #1
 800b908:	e000      	b.n	800b90c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b90a:	2300      	movs	r3, #0
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3710      	adds	r7, #16
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}

0800b914 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b914:	b084      	sub	sp, #16
 800b916:	b580      	push	{r7, lr}
 800b918:	b086      	sub	sp, #24
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
 800b91e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b922:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b926:	2300      	movs	r3, #0
 800b928:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b92e:	2300      	movs	r3, #0
 800b930:	613b      	str	r3, [r7, #16]
 800b932:	e009      	b.n	800b948 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	3340      	adds	r3, #64	; 0x40
 800b93a:	009b      	lsls	r3, r3, #2
 800b93c:	4413      	add	r3, r2
 800b93e:	2200      	movs	r2, #0
 800b940:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	3301      	adds	r3, #1
 800b946:	613b      	str	r3, [r7, #16]
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	2b0e      	cmp	r3, #14
 800b94c:	d9f2      	bls.n	800b934 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b94e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b950:	2b00      	cmp	r3, #0
 800b952:	d11c      	bne.n	800b98e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	68fa      	ldr	r2, [r7, #12]
 800b95e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b962:	f043 0302 	orr.w	r3, r3, #2
 800b966:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b96c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b978:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b984:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	639a      	str	r2, [r3, #56]	; 0x38
 800b98c:	e00b      	b.n	800b9a6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b992:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b99e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	680b      	ldr	r3, [r1, #0]
 800b9c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c8:	2b01      	cmp	r3, #1
 800b9ca:	d10c      	bne.n	800b9e6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d104      	bne.n	800b9dc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b9d2:	2100      	movs	r1, #0
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f000 f965 	bl	800bca4 <USB_SetDevSpeed>
 800b9da:	e008      	b.n	800b9ee <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b9dc:	2101      	movs	r1, #1
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f000 f960 	bl	800bca4 <USB_SetDevSpeed>
 800b9e4:	e003      	b.n	800b9ee <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b9e6:	2103      	movs	r1, #3
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f000 f95b 	bl	800bca4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b9ee:	2110      	movs	r1, #16
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f000 f8f3 	bl	800bbdc <USB_FlushTxFifo>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d001      	beq.n	800ba00 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f000 f91f 	bl	800bc44 <USB_FlushRxFifo>
 800ba06:	4603      	mov	r3, r0
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d001      	beq.n	800ba10 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba16:	461a      	mov	r2, r3
 800ba18:	2300      	movs	r3, #0
 800ba1a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba22:	461a      	mov	r2, r3
 800ba24:	2300      	movs	r3, #0
 800ba26:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba2e:	461a      	mov	r2, r3
 800ba30:	2300      	movs	r3, #0
 800ba32:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba34:	2300      	movs	r3, #0
 800ba36:	613b      	str	r3, [r7, #16]
 800ba38:	e043      	b.n	800bac2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	015a      	lsls	r2, r3, #5
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	4413      	add	r3, r2
 800ba42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba50:	d118      	bne.n	800ba84 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800ba52:	693b      	ldr	r3, [r7, #16]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d10a      	bne.n	800ba6e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	015a      	lsls	r2, r3, #5
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	4413      	add	r3, r2
 800ba60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba64:	461a      	mov	r2, r3
 800ba66:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ba6a:	6013      	str	r3, [r2, #0]
 800ba6c:	e013      	b.n	800ba96 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	015a      	lsls	r2, r3, #5
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	4413      	add	r3, r2
 800ba76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ba80:	6013      	str	r3, [r2, #0]
 800ba82:	e008      	b.n	800ba96 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	015a      	lsls	r2, r3, #5
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	4413      	add	r3, r2
 800ba8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba90:	461a      	mov	r2, r3
 800ba92:	2300      	movs	r3, #0
 800ba94:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	015a      	lsls	r2, r3, #5
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	4413      	add	r3, r2
 800ba9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baa2:	461a      	mov	r2, r3
 800baa4:	2300      	movs	r3, #0
 800baa6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	015a      	lsls	r2, r3, #5
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	4413      	add	r3, r2
 800bab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bab4:	461a      	mov	r2, r3
 800bab6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800baba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	3301      	adds	r3, #1
 800bac0:	613b      	str	r3, [r7, #16]
 800bac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac4:	693a      	ldr	r2, [r7, #16]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d3b7      	bcc.n	800ba3a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800baca:	2300      	movs	r3, #0
 800bacc:	613b      	str	r3, [r7, #16]
 800bace:	e043      	b.n	800bb58 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	015a      	lsls	r2, r3, #5
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	4413      	add	r3, r2
 800bad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bae2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bae6:	d118      	bne.n	800bb1a <USB_DevInit+0x206>
    {
      if (i == 0U)
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d10a      	bne.n	800bb04 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	015a      	lsls	r2, r3, #5
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	4413      	add	r3, r2
 800baf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bafa:	461a      	mov	r2, r3
 800bafc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bb00:	6013      	str	r3, [r2, #0]
 800bb02:	e013      	b.n	800bb2c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	015a      	lsls	r2, r3, #5
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	4413      	add	r3, r2
 800bb0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb10:	461a      	mov	r2, r3
 800bb12:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bb16:	6013      	str	r3, [r2, #0]
 800bb18:	e008      	b.n	800bb2c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	015a      	lsls	r2, r3, #5
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	4413      	add	r3, r2
 800bb22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb26:	461a      	mov	r2, r3
 800bb28:	2300      	movs	r3, #0
 800bb2a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	015a      	lsls	r2, r3, #5
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	4413      	add	r3, r2
 800bb34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb38:	461a      	mov	r2, r3
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	015a      	lsls	r2, r3, #5
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	4413      	add	r3, r2
 800bb46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb4a:	461a      	mov	r2, r3
 800bb4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bb50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	3301      	adds	r3, #1
 800bb56:	613b      	str	r3, [r7, #16]
 800bb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5a:	693a      	ldr	r2, [r7, #16]
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d3b7      	bcc.n	800bad0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb66:	691b      	ldr	r3, [r3, #16]
 800bb68:	68fa      	ldr	r2, [r7, #12]
 800bb6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb72:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2200      	movs	r2, #0
 800bb78:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bb80:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d105      	bne.n	800bb94 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	699b      	ldr	r3, [r3, #24]
 800bb8c:	f043 0210 	orr.w	r2, r3, #16
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	699a      	ldr	r2, [r3, #24]
 800bb98:	4b0f      	ldr	r3, [pc, #60]	; (800bbd8 <USB_DevInit+0x2c4>)
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d005      	beq.n	800bbb2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	699b      	ldr	r3, [r3, #24]
 800bbaa:	f043 0208 	orr.w	r2, r3, #8
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bbb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbb4:	2b01      	cmp	r3, #1
 800bbb6:	d107      	bne.n	800bbc8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	699b      	ldr	r3, [r3, #24]
 800bbbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bbc0:	f043 0304 	orr.w	r3, r3, #4
 800bbc4:	687a      	ldr	r2, [r7, #4]
 800bbc6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bbc8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3718      	adds	r7, #24
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bbd4:	b004      	add	sp, #16
 800bbd6:	4770      	bx	lr
 800bbd8:	803c3800 	.word	0x803c3800

0800bbdc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b085      	sub	sp, #20
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	3301      	adds	r3, #1
 800bbee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	4a13      	ldr	r2, [pc, #76]	; (800bc40 <USB_FlushTxFifo+0x64>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d901      	bls.n	800bbfc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bbf8:	2303      	movs	r3, #3
 800bbfa:	e01b      	b.n	800bc34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	691b      	ldr	r3, [r3, #16]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	daf2      	bge.n	800bbea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bc04:	2300      	movs	r3, #0
 800bc06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	019b      	lsls	r3, r3, #6
 800bc0c:	f043 0220 	orr.w	r2, r3, #32
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	3301      	adds	r3, #1
 800bc18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	4a08      	ldr	r2, [pc, #32]	; (800bc40 <USB_FlushTxFifo+0x64>)
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	d901      	bls.n	800bc26 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bc22:	2303      	movs	r3, #3
 800bc24:	e006      	b.n	800bc34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	691b      	ldr	r3, [r3, #16]
 800bc2a:	f003 0320 	and.w	r3, r3, #32
 800bc2e:	2b20      	cmp	r3, #32
 800bc30:	d0f0      	beq.n	800bc14 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bc32:	2300      	movs	r3, #0
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3714      	adds	r7, #20
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr
 800bc40:	00030d40 	.word	0x00030d40

0800bc44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b085      	sub	sp, #20
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	3301      	adds	r3, #1
 800bc54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	4a11      	ldr	r2, [pc, #68]	; (800bca0 <USB_FlushRxFifo+0x5c>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d901      	bls.n	800bc62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bc5e:	2303      	movs	r3, #3
 800bc60:	e018      	b.n	800bc94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	691b      	ldr	r3, [r3, #16]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	daf2      	bge.n	800bc50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2210      	movs	r2, #16
 800bc72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	3301      	adds	r3, #1
 800bc78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	4a08      	ldr	r2, [pc, #32]	; (800bca0 <USB_FlushRxFifo+0x5c>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d901      	bls.n	800bc86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bc82:	2303      	movs	r3, #3
 800bc84:	e006      	b.n	800bc94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	691b      	ldr	r3, [r3, #16]
 800bc8a:	f003 0310 	and.w	r3, r3, #16
 800bc8e:	2b10      	cmp	r3, #16
 800bc90:	d0f0      	beq.n	800bc74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bc92:	2300      	movs	r3, #0
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3714      	adds	r7, #20
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr
 800bca0:	00030d40 	.word	0x00030d40

0800bca4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b085      	sub	sp, #20
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	460b      	mov	r3, r1
 800bcae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcba:	681a      	ldr	r2, [r3, #0]
 800bcbc:	78fb      	ldrb	r3, [r7, #3]
 800bcbe:	68f9      	ldr	r1, [r7, #12]
 800bcc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bcc4:	4313      	orrs	r3, r2
 800bcc6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bcc8:	2300      	movs	r3, #0
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3714      	adds	r7, #20
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd4:	4770      	bx	lr

0800bcd6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bcd6:	b480      	push	{r7}
 800bcd8:	b087      	sub	sp, #28
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bce8:	689b      	ldr	r3, [r3, #8]
 800bcea:	f003 0306 	and.w	r3, r3, #6
 800bcee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d102      	bne.n	800bcfc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	75fb      	strb	r3, [r7, #23]
 800bcfa:	e00a      	b.n	800bd12 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	2b02      	cmp	r3, #2
 800bd00:	d002      	beq.n	800bd08 <USB_GetDevSpeed+0x32>
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	2b06      	cmp	r3, #6
 800bd06:	d102      	bne.n	800bd0e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bd08:	2302      	movs	r3, #2
 800bd0a:	75fb      	strb	r3, [r7, #23]
 800bd0c:	e001      	b.n	800bd12 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bd0e:	230f      	movs	r3, #15
 800bd10:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bd12:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	371c      	adds	r7, #28
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr

0800bd20 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bd20:	b480      	push	{r7}
 800bd22:	b085      	sub	sp, #20
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	785b      	ldrb	r3, [r3, #1]
 800bd38:	2b01      	cmp	r3, #1
 800bd3a:	d13a      	bne.n	800bdb2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd42:	69da      	ldr	r2, [r3, #28]
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	781b      	ldrb	r3, [r3, #0]
 800bd48:	f003 030f 	and.w	r3, r3, #15
 800bd4c:	2101      	movs	r1, #1
 800bd4e:	fa01 f303 	lsl.w	r3, r1, r3
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	68f9      	ldr	r1, [r7, #12]
 800bd56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	015a      	lsls	r2, r3, #5
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	4413      	add	r3, r2
 800bd66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d155      	bne.n	800be20 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	015a      	lsls	r2, r3, #5
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	4413      	add	r3, r2
 800bd7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd80:	681a      	ldr	r2, [r3, #0]
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	68db      	ldr	r3, [r3, #12]
 800bd86:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	791b      	ldrb	r3, [r3, #4]
 800bd8e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd90:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	059b      	lsls	r3, r3, #22
 800bd96:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd98:	4313      	orrs	r3, r2
 800bd9a:	68ba      	ldr	r2, [r7, #8]
 800bd9c:	0151      	lsls	r1, r2, #5
 800bd9e:	68fa      	ldr	r2, [r7, #12]
 800bda0:	440a      	add	r2, r1
 800bda2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bda6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bdaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bdae:	6013      	str	r3, [r2, #0]
 800bdb0:	e036      	b.n	800be20 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdb8:	69da      	ldr	r2, [r3, #28]
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	f003 030f 	and.w	r3, r3, #15
 800bdc2:	2101      	movs	r1, #1
 800bdc4:	fa01 f303 	lsl.w	r3, r1, r3
 800bdc8:	041b      	lsls	r3, r3, #16
 800bdca:	68f9      	ldr	r1, [r7, #12]
 800bdcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bdd0:	4313      	orrs	r3, r2
 800bdd2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	015a      	lsls	r2, r3, #5
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	4413      	add	r3, r2
 800bddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d11a      	bne.n	800be20 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	015a      	lsls	r2, r3, #5
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	4413      	add	r3, r2
 800bdf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdf6:	681a      	ldr	r2, [r3, #0]
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	68db      	ldr	r3, [r3, #12]
 800bdfc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	791b      	ldrb	r3, [r3, #4]
 800be04:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800be06:	430b      	orrs	r3, r1
 800be08:	4313      	orrs	r3, r2
 800be0a:	68ba      	ldr	r2, [r7, #8]
 800be0c:	0151      	lsls	r1, r2, #5
 800be0e:	68fa      	ldr	r2, [r7, #12]
 800be10:	440a      	add	r2, r1
 800be12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be1e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800be20:	2300      	movs	r3, #0
}
 800be22:	4618      	mov	r0, r3
 800be24:	3714      	adds	r7, #20
 800be26:	46bd      	mov	sp, r7
 800be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2c:	4770      	bx	lr
	...

0800be30 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800be30:	b480      	push	{r7}
 800be32:	b085      	sub	sp, #20
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	785b      	ldrb	r3, [r3, #1]
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d161      	bne.n	800bf10 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	015a      	lsls	r2, r3, #5
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	4413      	add	r3, r2
 800be54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be62:	d11f      	bne.n	800bea4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	015a      	lsls	r2, r3, #5
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	4413      	add	r3, r2
 800be6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	68ba      	ldr	r2, [r7, #8]
 800be74:	0151      	lsls	r1, r2, #5
 800be76:	68fa      	ldr	r2, [r7, #12]
 800be78:	440a      	add	r2, r1
 800be7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800be82:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	015a      	lsls	r2, r3, #5
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	4413      	add	r3, r2
 800be8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	68ba      	ldr	r2, [r7, #8]
 800be94:	0151      	lsls	r1, r2, #5
 800be96:	68fa      	ldr	r2, [r7, #12]
 800be98:	440a      	add	r2, r1
 800be9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bea2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800beaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	f003 030f 	and.w	r3, r3, #15
 800beb4:	2101      	movs	r1, #1
 800beb6:	fa01 f303 	lsl.w	r3, r1, r3
 800beba:	b29b      	uxth	r3, r3
 800bebc:	43db      	mvns	r3, r3
 800bebe:	68f9      	ldr	r1, [r7, #12]
 800bec0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bec4:	4013      	ands	r3, r2
 800bec6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bece:	69da      	ldr	r2, [r3, #28]
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	f003 030f 	and.w	r3, r3, #15
 800bed8:	2101      	movs	r1, #1
 800beda:	fa01 f303 	lsl.w	r3, r1, r3
 800bede:	b29b      	uxth	r3, r3
 800bee0:	43db      	mvns	r3, r3
 800bee2:	68f9      	ldr	r1, [r7, #12]
 800bee4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bee8:	4013      	ands	r3, r2
 800beea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	015a      	lsls	r2, r3, #5
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	4413      	add	r3, r2
 800bef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bef8:	681a      	ldr	r2, [r3, #0]
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	0159      	lsls	r1, r3, #5
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	440b      	add	r3, r1
 800bf02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf06:	4619      	mov	r1, r3
 800bf08:	4b35      	ldr	r3, [pc, #212]	; (800bfe0 <USB_DeactivateEndpoint+0x1b0>)
 800bf0a:	4013      	ands	r3, r2
 800bf0c:	600b      	str	r3, [r1, #0]
 800bf0e:	e060      	b.n	800bfd2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	015a      	lsls	r2, r3, #5
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	4413      	add	r3, r2
 800bf18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf26:	d11f      	bne.n	800bf68 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	015a      	lsls	r2, r3, #5
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	4413      	add	r3, r2
 800bf30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	68ba      	ldr	r2, [r7, #8]
 800bf38:	0151      	lsls	r1, r2, #5
 800bf3a:	68fa      	ldr	r2, [r7, #12]
 800bf3c:	440a      	add	r2, r1
 800bf3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bf46:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	015a      	lsls	r2, r3, #5
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	4413      	add	r3, r2
 800bf50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	68ba      	ldr	r2, [r7, #8]
 800bf58:	0151      	lsls	r1, r2, #5
 800bf5a:	68fa      	ldr	r2, [r7, #12]
 800bf5c:	440a      	add	r2, r1
 800bf5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bf66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	781b      	ldrb	r3, [r3, #0]
 800bf74:	f003 030f 	and.w	r3, r3, #15
 800bf78:	2101      	movs	r1, #1
 800bf7a:	fa01 f303 	lsl.w	r3, r1, r3
 800bf7e:	041b      	lsls	r3, r3, #16
 800bf80:	43db      	mvns	r3, r3
 800bf82:	68f9      	ldr	r1, [r7, #12]
 800bf84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf88:	4013      	ands	r3, r2
 800bf8a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf92:	69da      	ldr	r2, [r3, #28]
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	f003 030f 	and.w	r3, r3, #15
 800bf9c:	2101      	movs	r1, #1
 800bf9e:	fa01 f303 	lsl.w	r3, r1, r3
 800bfa2:	041b      	lsls	r3, r3, #16
 800bfa4:	43db      	mvns	r3, r3
 800bfa6:	68f9      	ldr	r1, [r7, #12]
 800bfa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bfac:	4013      	ands	r3, r2
 800bfae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	015a      	lsls	r2, r3, #5
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	4413      	add	r3, r2
 800bfb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfbc:	681a      	ldr	r2, [r3, #0]
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	0159      	lsls	r1, r3, #5
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	440b      	add	r3, r1
 800bfc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfca:	4619      	mov	r1, r3
 800bfcc:	4b05      	ldr	r3, [pc, #20]	; (800bfe4 <USB_DeactivateEndpoint+0x1b4>)
 800bfce:	4013      	ands	r3, r2
 800bfd0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bfd2:	2300      	movs	r3, #0
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3714      	adds	r7, #20
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr
 800bfe0:	ec337800 	.word	0xec337800
 800bfe4:	eff37800 	.word	0xeff37800

0800bfe8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b08a      	sub	sp, #40	; 0x28
 800bfec:	af02      	add	r7, sp, #8
 800bfee:	60f8      	str	r0, [r7, #12]
 800bff0:	60b9      	str	r1, [r7, #8]
 800bff2:	4613      	mov	r3, r2
 800bff4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	785b      	ldrb	r3, [r3, #1]
 800c004:	2b01      	cmp	r3, #1
 800c006:	f040 815c 	bne.w	800c2c2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	699b      	ldr	r3, [r3, #24]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d132      	bne.n	800c078 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c012:	69bb      	ldr	r3, [r7, #24]
 800c014:	015a      	lsls	r2, r3, #5
 800c016:	69fb      	ldr	r3, [r7, #28]
 800c018:	4413      	add	r3, r2
 800c01a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c01e:	691b      	ldr	r3, [r3, #16]
 800c020:	69ba      	ldr	r2, [r7, #24]
 800c022:	0151      	lsls	r1, r2, #5
 800c024:	69fa      	ldr	r2, [r7, #28]
 800c026:	440a      	add	r2, r1
 800c028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c02c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c030:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c034:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c036:	69bb      	ldr	r3, [r7, #24]
 800c038:	015a      	lsls	r2, r3, #5
 800c03a:	69fb      	ldr	r3, [r7, #28]
 800c03c:	4413      	add	r3, r2
 800c03e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c042:	691b      	ldr	r3, [r3, #16]
 800c044:	69ba      	ldr	r2, [r7, #24]
 800c046:	0151      	lsls	r1, r2, #5
 800c048:	69fa      	ldr	r2, [r7, #28]
 800c04a:	440a      	add	r2, r1
 800c04c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c050:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c054:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c056:	69bb      	ldr	r3, [r7, #24]
 800c058:	015a      	lsls	r2, r3, #5
 800c05a:	69fb      	ldr	r3, [r7, #28]
 800c05c:	4413      	add	r3, r2
 800c05e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c062:	691b      	ldr	r3, [r3, #16]
 800c064:	69ba      	ldr	r2, [r7, #24]
 800c066:	0151      	lsls	r1, r2, #5
 800c068:	69fa      	ldr	r2, [r7, #28]
 800c06a:	440a      	add	r2, r1
 800c06c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c070:	0cdb      	lsrs	r3, r3, #19
 800c072:	04db      	lsls	r3, r3, #19
 800c074:	6113      	str	r3, [r2, #16]
 800c076:	e074      	b.n	800c162 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c078:	69bb      	ldr	r3, [r7, #24]
 800c07a:	015a      	lsls	r2, r3, #5
 800c07c:	69fb      	ldr	r3, [r7, #28]
 800c07e:	4413      	add	r3, r2
 800c080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c084:	691b      	ldr	r3, [r3, #16]
 800c086:	69ba      	ldr	r2, [r7, #24]
 800c088:	0151      	lsls	r1, r2, #5
 800c08a:	69fa      	ldr	r2, [r7, #28]
 800c08c:	440a      	add	r2, r1
 800c08e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c092:	0cdb      	lsrs	r3, r3, #19
 800c094:	04db      	lsls	r3, r3, #19
 800c096:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c098:	69bb      	ldr	r3, [r7, #24]
 800c09a:	015a      	lsls	r2, r3, #5
 800c09c:	69fb      	ldr	r3, [r7, #28]
 800c09e:	4413      	add	r3, r2
 800c0a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0a4:	691b      	ldr	r3, [r3, #16]
 800c0a6:	69ba      	ldr	r2, [r7, #24]
 800c0a8:	0151      	lsls	r1, r2, #5
 800c0aa:	69fa      	ldr	r2, [r7, #28]
 800c0ac:	440a      	add	r2, r1
 800c0ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c0b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c0ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c0bc:	69bb      	ldr	r3, [r7, #24]
 800c0be:	015a      	lsls	r2, r3, #5
 800c0c0:	69fb      	ldr	r3, [r7, #28]
 800c0c2:	4413      	add	r3, r2
 800c0c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0c8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	6999      	ldr	r1, [r3, #24]
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	68db      	ldr	r3, [r3, #12]
 800c0d2:	440b      	add	r3, r1
 800c0d4:	1e59      	subs	r1, r3, #1
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	68db      	ldr	r3, [r3, #12]
 800c0da:	fbb1 f3f3 	udiv	r3, r1, r3
 800c0de:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c0e0:	4b9d      	ldr	r3, [pc, #628]	; (800c358 <USB_EPStartXfer+0x370>)
 800c0e2:	400b      	ands	r3, r1
 800c0e4:	69b9      	ldr	r1, [r7, #24]
 800c0e6:	0148      	lsls	r0, r1, #5
 800c0e8:	69f9      	ldr	r1, [r7, #28]
 800c0ea:	4401      	add	r1, r0
 800c0ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c0f0:	4313      	orrs	r3, r2
 800c0f2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c0f4:	69bb      	ldr	r3, [r7, #24]
 800c0f6:	015a      	lsls	r2, r3, #5
 800c0f8:	69fb      	ldr	r3, [r7, #28]
 800c0fa:	4413      	add	r3, r2
 800c0fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c100:	691a      	ldr	r2, [r3, #16]
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	699b      	ldr	r3, [r3, #24]
 800c106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c10a:	69b9      	ldr	r1, [r7, #24]
 800c10c:	0148      	lsls	r0, r1, #5
 800c10e:	69f9      	ldr	r1, [r7, #28]
 800c110:	4401      	add	r1, r0
 800c112:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c116:	4313      	orrs	r3, r2
 800c118:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	791b      	ldrb	r3, [r3, #4]
 800c11e:	2b01      	cmp	r3, #1
 800c120:	d11f      	bne.n	800c162 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c122:	69bb      	ldr	r3, [r7, #24]
 800c124:	015a      	lsls	r2, r3, #5
 800c126:	69fb      	ldr	r3, [r7, #28]
 800c128:	4413      	add	r3, r2
 800c12a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c12e:	691b      	ldr	r3, [r3, #16]
 800c130:	69ba      	ldr	r2, [r7, #24]
 800c132:	0151      	lsls	r1, r2, #5
 800c134:	69fa      	ldr	r2, [r7, #28]
 800c136:	440a      	add	r2, r1
 800c138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c13c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c140:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c142:	69bb      	ldr	r3, [r7, #24]
 800c144:	015a      	lsls	r2, r3, #5
 800c146:	69fb      	ldr	r3, [r7, #28]
 800c148:	4413      	add	r3, r2
 800c14a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c14e:	691b      	ldr	r3, [r3, #16]
 800c150:	69ba      	ldr	r2, [r7, #24]
 800c152:	0151      	lsls	r1, r2, #5
 800c154:	69fa      	ldr	r2, [r7, #28]
 800c156:	440a      	add	r2, r1
 800c158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c15c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c160:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c162:	79fb      	ldrb	r3, [r7, #7]
 800c164:	2b01      	cmp	r3, #1
 800c166:	d14b      	bne.n	800c200 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	695b      	ldr	r3, [r3, #20]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d009      	beq.n	800c184 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c170:	69bb      	ldr	r3, [r7, #24]
 800c172:	015a      	lsls	r2, r3, #5
 800c174:	69fb      	ldr	r3, [r7, #28]
 800c176:	4413      	add	r3, r2
 800c178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c17c:	461a      	mov	r2, r3
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	695b      	ldr	r3, [r3, #20]
 800c182:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	791b      	ldrb	r3, [r3, #4]
 800c188:	2b01      	cmp	r3, #1
 800c18a:	d128      	bne.n	800c1de <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c18c:	69fb      	ldr	r3, [r7, #28]
 800c18e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c192:	689b      	ldr	r3, [r3, #8]
 800c194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d110      	bne.n	800c1be <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c19c:	69bb      	ldr	r3, [r7, #24]
 800c19e:	015a      	lsls	r2, r3, #5
 800c1a0:	69fb      	ldr	r3, [r7, #28]
 800c1a2:	4413      	add	r3, r2
 800c1a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	69ba      	ldr	r2, [r7, #24]
 800c1ac:	0151      	lsls	r1, r2, #5
 800c1ae:	69fa      	ldr	r2, [r7, #28]
 800c1b0:	440a      	add	r2, r1
 800c1b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c1ba:	6013      	str	r3, [r2, #0]
 800c1bc:	e00f      	b.n	800c1de <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c1be:	69bb      	ldr	r3, [r7, #24]
 800c1c0:	015a      	lsls	r2, r3, #5
 800c1c2:	69fb      	ldr	r3, [r7, #28]
 800c1c4:	4413      	add	r3, r2
 800c1c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	69ba      	ldr	r2, [r7, #24]
 800c1ce:	0151      	lsls	r1, r2, #5
 800c1d0:	69fa      	ldr	r2, [r7, #28]
 800c1d2:	440a      	add	r2, r1
 800c1d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c1dc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c1de:	69bb      	ldr	r3, [r7, #24]
 800c1e0:	015a      	lsls	r2, r3, #5
 800c1e2:	69fb      	ldr	r3, [r7, #28]
 800c1e4:	4413      	add	r3, r2
 800c1e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	69ba      	ldr	r2, [r7, #24]
 800c1ee:	0151      	lsls	r1, r2, #5
 800c1f0:	69fa      	ldr	r2, [r7, #28]
 800c1f2:	440a      	add	r2, r1
 800c1f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c1fc:	6013      	str	r3, [r2, #0]
 800c1fe:	e133      	b.n	800c468 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c200:	69bb      	ldr	r3, [r7, #24]
 800c202:	015a      	lsls	r2, r3, #5
 800c204:	69fb      	ldr	r3, [r7, #28]
 800c206:	4413      	add	r3, r2
 800c208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	69ba      	ldr	r2, [r7, #24]
 800c210:	0151      	lsls	r1, r2, #5
 800c212:	69fa      	ldr	r2, [r7, #28]
 800c214:	440a      	add	r2, r1
 800c216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c21a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c21e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	791b      	ldrb	r3, [r3, #4]
 800c224:	2b01      	cmp	r3, #1
 800c226:	d015      	beq.n	800c254 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	699b      	ldr	r3, [r3, #24]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	f000 811b 	beq.w	800c468 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c232:	69fb      	ldr	r3, [r7, #28]
 800c234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	781b      	ldrb	r3, [r3, #0]
 800c23e:	f003 030f 	and.w	r3, r3, #15
 800c242:	2101      	movs	r1, #1
 800c244:	fa01 f303 	lsl.w	r3, r1, r3
 800c248:	69f9      	ldr	r1, [r7, #28]
 800c24a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c24e:	4313      	orrs	r3, r2
 800c250:	634b      	str	r3, [r1, #52]	; 0x34
 800c252:	e109      	b.n	800c468 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c254:	69fb      	ldr	r3, [r7, #28]
 800c256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c25a:	689b      	ldr	r3, [r3, #8]
 800c25c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c260:	2b00      	cmp	r3, #0
 800c262:	d110      	bne.n	800c286 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c264:	69bb      	ldr	r3, [r7, #24]
 800c266:	015a      	lsls	r2, r3, #5
 800c268:	69fb      	ldr	r3, [r7, #28]
 800c26a:	4413      	add	r3, r2
 800c26c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	69ba      	ldr	r2, [r7, #24]
 800c274:	0151      	lsls	r1, r2, #5
 800c276:	69fa      	ldr	r2, [r7, #28]
 800c278:	440a      	add	r2, r1
 800c27a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c27e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c282:	6013      	str	r3, [r2, #0]
 800c284:	e00f      	b.n	800c2a6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c286:	69bb      	ldr	r3, [r7, #24]
 800c288:	015a      	lsls	r2, r3, #5
 800c28a:	69fb      	ldr	r3, [r7, #28]
 800c28c:	4413      	add	r3, r2
 800c28e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	69ba      	ldr	r2, [r7, #24]
 800c296:	0151      	lsls	r1, r2, #5
 800c298:	69fa      	ldr	r2, [r7, #28]
 800c29a:	440a      	add	r2, r1
 800c29c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2a4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	6919      	ldr	r1, [r3, #16]
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	781a      	ldrb	r2, [r3, #0]
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	699b      	ldr	r3, [r3, #24]
 800c2b2:	b298      	uxth	r0, r3
 800c2b4:	79fb      	ldrb	r3, [r7, #7]
 800c2b6:	9300      	str	r3, [sp, #0]
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	68f8      	ldr	r0, [r7, #12]
 800c2bc:	f000 fade 	bl	800c87c <USB_WritePacket>
 800c2c0:	e0d2      	b.n	800c468 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c2c2:	69bb      	ldr	r3, [r7, #24]
 800c2c4:	015a      	lsls	r2, r3, #5
 800c2c6:	69fb      	ldr	r3, [r7, #28]
 800c2c8:	4413      	add	r3, r2
 800c2ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2ce:	691b      	ldr	r3, [r3, #16]
 800c2d0:	69ba      	ldr	r2, [r7, #24]
 800c2d2:	0151      	lsls	r1, r2, #5
 800c2d4:	69fa      	ldr	r2, [r7, #28]
 800c2d6:	440a      	add	r2, r1
 800c2d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2dc:	0cdb      	lsrs	r3, r3, #19
 800c2de:	04db      	lsls	r3, r3, #19
 800c2e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c2e2:	69bb      	ldr	r3, [r7, #24]
 800c2e4:	015a      	lsls	r2, r3, #5
 800c2e6:	69fb      	ldr	r3, [r7, #28]
 800c2e8:	4413      	add	r3, r2
 800c2ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2ee:	691b      	ldr	r3, [r3, #16]
 800c2f0:	69ba      	ldr	r2, [r7, #24]
 800c2f2:	0151      	lsls	r1, r2, #5
 800c2f4:	69fa      	ldr	r2, [r7, #28]
 800c2f6:	440a      	add	r2, r1
 800c2f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c300:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c304:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	699b      	ldr	r3, [r3, #24]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d126      	bne.n	800c35c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c30e:	69bb      	ldr	r3, [r7, #24]
 800c310:	015a      	lsls	r2, r3, #5
 800c312:	69fb      	ldr	r3, [r7, #28]
 800c314:	4413      	add	r3, r2
 800c316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c31a:	691a      	ldr	r2, [r3, #16]
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	68db      	ldr	r3, [r3, #12]
 800c320:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c324:	69b9      	ldr	r1, [r7, #24]
 800c326:	0148      	lsls	r0, r1, #5
 800c328:	69f9      	ldr	r1, [r7, #28]
 800c32a:	4401      	add	r1, r0
 800c32c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c330:	4313      	orrs	r3, r2
 800c332:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c334:	69bb      	ldr	r3, [r7, #24]
 800c336:	015a      	lsls	r2, r3, #5
 800c338:	69fb      	ldr	r3, [r7, #28]
 800c33a:	4413      	add	r3, r2
 800c33c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c340:	691b      	ldr	r3, [r3, #16]
 800c342:	69ba      	ldr	r2, [r7, #24]
 800c344:	0151      	lsls	r1, r2, #5
 800c346:	69fa      	ldr	r2, [r7, #28]
 800c348:	440a      	add	r2, r1
 800c34a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c34e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c352:	6113      	str	r3, [r2, #16]
 800c354:	e03a      	b.n	800c3cc <USB_EPStartXfer+0x3e4>
 800c356:	bf00      	nop
 800c358:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	699a      	ldr	r2, [r3, #24]
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	68db      	ldr	r3, [r3, #12]
 800c364:	4413      	add	r3, r2
 800c366:	1e5a      	subs	r2, r3, #1
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	68db      	ldr	r3, [r3, #12]
 800c36c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c370:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	68db      	ldr	r3, [r3, #12]
 800c376:	8afa      	ldrh	r2, [r7, #22]
 800c378:	fb03 f202 	mul.w	r2, r3, r2
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c380:	69bb      	ldr	r3, [r7, #24]
 800c382:	015a      	lsls	r2, r3, #5
 800c384:	69fb      	ldr	r3, [r7, #28]
 800c386:	4413      	add	r3, r2
 800c388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c38c:	691a      	ldr	r2, [r3, #16]
 800c38e:	8afb      	ldrh	r3, [r7, #22]
 800c390:	04d9      	lsls	r1, r3, #19
 800c392:	4b38      	ldr	r3, [pc, #224]	; (800c474 <USB_EPStartXfer+0x48c>)
 800c394:	400b      	ands	r3, r1
 800c396:	69b9      	ldr	r1, [r7, #24]
 800c398:	0148      	lsls	r0, r1, #5
 800c39a:	69f9      	ldr	r1, [r7, #28]
 800c39c:	4401      	add	r1, r0
 800c39e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c3a2:	4313      	orrs	r3, r2
 800c3a4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c3a6:	69bb      	ldr	r3, [r7, #24]
 800c3a8:	015a      	lsls	r2, r3, #5
 800c3aa:	69fb      	ldr	r3, [r7, #28]
 800c3ac:	4413      	add	r3, r2
 800c3ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3b2:	691a      	ldr	r2, [r3, #16]
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	69db      	ldr	r3, [r3, #28]
 800c3b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c3bc:	69b9      	ldr	r1, [r7, #24]
 800c3be:	0148      	lsls	r0, r1, #5
 800c3c0:	69f9      	ldr	r1, [r7, #28]
 800c3c2:	4401      	add	r1, r0
 800c3c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c3c8:	4313      	orrs	r3, r2
 800c3ca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c3cc:	79fb      	ldrb	r3, [r7, #7]
 800c3ce:	2b01      	cmp	r3, #1
 800c3d0:	d10d      	bne.n	800c3ee <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	691b      	ldr	r3, [r3, #16]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d009      	beq.n	800c3ee <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	6919      	ldr	r1, [r3, #16]
 800c3de:	69bb      	ldr	r3, [r7, #24]
 800c3e0:	015a      	lsls	r2, r3, #5
 800c3e2:	69fb      	ldr	r3, [r7, #28]
 800c3e4:	4413      	add	r3, r2
 800c3e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3ea:	460a      	mov	r2, r1
 800c3ec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	791b      	ldrb	r3, [r3, #4]
 800c3f2:	2b01      	cmp	r3, #1
 800c3f4:	d128      	bne.n	800c448 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c3f6:	69fb      	ldr	r3, [r7, #28]
 800c3f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3fc:	689b      	ldr	r3, [r3, #8]
 800c3fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c402:	2b00      	cmp	r3, #0
 800c404:	d110      	bne.n	800c428 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c406:	69bb      	ldr	r3, [r7, #24]
 800c408:	015a      	lsls	r2, r3, #5
 800c40a:	69fb      	ldr	r3, [r7, #28]
 800c40c:	4413      	add	r3, r2
 800c40e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	69ba      	ldr	r2, [r7, #24]
 800c416:	0151      	lsls	r1, r2, #5
 800c418:	69fa      	ldr	r2, [r7, #28]
 800c41a:	440a      	add	r2, r1
 800c41c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c420:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c424:	6013      	str	r3, [r2, #0]
 800c426:	e00f      	b.n	800c448 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c428:	69bb      	ldr	r3, [r7, #24]
 800c42a:	015a      	lsls	r2, r3, #5
 800c42c:	69fb      	ldr	r3, [r7, #28]
 800c42e:	4413      	add	r3, r2
 800c430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	69ba      	ldr	r2, [r7, #24]
 800c438:	0151      	lsls	r1, r2, #5
 800c43a:	69fa      	ldr	r2, [r7, #28]
 800c43c:	440a      	add	r2, r1
 800c43e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c446:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c448:	69bb      	ldr	r3, [r7, #24]
 800c44a:	015a      	lsls	r2, r3, #5
 800c44c:	69fb      	ldr	r3, [r7, #28]
 800c44e:	4413      	add	r3, r2
 800c450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	69ba      	ldr	r2, [r7, #24]
 800c458:	0151      	lsls	r1, r2, #5
 800c45a:	69fa      	ldr	r2, [r7, #28]
 800c45c:	440a      	add	r2, r1
 800c45e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c462:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c466:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c468:	2300      	movs	r3, #0
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3720      	adds	r7, #32
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	1ff80000 	.word	0x1ff80000

0800c478 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c478:	b480      	push	{r7}
 800c47a:	b087      	sub	sp, #28
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	60b9      	str	r1, [r7, #8]
 800c482:	4613      	mov	r3, r2
 800c484:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	781b      	ldrb	r3, [r3, #0]
 800c48e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	785b      	ldrb	r3, [r3, #1]
 800c494:	2b01      	cmp	r3, #1
 800c496:	f040 80ce 	bne.w	800c636 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	699b      	ldr	r3, [r3, #24]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d132      	bne.n	800c508 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	015a      	lsls	r2, r3, #5
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	4413      	add	r3, r2
 800c4aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4ae:	691b      	ldr	r3, [r3, #16]
 800c4b0:	693a      	ldr	r2, [r7, #16]
 800c4b2:	0151      	lsls	r1, r2, #5
 800c4b4:	697a      	ldr	r2, [r7, #20]
 800c4b6:	440a      	add	r2, r1
 800c4b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c4c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c4c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	015a      	lsls	r2, r3, #5
 800c4ca:	697b      	ldr	r3, [r7, #20]
 800c4cc:	4413      	add	r3, r2
 800c4ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4d2:	691b      	ldr	r3, [r3, #16]
 800c4d4:	693a      	ldr	r2, [r7, #16]
 800c4d6:	0151      	lsls	r1, r2, #5
 800c4d8:	697a      	ldr	r2, [r7, #20]
 800c4da:	440a      	add	r2, r1
 800c4dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c4e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	015a      	lsls	r2, r3, #5
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	4413      	add	r3, r2
 800c4ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4f2:	691b      	ldr	r3, [r3, #16]
 800c4f4:	693a      	ldr	r2, [r7, #16]
 800c4f6:	0151      	lsls	r1, r2, #5
 800c4f8:	697a      	ldr	r2, [r7, #20]
 800c4fa:	440a      	add	r2, r1
 800c4fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c500:	0cdb      	lsrs	r3, r3, #19
 800c502:	04db      	lsls	r3, r3, #19
 800c504:	6113      	str	r3, [r2, #16]
 800c506:	e04e      	b.n	800c5a6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	015a      	lsls	r2, r3, #5
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	4413      	add	r3, r2
 800c510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c514:	691b      	ldr	r3, [r3, #16]
 800c516:	693a      	ldr	r2, [r7, #16]
 800c518:	0151      	lsls	r1, r2, #5
 800c51a:	697a      	ldr	r2, [r7, #20]
 800c51c:	440a      	add	r2, r1
 800c51e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c522:	0cdb      	lsrs	r3, r3, #19
 800c524:	04db      	lsls	r3, r3, #19
 800c526:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	015a      	lsls	r2, r3, #5
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	4413      	add	r3, r2
 800c530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c534:	691b      	ldr	r3, [r3, #16]
 800c536:	693a      	ldr	r2, [r7, #16]
 800c538:	0151      	lsls	r1, r2, #5
 800c53a:	697a      	ldr	r2, [r7, #20]
 800c53c:	440a      	add	r2, r1
 800c53e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c542:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c546:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c54a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	699a      	ldr	r2, [r3, #24]
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	68db      	ldr	r3, [r3, #12]
 800c554:	429a      	cmp	r2, r3
 800c556:	d903      	bls.n	800c560 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	68da      	ldr	r2, [r3, #12]
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	015a      	lsls	r2, r3, #5
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	4413      	add	r3, r2
 800c568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c56c:	691b      	ldr	r3, [r3, #16]
 800c56e:	693a      	ldr	r2, [r7, #16]
 800c570:	0151      	lsls	r1, r2, #5
 800c572:	697a      	ldr	r2, [r7, #20]
 800c574:	440a      	add	r2, r1
 800c576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c57a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c57e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	015a      	lsls	r2, r3, #5
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	4413      	add	r3, r2
 800c588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c58c:	691a      	ldr	r2, [r3, #16]
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	699b      	ldr	r3, [r3, #24]
 800c592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c596:	6939      	ldr	r1, [r7, #16]
 800c598:	0148      	lsls	r0, r1, #5
 800c59a:	6979      	ldr	r1, [r7, #20]
 800c59c:	4401      	add	r1, r0
 800c59e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c5a2:	4313      	orrs	r3, r2
 800c5a4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c5a6:	79fb      	ldrb	r3, [r7, #7]
 800c5a8:	2b01      	cmp	r3, #1
 800c5aa:	d11e      	bne.n	800c5ea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	695b      	ldr	r3, [r3, #20]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d009      	beq.n	800c5c8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	015a      	lsls	r2, r3, #5
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	4413      	add	r3, r2
 800c5bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	695b      	ldr	r3, [r3, #20]
 800c5c6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	015a      	lsls	r2, r3, #5
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	4413      	add	r3, r2
 800c5d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	693a      	ldr	r2, [r7, #16]
 800c5d8:	0151      	lsls	r1, r2, #5
 800c5da:	697a      	ldr	r2, [r7, #20]
 800c5dc:	440a      	add	r2, r1
 800c5de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c5e6:	6013      	str	r3, [r2, #0]
 800c5e8:	e097      	b.n	800c71a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	015a      	lsls	r2, r3, #5
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	4413      	add	r3, r2
 800c5f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	693a      	ldr	r2, [r7, #16]
 800c5fa:	0151      	lsls	r1, r2, #5
 800c5fc:	697a      	ldr	r2, [r7, #20]
 800c5fe:	440a      	add	r2, r1
 800c600:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c604:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c608:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	699b      	ldr	r3, [r3, #24]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	f000 8083 	beq.w	800c71a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c61a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	f003 030f 	and.w	r3, r3, #15
 800c624:	2101      	movs	r1, #1
 800c626:	fa01 f303 	lsl.w	r3, r1, r3
 800c62a:	6979      	ldr	r1, [r7, #20]
 800c62c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c630:	4313      	orrs	r3, r2
 800c632:	634b      	str	r3, [r1, #52]	; 0x34
 800c634:	e071      	b.n	800c71a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	015a      	lsls	r2, r3, #5
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	4413      	add	r3, r2
 800c63e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c642:	691b      	ldr	r3, [r3, #16]
 800c644:	693a      	ldr	r2, [r7, #16]
 800c646:	0151      	lsls	r1, r2, #5
 800c648:	697a      	ldr	r2, [r7, #20]
 800c64a:	440a      	add	r2, r1
 800c64c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c650:	0cdb      	lsrs	r3, r3, #19
 800c652:	04db      	lsls	r3, r3, #19
 800c654:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c656:	693b      	ldr	r3, [r7, #16]
 800c658:	015a      	lsls	r2, r3, #5
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	4413      	add	r3, r2
 800c65e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c662:	691b      	ldr	r3, [r3, #16]
 800c664:	693a      	ldr	r2, [r7, #16]
 800c666:	0151      	lsls	r1, r2, #5
 800c668:	697a      	ldr	r2, [r7, #20]
 800c66a:	440a      	add	r2, r1
 800c66c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c670:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c674:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c678:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	699b      	ldr	r3, [r3, #24]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d003      	beq.n	800c68a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	68da      	ldr	r2, [r3, #12]
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	68da      	ldr	r2, [r3, #12]
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	015a      	lsls	r2, r3, #5
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	4413      	add	r3, r2
 800c69a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c69e:	691b      	ldr	r3, [r3, #16]
 800c6a0:	693a      	ldr	r2, [r7, #16]
 800c6a2:	0151      	lsls	r1, r2, #5
 800c6a4:	697a      	ldr	r2, [r7, #20]
 800c6a6:	440a      	add	r2, r1
 800c6a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c6b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	015a      	lsls	r2, r3, #5
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	4413      	add	r3, r2
 800c6ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6be:	691a      	ldr	r2, [r3, #16]
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	69db      	ldr	r3, [r3, #28]
 800c6c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c6c8:	6939      	ldr	r1, [r7, #16]
 800c6ca:	0148      	lsls	r0, r1, #5
 800c6cc:	6979      	ldr	r1, [r7, #20]
 800c6ce:	4401      	add	r1, r0
 800c6d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c6d4:	4313      	orrs	r3, r2
 800c6d6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c6d8:	79fb      	ldrb	r3, [r7, #7]
 800c6da:	2b01      	cmp	r3, #1
 800c6dc:	d10d      	bne.n	800c6fa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	691b      	ldr	r3, [r3, #16]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d009      	beq.n	800c6fa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	6919      	ldr	r1, [r3, #16]
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	015a      	lsls	r2, r3, #5
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	4413      	add	r3, r2
 800c6f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6f6:	460a      	mov	r2, r1
 800c6f8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	015a      	lsls	r2, r3, #5
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	4413      	add	r3, r2
 800c702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	693a      	ldr	r2, [r7, #16]
 800c70a:	0151      	lsls	r1, r2, #5
 800c70c:	697a      	ldr	r2, [r7, #20]
 800c70e:	440a      	add	r2, r1
 800c710:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c714:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c718:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c71a:	2300      	movs	r3, #0
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	371c      	adds	r7, #28
 800c720:	46bd      	mov	sp, r7
 800c722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c726:	4770      	bx	lr

0800c728 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c728:	b480      	push	{r7}
 800c72a:	b087      	sub	sp, #28
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
 800c730:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c732:	2300      	movs	r3, #0
 800c734:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c736:	2300      	movs	r3, #0
 800c738:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	785b      	ldrb	r3, [r3, #1]
 800c742:	2b01      	cmp	r3, #1
 800c744:	d14a      	bne.n	800c7dc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	015a      	lsls	r2, r3, #5
 800c74c:	693b      	ldr	r3, [r7, #16]
 800c74e:	4413      	add	r3, r2
 800c750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c75a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c75e:	f040 8086 	bne.w	800c86e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	015a      	lsls	r2, r3, #5
 800c768:	693b      	ldr	r3, [r7, #16]
 800c76a:	4413      	add	r3, r2
 800c76c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	683a      	ldr	r2, [r7, #0]
 800c774:	7812      	ldrb	r2, [r2, #0]
 800c776:	0151      	lsls	r1, r2, #5
 800c778:	693a      	ldr	r2, [r7, #16]
 800c77a:	440a      	add	r2, r1
 800c77c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c780:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c784:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	781b      	ldrb	r3, [r3, #0]
 800c78a:	015a      	lsls	r2, r3, #5
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	4413      	add	r3, r2
 800c790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	683a      	ldr	r2, [r7, #0]
 800c798:	7812      	ldrb	r2, [r2, #0]
 800c79a:	0151      	lsls	r1, r2, #5
 800c79c:	693a      	ldr	r2, [r7, #16]
 800c79e:	440a      	add	r2, r1
 800c7a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c7a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	3301      	adds	r3, #1
 800c7ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f242 7210 	movw	r2, #10000	; 0x2710
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d902      	bls.n	800c7c0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	75fb      	strb	r3, [r7, #23]
          break;
 800c7be:	e056      	b.n	800c86e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	015a      	lsls	r2, r3, #5
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	4413      	add	r3, r2
 800c7ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c7d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c7d8:	d0e7      	beq.n	800c7aa <USB_EPStopXfer+0x82>
 800c7da:	e048      	b.n	800c86e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	015a      	lsls	r2, r3, #5
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	4413      	add	r3, r2
 800c7e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c7f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c7f4:	d13b      	bne.n	800c86e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	781b      	ldrb	r3, [r3, #0]
 800c7fa:	015a      	lsls	r2, r3, #5
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	4413      	add	r3, r2
 800c800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	683a      	ldr	r2, [r7, #0]
 800c808:	7812      	ldrb	r2, [r2, #0]
 800c80a:	0151      	lsls	r1, r2, #5
 800c80c:	693a      	ldr	r2, [r7, #16]
 800c80e:	440a      	add	r2, r1
 800c810:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c814:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c818:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	781b      	ldrb	r3, [r3, #0]
 800c81e:	015a      	lsls	r2, r3, #5
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	4413      	add	r3, r2
 800c824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	683a      	ldr	r2, [r7, #0]
 800c82c:	7812      	ldrb	r2, [r2, #0]
 800c82e:	0151      	lsls	r1, r2, #5
 800c830:	693a      	ldr	r2, [r7, #16]
 800c832:	440a      	add	r2, r1
 800c834:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c838:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c83c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	3301      	adds	r3, #1
 800c842:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	f242 7210 	movw	r2, #10000	; 0x2710
 800c84a:	4293      	cmp	r3, r2
 800c84c:	d902      	bls.n	800c854 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c84e:	2301      	movs	r3, #1
 800c850:	75fb      	strb	r3, [r7, #23]
          break;
 800c852:	e00c      	b.n	800c86e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	015a      	lsls	r2, r3, #5
 800c85a:	693b      	ldr	r3, [r7, #16]
 800c85c:	4413      	add	r3, r2
 800c85e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c868:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c86c:	d0e7      	beq.n	800c83e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c86e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c870:	4618      	mov	r0, r3
 800c872:	371c      	adds	r7, #28
 800c874:	46bd      	mov	sp, r7
 800c876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87a:	4770      	bx	lr

0800c87c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c87c:	b480      	push	{r7}
 800c87e:	b089      	sub	sp, #36	; 0x24
 800c880:	af00      	add	r7, sp, #0
 800c882:	60f8      	str	r0, [r7, #12]
 800c884:	60b9      	str	r1, [r7, #8]
 800c886:	4611      	mov	r1, r2
 800c888:	461a      	mov	r2, r3
 800c88a:	460b      	mov	r3, r1
 800c88c:	71fb      	strb	r3, [r7, #7]
 800c88e:	4613      	mov	r3, r2
 800c890:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c89a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d123      	bne.n	800c8ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c8a2:	88bb      	ldrh	r3, [r7, #4]
 800c8a4:	3303      	adds	r3, #3
 800c8a6:	089b      	lsrs	r3, r3, #2
 800c8a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	61bb      	str	r3, [r7, #24]
 800c8ae:	e018      	b.n	800c8e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c8b0:	79fb      	ldrb	r3, [r7, #7]
 800c8b2:	031a      	lsls	r2, r3, #12
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	4413      	add	r3, r2
 800c8b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8bc:	461a      	mov	r2, r3
 800c8be:	69fb      	ldr	r3, [r7, #28]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c8c4:	69fb      	ldr	r3, [r7, #28]
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c8ca:	69fb      	ldr	r3, [r7, #28]
 800c8cc:	3301      	adds	r3, #1
 800c8ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c8d0:	69fb      	ldr	r3, [r7, #28]
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c8d6:	69fb      	ldr	r3, [r7, #28]
 800c8d8:	3301      	adds	r3, #1
 800c8da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c8dc:	69bb      	ldr	r3, [r7, #24]
 800c8de:	3301      	adds	r3, #1
 800c8e0:	61bb      	str	r3, [r7, #24]
 800c8e2:	69ba      	ldr	r2, [r7, #24]
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d3e2      	bcc.n	800c8b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c8ea:	2300      	movs	r3, #0
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	3724      	adds	r7, #36	; 0x24
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f6:	4770      	bx	lr

0800c8f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b08b      	sub	sp, #44	; 0x2c
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	60f8      	str	r0, [r7, #12]
 800c900:	60b9      	str	r1, [r7, #8]
 800c902:	4613      	mov	r3, r2
 800c904:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c90e:	88fb      	ldrh	r3, [r7, #6]
 800c910:	089b      	lsrs	r3, r3, #2
 800c912:	b29b      	uxth	r3, r3
 800c914:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c916:	88fb      	ldrh	r3, [r7, #6]
 800c918:	f003 0303 	and.w	r3, r3, #3
 800c91c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c91e:	2300      	movs	r3, #0
 800c920:	623b      	str	r3, [r7, #32]
 800c922:	e014      	b.n	800c94e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c924:	69bb      	ldr	r3, [r7, #24]
 800c926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c92a:	681a      	ldr	r2, [r3, #0]
 800c92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92e:	601a      	str	r2, [r3, #0]
    pDest++;
 800c930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c932:	3301      	adds	r3, #1
 800c934:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c938:	3301      	adds	r3, #1
 800c93a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c93e:	3301      	adds	r3, #1
 800c940:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c944:	3301      	adds	r3, #1
 800c946:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c948:	6a3b      	ldr	r3, [r7, #32]
 800c94a:	3301      	adds	r3, #1
 800c94c:	623b      	str	r3, [r7, #32]
 800c94e:	6a3a      	ldr	r2, [r7, #32]
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	429a      	cmp	r2, r3
 800c954:	d3e6      	bcc.n	800c924 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c956:	8bfb      	ldrh	r3, [r7, #30]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d01e      	beq.n	800c99a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c95c:	2300      	movs	r3, #0
 800c95e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c960:	69bb      	ldr	r3, [r7, #24]
 800c962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c966:	461a      	mov	r2, r3
 800c968:	f107 0310 	add.w	r3, r7, #16
 800c96c:	6812      	ldr	r2, [r2, #0]
 800c96e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c970:	693a      	ldr	r2, [r7, #16]
 800c972:	6a3b      	ldr	r3, [r7, #32]
 800c974:	b2db      	uxtb	r3, r3
 800c976:	00db      	lsls	r3, r3, #3
 800c978:	fa22 f303 	lsr.w	r3, r2, r3
 800c97c:	b2da      	uxtb	r2, r3
 800c97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c980:	701a      	strb	r2, [r3, #0]
      i++;
 800c982:	6a3b      	ldr	r3, [r7, #32]
 800c984:	3301      	adds	r3, #1
 800c986:	623b      	str	r3, [r7, #32]
      pDest++;
 800c988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c98a:	3301      	adds	r3, #1
 800c98c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c98e:	8bfb      	ldrh	r3, [r7, #30]
 800c990:	3b01      	subs	r3, #1
 800c992:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c994:	8bfb      	ldrh	r3, [r7, #30]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d1ea      	bne.n	800c970 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	372c      	adds	r7, #44	; 0x2c
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a6:	4770      	bx	lr

0800c9a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b085      	sub	sp, #20
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
 800c9b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	785b      	ldrb	r3, [r3, #1]
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	d12c      	bne.n	800ca1e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	015a      	lsls	r2, r3, #5
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	4413      	add	r3, r2
 800c9cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	db12      	blt.n	800c9fc <USB_EPSetStall+0x54>
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d00f      	beq.n	800c9fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	015a      	lsls	r2, r3, #5
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	4413      	add	r3, r2
 800c9e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	68ba      	ldr	r2, [r7, #8]
 800c9ec:	0151      	lsls	r1, r2, #5
 800c9ee:	68fa      	ldr	r2, [r7, #12]
 800c9f0:	440a      	add	r2, r1
 800c9f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c9fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	015a      	lsls	r2, r3, #5
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	4413      	add	r3, r2
 800ca04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	68ba      	ldr	r2, [r7, #8]
 800ca0c:	0151      	lsls	r1, r2, #5
 800ca0e:	68fa      	ldr	r2, [r7, #12]
 800ca10:	440a      	add	r2, r1
 800ca12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ca1a:	6013      	str	r3, [r2, #0]
 800ca1c:	e02b      	b.n	800ca76 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	015a      	lsls	r2, r3, #5
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	4413      	add	r3, r2
 800ca26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	db12      	blt.n	800ca56 <USB_EPSetStall+0xae>
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d00f      	beq.n	800ca56 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	015a      	lsls	r2, r3, #5
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	4413      	add	r3, r2
 800ca3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	68ba      	ldr	r2, [r7, #8]
 800ca46:	0151      	lsls	r1, r2, #5
 800ca48:	68fa      	ldr	r2, [r7, #12]
 800ca4a:	440a      	add	r2, r1
 800ca4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ca54:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	015a      	lsls	r2, r3, #5
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	4413      	add	r3, r2
 800ca5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	68ba      	ldr	r2, [r7, #8]
 800ca66:	0151      	lsls	r1, r2, #5
 800ca68:	68fa      	ldr	r2, [r7, #12]
 800ca6a:	440a      	add	r2, r1
 800ca6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ca74:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ca76:	2300      	movs	r3, #0
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3714      	adds	r7, #20
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr

0800ca84 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ca84:	b480      	push	{r7}
 800ca86:	b085      	sub	sp, #20
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	781b      	ldrb	r3, [r3, #0]
 800ca96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	785b      	ldrb	r3, [r3, #1]
 800ca9c:	2b01      	cmp	r3, #1
 800ca9e:	d128      	bne.n	800caf2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	015a      	lsls	r2, r3, #5
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	4413      	add	r3, r2
 800caa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	68ba      	ldr	r2, [r7, #8]
 800cab0:	0151      	lsls	r1, r2, #5
 800cab2:	68fa      	ldr	r2, [r7, #12]
 800cab4:	440a      	add	r2, r1
 800cab6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800caba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cabe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	791b      	ldrb	r3, [r3, #4]
 800cac4:	2b03      	cmp	r3, #3
 800cac6:	d003      	beq.n	800cad0 <USB_EPClearStall+0x4c>
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	791b      	ldrb	r3, [r3, #4]
 800cacc:	2b02      	cmp	r3, #2
 800cace:	d138      	bne.n	800cb42 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	015a      	lsls	r2, r3, #5
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	4413      	add	r3, r2
 800cad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	68ba      	ldr	r2, [r7, #8]
 800cae0:	0151      	lsls	r1, r2, #5
 800cae2:	68fa      	ldr	r2, [r7, #12]
 800cae4:	440a      	add	r2, r1
 800cae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800caea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800caee:	6013      	str	r3, [r2, #0]
 800caf0:	e027      	b.n	800cb42 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	015a      	lsls	r2, r3, #5
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	4413      	add	r3, r2
 800cafa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	68ba      	ldr	r2, [r7, #8]
 800cb02:	0151      	lsls	r1, r2, #5
 800cb04:	68fa      	ldr	r2, [r7, #12]
 800cb06:	440a      	add	r2, r1
 800cb08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cb10:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	791b      	ldrb	r3, [r3, #4]
 800cb16:	2b03      	cmp	r3, #3
 800cb18:	d003      	beq.n	800cb22 <USB_EPClearStall+0x9e>
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	791b      	ldrb	r3, [r3, #4]
 800cb1e:	2b02      	cmp	r3, #2
 800cb20:	d10f      	bne.n	800cb42 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	015a      	lsls	r2, r3, #5
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	4413      	add	r3, r2
 800cb2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	68ba      	ldr	r2, [r7, #8]
 800cb32:	0151      	lsls	r1, r2, #5
 800cb34:	68fa      	ldr	r2, [r7, #12]
 800cb36:	440a      	add	r2, r1
 800cb38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb40:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cb42:	2300      	movs	r3, #0
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3714      	adds	r7, #20
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4e:	4770      	bx	lr

0800cb50 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b086      	sub	sp, #24
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	617b      	str	r3, [r7, #20]
 800cb60:	e016      	b.n	800cb90 <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	015a      	lsls	r2, r3, #5
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	4413      	add	r3, r2
 800cb6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb6e:	461a      	mov	r2, r3
 800cb70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cb74:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	015a      	lsls	r2, r3, #5
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	4413      	add	r3, r2
 800cb7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb82:	461a      	mov	r2, r3
 800cb84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cb88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 800cb8a:	697b      	ldr	r3, [r7, #20]
 800cb8c:	3301      	adds	r3, #1
 800cb8e:	617b      	str	r3, [r7, #20]
 800cb90:	697b      	ldr	r3, [r7, #20]
 800cb92:	2b0e      	cmp	r3, #14
 800cb94:	d9e5      	bls.n	800cb62 <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb9c:	461a      	mov	r2, r3
 800cb9e:	2300      	movs	r3, #0
 800cba0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cba8:	461a      	mov	r2, r3
 800cbaa:	2300      	movs	r3, #0
 800cbac:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbb4:	461a      	mov	r2, r3
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	f7ff f842 	bl	800bc44 <USB_FlushRxFifo>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800cbc4:	7bfb      	ldrb	r3, [r7, #15]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d001      	beq.n	800cbce <USB_StopDevice+0x7e>
  {
    return ret;
 800cbca:	7bfb      	ldrb	r3, [r7, #15]
 800cbcc:	e00b      	b.n	800cbe6 <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 800cbce:	2110      	movs	r1, #16
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f7ff f803 	bl	800bbdc <USB_FlushTxFifo>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800cbda:	7bfb      	ldrb	r3, [r7, #15]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d001      	beq.n	800cbe4 <USB_StopDevice+0x94>
  {
    return ret;
 800cbe0:	7bfb      	ldrb	r3, [r7, #15]
 800cbe2:	e000      	b.n	800cbe6 <USB_StopDevice+0x96>
  }

  return ret;
 800cbe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3718      	adds	r7, #24
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}

0800cbee <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cbee:	b480      	push	{r7}
 800cbf0:	b085      	sub	sp, #20
 800cbf2:	af00      	add	r7, sp, #0
 800cbf4:	6078      	str	r0, [r7, #4]
 800cbf6:	460b      	mov	r3, r1
 800cbf8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	68fa      	ldr	r2, [r7, #12]
 800cc08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc0c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cc10:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc18:	681a      	ldr	r2, [r3, #0]
 800cc1a:	78fb      	ldrb	r3, [r7, #3]
 800cc1c:	011b      	lsls	r3, r3, #4
 800cc1e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cc22:	68f9      	ldr	r1, [r7, #12]
 800cc24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc28:	4313      	orrs	r3, r2
 800cc2a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cc2c:	2300      	movs	r3, #0
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3714      	adds	r7, #20
 800cc32:	46bd      	mov	sp, r7
 800cc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc38:	4770      	bx	lr

0800cc3a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cc3a:	b480      	push	{r7}
 800cc3c:	b085      	sub	sp, #20
 800cc3e:	af00      	add	r7, sp, #0
 800cc40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	68fa      	ldr	r2, [r7, #12]
 800cc50:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cc54:	f023 0303 	bic.w	r3, r3, #3
 800cc58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc60:	685b      	ldr	r3, [r3, #4]
 800cc62:	68fa      	ldr	r2, [r7, #12]
 800cc64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc68:	f023 0302 	bic.w	r3, r3, #2
 800cc6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cc6e:	2300      	movs	r3, #0
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3714      	adds	r7, #20
 800cc74:	46bd      	mov	sp, r7
 800cc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7a:	4770      	bx	lr

0800cc7c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b085      	sub	sp, #20
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	68fa      	ldr	r2, [r7, #12]
 800cc92:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cc96:	f023 0303 	bic.w	r3, r3, #3
 800cc9a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cca2:	685b      	ldr	r3, [r3, #4]
 800cca4:	68fa      	ldr	r2, [r7, #12]
 800cca6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ccaa:	f043 0302 	orr.w	r3, r3, #2
 800ccae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ccb0:	2300      	movs	r3, #0
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3714      	adds	r7, #20
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbc:	4770      	bx	lr

0800ccbe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ccbe:	b480      	push	{r7}
 800ccc0:	b085      	sub	sp, #20
 800ccc2:	af00      	add	r7, sp, #0
 800ccc4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	695b      	ldr	r3, [r3, #20]
 800ccca:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	699b      	ldr	r3, [r3, #24]
 800ccd0:	68fa      	ldr	r2, [r7, #12]
 800ccd2:	4013      	ands	r3, r2
 800ccd4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3714      	adds	r7, #20
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce2:	4770      	bx	lr

0800cce4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cce4:	b480      	push	{r7}
 800cce6:	b085      	sub	sp, #20
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccf6:	699b      	ldr	r3, [r3, #24]
 800ccf8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd00:	69db      	ldr	r3, [r3, #28]
 800cd02:	68ba      	ldr	r2, [r7, #8]
 800cd04:	4013      	ands	r3, r2
 800cd06:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	0c1b      	lsrs	r3, r3, #16
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3714      	adds	r7, #20
 800cd10:	46bd      	mov	sp, r7
 800cd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd16:	4770      	bx	lr

0800cd18 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b085      	sub	sp, #20
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd2a:	699b      	ldr	r3, [r3, #24]
 800cd2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd34:	69db      	ldr	r3, [r3, #28]
 800cd36:	68ba      	ldr	r2, [r7, #8]
 800cd38:	4013      	ands	r3, r2
 800cd3a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	b29b      	uxth	r3, r3
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3714      	adds	r7, #20
 800cd44:	46bd      	mov	sp, r7
 800cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4a:	4770      	bx	lr

0800cd4c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b085      	sub	sp, #20
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	460b      	mov	r3, r1
 800cd56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800cd5c:	78fb      	ldrb	r3, [r7, #3]
 800cd5e:	015a      	lsls	r2, r3, #5
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	4413      	add	r3, r2
 800cd64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd68:	689b      	ldr	r3, [r3, #8]
 800cd6a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd72:	695b      	ldr	r3, [r3, #20]
 800cd74:	68ba      	ldr	r2, [r7, #8]
 800cd76:	4013      	ands	r3, r2
 800cd78:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cd7a:	68bb      	ldr	r3, [r7, #8]
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3714      	adds	r7, #20
 800cd80:	46bd      	mov	sp, r7
 800cd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd86:	4770      	bx	lr

0800cd88 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cd88:	b480      	push	{r7}
 800cd8a:	b087      	sub	sp, #28
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
 800cd90:	460b      	mov	r3, r1
 800cd92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cd98:	697b      	ldr	r3, [r7, #20]
 800cd9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd9e:	691b      	ldr	r3, [r3, #16]
 800cda0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cda8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdaa:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cdac:	78fb      	ldrb	r3, [r7, #3]
 800cdae:	f003 030f 	and.w	r3, r3, #15
 800cdb2:	68fa      	ldr	r2, [r7, #12]
 800cdb4:	fa22 f303 	lsr.w	r3, r2, r3
 800cdb8:	01db      	lsls	r3, r3, #7
 800cdba:	b2db      	uxtb	r3, r3
 800cdbc:	693a      	ldr	r2, [r7, #16]
 800cdbe:	4313      	orrs	r3, r2
 800cdc0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cdc2:	78fb      	ldrb	r3, [r7, #3]
 800cdc4:	015a      	lsls	r2, r3, #5
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	4413      	add	r3, r2
 800cdca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdce:	689b      	ldr	r3, [r3, #8]
 800cdd0:	693a      	ldr	r2, [r7, #16]
 800cdd2:	4013      	ands	r3, r2
 800cdd4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cdd6:	68bb      	ldr	r3, [r7, #8]
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	371c      	adds	r7, #28
 800cddc:	46bd      	mov	sp, r7
 800cdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde2:	4770      	bx	lr

0800cde4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b083      	sub	sp, #12
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	695b      	ldr	r3, [r3, #20]
 800cdf0:	f003 0301 	and.w	r3, r3, #1
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	370c      	adds	r7, #12
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfe:	4770      	bx	lr

0800ce00 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ce00:	b480      	push	{r7}
 800ce02:	b085      	sub	sp, #20
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	68fa      	ldr	r2, [r7, #12]
 800ce16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce1a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ce1e:	f023 0307 	bic.w	r3, r3, #7
 800ce22:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce2a:	685b      	ldr	r3, [r3, #4]
 800ce2c:	68fa      	ldr	r2, [r7, #12]
 800ce2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ce32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce36:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ce38:	2300      	movs	r3, #0
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3714      	adds	r7, #20
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce44:	4770      	bx	lr
	...

0800ce48 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b087      	sub	sp, #28
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	60f8      	str	r0, [r7, #12]
 800ce50:	460b      	mov	r3, r1
 800ce52:	607a      	str	r2, [r7, #4]
 800ce54:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	333c      	adds	r3, #60	; 0x3c
 800ce5e:	3304      	adds	r3, #4
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	4a26      	ldr	r2, [pc, #152]	; (800cf00 <USB_EP0_OutStart+0xb8>)
 800ce68:	4293      	cmp	r3, r2
 800ce6a:	d90a      	bls.n	800ce82 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ce78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ce7c:	d101      	bne.n	800ce82 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	e037      	b.n	800cef2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ce82:	697b      	ldr	r3, [r7, #20]
 800ce84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce88:	461a      	mov	r2, r3
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce94:	691b      	ldr	r3, [r3, #16]
 800ce96:	697a      	ldr	r2, [r7, #20]
 800ce98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cea0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cea8:	691b      	ldr	r3, [r3, #16]
 800ceaa:	697a      	ldr	r2, [r7, #20]
 800ceac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ceb0:	f043 0318 	orr.w	r3, r3, #24
 800ceb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cebc:	691b      	ldr	r3, [r3, #16]
 800cebe:	697a      	ldr	r2, [r7, #20]
 800cec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cec4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800cec8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ceca:	7afb      	ldrb	r3, [r7, #11]
 800cecc:	2b01      	cmp	r3, #1
 800cece:	d10f      	bne.n	800cef0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ced6:	461a      	mov	r2, r3
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	697a      	ldr	r2, [r7, #20]
 800cee6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ceea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ceee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cef0:	2300      	movs	r3, #0
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	371c      	adds	r7, #28
 800cef6:	46bd      	mov	sp, r7
 800cef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefc:	4770      	bx	lr
 800cefe:	bf00      	nop
 800cf00:	4f54300a 	.word	0x4f54300a

0800cf04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cf04:	b480      	push	{r7}
 800cf06:	b085      	sub	sp, #20
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	3301      	adds	r3, #1
 800cf14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	4a13      	ldr	r2, [pc, #76]	; (800cf68 <USB_CoreReset+0x64>)
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	d901      	bls.n	800cf22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cf1e:	2303      	movs	r3, #3
 800cf20:	e01b      	b.n	800cf5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	691b      	ldr	r3, [r3, #16]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	daf2      	bge.n	800cf10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	691b      	ldr	r3, [r3, #16]
 800cf32:	f043 0201 	orr.w	r2, r3, #1
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	3301      	adds	r3, #1
 800cf3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	4a09      	ldr	r2, [pc, #36]	; (800cf68 <USB_CoreReset+0x64>)
 800cf44:	4293      	cmp	r3, r2
 800cf46:	d901      	bls.n	800cf4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cf48:	2303      	movs	r3, #3
 800cf4a:	e006      	b.n	800cf5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	691b      	ldr	r3, [r3, #16]
 800cf50:	f003 0301 	and.w	r3, r3, #1
 800cf54:	2b01      	cmp	r3, #1
 800cf56:	d0f0      	beq.n	800cf3a <USB_CoreReset+0x36>

  return HAL_OK;
 800cf58:	2300      	movs	r3, #0
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3714      	adds	r7, #20
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf64:	4770      	bx	lr
 800cf66:	bf00      	nop
 800cf68:	00030d40 	.word	0x00030d40

0800cf6c <HAL_UART_RxCpltCallback>:
uint8_t flag_cli = 0;
uint8_t invoke_time =0;
uint8_t invoke_date =0;

// STM32 UART callback function, to pass received characters to the embedded-cli
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b084      	sub	sp, #16
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
	if (huart == UART_CLI_PERIPH && cliIsReady) {
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	4a13      	ldr	r2, [pc, #76]	; (800cfc4 <HAL_UART_RxCpltCallback+0x58>)
 800cf78:	4293      	cmp	r3, r2
 800cf7a:	d11f      	bne.n	800cfbc <HAL_UART_RxCpltCallback+0x50>
 800cf7c:	4b12      	ldr	r3, [pc, #72]	; (800cfc8 <HAL_UART_RxCpltCallback+0x5c>)
 800cf7e:	781b      	ldrb	r3, [r3, #0]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d01b      	beq.n	800cfbc <HAL_UART_RxCpltCallback+0x50>
		HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer,
 800cf84:	2201      	movs	r2, #1
 800cf86:	4911      	ldr	r1, [pc, #68]	; (800cfcc <HAL_UART_RxCpltCallback+0x60>)
 800cf88:	480e      	ldr	r0, [pc, #56]	; (800cfc4 <HAL_UART_RxCpltCallback+0x58>)
 800cf8a:	f7fc fe37 	bl	8009bfc <HAL_UART_Receive_IT>
				UART_RX_BUFF_SIZE);

		if (!cli_other) {
 800cf8e:	4b10      	ldr	r3, [pc, #64]	; (800cfd0 <HAL_UART_RxCpltCallback+0x64>)
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d10a      	bne.n	800cfac <HAL_UART_RxCpltCallback+0x40>
			char c = UART_CLI_rxBuffer[0];
 800cf96:	4b0d      	ldr	r3, [pc, #52]	; (800cfcc <HAL_UART_RxCpltCallback+0x60>)
 800cf98:	781b      	ldrb	r3, [r3, #0]
 800cf9a:	73fb      	strb	r3, [r7, #15]
			embeddedCliReceiveChar(cli, c);
 800cf9c:	4b0d      	ldr	r3, [pc, #52]	; (800cfd4 <HAL_UART_RxCpltCallback+0x68>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	7bfa      	ldrb	r2, [r7, #15]
 800cfa2:	4611      	mov	r1, r2
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f001 fe91 	bl	800eccc <embeddedCliReceiveChar>
 800cfaa:	e002      	b.n	800cfb2 <HAL_UART_RxCpltCallback+0x46>
		} else {
			flag_cli = 1;
 800cfac:	4b0a      	ldr	r3, [pc, #40]	; (800cfd8 <HAL_UART_RxCpltCallback+0x6c>)
 800cfae:	2201      	movs	r2, #1
 800cfb0:	701a      	strb	r2, [r3, #0]
		}

		prev_sleep_time = HAL_GetTick();
 800cfb2:	f7f5 fe63 	bl	8002c7c <HAL_GetTick>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	4a08      	ldr	r2, [pc, #32]	; (800cfdc <HAL_UART_RxCpltCallback+0x70>)
 800cfba:	6013      	str	r3, [r2, #0]

//	if(huart == &huart2)
//	{
//		sensirion_uart_interrupt();
//	}
}
 800cfbc:	bf00      	nop
 800cfbe:	3710      	adds	r7, #16
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}
 800cfc4:	20000900 	.word	0x20000900
 800cfc8:	200009bd 	.word	0x200009bd
 800cfcc:	200009bc 	.word	0x200009bc
 800cfd0:	200009be 	.word	0x200009be
 800cfd4:	200009b0 	.word	0x200009b0
 800cfd8:	200009bf 	.word	0x200009bf
 800cfdc:	20000748 	.word	0x20000748

0800cfe0 <writeCharToCli>:
 HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)token, tokenSize, 1000);
 }
 }
 **/

static void writeCharToCli(EmbeddedCli *embeddedCli, char c) {
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b084      	sub	sp, #16
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	460b      	mov	r3, r1
 800cfea:	70fb      	strb	r3, [r7, #3]
	uint8_t c_to_send = c;
 800cfec:	78fb      	ldrb	r3, [r7, #3]
 800cfee:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(UART_CLI_PERIPH, &c_to_send, 1, 100);
 800cff0:	f107 010f 	add.w	r1, r7, #15
 800cff4:	2364      	movs	r3, #100	; 0x64
 800cff6:	2201      	movs	r2, #1
 800cff8:	4803      	ldr	r0, [pc, #12]	; (800d008 <writeCharToCli+0x28>)
 800cffa:	f7fc fd6d 	bl	8009ad8 <HAL_UART_Transmit>
}
 800cffe:	bf00      	nop
 800d000:	3710      	adds	r7, #16
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}
 800d006:	bf00      	nop
 800d008:	20000900 	.word	0x20000900

0800d00c <cli_printf>:

// Function to encapsulate the 'embeddedCliPrint()' call with print formatting arguments (act like printf(), but keeps cursor at correct location).
// The 'embeddedCliPrint()' function does already add a linebreak ('\r\n') to the end of the print statement, so no need to add it yourself.
void cli_printf(EmbeddedCli *cli, const char *format, ...) {
 800d00c:	b40e      	push	{r1, r2, r3}
 800d00e:	b580      	push	{r7, lr}
 800d010:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 800d014:	af00      	add	r7, sp, #0
 800d016:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800d01a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800d01e:	6018      	str	r0, [r3, #0]
	// Create a buffer to store the formatted string
	char buffer[CLI_PRINT_BUFFER_SIZE];

	// Format the string using snprintf
	va_list args;
	va_start(args, format);
 800d020:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800d024:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800d028:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800d02c:	601a      	str	r2, [r3, #0]
	int length = vsnprintf(buffer, sizeof(buffer), format, args);
 800d02e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800d032:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800d036:	f107 000c 	add.w	r0, r7, #12
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 800d040:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d044:	f00e fb12 	bl	801b66c <vsniprintf>
 800d048:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
	va_end(args);

	// Check if string fitted in buffer else print error to stderr
	if (length < 0) {
 800d04c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800d050:	2b00      	cmp	r3, #0
 800d052:	da08      	bge.n	800d066 <cli_printf+0x5a>
		fprintf(stderr, "Error formatting the string\r\n");
 800d054:	4b0c      	ldr	r3, [pc, #48]	; (800d088 <cli_printf+0x7c>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	68db      	ldr	r3, [r3, #12]
 800d05a:	221d      	movs	r2, #29
 800d05c:	2101      	movs	r1, #1
 800d05e:	480b      	ldr	r0, [pc, #44]	; (800d08c <cli_printf+0x80>)
 800d060:	f00c fb06 	bl	8019670 <fwrite>
 800d064:	e009      	b.n	800d07a <cli_printf+0x6e>
		return;
	}

	// Call embeddedCliPrint with the formatted string
	embeddedCliPrint(cli, buffer);
 800d066:	f107 020c 	add.w	r2, r7, #12
 800d06a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800d06e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800d072:	4611      	mov	r1, r2
 800d074:	6818      	ldr	r0, [r3, #0]
 800d076:	f001 ff0f 	bl	800ee98 <embeddedCliPrint>
}
 800d07a:	f507 7705 	add.w	r7, r7, #532	; 0x214
 800d07e:	46bd      	mov	sp, r7
 800d080:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d084:	b003      	add	sp, #12
 800d086:	4770      	bx	lr
 800d088:	20000140 	.word	0x20000140
 800d08c:	0801e7ec 	.word	0x0801e7ec

0800d090 <receiveString>:

void receiveString(EmbeddedCli *cli, char *buffer, size_t bufferSize) {
 800d090:	b580      	push	{r7, lr}
 800d092:	b086      	sub	sp, #24
 800d094:	af00      	add	r7, sp, #0
 800d096:	60f8      	str	r0, [r7, #12]
 800d098:	60b9      	str	r1, [r7, #8]
 800d09a:	607a      	str	r2, [r7, #4]
	size_t index = 0;
 800d09c:	2300      	movs	r3, #0
 800d09e:	617b      	str	r3, [r7, #20]

	prev_max_wait_time = HAL_GetTick();
 800d0a0:	f7f5 fdec 	bl	8002c7c <HAL_GetTick>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	4a1d      	ldr	r2, [pc, #116]	; (800d11c <receiveString+0x8c>)
 800d0a8:	6013      	str	r3, [r2, #0]
	while (1) {
		if (flag_cli) {
 800d0aa:	4b1d      	ldr	r3, [pc, #116]	; (800d120 <receiveString+0x90>)
 800d0ac:	781b      	ldrb	r3, [r3, #0]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d023      	beq.n	800d0fa <receiveString+0x6a>
			if (UART_CLI_rxBuffer[0] == '\x0d' || index == bufferSize - 1) {
 800d0b2:	4b1c      	ldr	r3, [pc, #112]	; (800d124 <receiveString+0x94>)
 800d0b4:	781b      	ldrb	r3, [r3, #0]
 800d0b6:	2b0d      	cmp	r3, #13
 800d0b8:	d004      	beq.n	800d0c4 <receiveString+0x34>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	3b01      	subs	r3, #1
 800d0be:	697a      	ldr	r2, [r7, #20]
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d108      	bne.n	800d0d6 <receiveString+0x46>
				// Exit the loop when Enter key is pressed or buffer is full
				buffer[index] = '\0'; // Null-terminate the string
 800d0c4:	68ba      	ldr	r2, [r7, #8]
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	4413      	add	r3, r2
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	701a      	strb	r2, [r3, #0]
				flag_cli = 0;
 800d0ce:	4b14      	ldr	r3, [pc, #80]	; (800d120 <receiveString+0x90>)
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	701a      	strb	r2, [r3, #0]
				// Convert the entered string to lowercase
//				for (size_t i = 0; buffer[i]; i++) {
//					buffer[i] = tolower(buffer[i]);
//				}
				break;
 800d0d4:	e01d      	b.n	800d112 <receiveString+0x82>
			} else {
				// Check if the received character is an alphabet character
				buffer[index++] = UART_CLI_rxBuffer[0];
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	1c5a      	adds	r2, r3, #1
 800d0da:	617a      	str	r2, [r7, #20]
 800d0dc:	68ba      	ldr	r2, [r7, #8]
 800d0de:	4413      	add	r3, r2
 800d0e0:	4a10      	ldr	r2, [pc, #64]	; (800d124 <receiveString+0x94>)
 800d0e2:	7812      	ldrb	r2, [r2, #0]
 800d0e4:	701a      	strb	r2, [r3, #0]
				cli->writeChar(cli, UART_CLI_rxBuffer[0]);
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	4a0e      	ldr	r2, [pc, #56]	; (800d124 <receiveString+0x94>)
 800d0ec:	7812      	ldrb	r2, [r2, #0]
 800d0ee:	4611      	mov	r1, r2
 800d0f0:	68f8      	ldr	r0, [r7, #12]
 800d0f2:	4798      	blx	r3
			}
			flag_cli = 0;
 800d0f4:	4b0a      	ldr	r3, [pc, #40]	; (800d120 <receiveString+0x90>)
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GetTick() - prev_max_wait_time > max_wait_time)
 800d0fa:	f7f5 fdbf 	bl	8002c7c <HAL_GetTick>
 800d0fe:	4602      	mov	r2, r0
 800d100:	4b06      	ldr	r3, [pc, #24]	; (800d11c <receiveString+0x8c>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	1ad2      	subs	r2, r2, r3
 800d106:	4b08      	ldr	r3, [pc, #32]	; (800d128 <receiveString+0x98>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	429a      	cmp	r2, r3
 800d10c:	d800      	bhi.n	800d110 <receiveString+0x80>
		if (flag_cli) {
 800d10e:	e7cc      	b.n	800d0aa <receiveString+0x1a>
		{
          //we break the loop if time goes above 5min
			break;
 800d110:	bf00      	nop
		}

	}
}
 800d112:	bf00      	nop
 800d114:	3718      	adds	r7, #24
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}
 800d11a:	bf00      	nop
 800d11c:	200009b4 	.word	0x200009b4
 800d120:	200009bf 	.word	0x200009bf
 800d124:	200009bc 	.word	0x200009bc
 800d128:	20000018 	.word	0x20000018

0800d12c <onClearCLI>:

void onClearCLI(EmbeddedCli *cli, char *args, void *context) {
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b084      	sub	sp, #16
 800d130:	af00      	add	r7, sp, #0
 800d132:	60f8      	str	r0, [r7, #12]
 800d134:	60b9      	str	r1, [r7, #8]
 800d136:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "\33[2J");
 800d138:	4903      	ldr	r1, [pc, #12]	; (800d148 <onClearCLI+0x1c>)
 800d13a:	68f8      	ldr	r0, [r7, #12]
 800d13c:	f7ff ff66 	bl	800d00c <cli_printf>
}
 800d140:	bf00      	nop
 800d142:	3710      	adds	r7, #16
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}
 800d148:	0801e80c 	.word	0x0801e80c

0800d14c <debug_scd4x_PM25>:

void debug_scd4x_PM25(EmbeddedCli *cli, char *args, void *context) {
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b092      	sub	sp, #72	; 0x48
 800d150:	af00      	add	r7, sp, #0
 800d152:	60f8      	str	r0, [r7, #12]
 800d154:	60b9      	str	r1, [r7, #8]
 800d156:	607a      	str	r2, [r7, #4]
	  const char *newLine = "\r\n";
 800d158:	4b24      	ldr	r3, [pc, #144]	; (800d1ec <debug_scd4x_PM25+0xa0>)
 800d15a:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Do you want to enable debug for scd4x and PM y/n?");
 800d15c:	4924      	ldr	r1, [pc, #144]	; (800d1f0 <debug_scd4x_PM25+0xa4>)
 800d15e:	68f8      	ldr	r0, [r7, #12]
 800d160:	f7ff ff54 	bl	800d00c <cli_printf>

	cli_other = 1;
 800d164:	4b23      	ldr	r3, [pc, #140]	; (800d1f4 <debug_scd4x_PM25+0xa8>)
 800d166:	2201      	movs	r2, #1
 800d168:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 800d16a:	4b23      	ldr	r3, [pc, #140]	; (800d1f8 <debug_scd4x_PM25+0xac>)
 800d16c:	2200      	movs	r2, #0
 800d16e:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		receiveString(cli,buffer,sizeof(buffer));
 800d170:	f107 0310 	add.w	r3, r7, #16
 800d174:	2232      	movs	r2, #50	; 0x32
 800d176:	4619      	mov	r1, r3
 800d178:	68f8      	ldr	r0, [r7, #12]
 800d17a:	f7ff ff89 	bl	800d090 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800d17e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d180:	f7f3 f838 	bl	80001f4 <strlen>
 800d184:	4603      	mov	r3, r0
 800d186:	b29a      	uxth	r2, r3
 800d188:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d18c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d18e:	481b      	ldr	r0, [pc, #108]	; (800d1fc <debug_scd4x_PM25+0xb0>)
 800d190:	f7fc fca2 	bl	8009ad8 <HAL_UART_Transmit>


		if(strstr(buffer, "y"))
 800d194:	f107 0310 	add.w	r3, r7, #16
 800d198:	2179      	movs	r1, #121	; 0x79
 800d19a:	4618      	mov	r0, r3
 800d19c:	f00d fafc 	bl	801a798 <strchr>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d007      	beq.n	800d1b6 <debug_scd4x_PM25+0x6a>
		{
			debug_scd_pm=1;
 800d1a6:	4b16      	ldr	r3, [pc, #88]	; (800d200 <debug_scd4x_PM25+0xb4>)
 800d1a8:	2201      	movs	r2, #1
 800d1aa:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"Debug enabled");
 800d1ac:	4915      	ldr	r1, [pc, #84]	; (800d204 <debug_scd4x_PM25+0xb8>)
 800d1ae:	68f8      	ldr	r0, [r7, #12]
 800d1b0:	f7ff ff2c 	bl	800d00c <cli_printf>
 800d1b4:	e00f      	b.n	800d1d6 <debug_scd4x_PM25+0x8a>
		}
		else if(strstr(buffer, "n"))
 800d1b6:	f107 0310 	add.w	r3, r7, #16
 800d1ba:	216e      	movs	r1, #110	; 0x6e
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f00d faeb 	bl	801a798 <strchr>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d006      	beq.n	800d1d6 <debug_scd4x_PM25+0x8a>
		{
			debug_scd_pm=0;
 800d1c8:	4b0d      	ldr	r3, [pc, #52]	; (800d200 <debug_scd4x_PM25+0xb4>)
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"Debug disabled");
 800d1ce:	490e      	ldr	r1, [pc, #56]	; (800d208 <debug_scd4x_PM25+0xbc>)
 800d1d0:	68f8      	ldr	r0, [r7, #12]
 800d1d2:	f7ff ff1b 	bl	800d00c <cli_printf>
		}


		flag_cli = 0;
 800d1d6:	4b08      	ldr	r3, [pc, #32]	; (800d1f8 <debug_scd4x_PM25+0xac>)
 800d1d8:	2200      	movs	r2, #0
 800d1da:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 800d1dc:	4b05      	ldr	r3, [pc, #20]	; (800d1f4 <debug_scd4x_PM25+0xa8>)
 800d1de:	2200      	movs	r2, #0
 800d1e0:	701a      	strb	r2, [r3, #0]
}
 800d1e2:	bf00      	nop
 800d1e4:	3748      	adds	r7, #72	; 0x48
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}
 800d1ea:	bf00      	nop
 800d1ec:	0801e814 	.word	0x0801e814
 800d1f0:	0801e818 	.word	0x0801e818
 800d1f4:	200009be 	.word	0x200009be
 800d1f8:	200009bf 	.word	0x200009bf
 800d1fc:	20000900 	.word	0x20000900
 800d200:	20000500 	.word	0x20000500
 800d204:	0801e84c 	.word	0x0801e84c
 800d208:	0801e85c 	.word	0x0801e85c

0800d20c <DeviceSignature>:


void DeviceSignature(EmbeddedCli *cli, char *args, void *context) {
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b084      	sub	sp, #16
 800d210:	af00      	add	r7, sp, #0
 800d212:	60f8      	str	r0, [r7, #12]
 800d214:	60b9      	str	r1, [r7, #8]
 800d216:	607a      	str	r2, [r7, #4]

//	cli_printf(cli,"Device ID/Signature: TF241_0x%04X.",_ID_GetSignature());

	cli_printf(cli,"Device ID/Signature: TF241_%s.",	ver_GetUid());
 800d218:	f7f4 fb64 	bl	80018e4 <ver_GetUid>
 800d21c:	4603      	mov	r3, r0
 800d21e:	461a      	mov	r2, r3
 800d220:	4903      	ldr	r1, [pc, #12]	; (800d230 <DeviceSignature+0x24>)
 800d222:	68f8      	ldr	r0, [r7, #12]
 800d224:	f7ff fef2 	bl	800d00c <cli_printf>
}
 800d228:	bf00      	nop
 800d22a:	3710      	adds	r7, #16
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}
 800d230:	0801e86c 	.word	0x0801e86c

0800d234 <SetID>:

void SetID(EmbeddedCli *cli, char *args, void *context) {
 800d234:	b580      	push	{r7, lr}
 800d236:	b092      	sub	sp, #72	; 0x48
 800d238:	af00      	add	r7, sp, #0
 800d23a:	60f8      	str	r0, [r7, #12]
 800d23c:	60b9      	str	r1, [r7, #8]
 800d23e:	607a      	str	r2, [r7, #4]
	uint16_t len;
    const char *newLine = "\r\n";
 800d240:	4b2d      	ldr	r3, [pc, #180]	; (800d2f8 <SetID+0xc4>)
 800d242:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800d244:	492d      	ldr	r1, [pc, #180]	; (800d2fc <SetID+0xc8>)
 800d246:	68f8      	ldr	r0, [r7, #12]
 800d248:	f7ff fee0 	bl	800d00c <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800d24c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d24e:	f7f2 ffd1 	bl	80001f4 <strlen>
 800d252:	4603      	mov	r3, r0
 800d254:	b29a      	uxth	r2, r3
 800d256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d25a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d25c:	4828      	ldr	r0, [pc, #160]	; (800d300 <SetID+0xcc>)
 800d25e:	f7fc fc3b 	bl	8009ad8 <HAL_UART_Transmit>
	cli_printf(cli,"Set the ID. Keep ID below 30 characters");
 800d262:	4928      	ldr	r1, [pc, #160]	; (800d304 <SetID+0xd0>)
 800d264:	68f8      	ldr	r0, [r7, #12]
 800d266:	f7ff fed1 	bl	800d00c <cli_printf>
	cli_other = 1;
 800d26a:	4b27      	ldr	r3, [pc, #156]	; (800d308 <SetID+0xd4>)
 800d26c:	2201      	movs	r2, #1
 800d26e:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800d270:	4b26      	ldr	r3, [pc, #152]	; (800d30c <SetID+0xd8>)
 800d272:	2200      	movs	r2, #0
 800d274:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800d276:	f107 0310 	add.w	r3, r7, #16
 800d27a:	2232      	movs	r2, #50	; 0x32
 800d27c:	4619      	mov	r1, r3
 800d27e:	68f8      	ldr	r0, [r7, #12]
 800d280:	f7ff ff06 	bl	800d090 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800d284:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d286:	f7f2 ffb5 	bl	80001f4 <strlen>
 800d28a:	4603      	mov	r3, r0
 800d28c:	b29a      	uxth	r2, r3
 800d28e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d292:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d294:	481a      	ldr	r0, [pc, #104]	; (800d300 <SetID+0xcc>)
 800d296:	f7fc fc1f 	bl	8009ad8 <HAL_UART_Transmit>

	len = strlen(buffer);
 800d29a:	f107 0310 	add.w	r3, r7, #16
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f7f2 ffa8 	bl	80001f4 <strlen>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	if(len < 30)
 800d2aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d2ae:	2b1d      	cmp	r3, #29
 800d2b0:	d814      	bhi.n	800d2dc <SetID+0xa8>
	{
	   if(buffer[0] != '\0' )
 800d2b2:	7c3b      	ldrb	r3, [r7, #16]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d015      	beq.n	800d2e4 <SetID+0xb0>
		{if(buffer != NULL)
		{
			strcpy(_Flash_Packet.id,buffer);
 800d2b8:	f107 0310 	add.w	r3, r7, #16
 800d2bc:	4619      	mov	r1, r3
 800d2be:	4814      	ldr	r0, [pc, #80]	; (800d310 <SetID+0xdc>)
 800d2c0:	f00d fa77 	bl	801a7b2 <strcpy>
			set_param_flags();
 800d2c4:	4b13      	ldr	r3, [pc, #76]	; (800d314 <SetID+0xe0>)
 800d2c6:	2201      	movs	r2, #1
 800d2c8:	701a      	strb	r2, [r3, #0]
 800d2ca:	4b13      	ldr	r3, [pc, #76]	; (800d318 <SetID+0xe4>)
 800d2cc:	2201      	movs	r2, #1
 800d2ce:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"ID is set to: %s",_Flash_Packet.id);
 800d2d0:	4a0f      	ldr	r2, [pc, #60]	; (800d310 <SetID+0xdc>)
 800d2d2:	4912      	ldr	r1, [pc, #72]	; (800d31c <SetID+0xe8>)
 800d2d4:	68f8      	ldr	r0, [r7, #12]
 800d2d6:	f7ff fe99 	bl	800d00c <cli_printf>
 800d2da:	e003      	b.n	800d2e4 <SetID+0xb0>
		}
		}
	}
	else
	{
		cli_printf(cli,"ID is too long");
 800d2dc:	4910      	ldr	r1, [pc, #64]	; (800d320 <SetID+0xec>)
 800d2de:	68f8      	ldr	r0, [r7, #12]
 800d2e0:	f7ff fe94 	bl	800d00c <cli_printf>
	}

	flag_cli = 0;
 800d2e4:	4b09      	ldr	r3, [pc, #36]	; (800d30c <SetID+0xd8>)
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800d2ea:	4b07      	ldr	r3, [pc, #28]	; (800d308 <SetID+0xd4>)
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	701a      	strb	r2, [r3, #0]

}
 800d2f0:	bf00      	nop
 800d2f2:	3748      	adds	r7, #72	; 0x48
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}
 800d2f8:	0801e814 	.word	0x0801e814
 800d2fc:	0801e88c 	.word	0x0801e88c
 800d300:	20000900 	.word	0x20000900
 800d304:	0801e8c4 	.word	0x0801e8c4
 800d308:	200009be 	.word	0x200009be
 800d30c:	200009bf 	.word	0x200009bf
 800d310:	200003fd 	.word	0x200003fd
 800d314:	20000501 	.word	0x20000501
 800d318:	20000502 	.word	0x20000502
 800d31c:	0801e8ec 	.word	0x0801e8ec
 800d320:	0801e900 	.word	0x0801e900

0800d324 <SetLocation>:

void SetLocation(EmbeddedCli *cli, char *args, void *context) {
 800d324:	b580      	push	{r7, lr}
 800d326:	b092      	sub	sp, #72	; 0x48
 800d328:	af00      	add	r7, sp, #0
 800d32a:	60f8      	str	r0, [r7, #12]
 800d32c:	60b9      	str	r1, [r7, #8]
 800d32e:	607a      	str	r2, [r7, #4]
	uint16_t len;
    const char *newLine = "\r\n";
 800d330:	4b2d      	ldr	r3, [pc, #180]	; (800d3e8 <SetLocation+0xc4>)
 800d332:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800d334:	492d      	ldr	r1, [pc, #180]	; (800d3ec <SetLocation+0xc8>)
 800d336:	68f8      	ldr	r0, [r7, #12]
 800d338:	f7ff fe68 	bl	800d00c <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800d33c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d33e:	f7f2 ff59 	bl	80001f4 <strlen>
 800d342:	4603      	mov	r3, r0
 800d344:	b29a      	uxth	r2, r3
 800d346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d34a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d34c:	4828      	ldr	r0, [pc, #160]	; (800d3f0 <SetLocation+0xcc>)
 800d34e:	f7fc fbc3 	bl	8009ad8 <HAL_UART_Transmit>
	cli_printf(cli,"Set the Location. Keep Location below 15 characters");
 800d352:	4928      	ldr	r1, [pc, #160]	; (800d3f4 <SetLocation+0xd0>)
 800d354:	68f8      	ldr	r0, [r7, #12]
 800d356:	f7ff fe59 	bl	800d00c <cli_printf>
	cli_other = 1;
 800d35a:	4b27      	ldr	r3, [pc, #156]	; (800d3f8 <SetLocation+0xd4>)
 800d35c:	2201      	movs	r2, #1
 800d35e:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800d360:	4b26      	ldr	r3, [pc, #152]	; (800d3fc <SetLocation+0xd8>)
 800d362:	2200      	movs	r2, #0
 800d364:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800d366:	f107 0310 	add.w	r3, r7, #16
 800d36a:	2232      	movs	r2, #50	; 0x32
 800d36c:	4619      	mov	r1, r3
 800d36e:	68f8      	ldr	r0, [r7, #12]
 800d370:	f7ff fe8e 	bl	800d090 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800d374:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d376:	f7f2 ff3d 	bl	80001f4 <strlen>
 800d37a:	4603      	mov	r3, r0
 800d37c:	b29a      	uxth	r2, r3
 800d37e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d382:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d384:	481a      	ldr	r0, [pc, #104]	; (800d3f0 <SetLocation+0xcc>)
 800d386:	f7fc fba7 	bl	8009ad8 <HAL_UART_Transmit>

	len = strlen(buffer);
 800d38a:	f107 0310 	add.w	r3, r7, #16
 800d38e:	4618      	mov	r0, r3
 800d390:	f7f2 ff30 	bl	80001f4 <strlen>
 800d394:	4603      	mov	r3, r0
 800d396:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	if(len < 15)
 800d39a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d39e:	2b0e      	cmp	r3, #14
 800d3a0:	d814      	bhi.n	800d3cc <SetLocation+0xa8>
	{
		if(buffer[0] != '\0' )
 800d3a2:	7c3b      	ldrb	r3, [r7, #16]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d015      	beq.n	800d3d4 <SetLocation+0xb0>
		   {
		if(buffer != NULL)
		{
			strcpy(_Flash_Packet.location,buffer);
 800d3a8:	f107 0310 	add.w	r3, r7, #16
 800d3ac:	4619      	mov	r1, r3
 800d3ae:	4814      	ldr	r0, [pc, #80]	; (800d400 <SetLocation+0xdc>)
 800d3b0:	f00d f9ff 	bl	801a7b2 <strcpy>
			set_param_flags();
 800d3b4:	4b13      	ldr	r3, [pc, #76]	; (800d404 <SetLocation+0xe0>)
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	701a      	strb	r2, [r3, #0]
 800d3ba:	4b13      	ldr	r3, [pc, #76]	; (800d408 <SetLocation+0xe4>)
 800d3bc:	2201      	movs	r2, #1
 800d3be:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"Location is set to: %s",_Flash_Packet.location);
 800d3c0:	4a0f      	ldr	r2, [pc, #60]	; (800d400 <SetLocation+0xdc>)
 800d3c2:	4912      	ldr	r1, [pc, #72]	; (800d40c <SetLocation+0xe8>)
 800d3c4:	68f8      	ldr	r0, [r7, #12]
 800d3c6:	f7ff fe21 	bl	800d00c <cli_printf>
 800d3ca:	e003      	b.n	800d3d4 <SetLocation+0xb0>
		}
		   }
	}
	else
	{
		cli_printf(cli,"Location is too long");
 800d3cc:	4910      	ldr	r1, [pc, #64]	; (800d410 <SetLocation+0xec>)
 800d3ce:	68f8      	ldr	r0, [r7, #12]
 800d3d0:	f7ff fe1c 	bl	800d00c <cli_printf>
	}

	flag_cli = 0;
 800d3d4:	4b09      	ldr	r3, [pc, #36]	; (800d3fc <SetLocation+0xd8>)
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800d3da:	4b07      	ldr	r3, [pc, #28]	; (800d3f8 <SetLocation+0xd4>)
 800d3dc:	2200      	movs	r2, #0
 800d3de:	701a      	strb	r2, [r3, #0]

}
 800d3e0:	bf00      	nop
 800d3e2:	3748      	adds	r7, #72	; 0x48
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}
 800d3e8:	0801e814 	.word	0x0801e814
 800d3ec:	0801e88c 	.word	0x0801e88c
 800d3f0:	20000900 	.word	0x20000900
 800d3f4:	0801e910 	.word	0x0801e910
 800d3f8:	200009be 	.word	0x200009be
 800d3fc:	200009bf 	.word	0x200009bf
 800d400:	2000042f 	.word	0x2000042f
 800d404:	20000501 	.word	0x20000501
 800d408:	20000502 	.word	0x20000502
 800d40c:	0801e944 	.word	0x0801e944
 800d410:	0801e95c 	.word	0x0801e95c

0800d414 <Setname>:

void Setname(EmbeddedCli *cli, char *args, void *context) {
 800d414:	b580      	push	{r7, lr}
 800d416:	b092      	sub	sp, #72	; 0x48
 800d418:	af00      	add	r7, sp, #0
 800d41a:	60f8      	str	r0, [r7, #12]
 800d41c:	60b9      	str	r1, [r7, #8]
 800d41e:	607a      	str	r2, [r7, #4]
	uint16_t len;
    const char *newLine = "\r\n";
 800d420:	4b2d      	ldr	r3, [pc, #180]	; (800d4d8 <Setname+0xc4>)
 800d422:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800d424:	492d      	ldr	r1, [pc, #180]	; (800d4dc <Setname+0xc8>)
 800d426:	68f8      	ldr	r0, [r7, #12]
 800d428:	f7ff fdf0 	bl	800d00c <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800d42c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d42e:	f7f2 fee1 	bl	80001f4 <strlen>
 800d432:	4603      	mov	r3, r0
 800d434:	b29a      	uxth	r2, r3
 800d436:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d43a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d43c:	4828      	ldr	r0, [pc, #160]	; (800d4e0 <Setname+0xcc>)
 800d43e:	f7fc fb4b 	bl	8009ad8 <HAL_UART_Transmit>
	cli_printf(cli,"Set the name. Keep name below 15 characters");
 800d442:	4928      	ldr	r1, [pc, #160]	; (800d4e4 <Setname+0xd0>)
 800d444:	68f8      	ldr	r0, [r7, #12]
 800d446:	f7ff fde1 	bl	800d00c <cli_printf>
	cli_other = 1;
 800d44a:	4b27      	ldr	r3, [pc, #156]	; (800d4e8 <Setname+0xd4>)
 800d44c:	2201      	movs	r2, #1
 800d44e:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800d450:	4b26      	ldr	r3, [pc, #152]	; (800d4ec <Setname+0xd8>)
 800d452:	2200      	movs	r2, #0
 800d454:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800d456:	f107 0310 	add.w	r3, r7, #16
 800d45a:	2232      	movs	r2, #50	; 0x32
 800d45c:	4619      	mov	r1, r3
 800d45e:	68f8      	ldr	r0, [r7, #12]
 800d460:	f7ff fe16 	bl	800d090 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800d464:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d466:	f7f2 fec5 	bl	80001f4 <strlen>
 800d46a:	4603      	mov	r3, r0
 800d46c:	b29a      	uxth	r2, r3
 800d46e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d472:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d474:	481a      	ldr	r0, [pc, #104]	; (800d4e0 <Setname+0xcc>)
 800d476:	f7fc fb2f 	bl	8009ad8 <HAL_UART_Transmit>

	len = strlen(buffer);
 800d47a:	f107 0310 	add.w	r3, r7, #16
 800d47e:	4618      	mov	r0, r3
 800d480:	f7f2 feb8 	bl	80001f4 <strlen>
 800d484:	4603      	mov	r3, r0
 800d486:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	if(len < 15)
 800d48a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d48e:	2b0e      	cmp	r3, #14
 800d490:	d814      	bhi.n	800d4bc <Setname+0xa8>
	{
		   if(buffer[0] != '\0' )
 800d492:	7c3b      	ldrb	r3, [r7, #16]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d015      	beq.n	800d4c4 <Setname+0xb0>
		   {
		if(buffer != NULL)
		{
			strcpy(_Flash_Packet.name,buffer);
 800d498:	f107 0310 	add.w	r3, r7, #16
 800d49c:	4619      	mov	r1, r3
 800d49e:	4814      	ldr	r0, [pc, #80]	; (800d4f0 <Setname+0xdc>)
 800d4a0:	f00d f987 	bl	801a7b2 <strcpy>
			set_param_flags();
 800d4a4:	4b13      	ldr	r3, [pc, #76]	; (800d4f4 <Setname+0xe0>)
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	701a      	strb	r2, [r3, #0]
 800d4aa:	4b13      	ldr	r3, [pc, #76]	; (800d4f8 <Setname+0xe4>)
 800d4ac:	2201      	movs	r2, #1
 800d4ae:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"name is set to: %s",_Flash_Packet.name);
 800d4b0:	4a0f      	ldr	r2, [pc, #60]	; (800d4f0 <Setname+0xdc>)
 800d4b2:	4912      	ldr	r1, [pc, #72]	; (800d4fc <Setname+0xe8>)
 800d4b4:	68f8      	ldr	r0, [r7, #12]
 800d4b6:	f7ff fda9 	bl	800d00c <cli_printf>
 800d4ba:	e003      	b.n	800d4c4 <Setname+0xb0>
		}
		   }
	}
	else
	{
		cli_printf(cli,"name is too long");
 800d4bc:	4910      	ldr	r1, [pc, #64]	; (800d500 <Setname+0xec>)
 800d4be:	68f8      	ldr	r0, [r7, #12]
 800d4c0:	f7ff fda4 	bl	800d00c <cli_printf>
	}

	flag_cli = 0;
 800d4c4:	4b09      	ldr	r3, [pc, #36]	; (800d4ec <Setname+0xd8>)
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800d4ca:	4b07      	ldr	r3, [pc, #28]	; (800d4e8 <Setname+0xd4>)
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	701a      	strb	r2, [r3, #0]

}
 800d4d0:	bf00      	nop
 800d4d2:	3748      	adds	r7, #72	; 0x48
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}
 800d4d8:	0801e814 	.word	0x0801e814
 800d4dc:	0801e88c 	.word	0x0801e88c
 800d4e0:	20000900 	.word	0x20000900
 800d4e4:	0801e974 	.word	0x0801e974
 800d4e8:	200009be 	.word	0x200009be
 800d4ec:	200009bf 	.word	0x200009bf
 800d4f0:	20000461 	.word	0x20000461
 800d4f4:	20000501 	.word	0x20000501
 800d4f8:	20000502 	.word	0x20000502
 800d4fc:	0801e9a0 	.word	0x0801e9a0
 800d500:	0801e9b4 	.word	0x0801e9b4

0800d504 <Setgroup>:

void Setgroup(EmbeddedCli *cli, char *args, void *context) {
 800d504:	b580      	push	{r7, lr}
 800d506:	b092      	sub	sp, #72	; 0x48
 800d508:	af00      	add	r7, sp, #0
 800d50a:	60f8      	str	r0, [r7, #12]
 800d50c:	60b9      	str	r1, [r7, #8]
 800d50e:	607a      	str	r2, [r7, #4]
	uint16_t len;
    const char *newLine = "\r\n";
 800d510:	4b2d      	ldr	r3, [pc, #180]	; (800d5c8 <Setgroup+0xc4>)
 800d512:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800d514:	492d      	ldr	r1, [pc, #180]	; (800d5cc <Setgroup+0xc8>)
 800d516:	68f8      	ldr	r0, [r7, #12]
 800d518:	f7ff fd78 	bl	800d00c <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800d51c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d51e:	f7f2 fe69 	bl	80001f4 <strlen>
 800d522:	4603      	mov	r3, r0
 800d524:	b29a      	uxth	r2, r3
 800d526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d52a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d52c:	4828      	ldr	r0, [pc, #160]	; (800d5d0 <Setgroup+0xcc>)
 800d52e:	f7fc fad3 	bl	8009ad8 <HAL_UART_Transmit>
	cli_printf(cli,"Set the group. Keep name below 15 characters");
 800d532:	4928      	ldr	r1, [pc, #160]	; (800d5d4 <Setgroup+0xd0>)
 800d534:	68f8      	ldr	r0, [r7, #12]
 800d536:	f7ff fd69 	bl	800d00c <cli_printf>
	cli_other = 1;
 800d53a:	4b27      	ldr	r3, [pc, #156]	; (800d5d8 <Setgroup+0xd4>)
 800d53c:	2201      	movs	r2, #1
 800d53e:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800d540:	4b26      	ldr	r3, [pc, #152]	; (800d5dc <Setgroup+0xd8>)
 800d542:	2200      	movs	r2, #0
 800d544:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800d546:	f107 0310 	add.w	r3, r7, #16
 800d54a:	2232      	movs	r2, #50	; 0x32
 800d54c:	4619      	mov	r1, r3
 800d54e:	68f8      	ldr	r0, [r7, #12]
 800d550:	f7ff fd9e 	bl	800d090 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800d554:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d556:	f7f2 fe4d 	bl	80001f4 <strlen>
 800d55a:	4603      	mov	r3, r0
 800d55c:	b29a      	uxth	r2, r3
 800d55e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d562:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d564:	481a      	ldr	r0, [pc, #104]	; (800d5d0 <Setgroup+0xcc>)
 800d566:	f7fc fab7 	bl	8009ad8 <HAL_UART_Transmit>

	len = strlen(buffer);
 800d56a:	f107 0310 	add.w	r3, r7, #16
 800d56e:	4618      	mov	r0, r3
 800d570:	f7f2 fe40 	bl	80001f4 <strlen>
 800d574:	4603      	mov	r3, r0
 800d576:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	if(len < 15)
 800d57a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d57e:	2b0e      	cmp	r3, #14
 800d580:	d814      	bhi.n	800d5ac <Setgroup+0xa8>
	{
		   if(buffer[0] != '\0' )
 800d582:	7c3b      	ldrb	r3, [r7, #16]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d015      	beq.n	800d5b4 <Setgroup+0xb0>
		   {
		if(buffer != NULL)
		{
			strcpy(_Flash_Packet.group,buffer);
 800d588:	f107 0310 	add.w	r3, r7, #16
 800d58c:	4619      	mov	r1, r3
 800d58e:	4814      	ldr	r0, [pc, #80]	; (800d5e0 <Setgroup+0xdc>)
 800d590:	f00d f90f 	bl	801a7b2 <strcpy>
			set_param_flags();
 800d594:	4b13      	ldr	r3, [pc, #76]	; (800d5e4 <Setgroup+0xe0>)
 800d596:	2201      	movs	r2, #1
 800d598:	701a      	strb	r2, [r3, #0]
 800d59a:	4b13      	ldr	r3, [pc, #76]	; (800d5e8 <Setgroup+0xe4>)
 800d59c:	2201      	movs	r2, #1
 800d59e:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"group is set to: %s",_Flash_Packet.group);
 800d5a0:	4a0f      	ldr	r2, [pc, #60]	; (800d5e0 <Setgroup+0xdc>)
 800d5a2:	4912      	ldr	r1, [pc, #72]	; (800d5ec <Setgroup+0xe8>)
 800d5a4:	68f8      	ldr	r0, [r7, #12]
 800d5a6:	f7ff fd31 	bl	800d00c <cli_printf>
 800d5aa:	e003      	b.n	800d5b4 <Setgroup+0xb0>
		}
		   }
	}
	else
	{
		cli_printf(cli,"group is too long");
 800d5ac:	4910      	ldr	r1, [pc, #64]	; (800d5f0 <Setgroup+0xec>)
 800d5ae:	68f8      	ldr	r0, [r7, #12]
 800d5b0:	f7ff fd2c 	bl	800d00c <cli_printf>
	}

	flag_cli = 0;
 800d5b4:	4b09      	ldr	r3, [pc, #36]	; (800d5dc <Setgroup+0xd8>)
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800d5ba:	4b07      	ldr	r3, [pc, #28]	; (800d5d8 <Setgroup+0xd4>)
 800d5bc:	2200      	movs	r2, #0
 800d5be:	701a      	strb	r2, [r3, #0]

}
 800d5c0:	bf00      	nop
 800d5c2:	3748      	adds	r7, #72	; 0x48
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}
 800d5c8:	0801e814 	.word	0x0801e814
 800d5cc:	0801e88c 	.word	0x0801e88c
 800d5d0:	20000900 	.word	0x20000900
 800d5d4:	0801e9c8 	.word	0x0801e9c8
 800d5d8:	200009be 	.word	0x200009be
 800d5dc:	200009bf 	.word	0x200009bf
 800d5e0:	20000493 	.word	0x20000493
 800d5e4:	20000501 	.word	0x20000501
 800d5e8:	20000502 	.word	0x20000502
 800d5ec:	0801e9f8 	.word	0x0801e9f8
 800d5f0:	0801ea0c 	.word	0x0801ea0c

0800d5f4 <GetID>:




void GetID(EmbeddedCli *cli, char *args, void *context) {
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b084      	sub	sp, #16
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	60f8      	str	r0, [r7, #12]
 800d5fc:	60b9      	str	r1, [r7, #8]
 800d5fe:	607a      	str	r2, [r7, #4]
	cli_printf(cli,"ID: %s",	_Flash_Packet.id);
 800d600:	4a04      	ldr	r2, [pc, #16]	; (800d614 <GetID+0x20>)
 800d602:	4905      	ldr	r1, [pc, #20]	; (800d618 <GetID+0x24>)
 800d604:	68f8      	ldr	r0, [r7, #12]
 800d606:	f7ff fd01 	bl	800d00c <cli_printf>
}
 800d60a:	bf00      	nop
 800d60c:	3710      	adds	r7, #16
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}
 800d612:	bf00      	nop
 800d614:	200003fd 	.word	0x200003fd
 800d618:	0801ea20 	.word	0x0801ea20

0800d61c <GetLocation>:

void GetLocation(EmbeddedCli *cli, char *args, void *context) {
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b084      	sub	sp, #16
 800d620:	af00      	add	r7, sp, #0
 800d622:	60f8      	str	r0, [r7, #12]
 800d624:	60b9      	str	r1, [r7, #8]
 800d626:	607a      	str	r2, [r7, #4]
	cli_printf(cli,"Location: %s",	_Flash_Packet.location);
 800d628:	4a04      	ldr	r2, [pc, #16]	; (800d63c <GetLocation+0x20>)
 800d62a:	4905      	ldr	r1, [pc, #20]	; (800d640 <GetLocation+0x24>)
 800d62c:	68f8      	ldr	r0, [r7, #12]
 800d62e:	f7ff fced 	bl	800d00c <cli_printf>

}
 800d632:	bf00      	nop
 800d634:	3710      	adds	r7, #16
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}
 800d63a:	bf00      	nop
 800d63c:	2000042f 	.word	0x2000042f
 800d640:	0801ea28 	.word	0x0801ea28

0800d644 <Getname>:

void Getname(EmbeddedCli *cli, char *args, void *context) {
 800d644:	b580      	push	{r7, lr}
 800d646:	b084      	sub	sp, #16
 800d648:	af00      	add	r7, sp, #0
 800d64a:	60f8      	str	r0, [r7, #12]
 800d64c:	60b9      	str	r1, [r7, #8]
 800d64e:	607a      	str	r2, [r7, #4]
	cli_printf(cli,"Name: %s",	_Flash_Packet.name);
 800d650:	4a04      	ldr	r2, [pc, #16]	; (800d664 <Getname+0x20>)
 800d652:	4905      	ldr	r1, [pc, #20]	; (800d668 <Getname+0x24>)
 800d654:	68f8      	ldr	r0, [r7, #12]
 800d656:	f7ff fcd9 	bl	800d00c <cli_printf>

}
 800d65a:	bf00      	nop
 800d65c:	3710      	adds	r7, #16
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}
 800d662:	bf00      	nop
 800d664:	20000461 	.word	0x20000461
 800d668:	0801ea38 	.word	0x0801ea38

0800d66c <Getgroup>:

void Getgroup(EmbeddedCli *cli, char *args, void *context) {
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b084      	sub	sp, #16
 800d670:	af00      	add	r7, sp, #0
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	60b9      	str	r1, [r7, #8]
 800d676:	607a      	str	r2, [r7, #4]
	cli_printf(cli,"Group: %s",	_Flash_Packet.group);
 800d678:	4a04      	ldr	r2, [pc, #16]	; (800d68c <Getgroup+0x20>)
 800d67a:	4905      	ldr	r1, [pc, #20]	; (800d690 <Getgroup+0x24>)
 800d67c:	68f8      	ldr	r0, [r7, #12]
 800d67e:	f7ff fcc5 	bl	800d00c <cli_printf>

}
 800d682:	bf00      	nop
 800d684:	3710      	adds	r7, #16
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}
 800d68a:	bf00      	nop
 800d68c:	20000493 	.word	0x20000493
 800d690:	0801ea44 	.word	0x0801ea44

0800d694 <SetDate>:





void SetDate(EmbeddedCli *cli, char *args, void *context) {
 800d694:	b580      	push	{r7, lr}
 800d696:	b09a      	sub	sp, #104	; 0x68
 800d698:	af02      	add	r7, sp, #8
 800d69a:	60f8      	str	r0, [r7, #12]
 800d69c:	60b9      	str	r1, [r7, #8]
 800d69e:	607a      	str	r2, [r7, #4]
    const char *newLine = "\r\n";
 800d6a0:	4b26      	ldr	r3, [pc, #152]	; (800d73c <SetDate+0xa8>)
 800d6a2:	65fb      	str	r3, [r7, #92]	; 0x5c
	cli_printf(cli,"Set date in following format: day:month:year eg:(15:1:23).");
 800d6a4:	4926      	ldr	r1, [pc, #152]	; (800d740 <SetDate+0xac>)
 800d6a6:	68f8      	ldr	r0, [r7, #12]
 800d6a8:	f7ff fcb0 	bl	800d00c <cli_printf>
	cli_other = 1;
 800d6ac:	4b25      	ldr	r3, [pc, #148]	; (800d744 <SetDate+0xb0>)
 800d6ae:	2201      	movs	r2, #1
 800d6b0:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800d6b2:	4b25      	ldr	r3, [pc, #148]	; (800d748 <SetDate+0xb4>)
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800d6b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d6bc:	2232      	movs	r2, #50	; 0x32
 800d6be:	4619      	mov	r1, r3
 800d6c0:	68f8      	ldr	r0, [r7, #12]
 800d6c2:	f7ff fce5 	bl	800d090 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800d6c6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800d6c8:	f7f2 fd94 	bl	80001f4 <strlen>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	b29a      	uxth	r2, r3
 800d6d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d6d4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d6d6:	481d      	ldr	r0, [pc, #116]	; (800d74c <SetDate+0xb8>)
 800d6d8:	f7fc f9fe 	bl	8009ad8 <HAL_UART_Transmit>
	if(buffer[0] != '\0' )
 800d6dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d004      	beq.n	800d6ee <SetDate+0x5a>
	{
	Set_Date(buffer);
 800d6e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f002 fdaf 	bl	801024c <Set_Date>
	}
	flag_cli = 0;
 800d6ee:	4b16      	ldr	r3, [pc, #88]	; (800d748 <SetDate+0xb4>)
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800d6f4:	4b13      	ldr	r3, [pc, #76]	; (800d744 <SetDate+0xb0>)
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	701a      	strb	r2, [r3, #0]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800d6fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d6fe:	2200      	movs	r2, #0
 800d700:	4619      	mov	r1, r3
 800d702:	4813      	ldr	r0, [pc, #76]	; (800d750 <SetDate+0xbc>)
 800d704:	f7fa fa7c 	bl	8007c00 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800d708:	f107 0310 	add.w	r3, r7, #16
 800d70c:	2200      	movs	r2, #0
 800d70e:	4619      	mov	r1, r3
 800d710:	480f      	ldr	r0, [pc, #60]	; (800d750 <SetDate+0xbc>)
 800d712:	f7fa f993 	bl	8007a3c <HAL_RTC_GetTime>
	cli_printf(cli,"Set Date: %02d.%02d.%02d",gDate.Date,gDate.Month,gDate.Year);
 800d716:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d71a:	461a      	mov	r2, r3
 800d71c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d720:	4619      	mov	r1, r3
 800d722:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d726:	9300      	str	r3, [sp, #0]
 800d728:	460b      	mov	r3, r1
 800d72a:	490a      	ldr	r1, [pc, #40]	; (800d754 <SetDate+0xc0>)
 800d72c:	68f8      	ldr	r0, [r7, #12]
 800d72e:	f7ff fc6d 	bl	800d00c <cli_printf>

}
 800d732:	bf00      	nop
 800d734:	3760      	adds	r7, #96	; 0x60
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}
 800d73a:	bf00      	nop
 800d73c:	0801e814 	.word	0x0801e814
 800d740:	0801ea50 	.word	0x0801ea50
 800d744:	200009be 	.word	0x200009be
 800d748:	200009bf 	.word	0x200009bf
 800d74c:	20000900 	.word	0x20000900
 800d750:	20000814 	.word	0x20000814
 800d754:	0801ea8c 	.word	0x0801ea8c

0800d758 <SetTime>:

void SetTime(EmbeddedCli *cli, char *args, void *context) {
 800d758:	b580      	push	{r7, lr}
 800d75a:	b09a      	sub	sp, #104	; 0x68
 800d75c:	af02      	add	r7, sp, #8
 800d75e:	60f8      	str	r0, [r7, #12]
 800d760:	60b9      	str	r1, [r7, #8]
 800d762:	607a      	str	r2, [r7, #4]
    const char *newLine = "\r\n";
 800d764:	4b26      	ldr	r3, [pc, #152]	; (800d800 <SetTime+0xa8>)
 800d766:	65fb      	str	r3, [r7, #92]	; 0x5c
	cli_printf(cli,"Set time in following format: hours:minutes:seconds eg:(11:15:01).");
 800d768:	4926      	ldr	r1, [pc, #152]	; (800d804 <SetTime+0xac>)
 800d76a:	68f8      	ldr	r0, [r7, #12]
 800d76c:	f7ff fc4e 	bl	800d00c <cli_printf>
	cli_other = 1;
 800d770:	4b25      	ldr	r3, [pc, #148]	; (800d808 <SetTime+0xb0>)
 800d772:	2201      	movs	r2, #1
 800d774:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800d776:	4b25      	ldr	r3, [pc, #148]	; (800d80c <SetTime+0xb4>)
 800d778:	2200      	movs	r2, #0
 800d77a:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800d77c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d780:	2232      	movs	r2, #50	; 0x32
 800d782:	4619      	mov	r1, r3
 800d784:	68f8      	ldr	r0, [r7, #12]
 800d786:	f7ff fc83 	bl	800d090 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800d78a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800d78c:	f7f2 fd32 	bl	80001f4 <strlen>
 800d790:	4603      	mov	r3, r0
 800d792:	b29a      	uxth	r2, r3
 800d794:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d798:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d79a:	481d      	ldr	r0, [pc, #116]	; (800d810 <SetTime+0xb8>)
 800d79c:	f7fc f99c 	bl	8009ad8 <HAL_UART_Transmit>
	if(buffer[0] != '\0' )
 800d7a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d004      	beq.n	800d7b2 <SetTime+0x5a>
	{
	Set_Time(buffer);
 800d7a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f002 fded 	bl	801038c <Set_Time>
    }
	flag_cli = 0;
 800d7b2:	4b16      	ldr	r3, [pc, #88]	; (800d80c <SetTime+0xb4>)
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800d7b8:	4b13      	ldr	r3, [pc, #76]	; (800d808 <SetTime+0xb0>)
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	701a      	strb	r2, [r3, #0]
	set_alarm_Time = 1;
 800d7be:	4b15      	ldr	r3, [pc, #84]	; (800d814 <SetTime+0xbc>)
 800d7c0:	2201      	movs	r2, #1
 800d7c2:	701a      	strb	r2, [r3, #0]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800d7c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	4619      	mov	r1, r3
 800d7cc:	4812      	ldr	r0, [pc, #72]	; (800d818 <SetTime+0xc0>)
 800d7ce:	f7fa fa17 	bl	8007c00 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800d7d2:	f107 0310 	add.w	r3, r7, #16
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	4619      	mov	r1, r3
 800d7da:	480f      	ldr	r0, [pc, #60]	; (800d818 <SetTime+0xc0>)
 800d7dc:	f7fa f92e 	bl	8007a3c <HAL_RTC_GetTime>
	cli_printf(cli,"Set Time: %02d:%02d:%02d",gTime.Hours,gTime.Minutes,gTime.Seconds);
 800d7e0:	7c3b      	ldrb	r3, [r7, #16]
 800d7e2:	461a      	mov	r2, r3
 800d7e4:	7c7b      	ldrb	r3, [r7, #17]
 800d7e6:	4619      	mov	r1, r3
 800d7e8:	7cbb      	ldrb	r3, [r7, #18]
 800d7ea:	9300      	str	r3, [sp, #0]
 800d7ec:	460b      	mov	r3, r1
 800d7ee:	490b      	ldr	r1, [pc, #44]	; (800d81c <SetTime+0xc4>)
 800d7f0:	68f8      	ldr	r0, [r7, #12]
 800d7f2:	f7ff fc0b 	bl	800d00c <cli_printf>

}
 800d7f6:	bf00      	nop
 800d7f8:	3760      	adds	r7, #96	; 0x60
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}
 800d7fe:	bf00      	nop
 800d800:	0801e814 	.word	0x0801e814
 800d804:	0801eaa8 	.word	0x0801eaa8
 800d808:	200009be 	.word	0x200009be
 800d80c:	200009bf 	.word	0x200009bf
 800d810:	20000900 	.word	0x20000900
 800d814:	20000025 	.word	0x20000025
 800d818:	20000814 	.word	0x20000814
 800d81c:	0801eaec 	.word	0x0801eaec

0800d820 <GetDate>:

void GetDate(EmbeddedCli *cli, char *args, void *context) {
 800d820:	b580      	push	{r7, lr}
 800d822:	b08c      	sub	sp, #48	; 0x30
 800d824:	af02      	add	r7, sp, #8
 800d826:	60f8      	str	r0, [r7, #12]
 800d828:	60b9      	str	r1, [r7, #8]
 800d82a:	607a      	str	r2, [r7, #4]



	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800d82c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d830:	2200      	movs	r2, #0
 800d832:	4619      	mov	r1, r3
 800d834:	480f      	ldr	r0, [pc, #60]	; (800d874 <GetDate+0x54>)
 800d836:	f7fa f9e3 	bl	8007c00 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800d83a:	f107 0310 	add.w	r3, r7, #16
 800d83e:	2200      	movs	r2, #0
 800d840:	4619      	mov	r1, r3
 800d842:	480c      	ldr	r0, [pc, #48]	; (800d874 <GetDate+0x54>)
 800d844:	f7fa f8fa 	bl	8007a3c <HAL_RTC_GetTime>
	cli_printf(cli,"%02d.%02d.%02d",gDate.Date,gDate.Month,gDate.Year);
 800d848:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d84c:	461a      	mov	r2, r3
 800d84e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d852:	4619      	mov	r1, r3
 800d854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d858:	9300      	str	r3, [sp, #0]
 800d85a:	460b      	mov	r3, r1
 800d85c:	4906      	ldr	r1, [pc, #24]	; (800d878 <GetDate+0x58>)
 800d85e:	68f8      	ldr	r0, [r7, #12]
 800d860:	f7ff fbd4 	bl	800d00c <cli_printf>
	HAL_Delay(100);
 800d864:	2064      	movs	r0, #100	; 0x64
 800d866:	f7f5 fa15 	bl	8002c94 <HAL_Delay>
}
 800d86a:	bf00      	nop
 800d86c:	3728      	adds	r7, #40	; 0x28
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}
 800d872:	bf00      	nop
 800d874:	20000814 	.word	0x20000814
 800d878:	0801eb08 	.word	0x0801eb08

0800d87c <GetTime>:

//for some reason if you dont read date the time does not update

void GetTime(EmbeddedCli *cli, char *args, void *context) {
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b08c      	sub	sp, #48	; 0x30
 800d880:	af02      	add	r7, sp, #8
 800d882:	60f8      	str	r0, [r7, #12]
 800d884:	60b9      	str	r1, [r7, #8]
 800d886:	607a      	str	r2, [r7, #4]


	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800d888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d88c:	2200      	movs	r2, #0
 800d88e:	4619      	mov	r1, r3
 800d890:	480d      	ldr	r0, [pc, #52]	; (800d8c8 <GetTime+0x4c>)
 800d892:	f7fa f9b5 	bl	8007c00 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800d896:	f107 0310 	add.w	r3, r7, #16
 800d89a:	2200      	movs	r2, #0
 800d89c:	4619      	mov	r1, r3
 800d89e:	480a      	ldr	r0, [pc, #40]	; (800d8c8 <GetTime+0x4c>)
 800d8a0:	f7fa f8cc 	bl	8007a3c <HAL_RTC_GetTime>
	cli_printf(cli,"%02d:%02d:%02d",gTime.Hours,gTime.Minutes,gTime.Seconds);
 800d8a4:	7c3b      	ldrb	r3, [r7, #16]
 800d8a6:	461a      	mov	r2, r3
 800d8a8:	7c7b      	ldrb	r3, [r7, #17]
 800d8aa:	4619      	mov	r1, r3
 800d8ac:	7cbb      	ldrb	r3, [r7, #18]
 800d8ae:	9300      	str	r3, [sp, #0]
 800d8b0:	460b      	mov	r3, r1
 800d8b2:	4906      	ldr	r1, [pc, #24]	; (800d8cc <GetTime+0x50>)
 800d8b4:	68f8      	ldr	r0, [r7, #12]
 800d8b6:	f7ff fba9 	bl	800d00c <cli_printf>
	HAL_Delay(100);
 800d8ba:	2064      	movs	r0, #100	; 0x64
 800d8bc:	f7f5 f9ea 	bl	8002c94 <HAL_Delay>
}
 800d8c0:	bf00      	nop
 800d8c2:	3728      	adds	r7, #40	; 0x28
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}
 800d8c8:	20000814 	.word	0x20000814
 800d8cc:	0801eb18 	.word	0x0801eb18

0800d8d0 <SetInterval>:

void SetInterval(EmbeddedCli *cli, char *args, void *context) {
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b092      	sub	sp, #72	; 0x48
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	60f8      	str	r0, [r7, #12]
 800d8d8:	60b9      	str	r1, [r7, #8]
 800d8da:	607a      	str	r2, [r7, #4]
	  const char *newLine = "\r\n";
 800d8dc:	4b54      	ldr	r3, [pc, #336]	; (800da30 <SetInterval+0x160>)
 800d8de:	647b      	str	r3, [r7, #68]	; 0x44
		cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800d8e0:	4954      	ldr	r1, [pc, #336]	; (800da34 <SetInterval+0x164>)
 800d8e2:	68f8      	ldr	r0, [r7, #12]
 800d8e4:	f7ff fb92 	bl	800d00c <cli_printf>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800d8e8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d8ea:	f7f2 fc83 	bl	80001f4 <strlen>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	b29a      	uxth	r2, r3
 800d8f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d8f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d8f8:	484f      	ldr	r0, [pc, #316]	; (800da38 <SetInterval+0x168>)
 800d8fa:	f7fc f8ed 	bl	8009ad8 <HAL_UART_Transmit>
	cli_printf(cli,"Enter 1 for 5min.");
 800d8fe:	494f      	ldr	r1, [pc, #316]	; (800da3c <SetInterval+0x16c>)
 800d900:	68f8      	ldr	r0, [r7, #12]
 800d902:	f7ff fb83 	bl	800d00c <cli_printf>
	cli_printf(cli,"Enter 2 for 15min.");
 800d906:	494e      	ldr	r1, [pc, #312]	; (800da40 <SetInterval+0x170>)
 800d908:	68f8      	ldr	r0, [r7, #12]
 800d90a:	f7ff fb7f 	bl	800d00c <cli_printf>
	cli_printf(cli,"Enter 3 for 60min.");
 800d90e:	494d      	ldr	r1, [pc, #308]	; (800da44 <SetInterval+0x174>)
 800d910:	68f8      	ldr	r0, [r7, #12]
 800d912:	f7ff fb7b 	bl	800d00c <cli_printf>
	cli_printf(cli,"Disclaimer: The battery life will be reduced if interval is reduced.");
 800d916:	494c      	ldr	r1, [pc, #304]	; (800da48 <SetInterval+0x178>)
 800d918:	68f8      	ldr	r0, [r7, #12]
 800d91a:	f7ff fb77 	bl	800d00c <cli_printf>
	cli_other = 1;
 800d91e:	4b4b      	ldr	r3, [pc, #300]	; (800da4c <SetInterval+0x17c>)
 800d920:	2201      	movs	r2, #1
 800d922:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800d924:	4b4a      	ldr	r3, [pc, #296]	; (800da50 <SetInterval+0x180>)
 800d926:	2200      	movs	r2, #0
 800d928:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800d92a:	f107 0310 	add.w	r3, r7, #16
 800d92e:	2232      	movs	r2, #50	; 0x32
 800d930:	4619      	mov	r1, r3
 800d932:	68f8      	ldr	r0, [r7, #12]
 800d934:	f7ff fbac 	bl	800d090 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800d938:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d93a:	f7f2 fc5b 	bl	80001f4 <strlen>
 800d93e:	4603      	mov	r3, r0
 800d940:	b29a      	uxth	r2, r3
 800d942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d946:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d948:	483b      	ldr	r0, [pc, #236]	; (800da38 <SetInterval+0x168>)
 800d94a:	f7fc f8c5 	bl	8009ad8 <HAL_UART_Transmit>


	if(strstr(buffer, "1"))
 800d94e:	f107 0310 	add.w	r3, r7, #16
 800d952:	2131      	movs	r1, #49	; 0x31
 800d954:	4618      	mov	r0, r3
 800d956:	f00c ff1f 	bl	801a798 <strchr>
 800d95a:	4603      	mov	r3, r0
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d015      	beq.n	800d98c <SetInterval+0xbc>
	{
        _Flash_Packet.Time_Interval = 5;
 800d960:	4b3c      	ldr	r3, [pc, #240]	; (800da54 <SetInterval+0x184>)
 800d962:	2200      	movs	r2, #0
 800d964:	f042 0205 	orr.w	r2, r2, #5
 800d968:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 800d96c:	2200      	movs	r2, #0
 800d96e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 800d972:	2200      	movs	r2, #0
 800d974:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 800d978:	2200      	movs	r2, #0
 800d97a:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
        set_param_flags();
 800d97e:	4b36      	ldr	r3, [pc, #216]	; (800da58 <SetInterval+0x188>)
 800d980:	2201      	movs	r2, #1
 800d982:	701a      	strb	r2, [r3, #0]
 800d984:	4b35      	ldr	r3, [pc, #212]	; (800da5c <SetInterval+0x18c>)
 800d986:	2201      	movs	r2, #1
 800d988:	701a      	strb	r2, [r3, #0]
 800d98a:	e03c      	b.n	800da06 <SetInterval+0x136>
	}
	else if(strstr(buffer, "2"))
 800d98c:	f107 0310 	add.w	r3, r7, #16
 800d990:	2132      	movs	r1, #50	; 0x32
 800d992:	4618      	mov	r0, r3
 800d994:	f00c ff00 	bl	801a798 <strchr>
 800d998:	4603      	mov	r3, r0
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d015      	beq.n	800d9ca <SetInterval+0xfa>
	{
		_Flash_Packet.Time_Interval = 15;
 800d99e:	4b2d      	ldr	r3, [pc, #180]	; (800da54 <SetInterval+0x184>)
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	f042 020f 	orr.w	r2, r2, #15
 800d9a6:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
		set_param_flags();
 800d9bc:	4b26      	ldr	r3, [pc, #152]	; (800da58 <SetInterval+0x188>)
 800d9be:	2201      	movs	r2, #1
 800d9c0:	701a      	strb	r2, [r3, #0]
 800d9c2:	4b26      	ldr	r3, [pc, #152]	; (800da5c <SetInterval+0x18c>)
 800d9c4:	2201      	movs	r2, #1
 800d9c6:	701a      	strb	r2, [r3, #0]
 800d9c8:	e01d      	b.n	800da06 <SetInterval+0x136>
	}
	else if(strstr(buffer, "3"))
 800d9ca:	f107 0310 	add.w	r3, r7, #16
 800d9ce:	2133      	movs	r1, #51	; 0x33
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f00c fee1 	bl	801a798 <strchr>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d014      	beq.n	800da06 <SetInterval+0x136>
	{
		_Flash_Packet.Time_Interval = 60;
 800d9dc:	4b1d      	ldr	r3, [pc, #116]	; (800da54 <SetInterval+0x184>)
 800d9de:	2200      	movs	r2, #0
 800d9e0:	f042 023c 	orr.w	r2, r2, #60	; 0x3c
 800d9e4:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
		set_param_flags();
 800d9fa:	4b17      	ldr	r3, [pc, #92]	; (800da58 <SetInterval+0x188>)
 800d9fc:	2201      	movs	r2, #1
 800d9fe:	701a      	strb	r2, [r3, #0]
 800da00:	4b16      	ldr	r3, [pc, #88]	; (800da5c <SetInterval+0x18c>)
 800da02:	2201      	movs	r2, #1
 800da04:	701a      	strb	r2, [r3, #0]
	}

	flag_cli = 0;
 800da06:	4b12      	ldr	r3, [pc, #72]	; (800da50 <SetInterval+0x180>)
 800da08:	2200      	movs	r2, #0
 800da0a:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800da0c:	4b0f      	ldr	r3, [pc, #60]	; (800da4c <SetInterval+0x17c>)
 800da0e:	2200      	movs	r2, #0
 800da10:	701a      	strb	r2, [r3, #0]
	cli_printf(cli,"Interval is set to: %ldmin",_Flash_Packet.Time_Interval);
 800da12:	4b10      	ldr	r3, [pc, #64]	; (800da54 <SetInterval+0x184>)
 800da14:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800da18:	461a      	mov	r2, r3
 800da1a:	4911      	ldr	r1, [pc, #68]	; (800da60 <SetInterval+0x190>)
 800da1c:	68f8      	ldr	r0, [r7, #12]
 800da1e:	f7ff faf5 	bl	800d00c <cli_printf>
	set_alarm_Time = 1;
 800da22:	4b10      	ldr	r3, [pc, #64]	; (800da64 <SetInterval+0x194>)
 800da24:	2201      	movs	r2, #1
 800da26:	701a      	strb	r2, [r3, #0]
}
 800da28:	bf00      	nop
 800da2a:	3748      	adds	r7, #72	; 0x48
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}
 800da30:	0801e814 	.word	0x0801e814
 800da34:	0801e88c 	.word	0x0801e88c
 800da38:	20000900 	.word	0x20000900
 800da3c:	0801eb28 	.word	0x0801eb28
 800da40:	0801eb3c 	.word	0x0801eb3c
 800da44:	0801eb50 	.word	0x0801eb50
 800da48:	0801eb64 	.word	0x0801eb64
 800da4c:	200009be 	.word	0x200009be
 800da50:	200009bf 	.word	0x200009bf
 800da54:	20000330 	.word	0x20000330
 800da58:	20000501 	.word	0x20000501
 800da5c:	20000502 	.word	0x20000502
 800da60:	0801ebac 	.word	0x0801ebac
 800da64:	20000025 	.word	0x20000025

0800da68 <GetInterval>:

void GetInterval(EmbeddedCli *cli, char *args, void *context) {
 800da68:	b580      	push	{r7, lr}
 800da6a:	b084      	sub	sp, #16
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	60f8      	str	r0, [r7, #12]
 800da70:	60b9      	str	r1, [r7, #8]
 800da72:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"Interval is Set to: %ldmin",_Flash_Packet.Time_Interval);
 800da74:	4b05      	ldr	r3, [pc, #20]	; (800da8c <GetInterval+0x24>)
 800da76:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800da7a:	461a      	mov	r2, r3
 800da7c:	4904      	ldr	r1, [pc, #16]	; (800da90 <GetInterval+0x28>)
 800da7e:	68f8      	ldr	r0, [r7, #12]
 800da80:	f7ff fac4 	bl	800d00c <cli_printf>

}
 800da84:	bf00      	nop
 800da86:	3710      	adds	r7, #16
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}
 800da8c:	20000330 	.word	0x20000330
 800da90:	0801ebc8 	.word	0x0801ebc8

0800da94 <SetFilename>:

void SetFilename(EmbeddedCli *cli, char *args, void *context) {
 800da94:	b580      	push	{r7, lr}
 800da96:	b092      	sub	sp, #72	; 0x48
 800da98:	af00      	add	r7, sp, #0
 800da9a:	60f8      	str	r0, [r7, #12]
 800da9c:	60b9      	str	r1, [r7, #8]
 800da9e:	607a      	str	r2, [r7, #4]
uint16_t len;
	  const char *newLine = "\r\n";
 800daa0:	4b2f      	ldr	r3, [pc, #188]	; (800db60 <SetFilename+0xcc>)
 800daa2:	647b      	str	r3, [r7, #68]	; 0x44
		cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800daa4:	492f      	ldr	r1, [pc, #188]	; (800db64 <SetFilename+0xd0>)
 800daa6:	68f8      	ldr	r0, [r7, #12]
 800daa8:	f7ff fab0 	bl	800d00c <cli_printf>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800daac:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800daae:	f7f2 fba1 	bl	80001f4 <strlen>
 800dab2:	4603      	mov	r3, r0
 800dab4:	b29a      	uxth	r2, r3
 800dab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800daba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dabc:	482a      	ldr	r0, [pc, #168]	; (800db68 <SetFilename+0xd4>)
 800dabe:	f7fc f80b 	bl	8009ad8 <HAL_UART_Transmit>
	cli_printf(cli,"To set file name dont use special characters or space, '_' can be used and please keep the name below 18characters.");
 800dac2:	492a      	ldr	r1, [pc, #168]	; (800db6c <SetFilename+0xd8>)
 800dac4:	68f8      	ldr	r0, [r7, #12]
 800dac6:	f7ff faa1 	bl	800d00c <cli_printf>

	cli_other = 1;
 800daca:	4b29      	ldr	r3, [pc, #164]	; (800db70 <SetFilename+0xdc>)
 800dacc:	2201      	movs	r2, #1
 800dace:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800dad0:	4b28      	ldr	r3, [pc, #160]	; (800db74 <SetFilename+0xe0>)
 800dad2:	2200      	movs	r2, #0
 800dad4:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800dad6:	f107 0310 	add.w	r3, r7, #16
 800dada:	2232      	movs	r2, #50	; 0x32
 800dadc:	4619      	mov	r1, r3
 800dade:	68f8      	ldr	r0, [r7, #12]
 800dae0:	f7ff fad6 	bl	800d090 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800dae4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800dae6:	f7f2 fb85 	bl	80001f4 <strlen>
 800daea:	4603      	mov	r3, r0
 800daec:	b29a      	uxth	r2, r3
 800daee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800daf2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800daf4:	481c      	ldr	r0, [pc, #112]	; (800db68 <SetFilename+0xd4>)
 800daf6:	f7fb ffef 	bl	8009ad8 <HAL_UART_Transmit>

len = strlen(buffer);
 800dafa:	f107 0310 	add.w	r3, r7, #16
 800dafe:	4618      	mov	r0, r3
 800db00:	f7f2 fb78 	bl	80001f4 <strlen>
 800db04:	4603      	mov	r3, r0
 800db06:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
if(len < 20)
 800db0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800db0e:	2b13      	cmp	r3, #19
 800db10:	d818      	bhi.n	800db44 <SetFilename+0xb0>
{
	   if(buffer[0] != '\0' )
 800db12:	7c3b      	ldrb	r3, [r7, #16]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d019      	beq.n	800db4c <SetFilename+0xb8>
	   {
	if(buffer != NULL)
	{
		strcpy(_Flash_Packet.File_Name,buffer);
 800db18:	f107 0310 	add.w	r3, r7, #16
 800db1c:	4619      	mov	r1, r3
 800db1e:	4816      	ldr	r0, [pc, #88]	; (800db78 <SetFilename+0xe4>)
 800db20:	f00c fe47 	bl	801a7b2 <strcpy>
		set_param_flags();
 800db24:	4b15      	ldr	r3, [pc, #84]	; (800db7c <SetFilename+0xe8>)
 800db26:	2201      	movs	r2, #1
 800db28:	701a      	strb	r2, [r3, #0]
 800db2a:	4b15      	ldr	r3, [pc, #84]	; (800db80 <SetFilename+0xec>)
 800db2c:	2201      	movs	r2, #1
 800db2e:	701a      	strb	r2, [r3, #0]
		 _RunTime_Packet.filename_changed = 1;
 800db30:	4b14      	ldr	r3, [pc, #80]	; (800db84 <SetFilename+0xf0>)
 800db32:	2201      	movs	r2, #1
 800db34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			cli_printf(cli,"Filename is set to: %s",_Flash_Packet.File_Name);
 800db38:	4a0f      	ldr	r2, [pc, #60]	; (800db78 <SetFilename+0xe4>)
 800db3a:	4913      	ldr	r1, [pc, #76]	; (800db88 <SetFilename+0xf4>)
 800db3c:	68f8      	ldr	r0, [r7, #12]
 800db3e:	f7ff fa65 	bl	800d00c <cli_printf>
 800db42:	e003      	b.n	800db4c <SetFilename+0xb8>
	}
	   }
}
else
{
	cli_printf(cli,"Filename is too long");
 800db44:	4911      	ldr	r1, [pc, #68]	; (800db8c <SetFilename+0xf8>)
 800db46:	68f8      	ldr	r0, [r7, #12]
 800db48:	f7ff fa60 	bl	800d00c <cli_printf>
}


	flag_cli = 0;
 800db4c:	4b09      	ldr	r3, [pc, #36]	; (800db74 <SetFilename+0xe0>)
 800db4e:	2200      	movs	r2, #0
 800db50:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800db52:	4b07      	ldr	r3, [pc, #28]	; (800db70 <SetFilename+0xdc>)
 800db54:	2200      	movs	r2, #0
 800db56:	701a      	strb	r2, [r3, #0]


}
 800db58:	bf00      	nop
 800db5a:	3748      	adds	r7, #72	; 0x48
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}
 800db60:	0801e814 	.word	0x0801e814
 800db64:	0801e88c 	.word	0x0801e88c
 800db68:	20000900 	.word	0x20000900
 800db6c:	0801ebe4 	.word	0x0801ebe4
 800db70:	200009be 	.word	0x200009be
 800db74:	200009bf 	.word	0x200009bf
 800db78:	20000330 	.word	0x20000330
 800db7c:	20000501 	.word	0x20000501
 800db80:	20000502 	.word	0x20000502
 800db84:	200004c8 	.word	0x200004c8
 800db88:	0801ec58 	.word	0x0801ec58
 800db8c:	0801ec70 	.word	0x0801ec70

0800db90 <GetFilename>:

void GetFilename(EmbeddedCli *cli, char *args, void *context) {
 800db90:	b580      	push	{r7, lr}
 800db92:	b084      	sub	sp, #16
 800db94:	af00      	add	r7, sp, #0
 800db96:	60f8      	str	r0, [r7, #12]
 800db98:	60b9      	str	r1, [r7, #8]
 800db9a:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"Filename is set to: %s",_Flash_Packet.File_Name);
 800db9c:	4a04      	ldr	r2, [pc, #16]	; (800dbb0 <GetFilename+0x20>)
 800db9e:	4905      	ldr	r1, [pc, #20]	; (800dbb4 <GetFilename+0x24>)
 800dba0:	68f8      	ldr	r0, [r7, #12]
 800dba2:	f7ff fa33 	bl	800d00c <cli_printf>

}
 800dba6:	bf00      	nop
 800dba8:	3710      	adds	r7, #16
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	bd80      	pop	{r7, pc}
 800dbae:	bf00      	nop
 800dbb0:	20000330 	.word	0x20000330
 800dbb4:	0801ec58 	.word	0x0801ec58

0800dbb8 <SetFileformat>:

void SetFileformat(EmbeddedCli *cli, char *args, void *context) {
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b092      	sub	sp, #72	; 0x48
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	60f8      	str	r0, [r7, #12]
 800dbc0:	60b9      	str	r1, [r7, #8]
 800dbc2:	607a      	str	r2, [r7, #4]

	  const char *newLine = "\r\n";
 800dbc4:	4b41      	ldr	r3, [pc, #260]	; (800dccc <SetFileformat+0x114>)
 800dbc6:	647b      	str	r3, [r7, #68]	; 0x44
		cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800dbc8:	4941      	ldr	r1, [pc, #260]	; (800dcd0 <SetFileformat+0x118>)
 800dbca:	68f8      	ldr	r0, [r7, #12]
 800dbcc:	f7ff fa1e 	bl	800d00c <cli_printf>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800dbd0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800dbd2:	f7f2 fb0f 	bl	80001f4 <strlen>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	b29a      	uxth	r2, r3
 800dbda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dbde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dbe0:	483c      	ldr	r0, [pc, #240]	; (800dcd4 <SetFileformat+0x11c>)
 800dbe2:	f7fb ff79 	bl	8009ad8 <HAL_UART_Transmit>
	cli_printf(cli,"Following file formats are allowed:");
 800dbe6:	493c      	ldr	r1, [pc, #240]	; (800dcd8 <SetFileformat+0x120>)
 800dbe8:	68f8      	ldr	r0, [r7, #12]
 800dbea:	f7ff fa0f 	bl	800d00c <cli_printf>
	cli_printf(cli,"1. (.csv)");
 800dbee:	493b      	ldr	r1, [pc, #236]	; (800dcdc <SetFileformat+0x124>)
 800dbf0:	68f8      	ldr	r0, [r7, #12]
 800dbf2:	f7ff fa0b 	bl	800d00c <cli_printf>
	cli_printf(cli,"2. (.json)");
 800dbf6:	493a      	ldr	r1, [pc, #232]	; (800dce0 <SetFileformat+0x128>)
 800dbf8:	68f8      	ldr	r0, [r7, #12]
 800dbfa:	f7ff fa07 	bl	800d00c <cli_printf>
	cli_printf(cli,"Enter the number to select your desired format");
 800dbfe:	4939      	ldr	r1, [pc, #228]	; (800dce4 <SetFileformat+0x12c>)
 800dc00:	68f8      	ldr	r0, [r7, #12]
 800dc02:	f7ff fa03 	bl	800d00c <cli_printf>

	cli_other = 1;
 800dc06:	4b38      	ldr	r3, [pc, #224]	; (800dce8 <SetFileformat+0x130>)
 800dc08:	2201      	movs	r2, #1
 800dc0a:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800dc0c:	4b37      	ldr	r3, [pc, #220]	; (800dcec <SetFileformat+0x134>)
 800dc0e:	2200      	movs	r2, #0
 800dc10:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800dc12:	f107 0310 	add.w	r3, r7, #16
 800dc16:	2232      	movs	r2, #50	; 0x32
 800dc18:	4619      	mov	r1, r3
 800dc1a:	68f8      	ldr	r0, [r7, #12]
 800dc1c:	f7ff fa38 	bl	800d090 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800dc20:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800dc22:	f7f2 fae7 	bl	80001f4 <strlen>
 800dc26:	4603      	mov	r3, r0
 800dc28:	b29a      	uxth	r2, r3
 800dc2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dc2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dc30:	4828      	ldr	r0, [pc, #160]	; (800dcd4 <SetFileformat+0x11c>)
 800dc32:	f7fb ff51 	bl	8009ad8 <HAL_UART_Transmit>

	if(strstr(buffer, "1"))
 800dc36:	f107 0310 	add.w	r3, r7, #16
 800dc3a:	2131      	movs	r1, #49	; 0x31
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f00c fdab 	bl	801a798 <strchr>
 800dc42:	4603      	mov	r3, r0
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d014      	beq.n	800dc72 <SetFileformat+0xba>
	{
		strcpy(_Flash_Packet.File_Format,".CSV");
 800dc48:	4b29      	ldr	r3, [pc, #164]	; (800dcf0 <SetFileformat+0x138>)
 800dc4a:	4a2a      	ldr	r2, [pc, #168]	; (800dcf4 <SetFileformat+0x13c>)
 800dc4c:	6810      	ldr	r0, [r2, #0]
 800dc4e:	6018      	str	r0, [r3, #0]
 800dc50:	7912      	ldrb	r2, [r2, #4]
 800dc52:	711a      	strb	r2, [r3, #4]
		set_param_flags();
 800dc54:	4b28      	ldr	r3, [pc, #160]	; (800dcf8 <SetFileformat+0x140>)
 800dc56:	2201      	movs	r2, #1
 800dc58:	701a      	strb	r2, [r3, #0]
 800dc5a:	4b28      	ldr	r3, [pc, #160]	; (800dcfc <SetFileformat+0x144>)
 800dc5c:	2201      	movs	r2, #1
 800dc5e:	701a      	strb	r2, [r3, #0]
		 _RunTime_Packet.fileformat_changed = 1;
 800dc60:	4b27      	ldr	r3, [pc, #156]	; (800dd00 <SetFileformat+0x148>)
 800dc62:	2201      	movs	r2, #1
 800dc64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			_RunTime_Packet.fileformat_selection = 1;
 800dc68:	4b25      	ldr	r3, [pc, #148]	; (800dd00 <SetFileformat+0x148>)
 800dc6a:	2201      	movs	r2, #1
 800dc6c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800dc70:	e01c      	b.n	800dcac <SetFileformat+0xf4>
	}
	else if(strstr(buffer, "2"))
 800dc72:	f107 0310 	add.w	r3, r7, #16
 800dc76:	2132      	movs	r1, #50	; 0x32
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f00c fd8d 	bl	801a798 <strchr>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d013      	beq.n	800dcac <SetFileformat+0xf4>
	{
		strcpy(_Flash_Packet.File_Format,".JSON");
 800dc84:	4b1a      	ldr	r3, [pc, #104]	; (800dcf0 <SetFileformat+0x138>)
 800dc86:	4a1f      	ldr	r2, [pc, #124]	; (800dd04 <SetFileformat+0x14c>)
 800dc88:	6810      	ldr	r0, [r2, #0]
 800dc8a:	6018      	str	r0, [r3, #0]
 800dc8c:	8892      	ldrh	r2, [r2, #4]
 800dc8e:	809a      	strh	r2, [r3, #4]
		set_param_flags();
 800dc90:	4b19      	ldr	r3, [pc, #100]	; (800dcf8 <SetFileformat+0x140>)
 800dc92:	2201      	movs	r2, #1
 800dc94:	701a      	strb	r2, [r3, #0]
 800dc96:	4b19      	ldr	r3, [pc, #100]	; (800dcfc <SetFileformat+0x144>)
 800dc98:	2201      	movs	r2, #1
 800dc9a:	701a      	strb	r2, [r3, #0]
		 _RunTime_Packet.fileformat_changed = 1;
 800dc9c:	4b18      	ldr	r3, [pc, #96]	; (800dd00 <SetFileformat+0x148>)
 800dc9e:	2201      	movs	r2, #1
 800dca0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			_RunTime_Packet.fileformat_selection = 0;
 800dca4:	4b16      	ldr	r3, [pc, #88]	; (800dd00 <SetFileformat+0x148>)
 800dca6:	2200      	movs	r2, #0
 800dca8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	}


	flag_cli = 0;
 800dcac:	4b0f      	ldr	r3, [pc, #60]	; (800dcec <SetFileformat+0x134>)
 800dcae:	2200      	movs	r2, #0
 800dcb0:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800dcb2:	4b0d      	ldr	r3, [pc, #52]	; (800dce8 <SetFileformat+0x130>)
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	701a      	strb	r2, [r3, #0]
	cli_printf(cli,"File format is set to: %s",_Flash_Packet.File_Format);
 800dcb8:	4a0d      	ldr	r2, [pc, #52]	; (800dcf0 <SetFileformat+0x138>)
 800dcba:	4913      	ldr	r1, [pc, #76]	; (800dd08 <SetFileformat+0x150>)
 800dcbc:	68f8      	ldr	r0, [r7, #12]
 800dcbe:	f7ff f9a5 	bl	800d00c <cli_printf>

}
 800dcc2:	bf00      	nop
 800dcc4:	3748      	adds	r7, #72	; 0x48
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}
 800dcca:	bf00      	nop
 800dccc:	0801e814 	.word	0x0801e814
 800dcd0:	0801e88c 	.word	0x0801e88c
 800dcd4:	20000900 	.word	0x20000900
 800dcd8:	0801ec88 	.word	0x0801ec88
 800dcdc:	0801ecac 	.word	0x0801ecac
 800dce0:	0801ecb8 	.word	0x0801ecb8
 800dce4:	0801ecc4 	.word	0x0801ecc4
 800dce8:	200009be 	.word	0x200009be
 800dcec:	200009bf 	.word	0x200009bf
 800dcf0:	20000394 	.word	0x20000394
 800dcf4:	0801ecf4 	.word	0x0801ecf4
 800dcf8:	20000501 	.word	0x20000501
 800dcfc:	20000502 	.word	0x20000502
 800dd00:	200004c8 	.word	0x200004c8
 800dd04:	0801ecfc 	.word	0x0801ecfc
 800dd08:	0801ed04 	.word	0x0801ed04

0800dd0c <GetFileformat>:

void GetFileformat(EmbeddedCli *cli, char *args, void *context) {
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b084      	sub	sp, #16
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	60f8      	str	r0, [r7, #12]
 800dd14:	60b9      	str	r1, [r7, #8]
 800dd16:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"File format is set to: %s",_Flash_Packet.File_Format);
 800dd18:	4a04      	ldr	r2, [pc, #16]	; (800dd2c <GetFileformat+0x20>)
 800dd1a:	4905      	ldr	r1, [pc, #20]	; (800dd30 <GetFileformat+0x24>)
 800dd1c:	68f8      	ldr	r0, [r7, #12]
 800dd1e:	f7ff f975 	bl	800d00c <cli_printf>

}
 800dd22:	bf00      	nop
 800dd24:	3710      	adds	r7, #16
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}
 800dd2a:	bf00      	nop
 800dd2c:	20000394 	.word	0x20000394
 800dd30:	0801ed04 	.word	0x0801ed04

0800dd34 <fanclean>:

void fanclean(EmbeddedCli *cli, char *args, void *context) {
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b096      	sub	sp, #88	; 0x58
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	60f8      	str	r0, [r7, #12]
 800dd3c:	60b9      	str	r1, [r7, #8]
 800dd3e:	607a      	str	r2, [r7, #4]
	  const char *newLine = "\r\n";
 800dd40:	4b47      	ldr	r3, [pc, #284]	; (800de60 <fanclean+0x12c>)
 800dd42:	64fb      	str	r3, [r7, #76]	; 0x4c
	  int counter = 0;
 800dd44:	2300      	movs	r3, #0
 800dd46:	657b      	str	r3, [r7, #84]	; 0x54
	  const char *dot = "........";
 800dd48:	4b46      	ldr	r3, [pc, #280]	; (800de64 <fanclean+0x130>)
 800dd4a:	64bb      	str	r3, [r7, #72]	; 0x48
	  uint8_t do_Calibration = 0;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	cli_printf(cli,"Do you want to initiate particle sensor fan-cleaning? y/n?");
 800dd52:	4945      	ldr	r1, [pc, #276]	; (800de68 <fanclean+0x134>)
 800dd54:	68f8      	ldr	r0, [r7, #12]
 800dd56:	f7ff f959 	bl	800d00c <cli_printf>

	cli_other = 1;
 800dd5a:	4b44      	ldr	r3, [pc, #272]	; (800de6c <fanclean+0x138>)
 800dd5c:	2201      	movs	r2, #1
 800dd5e:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 800dd60:	4b43      	ldr	r3, [pc, #268]	; (800de70 <fanclean+0x13c>)
 800dd62:	2200      	movs	r2, #0
 800dd64:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		receiveString(cli,buffer,sizeof(buffer));
 800dd66:	f107 0314 	add.w	r3, r7, #20
 800dd6a:	2232      	movs	r2, #50	; 0x32
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	68f8      	ldr	r0, [r7, #12]
 800dd70:	f7ff f98e 	bl	800d090 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800dd74:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dd76:	f7f2 fa3d 	bl	80001f4 <strlen>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	b29a      	uxth	r2, r3
 800dd7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dd82:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800dd84:	483b      	ldr	r0, [pc, #236]	; (800de74 <fanclean+0x140>)
 800dd86:	f7fb fea7 	bl	8009ad8 <HAL_UART_Transmit>


        if(strstr(buffer, "n"))
 800dd8a:	f107 0314 	add.w	r3, r7, #20
 800dd8e:	216e      	movs	r1, #110	; 0x6e
 800dd90:	4618      	mov	r0, r3
 800dd92:	f00c fd01 	bl	801a798 <strchr>
 800dd96:	4603      	mov	r3, r0
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d00f      	beq.n	800ddbc <fanclean+0x88>
		{
			_Flash_Packet.Calibration_Status=0;
 800dd9c:	4b36      	ldr	r3, [pc, #216]	; (800de78 <fanclean+0x144>)
 800dd9e:	2200      	movs	r2, #0
 800dda0:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
			_RunTime_Packet.PM_calibration=1;
 800dda4:	4b35      	ldr	r3, [pc, #212]	; (800de7c <fanclean+0x148>)
 800dda6:	2201      	movs	r2, #1
 800dda8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			cli_printf(cli,"Particle sensor fan-cleaning aborted.");
 800ddac:	4934      	ldr	r1, [pc, #208]	; (800de80 <fanclean+0x14c>)
 800ddae:	68f8      	ldr	r0, [r7, #12]
 800ddb0:	f7ff f92c 	bl	800d00c <cli_printf>
			//set_param_flags();
			do_Calibration = 0;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800ddba:	e00f      	b.n	800dddc <fanclean+0xa8>
		}
        else if(strstr(buffer, "y"))
 800ddbc:	f107 0314 	add.w	r3, r7, #20
 800ddc0:	2179      	movs	r1, #121	; 0x79
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f00c fce8 	bl	801a798 <strchr>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d006      	beq.n	800dddc <fanclean+0xa8>
        {
        	_RunTime_Packet.PM_calibration=0;
 800ddce:	4b2b      	ldr	r3, [pc, #172]	; (800de7c <fanclean+0x148>)
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
        	do_Calibration = 1;
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        }



		   if(do_Calibration == 1)
 800dddc:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800dde0:	2b01      	cmp	r3, #1
 800dde2:	d132      	bne.n	800de4a <fanclean+0x116>
		   {
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800dde4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dde6:	f7f2 fa05 	bl	80001f4 <strlen>
 800ddea:	4603      	mov	r3, r0
 800ddec:	b29a      	uxth	r2, r3
 800ddee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ddf2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ddf4:	481f      	ldr	r0, [pc, #124]	; (800de74 <fanclean+0x140>)
 800ddf6:	f7fb fe6f 	bl	8009ad8 <HAL_UART_Transmit>
				cli_printf(cli,"Particle sensor fan-cleaning initiated, please wait.");
 800ddfa:	4922      	ldr	r1, [pc, #136]	; (800de84 <fanclean+0x150>)
 800ddfc:	68f8      	ldr	r0, [r7, #12]
 800ddfe:	f7ff f905 	bl	800d00c <cli_printf>
		   while(counter < 20 )
 800de02:	e010      	b.n	800de26 <fanclean+0xf2>
		   {
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)dot,  strlen(dot), 1000);
 800de04:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800de06:	f7f2 f9f5 	bl	80001f4 <strlen>
 800de0a:	4603      	mov	r3, r0
 800de0c:	b29a      	uxth	r2, r3
 800de0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800de12:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800de14:	4817      	ldr	r0, [pc, #92]	; (800de74 <fanclean+0x140>)
 800de16:	f7fb fe5f 	bl	8009ad8 <HAL_UART_Transmit>
                HAL_Delay(10);
 800de1a:	200a      	movs	r0, #10
 800de1c:	f7f4 ff3a 	bl	8002c94 <HAL_Delay>
                counter++;
 800de20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de22:	3301      	adds	r3, #1
 800de24:	657b      	str	r3, [r7, #84]	; 0x54
		   while(counter < 20 )
 800de26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de28:	2b13      	cmp	r3, #19
 800de2a:	ddeb      	ble.n	800de04 <fanclean+0xd0>
		   }

			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800de2c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800de2e:	f7f2 f9e1 	bl	80001f4 <strlen>
 800de32:	4603      	mov	r3, r0
 800de34:	b29a      	uxth	r2, r3
 800de36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800de3a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800de3c:	480d      	ldr	r0, [pc, #52]	; (800de74 <fanclean+0x140>)
 800de3e:	f7fb fe4b 	bl	8009ad8 <HAL_UART_Transmit>
			cli_printf(cli,"fan-cleaning done.");
 800de42:	4911      	ldr	r1, [pc, #68]	; (800de88 <fanclean+0x154>)
 800de44:	68f8      	ldr	r0, [r7, #12]
 800de46:	f7ff f8e1 	bl	800d00c <cli_printf>
		   }

		flag_cli = 0;
 800de4a:	4b09      	ldr	r3, [pc, #36]	; (800de70 <fanclean+0x13c>)
 800de4c:	2200      	movs	r2, #0
 800de4e:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 800de50:	4b06      	ldr	r3, [pc, #24]	; (800de6c <fanclean+0x138>)
 800de52:	2200      	movs	r2, #0
 800de54:	701a      	strb	r2, [r3, #0]
}
 800de56:	bf00      	nop
 800de58:	3758      	adds	r7, #88	; 0x58
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}
 800de5e:	bf00      	nop
 800de60:	0801e814 	.word	0x0801e814
 800de64:	0801ed20 	.word	0x0801ed20
 800de68:	0801ed2c 	.word	0x0801ed2c
 800de6c:	200009be 	.word	0x200009be
 800de70:	200009bf 	.word	0x200009bf
 800de74:	20000900 	.word	0x20000900
 800de78:	20000330 	.word	0x20000330
 800de7c:	200004c8 	.word	0x200004c8
 800de80:	0801ed68 	.word	0x0801ed68
 800de84:	0801ed90 	.word	0x0801ed90
 800de88:	0801edc8 	.word	0x0801edc8

0800de8c <co2calibrate>:


void co2calibrate(EmbeddedCli *cli, char *args, void *context) {
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b096      	sub	sp, #88	; 0x58
 800de90:	af00      	add	r7, sp, #0
 800de92:	60f8      	str	r0, [r7, #12]
 800de94:	60b9      	str	r1, [r7, #8]
 800de96:	607a      	str	r2, [r7, #4]
	  const char *newLine = "\r\n";
 800de98:	4b4e      	ldr	r3, [pc, #312]	; (800dfd4 <co2calibrate+0x148>)
 800de9a:	64fb      	str	r3, [r7, #76]	; 0x4c
	  uint32_t val;
	  int counter = 0;
 800de9c:	2300      	movs	r3, #0
 800de9e:	657b      	str	r3, [r7, #84]	; 0x54
	  const char *dot = "........";
 800dea0:	4b4d      	ldr	r3, [pc, #308]	; (800dfd8 <co2calibrate+0x14c>)
 800dea2:	64bb      	str	r3, [r7, #72]	; 0x48
	  uint8_t do_Calibration = 0;
 800dea4:	2300      	movs	r3, #0
 800dea6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53


	    cli_other = 1;
 800deaa:	4b4c      	ldr	r3, [pc, #304]	; (800dfdc <co2calibrate+0x150>)
 800deac:	2201      	movs	r2, #1
 800deae:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 800deb0:	4b4b      	ldr	r3, [pc, #300]	; (800dfe0 <co2calibrate+0x154>)
 800deb2:	2200      	movs	r2, #0
 800deb4:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		memset(buffer,'\0',sizeof(buffer));
 800deb6:	f107 0310 	add.w	r3, r7, #16
 800deba:	2232      	movs	r2, #50	; 0x32
 800debc:	2100      	movs	r1, #0
 800debe:	4618      	mov	r0, r3
 800dec0:	f00b fc44 	bl	801974c <memset>
		cli_printf(cli,"To calibrate Co2 sensor, please provide Co2 concentration value.");
 800dec4:	4947      	ldr	r1, [pc, #284]	; (800dfe4 <co2calibrate+0x158>)
 800dec6:	68f8      	ldr	r0, [r7, #12]
 800dec8:	f7ff f8a0 	bl	800d00c <cli_printf>
		cli_printf(cli,"If Co2 concentration is unknown then just press enter to cancel the calibration.");
 800decc:	4946      	ldr	r1, [pc, #280]	; (800dfe8 <co2calibrate+0x15c>)
 800dece:	68f8      	ldr	r0, [r7, #12]
 800ded0:	f7ff f89c 	bl	800d00c <cli_printf>

		receiveString(cli,buffer,sizeof(buffer));
 800ded4:	f107 0310 	add.w	r3, r7, #16
 800ded8:	2232      	movs	r2, #50	; 0x32
 800deda:	4619      	mov	r1, r3
 800dedc:	68f8      	ldr	r0, [r7, #12]
 800dede:	f7ff f8d7 	bl	800d090 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800dee2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dee4:	f7f2 f986 	bl	80001f4 <strlen>
 800dee8:	4603      	mov	r3, r0
 800deea:	b29a      	uxth	r2, r3
 800deec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800def0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800def2:	483e      	ldr	r0, [pc, #248]	; (800dfec <co2calibrate+0x160>)
 800def4:	f7fb fdf0 	bl	8009ad8 <HAL_UART_Transmit>

		   if(buffer[0] != '\0' )
 800def8:	7c3b      	ldrb	r3, [r7, #16]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d01e      	beq.n	800df3c <co2calibrate+0xb0>
			{
			   _RunTime_Packet.CO2_calibration = 1;
 800defe:	4b3c      	ldr	r3, [pc, #240]	; (800dff0 <co2calibrate+0x164>)
 800df00:	2201      	movs	r2, #1
 800df02:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

                val = atoi(buffer);
 800df06:	f107 0310 	add.w	r3, r7, #16
 800df0a:	4618      	mov	r0, r3
 800df0c:	f00b fb46 	bl	801959c <atoi>
 800df10:	4603      	mov	r3, r0
 800df12:	647b      	str	r3, [r7, #68]	; 0x44

                if(val < 65535)
 800df14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df16:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800df1a:	4293      	cmp	r3, r2
 800df1c:	d803      	bhi.n	800df26 <co2calibrate+0x9a>
                {
                   _RunTime_Packet._target_co2_concentration = val;
 800df1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df20:	b29a      	uxth	r2, r3
 800df22:	4b33      	ldr	r3, [pc, #204]	; (800dff0 <co2calibrate+0x164>)
 800df24:	869a      	strh	r2, [r3, #52]	; 0x34
                }

            	cli_printf(cli,"Co2 sensor is going to be Calibrated now. Co2 concentration value provided : %d",_RunTime_Packet._target_co2_concentration);
 800df26:	4b32      	ldr	r3, [pc, #200]	; (800dff0 <co2calibrate+0x164>)
 800df28:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800df2a:	461a      	mov	r2, r3
 800df2c:	4931      	ldr	r1, [pc, #196]	; (800dff4 <co2calibrate+0x168>)
 800df2e:	68f8      	ldr	r0, [r7, #12]
 800df30:	f7ff f86c 	bl	800d00c <cli_printf>
            	do_Calibration = 1;
 800df34:	2301      	movs	r3, #1
 800df36:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800df3a:	e00a      	b.n	800df52 <co2calibrate+0xc6>
			 }
		   else
		   {
				cli_printf(cli,"Co2 sensor Calibration aborted.");
 800df3c:	492e      	ldr	r1, [pc, #184]	; (800dff8 <co2calibrate+0x16c>)
 800df3e:	68f8      	ldr	r0, [r7, #12]
 800df40:	f7ff f864 	bl	800d00c <cli_printf>
				_RunTime_Packet.CO2_calibration = 0;
 800df44:	4b2a      	ldr	r3, [pc, #168]	; (800dff0 <co2calibrate+0x164>)
 800df46:	2200      	movs	r2, #0
 800df48:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				do_Calibration = 0;
 800df4c:	2300      	movs	r3, #0
 800df4e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		   }

		   if(do_Calibration == 1)
 800df52:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800df56:	2b01      	cmp	r3, #1
 800df58:	d132      	bne.n	800dfc0 <co2calibrate+0x134>
		   {
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800df5a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800df5c:	f7f2 f94a 	bl	80001f4 <strlen>
 800df60:	4603      	mov	r3, r0
 800df62:	b29a      	uxth	r2, r3
 800df64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800df68:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800df6a:	4820      	ldr	r0, [pc, #128]	; (800dfec <co2calibrate+0x160>)
 800df6c:	f7fb fdb4 	bl	8009ad8 <HAL_UART_Transmit>
				cli_printf(cli,"Co2 is calibrating, please wait.");
 800df70:	4922      	ldr	r1, [pc, #136]	; (800dffc <co2calibrate+0x170>)
 800df72:	68f8      	ldr	r0, [r7, #12]
 800df74:	f7ff f84a 	bl	800d00c <cli_printf>
		   while(counter < 20 )
 800df78:	e010      	b.n	800df9c <co2calibrate+0x110>
		   {
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)dot,  strlen(dot), 1000);
 800df7a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800df7c:	f7f2 f93a 	bl	80001f4 <strlen>
 800df80:	4603      	mov	r3, r0
 800df82:	b29a      	uxth	r2, r3
 800df84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800df88:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800df8a:	4818      	ldr	r0, [pc, #96]	; (800dfec <co2calibrate+0x160>)
 800df8c:	f7fb fda4 	bl	8009ad8 <HAL_UART_Transmit>
                HAL_Delay(10);
 800df90:	200a      	movs	r0, #10
 800df92:	f7f4 fe7f 	bl	8002c94 <HAL_Delay>
                counter++;
 800df96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df98:	3301      	adds	r3, #1
 800df9a:	657b      	str	r3, [r7, #84]	; 0x54
		   while(counter < 20 )
 800df9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df9e:	2b13      	cmp	r3, #19
 800dfa0:	ddeb      	ble.n	800df7a <co2calibrate+0xee>
		   }

			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800dfa2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dfa4:	f7f2 f926 	bl	80001f4 <strlen>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	b29a      	uxth	r2, r3
 800dfac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dfb0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800dfb2:	480e      	ldr	r0, [pc, #56]	; (800dfec <co2calibrate+0x160>)
 800dfb4:	f7fb fd90 	bl	8009ad8 <HAL_UART_Transmit>
			cli_printf(cli,"Sensor calibration done.");
 800dfb8:	4911      	ldr	r1, [pc, #68]	; (800e000 <co2calibrate+0x174>)
 800dfba:	68f8      	ldr	r0, [r7, #12]
 800dfbc:	f7ff f826 	bl	800d00c <cli_printf>
		   }

		flag_cli = 0;
 800dfc0:	4b07      	ldr	r3, [pc, #28]	; (800dfe0 <co2calibrate+0x154>)
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 800dfc6:	4b05      	ldr	r3, [pc, #20]	; (800dfdc <co2calibrate+0x150>)
 800dfc8:	2200      	movs	r2, #0
 800dfca:	701a      	strb	r2, [r3, #0]
}
 800dfcc:	bf00      	nop
 800dfce:	3758      	adds	r7, #88	; 0x58
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	bd80      	pop	{r7, pc}
 800dfd4:	0801e814 	.word	0x0801e814
 800dfd8:	0801ed20 	.word	0x0801ed20
 800dfdc:	200009be 	.word	0x200009be
 800dfe0:	200009bf 	.word	0x200009bf
 800dfe4:	0801eddc 	.word	0x0801eddc
 800dfe8:	0801ee20 	.word	0x0801ee20
 800dfec:	20000900 	.word	0x20000900
 800dff0:	200004c8 	.word	0x200004c8
 800dff4:	0801ee74 	.word	0x0801ee74
 800dff8:	0801eec4 	.word	0x0801eec4
 800dffc:	0801eee4 	.word	0x0801eee4
 800e000:	0801ef08 	.word	0x0801ef08

0800e004 <SystemRestart>:

void SystemRestart(EmbeddedCli *cli, char *args, void *context) {
 800e004:	b580      	push	{r7, lr}
 800e006:	b092      	sub	sp, #72	; 0x48
 800e008:	af00      	add	r7, sp, #0
 800e00a:	60f8      	str	r0, [r7, #12]
 800e00c:	60b9      	str	r1, [r7, #8]
 800e00e:	607a      	str	r2, [r7, #4]
	  const char *newLine = "\r\n";
 800e010:	4b22      	ldr	r3, [pc, #136]	; (800e09c <SystemRestart+0x98>)
 800e012:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Do you want to restart the device y/n?");
 800e014:	4922      	ldr	r1, [pc, #136]	; (800e0a0 <SystemRestart+0x9c>)
 800e016:	68f8      	ldr	r0, [r7, #12]
 800e018:	f7fe fff8 	bl	800d00c <cli_printf>

	cli_other = 1;
 800e01c:	4b21      	ldr	r3, [pc, #132]	; (800e0a4 <SystemRestart+0xa0>)
 800e01e:	2201      	movs	r2, #1
 800e020:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 800e022:	4b21      	ldr	r3, [pc, #132]	; (800e0a8 <SystemRestart+0xa4>)
 800e024:	2200      	movs	r2, #0
 800e026:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		receiveString(cli,buffer,sizeof(buffer));
 800e028:	f107 0310 	add.w	r3, r7, #16
 800e02c:	2232      	movs	r2, #50	; 0x32
 800e02e:	4619      	mov	r1, r3
 800e030:	68f8      	ldr	r0, [r7, #12]
 800e032:	f7ff f82d 	bl	800d090 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800e036:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e038:	f7f2 f8dc 	bl	80001f4 <strlen>
 800e03c:	4603      	mov	r3, r0
 800e03e:	b29a      	uxth	r2, r3
 800e040:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e044:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e046:	4819      	ldr	r0, [pc, #100]	; (800e0ac <SystemRestart+0xa8>)
 800e048:	f7fb fd46 	bl	8009ad8 <HAL_UART_Transmit>


		if(strstr(buffer, "y"))
 800e04c:	f107 0310 	add.w	r3, r7, #16
 800e050:	2179      	movs	r1, #121	; 0x79
 800e052:	4618      	mov	r0, r3
 800e054:	f00c fba0 	bl	801a798 <strchr>
 800e058:	4603      	mov	r3, r0
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d006      	beq.n	800e06c <SystemRestart+0x68>
		{
			cli_printf(cli,"Device is going to restart.");
 800e05e:	4914      	ldr	r1, [pc, #80]	; (800e0b0 <SystemRestart+0xac>)
 800e060:	68f8      	ldr	r0, [r7, #12]
 800e062:	f7fe ffd3 	bl	800d00c <cli_printf>
			HAL_NVIC_SystemReset();
 800e066:	f7f5 fc24 	bl	80038b2 <HAL_NVIC_SystemReset>
 800e06a:	e00c      	b.n	800e086 <SystemRestart+0x82>
		}
		else if(strstr(buffer, "n"))
 800e06c:	f107 0310 	add.w	r3, r7, #16
 800e070:	216e      	movs	r1, #110	; 0x6e
 800e072:	4618      	mov	r0, r3
 800e074:	f00c fb90 	bl	801a798 <strchr>
 800e078:	4603      	mov	r3, r0
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d003      	beq.n	800e086 <SystemRestart+0x82>
		{
			cli_printf(cli,"Device restart aborted.");
 800e07e:	490d      	ldr	r1, [pc, #52]	; (800e0b4 <SystemRestart+0xb0>)
 800e080:	68f8      	ldr	r0, [r7, #12]
 800e082:	f7fe ffc3 	bl	800d00c <cli_printf>
		}


		flag_cli = 0;
 800e086:	4b08      	ldr	r3, [pc, #32]	; (800e0a8 <SystemRestart+0xa4>)
 800e088:	2200      	movs	r2, #0
 800e08a:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 800e08c:	4b05      	ldr	r3, [pc, #20]	; (800e0a4 <SystemRestart+0xa0>)
 800e08e:	2200      	movs	r2, #0
 800e090:	701a      	strb	r2, [r3, #0]
}
 800e092:	bf00      	nop
 800e094:	3748      	adds	r7, #72	; 0x48
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}
 800e09a:	bf00      	nop
 800e09c:	0801e814 	.word	0x0801e814
 800e0a0:	0801ef24 	.word	0x0801ef24
 800e0a4:	200009be 	.word	0x200009be
 800e0a8:	200009bf 	.word	0x200009bf
 800e0ac:	20000900 	.word	0x20000900
 800e0b0:	0801ef4c 	.word	0x0801ef4c
 800e0b4:	0801ef68 	.word	0x0801ef68

0800e0b8 <Co2Level>:

void Co2Level(EmbeddedCli *cli, char *args, void *context) {
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b084      	sub	sp, #16
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	60f8      	str	r0, [r7, #12]
 800e0c0:	60b9      	str	r1, [r7, #8]
 800e0c2:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"Co2 Value: %d",_RunTime_Packet.co2);
 800e0c4:	4b05      	ldr	r3, [pc, #20]	; (800e0dc <Co2Level+0x24>)
 800e0c6:	881b      	ldrh	r3, [r3, #0]
 800e0c8:	461a      	mov	r2, r3
 800e0ca:	4905      	ldr	r1, [pc, #20]	; (800e0e0 <Co2Level+0x28>)
 800e0cc:	68f8      	ldr	r0, [r7, #12]
 800e0ce:	f7fe ff9d 	bl	800d00c <cli_printf>
}
 800e0d2:	bf00      	nop
 800e0d4:	3710      	adds	r7, #16
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
 800e0da:	bf00      	nop
 800e0dc:	200004c8 	.word	0x200004c8
 800e0e0:	0801ef80 	.word	0x0801ef80

0800e0e4 <TempLevel>:

void TempLevel(EmbeddedCli *cli, char *args, void *context) {
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b084      	sub	sp, #16
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	60f8      	str	r0, [r7, #12]
 800e0ec:	60b9      	str	r1, [r7, #8]
 800e0ee:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"Temperature Value: %dC ",_RunTime_Packet.temperature);
 800e0f0:	4b05      	ldr	r3, [pc, #20]	; (800e108 <TempLevel+0x24>)
 800e0f2:	685b      	ldr	r3, [r3, #4]
 800e0f4:	461a      	mov	r2, r3
 800e0f6:	4905      	ldr	r1, [pc, #20]	; (800e10c <TempLevel+0x28>)
 800e0f8:	68f8      	ldr	r0, [r7, #12]
 800e0fa:	f7fe ff87 	bl	800d00c <cli_printf>
}
 800e0fe:	bf00      	nop
 800e100:	3710      	adds	r7, #16
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}
 800e106:	bf00      	nop
 800e108:	200004c8 	.word	0x200004c8
 800e10c:	0801ef90 	.word	0x0801ef90

0800e110 <HumidLevel>:

void HumidLevel(EmbeddedCli *cli, char *args, void *context) {
 800e110:	b580      	push	{r7, lr}
 800e112:	b084      	sub	sp, #16
 800e114:	af00      	add	r7, sp, #0
 800e116:	60f8      	str	r0, [r7, #12]
 800e118:	60b9      	str	r1, [r7, #8]
 800e11a:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"Humidity Value: %d ",_RunTime_Packet.humidity);
 800e11c:	4b05      	ldr	r3, [pc, #20]	; (800e134 <HumidLevel+0x24>)
 800e11e:	689b      	ldr	r3, [r3, #8]
 800e120:	461a      	mov	r2, r3
 800e122:	4905      	ldr	r1, [pc, #20]	; (800e138 <HumidLevel+0x28>)
 800e124:	68f8      	ldr	r0, [r7, #12]
 800e126:	f7fe ff71 	bl	800d00c <cli_printf>
}
 800e12a:	bf00      	nop
 800e12c:	3710      	adds	r7, #16
 800e12e:	46bd      	mov	sp, r7
 800e130:	bd80      	pop	{r7, pc}
 800e132:	bf00      	nop
 800e134:	200004c8 	.word	0x200004c8
 800e138:	0801efa8 	.word	0x0801efa8

0800e13c <MotionDetection>:

uint8_t prev_motion;

void MotionDetection(EmbeddedCli *cli, char *args, void *context) {
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b084      	sub	sp, #16
 800e140:	af00      	add	r7, sp, #0
 800e142:	60f8      	str	r0, [r7, #12]
 800e144:	60b9      	str	r1, [r7, #8]
 800e146:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"For 10seconds system will poll here to detect motion.");
 800e148:	491f      	ldr	r1, [pc, #124]	; (800e1c8 <MotionDetection+0x8c>)
 800e14a:	68f8      	ldr	r0, [r7, #12]
 800e14c:	f7fe ff5e 	bl	800d00c <cli_printf>
	HAL_Delay(1500);
 800e150:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800e154:	f7f4 fd9e 	bl	8002c94 <HAL_Delay>
         prev_max_wait_time_motion = HAL_GetTick();
 800e158:	f7f4 fd90 	bl	8002c7c <HAL_GetTick>
 800e15c:	4603      	mov	r3, r0
 800e15e:	4a1b      	ldr	r2, [pc, #108]	; (800e1cc <MotionDetection+0x90>)
 800e160:	6013      	str	r3, [r2, #0]
         prev_motion = 0;
 800e162:	4b1b      	ldr	r3, [pc, #108]	; (800e1d0 <MotionDetection+0x94>)
 800e164:	2200      	movs	r2, #0
 800e166:	701a      	strb	r2, [r3, #0]
	while(HAL_GetTick() - prev_max_wait_time_motion < max_wait_time_motion)
 800e168:	e01c      	b.n	800e1a4 <MotionDetection+0x68>
	{

		if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 800e16a:	2101      	movs	r1, #1
 800e16c:	4819      	ldr	r0, [pc, #100]	; (800e1d4 <MotionDetection+0x98>)
 800e16e:	f7f6 f99f 	bl	80044b0 <HAL_GPIO_ReadPin>
 800e172:	4603      	mov	r3, r0
 800e174:	2b00      	cmp	r3, #0
 800e176:	d003      	beq.n	800e180 <MotionDetection+0x44>
				_RunTime_Packet.motion_detection = 1;
 800e178:	4b17      	ldr	r3, [pc, #92]	; (800e1d8 <MotionDetection+0x9c>)
 800e17a:	2201      	movs	r2, #1
 800e17c:	731a      	strb	r2, [r3, #12]
 800e17e:	e002      	b.n	800e186 <MotionDetection+0x4a>
				//cli_printf(cli,"PIR Motion: %d\r\n",_RunTime_Packet.motion_detection);
			}
			else {
				_RunTime_Packet.motion_detection = 0;
 800e180:	4b15      	ldr	r3, [pc, #84]	; (800e1d8 <MotionDetection+0x9c>)
 800e182:	2200      	movs	r2, #0
 800e184:	731a      	strb	r2, [r3, #12]
			}

//		if(prev_motion != _RunTime_Packet.motion_detection )
//	         	{
//			prev_motion = _RunTime_Packet.motion_detection ;
			cli_printf(cli,"PIR Motion: %s\r\n",_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 800e186:	4b14      	ldr	r3, [pc, #80]	; (800e1d8 <MotionDetection+0x9c>)
 800e188:	7b1b      	ldrb	r3, [r3, #12]
 800e18a:	2b01      	cmp	r3, #1
 800e18c:	d101      	bne.n	800e192 <MotionDetection+0x56>
 800e18e:	4b13      	ldr	r3, [pc, #76]	; (800e1dc <MotionDetection+0xa0>)
 800e190:	e000      	b.n	800e194 <MotionDetection+0x58>
 800e192:	4b13      	ldr	r3, [pc, #76]	; (800e1e0 <MotionDetection+0xa4>)
 800e194:	461a      	mov	r2, r3
 800e196:	4913      	ldr	r1, [pc, #76]	; (800e1e4 <MotionDetection+0xa8>)
 800e198:	68f8      	ldr	r0, [r7, #12]
 800e19a:	f7fe ff37 	bl	800d00c <cli_printf>
//	         	}
HAL_Delay(100);
 800e19e:	2064      	movs	r0, #100	; 0x64
 800e1a0:	f7f4 fd78 	bl	8002c94 <HAL_Delay>
	while(HAL_GetTick() - prev_max_wait_time_motion < max_wait_time_motion)
 800e1a4:	f7f4 fd6a 	bl	8002c7c <HAL_GetTick>
 800e1a8:	4602      	mov	r2, r0
 800e1aa:	4b08      	ldr	r3, [pc, #32]	; (800e1cc <MotionDetection+0x90>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	1ad2      	subs	r2, r2, r3
 800e1b0:	4b0d      	ldr	r3, [pc, #52]	; (800e1e8 <MotionDetection+0xac>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d3d8      	bcc.n	800e16a <MotionDetection+0x2e>

	}

	cli_printf(cli,"Session ended");
 800e1b8:	490c      	ldr	r1, [pc, #48]	; (800e1ec <MotionDetection+0xb0>)
 800e1ba:	68f8      	ldr	r0, [r7, #12]
 800e1bc:	f7fe ff26 	bl	800d00c <cli_printf>

}
 800e1c0:	bf00      	nop
 800e1c2:	3710      	adds	r7, #16
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}
 800e1c8:	0801efbc 	.word	0x0801efbc
 800e1cc:	200009b8 	.word	0x200009b8
 800e1d0:	200009c0 	.word	0x200009c0
 800e1d4:	40020000 	.word	0x40020000
 800e1d8:	200004c8 	.word	0x200004c8
 800e1dc:	0801eff4 	.word	0x0801eff4
 800e1e0:	0801effc 	.word	0x0801effc
 800e1e4:	0801f004 	.word	0x0801f004
 800e1e8:	2000001c 	.word	0x2000001c
 800e1ec:	0801f018 	.word	0x0801f018

0800e1f0 <AirQuality>:

void AirQuality(EmbeddedCli *cli, char *args, void *context) {
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b084      	sub	sp, #16
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	60f8      	str	r0, [r7, #12]
 800e1f8:	60b9      	str	r1, [r7, #8]
 800e1fa:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"AirQuality Measured Values:");
 800e1fc:	492c      	ldr	r1, [pc, #176]	; (800e2b0 <AirQuality+0xc0>)
 800e1fe:	68f8      	ldr	r0, [r7, #12]
 800e200:	f7fe ff04 	bl	800d00c <cli_printf>
	if(_RunTime_Packet.pm1_0 == 0 && _RunTime_Packet.pm2_5 == 0 && _RunTime_Packet.pm4_0 == 0 && _RunTime_Packet.pm10_0 == 0)
 800e204:	4b2b      	ldr	r3, [pc, #172]	; (800e2b4 <AirQuality+0xc4>)
 800e206:	edd3 7a04 	vldr	s15, [r3, #16]
 800e20a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e20e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e212:	d11c      	bne.n	800e24e <AirQuality+0x5e>
 800e214:	4b27      	ldr	r3, [pc, #156]	; (800e2b4 <AirQuality+0xc4>)
 800e216:	edd3 7a05 	vldr	s15, [r3, #20]
 800e21a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e21e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e222:	d114      	bne.n	800e24e <AirQuality+0x5e>
 800e224:	4b23      	ldr	r3, [pc, #140]	; (800e2b4 <AirQuality+0xc4>)
 800e226:	edd3 7a06 	vldr	s15, [r3, #24]
 800e22a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e22e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e232:	d10c      	bne.n	800e24e <AirQuality+0x5e>
 800e234:	4b1f      	ldr	r3, [pc, #124]	; (800e2b4 <AirQuality+0xc4>)
 800e236:	edd3 7a07 	vldr	s15, [r3, #28]
 800e23a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e23e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e242:	d104      	bne.n	800e24e <AirQuality+0x5e>
	{
		cli_printf(cli,"Calculating, try again later");
 800e244:	491c      	ldr	r1, [pc, #112]	; (800e2b8 <AirQuality+0xc8>)
 800e246:	68f8      	ldr	r0, [r7, #12]
 800e248:	f7fe fee0 	bl	800d00c <cli_printf>
 800e24c:	e02c      	b.n	800e2a8 <AirQuality+0xb8>
	}
	else
	{
	cli_printf(cli,"%0.2f pm1.0", _RunTime_Packet.pm1_0);
 800e24e:	4b19      	ldr	r3, [pc, #100]	; (800e2b4 <AirQuality+0xc4>)
 800e250:	691b      	ldr	r3, [r3, #16]
 800e252:	4618      	mov	r0, r3
 800e254:	f7f2 f990 	bl	8000578 <__aeabi_f2d>
 800e258:	4602      	mov	r2, r0
 800e25a:	460b      	mov	r3, r1
 800e25c:	4917      	ldr	r1, [pc, #92]	; (800e2bc <AirQuality+0xcc>)
 800e25e:	68f8      	ldr	r0, [r7, #12]
 800e260:	f7fe fed4 	bl	800d00c <cli_printf>
	cli_printf(cli,"%0.2f pm2.5 ",_RunTime_Packet.pm2_5);
 800e264:	4b13      	ldr	r3, [pc, #76]	; (800e2b4 <AirQuality+0xc4>)
 800e266:	695b      	ldr	r3, [r3, #20]
 800e268:	4618      	mov	r0, r3
 800e26a:	f7f2 f985 	bl	8000578 <__aeabi_f2d>
 800e26e:	4602      	mov	r2, r0
 800e270:	460b      	mov	r3, r1
 800e272:	4913      	ldr	r1, [pc, #76]	; (800e2c0 <AirQuality+0xd0>)
 800e274:	68f8      	ldr	r0, [r7, #12]
 800e276:	f7fe fec9 	bl	800d00c <cli_printf>
	cli_printf(cli,"%0.2f pm4.0 ",_RunTime_Packet.pm4_0);
 800e27a:	4b0e      	ldr	r3, [pc, #56]	; (800e2b4 <AirQuality+0xc4>)
 800e27c:	699b      	ldr	r3, [r3, #24]
 800e27e:	4618      	mov	r0, r3
 800e280:	f7f2 f97a 	bl	8000578 <__aeabi_f2d>
 800e284:	4602      	mov	r2, r0
 800e286:	460b      	mov	r3, r1
 800e288:	490e      	ldr	r1, [pc, #56]	; (800e2c4 <AirQuality+0xd4>)
 800e28a:	68f8      	ldr	r0, [r7, #12]
 800e28c:	f7fe febe 	bl	800d00c <cli_printf>
	cli_printf(cli,"%0.2f pm10.0",_RunTime_Packet.pm10_0);
 800e290:	4b08      	ldr	r3, [pc, #32]	; (800e2b4 <AirQuality+0xc4>)
 800e292:	69db      	ldr	r3, [r3, #28]
 800e294:	4618      	mov	r0, r3
 800e296:	f7f2 f96f 	bl	8000578 <__aeabi_f2d>
 800e29a:	4602      	mov	r2, r0
 800e29c:	460b      	mov	r3, r1
 800e29e:	490a      	ldr	r1, [pc, #40]	; (800e2c8 <AirQuality+0xd8>)
 800e2a0:	68f8      	ldr	r0, [r7, #12]
 800e2a2:	f7fe feb3 	bl	800d00c <cli_printf>
	}


}
 800e2a6:	bf00      	nop
 800e2a8:	bf00      	nop
 800e2aa:	3710      	adds	r7, #16
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}
 800e2b0:	0801f028 	.word	0x0801f028
 800e2b4:	200004c8 	.word	0x200004c8
 800e2b8:	0801f044 	.word	0x0801f044
 800e2bc:	0801f064 	.word	0x0801f064
 800e2c0:	0801f070 	.word	0x0801f070
 800e2c4:	0801f080 	.word	0x0801f080
 800e2c8:	0801f090 	.word	0x0801f090

0800e2cc <BattVolt>:

void BattVolt(EmbeddedCli *cli, char *args, void *context) {
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b084      	sub	sp, #16
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	60f8      	str	r0, [r7, #12]
 800e2d4:	60b9      	str	r1, [r7, #8]
 800e2d6:	607a      	str	r2, [r7, #4]

	//float batteryVoltage;
	adc_Measure(&_RunTime_Packet.battery_voltage);
 800e2d8:	4808      	ldr	r0, [pc, #32]	; (800e2fc <BattVolt+0x30>)
 800e2da:	f002 f9e5 	bl	80106a8 <adc_Measure>
	cli_printf(cli,"Battery voltage: %0.2f",_RunTime_Packet.battery_voltage);
 800e2de:	4b08      	ldr	r3, [pc, #32]	; (800e300 <BattVolt+0x34>)
 800e2e0:	6a1b      	ldr	r3, [r3, #32]
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f7f2 f948 	bl	8000578 <__aeabi_f2d>
 800e2e8:	4602      	mov	r2, r0
 800e2ea:	460b      	mov	r3, r1
 800e2ec:	4905      	ldr	r1, [pc, #20]	; (800e304 <BattVolt+0x38>)
 800e2ee:	68f8      	ldr	r0, [r7, #12]
 800e2f0:	f7fe fe8c 	bl	800d00c <cli_printf>


}
 800e2f4:	bf00      	nop
 800e2f6:	3710      	adds	r7, #16
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}
 800e2fc:	200004e8 	.word	0x200004e8
 800e300:	200004c8 	.word	0x200004c8
 800e304:	0801f0a0 	.word	0x0801f0a0

0800e308 <initializeEmbeddedCli>:


/**
 * Initializes the Embedded CLI instance and sets up command bindings.
 */
void initializeEmbeddedCli() {
 800e308:	b5b0      	push	{r4, r5, r7, lr}
 800e30a:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 800e30e:	af02      	add	r7, sp, #8
	cli = embeddedCliNewDefault();
 800e310:	f000 fcd1 	bl	800ecb6 <embeddedCliNewDefault>
 800e314:	4603      	mov	r3, r0
 800e316:	4aac      	ldr	r2, [pc, #688]	; (800e5c8 <initializeEmbeddedCli+0x2c0>)
 800e318:	6013      	str	r3, [r2, #0]

	CliCommandBinding clear_binding = { .name = "clear", .help =
 800e31a:	4bac      	ldr	r3, [pc, #688]	; (800e5cc <initializeEmbeddedCli+0x2c4>)
 800e31c:	f507 7411 	add.w	r4, r7, #580	; 0x244
 800e320:	461d      	mov	r5, r3
 800e322:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e324:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e326:	682b      	ldr	r3, [r5, #0]
 800e328:	6023      	str	r3, [r4, #0]
			"Clears the console", .tokenizeArgs = true, .context = NULL,
			.binding = onClearCLI };

	CliCommandBinding Debug_scd4x_PM25 = { .name = "debug", .help =
 800e32a:	4ba9      	ldr	r3, [pc, #676]	; (800e5d0 <initializeEmbeddedCli+0x2c8>)
 800e32c:	f507 740c 	add.w	r4, r7, #560	; 0x230
 800e330:	461d      	mov	r5, r3
 800e332:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e334:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e336:	682b      	ldr	r3, [r5, #0]
 800e338:	6023      	str	r3, [r4, #0]
			"Enable/Disable debug messages for scd4x and PM sensor", .tokenizeArgs = true, .context = NULL,
			.binding = debug_scd4x_PM25 };

	CliCommandBinding Get_DeviceSignature = { .name = "get-Device-Signature", .help =
 800e33a:	4ba6      	ldr	r3, [pc, #664]	; (800e5d4 <initializeEmbeddedCli+0x2cc>)
 800e33c:	f507 7407 	add.w	r4, r7, #540	; 0x21c
 800e340:	461d      	mov	r5, r3
 800e342:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e344:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e346:	682b      	ldr	r3, [r5, #0]
 800e348:	6023      	str	r3, [r4, #0]
				"Device Signature-Electronic ID", .tokenizeArgs = true, .context = NULL,
				.binding = DeviceSignature };

	CliCommandBinding Set_ID = { .name = "set-id", .help =
 800e34a:	4ba3      	ldr	r3, [pc, #652]	; (800e5d8 <initializeEmbeddedCli+0x2d0>)
 800e34c:	f507 7402 	add.w	r4, r7, #520	; 0x208
 800e350:	461d      	mov	r5, r3
 800e352:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e354:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e356:	682b      	ldr	r3, [r5, #0]
 800e358:	6023      	str	r3, [r4, #0]
				"Sets ID", .tokenizeArgs = true, .context = NULL,
				.binding = SetID };

	CliCommandBinding Set_Location = { .name = "set-location", .help =
 800e35a:	4ba0      	ldr	r3, [pc, #640]	; (800e5dc <initializeEmbeddedCli+0x2d4>)
 800e35c:	f507 74fa 	add.w	r4, r7, #500	; 0x1f4
 800e360:	461d      	mov	r5, r3
 800e362:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e366:	682b      	ldr	r3, [r5, #0]
 800e368:	6023      	str	r3, [r4, #0]
				"Sets Location", .tokenizeArgs = true, .context = NULL,
				.binding = SetLocation };

	CliCommandBinding Set_name = { .name = "set-name", .help =
 800e36a:	4b9d      	ldr	r3, [pc, #628]	; (800e5e0 <initializeEmbeddedCli+0x2d8>)
 800e36c:	f507 74f0 	add.w	r4, r7, #480	; 0x1e0
 800e370:	461d      	mov	r5, r3
 800e372:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e374:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e376:	682b      	ldr	r3, [r5, #0]
 800e378:	6023      	str	r3, [r4, #0]
				"Sets name", .tokenizeArgs = true, .context = NULL,
				.binding = Setname };

	CliCommandBinding Set_group = { .name = "set-group", .help =
 800e37a:	4b9a      	ldr	r3, [pc, #616]	; (800e5e4 <initializeEmbeddedCli+0x2dc>)
 800e37c:	f507 74e6 	add.w	r4, r7, #460	; 0x1cc
 800e380:	461d      	mov	r5, r3
 800e382:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e386:	682b      	ldr	r3, [r5, #0]
 800e388:	6023      	str	r3, [r4, #0]
				"Sets group", .tokenizeArgs = true, .context = NULL,
				.binding = Setgroup };

	CliCommandBinding Get_ID = { .name = "get-id", .help =
 800e38a:	4b97      	ldr	r3, [pc, #604]	; (800e5e8 <initializeEmbeddedCli+0x2e0>)
 800e38c:	f507 74dc 	add.w	r4, r7, #440	; 0x1b8
 800e390:	461d      	mov	r5, r3
 800e392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e396:	682b      	ldr	r3, [r5, #0]
 800e398:	6023      	str	r3, [r4, #0]
				"gets ID", .tokenizeArgs = true, .context = NULL,
				.binding = GetID };

	CliCommandBinding Get_Location = { .name = "get-location", .help =
 800e39a:	4b94      	ldr	r3, [pc, #592]	; (800e5ec <initializeEmbeddedCli+0x2e4>)
 800e39c:	f507 74d2 	add.w	r4, r7, #420	; 0x1a4
 800e3a0:	461d      	mov	r5, r3
 800e3a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e3a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e3a6:	682b      	ldr	r3, [r5, #0]
 800e3a8:	6023      	str	r3, [r4, #0]
				"gets Location", .tokenizeArgs = true, .context = NULL,
				.binding = GetLocation };

	CliCommandBinding Get_name = { .name = "get-name", .help =
 800e3aa:	4b91      	ldr	r3, [pc, #580]	; (800e5f0 <initializeEmbeddedCli+0x2e8>)
 800e3ac:	f507 74c8 	add.w	r4, r7, #400	; 0x190
 800e3b0:	461d      	mov	r5, r3
 800e3b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e3b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e3b6:	682b      	ldr	r3, [r5, #0]
 800e3b8:	6023      	str	r3, [r4, #0]
				"gets name", .tokenizeArgs = true, .context = NULL,
				.binding = Getname };

	CliCommandBinding Get_group = { .name = "get-group", .help =
 800e3ba:	4b8e      	ldr	r3, [pc, #568]	; (800e5f4 <initializeEmbeddedCli+0x2ec>)
 800e3bc:	f507 74be 	add.w	r4, r7, #380	; 0x17c
 800e3c0:	461d      	mov	r5, r3
 800e3c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e3c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e3c6:	682b      	ldr	r3, [r5, #0]
 800e3c8:	6023      	str	r3, [r4, #0]
				"gets group", .tokenizeArgs = true, .context = NULL,
				.binding = Getgroup };

	CliCommandBinding Set_Date = { .name = "set-date", .help =
 800e3ca:	4b8b      	ldr	r3, [pc, #556]	; (800e5f8 <initializeEmbeddedCli+0x2f0>)
 800e3cc:	f507 74b4 	add.w	r4, r7, #360	; 0x168
 800e3d0:	461d      	mov	r5, r3
 800e3d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e3d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e3d6:	682b      	ldr	r3, [r5, #0]
 800e3d8:	6023      	str	r3, [r4, #0]
			"Set Systems Date", .tokenizeArgs = true, .context = NULL,
			.binding = SetDate };

	CliCommandBinding Set_Time = { .name = "set-time", .help =
 800e3da:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e3de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e3e2:	4a86      	ldr	r2, [pc, #536]	; (800e5fc <initializeEmbeddedCli+0x2f4>)
 800e3e4:	461c      	mov	r4, r3
 800e3e6:	4615      	mov	r5, r2
 800e3e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e3ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e3ec:	682b      	ldr	r3, [r5, #0]
 800e3ee:	6023      	str	r3, [r4, #0]
			"Set Systems Time", .tokenizeArgs = true, .context = NULL,
			.binding = SetTime };

	CliCommandBinding Get_Date = { .name = "get-date", .help =
 800e3f0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e3f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800e3f8:	4a81      	ldr	r2, [pc, #516]	; (800e600 <initializeEmbeddedCli+0x2f8>)
 800e3fa:	461c      	mov	r4, r3
 800e3fc:	4615      	mov	r5, r2
 800e3fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e400:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e402:	682b      	ldr	r3, [r5, #0]
 800e404:	6023      	str	r3, [r4, #0]
			"Get Systems Date", .tokenizeArgs = true, .context = NULL,
			.binding = GetDate };

	CliCommandBinding Get_Time = { .name = "get-time", .help =
 800e406:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e40a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e40e:	4a7d      	ldr	r2, [pc, #500]	; (800e604 <initializeEmbeddedCli+0x2fc>)
 800e410:	461c      	mov	r4, r3
 800e412:	4615      	mov	r5, r2
 800e414:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e416:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e418:	682b      	ldr	r3, [r5, #0]
 800e41a:	6023      	str	r3, [r4, #0]
			"Get Systems Time", .tokenizeArgs = true, .context = NULL,
			.binding = GetTime };

	CliCommandBinding Set_Interval = { .name = "set-interval", .help =
 800e41c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e420:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800e424:	4a78      	ldr	r2, [pc, #480]	; (800e608 <initializeEmbeddedCli+0x300>)
 800e426:	461c      	mov	r4, r3
 800e428:	4615      	mov	r5, r2
 800e42a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e42c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e42e:	682b      	ldr	r3, [r5, #0]
 800e430:	6023      	str	r3, [r4, #0]
			"Set Time Interval for fetching the data", .tokenizeArgs = true, .context = NULL,
			.binding = SetInterval };

	CliCommandBinding Get_Interval = { .name = "get-interval", .help =
 800e432:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e436:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800e43a:	4a74      	ldr	r2, [pc, #464]	; (800e60c <initializeEmbeddedCli+0x304>)
 800e43c:	461c      	mov	r4, r3
 800e43e:	4615      	mov	r5, r2
 800e440:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e442:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e444:	682b      	ldr	r3, [r5, #0]
 800e446:	6023      	str	r3, [r4, #0]
			"Get Time Interval", .tokenizeArgs = true, .context = NULL,
			.binding = GetInterval };


	CliCommandBinding Set_Filename = { .name = "set-filename", .help =
 800e448:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e44c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800e450:	4a6f      	ldr	r2, [pc, #444]	; (800e610 <initializeEmbeddedCli+0x308>)
 800e452:	461c      	mov	r4, r3
 800e454:	4615      	mov	r5, r2
 800e456:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e458:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e45a:	682b      	ldr	r3, [r5, #0]
 800e45c:	6023      	str	r3, [r4, #0]
			"Set desired filename", .tokenizeArgs = true, .context = NULL,
			.binding = SetFilename };

	CliCommandBinding Get_Filename = { .name = "get-filename", .help =
 800e45e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e462:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800e466:	4a6b      	ldr	r2, [pc, #428]	; (800e614 <initializeEmbeddedCli+0x30c>)
 800e468:	461c      	mov	r4, r3
 800e46a:	4615      	mov	r5, r2
 800e46c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e46e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e470:	682b      	ldr	r3, [r5, #0]
 800e472:	6023      	str	r3, [r4, #0]
			"Get filename", .tokenizeArgs = true, .context = NULL,
			.binding = GetFilename };


	CliCommandBinding Set_Fileformat = { .name = "set-fileformat", .help =
 800e474:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e478:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800e47c:	4a66      	ldr	r2, [pc, #408]	; (800e618 <initializeEmbeddedCli+0x310>)
 800e47e:	461c      	mov	r4, r3
 800e480:	4615      	mov	r5, r2
 800e482:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e484:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e486:	682b      	ldr	r3, [r5, #0]
 800e488:	6023      	str	r3, [r4, #0]
			"Set desired file format", .tokenizeArgs = true, .context = NULL,
			.binding = SetFileformat };

	CliCommandBinding Get_Fileformat = { .name = "get-fileformat", .help =
 800e48a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e48e:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800e492:	4a62      	ldr	r2, [pc, #392]	; (800e61c <initializeEmbeddedCli+0x314>)
 800e494:	461c      	mov	r4, r3
 800e496:	4615      	mov	r5, r2
 800e498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e49a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e49c:	682b      	ldr	r3, [r5, #0]
 800e49e:	6023      	str	r3, [r4, #0]
			"Get file format", .tokenizeArgs = true, .context = NULL,
			.binding = GetFileformat };

	CliCommandBinding Fan_Clean = { .name = "fan-clean", .help =
 800e4a0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e4a4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800e4a8:	4a5d      	ldr	r2, [pc, #372]	; (800e620 <initializeEmbeddedCli+0x318>)
 800e4aa:	461c      	mov	r4, r3
 800e4ac:	4615      	mov	r5, r2
 800e4ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e4b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e4b2:	682b      	ldr	r3, [r5, #0]
 800e4b4:	6023      	str	r3, [r4, #0]
			"Particle sensor fan cleaning", .tokenizeArgs = true, .context = NULL,
			.binding = fanclean };

	CliCommandBinding Co2_Calibration = { .name = "co2-calibration", .help =
 800e4b6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e4ba:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800e4be:	4a59      	ldr	r2, [pc, #356]	; (800e624 <initializeEmbeddedCli+0x31c>)
 800e4c0:	461c      	mov	r4, r3
 800e4c2:	4615      	mov	r5, r2
 800e4c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e4c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e4c8:	682b      	ldr	r3, [r5, #0]
 800e4ca:	6023      	str	r3, [r4, #0]
			"Calibrate the co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = co2calibrate };

	CliCommandBinding Systemreset = { .name = "system-restart", .help =
 800e4cc:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e4d0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800e4d4:	4a54      	ldr	r2, [pc, #336]	; (800e628 <initializeEmbeddedCli+0x320>)
 800e4d6:	461c      	mov	r4, r3
 800e4d8:	4615      	mov	r5, r2
 800e4da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e4dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e4de:	682b      	ldr	r3, [r5, #0]
 800e4e0:	6023      	str	r3, [r4, #0]
			"Restart the system", .tokenizeArgs = true, .context = NULL,
			.binding = SystemRestart };

	CliCommandBinding Co2_Level = { .name = "Co2-level", .help =
 800e4e2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e4e6:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800e4ea:	4a50      	ldr	r2, [pc, #320]	; (800e62c <initializeEmbeddedCli+0x324>)
 800e4ec:	461c      	mov	r4, r3
 800e4ee:	4615      	mov	r5, r2
 800e4f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e4f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e4f4:	682b      	ldr	r3, [r5, #0]
 800e4f6:	6023      	str	r3, [r4, #0]
			"Check Co2 level", .tokenizeArgs = true, .context = NULL,
			.binding = Co2Level };

	CliCommandBinding Temp_Level = { .name = "temperature-level", .help =
 800e4f8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e4fc:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800e500:	4a4b      	ldr	r2, [pc, #300]	; (800e630 <initializeEmbeddedCli+0x328>)
 800e502:	461c      	mov	r4, r3
 800e504:	4615      	mov	r5, r2
 800e506:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e508:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e50a:	682b      	ldr	r3, [r5, #0]
 800e50c:	6023      	str	r3, [r4, #0]
			"Check Temperature level", .tokenizeArgs = true, .context = NULL,
			.binding = TempLevel };

	CliCommandBinding Humid_Level = { .name = "humidity-level", .help =
 800e50e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e512:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800e516:	4a47      	ldr	r2, [pc, #284]	; (800e634 <initializeEmbeddedCli+0x32c>)
 800e518:	461c      	mov	r4, r3
 800e51a:	4615      	mov	r5, r2
 800e51c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e51e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e520:	682b      	ldr	r3, [r5, #0]
 800e522:	6023      	str	r3, [r4, #0]
			"Check Humidity level", .tokenizeArgs = true, .context = NULL,
			.binding = HumidLevel };

	CliCommandBinding Motion_Detection = { .name = "motion-detection", .help =
 800e524:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e528:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800e52c:	4a42      	ldr	r2, [pc, #264]	; (800e638 <initializeEmbeddedCli+0x330>)
 800e52e:	461c      	mov	r4, r3
 800e530:	4615      	mov	r5, r2
 800e532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e536:	682b      	ldr	r3, [r5, #0]
 800e538:	6023      	str	r3, [r4, #0]
			"Detect Motion", .tokenizeArgs = true, .context = NULL,
			.binding = MotionDetection };

	CliCommandBinding Air_Quality = { .name = "air-quality", .help =
 800e53a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e53e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800e542:	4a3e      	ldr	r2, [pc, #248]	; (800e63c <initializeEmbeddedCli+0x334>)
 800e544:	461c      	mov	r4, r3
 800e546:	4615      	mov	r5, r2
 800e548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e54a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e54c:	682b      	ldr	r3, [r5, #0]
 800e54e:	6023      	str	r3, [r4, #0]
				"Check air quality level", .tokenizeArgs = true, .context = NULL,
				.binding = AirQuality };

	CliCommandBinding Battery_Voltage = { .name = "battery-volt", .help =
 800e550:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e554:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800e558:	4a39      	ldr	r2, [pc, #228]	; (800e640 <initializeEmbeddedCli+0x338>)
 800e55a:	461c      	mov	r4, r3
 800e55c:	4615      	mov	r5, r2
 800e55e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e562:	682b      	ldr	r3, [r5, #0]
 800e564:	6023      	str	r3, [r4, #0]
				.binding = BattVolt };



	// EmbeddedCli *cli = getCliPointer;debug_scd4x_PM25
	embeddedCliAddBinding(cli, clear_binding);
 800e566:	4b18      	ldr	r3, [pc, #96]	; (800e5c8 <initializeEmbeddedCli+0x2c0>)
 800e568:	681c      	ldr	r4, [r3, #0]
 800e56a:	466a      	mov	r2, sp
 800e56c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800e570:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e574:	e882 0003 	stmia.w	r2, {r0, r1}
 800e578:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800e57c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e57e:	4620      	mov	r0, r4
 800e580:	f000 fc57 	bl	800ee32 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Debug_scd4x_PM25);
 800e584:	4b10      	ldr	r3, [pc, #64]	; (800e5c8 <initializeEmbeddedCli+0x2c0>)
 800e586:	681c      	ldr	r4, [r3, #0]
 800e588:	466a      	mov	r2, sp
 800e58a:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 800e58e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e592:	e882 0003 	stmia.w	r2, {r0, r1}
 800e596:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800e59a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e59c:	4620      	mov	r0, r4
 800e59e:	f000 fc48 	bl	800ee32 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_DeviceSignature);
 800e5a2:	4b09      	ldr	r3, [pc, #36]	; (800e5c8 <initializeEmbeddedCli+0x2c0>)
 800e5a4:	681c      	ldr	r4, [r3, #0]
 800e5a6:	466a      	mov	r2, sp
 800e5a8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e5ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e5b0:	e882 0003 	stmia.w	r2, {r0, r1}
 800e5b4:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e5b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e5ba:	4620      	mov	r0, r4
 800e5bc:	f000 fc39 	bl	800ee32 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_ID);
 800e5c0:	4b01      	ldr	r3, [pc, #4]	; (800e5c8 <initializeEmbeddedCli+0x2c0>)
 800e5c2:	681c      	ldr	r4, [r3, #0]
 800e5c4:	466a      	mov	r2, sp
 800e5c6:	e03d      	b.n	800e644 <initializeEmbeddedCli+0x33c>
 800e5c8:	200009b0 	.word	0x200009b0
 800e5cc:	0801f0b8 	.word	0x0801f0b8
 800e5d0:	0801f0cc 	.word	0x0801f0cc
 800e5d4:	0801f0e0 	.word	0x0801f0e0
 800e5d8:	0801f0f4 	.word	0x0801f0f4
 800e5dc:	0801f108 	.word	0x0801f108
 800e5e0:	0801f11c 	.word	0x0801f11c
 800e5e4:	0801f130 	.word	0x0801f130
 800e5e8:	0801f144 	.word	0x0801f144
 800e5ec:	0801f158 	.word	0x0801f158
 800e5f0:	0801f16c 	.word	0x0801f16c
 800e5f4:	0801f180 	.word	0x0801f180
 800e5f8:	0801f194 	.word	0x0801f194
 800e5fc:	0801f1a8 	.word	0x0801f1a8
 800e600:	0801f1bc 	.word	0x0801f1bc
 800e604:	0801f1d0 	.word	0x0801f1d0
 800e608:	0801f1e4 	.word	0x0801f1e4
 800e60c:	0801f1f8 	.word	0x0801f1f8
 800e610:	0801f20c 	.word	0x0801f20c
 800e614:	0801f220 	.word	0x0801f220
 800e618:	0801f234 	.word	0x0801f234
 800e61c:	0801f248 	.word	0x0801f248
 800e620:	0801f25c 	.word	0x0801f25c
 800e624:	0801f270 	.word	0x0801f270
 800e628:	0801f284 	.word	0x0801f284
 800e62c:	0801f298 	.word	0x0801f298
 800e630:	0801f2ac 	.word	0x0801f2ac
 800e634:	0801f2c0 	.word	0x0801f2c0
 800e638:	0801f2d4 	.word	0x0801f2d4
 800e63c:	0801f2e8 	.word	0x0801f2e8
 800e640:	0801f2fc 	.word	0x0801f2fc
 800e644:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800e648:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e64c:	e882 0003 	stmia.w	r2, {r0, r1}
 800e650:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800e654:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e656:	4620      	mov	r0, r4
 800e658:	f000 fbeb 	bl	800ee32 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Location);
 800e65c:	4bd6      	ldr	r3, [pc, #856]	; (800e9b8 <initializeEmbeddedCli+0x6b0>)
 800e65e:	681c      	ldr	r4, [r3, #0]
 800e660:	466a      	mov	r2, sp
 800e662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800e666:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e66a:	e882 0003 	stmia.w	r2, {r0, r1}
 800e66e:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 800e672:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e674:	4620      	mov	r0, r4
 800e676:	f000 fbdc 	bl	800ee32 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_name);
 800e67a:	4bcf      	ldr	r3, [pc, #828]	; (800e9b8 <initializeEmbeddedCli+0x6b0>)
 800e67c:	681c      	ldr	r4, [r3, #0]
 800e67e:	466a      	mov	r2, sp
 800e680:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 800e684:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e688:	e882 0003 	stmia.w	r2, {r0, r1}
 800e68c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800e690:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e692:	4620      	mov	r0, r4
 800e694:	f000 fbcd 	bl	800ee32 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_group);
 800e698:	4bc7      	ldr	r3, [pc, #796]	; (800e9b8 <initializeEmbeddedCli+0x6b0>)
 800e69a:	681c      	ldr	r4, [r3, #0]
 800e69c:	466a      	mov	r2, sp
 800e69e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800e6a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e6a6:	e882 0003 	stmia.w	r2, {r0, r1}
 800e6aa:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800e6ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e6b0:	4620      	mov	r0, r4
 800e6b2:	f000 fbbe 	bl	800ee32 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_ID);
 800e6b6:	4bc0      	ldr	r3, [pc, #768]	; (800e9b8 <initializeEmbeddedCli+0x6b0>)
 800e6b8:	681c      	ldr	r4, [r3, #0]
 800e6ba:	466a      	mov	r2, sp
 800e6bc:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 800e6c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e6c4:	e882 0003 	stmia.w	r2, {r0, r1}
 800e6c8:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800e6cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e6ce:	4620      	mov	r0, r4
 800e6d0:	f000 fbaf 	bl	800ee32 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Location);
 800e6d4:	4bb8      	ldr	r3, [pc, #736]	; (800e9b8 <initializeEmbeddedCli+0x6b0>)
 800e6d6:	681c      	ldr	r4, [r3, #0]
 800e6d8:	466a      	mov	r2, sp
 800e6da:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800e6de:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e6e2:	e882 0003 	stmia.w	r2, {r0, r1}
 800e6e6:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800e6ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e6ec:	4620      	mov	r0, r4
 800e6ee:	f000 fba0 	bl	800ee32 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_name);
 800e6f2:	4bb1      	ldr	r3, [pc, #708]	; (800e9b8 <initializeEmbeddedCli+0x6b0>)
 800e6f4:	681c      	ldr	r4, [r3, #0]
 800e6f6:	466a      	mov	r2, sp
 800e6f8:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800e6fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e700:	e882 0003 	stmia.w	r2, {r0, r1}
 800e704:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800e708:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e70a:	4620      	mov	r0, r4
 800e70c:	f000 fb91 	bl	800ee32 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_group);
 800e710:	4ba9      	ldr	r3, [pc, #676]	; (800e9b8 <initializeEmbeddedCli+0x6b0>)
 800e712:	681c      	ldr	r4, [r3, #0]
 800e714:	466a      	mov	r2, sp
 800e716:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800e71a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e71e:	e882 0003 	stmia.w	r2, {r0, r1}
 800e722:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800e726:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e728:	4620      	mov	r0, r4
 800e72a:	f000 fb82 	bl	800ee32 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Date);
 800e72e:	4ba2      	ldr	r3, [pc, #648]	; (800e9b8 <initializeEmbeddedCli+0x6b0>)
 800e730:	681c      	ldr	r4, [r3, #0]
 800e732:	466a      	mov	r2, sp
 800e734:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800e738:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e73c:	e882 0003 	stmia.w	r2, {r0, r1}
 800e740:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800e744:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e746:	4620      	mov	r0, r4
 800e748:	f000 fb73 	bl	800ee32 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Time);
 800e74c:	4b9a      	ldr	r3, [pc, #616]	; (800e9b8 <initializeEmbeddedCli+0x6b0>)
 800e74e:	681c      	ldr	r4, [r3, #0]
 800e750:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e754:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e758:	466d      	mov	r5, sp
 800e75a:	f103 020c 	add.w	r2, r3, #12
 800e75e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e762:	e885 0003 	stmia.w	r5, {r0, r1}
 800e766:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e768:	4620      	mov	r0, r4
 800e76a:	f000 fb62 	bl	800ee32 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Date);
 800e76e:	4b92      	ldr	r3, [pc, #584]	; (800e9b8 <initializeEmbeddedCli+0x6b0>)
 800e770:	681c      	ldr	r4, [r3, #0]
 800e772:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e776:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800e77a:	466d      	mov	r5, sp
 800e77c:	f103 020c 	add.w	r2, r3, #12
 800e780:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e784:	e885 0003 	stmia.w	r5, {r0, r1}
 800e788:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e78a:	4620      	mov	r0, r4
 800e78c:	f000 fb51 	bl	800ee32 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Time);
 800e790:	4b89      	ldr	r3, [pc, #548]	; (800e9b8 <initializeEmbeddedCli+0x6b0>)
 800e792:	681c      	ldr	r4, [r3, #0]
 800e794:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e798:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e79c:	466d      	mov	r5, sp
 800e79e:	f103 020c 	add.w	r2, r3, #12
 800e7a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e7a6:	e885 0003 	stmia.w	r5, {r0, r1}
 800e7aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e7ac:	4620      	mov	r0, r4
 800e7ae:	f000 fb40 	bl	800ee32 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Interval);
 800e7b2:	4b81      	ldr	r3, [pc, #516]	; (800e9b8 <initializeEmbeddedCli+0x6b0>)
 800e7b4:	681c      	ldr	r4, [r3, #0]
 800e7b6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e7ba:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800e7be:	466d      	mov	r5, sp
 800e7c0:	f103 020c 	add.w	r2, r3, #12
 800e7c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e7c8:	e885 0003 	stmia.w	r5, {r0, r1}
 800e7cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e7ce:	4620      	mov	r0, r4
 800e7d0:	f000 fb2f 	bl	800ee32 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Interval);
 800e7d4:	4b78      	ldr	r3, [pc, #480]	; (800e9b8 <initializeEmbeddedCli+0x6b0>)
 800e7d6:	681c      	ldr	r4, [r3, #0]
 800e7d8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e7dc:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800e7e0:	466d      	mov	r5, sp
 800e7e2:	f103 020c 	add.w	r2, r3, #12
 800e7e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e7ea:	e885 0003 	stmia.w	r5, {r0, r1}
 800e7ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e7f0:	4620      	mov	r0, r4
 800e7f2:	f000 fb1e 	bl	800ee32 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Filename);
 800e7f6:	4b70      	ldr	r3, [pc, #448]	; (800e9b8 <initializeEmbeddedCli+0x6b0>)
 800e7f8:	681c      	ldr	r4, [r3, #0]
 800e7fa:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e7fe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800e802:	466d      	mov	r5, sp
 800e804:	f103 020c 	add.w	r2, r3, #12
 800e808:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e80c:	e885 0003 	stmia.w	r5, {r0, r1}
 800e810:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e812:	4620      	mov	r0, r4
 800e814:	f000 fb0d 	bl	800ee32 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Filename);
 800e818:	4b67      	ldr	r3, [pc, #412]	; (800e9b8 <initializeEmbeddedCli+0x6b0>)
 800e81a:	681c      	ldr	r4, [r3, #0]
 800e81c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e820:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800e824:	466d      	mov	r5, sp
 800e826:	f103 020c 	add.w	r2, r3, #12
 800e82a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e82e:	e885 0003 	stmia.w	r5, {r0, r1}
 800e832:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e834:	4620      	mov	r0, r4
 800e836:	f000 fafc 	bl	800ee32 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Fileformat);
 800e83a:	4b5f      	ldr	r3, [pc, #380]	; (800e9b8 <initializeEmbeddedCli+0x6b0>)
 800e83c:	681c      	ldr	r4, [r3, #0]
 800e83e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e842:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800e846:	466d      	mov	r5, sp
 800e848:	f103 020c 	add.w	r2, r3, #12
 800e84c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e850:	e885 0003 	stmia.w	r5, {r0, r1}
 800e854:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e856:	4620      	mov	r0, r4
 800e858:	f000 faeb 	bl	800ee32 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Fileformat);
 800e85c:	4b56      	ldr	r3, [pc, #344]	; (800e9b8 <initializeEmbeddedCli+0x6b0>)
 800e85e:	681c      	ldr	r4, [r3, #0]
 800e860:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e864:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800e868:	466d      	mov	r5, sp
 800e86a:	f103 020c 	add.w	r2, r3, #12
 800e86e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e872:	e885 0003 	stmia.w	r5, {r0, r1}
 800e876:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e878:	4620      	mov	r0, r4
 800e87a:	f000 fada 	bl	800ee32 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Fan_Clean);
 800e87e:	4b4e      	ldr	r3, [pc, #312]	; (800e9b8 <initializeEmbeddedCli+0x6b0>)
 800e880:	681c      	ldr	r4, [r3, #0]
 800e882:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e886:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800e88a:	466d      	mov	r5, sp
 800e88c:	f103 020c 	add.w	r2, r3, #12
 800e890:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e894:	e885 0003 	stmia.w	r5, {r0, r1}
 800e898:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e89a:	4620      	mov	r0, r4
 800e89c:	f000 fac9 	bl	800ee32 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Calibration);
 800e8a0:	4b45      	ldr	r3, [pc, #276]	; (800e9b8 <initializeEmbeddedCli+0x6b0>)
 800e8a2:	681c      	ldr	r4, [r3, #0]
 800e8a4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e8a8:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800e8ac:	466d      	mov	r5, sp
 800e8ae:	f103 020c 	add.w	r2, r3, #12
 800e8b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e8b6:	e885 0003 	stmia.w	r5, {r0, r1}
 800e8ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e8bc:	4620      	mov	r0, r4
 800e8be:	f000 fab8 	bl	800ee32 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Systemreset);
 800e8c2:	4b3d      	ldr	r3, [pc, #244]	; (800e9b8 <initializeEmbeddedCli+0x6b0>)
 800e8c4:	681c      	ldr	r4, [r3, #0]
 800e8c6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e8ca:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800e8ce:	466d      	mov	r5, sp
 800e8d0:	f103 020c 	add.w	r2, r3, #12
 800e8d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e8d8:	e885 0003 	stmia.w	r5, {r0, r1}
 800e8dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e8de:	4620      	mov	r0, r4
 800e8e0:	f000 faa7 	bl	800ee32 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Level);
 800e8e4:	4b34      	ldr	r3, [pc, #208]	; (800e9b8 <initializeEmbeddedCli+0x6b0>)
 800e8e6:	681c      	ldr	r4, [r3, #0]
 800e8e8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e8ec:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800e8f0:	466d      	mov	r5, sp
 800e8f2:	f103 020c 	add.w	r2, r3, #12
 800e8f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e8fa:	e885 0003 	stmia.w	r5, {r0, r1}
 800e8fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e900:	4620      	mov	r0, r4
 800e902:	f000 fa96 	bl	800ee32 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Temp_Level);
 800e906:	4b2c      	ldr	r3, [pc, #176]	; (800e9b8 <initializeEmbeddedCli+0x6b0>)
 800e908:	681c      	ldr	r4, [r3, #0]
 800e90a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e90e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800e912:	466d      	mov	r5, sp
 800e914:	f103 020c 	add.w	r2, r3, #12
 800e918:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e91c:	e885 0003 	stmia.w	r5, {r0, r1}
 800e920:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e922:	4620      	mov	r0, r4
 800e924:	f000 fa85 	bl	800ee32 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Humid_Level);
 800e928:	4b23      	ldr	r3, [pc, #140]	; (800e9b8 <initializeEmbeddedCli+0x6b0>)
 800e92a:	681c      	ldr	r4, [r3, #0]
 800e92c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e930:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800e934:	466d      	mov	r5, sp
 800e936:	f103 020c 	add.w	r2, r3, #12
 800e93a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e93e:	e885 0003 	stmia.w	r5, {r0, r1}
 800e942:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e944:	4620      	mov	r0, r4
 800e946:	f000 fa74 	bl	800ee32 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Motion_Detection);
 800e94a:	4b1b      	ldr	r3, [pc, #108]	; (800e9b8 <initializeEmbeddedCli+0x6b0>)
 800e94c:	681c      	ldr	r4, [r3, #0]
 800e94e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e952:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800e956:	466d      	mov	r5, sp
 800e958:	f103 020c 	add.w	r2, r3, #12
 800e95c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e960:	e885 0003 	stmia.w	r5, {r0, r1}
 800e964:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e966:	4620      	mov	r0, r4
 800e968:	f000 fa63 	bl	800ee32 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Air_Quality);
 800e96c:	4b12      	ldr	r3, [pc, #72]	; (800e9b8 <initializeEmbeddedCli+0x6b0>)
 800e96e:	681c      	ldr	r4, [r3, #0]
 800e970:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e974:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800e978:	466d      	mov	r5, sp
 800e97a:	f103 020c 	add.w	r2, r3, #12
 800e97e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e982:	e885 0003 	stmia.w	r5, {r0, r1}
 800e986:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e988:	4620      	mov	r0, r4
 800e98a:	f000 fa52 	bl	800ee32 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Battery_Voltage);
 800e98e:	4b0a      	ldr	r3, [pc, #40]	; (800e9b8 <initializeEmbeddedCli+0x6b0>)
 800e990:	681c      	ldr	r4, [r3, #0]
 800e992:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800e996:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800e99a:	466d      	mov	r5, sp
 800e99c:	f103 020c 	add.w	r2, r3, #12
 800e9a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e9a4:	e885 0003 	stmia.w	r5, {r0, r1}
 800e9a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e9aa:	4620      	mov	r0, r4
 800e9ac:	f000 fa41 	bl	800ee32 <embeddedCliAddBinding>
	// Assign character write function
	cli->writeChar = writeCharToCli;
 800e9b0:	4b01      	ldr	r3, [pc, #4]	; (800e9b8 <initializeEmbeddedCli+0x6b0>)
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	e002      	b.n	800e9bc <initializeEmbeddedCli+0x6b4>
 800e9b6:	bf00      	nop
 800e9b8:	200009b0 	.word	0x200009b0
 800e9bc:	4a06      	ldr	r2, [pc, #24]	; (800e9d8 <initializeEmbeddedCli+0x6d0>)
 800e9be:	601a      	str	r2, [r3, #0]
	// cli->onCommand = onCommand;
	// CLI has now been initialized, set bool to true to enable interrupts.
	cliIsReady = true;
 800e9c0:	4b06      	ldr	r3, [pc, #24]	; (800e9dc <initializeEmbeddedCli+0x6d4>)
 800e9c2:	2201      	movs	r2, #1
 800e9c4:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800e9c6:	4b06      	ldr	r3, [pc, #24]	; (800e9e0 <initializeEmbeddedCli+0x6d8>)
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	701a      	strb	r2, [r3, #0]
}
 800e9cc:	bf00      	nop
 800e9ce:	f507 7716 	add.w	r7, r7, #600	; 0x258
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bdb0      	pop	{r4, r5, r7, pc}
 800e9d6:	bf00      	nop
 800e9d8:	0800cfe1 	.word	0x0800cfe1
 800e9dc:	200009bd 	.word	0x200009bd
 800e9e0:	200009be 	.word	0x200009be

0800e9e4 <console_process>:

void console_process(void) {
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	af00      	add	r7, sp, #0
	embeddedCliProcess(cli);
 800e9e8:	4b03      	ldr	r3, [pc, #12]	; (800e9f8 <console_process+0x14>)
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f000 f990 	bl	800ed12 <embeddedCliProcess>
}
 800e9f2:	bf00      	nop
 800e9f4:	bd80      	pop	{r7, pc}
 800e9f6:	bf00      	nop
 800e9f8:	200009b0 	.word	0x200009b0

0800e9fc <console_uart_deinit>:



void console_uart_deinit()
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 800ea00:	4803      	ldr	r0, [pc, #12]	; (800ea10 <console_uart_deinit+0x14>)
 800ea02:	f7fb f83a 	bl	8009a7a <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart1);
 800ea06:	4802      	ldr	r0, [pc, #8]	; (800ea10 <console_uart_deinit+0x14>)
 800ea08:	f7f3 ff2c 	bl	8002864 <HAL_UART_MspDeInit>
}
 800ea0c:	bf00      	nop
 800ea0e:	bd80      	pop	{r7, pc}
 800ea10:	20000900 	.word	0x20000900

0800ea14 <console_uart_init>:
void console_uart_init()
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 800ea18:	4815      	ldr	r0, [pc, #84]	; (800ea70 <console_uart_init+0x5c>)
 800ea1a:	f7fb f82e 	bl	8009a7a <HAL_UART_DeInit>
	  huart1.Instance = USART1;
 800ea1e:	4b14      	ldr	r3, [pc, #80]	; (800ea70 <console_uart_init+0x5c>)
 800ea20:	4a14      	ldr	r2, [pc, #80]	; (800ea74 <console_uart_init+0x60>)
 800ea22:	601a      	str	r2, [r3, #0]
	  huart1.Init.BaudRate = 115200;
 800ea24:	4b12      	ldr	r3, [pc, #72]	; (800ea70 <console_uart_init+0x5c>)
 800ea26:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ea2a:	605a      	str	r2, [r3, #4]
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800ea2c:	4b10      	ldr	r3, [pc, #64]	; (800ea70 <console_uart_init+0x5c>)
 800ea2e:	2200      	movs	r2, #0
 800ea30:	609a      	str	r2, [r3, #8]
	  huart1.Init.StopBits = UART_STOPBITS_1;
 800ea32:	4b0f      	ldr	r3, [pc, #60]	; (800ea70 <console_uart_init+0x5c>)
 800ea34:	2200      	movs	r2, #0
 800ea36:	60da      	str	r2, [r3, #12]
	  huart1.Init.Parity = UART_PARITY_NONE;
 800ea38:	4b0d      	ldr	r3, [pc, #52]	; (800ea70 <console_uart_init+0x5c>)
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	611a      	str	r2, [r3, #16]
	  huart1.Init.Mode = UART_MODE_TX_RX;
 800ea3e:	4b0c      	ldr	r3, [pc, #48]	; (800ea70 <console_uart_init+0x5c>)
 800ea40:	220c      	movs	r2, #12
 800ea42:	615a      	str	r2, [r3, #20]
	  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ea44:	4b0a      	ldr	r3, [pc, #40]	; (800ea70 <console_uart_init+0x5c>)
 800ea46:	2200      	movs	r2, #0
 800ea48:	619a      	str	r2, [r3, #24]
	  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800ea4a:	4b09      	ldr	r3, [pc, #36]	; (800ea70 <console_uart_init+0x5c>)
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart1) != HAL_OK)
 800ea50:	4807      	ldr	r0, [pc, #28]	; (800ea70 <console_uart_init+0x5c>)
 800ea52:	f7fa ffc5 	bl	80099e0 <HAL_UART_Init>
 800ea56:	4603      	mov	r3, r0
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d001      	beq.n	800ea60 <console_uart_init+0x4c>
	  {
	    Error_Handler();
 800ea5c:	f7f3 fc9e 	bl	800239c <Error_Handler>
	  }
		HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer, UART_RX_BUFF_SIZE);
 800ea60:	2201      	movs	r2, #1
 800ea62:	4905      	ldr	r1, [pc, #20]	; (800ea78 <console_uart_init+0x64>)
 800ea64:	4802      	ldr	r0, [pc, #8]	; (800ea70 <console_uart_init+0x5c>)
 800ea66:	f7fb f8c9 	bl	8009bfc <HAL_UART_Receive_IT>
}
 800ea6a:	bf00      	nop
 800ea6c:	bd80      	pop	{r7, pc}
 800ea6e:	bf00      	nop
 800ea70:	20000900 	.word	0x20000900
 800ea74:	40011000 	.word	0x40011000
 800ea78:	200009bc 	.word	0x200009bc

0800ea7c <console_init>:

void console_init(void) {
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	af00      	add	r7, sp, #0
	console_uart_init();
 800ea80:	f7ff ffc8 	bl	800ea14 <console_uart_init>
	initializeEmbeddedCli();
 800ea84:	f7ff fc40 	bl	800e308 <initializeEmbeddedCli>
	HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer, UART_RX_BUFF_SIZE);
 800ea88:	2201      	movs	r2, #1
 800ea8a:	4903      	ldr	r1, [pc, #12]	; (800ea98 <console_init+0x1c>)
 800ea8c:	4803      	ldr	r0, [pc, #12]	; (800ea9c <console_init+0x20>)
 800ea8e:	f7fb f8b5 	bl	8009bfc <HAL_UART_Receive_IT>
}
 800ea92:	bf00      	nop
 800ea94:	bd80      	pop	{r7, pc}
 800ea96:	bf00      	nop
 800ea98:	200009bc 	.word	0x200009bc
 800ea9c:	20000900 	.word	0x20000900

0800eaa0 <embeddedCliDefaultConfig>:
 * @param pos - token position (counted from 1)
 * @return index of first char of specified token
 */
static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos);

EmbeddedCliConfig *embeddedCliDefaultConfig(void) {
 800eaa0:	b480      	push	{r7}
 800eaa2:	af00      	add	r7, sp, #0
    defaultConfig.rxBufferSize = 64;
 800eaa4:	4b0e      	ldr	r3, [pc, #56]	; (800eae0 <embeddedCliDefaultConfig+0x40>)
 800eaa6:	2240      	movs	r2, #64	; 0x40
 800eaa8:	809a      	strh	r2, [r3, #4]
    defaultConfig.cmdBufferSize = 64;
 800eaaa:	4b0d      	ldr	r3, [pc, #52]	; (800eae0 <embeddedCliDefaultConfig+0x40>)
 800eaac:	2240      	movs	r2, #64	; 0x40
 800eaae:	80da      	strh	r2, [r3, #6]
    defaultConfig.historyBufferSize = 128;
 800eab0:	4b0b      	ldr	r3, [pc, #44]	; (800eae0 <embeddedCliDefaultConfig+0x40>)
 800eab2:	2280      	movs	r2, #128	; 0x80
 800eab4:	811a      	strh	r2, [r3, #8]
    defaultConfig.cliBuffer = NULL;
 800eab6:	4b0a      	ldr	r3, [pc, #40]	; (800eae0 <embeddedCliDefaultConfig+0x40>)
 800eab8:	2200      	movs	r2, #0
 800eaba:	60da      	str	r2, [r3, #12]
    defaultConfig.cliBufferSize = 0;
 800eabc:	4b08      	ldr	r3, [pc, #32]	; (800eae0 <embeddedCliDefaultConfig+0x40>)
 800eabe:	2200      	movs	r2, #0
 800eac0:	821a      	strh	r2, [r3, #16]
    defaultConfig.maxBindingCount = 50;
 800eac2:	4b07      	ldr	r3, [pc, #28]	; (800eae0 <embeddedCliDefaultConfig+0x40>)
 800eac4:	2232      	movs	r2, #50	; 0x32
 800eac6:	815a      	strh	r2, [r3, #10]
    defaultConfig.enableAutoComplete = true;
 800eac8:	4b05      	ldr	r3, [pc, #20]	; (800eae0 <embeddedCliDefaultConfig+0x40>)
 800eaca:	2201      	movs	r2, #1
 800eacc:	749a      	strb	r2, [r3, #18]
    defaultConfig.invitation = "> ";
 800eace:	4b04      	ldr	r3, [pc, #16]	; (800eae0 <embeddedCliDefaultConfig+0x40>)
 800ead0:	4a04      	ldr	r2, [pc, #16]	; (800eae4 <embeddedCliDefaultConfig+0x44>)
 800ead2:	601a      	str	r2, [r3, #0]
    return &defaultConfig;
 800ead4:	4b02      	ldr	r3, [pc, #8]	; (800eae0 <embeddedCliDefaultConfig+0x40>)
}
 800ead6:	4618      	mov	r0, r3
 800ead8:	46bd      	mov	sp, r7
 800eada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eade:	4770      	bx	lr
 800eae0:	200009c4 	.word	0x200009c4
 800eae4:	0801f334 	.word	0x0801f334

0800eae8 <embeddedCliRequiredSize>:

uint16_t embeddedCliRequiredSize(EmbeddedCliConfig *config) {
 800eae8:	b480      	push	{r7}
 800eaea:	b085      	sub	sp, #20
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	895b      	ldrh	r3, [r3, #10]
 800eaf4:	2201      	movs	r2, #1
 800eaf6:	4413      	add	r3, r2
 800eaf8:	81fb      	strh	r3, [r7, #14]
    return (uint16_t) (CLI_UINT_SIZE * (
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli)) +
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl)) +
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	889b      	ldrh	r3, [r3, #4]
 800eafe:	3303      	adds	r3, #3
 800eb00:	089a      	lsrs	r2, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	88db      	ldrh	r3, [r3, #6]
 800eb06:	3303      	adds	r3, #3
 800eb08:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 800eb0a:	441a      	add	r2, r3
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	891b      	ldrh	r3, [r3, #8]
 800eb10:	3303      	adds	r3, #3
 800eb12:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 800eb14:	18d1      	adds	r1, r2, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 800eb16:	89fa      	ldrh	r2, [r7, #14]
 800eb18:	4613      	mov	r3, r2
 800eb1a:	009b      	lsls	r3, r3, #2
 800eb1c:	4413      	add	r3, r2
 800eb1e:	009b      	lsls	r3, r3, #2
 800eb20:	3303      	adds	r3, #3
 800eb22:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 800eb24:	18ca      	adds	r2, r1, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(uint8_t))));
 800eb26:	89fb      	ldrh	r3, [r7, #14]
 800eb28:	3303      	adds	r3, #3
 800eb2a:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 800eb2c:	4413      	add	r3, r2
 800eb2e:	3311      	adds	r3, #17
    return (uint16_t) (CLI_UINT_SIZE * (
 800eb30:	b29b      	uxth	r3, r3
 800eb32:	009b      	lsls	r3, r3, #2
 800eb34:	b29b      	uxth	r3, r3
}
 800eb36:	4618      	mov	r0, r3
 800eb38:	3714      	adds	r7, #20
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb40:	4770      	bx	lr

0800eb42 <embeddedCliNew>:

EmbeddedCli *embeddedCliNew(EmbeddedCliConfig *config) {
 800eb42:	b580      	push	{r7, lr}
 800eb44:	b088      	sub	sp, #32
 800eb46:	af00      	add	r7, sp, #0
 800eb48:	6078      	str	r0, [r7, #4]
    EmbeddedCli *cli = NULL;
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	61bb      	str	r3, [r7, #24]

    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	895b      	ldrh	r3, [r3, #10]
 800eb52:	2201      	movs	r2, #1
 800eb54:	4413      	add	r3, r2
 800eb56:	82fb      	strh	r3, [r7, #22]

    size_t totalSize = embeddedCliRequiredSize(config);
 800eb58:	6878      	ldr	r0, [r7, #4]
 800eb5a:	f7ff ffc5 	bl	800eae8 <embeddedCliRequiredSize>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	613b      	str	r3, [r7, #16]

    bool allocated = false;
 800eb62:	2300      	movs	r3, #0
 800eb64:	77fb      	strb	r3, [r7, #31]
    if (config->cliBuffer == NULL) {
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	68db      	ldr	r3, [r3, #12]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d10f      	bne.n	800eb8e <embeddedCliNew+0x4c>
        config->cliBuffer = (CLI_UINT *) malloc(totalSize); // malloc guarantees alignment.
 800eb6e:	6938      	ldr	r0, [r7, #16]
 800eb70:	f00a fdb4 	bl	80196dc <malloc>
 800eb74:	4603      	mov	r3, r0
 800eb76:	461a      	mov	r2, r3
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	60da      	str	r2, [r3, #12]
        if (config->cliBuffer == NULL)
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	68db      	ldr	r3, [r3, #12]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d101      	bne.n	800eb88 <embeddedCliNew+0x46>
            return NULL;
 800eb84:	2300      	movs	r3, #0
 800eb86:	e092      	b.n	800ecae <embeddedCliNew+0x16c>
        allocated = true;
 800eb88:	2301      	movs	r3, #1
 800eb8a:	77fb      	strb	r3, [r7, #31]
 800eb8c:	e007      	b.n	800eb9e <embeddedCliNew+0x5c>
    } else if (config->cliBufferSize < totalSize) {
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	8a1b      	ldrh	r3, [r3, #16]
 800eb92:	461a      	mov	r2, r3
 800eb94:	693b      	ldr	r3, [r7, #16]
 800eb96:	4293      	cmp	r3, r2
 800eb98:	d901      	bls.n	800eb9e <embeddedCliNew+0x5c>
        return NULL;
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	e087      	b.n	800ecae <embeddedCliNew+0x16c>
    }

    CLI_UINT *buf = config->cliBuffer;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	68db      	ldr	r3, [r3, #12]
 800eba2:	60fb      	str	r3, [r7, #12]

    memset(buf, 0, totalSize);
 800eba4:	693a      	ldr	r2, [r7, #16]
 800eba6:	2100      	movs	r1, #0
 800eba8:	68f8      	ldr	r0, [r7, #12]
 800ebaa:	f00a fdcf 	bl	801974c <memset>

    cli = (EmbeddedCli *) buf;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	61bb      	str	r3, [r7, #24]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli));
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	3310      	adds	r3, #16
 800ebb6:	60fb      	str	r3, [r7, #12]

    cli->_impl = (EmbeddedCliImpl *) buf;
 800ebb8:	69bb      	ldr	r3, [r7, #24]
 800ebba:	68fa      	ldr	r2, [r7, #12]
 800ebbc:	60da      	str	r2, [r3, #12]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl));
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	3334      	adds	r3, #52	; 0x34
 800ebc2:	60fb      	str	r3, [r7, #12]

    PREPARE_IMPL(cli);
 800ebc4:	69bb      	ldr	r3, [r7, #24]
 800ebc6:	68db      	ldr	r3, [r3, #12]
 800ebc8:	60bb      	str	r3, [r7, #8]
    impl->rxBuffer.buf = (char *) buf;
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	68fa      	ldr	r2, [r7, #12]
 800ebce:	611a      	str	r2, [r3, #16]
    buf += BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char));
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	889b      	ldrh	r3, [r3, #4]
 800ebd4:	3303      	adds	r3, #3
 800ebd6:	f023 0303 	bic.w	r3, r3, #3
 800ebda:	68fa      	ldr	r2, [r7, #12]
 800ebdc:	4413      	add	r3, r2
 800ebde:	60fb      	str	r3, [r7, #12]

    impl->cmdBuffer = (char *) buf;
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	68fa      	ldr	r2, [r7, #12]
 800ebe4:	61da      	str	r2, [r3, #28]
    buf += BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char));
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	88db      	ldrh	r3, [r3, #6]
 800ebea:	3303      	adds	r3, #3
 800ebec:	f023 0303 	bic.w	r3, r3, #3
 800ebf0:	68fa      	ldr	r2, [r7, #12]
 800ebf2:	4413      	add	r3, r2
 800ebf4:	60fb      	str	r3, [r7, #12]

    impl->bindings = (CliCommandBinding *) buf;
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	68fa      	ldr	r2, [r7, #12]
 800ebfa:	625a      	str	r2, [r3, #36]	; 0x24
    buf += BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding));
 800ebfc:	8afa      	ldrh	r2, [r7, #22]
 800ebfe:	4613      	mov	r3, r2
 800ec00:	009b      	lsls	r3, r3, #2
 800ec02:	4413      	add	r3, r2
 800ec04:	009b      	lsls	r3, r3, #2
 800ec06:	3303      	adds	r3, #3
 800ec08:	f023 0303 	bic.w	r3, r3, #3
 800ec0c:	68fa      	ldr	r2, [r7, #12]
 800ec0e:	4413      	add	r3, r2
 800ec10:	60fb      	str	r3, [r7, #12]

    impl->bindingsFlags = (uint8_t *) buf;
 800ec12:	68bb      	ldr	r3, [r7, #8]
 800ec14:	68fa      	ldr	r2, [r7, #12]
 800ec16:	629a      	str	r2, [r3, #40]	; 0x28
    buf += BYTES_TO_CLI_UINTS(bindingCount);
 800ec18:	8afb      	ldrh	r3, [r7, #22]
 800ec1a:	3303      	adds	r3, #3
 800ec1c:	f023 0303 	bic.w	r3, r3, #3
 800ec20:	68fa      	ldr	r2, [r7, #12]
 800ec22:	4413      	add	r3, r2
 800ec24:	60fb      	str	r3, [r7, #12]

    impl->history.buf = (char *) buf;
 800ec26:	68bb      	ldr	r3, [r7, #8]
 800ec28:	68fa      	ldr	r2, [r7, #12]
 800ec2a:	605a      	str	r2, [r3, #4]
    impl->history.bufferSize = config->historyBufferSize;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	891a      	ldrh	r2, [r3, #8]
 800ec30:	68bb      	ldr	r3, [r7, #8]
 800ec32:	811a      	strh	r2, [r3, #8]

    if (allocated)
 800ec34:	7ffb      	ldrb	r3, [r7, #31]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d008      	beq.n	800ec4c <embeddedCliNew+0x10a>
        SET_FLAG(impl->flags, CLI_FLAG_ALLOCATED);
 800ec3a:	68bb      	ldr	r3, [r7, #8]
 800ec3c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800ec40:	f043 0304 	orr.w	r3, r3, #4
 800ec44:	b2da      	uxtb	r2, r3
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

    if (config->enableAutoComplete)
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	7c9b      	ldrb	r3, [r3, #18]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d008      	beq.n	800ec66 <embeddedCliNew+0x124>
        SET_FLAG(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED);
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800ec5a:	f043 0320 	orr.w	r3, r3, #32
 800ec5e:	b2da      	uxtb	r2, r3
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

    impl->rxBuffer.size = config->rxBufferSize;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	889a      	ldrh	r2, [r3, #4]
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	831a      	strh	r2, [r3, #24]
    impl->rxBuffer.front = 0;
 800ec6e:	68bb      	ldr	r3, [r7, #8]
 800ec70:	2200      	movs	r2, #0
 800ec72:	829a      	strh	r2, [r3, #20]
    impl->rxBuffer.back = 0;
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	2200      	movs	r2, #0
 800ec78:	82da      	strh	r2, [r3, #22]
    impl->cmdMaxSize = config->cmdBufferSize;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	88da      	ldrh	r2, [r3, #6]
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	845a      	strh	r2, [r3, #34]	; 0x22
    impl->bindingsCount = 0;
 800ec82:	68bb      	ldr	r3, [r7, #8]
 800ec84:	2200      	movs	r2, #0
 800ec86:	859a      	strh	r2, [r3, #44]	; 0x2c
    impl->maxBindingsCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	895b      	ldrh	r3, [r3, #10]
 800ec8c:	2201      	movs	r2, #1
 800ec8e:	4413      	add	r3, r2
 800ec90:	b29a      	uxth	r2, r3
 800ec92:	68bb      	ldr	r3, [r7, #8]
 800ec94:	85da      	strh	r2, [r3, #46]	; 0x2e
    impl->lastChar = '\0';
 800ec96:	68bb      	ldr	r3, [r7, #8]
 800ec98:	2200      	movs	r2, #0
 800ec9a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    impl->invitation = config->invitation;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681a      	ldr	r2, [r3, #0]
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	601a      	str	r2, [r3, #0]

    initInternalBindings(cli);
 800eca6:	69b8      	ldr	r0, [r7, #24]
 800eca8:	f000 fc5e 	bl	800f568 <initInternalBindings>

    return cli;
 800ecac:	69bb      	ldr	r3, [r7, #24]
}
 800ecae:	4618      	mov	r0, r3
 800ecb0:	3720      	adds	r7, #32
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}

0800ecb6 <embeddedCliNewDefault>:

EmbeddedCli *embeddedCliNewDefault(void) {
 800ecb6:	b580      	push	{r7, lr}
 800ecb8:	af00      	add	r7, sp, #0
    return embeddedCliNew(embeddedCliDefaultConfig());
 800ecba:	f7ff fef1 	bl	800eaa0 <embeddedCliDefaultConfig>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f7ff ff3e 	bl	800eb42 <embeddedCliNew>
 800ecc6:	4603      	mov	r3, r0
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	bd80      	pop	{r7, pc}

0800eccc <embeddedCliReceiveChar>:

void embeddedCliReceiveChar(EmbeddedCli *cli, char c) {
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b084      	sub	sp, #16
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
 800ecd4:	460b      	mov	r3, r1
 800ecd6:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	68db      	ldr	r3, [r3, #12]
 800ecdc:	60fb      	str	r3, [r7, #12]

    if (!fifoBufPush(&impl->rxBuffer, c)) {
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	3310      	adds	r3, #16
 800ece2:	78fa      	ldrb	r2, [r7, #3]
 800ece4:	4611      	mov	r1, r2
 800ece6:	4618      	mov	r0, r3
 800ece8:	f000 ffe1 	bl	800fcae <fifoBufPush>
 800ecec:	4603      	mov	r3, r0
 800ecee:	f083 0301 	eor.w	r3, r3, #1
 800ecf2:	b2db      	uxtb	r3, r3
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d008      	beq.n	800ed0a <embeddedCliReceiveChar+0x3e>
        SET_FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800ecfe:	f043 0301 	orr.w	r3, r3, #1
 800ed02:	b2da      	uxtb	r2, r3
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    }
}
 800ed0a:	bf00      	nop
 800ed0c:	3710      	adds	r7, #16
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}

0800ed12 <embeddedCliProcess>:

void embeddedCliProcess(EmbeddedCli *cli) {
 800ed12:	b580      	push	{r7, lr}
 800ed14:	b084      	sub	sp, #16
 800ed16:	af00      	add	r7, sp, #0
 800ed18:	6078      	str	r0, [r7, #4]
    if (cli->writeChar == NULL)
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	f000 8083 	beq.w	800ee2a <embeddedCliProcess+0x118>
        return;

    PREPARE_IMPL(cli);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	68db      	ldr	r3, [r3, #12]
 800ed28:	60fb      	str	r3, [r7, #12]


    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_INIT_COMPLETE)) {
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800ed30:	f003 0302 	and.w	r3, r3, #2
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d155      	bne.n	800ede4 <embeddedCliProcess+0xd2>
        SET_FLAG(impl->flags, CLI_FLAG_INIT_COMPLETE);
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800ed3e:	f043 0302 	orr.w	r3, r3, #2
 800ed42:	b2da      	uxtb	r2, r3
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        writeToOutput(cli, impl->invitation);
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	4619      	mov	r1, r3
 800ed50:	6878      	ldr	r0, [r7, #4]
 800ed52:	f000 ff0b 	bl	800fb6c <writeToOutput>
    }

    while (fifoBufAvailable(&impl->rxBuffer)) {
 800ed56:	e045      	b.n	800ede4 <embeddedCliProcess+0xd2>
        char c = fifoBufPop(&impl->rxBuffer);
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	3310      	adds	r3, #16
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f000 ff7e 	bl	800fc5e <fifoBufPop>
 800ed62:	4603      	mov	r3, r0
 800ed64:	72fb      	strb	r3, [r7, #11]

        if (IS_FLAG_SET(impl->flags, CLI_FLAG_ESCAPE_MODE)) {
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800ed6c:	f003 0308 	and.w	r3, r3, #8
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d005      	beq.n	800ed80 <embeddedCliProcess+0x6e>
            onEscapedInput(cli, c);
 800ed74:	7afb      	ldrb	r3, [r7, #11]
 800ed76:	4619      	mov	r1, r3
 800ed78:	6878      	ldr	r0, [r7, #4]
 800ed7a:	f000 fa17 	bl	800f1ac <onEscapedInput>
 800ed7e:	e02a      	b.n	800edd6 <embeddedCliProcess+0xc4>
        } else if (impl->lastChar == 0x1B && c == '[') {
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ed86:	2b1b      	cmp	r3, #27
 800ed88:	d10c      	bne.n	800eda4 <embeddedCliProcess+0x92>
 800ed8a:	7afb      	ldrb	r3, [r7, #11]
 800ed8c:	2b5b      	cmp	r3, #91	; 0x5b
 800ed8e:	d109      	bne.n	800eda4 <embeddedCliProcess+0x92>
            //enter escape mode
            SET_FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800ed96:	f043 0308 	orr.w	r3, r3, #8
 800ed9a:	b2da      	uxtb	r2, r3
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 800eda2:	e018      	b.n	800edd6 <embeddedCliProcess+0xc4>
        } else if (isControlChar(c)) {
 800eda4:	7afb      	ldrb	r3, [r7, #11]
 800eda6:	4618      	mov	r0, r3
 800eda8:	f000 ff01 	bl	800fbae <isControlChar>
 800edac:	4603      	mov	r3, r0
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d005      	beq.n	800edbe <embeddedCliProcess+0xac>
            onControlInput(cli, c);
 800edb2:	7afb      	ldrb	r3, [r7, #11]
 800edb4:	4619      	mov	r1, r3
 800edb6:	6878      	ldr	r0, [r7, #4]
 800edb8:	f000 fa54 	bl	800f264 <onControlInput>
 800edbc:	e00b      	b.n	800edd6 <embeddedCliProcess+0xc4>
        } else if (isDisplayableChar(c)) {
 800edbe:	7afb      	ldrb	r3, [r7, #11]
 800edc0:	4618      	mov	r0, r3
 800edc2:	f000 ff14 	bl	800fbee <isDisplayableChar>
 800edc6:	4603      	mov	r3, r0
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d004      	beq.n	800edd6 <embeddedCliProcess+0xc4>
            onCharInput(cli, c);
 800edcc:	7afb      	ldrb	r3, [r7, #11]
 800edce:	4619      	mov	r1, r3
 800edd0:	6878      	ldr	r0, [r7, #4]
 800edd2:	f000 fa17 	bl	800f204 <onCharInput>
        }

        printLiveAutocompletion(cli);
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	f000 fdb1 	bl	800f93e <printLiveAutocompletion>

        impl->lastChar = c;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	7afa      	ldrb	r2, [r7, #11]
 800ede0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    while (fifoBufAvailable(&impl->rxBuffer)) {
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	3310      	adds	r3, #16
 800ede8:	4618      	mov	r0, r3
 800edea:	f000 ff17 	bl	800fc1c <fifoBufAvailable>
 800edee:	4603      	mov	r3, r0
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d1b1      	bne.n	800ed58 <embeddedCliProcess+0x46>
    }

    // discard unfinished command if overflow happened
    if (IS_FLAG_SET(impl->flags, CLI_FLAG_OVERFLOW)) {
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800edfa:	f003 0301 	and.w	r3, r3, #1
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d014      	beq.n	800ee2c <embeddedCliProcess+0x11a>
        impl->cmdSize = 0;
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	2200      	movs	r2, #0
 800ee06:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	69db      	ldr	r3, [r3, #28]
 800ee0c:	68fa      	ldr	r2, [r7, #12]
 800ee0e:	8c12      	ldrh	r2, [r2, #32]
 800ee10:	4413      	add	r3, r2
 800ee12:	2200      	movs	r2, #0
 800ee14:	701a      	strb	r2, [r3, #0]
        UNSET_U8FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800ee1c:	f023 0301 	bic.w	r3, r3, #1
 800ee20:	b2da      	uxtb	r2, r3
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 800ee28:	e000      	b.n	800ee2c <embeddedCliProcess+0x11a>
        return;
 800ee2a:	bf00      	nop
    }
}
 800ee2c:	3710      	adds	r7, #16
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	bd80      	pop	{r7, pc}

0800ee32 <embeddedCliAddBinding>:

bool embeddedCliAddBinding(EmbeddedCli *cli, CliCommandBinding binding) {
 800ee32:	b084      	sub	sp, #16
 800ee34:	b4b0      	push	{r4, r5, r7}
 800ee36:	b085      	sub	sp, #20
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
 800ee3c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ee40:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    PREPARE_IMPL(cli);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	68db      	ldr	r3, [r3, #12]
 800ee48:	60fb      	str	r3, [r7, #12]
    if (impl->bindingsCount == impl->maxBindingsCount)
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ee52:	429a      	cmp	r2, r3
 800ee54:	d101      	bne.n	800ee5a <embeddedCliAddBinding+0x28>
        return false;
 800ee56:	2300      	movs	r3, #0
 800ee58:	e017      	b.n	800ee8a <embeddedCliAddBinding+0x58>

    impl->bindings[impl->bindingsCount] = binding;
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ee62:	4619      	mov	r1, r3
 800ee64:	460b      	mov	r3, r1
 800ee66:	009b      	lsls	r3, r3, #2
 800ee68:	440b      	add	r3, r1
 800ee6a:	009b      	lsls	r3, r3, #2
 800ee6c:	4413      	add	r3, r2
 800ee6e:	461d      	mov	r5, r3
 800ee70:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800ee74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ee76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ee78:	6823      	ldr	r3, [r4, #0]
 800ee7a:	602b      	str	r3, [r5, #0]

    ++impl->bindingsCount;
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ee80:	3301      	adds	r3, #1
 800ee82:	b29a      	uxth	r2, r3
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	859a      	strh	r2, [r3, #44]	; 0x2c
    return true;
 800ee88:	2301      	movs	r3, #1
}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3714      	adds	r7, #20
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bcb0      	pop	{r4, r5, r7}
 800ee92:	b004      	add	sp, #16
 800ee94:	4770      	bx	lr
	...

0800ee98 <embeddedCliPrint>:

void embeddedCliPrint(EmbeddedCli *cli, const char *string) {
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b084      	sub	sp, #16
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
 800eea0:	6039      	str	r1, [r7, #0]
    if (cli->writeChar == NULL)
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d031      	beq.n	800ef0e <embeddedCliPrint+0x76>
        return;

    PREPARE_IMPL(cli);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	68db      	ldr	r3, [r3, #12]
 800eeae:	60fb      	str	r3, [r7, #12]

    // remove chars for autocompletion and live command
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT))
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800eeb6:	f003 0310 	and.w	r3, r3, #16
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d102      	bne.n	800eec4 <embeddedCliPrint+0x2c>
        clearCurrentLine(cli);
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f000 fe22 	bl	800fb08 <clearCurrentLine>

    // print provided string
    writeToOutput(cli, string);
 800eec4:	6839      	ldr	r1, [r7, #0]
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f000 fe50 	bl	800fb6c <writeToOutput>
    writeToOutput(cli, lineBreak);
 800eecc:	4b12      	ldr	r3, [pc, #72]	; (800ef18 <embeddedCliPrint+0x80>)
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	4619      	mov	r1, r3
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	f000 fe4a 	bl	800fb6c <writeToOutput>

    // print current command back to screen
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT)) {
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800eede:	f003 0310 	and.w	r3, r3, #16
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d114      	bne.n	800ef10 <embeddedCliPrint+0x78>
        writeToOutput(cli, impl->invitation);
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	4619      	mov	r1, r3
 800eeec:	6878      	ldr	r0, [r7, #4]
 800eeee:	f000 fe3d 	bl	800fb6c <writeToOutput>
        writeToOutput(cli, impl->cmdBuffer);
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	69db      	ldr	r3, [r3, #28]
 800eef6:	4619      	mov	r1, r3
 800eef8:	6878      	ldr	r0, [r7, #4]
 800eefa:	f000 fe37 	bl	800fb6c <writeToOutput>
        impl->inputLineLength = impl->cmdSize;
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	8c1a      	ldrh	r2, [r3, #32]
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	861a      	strh	r2, [r3, #48]	; 0x30

        printLiveAutocompletion(cli);
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f000 fd19 	bl	800f93e <printLiveAutocompletion>
 800ef0c:	e000      	b.n	800ef10 <embeddedCliPrint+0x78>
        return;
 800ef0e:	bf00      	nop
    }
}
 800ef10:	3710      	adds	r7, #16
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}
 800ef16:	bf00      	nop
 800ef18:	20000020 	.word	0x20000020

0800ef1c <embeddedCliTokenizeArgs>:
        // allocation is done in single call to malloc, so need only single free
        free(cli);
    }
}

void embeddedCliTokenizeArgs(char *args) {
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b088      	sub	sp, #32
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
    if (args == NULL)
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d066      	beq.n	800eff8 <embeddedCliTokenizeArgs+0xdc>
        return;

    // for now only space, but can add more later
    const char *separators = " ";
 800ef2a:	4b35      	ldr	r3, [pc, #212]	; (800f000 <embeddedCliTokenizeArgs+0xe4>)
 800ef2c:	60fb      	str	r3, [r7, #12]

    // indicates that arg is quoted so separators are copied as is
    bool quotesEnabled = false;
 800ef2e:	2300      	movs	r3, #0
 800ef30:	77fb      	strb	r3, [r7, #31]
    // indicates that previous char was a slash, so next char is copied as is
    bool escapeActivated = false;
 800ef32:	2300      	movs	r3, #0
 800ef34:	77bb      	strb	r3, [r7, #30]
    int insertPos = 0;
 800ef36:	2300      	movs	r3, #0
 800ef38:	61bb      	str	r3, [r7, #24]

    int i = 0;
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	617b      	str	r3, [r7, #20]
    char currentChar;
    while ((currentChar = args[i]) != '\0') {
 800ef3e:	e047      	b.n	800efd0 <embeddedCliTokenizeArgs+0xb4>
        ++i;
 800ef40:	697b      	ldr	r3, [r7, #20]
 800ef42:	3301      	adds	r3, #1
 800ef44:	617b      	str	r3, [r7, #20]

        if (escapeActivated) {
 800ef46:	7fbb      	ldrb	r3, [r7, #30]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d002      	beq.n	800ef52 <embeddedCliTokenizeArgs+0x36>
            escapeActivated = false;
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	77bb      	strb	r3, [r7, #30]
 800ef50:	e029      	b.n	800efa6 <embeddedCliTokenizeArgs+0x8a>
        } else if (currentChar == '\\') {
 800ef52:	7cfb      	ldrb	r3, [r7, #19]
 800ef54:	2b5c      	cmp	r3, #92	; 0x5c
 800ef56:	d102      	bne.n	800ef5e <embeddedCliTokenizeArgs+0x42>
            escapeActivated = true;
 800ef58:	2301      	movs	r3, #1
 800ef5a:	77bb      	strb	r3, [r7, #30]
            continue;
 800ef5c:	e038      	b.n	800efd0 <embeddedCliTokenizeArgs+0xb4>
        } else if (currentChar == '"') {
 800ef5e:	7cfb      	ldrb	r3, [r7, #19]
 800ef60:	2b22      	cmp	r3, #34	; 0x22
 800ef62:	d110      	bne.n	800ef86 <embeddedCliTokenizeArgs+0x6a>
            quotesEnabled = !quotesEnabled;
 800ef64:	7ffb      	ldrb	r3, [r7, #31]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	bf14      	ite	ne
 800ef6a:	2301      	movne	r3, #1
 800ef6c:	2300      	moveq	r3, #0
 800ef6e:	b2db      	uxtb	r3, r3
 800ef70:	f083 0301 	eor.w	r3, r3, #1
 800ef74:	b2db      	uxtb	r3, r3
 800ef76:	77fb      	strb	r3, [r7, #31]
 800ef78:	7ffb      	ldrb	r3, [r7, #31]
 800ef7a:	f003 0301 	and.w	r3, r3, #1
 800ef7e:	77fb      	strb	r3, [r7, #31]
            currentChar = '\0';
 800ef80:	2300      	movs	r3, #0
 800ef82:	74fb      	strb	r3, [r7, #19]
 800ef84:	e00f      	b.n	800efa6 <embeddedCliTokenizeArgs+0x8a>
        } else if (!quotesEnabled && strchr(separators, currentChar) != NULL) {
 800ef86:	7ffb      	ldrb	r3, [r7, #31]
 800ef88:	f083 0301 	eor.w	r3, r3, #1
 800ef8c:	b2db      	uxtb	r3, r3
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d009      	beq.n	800efa6 <embeddedCliTokenizeArgs+0x8a>
 800ef92:	7cfb      	ldrb	r3, [r7, #19]
 800ef94:	4619      	mov	r1, r3
 800ef96:	68f8      	ldr	r0, [r7, #12]
 800ef98:	f00b fbfe 	bl	801a798 <strchr>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d001      	beq.n	800efa6 <embeddedCliTokenizeArgs+0x8a>
            currentChar = '\0';
 800efa2:	2300      	movs	r3, #0
 800efa4:	74fb      	strb	r3, [r7, #19]
        }

        // null chars are only copied once and not copied to the beginning
        if (currentChar != '\0' || (insertPos > 0 && args[insertPos - 1] != '\0')) {
 800efa6:	7cfb      	ldrb	r3, [r7, #19]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d109      	bne.n	800efc0 <embeddedCliTokenizeArgs+0xa4>
 800efac:	69bb      	ldr	r3, [r7, #24]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	dd0e      	ble.n	800efd0 <embeddedCliTokenizeArgs+0xb4>
 800efb2:	69bb      	ldr	r3, [r7, #24]
 800efb4:	3b01      	subs	r3, #1
 800efb6:	687a      	ldr	r2, [r7, #4]
 800efb8:	4413      	add	r3, r2
 800efba:	781b      	ldrb	r3, [r3, #0]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d007      	beq.n	800efd0 <embeddedCliTokenizeArgs+0xb4>
            args[insertPos] = currentChar;
 800efc0:	69bb      	ldr	r3, [r7, #24]
 800efc2:	687a      	ldr	r2, [r7, #4]
 800efc4:	4413      	add	r3, r2
 800efc6:	7cfa      	ldrb	r2, [r7, #19]
 800efc8:	701a      	strb	r2, [r3, #0]
            ++insertPos;
 800efca:	69bb      	ldr	r3, [r7, #24]
 800efcc:	3301      	adds	r3, #1
 800efce:	61bb      	str	r3, [r7, #24]
    while ((currentChar = args[i]) != '\0') {
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	687a      	ldr	r2, [r7, #4]
 800efd4:	4413      	add	r3, r2
 800efd6:	781b      	ldrb	r3, [r3, #0]
 800efd8:	74fb      	strb	r3, [r7, #19]
 800efda:	7cfb      	ldrb	r3, [r7, #19]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d1af      	bne.n	800ef40 <embeddedCliTokenizeArgs+0x24>
        }
    }

    // make args double null-terminated source buffer must be big enough to contain extra spaces
    args[insertPos] = '\0';
 800efe0:	69bb      	ldr	r3, [r7, #24]
 800efe2:	687a      	ldr	r2, [r7, #4]
 800efe4:	4413      	add	r3, r2
 800efe6:	2200      	movs	r2, #0
 800efe8:	701a      	strb	r2, [r3, #0]
    args[insertPos + 1] = '\0';
 800efea:	69bb      	ldr	r3, [r7, #24]
 800efec:	3301      	adds	r3, #1
 800efee:	687a      	ldr	r2, [r7, #4]
 800eff0:	4413      	add	r3, r2
 800eff2:	2200      	movs	r2, #0
 800eff4:	701a      	strb	r2, [r3, #0]
 800eff6:	e000      	b.n	800effa <embeddedCliTokenizeArgs+0xde>
        return;
 800eff8:	bf00      	nop
}
 800effa:	3720      	adds	r7, #32
 800effc:	46bd      	mov	sp, r7
 800effe:	bd80      	pop	{r7, pc}
 800f000:	0801f338 	.word	0x0801f338

0800f004 <embeddedCliGetToken>:

const char *embeddedCliGetToken(const char *tokenizedStr, uint16_t pos) {
 800f004:	b580      	push	{r7, lr}
 800f006:	b084      	sub	sp, #16
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
 800f00c:	460b      	mov	r3, r1
 800f00e:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 800f010:	887b      	ldrh	r3, [r7, #2]
 800f012:	4619      	mov	r1, r3
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	f000 ff51 	bl	800febc <getTokenPosition>
 800f01a:	4603      	mov	r3, r0
 800f01c:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 800f01e:	89fb      	ldrh	r3, [r7, #14]
 800f020:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f024:	4293      	cmp	r3, r2
 800f026:	d003      	beq.n	800f030 <embeddedCliGetToken+0x2c>
        return &tokenizedStr[i];
 800f028:	89fb      	ldrh	r3, [r7, #14]
 800f02a:	687a      	ldr	r2, [r7, #4]
 800f02c:	4413      	add	r3, r2
 800f02e:	e000      	b.n	800f032 <embeddedCliGetToken+0x2e>
    else
        return NULL;
 800f030:	2300      	movs	r3, #0
}
 800f032:	4618      	mov	r0, r3
 800f034:	3710      	adds	r7, #16
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}

0800f03a <embeddedCliGetTokenVariable>:

char *embeddedCliGetTokenVariable(char *tokenizedStr, uint16_t pos) {
 800f03a:	b580      	push	{r7, lr}
 800f03c:	b084      	sub	sp, #16
 800f03e:	af00      	add	r7, sp, #0
 800f040:	6078      	str	r0, [r7, #4]
 800f042:	460b      	mov	r3, r1
 800f044:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 800f046:	887b      	ldrh	r3, [r7, #2]
 800f048:	4619      	mov	r1, r3
 800f04a:	6878      	ldr	r0, [r7, #4]
 800f04c:	f000 ff36 	bl	800febc <getTokenPosition>
 800f050:	4603      	mov	r3, r0
 800f052:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 800f054:	89fb      	ldrh	r3, [r7, #14]
 800f056:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f05a:	4293      	cmp	r3, r2
 800f05c:	d003      	beq.n	800f066 <embeddedCliGetTokenVariable+0x2c>
        return &tokenizedStr[i];
 800f05e:	89fb      	ldrh	r3, [r7, #14]
 800f060:	687a      	ldr	r2, [r7, #4]
 800f062:	4413      	add	r3, r2
 800f064:	e000      	b.n	800f068 <embeddedCliGetTokenVariable+0x2e>
    else
        return NULL;
 800f066:	2300      	movs	r3, #0
}
 800f068:	4618      	mov	r0, r3
 800f06a:	3710      	adds	r7, #16
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}

0800f070 <embeddedCliGetTokenCount>:
    }

    return 0;
}

uint16_t embeddedCliGetTokenCount(const char *tokenizedStr) {
 800f070:	b480      	push	{r7}
 800f072:	b085      	sub	sp, #20
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
    if (tokenizedStr == NULL || tokenizedStr[0] == '\0')
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d003      	beq.n	800f086 <embeddedCliGetTokenCount+0x16>
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	781b      	ldrb	r3, [r3, #0]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d101      	bne.n	800f08a <embeddedCliGetTokenCount+0x1a>
        return 0;
 800f086:	2300      	movs	r3, #0
 800f088:	e019      	b.n	800f0be <embeddedCliGetTokenCount+0x4e>

    int i = 0;
 800f08a:	2300      	movs	r3, #0
 800f08c:	60fb      	str	r3, [r7, #12]
    uint16_t tokenCount = 1;
 800f08e:	2301      	movs	r3, #1
 800f090:	817b      	strh	r3, [r7, #10]
    while (true) {
        if (tokenizedStr[i] == '\0') {
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	687a      	ldr	r2, [r7, #4]
 800f096:	4413      	add	r3, r2
 800f098:	781b      	ldrb	r3, [r3, #0]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d109      	bne.n	800f0b2 <embeddedCliGetTokenCount+0x42>
            if (tokenizedStr[i + 1] == '\0')
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	3301      	adds	r3, #1
 800f0a2:	687a      	ldr	r2, [r7, #4]
 800f0a4:	4413      	add	r3, r2
 800f0a6:	781b      	ldrb	r3, [r3, #0]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d006      	beq.n	800f0ba <embeddedCliGetTokenCount+0x4a>
                break;
            ++tokenCount;
 800f0ac:	897b      	ldrh	r3, [r7, #10]
 800f0ae:	3301      	adds	r3, #1
 800f0b0:	817b      	strh	r3, [r7, #10]
        }
        ++i;
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	3301      	adds	r3, #1
 800f0b6:	60fb      	str	r3, [r7, #12]
        if (tokenizedStr[i] == '\0') {
 800f0b8:	e7eb      	b.n	800f092 <embeddedCliGetTokenCount+0x22>
                break;
 800f0ba:	bf00      	nop
    }

    return tokenCount;
 800f0bc:	897b      	ldrh	r3, [r7, #10]
}
 800f0be:	4618      	mov	r0, r3
 800f0c0:	3714      	adds	r7, #20
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c8:	4770      	bx	lr
	...

0800f0cc <navigateHistory>:

static void navigateHistory(EmbeddedCli *cli, bool navigateUp) {
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b086      	sub	sp, #24
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
 800f0d4:	460b      	mov	r3, r1
 800f0d6:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	68db      	ldr	r3, [r3, #12]
 800f0dc:	613b      	str	r3, [r7, #16]
    if (impl->history.itemsCount == 0 ||
 800f0de:	693b      	ldr	r3, [r7, #16]
 800f0e0:	899b      	ldrh	r3, [r3, #12]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d05c      	beq.n	800f1a0 <navigateHistory+0xd4>
 800f0e6:	78fb      	ldrb	r3, [r7, #3]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d005      	beq.n	800f0f8 <navigateHistory+0x2c>
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 800f0ec:	693b      	ldr	r3, [r7, #16]
 800f0ee:	895a      	ldrh	r2, [r3, #10]
 800f0f0:	693b      	ldr	r3, [r7, #16]
 800f0f2:	899b      	ldrh	r3, [r3, #12]
 800f0f4:	429a      	cmp	r2, r3
 800f0f6:	d053      	beq.n	800f1a0 <navigateHistory+0xd4>
        (!navigateUp && impl->history.current == 0))
 800f0f8:	78fb      	ldrb	r3, [r7, #3]
 800f0fa:	f083 0301 	eor.w	r3, r3, #1
 800f0fe:	b2db      	uxtb	r3, r3
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 800f100:	2b00      	cmp	r3, #0
 800f102:	d003      	beq.n	800f10c <navigateHistory+0x40>
        (!navigateUp && impl->history.current == 0))
 800f104:	693b      	ldr	r3, [r7, #16]
 800f106:	895b      	ldrh	r3, [r3, #10]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d049      	beq.n	800f1a0 <navigateHistory+0xd4>
        return;

    clearCurrentLine(cli);
 800f10c:	6878      	ldr	r0, [r7, #4]
 800f10e:	f000 fcfb 	bl	800fb08 <clearCurrentLine>

    writeToOutput(cli, impl->invitation);
 800f112:	693b      	ldr	r3, [r7, #16]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	4619      	mov	r1, r3
 800f118:	6878      	ldr	r0, [r7, #4]
 800f11a:	f000 fd27 	bl	800fb6c <writeToOutput>

    if (navigateUp)
 800f11e:	78fb      	ldrb	r3, [r7, #3]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d006      	beq.n	800f132 <navigateHistory+0x66>
        ++impl->history.current;
 800f124:	693b      	ldr	r3, [r7, #16]
 800f126:	895b      	ldrh	r3, [r3, #10]
 800f128:	3301      	adds	r3, #1
 800f12a:	b29a      	uxth	r2, r3
 800f12c:	693b      	ldr	r3, [r7, #16]
 800f12e:	815a      	strh	r2, [r3, #10]
 800f130:	e005      	b.n	800f13e <navigateHistory+0x72>
    else
        --impl->history.current;
 800f132:	693b      	ldr	r3, [r7, #16]
 800f134:	895b      	ldrh	r3, [r3, #10]
 800f136:	3b01      	subs	r3, #1
 800f138:	b29a      	uxth	r2, r3
 800f13a:	693b      	ldr	r3, [r7, #16]
 800f13c:	815a      	strh	r2, [r3, #10]

    const char *item = historyGet(&impl->history, impl->history.current);
 800f13e:	693b      	ldr	r3, [r7, #16]
 800f140:	1d1a      	adds	r2, r3, #4
 800f142:	693b      	ldr	r3, [r7, #16]
 800f144:	895b      	ldrh	r3, [r3, #10]
 800f146:	4619      	mov	r1, r3
 800f148:	4610      	mov	r0, r2
 800f14a:	f000 fe3e 	bl	800fdca <historyGet>
 800f14e:	6178      	str	r0, [r7, #20]
    // simple way to handle empty command the same way as others
    if (item == NULL)
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d101      	bne.n	800f15a <navigateHistory+0x8e>
        item = "";
 800f156:	4b14      	ldr	r3, [pc, #80]	; (800f1a8 <navigateHistory+0xdc>)
 800f158:	617b      	str	r3, [r7, #20]
    uint16_t len = (uint16_t) strlen(item);
 800f15a:	6978      	ldr	r0, [r7, #20]
 800f15c:	f7f1 f84a 	bl	80001f4 <strlen>
 800f160:	4603      	mov	r3, r0
 800f162:	81fb      	strh	r3, [r7, #14]
    memcpy(impl->cmdBuffer, item, len);
 800f164:	693b      	ldr	r3, [r7, #16]
 800f166:	69db      	ldr	r3, [r3, #28]
 800f168:	89fa      	ldrh	r2, [r7, #14]
 800f16a:	6979      	ldr	r1, [r7, #20]
 800f16c:	4618      	mov	r0, r3
 800f16e:	f00a fac5 	bl	80196fc <memcpy>
    impl->cmdBuffer[len] = '\0';
 800f172:	693b      	ldr	r3, [r7, #16]
 800f174:	69da      	ldr	r2, [r3, #28]
 800f176:	89fb      	ldrh	r3, [r7, #14]
 800f178:	4413      	add	r3, r2
 800f17a:	2200      	movs	r2, #0
 800f17c:	701a      	strb	r2, [r3, #0]
    impl->cmdSize = len;
 800f17e:	693b      	ldr	r3, [r7, #16]
 800f180:	89fa      	ldrh	r2, [r7, #14]
 800f182:	841a      	strh	r2, [r3, #32]

    writeToOutput(cli, impl->cmdBuffer);
 800f184:	693b      	ldr	r3, [r7, #16]
 800f186:	69db      	ldr	r3, [r3, #28]
 800f188:	4619      	mov	r1, r3
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f000 fcee 	bl	800fb6c <writeToOutput>
    impl->inputLineLength = impl->cmdSize;
 800f190:	693b      	ldr	r3, [r7, #16]
 800f192:	8c1a      	ldrh	r2, [r3, #32]
 800f194:	693b      	ldr	r3, [r7, #16]
 800f196:	861a      	strh	r2, [r3, #48]	; 0x30

    printLiveAutocompletion(cli);
 800f198:	6878      	ldr	r0, [r7, #4]
 800f19a:	f000 fbd0 	bl	800f93e <printLiveAutocompletion>
 800f19e:	e000      	b.n	800f1a2 <navigateHistory+0xd6>
        return;
 800f1a0:	bf00      	nop
}
 800f1a2:	3718      	adds	r7, #24
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}
 800f1a8:	0801f33c 	.word	0x0801f33c

0800f1ac <onEscapedInput>:

static void onEscapedInput(EmbeddedCli *cli, char c) {
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b084      	sub	sp, #16
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
 800f1b4:	460b      	mov	r3, r1
 800f1b6:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	68db      	ldr	r3, [r3, #12]
 800f1bc:	60fb      	str	r3, [r7, #12]

    if (c >= 64 && c <= 126) {
 800f1be:	78fb      	ldrb	r3, [r7, #3]
 800f1c0:	2b3f      	cmp	r3, #63	; 0x3f
 800f1c2:	d91b      	bls.n	800f1fc <onEscapedInput+0x50>
 800f1c4:	78fb      	ldrb	r3, [r7, #3]
 800f1c6:	2b7e      	cmp	r3, #126	; 0x7e
 800f1c8:	d818      	bhi.n	800f1fc <onEscapedInput+0x50>
        // handle escape sequence
        UNSET_U8FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800f1d0:	f023 0308 	bic.w	r3, r3, #8
 800f1d4:	b2da      	uxtb	r2, r3
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

        if (c == 'A' || c == 'B') {
 800f1dc:	78fb      	ldrb	r3, [r7, #3]
 800f1de:	2b41      	cmp	r3, #65	; 0x41
 800f1e0:	d002      	beq.n	800f1e8 <onEscapedInput+0x3c>
 800f1e2:	78fb      	ldrb	r3, [r7, #3]
 800f1e4:	2b42      	cmp	r3, #66	; 0x42
 800f1e6:	d109      	bne.n	800f1fc <onEscapedInput+0x50>
            // treat \e[..A as cursor up and \e[..B as cursor down
            // there might be extra chars between [ and A/B, just ignore them
            navigateHistory(cli, c == 'A');
 800f1e8:	78fb      	ldrb	r3, [r7, #3]
 800f1ea:	2b41      	cmp	r3, #65	; 0x41
 800f1ec:	bf0c      	ite	eq
 800f1ee:	2301      	moveq	r3, #1
 800f1f0:	2300      	movne	r3, #0
 800f1f2:	b2db      	uxtb	r3, r3
 800f1f4:	4619      	mov	r1, r3
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f7ff ff68 	bl	800f0cc <navigateHistory>
        }
    }
}
 800f1fc:	bf00      	nop
 800f1fe:	3710      	adds	r7, #16
 800f200:	46bd      	mov	sp, r7
 800f202:	bd80      	pop	{r7, pc}

0800f204 <onCharInput>:

static void onCharInput(EmbeddedCli *cli, char c) {
 800f204:	b580      	push	{r7, lr}
 800f206:	b084      	sub	sp, #16
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
 800f20c:	460b      	mov	r3, r1
 800f20e:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	68db      	ldr	r3, [r3, #12]
 800f214:	60fb      	str	r3, [r7, #12]

    // have to reserve two extra chars for command ending (used in tokenization)
    if (impl->cmdSize + 2 >= impl->cmdMaxSize)
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	8c1b      	ldrh	r3, [r3, #32]
 800f21a:	3302      	adds	r3, #2
 800f21c:	68fa      	ldr	r2, [r7, #12]
 800f21e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800f220:	4293      	cmp	r3, r2
 800f222:	da1a      	bge.n	800f25a <onCharInput+0x56>
        return;

    impl->cmdBuffer[impl->cmdSize] = c;
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	69db      	ldr	r3, [r3, #28]
 800f228:	68fa      	ldr	r2, [r7, #12]
 800f22a:	8c12      	ldrh	r2, [r2, #32]
 800f22c:	4413      	add	r3, r2
 800f22e:	78fa      	ldrb	r2, [r7, #3]
 800f230:	701a      	strb	r2, [r3, #0]
    ++impl->cmdSize;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	8c1b      	ldrh	r3, [r3, #32]
 800f236:	3301      	adds	r3, #1
 800f238:	b29a      	uxth	r2, r3
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	841a      	strh	r2, [r3, #32]
    impl->cmdBuffer[impl->cmdSize] = '\0';
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	69db      	ldr	r3, [r3, #28]
 800f242:	68fa      	ldr	r2, [r7, #12]
 800f244:	8c12      	ldrh	r2, [r2, #32]
 800f246:	4413      	add	r3, r2
 800f248:	2200      	movs	r2, #0
 800f24a:	701a      	strb	r2, [r3, #0]

    cli->writeChar(cli, c);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	78fa      	ldrb	r2, [r7, #3]
 800f252:	4611      	mov	r1, r2
 800f254:	6878      	ldr	r0, [r7, #4]
 800f256:	4798      	blx	r3
 800f258:	e000      	b.n	800f25c <onCharInput+0x58>
        return;
 800f25a:	bf00      	nop
}
 800f25c:	3710      	adds	r7, #16
 800f25e:	46bd      	mov	sp, r7
 800f260:	bd80      	pop	{r7, pc}
	...

0800f264 <onControlInput>:

static void onControlInput(EmbeddedCli *cli, char c) {
 800f264:	b580      	push	{r7, lr}
 800f266:	b084      	sub	sp, #16
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
 800f26c:	460b      	mov	r3, r1
 800f26e:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	68db      	ldr	r3, [r3, #12]
 800f274:	60fb      	str	r3, [r7, #12]

    // process \r\n and \n\r as single \r\n command
    if ((impl->lastChar == '\r' && c == '\n') ||
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f27c:	2b0d      	cmp	r3, #13
 800f27e:	d102      	bne.n	800f286 <onControlInput+0x22>
 800f280:	78fb      	ldrb	r3, [r7, #3]
 800f282:	2b0a      	cmp	r3, #10
 800f284:	d062      	beq.n	800f34c <onControlInput+0xe8>
        (impl->lastChar == '\n' && c == '\r'))
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
    if ((impl->lastChar == '\r' && c == '\n') ||
 800f28c:	2b0a      	cmp	r3, #10
 800f28e:	d102      	bne.n	800f296 <onControlInput+0x32>
        (impl->lastChar == '\n' && c == '\r'))
 800f290:	78fb      	ldrb	r3, [r7, #3]
 800f292:	2b0d      	cmp	r3, #13
 800f294:	d05a      	beq.n	800f34c <onControlInput+0xe8>
        return;

    if (c == '\r' || c == '\n') {
 800f296:	78fb      	ldrb	r3, [r7, #3]
 800f298:	2b0d      	cmp	r3, #13
 800f29a:	d002      	beq.n	800f2a2 <onControlInput+0x3e>
 800f29c:	78fb      	ldrb	r3, [r7, #3]
 800f29e:	2b0a      	cmp	r3, #10
 800f2a0:	d126      	bne.n	800f2f0 <onControlInput+0x8c>
        // try to autocomplete command and then process it
        onAutocompleteRequest(cli);
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	f000 fba6 	bl	800f9f4 <onAutocompleteRequest>

        writeToOutput(cli, lineBreak);
 800f2a8:	4b2a      	ldr	r3, [pc, #168]	; (800f354 <onControlInput+0xf0>)
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	4619      	mov	r1, r3
 800f2ae:	6878      	ldr	r0, [r7, #4]
 800f2b0:	f000 fc5c 	bl	800fb6c <writeToOutput>

        if (impl->cmdSize > 0)
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	8c1b      	ldrh	r3, [r3, #32]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d002      	beq.n	800f2c2 <onControlInput+0x5e>
            parseCommand(cli);
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	f000 f84b 	bl	800f358 <parseCommand>
        impl->cmdSize = 0;
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	69db      	ldr	r3, [r3, #28]
 800f2cc:	68fa      	ldr	r2, [r7, #12]
 800f2ce:	8c12      	ldrh	r2, [r2, #32]
 800f2d0:	4413      	add	r3, r2
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	701a      	strb	r2, [r3, #0]
        impl->inputLineLength = 0;
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	2200      	movs	r2, #0
 800f2da:	861a      	strh	r2, [r3, #48]	; 0x30
        impl->history.current = 0;
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	2200      	movs	r2, #0
 800f2e0:	815a      	strh	r2, [r3, #10]

        writeToOutput(cli, impl->invitation);
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	4619      	mov	r1, r3
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f000 fc3f 	bl	800fb6c <writeToOutput>
 800f2ee:	e02e      	b.n	800f34e <onControlInput+0xea>
    } else if ((c == '\b' || c == 0x7F) && impl->cmdSize > 0) {
 800f2f0:	78fb      	ldrb	r3, [r7, #3]
 800f2f2:	2b08      	cmp	r3, #8
 800f2f4:	d002      	beq.n	800f2fc <onControlInput+0x98>
 800f2f6:	78fb      	ldrb	r3, [r7, #3]
 800f2f8:	2b7f      	cmp	r3, #127	; 0x7f
 800f2fa:	d120      	bne.n	800f33e <onControlInput+0xda>
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	8c1b      	ldrh	r3, [r3, #32]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d01c      	beq.n	800f33e <onControlInput+0xda>
        // remove char from screen
        cli->writeChar(cli, '\b');
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	2108      	movs	r1, #8
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	4798      	blx	r3
        cli->writeChar(cli, ' ');
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	2120      	movs	r1, #32
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	4798      	blx	r3
        cli->writeChar(cli, '\b');
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	2108      	movs	r1, #8
 800f31e:	6878      	ldr	r0, [r7, #4]
 800f320:	4798      	blx	r3
        // and from buffer
        --impl->cmdSize;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	8c1b      	ldrh	r3, [r3, #32]
 800f326:	3b01      	subs	r3, #1
 800f328:	b29a      	uxth	r2, r3
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	69db      	ldr	r3, [r3, #28]
 800f332:	68fa      	ldr	r2, [r7, #12]
 800f334:	8c12      	ldrh	r2, [r2, #32]
 800f336:	4413      	add	r3, r2
 800f338:	2200      	movs	r2, #0
 800f33a:	701a      	strb	r2, [r3, #0]
 800f33c:	e007      	b.n	800f34e <onControlInput+0xea>
    } else if (c == '\t') {
 800f33e:	78fb      	ldrb	r3, [r7, #3]
 800f340:	2b09      	cmp	r3, #9
 800f342:	d104      	bne.n	800f34e <onControlInput+0xea>
        onAutocompleteRequest(cli);
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f000 fb55 	bl	800f9f4 <onAutocompleteRequest>
 800f34a:	e000      	b.n	800f34e <onControlInput+0xea>
        return;
 800f34c:	bf00      	nop
    }

}
 800f34e:	3710      	adds	r7, #16
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}
 800f354:	20000020 	.word	0x20000020

0800f358 <parseCommand>:

static void parseCommand(EmbeddedCli *cli) {
 800f358:	b590      	push	{r4, r7, lr}
 800f35a:	b08f      	sub	sp, #60	; 0x3c
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	68db      	ldr	r3, [r3, #12]
 800f364:	61bb      	str	r3, [r7, #24]

    bool isEmpty = true;
 800f366:	2301      	movs	r3, #1
 800f368:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for (int i = 0; i < impl->cmdSize; ++i) {
 800f36c:	2300      	movs	r3, #0
 800f36e:	633b      	str	r3, [r7, #48]	; 0x30
 800f370:	e00d      	b.n	800f38e <parseCommand+0x36>
        if (impl->cmdBuffer[i] != ' ') {
 800f372:	69bb      	ldr	r3, [r7, #24]
 800f374:	69da      	ldr	r2, [r3, #28]
 800f376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f378:	4413      	add	r3, r2
 800f37a:	781b      	ldrb	r3, [r3, #0]
 800f37c:	2b20      	cmp	r3, #32
 800f37e:	d003      	beq.n	800f388 <parseCommand+0x30>
            isEmpty = false;
 800f380:	2300      	movs	r3, #0
 800f382:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            break;
 800f386:	e008      	b.n	800f39a <parseCommand+0x42>
    for (int i = 0; i < impl->cmdSize; ++i) {
 800f388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f38a:	3301      	adds	r3, #1
 800f38c:	633b      	str	r3, [r7, #48]	; 0x30
 800f38e:	69bb      	ldr	r3, [r7, #24]
 800f390:	8c1b      	ldrh	r3, [r3, #32]
 800f392:	461a      	mov	r2, r3
 800f394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f396:	4293      	cmp	r3, r2
 800f398:	dbeb      	blt.n	800f372 <parseCommand+0x1a>
        }
    }
    // do not process empty commands
    if (isEmpty)
 800f39a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	f040 80dc 	bne.w	800f55c <parseCommand+0x204>
        return;
    // push command to history before buffer is modified
    historyPut(&impl->history, impl->cmdBuffer);
 800f3a4:	69bb      	ldr	r3, [r7, #24]
 800f3a6:	1d1a      	adds	r2, r3, #4
 800f3a8:	69bb      	ldr	r3, [r7, #24]
 800f3aa:	69db      	ldr	r3, [r3, #28]
 800f3ac:	4619      	mov	r1, r3
 800f3ae:	4610      	mov	r0, r2
 800f3b0:	f000 fca7 	bl	800fd02 <historyPut>

    char *cmdName = NULL;
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    char *cmdArgs = NULL;
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	62bb      	str	r3, [r7, #40]	; 0x28
    bool nameFinished = false;
 800f3bc:	2300      	movs	r3, #0
 800f3be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // find command name and command args inside command buffer
    for (int i = 0; i < impl->cmdSize; ++i) {
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	623b      	str	r3, [r7, #32]
 800f3c6:	e030      	b.n	800f42a <parseCommand+0xd2>
        char c = impl->cmdBuffer[i];
 800f3c8:	69bb      	ldr	r3, [r7, #24]
 800f3ca:	69da      	ldr	r2, [r3, #28]
 800f3cc:	6a3b      	ldr	r3, [r7, #32]
 800f3ce:	4413      	add	r3, r2
 800f3d0:	781b      	ldrb	r3, [r3, #0]
 800f3d2:	75fb      	strb	r3, [r7, #23]

        if (c == ' ') {
 800f3d4:	7dfb      	ldrb	r3, [r7, #23]
 800f3d6:	2b20      	cmp	r3, #32
 800f3d8:	d10f      	bne.n	800f3fa <parseCommand+0xa2>
            // all spaces between name and args are filled with zeros
            // so name is a correct null-terminated string
            if (cmdArgs == NULL)
 800f3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d105      	bne.n	800f3ec <parseCommand+0x94>
                impl->cmdBuffer[i] = '\0';
 800f3e0:	69bb      	ldr	r3, [r7, #24]
 800f3e2:	69da      	ldr	r2, [r3, #28]
 800f3e4:	6a3b      	ldr	r3, [r7, #32]
 800f3e6:	4413      	add	r3, r2
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	701a      	strb	r2, [r3, #0]
            if (cmdName != NULL)
 800f3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d018      	beq.n	800f424 <parseCommand+0xcc>
                nameFinished = true;
 800f3f2:	2301      	movs	r3, #1
 800f3f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f3f8:	e014      	b.n	800f424 <parseCommand+0xcc>

        } else if (cmdName == NULL) {
 800f3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d105      	bne.n	800f40c <parseCommand+0xb4>
            cmdName = &impl->cmdBuffer[i];
 800f400:	69bb      	ldr	r3, [r7, #24]
 800f402:	69da      	ldr	r2, [r3, #28]
 800f404:	6a3b      	ldr	r3, [r7, #32]
 800f406:	4413      	add	r3, r2
 800f408:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f40a:	e00b      	b.n	800f424 <parseCommand+0xcc>
        } else if (cmdArgs == NULL && nameFinished) {
 800f40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d108      	bne.n	800f424 <parseCommand+0xcc>
 800f412:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f416:	2b00      	cmp	r3, #0
 800f418:	d004      	beq.n	800f424 <parseCommand+0xcc>
            cmdArgs = &impl->cmdBuffer[i];
 800f41a:	69bb      	ldr	r3, [r7, #24]
 800f41c:	69da      	ldr	r2, [r3, #28]
 800f41e:	6a3b      	ldr	r3, [r7, #32]
 800f420:	4413      	add	r3, r2
 800f422:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int i = 0; i < impl->cmdSize; ++i) {
 800f424:	6a3b      	ldr	r3, [r7, #32]
 800f426:	3301      	adds	r3, #1
 800f428:	623b      	str	r3, [r7, #32]
 800f42a:	69bb      	ldr	r3, [r7, #24]
 800f42c:	8c1b      	ldrh	r3, [r3, #32]
 800f42e:	461a      	mov	r2, r3
 800f430:	6a3b      	ldr	r3, [r7, #32]
 800f432:	4293      	cmp	r3, r2
 800f434:	dbc8      	blt.n	800f3c8 <parseCommand+0x70>
        }
    }

    // we keep two last bytes in cmd buffer reserved so cmdSize is always by 2
    // less than cmdMaxSize
    impl->cmdBuffer[impl->cmdSize + 1] = '\0';
 800f436:	69bb      	ldr	r3, [r7, #24]
 800f438:	69da      	ldr	r2, [r3, #28]
 800f43a:	69bb      	ldr	r3, [r7, #24]
 800f43c:	8c1b      	ldrh	r3, [r3, #32]
 800f43e:	3301      	adds	r3, #1
 800f440:	4413      	add	r3, r2
 800f442:	2200      	movs	r2, #0
 800f444:	701a      	strb	r2, [r3, #0]

    if (cmdName == NULL)
 800f446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f448:	2b00      	cmp	r3, #0
 800f44a:	f000 8089 	beq.w	800f560 <parseCommand+0x208>
        return;

    // try to find command in bindings
    for (int i = 0; i < impl->bindingsCount; ++i) {
 800f44e:	2300      	movs	r3, #0
 800f450:	61fb      	str	r3, [r7, #28]
 800f452:	e054      	b.n	800f4fe <parseCommand+0x1a6>
        if (strcmp(cmdName, impl->bindings[i].name) == 0) {
 800f454:	69bb      	ldr	r3, [r7, #24]
 800f456:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800f458:	69fa      	ldr	r2, [r7, #28]
 800f45a:	4613      	mov	r3, r2
 800f45c:	009b      	lsls	r3, r3, #2
 800f45e:	4413      	add	r3, r2
 800f460:	009b      	lsls	r3, r3, #2
 800f462:	440b      	add	r3, r1
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	4619      	mov	r1, r3
 800f468:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f46a:	f7f0 feb9 	bl	80001e0 <strcmp>
 800f46e:	4603      	mov	r3, r0
 800f470:	2b00      	cmp	r3, #0
 800f472:	d141      	bne.n	800f4f8 <parseCommand+0x1a0>
            if (impl->bindings[i].binding == NULL)
 800f474:	69bb      	ldr	r3, [r7, #24]
 800f476:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800f478:	69fa      	ldr	r2, [r7, #28]
 800f47a:	4613      	mov	r3, r2
 800f47c:	009b      	lsls	r3, r3, #2
 800f47e:	4413      	add	r3, r2
 800f480:	009b      	lsls	r3, r3, #2
 800f482:	440b      	add	r3, r1
 800f484:	691b      	ldr	r3, [r3, #16]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d040      	beq.n	800f50c <parseCommand+0x1b4>
                break;

            if (impl->bindings[i].tokenizeArgs)
 800f48a:	69bb      	ldr	r3, [r7, #24]
 800f48c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800f48e:	69fa      	ldr	r2, [r7, #28]
 800f490:	4613      	mov	r3, r2
 800f492:	009b      	lsls	r3, r3, #2
 800f494:	4413      	add	r3, r2
 800f496:	009b      	lsls	r3, r3, #2
 800f498:	440b      	add	r3, r1
 800f49a:	7a1b      	ldrb	r3, [r3, #8]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d002      	beq.n	800f4a6 <parseCommand+0x14e>
                embeddedCliTokenizeArgs(cmdArgs);
 800f4a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4a2:	f7ff fd3b 	bl	800ef1c <embeddedCliTokenizeArgs>
            // currently, output is blank line, so we can just print directly
            SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 800f4a6:	69bb      	ldr	r3, [r7, #24]
 800f4a8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800f4ac:	f043 0310 	orr.w	r3, r3, #16
 800f4b0:	b2da      	uxtb	r2, r3
 800f4b2:	69bb      	ldr	r3, [r7, #24]
 800f4b4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
            impl->bindings[i].binding(cli, cmdArgs, impl->bindings[i].context);
 800f4b8:	69bb      	ldr	r3, [r7, #24]
 800f4ba:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800f4bc:	69fa      	ldr	r2, [r7, #28]
 800f4be:	4613      	mov	r3, r2
 800f4c0:	009b      	lsls	r3, r3, #2
 800f4c2:	4413      	add	r3, r2
 800f4c4:	009b      	lsls	r3, r3, #2
 800f4c6:	440b      	add	r3, r1
 800f4c8:	691c      	ldr	r4, [r3, #16]
 800f4ca:	69bb      	ldr	r3, [r7, #24]
 800f4cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800f4ce:	69fa      	ldr	r2, [r7, #28]
 800f4d0:	4613      	mov	r3, r2
 800f4d2:	009b      	lsls	r3, r3, #2
 800f4d4:	4413      	add	r3, r2
 800f4d6:	009b      	lsls	r3, r3, #2
 800f4d8:	440b      	add	r3, r1
 800f4da:	68db      	ldr	r3, [r3, #12]
 800f4dc:	461a      	mov	r2, r3
 800f4de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f4e0:	6878      	ldr	r0, [r7, #4]
 800f4e2:	47a0      	blx	r4
            UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 800f4e4:	69bb      	ldr	r3, [r7, #24]
 800f4e6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800f4ea:	f023 0310 	bic.w	r3, r3, #16
 800f4ee:	b2da      	uxtb	r2, r3
 800f4f0:	69bb      	ldr	r3, [r7, #24]
 800f4f2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
            return;
 800f4f6:	e034      	b.n	800f562 <parseCommand+0x20a>
    for (int i = 0; i < impl->bindingsCount; ++i) {
 800f4f8:	69fb      	ldr	r3, [r7, #28]
 800f4fa:	3301      	adds	r3, #1
 800f4fc:	61fb      	str	r3, [r7, #28]
 800f4fe:	69bb      	ldr	r3, [r7, #24]
 800f500:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800f502:	461a      	mov	r2, r3
 800f504:	69fb      	ldr	r3, [r7, #28]
 800f506:	4293      	cmp	r3, r2
 800f508:	dba4      	blt.n	800f454 <parseCommand+0xfc>
 800f50a:	e000      	b.n	800f50e <parseCommand+0x1b6>
                break;
 800f50c:	bf00      	nop
        }
    }

    // command not found in bindings or binding was null
    // try to call default callback
    if (cli->onCommand != NULL) {
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	685b      	ldr	r3, [r3, #4]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d01d      	beq.n	800f552 <parseCommand+0x1fa>
        CliCommand command;
        command.name = cmdName;
 800f516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f518:	60fb      	str	r3, [r7, #12]
        command.args = cmdArgs;
 800f51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f51c:	613b      	str	r3, [r7, #16]

        // currently, output is blank line, so we can just print directly
        SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 800f51e:	69bb      	ldr	r3, [r7, #24]
 800f520:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800f524:	f043 0310 	orr.w	r3, r3, #16
 800f528:	b2da      	uxtb	r2, r3
 800f52a:	69bb      	ldr	r3, [r7, #24]
 800f52c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        cli->onCommand(cli, &command);
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	685b      	ldr	r3, [r3, #4]
 800f534:	f107 020c 	add.w	r2, r7, #12
 800f538:	4611      	mov	r1, r2
 800f53a:	6878      	ldr	r0, [r7, #4]
 800f53c:	4798      	blx	r3
        UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 800f53e:	69bb      	ldr	r3, [r7, #24]
 800f540:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800f544:	f023 0310 	bic.w	r3, r3, #16
 800f548:	b2da      	uxtb	r2, r3
 800f54a:	69bb      	ldr	r3, [r7, #24]
 800f54c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 800f550:	e007      	b.n	800f562 <parseCommand+0x20a>
    } else {
        onUnknownCommand(cli, cmdName);
 800f552:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f554:	6878      	ldr	r0, [r7, #4]
 800f556:	f000 f913 	bl	800f780 <onUnknownCommand>
 800f55a:	e002      	b.n	800f562 <parseCommand+0x20a>
        return;
 800f55c:	bf00      	nop
 800f55e:	e000      	b.n	800f562 <parseCommand+0x20a>
        return;
 800f560:	bf00      	nop
    }
}
 800f562:	373c      	adds	r7, #60	; 0x3c
 800f564:	46bd      	mov	sp, r7
 800f566:	bd90      	pop	{r4, r7, pc}

0800f568 <initInternalBindings>:

static void initInternalBindings(EmbeddedCli *cli) {
 800f568:	b5b0      	push	{r4, r5, r7, lr}
 800f56a:	b08a      	sub	sp, #40	; 0x28
 800f56c:	af02      	add	r7, sp, #8
 800f56e:	6078      	str	r0, [r7, #4]
    CliCommandBinding b = {
 800f570:	4b0c      	ldr	r3, [pc, #48]	; (800f5a4 <initInternalBindings+0x3c>)
 800f572:	f107 040c 	add.w	r4, r7, #12
 800f576:	461d      	mov	r5, r3
 800f578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f57a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f57c:	682b      	ldr	r3, [r5, #0]
 800f57e:	6023      	str	r3, [r4, #0]
            "Print list of commands",
            true,
            NULL,
            onHelp
    };
    embeddedCliAddBinding(cli, b);
 800f580:	466a      	mov	r2, sp
 800f582:	f107 0318 	add.w	r3, r7, #24
 800f586:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f58a:	e882 0003 	stmia.w	r2, {r0, r1}
 800f58e:	f107 030c 	add.w	r3, r7, #12
 800f592:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f594:	6878      	ldr	r0, [r7, #4]
 800f596:	f7ff fc4c 	bl	800ee32 <embeddedCliAddBinding>
}
 800f59a:	bf00      	nop
 800f59c:	3720      	adds	r7, #32
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bdb0      	pop	{r4, r5, r7, pc}
 800f5a2:	bf00      	nop
 800f5a4:	0801f340 	.word	0x0801f340

0800f5a8 <onHelp>:

static void onHelp(EmbeddedCli *cli, char *tokens, void *context) {
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b08c      	sub	sp, #48	; 0x30
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	60f8      	str	r0, [r7, #12]
 800f5b0:	60b9      	str	r1, [r7, #8]
 800f5b2:	607a      	str	r2, [r7, #4]
    UNUSED(context);
    PREPARE_IMPL(cli);
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	68db      	ldr	r3, [r3, #12]
 800f5b8:	61fb      	str	r3, [r7, #28]

    if (impl->bindingsCount == 0) {
 800f5ba:	69fb      	ldr	r3, [r7, #28]
 800f5bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d10a      	bne.n	800f5d8 <onHelp+0x30>
        writeToOutput(cli, "Help is not available");
 800f5c2:	496b      	ldr	r1, [pc, #428]	; (800f770 <onHelp+0x1c8>)
 800f5c4:	68f8      	ldr	r0, [r7, #12]
 800f5c6:	f000 fad1 	bl	800fb6c <writeToOutput>
        writeToOutput(cli, lineBreak);
 800f5ca:	4b6a      	ldr	r3, [pc, #424]	; (800f774 <onHelp+0x1cc>)
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	4619      	mov	r1, r3
 800f5d0:	68f8      	ldr	r0, [r7, #12]
 800f5d2:	f000 facb 	bl	800fb6c <writeToOutput>
        return;
 800f5d6:	e0c8      	b.n	800f76a <onHelp+0x1c2>
    }

    uint16_t tokenCount = embeddedCliGetTokenCount(tokens);
 800f5d8:	68b8      	ldr	r0, [r7, #8]
 800f5da:	f7ff fd49 	bl	800f070 <embeddedCliGetTokenCount>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	837b      	strh	r3, [r7, #26]
    if (tokenCount == 0) {
 800f5e2:	8b7b      	ldrh	r3, [r7, #26]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d146      	bne.n	800f676 <onHelp+0xce>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f5ec:	e03c      	b.n	800f668 <onHelp+0xc0>
            writeToOutput(cli, " * ");
 800f5ee:	4962      	ldr	r1, [pc, #392]	; (800f778 <onHelp+0x1d0>)
 800f5f0:	68f8      	ldr	r0, [r7, #12]
 800f5f2:	f000 fabb 	bl	800fb6c <writeToOutput>
            writeToOutput(cli, impl->bindings[i].name);
 800f5f6:	69fb      	ldr	r3, [r7, #28]
 800f5f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800f5fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5fc:	4613      	mov	r3, r2
 800f5fe:	009b      	lsls	r3, r3, #2
 800f600:	4413      	add	r3, r2
 800f602:	009b      	lsls	r3, r3, #2
 800f604:	440b      	add	r3, r1
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	4619      	mov	r1, r3
 800f60a:	68f8      	ldr	r0, [r7, #12]
 800f60c:	f000 faae 	bl	800fb6c <writeToOutput>
            writeToOutput(cli, lineBreak);
 800f610:	4b58      	ldr	r3, [pc, #352]	; (800f774 <onHelp+0x1cc>)
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	4619      	mov	r1, r3
 800f616:	68f8      	ldr	r0, [r7, #12]
 800f618:	f000 faa8 	bl	800fb6c <writeToOutput>
            if (impl->bindings[i].help != NULL) {
 800f61c:	69fb      	ldr	r3, [r7, #28]
 800f61e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800f620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f622:	4613      	mov	r3, r2
 800f624:	009b      	lsls	r3, r3, #2
 800f626:	4413      	add	r3, r2
 800f628:	009b      	lsls	r3, r3, #2
 800f62a:	440b      	add	r3, r1
 800f62c:	685b      	ldr	r3, [r3, #4]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d017      	beq.n	800f662 <onHelp+0xba>
                cli->writeChar(cli, '\t');
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	2109      	movs	r1, #9
 800f638:	68f8      	ldr	r0, [r7, #12]
 800f63a:	4798      	blx	r3
                writeToOutput(cli, impl->bindings[i].help);
 800f63c:	69fb      	ldr	r3, [r7, #28]
 800f63e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800f640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f642:	4613      	mov	r3, r2
 800f644:	009b      	lsls	r3, r3, #2
 800f646:	4413      	add	r3, r2
 800f648:	009b      	lsls	r3, r3, #2
 800f64a:	440b      	add	r3, r1
 800f64c:	685b      	ldr	r3, [r3, #4]
 800f64e:	4619      	mov	r1, r3
 800f650:	68f8      	ldr	r0, [r7, #12]
 800f652:	f000 fa8b 	bl	800fb6c <writeToOutput>
                writeToOutput(cli, lineBreak);
 800f656:	4b47      	ldr	r3, [pc, #284]	; (800f774 <onHelp+0x1cc>)
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	4619      	mov	r1, r3
 800f65c:	68f8      	ldr	r0, [r7, #12]
 800f65e:	f000 fa85 	bl	800fb6c <writeToOutput>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 800f662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f664:	3301      	adds	r3, #1
 800f666:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f668:	69fb      	ldr	r3, [r7, #28]
 800f66a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800f66c:	461a      	mov	r2, r3
 800f66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f670:	4293      	cmp	r3, r2
 800f672:	dbbc      	blt.n	800f5ee <onHelp+0x46>
 800f674:	e079      	b.n	800f76a <onHelp+0x1c2>
            }
        }
    } else if (tokenCount == 1) {
 800f676:	8b7b      	ldrh	r3, [r7, #26]
 800f678:	2b01      	cmp	r3, #1
 800f67a:	d16c      	bne.n	800f756 <onHelp+0x1ae>
        // try find command
        const char *helpStr = NULL;
 800f67c:	2300      	movs	r3, #0
 800f67e:	62bb      	str	r3, [r7, #40]	; 0x28
        const char *cmdName = embeddedCliGetToken(tokens, 1);
 800f680:	2101      	movs	r1, #1
 800f682:	68b8      	ldr	r0, [r7, #8]
 800f684:	f7ff fcbe 	bl	800f004 <embeddedCliGetToken>
 800f688:	6178      	str	r0, [r7, #20]
        bool found = false;
 800f68a:	2300      	movs	r3, #0
 800f68c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        for (int i = 0; i < impl->bindingsCount; ++i) {
 800f690:	2300      	movs	r3, #0
 800f692:	623b      	str	r3, [r7, #32]
 800f694:	e020      	b.n	800f6d8 <onHelp+0x130>
            if (strcmp(impl->bindings[i].name, cmdName) == 0) {
 800f696:	69fb      	ldr	r3, [r7, #28]
 800f698:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800f69a:	6a3a      	ldr	r2, [r7, #32]
 800f69c:	4613      	mov	r3, r2
 800f69e:	009b      	lsls	r3, r3, #2
 800f6a0:	4413      	add	r3, r2
 800f6a2:	009b      	lsls	r3, r3, #2
 800f6a4:	440b      	add	r3, r1
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	6979      	ldr	r1, [r7, #20]
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f7f0 fd98 	bl	80001e0 <strcmp>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d10d      	bne.n	800f6d2 <onHelp+0x12a>
                helpStr = impl->bindings[i].help;
 800f6b6:	69fb      	ldr	r3, [r7, #28]
 800f6b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800f6ba:	6a3a      	ldr	r2, [r7, #32]
 800f6bc:	4613      	mov	r3, r2
 800f6be:	009b      	lsls	r3, r3, #2
 800f6c0:	4413      	add	r3, r2
 800f6c2:	009b      	lsls	r3, r3, #2
 800f6c4:	440b      	add	r3, r1
 800f6c6:	685b      	ldr	r3, [r3, #4]
 800f6c8:	62bb      	str	r3, [r7, #40]	; 0x28
                found = true;
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 800f6d0:	e008      	b.n	800f6e4 <onHelp+0x13c>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 800f6d2:	6a3b      	ldr	r3, [r7, #32]
 800f6d4:	3301      	adds	r3, #1
 800f6d6:	623b      	str	r3, [r7, #32]
 800f6d8:	69fb      	ldr	r3, [r7, #28]
 800f6da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800f6dc:	461a      	mov	r2, r3
 800f6de:	6a3b      	ldr	r3, [r7, #32]
 800f6e0:	4293      	cmp	r3, r2
 800f6e2:	dbd8      	blt.n	800f696 <onHelp+0xee>
            }
        }
        if (found && helpStr != NULL) {
 800f6e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d020      	beq.n	800f72e <onHelp+0x186>
 800f6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d01d      	beq.n	800f72e <onHelp+0x186>
            writeToOutput(cli, " * ");
 800f6f2:	4921      	ldr	r1, [pc, #132]	; (800f778 <onHelp+0x1d0>)
 800f6f4:	68f8      	ldr	r0, [r7, #12]
 800f6f6:	f000 fa39 	bl	800fb6c <writeToOutput>
            writeToOutput(cli, cmdName);
 800f6fa:	6979      	ldr	r1, [r7, #20]
 800f6fc:	68f8      	ldr	r0, [r7, #12]
 800f6fe:	f000 fa35 	bl	800fb6c <writeToOutput>
            writeToOutput(cli, lineBreak);
 800f702:	4b1c      	ldr	r3, [pc, #112]	; (800f774 <onHelp+0x1cc>)
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	4619      	mov	r1, r3
 800f708:	68f8      	ldr	r0, [r7, #12]
 800f70a:	f000 fa2f 	bl	800fb6c <writeToOutput>
            cli->writeChar(cli, '\t');
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	2109      	movs	r1, #9
 800f714:	68f8      	ldr	r0, [r7, #12]
 800f716:	4798      	blx	r3
            writeToOutput(cli, helpStr);
 800f718:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f71a:	68f8      	ldr	r0, [r7, #12]
 800f71c:	f000 fa26 	bl	800fb6c <writeToOutput>
            writeToOutput(cli, lineBreak);
 800f720:	4b14      	ldr	r3, [pc, #80]	; (800f774 <onHelp+0x1cc>)
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	4619      	mov	r1, r3
 800f726:	68f8      	ldr	r0, [r7, #12]
 800f728:	f000 fa20 	bl	800fb6c <writeToOutput>
 800f72c:	e01d      	b.n	800f76a <onHelp+0x1c2>
        } else if (found) {
 800f72e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f732:	2b00      	cmp	r3, #0
 800f734:	d00a      	beq.n	800f74c <onHelp+0x1a4>
            writeToOutput(cli, "Help is not available");
 800f736:	490e      	ldr	r1, [pc, #56]	; (800f770 <onHelp+0x1c8>)
 800f738:	68f8      	ldr	r0, [r7, #12]
 800f73a:	f000 fa17 	bl	800fb6c <writeToOutput>
            writeToOutput(cli, lineBreak);
 800f73e:	4b0d      	ldr	r3, [pc, #52]	; (800f774 <onHelp+0x1cc>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	4619      	mov	r1, r3
 800f744:	68f8      	ldr	r0, [r7, #12]
 800f746:	f000 fa11 	bl	800fb6c <writeToOutput>
 800f74a:	e00e      	b.n	800f76a <onHelp+0x1c2>
        } else {
            onUnknownCommand(cli, cmdName);
 800f74c:	6979      	ldr	r1, [r7, #20]
 800f74e:	68f8      	ldr	r0, [r7, #12]
 800f750:	f000 f816 	bl	800f780 <onUnknownCommand>
 800f754:	e009      	b.n	800f76a <onHelp+0x1c2>
        }
    } else {
        writeToOutput(cli, "Command \"help\" receives one or zero arguments");
 800f756:	4909      	ldr	r1, [pc, #36]	; (800f77c <onHelp+0x1d4>)
 800f758:	68f8      	ldr	r0, [r7, #12]
 800f75a:	f000 fa07 	bl	800fb6c <writeToOutput>
        writeToOutput(cli, lineBreak);
 800f75e:	4b05      	ldr	r3, [pc, #20]	; (800f774 <onHelp+0x1cc>)
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	4619      	mov	r1, r3
 800f764:	68f8      	ldr	r0, [r7, #12]
 800f766:	f000 fa01 	bl	800fb6c <writeToOutput>
    }
}
 800f76a:	3730      	adds	r7, #48	; 0x30
 800f76c:	46bd      	mov	sp, r7
 800f76e:	bd80      	pop	{r7, pc}
 800f770:	0801f354 	.word	0x0801f354
 800f774:	20000020 	.word	0x20000020
 800f778:	0801f36c 	.word	0x0801f36c
 800f77c:	0801f370 	.word	0x0801f370

0800f780 <onUnknownCommand>:

static void onUnknownCommand(EmbeddedCli *cli, const char *name) {
 800f780:	b580      	push	{r7, lr}
 800f782:	b082      	sub	sp, #8
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
 800f788:	6039      	str	r1, [r7, #0]
    writeToOutput(cli, "Unknown command: \"");
 800f78a:	490b      	ldr	r1, [pc, #44]	; (800f7b8 <onUnknownCommand+0x38>)
 800f78c:	6878      	ldr	r0, [r7, #4]
 800f78e:	f000 f9ed 	bl	800fb6c <writeToOutput>
    writeToOutput(cli, name);
 800f792:	6839      	ldr	r1, [r7, #0]
 800f794:	6878      	ldr	r0, [r7, #4]
 800f796:	f000 f9e9 	bl	800fb6c <writeToOutput>
    writeToOutput(cli, "\". Write \"help\" for a list of available commands");
 800f79a:	4908      	ldr	r1, [pc, #32]	; (800f7bc <onUnknownCommand+0x3c>)
 800f79c:	6878      	ldr	r0, [r7, #4]
 800f79e:	f000 f9e5 	bl	800fb6c <writeToOutput>
    writeToOutput(cli, lineBreak);
 800f7a2:	4b07      	ldr	r3, [pc, #28]	; (800f7c0 <onUnknownCommand+0x40>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	4619      	mov	r1, r3
 800f7a8:	6878      	ldr	r0, [r7, #4]
 800f7aa:	f000 f9df 	bl	800fb6c <writeToOutput>
}
 800f7ae:	bf00      	nop
 800f7b0:	3708      	adds	r7, #8
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	bd80      	pop	{r7, pc}
 800f7b6:	bf00      	nop
 800f7b8:	0801f3a0 	.word	0x0801f3a0
 800f7bc:	0801f3b4 	.word	0x0801f3b4
 800f7c0:	20000020 	.word	0x20000020

0800f7c4 <getAutocompletedCommand>:

static AutocompletedCommand getAutocompletedCommand(EmbeddedCli *cli, const char *prefix) {
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b08e      	sub	sp, #56	; 0x38
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	60f8      	str	r0, [r7, #12]
 800f7cc:	60b9      	str	r1, [r7, #8]
 800f7ce:	607a      	str	r2, [r7, #4]
    AutocompletedCommand cmd = {NULL, 0, 0};
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	613b      	str	r3, [r7, #16]
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	82bb      	strh	r3, [r7, #20]
 800f7d8:	2300      	movs	r3, #0
 800f7da:	82fb      	strh	r3, [r7, #22]

    size_t prefixLen = strlen(prefix);
 800f7dc:	6878      	ldr	r0, [r7, #4]
 800f7de:	f7f0 fd09 	bl	80001f4 <strlen>
 800f7e2:	6278      	str	r0, [r7, #36]	; 0x24

    PREPARE_IMPL(cli);
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	68db      	ldr	r3, [r3, #12]
 800f7e8:	623b      	str	r3, [r7, #32]
    if (impl->bindingsCount == 0 || prefixLen == 0)
 800f7ea:	6a3b      	ldr	r3, [r7, #32]
 800f7ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d002      	beq.n	800f7f8 <getAutocompletedCommand+0x34>
 800f7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d108      	bne.n	800f80a <getAutocompletedCommand+0x46>
        return cmd;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	461a      	mov	r2, r3
 800f7fc:	f107 0310 	add.w	r3, r7, #16
 800f800:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f804:	e882 0003 	stmia.w	r2, {r0, r1}
 800f808:	e095      	b.n	800f936 <getAutocompletedCommand+0x172>


    for (int i = 0; i < impl->bindingsCount; ++i) {
 800f80a:	2300      	movs	r3, #0
 800f80c:	637b      	str	r3, [r7, #52]	; 0x34
 800f80e:	e083      	b.n	800f918 <getAutocompletedCommand+0x154>
        const char *name = impl->bindings[i].name;
 800f810:	6a3b      	ldr	r3, [r7, #32]
 800f812:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800f814:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f816:	4613      	mov	r3, r2
 800f818:	009b      	lsls	r3, r3, #2
 800f81a:	4413      	add	r3, r2
 800f81c:	009b      	lsls	r3, r3, #2
 800f81e:	440b      	add	r3, r1
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	61fb      	str	r3, [r7, #28]
        size_t len = strlen(name);
 800f824:	69f8      	ldr	r0, [r7, #28]
 800f826:	f7f0 fce5 	bl	80001f4 <strlen>
 800f82a:	61b8      	str	r0, [r7, #24]

        // unset autocomplete flag
        UNSET_U8FLAG(impl->bindingsFlags[i], BINDING_FLAG_AUTOCOMPLETE);
 800f82c:	6a3b      	ldr	r3, [r7, #32]
 800f82e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f832:	4413      	add	r3, r2
 800f834:	781a      	ldrb	r2, [r3, #0]
 800f836:	6a3b      	ldr	r3, [r7, #32]
 800f838:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800f83a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f83c:	440b      	add	r3, r1
 800f83e:	f022 0201 	bic.w	r2, r2, #1
 800f842:	b2d2      	uxtb	r2, r2
 800f844:	701a      	strb	r2, [r3, #0]

        if (len < prefixLen)
 800f846:	69ba      	ldr	r2, [r7, #24]
 800f848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f84a:	429a      	cmp	r2, r3
 800f84c:	d35e      	bcc.n	800f90c <getAutocompletedCommand+0x148>
            continue;

        // check if this command is candidate for autocomplete
        bool isCandidate = true;
 800f84e:	2301      	movs	r3, #1
 800f850:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        for (size_t j = 0; j < prefixLen; ++j) {
 800f854:	2300      	movs	r3, #0
 800f856:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f858:	e010      	b.n	800f87c <getAutocompletedCommand+0xb8>
            if (prefix[j] != name[j]) {
 800f85a:	687a      	ldr	r2, [r7, #4]
 800f85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f85e:	4413      	add	r3, r2
 800f860:	781a      	ldrb	r2, [r3, #0]
 800f862:	69f9      	ldr	r1, [r7, #28]
 800f864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f866:	440b      	add	r3, r1
 800f868:	781b      	ldrb	r3, [r3, #0]
 800f86a:	429a      	cmp	r2, r3
 800f86c:	d003      	beq.n	800f876 <getAutocompletedCommand+0xb2>
                isCandidate = false;
 800f86e:	2300      	movs	r3, #0
 800f870:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                break;
 800f874:	e006      	b.n	800f884 <getAutocompletedCommand+0xc0>
        for (size_t j = 0; j < prefixLen; ++j) {
 800f876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f878:	3301      	adds	r3, #1
 800f87a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f87c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f880:	429a      	cmp	r2, r3
 800f882:	d3ea      	bcc.n	800f85a <getAutocompletedCommand+0x96>
            }
        }
        if (!isCandidate)
 800f884:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f888:	f083 0301 	eor.w	r3, r3, #1
 800f88c:	b2db      	uxtb	r3, r3
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d13e      	bne.n	800f910 <getAutocompletedCommand+0x14c>
            continue;

        impl->bindingsFlags[i] |= BINDING_FLAG_AUTOCOMPLETE;
 800f892:	6a3b      	ldr	r3, [r7, #32]
 800f894:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f898:	4413      	add	r3, r2
 800f89a:	781a      	ldrb	r2, [r3, #0]
 800f89c:	6a3b      	ldr	r3, [r7, #32]
 800f89e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800f8a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8a2:	440b      	add	r3, r1
 800f8a4:	f042 0201 	orr.w	r2, r2, #1
 800f8a8:	b2d2      	uxtb	r2, r2
 800f8aa:	701a      	strb	r2, [r3, #0]

        if (cmd.candidateCount == 0 || len < cmd.autocompletedLen)
 800f8ac:	8afb      	ldrh	r3, [r7, #22]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d004      	beq.n	800f8bc <getAutocompletedCommand+0xf8>
 800f8b2:	8abb      	ldrh	r3, [r7, #20]
 800f8b4:	461a      	mov	r2, r3
 800f8b6:	69bb      	ldr	r3, [r7, #24]
 800f8b8:	4293      	cmp	r3, r2
 800f8ba:	d202      	bcs.n	800f8c2 <getAutocompletedCommand+0xfe>
            cmd.autocompletedLen = (uint16_t) len;
 800f8bc:	69bb      	ldr	r3, [r7, #24]
 800f8be:	b29b      	uxth	r3, r3
 800f8c0:	82bb      	strh	r3, [r7, #20]

        ++cmd.candidateCount;
 800f8c2:	8afb      	ldrh	r3, [r7, #22]
 800f8c4:	3301      	adds	r3, #1
 800f8c6:	b29b      	uxth	r3, r3
 800f8c8:	82fb      	strh	r3, [r7, #22]

        if (cmd.candidateCount == 1) {
 800f8ca:	8afb      	ldrh	r3, [r7, #22]
 800f8cc:	2b01      	cmp	r3, #1
 800f8ce:	d102      	bne.n	800f8d6 <getAutocompletedCommand+0x112>
            cmd.firstCandidate = name;
 800f8d0:	69fb      	ldr	r3, [r7, #28]
 800f8d2:	613b      	str	r3, [r7, #16]
            continue;
 800f8d4:	e01d      	b.n	800f912 <getAutocompletedCommand+0x14e>
        }

        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 800f8d6:	6a3b      	ldr	r3, [r7, #32]
 800f8d8:	8c1b      	ldrh	r3, [r3, #32]
 800f8da:	62bb      	str	r3, [r7, #40]	; 0x28
 800f8dc:	e010      	b.n	800f900 <getAutocompletedCommand+0x13c>
            if (cmd.firstCandidate[j] != name[j]) {
 800f8de:	693a      	ldr	r2, [r7, #16]
 800f8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8e2:	4413      	add	r3, r2
 800f8e4:	781a      	ldrb	r2, [r3, #0]
 800f8e6:	69f9      	ldr	r1, [r7, #28]
 800f8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ea:	440b      	add	r3, r1
 800f8ec:	781b      	ldrb	r3, [r3, #0]
 800f8ee:	429a      	cmp	r2, r3
 800f8f0:	d003      	beq.n	800f8fa <getAutocompletedCommand+0x136>
                cmd.autocompletedLen = (uint16_t) j;
 800f8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8f4:	b29b      	uxth	r3, r3
 800f8f6:	82bb      	strh	r3, [r7, #20]
                break;
 800f8f8:	e00b      	b.n	800f912 <getAutocompletedCommand+0x14e>
        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 800f8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8fc:	3301      	adds	r3, #1
 800f8fe:	62bb      	str	r3, [r7, #40]	; 0x28
 800f900:	8abb      	ldrh	r3, [r7, #20]
 800f902:	461a      	mov	r2, r3
 800f904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f906:	4293      	cmp	r3, r2
 800f908:	d3e9      	bcc.n	800f8de <getAutocompletedCommand+0x11a>
 800f90a:	e002      	b.n	800f912 <getAutocompletedCommand+0x14e>
            continue;
 800f90c:	bf00      	nop
 800f90e:	e000      	b.n	800f912 <getAutocompletedCommand+0x14e>
            continue;
 800f910:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 800f912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f914:	3301      	adds	r3, #1
 800f916:	637b      	str	r3, [r7, #52]	; 0x34
 800f918:	6a3b      	ldr	r3, [r7, #32]
 800f91a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800f91c:	461a      	mov	r2, r3
 800f91e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f920:	4293      	cmp	r3, r2
 800f922:	f6ff af75 	blt.w	800f810 <getAutocompletedCommand+0x4c>
            }
        }
    }

    return cmd;
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	461a      	mov	r2, r3
 800f92a:	f107 0310 	add.w	r3, r7, #16
 800f92e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f932:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800f936:	68f8      	ldr	r0, [r7, #12]
 800f938:	3738      	adds	r7, #56	; 0x38
 800f93a:	46bd      	mov	sp, r7
 800f93c:	bd80      	pop	{r7, pc}

0800f93e <printLiveAutocompletion>:

static void printLiveAutocompletion(EmbeddedCli *cli) {
 800f93e:	b580      	push	{r7, lr}
 800f940:	b088      	sub	sp, #32
 800f942:	af00      	add	r7, sp, #0
 800f944:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	68db      	ldr	r3, [r3, #12]
 800f94a:	617b      	str	r3, [r7, #20]

    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED))
 800f94c:	697b      	ldr	r3, [r7, #20]
 800f94e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800f952:	f003 0320 	and.w	r3, r3, #32
 800f956:	2b00      	cmp	r3, #0
 800f958:	d048      	beq.n	800f9ec <printLiveAutocompletion+0xae>
        return;

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 800f95a:	697b      	ldr	r3, [r7, #20]
 800f95c:	69da      	ldr	r2, [r3, #28]
 800f95e:	f107 030c 	add.w	r3, r7, #12
 800f962:	6879      	ldr	r1, [r7, #4]
 800f964:	4618      	mov	r0, r3
 800f966:	f7ff ff2d 	bl	800f7c4 <getAutocompletedCommand>

    if (cmd.candidateCount == 0) {
 800f96a:	8a7b      	ldrh	r3, [r7, #18]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d102      	bne.n	800f976 <printLiveAutocompletion+0x38>
        cmd.autocompletedLen = impl->cmdSize;
 800f970:	697b      	ldr	r3, [r7, #20]
 800f972:	8c1b      	ldrh	r3, [r3, #32]
 800f974:	823b      	strh	r3, [r7, #16]
    }

    // print live autocompletion (or nothing, if it doesn't exist)
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 800f976:	697b      	ldr	r3, [r7, #20]
 800f978:	8c1b      	ldrh	r3, [r3, #32]
 800f97a:	61fb      	str	r3, [r7, #28]
 800f97c:	e00b      	b.n	800f996 <printLiveAutocompletion+0x58>
        cli->writeChar(cli, cmd.firstCandidate[i]);
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	68f9      	ldr	r1, [r7, #12]
 800f984:	69fa      	ldr	r2, [r7, #28]
 800f986:	440a      	add	r2, r1
 800f988:	7812      	ldrb	r2, [r2, #0]
 800f98a:	4611      	mov	r1, r2
 800f98c:	6878      	ldr	r0, [r7, #4]
 800f98e:	4798      	blx	r3
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 800f990:	69fb      	ldr	r3, [r7, #28]
 800f992:	3301      	adds	r3, #1
 800f994:	61fb      	str	r3, [r7, #28]
 800f996:	8a3b      	ldrh	r3, [r7, #16]
 800f998:	461a      	mov	r2, r3
 800f99a:	69fb      	ldr	r3, [r7, #28]
 800f99c:	4293      	cmp	r3, r2
 800f99e:	d3ee      	bcc.n	800f97e <printLiveAutocompletion+0x40>
    }
    // replace with spaces previous autocompletion
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 800f9a0:	8a3b      	ldrh	r3, [r7, #16]
 800f9a2:	61bb      	str	r3, [r7, #24]
 800f9a4:	e007      	b.n	800f9b6 <printLiveAutocompletion+0x78>
        cli->writeChar(cli, ' ');
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	2120      	movs	r1, #32
 800f9ac:	6878      	ldr	r0, [r7, #4]
 800f9ae:	4798      	blx	r3
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 800f9b0:	69bb      	ldr	r3, [r7, #24]
 800f9b2:	3301      	adds	r3, #1
 800f9b4:	61bb      	str	r3, [r7, #24]
 800f9b6:	697b      	ldr	r3, [r7, #20]
 800f9b8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800f9ba:	461a      	mov	r2, r3
 800f9bc:	69bb      	ldr	r3, [r7, #24]
 800f9be:	4293      	cmp	r3, r2
 800f9c0:	d3f1      	bcc.n	800f9a6 <printLiveAutocompletion+0x68>
    }
    impl->inputLineLength = cmd.autocompletedLen;
 800f9c2:	8a3a      	ldrh	r2, [r7, #16]
 800f9c4:	697b      	ldr	r3, [r7, #20]
 800f9c6:	861a      	strh	r2, [r3, #48]	; 0x30
    cli->writeChar(cli, '\r');
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	210d      	movs	r1, #13
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	4798      	blx	r3
    // print current command again so cursor is moved to initial place
    writeToOutput(cli, impl->invitation);
 800f9d2:	697b      	ldr	r3, [r7, #20]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	4619      	mov	r1, r3
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	f000 f8c7 	bl	800fb6c <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 800f9de:	697b      	ldr	r3, [r7, #20]
 800f9e0:	69db      	ldr	r3, [r3, #28]
 800f9e2:	4619      	mov	r1, r3
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f000 f8c1 	bl	800fb6c <writeToOutput>
 800f9ea:	e000      	b.n	800f9ee <printLiveAutocompletion+0xb0>
        return;
 800f9ec:	bf00      	nop
}
 800f9ee:	3720      	adds	r7, #32
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}

0800f9f4 <onAutocompleteRequest>:

static void onAutocompleteRequest(EmbeddedCli *cli) {
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b088      	sub	sp, #32
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	68db      	ldr	r3, [r3, #12]
 800fa00:	61bb      	str	r3, [r7, #24]

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 800fa02:	69bb      	ldr	r3, [r7, #24]
 800fa04:	69da      	ldr	r2, [r3, #28]
 800fa06:	f107 030c 	add.w	r3, r7, #12
 800fa0a:	6879      	ldr	r1, [r7, #4]
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f7ff fed9 	bl	800f7c4 <getAutocompletedCommand>

    if (cmd.candidateCount == 0)
 800fa12:	8a7b      	ldrh	r3, [r7, #18]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d071      	beq.n	800fafc <onAutocompleteRequest+0x108>
        return;

    if (cmd.candidateCount == 1 || cmd.autocompletedLen > impl->cmdSize) {
 800fa18:	8a7b      	ldrh	r3, [r7, #18]
 800fa1a:	2b01      	cmp	r3, #1
 800fa1c:	d004      	beq.n	800fa28 <onAutocompleteRequest+0x34>
 800fa1e:	8a3a      	ldrh	r2, [r7, #16]
 800fa20:	69bb      	ldr	r3, [r7, #24]
 800fa22:	8c1b      	ldrh	r3, [r3, #32]
 800fa24:	429a      	cmp	r2, r3
 800fa26:	d92a      	bls.n	800fa7e <onAutocompleteRequest+0x8a>
        // can copy from index cmdSize, but prefix is the same, so copy everything
        memcpy(impl->cmdBuffer, cmd.firstCandidate, cmd.autocompletedLen);
 800fa28:	69bb      	ldr	r3, [r7, #24]
 800fa2a:	69db      	ldr	r3, [r3, #28]
 800fa2c:	68f9      	ldr	r1, [r7, #12]
 800fa2e:	8a3a      	ldrh	r2, [r7, #16]
 800fa30:	4618      	mov	r0, r3
 800fa32:	f009 fe63 	bl	80196fc <memcpy>
        if (cmd.candidateCount == 1) {
 800fa36:	8a7b      	ldrh	r3, [r7, #18]
 800fa38:	2b01      	cmp	r3, #1
 800fa3a:	d109      	bne.n	800fa50 <onAutocompleteRequest+0x5c>
            impl->cmdBuffer[cmd.autocompletedLen] = ' ';
 800fa3c:	69bb      	ldr	r3, [r7, #24]
 800fa3e:	69db      	ldr	r3, [r3, #28]
 800fa40:	8a3a      	ldrh	r2, [r7, #16]
 800fa42:	4413      	add	r3, r2
 800fa44:	2220      	movs	r2, #32
 800fa46:	701a      	strb	r2, [r3, #0]
            ++cmd.autocompletedLen;
 800fa48:	8a3b      	ldrh	r3, [r7, #16]
 800fa4a:	3301      	adds	r3, #1
 800fa4c:	b29b      	uxth	r3, r3
 800fa4e:	823b      	strh	r3, [r7, #16]
        }
        impl->cmdBuffer[cmd.autocompletedLen] = '\0';
 800fa50:	69bb      	ldr	r3, [r7, #24]
 800fa52:	69db      	ldr	r3, [r3, #28]
 800fa54:	8a3a      	ldrh	r2, [r7, #16]
 800fa56:	4413      	add	r3, r2
 800fa58:	2200      	movs	r2, #0
 800fa5a:	701a      	strb	r2, [r3, #0]

        writeToOutput(cli, &impl->cmdBuffer[impl->cmdSize]);
 800fa5c:	69bb      	ldr	r3, [r7, #24]
 800fa5e:	69db      	ldr	r3, [r3, #28]
 800fa60:	69ba      	ldr	r2, [r7, #24]
 800fa62:	8c12      	ldrh	r2, [r2, #32]
 800fa64:	4413      	add	r3, r2
 800fa66:	4619      	mov	r1, r3
 800fa68:	6878      	ldr	r0, [r7, #4]
 800fa6a:	f000 f87f 	bl	800fb6c <writeToOutput>
        impl->cmdSize = cmd.autocompletedLen;
 800fa6e:	8a3a      	ldrh	r2, [r7, #16]
 800fa70:	69bb      	ldr	r3, [r7, #24]
 800fa72:	841a      	strh	r2, [r3, #32]
        impl->inputLineLength = impl->cmdSize;
 800fa74:	69bb      	ldr	r3, [r7, #24]
 800fa76:	8c1a      	ldrh	r2, [r3, #32]
 800fa78:	69bb      	ldr	r3, [r7, #24]
 800fa7a:	861a      	strh	r2, [r3, #48]	; 0x30
        return;
 800fa7c:	e03f      	b.n	800fafe <onAutocompleteRequest+0x10a>
    }

    // with multiple candidates when we already completed to common prefix
    // we show all candidates and print input again
    // we need to completely clear current line since it begins with invitation
    clearCurrentLine(cli);
 800fa7e:	6878      	ldr	r0, [r7, #4]
 800fa80:	f000 f842 	bl	800fb08 <clearCurrentLine>

    for (int i = 0; i < impl->bindingsCount; ++i) {
 800fa84:	2300      	movs	r3, #0
 800fa86:	61fb      	str	r3, [r7, #28]
 800fa88:	e021      	b.n	800face <onAutocompleteRequest+0xda>
        // autocomplete flag is set for all candidates by last call to
        // getAutocompletedCommand
        if (!(impl->bindingsFlags[i] & BINDING_FLAG_AUTOCOMPLETE))
 800fa8a:	69bb      	ldr	r3, [r7, #24]
 800fa8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fa8e:	69fb      	ldr	r3, [r7, #28]
 800fa90:	4413      	add	r3, r2
 800fa92:	781b      	ldrb	r3, [r3, #0]
 800fa94:	f003 0301 	and.w	r3, r3, #1
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d014      	beq.n	800fac6 <onAutocompleteRequest+0xd2>
            continue;

        const char *name = impl->bindings[i].name;
 800fa9c:	69bb      	ldr	r3, [r7, #24]
 800fa9e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800faa0:	69fa      	ldr	r2, [r7, #28]
 800faa2:	4613      	mov	r3, r2
 800faa4:	009b      	lsls	r3, r3, #2
 800faa6:	4413      	add	r3, r2
 800faa8:	009b      	lsls	r3, r3, #2
 800faaa:	440b      	add	r3, r1
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	617b      	str	r3, [r7, #20]

        writeToOutput(cli, name);
 800fab0:	6979      	ldr	r1, [r7, #20]
 800fab2:	6878      	ldr	r0, [r7, #4]
 800fab4:	f000 f85a 	bl	800fb6c <writeToOutput>
        writeToOutput(cli, lineBreak);
 800fab8:	4b12      	ldr	r3, [pc, #72]	; (800fb04 <onAutocompleteRequest+0x110>)
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	4619      	mov	r1, r3
 800fabe:	6878      	ldr	r0, [r7, #4]
 800fac0:	f000 f854 	bl	800fb6c <writeToOutput>
 800fac4:	e000      	b.n	800fac8 <onAutocompleteRequest+0xd4>
            continue;
 800fac6:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 800fac8:	69fb      	ldr	r3, [r7, #28]
 800faca:	3301      	adds	r3, #1
 800facc:	61fb      	str	r3, [r7, #28]
 800face:	69bb      	ldr	r3, [r7, #24]
 800fad0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800fad2:	461a      	mov	r2, r3
 800fad4:	69fb      	ldr	r3, [r7, #28]
 800fad6:	4293      	cmp	r3, r2
 800fad8:	dbd7      	blt.n	800fa8a <onAutocompleteRequest+0x96>
    }

    writeToOutput(cli, impl->invitation);
 800fada:	69bb      	ldr	r3, [r7, #24]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	4619      	mov	r1, r3
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	f000 f843 	bl	800fb6c <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 800fae6:	69bb      	ldr	r3, [r7, #24]
 800fae8:	69db      	ldr	r3, [r3, #28]
 800faea:	4619      	mov	r1, r3
 800faec:	6878      	ldr	r0, [r7, #4]
 800faee:	f000 f83d 	bl	800fb6c <writeToOutput>

    impl->inputLineLength = impl->cmdSize;
 800faf2:	69bb      	ldr	r3, [r7, #24]
 800faf4:	8c1a      	ldrh	r2, [r3, #32]
 800faf6:	69bb      	ldr	r3, [r7, #24]
 800faf8:	861a      	strh	r2, [r3, #48]	; 0x30
 800fafa:	e000      	b.n	800fafe <onAutocompleteRequest+0x10a>
        return;
 800fafc:	bf00      	nop
}
 800fafe:	3720      	adds	r7, #32
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd80      	pop	{r7, pc}
 800fb04:	20000020 	.word	0x20000020

0800fb08 <clearCurrentLine>:

static void clearCurrentLine(EmbeddedCli *cli) {
 800fb08:	b590      	push	{r4, r7, lr}
 800fb0a:	b087      	sub	sp, #28
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	68db      	ldr	r3, [r3, #12]
 800fb14:	613b      	str	r3, [r7, #16]
    size_t len = impl->inputLineLength + strlen(impl->invitation);
 800fb16:	693b      	ldr	r3, [r7, #16]
 800fb18:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800fb1a:	461c      	mov	r4, r3
 800fb1c:	693b      	ldr	r3, [r7, #16]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	4618      	mov	r0, r3
 800fb22:	f7f0 fb67 	bl	80001f4 <strlen>
 800fb26:	4603      	mov	r3, r0
 800fb28:	4423      	add	r3, r4
 800fb2a:	60fb      	str	r3, [r7, #12]

    cli->writeChar(cli, '\r');
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	210d      	movs	r1, #13
 800fb32:	6878      	ldr	r0, [r7, #4]
 800fb34:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 800fb36:	2300      	movs	r3, #0
 800fb38:	617b      	str	r3, [r7, #20]
 800fb3a:	e007      	b.n	800fb4c <clearCurrentLine+0x44>
        cli->writeChar(cli, ' ');
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	2120      	movs	r1, #32
 800fb42:	6878      	ldr	r0, [r7, #4]
 800fb44:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 800fb46:	697b      	ldr	r3, [r7, #20]
 800fb48:	3301      	adds	r3, #1
 800fb4a:	617b      	str	r3, [r7, #20]
 800fb4c:	697a      	ldr	r2, [r7, #20]
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	429a      	cmp	r2, r3
 800fb52:	d3f3      	bcc.n	800fb3c <clearCurrentLine+0x34>
    }
    cli->writeChar(cli, '\r');
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	210d      	movs	r1, #13
 800fb5a:	6878      	ldr	r0, [r7, #4]
 800fb5c:	4798      	blx	r3
    impl->inputLineLength = 0;
 800fb5e:	693b      	ldr	r3, [r7, #16]
 800fb60:	2200      	movs	r2, #0
 800fb62:	861a      	strh	r2, [r3, #48]	; 0x30
}
 800fb64:	bf00      	nop
 800fb66:	371c      	adds	r7, #28
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bd90      	pop	{r4, r7, pc}

0800fb6c <writeToOutput>:

static void writeToOutput(EmbeddedCli *cli, const char *str) {
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b084      	sub	sp, #16
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
 800fb74:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 800fb76:	6838      	ldr	r0, [r7, #0]
 800fb78:	f7f0 fb3c 	bl	80001f4 <strlen>
 800fb7c:	60b8      	str	r0, [r7, #8]

    for (size_t i = 0; i < len; ++i) {
 800fb7e:	2300      	movs	r3, #0
 800fb80:	60fb      	str	r3, [r7, #12]
 800fb82:	e00b      	b.n	800fb9c <writeToOutput+0x30>
        cli->writeChar(cli, str[i]);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	6839      	ldr	r1, [r7, #0]
 800fb8a:	68fa      	ldr	r2, [r7, #12]
 800fb8c:	440a      	add	r2, r1
 800fb8e:	7812      	ldrb	r2, [r2, #0]
 800fb90:	4611      	mov	r1, r2
 800fb92:	6878      	ldr	r0, [r7, #4]
 800fb94:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	3301      	adds	r3, #1
 800fb9a:	60fb      	str	r3, [r7, #12]
 800fb9c:	68fa      	ldr	r2, [r7, #12]
 800fb9e:	68bb      	ldr	r3, [r7, #8]
 800fba0:	429a      	cmp	r2, r3
 800fba2:	d3ef      	bcc.n	800fb84 <writeToOutput+0x18>
    }
}
 800fba4:	bf00      	nop
 800fba6:	bf00      	nop
 800fba8:	3710      	adds	r7, #16
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}

0800fbae <isControlChar>:

static bool isControlChar(char c) {
 800fbae:	b480      	push	{r7}
 800fbb0:	b083      	sub	sp, #12
 800fbb2:	af00      	add	r7, sp, #0
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	71fb      	strb	r3, [r7, #7]
    return c == '\r' || c == '\n' || c == '\b' || c == '\t' || c == 0x7F;
 800fbb8:	79fb      	ldrb	r3, [r7, #7]
 800fbba:	2b0d      	cmp	r3, #13
 800fbbc:	d00b      	beq.n	800fbd6 <isControlChar+0x28>
 800fbbe:	79fb      	ldrb	r3, [r7, #7]
 800fbc0:	2b0a      	cmp	r3, #10
 800fbc2:	d008      	beq.n	800fbd6 <isControlChar+0x28>
 800fbc4:	79fb      	ldrb	r3, [r7, #7]
 800fbc6:	2b08      	cmp	r3, #8
 800fbc8:	d005      	beq.n	800fbd6 <isControlChar+0x28>
 800fbca:	79fb      	ldrb	r3, [r7, #7]
 800fbcc:	2b09      	cmp	r3, #9
 800fbce:	d002      	beq.n	800fbd6 <isControlChar+0x28>
 800fbd0:	79fb      	ldrb	r3, [r7, #7]
 800fbd2:	2b7f      	cmp	r3, #127	; 0x7f
 800fbd4:	d101      	bne.n	800fbda <isControlChar+0x2c>
 800fbd6:	2301      	movs	r3, #1
 800fbd8:	e000      	b.n	800fbdc <isControlChar+0x2e>
 800fbda:	2300      	movs	r3, #0
 800fbdc:	f003 0301 	and.w	r3, r3, #1
 800fbe0:	b2db      	uxtb	r3, r3
}
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	370c      	adds	r7, #12
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbec:	4770      	bx	lr

0800fbee <isDisplayableChar>:

static bool isDisplayableChar(char c) {
 800fbee:	b480      	push	{r7}
 800fbf0:	b083      	sub	sp, #12
 800fbf2:	af00      	add	r7, sp, #0
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	71fb      	strb	r3, [r7, #7]
    return (c >= 32 && c <= 126);
 800fbf8:	79fb      	ldrb	r3, [r7, #7]
 800fbfa:	2b1f      	cmp	r3, #31
 800fbfc:	d904      	bls.n	800fc08 <isDisplayableChar+0x1a>
 800fbfe:	79fb      	ldrb	r3, [r7, #7]
 800fc00:	2b7e      	cmp	r3, #126	; 0x7e
 800fc02:	d801      	bhi.n	800fc08 <isDisplayableChar+0x1a>
 800fc04:	2301      	movs	r3, #1
 800fc06:	e000      	b.n	800fc0a <isDisplayableChar+0x1c>
 800fc08:	2300      	movs	r3, #0
 800fc0a:	f003 0301 	and.w	r3, r3, #1
 800fc0e:	b2db      	uxtb	r3, r3
}
 800fc10:	4618      	mov	r0, r3
 800fc12:	370c      	adds	r7, #12
 800fc14:	46bd      	mov	sp, r7
 800fc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1a:	4770      	bx	lr

0800fc1c <fifoBufAvailable>:

static uint16_t fifoBufAvailable(FifoBuf *buffer) {
 800fc1c:	b480      	push	{r7}
 800fc1e:	b083      	sub	sp, #12
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
    if (buffer->back >= buffer->front)
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	88da      	ldrh	r2, [r3, #6]
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	889b      	ldrh	r3, [r3, #4]
 800fc2c:	429a      	cmp	r2, r3
 800fc2e:	d306      	bcc.n	800fc3e <fifoBufAvailable+0x22>
        return (uint16_t) (buffer->back - buffer->front);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	88da      	ldrh	r2, [r3, #6]
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	889b      	ldrh	r3, [r3, #4]
 800fc38:	1ad3      	subs	r3, r2, r3
 800fc3a:	b29b      	uxth	r3, r3
 800fc3c:	e009      	b.n	800fc52 <fifoBufAvailable+0x36>
    else
        return (uint16_t) (buffer->size - buffer->front + buffer->back);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	891a      	ldrh	r2, [r3, #8]
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	889b      	ldrh	r3, [r3, #4]
 800fc46:	1ad3      	subs	r3, r2, r3
 800fc48:	b29a      	uxth	r2, r3
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	88db      	ldrh	r3, [r3, #6]
 800fc4e:	4413      	add	r3, r2
 800fc50:	b29b      	uxth	r3, r3
}
 800fc52:	4618      	mov	r0, r3
 800fc54:	370c      	adds	r7, #12
 800fc56:	46bd      	mov	sp, r7
 800fc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5c:	4770      	bx	lr

0800fc5e <fifoBufPop>:

static char fifoBufPop(FifoBuf *buffer) {
 800fc5e:	b480      	push	{r7}
 800fc60:	b085      	sub	sp, #20
 800fc62:	af00      	add	r7, sp, #0
 800fc64:	6078      	str	r0, [r7, #4]
    char a = '\0';
 800fc66:	2300      	movs	r3, #0
 800fc68:	73fb      	strb	r3, [r7, #15]
    if (buffer->front != buffer->back) {
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	889a      	ldrh	r2, [r3, #4]
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	88db      	ldrh	r3, [r3, #6]
 800fc72:	429a      	cmp	r2, r3
 800fc74:	d014      	beq.n	800fca0 <fifoBufPop+0x42>
        a = buffer->buf[buffer->front];
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	687a      	ldr	r2, [r7, #4]
 800fc7c:	8892      	ldrh	r2, [r2, #4]
 800fc7e:	4413      	add	r3, r2
 800fc80:	781b      	ldrb	r3, [r3, #0]
 800fc82:	73fb      	strb	r3, [r7, #15]
        buffer->front = (uint16_t) (buffer->front + 1) % buffer->size;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	889b      	ldrh	r3, [r3, #4]
 800fc88:	3301      	adds	r3, #1
 800fc8a:	b29b      	uxth	r3, r3
 800fc8c:	687a      	ldr	r2, [r7, #4]
 800fc8e:	8912      	ldrh	r2, [r2, #8]
 800fc90:	fbb3 f1f2 	udiv	r1, r3, r2
 800fc94:	fb01 f202 	mul.w	r2, r1, r2
 800fc98:	1a9b      	subs	r3, r3, r2
 800fc9a:	b29a      	uxth	r2, r3
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	809a      	strh	r2, [r3, #4]
    }
    return a;
 800fca0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fca2:	4618      	mov	r0, r3
 800fca4:	3714      	adds	r7, #20
 800fca6:	46bd      	mov	sp, r7
 800fca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcac:	4770      	bx	lr

0800fcae <fifoBufPush>:

static bool fifoBufPush(FifoBuf *buffer, char a) {
 800fcae:	b480      	push	{r7}
 800fcb0:	b085      	sub	sp, #20
 800fcb2:	af00      	add	r7, sp, #0
 800fcb4:	6078      	str	r0, [r7, #4]
 800fcb6:	460b      	mov	r3, r1
 800fcb8:	70fb      	strb	r3, [r7, #3]
    uint16_t newBack = (uint16_t) (buffer->back + 1) % buffer->size;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	88db      	ldrh	r3, [r3, #6]
 800fcbe:	3301      	adds	r3, #1
 800fcc0:	b29b      	uxth	r3, r3
 800fcc2:	687a      	ldr	r2, [r7, #4]
 800fcc4:	8912      	ldrh	r2, [r2, #8]
 800fcc6:	fbb3 f1f2 	udiv	r1, r3, r2
 800fcca:	fb01 f202 	mul.w	r2, r1, r2
 800fcce:	1a9b      	subs	r3, r3, r2
 800fcd0:	81fb      	strh	r3, [r7, #14]
    if (newBack != buffer->front) {
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	889b      	ldrh	r3, [r3, #4]
 800fcd6:	89fa      	ldrh	r2, [r7, #14]
 800fcd8:	429a      	cmp	r2, r3
 800fcda:	d00b      	beq.n	800fcf4 <fifoBufPush+0x46>
        buffer->buf[buffer->back] = a;
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	687a      	ldr	r2, [r7, #4]
 800fce2:	88d2      	ldrh	r2, [r2, #6]
 800fce4:	4413      	add	r3, r2
 800fce6:	78fa      	ldrb	r2, [r7, #3]
 800fce8:	701a      	strb	r2, [r3, #0]
        buffer->back = newBack;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	89fa      	ldrh	r2, [r7, #14]
 800fcee:	80da      	strh	r2, [r3, #6]
        return true;
 800fcf0:	2301      	movs	r3, #1
 800fcf2:	e000      	b.n	800fcf6 <fifoBufPush+0x48>
    }
    return false;
 800fcf4:	2300      	movs	r3, #0
}
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	3714      	adds	r7, #20
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd00:	4770      	bx	lr

0800fd02 <historyPut>:

static bool historyPut(CliHistory *history, const char *str) {
 800fd02:	b580      	push	{r7, lr}
 800fd04:	b088      	sub	sp, #32
 800fd06:	af00      	add	r7, sp, #0
 800fd08:	6078      	str	r0, [r7, #4]
 800fd0a:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 800fd0c:	6838      	ldr	r0, [r7, #0]
 800fd0e:	f7f0 fa71 	bl	80001f4 <strlen>
 800fd12:	61b8      	str	r0, [r7, #24]
    // each item is ended with \0 so, need to have that much space at least
    if (history->bufferSize < len + 1)
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	889b      	ldrh	r3, [r3, #4]
 800fd18:	461a      	mov	r2, r3
 800fd1a:	69bb      	ldr	r3, [r7, #24]
 800fd1c:	3301      	adds	r3, #1
 800fd1e:	429a      	cmp	r2, r3
 800fd20:	d201      	bcs.n	800fd26 <historyPut+0x24>
        return false;
 800fd22:	2300      	movs	r3, #0
 800fd24:	e04d      	b.n	800fdc2 <historyPut+0xc0>

    // remove str from history (if it's present) so we don't get duplicates
    historyRemove(history, str);
 800fd26:	6839      	ldr	r1, [r7, #0]
 800fd28:	6878      	ldr	r0, [r7, #4]
 800fd2a:	f000 f86a 	bl	800fe02 <historyRemove>

    size_t usedSize;
    // remove old items if new one can't fit into buffer
    while (history->itemsCount > 0) {
 800fd2e:	e024      	b.n	800fd7a <historyPut+0x78>
        const char *item = historyGet(history, history->itemsCount);
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	891b      	ldrh	r3, [r3, #8]
 800fd34:	4619      	mov	r1, r3
 800fd36:	6878      	ldr	r0, [r7, #4]
 800fd38:	f000 f847 	bl	800fdca <historyGet>
 800fd3c:	6178      	str	r0, [r7, #20]
        size_t itemLen = strlen(item);
 800fd3e:	6978      	ldr	r0, [r7, #20]
 800fd40:	f7f0 fa58 	bl	80001f4 <strlen>
 800fd44:	6138      	str	r0, [r7, #16]
        usedSize = ((size_t) (item - history->buf)) + itemLen + 1;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	697a      	ldr	r2, [r7, #20]
 800fd4c:	1ad3      	subs	r3, r2, r3
 800fd4e:	461a      	mov	r2, r3
 800fd50:	693b      	ldr	r3, [r7, #16]
 800fd52:	4413      	add	r3, r2
 800fd54:	3301      	adds	r3, #1
 800fd56:	61fb      	str	r3, [r7, #28]

        size_t freeSpace = history->bufferSize - usedSize;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	889b      	ldrh	r3, [r3, #4]
 800fd5c:	461a      	mov	r2, r3
 800fd5e:	69fb      	ldr	r3, [r7, #28]
 800fd60:	1ad3      	subs	r3, r2, r3
 800fd62:	60fb      	str	r3, [r7, #12]

        if (freeSpace >= len + 1)
 800fd64:	69bb      	ldr	r3, [r7, #24]
 800fd66:	3301      	adds	r3, #1
 800fd68:	68fa      	ldr	r2, [r7, #12]
 800fd6a:	429a      	cmp	r2, r3
 800fd6c:	d20a      	bcs.n	800fd84 <historyPut+0x82>
            break;

        // space not enough, remove last element
        --history->itemsCount;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	891b      	ldrh	r3, [r3, #8]
 800fd72:	3b01      	subs	r3, #1
 800fd74:	b29a      	uxth	r2, r3
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	811a      	strh	r2, [r3, #8]
    while (history->itemsCount > 0) {
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	891b      	ldrh	r3, [r3, #8]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d1d6      	bne.n	800fd30 <historyPut+0x2e>
 800fd82:	e000      	b.n	800fd86 <historyPut+0x84>
            break;
 800fd84:	bf00      	nop
    }
    if (history->itemsCount > 0) {
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	891b      	ldrh	r3, [r3, #8]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d00a      	beq.n	800fda4 <historyPut+0xa2>
        // when history not empty, shift elements so new item is first
        memmove(&history->buf[len + 1], history->buf, usedSize);
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	681a      	ldr	r2, [r3, #0]
 800fd92:	69bb      	ldr	r3, [r7, #24]
 800fd94:	3301      	adds	r3, #1
 800fd96:	18d0      	adds	r0, r2, r3
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	69fa      	ldr	r2, [r7, #28]
 800fd9e:	4619      	mov	r1, r3
 800fda0:	f009 fcba 	bl	8019718 <memmove>
    }
    memcpy(history->buf, str, len + 1);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	6818      	ldr	r0, [r3, #0]
 800fda8:	69bb      	ldr	r3, [r7, #24]
 800fdaa:	3301      	adds	r3, #1
 800fdac:	461a      	mov	r2, r3
 800fdae:	6839      	ldr	r1, [r7, #0]
 800fdb0:	f009 fca4 	bl	80196fc <memcpy>
    ++history->itemsCount;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	891b      	ldrh	r3, [r3, #8]
 800fdb8:	3301      	adds	r3, #1
 800fdba:	b29a      	uxth	r2, r3
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	811a      	strh	r2, [r3, #8]

    return true;
 800fdc0:	2301      	movs	r3, #1
}
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	3720      	adds	r7, #32
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bd80      	pop	{r7, pc}

0800fdca <historyGet>:

static const char *historyGet(CliHistory *history, uint16_t item) {
 800fdca:	b580      	push	{r7, lr}
 800fdcc:	b082      	sub	sp, #8
 800fdce:	af00      	add	r7, sp, #0
 800fdd0:	6078      	str	r0, [r7, #4]
 800fdd2:	460b      	mov	r3, r1
 800fdd4:	807b      	strh	r3, [r7, #2]
    if (item == 0 || item > history->itemsCount)
 800fdd6:	887b      	ldrh	r3, [r7, #2]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d004      	beq.n	800fde6 <historyGet+0x1c>
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	891b      	ldrh	r3, [r3, #8]
 800fde0:	887a      	ldrh	r2, [r7, #2]
 800fde2:	429a      	cmp	r2, r3
 800fde4:	d901      	bls.n	800fdea <historyGet+0x20>
        return NULL;
 800fde6:	2300      	movs	r3, #0
 800fde8:	e007      	b.n	800fdfa <historyGet+0x30>

    // items are stored in the same way (separated by \0 and counted from 1),
    // so can use this call
    return embeddedCliGetToken(history->buf, item);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	887a      	ldrh	r2, [r7, #2]
 800fdf0:	4611      	mov	r1, r2
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	f7ff f906 	bl	800f004 <embeddedCliGetToken>
 800fdf8:	4603      	mov	r3, r0
}
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	3708      	adds	r7, #8
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	bd80      	pop	{r7, pc}

0800fe02 <historyRemove>:

static void historyRemove(CliHistory *history, const char *str) {
 800fe02:	b580      	push	{r7, lr}
 800fe04:	b086      	sub	sp, #24
 800fe06:	af00      	add	r7, sp, #0
 800fe08:	6078      	str	r0, [r7, #4]
 800fe0a:	6039      	str	r1, [r7, #0]
    if (str == NULL || history->itemsCount == 0)
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d04c      	beq.n	800feac <historyRemove+0xaa>
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	891b      	ldrh	r3, [r3, #8]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d048      	beq.n	800feac <historyRemove+0xaa>
        return;
    char *item = NULL;
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	617b      	str	r3, [r7, #20]
    uint16_t itemPosition;
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 800fe1e:	2301      	movs	r3, #1
 800fe20:	827b      	strh	r3, [r7, #18]
 800fe22:	e013      	b.n	800fe4c <historyRemove+0x4a>
        // items are stored in the same way (separated by \0 and counted from 1),
        // so can use this call
        item = embeddedCliGetTokenVariable(history->buf, itemPosition);
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	8a7a      	ldrh	r2, [r7, #18]
 800fe2a:	4611      	mov	r1, r2
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f7ff f904 	bl	800f03a <embeddedCliGetTokenVariable>
 800fe32:	6178      	str	r0, [r7, #20]
        if (strcmp(item, str) == 0) {
 800fe34:	6839      	ldr	r1, [r7, #0]
 800fe36:	6978      	ldr	r0, [r7, #20]
 800fe38:	f7f0 f9d2 	bl	80001e0 <strcmp>
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d00a      	beq.n	800fe58 <historyRemove+0x56>
            break;
        }
        item = NULL;
 800fe42:	2300      	movs	r3, #0
 800fe44:	617b      	str	r3, [r7, #20]
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 800fe46:	8a7b      	ldrh	r3, [r7, #18]
 800fe48:	3301      	adds	r3, #1
 800fe4a:	827b      	strh	r3, [r7, #18]
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	891b      	ldrh	r3, [r3, #8]
 800fe50:	8a7a      	ldrh	r2, [r7, #18]
 800fe52:	429a      	cmp	r2, r3
 800fe54:	d9e6      	bls.n	800fe24 <historyRemove+0x22>
 800fe56:	e000      	b.n	800fe5a <historyRemove+0x58>
            break;
 800fe58:	bf00      	nop
    }
    if (item == NULL)
 800fe5a:	697b      	ldr	r3, [r7, #20]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d027      	beq.n	800feb0 <historyRemove+0xae>
        return;

    --history->itemsCount;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	891b      	ldrh	r3, [r3, #8]
 800fe64:	3b01      	subs	r3, #1
 800fe66:	b29a      	uxth	r2, r3
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	811a      	strh	r2, [r3, #8]
    if (itemPosition == (history->itemsCount + 1)) {
 800fe6c:	8a7a      	ldrh	r2, [r7, #18]
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	891b      	ldrh	r3, [r3, #8]
 800fe72:	3301      	adds	r3, #1
 800fe74:	429a      	cmp	r2, r3
 800fe76:	d01d      	beq.n	800feb4 <historyRemove+0xb2>
        // if this is a last element, nothing is remaining to move
        return;
    }

    size_t len = strlen(item);
 800fe78:	6978      	ldr	r0, [r7, #20]
 800fe7a:	f7f0 f9bb 	bl	80001f4 <strlen>
 800fe7e:	60f8      	str	r0, [r7, #12]
    size_t remaining = (size_t) (history->bufferSize - (item + len + 1 - history->buf));
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	889b      	ldrh	r3, [r3, #4]
 800fe84:	4619      	mov	r1, r3
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	3301      	adds	r3, #1
 800fe8a:	697a      	ldr	r2, [r7, #20]
 800fe8c:	441a      	add	r2, r3
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	1ad3      	subs	r3, r2, r3
 800fe94:	1acb      	subs	r3, r1, r3
 800fe96:	60bb      	str	r3, [r7, #8]
    // move everything to the right of found item
    memmove(item, &item[len + 1], remaining);
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	3301      	adds	r3, #1
 800fe9c:	697a      	ldr	r2, [r7, #20]
 800fe9e:	4413      	add	r3, r2
 800fea0:	68ba      	ldr	r2, [r7, #8]
 800fea2:	4619      	mov	r1, r3
 800fea4:	6978      	ldr	r0, [r7, #20]
 800fea6:	f009 fc37 	bl	8019718 <memmove>
 800feaa:	e004      	b.n	800feb6 <historyRemove+0xb4>
        return;
 800feac:	bf00      	nop
 800feae:	e002      	b.n	800feb6 <historyRemove+0xb4>
        return;
 800feb0:	bf00      	nop
 800feb2:	e000      	b.n	800feb6 <historyRemove+0xb4>
        return;
 800feb4:	bf00      	nop
}
 800feb6:	3718      	adds	r7, #24
 800feb8:	46bd      	mov	sp, r7
 800feba:	bd80      	pop	{r7, pc}

0800febc <getTokenPosition>:

static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos) {
 800febc:	b480      	push	{r7}
 800febe:	b085      	sub	sp, #20
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
 800fec4:	460b      	mov	r3, r1
 800fec6:	807b      	strh	r3, [r7, #2]
    if (tokenizedStr == NULL || pos == 0)
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d002      	beq.n	800fed4 <getTokenPosition+0x18>
 800fece:	887b      	ldrh	r3, [r7, #2]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d102      	bne.n	800feda <getTokenPosition+0x1e>
        return CLI_TOKEN_NPOS;
 800fed4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fed8:	e028      	b.n	800ff2c <getTokenPosition+0x70>
    uint16_t i = 0;
 800feda:	2300      	movs	r3, #0
 800fedc:	81fb      	strh	r3, [r7, #14]
    uint16_t tokenCount = 1;
 800fede:	2301      	movs	r3, #1
 800fee0:	81bb      	strh	r3, [r7, #12]
    while (true) {
        if (tokenCount == pos)
 800fee2:	89ba      	ldrh	r2, [r7, #12]
 800fee4:	887b      	ldrh	r3, [r7, #2]
 800fee6:	429a      	cmp	r2, r3
 800fee8:	d013      	beq.n	800ff12 <getTokenPosition+0x56>
            break;

        if (tokenizedStr[i] == '\0') {
 800feea:	89fb      	ldrh	r3, [r7, #14]
 800feec:	687a      	ldr	r2, [r7, #4]
 800feee:	4413      	add	r3, r2
 800fef0:	781b      	ldrb	r3, [r3, #0]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d109      	bne.n	800ff0a <getTokenPosition+0x4e>
            ++tokenCount;
 800fef6:	89bb      	ldrh	r3, [r7, #12]
 800fef8:	3301      	adds	r3, #1
 800fefa:	81bb      	strh	r3, [r7, #12]
            if (tokenizedStr[i + 1] == '\0')
 800fefc:	89fb      	ldrh	r3, [r7, #14]
 800fefe:	3301      	adds	r3, #1
 800ff00:	687a      	ldr	r2, [r7, #4]
 800ff02:	4413      	add	r3, r2
 800ff04:	781b      	ldrb	r3, [r3, #0]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d005      	beq.n	800ff16 <getTokenPosition+0x5a>
                break;
        }

        ++i;
 800ff0a:	89fb      	ldrh	r3, [r7, #14]
 800ff0c:	3301      	adds	r3, #1
 800ff0e:	81fb      	strh	r3, [r7, #14]
        if (tokenCount == pos)
 800ff10:	e7e7      	b.n	800fee2 <getTokenPosition+0x26>
            break;
 800ff12:	bf00      	nop
 800ff14:	e000      	b.n	800ff18 <getTokenPosition+0x5c>
                break;
 800ff16:	bf00      	nop
    }

    if (tokenizedStr[i] != '\0')
 800ff18:	89fb      	ldrh	r3, [r7, #14]
 800ff1a:	687a      	ldr	r2, [r7, #4]
 800ff1c:	4413      	add	r3, r2
 800ff1e:	781b      	ldrb	r3, [r3, #0]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d001      	beq.n	800ff28 <getTokenPosition+0x6c>
        return i;
 800ff24:	89fb      	ldrh	r3, [r7, #14]
 800ff26:	e001      	b.n	800ff2c <getTokenPosition+0x70>
    else
        return CLI_TOKEN_NPOS;
 800ff28:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	3714      	adds	r7, #20
 800ff30:	46bd      	mov	sp, r7
 800ff32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff36:	4770      	bx	lr

0800ff38 <MX_FATFS_Init>:
	retSD = FATFS_UnLinkDriver(SDPath);
}
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ff3c:	4904      	ldr	r1, [pc, #16]	; (800ff50 <MX_FATFS_Init+0x18>)
 800ff3e:	4805      	ldr	r0, [pc, #20]	; (800ff54 <MX_FATFS_Init+0x1c>)
 800ff40:	f007 ff2a 	bl	8017d98 <FATFS_LinkDriver>
 800ff44:	4603      	mov	r3, r0
 800ff46:	461a      	mov	r2, r3
 800ff48:	4b03      	ldr	r3, [pc, #12]	; (800ff58 <MX_FATFS_Init+0x20>)
 800ff4a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ff4c:	bf00      	nop
 800ff4e:	bd80      	pop	{r7, pc}
 800ff50:	200009dc 	.word	0x200009dc
 800ff54:	0801fc20 	.word	0x0801fc20
 800ff58:	200009d8 	.word	0x200009d8

0800ff5c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ff5c:	b480      	push	{r7}
 800ff5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ff60:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ff62:	4618      	mov	r0, r3
 800ff64:	46bd      	mov	sp, r7
 800ff66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6a:	4770      	bx	lr

0800ff6c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b082      	sub	sp, #8
 800ff70:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ff72:	2300      	movs	r3, #0
 800ff74:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ff76:	f000 f86b 	bl	8010050 <BSP_SD_IsDetected>
 800ff7a:	4603      	mov	r3, r0
 800ff7c:	2b01      	cmp	r3, #1
 800ff7e:	d001      	beq.n	800ff84 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800ff80:	2301      	movs	r3, #1
 800ff82:	e005      	b.n	800ff90 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800ff84:	4804      	ldr	r0, [pc, #16]	; (800ff98 <BSP_SD_Init+0x2c>)
 800ff86:	f7f8 f8da 	bl	800813e <HAL_SD_Init>
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800ff8e:	79fb      	ldrb	r3, [r7, #7]
}
 800ff90:	4618      	mov	r0, r3
 800ff92:	3708      	adds	r7, #8
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}
 800ff98:	20000834 	.word	0x20000834

0800ff9c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b088      	sub	sp, #32
 800ffa0:	af02      	add	r7, sp, #8
 800ffa2:	60f8      	str	r0, [r7, #12]
 800ffa4:	60b9      	str	r1, [r7, #8]
 800ffa6:	607a      	str	r2, [r7, #4]
 800ffa8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ffaa:	2300      	movs	r3, #0
 800ffac:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ffae:	683b      	ldr	r3, [r7, #0]
 800ffb0:	9300      	str	r3, [sp, #0]
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	68ba      	ldr	r2, [r7, #8]
 800ffb6:	68f9      	ldr	r1, [r7, #12]
 800ffb8:	4806      	ldr	r0, [pc, #24]	; (800ffd4 <BSP_SD_ReadBlocks+0x38>)
 800ffba:	f7f8 f971 	bl	80082a0 <HAL_SD_ReadBlocks>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d001      	beq.n	800ffc8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ffc4:	2301      	movs	r3, #1
 800ffc6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ffc8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffca:	4618      	mov	r0, r3
 800ffcc:	3718      	adds	r7, #24
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bd80      	pop	{r7, pc}
 800ffd2:	bf00      	nop
 800ffd4:	20000834 	.word	0x20000834

0800ffd8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b088      	sub	sp, #32
 800ffdc:	af02      	add	r7, sp, #8
 800ffde:	60f8      	str	r0, [r7, #12]
 800ffe0:	60b9      	str	r1, [r7, #8]
 800ffe2:	607a      	str	r2, [r7, #4]
 800ffe4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ffea:	683b      	ldr	r3, [r7, #0]
 800ffec:	9300      	str	r3, [sp, #0]
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	68ba      	ldr	r2, [r7, #8]
 800fff2:	68f9      	ldr	r1, [r7, #12]
 800fff4:	4806      	ldr	r0, [pc, #24]	; (8010010 <BSP_SD_WriteBlocks+0x38>)
 800fff6:	f7f8 fb31 	bl	800865c <HAL_SD_WriteBlocks>
 800fffa:	4603      	mov	r3, r0
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d001      	beq.n	8010004 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8010000:	2301      	movs	r3, #1
 8010002:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010004:	7dfb      	ldrb	r3, [r7, #23]
}
 8010006:	4618      	mov	r0, r3
 8010008:	3718      	adds	r7, #24
 801000a:	46bd      	mov	sp, r7
 801000c:	bd80      	pop	{r7, pc}
 801000e:	bf00      	nop
 8010010:	20000834 	.word	0x20000834

08010014 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010018:	4805      	ldr	r0, [pc, #20]	; (8010030 <BSP_SD_GetCardState+0x1c>)
 801001a:	f7f8 fe75 	bl	8008d08 <HAL_SD_GetCardState>
 801001e:	4603      	mov	r3, r0
 8010020:	2b04      	cmp	r3, #4
 8010022:	bf14      	ite	ne
 8010024:	2301      	movne	r3, #1
 8010026:	2300      	moveq	r3, #0
 8010028:	b2db      	uxtb	r3, r3
}
 801002a:	4618      	mov	r0, r3
 801002c:	bd80      	pop	{r7, pc}
 801002e:	bf00      	nop
 8010030:	20000834 	.word	0x20000834

08010034 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b082      	sub	sp, #8
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 801003c:	6879      	ldr	r1, [r7, #4]
 801003e:	4803      	ldr	r0, [pc, #12]	; (801004c <BSP_SD_GetCardInfo+0x18>)
 8010040:	f7f8 fe36 	bl	8008cb0 <HAL_SD_GetCardInfo>
}
 8010044:	bf00      	nop
 8010046:	3708      	adds	r7, #8
 8010048:	46bd      	mov	sp, r7
 801004a:	bd80      	pop	{r7, pc}
 801004c:	20000834 	.word	0x20000834

08010050 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010050:	b480      	push	{r7}
 8010052:	b083      	sub	sp, #12
 8010054:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010056:	2301      	movs	r3, #1
 8010058:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 801005a:	79fb      	ldrb	r3, [r7, #7]
 801005c:	b2db      	uxtb	r3, r3
}
 801005e:	4618      	mov	r0, r3
 8010060:	370c      	adds	r7, #12
 8010062:	46bd      	mov	sp, r7
 8010064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010068:	4770      	bx	lr
	...

0801006c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801006c:	b580      	push	{r7, lr}
 801006e:	b082      	sub	sp, #8
 8010070:	af00      	add	r7, sp, #0
 8010072:	4603      	mov	r3, r0
 8010074:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010076:	4b0b      	ldr	r3, [pc, #44]	; (80100a4 <SD_CheckStatus+0x38>)
 8010078:	2201      	movs	r2, #1
 801007a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801007c:	f7ff ffca 	bl	8010014 <BSP_SD_GetCardState>
 8010080:	4603      	mov	r3, r0
 8010082:	2b00      	cmp	r3, #0
 8010084:	d107      	bne.n	8010096 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010086:	4b07      	ldr	r3, [pc, #28]	; (80100a4 <SD_CheckStatus+0x38>)
 8010088:	781b      	ldrb	r3, [r3, #0]
 801008a:	b2db      	uxtb	r3, r3
 801008c:	f023 0301 	bic.w	r3, r3, #1
 8010090:	b2da      	uxtb	r2, r3
 8010092:	4b04      	ldr	r3, [pc, #16]	; (80100a4 <SD_CheckStatus+0x38>)
 8010094:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010096:	4b03      	ldr	r3, [pc, #12]	; (80100a4 <SD_CheckStatus+0x38>)
 8010098:	781b      	ldrb	r3, [r3, #0]
 801009a:	b2db      	uxtb	r3, r3
}
 801009c:	4618      	mov	r0, r3
 801009e:	3708      	adds	r7, #8
 80100a0:	46bd      	mov	sp, r7
 80100a2:	bd80      	pop	{r7, pc}
 80100a4:	20000024 	.word	0x20000024

080100a8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b082      	sub	sp, #8
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	4603      	mov	r3, r0
 80100b0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80100b2:	4b0b      	ldr	r3, [pc, #44]	; (80100e0 <SD_initialize+0x38>)
 80100b4:	2201      	movs	r2, #1
 80100b6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80100b8:	f7ff ff58 	bl	800ff6c <BSP_SD_Init>
 80100bc:	4603      	mov	r3, r0
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d107      	bne.n	80100d2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80100c2:	79fb      	ldrb	r3, [r7, #7]
 80100c4:	4618      	mov	r0, r3
 80100c6:	f7ff ffd1 	bl	801006c <SD_CheckStatus>
 80100ca:	4603      	mov	r3, r0
 80100cc:	461a      	mov	r2, r3
 80100ce:	4b04      	ldr	r3, [pc, #16]	; (80100e0 <SD_initialize+0x38>)
 80100d0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80100d2:	4b03      	ldr	r3, [pc, #12]	; (80100e0 <SD_initialize+0x38>)
 80100d4:	781b      	ldrb	r3, [r3, #0]
 80100d6:	b2db      	uxtb	r3, r3
}
 80100d8:	4618      	mov	r0, r3
 80100da:	3708      	adds	r7, #8
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}
 80100e0:	20000024 	.word	0x20000024

080100e4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b082      	sub	sp, #8
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	4603      	mov	r3, r0
 80100ec:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80100ee:	79fb      	ldrb	r3, [r7, #7]
 80100f0:	4618      	mov	r0, r3
 80100f2:	f7ff ffbb 	bl	801006c <SD_CheckStatus>
 80100f6:	4603      	mov	r3, r0
}
 80100f8:	4618      	mov	r0, r3
 80100fa:	3708      	adds	r7, #8
 80100fc:	46bd      	mov	sp, r7
 80100fe:	bd80      	pop	{r7, pc}

08010100 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b086      	sub	sp, #24
 8010104:	af00      	add	r7, sp, #0
 8010106:	60b9      	str	r1, [r7, #8]
 8010108:	607a      	str	r2, [r7, #4]
 801010a:	603b      	str	r3, [r7, #0]
 801010c:	4603      	mov	r3, r0
 801010e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010110:	2301      	movs	r3, #1
 8010112:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8010114:	f04f 33ff 	mov.w	r3, #4294967295
 8010118:	683a      	ldr	r2, [r7, #0]
 801011a:	6879      	ldr	r1, [r7, #4]
 801011c:	68b8      	ldr	r0, [r7, #8]
 801011e:	f7ff ff3d 	bl	800ff9c <BSP_SD_ReadBlocks>
 8010122:	4603      	mov	r3, r0
 8010124:	2b00      	cmp	r3, #0
 8010126:	d107      	bne.n	8010138 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8010128:	bf00      	nop
 801012a:	f7ff ff73 	bl	8010014 <BSP_SD_GetCardState>
 801012e:	4603      	mov	r3, r0
 8010130:	2b00      	cmp	r3, #0
 8010132:	d1fa      	bne.n	801012a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8010134:	2300      	movs	r3, #0
 8010136:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8010138:	7dfb      	ldrb	r3, [r7, #23]
}
 801013a:	4618      	mov	r0, r3
 801013c:	3718      	adds	r7, #24
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}

08010142 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010142:	b580      	push	{r7, lr}
 8010144:	b086      	sub	sp, #24
 8010146:	af00      	add	r7, sp, #0
 8010148:	60b9      	str	r1, [r7, #8]
 801014a:	607a      	str	r2, [r7, #4]
 801014c:	603b      	str	r3, [r7, #0]
 801014e:	4603      	mov	r3, r0
 8010150:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010152:	2301      	movs	r3, #1
 8010154:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8010156:	f04f 33ff 	mov.w	r3, #4294967295
 801015a:	683a      	ldr	r2, [r7, #0]
 801015c:	6879      	ldr	r1, [r7, #4]
 801015e:	68b8      	ldr	r0, [r7, #8]
 8010160:	f7ff ff3a 	bl	800ffd8 <BSP_SD_WriteBlocks>
 8010164:	4603      	mov	r3, r0
 8010166:	2b00      	cmp	r3, #0
 8010168:	d107      	bne.n	801017a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 801016a:	bf00      	nop
 801016c:	f7ff ff52 	bl	8010014 <BSP_SD_GetCardState>
 8010170:	4603      	mov	r3, r0
 8010172:	2b00      	cmp	r3, #0
 8010174:	d1fa      	bne.n	801016c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8010176:	2300      	movs	r3, #0
 8010178:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 801017a:	7dfb      	ldrb	r3, [r7, #23]
}
 801017c:	4618      	mov	r0, r3
 801017e:	3718      	adds	r7, #24
 8010180:	46bd      	mov	sp, r7
 8010182:	bd80      	pop	{r7, pc}

08010184 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010184:	b580      	push	{r7, lr}
 8010186:	b08c      	sub	sp, #48	; 0x30
 8010188:	af00      	add	r7, sp, #0
 801018a:	4603      	mov	r3, r0
 801018c:	603a      	str	r2, [r7, #0]
 801018e:	71fb      	strb	r3, [r7, #7]
 8010190:	460b      	mov	r3, r1
 8010192:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010194:	2301      	movs	r3, #1
 8010196:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801019a:	4b25      	ldr	r3, [pc, #148]	; (8010230 <SD_ioctl+0xac>)
 801019c:	781b      	ldrb	r3, [r3, #0]
 801019e:	b2db      	uxtb	r3, r3
 80101a0:	f003 0301 	and.w	r3, r3, #1
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d001      	beq.n	80101ac <SD_ioctl+0x28>
 80101a8:	2303      	movs	r3, #3
 80101aa:	e03c      	b.n	8010226 <SD_ioctl+0xa2>

  switch (cmd)
 80101ac:	79bb      	ldrb	r3, [r7, #6]
 80101ae:	2b03      	cmp	r3, #3
 80101b0:	d834      	bhi.n	801021c <SD_ioctl+0x98>
 80101b2:	a201      	add	r2, pc, #4	; (adr r2, 80101b8 <SD_ioctl+0x34>)
 80101b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101b8:	080101c9 	.word	0x080101c9
 80101bc:	080101d1 	.word	0x080101d1
 80101c0:	080101e9 	.word	0x080101e9
 80101c4:	08010203 	.word	0x08010203
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80101c8:	2300      	movs	r3, #0
 80101ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80101ce:	e028      	b.n	8010222 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80101d0:	f107 030c 	add.w	r3, r7, #12
 80101d4:	4618      	mov	r0, r3
 80101d6:	f7ff ff2d 	bl	8010034 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80101da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80101e0:	2300      	movs	r3, #0
 80101e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80101e6:	e01c      	b.n	8010222 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80101e8:	f107 030c 	add.w	r3, r7, #12
 80101ec:	4618      	mov	r0, r3
 80101ee:	f7ff ff21 	bl	8010034 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80101f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101f4:	b29a      	uxth	r2, r3
 80101f6:	683b      	ldr	r3, [r7, #0]
 80101f8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80101fa:	2300      	movs	r3, #0
 80101fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010200:	e00f      	b.n	8010222 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010202:	f107 030c 	add.w	r3, r7, #12
 8010206:	4618      	mov	r0, r3
 8010208:	f7ff ff14 	bl	8010034 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801020c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801020e:	0a5a      	lsrs	r2, r3, #9
 8010210:	683b      	ldr	r3, [r7, #0]
 8010212:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010214:	2300      	movs	r3, #0
 8010216:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801021a:	e002      	b.n	8010222 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801021c:	2304      	movs	r3, #4
 801021e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8010222:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010226:	4618      	mov	r0, r3
 8010228:	3730      	adds	r7, #48	; 0x30
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}
 801022e:	bf00      	nop
 8010230:	20000024 	.word	0x20000024

08010234 <RtcInt>:
#include "Utils.h"

uint8_t set_alarm_Time = 1;

void RtcInt()
{
 8010234:	b480      	push	{r7}
 8010236:	af00      	add	r7, sp, #0

	set_alarm_Time = 1;
 8010238:	4b03      	ldr	r3, [pc, #12]	; (8010248 <RtcInt+0x14>)
 801023a:	2201      	movs	r2, #1
 801023c:	701a      	strb	r2, [r3, #0]
	//Rtc_set_alarm();
}
 801023e:	bf00      	nop
 8010240:	46bd      	mov	sp, r7
 8010242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010246:	4770      	bx	lr
 8010248:	20000025 	.word	0x20000025

0801024c <Set_Date>:

void Set_Date(char *Datebuffer) {
 801024c:	b580      	push	{r7, lr}
 801024e:	b088      	sub	sp, #32
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]

	RTC_DateTypeDef sDate;
	uint8_t date[10];
	uint8_t flag;
	flag = Parse_Date(Datebuffer, date);
 8010254:	f107 030c 	add.w	r3, r7, #12
 8010258:	4619      	mov	r1, r3
 801025a:	6878      	ldr	r0, [r7, #4]
 801025c:	f000 f8c6 	bl	80103ec <Parse_Date>
 8010260:	4603      	mov	r3, r0
 8010262:	77fb      	strb	r3, [r7, #31]

	if (!flag) {
 8010264:	7ffb      	ldrb	r3, [r7, #31]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d10c      	bne.n	8010284 <Set_Date+0x38>
		sDate.Date = date[0];
 801026a:	7b3b      	ldrb	r3, [r7, #12]
 801026c:	76bb      	strb	r3, [r7, #26]
		sDate.Month = date[1];
 801026e:	7b7b      	ldrb	r3, [r7, #13]
 8010270:	767b      	strb	r3, [r7, #25]
		sDate.Year = date[2];
 8010272:	7bbb      	ldrb	r3, [r7, #14]
 8010274:	76fb      	strb	r3, [r7, #27]
		HAL_RTC_SetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8010276:	f107 0318 	add.w	r3, r7, #24
 801027a:	2200      	movs	r2, #0
 801027c:	4619      	mov	r1, r3
 801027e:	4805      	ldr	r0, [pc, #20]	; (8010294 <Set_Date+0x48>)
 8010280:	f7f7 fc3a 	bl	8007af8 <HAL_RTC_SetDate>
	}
HAL_Delay(500);
 8010284:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8010288:	f7f2 fd04 	bl	8002c94 <HAL_Delay>
}
 801028c:	bf00      	nop
 801028e:	3720      	adds	r7, #32
 8010290:	46bd      	mov	sp, r7
 8010292:	bd80      	pop	{r7, pc}
 8010294:	20000814 	.word	0x20000814

08010298 <Rtc_set_alarm>:

/*
 * this sets alarm according to saved intervals
 */
void Rtc_set_alarm()
{
 8010298:	b580      	push	{r7, lr}
 801029a:	b092      	sub	sp, #72	; 0x48
 801029c:	af00      	add	r7, sp, #0
uint16_t minute;



if(set_alarm_Time)
 801029e:	4b37      	ldr	r3, [pc, #220]	; (801037c <Rtc_set_alarm+0xe4>)
 80102a0:	781b      	ldrb	r3, [r3, #0]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d066      	beq.n	8010374 <Rtc_set_alarm+0xdc>
{
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 80102a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80102aa:	2200      	movs	r2, #0
 80102ac:	4619      	mov	r1, r3
 80102ae:	4834      	ldr	r0, [pc, #208]	; (8010380 <Rtc_set_alarm+0xe8>)
 80102b0:	f7f7 fbc4 	bl	8007a3c <HAL_RTC_GetTime>
	RTC_DateTypeDef sDate;
    HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 80102b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80102b8:	2200      	movs	r2, #0
 80102ba:	4619      	mov	r1, r3
 80102bc:	4830      	ldr	r0, [pc, #192]	; (8010380 <Rtc_set_alarm+0xe8>)
 80102be:	f7f7 fc9f 	bl	8007c00 <HAL_RTC_GetDate>


    minute = gTime.Minutes + _Flash_Packet.Time_Interval;
 80102c2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80102c6:	b29a      	uxth	r2, r3
 80102c8:	4b2e      	ldr	r3, [pc, #184]	; (8010384 <Rtc_set_alarm+0xec>)
 80102ca:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80102ce:	b29b      	uxth	r3, r3
 80102d0:	4413      	add	r3, r2
 80102d2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    if(minute > 59)
 80102d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80102da:	2b3b      	cmp	r3, #59	; 0x3b
 80102dc:	d90b      	bls.n	80102f6 <Rtc_set_alarm+0x5e>
    {
    	minute = minute%_Flash_Packet.Time_Interval;
 80102de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80102e2:	4a28      	ldr	r2, [pc, #160]	; (8010384 <Rtc_set_alarm+0xec>)
 80102e4:	f8d2 20c8 	ldr.w	r2, [r2, #200]	; 0xc8
 80102e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80102ec:	fb01 f202 	mul.w	r2, r1, r2
 80102f0:	1a9b      	subs	r3, r3, r2
 80102f2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    }
      RTC_AlarmTypeDef sAlarm = {0};
 80102f6:	1d3b      	adds	r3, r7, #4
 80102f8:	2228      	movs	r2, #40	; 0x28
 80102fa:	2100      	movs	r1, #0
 80102fc:	4618      	mov	r0, r3
 80102fe:	f009 fa25 	bl	801974c <memset>
	  sAlarm.AlarmTime.Hours = 0;
 8010302:	2300      	movs	r3, #0
 8010304:	713b      	strb	r3, [r7, #4]
	  sAlarm.AlarmTime.Minutes = minute;
 8010306:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801030a:	b2db      	uxtb	r3, r3
 801030c:	717b      	strb	r3, [r7, #5]
	  sAlarm.AlarmTime.Seconds = 0;
 801030e:	2300      	movs	r3, #0
 8010310:	71bb      	strb	r3, [r7, #6]
	  sAlarm.AlarmTime.SubSeconds = 0;
 8010312:	2300      	movs	r3, #0
 8010314:	60bb      	str	r3, [r7, #8]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8010316:	2300      	movs	r3, #0
 8010318:	613b      	str	r3, [r7, #16]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801031a:	2300      	movs	r3, #0
 801031c:	617b      	str	r3, [r7, #20]
	  sAlarm.AlarmMask = RTC_ALARMMASK_SECONDS| RTC_ALARMMASK_HOURS | RTC_ALARMMASK_DATEWEEKDAY;
 801031e:	4b1a      	ldr	r3, [pc, #104]	; (8010388 <Rtc_set_alarm+0xf0>)
 8010320:	61bb      	str	r3, [r7, #24]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8010322:	2300      	movs	r3, #0
 8010324:	61fb      	str	r3, [r7, #28]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8010326:	2300      	movs	r3, #0
 8010328:	623b      	str	r3, [r7, #32]
	  sAlarm.AlarmDateWeekDay = 1;
 801032a:	2301      	movs	r3, #1
 801032c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	  sAlarm.Alarm = RTC_ALARM_A;
 8010330:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010334:	62bb      	str	r3, [r7, #40]	; 0x28
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8010336:	1d3b      	adds	r3, r7, #4
 8010338:	2200      	movs	r2, #0
 801033a:	4619      	mov	r1, r3
 801033c:	4810      	ldr	r0, [pc, #64]	; (8010380 <Rtc_set_alarm+0xe8>)
 801033e:	f7f7 fcaf 	bl	8007ca0 <HAL_RTC_SetAlarm_IT>
 8010342:	4603      	mov	r3, r0
 8010344:	2b00      	cmp	r3, #0
 8010346:	d001      	beq.n	801034c <Rtc_set_alarm+0xb4>
	  {
	    Error_Handler();
 8010348:	f7f2 f828 	bl	800239c <Error_Handler>
	  }

	  __HAL_RTC_ALARM_ENABLE_IT (&hrtc, RTC_IT_ALRA);
 801034c:	4b0c      	ldr	r3, [pc, #48]	; (8010380 <Rtc_set_alarm+0xe8>)
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	689a      	ldr	r2, [r3, #8]
 8010352:	4b0b      	ldr	r3, [pc, #44]	; (8010380 <Rtc_set_alarm+0xe8>)
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801035a:	609a      	str	r2, [r3, #8]
	  __HAL_RTC_ALARM_CLEAR_FLAG (&hrtc, RTC_IT_ALRA);
 801035c:	4b08      	ldr	r3, [pc, #32]	; (8010380 <Rtc_set_alarm+0xe8>)
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	68db      	ldr	r3, [r3, #12]
 8010362:	b2da      	uxtb	r2, r3
 8010364:	4b06      	ldr	r3, [pc, #24]	; (8010380 <Rtc_set_alarm+0xe8>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	f462 5284 	orn	r2, r2, #4224	; 0x1080
 801036c:	60da      	str	r2, [r3, #12]


	  set_alarm_Time = 0;
 801036e:	4b03      	ldr	r3, [pc, #12]	; (801037c <Rtc_set_alarm+0xe4>)
 8010370:	2200      	movs	r2, #0
 8010372:	701a      	strb	r2, [r3, #0]

		//HAL_UART_Transmit(&huart1, (uint8_t*) "Interrupt\r\n",11, 1000);
}

}
 8010374:	bf00      	nop
 8010376:	3748      	adds	r7, #72	; 0x48
 8010378:	46bd      	mov	sp, r7
 801037a:	bd80      	pop	{r7, pc}
 801037c:	20000025 	.word	0x20000025
 8010380:	20000814 	.word	0x20000814
 8010384:	20000330 	.word	0x20000330
 8010388:	80800080 	.word	0x80800080

0801038c <Set_Time>:
void Set_Time(char *Timebuffer) {
 801038c:	b580      	push	{r7, lr}
 801038e:	b08c      	sub	sp, #48	; 0x30
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime;
	uint8_t time[10];
	uint8_t flag;
	flag = Parse_Time(Timebuffer, time);
 8010394:	f107 030c 	add.w	r3, r7, #12
 8010398:	4619      	mov	r1, r3
 801039a:	6878      	ldr	r0, [r7, #4]
 801039c:	f000 f890 	bl	80104c0 <Parse_Time>
 80103a0:	4603      	mov	r3, r0
 80103a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	HAL_StatusTypeDef status;
	if (!flag) {
 80103a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d113      	bne.n	80103d6 <Set_Time+0x4a>
		sTime.Hours = time[0];
 80103ae:	7b3b      	ldrb	r3, [r7, #12]
 80103b0:	763b      	strb	r3, [r7, #24]
		sTime.Minutes = time[1];
 80103b2:	7b7b      	ldrb	r3, [r7, #13]
 80103b4:	767b      	strb	r3, [r7, #25]
		sTime.Seconds = time[2];
 80103b6:	7bbb      	ldrb	r3, [r7, #14]
 80103b8:	76bb      	strb	r3, [r7, #26]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80103ba:	2300      	movs	r3, #0
 80103bc:	627b      	str	r3, [r7, #36]	; 0x24
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80103be:	2300      	movs	r3, #0
 80103c0:	62bb      	str	r3, [r7, #40]	; 0x28
		status = HAL_RTC_SetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 80103c2:	f107 0318 	add.w	r3, r7, #24
 80103c6:	2200      	movs	r2, #0
 80103c8:	4619      	mov	r1, r3
 80103ca:	4807      	ldr	r0, [pc, #28]	; (80103e8 <Set_Time+0x5c>)
 80103cc:	f7f7 fa9c 	bl	8007908 <HAL_RTC_SetTime>
 80103d0:	4603      	mov	r3, r0
 80103d2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	}

	HAL_Delay(500);
 80103d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80103da:	f7f2 fc5b 	bl	8002c94 <HAL_Delay>

}
 80103de:	bf00      	nop
 80103e0:	3730      	adds	r7, #48	; 0x30
 80103e2:	46bd      	mov	sp, r7
 80103e4:	bd80      	pop	{r7, pc}
 80103e6:	bf00      	nop
 80103e8:	20000814 	.word	0x20000814

080103ec <Parse_Date>:
 * therefore delimiter is ':'
 * we will extract date and save them in there respective variable
 * return 1 = buffer empty 0 = success
 */
uint8_t Parse_Date(char *Datebuffer,uint8_t *date)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b084      	sub	sp, #16
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
 80103f4:	6039      	str	r1, [r7, #0]
	uint16_t i =0;
 80103f6:	2300      	movs	r3, #0
 80103f8:	81fb      	strh	r3, [r7, #14]
	int16_t val = 0;
 80103fa:	2300      	movs	r3, #0
 80103fc:	81bb      	strh	r3, [r7, #12]
	char *ptr = strtok(Datebuffer, ":");
 80103fe:	492e      	ldr	r1, [pc, #184]	; (80104b8 <Parse_Date+0xcc>)
 8010400:	6878      	ldr	r0, [r7, #4]
 8010402:	f00b f81d 	bl	801b440 <strtok>
 8010406:	60b8      	str	r0, [r7, #8]

	if(ptr == NULL)
 8010408:	68bb      	ldr	r3, [r7, #8]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d14b      	bne.n	80104a6 <Parse_Date+0xba>
		{
			return 1;
 801040e:	2301      	movs	r3, #1
 8010410:	e04d      	b.n	80104ae <Parse_Date+0xc2>

	while(ptr != NULL)
	{


			val = atoi(ptr);
 8010412:	68b8      	ldr	r0, [r7, #8]
 8010414:	f009 f8c2 	bl	801959c <atoi>
 8010418:	4603      	mov	r3, r0
 801041a:	81bb      	strh	r3, [r7, #12]
			if(i == 0 && (val > 31 || val <=0))
 801041c:	89fb      	ldrh	r3, [r7, #14]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d10a      	bne.n	8010438 <Parse_Date+0x4c>
 8010422:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8010426:	2b1f      	cmp	r3, #31
 8010428:	dc03      	bgt.n	8010432 <Parse_Date+0x46>
 801042a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801042e:	2b00      	cmp	r3, #0
 8010430:	dc02      	bgt.n	8010438 <Parse_Date+0x4c>
			{
				val= 1;
 8010432:	2301      	movs	r3, #1
 8010434:	81bb      	strh	r3, [r7, #12]
 8010436:	e028      	b.n	801048a <Parse_Date+0x9e>
			}
			else if(i == 1 && (val >  12 || val <=0))
 8010438:	89fb      	ldrh	r3, [r7, #14]
 801043a:	2b01      	cmp	r3, #1
 801043c:	d10a      	bne.n	8010454 <Parse_Date+0x68>
 801043e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8010442:	2b0c      	cmp	r3, #12
 8010444:	dc03      	bgt.n	801044e <Parse_Date+0x62>
 8010446:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801044a:	2b00      	cmp	r3, #0
 801044c:	dc02      	bgt.n	8010454 <Parse_Date+0x68>
			{
				val= 1;
 801044e:	2301      	movs	r3, #1
 8010450:	81bb      	strh	r3, [r7, #12]
 8010452:	e01a      	b.n	801048a <Parse_Date+0x9e>
			}
			else if(i == 2 && val > 1000)
 8010454:	89fb      	ldrh	r3, [r7, #14]
 8010456:	2b02      	cmp	r3, #2
 8010458:	d112      	bne.n	8010480 <Parse_Date+0x94>
 801045a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801045e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010462:	dd0d      	ble.n	8010480 <Parse_Date+0x94>
			{
				val=val%100;
 8010464:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8010468:	4a14      	ldr	r2, [pc, #80]	; (80104bc <Parse_Date+0xd0>)
 801046a:	fb82 1203 	smull	r1, r2, r2, r3
 801046e:	1151      	asrs	r1, r2, #5
 8010470:	17da      	asrs	r2, r3, #31
 8010472:	1a8a      	subs	r2, r1, r2
 8010474:	2164      	movs	r1, #100	; 0x64
 8010476:	fb01 f202 	mul.w	r2, r1, r2
 801047a:	1a9b      	subs	r3, r3, r2
 801047c:	81bb      	strh	r3, [r7, #12]
 801047e:	e004      	b.n	801048a <Parse_Date+0x9e>
			}
			else if(i > 2)
 8010480:	89fb      	ldrh	r3, [r7, #14]
 8010482:	2b02      	cmp	r3, #2
 8010484:	d901      	bls.n	801048a <Parse_Date+0x9e>
			{
				return 1;
 8010486:	2301      	movs	r3, #1
 8010488:	e011      	b.n	80104ae <Parse_Date+0xc2>
			}


		   date[i] =val;
 801048a:	89fb      	ldrh	r3, [r7, #14]
 801048c:	683a      	ldr	r2, [r7, #0]
 801048e:	4413      	add	r3, r2
 8010490:	89ba      	ldrh	r2, [r7, #12]
 8010492:	b2d2      	uxtb	r2, r2
 8010494:	701a      	strb	r2, [r3, #0]
		//printf("'%s'\n", ptr);
		ptr = strtok(NULL, ":");
 8010496:	4908      	ldr	r1, [pc, #32]	; (80104b8 <Parse_Date+0xcc>)
 8010498:	2000      	movs	r0, #0
 801049a:	f00a ffd1 	bl	801b440 <strtok>
 801049e:	60b8      	str	r0, [r7, #8]
		i++;
 80104a0:	89fb      	ldrh	r3, [r7, #14]
 80104a2:	3301      	adds	r3, #1
 80104a4:	81fb      	strh	r3, [r7, #14]
	while(ptr != NULL)
 80104a6:	68bb      	ldr	r3, [r7, #8]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d1b2      	bne.n	8010412 <Parse_Date+0x26>
	}

	}

	return 0;
 80104ac:	2300      	movs	r3, #0

}
 80104ae:	4618      	mov	r0, r3
 80104b0:	3710      	adds	r7, #16
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd80      	pop	{r7, pc}
 80104b6:	bf00      	nop
 80104b8:	0801f3e8 	.word	0x0801f3e8
 80104bc:	51eb851f 	.word	0x51eb851f

080104c0 <Parse_Time>:
 * therefore delimiter is ':'
 * we will extract time and save them in there respective variable
 * return 1 = buffer empty 0 = success
 */
uint8_t Parse_Time(char *Timebuffer,uint8_t *time)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b084      	sub	sp, #16
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
 80104c8:	6039      	str	r1, [r7, #0]
	uint16_t i =0;
 80104ca:	2300      	movs	r3, #0
 80104cc:	81fb      	strh	r3, [r7, #14]
		int16_t val = 0;
 80104ce:	2300      	movs	r3, #0
 80104d0:	81bb      	strh	r3, [r7, #12]
		char *ptr = strtok(Timebuffer, ":");
 80104d2:	492a      	ldr	r1, [pc, #168]	; (801057c <Parse_Time+0xbc>)
 80104d4:	6878      	ldr	r0, [r7, #4]
 80104d6:	f00a ffb3 	bl	801b440 <strtok>
 80104da:	60b8      	str	r0, [r7, #8]

		if(ptr == NULL)
 80104dc:	68bb      	ldr	r3, [r7, #8]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d143      	bne.n	801056a <Parse_Time+0xaa>
			{
				return 1;
 80104e2:	2301      	movs	r3, #1
 80104e4:	e045      	b.n	8010572 <Parse_Time+0xb2>

		while(ptr != NULL)
		{


				val = atoi(ptr);
 80104e6:	68b8      	ldr	r0, [r7, #8]
 80104e8:	f009 f858 	bl	801959c <atoi>
 80104ec:	4603      	mov	r3, r0
 80104ee:	81bb      	strh	r3, [r7, #12]
				if(i == 0 && (val > 24|| val <0))
 80104f0:	89fb      	ldrh	r3, [r7, #14]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d10a      	bne.n	801050c <Parse_Time+0x4c>
 80104f6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80104fa:	2b18      	cmp	r3, #24
 80104fc:	dc03      	bgt.n	8010506 <Parse_Time+0x46>
 80104fe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8010502:	2b00      	cmp	r3, #0
 8010504:	da02      	bge.n	801050c <Parse_Time+0x4c>
				{
					val= 24;
 8010506:	2318      	movs	r3, #24
 8010508:	81bb      	strh	r3, [r7, #12]
 801050a:	e020      	b.n	801054e <Parse_Time+0x8e>
				}
				else if(i == 1 && (val >  59 || val <0))
 801050c:	89fb      	ldrh	r3, [r7, #14]
 801050e:	2b01      	cmp	r3, #1
 8010510:	d10a      	bne.n	8010528 <Parse_Time+0x68>
 8010512:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8010516:	2b3b      	cmp	r3, #59	; 0x3b
 8010518:	dc03      	bgt.n	8010522 <Parse_Time+0x62>
 801051a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801051e:	2b00      	cmp	r3, #0
 8010520:	da02      	bge.n	8010528 <Parse_Time+0x68>
				{
					val= 59;
 8010522:	233b      	movs	r3, #59	; 0x3b
 8010524:	81bb      	strh	r3, [r7, #12]
 8010526:	e012      	b.n	801054e <Parse_Time+0x8e>
				}
				else if(i == 2 && (val > 59 || val <0))
 8010528:	89fb      	ldrh	r3, [r7, #14]
 801052a:	2b02      	cmp	r3, #2
 801052c:	d10a      	bne.n	8010544 <Parse_Time+0x84>
 801052e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8010532:	2b3b      	cmp	r3, #59	; 0x3b
 8010534:	dc03      	bgt.n	801053e <Parse_Time+0x7e>
 8010536:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801053a:	2b00      	cmp	r3, #0
 801053c:	da02      	bge.n	8010544 <Parse_Time+0x84>
				{
					val=59;
 801053e:	233b      	movs	r3, #59	; 0x3b
 8010540:	81bb      	strh	r3, [r7, #12]
 8010542:	e004      	b.n	801054e <Parse_Time+0x8e>
				}
				else if(i > 2)
 8010544:	89fb      	ldrh	r3, [r7, #14]
 8010546:	2b02      	cmp	r3, #2
 8010548:	d901      	bls.n	801054e <Parse_Time+0x8e>
				{
					return 1;
 801054a:	2301      	movs	r3, #1
 801054c:	e011      	b.n	8010572 <Parse_Time+0xb2>
				}


				time[i] =val;
 801054e:	89fb      	ldrh	r3, [r7, #14]
 8010550:	683a      	ldr	r2, [r7, #0]
 8010552:	4413      	add	r3, r2
 8010554:	89ba      	ldrh	r2, [r7, #12]
 8010556:	b2d2      	uxtb	r2, r2
 8010558:	701a      	strb	r2, [r3, #0]
			//printf("'%s'\n", ptr);
			ptr = strtok(NULL, ":");
 801055a:	4908      	ldr	r1, [pc, #32]	; (801057c <Parse_Time+0xbc>)
 801055c:	2000      	movs	r0, #0
 801055e:	f00a ff6f 	bl	801b440 <strtok>
 8010562:	60b8      	str	r0, [r7, #8]
			i++;
 8010564:	89fb      	ldrh	r3, [r7, #14]
 8010566:	3301      	adds	r3, #1
 8010568:	81fb      	strh	r3, [r7, #14]
		while(ptr != NULL)
 801056a:	68bb      	ldr	r3, [r7, #8]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d1ba      	bne.n	80104e6 <Parse_Time+0x26>
		}

		}

		return 0;
 8010570:	2300      	movs	r3, #0
}
 8010572:	4618      	mov	r0, r3
 8010574:	3710      	adds	r7, #16
 8010576:	46bd      	mov	sp, r7
 8010578:	bd80      	pop	{r7, pc}
 801057a:	bf00      	nop
 801057c:	0801f3e8 	.word	0x0801f3e8

08010580 <CharToHexasc>:


 void CharToHexasc(uint8_t *pPos, uint8_t Wert)
{
 8010580:	b480      	push	{r7}
 8010582:	b083      	sub	sp, #12
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
 8010588:	460b      	mov	r3, r1
 801058a:	70fb      	strb	r3, [r7, #3]
      *pPos++ = kaHexAsc[Wert >> 4];
 801058c:	78fb      	ldrb	r3, [r7, #3]
 801058e:	091b      	lsrs	r3, r3, #4
 8010590:	b2db      	uxtb	r3, r3
 8010592:	4619      	mov	r1, r3
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	1c5a      	adds	r2, r3, #1
 8010598:	607a      	str	r2, [r7, #4]
 801059a:	4a08      	ldr	r2, [pc, #32]	; (80105bc <CharToHexasc+0x3c>)
 801059c:	5c52      	ldrb	r2, [r2, r1]
 801059e:	701a      	strb	r2, [r3, #0]
      *pPos = kaHexAsc[Wert & 0x0f];
 80105a0:	78fb      	ldrb	r3, [r7, #3]
 80105a2:	f003 030f 	and.w	r3, r3, #15
 80105a6:	4a05      	ldr	r2, [pc, #20]	; (80105bc <CharToHexasc+0x3c>)
 80105a8:	5cd2      	ldrb	r2, [r2, r3]
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	701a      	strb	r2, [r3, #0]
}
 80105ae:	bf00      	nop
 80105b0:	370c      	adds	r7, #12
 80105b2:	46bd      	mov	sp, r7
 80105b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b8:	4770      	bx	lr
 80105ba:	bf00      	nop
 80105bc:	0801fc34 	.word	0x0801fc34

080105c0 <adc_InitOneShotMode>:
#define adc_Start()	   HAL_ADC_Start(&hadc1)
#define adc_Stop()	    HAL_ADC_Stop(&hadc1)
#define adc_Disable() HAL_ADC_DeInit(&hadc1)

static void adc_InitOneShotMode ()
{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b088      	sub	sp, #32
 80105c4:	af00      	add	r7, sp, #0
	adc_Disable();
 80105c6:	4830      	ldr	r0, [pc, #192]	; (8010688 <adc_InitOneShotMode+0xc8>)
 80105c8:	f7f2 fc0f 	bl	8002dea <HAL_ADC_DeInit>

	 ADC_MultiModeTypeDef multimode = {0};
 80105cc:	f107 0314 	add.w	r3, r7, #20
 80105d0:	2200      	movs	r2, #0
 80105d2:	601a      	str	r2, [r3, #0]
 80105d4:	605a      	str	r2, [r3, #4]
 80105d6:	609a      	str	r2, [r3, #8]
	  hadc1.Instance = ADC1;
 80105d8:	4b2b      	ldr	r3, [pc, #172]	; (8010688 <adc_InitOneShotMode+0xc8>)
 80105da:	4a2c      	ldr	r2, [pc, #176]	; (801068c <adc_InitOneShotMode+0xcc>)
 80105dc:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80105de:	4b2a      	ldr	r3, [pc, #168]	; (8010688 <adc_InitOneShotMode+0xc8>)
 80105e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80105e4:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80105e6:	4b28      	ldr	r3, [pc, #160]	; (8010688 <adc_InitOneShotMode+0xc8>)
 80105e8:	2200      	movs	r2, #0
 80105ea:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = DISABLE;
 80105ec:	4b26      	ldr	r3, [pc, #152]	; (8010688 <adc_InitOneShotMode+0xc8>)
 80105ee:	2200      	movs	r2, #0
 80105f0:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 80105f2:	4b25      	ldr	r3, [pc, #148]	; (8010688 <adc_InitOneShotMode+0xc8>)
 80105f4:	2200      	movs	r2, #0
 80105f6:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80105f8:	4b23      	ldr	r3, [pc, #140]	; (8010688 <adc_InitOneShotMode+0xc8>)
 80105fa:	2200      	movs	r2, #0
 80105fc:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8010600:	4b21      	ldr	r3, [pc, #132]	; (8010688 <adc_InitOneShotMode+0xc8>)
 8010602:	2200      	movs	r2, #0
 8010604:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8010606:	4b20      	ldr	r3, [pc, #128]	; (8010688 <adc_InitOneShotMode+0xc8>)
 8010608:	4a21      	ldr	r2, [pc, #132]	; (8010690 <adc_InitOneShotMode+0xd0>)
 801060a:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 801060c:	4b1e      	ldr	r3, [pc, #120]	; (8010688 <adc_InitOneShotMode+0xc8>)
 801060e:	2200      	movs	r2, #0
 8010610:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 8010612:	4b1d      	ldr	r3, [pc, #116]	; (8010688 <adc_InitOneShotMode+0xc8>)
 8010614:	2201      	movs	r2, #1
 8010616:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 8010618:	4b1b      	ldr	r3, [pc, #108]	; (8010688 <adc_InitOneShotMode+0xc8>)
 801061a:	2200      	movs	r2, #0
 801061c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8010620:	4b19      	ldr	r3, [pc, #100]	; (8010688 <adc_InitOneShotMode+0xc8>)
 8010622:	2201      	movs	r2, #1
 8010624:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8010626:	4818      	ldr	r0, [pc, #96]	; (8010688 <adc_InitOneShotMode+0xc8>)
 8010628:	f7f2 fb9c 	bl	8002d64 <HAL_ADC_Init>
 801062c:	4603      	mov	r3, r0
 801062e:	2b00      	cmp	r3, #0
 8010630:	d001      	beq.n	8010636 <adc_InitOneShotMode+0x76>
	  {
	    Error_Handler();
 8010632:	f7f1 feb3 	bl	800239c <Error_Handler>
	  }


	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 8010636:	2300      	movs	r3, #0
 8010638:	617b      	str	r3, [r7, #20]
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 801063a:	f107 0314 	add.w	r3, r7, #20
 801063e:	4619      	mov	r1, r3
 8010640:	4811      	ldr	r0, [pc, #68]	; (8010688 <adc_InitOneShotMode+0xc8>)
 8010642:	f7f2 ffa3 	bl	800358c <HAL_ADCEx_MultiModeConfigChannel>
 8010646:	4603      	mov	r3, r0
 8010648:	2b00      	cmp	r3, #0
 801064a:	d001      	beq.n	8010650 <adc_InitOneShotMode+0x90>
	  {
	    Error_Handler();
 801064c:	f7f1 fea6 	bl	800239c <Error_Handler>
	  }

		ADC_ChannelConfTypeDef sConfig = {0};
 8010650:	1d3b      	adds	r3, r7, #4
 8010652:	2200      	movs	r2, #0
 8010654:	601a      	str	r2, [r3, #0]
 8010656:	605a      	str	r2, [r3, #4]
 8010658:	609a      	str	r2, [r3, #8]
 801065a:	60da      	str	r2, [r3, #12]
			  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
			  */
		sConfig.Channel = ADC_CHANNEL_10;
 801065c:	230a      	movs	r3, #10
 801065e:	607b      	str	r3, [r7, #4]
		  sConfig.Rank = 1;
 8010660:	2301      	movs	r3, #1
 8010662:	60bb      	str	r3, [r7, #8]
		  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8010664:	2302      	movs	r3, #2
 8010666:	60fb      	str	r3, [r7, #12]
		  sConfig.Offset = 0;
 8010668:	2300      	movs	r3, #0
 801066a:	613b      	str	r3, [r7, #16]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801066c:	1d3b      	adds	r3, r7, #4
 801066e:	4619      	mov	r1, r3
 8010670:	4805      	ldr	r0, [pc, #20]	; (8010688 <adc_InitOneShotMode+0xc8>)
 8010672:	f7f2 fd6d 	bl	8003150 <HAL_ADC_ConfigChannel>
 8010676:	4603      	mov	r3, r0
 8010678:	2b00      	cmp	r3, #0
 801067a:	d001      	beq.n	8010680 <adc_InitOneShotMode+0xc0>
		  {
		    Error_Handler();
 801067c:	f7f1 fe8e 	bl	800239c <Error_Handler>
		  }



}
 8010680:	bf00      	nop
 8010682:	3720      	adds	r7, #32
 8010684:	46bd      	mov	sp, r7
 8010686:	bd80      	pop	{r7, pc}
 8010688:	20000778 	.word	0x20000778
 801068c:	40012000 	.word	0x40012000
 8010690:	0f000001 	.word	0x0f000001

08010694 <adc_Getval>:

static uint32_t adc_Getval ()
{
 8010694:	b580      	push	{r7, lr}
 8010696:	af00      	add	r7, sp, #0

	return HAL_ADC_GetValue(&hadc1);
 8010698:	4802      	ldr	r0, [pc, #8]	; (80106a4 <adc_Getval+0x10>)
 801069a:	f7f2 fd4b 	bl	8003134 <HAL_ADC_GetValue>
 801069e:	4603      	mov	r3, r0

}
 80106a0:	4618      	mov	r0, r3
 80106a2:	bd80      	pop	{r7, pc}
 80106a4:	20000778 	.word	0x20000778

080106a8 <adc_Measure>:

uint8_t adc_Measure (float *bat_volt)
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b084      	sub	sp, #16
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
	uint32_t val;
	adc_InitOneShotMode();
 80106b0:	f7ff ff86 	bl	80105c0 <adc_InitOneShotMode>
	HAL_Delay(1);
 80106b4:	2001      	movs	r0, #1
 80106b6:	f7f2 faed 	bl	8002c94 <HAL_Delay>
	adc_Start();
 80106ba:	483e      	ldr	r0, [pc, #248]	; (80107b4 <adc_Measure+0x10c>)
 80106bc:	f7f2 fbc8 	bl	8002e50 <HAL_ADC_Start>
	HAL_Delay(1);
 80106c0:	2001      	movs	r0, #1
 80106c2:	f7f2 fae7 	bl	8002c94 <HAL_Delay>

	if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 80106c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80106ca:	483a      	ldr	r0, [pc, #232]	; (80107b4 <adc_Measure+0x10c>)
 80106cc:	f7f2 fca7 	bl	800301e <HAL_ADC_PollForConversion>
 80106d0:	4603      	mov	r3, r0
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d01d      	beq.n	8010712 <adc_Measure+0x6a>
		{
		   HAL_Delay(1);
 80106d6:	2001      	movs	r0, #1
 80106d8:	f7f2 fadc 	bl	8002c94 <HAL_Delay>
		   adc_Start();
 80106dc:	4835      	ldr	r0, [pc, #212]	; (80107b4 <adc_Measure+0x10c>)
 80106de:	f7f2 fbb7 	bl	8002e50 <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 80106e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80106e6:	4833      	ldr	r0, [pc, #204]	; (80107b4 <adc_Measure+0x10c>)
 80106e8:	f7f2 fc99 	bl	800301e <HAL_ADC_PollForConversion>
 80106ec:	4603      	mov	r3, r0
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d00f      	beq.n	8010712 <adc_Measure+0x6a>
			{
				HAL_Delay(1);
 80106f2:	2001      	movs	r0, #1
 80106f4:	f7f2 face 	bl	8002c94 <HAL_Delay>
				adc_Start();
 80106f8:	482e      	ldr	r0, [pc, #184]	; (80107b4 <adc_Measure+0x10c>)
 80106fa:	f7f2 fba9 	bl	8002e50 <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 80106fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010702:	482c      	ldr	r0, [pc, #176]	; (80107b4 <adc_Measure+0x10c>)
 8010704:	f7f2 fc8b 	bl	800301e <HAL_ADC_PollForConversion>
 8010708:	4603      	mov	r3, r0
 801070a:	2b00      	cmp	r3, #0
 801070c:	d001      	beq.n	8010712 <adc_Measure+0x6a>
				{
					return 0;
 801070e:	2300      	movs	r3, #0
 8010710:	e04b      	b.n	80107aa <adc_Measure+0x102>
				}
			}
		}

	adc_Stop();
 8010712:	4828      	ldr	r0, [pc, #160]	; (80107b4 <adc_Measure+0x10c>)
 8010714:	f7f2 fc50 	bl	8002fb8 <HAL_ADC_Stop>

	val = adc_Getval();
 8010718:	f7ff ffbc 	bl	8010694 <adc_Getval>
 801071c:	60f8      	str	r0, [r7, #12]

	HAL_Delay(1);
 801071e:	2001      	movs	r0, #1
 8010720:	f7f2 fab8 	bl	8002c94 <HAL_Delay>
	adc_Start();
 8010724:	4823      	ldr	r0, [pc, #140]	; (80107b4 <adc_Measure+0x10c>)
 8010726:	f7f2 fb93 	bl	8002e50 <HAL_ADC_Start>
	HAL_Delay(1);
 801072a:	2001      	movs	r0, #1
 801072c:	f7f2 fab2 	bl	8002c94 <HAL_Delay>

	if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8010730:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010734:	481f      	ldr	r0, [pc, #124]	; (80107b4 <adc_Measure+0x10c>)
 8010736:	f7f2 fc72 	bl	800301e <HAL_ADC_PollForConversion>
 801073a:	4603      	mov	r3, r0
 801073c:	2b00      	cmp	r3, #0
 801073e:	d01d      	beq.n	801077c <adc_Measure+0xd4>
		{
		   HAL_Delay(1);
 8010740:	2001      	movs	r0, #1
 8010742:	f7f2 faa7 	bl	8002c94 <HAL_Delay>
		   adc_Start();
 8010746:	481b      	ldr	r0, [pc, #108]	; (80107b4 <adc_Measure+0x10c>)
 8010748:	f7f2 fb82 	bl	8002e50 <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 801074c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010750:	4818      	ldr	r0, [pc, #96]	; (80107b4 <adc_Measure+0x10c>)
 8010752:	f7f2 fc64 	bl	800301e <HAL_ADC_PollForConversion>
 8010756:	4603      	mov	r3, r0
 8010758:	2b00      	cmp	r3, #0
 801075a:	d00f      	beq.n	801077c <adc_Measure+0xd4>
			{
				HAL_Delay(1);
 801075c:	2001      	movs	r0, #1
 801075e:	f7f2 fa99 	bl	8002c94 <HAL_Delay>
				adc_Start();
 8010762:	4814      	ldr	r0, [pc, #80]	; (80107b4 <adc_Measure+0x10c>)
 8010764:	f7f2 fb74 	bl	8002e50 <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8010768:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801076c:	4811      	ldr	r0, [pc, #68]	; (80107b4 <adc_Measure+0x10c>)
 801076e:	f7f2 fc56 	bl	800301e <HAL_ADC_PollForConversion>
 8010772:	4603      	mov	r3, r0
 8010774:	2b00      	cmp	r3, #0
 8010776:	d001      	beq.n	801077c <adc_Measure+0xd4>
				{
					return 0;
 8010778:	2300      	movs	r3, #0
 801077a:	e016      	b.n	80107aa <adc_Measure+0x102>
				}
			}
		}

	adc_Stop();
 801077c:	480d      	ldr	r0, [pc, #52]	; (80107b4 <adc_Measure+0x10c>)
 801077e:	f7f2 fc1b 	bl	8002fb8 <HAL_ADC_Stop>

	val =(uint32_t)((val + adc_Getval()) / 2);	//Read and average ADC
 8010782:	f7ff ff87 	bl	8010694 <adc_Getval>
 8010786:	4602      	mov	r2, r0
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	4413      	add	r3, r2
 801078c:	085b      	lsrs	r3, r3, #1
 801078e:	60fb      	str	r3, [r7, #12]


	// Max = 3.3Vref * 365k / 100k = 12.045V

	*bat_volt = (float) val * (12.045f / 4096.0f);	// 12 bit
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	ee07 3a90 	vmov	s15, r3
 8010796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801079a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80107b8 <adc_Measure+0x110>
 801079e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	edc3 7a00 	vstr	s15, [r3]


	return 1;
 80107a8:	2301      	movs	r3, #1


}
 80107aa:	4618      	mov	r0, r3
 80107ac:	3710      	adds	r7, #16
 80107ae:	46bd      	mov	sp, r7
 80107b0:	bd80      	pop	{r7, pc}
 80107b2:	bf00      	nop
 80107b4:	20000778 	.word	0x20000778
 80107b8:	3b40b852 	.word	0x3b40b852

080107bc <scd4x_start_periodic_measurement>:
#include "sensirion_i2c.h"
#include "sensirion_i2c_hal.h"

#define SCD4X_I2C_ADDRESS 0x62

int16_t scd4x_start_periodic_measurement() {
 80107bc:	b580      	push	{r7, lr}
 80107be:	b082      	sub	sp, #8
 80107c0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 80107c2:	2300      	movs	r3, #0
 80107c4:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21B1);
 80107c6:	88f9      	ldrh	r1, [r7, #6]
 80107c8:	463b      	mov	r3, r7
 80107ca:	f242 12b1 	movw	r2, #8625	; 0x21b1
 80107ce:	4618      	mov	r0, r3
 80107d0:	f000 fa8d 	bl	8010cee <sensirion_i2c_add_command_to_buffer>
 80107d4:	4603      	mov	r3, r0
 80107d6:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 80107d8:	88fa      	ldrh	r2, [r7, #6]
 80107da:	463b      	mov	r3, r7
 80107dc:	4619      	mov	r1, r3
 80107de:	2062      	movs	r0, #98	; 0x62
 80107e0:	f000 fad8 	bl	8010d94 <sensirion_i2c_write_data>
 80107e4:	4603      	mov	r3, r0
 80107e6:	80bb      	strh	r3, [r7, #4]
    if (error) {
 80107e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d002      	beq.n	80107f6 <scd4x_start_periodic_measurement+0x3a>
        return error;
 80107f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80107f4:	e004      	b.n	8010800 <scd4x_start_periodic_measurement+0x44>
    }
    sensirion_i2c_hal_sleep_usec(1000);
 80107f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80107fa:	f000 fbb9 	bl	8010f70 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 80107fe:	2300      	movs	r3, #0
}
 8010800:	4618      	mov	r0, r3
 8010802:	3708      	adds	r7, #8
 8010804:	46bd      	mov	sp, r7
 8010806:	bd80      	pop	{r7, pc}

08010808 <scd4x_read_measurement_ticks>:

int16_t scd4x_read_measurement_ticks(uint16_t* co2, uint16_t* temperature,
                                     uint16_t* humidity) {
 8010808:	b580      	push	{r7, lr}
 801080a:	b088      	sub	sp, #32
 801080c:	af00      	add	r7, sp, #0
 801080e:	60f8      	str	r0, [r7, #12]
 8010810:	60b9      	str	r1, [r7, #8]
 8010812:	607a      	str	r2, [r7, #4]
    int16_t error;
    uint8_t buffer[9];
    uint16_t offset = 0;
 8010814:	2300      	movs	r3, #0
 8010816:	83fb      	strh	r3, [r7, #30]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xEC05);
 8010818:	8bf9      	ldrh	r1, [r7, #30]
 801081a:	f107 0310 	add.w	r3, r7, #16
 801081e:	f64e 4205 	movw	r2, #60421	; 0xec05
 8010822:	4618      	mov	r0, r3
 8010824:	f000 fa63 	bl	8010cee <sensirion_i2c_add_command_to_buffer>
 8010828:	4603      	mov	r3, r0
 801082a:	83fb      	strh	r3, [r7, #30]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 801082c:	8bfa      	ldrh	r2, [r7, #30]
 801082e:	f107 0310 	add.w	r3, r7, #16
 8010832:	4619      	mov	r1, r3
 8010834:	2062      	movs	r0, #98	; 0x62
 8010836:	f000 faad 	bl	8010d94 <sensirion_i2c_write_data>
 801083a:	4603      	mov	r3, r0
 801083c:	83bb      	strh	r3, [r7, #28]
    if (error) {
 801083e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d002      	beq.n	801084c <scd4x_read_measurement_ticks+0x44>
        return error;
 8010846:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801084a:	e031      	b.n	80108b0 <scd4x_read_measurement_ticks+0xa8>
    }

    sensirion_i2c_hal_sleep_usec(1000);
 801084c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010850:	f000 fb8e 	bl	8010f70 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SCD4X_I2C_ADDRESS, &buffer[0], 6);
 8010854:	f107 0310 	add.w	r3, r7, #16
 8010858:	2206      	movs	r2, #6
 801085a:	4619      	mov	r1, r3
 801085c:	2062      	movs	r0, #98	; 0x62
 801085e:	f000 faad 	bl	8010dbc <sensirion_i2c_read_data_inplace>
 8010862:	4603      	mov	r3, r0
 8010864:	83bb      	strh	r3, [r7, #28]
    if (error) {
 8010866:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d002      	beq.n	8010874 <scd4x_read_measurement_ticks+0x6c>
        return error;
 801086e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8010872:	e01d      	b.n	80108b0 <scd4x_read_measurement_ticks+0xa8>
    }
    *co2 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 8010874:	f107 0310 	add.w	r3, r7, #16
 8010878:	4618      	mov	r0, r3
 801087a:	f000 f9d2 	bl	8010c22 <sensirion_common_bytes_to_uint16_t>
 801087e:	4603      	mov	r3, r0
 8010880:	461a      	mov	r2, r3
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	801a      	strh	r2, [r3, #0]
    *temperature = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 8010886:	f107 0310 	add.w	r3, r7, #16
 801088a:	3302      	adds	r3, #2
 801088c:	4618      	mov	r0, r3
 801088e:	f000 f9c8 	bl	8010c22 <sensirion_common_bytes_to_uint16_t>
 8010892:	4603      	mov	r3, r0
 8010894:	461a      	mov	r2, r3
 8010896:	68bb      	ldr	r3, [r7, #8]
 8010898:	801a      	strh	r2, [r3, #0]
    *humidity = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 801089a:	f107 0310 	add.w	r3, r7, #16
 801089e:	3304      	adds	r3, #4
 80108a0:	4618      	mov	r0, r3
 80108a2:	f000 f9be 	bl	8010c22 <sensirion_common_bytes_to_uint16_t>
 80108a6:	4603      	mov	r3, r0
 80108a8:	461a      	mov	r2, r3
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 80108ae:	2300      	movs	r3, #0
}
 80108b0:	4618      	mov	r0, r3
 80108b2:	3720      	adds	r7, #32
 80108b4:	46bd      	mov	sp, r7
 80108b6:	bd80      	pop	{r7, pc}

080108b8 <scd4x_read_measurement>:

int16_t scd4x_read_measurement(uint16_t* co2, int32_t* temperature_m_deg_c,
                               int32_t* humidity_m_percent_rh) {
 80108b8:	b580      	push	{r7, lr}
 80108ba:	b086      	sub	sp, #24
 80108bc:	af00      	add	r7, sp, #0
 80108be:	60f8      	str	r0, [r7, #12]
 80108c0:	60b9      	str	r1, [r7, #8]
 80108c2:	607a      	str	r2, [r7, #4]
    int16_t error;
    uint16_t temperature;
    uint16_t humidity;

    error = scd4x_read_measurement_ticks(co2, &temperature, &humidity);
 80108c4:	f107 0212 	add.w	r2, r7, #18
 80108c8:	f107 0314 	add.w	r3, r7, #20
 80108cc:	4619      	mov	r1, r3
 80108ce:	68f8      	ldr	r0, [r7, #12]
 80108d0:	f7ff ff9a 	bl	8010808 <scd4x_read_measurement_ticks>
 80108d4:	4603      	mov	r3, r0
 80108d6:	82fb      	strh	r3, [r7, #22]
    if (error) {
 80108d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d002      	beq.n	80108e6 <scd4x_read_measurement+0x2e>
        return error;
 80108e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80108e4:	e015      	b.n	8010912 <scd4x_read_measurement+0x5a>
    }
    *temperature_m_deg_c = ((21875 * (int32_t)temperature) >> 13) - 45000;
 80108e6:	8abb      	ldrh	r3, [r7, #20]
 80108e8:	461a      	mov	r2, r3
 80108ea:	f245 5373 	movw	r3, #21875	; 0x5573
 80108ee:	fb02 f303 	mul.w	r3, r2, r3
 80108f2:	135b      	asrs	r3, r3, #13
 80108f4:	f5a3 432f 	sub.w	r3, r3, #44800	; 0xaf00
 80108f8:	3bc8      	subs	r3, #200	; 0xc8
 80108fa:	68ba      	ldr	r2, [r7, #8]
 80108fc:	6013      	str	r3, [r2, #0]
    *humidity_m_percent_rh = ((12500 * (int32_t)humidity) >> 13);
 80108fe:	8a7b      	ldrh	r3, [r7, #18]
 8010900:	461a      	mov	r2, r3
 8010902:	f243 03d4 	movw	r3, #12500	; 0x30d4
 8010906:	fb02 f303 	mul.w	r3, r2, r3
 801090a:	135a      	asrs	r2, r3, #13
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 8010910:	2300      	movs	r3, #0
}
 8010912:	4618      	mov	r0, r3
 8010914:	3718      	adds	r7, #24
 8010916:	46bd      	mov	sp, r7
 8010918:	bd80      	pop	{r7, pc}
	...

0801091c <scd4x_stop_periodic_measurement>:

int16_t scd4x_stop_periodic_measurement() {
 801091c:	b580      	push	{r7, lr}
 801091e:	b082      	sub	sp, #8
 8010920:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8010922:	2300      	movs	r3, #0
 8010924:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3F86);
 8010926:	88f9      	ldrh	r1, [r7, #6]
 8010928:	463b      	mov	r3, r7
 801092a:	f643 7286 	movw	r2, #16262	; 0x3f86
 801092e:	4618      	mov	r0, r3
 8010930:	f000 f9dd 	bl	8010cee <sensirion_i2c_add_command_to_buffer>
 8010934:	4603      	mov	r3, r0
 8010936:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8010938:	88fa      	ldrh	r2, [r7, #6]
 801093a:	463b      	mov	r3, r7
 801093c:	4619      	mov	r1, r3
 801093e:	2062      	movs	r0, #98	; 0x62
 8010940:	f000 fa28 	bl	8010d94 <sensirion_i2c_write_data>
 8010944:	4603      	mov	r3, r0
 8010946:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8010948:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d002      	beq.n	8010956 <scd4x_stop_periodic_measurement+0x3a>
        return error;
 8010950:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010954:	e003      	b.n	801095e <scd4x_stop_periodic_measurement+0x42>
    }
    sensirion_i2c_hal_sleep_usec(500000);
 8010956:	4804      	ldr	r0, [pc, #16]	; (8010968 <scd4x_stop_periodic_measurement+0x4c>)
 8010958:	f000 fb0a 	bl	8010f70 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 801095c:	2300      	movs	r3, #0
}
 801095e:	4618      	mov	r0, r3
 8010960:	3708      	adds	r7, #8
 8010962:	46bd      	mov	sp, r7
 8010964:	bd80      	pop	{r7, pc}
 8010966:	bf00      	nop
 8010968:	0007a120 	.word	0x0007a120

0801096c <scd4x_perform_forced_recalibration>:
    sensirion_i2c_hal_sleep_usec(1000);
    return NO_ERROR;
}

int16_t scd4x_perform_forced_recalibration(uint16_t target_co2_concentration,
                                           uint16_t* frc_correction) {
 801096c:	b580      	push	{r7, lr}
 801096e:	b086      	sub	sp, #24
 8010970:	af00      	add	r7, sp, #0
 8010972:	4603      	mov	r3, r0
 8010974:	6039      	str	r1, [r7, #0]
 8010976:	80fb      	strh	r3, [r7, #6]
    int16_t error;
    uint8_t buffer[5];
    uint16_t offset = 0;
 8010978:	2300      	movs	r3, #0
 801097a:	82fb      	strh	r3, [r7, #22]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x362F);
 801097c:	8af9      	ldrh	r1, [r7, #22]
 801097e:	f107 030c 	add.w	r3, r7, #12
 8010982:	f243 622f 	movw	r2, #13871	; 0x362f
 8010986:	4618      	mov	r0, r3
 8010988:	f000 f9b1 	bl	8010cee <sensirion_i2c_add_command_to_buffer>
 801098c:	4603      	mov	r3, r0
 801098e:	82fb      	strh	r3, [r7, #22]

    offset = sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset,
 8010990:	88fa      	ldrh	r2, [r7, #6]
 8010992:	8af9      	ldrh	r1, [r7, #22]
 8010994:	f107 030c 	add.w	r3, r7, #12
 8010998:	4618      	mov	r0, r3
 801099a:	f000 f9cb 	bl	8010d34 <sensirion_i2c_add_uint16_t_to_buffer>
 801099e:	4603      	mov	r3, r0
 80109a0:	82fb      	strh	r3, [r7, #22]
                                                  target_co2_concentration);

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 80109a2:	8afa      	ldrh	r2, [r7, #22]
 80109a4:	f107 030c 	add.w	r3, r7, #12
 80109a8:	4619      	mov	r1, r3
 80109aa:	2062      	movs	r0, #98	; 0x62
 80109ac:	f000 f9f2 	bl	8010d94 <sensirion_i2c_write_data>
 80109b0:	4603      	mov	r3, r0
 80109b2:	82bb      	strh	r3, [r7, #20]
    if (error) {
 80109b4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d002      	beq.n	80109c2 <scd4x_perform_forced_recalibration+0x56>
        return error;
 80109bc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80109c0:	e01c      	b.n	80109fc <scd4x_perform_forced_recalibration+0x90>
    }

    sensirion_i2c_hal_sleep_usec(400000);
 80109c2:	4810      	ldr	r0, [pc, #64]	; (8010a04 <scd4x_perform_forced_recalibration+0x98>)
 80109c4:	f000 fad4 	bl	8010f70 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SCD4X_I2C_ADDRESS, &buffer[0], 2);
 80109c8:	f107 030c 	add.w	r3, r7, #12
 80109cc:	2202      	movs	r2, #2
 80109ce:	4619      	mov	r1, r3
 80109d0:	2062      	movs	r0, #98	; 0x62
 80109d2:	f000 f9f3 	bl	8010dbc <sensirion_i2c_read_data_inplace>
 80109d6:	4603      	mov	r3, r0
 80109d8:	82bb      	strh	r3, [r7, #20]
    if (error) {
 80109da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d002      	beq.n	80109e8 <scd4x_perform_forced_recalibration+0x7c>
        return error;
 80109e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80109e6:	e009      	b.n	80109fc <scd4x_perform_forced_recalibration+0x90>
    }
    *frc_correction = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 80109e8:	f107 030c 	add.w	r3, r7, #12
 80109ec:	4618      	mov	r0, r3
 80109ee:	f000 f918 	bl	8010c22 <sensirion_common_bytes_to_uint16_t>
 80109f2:	4603      	mov	r3, r0
 80109f4:	461a      	mov	r2, r3
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 80109fa:	2300      	movs	r3, #0
}
 80109fc:	4618      	mov	r0, r3
 80109fe:	3718      	adds	r7, #24
 8010a00:	46bd      	mov	sp, r7
 8010a02:	bd80      	pop	{r7, pc}
 8010a04:	00061a80 	.word	0x00061a80

08010a08 <scd4x_get_data_ready_flag>:
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21AC);

    return sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
}

int16_t scd4x_get_data_ready_flag(bool* data_ready_flag) {
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b086      	sub	sp, #24
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 8010a10:	2300      	movs	r3, #0
 8010a12:	82fb      	strh	r3, [r7, #22]
    uint16_t local_data_ready = 0;
 8010a14:	2300      	movs	r3, #0
 8010a16:	82bb      	strh	r3, [r7, #20]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xE4B8);
 8010a18:	8af9      	ldrh	r1, [r7, #22]
 8010a1a:	f107 030c 	add.w	r3, r7, #12
 8010a1e:	f24e 42b8 	movw	r2, #58552	; 0xe4b8
 8010a22:	4618      	mov	r0, r3
 8010a24:	f000 f963 	bl	8010cee <sensirion_i2c_add_command_to_buffer>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	82fb      	strh	r3, [r7, #22]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8010a2c:	8afa      	ldrh	r2, [r7, #22]
 8010a2e:	f107 030c 	add.w	r3, r7, #12
 8010a32:	4619      	mov	r1, r3
 8010a34:	2062      	movs	r0, #98	; 0x62
 8010a36:	f000 f9ad 	bl	8010d94 <sensirion_i2c_write_data>
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	827b      	strh	r3, [r7, #18]
    if (error) {
 8010a3e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d002      	beq.n	8010a4c <scd4x_get_data_ready_flag+0x44>
        return error;
 8010a46:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010a4a:	e025      	b.n	8010a98 <scd4x_get_data_ready_flag+0x90>
    }

    sensirion_i2c_hal_sleep_usec(1000);
 8010a4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010a50:	f000 fa8e 	bl	8010f70 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SCD4X_I2C_ADDRESS, &buffer[0], 2);
 8010a54:	f107 030c 	add.w	r3, r7, #12
 8010a58:	2202      	movs	r2, #2
 8010a5a:	4619      	mov	r1, r3
 8010a5c:	2062      	movs	r0, #98	; 0x62
 8010a5e:	f000 f9ad 	bl	8010dbc <sensirion_i2c_read_data_inplace>
 8010a62:	4603      	mov	r3, r0
 8010a64:	827b      	strh	r3, [r7, #18]
    if (error) {
 8010a66:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d002      	beq.n	8010a74 <scd4x_get_data_ready_flag+0x6c>
        return error;
 8010a6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010a72:	e011      	b.n	8010a98 <scd4x_get_data_ready_flag+0x90>
    }
    local_data_ready = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 8010a74:	f107 030c 	add.w	r3, r7, #12
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f000 f8d2 	bl	8010c22 <sensirion_common_bytes_to_uint16_t>
 8010a7e:	4603      	mov	r3, r0
 8010a80:	82bb      	strh	r3, [r7, #20]
    *data_ready_flag = (local_data_ready & 0x07FF) != 0;
 8010a82:	8abb      	ldrh	r3, [r7, #20]
 8010a84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	bf14      	ite	ne
 8010a8c:	2301      	movne	r3, #1
 8010a8e:	2300      	moveq	r3, #0
 8010a90:	b2da      	uxtb	r2, r3
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 8010a96:	2300      	movs	r3, #0
}
 8010a98:	4618      	mov	r0, r3
 8010a9a:	3718      	adds	r7, #24
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	bd80      	pop	{r7, pc}

08010aa0 <scd4x_get_serial_number>:
    sensirion_i2c_hal_sleep_usec(800000);
    return NO_ERROR;
}

int16_t scd4x_get_serial_number(uint16_t* serial_0, uint16_t* serial_1,
                                uint16_t* serial_2) {
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b088      	sub	sp, #32
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	60f8      	str	r0, [r7, #12]
 8010aa8:	60b9      	str	r1, [r7, #8]
 8010aaa:	607a      	str	r2, [r7, #4]
    int16_t error;
    uint8_t buffer[9];
    uint16_t offset = 0;
 8010aac:	2300      	movs	r3, #0
 8010aae:	83fb      	strh	r3, [r7, #30]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3682);
 8010ab0:	8bf9      	ldrh	r1, [r7, #30]
 8010ab2:	f107 0310 	add.w	r3, r7, #16
 8010ab6:	f243 6282 	movw	r2, #13954	; 0x3682
 8010aba:	4618      	mov	r0, r3
 8010abc:	f000 f917 	bl	8010cee <sensirion_i2c_add_command_to_buffer>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	83fb      	strh	r3, [r7, #30]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8010ac4:	8bfa      	ldrh	r2, [r7, #30]
 8010ac6:	f107 0310 	add.w	r3, r7, #16
 8010aca:	4619      	mov	r1, r3
 8010acc:	2062      	movs	r0, #98	; 0x62
 8010ace:	f000 f961 	bl	8010d94 <sensirion_i2c_write_data>
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	83bb      	strh	r3, [r7, #28]
    if (error) {
 8010ad6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d002      	beq.n	8010ae4 <scd4x_get_serial_number+0x44>
        return error;
 8010ade:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8010ae2:	e031      	b.n	8010b48 <scd4x_get_serial_number+0xa8>
    }

    sensirion_i2c_hal_sleep_usec(1000);
 8010ae4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010ae8:	f000 fa42 	bl	8010f70 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SCD4X_I2C_ADDRESS, &buffer[0], 6);
 8010aec:	f107 0310 	add.w	r3, r7, #16
 8010af0:	2206      	movs	r2, #6
 8010af2:	4619      	mov	r1, r3
 8010af4:	2062      	movs	r0, #98	; 0x62
 8010af6:	f000 f961 	bl	8010dbc <sensirion_i2c_read_data_inplace>
 8010afa:	4603      	mov	r3, r0
 8010afc:	83bb      	strh	r3, [r7, #28]
    if (error) {
 8010afe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d002      	beq.n	8010b0c <scd4x_get_serial_number+0x6c>
        return error;
 8010b06:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8010b0a:	e01d      	b.n	8010b48 <scd4x_get_serial_number+0xa8>
    }
    *serial_0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 8010b0c:	f107 0310 	add.w	r3, r7, #16
 8010b10:	4618      	mov	r0, r3
 8010b12:	f000 f886 	bl	8010c22 <sensirion_common_bytes_to_uint16_t>
 8010b16:	4603      	mov	r3, r0
 8010b18:	461a      	mov	r2, r3
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	801a      	strh	r2, [r3, #0]
    *serial_1 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 8010b1e:	f107 0310 	add.w	r3, r7, #16
 8010b22:	3302      	adds	r3, #2
 8010b24:	4618      	mov	r0, r3
 8010b26:	f000 f87c 	bl	8010c22 <sensirion_common_bytes_to_uint16_t>
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	461a      	mov	r2, r3
 8010b2e:	68bb      	ldr	r3, [r7, #8]
 8010b30:	801a      	strh	r2, [r3, #0]
    *serial_2 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 8010b32:	f107 0310 	add.w	r3, r7, #16
 8010b36:	3304      	adds	r3, #4
 8010b38:	4618      	mov	r0, r3
 8010b3a:	f000 f872 	bl	8010c22 <sensirion_common_bytes_to_uint16_t>
 8010b3e:	4603      	mov	r3, r0
 8010b40:	461a      	mov	r2, r3
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 8010b46:	2300      	movs	r3, #0
}
 8010b48:	4618      	mov	r0, r3
 8010b4a:	3720      	adds	r7, #32
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	bd80      	pop	{r7, pc}

08010b50 <scd4x_reinit>:
    }
    sensirion_i2c_hal_sleep_usec(800000);
    return NO_ERROR;
}

int16_t scd4x_reinit() {
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b082      	sub	sp, #8
 8010b54:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8010b56:	2300      	movs	r3, #0
 8010b58:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3646);
 8010b5a:	88f9      	ldrh	r1, [r7, #6]
 8010b5c:	463b      	mov	r3, r7
 8010b5e:	f243 6246 	movw	r2, #13894	; 0x3646
 8010b62:	4618      	mov	r0, r3
 8010b64:	f000 f8c3 	bl	8010cee <sensirion_i2c_add_command_to_buffer>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8010b6c:	88fa      	ldrh	r2, [r7, #6]
 8010b6e:	463b      	mov	r3, r7
 8010b70:	4619      	mov	r1, r3
 8010b72:	2062      	movs	r0, #98	; 0x62
 8010b74:	f000 f90e 	bl	8010d94 <sensirion_i2c_write_data>
 8010b78:	4603      	mov	r3, r0
 8010b7a:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8010b7c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d002      	beq.n	8010b8a <scd4x_reinit+0x3a>
        return error;
 8010b84:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010b88:	e004      	b.n	8010b94 <scd4x_reinit+0x44>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 8010b8a:	f644 6020 	movw	r0, #20000	; 0x4e20
 8010b8e:	f000 f9ef 	bl	8010f70 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8010b92:	2300      	movs	r3, #0
}
 8010b94:	4618      	mov	r0, r3
 8010b96:	3708      	adds	r7, #8
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bd80      	pop	{r7, pc}

08010b9c <scd4x_power_down>:
    }
    sensirion_i2c_hal_sleep_usec(50000);
    return NO_ERROR;
}

int16_t scd4x_power_down() {
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b082      	sub	sp, #8
 8010ba0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x36E0);
 8010ba6:	88f9      	ldrh	r1, [r7, #6]
 8010ba8:	463b      	mov	r3, r7
 8010baa:	f243 62e0 	movw	r2, #14048	; 0x36e0
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f000 f89d 	bl	8010cee <sensirion_i2c_add_command_to_buffer>
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8010bb8:	88fa      	ldrh	r2, [r7, #6]
 8010bba:	463b      	mov	r3, r7
 8010bbc:	4619      	mov	r1, r3
 8010bbe:	2062      	movs	r0, #98	; 0x62
 8010bc0:	f000 f8e8 	bl	8010d94 <sensirion_i2c_write_data>
 8010bc4:	4603      	mov	r3, r0
 8010bc6:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8010bc8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d002      	beq.n	8010bd6 <scd4x_power_down+0x3a>
        return error;
 8010bd0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010bd4:	e004      	b.n	8010be0 <scd4x_power_down+0x44>
    }
    sensirion_i2c_hal_sleep_usec(1000);
 8010bd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010bda:	f000 f9c9 	bl	8010f70 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8010bde:	2300      	movs	r3, #0
}
 8010be0:	4618      	mov	r0, r3
 8010be2:	3708      	adds	r7, #8
 8010be4:	46bd      	mov	sp, r7
 8010be6:	bd80      	pop	{r7, pc}

08010be8 <scd4x_wake_up>:

int16_t scd4x_wake_up() {
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b082      	sub	sp, #8
 8010bec:	af00      	add	r7, sp, #0
    uint8_t buffer[2];
    uint16_t offset = 0;
 8010bee:	2300      	movs	r3, #0
 8010bf0:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x36F6);
 8010bf2:	88f9      	ldrh	r1, [r7, #6]
 8010bf4:	1d3b      	adds	r3, r7, #4
 8010bf6:	f243 62f6 	movw	r2, #14070	; 0x36f6
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f000 f877 	bl	8010cee <sensirion_i2c_add_command_to_buffer>
 8010c00:	4603      	mov	r3, r0
 8010c02:	80fb      	strh	r3, [r7, #6]

    // Sensor does not acknowledge the wake-up call, error is ignored
    (void)sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8010c04:	88fa      	ldrh	r2, [r7, #6]
 8010c06:	1d3b      	adds	r3, r7, #4
 8010c08:	4619      	mov	r1, r3
 8010c0a:	2062      	movs	r0, #98	; 0x62
 8010c0c:	f000 f8c2 	bl	8010d94 <sensirion_i2c_write_data>
    sensirion_i2c_hal_sleep_usec(20000);
 8010c10:	f644 6020 	movw	r0, #20000	; 0x4e20
 8010c14:	f000 f9ac 	bl	8010f70 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8010c18:	2300      	movs	r3, #0
}
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	3708      	adds	r7, #8
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}

08010c22 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8010c22:	b480      	push	{r7}
 8010c24:	b083      	sub	sp, #12
 8010c26:	af00      	add	r7, sp, #0
 8010c28:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	781b      	ldrb	r3, [r3, #0]
 8010c2e:	021b      	lsls	r3, r3, #8
 8010c30:	b21a      	sxth	r2, r3
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	3301      	adds	r3, #1
 8010c36:	781b      	ldrb	r3, [r3, #0]
 8010c38:	b21b      	sxth	r3, r3
 8010c3a:	4313      	orrs	r3, r2
 8010c3c:	b21b      	sxth	r3, r3
 8010c3e:	b29b      	uxth	r3, r3
}
 8010c40:	4618      	mov	r0, r3
 8010c42:	370c      	adds	r7, #12
 8010c44:	46bd      	mov	sp, r7
 8010c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4a:	4770      	bx	lr

08010c4c <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8010c4c:	b480      	push	{r7}
 8010c4e:	b085      	sub	sp, #20
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
 8010c54:	460b      	mov	r3, r1
 8010c56:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8010c58:	23ff      	movs	r3, #255	; 0xff
 8010c5a:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	81fb      	strh	r3, [r7, #14]
 8010c60:	e021      	b.n	8010ca6 <sensirion_i2c_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 8010c62:	89fb      	ldrh	r3, [r7, #14]
 8010c64:	687a      	ldr	r2, [r7, #4]
 8010c66:	4413      	add	r3, r2
 8010c68:	781a      	ldrb	r2, [r3, #0]
 8010c6a:	7b7b      	ldrb	r3, [r7, #13]
 8010c6c:	4053      	eors	r3, r2
 8010c6e:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8010c70:	2308      	movs	r3, #8
 8010c72:	733b      	strb	r3, [r7, #12]
 8010c74:	e011      	b.n	8010c9a <sensirion_i2c_generate_crc+0x4e>
            if (crc & 0x80)
 8010c76:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	da07      	bge.n	8010c8e <sensirion_i2c_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8010c7e:	7b7b      	ldrb	r3, [r7, #13]
 8010c80:	005b      	lsls	r3, r3, #1
 8010c82:	b25b      	sxtb	r3, r3
 8010c84:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8010c88:	b25b      	sxtb	r3, r3
 8010c8a:	737b      	strb	r3, [r7, #13]
 8010c8c:	e002      	b.n	8010c94 <sensirion_i2c_generate_crc+0x48>
            else
                crc = (crc << 1);
 8010c8e:	7b7b      	ldrb	r3, [r7, #13]
 8010c90:	005b      	lsls	r3, r3, #1
 8010c92:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8010c94:	7b3b      	ldrb	r3, [r7, #12]
 8010c96:	3b01      	subs	r3, #1
 8010c98:	733b      	strb	r3, [r7, #12]
 8010c9a:	7b3b      	ldrb	r3, [r7, #12]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d1ea      	bne.n	8010c76 <sensirion_i2c_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8010ca0:	89fb      	ldrh	r3, [r7, #14]
 8010ca2:	3301      	adds	r3, #1
 8010ca4:	81fb      	strh	r3, [r7, #14]
 8010ca6:	89fa      	ldrh	r2, [r7, #14]
 8010ca8:	887b      	ldrh	r3, [r7, #2]
 8010caa:	429a      	cmp	r2, r3
 8010cac:	d3d9      	bcc.n	8010c62 <sensirion_i2c_generate_crc+0x16>
        }
    }
    return crc;
 8010cae:	7b7b      	ldrb	r3, [r7, #13]
}
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	3714      	adds	r7, #20
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cba:	4770      	bx	lr

08010cbc <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b082      	sub	sp, #8
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
 8010cc4:	460b      	mov	r3, r1
 8010cc6:	807b      	strh	r3, [r7, #2]
 8010cc8:	4613      	mov	r3, r2
 8010cca:	707b      	strb	r3, [r7, #1]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8010ccc:	887b      	ldrh	r3, [r7, #2]
 8010cce:	4619      	mov	r1, r3
 8010cd0:	6878      	ldr	r0, [r7, #4]
 8010cd2:	f7ff ffbb 	bl	8010c4c <sensirion_i2c_generate_crc>
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	461a      	mov	r2, r3
 8010cda:	787b      	ldrb	r3, [r7, #1]
 8010cdc:	4293      	cmp	r3, r2
 8010cde:	d001      	beq.n	8010ce4 <sensirion_i2c_check_crc+0x28>
        return CRC_ERROR;
 8010ce0:	2301      	movs	r3, #1
 8010ce2:	e000      	b.n	8010ce6 <sensirion_i2c_check_crc+0x2a>
    return NO_ERROR;
 8010ce4:	2300      	movs	r3, #0
}
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	3708      	adds	r7, #8
 8010cea:	46bd      	mov	sp, r7
 8010cec:	bd80      	pop	{r7, pc}

08010cee <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 8010cee:	b480      	push	{r7}
 8010cf0:	b083      	sub	sp, #12
 8010cf2:	af00      	add	r7, sp, #0
 8010cf4:	6078      	str	r0, [r7, #4]
 8010cf6:	460b      	mov	r3, r1
 8010cf8:	807b      	strh	r3, [r7, #2]
 8010cfa:	4613      	mov	r3, r2
 8010cfc:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 8010cfe:	883b      	ldrh	r3, [r7, #0]
 8010d00:	0a1b      	lsrs	r3, r3, #8
 8010d02:	b29a      	uxth	r2, r3
 8010d04:	887b      	ldrh	r3, [r7, #2]
 8010d06:	1c59      	adds	r1, r3, #1
 8010d08:	8079      	strh	r1, [r7, #2]
 8010d0a:	4619      	mov	r1, r3
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	440b      	add	r3, r1
 8010d10:	b2d2      	uxtb	r2, r2
 8010d12:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 8010d14:	887b      	ldrh	r3, [r7, #2]
 8010d16:	1c5a      	adds	r2, r3, #1
 8010d18:	807a      	strh	r2, [r7, #2]
 8010d1a:	461a      	mov	r2, r3
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	4413      	add	r3, r2
 8010d20:	883a      	ldrh	r2, [r7, #0]
 8010d22:	b2d2      	uxtb	r2, r2
 8010d24:	701a      	strb	r2, [r3, #0]
    return offset;
 8010d26:	887b      	ldrh	r3, [r7, #2]
}
 8010d28:	4618      	mov	r0, r3
 8010d2a:	370c      	adds	r7, #12
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d32:	4770      	bx	lr

08010d34 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 8010d34:	b590      	push	{r4, r7, lr}
 8010d36:	b083      	sub	sp, #12
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
 8010d3c:	460b      	mov	r3, r1
 8010d3e:	807b      	strh	r3, [r7, #2]
 8010d40:	4613      	mov	r3, r2
 8010d42:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 8010d44:	883b      	ldrh	r3, [r7, #0]
 8010d46:	0a1b      	lsrs	r3, r3, #8
 8010d48:	b29a      	uxth	r2, r3
 8010d4a:	887b      	ldrh	r3, [r7, #2]
 8010d4c:	1c59      	adds	r1, r3, #1
 8010d4e:	8079      	strh	r1, [r7, #2]
 8010d50:	4619      	mov	r1, r3
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	440b      	add	r3, r1
 8010d56:	b2d2      	uxtb	r2, r2
 8010d58:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 8010d5a:	887b      	ldrh	r3, [r7, #2]
 8010d5c:	1c5a      	adds	r2, r3, #1
 8010d5e:	807a      	strh	r2, [r7, #2]
 8010d60:	461a      	mov	r2, r3
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	4413      	add	r3, r2
 8010d66:	883a      	ldrh	r2, [r7, #0]
 8010d68:	b2d2      	uxtb	r2, r2
 8010d6a:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 8010d6c:	887b      	ldrh	r3, [r7, #2]
 8010d6e:	3b02      	subs	r3, #2
 8010d70:	687a      	ldr	r2, [r7, #4]
 8010d72:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 8010d74:	887b      	ldrh	r3, [r7, #2]
 8010d76:	687a      	ldr	r2, [r7, #4]
 8010d78:	18d4      	adds	r4, r2, r3
 8010d7a:	2102      	movs	r1, #2
 8010d7c:	f7ff ff66 	bl	8010c4c <sensirion_i2c_generate_crc>
 8010d80:	4603      	mov	r3, r0
 8010d82:	7023      	strb	r3, [r4, #0]
    offset++;
 8010d84:	887b      	ldrh	r3, [r7, #2]
 8010d86:	3301      	adds	r3, #1
 8010d88:	807b      	strh	r3, [r7, #2]

    return offset;
 8010d8a:	887b      	ldrh	r3, [r7, #2]
}
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	370c      	adds	r7, #12
 8010d90:	46bd      	mov	sp, r7
 8010d92:	bd90      	pop	{r4, r7, pc}

08010d94 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b082      	sub	sp, #8
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	6039      	str	r1, [r7, #0]
 8010d9e:	71fb      	strb	r3, [r7, #7]
 8010da0:	4613      	mov	r3, r2
 8010da2:	80bb      	strh	r3, [r7, #4]
    return sensirion_i2c_hal_write(address, data, data_length);
 8010da4:	88ba      	ldrh	r2, [r7, #4]
 8010da6:	79fb      	ldrb	r3, [r7, #7]
 8010da8:	6839      	ldr	r1, [r7, #0]
 8010daa:	4618      	mov	r0, r3
 8010dac:	f000 f8c4 	bl	8010f38 <sensirion_i2c_hal_write>
 8010db0:	4603      	mov	r3, r0
 8010db2:	b21b      	sxth	r3, r3
}
 8010db4:	4618      	mov	r0, r3
 8010db6:	3708      	adds	r7, #8
 8010db8:	46bd      	mov	sp, r7
 8010dba:	bd80      	pop	{r7, pc}

08010dbc <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b084      	sub	sp, #16
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	6039      	str	r1, [r7, #0]
 8010dc6:	71fb      	strb	r3, [r7, #7]
 8010dc8:	4613      	mov	r3, r2
 8010dca:	80bb      	strh	r3, [r7, #4]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8010dcc:	88bb      	ldrh	r3, [r7, #4]
 8010dce:	085b      	lsrs	r3, r3, #1
 8010dd0:	b29b      	uxth	r3, r3
 8010dd2:	461a      	mov	r2, r3
 8010dd4:	0052      	lsls	r2, r2, #1
 8010dd6:	4413      	add	r3, r2
 8010dd8:	817b      	strh	r3, [r7, #10]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8010dda:	88bb      	ldrh	r3, [r7, #4]
 8010ddc:	f003 0301 	and.w	r3, r3, #1
 8010de0:	b29b      	uxth	r3, r3
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d001      	beq.n	8010dea <sensirion_i2c_read_data_inplace+0x2e>
        return BYTE_NUM_ERROR;
 8010de6:	2304      	movs	r3, #4
 8010de8:	e047      	b.n	8010e7a <sensirion_i2c_read_data_inplace+0xbe>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8010dea:	897a      	ldrh	r2, [r7, #10]
 8010dec:	79fb      	ldrb	r3, [r7, #7]
 8010dee:	6839      	ldr	r1, [r7, #0]
 8010df0:	4618      	mov	r0, r3
 8010df2:	f000 f885 	bl	8010f00 <sensirion_i2c_hal_read>
 8010df6:	4603      	mov	r3, r0
 8010df8:	813b      	strh	r3, [r7, #8]
    if (error) {
 8010dfa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d002      	beq.n	8010e08 <sensirion_i2c_read_data_inplace+0x4c>
        return error;
 8010e02:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010e06:	e038      	b.n	8010e7a <sensirion_i2c_read_data_inplace+0xbe>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8010e08:	2300      	movs	r3, #0
 8010e0a:	81fb      	strh	r3, [r7, #14]
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	81bb      	strh	r3, [r7, #12]
 8010e10:	e02e      	b.n	8010e70 <sensirion_i2c_read_data_inplace+0xb4>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8010e12:	89fb      	ldrh	r3, [r7, #14]
 8010e14:	683a      	ldr	r2, [r7, #0]
 8010e16:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8010e18:	89fb      	ldrh	r3, [r7, #14]
 8010e1a:	3302      	adds	r3, #2
 8010e1c:	683a      	ldr	r2, [r7, #0]
 8010e1e:	4413      	add	r3, r2
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8010e20:	781b      	ldrb	r3, [r3, #0]
 8010e22:	461a      	mov	r2, r3
 8010e24:	2102      	movs	r1, #2
 8010e26:	f7ff ff49 	bl	8010cbc <sensirion_i2c_check_crc>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	813b      	strh	r3, [r7, #8]
        if (error) {
 8010e2e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d002      	beq.n	8010e3c <sensirion_i2c_read_data_inplace+0x80>
            return error;
 8010e36:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010e3a:	e01e      	b.n	8010e7a <sensirion_i2c_read_data_inplace+0xbe>
        }
        buffer[j++] = buffer[i];
 8010e3c:	89fb      	ldrh	r3, [r7, #14]
 8010e3e:	683a      	ldr	r2, [r7, #0]
 8010e40:	441a      	add	r2, r3
 8010e42:	89bb      	ldrh	r3, [r7, #12]
 8010e44:	1c59      	adds	r1, r3, #1
 8010e46:	81b9      	strh	r1, [r7, #12]
 8010e48:	4619      	mov	r1, r3
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	440b      	add	r3, r1
 8010e4e:	7812      	ldrb	r2, [r2, #0]
 8010e50:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8010e52:	89fb      	ldrh	r3, [r7, #14]
 8010e54:	3301      	adds	r3, #1
 8010e56:	683a      	ldr	r2, [r7, #0]
 8010e58:	441a      	add	r2, r3
 8010e5a:	89bb      	ldrh	r3, [r7, #12]
 8010e5c:	1c59      	adds	r1, r3, #1
 8010e5e:	81b9      	strh	r1, [r7, #12]
 8010e60:	4619      	mov	r1, r3
 8010e62:	683b      	ldr	r3, [r7, #0]
 8010e64:	440b      	add	r3, r1
 8010e66:	7812      	ldrb	r2, [r2, #0]
 8010e68:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8010e6a:	89fb      	ldrh	r3, [r7, #14]
 8010e6c:	3303      	adds	r3, #3
 8010e6e:	81fb      	strh	r3, [r7, #14]
 8010e70:	89fa      	ldrh	r2, [r7, #14]
 8010e72:	897b      	ldrh	r3, [r7, #10]
 8010e74:	429a      	cmp	r2, r3
 8010e76:	d3cc      	bcc.n	8010e12 <sensirion_i2c_read_data_inplace+0x56>
    }

    return NO_ERROR;
 8010e78:	2300      	movs	r3, #0
}
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	3710      	adds	r7, #16
 8010e7e:	46bd      	mov	sp, r7
 8010e80:	bd80      	pop	{r7, pc}
	...

08010e84 <sensirion_i2c_hal_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_hal_init(void) {
 8010e84:	b580      	push	{r7, lr}
 8010e86:	af00      	add	r7, sp, #0
    /* TODO:IMPLEMENT */
	HAL_I2C_DeInit(&hi2c1);
 8010e88:	4814      	ldr	r0, [pc, #80]	; (8010edc <sensirion_i2c_hal_init+0x58>)
 8010e8a:	f7f3 fc9f 	bl	80047cc <HAL_I2C_DeInit>
	  hi2c1.Instance = I2C1;
 8010e8e:	4b13      	ldr	r3, [pc, #76]	; (8010edc <sensirion_i2c_hal_init+0x58>)
 8010e90:	4a13      	ldr	r2, [pc, #76]	; (8010ee0 <sensirion_i2c_hal_init+0x5c>)
 8010e92:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = 400000;
 8010e94:	4b11      	ldr	r3, [pc, #68]	; (8010edc <sensirion_i2c_hal_init+0x58>)
 8010e96:	4a13      	ldr	r2, [pc, #76]	; (8010ee4 <sensirion_i2c_hal_init+0x60>)
 8010e98:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8010e9a:	4b10      	ldr	r3, [pc, #64]	; (8010edc <sensirion_i2c_hal_init+0x58>)
 8010e9c:	2200      	movs	r2, #0
 8010e9e:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0;
 8010ea0:	4b0e      	ldr	r3, [pc, #56]	; (8010edc <sensirion_i2c_hal_init+0x58>)
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8010ea6:	4b0d      	ldr	r3, [pc, #52]	; (8010edc <sensirion_i2c_hal_init+0x58>)
 8010ea8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8010eac:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8010eae:	4b0b      	ldr	r3, [pc, #44]	; (8010edc <sensirion_i2c_hal_init+0x58>)
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 8010eb4:	4b09      	ldr	r3, [pc, #36]	; (8010edc <sensirion_i2c_hal_init+0x58>)
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8010eba:	4b08      	ldr	r3, [pc, #32]	; (8010edc <sensirion_i2c_hal_init+0x58>)
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8010ec0:	4b06      	ldr	r3, [pc, #24]	; (8010edc <sensirion_i2c_hal_init+0x58>)
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8010ec6:	4805      	ldr	r0, [pc, #20]	; (8010edc <sensirion_i2c_hal_init+0x58>)
 8010ec8:	f7f3 fb3c 	bl	8004544 <HAL_I2C_Init>
 8010ecc:	4603      	mov	r3, r0
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d001      	beq.n	8010ed6 <sensirion_i2c_hal_init+0x52>
	  {
	    Error_Handler();
 8010ed2:	f7f1 fa63 	bl	800239c <Error_Handler>
	  }
}
 8010ed6:	bf00      	nop
 8010ed8:	bd80      	pop	{r7, pc}
 8010eda:	bf00      	nop
 8010edc:	200007c0 	.word	0x200007c0
 8010ee0:	40005400 	.word	0x40005400
 8010ee4:	00061a80 	.word	0x00061a80

08010ee8 <sensirion_i2c_hal_free>:

/**
 * Release all resources initialized by sensirion_i2c_hal_init().
 */
void sensirion_i2c_hal_free(void) {
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	af00      	add	r7, sp, #0
    /* TODO:IMPLEMENT or leave empty if no resources need to be freed */
HAL_I2C_DeInit(&hi2c1);
 8010eec:	4803      	ldr	r0, [pc, #12]	; (8010efc <sensirion_i2c_hal_free+0x14>)
 8010eee:	f7f3 fc6d 	bl	80047cc <HAL_I2C_DeInit>
HAL_I2C_MspDeInit(&hi2c1);
 8010ef2:	4802      	ldr	r0, [pc, #8]	; (8010efc <sensirion_i2c_hal_free+0x14>)
 8010ef4:	f7f1 fb2a 	bl	800254c <HAL_I2C_MspDeInit>
}
 8010ef8:	bf00      	nop
 8010efa:	bd80      	pop	{r7, pc}
 8010efc:	200007c0 	.word	0x200007c0

08010f00 <sensirion_i2c_hal_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b084      	sub	sp, #16
 8010f04:	af02      	add	r7, sp, #8
 8010f06:	4603      	mov	r3, r0
 8010f08:	6039      	str	r1, [r7, #0]
 8010f0a:	71fb      	strb	r3, [r7, #7]
 8010f0c:	4613      	mov	r3, r2
 8010f0e:	80bb      	strh	r3, [r7, #4]
    /* TODO:IMPLEMENT */
    return HAL_I2C_Master_Receive(&hi2c1,(uint16_t)(address << 1),data,count,HAL_MAX_DELAY);
 8010f10:	79fb      	ldrb	r3, [r7, #7]
 8010f12:	b29b      	uxth	r3, r3
 8010f14:	005b      	lsls	r3, r3, #1
 8010f16:	b299      	uxth	r1, r3
 8010f18:	88bb      	ldrh	r3, [r7, #4]
 8010f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8010f1e:	9200      	str	r2, [sp, #0]
 8010f20:	683a      	ldr	r2, [r7, #0]
 8010f22:	4804      	ldr	r0, [pc, #16]	; (8010f34 <sensirion_i2c_hal_read+0x34>)
 8010f24:	f7f3 fd80 	bl	8004a28 <HAL_I2C_Master_Receive>
 8010f28:	4603      	mov	r3, r0
 8010f2a:	b25b      	sxtb	r3, r3
	//return NOT_IMPLEMENTED_ERROR;
}
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	3708      	adds	r7, #8
 8010f30:	46bd      	mov	sp, r7
 8010f32:	bd80      	pop	{r7, pc}
 8010f34:	200007c0 	.word	0x200007c0

08010f38 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data,
                               uint16_t count) {
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b084      	sub	sp, #16
 8010f3c:	af02      	add	r7, sp, #8
 8010f3e:	4603      	mov	r3, r0
 8010f40:	6039      	str	r1, [r7, #0]
 8010f42:	71fb      	strb	r3, [r7, #7]
 8010f44:	4613      	mov	r3, r2
 8010f46:	80bb      	strh	r3, [r7, #4]
    /* TODO:IMPLEMENT */
	return HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)(address << 1),data,count,HAL_MAX_DELAY);
 8010f48:	79fb      	ldrb	r3, [r7, #7]
 8010f4a:	b29b      	uxth	r3, r3
 8010f4c:	005b      	lsls	r3, r3, #1
 8010f4e:	b299      	uxth	r1, r3
 8010f50:	88bb      	ldrh	r3, [r7, #4]
 8010f52:	f04f 32ff 	mov.w	r2, #4294967295
 8010f56:	9200      	str	r2, [sp, #0]
 8010f58:	683a      	ldr	r2, [r7, #0]
 8010f5a:	4804      	ldr	r0, [pc, #16]	; (8010f6c <sensirion_i2c_hal_write+0x34>)
 8010f5c:	f7f3 fc66 	bl	800482c <HAL_I2C_Master_Transmit>
 8010f60:	4603      	mov	r3, r0
 8010f62:	b25b      	sxtb	r3, r3
	//return NOT_IMPLEMENTED_ERROR;
}
 8010f64:	4618      	mov	r0, r3
 8010f66:	3708      	adds	r7, #8
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	bd80      	pop	{r7, pc}
 8010f6c:	200007c0 	.word	0x200007c0

08010f70 <sensirion_i2c_hal_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b082      	sub	sp, #8
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
    /* TODO:IMPLEMENT */

	HAL_Delay(useconds/1000);
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	4a05      	ldr	r2, [pc, #20]	; (8010f90 <sensirion_i2c_hal_sleep_usec+0x20>)
 8010f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8010f80:	099b      	lsrs	r3, r3, #6
 8010f82:	4618      	mov	r0, r3
 8010f84:	f7f1 fe86 	bl	8002c94 <HAL_Delay>
}
 8010f88:	bf00      	nop
 8010f8a:	3708      	adds	r7, #8
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bd80      	pop	{r7, pc}
 8010f90:	10624dd3 	.word	0x10624dd3

08010f94 <sensirion_bytes_to_uint32_t>:

uint16_t sensirion_bytes_to_uint16_t(const uint8_t* bytes) {
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
}

uint32_t sensirion_bytes_to_uint32_t(const uint8_t* bytes) {
 8010f94:	b480      	push	{r7}
 8010f96:	b083      	sub	sp, #12
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	781b      	ldrb	r3, [r3, #0]
 8010fa0:	061a      	lsls	r2, r3, #24
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	3301      	adds	r3, #1
 8010fa6:	781b      	ldrb	r3, [r3, #0]
 8010fa8:	041b      	lsls	r3, r3, #16
 8010faa:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	3302      	adds	r3, #2
 8010fb0:	781b      	ldrb	r3, [r3, #0]
 8010fb2:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8010fb4:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8010fb6:	687a      	ldr	r2, [r7, #4]
 8010fb8:	3203      	adds	r2, #3
 8010fba:	7812      	ldrb	r2, [r2, #0]
 8010fbc:	4313      	orrs	r3, r2
}
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	370c      	adds	r7, #12
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc8:	4770      	bx	lr

08010fca <sensirion_bytes_to_float>:

int32_t sensirion_bytes_to_int32_t(const uint8_t* bytes) {
    return (int32_t)sensirion_bytes_to_uint32_t(bytes);
}

float sensirion_bytes_to_float(const uint8_t* bytes) {
 8010fca:	b580      	push	{r7, lr}
 8010fcc:	b084      	sub	sp, #16
 8010fce:	af00      	add	r7, sp, #0
 8010fd0:	6078      	str	r0, [r7, #4]
    union {
        uint32_t u32_value;
        float float32;
    } tmp;

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
 8010fd2:	6878      	ldr	r0, [r7, #4]
 8010fd4:	f7ff ffde 	bl	8010f94 <sensirion_bytes_to_uint32_t>
 8010fd8:	4603      	mov	r3, r0
 8010fda:	60fb      	str	r3, [r7, #12]
    return tmp.float32;
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	ee07 3a90 	vmov	s15, r3
}
 8010fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8010fe6:	3710      	adds	r7, #16
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	bd80      	pop	{r7, pc}

08010fec <sensirion_uint32_t_to_bytes>:

void sensirion_uint32_t_to_bytes(const uint32_t value, uint8_t* bytes) {
 8010fec:	b480      	push	{r7}
 8010fee:	b083      	sub	sp, #12
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
 8010ff4:	6039      	str	r1, [r7, #0]
    bytes[0] = value >> 24;
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	0e1b      	lsrs	r3, r3, #24
 8010ffa:	b2da      	uxtb	r2, r3
 8010ffc:	683b      	ldr	r3, [r7, #0]
 8010ffe:	701a      	strb	r2, [r3, #0]
    bytes[1] = value >> 16;
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	0c1a      	lsrs	r2, r3, #16
 8011004:	683b      	ldr	r3, [r7, #0]
 8011006:	3301      	adds	r3, #1
 8011008:	b2d2      	uxtb	r2, r2
 801100a:	701a      	strb	r2, [r3, #0]
    bytes[2] = value >> 8;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	0a1a      	lsrs	r2, r3, #8
 8011010:	683b      	ldr	r3, [r7, #0]
 8011012:	3302      	adds	r3, #2
 8011014:	b2d2      	uxtb	r2, r2
 8011016:	701a      	strb	r2, [r3, #0]
    bytes[3] = value;
 8011018:	683b      	ldr	r3, [r7, #0]
 801101a:	3303      	adds	r3, #3
 801101c:	687a      	ldr	r2, [r7, #4]
 801101e:	b2d2      	uxtb	r2, r2
 8011020:	701a      	strb	r2, [r3, #0]
}
 8011022:	bf00      	nop
 8011024:	370c      	adds	r7, #12
 8011026:	46bd      	mov	sp, r7
 8011028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102c:	4770      	bx	lr

0801102e <sensirion_shdlc_crc>:
    tmp.float32 = value;
    sensirion_uint32_t_to_bytes(tmp.u32_value, bytes);
}

static uint8_t sensirion_shdlc_crc(uint8_t header_sum, uint8_t data_len,
                                   const uint8_t* data) {
 801102e:	b480      	push	{r7}
 8011030:	b083      	sub	sp, #12
 8011032:	af00      	add	r7, sp, #0
 8011034:	4603      	mov	r3, r0
 8011036:	603a      	str	r2, [r7, #0]
 8011038:	71fb      	strb	r3, [r7, #7]
 801103a:	460b      	mov	r3, r1
 801103c:	71bb      	strb	r3, [r7, #6]
    header_sum += data_len;
 801103e:	79fa      	ldrb	r2, [r7, #7]
 8011040:	79bb      	ldrb	r3, [r7, #6]
 8011042:	4413      	add	r3, r2
 8011044:	71fb      	strb	r3, [r7, #7]

    while (data_len--)
 8011046:	e006      	b.n	8011056 <sensirion_shdlc_crc+0x28>
        header_sum += *(data++);
 8011048:	683b      	ldr	r3, [r7, #0]
 801104a:	1c5a      	adds	r2, r3, #1
 801104c:	603a      	str	r2, [r7, #0]
 801104e:	781a      	ldrb	r2, [r3, #0]
 8011050:	79fb      	ldrb	r3, [r7, #7]
 8011052:	4413      	add	r3, r2
 8011054:	71fb      	strb	r3, [r7, #7]
    while (data_len--)
 8011056:	79bb      	ldrb	r3, [r7, #6]
 8011058:	1e5a      	subs	r2, r3, #1
 801105a:	71ba      	strb	r2, [r7, #6]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d1f3      	bne.n	8011048 <sensirion_shdlc_crc+0x1a>

    return ~header_sum;
 8011060:	79fb      	ldrb	r3, [r7, #7]
 8011062:	43db      	mvns	r3, r3
 8011064:	b2db      	uxtb	r3, r3
}
 8011066:	4618      	mov	r0, r3
 8011068:	370c      	adds	r7, #12
 801106a:	46bd      	mov	sp, r7
 801106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011070:	4770      	bx	lr

08011072 <sensirion_shdlc_stuff_data>:

static uint16_t sensirion_shdlc_stuff_data(uint8_t data_len,
                                           const uint8_t* data,
                                           uint8_t* stuffed_data) {
 8011072:	b480      	push	{r7}
 8011074:	b087      	sub	sp, #28
 8011076:	af00      	add	r7, sp, #0
 8011078:	4603      	mov	r3, r0
 801107a:	60b9      	str	r1, [r7, #8]
 801107c:	607a      	str	r2, [r7, #4]
 801107e:	73fb      	strb	r3, [r7, #15]
    uint16_t output_data_len = 0;
 8011080:	2300      	movs	r3, #0
 8011082:	82fb      	strh	r3, [r7, #22]
    uint8_t c;

    while (data_len--) {
 8011084:	e026      	b.n	80110d4 <sensirion_shdlc_stuff_data+0x62>
        c = *(data++);
 8011086:	68bb      	ldr	r3, [r7, #8]
 8011088:	1c5a      	adds	r2, r3, #1
 801108a:	60ba      	str	r2, [r7, #8]
 801108c:	781b      	ldrb	r3, [r3, #0]
 801108e:	757b      	strb	r3, [r7, #21]
        switch (c) {
 8011090:	7d7b      	ldrb	r3, [r7, #21]
 8011092:	2b7e      	cmp	r3, #126	; 0x7e
 8011094:	dc16      	bgt.n	80110c4 <sensirion_shdlc_stuff_data+0x52>
 8011096:	2b7d      	cmp	r3, #125	; 0x7d
 8011098:	da03      	bge.n	80110a2 <sensirion_shdlc_stuff_data+0x30>
 801109a:	2b11      	cmp	r3, #17
 801109c:	d001      	beq.n	80110a2 <sensirion_shdlc_stuff_data+0x30>
 801109e:	2b13      	cmp	r3, #19
 80110a0:	d110      	bne.n	80110c4 <sensirion_shdlc_stuff_data+0x52>
            case 0x11:
            case 0x13:
            case 0x7d:
            case 0x7e:
                // byte stuffing is done by inserting 0x7d and inverting bit 5
                *(stuffed_data++) = 0x7d;
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	1c5a      	adds	r2, r3, #1
 80110a6:	607a      	str	r2, [r7, #4]
 80110a8:	227d      	movs	r2, #125	; 0x7d
 80110aa:	701a      	strb	r2, [r3, #0]
                *(stuffed_data++) = c ^ (1 << 5);
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	1c5a      	adds	r2, r3, #1
 80110b0:	607a      	str	r2, [r7, #4]
 80110b2:	7d7a      	ldrb	r2, [r7, #21]
 80110b4:	f082 0220 	eor.w	r2, r2, #32
 80110b8:	b2d2      	uxtb	r2, r2
 80110ba:	701a      	strb	r2, [r3, #0]
                output_data_len += 2;
 80110bc:	8afb      	ldrh	r3, [r7, #22]
 80110be:	3302      	adds	r3, #2
 80110c0:	82fb      	strh	r3, [r7, #22]
                break;
 80110c2:	e007      	b.n	80110d4 <sensirion_shdlc_stuff_data+0x62>
            default:
                *(stuffed_data++) = c;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	1c5a      	adds	r2, r3, #1
 80110c8:	607a      	str	r2, [r7, #4]
 80110ca:	7d7a      	ldrb	r2, [r7, #21]
 80110cc:	701a      	strb	r2, [r3, #0]
                output_data_len += 1;
 80110ce:	8afb      	ldrh	r3, [r7, #22]
 80110d0:	3301      	adds	r3, #1
 80110d2:	82fb      	strh	r3, [r7, #22]
    while (data_len--) {
 80110d4:	7bfb      	ldrb	r3, [r7, #15]
 80110d6:	1e5a      	subs	r2, r3, #1
 80110d8:	73fa      	strb	r2, [r7, #15]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d1d3      	bne.n	8011086 <sensirion_shdlc_stuff_data+0x14>
        }
    }
    return output_data_len;
 80110de:	8afb      	ldrh	r3, [r7, #22]
}
 80110e0:	4618      	mov	r0, r3
 80110e2:	371c      	adds	r7, #28
 80110e4:	46bd      	mov	sp, r7
 80110e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ea:	4770      	bx	lr

080110ec <sensirion_shdlc_check_unstuff>:

static uint8_t sensirion_shdlc_check_unstuff(uint8_t data) {
 80110ec:	b480      	push	{r7}
 80110ee:	b083      	sub	sp, #12
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	4603      	mov	r3, r0
 80110f4:	71fb      	strb	r3, [r7, #7]
    return data == 0x7d;
 80110f6:	79fb      	ldrb	r3, [r7, #7]
 80110f8:	2b7d      	cmp	r3, #125	; 0x7d
 80110fa:	bf0c      	ite	eq
 80110fc:	2301      	moveq	r3, #1
 80110fe:	2300      	movne	r3, #0
 8011100:	b2db      	uxtb	r3, r3
}
 8011102:	4618      	mov	r0, r3
 8011104:	370c      	adds	r7, #12
 8011106:	46bd      	mov	sp, r7
 8011108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110c:	4770      	bx	lr

0801110e <sensirion_shdlc_unstuff_byte>:

static uint8_t sensirion_shdlc_unstuff_byte(uint8_t data) {
 801110e:	b480      	push	{r7}
 8011110:	b083      	sub	sp, #12
 8011112:	af00      	add	r7, sp, #0
 8011114:	4603      	mov	r3, r0
 8011116:	71fb      	strb	r3, [r7, #7]
    switch (data) {
 8011118:	79fb      	ldrb	r3, [r7, #7]
 801111a:	2b5e      	cmp	r3, #94	; 0x5e
 801111c:	d010      	beq.n	8011140 <sensirion_shdlc_unstuff_byte+0x32>
 801111e:	2b5e      	cmp	r3, #94	; 0x5e
 8011120:	dc10      	bgt.n	8011144 <sensirion_shdlc_unstuff_byte+0x36>
 8011122:	2b5d      	cmp	r3, #93	; 0x5d
 8011124:	d00a      	beq.n	801113c <sensirion_shdlc_unstuff_byte+0x2e>
 8011126:	2b5d      	cmp	r3, #93	; 0x5d
 8011128:	dc0c      	bgt.n	8011144 <sensirion_shdlc_unstuff_byte+0x36>
 801112a:	2b31      	cmp	r3, #49	; 0x31
 801112c:	d002      	beq.n	8011134 <sensirion_shdlc_unstuff_byte+0x26>
 801112e:	2b33      	cmp	r3, #51	; 0x33
 8011130:	d002      	beq.n	8011138 <sensirion_shdlc_unstuff_byte+0x2a>
 8011132:	e007      	b.n	8011144 <sensirion_shdlc_unstuff_byte+0x36>
        case 0x31:
            return 0x11;
 8011134:	2311      	movs	r3, #17
 8011136:	e006      	b.n	8011146 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x33:
            return 0x13;
 8011138:	2313      	movs	r3, #19
 801113a:	e004      	b.n	8011146 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x5d:
            return 0x7d;
 801113c:	237d      	movs	r3, #125	; 0x7d
 801113e:	e002      	b.n	8011146 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x5e:
            return 0x7e;
 8011140:	237e      	movs	r3, #126	; 0x7e
 8011142:	e000      	b.n	8011146 <sensirion_shdlc_unstuff_byte+0x38>
        default:
            return data;
 8011144:	79fb      	ldrb	r3, [r7, #7]
    }
}
 8011146:	4618      	mov	r0, r3
 8011148:	370c      	adds	r7, #12
 801114a:	46bd      	mov	sp, r7
 801114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011150:	4770      	bx	lr

08011152 <sensirion_shdlc_xcv>:

int16_t sensirion_shdlc_xcv(uint8_t addr, uint8_t cmd, uint8_t tx_data_len,
                            const uint8_t* tx_data, uint8_t max_rx_data_len,
                            struct sensirion_shdlc_rx_header* rx_header,
                            uint8_t* rx_data) {
 8011152:	b580      	push	{r7, lr}
 8011154:	b084      	sub	sp, #16
 8011156:	af00      	add	r7, sp, #0
 8011158:	603b      	str	r3, [r7, #0]
 801115a:	4603      	mov	r3, r0
 801115c:	71fb      	strb	r3, [r7, #7]
 801115e:	460b      	mov	r3, r1
 8011160:	71bb      	strb	r3, [r7, #6]
 8011162:	4613      	mov	r3, r2
 8011164:	717b      	strb	r3, [r7, #5]
    int16_t ret;

    ret = sensirion_shdlc_tx(addr, cmd, tx_data_len, tx_data);
 8011166:	797a      	ldrb	r2, [r7, #5]
 8011168:	79b9      	ldrb	r1, [r7, #6]
 801116a:	79f8      	ldrb	r0, [r7, #7]
 801116c:	683b      	ldr	r3, [r7, #0]
 801116e:	f000 f818 	bl	80111a2 <sensirion_shdlc_tx>
 8011172:	4603      	mov	r3, r0
 8011174:	81fb      	strh	r3, [r7, #14]
    if (ret != 0)
 8011176:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d002      	beq.n	8011184 <sensirion_shdlc_xcv+0x32>
        return ret;
 801117e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011182:	e00a      	b.n	801119a <sensirion_shdlc_xcv+0x48>

    sensirion_sleep_usec(RX_DELAY_US);
 8011184:	f644 6020 	movw	r0, #20000	; 0x4e20
 8011188:	f000 fb08 	bl	801179c <sensirion_sleep_usec>
    return sensirion_shdlc_rx(max_rx_data_len, rx_header, rx_data);
 801118c:	7e3b      	ldrb	r3, [r7, #24]
 801118e:	6a3a      	ldr	r2, [r7, #32]
 8011190:	69f9      	ldr	r1, [r7, #28]
 8011192:	4618      	mov	r0, r3
 8011194:	f000 f8d8 	bl	8011348 <sensirion_shdlc_rx>
 8011198:	4603      	mov	r3, r0
}
 801119a:	4618      	mov	r0, r3
 801119c:	3710      	adds	r7, #16
 801119e:	46bd      	mov	sp, r7
 80111a0:	bd80      	pop	{r7, pc}

080111a2 <sensirion_shdlc_tx>:

int16_t sensirion_shdlc_tx(uint8_t addr, uint8_t cmd, uint8_t data_len,
                           const uint8_t* data) {
 80111a2:	b590      	push	{r4, r7, lr}
 80111a4:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	4604      	mov	r4, r0
 80111ac:	4608      	mov	r0, r1
 80111ae:	4611      	mov	r1, r2
 80111b0:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80111b4:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80111b8:	6013      	str	r3, [r2, #0]
 80111ba:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80111be:	f2a3 2311 	subw	r3, r3, #529	; 0x211
 80111c2:	4622      	mov	r2, r4
 80111c4:	701a      	strb	r2, [r3, #0]
 80111c6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80111ca:	f2a3 2312 	subw	r3, r3, #530	; 0x212
 80111ce:	4602      	mov	r2, r0
 80111d0:	701a      	strb	r2, [r3, #0]
 80111d2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80111d6:	f2a3 2313 	subw	r3, r3, #531	; 0x213
 80111da:	460a      	mov	r2, r1
 80111dc:	701a      	strb	r2, [r3, #0]
    uint16_t len = 0;
 80111de:	2300      	movs	r3, #0
 80111e0:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    int16_t ret;
    uint8_t crc;
    uint8_t tx_frame_buf[SHDLC_FRAME_MAX_TX_FRAME_SIZE];

    crc = sensirion_shdlc_crc(addr + cmd, data_len, data);
 80111e4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80111e8:	f2a3 2311 	subw	r3, r3, #529	; 0x211
 80111ec:	781a      	ldrb	r2, [r3, #0]
 80111ee:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80111f2:	f2a3 2312 	subw	r3, r3, #530	; 0x212
 80111f6:	781b      	ldrb	r3, [r3, #0]
 80111f8:	4413      	add	r3, r2
 80111fa:	b2d8      	uxtb	r0, r3
 80111fc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8011200:	f2a3 2313 	subw	r3, r3, #531	; 0x213
 8011204:	7819      	ldrb	r1, [r3, #0]
 8011206:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801120a:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 801120e:	681a      	ldr	r2, [r3, #0]
 8011210:	f7ff ff0d 	bl	801102e <sensirion_shdlc_crc>
 8011214:	4603      	mov	r3, r0
 8011216:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213

    tx_frame_buf[len++] = SHDLC_START;
 801121a:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 801121e:	1c5a      	adds	r2, r3, #1
 8011220:	f8a7 2216 	strh.w	r2, [r7, #534]	; 0x216
 8011224:	461a      	mov	r2, r3
 8011226:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801122a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801122e:	217e      	movs	r1, #126	; 0x7e
 8011230:	5499      	strb	r1, [r3, r2]
    len += sensirion_shdlc_stuff_data(1, &addr, tx_frame_buf + len);
 8011232:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8011236:	f107 0208 	add.w	r2, r7, #8
 801123a:	441a      	add	r2, r3
 801123c:	1dfb      	adds	r3, r7, #7
 801123e:	4619      	mov	r1, r3
 8011240:	2001      	movs	r0, #1
 8011242:	f7ff ff16 	bl	8011072 <sensirion_shdlc_stuff_data>
 8011246:	4603      	mov	r3, r0
 8011248:	461a      	mov	r2, r3
 801124a:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 801124e:	4413      	add	r3, r2
 8011250:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    len += sensirion_shdlc_stuff_data(1, &cmd, tx_frame_buf + len);
 8011254:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8011258:	f107 0208 	add.w	r2, r7, #8
 801125c:	441a      	add	r2, r3
 801125e:	1dbb      	adds	r3, r7, #6
 8011260:	4619      	mov	r1, r3
 8011262:	2001      	movs	r0, #1
 8011264:	f7ff ff05 	bl	8011072 <sensirion_shdlc_stuff_data>
 8011268:	4603      	mov	r3, r0
 801126a:	461a      	mov	r2, r3
 801126c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8011270:	4413      	add	r3, r2
 8011272:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    len += sensirion_shdlc_stuff_data(1, &data_len, tx_frame_buf + len);
 8011276:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 801127a:	f107 0208 	add.w	r2, r7, #8
 801127e:	441a      	add	r2, r3
 8011280:	1d7b      	adds	r3, r7, #5
 8011282:	4619      	mov	r1, r3
 8011284:	2001      	movs	r0, #1
 8011286:	f7ff fef4 	bl	8011072 <sensirion_shdlc_stuff_data>
 801128a:	4603      	mov	r3, r0
 801128c:	461a      	mov	r2, r3
 801128e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8011292:	4413      	add	r3, r2
 8011294:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    len += sensirion_shdlc_stuff_data(data_len, data, tx_frame_buf + len);
 8011298:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801129c:	f2a3 2313 	subw	r3, r3, #531	; 0x213
 80112a0:	7818      	ldrb	r0, [r3, #0]
 80112a2:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80112a6:	f107 0208 	add.w	r2, r7, #8
 80112aa:	441a      	add	r2, r3
 80112ac:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80112b0:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80112b4:	6819      	ldr	r1, [r3, #0]
 80112b6:	f7ff fedc 	bl	8011072 <sensirion_shdlc_stuff_data>
 80112ba:	4603      	mov	r3, r0
 80112bc:	461a      	mov	r2, r3
 80112be:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80112c2:	4413      	add	r3, r2
 80112c4:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    len += sensirion_shdlc_stuff_data(1, &crc, tx_frame_buf + len);
 80112c8:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80112cc:	f107 0208 	add.w	r2, r7, #8
 80112d0:	441a      	add	r2, r3
 80112d2:	f207 2313 	addw	r3, r7, #531	; 0x213
 80112d6:	4619      	mov	r1, r3
 80112d8:	2001      	movs	r0, #1
 80112da:	f7ff feca 	bl	8011072 <sensirion_shdlc_stuff_data>
 80112de:	4603      	mov	r3, r0
 80112e0:	461a      	mov	r2, r3
 80112e2:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80112e6:	4413      	add	r3, r2
 80112e8:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    tx_frame_buf[len++] = SHDLC_STOP;
 80112ec:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80112f0:	1c5a      	adds	r2, r3, #1
 80112f2:	f8a7 2216 	strh.w	r2, [r7, #534]	; 0x216
 80112f6:	461a      	mov	r2, r3
 80112f8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80112fc:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8011300:	217e      	movs	r1, #126	; 0x7e
 8011302:	5499      	strb	r1, [r3, r2]

    ret = sensirion_uart_tx(len, tx_frame_buf);
 8011304:	f107 0208 	add.w	r2, r7, #8
 8011308:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 801130c:	4611      	mov	r1, r2
 801130e:	4618      	mov	r0, r3
 8011310:	f000 f9dc 	bl	80116cc <sensirion_uart_tx>
 8011314:	4603      	mov	r3, r0
 8011316:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
    if (ret < 0)
 801131a:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 801131e:	2b00      	cmp	r3, #0
 8011320:	da02      	bge.n	8011328 <sensirion_shdlc_tx+0x186>
        return ret;
 8011322:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 8011326:	e009      	b.n	801133c <sensirion_shdlc_tx+0x19a>
    if (ret != len)
 8011328:	f9b7 2214 	ldrsh.w	r2, [r7, #532]	; 0x214
 801132c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8011330:	429a      	cmp	r2, r3
 8011332:	d002      	beq.n	801133a <sensirion_shdlc_tx+0x198>
        return SENSIRION_SHDLC_ERR_TX_INCOMPLETE;
 8011334:	f06f 0305 	mvn.w	r3, #5
 8011338:	e000      	b.n	801133c <sensirion_shdlc_tx+0x19a>
    return 0;
 801133a:	2300      	movs	r3, #0
}
 801133c:	4618      	mov	r0, r3
 801133e:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8011342:	46bd      	mov	sp, r7
 8011344:	bd90      	pop	{r4, r7, pc}
	...

08011348 <sensirion_shdlc_rx>:

int16_t sensirion_shdlc_rx(uint8_t max_data_len,
                           struct sensirion_shdlc_rx_header* rxh,
                           uint8_t* data) {
 8011348:	b590      	push	{r4, r7, lr}
 801134a:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 801134e:	af00      	add	r7, sp, #0
 8011350:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8011354:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8011358:	6019      	str	r1, [r3, #0]
 801135a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801135e:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8011362:	601a      	str	r2, [r3, #0]
 8011364:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8011368:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 801136c:	4602      	mov	r2, r0
 801136e:	701a      	strb	r2, [r3, #0]
    int16_t len;
    uint16_t i;
    uint8_t rx_frame[SHDLC_FRAME_MAX_RX_FRAME_SIZE];
    uint8_t* rx_header = (uint8_t*)rxh;
 8011370:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8011374:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    uint8_t j;
    uint8_t crc;
    uint8_t unstuff_next;

    len = sensirion_uart_rx(2 + (5 + (uint16_t)max_data_len) * 2, rx_frame);
 801137e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8011382:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 8011386:	781b      	ldrb	r3, [r3, #0]
 8011388:	3306      	adds	r3, #6
 801138a:	b29b      	uxth	r3, r3
 801138c:	005b      	lsls	r3, r3, #1
 801138e:	b29b      	uxth	r3, r3
 8011390:	f107 0210 	add.w	r2, r7, #16
 8011394:	4611      	mov	r1, r2
 8011396:	4618      	mov	r0, r3
 8011398:	f000 f9d2 	bl	8011740 <sensirion_uart_rx>
 801139c:	4603      	mov	r3, r0
 801139e:	f8a7 321a 	strh.w	r3, [r7, #538]	; 0x21a


//      printf("First byte is : %02X \r\n", RX_Data[0]);
//      printf("Total %d bytes received \r\n", len);

      if (len < 1 || RX_Data[0] != SHDLC_START)
 80113a2:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	; 0x21a
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	dd03      	ble.n	80113b2 <sensirion_shdlc_rx+0x6a>
 80113aa:	4ba0      	ldr	r3, [pc, #640]	; (801162c <sensirion_shdlc_rx+0x2e4>)
 80113ac:	781b      	ldrb	r3, [r3, #0]
 80113ae:	2b7e      	cmp	r3, #126	; 0x7e
 80113b0:	d002      	beq.n	80113b8 <sensirion_shdlc_rx+0x70>
        return SENSIRION_SHDLC_ERR_MISSING_START;
 80113b2:	f06f 0301 	mvn.w	r3, #1
 80113b6:	e133      	b.n	8011620 <sensirion_shdlc_rx+0x2d8>

    for (unstuff_next = 0, i = 1, j = 0; j < sizeof(*rxh) && i < len - 2; ++i) {
 80113b8:	2300      	movs	r3, #0
 80113ba:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
 80113be:	2301      	movs	r3, #1
 80113c0:	f8a7 3226 	strh.w	r3, [r7, #550]	; 0x226
 80113c4:	2300      	movs	r3, #0
 80113c6:	f887 3225 	strb.w	r3, [r7, #549]	; 0x225
 80113ca:	e03a      	b.n	8011442 <sensirion_shdlc_rx+0xfa>
        if (unstuff_next) {
 80113cc:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d015      	beq.n	8011400 <sensirion_shdlc_rx+0xb8>
            rx_header[j++] = sensirion_shdlc_unstuff_byte(RX_Data[i]);
 80113d4:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 80113d8:	4a94      	ldr	r2, [pc, #592]	; (801162c <sensirion_shdlc_rx+0x2e4>)
 80113da:	5cd2      	ldrb	r2, [r2, r3]
 80113dc:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 80113e0:	1c59      	adds	r1, r3, #1
 80113e2:	f887 1225 	strb.w	r1, [r7, #549]	; 0x225
 80113e6:	4619      	mov	r1, r3
 80113e8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80113ec:	185c      	adds	r4, r3, r1
 80113ee:	4610      	mov	r0, r2
 80113f0:	f7ff fe8d 	bl	801110e <sensirion_shdlc_unstuff_byte>
 80113f4:	4603      	mov	r3, r0
 80113f6:	7023      	strb	r3, [r4, #0]
            unstuff_next = 0;
 80113f8:	2300      	movs	r3, #0
 80113fa:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
 80113fe:	e01b      	b.n	8011438 <sensirion_shdlc_rx+0xf0>
        } else {
            unstuff_next = sensirion_shdlc_check_unstuff(RX_Data[i]);
 8011400:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8011404:	4a89      	ldr	r2, [pc, #548]	; (801162c <sensirion_shdlc_rx+0x2e4>)
 8011406:	5cd3      	ldrb	r3, [r2, r3]
 8011408:	4618      	mov	r0, r3
 801140a:	f7ff fe6f 	bl	80110ec <sensirion_shdlc_check_unstuff>
 801140e:	4603      	mov	r3, r0
 8011410:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
            if (!unstuff_next)
 8011414:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8011418:	2b00      	cmp	r3, #0
 801141a:	d10d      	bne.n	8011438 <sensirion_shdlc_rx+0xf0>
                rx_header[j++] = RX_Data[i];
 801141c:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 8011420:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 8011424:	1c59      	adds	r1, r3, #1
 8011426:	f887 1225 	strb.w	r1, [r7, #549]	; 0x225
 801142a:	4619      	mov	r1, r3
 801142c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8011430:	440b      	add	r3, r1
 8011432:	497e      	ldr	r1, [pc, #504]	; (801162c <sensirion_shdlc_rx+0x2e4>)
 8011434:	5c8a      	ldrb	r2, [r1, r2]
 8011436:	701a      	strb	r2, [r3, #0]
    for (unstuff_next = 0, i = 1, j = 0; j < sizeof(*rxh) && i < len - 2; ++i) {
 8011438:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 801143c:	3301      	adds	r3, #1
 801143e:	f8a7 3226 	strh.w	r3, [r7, #550]	; 0x226
 8011442:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 8011446:	2b03      	cmp	r3, #3
 8011448:	d806      	bhi.n	8011458 <sensirion_shdlc_rx+0x110>
 801144a:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 801144e:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	; 0x21a
 8011452:	3b02      	subs	r3, #2
 8011454:	429a      	cmp	r2, r3
 8011456:	dbb9      	blt.n	80113cc <sensirion_shdlc_rx+0x84>
        }
    }
    if (j != sizeof(*rxh) || unstuff_next)
 8011458:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 801145c:	2b04      	cmp	r3, #4
 801145e:	d103      	bne.n	8011468 <sensirion_shdlc_rx+0x120>
 8011460:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8011464:	2b00      	cmp	r3, #0
 8011466:	d002      	beq.n	801146e <sensirion_shdlc_rx+0x126>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 8011468:	f06f 0304 	mvn.w	r3, #4
 801146c:	e0d8      	b.n	8011620 <sensirion_shdlc_rx+0x2d8>

    if (max_data_len < rxh->data_len)
 801146e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8011472:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	78db      	ldrb	r3, [r3, #3]
 801147a:	f507 720a 	add.w	r2, r7, #552	; 0x228
 801147e:	f2a2 2219 	subw	r2, r2, #537	; 0x219
 8011482:	7812      	ldrb	r2, [r2, #0]
 8011484:	429a      	cmp	r2, r3
 8011486:	d202      	bcs.n	801148e <sensirion_shdlc_rx+0x146>
        return SENSIRION_SHDLC_ERR_FRAME_TOO_LONG; /* more data than expected */
 8011488:	f06f 0306 	mvn.w	r3, #6
 801148c:	e0c8      	b.n	8011620 <sensirion_shdlc_rx+0x2d8>

    for (unstuff_next = 0, j = 0; j < rxh->data_len && i < len - 2; ++i) {
 801148e:	2300      	movs	r3, #0
 8011490:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
 8011494:	2300      	movs	r3, #0
 8011496:	f887 3225 	strb.w	r3, [r7, #549]	; 0x225
 801149a:	e040      	b.n	801151e <sensirion_shdlc_rx+0x1d6>
        if (unstuff_next) {
 801149c:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d018      	beq.n	80114d6 <sensirion_shdlc_rx+0x18e>
            data[j++] = sensirion_shdlc_unstuff_byte(RX_Data[i]);
 80114a4:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 80114a8:	4a60      	ldr	r2, [pc, #384]	; (801162c <sensirion_shdlc_rx+0x2e4>)
 80114aa:	5cd2      	ldrb	r2, [r2, r3]
 80114ac:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 80114b0:	1c59      	adds	r1, r3, #1
 80114b2:	f887 1225 	strb.w	r1, [r7, #549]	; 0x225
 80114b6:	4619      	mov	r1, r3
 80114b8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80114bc:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	185c      	adds	r4, r3, r1
 80114c4:	4610      	mov	r0, r2
 80114c6:	f7ff fe22 	bl	801110e <sensirion_shdlc_unstuff_byte>
 80114ca:	4603      	mov	r3, r0
 80114cc:	7023      	strb	r3, [r4, #0]
            unstuff_next = 0;
 80114ce:	2300      	movs	r3, #0
 80114d0:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
 80114d4:	e01e      	b.n	8011514 <sensirion_shdlc_rx+0x1cc>
        } else {
            unstuff_next = sensirion_shdlc_check_unstuff(RX_Data[i]);
 80114d6:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 80114da:	4a54      	ldr	r2, [pc, #336]	; (801162c <sensirion_shdlc_rx+0x2e4>)
 80114dc:	5cd3      	ldrb	r3, [r2, r3]
 80114de:	4618      	mov	r0, r3
 80114e0:	f7ff fe04 	bl	80110ec <sensirion_shdlc_check_unstuff>
 80114e4:	4603      	mov	r3, r0
 80114e6:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
            if (!unstuff_next)
 80114ea:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d110      	bne.n	8011514 <sensirion_shdlc_rx+0x1cc>
                data[j++] = RX_Data[i];
 80114f2:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 80114f6:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 80114fa:	1c59      	adds	r1, r3, #1
 80114fc:	f887 1225 	strb.w	r1, [r7, #549]	; 0x225
 8011500:	4619      	mov	r1, r3
 8011502:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8011506:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	440b      	add	r3, r1
 801150e:	4947      	ldr	r1, [pc, #284]	; (801162c <sensirion_shdlc_rx+0x2e4>)
 8011510:	5c8a      	ldrb	r2, [r1, r2]
 8011512:	701a      	strb	r2, [r3, #0]
    for (unstuff_next = 0, j = 0; j < rxh->data_len && i < len - 2; ++i) {
 8011514:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8011518:	3301      	adds	r3, #1
 801151a:	f8a7 3226 	strh.w	r3, [r7, #550]	; 0x226
 801151e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8011522:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	78db      	ldrb	r3, [r3, #3]
 801152a:	f897 2225 	ldrb.w	r2, [r7, #549]	; 0x225
 801152e:	429a      	cmp	r2, r3
 8011530:	d206      	bcs.n	8011540 <sensirion_shdlc_rx+0x1f8>
 8011532:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 8011536:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	; 0x21a
 801153a:	3b02      	subs	r3, #2
 801153c:	429a      	cmp	r2, r3
 801153e:	dbad      	blt.n	801149c <sensirion_shdlc_rx+0x154>
        }
    }

    if (unstuff_next)
 8011540:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8011544:	2b00      	cmp	r3, #0
 8011546:	d002      	beq.n	801154e <sensirion_shdlc_rx+0x206>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 8011548:	f06f 0304 	mvn.w	r3, #4
 801154c:	e068      	b.n	8011620 <sensirion_shdlc_rx+0x2d8>

    if (j < rxh->data_len)
 801154e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8011552:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	78db      	ldrb	r3, [r3, #3]
 801155a:	f897 2225 	ldrb.w	r2, [r7, #549]	; 0x225
 801155e:	429a      	cmp	r2, r3
 8011560:	d202      	bcs.n	8011568 <sensirion_shdlc_rx+0x220>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 8011562:	f06f 0304 	mvn.w	r3, #4
 8011566:	e05b      	b.n	8011620 <sensirion_shdlc_rx+0x2d8>

    crc = RX_Data[i++];
 8011568:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 801156c:	1c5a      	adds	r2, r3, #1
 801156e:	f8a7 2226 	strh.w	r2, [r7, #550]	; 0x226
 8011572:	461a      	mov	r2, r3
 8011574:	4b2d      	ldr	r3, [pc, #180]	; (801162c <sensirion_shdlc_rx+0x2e4>)
 8011576:	5c9b      	ldrb	r3, [r3, r2]
 8011578:	f887 3224 	strb.w	r3, [r7, #548]	; 0x224
    if (sensirion_shdlc_check_unstuff(crc))
 801157c:	f897 3224 	ldrb.w	r3, [r7, #548]	; 0x224
 8011580:	4618      	mov	r0, r3
 8011582:	f7ff fdb3 	bl	80110ec <sensirion_shdlc_check_unstuff>
 8011586:	4603      	mov	r3, r0
 8011588:	2b00      	cmp	r3, #0
 801158a:	d00d      	beq.n	80115a8 <sensirion_shdlc_rx+0x260>
        crc = sensirion_shdlc_unstuff_byte(RX_Data[i++]);
 801158c:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8011590:	1c5a      	adds	r2, r3, #1
 8011592:	f8a7 2226 	strh.w	r2, [r7, #550]	; 0x226
 8011596:	461a      	mov	r2, r3
 8011598:	4b24      	ldr	r3, [pc, #144]	; (801162c <sensirion_shdlc_rx+0x2e4>)
 801159a:	5c9b      	ldrb	r3, [r3, r2]
 801159c:	4618      	mov	r0, r3
 801159e:	f7ff fdb6 	bl	801110e <sensirion_shdlc_unstuff_byte>
 80115a2:	4603      	mov	r3, r0
 80115a4:	f887 3224 	strb.w	r3, [r7, #548]	; 0x224

    if (sensirion_shdlc_crc(rxh->addr + rxh->cmd + rxh->state, rxh->data_len,
 80115a8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80115ac:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	781a      	ldrb	r2, [r3, #0]
 80115b4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80115b8:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	785b      	ldrb	r3, [r3, #1]
 80115c0:	4413      	add	r3, r2
 80115c2:	b2da      	uxtb	r2, r3
 80115c4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80115c8:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	789b      	ldrb	r3, [r3, #2]
 80115d0:	4413      	add	r3, r2
 80115d2:	b2d8      	uxtb	r0, r3
 80115d4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80115d8:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	78d9      	ldrb	r1, [r3, #3]
 80115e0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80115e4:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80115e8:	681a      	ldr	r2, [r3, #0]
 80115ea:	f7ff fd20 	bl	801102e <sensirion_shdlc_crc>
 80115ee:	4603      	mov	r3, r0
 80115f0:	461a      	mov	r2, r3
 80115f2:	f897 3224 	ldrb.w	r3, [r7, #548]	; 0x224
 80115f6:	4293      	cmp	r3, r2
 80115f8:	d002      	beq.n	8011600 <sensirion_shdlc_rx+0x2b8>
                            data) != crc)
        return SENSIRION_SHDLC_ERR_CRC_MISMATCH;
 80115fa:	f06f 0303 	mvn.w	r3, #3
 80115fe:	e00f      	b.n	8011620 <sensirion_shdlc_rx+0x2d8>

    if (i >= len || RX_Data[i] != SHDLC_STOP)
 8011600:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 8011604:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	; 0x21a
 8011608:	429a      	cmp	r2, r3
 801160a:	da05      	bge.n	8011618 <sensirion_shdlc_rx+0x2d0>
 801160c:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8011610:	4a06      	ldr	r2, [pc, #24]	; (801162c <sensirion_shdlc_rx+0x2e4>)
 8011612:	5cd3      	ldrb	r3, [r2, r3]
 8011614:	2b7e      	cmp	r3, #126	; 0x7e
 8011616:	d002      	beq.n	801161e <sensirion_shdlc_rx+0x2d6>
        return SENSIRION_SHDLC_ERR_MISSING_STOP;
 8011618:	f06f 0302 	mvn.w	r3, #2
 801161c:	e000      	b.n	8011620 <sensirion_shdlc_rx+0x2d8>

    return 0;
 801161e:	2300      	movs	r3, #0
}
 8011620:	4618      	mov	r0, r3
 8011622:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8011626:	46bd      	mov	sp, r7
 8011628:	bd90      	pop	{r4, r7, pc}
 801162a:	bf00      	nop
 801162c:	20000514 	.word	0x20000514

08011630 <sensirion_uart_open>:
/**
 * sensirion_uart_open() - initialize UART
 *
 * Return:      0 on success, an error code otherwise
 */
int16_t sensirion_uart_open() {
 8011630:	b580      	push	{r7, lr}
 8011632:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart2);
 8011634:	4819      	ldr	r0, [pc, #100]	; (801169c <sensirion_uart_open+0x6c>)
 8011636:	f7f8 fa20 	bl	8009a7a <HAL_UART_DeInit>
	  huart2.Instance = USART2;
 801163a:	4b18      	ldr	r3, [pc, #96]	; (801169c <sensirion_uart_open+0x6c>)
 801163c:	4a18      	ldr	r2, [pc, #96]	; (80116a0 <sensirion_uart_open+0x70>)
 801163e:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 8011640:	4b16      	ldr	r3, [pc, #88]	; (801169c <sensirion_uart_open+0x6c>)
 8011642:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8011646:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8011648:	4b14      	ldr	r3, [pc, #80]	; (801169c <sensirion_uart_open+0x6c>)
 801164a:	2200      	movs	r2, #0
 801164c:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 801164e:	4b13      	ldr	r3, [pc, #76]	; (801169c <sensirion_uart_open+0x6c>)
 8011650:	2200      	movs	r2, #0
 8011652:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8011654:	4b11      	ldr	r3, [pc, #68]	; (801169c <sensirion_uart_open+0x6c>)
 8011656:	2200      	movs	r2, #0
 8011658:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 801165a:	4b10      	ldr	r3, [pc, #64]	; (801169c <sensirion_uart_open+0x6c>)
 801165c:	220c      	movs	r2, #12
 801165e:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011660:	4b0e      	ldr	r3, [pc, #56]	; (801169c <sensirion_uart_open+0x6c>)
 8011662:	2200      	movs	r2, #0
 8011664:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8011666:	4b0d      	ldr	r3, [pc, #52]	; (801169c <sensirion_uart_open+0x6c>)
 8011668:	2200      	movs	r2, #0
 801166a:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 801166c:	480b      	ldr	r0, [pc, #44]	; (801169c <sensirion_uart_open+0x6c>)
 801166e:	f7f8 f9b7 	bl	80099e0 <HAL_UART_Init>
 8011672:	4603      	mov	r3, r0
 8011674:	2b00      	cmp	r3, #0
 8011676:	d001      	beq.n	801167c <sensirion_uart_open+0x4c>
	  {
	    Error_Handler();
 8011678:	f7f0 fe90 	bl	800239c <Error_Handler>
	  }

		HAL_UARTEx_ReceiveToIdle_IT(&huart2, RX_Data, 522);
 801167c:	f240 220a 	movw	r2, #522	; 0x20a
 8011680:	4908      	ldr	r1, [pc, #32]	; (80116a4 <sensirion_uart_open+0x74>)
 8011682:	4806      	ldr	r0, [pc, #24]	; (801169c <sensirion_uart_open+0x6c>)
 8011684:	f7f8 faea 	bl	8009c5c <HAL_UARTEx_ReceiveToIdle_IT>
		//HAL_UART_Receive_IT(&huart2, &rx_Data, 1);
		 rx_len=0;
 8011688:	4b07      	ldr	r3, [pc, #28]	; (80116a8 <sensirion_uart_open+0x78>)
 801168a:	2200      	movs	r2, #0
 801168c:	801a      	strh	r2, [r3, #0]
		rx_incre = 0;
 801168e:	4b07      	ldr	r3, [pc, #28]	; (80116ac <sensirion_uart_open+0x7c>)
 8011690:	2200      	movs	r2, #0
 8011692:	801a      	strh	r2, [r3, #0]
		//HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RX_Data, 522);
    return 0;
 8011694:	2300      	movs	r3, #0
}
 8011696:	4618      	mov	r0, r3
 8011698:	bd80      	pop	{r7, pc}
 801169a:	bf00      	nop
 801169c:	20000944 	.word	0x20000944
 80116a0:	40004400 	.word	0x40004400
 80116a4:	20000514 	.word	0x20000514
 80116a8:	200009e0 	.word	0x200009e0
 80116ac:	200009e2 	.word	0x200009e2

080116b0 <sensirion_uart_close>:
/**
 * sensirion_uart_close() - release UART resources
 *
 * Return:      0 on success, an error code otherwise
 */
int16_t sensirion_uart_close() {
 80116b0:	b580      	push	{r7, lr}
 80116b2:	af00      	add	r7, sp, #0
    // TODO: implement
	HAL_UART_DeInit(&huart2);
 80116b4:	4804      	ldr	r0, [pc, #16]	; (80116c8 <sensirion_uart_close+0x18>)
 80116b6:	f7f8 f9e0 	bl	8009a7a <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart2);
 80116ba:	4803      	ldr	r0, [pc, #12]	; (80116c8 <sensirion_uart_close+0x18>)
 80116bc:	f7f1 f8d2 	bl	8002864 <HAL_UART_MspDeInit>
    return 0;
 80116c0:	2300      	movs	r3, #0
}
 80116c2:	4618      	mov	r0, r3
 80116c4:	bd80      	pop	{r7, pc}
 80116c6:	bf00      	nop
 80116c8:	20000944 	.word	0x20000944

080116cc <sensirion_uart_tx>:
 *
 * @data_len:   number of bytes to send
 * @data:       data to send
 * Return:      Number of bytes sent or a negative error code
 */
int16_t sensirion_uart_tx(uint16_t data_len, const uint8_t* data) {
 80116cc:	b580      	push	{r7, lr}
 80116ce:	b082      	sub	sp, #8
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	4603      	mov	r3, r0
 80116d4:	6039      	str	r1, [r7, #0]
 80116d6:	80fb      	strh	r3, [r7, #6]
    // TODO: implement
	if(HAL_UART_Transmit(&huart2, data, data_len, HAL_MAX_DELAY) == HAL_OK)
 80116d8:	88fa      	ldrh	r2, [r7, #6]
 80116da:	f04f 33ff 	mov.w	r3, #4294967295
 80116de:	6839      	ldr	r1, [r7, #0]
 80116e0:	4807      	ldr	r0, [pc, #28]	; (8011700 <sensirion_uart_tx+0x34>)
 80116e2:	f7f8 f9f9 	bl	8009ad8 <HAL_UART_Transmit>
 80116e6:	4603      	mov	r3, r0
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d102      	bne.n	80116f2 <sensirion_uart_tx+0x26>
		{
			return data_len;
 80116ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80116f0:	e001      	b.n	80116f6 <sensirion_uart_tx+0x2a>
		}
		else
		{
			return -1;
 80116f2:	f04f 33ff 	mov.w	r3, #4294967295

		}

	return data_len;
}
 80116f6:	4618      	mov	r0, r3
 80116f8:	3708      	adds	r7, #8
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}
 80116fe:	bf00      	nop
 8011700:	20000944 	.word	0x20000944

08011704 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011704:	b580      	push	{r7, lr}
 8011706:	b082      	sub	sp, #8
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
 801170c:	460b      	mov	r3, r1
 801170e:	807b      	strh	r3, [r7, #2]

	rx_len = Size;
 8011710:	4a07      	ldr	r2, [pc, #28]	; (8011730 <HAL_UARTEx_RxEventCallback+0x2c>)
 8011712:	887b      	ldrh	r3, [r7, #2]
 8011714:	8013      	strh	r3, [r2, #0]
	rx_Wait = 1;
 8011716:	4b07      	ldr	r3, [pc, #28]	; (8011734 <HAL_UARTEx_RxEventCallback+0x30>)
 8011718:	2201      	movs	r2, #1
 801171a:	701a      	strb	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_IT(&huart2,RX_Data, 522);
 801171c:	f240 220a 	movw	r2, #522	; 0x20a
 8011720:	4905      	ldr	r1, [pc, #20]	; (8011738 <HAL_UARTEx_RxEventCallback+0x34>)
 8011722:	4806      	ldr	r0, [pc, #24]	; (801173c <HAL_UARTEx_RxEventCallback+0x38>)
 8011724:	f7f8 fa9a 	bl	8009c5c <HAL_UARTEx_ReceiveToIdle_IT>
}
 8011728:	bf00      	nop
 801172a:	3708      	adds	r7, #8
 801172c:	46bd      	mov	sp, r7
 801172e:	bd80      	pop	{r7, pc}
 8011730:	200009e0 	.word	0x200009e0
 8011734:	200009e4 	.word	0x200009e4
 8011738:	20000514 	.word	0x20000514
 801173c:	20000944 	.word	0x20000944

08011740 <sensirion_uart_rx>:
 *
 * @data_len:   max number of bytes to receive
 * @data:       Memory where received data is stored
 * Return:      Number of bytes received or a negative error code
 */
int16_t sensirion_uart_rx(uint16_t max_data_len, uint8_t* data) {
 8011740:	b580      	push	{r7, lr}
 8011742:	b084      	sub	sp, #16
 8011744:	af00      	add	r7, sp, #0
 8011746:	4603      	mov	r3, r0
 8011748:	6039      	str	r1, [r7, #0]
 801174a:	80fb      	strh	r3, [r7, #6]
    // TODO: implement
uint32_t counter = 0;
 801174c:	2300      	movs	r3, #0
 801174e:	60fb      	str	r3, [r7, #12]

//we give 200ms of delay
		  while(!rx_Wait && counter <= 2)
 8011750:	e005      	b.n	801175e <sensirion_uart_rx+0x1e>
		  {
			  counter++;
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	3301      	adds	r3, #1
 8011756:	60fb      	str	r3, [r7, #12]
			  HAL_Delay(10);
 8011758:	200a      	movs	r0, #10
 801175a:	f7f1 fa9b 	bl	8002c94 <HAL_Delay>
		  while(!rx_Wait && counter <= 2)
 801175e:	4b0b      	ldr	r3, [pc, #44]	; (801178c <sensirion_uart_rx+0x4c>)
 8011760:	781b      	ldrb	r3, [r3, #0]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d102      	bne.n	801176c <sensirion_uart_rx+0x2c>
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	2b02      	cmp	r3, #2
 801176a:	d9f2      	bls.n	8011752 <sensirion_uart_rx+0x12>

		  }
		    rx_Wait = 0;
 801176c:	4b07      	ldr	r3, [pc, #28]	; (801178c <sensirion_uart_rx+0x4c>)
 801176e:	2200      	movs	r2, #0
 8011770:	701a      	strb	r2, [r3, #0]

//		    if(counter > 3)
//		    {
//		    	sensirion_uart_open();
//		    }
		    len = 0;
 8011772:	4b07      	ldr	r3, [pc, #28]	; (8011790 <sensirion_uart_rx+0x50>)
 8011774:	2200      	movs	r2, #0
 8011776:	801a      	strh	r2, [r3, #0]
		    rx_incre = 0;
 8011778:	4b06      	ldr	r3, [pc, #24]	; (8011794 <sensirion_uart_rx+0x54>)
 801177a:	2200      	movs	r2, #0
 801177c:	801a      	strh	r2, [r3, #0]
	    return rx_len;
 801177e:	4b06      	ldr	r3, [pc, #24]	; (8011798 <sensirion_uart_rx+0x58>)
 8011780:	881b      	ldrh	r3, [r3, #0]
 8011782:	b21b      	sxth	r3, r3
	//return i;
}
 8011784:	4618      	mov	r0, r3
 8011786:	3710      	adds	r7, #16
 8011788:	46bd      	mov	sp, r7
 801178a:	bd80      	pop	{r7, pc}
 801178c:	200009e4 	.word	0x200009e4
 8011790:	200009e6 	.word	0x200009e6
 8011794:	200009e2 	.word	0x200009e2
 8011798:	200009e0 	.word	0x200009e0

0801179c <sensirion_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 801179c:	b580      	push	{r7, lr}
 801179e:	b082      	sub	sp, #8
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
    // TODO: implement
	useconds = (useconds/1000);
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	4a06      	ldr	r2, [pc, #24]	; (80117c0 <sensirion_sleep_usec+0x24>)
 80117a8:	fba2 2303 	umull	r2, r3, r2, r3
 80117ac:	099b      	lsrs	r3, r3, #6
 80117ae:	607b      	str	r3, [r7, #4]
	HAL_Delay(useconds);
 80117b0:	6878      	ldr	r0, [r7, #4]
 80117b2:	f7f1 fa6f 	bl	8002c94 <HAL_Delay>
}
 80117b6:	bf00      	nop
 80117b8:	3708      	adds	r7, #8
 80117ba:	46bd      	mov	sp, r7
 80117bc:	bd80      	pop	{r7, pc}
 80117be:	bf00      	nop
 80117c0:	10624dd3 	.word	0x10624dd3

080117c4 <sps30_get_serial>:
    int16_t ret = sps30_get_serial(serial);

    return ret;
}

int16_t sps30_get_serial(char* serial) {
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b08a      	sub	sp, #40	; 0x28
 80117c8:	af04      	add	r7, sp, #16
 80117ca:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    uint8_t param_buf[] = SPS30_CMD_DEV_INFO_SUBCMD_GET_SERIAL;
 80117cc:	2303      	movs	r3, #3
 80117ce:	733b      	strb	r3, [r7, #12]
    int16_t ret;

    ret = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_DEV_INFO, sizeof(param_buf),
 80117d0:	f107 020c 	add.w	r2, r7, #12
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	9302      	str	r3, [sp, #8]
 80117d8:	f107 0310 	add.w	r3, r7, #16
 80117dc:	9301      	str	r3, [sp, #4]
 80117de:	2320      	movs	r3, #32
 80117e0:	9300      	str	r3, [sp, #0]
 80117e2:	4613      	mov	r3, r2
 80117e4:	2201      	movs	r2, #1
 80117e6:	21d0      	movs	r1, #208	; 0xd0
 80117e8:	2000      	movs	r0, #0
 80117ea:	f7ff fcb2 	bl	8011152 <sensirion_shdlc_xcv>
 80117ee:	4603      	mov	r3, r0
 80117f0:	82fb      	strh	r3, [r7, #22]
                              param_buf, SPS30_MAX_SERIAL_LEN, &header,
                              (uint8_t*)serial);
    if (ret < 0)
 80117f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	da02      	bge.n	8011800 <sps30_get_serial+0x3c>
        return ret;
 80117fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80117fe:	e009      	b.n	8011814 <sps30_get_serial+0x50>

    if (header.state)
 8011800:	7cbb      	ldrb	r3, [r7, #18]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d005      	beq.n	8011812 <sps30_get_serial+0x4e>
        return SPS30_ERR_STATE(header.state);
 8011806:	7cbb      	ldrb	r3, [r7, #18]
 8011808:	b21b      	sxth	r3, r3
 801180a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801180e:	b21b      	sxth	r3, r3
 8011810:	e000      	b.n	8011814 <sps30_get_serial+0x50>

    return 0;
 8011812:	2300      	movs	r3, #0
}
 8011814:	4618      	mov	r0, r3
 8011816:	3718      	adds	r7, #24
 8011818:	46bd      	mov	sp, r7
 801181a:	bd80      	pop	{r7, pc}

0801181c <sps30_start_measurement>:

int16_t sps30_start_measurement(void) {
 801181c:	b580      	push	{r7, lr}
 801181e:	b086      	sub	sp, #24
 8011820:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;
    uint8_t param_buf[] = SPS30_SUBCMD_MEASUREMENT_START;
 8011822:	f240 3301 	movw	r3, #769	; 0x301
 8011826:	803b      	strh	r3, [r7, #0]

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_START_MEASUREMENT,
 8011828:	463a      	mov	r2, r7
 801182a:	2300      	movs	r3, #0
 801182c:	9302      	str	r3, [sp, #8]
 801182e:	1d3b      	adds	r3, r7, #4
 8011830:	9301      	str	r3, [sp, #4]
 8011832:	2300      	movs	r3, #0
 8011834:	9300      	str	r3, [sp, #0]
 8011836:	4613      	mov	r3, r2
 8011838:	2202      	movs	r2, #2
 801183a:	2100      	movs	r1, #0
 801183c:	2000      	movs	r0, #0
 801183e:	f7ff fc88 	bl	8011152 <sensirion_shdlc_xcv>
 8011842:	4603      	mov	r3, r0
                               sizeof(param_buf), param_buf, 0, &header,
                               (uint8_t*)NULL);
}
 8011844:	4618      	mov	r0, r3
 8011846:	3708      	adds	r7, #8
 8011848:	46bd      	mov	sp, r7
 801184a:	bd80      	pop	{r7, pc}

0801184c <sps30_stop_measurement>:

int16_t sps30_stop_measurement(void) {
 801184c:	b580      	push	{r7, lr}
 801184e:	b086      	sub	sp, #24
 8011850:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_STOP_MEASUREMENT, 0,
 8011852:	2300      	movs	r3, #0
 8011854:	9302      	str	r3, [sp, #8]
 8011856:	1d3b      	adds	r3, r7, #4
 8011858:	9301      	str	r3, [sp, #4]
 801185a:	2300      	movs	r3, #0
 801185c:	9300      	str	r3, [sp, #0]
 801185e:	2300      	movs	r3, #0
 8011860:	2200      	movs	r2, #0
 8011862:	2101      	movs	r1, #1
 8011864:	2000      	movs	r0, #0
 8011866:	f7ff fc74 	bl	8011152 <sensirion_shdlc_xcv>
 801186a:	4603      	mov	r3, r0
                               (uint8_t*)NULL, 0, &header, (uint8_t*)NULL);
}
 801186c:	4618      	mov	r0, r3
 801186e:	3708      	adds	r7, #8
 8011870:	46bd      	mov	sp, r7
 8011872:	bd80      	pop	{r7, pc}

08011874 <sps30_read_measurement>:

int16_t sps30_read_measurement(struct sps30_measurement* measurement) {
 8011874:	b580      	push	{r7, lr}
 8011876:	b092      	sub	sp, #72	; 0x48
 8011878:	af04      	add	r7, sp, #16
 801187a:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    int16_t error;
    uint8_t data[10][4];

    error = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_READ_MEASUREMENT, 0,
 801187c:	f107 0308 	add.w	r3, r7, #8
 8011880:	9302      	str	r3, [sp, #8]
 8011882:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011886:	9301      	str	r3, [sp, #4]
 8011888:	2328      	movs	r3, #40	; 0x28
 801188a:	9300      	str	r3, [sp, #0]
 801188c:	2300      	movs	r3, #0
 801188e:	2200      	movs	r2, #0
 8011890:	2103      	movs	r1, #3
 8011892:	2000      	movs	r0, #0
 8011894:	f7ff fc5d 	bl	8011152 <sensirion_shdlc_xcv>
 8011898:	4603      	mov	r3, r0
 801189a:	86fb      	strh	r3, [r7, #54]	; 0x36
                                (uint8_t*)NULL, sizeof(data), &header,
                                (uint8_t*)data);
    if (error) {
 801189c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d002      	beq.n	80118aa <sps30_read_measurement+0x36>
        return error;
 80118a4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80118a8:	e07f      	b.n	80119aa <sps30_read_measurement+0x136>
    }

    if (header.data_len != sizeof(data)) {
 80118aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80118ae:	2b28      	cmp	r3, #40	; 0x28
 80118b0:	d002      	beq.n	80118b8 <sps30_read_measurement+0x44>
        return SPS30_ERR_NOT_ENOUGH_DATA;
 80118b2:	f04f 33ff 	mov.w	r3, #4294967295
 80118b6:	e078      	b.n	80119aa <sps30_read_measurement+0x136>
    }

    measurement->mc_1p0 = sensirion_bytes_to_float(data[0]);
 80118b8:	f107 0308 	add.w	r3, r7, #8
 80118bc:	4618      	mov	r0, r3
 80118be:	f7ff fb84 	bl	8010fca <sensirion_bytes_to_float>
 80118c2:	eef0 7a40 	vmov.f32	s15, s0
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	edc3 7a00 	vstr	s15, [r3]
    measurement->mc_2p5 = sensirion_bytes_to_float(data[1]);
 80118cc:	f107 0308 	add.w	r3, r7, #8
 80118d0:	3304      	adds	r3, #4
 80118d2:	4618      	mov	r0, r3
 80118d4:	f7ff fb79 	bl	8010fca <sensirion_bytes_to_float>
 80118d8:	eef0 7a40 	vmov.f32	s15, s0
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	edc3 7a01 	vstr	s15, [r3, #4]
    measurement->mc_4p0 = sensirion_bytes_to_float(data[2]);
 80118e2:	f107 0308 	add.w	r3, r7, #8
 80118e6:	3308      	adds	r3, #8
 80118e8:	4618      	mov	r0, r3
 80118ea:	f7ff fb6e 	bl	8010fca <sensirion_bytes_to_float>
 80118ee:	eef0 7a40 	vmov.f32	s15, s0
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	edc3 7a02 	vstr	s15, [r3, #8]
    measurement->mc_10p0 = sensirion_bytes_to_float(data[3]);
 80118f8:	f107 0308 	add.w	r3, r7, #8
 80118fc:	330c      	adds	r3, #12
 80118fe:	4618      	mov	r0, r3
 8011900:	f7ff fb63 	bl	8010fca <sensirion_bytes_to_float>
 8011904:	eef0 7a40 	vmov.f32	s15, s0
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	edc3 7a03 	vstr	s15, [r3, #12]
    measurement->nc_0p5 = sensirion_bytes_to_float(data[4]);
 801190e:	f107 0308 	add.w	r3, r7, #8
 8011912:	3310      	adds	r3, #16
 8011914:	4618      	mov	r0, r3
 8011916:	f7ff fb58 	bl	8010fca <sensirion_bytes_to_float>
 801191a:	eef0 7a40 	vmov.f32	s15, s0
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	edc3 7a04 	vstr	s15, [r3, #16]
    measurement->nc_1p0 = sensirion_bytes_to_float(data[5]);
 8011924:	f107 0308 	add.w	r3, r7, #8
 8011928:	3314      	adds	r3, #20
 801192a:	4618      	mov	r0, r3
 801192c:	f7ff fb4d 	bl	8010fca <sensirion_bytes_to_float>
 8011930:	eef0 7a40 	vmov.f32	s15, s0
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	edc3 7a05 	vstr	s15, [r3, #20]
    measurement->nc_2p5 = sensirion_bytes_to_float(data[6]);
 801193a:	f107 0308 	add.w	r3, r7, #8
 801193e:	3318      	adds	r3, #24
 8011940:	4618      	mov	r0, r3
 8011942:	f7ff fb42 	bl	8010fca <sensirion_bytes_to_float>
 8011946:	eef0 7a40 	vmov.f32	s15, s0
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	edc3 7a06 	vstr	s15, [r3, #24]
    measurement->nc_4p0 = sensirion_bytes_to_float(data[7]);
 8011950:	f107 0308 	add.w	r3, r7, #8
 8011954:	331c      	adds	r3, #28
 8011956:	4618      	mov	r0, r3
 8011958:	f7ff fb37 	bl	8010fca <sensirion_bytes_to_float>
 801195c:	eef0 7a40 	vmov.f32	s15, s0
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	edc3 7a07 	vstr	s15, [r3, #28]
    measurement->nc_10p0 = sensirion_bytes_to_float(data[8]);
 8011966:	f107 0308 	add.w	r3, r7, #8
 801196a:	3320      	adds	r3, #32
 801196c:	4618      	mov	r0, r3
 801196e:	f7ff fb2c 	bl	8010fca <sensirion_bytes_to_float>
 8011972:	eef0 7a40 	vmov.f32	s15, s0
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	edc3 7a08 	vstr	s15, [r3, #32]
    measurement->typical_particle_size = sensirion_bytes_to_float(data[9]);
 801197c:	f107 0308 	add.w	r3, r7, #8
 8011980:	3324      	adds	r3, #36	; 0x24
 8011982:	4618      	mov	r0, r3
 8011984:	f7ff fb21 	bl	8010fca <sensirion_bytes_to_float>
 8011988:	eef0 7a40 	vmov.f32	s15, s0
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    if (header.state) {
 8011992:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8011996:	2b00      	cmp	r3, #0
 8011998:	d006      	beq.n	80119a8 <sps30_read_measurement+0x134>
        return SPS30_ERR_STATE(header.state);
 801199a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801199e:	b21b      	sxth	r3, r3
 80119a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80119a4:	b21b      	sxth	r3, r3
 80119a6:	e000      	b.n	80119aa <sps30_read_measurement+0x136>
    }

    return 0;
 80119a8:	2300      	movs	r3, #0
}
 80119aa:	4618      	mov	r0, r3
 80119ac:	3738      	adds	r7, #56	; 0x38
 80119ae:	46bd      	mov	sp, r7
 80119b0:	bd80      	pop	{r7, pc}

080119b2 <sps30_set_fan_auto_cleaning_interval>:
        return SPS30_ERR_STATE(header.state);

    return 0;
}

int16_t sps30_set_fan_auto_cleaning_interval(uint32_t interval_seconds) {
 80119b2:	b580      	push	{r7, lr}
 80119b4:	b08a      	sub	sp, #40	; 0x28
 80119b6:	af04      	add	r7, sp, #16
 80119b8:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    uint8_t cleaning_command[SPS30_CMD_FAN_CLEAN_INTV_LEN];

    cleaning_command[0] = SPS30_SUBCMD_READ_FAN_CLEAN_INTV;
 80119ba:	2300      	movs	r3, #0
 80119bc:	733b      	strb	r3, [r7, #12]
    sensirion_uint32_t_to_bytes(interval_seconds, &cleaning_command[1]);
 80119be:	f107 030c 	add.w	r3, r7, #12
 80119c2:	3301      	adds	r3, #1
 80119c4:	4619      	mov	r1, r3
 80119c6:	6878      	ldr	r0, [r7, #4]
 80119c8:	f7ff fb10 	bl	8010fec <sensirion_uint32_t_to_bytes>

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_FAN_CLEAN_INTV,
 80119cc:	f107 020c 	add.w	r2, r7, #12
 80119d0:	2300      	movs	r3, #0
 80119d2:	9302      	str	r3, [sp, #8]
 80119d4:	f107 0314 	add.w	r3, r7, #20
 80119d8:	9301      	str	r3, [sp, #4]
 80119da:	2300      	movs	r3, #0
 80119dc:	9300      	str	r3, [sp, #0]
 80119de:	4613      	mov	r3, r2
 80119e0:	2205      	movs	r2, #5
 80119e2:	2180      	movs	r1, #128	; 0x80
 80119e4:	2000      	movs	r0, #0
 80119e6:	f7ff fbb4 	bl	8011152 <sensirion_shdlc_xcv>
 80119ea:	4603      	mov	r3, r0
                               sizeof(cleaning_command), cleaning_command, 0,
                               &header, (uint8_t*)NULL);
}
 80119ec:	4618      	mov	r0, r3
 80119ee:	3718      	adds	r7, #24
 80119f0:	46bd      	mov	sp, r7
 80119f2:	bd80      	pop	{r7, pc}

080119f4 <sps30_set_fan_auto_cleaning_interval_days>:

    *interval_days = interval_seconds / (24 * 60 * 60);
    return ret;
}

int16_t sps30_set_fan_auto_cleaning_interval_days(uint8_t interval_days) {
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b082      	sub	sp, #8
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	4603      	mov	r3, r0
 80119fc:	71fb      	strb	r3, [r7, #7]
    return sps30_set_fan_auto_cleaning_interval((uint32_t)interval_days * 24 *
 80119fe:	79fb      	ldrb	r3, [r7, #7]
 8011a00:	4a05      	ldr	r2, [pc, #20]	; (8011a18 <sps30_set_fan_auto_cleaning_interval_days+0x24>)
 8011a02:	fb02 f303 	mul.w	r3, r2, r3
 8011a06:	4618      	mov	r0, r3
 8011a08:	f7ff ffd3 	bl	80119b2 <sps30_set_fan_auto_cleaning_interval>
 8011a0c:	4603      	mov	r3, r0
                                                60 * 60);
}
 8011a0e:	4618      	mov	r0, r3
 8011a10:	3708      	adds	r7, #8
 8011a12:	46bd      	mov	sp, r7
 8011a14:	bd80      	pop	{r7, pc}
 8011a16:	bf00      	nop
 8011a18:	00015180 	.word	0x00015180

08011a1c <sps30_read_version>:
    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_START_FAN_CLEANING, 0,
                               (uint8_t*)NULL, 0, &header, (uint8_t*)NULL);
}

int16_t
sps30_read_version(struct sps30_version_information* version_information) {
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b08a      	sub	sp, #40	; 0x28
 8011a20:	af04      	add	r7, sp, #16
 8011a22:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    int16_t error;
    uint8_t data[7];

    error = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_READ_VERSION, 0,
 8011a24:	f107 0308 	add.w	r3, r7, #8
 8011a28:	9302      	str	r3, [sp, #8]
 8011a2a:	f107 0310 	add.w	r3, r7, #16
 8011a2e:	9301      	str	r3, [sp, #4]
 8011a30:	2307      	movs	r3, #7
 8011a32:	9300      	str	r3, [sp, #0]
 8011a34:	2300      	movs	r3, #0
 8011a36:	2200      	movs	r2, #0
 8011a38:	21d1      	movs	r1, #209	; 0xd1
 8011a3a:	2000      	movs	r0, #0
 8011a3c:	f7ff fb89 	bl	8011152 <sensirion_shdlc_xcv>
 8011a40:	4603      	mov	r3, r0
 8011a42:	82fb      	strh	r3, [r7, #22]
                                (uint8_t*)NULL, sizeof(data), &header, data);
    if (error) {
 8011a44:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d002      	beq.n	8011a52 <sps30_read_version+0x36>
        return error;
 8011a4c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011a50:	e01f      	b.n	8011a92 <sps30_read_version+0x76>
    }

    if (header.data_len != sizeof(data)) {
 8011a52:	7cfb      	ldrb	r3, [r7, #19]
 8011a54:	2b07      	cmp	r3, #7
 8011a56:	d002      	beq.n	8011a5e <sps30_read_version+0x42>
        return SPS30_ERR_NOT_ENOUGH_DATA;
 8011a58:	f04f 33ff 	mov.w	r3, #4294967295
 8011a5c:	e019      	b.n	8011a92 <sps30_read_version+0x76>
    }

    if (header.state) {
 8011a5e:	7cbb      	ldrb	r3, [r7, #18]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d005      	beq.n	8011a70 <sps30_read_version+0x54>
        return SPS30_ERR_STATE(header.state);
 8011a64:	7cbb      	ldrb	r3, [r7, #18]
 8011a66:	b21b      	sxth	r3, r3
 8011a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011a6c:	b21b      	sxth	r3, r3
 8011a6e:	e010      	b.n	8011a92 <sps30_read_version+0x76>
    }

    version_information->firmware_major = data[0];
 8011a70:	7a3a      	ldrb	r2, [r7, #8]
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	701a      	strb	r2, [r3, #0]
    version_information->firmware_minor = data[1];
 8011a76:	7a7a      	ldrb	r2, [r7, #9]
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	705a      	strb	r2, [r3, #1]
    version_information->hardware_revision = data[3];
 8011a7c:	7afa      	ldrb	r2, [r7, #11]
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	709a      	strb	r2, [r3, #2]
    version_information->shdlc_major = data[5];
 8011a82:	7b7a      	ldrb	r2, [r7, #13]
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	70da      	strb	r2, [r3, #3]
    version_information->shdlc_minor = data[6];
 8011a88:	7bba      	ldrb	r2, [r7, #14]
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	711a      	strb	r2, [r3, #4]

    return error;
 8011a8e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8011a92:	4618      	mov	r0, r3
 8011a94:	3718      	adds	r7, #24
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}
	...

08011a9c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b084      	sub	sp, #16
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
 8011aa4:	460b      	mov	r3, r1
 8011aa6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8011aa8:	f640 0074 	movw	r0, #2164	; 0x874
 8011aac:	f007 fd32 	bl	8019514 <USBD_static_malloc>
 8011ab0:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d109      	bne.n	8011acc <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	32b0      	adds	r2, #176	; 0xb0
 8011ac2:	2100      	movs	r1, #0
 8011ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8011ac8:	2302      	movs	r3, #2
 8011aca:	e06e      	b.n	8011baa <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	32b0      	adds	r2, #176	; 0xb0
 8011ad6:	68f9      	ldr	r1, [r7, #12]
 8011ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	32b0      	adds	r2, #176	; 0xb0
 8011ae6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	7c1b      	ldrb	r3, [r3, #16]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d12b      	bne.n	8011b50 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8011af8:	4b2e      	ldr	r3, [pc, #184]	; (8011bb4 <USBD_MSC_Init+0x118>)
 8011afa:	7819      	ldrb	r1, [r3, #0]
 8011afc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011b00:	2202      	movs	r2, #2
 8011b02:	6878      	ldr	r0, [r7, #4]
 8011b04:	f007 fbc3 	bl	801928e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8011b08:	4b2a      	ldr	r3, [pc, #168]	; (8011bb4 <USBD_MSC_Init+0x118>)
 8011b0a:	781b      	ldrb	r3, [r3, #0]
 8011b0c:	f003 020f 	and.w	r2, r3, #15
 8011b10:	6879      	ldr	r1, [r7, #4]
 8011b12:	4613      	mov	r3, r2
 8011b14:	009b      	lsls	r3, r3, #2
 8011b16:	4413      	add	r3, r2
 8011b18:	009b      	lsls	r3, r3, #2
 8011b1a:	440b      	add	r3, r1
 8011b1c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011b20:	2201      	movs	r2, #1
 8011b22:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8011b24:	4b24      	ldr	r3, [pc, #144]	; (8011bb8 <USBD_MSC_Init+0x11c>)
 8011b26:	7819      	ldrb	r1, [r3, #0]
 8011b28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011b2c:	2202      	movs	r2, #2
 8011b2e:	6878      	ldr	r0, [r7, #4]
 8011b30:	f007 fbad 	bl	801928e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8011b34:	4b20      	ldr	r3, [pc, #128]	; (8011bb8 <USBD_MSC_Init+0x11c>)
 8011b36:	781b      	ldrb	r3, [r3, #0]
 8011b38:	f003 020f 	and.w	r2, r3, #15
 8011b3c:	6879      	ldr	r1, [r7, #4]
 8011b3e:	4613      	mov	r3, r2
 8011b40:	009b      	lsls	r3, r3, #2
 8011b42:	4413      	add	r3, r2
 8011b44:	009b      	lsls	r3, r3, #2
 8011b46:	440b      	add	r3, r1
 8011b48:	3324      	adds	r3, #36	; 0x24
 8011b4a:	2201      	movs	r2, #1
 8011b4c:	801a      	strh	r2, [r3, #0]
 8011b4e:	e028      	b.n	8011ba2 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8011b50:	4b18      	ldr	r3, [pc, #96]	; (8011bb4 <USBD_MSC_Init+0x118>)
 8011b52:	7819      	ldrb	r1, [r3, #0]
 8011b54:	2340      	movs	r3, #64	; 0x40
 8011b56:	2202      	movs	r2, #2
 8011b58:	6878      	ldr	r0, [r7, #4]
 8011b5a:	f007 fb98 	bl	801928e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8011b5e:	4b15      	ldr	r3, [pc, #84]	; (8011bb4 <USBD_MSC_Init+0x118>)
 8011b60:	781b      	ldrb	r3, [r3, #0]
 8011b62:	f003 020f 	and.w	r2, r3, #15
 8011b66:	6879      	ldr	r1, [r7, #4]
 8011b68:	4613      	mov	r3, r2
 8011b6a:	009b      	lsls	r3, r3, #2
 8011b6c:	4413      	add	r3, r2
 8011b6e:	009b      	lsls	r3, r3, #2
 8011b70:	440b      	add	r3, r1
 8011b72:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011b76:	2201      	movs	r2, #1
 8011b78:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8011b7a:	4b0f      	ldr	r3, [pc, #60]	; (8011bb8 <USBD_MSC_Init+0x11c>)
 8011b7c:	7819      	ldrb	r1, [r3, #0]
 8011b7e:	2340      	movs	r3, #64	; 0x40
 8011b80:	2202      	movs	r2, #2
 8011b82:	6878      	ldr	r0, [r7, #4]
 8011b84:	f007 fb83 	bl	801928e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8011b88:	4b0b      	ldr	r3, [pc, #44]	; (8011bb8 <USBD_MSC_Init+0x11c>)
 8011b8a:	781b      	ldrb	r3, [r3, #0]
 8011b8c:	f003 020f 	and.w	r2, r3, #15
 8011b90:	6879      	ldr	r1, [r7, #4]
 8011b92:	4613      	mov	r3, r2
 8011b94:	009b      	lsls	r3, r3, #2
 8011b96:	4413      	add	r3, r2
 8011b98:	009b      	lsls	r3, r3, #2
 8011b9a:	440b      	add	r3, r1
 8011b9c:	3324      	adds	r3, #36	; 0x24
 8011b9e:	2201      	movs	r2, #1
 8011ba0:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8011ba2:	6878      	ldr	r0, [r7, #4]
 8011ba4:	f000 fa2c 	bl	8012000 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8011ba8:	2300      	movs	r3, #0
}
 8011baa:	4618      	mov	r0, r3
 8011bac:	3710      	adds	r7, #16
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	bd80      	pop	{r7, pc}
 8011bb2:	bf00      	nop
 8011bb4:	2000008b 	.word	0x2000008b
 8011bb8:	2000008a 	.word	0x2000008a

08011bbc <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b082      	sub	sp, #8
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
 8011bc4:	460b      	mov	r3, r1
 8011bc6:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8011bc8:	4b26      	ldr	r3, [pc, #152]	; (8011c64 <USBD_MSC_DeInit+0xa8>)
 8011bca:	781b      	ldrb	r3, [r3, #0]
 8011bcc:	4619      	mov	r1, r3
 8011bce:	6878      	ldr	r0, [r7, #4]
 8011bd0:	f007 fb83 	bl	80192da <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8011bd4:	4b23      	ldr	r3, [pc, #140]	; (8011c64 <USBD_MSC_DeInit+0xa8>)
 8011bd6:	781b      	ldrb	r3, [r3, #0]
 8011bd8:	f003 020f 	and.w	r2, r3, #15
 8011bdc:	6879      	ldr	r1, [r7, #4]
 8011bde:	4613      	mov	r3, r2
 8011be0:	009b      	lsls	r3, r3, #2
 8011be2:	4413      	add	r3, r2
 8011be4:	009b      	lsls	r3, r3, #2
 8011be6:	440b      	add	r3, r1
 8011be8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011bec:	2200      	movs	r2, #0
 8011bee:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8011bf0:	4b1d      	ldr	r3, [pc, #116]	; (8011c68 <USBD_MSC_DeInit+0xac>)
 8011bf2:	781b      	ldrb	r3, [r3, #0]
 8011bf4:	4619      	mov	r1, r3
 8011bf6:	6878      	ldr	r0, [r7, #4]
 8011bf8:	f007 fb6f 	bl	80192da <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8011bfc:	4b1a      	ldr	r3, [pc, #104]	; (8011c68 <USBD_MSC_DeInit+0xac>)
 8011bfe:	781b      	ldrb	r3, [r3, #0]
 8011c00:	f003 020f 	and.w	r2, r3, #15
 8011c04:	6879      	ldr	r1, [r7, #4]
 8011c06:	4613      	mov	r3, r2
 8011c08:	009b      	lsls	r3, r3, #2
 8011c0a:	4413      	add	r3, r2
 8011c0c:	009b      	lsls	r3, r3, #2
 8011c0e:	440b      	add	r3, r1
 8011c10:	3324      	adds	r3, #36	; 0x24
 8011c12:	2200      	movs	r2, #0
 8011c14:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	32b0      	adds	r2, #176	; 0xb0
 8011c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d018      	beq.n	8011c5a <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8011c28:	6878      	ldr	r0, [r7, #4]
 8011c2a:	f000 fa67 	bl	80120fc <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	32b0      	adds	r2, #176	; 0xb0
 8011c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f007 fc77 	bl	8019530 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	32b0      	adds	r2, #176	; 0xb0
 8011c4c:	2100      	movs	r1, #0
 8011c4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	2200      	movs	r2, #0
 8011c56:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8011c5a:	2300      	movs	r3, #0
}
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	3708      	adds	r7, #8
 8011c60:	46bd      	mov	sp, r7
 8011c62:	bd80      	pop	{r7, pc}
 8011c64:	2000008b 	.word	0x2000008b
 8011c68:	2000008a 	.word	0x2000008a

08011c6c <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b086      	sub	sp, #24
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
 8011c74:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	32b0      	adds	r2, #176	; 0xb0
 8011c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c84:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8011c86:	2300      	movs	r3, #0
 8011c88:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8011c8e:	693b      	ldr	r3, [r7, #16]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d101      	bne.n	8011c98 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8011c94:	2303      	movs	r3, #3
 8011c96:	e0e1      	b.n	8011e5c <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011c98:	683b      	ldr	r3, [r7, #0]
 8011c9a:	781b      	ldrb	r3, [r3, #0]
 8011c9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d053      	beq.n	8011d4c <USBD_MSC_Setup+0xe0>
 8011ca4:	2b20      	cmp	r3, #32
 8011ca6:	f040 80d1 	bne.w	8011e4c <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8011caa:	683b      	ldr	r3, [r7, #0]
 8011cac:	785b      	ldrb	r3, [r3, #1]
 8011cae:	2bfe      	cmp	r3, #254	; 0xfe
 8011cb0:	d002      	beq.n	8011cb8 <USBD_MSC_Setup+0x4c>
 8011cb2:	2bff      	cmp	r3, #255	; 0xff
 8011cb4:	d02a      	beq.n	8011d0c <USBD_MSC_Setup+0xa0>
 8011cb6:	e041      	b.n	8011d3c <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8011cb8:	683b      	ldr	r3, [r7, #0]
 8011cba:	885b      	ldrh	r3, [r3, #2]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d11e      	bne.n	8011cfe <USBD_MSC_Setup+0x92>
 8011cc0:	683b      	ldr	r3, [r7, #0]
 8011cc2:	88db      	ldrh	r3, [r3, #6]
 8011cc4:	2b01      	cmp	r3, #1
 8011cc6:	d11a      	bne.n	8011cfe <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8011cc8:	683b      	ldr	r3, [r7, #0]
 8011cca:	781b      	ldrb	r3, [r3, #0]
 8011ccc:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	da15      	bge.n	8011cfe <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011cd8:	687a      	ldr	r2, [r7, #4]
 8011cda:	33b0      	adds	r3, #176	; 0xb0
 8011cdc:	009b      	lsls	r3, r3, #2
 8011cde:	4413      	add	r3, r2
 8011ce0:	685b      	ldr	r3, [r3, #4]
 8011ce2:	699b      	ldr	r3, [r3, #24]
 8011ce4:	4798      	blx	r3
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	461a      	mov	r2, r3
 8011cea:	693b      	ldr	r3, [r7, #16]
 8011cec:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8011cee:	693b      	ldr	r3, [r7, #16]
 8011cf0:	2201      	movs	r2, #1
 8011cf2:	4619      	mov	r1, r3
 8011cf4:	6878      	ldr	r0, [r7, #4]
 8011cf6:	f003 f949 	bl	8014f8c <USBD_CtlSendData>
 8011cfa:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011cfc:	e025      	b.n	8011d4a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8011cfe:	6839      	ldr	r1, [r7, #0]
 8011d00:	6878      	ldr	r0, [r7, #4]
 8011d02:	f003 f8d2 	bl	8014eaa <USBD_CtlError>
            ret = USBD_FAIL;
 8011d06:	2303      	movs	r3, #3
 8011d08:	75fb      	strb	r3, [r7, #23]
          break;
 8011d0a:	e01e      	b.n	8011d4a <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8011d0c:	683b      	ldr	r3, [r7, #0]
 8011d0e:	885b      	ldrh	r3, [r3, #2]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d10c      	bne.n	8011d2e <USBD_MSC_Setup+0xc2>
 8011d14:	683b      	ldr	r3, [r7, #0]
 8011d16:	88db      	ldrh	r3, [r3, #6]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d108      	bne.n	8011d2e <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8011d1c:	683b      	ldr	r3, [r7, #0]
 8011d1e:	781b      	ldrb	r3, [r3, #0]
 8011d20:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	db03      	blt.n	8011d2e <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8011d26:	6878      	ldr	r0, [r7, #4]
 8011d28:	f000 f9b4 	bl	8012094 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011d2c:	e00d      	b.n	8011d4a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8011d2e:	6839      	ldr	r1, [r7, #0]
 8011d30:	6878      	ldr	r0, [r7, #4]
 8011d32:	f003 f8ba 	bl	8014eaa <USBD_CtlError>
            ret = USBD_FAIL;
 8011d36:	2303      	movs	r3, #3
 8011d38:	75fb      	strb	r3, [r7, #23]
          break;
 8011d3a:	e006      	b.n	8011d4a <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8011d3c:	6839      	ldr	r1, [r7, #0]
 8011d3e:	6878      	ldr	r0, [r7, #4]
 8011d40:	f003 f8b3 	bl	8014eaa <USBD_CtlError>
          ret = USBD_FAIL;
 8011d44:	2303      	movs	r3, #3
 8011d46:	75fb      	strb	r3, [r7, #23]
          break;
 8011d48:	bf00      	nop
      }
      break;
 8011d4a:	e086      	b.n	8011e5a <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011d4c:	683b      	ldr	r3, [r7, #0]
 8011d4e:	785b      	ldrb	r3, [r3, #1]
 8011d50:	2b0b      	cmp	r3, #11
 8011d52:	d872      	bhi.n	8011e3a <USBD_MSC_Setup+0x1ce>
 8011d54:	a201      	add	r2, pc, #4	; (adr r2, 8011d5c <USBD_MSC_Setup+0xf0>)
 8011d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d5a:	bf00      	nop
 8011d5c:	08011d8d 	.word	0x08011d8d
 8011d60:	08011e09 	.word	0x08011e09
 8011d64:	08011e3b 	.word	0x08011e3b
 8011d68:	08011e3b 	.word	0x08011e3b
 8011d6c:	08011e3b 	.word	0x08011e3b
 8011d70:	08011e3b 	.word	0x08011e3b
 8011d74:	08011e3b 	.word	0x08011e3b
 8011d78:	08011e3b 	.word	0x08011e3b
 8011d7c:	08011e3b 	.word	0x08011e3b
 8011d80:	08011e3b 	.word	0x08011e3b
 8011d84:	08011db7 	.word	0x08011db7
 8011d88:	08011de1 	.word	0x08011de1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011d92:	b2db      	uxtb	r3, r3
 8011d94:	2b03      	cmp	r3, #3
 8011d96:	d107      	bne.n	8011da8 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011d98:	f107 030e 	add.w	r3, r7, #14
 8011d9c:	2202      	movs	r2, #2
 8011d9e:	4619      	mov	r1, r3
 8011da0:	6878      	ldr	r0, [r7, #4]
 8011da2:	f003 f8f3 	bl	8014f8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011da6:	e050      	b.n	8011e4a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8011da8:	6839      	ldr	r1, [r7, #0]
 8011daa:	6878      	ldr	r0, [r7, #4]
 8011dac:	f003 f87d 	bl	8014eaa <USBD_CtlError>
            ret = USBD_FAIL;
 8011db0:	2303      	movs	r3, #3
 8011db2:	75fb      	strb	r3, [r7, #23]
          break;
 8011db4:	e049      	b.n	8011e4a <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011dbc:	b2db      	uxtb	r3, r3
 8011dbe:	2b03      	cmp	r3, #3
 8011dc0:	d107      	bne.n	8011dd2 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8011dc2:	693b      	ldr	r3, [r7, #16]
 8011dc4:	3304      	adds	r3, #4
 8011dc6:	2201      	movs	r2, #1
 8011dc8:	4619      	mov	r1, r3
 8011dca:	6878      	ldr	r0, [r7, #4]
 8011dcc:	f003 f8de 	bl	8014f8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011dd0:	e03b      	b.n	8011e4a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8011dd2:	6839      	ldr	r1, [r7, #0]
 8011dd4:	6878      	ldr	r0, [r7, #4]
 8011dd6:	f003 f868 	bl	8014eaa <USBD_CtlError>
            ret = USBD_FAIL;
 8011dda:	2303      	movs	r3, #3
 8011ddc:	75fb      	strb	r3, [r7, #23]
          break;
 8011dde:	e034      	b.n	8011e4a <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011de6:	b2db      	uxtb	r3, r3
 8011de8:	2b03      	cmp	r3, #3
 8011dea:	d106      	bne.n	8011dfa <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8011dec:	683b      	ldr	r3, [r7, #0]
 8011dee:	885b      	ldrh	r3, [r3, #2]
 8011df0:	b2db      	uxtb	r3, r3
 8011df2:	461a      	mov	r2, r3
 8011df4:	693b      	ldr	r3, [r7, #16]
 8011df6:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011df8:	e027      	b.n	8011e4a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8011dfa:	6839      	ldr	r1, [r7, #0]
 8011dfc:	6878      	ldr	r0, [r7, #4]
 8011dfe:	f003 f854 	bl	8014eaa <USBD_CtlError>
            ret = USBD_FAIL;
 8011e02:	2303      	movs	r3, #3
 8011e04:	75fb      	strb	r3, [r7, #23]
          break;
 8011e06:	e020      	b.n	8011e4a <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e0e:	b2db      	uxtb	r3, r3
 8011e10:	2b03      	cmp	r3, #3
 8011e12:	d119      	bne.n	8011e48 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8011e14:	683b      	ldr	r3, [r7, #0]
 8011e16:	885b      	ldrh	r3, [r3, #2]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d115      	bne.n	8011e48 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8011e1c:	683b      	ldr	r3, [r7, #0]
 8011e1e:	889b      	ldrh	r3, [r3, #4]
 8011e20:	b2db      	uxtb	r3, r3
 8011e22:	4619      	mov	r1, r3
 8011e24:	6878      	ldr	r0, [r7, #4]
 8011e26:	f007 fa77 	bl	8019318 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8011e2a:	683b      	ldr	r3, [r7, #0]
 8011e2c:	889b      	ldrh	r3, [r3, #4]
 8011e2e:	b2db      	uxtb	r3, r3
 8011e30:	4619      	mov	r1, r3
 8011e32:	6878      	ldr	r0, [r7, #4]
 8011e34:	f000 fb2e 	bl	8012494 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8011e38:	e006      	b.n	8011e48 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8011e3a:	6839      	ldr	r1, [r7, #0]
 8011e3c:	6878      	ldr	r0, [r7, #4]
 8011e3e:	f003 f834 	bl	8014eaa <USBD_CtlError>
          ret = USBD_FAIL;
 8011e42:	2303      	movs	r3, #3
 8011e44:	75fb      	strb	r3, [r7, #23]
          break;
 8011e46:	e000      	b.n	8011e4a <USBD_MSC_Setup+0x1de>
          break;
 8011e48:	bf00      	nop
      }
      break;
 8011e4a:	e006      	b.n	8011e5a <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8011e4c:	6839      	ldr	r1, [r7, #0]
 8011e4e:	6878      	ldr	r0, [r7, #4]
 8011e50:	f003 f82b 	bl	8014eaa <USBD_CtlError>
      ret = USBD_FAIL;
 8011e54:	2303      	movs	r3, #3
 8011e56:	75fb      	strb	r3, [r7, #23]
      break;
 8011e58:	bf00      	nop
  }

  return (uint8_t)ret;
 8011e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	3718      	adds	r7, #24
 8011e60:	46bd      	mov	sp, r7
 8011e62:	bd80      	pop	{r7, pc}

08011e64 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b082      	sub	sp, #8
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	6078      	str	r0, [r7, #4]
 8011e6c:	460b      	mov	r3, r1
 8011e6e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8011e70:	78fb      	ldrb	r3, [r7, #3]
 8011e72:	4619      	mov	r1, r3
 8011e74:	6878      	ldr	r0, [r7, #4]
 8011e76:	f000 f959 	bl	801212c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8011e7a:	2300      	movs	r3, #0
}
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	3708      	adds	r7, #8
 8011e80:	46bd      	mov	sp, r7
 8011e82:	bd80      	pop	{r7, pc}

08011e84 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011e84:	b580      	push	{r7, lr}
 8011e86:	b082      	sub	sp, #8
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	6078      	str	r0, [r7, #4]
 8011e8c:	460b      	mov	r3, r1
 8011e8e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8011e90:	78fb      	ldrb	r3, [r7, #3]
 8011e92:	4619      	mov	r1, r3
 8011e94:	6878      	ldr	r0, [r7, #4]
 8011e96:	f000 f983 	bl	80121a0 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8011e9a:	2300      	movs	r3, #0
}
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	3708      	adds	r7, #8
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	bd80      	pop	{r7, pc}

08011ea4 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8011ea4:	b580      	push	{r7, lr}
 8011ea6:	b084      	sub	sp, #16
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8011eac:	2181      	movs	r1, #129	; 0x81
 8011eae:	4812      	ldr	r0, [pc, #72]	; (8011ef8 <USBD_MSC_GetHSCfgDesc+0x54>)
 8011eb0:	f002 f9c3 	bl	801423a <USBD_GetEpDesc>
 8011eb4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8011eb6:	2101      	movs	r1, #1
 8011eb8:	480f      	ldr	r0, [pc, #60]	; (8011ef8 <USBD_MSC_GetHSCfgDesc+0x54>)
 8011eba:	f002 f9be 	bl	801423a <USBD_GetEpDesc>
 8011ebe:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d006      	beq.n	8011ed4 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	2200      	movs	r2, #0
 8011eca:	711a      	strb	r2, [r3, #4]
 8011ecc:	2200      	movs	r2, #0
 8011ece:	f042 0202 	orr.w	r2, r2, #2
 8011ed2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8011ed4:	68bb      	ldr	r3, [r7, #8]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d006      	beq.n	8011ee8 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8011eda:	68bb      	ldr	r3, [r7, #8]
 8011edc:	2200      	movs	r2, #0
 8011ede:	711a      	strb	r2, [r3, #4]
 8011ee0:	2200      	movs	r2, #0
 8011ee2:	f042 0202 	orr.w	r2, r2, #2
 8011ee6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	2220      	movs	r2, #32
 8011eec:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8011eee:	4b02      	ldr	r3, [pc, #8]	; (8011ef8 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	3710      	adds	r7, #16
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	bd80      	pop	{r7, pc}
 8011ef8:	20000060 	.word	0x20000060

08011efc <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b084      	sub	sp, #16
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8011f04:	2181      	movs	r1, #129	; 0x81
 8011f06:	4812      	ldr	r0, [pc, #72]	; (8011f50 <USBD_MSC_GetFSCfgDesc+0x54>)
 8011f08:	f002 f997 	bl	801423a <USBD_GetEpDesc>
 8011f0c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8011f0e:	2101      	movs	r1, #1
 8011f10:	480f      	ldr	r0, [pc, #60]	; (8011f50 <USBD_MSC_GetFSCfgDesc+0x54>)
 8011f12:	f002 f992 	bl	801423a <USBD_GetEpDesc>
 8011f16:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d006      	beq.n	8011f2c <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	2200      	movs	r2, #0
 8011f22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011f26:	711a      	strb	r2, [r3, #4]
 8011f28:	2200      	movs	r2, #0
 8011f2a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8011f2c:	68bb      	ldr	r3, [r7, #8]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d006      	beq.n	8011f40 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8011f32:	68bb      	ldr	r3, [r7, #8]
 8011f34:	2200      	movs	r2, #0
 8011f36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011f3a:	711a      	strb	r2, [r3, #4]
 8011f3c:	2200      	movs	r2, #0
 8011f3e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	2220      	movs	r2, #32
 8011f44:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8011f46:	4b02      	ldr	r3, [pc, #8]	; (8011f50 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8011f48:	4618      	mov	r0, r3
 8011f4a:	3710      	adds	r7, #16
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	bd80      	pop	{r7, pc}
 8011f50:	20000060 	.word	0x20000060

08011f54 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011f54:	b580      	push	{r7, lr}
 8011f56:	b084      	sub	sp, #16
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8011f5c:	2181      	movs	r1, #129	; 0x81
 8011f5e:	4812      	ldr	r0, [pc, #72]	; (8011fa8 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8011f60:	f002 f96b 	bl	801423a <USBD_GetEpDesc>
 8011f64:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8011f66:	2101      	movs	r1, #1
 8011f68:	480f      	ldr	r0, [pc, #60]	; (8011fa8 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8011f6a:	f002 f966 	bl	801423a <USBD_GetEpDesc>
 8011f6e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d006      	beq.n	8011f84 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	2200      	movs	r2, #0
 8011f7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011f7e:	711a      	strb	r2, [r3, #4]
 8011f80:	2200      	movs	r2, #0
 8011f82:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8011f84:	68bb      	ldr	r3, [r7, #8]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d006      	beq.n	8011f98 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8011f8a:	68bb      	ldr	r3, [r7, #8]
 8011f8c:	2200      	movs	r2, #0
 8011f8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011f92:	711a      	strb	r2, [r3, #4]
 8011f94:	2200      	movs	r2, #0
 8011f96:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	2220      	movs	r2, #32
 8011f9c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8011f9e:	4b02      	ldr	r3, [pc, #8]	; (8011fa8 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	3710      	adds	r7, #16
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	bd80      	pop	{r7, pc}
 8011fa8:	20000060 	.word	0x20000060

08011fac <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011fac:	b480      	push	{r7}
 8011fae:	b083      	sub	sp, #12
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	220a      	movs	r2, #10
 8011fb8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8011fba:	4b03      	ldr	r3, [pc, #12]	; (8011fc8 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	370c      	adds	r7, #12
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc6:	4770      	bx	lr
 8011fc8:	20000080 	.word	0x20000080

08011fcc <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8011fcc:	b480      	push	{r7}
 8011fce:	b083      	sub	sp, #12
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	6078      	str	r0, [r7, #4]
 8011fd4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011fd6:	683b      	ldr	r3, [r7, #0]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d101      	bne.n	8011fe0 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011fdc:	2303      	movs	r3, #3
 8011fde:	e009      	b.n	8011ff4 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011fe6:	687a      	ldr	r2, [r7, #4]
 8011fe8:	33b0      	adds	r3, #176	; 0xb0
 8011fea:	009b      	lsls	r3, r3, #2
 8011fec:	4413      	add	r3, r2
 8011fee:	683a      	ldr	r2, [r7, #0]
 8011ff0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8011ff2:	2300      	movs	r3, #0
}
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	370c      	adds	r7, #12
 8011ff8:	46bd      	mov	sp, r7
 8011ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ffe:	4770      	bx	lr

08012000 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8012000:	b580      	push	{r7, lr}
 8012002:	b084      	sub	sp, #16
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	32b0      	adds	r2, #176	; 0xb0
 8012012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012016:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d032      	beq.n	8012084 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	2200      	movs	r2, #0
 8012022:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	2200      	movs	r2, #0
 8012028:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	2200      	movs	r2, #0
 801202e:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861
  hmsc->scsi_sense_head = 0U;
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	2200      	movs	r2, #0
 8012036:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	2200      	movs	r2, #0
 801203e:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012048:	687a      	ldr	r2, [r7, #4]
 801204a:	33b0      	adds	r3, #176	; 0xb0
 801204c:	009b      	lsls	r3, r3, #2
 801204e:	4413      	add	r3, r2
 8012050:	685b      	ldr	r3, [r3, #4]
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	2000      	movs	r0, #0
 8012056:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8012058:	4b0c      	ldr	r3, [pc, #48]	; (801208c <MSC_BOT_Init+0x8c>)
 801205a:	781b      	ldrb	r3, [r3, #0]
 801205c:	4619      	mov	r1, r3
 801205e:	6878      	ldr	r0, [r7, #4]
 8012060:	f007 f95a 	bl	8019318 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8012064:	4b0a      	ldr	r3, [pc, #40]	; (8012090 <MSC_BOT_Init+0x90>)
 8012066:	781b      	ldrb	r3, [r3, #0]
 8012068:	4619      	mov	r1, r3
 801206a:	6878      	ldr	r0, [r7, #4]
 801206c:	f007 f954 	bl	8019318 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8012070:	4b06      	ldr	r3, [pc, #24]	; (801208c <MSC_BOT_Init+0x8c>)
 8012072:	7819      	ldrb	r1, [r3, #0]
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	f503 6201 	add.w	r2, r3, #2064	; 0x810
 801207a:	231f      	movs	r3, #31
 801207c:	6878      	ldr	r0, [r7, #4]
 801207e:	f007 fa14 	bl	80194aa <USBD_LL_PrepareReceive>
 8012082:	e000      	b.n	8012086 <MSC_BOT_Init+0x86>
    return;
 8012084:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8012086:	3710      	adds	r7, #16
 8012088:	46bd      	mov	sp, r7
 801208a:	bd80      	pop	{r7, pc}
 801208c:	2000008b 	.word	0x2000008b
 8012090:	2000008a 	.word	0x2000008a

08012094 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8012094:	b580      	push	{r7, lr}
 8012096:	b084      	sub	sp, #16
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	32b0      	adds	r2, #176	; 0xb0
 80120a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120aa:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d01b      	beq.n	80120ea <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	2200      	movs	r2, #0
 80120b6:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	2201      	movs	r2, #1
 80120bc:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 80120be:	4b0d      	ldr	r3, [pc, #52]	; (80120f4 <MSC_BOT_Reset+0x60>)
 80120c0:	781b      	ldrb	r3, [r3, #0]
 80120c2:	4619      	mov	r1, r3
 80120c4:	6878      	ldr	r0, [r7, #4]
 80120c6:	f007 f965 	bl	8019394 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 80120ca:	4b0b      	ldr	r3, [pc, #44]	; (80120f8 <MSC_BOT_Reset+0x64>)
 80120cc:	781b      	ldrb	r3, [r3, #0]
 80120ce:	4619      	mov	r1, r3
 80120d0:	6878      	ldr	r0, [r7, #4]
 80120d2:	f007 f95f 	bl	8019394 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80120d6:	4b08      	ldr	r3, [pc, #32]	; (80120f8 <MSC_BOT_Reset+0x64>)
 80120d8:	7819      	ldrb	r1, [r3, #0]
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	f503 6201 	add.w	r2, r3, #2064	; 0x810
 80120e0:	231f      	movs	r3, #31
 80120e2:	6878      	ldr	r0, [r7, #4]
 80120e4:	f007 f9e1 	bl	80194aa <USBD_LL_PrepareReceive>
 80120e8:	e000      	b.n	80120ec <MSC_BOT_Reset+0x58>
    return;
 80120ea:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80120ec:	3710      	adds	r7, #16
 80120ee:	46bd      	mov	sp, r7
 80120f0:	bd80      	pop	{r7, pc}
 80120f2:	bf00      	nop
 80120f4:	2000008a 	.word	0x2000008a
 80120f8:	2000008b 	.word	0x2000008b

080120fc <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80120fc:	b480      	push	{r7}
 80120fe:	b085      	sub	sp, #20
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	32b0      	adds	r2, #176	; 0xb0
 801210e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012112:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d002      	beq.n	8012120 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	2200      	movs	r2, #0
 801211e:	721a      	strb	r2, [r3, #8]
  }
}
 8012120:	bf00      	nop
 8012122:	3714      	adds	r7, #20
 8012124:	46bd      	mov	sp, r7
 8012126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801212a:	4770      	bx	lr

0801212c <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801212c:	b580      	push	{r7, lr}
 801212e:	b084      	sub	sp, #16
 8012130:	af00      	add	r7, sp, #0
 8012132:	6078      	str	r0, [r7, #4]
 8012134:	460b      	mov	r3, r1
 8012136:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	32b0      	adds	r2, #176	; 0xb0
 8012142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012146:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d020      	beq.n	8012190 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	7a1b      	ldrb	r3, [r3, #8]
 8012152:	2b02      	cmp	r3, #2
 8012154:	d005      	beq.n	8012162 <MSC_BOT_DataIn+0x36>
 8012156:	2b02      	cmp	r3, #2
 8012158:	db1c      	blt.n	8012194 <MSC_BOT_DataIn+0x68>
 801215a:	3b03      	subs	r3, #3
 801215c:	2b01      	cmp	r3, #1
 801215e:	d819      	bhi.n	8012194 <MSC_BOT_DataIn+0x68>
 8012160:	e011      	b.n	8012186 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	f603 031f 	addw	r3, r3, #2079	; 0x81f
 801216e:	461a      	mov	r2, r3
 8012170:	6878      	ldr	r0, [r7, #4]
 8012172:	f000 f9c9 	bl	8012508 <SCSI_ProcessCmd>
 8012176:	4603      	mov	r3, r0
 8012178:	2b00      	cmp	r3, #0
 801217a:	da0d      	bge.n	8012198 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801217c:	2101      	movs	r1, #1
 801217e:	6878      	ldr	r0, [r7, #4]
 8012180:	f000 f90c 	bl	801239c <MSC_BOT_SendCSW>
      }
      break;
 8012184:	e008      	b.n	8012198 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8012186:	2100      	movs	r1, #0
 8012188:	6878      	ldr	r0, [r7, #4]
 801218a:	f000 f907 	bl	801239c <MSC_BOT_SendCSW>
      break;
 801218e:	e004      	b.n	801219a <MSC_BOT_DataIn+0x6e>
    return;
 8012190:	bf00      	nop
 8012192:	e002      	b.n	801219a <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8012194:	bf00      	nop
 8012196:	e000      	b.n	801219a <MSC_BOT_DataIn+0x6e>
      break;
 8012198:	bf00      	nop
  }
}
 801219a:	3710      	adds	r7, #16
 801219c:	46bd      	mov	sp, r7
 801219e:	bd80      	pop	{r7, pc}

080121a0 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b084      	sub	sp, #16
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
 80121a8:	460b      	mov	r3, r1
 80121aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	32b0      	adds	r2, #176	; 0xb0
 80121b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121ba:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d01c      	beq.n	80121fc <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	7a1b      	ldrb	r3, [r3, #8]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d002      	beq.n	80121d0 <MSC_BOT_DataOut+0x30>
 80121ca:	2b01      	cmp	r3, #1
 80121cc:	d004      	beq.n	80121d8 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80121ce:	e018      	b.n	8012202 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 80121d0:	6878      	ldr	r0, [r7, #4]
 80121d2:	f000 f819 	bl	8012208 <MSC_BOT_CBW_Decode>
      break;
 80121d6:	e014      	b.n	8012202 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	f603 031f 	addw	r3, r3, #2079	; 0x81f
 80121e4:	461a      	mov	r2, r3
 80121e6:	6878      	ldr	r0, [r7, #4]
 80121e8:	f000 f98e 	bl	8012508 <SCSI_ProcessCmd>
 80121ec:	4603      	mov	r3, r0
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	da06      	bge.n	8012200 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80121f2:	2101      	movs	r1, #1
 80121f4:	6878      	ldr	r0, [r7, #4]
 80121f6:	f000 f8d1 	bl	801239c <MSC_BOT_SendCSW>
      break;
 80121fa:	e001      	b.n	8012200 <MSC_BOT_DataOut+0x60>
    return;
 80121fc:	bf00      	nop
 80121fe:	e000      	b.n	8012202 <MSC_BOT_DataOut+0x62>
      break;
 8012200:	bf00      	nop
  }
}
 8012202:	3710      	adds	r7, #16
 8012204:	46bd      	mov	sp, r7
 8012206:	bd80      	pop	{r7, pc}

08012208 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8012208:	b580      	push	{r7, lr}
 801220a:	b084      	sub	sp, #16
 801220c:	af00      	add	r7, sp, #0
 801220e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	32b0      	adds	r2, #176	; 0xb0
 801221a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801221e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d079      	beq.n	801231a <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 801223e:	4b3a      	ldr	r3, [pc, #232]	; (8012328 <MSC_BOT_CBW_Decode+0x120>)
 8012240:	781b      	ldrb	r3, [r3, #0]
 8012242:	4619      	mov	r1, r3
 8012244:	6878      	ldr	r0, [r7, #4]
 8012246:	f007 f951 	bl	80194ec <USBD_LL_GetRxDataSize>
 801224a:	4603      	mov	r3, r0
 801224c:	2b1f      	cmp	r3, #31
 801224e:	d114      	bne.n	801227a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8012256:	4a35      	ldr	r2, [pc, #212]	; (801232c <MSC_BOT_CBW_Decode+0x124>)
 8012258:	4293      	cmp	r3, r2
 801225a:	d10e      	bne.n	801227a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	f893 381d 	ldrb.w	r3, [r3, #2077]	; 0x81d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8012262:	2b01      	cmp	r3, #1
 8012264:	d809      	bhi.n	801227a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	f893 381e 	ldrb.w	r3, [r3, #2078]	; 0x81e
 801226c:	2b00      	cmp	r3, #0
 801226e:	d004      	beq.n	801227a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	f893 381e 	ldrb.w	r3, [r3, #2078]	; 0x81e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8012276:	2b10      	cmp	r3, #16
 8012278:	d90e      	bls.n	8012298 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8012280:	2320      	movs	r3, #32
 8012282:	2205      	movs	r2, #5
 8012284:	6878      	ldr	r0, [r7, #4]
 8012286:	f000 fe2b 	bl	8012ee0 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	2202      	movs	r2, #2
 801228e:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8012290:	6878      	ldr	r0, [r7, #4]
 8012292:	f000 f8bd 	bl	8012410 <MSC_BOT_Abort>
 8012296:	e043      	b.n	8012320 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	f603 031f 	addw	r3, r3, #2079	; 0x81f
 80122a4:	461a      	mov	r2, r3
 80122a6:	6878      	ldr	r0, [r7, #4]
 80122a8:	f000 f92e 	bl	8012508 <SCSI_ProcessCmd>
 80122ac:	4603      	mov	r3, r0
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	da0c      	bge.n	80122cc <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	7a1b      	ldrb	r3, [r3, #8]
 80122b6:	2b05      	cmp	r3, #5
 80122b8:	d104      	bne.n	80122c4 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80122ba:	2101      	movs	r1, #1
 80122bc:	6878      	ldr	r0, [r7, #4]
 80122be:	f000 f86d 	bl	801239c <MSC_BOT_SendCSW>
 80122c2:	e02d      	b.n	8012320 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80122c4:	6878      	ldr	r0, [r7, #4]
 80122c6:	f000 f8a3 	bl	8012410 <MSC_BOT_Abort>
 80122ca:	e029      	b.n	8012320 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	7a1b      	ldrb	r3, [r3, #8]
 80122d0:	2b02      	cmp	r3, #2
 80122d2:	d024      	beq.n	801231e <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80122d8:	2b01      	cmp	r3, #1
 80122da:	d020      	beq.n	801231e <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80122e0:	2b03      	cmp	r3, #3
 80122e2:	d01c      	beq.n	801231e <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	68db      	ldr	r3, [r3, #12]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d009      	beq.n	8012300 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	f103 0110 	add.w	r1, r3, #16
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	68db      	ldr	r3, [r3, #12]
 80122f6:	461a      	mov	r2, r3
 80122f8:	6878      	ldr	r0, [r7, #4]
 80122fa:	f000 f819 	bl	8012330 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80122fe:	e00f      	b.n	8012320 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	68db      	ldr	r3, [r3, #12]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d104      	bne.n	8012312 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8012308:	2100      	movs	r1, #0
 801230a:	6878      	ldr	r0, [r7, #4]
 801230c:	f000 f846 	bl	801239c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8012310:	e006      	b.n	8012320 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8012312:	6878      	ldr	r0, [r7, #4]
 8012314:	f000 f87c 	bl	8012410 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8012318:	e002      	b.n	8012320 <MSC_BOT_CBW_Decode+0x118>
    return;
 801231a:	bf00      	nop
 801231c:	e000      	b.n	8012320 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 801231e:	bf00      	nop
    }
  }
}
 8012320:	3710      	adds	r7, #16
 8012322:	46bd      	mov	sp, r7
 8012324:	bd80      	pop	{r7, pc}
 8012326:	bf00      	nop
 8012328:	2000008b 	.word	0x2000008b
 801232c:	43425355 	.word	0x43425355

08012330 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8012330:	b580      	push	{r7, lr}
 8012332:	b086      	sub	sp, #24
 8012334:	af00      	add	r7, sp, #0
 8012336:	60f8      	str	r0, [r7, #12]
 8012338:	60b9      	str	r1, [r7, #8]
 801233a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	32b0      	adds	r2, #176	; 0xb0
 8012346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801234a:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801234c:	697b      	ldr	r3, [r7, #20]
 801234e:	2b00      	cmp	r3, #0
 8012350:	d01e      	beq.n	8012390 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8012352:	697b      	ldr	r3, [r7, #20]
 8012354:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8012358:	687a      	ldr	r2, [r7, #4]
 801235a:	4293      	cmp	r3, r2
 801235c:	bf28      	it	cs
 801235e:	4613      	movcs	r3, r2
 8012360:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8012362:	697b      	ldr	r3, [r7, #20]
 8012364:	f8d3 2838 	ldr.w	r2, [r3, #2104]	; 0x838
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	1ad2      	subs	r2, r2, r3
 801236c:	697b      	ldr	r3, [r7, #20]
 801236e:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8012372:	697b      	ldr	r3, [r7, #20]
 8012374:	2200      	movs	r2, #0
 8012376:	f883 283c 	strb.w	r2, [r3, #2108]	; 0x83c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 801237a:	697b      	ldr	r3, [r7, #20]
 801237c:	2204      	movs	r2, #4
 801237e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8012380:	4b05      	ldr	r3, [pc, #20]	; (8012398 <MSC_BOT_SendData+0x68>)
 8012382:	7819      	ldrb	r1, [r3, #0]
 8012384:	693b      	ldr	r3, [r7, #16]
 8012386:	68ba      	ldr	r2, [r7, #8]
 8012388:	68f8      	ldr	r0, [r7, #12]
 801238a:	f007 f86d 	bl	8019468 <USBD_LL_Transmit>
 801238e:	e000      	b.n	8012392 <MSC_BOT_SendData+0x62>
    return;
 8012390:	bf00      	nop
}
 8012392:	3718      	adds	r7, #24
 8012394:	46bd      	mov	sp, r7
 8012396:	bd80      	pop	{r7, pc}
 8012398:	2000008a 	.word	0x2000008a

0801239c <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 801239c:	b580      	push	{r7, lr}
 801239e:	b084      	sub	sp, #16
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
 80123a4:	460b      	mov	r3, r1
 80123a6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	32b0      	adds	r2, #176	; 0xb0
 80123b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123b6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d01d      	beq.n	80123fa <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	4a10      	ldr	r2, [pc, #64]	; (8012404 <MSC_BOT_SendCSW+0x68>)
 80123c2:	f8c3 2830 	str.w	r2, [r3, #2096]	; 0x830
  hmsc->csw.bStatus = CSW_Status;
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	78fa      	ldrb	r2, [r7, #3]
 80123ca:	f883 283c 	strb.w	r2, [r3, #2108]	; 0x83c
  hmsc->bot_state = USBD_BOT_IDLE;
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	2200      	movs	r2, #0
 80123d2:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 80123d4:	4b0c      	ldr	r3, [pc, #48]	; (8012408 <MSC_BOT_SendCSW+0x6c>)
 80123d6:	7819      	ldrb	r1, [r3, #0]
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	f503 6203 	add.w	r2, r3, #2096	; 0x830
 80123de:	230d      	movs	r3, #13
 80123e0:	6878      	ldr	r0, [r7, #4]
 80123e2:	f007 f841 	bl	8019468 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80123e6:	4b09      	ldr	r3, [pc, #36]	; (801240c <MSC_BOT_SendCSW+0x70>)
 80123e8:	7819      	ldrb	r1, [r3, #0]
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	f503 6201 	add.w	r2, r3, #2064	; 0x810
 80123f0:	231f      	movs	r3, #31
 80123f2:	6878      	ldr	r0, [r7, #4]
 80123f4:	f007 f859 	bl	80194aa <USBD_LL_PrepareReceive>
 80123f8:	e000      	b.n	80123fc <MSC_BOT_SendCSW+0x60>
    return;
 80123fa:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80123fc:	3710      	adds	r7, #16
 80123fe:	46bd      	mov	sp, r7
 8012400:	bd80      	pop	{r7, pc}
 8012402:	bf00      	nop
 8012404:	53425355 	.word	0x53425355
 8012408:	2000008a 	.word	0x2000008a
 801240c:	2000008b 	.word	0x2000008b

08012410 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8012410:	b580      	push	{r7, lr}
 8012412:	b084      	sub	sp, #16
 8012414:	af00      	add	r7, sp, #0
 8012416:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	32b0      	adds	r2, #176	; 0xb0
 8012422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012426:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d02a      	beq.n	8012484 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 8012434:	2b00      	cmp	r3, #0
 8012436:	d10e      	bne.n	8012456 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
  if ((hmsc->cbw.bmFlags == 0U) &&
 801243e:	2b00      	cmp	r3, #0
 8012440:	d009      	beq.n	8012456 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8012446:	2b00      	cmp	r3, #0
 8012448:	d105      	bne.n	8012456 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 801244a:	4b10      	ldr	r3, [pc, #64]	; (801248c <MSC_BOT_Abort+0x7c>)
 801244c:	781b      	ldrb	r3, [r3, #0]
 801244e:	4619      	mov	r1, r3
 8012450:	6878      	ldr	r0, [r7, #4]
 8012452:	f006 ff80 	bl	8019356 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8012456:	4b0e      	ldr	r3, [pc, #56]	; (8012490 <MSC_BOT_Abort+0x80>)
 8012458:	781b      	ldrb	r3, [r3, #0]
 801245a:	4619      	mov	r1, r3
 801245c:	6878      	ldr	r0, [r7, #4]
 801245e:	f006 ff7a 	bl	8019356 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	7a5b      	ldrb	r3, [r3, #9]
 8012466:	2b02      	cmp	r3, #2
 8012468:	d10d      	bne.n	8012486 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 801246a:	4b09      	ldr	r3, [pc, #36]	; (8012490 <MSC_BOT_Abort+0x80>)
 801246c:	781b      	ldrb	r3, [r3, #0]
 801246e:	4619      	mov	r1, r3
 8012470:	6878      	ldr	r0, [r7, #4]
 8012472:	f006 ff70 	bl	8019356 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8012476:	4b05      	ldr	r3, [pc, #20]	; (801248c <MSC_BOT_Abort+0x7c>)
 8012478:	781b      	ldrb	r3, [r3, #0]
 801247a:	4619      	mov	r1, r3
 801247c:	6878      	ldr	r0, [r7, #4]
 801247e:	f006 ff6a 	bl	8019356 <USBD_LL_StallEP>
 8012482:	e000      	b.n	8012486 <MSC_BOT_Abort+0x76>
    return;
 8012484:	bf00      	nop
  }
}
 8012486:	3710      	adds	r7, #16
 8012488:	46bd      	mov	sp, r7
 801248a:	bd80      	pop	{r7, pc}
 801248c:	2000008b 	.word	0x2000008b
 8012490:	2000008a 	.word	0x2000008a

08012494 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012494:	b580      	push	{r7, lr}
 8012496:	b084      	sub	sp, #16
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
 801249c:	460b      	mov	r3, r1
 801249e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	32b0      	adds	r2, #176	; 0xb0
 80124aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80124ae:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d01d      	beq.n	80124f2 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	7a5b      	ldrb	r3, [r3, #9]
 80124ba:	2b02      	cmp	r3, #2
 80124bc:	d10c      	bne.n	80124d8 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80124be:	4b10      	ldr	r3, [pc, #64]	; (8012500 <MSC_BOT_CplClrFeature+0x6c>)
 80124c0:	781b      	ldrb	r3, [r3, #0]
 80124c2:	4619      	mov	r1, r3
 80124c4:	6878      	ldr	r0, [r7, #4]
 80124c6:	f006 ff46 	bl	8019356 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80124ca:	4b0e      	ldr	r3, [pc, #56]	; (8012504 <MSC_BOT_CplClrFeature+0x70>)
 80124cc:	781b      	ldrb	r3, [r3, #0]
 80124ce:	4619      	mov	r1, r3
 80124d0:	6878      	ldr	r0, [r7, #4]
 80124d2:	f006 ff40 	bl	8019356 <USBD_LL_StallEP>
 80124d6:	e00f      	b.n	80124f8 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80124d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	da0a      	bge.n	80124f6 <MSC_BOT_CplClrFeature+0x62>
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	7a5b      	ldrb	r3, [r3, #9]
 80124e4:	2b01      	cmp	r3, #1
 80124e6:	d006      	beq.n	80124f6 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80124e8:	2101      	movs	r1, #1
 80124ea:	6878      	ldr	r0, [r7, #4]
 80124ec:	f7ff ff56 	bl	801239c <MSC_BOT_SendCSW>
 80124f0:	e002      	b.n	80124f8 <MSC_BOT_CplClrFeature+0x64>
    return;
 80124f2:	bf00      	nop
 80124f4:	e000      	b.n	80124f8 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 80124f6:	bf00      	nop
  }
}
 80124f8:	3710      	adds	r7, #16
 80124fa:	46bd      	mov	sp, r7
 80124fc:	bd80      	pop	{r7, pc}
 80124fe:	bf00      	nop
 8012500:	2000008a 	.word	0x2000008a
 8012504:	2000008b 	.word	0x2000008b

08012508 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b086      	sub	sp, #24
 801250c:	af00      	add	r7, sp, #0
 801250e:	60f8      	str	r0, [r7, #12]
 8012510:	460b      	mov	r3, r1
 8012512:	607a      	str	r2, [r7, #4]
 8012514:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	32b0      	adds	r2, #176	; 0xb0
 8012520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012524:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8012526:	693b      	ldr	r3, [r7, #16]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d102      	bne.n	8012532 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 801252c:	f04f 33ff 	mov.w	r3, #4294967295
 8012530:	e168      	b.n	8012804 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	781b      	ldrb	r3, [r3, #0]
 8012536:	2baa      	cmp	r3, #170	; 0xaa
 8012538:	f000 8144 	beq.w	80127c4 <SCSI_ProcessCmd+0x2bc>
 801253c:	2baa      	cmp	r3, #170	; 0xaa
 801253e:	f300 8153 	bgt.w	80127e8 <SCSI_ProcessCmd+0x2e0>
 8012542:	2ba8      	cmp	r3, #168	; 0xa8
 8012544:	f000 812c 	beq.w	80127a0 <SCSI_ProcessCmd+0x298>
 8012548:	2ba8      	cmp	r3, #168	; 0xa8
 801254a:	f300 814d 	bgt.w	80127e8 <SCSI_ProcessCmd+0x2e0>
 801254e:	2b5a      	cmp	r3, #90	; 0x5a
 8012550:	f300 80c0 	bgt.w	80126d4 <SCSI_ProcessCmd+0x1cc>
 8012554:	2b00      	cmp	r3, #0
 8012556:	f2c0 8147 	blt.w	80127e8 <SCSI_ProcessCmd+0x2e0>
 801255a:	2b5a      	cmp	r3, #90	; 0x5a
 801255c:	f200 8144 	bhi.w	80127e8 <SCSI_ProcessCmd+0x2e0>
 8012560:	a201      	add	r2, pc, #4	; (adr r2, 8012568 <SCSI_ProcessCmd+0x60>)
 8012562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012566:	bf00      	nop
 8012568:	080126db 	.word	0x080126db
 801256c:	080127e9 	.word	0x080127e9
 8012570:	080127e9 	.word	0x080127e9
 8012574:	080126ed 	.word	0x080126ed
 8012578:	080127e9 	.word	0x080127e9
 801257c:	080127e9 	.word	0x080127e9
 8012580:	080127e9 	.word	0x080127e9
 8012584:	080127e9 	.word	0x080127e9
 8012588:	080127e9 	.word	0x080127e9
 801258c:	080127e9 	.word	0x080127e9
 8012590:	080127e9 	.word	0x080127e9
 8012594:	080127e9 	.word	0x080127e9
 8012598:	080127e9 	.word	0x080127e9
 801259c:	080127e9 	.word	0x080127e9
 80125a0:	080127e9 	.word	0x080127e9
 80125a4:	080127e9 	.word	0x080127e9
 80125a8:	080127e9 	.word	0x080127e9
 80125ac:	080127e9 	.word	0x080127e9
 80125b0:	080126ff 	.word	0x080126ff
 80125b4:	080127e9 	.word	0x080127e9
 80125b8:	080127e9 	.word	0x080127e9
 80125bc:	080127e9 	.word	0x080127e9
 80125c0:	080127e9 	.word	0x080127e9
 80125c4:	080127e9 	.word	0x080127e9
 80125c8:	080127e9 	.word	0x080127e9
 80125cc:	080127e9 	.word	0x080127e9
 80125d0:	08012735 	.word	0x08012735
 80125d4:	08012711 	.word	0x08012711
 80125d8:	080127e9 	.word	0x080127e9
 80125dc:	080127e9 	.word	0x080127e9
 80125e0:	08012723 	.word	0x08012723
 80125e4:	080127e9 	.word	0x080127e9
 80125e8:	080127e9 	.word	0x080127e9
 80125ec:	080127e9 	.word	0x080127e9
 80125f0:	080127e9 	.word	0x080127e9
 80125f4:	08012759 	.word	0x08012759
 80125f8:	080127e9 	.word	0x080127e9
 80125fc:	0801276b 	.word	0x0801276b
 8012600:	080127e9 	.word	0x080127e9
 8012604:	080127e9 	.word	0x080127e9
 8012608:	0801278f 	.word	0x0801278f
 801260c:	080127e9 	.word	0x080127e9
 8012610:	080127b3 	.word	0x080127b3
 8012614:	080127e9 	.word	0x080127e9
 8012618:	080127e9 	.word	0x080127e9
 801261c:	080127e9 	.word	0x080127e9
 8012620:	080127e9 	.word	0x080127e9
 8012624:	080127d7 	.word	0x080127d7
 8012628:	080127e9 	.word	0x080127e9
 801262c:	080127e9 	.word	0x080127e9
 8012630:	080127e9 	.word	0x080127e9
 8012634:	080127e9 	.word	0x080127e9
 8012638:	080127e9 	.word	0x080127e9
 801263c:	080127e9 	.word	0x080127e9
 8012640:	080127e9 	.word	0x080127e9
 8012644:	080127e9 	.word	0x080127e9
 8012648:	080127e9 	.word	0x080127e9
 801264c:	080127e9 	.word	0x080127e9
 8012650:	080127e9 	.word	0x080127e9
 8012654:	080127e9 	.word	0x080127e9
 8012658:	080127e9 	.word	0x080127e9
 801265c:	080127e9 	.word	0x080127e9
 8012660:	080127e9 	.word	0x080127e9
 8012664:	080127e9 	.word	0x080127e9
 8012668:	080127e9 	.word	0x080127e9
 801266c:	080127e9 	.word	0x080127e9
 8012670:	080127e9 	.word	0x080127e9
 8012674:	080127e9 	.word	0x080127e9
 8012678:	080127e9 	.word	0x080127e9
 801267c:	080127e9 	.word	0x080127e9
 8012680:	080127e9 	.word	0x080127e9
 8012684:	080127e9 	.word	0x080127e9
 8012688:	080127e9 	.word	0x080127e9
 801268c:	080127e9 	.word	0x080127e9
 8012690:	080127e9 	.word	0x080127e9
 8012694:	080127e9 	.word	0x080127e9
 8012698:	080127e9 	.word	0x080127e9
 801269c:	080127e9 	.word	0x080127e9
 80126a0:	080127e9 	.word	0x080127e9
 80126a4:	080127e9 	.word	0x080127e9
 80126a8:	080127e9 	.word	0x080127e9
 80126ac:	080127e9 	.word	0x080127e9
 80126b0:	080127e9 	.word	0x080127e9
 80126b4:	080127e9 	.word	0x080127e9
 80126b8:	080127e9 	.word	0x080127e9
 80126bc:	080127e9 	.word	0x080127e9
 80126c0:	080127e9 	.word	0x080127e9
 80126c4:	080127e9 	.word	0x080127e9
 80126c8:	080127e9 	.word	0x080127e9
 80126cc:	080127e9 	.word	0x080127e9
 80126d0:	08012747 	.word	0x08012747
 80126d4:	2b9e      	cmp	r3, #158	; 0x9e
 80126d6:	d051      	beq.n	801277c <SCSI_ProcessCmd+0x274>
 80126d8:	e086      	b.n	80127e8 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80126da:	7afb      	ldrb	r3, [r7, #11]
 80126dc:	687a      	ldr	r2, [r7, #4]
 80126de:	4619      	mov	r1, r3
 80126e0:	68f8      	ldr	r0, [r7, #12]
 80126e2:	f000 f893 	bl	801280c <SCSI_TestUnitReady>
 80126e6:	4603      	mov	r3, r0
 80126e8:	75fb      	strb	r3, [r7, #23]
      break;
 80126ea:	e089      	b.n	8012800 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 80126ec:	7afb      	ldrb	r3, [r7, #11]
 80126ee:	687a      	ldr	r2, [r7, #4]
 80126f0:	4619      	mov	r1, r3
 80126f2:	68f8      	ldr	r0, [r7, #12]
 80126f4:	f000 fb6e 	bl	8012dd4 <SCSI_RequestSense>
 80126f8:	4603      	mov	r3, r0
 80126fa:	75fb      	strb	r3, [r7, #23]
      break;
 80126fc:	e080      	b.n	8012800 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 80126fe:	7afb      	ldrb	r3, [r7, #11]
 8012700:	687a      	ldr	r2, [r7, #4]
 8012702:	4619      	mov	r1, r3
 8012704:	68f8      	ldr	r0, [r7, #12]
 8012706:	f000 f8db 	bl	80128c0 <SCSI_Inquiry>
 801270a:	4603      	mov	r3, r0
 801270c:	75fb      	strb	r3, [r7, #23]
      break;
 801270e:	e077      	b.n	8012800 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8012710:	7afb      	ldrb	r3, [r7, #11]
 8012712:	687a      	ldr	r2, [r7, #4]
 8012714:	4619      	mov	r1, r3
 8012716:	68f8      	ldr	r0, [r7, #12]
 8012718:	f000 fc30 	bl	8012f7c <SCSI_StartStopUnit>
 801271c:	4603      	mov	r3, r0
 801271e:	75fb      	strb	r3, [r7, #23]
      break;
 8012720:	e06e      	b.n	8012800 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8012722:	7afb      	ldrb	r3, [r7, #11]
 8012724:	687a      	ldr	r2, [r7, #4]
 8012726:	4619      	mov	r1, r3
 8012728:	68f8      	ldr	r0, [r7, #12]
 801272a:	f000 fc7c 	bl	8013026 <SCSI_AllowPreventRemovable>
 801272e:	4603      	mov	r3, r0
 8012730:	75fb      	strb	r3, [r7, #23]
      break;
 8012732:	e065      	b.n	8012800 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8012734:	7afb      	ldrb	r3, [r7, #11]
 8012736:	687a      	ldr	r2, [r7, #4]
 8012738:	4619      	mov	r1, r3
 801273a:	68f8      	ldr	r0, [r7, #12]
 801273c:	f000 faea 	bl	8012d14 <SCSI_ModeSense6>
 8012740:	4603      	mov	r3, r0
 8012742:	75fb      	strb	r3, [r7, #23]
      break;
 8012744:	e05c      	b.n	8012800 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8012746:	7afb      	ldrb	r3, [r7, #11]
 8012748:	687a      	ldr	r2, [r7, #4]
 801274a:	4619      	mov	r1, r3
 801274c:	68f8      	ldr	r0, [r7, #12]
 801274e:	f000 fb11 	bl	8012d74 <SCSI_ModeSense10>
 8012752:	4603      	mov	r3, r0
 8012754:	75fb      	strb	r3, [r7, #23]
      break;
 8012756:	e053      	b.n	8012800 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8012758:	7afb      	ldrb	r3, [r7, #11]
 801275a:	687a      	ldr	r2, [r7, #4]
 801275c:	4619      	mov	r1, r3
 801275e:	68f8      	ldr	r0, [r7, #12]
 8012760:	f000 fa5d 	bl	8012c1e <SCSI_ReadFormatCapacity>
 8012764:	4603      	mov	r3, r0
 8012766:	75fb      	strb	r3, [r7, #23]
      break;
 8012768:	e04a      	b.n	8012800 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 801276a:	7afb      	ldrb	r3, [r7, #11]
 801276c:	687a      	ldr	r2, [r7, #4]
 801276e:	4619      	mov	r1, r3
 8012770:	68f8      	ldr	r0, [r7, #12]
 8012772:	f000 f923 	bl	80129bc <SCSI_ReadCapacity10>
 8012776:	4603      	mov	r3, r0
 8012778:	75fb      	strb	r3, [r7, #23]
      break;
 801277a:	e041      	b.n	8012800 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 801277c:	7afb      	ldrb	r3, [r7, #11]
 801277e:	687a      	ldr	r2, [r7, #4]
 8012780:	4619      	mov	r1, r3
 8012782:	68f8      	ldr	r0, [r7, #12]
 8012784:	f000 f998 	bl	8012ab8 <SCSI_ReadCapacity16>
 8012788:	4603      	mov	r3, r0
 801278a:	75fb      	strb	r3, [r7, #23]
      break;
 801278c:	e038      	b.n	8012800 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 801278e:	7afb      	ldrb	r3, [r7, #11]
 8012790:	687a      	ldr	r2, [r7, #4]
 8012792:	4619      	mov	r1, r3
 8012794:	68f8      	ldr	r0, [r7, #12]
 8012796:	f000 fc73 	bl	8013080 <SCSI_Read10>
 801279a:	4603      	mov	r3, r0
 801279c:	75fb      	strb	r3, [r7, #23]
      break;
 801279e:	e02f      	b.n	8012800 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 80127a0:	7afb      	ldrb	r3, [r7, #11]
 80127a2:	687a      	ldr	r2, [r7, #4]
 80127a4:	4619      	mov	r1, r3
 80127a6:	68f8      	ldr	r0, [r7, #12]
 80127a8:	f000 fd14 	bl	80131d4 <SCSI_Read12>
 80127ac:	4603      	mov	r3, r0
 80127ae:	75fb      	strb	r3, [r7, #23]
      break;
 80127b0:	e026      	b.n	8012800 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 80127b2:	7afb      	ldrb	r3, [r7, #11]
 80127b4:	687a      	ldr	r2, [r7, #4]
 80127b6:	4619      	mov	r1, r3
 80127b8:	68f8      	ldr	r0, [r7, #12]
 80127ba:	f000 fdbf 	bl	801333c <SCSI_Write10>
 80127be:	4603      	mov	r3, r0
 80127c0:	75fb      	strb	r3, [r7, #23]
      break;
 80127c2:	e01d      	b.n	8012800 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 80127c4:	7afb      	ldrb	r3, [r7, #11]
 80127c6:	687a      	ldr	r2, [r7, #4]
 80127c8:	4619      	mov	r1, r3
 80127ca:	68f8      	ldr	r0, [r7, #12]
 80127cc:	f000 fe8c 	bl	80134e8 <SCSI_Write12>
 80127d0:	4603      	mov	r3, r0
 80127d2:	75fb      	strb	r3, [r7, #23]
      break;
 80127d4:	e014      	b.n	8012800 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 80127d6:	7afb      	ldrb	r3, [r7, #11]
 80127d8:	687a      	ldr	r2, [r7, #4]
 80127da:	4619      	mov	r1, r3
 80127dc:	68f8      	ldr	r0, [r7, #12]
 80127de:	f000 ff69 	bl	80136b4 <SCSI_Verify10>
 80127e2:	4603      	mov	r3, r0
 80127e4:	75fb      	strb	r3, [r7, #23]
      break;
 80127e6:	e00b      	b.n	8012800 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80127e8:	7af9      	ldrb	r1, [r7, #11]
 80127ea:	2320      	movs	r3, #32
 80127ec:	2205      	movs	r2, #5
 80127ee:	68f8      	ldr	r0, [r7, #12]
 80127f0:	f000 fb76 	bl	8012ee0 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80127f4:	693b      	ldr	r3, [r7, #16]
 80127f6:	2202      	movs	r2, #2
 80127f8:	725a      	strb	r2, [r3, #9]
      ret = -1;
 80127fa:	23ff      	movs	r3, #255	; 0xff
 80127fc:	75fb      	strb	r3, [r7, #23]
      break;
 80127fe:	bf00      	nop
  }

  return ret;
 8012800:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012804:	4618      	mov	r0, r3
 8012806:	3718      	adds	r7, #24
 8012808:	46bd      	mov	sp, r7
 801280a:	bd80      	pop	{r7, pc}

0801280c <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801280c:	b580      	push	{r7, lr}
 801280e:	b086      	sub	sp, #24
 8012810:	af00      	add	r7, sp, #0
 8012812:	60f8      	str	r0, [r7, #12]
 8012814:	460b      	mov	r3, r1
 8012816:	607a      	str	r2, [r7, #4]
 8012818:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	32b0      	adds	r2, #176	; 0xb0
 8012824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012828:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801282a:	697b      	ldr	r3, [r7, #20]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d102      	bne.n	8012836 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8012830:	f04f 33ff 	mov.w	r3, #4294967295
 8012834:	e03f      	b.n	80128b6 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8012836:	697b      	ldr	r3, [r7, #20]
 8012838:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 801283c:	2b00      	cmp	r3, #0
 801283e:	d00a      	beq.n	8012856 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012840:	697b      	ldr	r3, [r7, #20]
 8012842:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8012846:	2320      	movs	r3, #32
 8012848:	2205      	movs	r2, #5
 801284a:	68f8      	ldr	r0, [r7, #12]
 801284c:	f000 fb48 	bl	8012ee0 <SCSI_SenseCode>

    return -1;
 8012850:	f04f 33ff 	mov.w	r3, #4294967295
 8012854:	e02f      	b.n	80128b6 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8012856:	697b      	ldr	r3, [r7, #20]
 8012858:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 801285c:	2b02      	cmp	r3, #2
 801285e:	d10b      	bne.n	8012878 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012860:	7af9      	ldrb	r1, [r7, #11]
 8012862:	233a      	movs	r3, #58	; 0x3a
 8012864:	2202      	movs	r2, #2
 8012866:	68f8      	ldr	r0, [r7, #12]
 8012868:	f000 fb3a 	bl	8012ee0 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801286c:	697b      	ldr	r3, [r7, #20]
 801286e:	2205      	movs	r2, #5
 8012870:	721a      	strb	r2, [r3, #8]
    return -1;
 8012872:	f04f 33ff 	mov.w	r3, #4294967295
 8012876:	e01e      	b.n	80128b6 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801287e:	68fa      	ldr	r2, [r7, #12]
 8012880:	33b0      	adds	r3, #176	; 0xb0
 8012882:	009b      	lsls	r3, r3, #2
 8012884:	4413      	add	r3, r2
 8012886:	685b      	ldr	r3, [r3, #4]
 8012888:	689b      	ldr	r3, [r3, #8]
 801288a:	7afa      	ldrb	r2, [r7, #11]
 801288c:	4610      	mov	r0, r2
 801288e:	4798      	blx	r3
 8012890:	4603      	mov	r3, r0
 8012892:	2b00      	cmp	r3, #0
 8012894:	d00b      	beq.n	80128ae <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012896:	7af9      	ldrb	r1, [r7, #11]
 8012898:	233a      	movs	r3, #58	; 0x3a
 801289a:	2202      	movs	r2, #2
 801289c:	68f8      	ldr	r0, [r7, #12]
 801289e:	f000 fb1f 	bl	8012ee0 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80128a2:	697b      	ldr	r3, [r7, #20]
 80128a4:	2205      	movs	r2, #5
 80128a6:	721a      	strb	r2, [r3, #8]

    return -1;
 80128a8:	f04f 33ff 	mov.w	r3, #4294967295
 80128ac:	e003      	b.n	80128b6 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 80128ae:	697b      	ldr	r3, [r7, #20]
 80128b0:	2200      	movs	r2, #0
 80128b2:	60da      	str	r2, [r3, #12]

  return 0;
 80128b4:	2300      	movs	r3, #0
}
 80128b6:	4618      	mov	r0, r3
 80128b8:	3718      	adds	r7, #24
 80128ba:	46bd      	mov	sp, r7
 80128bc:	bd80      	pop	{r7, pc}
	...

080128c0 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80128c0:	b580      	push	{r7, lr}
 80128c2:	b088      	sub	sp, #32
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	60f8      	str	r0, [r7, #12]
 80128c8:	460b      	mov	r3, r1
 80128ca:	607a      	str	r2, [r7, #4]
 80128cc:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	32b0      	adds	r2, #176	; 0xb0
 80128d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128dc:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80128de:	69bb      	ldr	r3, [r7, #24]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d102      	bne.n	80128ea <SCSI_Inquiry+0x2a>
  {
    return -1;
 80128e4:	f04f 33ff 	mov.w	r3, #4294967295
 80128e8:	e05f      	b.n	80129aa <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80128ea:	69bb      	ldr	r3, [r7, #24]
 80128ec:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d10a      	bne.n	801290a <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80128f4:	69bb      	ldr	r3, [r7, #24]
 80128f6:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 80128fa:	2320      	movs	r3, #32
 80128fc:	2205      	movs	r2, #5
 80128fe:	68f8      	ldr	r0, [r7, #12]
 8012900:	f000 faee 	bl	8012ee0 <SCSI_SenseCode>
    return -1;
 8012904:	f04f 33ff 	mov.w	r3, #4294967295
 8012908:	e04f      	b.n	80129aa <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	3301      	adds	r3, #1
 801290e:	781b      	ldrb	r3, [r3, #0]
 8012910:	f003 0301 	and.w	r3, r3, #1
 8012914:	2b00      	cmp	r3, #0
 8012916:	d020      	beq.n	801295a <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	3302      	adds	r3, #2
 801291c:	781b      	ldrb	r3, [r3, #0]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d105      	bne.n	801292e <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8012922:	2206      	movs	r2, #6
 8012924:	4923      	ldr	r1, [pc, #140]	; (80129b4 <SCSI_Inquiry+0xf4>)
 8012926:	69b8      	ldr	r0, [r7, #24]
 8012928:	f001 f84a 	bl	80139c0 <SCSI_UpdateBotData>
 801292c:	e03c      	b.n	80129a8 <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	3302      	adds	r3, #2
 8012932:	781b      	ldrb	r3, [r3, #0]
 8012934:	2b80      	cmp	r3, #128	; 0x80
 8012936:	d105      	bne.n	8012944 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8012938:	2208      	movs	r2, #8
 801293a:	491f      	ldr	r1, [pc, #124]	; (80129b8 <SCSI_Inquiry+0xf8>)
 801293c:	69b8      	ldr	r0, [r7, #24]
 801293e:	f001 f83f 	bl	80139c0 <SCSI_UpdateBotData>
 8012942:	e031      	b.n	80129a8 <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8012944:	69bb      	ldr	r3, [r7, #24]
 8012946:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 801294a:	2324      	movs	r3, #36	; 0x24
 801294c:	2205      	movs	r2, #5
 801294e:	68f8      	ldr	r0, [r7, #12]
 8012950:	f000 fac6 	bl	8012ee0 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8012954:	f04f 33ff 	mov.w	r3, #4294967295
 8012958:	e027      	b.n	80129aa <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012960:	68fa      	ldr	r2, [r7, #12]
 8012962:	33b0      	adds	r3, #176	; 0xb0
 8012964:	009b      	lsls	r3, r3, #2
 8012966:	4413      	add	r3, r2
 8012968:	685b      	ldr	r3, [r3, #4]
 801296a:	69d9      	ldr	r1, [r3, #28]
 801296c:	7afa      	ldrb	r2, [r7, #11]
 801296e:	4613      	mov	r3, r2
 8012970:	00db      	lsls	r3, r3, #3
 8012972:	4413      	add	r3, r2
 8012974:	009b      	lsls	r3, r3, #2
 8012976:	440b      	add	r3, r1
 8012978:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 801297a:	697b      	ldr	r3, [r7, #20]
 801297c:	3304      	adds	r3, #4
 801297e:	781b      	ldrb	r3, [r3, #0]
 8012980:	b29b      	uxth	r3, r3
 8012982:	3305      	adds	r3, #5
 8012984:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	3304      	adds	r3, #4
 801298a:	781b      	ldrb	r3, [r3, #0]
 801298c:	b29b      	uxth	r3, r3
 801298e:	8bfa      	ldrh	r2, [r7, #30]
 8012990:	429a      	cmp	r2, r3
 8012992:	d303      	bcc.n	801299c <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	3304      	adds	r3, #4
 8012998:	781b      	ldrb	r3, [r3, #0]
 801299a:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 801299c:	8bfb      	ldrh	r3, [r7, #30]
 801299e:	461a      	mov	r2, r3
 80129a0:	6979      	ldr	r1, [r7, #20]
 80129a2:	69b8      	ldr	r0, [r7, #24]
 80129a4:	f001 f80c 	bl	80139c0 <SCSI_UpdateBotData>
  }

  return 0;
 80129a8:	2300      	movs	r3, #0
}
 80129aa:	4618      	mov	r0, r3
 80129ac:	3720      	adds	r7, #32
 80129ae:	46bd      	mov	sp, r7
 80129b0:	bd80      	pop	{r7, pc}
 80129b2:	bf00      	nop
 80129b4:	2000008c 	.word	0x2000008c
 80129b8:	20000094 	.word	0x20000094

080129bc <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80129bc:	b580      	push	{r7, lr}
 80129be:	b086      	sub	sp, #24
 80129c0:	af00      	add	r7, sp, #0
 80129c2:	60f8      	str	r0, [r7, #12]
 80129c4:	460b      	mov	r3, r1
 80129c6:	607a      	str	r2, [r7, #4]
 80129c8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	32b0      	adds	r2, #176	; 0xb0
 80129d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129d8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80129da:	697b      	ldr	r3, [r7, #20]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d102      	bne.n	80129e6 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 80129e0:	f04f 33ff 	mov.w	r3, #4294967295
 80129e4:	e064      	b.n	8012ab0 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80129ec:	68fa      	ldr	r2, [r7, #12]
 80129ee:	33b0      	adds	r3, #176	; 0xb0
 80129f0:	009b      	lsls	r3, r3, #2
 80129f2:	4413      	add	r3, r2
 80129f4:	685b      	ldr	r3, [r3, #4]
 80129f6:	685b      	ldr	r3, [r3, #4]
 80129f8:	697a      	ldr	r2, [r7, #20]
 80129fa:	f602 0168 	addw	r1, r2, #2152	; 0x868
 80129fe:	697a      	ldr	r2, [r7, #20]
 8012a00:	f602 0264 	addw	r2, r2, #2148	; 0x864
 8012a04:	7af8      	ldrb	r0, [r7, #11]
 8012a06:	4798      	blx	r3
 8012a08:	4603      	mov	r3, r0
 8012a0a:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8012a0c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d104      	bne.n	8012a1e <SCSI_ReadCapacity10+0x62>
 8012a14:	697b      	ldr	r3, [r7, #20]
 8012a16:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 8012a1a:	2b02      	cmp	r3, #2
 8012a1c:	d108      	bne.n	8012a30 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012a1e:	7af9      	ldrb	r1, [r7, #11]
 8012a20:	233a      	movs	r3, #58	; 0x3a
 8012a22:	2202      	movs	r2, #2
 8012a24:	68f8      	ldr	r0, [r7, #12]
 8012a26:	f000 fa5b 	bl	8012ee0 <SCSI_SenseCode>
    return -1;
 8012a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8012a2e:	e03f      	b.n	8012ab0 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8012a30:	697b      	ldr	r3, [r7, #20]
 8012a32:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8012a36:	3b01      	subs	r3, #1
 8012a38:	0e1b      	lsrs	r3, r3, #24
 8012a3a:	b2da      	uxtb	r2, r3
 8012a3c:	697b      	ldr	r3, [r7, #20]
 8012a3e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8012a40:	697b      	ldr	r3, [r7, #20]
 8012a42:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8012a46:	3b01      	subs	r3, #1
 8012a48:	0c1b      	lsrs	r3, r3, #16
 8012a4a:	b2da      	uxtb	r2, r3
 8012a4c:	697b      	ldr	r3, [r7, #20]
 8012a4e:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8012a50:	697b      	ldr	r3, [r7, #20]
 8012a52:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8012a56:	3b01      	subs	r3, #1
 8012a58:	0a1b      	lsrs	r3, r3, #8
 8012a5a:	b2da      	uxtb	r2, r3
 8012a5c:	697b      	ldr	r3, [r7, #20]
 8012a5e:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8012a60:	697b      	ldr	r3, [r7, #20]
 8012a62:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8012a66:	b2db      	uxtb	r3, r3
 8012a68:	3b01      	subs	r3, #1
 8012a6a:	b2da      	uxtb	r2, r3
 8012a6c:	697b      	ldr	r3, [r7, #20]
 8012a6e:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8012a70:	697b      	ldr	r3, [r7, #20]
 8012a72:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8012a76:	161b      	asrs	r3, r3, #24
 8012a78:	b2da      	uxtb	r2, r3
 8012a7a:	697b      	ldr	r3, [r7, #20]
 8012a7c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8012a7e:	697b      	ldr	r3, [r7, #20]
 8012a80:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8012a84:	141b      	asrs	r3, r3, #16
 8012a86:	b2da      	uxtb	r2, r3
 8012a88:	697b      	ldr	r3, [r7, #20]
 8012a8a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8012a8c:	697b      	ldr	r3, [r7, #20]
 8012a8e:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8012a92:	0a1b      	lsrs	r3, r3, #8
 8012a94:	b29b      	uxth	r3, r3
 8012a96:	b2da      	uxtb	r2, r3
 8012a98:	697b      	ldr	r3, [r7, #20]
 8012a9a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8012a9c:	697b      	ldr	r3, [r7, #20]
 8012a9e:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8012aa2:	b2da      	uxtb	r2, r3
 8012aa4:	697b      	ldr	r3, [r7, #20]
 8012aa6:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8012aa8:	697b      	ldr	r3, [r7, #20]
 8012aaa:	2208      	movs	r2, #8
 8012aac:	60da      	str	r2, [r3, #12]

  return 0;
 8012aae:	2300      	movs	r3, #0

}
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	3718      	adds	r7, #24
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	bd80      	pop	{r7, pc}

08012ab8 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	b088      	sub	sp, #32
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	60f8      	str	r0, [r7, #12]
 8012ac0:	460b      	mov	r3, r1
 8012ac2:	607a      	str	r2, [r7, #4]
 8012ac4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	32b0      	adds	r2, #176	; 0xb0
 8012ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ad4:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8012ad6:	69bb      	ldr	r3, [r7, #24]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d102      	bne.n	8012ae2 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8012adc:	f04f 33ff 	mov.w	r3, #4294967295
 8012ae0:	e099      	b.n	8012c16 <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012ae8:	68fa      	ldr	r2, [r7, #12]
 8012aea:	33b0      	adds	r3, #176	; 0xb0
 8012aec:	009b      	lsls	r3, r3, #2
 8012aee:	4413      	add	r3, r2
 8012af0:	685b      	ldr	r3, [r3, #4]
 8012af2:	685b      	ldr	r3, [r3, #4]
 8012af4:	69ba      	ldr	r2, [r7, #24]
 8012af6:	f602 0168 	addw	r1, r2, #2152	; 0x868
 8012afa:	69ba      	ldr	r2, [r7, #24]
 8012afc:	f602 0264 	addw	r2, r2, #2148	; 0x864
 8012b00:	7af8      	ldrb	r0, [r7, #11]
 8012b02:	4798      	blx	r3
 8012b04:	4603      	mov	r3, r0
 8012b06:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8012b08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d104      	bne.n	8012b1a <SCSI_ReadCapacity16+0x62>
 8012b10:	69bb      	ldr	r3, [r7, #24]
 8012b12:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 8012b16:	2b02      	cmp	r3, #2
 8012b18:	d108      	bne.n	8012b2c <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012b1a:	7af9      	ldrb	r1, [r7, #11]
 8012b1c:	233a      	movs	r3, #58	; 0x3a
 8012b1e:	2202      	movs	r2, #2
 8012b20:	68f8      	ldr	r0, [r7, #12]
 8012b22:	f000 f9dd 	bl	8012ee0 <SCSI_SenseCode>
    return -1;
 8012b26:	f04f 33ff 	mov.w	r3, #4294967295
 8012b2a:	e074      	b.n	8012c16 <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	330a      	adds	r3, #10
 8012b30:	781b      	ldrb	r3, [r3, #0]
 8012b32:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	330b      	adds	r3, #11
 8012b38:	781b      	ldrb	r3, [r3, #0]
 8012b3a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012b3c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	330c      	adds	r3, #12
 8012b42:	781b      	ldrb	r3, [r3, #0]
 8012b44:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8012b46:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8012b48:	687a      	ldr	r2, [r7, #4]
 8012b4a:	320d      	adds	r2, #13
 8012b4c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8012b4e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012b50:	69bb      	ldr	r3, [r7, #24]
 8012b52:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8012b54:	2300      	movs	r3, #0
 8012b56:	77fb      	strb	r3, [r7, #31]
 8012b58:	e007      	b.n	8012b6a <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 8012b5a:	7ffb      	ldrb	r3, [r7, #31]
 8012b5c:	69ba      	ldr	r2, [r7, #24]
 8012b5e:	4413      	add	r3, r2
 8012b60:	2200      	movs	r2, #0
 8012b62:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8012b64:	7ffb      	ldrb	r3, [r7, #31]
 8012b66:	3301      	adds	r3, #1
 8012b68:	77fb      	strb	r3, [r7, #31]
 8012b6a:	7ffa      	ldrb	r2, [r7, #31]
 8012b6c:	69bb      	ldr	r3, [r7, #24]
 8012b6e:	68db      	ldr	r3, [r3, #12]
 8012b70:	429a      	cmp	r2, r3
 8012b72:	d3f2      	bcc.n	8012b5a <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8012b74:	69bb      	ldr	r3, [r7, #24]
 8012b76:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8012b7a:	3b01      	subs	r3, #1
 8012b7c:	0e1b      	lsrs	r3, r3, #24
 8012b7e:	b2da      	uxtb	r2, r3
 8012b80:	69bb      	ldr	r3, [r7, #24]
 8012b82:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8012b84:	69bb      	ldr	r3, [r7, #24]
 8012b86:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8012b8a:	3b01      	subs	r3, #1
 8012b8c:	0c1b      	lsrs	r3, r3, #16
 8012b8e:	b2da      	uxtb	r2, r3
 8012b90:	69bb      	ldr	r3, [r7, #24]
 8012b92:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8012b94:	69bb      	ldr	r3, [r7, #24]
 8012b96:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8012b9a:	3b01      	subs	r3, #1
 8012b9c:	0a1b      	lsrs	r3, r3, #8
 8012b9e:	b2da      	uxtb	r2, r3
 8012ba0:	69bb      	ldr	r3, [r7, #24]
 8012ba2:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8012ba4:	69bb      	ldr	r3, [r7, #24]
 8012ba6:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8012baa:	b2db      	uxtb	r3, r3
 8012bac:	3b01      	subs	r3, #1
 8012bae:	b2da      	uxtb	r2, r3
 8012bb0:	69bb      	ldr	r3, [r7, #24]
 8012bb2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8012bb4:	69bb      	ldr	r3, [r7, #24]
 8012bb6:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8012bba:	161b      	asrs	r3, r3, #24
 8012bbc:	b2da      	uxtb	r2, r3
 8012bbe:	69bb      	ldr	r3, [r7, #24]
 8012bc0:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8012bc2:	69bb      	ldr	r3, [r7, #24]
 8012bc4:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8012bc8:	141b      	asrs	r3, r3, #16
 8012bca:	b2da      	uxtb	r2, r3
 8012bcc:	69bb      	ldr	r3, [r7, #24]
 8012bce:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8012bd0:	69bb      	ldr	r3, [r7, #24]
 8012bd2:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8012bd6:	0a1b      	lsrs	r3, r3, #8
 8012bd8:	b29b      	uxth	r3, r3
 8012bda:	b2da      	uxtb	r2, r3
 8012bdc:	69bb      	ldr	r3, [r7, #24]
 8012bde:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8012be0:	69bb      	ldr	r3, [r7, #24]
 8012be2:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8012be6:	b2da      	uxtb	r2, r3
 8012be8:	69bb      	ldr	r3, [r7, #24]
 8012bea:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	330a      	adds	r3, #10
 8012bf0:	781b      	ldrb	r3, [r3, #0]
 8012bf2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	330b      	adds	r3, #11
 8012bf8:	781b      	ldrb	r3, [r3, #0]
 8012bfa:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012bfc:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	330c      	adds	r3, #12
 8012c02:	781b      	ldrb	r3, [r3, #0]
 8012c04:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8012c06:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8012c08:	687a      	ldr	r2, [r7, #4]
 8012c0a:	320d      	adds	r2, #13
 8012c0c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8012c0e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012c10:	69bb      	ldr	r3, [r7, #24]
 8012c12:	60da      	str	r2, [r3, #12]

  return 0;
 8012c14:	2300      	movs	r3, #0
}
 8012c16:	4618      	mov	r0, r3
 8012c18:	3720      	adds	r7, #32
 8012c1a:	46bd      	mov	sp, r7
 8012c1c:	bd80      	pop	{r7, pc}

08012c1e <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012c1e:	b580      	push	{r7, lr}
 8012c20:	b088      	sub	sp, #32
 8012c22:	af00      	add	r7, sp, #0
 8012c24:	60f8      	str	r0, [r7, #12]
 8012c26:	460b      	mov	r3, r1
 8012c28:	607a      	str	r2, [r7, #4]
 8012c2a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	32b0      	adds	r2, #176	; 0xb0
 8012c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c3a:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8012c3c:	69bb      	ldr	r3, [r7, #24]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d102      	bne.n	8012c48 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8012c42:	f04f 33ff 	mov.w	r3, #4294967295
 8012c46:	e061      	b.n	8012d0c <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012c4e:	68fa      	ldr	r2, [r7, #12]
 8012c50:	33b0      	adds	r3, #176	; 0xb0
 8012c52:	009b      	lsls	r3, r3, #2
 8012c54:	4413      	add	r3, r2
 8012c56:	685b      	ldr	r3, [r3, #4]
 8012c58:	685b      	ldr	r3, [r3, #4]
 8012c5a:	f107 0214 	add.w	r2, r7, #20
 8012c5e:	f107 0110 	add.w	r1, r7, #16
 8012c62:	7af8      	ldrb	r0, [r7, #11]
 8012c64:	4798      	blx	r3
 8012c66:	4603      	mov	r3, r0
 8012c68:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8012c6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d104      	bne.n	8012c7c <SCSI_ReadFormatCapacity+0x5e>
 8012c72:	69bb      	ldr	r3, [r7, #24]
 8012c74:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 8012c78:	2b02      	cmp	r3, #2
 8012c7a:	d108      	bne.n	8012c8e <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012c7c:	7af9      	ldrb	r1, [r7, #11]
 8012c7e:	233a      	movs	r3, #58	; 0x3a
 8012c80:	2202      	movs	r2, #2
 8012c82:	68f8      	ldr	r0, [r7, #12]
 8012c84:	f000 f92c 	bl	8012ee0 <SCSI_SenseCode>
    return -1;
 8012c88:	f04f 33ff 	mov.w	r3, #4294967295
 8012c8c:	e03e      	b.n	8012d0c <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 8012c8e:	2300      	movs	r3, #0
 8012c90:	83fb      	strh	r3, [r7, #30]
 8012c92:	e007      	b.n	8012ca4 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8012c94:	8bfb      	ldrh	r3, [r7, #30]
 8012c96:	69ba      	ldr	r2, [r7, #24]
 8012c98:	4413      	add	r3, r2
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8012c9e:	8bfb      	ldrh	r3, [r7, #30]
 8012ca0:	3301      	adds	r3, #1
 8012ca2:	83fb      	strh	r3, [r7, #30]
 8012ca4:	8bfb      	ldrh	r3, [r7, #30]
 8012ca6:	2b0b      	cmp	r3, #11
 8012ca8:	d9f4      	bls.n	8012c94 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8012caa:	69bb      	ldr	r3, [r7, #24]
 8012cac:	2208      	movs	r2, #8
 8012cae:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8012cb0:	693b      	ldr	r3, [r7, #16]
 8012cb2:	3b01      	subs	r3, #1
 8012cb4:	0e1b      	lsrs	r3, r3, #24
 8012cb6:	b2da      	uxtb	r2, r3
 8012cb8:	69bb      	ldr	r3, [r7, #24]
 8012cba:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8012cbc:	693b      	ldr	r3, [r7, #16]
 8012cbe:	3b01      	subs	r3, #1
 8012cc0:	0c1b      	lsrs	r3, r3, #16
 8012cc2:	b2da      	uxtb	r2, r3
 8012cc4:	69bb      	ldr	r3, [r7, #24]
 8012cc6:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8012cc8:	693b      	ldr	r3, [r7, #16]
 8012cca:	3b01      	subs	r3, #1
 8012ccc:	0a1b      	lsrs	r3, r3, #8
 8012cce:	b2da      	uxtb	r2, r3
 8012cd0:	69bb      	ldr	r3, [r7, #24]
 8012cd2:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8012cd4:	693b      	ldr	r3, [r7, #16]
 8012cd6:	b2db      	uxtb	r3, r3
 8012cd8:	3b01      	subs	r3, #1
 8012cda:	b2da      	uxtb	r2, r3
 8012cdc:	69bb      	ldr	r3, [r7, #24]
 8012cde:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8012ce0:	69bb      	ldr	r3, [r7, #24]
 8012ce2:	2202      	movs	r2, #2
 8012ce4:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8012ce6:	8abb      	ldrh	r3, [r7, #20]
 8012ce8:	141b      	asrs	r3, r3, #16
 8012cea:	b2da      	uxtb	r2, r3
 8012cec:	69bb      	ldr	r3, [r7, #24]
 8012cee:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8012cf0:	8abb      	ldrh	r3, [r7, #20]
 8012cf2:	0a1b      	lsrs	r3, r3, #8
 8012cf4:	b29b      	uxth	r3, r3
 8012cf6:	b2da      	uxtb	r2, r3
 8012cf8:	69bb      	ldr	r3, [r7, #24]
 8012cfa:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8012cfc:	8abb      	ldrh	r3, [r7, #20]
 8012cfe:	b2da      	uxtb	r2, r3
 8012d00:	69bb      	ldr	r3, [r7, #24]
 8012d02:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8012d04:	69bb      	ldr	r3, [r7, #24]
 8012d06:	220c      	movs	r2, #12
 8012d08:	60da      	str	r2, [r3, #12]

  return 0;
 8012d0a:	2300      	movs	r3, #0
}
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	3720      	adds	r7, #32
 8012d10:	46bd      	mov	sp, r7
 8012d12:	bd80      	pop	{r7, pc}

08012d14 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012d14:	b580      	push	{r7, lr}
 8012d16:	b086      	sub	sp, #24
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	60f8      	str	r0, [r7, #12]
 8012d1c:	460b      	mov	r3, r1
 8012d1e:	607a      	str	r2, [r7, #4]
 8012d20:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	32b0      	adds	r2, #176	; 0xb0
 8012d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d30:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8012d32:	2317      	movs	r3, #23
 8012d34:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8012d36:	693b      	ldr	r3, [r7, #16]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d102      	bne.n	8012d42 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8012d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8012d40:	e011      	b.n	8012d66 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	3304      	adds	r3, #4
 8012d46:	781b      	ldrb	r3, [r3, #0]
 8012d48:	b29b      	uxth	r3, r3
 8012d4a:	8afa      	ldrh	r2, [r7, #22]
 8012d4c:	429a      	cmp	r2, r3
 8012d4e:	d303      	bcc.n	8012d58 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	3304      	adds	r3, #4
 8012d54:	781b      	ldrb	r3, [r3, #0]
 8012d56:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8012d58:	8afb      	ldrh	r3, [r7, #22]
 8012d5a:	461a      	mov	r2, r3
 8012d5c:	4904      	ldr	r1, [pc, #16]	; (8012d70 <SCSI_ModeSense6+0x5c>)
 8012d5e:	6938      	ldr	r0, [r7, #16]
 8012d60:	f000 fe2e 	bl	80139c0 <SCSI_UpdateBotData>

  return 0;
 8012d64:	2300      	movs	r3, #0
}
 8012d66:	4618      	mov	r0, r3
 8012d68:	3718      	adds	r7, #24
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	bd80      	pop	{r7, pc}
 8012d6e:	bf00      	nop
 8012d70:	2000009c 	.word	0x2000009c

08012d74 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012d74:	b580      	push	{r7, lr}
 8012d76:	b086      	sub	sp, #24
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	60f8      	str	r0, [r7, #12]
 8012d7c:	460b      	mov	r3, r1
 8012d7e:	607a      	str	r2, [r7, #4]
 8012d80:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	32b0      	adds	r2, #176	; 0xb0
 8012d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d90:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8012d92:	231b      	movs	r3, #27
 8012d94:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8012d96:	693b      	ldr	r3, [r7, #16]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d102      	bne.n	8012da2 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8012d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8012da0:	e011      	b.n	8012dc6 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	3308      	adds	r3, #8
 8012da6:	781b      	ldrb	r3, [r3, #0]
 8012da8:	b29b      	uxth	r3, r3
 8012daa:	8afa      	ldrh	r2, [r7, #22]
 8012dac:	429a      	cmp	r2, r3
 8012dae:	d303      	bcc.n	8012db8 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	3308      	adds	r3, #8
 8012db4:	781b      	ldrb	r3, [r3, #0]
 8012db6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8012db8:	8afb      	ldrh	r3, [r7, #22]
 8012dba:	461a      	mov	r2, r3
 8012dbc:	4904      	ldr	r1, [pc, #16]	; (8012dd0 <SCSI_ModeSense10+0x5c>)
 8012dbe:	6938      	ldr	r0, [r7, #16]
 8012dc0:	f000 fdfe 	bl	80139c0 <SCSI_UpdateBotData>

  return 0;
 8012dc4:	2300      	movs	r3, #0
}
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	3718      	adds	r7, #24
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	bd80      	pop	{r7, pc}
 8012dce:	bf00      	nop
 8012dd0:	200000b4 	.word	0x200000b4

08012dd4 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	b086      	sub	sp, #24
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	60f8      	str	r0, [r7, #12]
 8012ddc:	460b      	mov	r3, r1
 8012dde:	607a      	str	r2, [r7, #4]
 8012de0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	32b0      	adds	r2, #176	; 0xb0
 8012dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012df0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8012df2:	693b      	ldr	r3, [r7, #16]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d102      	bne.n	8012dfe <SCSI_RequestSense+0x2a>
  {
    return -1;
 8012df8:	f04f 33ff 	mov.w	r3, #4294967295
 8012dfc:	e06c      	b.n	8012ed8 <SCSI_RequestSense+0x104>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8012dfe:	693b      	ldr	r3, [r7, #16]
 8012e00:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d10a      	bne.n	8012e1e <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012e08:	693b      	ldr	r3, [r7, #16]
 8012e0a:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8012e0e:	2320      	movs	r3, #32
 8012e10:	2205      	movs	r2, #5
 8012e12:	68f8      	ldr	r0, [r7, #12]
 8012e14:	f000 f864 	bl	8012ee0 <SCSI_SenseCode>
    return -1;
 8012e18:	f04f 33ff 	mov.w	r3, #4294967295
 8012e1c:	e05c      	b.n	8012ed8 <SCSI_RequestSense+0x104>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8012e1e:	2300      	movs	r3, #0
 8012e20:	75fb      	strb	r3, [r7, #23]
 8012e22:	e007      	b.n	8012e34 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8012e24:	7dfb      	ldrb	r3, [r7, #23]
 8012e26:	693a      	ldr	r2, [r7, #16]
 8012e28:	4413      	add	r3, r2
 8012e2a:	2200      	movs	r2, #0
 8012e2c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8012e2e:	7dfb      	ldrb	r3, [r7, #23]
 8012e30:	3301      	adds	r3, #1
 8012e32:	75fb      	strb	r3, [r7, #23]
 8012e34:	7dfb      	ldrb	r3, [r7, #23]
 8012e36:	2b11      	cmp	r3, #17
 8012e38:	d9f4      	bls.n	8012e24 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 8012e3a:	693b      	ldr	r3, [r7, #16]
 8012e3c:	2270      	movs	r2, #112	; 0x70
 8012e3e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8012e40:	693b      	ldr	r3, [r7, #16]
 8012e42:	220c      	movs	r2, #12
 8012e44:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8012e46:	693b      	ldr	r3, [r7, #16]
 8012e48:	f893 2860 	ldrb.w	r2, [r3, #2144]	; 0x860
 8012e4c:	693b      	ldr	r3, [r7, #16]
 8012e4e:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 8012e52:	429a      	cmp	r2, r3
 8012e54:	d031      	beq.n	8012eba <SCSI_RequestSense+0xe6>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8012e56:	693b      	ldr	r3, [r7, #16]
 8012e58:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 8012e5c:	461a      	mov	r2, r3
 8012e5e:	693b      	ldr	r3, [r7, #16]
 8012e60:	f502 7284 	add.w	r2, r2, #264	; 0x108
 8012e64:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8012e68:	693b      	ldr	r3, [r7, #16]
 8012e6a:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8012e6c:	693b      	ldr	r3, [r7, #16]
 8012e6e:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 8012e72:	693a      	ldr	r2, [r7, #16]
 8012e74:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8012e78:	00db      	lsls	r3, r3, #3
 8012e7a:	4413      	add	r3, r2
 8012e7c:	791a      	ldrb	r2, [r3, #4]
 8012e7e:	693b      	ldr	r3, [r7, #16]
 8012e80:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8012e82:	693b      	ldr	r3, [r7, #16]
 8012e84:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 8012e88:	693a      	ldr	r2, [r7, #16]
 8012e8a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8012e8e:	00db      	lsls	r3, r3, #3
 8012e90:	4413      	add	r3, r2
 8012e92:	795a      	ldrb	r2, [r3, #5]
 8012e94:	693b      	ldr	r3, [r7, #16]
 8012e96:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8012e98:	693b      	ldr	r3, [r7, #16]
 8012e9a:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 8012e9e:	3301      	adds	r3, #1
 8012ea0:	b2da      	uxtb	r2, r3
 8012ea2:	693b      	ldr	r3, [r7, #16]
 8012ea4:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8012ea8:	693b      	ldr	r3, [r7, #16]
 8012eaa:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 8012eae:	2b04      	cmp	r3, #4
 8012eb0:	d103      	bne.n	8012eba <SCSI_RequestSense+0xe6>
    {
      hmsc->scsi_sense_head = 0U;
 8012eb2:	693b      	ldr	r3, [r7, #16]
 8012eb4:	2200      	movs	r2, #0
 8012eb6:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8012eba:	693b      	ldr	r3, [r7, #16]
 8012ebc:	2212      	movs	r2, #18
 8012ebe:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	3304      	adds	r3, #4
 8012ec4:	781b      	ldrb	r3, [r3, #0]
 8012ec6:	2b12      	cmp	r3, #18
 8012ec8:	d805      	bhi.n	8012ed6 <SCSI_RequestSense+0x102>
  {
    hmsc->bot_data_length = params[4];
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	3304      	adds	r3, #4
 8012ece:	781b      	ldrb	r3, [r3, #0]
 8012ed0:	461a      	mov	r2, r3
 8012ed2:	693b      	ldr	r3, [r7, #16]
 8012ed4:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8012ed6:	2300      	movs	r3, #0
}
 8012ed8:	4618      	mov	r0, r3
 8012eda:	3718      	adds	r7, #24
 8012edc:	46bd      	mov	sp, r7
 8012ede:	bd80      	pop	{r7, pc}

08012ee0 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8012ee0:	b480      	push	{r7}
 8012ee2:	b085      	sub	sp, #20
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	6078      	str	r0, [r7, #4]
 8012ee8:	4608      	mov	r0, r1
 8012eea:	4611      	mov	r1, r2
 8012eec:	461a      	mov	r2, r3
 8012eee:	4603      	mov	r3, r0
 8012ef0:	70fb      	strb	r3, [r7, #3]
 8012ef2:	460b      	mov	r3, r1
 8012ef4:	70bb      	strb	r3, [r7, #2]
 8012ef6:	4613      	mov	r3, r2
 8012ef8:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	32b0      	adds	r2, #176	; 0xb0
 8012f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f08:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d02f      	beq.n	8012f70 <SCSI_SenseCode+0x90>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 8012f16:	461a      	mov	r2, r3
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	f502 7284 	add.w	r2, r2, #264	; 0x108
 8012f1e:	78b9      	ldrb	r1, [r7, #2]
 8012f20:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 8012f2a:	68fa      	ldr	r2, [r7, #12]
 8012f2c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8012f30:	00db      	lsls	r3, r3, #3
 8012f32:	4413      	add	r3, r2
 8012f34:	787a      	ldrb	r2, [r7, #1]
 8012f36:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 8012f3e:	68fa      	ldr	r2, [r7, #12]
 8012f40:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8012f44:	00db      	lsls	r3, r3, #3
 8012f46:	4413      	add	r3, r2
 8012f48:	2200      	movs	r2, #0
 8012f4a:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 8012f52:	3301      	adds	r3, #1
 8012f54:	b2da      	uxtb	r2, r3
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 8012f62:	2b04      	cmp	r3, #4
 8012f64:	d105      	bne.n	8012f72 <SCSI_SenseCode+0x92>
  {
    hmsc->scsi_sense_tail = 0U;
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	2200      	movs	r2, #0
 8012f6a:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861
 8012f6e:	e000      	b.n	8012f72 <SCSI_SenseCode+0x92>
    return;
 8012f70:	bf00      	nop
  }
}
 8012f72:	3714      	adds	r7, #20
 8012f74:	46bd      	mov	sp, r7
 8012f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f7a:	4770      	bx	lr

08012f7c <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	b086      	sub	sp, #24
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	60f8      	str	r0, [r7, #12]
 8012f84:	460b      	mov	r3, r1
 8012f86:	607a      	str	r2, [r7, #4]
 8012f88:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	32b0      	adds	r2, #176	; 0xb0
 8012f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f98:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8012f9a:	697b      	ldr	r3, [r7, #20]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d102      	bne.n	8012fa6 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8012fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8012fa4:	e03b      	b.n	801301e <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8012fa6:	697b      	ldr	r3, [r7, #20]
 8012fa8:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 8012fac:	2b01      	cmp	r3, #1
 8012fae:	d10f      	bne.n	8012fd0 <SCSI_StartStopUnit+0x54>
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	3304      	adds	r3, #4
 8012fb4:	781b      	ldrb	r3, [r3, #0]
 8012fb6:	f003 0303 	and.w	r3, r3, #3
 8012fba:	2b02      	cmp	r3, #2
 8012fbc:	d108      	bne.n	8012fd0 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8012fbe:	7af9      	ldrb	r1, [r7, #11]
 8012fc0:	2324      	movs	r3, #36	; 0x24
 8012fc2:	2205      	movs	r2, #5
 8012fc4:	68f8      	ldr	r0, [r7, #12]
 8012fc6:	f7ff ff8b 	bl	8012ee0 <SCSI_SenseCode>

    return -1;
 8012fca:	f04f 33ff 	mov.w	r3, #4294967295
 8012fce:	e026      	b.n	801301e <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	3304      	adds	r3, #4
 8012fd4:	781b      	ldrb	r3, [r3, #0]
 8012fd6:	f003 0303 	and.w	r3, r3, #3
 8012fda:	2b01      	cmp	r3, #1
 8012fdc:	d104      	bne.n	8012fe8 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8012fde:	697b      	ldr	r3, [r7, #20]
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862
 8012fe6:	e016      	b.n	8013016 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	3304      	adds	r3, #4
 8012fec:	781b      	ldrb	r3, [r3, #0]
 8012fee:	f003 0303 	and.w	r3, r3, #3
 8012ff2:	2b02      	cmp	r3, #2
 8012ff4:	d104      	bne.n	8013000 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8012ff6:	697b      	ldr	r3, [r7, #20]
 8012ff8:	2202      	movs	r2, #2
 8012ffa:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862
 8012ffe:	e00a      	b.n	8013016 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	3304      	adds	r3, #4
 8013004:	781b      	ldrb	r3, [r3, #0]
 8013006:	f003 0303 	and.w	r3, r3, #3
 801300a:	2b03      	cmp	r3, #3
 801300c:	d103      	bne.n	8013016 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801300e:	697b      	ldr	r3, [r7, #20]
 8013010:	2200      	movs	r2, #0
 8013012:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8013016:	697b      	ldr	r3, [r7, #20]
 8013018:	2200      	movs	r2, #0
 801301a:	60da      	str	r2, [r3, #12]

  return 0;
 801301c:	2300      	movs	r3, #0
}
 801301e:	4618      	mov	r0, r3
 8013020:	3718      	adds	r7, #24
 8013022:	46bd      	mov	sp, r7
 8013024:	bd80      	pop	{r7, pc}

08013026 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013026:	b480      	push	{r7}
 8013028:	b087      	sub	sp, #28
 801302a:	af00      	add	r7, sp, #0
 801302c:	60f8      	str	r0, [r7, #12]
 801302e:	460b      	mov	r3, r1
 8013030:	607a      	str	r2, [r7, #4]
 8013032:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	32b0      	adds	r2, #176	; 0xb0
 801303e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013042:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8013044:	697b      	ldr	r3, [r7, #20]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d102      	bne.n	8013050 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 801304a:	f04f 33ff 	mov.w	r3, #4294967295
 801304e:	e011      	b.n	8013074 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	3304      	adds	r3, #4
 8013054:	781b      	ldrb	r3, [r3, #0]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d104      	bne.n	8013064 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801305a:	697b      	ldr	r3, [r7, #20]
 801305c:	2200      	movs	r2, #0
 801305e:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862
 8013062:	e003      	b.n	801306c <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8013064:	697b      	ldr	r3, [r7, #20]
 8013066:	2201      	movs	r2, #1
 8013068:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862
  }

  hmsc->bot_data_length = 0U;
 801306c:	697b      	ldr	r3, [r7, #20]
 801306e:	2200      	movs	r2, #0
 8013070:	60da      	str	r2, [r3, #12]

  return 0;
 8013072:	2300      	movs	r3, #0
}
 8013074:	4618      	mov	r0, r3
 8013076:	371c      	adds	r7, #28
 8013078:	46bd      	mov	sp, r7
 801307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801307e:	4770      	bx	lr

08013080 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013080:	b580      	push	{r7, lr}
 8013082:	b086      	sub	sp, #24
 8013084:	af00      	add	r7, sp, #0
 8013086:	60f8      	str	r0, [r7, #12]
 8013088:	460b      	mov	r3, r1
 801308a:	607a      	str	r2, [r7, #4]
 801308c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	32b0      	adds	r2, #176	; 0xb0
 8013098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801309c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801309e:	697b      	ldr	r3, [r7, #20]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d102      	bne.n	80130aa <SCSI_Read10+0x2a>
  {
    return -1;
 80130a4:	f04f 33ff 	mov.w	r3, #4294967295
 80130a8:	e090      	b.n	80131cc <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80130aa:	697b      	ldr	r3, [r7, #20]
 80130ac:	7a1b      	ldrb	r3, [r3, #8]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	f040 8082 	bne.w	80131b8 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80130b4:	697b      	ldr	r3, [r7, #20]
 80130b6:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 80130ba:	b25b      	sxtb	r3, r3
 80130bc:	2b00      	cmp	r3, #0
 80130be:	db0a      	blt.n	80130d6 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80130c0:	697b      	ldr	r3, [r7, #20]
 80130c2:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 80130c6:	2320      	movs	r3, #32
 80130c8:	2205      	movs	r2, #5
 80130ca:	68f8      	ldr	r0, [r7, #12]
 80130cc:	f7ff ff08 	bl	8012ee0 <SCSI_SenseCode>
      return -1;
 80130d0:	f04f 33ff 	mov.w	r3, #4294967295
 80130d4:	e07a      	b.n	80131cc <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80130d6:	697b      	ldr	r3, [r7, #20]
 80130d8:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 80130dc:	2b02      	cmp	r3, #2
 80130de:	d108      	bne.n	80130f2 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80130e0:	7af9      	ldrb	r1, [r7, #11]
 80130e2:	233a      	movs	r3, #58	; 0x3a
 80130e4:	2202      	movs	r2, #2
 80130e6:	68f8      	ldr	r0, [r7, #12]
 80130e8:	f7ff fefa 	bl	8012ee0 <SCSI_SenseCode>

      return -1;
 80130ec:	f04f 33ff 	mov.w	r3, #4294967295
 80130f0:	e06c      	b.n	80131cc <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80130f8:	68fa      	ldr	r2, [r7, #12]
 80130fa:	33b0      	adds	r3, #176	; 0xb0
 80130fc:	009b      	lsls	r3, r3, #2
 80130fe:	4413      	add	r3, r2
 8013100:	685b      	ldr	r3, [r3, #4]
 8013102:	689b      	ldr	r3, [r3, #8]
 8013104:	7afa      	ldrb	r2, [r7, #11]
 8013106:	4610      	mov	r0, r2
 8013108:	4798      	blx	r3
 801310a:	4603      	mov	r3, r0
 801310c:	2b00      	cmp	r3, #0
 801310e:	d008      	beq.n	8013122 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013110:	7af9      	ldrb	r1, [r7, #11]
 8013112:	233a      	movs	r3, #58	; 0x3a
 8013114:	2202      	movs	r2, #2
 8013116:	68f8      	ldr	r0, [r7, #12]
 8013118:	f7ff fee2 	bl	8012ee0 <SCSI_SenseCode>
      return -1;
 801311c:	f04f 33ff 	mov.w	r3, #4294967295
 8013120:	e054      	b.n	80131cc <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	3302      	adds	r3, #2
 8013126:	781b      	ldrb	r3, [r3, #0]
 8013128:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	3303      	adds	r3, #3
 801312e:	781b      	ldrb	r3, [r3, #0]
 8013130:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013132:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	3304      	adds	r3, #4
 8013138:	781b      	ldrb	r3, [r3, #0]
 801313a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801313c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801313e:	687a      	ldr	r2, [r7, #4]
 8013140:	3205      	adds	r2, #5
 8013142:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8013144:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013146:	697b      	ldr	r3, [r7, #20]
 8013148:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	3307      	adds	r3, #7
 8013150:	781b      	ldrb	r3, [r3, #0]
 8013152:	021b      	lsls	r3, r3, #8
 8013154:	687a      	ldr	r2, [r7, #4]
 8013156:	3208      	adds	r2, #8
 8013158:	7812      	ldrb	r2, [r2, #0]
 801315a:	431a      	orrs	r2, r3
 801315c:	697b      	ldr	r3, [r7, #20]
 801315e:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8013162:	697b      	ldr	r3, [r7, #20]
 8013164:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 8013168:	697b      	ldr	r3, [r7, #20]
 801316a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801316e:	7af9      	ldrb	r1, [r7, #11]
 8013170:	68f8      	ldr	r0, [r7, #12]
 8013172:	f000 fadc 	bl	801372e <SCSI_CheckAddressRange>
 8013176:	4603      	mov	r3, r0
 8013178:	2b00      	cmp	r3, #0
 801317a:	da02      	bge.n	8013182 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801317c:	f04f 33ff 	mov.w	r3, #4294967295
 8013180:	e024      	b.n	80131cc <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8013182:	697b      	ldr	r3, [r7, #20]
 8013184:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8013188:	697b      	ldr	r3, [r7, #20]
 801318a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801318e:	6979      	ldr	r1, [r7, #20]
 8013190:	f8b1 1864 	ldrh.w	r1, [r1, #2148]	; 0x864
 8013194:	fb01 f303 	mul.w	r3, r1, r3
 8013198:	429a      	cmp	r2, r3
 801319a:	d00a      	beq.n	80131b2 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801319c:	697b      	ldr	r3, [r7, #20]
 801319e:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 80131a2:	2320      	movs	r3, #32
 80131a4:	2205      	movs	r2, #5
 80131a6:	68f8      	ldr	r0, [r7, #12]
 80131a8:	f7ff fe9a 	bl	8012ee0 <SCSI_SenseCode>
      return -1;
 80131ac:	f04f 33ff 	mov.w	r3, #4294967295
 80131b0:	e00c      	b.n	80131cc <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80131b2:	697b      	ldr	r3, [r7, #20]
 80131b4:	2202      	movs	r2, #2
 80131b6:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80131b8:	697b      	ldr	r3, [r7, #20]
 80131ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80131be:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80131c0:	7afb      	ldrb	r3, [r7, #11]
 80131c2:	4619      	mov	r1, r3
 80131c4:	68f8      	ldr	r0, [r7, #12]
 80131c6:	f000 fadf 	bl	8013788 <SCSI_ProcessRead>
 80131ca:	4603      	mov	r3, r0
}
 80131cc:	4618      	mov	r0, r3
 80131ce:	3718      	adds	r7, #24
 80131d0:	46bd      	mov	sp, r7
 80131d2:	bd80      	pop	{r7, pc}

080131d4 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80131d4:	b580      	push	{r7, lr}
 80131d6:	b086      	sub	sp, #24
 80131d8:	af00      	add	r7, sp, #0
 80131da:	60f8      	str	r0, [r7, #12]
 80131dc:	460b      	mov	r3, r1
 80131de:	607a      	str	r2, [r7, #4]
 80131e0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	32b0      	adds	r2, #176	; 0xb0
 80131ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80131f0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80131f2:	697b      	ldr	r3, [r7, #20]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d102      	bne.n	80131fe <SCSI_Read12+0x2a>
  {
    return -1;
 80131f8:	f04f 33ff 	mov.w	r3, #4294967295
 80131fc:	e09a      	b.n	8013334 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80131fe:	697b      	ldr	r3, [r7, #20]
 8013200:	7a1b      	ldrb	r3, [r3, #8]
 8013202:	2b00      	cmp	r3, #0
 8013204:	f040 808c 	bne.w	8013320 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8013208:	697b      	ldr	r3, [r7, #20]
 801320a:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 801320e:	b25b      	sxtb	r3, r3
 8013210:	2b00      	cmp	r3, #0
 8013212:	db0a      	blt.n	801322a <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013214:	697b      	ldr	r3, [r7, #20]
 8013216:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 801321a:	2320      	movs	r3, #32
 801321c:	2205      	movs	r2, #5
 801321e:	68f8      	ldr	r0, [r7, #12]
 8013220:	f7ff fe5e 	bl	8012ee0 <SCSI_SenseCode>
      return -1;
 8013224:	f04f 33ff 	mov.w	r3, #4294967295
 8013228:	e084      	b.n	8013334 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801322a:	697b      	ldr	r3, [r7, #20]
 801322c:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 8013230:	2b02      	cmp	r3, #2
 8013232:	d108      	bne.n	8013246 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013234:	7af9      	ldrb	r1, [r7, #11]
 8013236:	233a      	movs	r3, #58	; 0x3a
 8013238:	2202      	movs	r2, #2
 801323a:	68f8      	ldr	r0, [r7, #12]
 801323c:	f7ff fe50 	bl	8012ee0 <SCSI_SenseCode>
      return -1;
 8013240:	f04f 33ff 	mov.w	r3, #4294967295
 8013244:	e076      	b.n	8013334 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801324c:	68fa      	ldr	r2, [r7, #12]
 801324e:	33b0      	adds	r3, #176	; 0xb0
 8013250:	009b      	lsls	r3, r3, #2
 8013252:	4413      	add	r3, r2
 8013254:	685b      	ldr	r3, [r3, #4]
 8013256:	689b      	ldr	r3, [r3, #8]
 8013258:	7afa      	ldrb	r2, [r7, #11]
 801325a:	4610      	mov	r0, r2
 801325c:	4798      	blx	r3
 801325e:	4603      	mov	r3, r0
 8013260:	2b00      	cmp	r3, #0
 8013262:	d008      	beq.n	8013276 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013264:	7af9      	ldrb	r1, [r7, #11]
 8013266:	233a      	movs	r3, #58	; 0x3a
 8013268:	2202      	movs	r2, #2
 801326a:	68f8      	ldr	r0, [r7, #12]
 801326c:	f7ff fe38 	bl	8012ee0 <SCSI_SenseCode>
      return -1;
 8013270:	f04f 33ff 	mov.w	r3, #4294967295
 8013274:	e05e      	b.n	8013334 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	3302      	adds	r3, #2
 801327a:	781b      	ldrb	r3, [r3, #0]
 801327c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	3303      	adds	r3, #3
 8013282:	781b      	ldrb	r3, [r3, #0]
 8013284:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013286:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	3304      	adds	r3, #4
 801328c:	781b      	ldrb	r3, [r3, #0]
 801328e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8013290:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8013292:	687a      	ldr	r2, [r7, #4]
 8013294:	3205      	adds	r2, #5
 8013296:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8013298:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801329a:	697b      	ldr	r3, [r7, #20]
 801329c:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	3306      	adds	r3, #6
 80132a4:	781b      	ldrb	r3, [r3, #0]
 80132a6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	3307      	adds	r3, #7
 80132ac:	781b      	ldrb	r3, [r3, #0]
 80132ae:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80132b0:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	3308      	adds	r3, #8
 80132b6:	781b      	ldrb	r3, [r3, #0]
 80132b8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80132ba:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80132bc:	687a      	ldr	r2, [r7, #4]
 80132be:	3209      	adds	r2, #9
 80132c0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80132c2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80132c4:	697b      	ldr	r3, [r7, #20]
 80132c6:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80132ca:	697b      	ldr	r3, [r7, #20]
 80132cc:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 80132d0:	697b      	ldr	r3, [r7, #20]
 80132d2:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80132d6:	7af9      	ldrb	r1, [r7, #11]
 80132d8:	68f8      	ldr	r0, [r7, #12]
 80132da:	f000 fa28 	bl	801372e <SCSI_CheckAddressRange>
 80132de:	4603      	mov	r3, r0
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	da02      	bge.n	80132ea <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80132e4:	f04f 33ff 	mov.w	r3, #4294967295
 80132e8:	e024      	b.n	8013334 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80132ea:	697b      	ldr	r3, [r7, #20]
 80132ec:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 80132f0:	697b      	ldr	r3, [r7, #20]
 80132f2:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80132f6:	6979      	ldr	r1, [r7, #20]
 80132f8:	f8b1 1864 	ldrh.w	r1, [r1, #2148]	; 0x864
 80132fc:	fb01 f303 	mul.w	r3, r1, r3
 8013300:	429a      	cmp	r2, r3
 8013302:	d00a      	beq.n	801331a <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013304:	697b      	ldr	r3, [r7, #20]
 8013306:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 801330a:	2320      	movs	r3, #32
 801330c:	2205      	movs	r2, #5
 801330e:	68f8      	ldr	r0, [r7, #12]
 8013310:	f7ff fde6 	bl	8012ee0 <SCSI_SenseCode>
      return -1;
 8013314:	f04f 33ff 	mov.w	r3, #4294967295
 8013318:	e00c      	b.n	8013334 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801331a:	697b      	ldr	r3, [r7, #20]
 801331c:	2202      	movs	r2, #2
 801331e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8013320:	697b      	ldr	r3, [r7, #20]
 8013322:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013326:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8013328:	7afb      	ldrb	r3, [r7, #11]
 801332a:	4619      	mov	r1, r3
 801332c:	68f8      	ldr	r0, [r7, #12]
 801332e:	f000 fa2b 	bl	8013788 <SCSI_ProcessRead>
 8013332:	4603      	mov	r3, r0
}
 8013334:	4618      	mov	r0, r3
 8013336:	3718      	adds	r7, #24
 8013338:	46bd      	mov	sp, r7
 801333a:	bd80      	pop	{r7, pc}

0801333c <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801333c:	b580      	push	{r7, lr}
 801333e:	b086      	sub	sp, #24
 8013340:	af00      	add	r7, sp, #0
 8013342:	60f8      	str	r0, [r7, #12]
 8013344:	460b      	mov	r3, r1
 8013346:	607a      	str	r2, [r7, #4]
 8013348:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	32b0      	adds	r2, #176	; 0xb0
 8013354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013358:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 801335a:	697b      	ldr	r3, [r7, #20]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d102      	bne.n	8013366 <SCSI_Write10+0x2a>
  {
    return -1;
 8013360:	f04f 33ff 	mov.w	r3, #4294967295
 8013364:	e0ba      	b.n	80134dc <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8013366:	697b      	ldr	r3, [r7, #20]
 8013368:	7a1b      	ldrb	r3, [r3, #8]
 801336a:	2b00      	cmp	r3, #0
 801336c:	f040 80b0 	bne.w	80134d0 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8013370:	697b      	ldr	r3, [r7, #20]
 8013372:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8013376:	2b00      	cmp	r3, #0
 8013378:	d10a      	bne.n	8013390 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801337a:	697b      	ldr	r3, [r7, #20]
 801337c:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8013380:	2320      	movs	r3, #32
 8013382:	2205      	movs	r2, #5
 8013384:	68f8      	ldr	r0, [r7, #12]
 8013386:	f7ff fdab 	bl	8012ee0 <SCSI_SenseCode>
      return -1;
 801338a:	f04f 33ff 	mov.w	r3, #4294967295
 801338e:	e0a5      	b.n	80134dc <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8013390:	697b      	ldr	r3, [r7, #20]
 8013392:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 8013396:	b25b      	sxtb	r3, r3
 8013398:	2b00      	cmp	r3, #0
 801339a:	da0a      	bge.n	80133b2 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801339c:	697b      	ldr	r3, [r7, #20]
 801339e:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 80133a2:	2320      	movs	r3, #32
 80133a4:	2205      	movs	r2, #5
 80133a6:	68f8      	ldr	r0, [r7, #12]
 80133a8:	f7ff fd9a 	bl	8012ee0 <SCSI_SenseCode>
      return -1;
 80133ac:	f04f 33ff 	mov.w	r3, #4294967295
 80133b0:	e094      	b.n	80134dc <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80133b8:	68fa      	ldr	r2, [r7, #12]
 80133ba:	33b0      	adds	r3, #176	; 0xb0
 80133bc:	009b      	lsls	r3, r3, #2
 80133be:	4413      	add	r3, r2
 80133c0:	685b      	ldr	r3, [r3, #4]
 80133c2:	689b      	ldr	r3, [r3, #8]
 80133c4:	7afa      	ldrb	r2, [r7, #11]
 80133c6:	4610      	mov	r0, r2
 80133c8:	4798      	blx	r3
 80133ca:	4603      	mov	r3, r0
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d008      	beq.n	80133e2 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80133d0:	7af9      	ldrb	r1, [r7, #11]
 80133d2:	233a      	movs	r3, #58	; 0x3a
 80133d4:	2202      	movs	r2, #2
 80133d6:	68f8      	ldr	r0, [r7, #12]
 80133d8:	f7ff fd82 	bl	8012ee0 <SCSI_SenseCode>
      return -1;
 80133dc:	f04f 33ff 	mov.w	r3, #4294967295
 80133e0:	e07c      	b.n	80134dc <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80133e8:	68fa      	ldr	r2, [r7, #12]
 80133ea:	33b0      	adds	r3, #176	; 0xb0
 80133ec:	009b      	lsls	r3, r3, #2
 80133ee:	4413      	add	r3, r2
 80133f0:	685b      	ldr	r3, [r3, #4]
 80133f2:	68db      	ldr	r3, [r3, #12]
 80133f4:	7afa      	ldrb	r2, [r7, #11]
 80133f6:	4610      	mov	r0, r2
 80133f8:	4798      	blx	r3
 80133fa:	4603      	mov	r3, r0
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d008      	beq.n	8013412 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8013400:	7af9      	ldrb	r1, [r7, #11]
 8013402:	2327      	movs	r3, #39	; 0x27
 8013404:	2202      	movs	r2, #2
 8013406:	68f8      	ldr	r0, [r7, #12]
 8013408:	f7ff fd6a 	bl	8012ee0 <SCSI_SenseCode>
      return -1;
 801340c:	f04f 33ff 	mov.w	r3, #4294967295
 8013410:	e064      	b.n	80134dc <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	3302      	adds	r3, #2
 8013416:	781b      	ldrb	r3, [r3, #0]
 8013418:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	3303      	adds	r3, #3
 801341e:	781b      	ldrb	r3, [r3, #0]
 8013420:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013422:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	3304      	adds	r3, #4
 8013428:	781b      	ldrb	r3, [r3, #0]
 801342a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801342c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801342e:	687a      	ldr	r2, [r7, #4]
 8013430:	3205      	adds	r2, #5
 8013432:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8013434:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013436:	697b      	ldr	r3, [r7, #20]
 8013438:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	3307      	adds	r3, #7
 8013440:	781b      	ldrb	r3, [r3, #0]
 8013442:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8013444:	687a      	ldr	r2, [r7, #4]
 8013446:	3208      	adds	r2, #8
 8013448:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 801344a:	431a      	orrs	r2, r3
 801344c:	697b      	ldr	r3, [r7, #20]
 801344e:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8013452:	697b      	ldr	r3, [r7, #20]
 8013454:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 8013458:	697b      	ldr	r3, [r7, #20]
 801345a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801345e:	7af9      	ldrb	r1, [r7, #11]
 8013460:	68f8      	ldr	r0, [r7, #12]
 8013462:	f000 f964 	bl	801372e <SCSI_CheckAddressRange>
 8013466:	4603      	mov	r3, r0
 8013468:	2b00      	cmp	r3, #0
 801346a:	da02      	bge.n	8013472 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801346c:	f04f 33ff 	mov.w	r3, #4294967295
 8013470:	e034      	b.n	80134dc <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013472:	697b      	ldr	r3, [r7, #20]
 8013474:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8013478:	697a      	ldr	r2, [r7, #20]
 801347a:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	; 0x864
 801347e:	fb02 f303 	mul.w	r3, r2, r3
 8013482:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8013484:	697b      	ldr	r3, [r7, #20]
 8013486:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 801348a:	693a      	ldr	r2, [r7, #16]
 801348c:	429a      	cmp	r2, r3
 801348e:	d00a      	beq.n	80134a6 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013490:	697b      	ldr	r3, [r7, #20]
 8013492:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8013496:	2320      	movs	r3, #32
 8013498:	2205      	movs	r2, #5
 801349a:	68f8      	ldr	r0, [r7, #12]
 801349c:	f7ff fd20 	bl	8012ee0 <SCSI_SenseCode>
      return -1;
 80134a0:	f04f 33ff 	mov.w	r3, #4294967295
 80134a4:	e01a      	b.n	80134dc <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80134a6:	693b      	ldr	r3, [r7, #16]
 80134a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80134ac:	bf28      	it	cs
 80134ae:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 80134b2:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80134b4:	697b      	ldr	r3, [r7, #20]
 80134b6:	2201      	movs	r2, #1
 80134b8:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80134ba:	4b0a      	ldr	r3, [pc, #40]	; (80134e4 <SCSI_Write10+0x1a8>)
 80134bc:	7819      	ldrb	r1, [r3, #0]
 80134be:	697b      	ldr	r3, [r7, #20]
 80134c0:	f103 0210 	add.w	r2, r3, #16
 80134c4:	693b      	ldr	r3, [r7, #16]
 80134c6:	68f8      	ldr	r0, [r7, #12]
 80134c8:	f005 ffef 	bl	80194aa <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80134cc:	2300      	movs	r3, #0
 80134ce:	e005      	b.n	80134dc <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 80134d0:	7afb      	ldrb	r3, [r7, #11]
 80134d2:	4619      	mov	r1, r3
 80134d4:	68f8      	ldr	r0, [r7, #12]
 80134d6:	f000 f9dd 	bl	8013894 <SCSI_ProcessWrite>
 80134da:	4603      	mov	r3, r0
}
 80134dc:	4618      	mov	r0, r3
 80134de:	3718      	adds	r7, #24
 80134e0:	46bd      	mov	sp, r7
 80134e2:	bd80      	pop	{r7, pc}
 80134e4:	2000008b 	.word	0x2000008b

080134e8 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80134e8:	b580      	push	{r7, lr}
 80134ea:	b086      	sub	sp, #24
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	60f8      	str	r0, [r7, #12]
 80134f0:	460b      	mov	r3, r1
 80134f2:	607a      	str	r2, [r7, #4]
 80134f4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	32b0      	adds	r2, #176	; 0xb0
 8013500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013504:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8013506:	697b      	ldr	r3, [r7, #20]
 8013508:	2b00      	cmp	r3, #0
 801350a:	d102      	bne.n	8013512 <SCSI_Write12+0x2a>
  {
    return -1;
 801350c:	f04f 33ff 	mov.w	r3, #4294967295
 8013510:	e0ca      	b.n	80136a8 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8013512:	697b      	ldr	r3, [r7, #20]
 8013514:	7a1b      	ldrb	r3, [r3, #8]
 8013516:	2b00      	cmp	r3, #0
 8013518:	f040 80c0 	bne.w	801369c <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 801351c:	697b      	ldr	r3, [r7, #20]
 801351e:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8013522:	2b00      	cmp	r3, #0
 8013524:	d10a      	bne.n	801353c <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013526:	697b      	ldr	r3, [r7, #20]
 8013528:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 801352c:	2320      	movs	r3, #32
 801352e:	2205      	movs	r2, #5
 8013530:	68f8      	ldr	r0, [r7, #12]
 8013532:	f7ff fcd5 	bl	8012ee0 <SCSI_SenseCode>
      return -1;
 8013536:	f04f 33ff 	mov.w	r3, #4294967295
 801353a:	e0b5      	b.n	80136a8 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 801353c:	697b      	ldr	r3, [r7, #20]
 801353e:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 8013542:	b25b      	sxtb	r3, r3
 8013544:	2b00      	cmp	r3, #0
 8013546:	da0a      	bge.n	801355e <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013548:	697b      	ldr	r3, [r7, #20]
 801354a:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 801354e:	2320      	movs	r3, #32
 8013550:	2205      	movs	r2, #5
 8013552:	68f8      	ldr	r0, [r7, #12]
 8013554:	f7ff fcc4 	bl	8012ee0 <SCSI_SenseCode>
      return -1;
 8013558:	f04f 33ff 	mov.w	r3, #4294967295
 801355c:	e0a4      	b.n	80136a8 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013564:	68fa      	ldr	r2, [r7, #12]
 8013566:	33b0      	adds	r3, #176	; 0xb0
 8013568:	009b      	lsls	r3, r3, #2
 801356a:	4413      	add	r3, r2
 801356c:	685b      	ldr	r3, [r3, #4]
 801356e:	689b      	ldr	r3, [r3, #8]
 8013570:	7afa      	ldrb	r2, [r7, #11]
 8013572:	4610      	mov	r0, r2
 8013574:	4798      	blx	r3
 8013576:	4603      	mov	r3, r0
 8013578:	2b00      	cmp	r3, #0
 801357a:	d00b      	beq.n	8013594 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801357c:	7af9      	ldrb	r1, [r7, #11]
 801357e:	233a      	movs	r3, #58	; 0x3a
 8013580:	2202      	movs	r2, #2
 8013582:	68f8      	ldr	r0, [r7, #12]
 8013584:	f7ff fcac 	bl	8012ee0 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8013588:	697b      	ldr	r3, [r7, #20]
 801358a:	2205      	movs	r2, #5
 801358c:	721a      	strb	r2, [r3, #8]
      return -1;
 801358e:	f04f 33ff 	mov.w	r3, #4294967295
 8013592:	e089      	b.n	80136a8 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801359a:	68fa      	ldr	r2, [r7, #12]
 801359c:	33b0      	adds	r3, #176	; 0xb0
 801359e:	009b      	lsls	r3, r3, #2
 80135a0:	4413      	add	r3, r2
 80135a2:	685b      	ldr	r3, [r3, #4]
 80135a4:	68db      	ldr	r3, [r3, #12]
 80135a6:	7afa      	ldrb	r2, [r7, #11]
 80135a8:	4610      	mov	r0, r2
 80135aa:	4798      	blx	r3
 80135ac:	4603      	mov	r3, r0
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d00b      	beq.n	80135ca <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80135b2:	7af9      	ldrb	r1, [r7, #11]
 80135b4:	2327      	movs	r3, #39	; 0x27
 80135b6:	2202      	movs	r2, #2
 80135b8:	68f8      	ldr	r0, [r7, #12]
 80135ba:	f7ff fc91 	bl	8012ee0 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80135be:	697b      	ldr	r3, [r7, #20]
 80135c0:	2205      	movs	r2, #5
 80135c2:	721a      	strb	r2, [r3, #8]
      return -1;
 80135c4:	f04f 33ff 	mov.w	r3, #4294967295
 80135c8:	e06e      	b.n	80136a8 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	3302      	adds	r3, #2
 80135ce:	781b      	ldrb	r3, [r3, #0]
 80135d0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	3303      	adds	r3, #3
 80135d6:	781b      	ldrb	r3, [r3, #0]
 80135d8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80135da:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	3304      	adds	r3, #4
 80135e0:	781b      	ldrb	r3, [r3, #0]
 80135e2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80135e4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80135e6:	687a      	ldr	r2, [r7, #4]
 80135e8:	3205      	adds	r2, #5
 80135ea:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80135ec:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80135ee:	697b      	ldr	r3, [r7, #20]
 80135f0:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	3306      	adds	r3, #6
 80135f8:	781b      	ldrb	r3, [r3, #0]
 80135fa:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	3307      	adds	r3, #7
 8013600:	781b      	ldrb	r3, [r3, #0]
 8013602:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013604:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	3308      	adds	r3, #8
 801360a:	781b      	ldrb	r3, [r3, #0]
 801360c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 801360e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8013610:	687a      	ldr	r2, [r7, #4]
 8013612:	3209      	adds	r2, #9
 8013614:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8013616:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013618:	697b      	ldr	r3, [r7, #20]
 801361a:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801361e:	697b      	ldr	r3, [r7, #20]
 8013620:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 8013624:	697b      	ldr	r3, [r7, #20]
 8013626:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801362a:	7af9      	ldrb	r1, [r7, #11]
 801362c:	68f8      	ldr	r0, [r7, #12]
 801362e:	f000 f87e 	bl	801372e <SCSI_CheckAddressRange>
 8013632:	4603      	mov	r3, r0
 8013634:	2b00      	cmp	r3, #0
 8013636:	da02      	bge.n	801363e <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8013638:	f04f 33ff 	mov.w	r3, #4294967295
 801363c:	e034      	b.n	80136a8 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801363e:	697b      	ldr	r3, [r7, #20]
 8013640:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8013644:	697a      	ldr	r2, [r7, #20]
 8013646:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	; 0x864
 801364a:	fb02 f303 	mul.w	r3, r2, r3
 801364e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8013650:	697b      	ldr	r3, [r7, #20]
 8013652:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8013656:	693a      	ldr	r2, [r7, #16]
 8013658:	429a      	cmp	r2, r3
 801365a:	d00a      	beq.n	8013672 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801365c:	697b      	ldr	r3, [r7, #20]
 801365e:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8013662:	2320      	movs	r3, #32
 8013664:	2205      	movs	r2, #5
 8013666:	68f8      	ldr	r0, [r7, #12]
 8013668:	f7ff fc3a 	bl	8012ee0 <SCSI_SenseCode>
      return -1;
 801366c:	f04f 33ff 	mov.w	r3, #4294967295
 8013670:	e01a      	b.n	80136a8 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8013672:	693b      	ldr	r3, [r7, #16]
 8013674:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013678:	bf28      	it	cs
 801367a:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 801367e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8013680:	697b      	ldr	r3, [r7, #20]
 8013682:	2201      	movs	r2, #1
 8013684:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8013686:	4b0a      	ldr	r3, [pc, #40]	; (80136b0 <SCSI_Write12+0x1c8>)
 8013688:	7819      	ldrb	r1, [r3, #0]
 801368a:	697b      	ldr	r3, [r7, #20]
 801368c:	f103 0210 	add.w	r2, r3, #16
 8013690:	693b      	ldr	r3, [r7, #16]
 8013692:	68f8      	ldr	r0, [r7, #12]
 8013694:	f005 ff09 	bl	80194aa <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8013698:	2300      	movs	r3, #0
 801369a:	e005      	b.n	80136a8 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 801369c:	7afb      	ldrb	r3, [r7, #11]
 801369e:	4619      	mov	r1, r3
 80136a0:	68f8      	ldr	r0, [r7, #12]
 80136a2:	f000 f8f7 	bl	8013894 <SCSI_ProcessWrite>
 80136a6:	4603      	mov	r3, r0
}
 80136a8:	4618      	mov	r0, r3
 80136aa:	3718      	adds	r7, #24
 80136ac:	46bd      	mov	sp, r7
 80136ae:	bd80      	pop	{r7, pc}
 80136b0:	2000008b 	.word	0x2000008b

080136b4 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80136b4:	b580      	push	{r7, lr}
 80136b6:	b086      	sub	sp, #24
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	60f8      	str	r0, [r7, #12]
 80136bc:	460b      	mov	r3, r1
 80136be:	607a      	str	r2, [r7, #4]
 80136c0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	32b0      	adds	r2, #176	; 0xb0
 80136cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136d0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80136d2:	697b      	ldr	r3, [r7, #20]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d102      	bne.n	80136de <SCSI_Verify10+0x2a>
  {
    return -1;
 80136d8:	f04f 33ff 	mov.w	r3, #4294967295
 80136dc:	e023      	b.n	8013726 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	3301      	adds	r3, #1
 80136e2:	781b      	ldrb	r3, [r3, #0]
 80136e4:	f003 0302 	and.w	r3, r3, #2
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d008      	beq.n	80136fe <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80136ec:	7af9      	ldrb	r1, [r7, #11]
 80136ee:	2324      	movs	r3, #36	; 0x24
 80136f0:	2205      	movs	r2, #5
 80136f2:	68f8      	ldr	r0, [r7, #12]
 80136f4:	f7ff fbf4 	bl	8012ee0 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80136f8:	f04f 33ff 	mov.w	r3, #4294967295
 80136fc:	e013      	b.n	8013726 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 80136fe:	697b      	ldr	r3, [r7, #20]
 8013700:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 8013704:	697b      	ldr	r3, [r7, #20]
 8013706:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801370a:	7af9      	ldrb	r1, [r7, #11]
 801370c:	68f8      	ldr	r0, [r7, #12]
 801370e:	f000 f80e 	bl	801372e <SCSI_CheckAddressRange>
 8013712:	4603      	mov	r3, r0
 8013714:	2b00      	cmp	r3, #0
 8013716:	da02      	bge.n	801371e <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 8013718:	f04f 33ff 	mov.w	r3, #4294967295
 801371c:	e003      	b.n	8013726 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 801371e:	697b      	ldr	r3, [r7, #20]
 8013720:	2200      	movs	r2, #0
 8013722:	60da      	str	r2, [r3, #12]

  return 0;
 8013724:	2300      	movs	r3, #0
}
 8013726:	4618      	mov	r0, r3
 8013728:	3718      	adds	r7, #24
 801372a:	46bd      	mov	sp, r7
 801372c:	bd80      	pop	{r7, pc}

0801372e <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 801372e:	b580      	push	{r7, lr}
 8013730:	b086      	sub	sp, #24
 8013732:	af00      	add	r7, sp, #0
 8013734:	60f8      	str	r0, [r7, #12]
 8013736:	607a      	str	r2, [r7, #4]
 8013738:	603b      	str	r3, [r7, #0]
 801373a:	460b      	mov	r3, r1
 801373c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	32b0      	adds	r2, #176	; 0xb0
 8013748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801374c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801374e:	697b      	ldr	r3, [r7, #20]
 8013750:	2b00      	cmp	r3, #0
 8013752:	d102      	bne.n	801375a <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8013754:	f04f 33ff 	mov.w	r3, #4294967295
 8013758:	e011      	b.n	801377e <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 801375a:	687a      	ldr	r2, [r7, #4]
 801375c:	683b      	ldr	r3, [r7, #0]
 801375e:	441a      	add	r2, r3
 8013760:	697b      	ldr	r3, [r7, #20]
 8013762:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8013766:	429a      	cmp	r2, r3
 8013768:	d908      	bls.n	801377c <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 801376a:	7af9      	ldrb	r1, [r7, #11]
 801376c:	2321      	movs	r3, #33	; 0x21
 801376e:	2205      	movs	r2, #5
 8013770:	68f8      	ldr	r0, [r7, #12]
 8013772:	f7ff fbb5 	bl	8012ee0 <SCSI_SenseCode>
    return -1;
 8013776:	f04f 33ff 	mov.w	r3, #4294967295
 801377a:	e000      	b.n	801377e <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 801377c:	2300      	movs	r3, #0
}
 801377e:	4618      	mov	r0, r3
 8013780:	3718      	adds	r7, #24
 8013782:	46bd      	mov	sp, r7
 8013784:	bd80      	pop	{r7, pc}
	...

08013788 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8013788:	b590      	push	{r4, r7, lr}
 801378a:	b085      	sub	sp, #20
 801378c:	af00      	add	r7, sp, #0
 801378e:	6078      	str	r0, [r7, #4]
 8013790:	460b      	mov	r3, r1
 8013792:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	32b0      	adds	r2, #176	; 0xb0
 801379e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137a2:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d102      	bne.n	80137b0 <SCSI_ProcessRead+0x28>
  {
    return -1;
 80137aa:	f04f 33ff 	mov.w	r3, #4294967295
 80137ae:	e06a      	b.n	8013886 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80137b6:	68fa      	ldr	r2, [r7, #12]
 80137b8:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	; 0x864
 80137bc:	fb02 f303 	mul.w	r3, r2, r3
 80137c0:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80137c2:	68bb      	ldr	r3, [r7, #8]
 80137c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80137c8:	bf28      	it	cs
 80137ca:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 80137ce:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80137d6:	687a      	ldr	r2, [r7, #4]
 80137d8:	33b0      	adds	r3, #176	; 0xb0
 80137da:	009b      	lsls	r3, r3, #2
 80137dc:	4413      	add	r3, r2
 80137de:	685b      	ldr	r3, [r3, #4]
 80137e0:	691c      	ldr	r4, [r3, #16]
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	f103 0110 	add.w	r1, r3, #16
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 80137f4:	4618      	mov	r0, r3
 80137f6:	68bb      	ldr	r3, [r7, #8]
 80137f8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80137fc:	b29b      	uxth	r3, r3
 80137fe:	78f8      	ldrb	r0, [r7, #3]
 8013800:	47a0      	blx	r4
 8013802:	4603      	mov	r3, r0
 8013804:	2b00      	cmp	r3, #0
 8013806:	da08      	bge.n	801381a <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8013808:	78f9      	ldrb	r1, [r7, #3]
 801380a:	2311      	movs	r3, #17
 801380c:	2204      	movs	r2, #4
 801380e:	6878      	ldr	r0, [r7, #4]
 8013810:	f7ff fb66 	bl	8012ee0 <SCSI_SenseCode>
    return -1;
 8013814:	f04f 33ff 	mov.w	r3, #4294967295
 8013818:	e035      	b.n	8013886 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 801381a:	4b1d      	ldr	r3, [pc, #116]	; (8013890 <SCSI_ProcessRead+0x108>)
 801381c:	7819      	ldrb	r1, [r3, #0]
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	f103 0210 	add.w	r2, r3, #16
 8013824:	68bb      	ldr	r3, [r7, #8]
 8013826:	6878      	ldr	r0, [r7, #4]
 8013828:	f005 fe1e 	bl	8019468 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8013838:	4619      	mov	r1, r3
 801383a:	68bb      	ldr	r3, [r7, #8]
 801383c:	fbb3 f3f1 	udiv	r3, r3, r1
 8013840:	441a      	add	r2, r3
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8013854:	4619      	mov	r1, r3
 8013856:	68bb      	ldr	r3, [r7, #8]
 8013858:	fbb3 f3f1 	udiv	r3, r3, r1
 801385c:	1ad2      	subs	r2, r2, r3
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	f8d3 2838 	ldr.w	r2, [r3, #2104]	; 0x838
 801386a:	68bb      	ldr	r3, [r7, #8]
 801386c:	1ad2      	subs	r2, r2, r3
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838

  if (hmsc->scsi_blk_len == 0U)
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801387a:	2b00      	cmp	r3, #0
 801387c:	d102      	bne.n	8013884 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	2203      	movs	r2, #3
 8013882:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8013884:	2300      	movs	r3, #0
}
 8013886:	4618      	mov	r0, r3
 8013888:	3714      	adds	r7, #20
 801388a:	46bd      	mov	sp, r7
 801388c:	bd90      	pop	{r4, r7, pc}
 801388e:	bf00      	nop
 8013890:	2000008a 	.word	0x2000008a

08013894 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8013894:	b590      	push	{r4, r7, lr}
 8013896:	b085      	sub	sp, #20
 8013898:	af00      	add	r7, sp, #0
 801389a:	6078      	str	r0, [r7, #4]
 801389c:	460b      	mov	r3, r1
 801389e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	32b0      	adds	r2, #176	; 0xb0
 80138aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138ae:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d102      	bne.n	80138bc <SCSI_ProcessWrite+0x28>
  {
    return -1;
 80138b6:	f04f 33ff 	mov.w	r3, #4294967295
 80138ba:	e07a      	b.n	80139b2 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80138c2:	68fa      	ldr	r2, [r7, #12]
 80138c4:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	; 0x864
 80138c8:	fb02 f303 	mul.w	r3, r2, r3
 80138cc:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80138ce:	68bb      	ldr	r3, [r7, #8]
 80138d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80138d4:	bf28      	it	cs
 80138d6:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 80138da:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80138e2:	687a      	ldr	r2, [r7, #4]
 80138e4:	33b0      	adds	r3, #176	; 0xb0
 80138e6:	009b      	lsls	r3, r3, #2
 80138e8:	4413      	add	r3, r2
 80138ea:	685b      	ldr	r3, [r3, #4]
 80138ec:	695c      	ldr	r4, [r3, #20]
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	f103 0110 	add.w	r1, r3, #16
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8013900:	4618      	mov	r0, r3
 8013902:	68bb      	ldr	r3, [r7, #8]
 8013904:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8013908:	b29b      	uxth	r3, r3
 801390a:	78f8      	ldrb	r0, [r7, #3]
 801390c:	47a0      	blx	r4
 801390e:	4603      	mov	r3, r0
 8013910:	2b00      	cmp	r3, #0
 8013912:	da08      	bge.n	8013926 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8013914:	78f9      	ldrb	r1, [r7, #3]
 8013916:	2303      	movs	r3, #3
 8013918:	2204      	movs	r2, #4
 801391a:	6878      	ldr	r0, [r7, #4]
 801391c:	f7ff fae0 	bl	8012ee0 <SCSI_SenseCode>
    return -1;
 8013920:	f04f 33ff 	mov.w	r3, #4294967295
 8013924:	e045      	b.n	80139b2 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8013932:	4619      	mov	r1, r3
 8013934:	68bb      	ldr	r3, [r7, #8]
 8013936:	fbb3 f3f1 	udiv	r3, r3, r1
 801393a:	441a      	add	r2, r3
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 801394e:	4619      	mov	r1, r3
 8013950:	68bb      	ldr	r3, [r7, #8]
 8013952:	fbb3 f3f1 	udiv	r3, r3, r1
 8013956:	1ad2      	subs	r2, r2, r3
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	f8d3 2838 	ldr.w	r2, [r3, #2104]	; 0x838
 8013964:	68bb      	ldr	r3, [r7, #8]
 8013966:	1ad2      	subs	r2, r2, r3
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838

  if (hmsc->scsi_blk_len == 0U)
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8013974:	2b00      	cmp	r3, #0
 8013976:	d104      	bne.n	8013982 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013978:	2100      	movs	r1, #0
 801397a:	6878      	ldr	r0, [r7, #4]
 801397c:	f7fe fd0e 	bl	801239c <MSC_BOT_SendCSW>
 8013980:	e016      	b.n	80139b0 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8013988:	68fa      	ldr	r2, [r7, #12]
 801398a:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	; 0x864
 801398e:	fb02 f303 	mul.w	r3, r2, r3
 8013992:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013996:	bf28      	it	cs
 8013998:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 801399c:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 801399e:	4b07      	ldr	r3, [pc, #28]	; (80139bc <SCSI_ProcessWrite+0x128>)
 80139a0:	7819      	ldrb	r1, [r3, #0]
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	f103 0210 	add.w	r2, r3, #16
 80139a8:	68bb      	ldr	r3, [r7, #8]
 80139aa:	6878      	ldr	r0, [r7, #4]
 80139ac:	f005 fd7d 	bl	80194aa <USBD_LL_PrepareReceive>
  }

  return 0;
 80139b0:	2300      	movs	r3, #0
}
 80139b2:	4618      	mov	r0, r3
 80139b4:	3714      	adds	r7, #20
 80139b6:	46bd      	mov	sp, r7
 80139b8:	bd90      	pop	{r4, r7, pc}
 80139ba:	bf00      	nop
 80139bc:	2000008b 	.word	0x2000008b

080139c0 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80139c0:	b480      	push	{r7}
 80139c2:	b087      	sub	sp, #28
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	60f8      	str	r0, [r7, #12]
 80139c8:	60b9      	str	r1, [r7, #8]
 80139ca:	4613      	mov	r3, r2
 80139cc:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80139ce:	88fb      	ldrh	r3, [r7, #6]
 80139d0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d102      	bne.n	80139de <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 80139d8:	f04f 33ff 	mov.w	r3, #4294967295
 80139dc:	e013      	b.n	8013a06 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 80139de:	8afa      	ldrh	r2, [r7, #22]
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80139e4:	e00b      	b.n	80139fe <SCSI_UpdateBotData+0x3e>
  {
    len--;
 80139e6:	8afb      	ldrh	r3, [r7, #22]
 80139e8:	3b01      	subs	r3, #1
 80139ea:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 80139ec:	8afb      	ldrh	r3, [r7, #22]
 80139ee:	68ba      	ldr	r2, [r7, #8]
 80139f0:	441a      	add	r2, r3
 80139f2:	8afb      	ldrh	r3, [r7, #22]
 80139f4:	7811      	ldrb	r1, [r2, #0]
 80139f6:	68fa      	ldr	r2, [r7, #12]
 80139f8:	4413      	add	r3, r2
 80139fa:	460a      	mov	r2, r1
 80139fc:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 80139fe:	8afb      	ldrh	r3, [r7, #22]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d1f0      	bne.n	80139e6 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8013a04:	2300      	movs	r3, #0
}
 8013a06:	4618      	mov	r0, r3
 8013a08:	371c      	adds	r7, #28
 8013a0a:	46bd      	mov	sp, r7
 8013a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a10:	4770      	bx	lr

08013a12 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013a12:	b580      	push	{r7, lr}
 8013a14:	b086      	sub	sp, #24
 8013a16:	af00      	add	r7, sp, #0
 8013a18:	60f8      	str	r0, [r7, #12]
 8013a1a:	60b9      	str	r1, [r7, #8]
 8013a1c:	4613      	mov	r3, r2
 8013a1e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d101      	bne.n	8013a2a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013a26:	2303      	movs	r3, #3
 8013a28:	e01f      	b.n	8013a6a <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	2200      	movs	r2, #0
 8013a2e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	2200      	movs	r2, #0
 8013a36:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	2200      	movs	r2, #0
 8013a3e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013a42:	68bb      	ldr	r3, [r7, #8]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d003      	beq.n	8013a50 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	68ba      	ldr	r2, [r7, #8]
 8013a4c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	2201      	movs	r2, #1
 8013a54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	79fa      	ldrb	r2, [r7, #7]
 8013a5c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013a5e:	68f8      	ldr	r0, [r7, #12]
 8013a60:	f005 fb78 	bl	8019154 <USBD_LL_Init>
 8013a64:	4603      	mov	r3, r0
 8013a66:	75fb      	strb	r3, [r7, #23]

  return ret;
 8013a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a6a:	4618      	mov	r0, r3
 8013a6c:	3718      	adds	r7, #24
 8013a6e:	46bd      	mov	sp, r7
 8013a70:	bd80      	pop	{r7, pc}

08013a72 <USBD_DeInit>:
  *         Re-Initialize the device library
  * @param  pdev: device instance
  * @retval status: status
  */
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 8013a72:	b580      	push	{r7, lr}
 8013a74:	b084      	sub	sp, #16
 8013a76:	af00      	add	r7, sp, #0
 8013a78:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Disconnect the USB Device */
  (void)USBD_LL_Stop(pdev);
 8013a7a:	6878      	ldr	r0, [r7, #4]
 8013a7c:	f005 fbec 	bl	8019258 <USBD_LL_Stop>

  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	2201      	movs	r2, #1
 8013a84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
    }
  }
#else
  /* Free Class Resources */
  if (pdev->pClass[0] != NULL)
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d009      	beq.n	8013aa6 <USBD_DeInit+0x34>
  {
    pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a98:	685b      	ldr	r3, [r3, #4]
 8013a9a:	687a      	ldr	r2, [r7, #4]
 8013a9c:	6852      	ldr	r2, [r2, #4]
 8013a9e:	b2d2      	uxtb	r2, r2
 8013aa0:	4611      	mov	r1, r2
 8013aa2:	6878      	ldr	r0, [r7, #4]
 8013aa4:	4798      	blx	r3
  }

  pdev->pUserData[0] = NULL;
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	2200      	movs	r2, #0
 8013aaa:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

#endif /* USE_USBD_COMPOSITE */

  /* Free Device descriptors resources */
  pdev->pDesc = NULL;
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	2200      	movs	r2, #0
 8013ab2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  pdev->pConfDesc = NULL;
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	2200      	movs	r2, #0
 8013aba:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* DeInitialize low level driver */
  ret = USBD_LL_DeInit(pdev);
 8013abe:	6878      	ldr	r0, [r7, #4]
 8013ac0:	f005 fb94 	bl	80191ec <USBD_LL_DeInit>
 8013ac4:	4603      	mov	r3, r0
 8013ac6:	73fb      	strb	r3, [r7, #15]

  return ret;
 8013ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8013aca:	4618      	mov	r0, r3
 8013acc:	3710      	adds	r7, #16
 8013ace:	46bd      	mov	sp, r7
 8013ad0:	bd80      	pop	{r7, pc}

08013ad2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013ad2:	b580      	push	{r7, lr}
 8013ad4:	b084      	sub	sp, #16
 8013ad6:	af00      	add	r7, sp, #0
 8013ad8:	6078      	str	r0, [r7, #4]
 8013ada:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013adc:	2300      	movs	r3, #0
 8013ade:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013ae0:	683b      	ldr	r3, [r7, #0]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d101      	bne.n	8013aea <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013ae6:	2303      	movs	r3, #3
 8013ae8:	e025      	b.n	8013b36 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	683a      	ldr	r2, [r7, #0]
 8013aee:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	32ae      	adds	r2, #174	; 0xae
 8013afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d00f      	beq.n	8013b26 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	32ae      	adds	r2, #174	; 0xae
 8013b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b16:	f107 020e 	add.w	r2, r7, #14
 8013b1a:	4610      	mov	r0, r2
 8013b1c:	4798      	blx	r3
 8013b1e:	4602      	mov	r2, r0
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8013b2c:	1c5a      	adds	r2, r3, #1
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8013b34:	2300      	movs	r3, #0
}
 8013b36:	4618      	mov	r0, r3
 8013b38:	3710      	adds	r7, #16
 8013b3a:	46bd      	mov	sp, r7
 8013b3c:	bd80      	pop	{r7, pc}

08013b3e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013b3e:	b580      	push	{r7, lr}
 8013b40:	b082      	sub	sp, #8
 8013b42:	af00      	add	r7, sp, #0
 8013b44:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013b46:	6878      	ldr	r0, [r7, #4]
 8013b48:	f005 fb6b 	bl	8019222 <USBD_LL_Start>
 8013b4c:	4603      	mov	r3, r0
}
 8013b4e:	4618      	mov	r0, r3
 8013b50:	3708      	adds	r7, #8
 8013b52:	46bd      	mov	sp, r7
 8013b54:	bd80      	pop	{r7, pc}

08013b56 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8013b56:	b580      	push	{r7, lr}
 8013b58:	b082      	sub	sp, #8
 8013b5a:	af00      	add	r7, sp, #0
 8013b5c:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8013b5e:	6878      	ldr	r0, [r7, #4]
 8013b60:	f005 fb7a 	bl	8019258 <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d009      	beq.n	8013b82 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013b74:	685b      	ldr	r3, [r3, #4]
 8013b76:	687a      	ldr	r2, [r7, #4]
 8013b78:	6852      	ldr	r2, [r2, #4]
 8013b7a:	b2d2      	uxtb	r2, r2
 8013b7c:	4611      	mov	r1, r2
 8013b7e:	6878      	ldr	r0, [r7, #4]
 8013b80:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 8013b82:	2300      	movs	r3, #0
}
 8013b84:	4618      	mov	r0, r3
 8013b86:	3708      	adds	r7, #8
 8013b88:	46bd      	mov	sp, r7
 8013b8a:	bd80      	pop	{r7, pc}

08013b8c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8013b8c:	b480      	push	{r7}
 8013b8e:	b083      	sub	sp, #12
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013b94:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8013b96:	4618      	mov	r0, r3
 8013b98:	370c      	adds	r7, #12
 8013b9a:	46bd      	mov	sp, r7
 8013b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba0:	4770      	bx	lr

08013ba2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013ba2:	b580      	push	{r7, lr}
 8013ba4:	b084      	sub	sp, #16
 8013ba6:	af00      	add	r7, sp, #0
 8013ba8:	6078      	str	r0, [r7, #4]
 8013baa:	460b      	mov	r3, r1
 8013bac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013bae:	2300      	movs	r3, #0
 8013bb0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d009      	beq.n	8013bd0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	78fa      	ldrb	r2, [r7, #3]
 8013bc6:	4611      	mov	r1, r2
 8013bc8:	6878      	ldr	r0, [r7, #4]
 8013bca:	4798      	blx	r3
 8013bcc:	4603      	mov	r3, r0
 8013bce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	3710      	adds	r7, #16
 8013bd6:	46bd      	mov	sp, r7
 8013bd8:	bd80      	pop	{r7, pc}

08013bda <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013bda:	b580      	push	{r7, lr}
 8013bdc:	b084      	sub	sp, #16
 8013bde:	af00      	add	r7, sp, #0
 8013be0:	6078      	str	r0, [r7, #4]
 8013be2:	460b      	mov	r3, r1
 8013be4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013be6:	2300      	movs	r3, #0
 8013be8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013bf0:	685b      	ldr	r3, [r3, #4]
 8013bf2:	78fa      	ldrb	r2, [r7, #3]
 8013bf4:	4611      	mov	r1, r2
 8013bf6:	6878      	ldr	r0, [r7, #4]
 8013bf8:	4798      	blx	r3
 8013bfa:	4603      	mov	r3, r0
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d001      	beq.n	8013c04 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8013c00:	2303      	movs	r3, #3
 8013c02:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c06:	4618      	mov	r0, r3
 8013c08:	3710      	adds	r7, #16
 8013c0a:	46bd      	mov	sp, r7
 8013c0c:	bd80      	pop	{r7, pc}

08013c0e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013c0e:	b580      	push	{r7, lr}
 8013c10:	b084      	sub	sp, #16
 8013c12:	af00      	add	r7, sp, #0
 8013c14:	6078      	str	r0, [r7, #4]
 8013c16:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013c1e:	6839      	ldr	r1, [r7, #0]
 8013c20:	4618      	mov	r0, r3
 8013c22:	f001 f908 	bl	8014e36 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	2201      	movs	r2, #1
 8013c2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8013c34:	461a      	mov	r2, r3
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013c42:	f003 031f 	and.w	r3, r3, #31
 8013c46:	2b02      	cmp	r3, #2
 8013c48:	d01a      	beq.n	8013c80 <USBD_LL_SetupStage+0x72>
 8013c4a:	2b02      	cmp	r3, #2
 8013c4c:	d822      	bhi.n	8013c94 <USBD_LL_SetupStage+0x86>
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d002      	beq.n	8013c58 <USBD_LL_SetupStage+0x4a>
 8013c52:	2b01      	cmp	r3, #1
 8013c54:	d00a      	beq.n	8013c6c <USBD_LL_SetupStage+0x5e>
 8013c56:	e01d      	b.n	8013c94 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013c5e:	4619      	mov	r1, r3
 8013c60:	6878      	ldr	r0, [r7, #4]
 8013c62:	f000 fb5f 	bl	8014324 <USBD_StdDevReq>
 8013c66:	4603      	mov	r3, r0
 8013c68:	73fb      	strb	r3, [r7, #15]
      break;
 8013c6a:	e020      	b.n	8013cae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013c72:	4619      	mov	r1, r3
 8013c74:	6878      	ldr	r0, [r7, #4]
 8013c76:	f000 fbc7 	bl	8014408 <USBD_StdItfReq>
 8013c7a:	4603      	mov	r3, r0
 8013c7c:	73fb      	strb	r3, [r7, #15]
      break;
 8013c7e:	e016      	b.n	8013cae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013c86:	4619      	mov	r1, r3
 8013c88:	6878      	ldr	r0, [r7, #4]
 8013c8a:	f000 fc29 	bl	80144e0 <USBD_StdEPReq>
 8013c8e:	4603      	mov	r3, r0
 8013c90:	73fb      	strb	r3, [r7, #15]
      break;
 8013c92:	e00c      	b.n	8013cae <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013c9a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013c9e:	b2db      	uxtb	r3, r3
 8013ca0:	4619      	mov	r1, r3
 8013ca2:	6878      	ldr	r0, [r7, #4]
 8013ca4:	f005 fb57 	bl	8019356 <USBD_LL_StallEP>
 8013ca8:	4603      	mov	r3, r0
 8013caa:	73fb      	strb	r3, [r7, #15]
      break;
 8013cac:	bf00      	nop
  }

  return ret;
 8013cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8013cb0:	4618      	mov	r0, r3
 8013cb2:	3710      	adds	r7, #16
 8013cb4:	46bd      	mov	sp, r7
 8013cb6:	bd80      	pop	{r7, pc}

08013cb8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013cb8:	b580      	push	{r7, lr}
 8013cba:	b086      	sub	sp, #24
 8013cbc:	af00      	add	r7, sp, #0
 8013cbe:	60f8      	str	r0, [r7, #12]
 8013cc0:	460b      	mov	r3, r1
 8013cc2:	607a      	str	r2, [r7, #4]
 8013cc4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8013cca:	7afb      	ldrb	r3, [r7, #11]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d16e      	bne.n	8013dae <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8013cd6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013cde:	2b03      	cmp	r3, #3
 8013ce0:	f040 8098 	bne.w	8013e14 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8013ce4:	693b      	ldr	r3, [r7, #16]
 8013ce6:	689a      	ldr	r2, [r3, #8]
 8013ce8:	693b      	ldr	r3, [r7, #16]
 8013cea:	68db      	ldr	r3, [r3, #12]
 8013cec:	429a      	cmp	r2, r3
 8013cee:	d913      	bls.n	8013d18 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8013cf0:	693b      	ldr	r3, [r7, #16]
 8013cf2:	689a      	ldr	r2, [r3, #8]
 8013cf4:	693b      	ldr	r3, [r7, #16]
 8013cf6:	68db      	ldr	r3, [r3, #12]
 8013cf8:	1ad2      	subs	r2, r2, r3
 8013cfa:	693b      	ldr	r3, [r7, #16]
 8013cfc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013cfe:	693b      	ldr	r3, [r7, #16]
 8013d00:	68da      	ldr	r2, [r3, #12]
 8013d02:	693b      	ldr	r3, [r7, #16]
 8013d04:	689b      	ldr	r3, [r3, #8]
 8013d06:	4293      	cmp	r3, r2
 8013d08:	bf28      	it	cs
 8013d0a:	4613      	movcs	r3, r2
 8013d0c:	461a      	mov	r2, r3
 8013d0e:	6879      	ldr	r1, [r7, #4]
 8013d10:	68f8      	ldr	r0, [r7, #12]
 8013d12:	f001 f967 	bl	8014fe4 <USBD_CtlContinueRx>
 8013d16:	e07d      	b.n	8013e14 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013d1e:	f003 031f 	and.w	r3, r3, #31
 8013d22:	2b02      	cmp	r3, #2
 8013d24:	d014      	beq.n	8013d50 <USBD_LL_DataOutStage+0x98>
 8013d26:	2b02      	cmp	r3, #2
 8013d28:	d81d      	bhi.n	8013d66 <USBD_LL_DataOutStage+0xae>
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d002      	beq.n	8013d34 <USBD_LL_DataOutStage+0x7c>
 8013d2e:	2b01      	cmp	r3, #1
 8013d30:	d003      	beq.n	8013d3a <USBD_LL_DataOutStage+0x82>
 8013d32:	e018      	b.n	8013d66 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8013d34:	2300      	movs	r3, #0
 8013d36:	75bb      	strb	r3, [r7, #22]
            break;
 8013d38:	e018      	b.n	8013d6c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8013d40:	b2db      	uxtb	r3, r3
 8013d42:	4619      	mov	r1, r3
 8013d44:	68f8      	ldr	r0, [r7, #12]
 8013d46:	f000 fa5e 	bl	8014206 <USBD_CoreFindIF>
 8013d4a:	4603      	mov	r3, r0
 8013d4c:	75bb      	strb	r3, [r7, #22]
            break;
 8013d4e:	e00d      	b.n	8013d6c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8013d56:	b2db      	uxtb	r3, r3
 8013d58:	4619      	mov	r1, r3
 8013d5a:	68f8      	ldr	r0, [r7, #12]
 8013d5c:	f000 fa60 	bl	8014220 <USBD_CoreFindEP>
 8013d60:	4603      	mov	r3, r0
 8013d62:	75bb      	strb	r3, [r7, #22]
            break;
 8013d64:	e002      	b.n	8013d6c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8013d66:	2300      	movs	r3, #0
 8013d68:	75bb      	strb	r3, [r7, #22]
            break;
 8013d6a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8013d6c:	7dbb      	ldrb	r3, [r7, #22]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d119      	bne.n	8013da6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013d78:	b2db      	uxtb	r3, r3
 8013d7a:	2b03      	cmp	r3, #3
 8013d7c:	d113      	bne.n	8013da6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8013d7e:	7dba      	ldrb	r2, [r7, #22]
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	32ae      	adds	r2, #174	; 0xae
 8013d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d88:	691b      	ldr	r3, [r3, #16]
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d00b      	beq.n	8013da6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8013d8e:	7dba      	ldrb	r2, [r7, #22]
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8013d96:	7dba      	ldrb	r2, [r7, #22]
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	32ae      	adds	r2, #174	; 0xae
 8013d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013da0:	691b      	ldr	r3, [r3, #16]
 8013da2:	68f8      	ldr	r0, [r7, #12]
 8013da4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013da6:	68f8      	ldr	r0, [r7, #12]
 8013da8:	f001 f92d 	bl	8015006 <USBD_CtlSendStatus>
 8013dac:	e032      	b.n	8013e14 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8013dae:	7afb      	ldrb	r3, [r7, #11]
 8013db0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013db4:	b2db      	uxtb	r3, r3
 8013db6:	4619      	mov	r1, r3
 8013db8:	68f8      	ldr	r0, [r7, #12]
 8013dba:	f000 fa31 	bl	8014220 <USBD_CoreFindEP>
 8013dbe:	4603      	mov	r3, r0
 8013dc0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013dc2:	7dbb      	ldrb	r3, [r7, #22]
 8013dc4:	2bff      	cmp	r3, #255	; 0xff
 8013dc6:	d025      	beq.n	8013e14 <USBD_LL_DataOutStage+0x15c>
 8013dc8:	7dbb      	ldrb	r3, [r7, #22]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d122      	bne.n	8013e14 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013dd4:	b2db      	uxtb	r3, r3
 8013dd6:	2b03      	cmp	r3, #3
 8013dd8:	d117      	bne.n	8013e0a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8013dda:	7dba      	ldrb	r2, [r7, #22]
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	32ae      	adds	r2, #174	; 0xae
 8013de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013de4:	699b      	ldr	r3, [r3, #24]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d00f      	beq.n	8013e0a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8013dea:	7dba      	ldrb	r2, [r7, #22]
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8013df2:	7dba      	ldrb	r2, [r7, #22]
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	32ae      	adds	r2, #174	; 0xae
 8013df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013dfc:	699b      	ldr	r3, [r3, #24]
 8013dfe:	7afa      	ldrb	r2, [r7, #11]
 8013e00:	4611      	mov	r1, r2
 8013e02:	68f8      	ldr	r0, [r7, #12]
 8013e04:	4798      	blx	r3
 8013e06:	4603      	mov	r3, r0
 8013e08:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8013e0a:	7dfb      	ldrb	r3, [r7, #23]
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d001      	beq.n	8013e14 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8013e10:	7dfb      	ldrb	r3, [r7, #23]
 8013e12:	e000      	b.n	8013e16 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8013e14:	2300      	movs	r3, #0
}
 8013e16:	4618      	mov	r0, r3
 8013e18:	3718      	adds	r7, #24
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	bd80      	pop	{r7, pc}

08013e1e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013e1e:	b580      	push	{r7, lr}
 8013e20:	b086      	sub	sp, #24
 8013e22:	af00      	add	r7, sp, #0
 8013e24:	60f8      	str	r0, [r7, #12]
 8013e26:	460b      	mov	r3, r1
 8013e28:	607a      	str	r2, [r7, #4]
 8013e2a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8013e2c:	7afb      	ldrb	r3, [r7, #11]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d16f      	bne.n	8013f12 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	3314      	adds	r3, #20
 8013e36:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013e3e:	2b02      	cmp	r3, #2
 8013e40:	d15a      	bne.n	8013ef8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8013e42:	693b      	ldr	r3, [r7, #16]
 8013e44:	689a      	ldr	r2, [r3, #8]
 8013e46:	693b      	ldr	r3, [r7, #16]
 8013e48:	68db      	ldr	r3, [r3, #12]
 8013e4a:	429a      	cmp	r2, r3
 8013e4c:	d914      	bls.n	8013e78 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013e4e:	693b      	ldr	r3, [r7, #16]
 8013e50:	689a      	ldr	r2, [r3, #8]
 8013e52:	693b      	ldr	r3, [r7, #16]
 8013e54:	68db      	ldr	r3, [r3, #12]
 8013e56:	1ad2      	subs	r2, r2, r3
 8013e58:	693b      	ldr	r3, [r7, #16]
 8013e5a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013e5c:	693b      	ldr	r3, [r7, #16]
 8013e5e:	689b      	ldr	r3, [r3, #8]
 8013e60:	461a      	mov	r2, r3
 8013e62:	6879      	ldr	r1, [r7, #4]
 8013e64:	68f8      	ldr	r0, [r7, #12]
 8013e66:	f001 f8ac 	bl	8014fc2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013e6a:	2300      	movs	r3, #0
 8013e6c:	2200      	movs	r2, #0
 8013e6e:	2100      	movs	r1, #0
 8013e70:	68f8      	ldr	r0, [r7, #12]
 8013e72:	f005 fb1a 	bl	80194aa <USBD_LL_PrepareReceive>
 8013e76:	e03f      	b.n	8013ef8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013e78:	693b      	ldr	r3, [r7, #16]
 8013e7a:	68da      	ldr	r2, [r3, #12]
 8013e7c:	693b      	ldr	r3, [r7, #16]
 8013e7e:	689b      	ldr	r3, [r3, #8]
 8013e80:	429a      	cmp	r2, r3
 8013e82:	d11c      	bne.n	8013ebe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013e84:	693b      	ldr	r3, [r7, #16]
 8013e86:	685a      	ldr	r2, [r3, #4]
 8013e88:	693b      	ldr	r3, [r7, #16]
 8013e8a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013e8c:	429a      	cmp	r2, r3
 8013e8e:	d316      	bcc.n	8013ebe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013e90:	693b      	ldr	r3, [r7, #16]
 8013e92:	685a      	ldr	r2, [r3, #4]
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013e9a:	429a      	cmp	r2, r3
 8013e9c:	d20f      	bcs.n	8013ebe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	2100      	movs	r1, #0
 8013ea2:	68f8      	ldr	r0, [r7, #12]
 8013ea4:	f001 f88d 	bl	8014fc2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	2200      	movs	r2, #0
 8013eac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	2200      	movs	r2, #0
 8013eb4:	2100      	movs	r1, #0
 8013eb6:	68f8      	ldr	r0, [r7, #12]
 8013eb8:	f005 faf7 	bl	80194aa <USBD_LL_PrepareReceive>
 8013ebc:	e01c      	b.n	8013ef8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013ec4:	b2db      	uxtb	r3, r3
 8013ec6:	2b03      	cmp	r3, #3
 8013ec8:	d10f      	bne.n	8013eea <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ed0:	68db      	ldr	r3, [r3, #12]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d009      	beq.n	8013eea <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	2200      	movs	r2, #0
 8013eda:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ee4:	68db      	ldr	r3, [r3, #12]
 8013ee6:	68f8      	ldr	r0, [r7, #12]
 8013ee8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013eea:	2180      	movs	r1, #128	; 0x80
 8013eec:	68f8      	ldr	r0, [r7, #12]
 8013eee:	f005 fa32 	bl	8019356 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013ef2:	68f8      	ldr	r0, [r7, #12]
 8013ef4:	f001 f89a 	bl	801502c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d03a      	beq.n	8013f78 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8013f02:	68f8      	ldr	r0, [r7, #12]
 8013f04:	f7ff fe42 	bl	8013b8c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	2200      	movs	r2, #0
 8013f0c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013f10:	e032      	b.n	8013f78 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8013f12:	7afb      	ldrb	r3, [r7, #11]
 8013f14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013f18:	b2db      	uxtb	r3, r3
 8013f1a:	4619      	mov	r1, r3
 8013f1c:	68f8      	ldr	r0, [r7, #12]
 8013f1e:	f000 f97f 	bl	8014220 <USBD_CoreFindEP>
 8013f22:	4603      	mov	r3, r0
 8013f24:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013f26:	7dfb      	ldrb	r3, [r7, #23]
 8013f28:	2bff      	cmp	r3, #255	; 0xff
 8013f2a:	d025      	beq.n	8013f78 <USBD_LL_DataInStage+0x15a>
 8013f2c:	7dfb      	ldrb	r3, [r7, #23]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d122      	bne.n	8013f78 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013f38:	b2db      	uxtb	r3, r3
 8013f3a:	2b03      	cmp	r3, #3
 8013f3c:	d11c      	bne.n	8013f78 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8013f3e:	7dfa      	ldrb	r2, [r7, #23]
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	32ae      	adds	r2, #174	; 0xae
 8013f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f48:	695b      	ldr	r3, [r3, #20]
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d014      	beq.n	8013f78 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8013f4e:	7dfa      	ldrb	r2, [r7, #23]
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8013f56:	7dfa      	ldrb	r2, [r7, #23]
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	32ae      	adds	r2, #174	; 0xae
 8013f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f60:	695b      	ldr	r3, [r3, #20]
 8013f62:	7afa      	ldrb	r2, [r7, #11]
 8013f64:	4611      	mov	r1, r2
 8013f66:	68f8      	ldr	r0, [r7, #12]
 8013f68:	4798      	blx	r3
 8013f6a:	4603      	mov	r3, r0
 8013f6c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8013f6e:	7dbb      	ldrb	r3, [r7, #22]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d001      	beq.n	8013f78 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8013f74:	7dbb      	ldrb	r3, [r7, #22]
 8013f76:	e000      	b.n	8013f7a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8013f78:	2300      	movs	r3, #0
}
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	3718      	adds	r7, #24
 8013f7e:	46bd      	mov	sp, r7
 8013f80:	bd80      	pop	{r7, pc}

08013f82 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013f82:	b580      	push	{r7, lr}
 8013f84:	b084      	sub	sp, #16
 8013f86:	af00      	add	r7, sp, #0
 8013f88:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	2201      	movs	r2, #1
 8013f92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	2200      	movs	r2, #0
 8013f9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	2200      	movs	r2, #0
 8013fa2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	2200      	movs	r2, #0
 8013fa8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	2200      	movs	r2, #0
 8013fb0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d014      	beq.n	8013fe8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013fc4:	685b      	ldr	r3, [r3, #4]
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d00e      	beq.n	8013fe8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013fd0:	685b      	ldr	r3, [r3, #4]
 8013fd2:	687a      	ldr	r2, [r7, #4]
 8013fd4:	6852      	ldr	r2, [r2, #4]
 8013fd6:	b2d2      	uxtb	r2, r2
 8013fd8:	4611      	mov	r1, r2
 8013fda:	6878      	ldr	r0, [r7, #4]
 8013fdc:	4798      	blx	r3
 8013fde:	4603      	mov	r3, r0
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d001      	beq.n	8013fe8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8013fe4:	2303      	movs	r3, #3
 8013fe6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013fe8:	2340      	movs	r3, #64	; 0x40
 8013fea:	2200      	movs	r2, #0
 8013fec:	2100      	movs	r1, #0
 8013fee:	6878      	ldr	r0, [r7, #4]
 8013ff0:	f005 f94d 	bl	801928e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	2201      	movs	r2, #1
 8013ff8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	2240      	movs	r2, #64	; 0x40
 8014000:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014004:	2340      	movs	r3, #64	; 0x40
 8014006:	2200      	movs	r2, #0
 8014008:	2180      	movs	r1, #128	; 0x80
 801400a:	6878      	ldr	r0, [r7, #4]
 801400c:	f005 f93f 	bl	801928e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	2201      	movs	r2, #1
 8014014:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	2240      	movs	r2, #64	; 0x40
 801401a:	621a      	str	r2, [r3, #32]

  return ret;
 801401c:	7bfb      	ldrb	r3, [r7, #15]
}
 801401e:	4618      	mov	r0, r3
 8014020:	3710      	adds	r7, #16
 8014022:	46bd      	mov	sp, r7
 8014024:	bd80      	pop	{r7, pc}

08014026 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8014026:	b480      	push	{r7}
 8014028:	b083      	sub	sp, #12
 801402a:	af00      	add	r7, sp, #0
 801402c:	6078      	str	r0, [r7, #4]
 801402e:	460b      	mov	r3, r1
 8014030:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	78fa      	ldrb	r2, [r7, #3]
 8014036:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8014038:	2300      	movs	r3, #0
}
 801403a:	4618      	mov	r0, r3
 801403c:	370c      	adds	r7, #12
 801403e:	46bd      	mov	sp, r7
 8014040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014044:	4770      	bx	lr

08014046 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8014046:	b480      	push	{r7}
 8014048:	b083      	sub	sp, #12
 801404a:	af00      	add	r7, sp, #0
 801404c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014054:	b2da      	uxtb	r2, r3
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	2204      	movs	r2, #4
 8014060:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8014064:	2300      	movs	r3, #0
}
 8014066:	4618      	mov	r0, r3
 8014068:	370c      	adds	r7, #12
 801406a:	46bd      	mov	sp, r7
 801406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014070:	4770      	bx	lr

08014072 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8014072:	b480      	push	{r7}
 8014074:	b083      	sub	sp, #12
 8014076:	af00      	add	r7, sp, #0
 8014078:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014080:	b2db      	uxtb	r3, r3
 8014082:	2b04      	cmp	r3, #4
 8014084:	d106      	bne.n	8014094 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801408c:	b2da      	uxtb	r2, r3
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8014094:	2300      	movs	r3, #0
}
 8014096:	4618      	mov	r0, r3
 8014098:	370c      	adds	r7, #12
 801409a:	46bd      	mov	sp, r7
 801409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140a0:	4770      	bx	lr

080140a2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80140a2:	b580      	push	{r7, lr}
 80140a4:	b082      	sub	sp, #8
 80140a6:	af00      	add	r7, sp, #0
 80140a8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80140b0:	b2db      	uxtb	r3, r3
 80140b2:	2b03      	cmp	r3, #3
 80140b4:	d110      	bne.n	80140d8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d00b      	beq.n	80140d8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80140c6:	69db      	ldr	r3, [r3, #28]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d005      	beq.n	80140d8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80140d2:	69db      	ldr	r3, [r3, #28]
 80140d4:	6878      	ldr	r0, [r7, #4]
 80140d6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80140d8:	2300      	movs	r3, #0
}
 80140da:	4618      	mov	r0, r3
 80140dc:	3708      	adds	r7, #8
 80140de:	46bd      	mov	sp, r7
 80140e0:	bd80      	pop	{r7, pc}

080140e2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80140e2:	b580      	push	{r7, lr}
 80140e4:	b082      	sub	sp, #8
 80140e6:	af00      	add	r7, sp, #0
 80140e8:	6078      	str	r0, [r7, #4]
 80140ea:	460b      	mov	r3, r1
 80140ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	32ae      	adds	r2, #174	; 0xae
 80140f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d101      	bne.n	8014104 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8014100:	2303      	movs	r3, #3
 8014102:	e01c      	b.n	801413e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801410a:	b2db      	uxtb	r3, r3
 801410c:	2b03      	cmp	r3, #3
 801410e:	d115      	bne.n	801413c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	32ae      	adds	r2, #174	; 0xae
 801411a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801411e:	6a1b      	ldr	r3, [r3, #32]
 8014120:	2b00      	cmp	r3, #0
 8014122:	d00b      	beq.n	801413c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	32ae      	adds	r2, #174	; 0xae
 801412e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014132:	6a1b      	ldr	r3, [r3, #32]
 8014134:	78fa      	ldrb	r2, [r7, #3]
 8014136:	4611      	mov	r1, r2
 8014138:	6878      	ldr	r0, [r7, #4]
 801413a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801413c:	2300      	movs	r3, #0
}
 801413e:	4618      	mov	r0, r3
 8014140:	3708      	adds	r7, #8
 8014142:	46bd      	mov	sp, r7
 8014144:	bd80      	pop	{r7, pc}

08014146 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8014146:	b580      	push	{r7, lr}
 8014148:	b082      	sub	sp, #8
 801414a:	af00      	add	r7, sp, #0
 801414c:	6078      	str	r0, [r7, #4]
 801414e:	460b      	mov	r3, r1
 8014150:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	32ae      	adds	r2, #174	; 0xae
 801415c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d101      	bne.n	8014168 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8014164:	2303      	movs	r3, #3
 8014166:	e01c      	b.n	80141a2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801416e:	b2db      	uxtb	r3, r3
 8014170:	2b03      	cmp	r3, #3
 8014172:	d115      	bne.n	80141a0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	32ae      	adds	r2, #174	; 0xae
 801417e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014184:	2b00      	cmp	r3, #0
 8014186:	d00b      	beq.n	80141a0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	32ae      	adds	r2, #174	; 0xae
 8014192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014198:	78fa      	ldrb	r2, [r7, #3]
 801419a:	4611      	mov	r1, r2
 801419c:	6878      	ldr	r0, [r7, #4]
 801419e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80141a0:	2300      	movs	r3, #0
}
 80141a2:	4618      	mov	r0, r3
 80141a4:	3708      	adds	r7, #8
 80141a6:	46bd      	mov	sp, r7
 80141a8:	bd80      	pop	{r7, pc}

080141aa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80141aa:	b480      	push	{r7}
 80141ac:	b083      	sub	sp, #12
 80141ae:	af00      	add	r7, sp, #0
 80141b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80141b2:	2300      	movs	r3, #0
}
 80141b4:	4618      	mov	r0, r3
 80141b6:	370c      	adds	r7, #12
 80141b8:	46bd      	mov	sp, r7
 80141ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141be:	4770      	bx	lr

080141c0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80141c0:	b580      	push	{r7, lr}
 80141c2:	b084      	sub	sp, #16
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80141c8:	2300      	movs	r3, #0
 80141ca:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	2201      	movs	r2, #1
 80141d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d00e      	beq.n	80141fc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80141e4:	685b      	ldr	r3, [r3, #4]
 80141e6:	687a      	ldr	r2, [r7, #4]
 80141e8:	6852      	ldr	r2, [r2, #4]
 80141ea:	b2d2      	uxtb	r2, r2
 80141ec:	4611      	mov	r1, r2
 80141ee:	6878      	ldr	r0, [r7, #4]
 80141f0:	4798      	blx	r3
 80141f2:	4603      	mov	r3, r0
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d001      	beq.n	80141fc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80141f8:	2303      	movs	r3, #3
 80141fa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80141fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80141fe:	4618      	mov	r0, r3
 8014200:	3710      	adds	r7, #16
 8014202:	46bd      	mov	sp, r7
 8014204:	bd80      	pop	{r7, pc}

08014206 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8014206:	b480      	push	{r7}
 8014208:	b083      	sub	sp, #12
 801420a:	af00      	add	r7, sp, #0
 801420c:	6078      	str	r0, [r7, #4]
 801420e:	460b      	mov	r3, r1
 8014210:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8014212:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8014214:	4618      	mov	r0, r3
 8014216:	370c      	adds	r7, #12
 8014218:	46bd      	mov	sp, r7
 801421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801421e:	4770      	bx	lr

08014220 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8014220:	b480      	push	{r7}
 8014222:	b083      	sub	sp, #12
 8014224:	af00      	add	r7, sp, #0
 8014226:	6078      	str	r0, [r7, #4]
 8014228:	460b      	mov	r3, r1
 801422a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801422c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801422e:	4618      	mov	r0, r3
 8014230:	370c      	adds	r7, #12
 8014232:	46bd      	mov	sp, r7
 8014234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014238:	4770      	bx	lr

0801423a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801423a:	b580      	push	{r7, lr}
 801423c:	b086      	sub	sp, #24
 801423e:	af00      	add	r7, sp, #0
 8014240:	6078      	str	r0, [r7, #4]
 8014242:	460b      	mov	r3, r1
 8014244:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801424e:	2300      	movs	r3, #0
 8014250:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	885b      	ldrh	r3, [r3, #2]
 8014256:	b29a      	uxth	r2, r3
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	781b      	ldrb	r3, [r3, #0]
 801425c:	b29b      	uxth	r3, r3
 801425e:	429a      	cmp	r2, r3
 8014260:	d920      	bls.n	80142a4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	781b      	ldrb	r3, [r3, #0]
 8014266:	b29b      	uxth	r3, r3
 8014268:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801426a:	e013      	b.n	8014294 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801426c:	f107 030a 	add.w	r3, r7, #10
 8014270:	4619      	mov	r1, r3
 8014272:	6978      	ldr	r0, [r7, #20]
 8014274:	f000 f81b 	bl	80142ae <USBD_GetNextDesc>
 8014278:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801427a:	697b      	ldr	r3, [r7, #20]
 801427c:	785b      	ldrb	r3, [r3, #1]
 801427e:	2b05      	cmp	r3, #5
 8014280:	d108      	bne.n	8014294 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8014282:	697b      	ldr	r3, [r7, #20]
 8014284:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8014286:	693b      	ldr	r3, [r7, #16]
 8014288:	789b      	ldrb	r3, [r3, #2]
 801428a:	78fa      	ldrb	r2, [r7, #3]
 801428c:	429a      	cmp	r2, r3
 801428e:	d008      	beq.n	80142a2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8014290:	2300      	movs	r3, #0
 8014292:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	885b      	ldrh	r3, [r3, #2]
 8014298:	b29a      	uxth	r2, r3
 801429a:	897b      	ldrh	r3, [r7, #10]
 801429c:	429a      	cmp	r2, r3
 801429e:	d8e5      	bhi.n	801426c <USBD_GetEpDesc+0x32>
 80142a0:	e000      	b.n	80142a4 <USBD_GetEpDesc+0x6a>
          break;
 80142a2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80142a4:	693b      	ldr	r3, [r7, #16]
}
 80142a6:	4618      	mov	r0, r3
 80142a8:	3718      	adds	r7, #24
 80142aa:	46bd      	mov	sp, r7
 80142ac:	bd80      	pop	{r7, pc}

080142ae <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80142ae:	b480      	push	{r7}
 80142b0:	b085      	sub	sp, #20
 80142b2:	af00      	add	r7, sp, #0
 80142b4:	6078      	str	r0, [r7, #4]
 80142b6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80142bc:	683b      	ldr	r3, [r7, #0]
 80142be:	881a      	ldrh	r2, [r3, #0]
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	781b      	ldrb	r3, [r3, #0]
 80142c4:	b29b      	uxth	r3, r3
 80142c6:	4413      	add	r3, r2
 80142c8:	b29a      	uxth	r2, r3
 80142ca:	683b      	ldr	r3, [r7, #0]
 80142cc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	781b      	ldrb	r3, [r3, #0]
 80142d2:	461a      	mov	r2, r3
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	4413      	add	r3, r2
 80142d8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80142da:	68fb      	ldr	r3, [r7, #12]
}
 80142dc:	4618      	mov	r0, r3
 80142de:	3714      	adds	r7, #20
 80142e0:	46bd      	mov	sp, r7
 80142e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142e6:	4770      	bx	lr

080142e8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80142e8:	b480      	push	{r7}
 80142ea:	b087      	sub	sp, #28
 80142ec:	af00      	add	r7, sp, #0
 80142ee:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80142f4:	697b      	ldr	r3, [r7, #20]
 80142f6:	781b      	ldrb	r3, [r3, #0]
 80142f8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80142fa:	697b      	ldr	r3, [r7, #20]
 80142fc:	3301      	adds	r3, #1
 80142fe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8014300:	697b      	ldr	r3, [r7, #20]
 8014302:	781b      	ldrb	r3, [r3, #0]
 8014304:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8014306:	8a3b      	ldrh	r3, [r7, #16]
 8014308:	021b      	lsls	r3, r3, #8
 801430a:	b21a      	sxth	r2, r3
 801430c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014310:	4313      	orrs	r3, r2
 8014312:	b21b      	sxth	r3, r3
 8014314:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8014316:	89fb      	ldrh	r3, [r7, #14]
}
 8014318:	4618      	mov	r0, r3
 801431a:	371c      	adds	r7, #28
 801431c:	46bd      	mov	sp, r7
 801431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014322:	4770      	bx	lr

08014324 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014324:	b580      	push	{r7, lr}
 8014326:	b084      	sub	sp, #16
 8014328:	af00      	add	r7, sp, #0
 801432a:	6078      	str	r0, [r7, #4]
 801432c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801432e:	2300      	movs	r3, #0
 8014330:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014332:	683b      	ldr	r3, [r7, #0]
 8014334:	781b      	ldrb	r3, [r3, #0]
 8014336:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801433a:	2b40      	cmp	r3, #64	; 0x40
 801433c:	d005      	beq.n	801434a <USBD_StdDevReq+0x26>
 801433e:	2b40      	cmp	r3, #64	; 0x40
 8014340:	d857      	bhi.n	80143f2 <USBD_StdDevReq+0xce>
 8014342:	2b00      	cmp	r3, #0
 8014344:	d00f      	beq.n	8014366 <USBD_StdDevReq+0x42>
 8014346:	2b20      	cmp	r3, #32
 8014348:	d153      	bne.n	80143f2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	32ae      	adds	r2, #174	; 0xae
 8014354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014358:	689b      	ldr	r3, [r3, #8]
 801435a:	6839      	ldr	r1, [r7, #0]
 801435c:	6878      	ldr	r0, [r7, #4]
 801435e:	4798      	blx	r3
 8014360:	4603      	mov	r3, r0
 8014362:	73fb      	strb	r3, [r7, #15]
      break;
 8014364:	e04a      	b.n	80143fc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014366:	683b      	ldr	r3, [r7, #0]
 8014368:	785b      	ldrb	r3, [r3, #1]
 801436a:	2b09      	cmp	r3, #9
 801436c:	d83b      	bhi.n	80143e6 <USBD_StdDevReq+0xc2>
 801436e:	a201      	add	r2, pc, #4	; (adr r2, 8014374 <USBD_StdDevReq+0x50>)
 8014370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014374:	080143c9 	.word	0x080143c9
 8014378:	080143dd 	.word	0x080143dd
 801437c:	080143e7 	.word	0x080143e7
 8014380:	080143d3 	.word	0x080143d3
 8014384:	080143e7 	.word	0x080143e7
 8014388:	080143a7 	.word	0x080143a7
 801438c:	0801439d 	.word	0x0801439d
 8014390:	080143e7 	.word	0x080143e7
 8014394:	080143bf 	.word	0x080143bf
 8014398:	080143b1 	.word	0x080143b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801439c:	6839      	ldr	r1, [r7, #0]
 801439e:	6878      	ldr	r0, [r7, #4]
 80143a0:	f000 fa3c 	bl	801481c <USBD_GetDescriptor>
          break;
 80143a4:	e024      	b.n	80143f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80143a6:	6839      	ldr	r1, [r7, #0]
 80143a8:	6878      	ldr	r0, [r7, #4]
 80143aa:	f000 fba1 	bl	8014af0 <USBD_SetAddress>
          break;
 80143ae:	e01f      	b.n	80143f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80143b0:	6839      	ldr	r1, [r7, #0]
 80143b2:	6878      	ldr	r0, [r7, #4]
 80143b4:	f000 fbe0 	bl	8014b78 <USBD_SetConfig>
 80143b8:	4603      	mov	r3, r0
 80143ba:	73fb      	strb	r3, [r7, #15]
          break;
 80143bc:	e018      	b.n	80143f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80143be:	6839      	ldr	r1, [r7, #0]
 80143c0:	6878      	ldr	r0, [r7, #4]
 80143c2:	f000 fc83 	bl	8014ccc <USBD_GetConfig>
          break;
 80143c6:	e013      	b.n	80143f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80143c8:	6839      	ldr	r1, [r7, #0]
 80143ca:	6878      	ldr	r0, [r7, #4]
 80143cc:	f000 fcb4 	bl	8014d38 <USBD_GetStatus>
          break;
 80143d0:	e00e      	b.n	80143f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80143d2:	6839      	ldr	r1, [r7, #0]
 80143d4:	6878      	ldr	r0, [r7, #4]
 80143d6:	f000 fce3 	bl	8014da0 <USBD_SetFeature>
          break;
 80143da:	e009      	b.n	80143f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80143dc:	6839      	ldr	r1, [r7, #0]
 80143de:	6878      	ldr	r0, [r7, #4]
 80143e0:	f000 fd07 	bl	8014df2 <USBD_ClrFeature>
          break;
 80143e4:	e004      	b.n	80143f0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80143e6:	6839      	ldr	r1, [r7, #0]
 80143e8:	6878      	ldr	r0, [r7, #4]
 80143ea:	f000 fd5e 	bl	8014eaa <USBD_CtlError>
          break;
 80143ee:	bf00      	nop
      }
      break;
 80143f0:	e004      	b.n	80143fc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80143f2:	6839      	ldr	r1, [r7, #0]
 80143f4:	6878      	ldr	r0, [r7, #4]
 80143f6:	f000 fd58 	bl	8014eaa <USBD_CtlError>
      break;
 80143fa:	bf00      	nop
  }

  return ret;
 80143fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80143fe:	4618      	mov	r0, r3
 8014400:	3710      	adds	r7, #16
 8014402:	46bd      	mov	sp, r7
 8014404:	bd80      	pop	{r7, pc}
 8014406:	bf00      	nop

08014408 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014408:	b580      	push	{r7, lr}
 801440a:	b084      	sub	sp, #16
 801440c:	af00      	add	r7, sp, #0
 801440e:	6078      	str	r0, [r7, #4]
 8014410:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014412:	2300      	movs	r3, #0
 8014414:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014416:	683b      	ldr	r3, [r7, #0]
 8014418:	781b      	ldrb	r3, [r3, #0]
 801441a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801441e:	2b40      	cmp	r3, #64	; 0x40
 8014420:	d005      	beq.n	801442e <USBD_StdItfReq+0x26>
 8014422:	2b40      	cmp	r3, #64	; 0x40
 8014424:	d852      	bhi.n	80144cc <USBD_StdItfReq+0xc4>
 8014426:	2b00      	cmp	r3, #0
 8014428:	d001      	beq.n	801442e <USBD_StdItfReq+0x26>
 801442a:	2b20      	cmp	r3, #32
 801442c:	d14e      	bne.n	80144cc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014434:	b2db      	uxtb	r3, r3
 8014436:	3b01      	subs	r3, #1
 8014438:	2b02      	cmp	r3, #2
 801443a:	d840      	bhi.n	80144be <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801443c:	683b      	ldr	r3, [r7, #0]
 801443e:	889b      	ldrh	r3, [r3, #4]
 8014440:	b2db      	uxtb	r3, r3
 8014442:	2b01      	cmp	r3, #1
 8014444:	d836      	bhi.n	80144b4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8014446:	683b      	ldr	r3, [r7, #0]
 8014448:	889b      	ldrh	r3, [r3, #4]
 801444a:	b2db      	uxtb	r3, r3
 801444c:	4619      	mov	r1, r3
 801444e:	6878      	ldr	r0, [r7, #4]
 8014450:	f7ff fed9 	bl	8014206 <USBD_CoreFindIF>
 8014454:	4603      	mov	r3, r0
 8014456:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014458:	7bbb      	ldrb	r3, [r7, #14]
 801445a:	2bff      	cmp	r3, #255	; 0xff
 801445c:	d01d      	beq.n	801449a <USBD_StdItfReq+0x92>
 801445e:	7bbb      	ldrb	r3, [r7, #14]
 8014460:	2b00      	cmp	r3, #0
 8014462:	d11a      	bne.n	801449a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8014464:	7bba      	ldrb	r2, [r7, #14]
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	32ae      	adds	r2, #174	; 0xae
 801446a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801446e:	689b      	ldr	r3, [r3, #8]
 8014470:	2b00      	cmp	r3, #0
 8014472:	d00f      	beq.n	8014494 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8014474:	7bba      	ldrb	r2, [r7, #14]
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801447c:	7bba      	ldrb	r2, [r7, #14]
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	32ae      	adds	r2, #174	; 0xae
 8014482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014486:	689b      	ldr	r3, [r3, #8]
 8014488:	6839      	ldr	r1, [r7, #0]
 801448a:	6878      	ldr	r0, [r7, #4]
 801448c:	4798      	blx	r3
 801448e:	4603      	mov	r3, r0
 8014490:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014492:	e004      	b.n	801449e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8014494:	2303      	movs	r3, #3
 8014496:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014498:	e001      	b.n	801449e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801449a:	2303      	movs	r3, #3
 801449c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801449e:	683b      	ldr	r3, [r7, #0]
 80144a0:	88db      	ldrh	r3, [r3, #6]
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d110      	bne.n	80144c8 <USBD_StdItfReq+0xc0>
 80144a6:	7bfb      	ldrb	r3, [r7, #15]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d10d      	bne.n	80144c8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80144ac:	6878      	ldr	r0, [r7, #4]
 80144ae:	f000 fdaa 	bl	8015006 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80144b2:	e009      	b.n	80144c8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80144b4:	6839      	ldr	r1, [r7, #0]
 80144b6:	6878      	ldr	r0, [r7, #4]
 80144b8:	f000 fcf7 	bl	8014eaa <USBD_CtlError>
          break;
 80144bc:	e004      	b.n	80144c8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80144be:	6839      	ldr	r1, [r7, #0]
 80144c0:	6878      	ldr	r0, [r7, #4]
 80144c2:	f000 fcf2 	bl	8014eaa <USBD_CtlError>
          break;
 80144c6:	e000      	b.n	80144ca <USBD_StdItfReq+0xc2>
          break;
 80144c8:	bf00      	nop
      }
      break;
 80144ca:	e004      	b.n	80144d6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80144cc:	6839      	ldr	r1, [r7, #0]
 80144ce:	6878      	ldr	r0, [r7, #4]
 80144d0:	f000 fceb 	bl	8014eaa <USBD_CtlError>
      break;
 80144d4:	bf00      	nop
  }

  return ret;
 80144d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80144d8:	4618      	mov	r0, r3
 80144da:	3710      	adds	r7, #16
 80144dc:	46bd      	mov	sp, r7
 80144de:	bd80      	pop	{r7, pc}

080144e0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80144e0:	b580      	push	{r7, lr}
 80144e2:	b084      	sub	sp, #16
 80144e4:	af00      	add	r7, sp, #0
 80144e6:	6078      	str	r0, [r7, #4]
 80144e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80144ea:	2300      	movs	r3, #0
 80144ec:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80144ee:	683b      	ldr	r3, [r7, #0]
 80144f0:	889b      	ldrh	r3, [r3, #4]
 80144f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80144f4:	683b      	ldr	r3, [r7, #0]
 80144f6:	781b      	ldrb	r3, [r3, #0]
 80144f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80144fc:	2b40      	cmp	r3, #64	; 0x40
 80144fe:	d007      	beq.n	8014510 <USBD_StdEPReq+0x30>
 8014500:	2b40      	cmp	r3, #64	; 0x40
 8014502:	f200 817f 	bhi.w	8014804 <USBD_StdEPReq+0x324>
 8014506:	2b00      	cmp	r3, #0
 8014508:	d02a      	beq.n	8014560 <USBD_StdEPReq+0x80>
 801450a:	2b20      	cmp	r3, #32
 801450c:	f040 817a 	bne.w	8014804 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8014510:	7bbb      	ldrb	r3, [r7, #14]
 8014512:	4619      	mov	r1, r3
 8014514:	6878      	ldr	r0, [r7, #4]
 8014516:	f7ff fe83 	bl	8014220 <USBD_CoreFindEP>
 801451a:	4603      	mov	r3, r0
 801451c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801451e:	7b7b      	ldrb	r3, [r7, #13]
 8014520:	2bff      	cmp	r3, #255	; 0xff
 8014522:	f000 8174 	beq.w	801480e <USBD_StdEPReq+0x32e>
 8014526:	7b7b      	ldrb	r3, [r7, #13]
 8014528:	2b00      	cmp	r3, #0
 801452a:	f040 8170 	bne.w	801480e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801452e:	7b7a      	ldrb	r2, [r7, #13]
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8014536:	7b7a      	ldrb	r2, [r7, #13]
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	32ae      	adds	r2, #174	; 0xae
 801453c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014540:	689b      	ldr	r3, [r3, #8]
 8014542:	2b00      	cmp	r3, #0
 8014544:	f000 8163 	beq.w	801480e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8014548:	7b7a      	ldrb	r2, [r7, #13]
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	32ae      	adds	r2, #174	; 0xae
 801454e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014552:	689b      	ldr	r3, [r3, #8]
 8014554:	6839      	ldr	r1, [r7, #0]
 8014556:	6878      	ldr	r0, [r7, #4]
 8014558:	4798      	blx	r3
 801455a:	4603      	mov	r3, r0
 801455c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801455e:	e156      	b.n	801480e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014560:	683b      	ldr	r3, [r7, #0]
 8014562:	785b      	ldrb	r3, [r3, #1]
 8014564:	2b03      	cmp	r3, #3
 8014566:	d008      	beq.n	801457a <USBD_StdEPReq+0x9a>
 8014568:	2b03      	cmp	r3, #3
 801456a:	f300 8145 	bgt.w	80147f8 <USBD_StdEPReq+0x318>
 801456e:	2b00      	cmp	r3, #0
 8014570:	f000 809b 	beq.w	80146aa <USBD_StdEPReq+0x1ca>
 8014574:	2b01      	cmp	r3, #1
 8014576:	d03c      	beq.n	80145f2 <USBD_StdEPReq+0x112>
 8014578:	e13e      	b.n	80147f8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014580:	b2db      	uxtb	r3, r3
 8014582:	2b02      	cmp	r3, #2
 8014584:	d002      	beq.n	801458c <USBD_StdEPReq+0xac>
 8014586:	2b03      	cmp	r3, #3
 8014588:	d016      	beq.n	80145b8 <USBD_StdEPReq+0xd8>
 801458a:	e02c      	b.n	80145e6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801458c:	7bbb      	ldrb	r3, [r7, #14]
 801458e:	2b00      	cmp	r3, #0
 8014590:	d00d      	beq.n	80145ae <USBD_StdEPReq+0xce>
 8014592:	7bbb      	ldrb	r3, [r7, #14]
 8014594:	2b80      	cmp	r3, #128	; 0x80
 8014596:	d00a      	beq.n	80145ae <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014598:	7bbb      	ldrb	r3, [r7, #14]
 801459a:	4619      	mov	r1, r3
 801459c:	6878      	ldr	r0, [r7, #4]
 801459e:	f004 feda 	bl	8019356 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80145a2:	2180      	movs	r1, #128	; 0x80
 80145a4:	6878      	ldr	r0, [r7, #4]
 80145a6:	f004 fed6 	bl	8019356 <USBD_LL_StallEP>
 80145aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80145ac:	e020      	b.n	80145f0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80145ae:	6839      	ldr	r1, [r7, #0]
 80145b0:	6878      	ldr	r0, [r7, #4]
 80145b2:	f000 fc7a 	bl	8014eaa <USBD_CtlError>
              break;
 80145b6:	e01b      	b.n	80145f0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80145b8:	683b      	ldr	r3, [r7, #0]
 80145ba:	885b      	ldrh	r3, [r3, #2]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d10e      	bne.n	80145de <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80145c0:	7bbb      	ldrb	r3, [r7, #14]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d00b      	beq.n	80145de <USBD_StdEPReq+0xfe>
 80145c6:	7bbb      	ldrb	r3, [r7, #14]
 80145c8:	2b80      	cmp	r3, #128	; 0x80
 80145ca:	d008      	beq.n	80145de <USBD_StdEPReq+0xfe>
 80145cc:	683b      	ldr	r3, [r7, #0]
 80145ce:	88db      	ldrh	r3, [r3, #6]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d104      	bne.n	80145de <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80145d4:	7bbb      	ldrb	r3, [r7, #14]
 80145d6:	4619      	mov	r1, r3
 80145d8:	6878      	ldr	r0, [r7, #4]
 80145da:	f004 febc 	bl	8019356 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80145de:	6878      	ldr	r0, [r7, #4]
 80145e0:	f000 fd11 	bl	8015006 <USBD_CtlSendStatus>

              break;
 80145e4:	e004      	b.n	80145f0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80145e6:	6839      	ldr	r1, [r7, #0]
 80145e8:	6878      	ldr	r0, [r7, #4]
 80145ea:	f000 fc5e 	bl	8014eaa <USBD_CtlError>
              break;
 80145ee:	bf00      	nop
          }
          break;
 80145f0:	e107      	b.n	8014802 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80145f8:	b2db      	uxtb	r3, r3
 80145fa:	2b02      	cmp	r3, #2
 80145fc:	d002      	beq.n	8014604 <USBD_StdEPReq+0x124>
 80145fe:	2b03      	cmp	r3, #3
 8014600:	d016      	beq.n	8014630 <USBD_StdEPReq+0x150>
 8014602:	e04b      	b.n	801469c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014604:	7bbb      	ldrb	r3, [r7, #14]
 8014606:	2b00      	cmp	r3, #0
 8014608:	d00d      	beq.n	8014626 <USBD_StdEPReq+0x146>
 801460a:	7bbb      	ldrb	r3, [r7, #14]
 801460c:	2b80      	cmp	r3, #128	; 0x80
 801460e:	d00a      	beq.n	8014626 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014610:	7bbb      	ldrb	r3, [r7, #14]
 8014612:	4619      	mov	r1, r3
 8014614:	6878      	ldr	r0, [r7, #4]
 8014616:	f004 fe9e 	bl	8019356 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801461a:	2180      	movs	r1, #128	; 0x80
 801461c:	6878      	ldr	r0, [r7, #4]
 801461e:	f004 fe9a 	bl	8019356 <USBD_LL_StallEP>
 8014622:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014624:	e040      	b.n	80146a8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8014626:	6839      	ldr	r1, [r7, #0]
 8014628:	6878      	ldr	r0, [r7, #4]
 801462a:	f000 fc3e 	bl	8014eaa <USBD_CtlError>
              break;
 801462e:	e03b      	b.n	80146a8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014630:	683b      	ldr	r3, [r7, #0]
 8014632:	885b      	ldrh	r3, [r3, #2]
 8014634:	2b00      	cmp	r3, #0
 8014636:	d136      	bne.n	80146a6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014638:	7bbb      	ldrb	r3, [r7, #14]
 801463a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801463e:	2b00      	cmp	r3, #0
 8014640:	d004      	beq.n	801464c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014642:	7bbb      	ldrb	r3, [r7, #14]
 8014644:	4619      	mov	r1, r3
 8014646:	6878      	ldr	r0, [r7, #4]
 8014648:	f004 fea4 	bl	8019394 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801464c:	6878      	ldr	r0, [r7, #4]
 801464e:	f000 fcda 	bl	8015006 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8014652:	7bbb      	ldrb	r3, [r7, #14]
 8014654:	4619      	mov	r1, r3
 8014656:	6878      	ldr	r0, [r7, #4]
 8014658:	f7ff fde2 	bl	8014220 <USBD_CoreFindEP>
 801465c:	4603      	mov	r3, r0
 801465e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014660:	7b7b      	ldrb	r3, [r7, #13]
 8014662:	2bff      	cmp	r3, #255	; 0xff
 8014664:	d01f      	beq.n	80146a6 <USBD_StdEPReq+0x1c6>
 8014666:	7b7b      	ldrb	r3, [r7, #13]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d11c      	bne.n	80146a6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801466c:	7b7a      	ldrb	r2, [r7, #13]
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8014674:	7b7a      	ldrb	r2, [r7, #13]
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	32ae      	adds	r2, #174	; 0xae
 801467a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801467e:	689b      	ldr	r3, [r3, #8]
 8014680:	2b00      	cmp	r3, #0
 8014682:	d010      	beq.n	80146a6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014684:	7b7a      	ldrb	r2, [r7, #13]
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	32ae      	adds	r2, #174	; 0xae
 801468a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801468e:	689b      	ldr	r3, [r3, #8]
 8014690:	6839      	ldr	r1, [r7, #0]
 8014692:	6878      	ldr	r0, [r7, #4]
 8014694:	4798      	blx	r3
 8014696:	4603      	mov	r3, r0
 8014698:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801469a:	e004      	b.n	80146a6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801469c:	6839      	ldr	r1, [r7, #0]
 801469e:	6878      	ldr	r0, [r7, #4]
 80146a0:	f000 fc03 	bl	8014eaa <USBD_CtlError>
              break;
 80146a4:	e000      	b.n	80146a8 <USBD_StdEPReq+0x1c8>
              break;
 80146a6:	bf00      	nop
          }
          break;
 80146a8:	e0ab      	b.n	8014802 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80146b0:	b2db      	uxtb	r3, r3
 80146b2:	2b02      	cmp	r3, #2
 80146b4:	d002      	beq.n	80146bc <USBD_StdEPReq+0x1dc>
 80146b6:	2b03      	cmp	r3, #3
 80146b8:	d032      	beq.n	8014720 <USBD_StdEPReq+0x240>
 80146ba:	e097      	b.n	80147ec <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80146bc:	7bbb      	ldrb	r3, [r7, #14]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d007      	beq.n	80146d2 <USBD_StdEPReq+0x1f2>
 80146c2:	7bbb      	ldrb	r3, [r7, #14]
 80146c4:	2b80      	cmp	r3, #128	; 0x80
 80146c6:	d004      	beq.n	80146d2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80146c8:	6839      	ldr	r1, [r7, #0]
 80146ca:	6878      	ldr	r0, [r7, #4]
 80146cc:	f000 fbed 	bl	8014eaa <USBD_CtlError>
                break;
 80146d0:	e091      	b.n	80147f6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80146d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	da0b      	bge.n	80146f2 <USBD_StdEPReq+0x212>
 80146da:	7bbb      	ldrb	r3, [r7, #14]
 80146dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80146e0:	4613      	mov	r3, r2
 80146e2:	009b      	lsls	r3, r3, #2
 80146e4:	4413      	add	r3, r2
 80146e6:	009b      	lsls	r3, r3, #2
 80146e8:	3310      	adds	r3, #16
 80146ea:	687a      	ldr	r2, [r7, #4]
 80146ec:	4413      	add	r3, r2
 80146ee:	3304      	adds	r3, #4
 80146f0:	e00b      	b.n	801470a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80146f2:	7bbb      	ldrb	r3, [r7, #14]
 80146f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80146f8:	4613      	mov	r3, r2
 80146fa:	009b      	lsls	r3, r3, #2
 80146fc:	4413      	add	r3, r2
 80146fe:	009b      	lsls	r3, r3, #2
 8014700:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014704:	687a      	ldr	r2, [r7, #4]
 8014706:	4413      	add	r3, r2
 8014708:	3304      	adds	r3, #4
 801470a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801470c:	68bb      	ldr	r3, [r7, #8]
 801470e:	2200      	movs	r2, #0
 8014710:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014712:	68bb      	ldr	r3, [r7, #8]
 8014714:	2202      	movs	r2, #2
 8014716:	4619      	mov	r1, r3
 8014718:	6878      	ldr	r0, [r7, #4]
 801471a:	f000 fc37 	bl	8014f8c <USBD_CtlSendData>
              break;
 801471e:	e06a      	b.n	80147f6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014720:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014724:	2b00      	cmp	r3, #0
 8014726:	da11      	bge.n	801474c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014728:	7bbb      	ldrb	r3, [r7, #14]
 801472a:	f003 020f 	and.w	r2, r3, #15
 801472e:	6879      	ldr	r1, [r7, #4]
 8014730:	4613      	mov	r3, r2
 8014732:	009b      	lsls	r3, r3, #2
 8014734:	4413      	add	r3, r2
 8014736:	009b      	lsls	r3, r3, #2
 8014738:	440b      	add	r3, r1
 801473a:	3324      	adds	r3, #36	; 0x24
 801473c:	881b      	ldrh	r3, [r3, #0]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d117      	bne.n	8014772 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014742:	6839      	ldr	r1, [r7, #0]
 8014744:	6878      	ldr	r0, [r7, #4]
 8014746:	f000 fbb0 	bl	8014eaa <USBD_CtlError>
                  break;
 801474a:	e054      	b.n	80147f6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801474c:	7bbb      	ldrb	r3, [r7, #14]
 801474e:	f003 020f 	and.w	r2, r3, #15
 8014752:	6879      	ldr	r1, [r7, #4]
 8014754:	4613      	mov	r3, r2
 8014756:	009b      	lsls	r3, r3, #2
 8014758:	4413      	add	r3, r2
 801475a:	009b      	lsls	r3, r3, #2
 801475c:	440b      	add	r3, r1
 801475e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014762:	881b      	ldrh	r3, [r3, #0]
 8014764:	2b00      	cmp	r3, #0
 8014766:	d104      	bne.n	8014772 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014768:	6839      	ldr	r1, [r7, #0]
 801476a:	6878      	ldr	r0, [r7, #4]
 801476c:	f000 fb9d 	bl	8014eaa <USBD_CtlError>
                  break;
 8014770:	e041      	b.n	80147f6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014772:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014776:	2b00      	cmp	r3, #0
 8014778:	da0b      	bge.n	8014792 <USBD_StdEPReq+0x2b2>
 801477a:	7bbb      	ldrb	r3, [r7, #14]
 801477c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014780:	4613      	mov	r3, r2
 8014782:	009b      	lsls	r3, r3, #2
 8014784:	4413      	add	r3, r2
 8014786:	009b      	lsls	r3, r3, #2
 8014788:	3310      	adds	r3, #16
 801478a:	687a      	ldr	r2, [r7, #4]
 801478c:	4413      	add	r3, r2
 801478e:	3304      	adds	r3, #4
 8014790:	e00b      	b.n	80147aa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014792:	7bbb      	ldrb	r3, [r7, #14]
 8014794:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014798:	4613      	mov	r3, r2
 801479a:	009b      	lsls	r3, r3, #2
 801479c:	4413      	add	r3, r2
 801479e:	009b      	lsls	r3, r3, #2
 80147a0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80147a4:	687a      	ldr	r2, [r7, #4]
 80147a6:	4413      	add	r3, r2
 80147a8:	3304      	adds	r3, #4
 80147aa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80147ac:	7bbb      	ldrb	r3, [r7, #14]
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d002      	beq.n	80147b8 <USBD_StdEPReq+0x2d8>
 80147b2:	7bbb      	ldrb	r3, [r7, #14]
 80147b4:	2b80      	cmp	r3, #128	; 0x80
 80147b6:	d103      	bne.n	80147c0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80147b8:	68bb      	ldr	r3, [r7, #8]
 80147ba:	2200      	movs	r2, #0
 80147bc:	601a      	str	r2, [r3, #0]
 80147be:	e00e      	b.n	80147de <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80147c0:	7bbb      	ldrb	r3, [r7, #14]
 80147c2:	4619      	mov	r1, r3
 80147c4:	6878      	ldr	r0, [r7, #4]
 80147c6:	f004 fe04 	bl	80193d2 <USBD_LL_IsStallEP>
 80147ca:	4603      	mov	r3, r0
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d003      	beq.n	80147d8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80147d0:	68bb      	ldr	r3, [r7, #8]
 80147d2:	2201      	movs	r2, #1
 80147d4:	601a      	str	r2, [r3, #0]
 80147d6:	e002      	b.n	80147de <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80147d8:	68bb      	ldr	r3, [r7, #8]
 80147da:	2200      	movs	r2, #0
 80147dc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80147de:	68bb      	ldr	r3, [r7, #8]
 80147e0:	2202      	movs	r2, #2
 80147e2:	4619      	mov	r1, r3
 80147e4:	6878      	ldr	r0, [r7, #4]
 80147e6:	f000 fbd1 	bl	8014f8c <USBD_CtlSendData>
              break;
 80147ea:	e004      	b.n	80147f6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80147ec:	6839      	ldr	r1, [r7, #0]
 80147ee:	6878      	ldr	r0, [r7, #4]
 80147f0:	f000 fb5b 	bl	8014eaa <USBD_CtlError>
              break;
 80147f4:	bf00      	nop
          }
          break;
 80147f6:	e004      	b.n	8014802 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80147f8:	6839      	ldr	r1, [r7, #0]
 80147fa:	6878      	ldr	r0, [r7, #4]
 80147fc:	f000 fb55 	bl	8014eaa <USBD_CtlError>
          break;
 8014800:	bf00      	nop
      }
      break;
 8014802:	e005      	b.n	8014810 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8014804:	6839      	ldr	r1, [r7, #0]
 8014806:	6878      	ldr	r0, [r7, #4]
 8014808:	f000 fb4f 	bl	8014eaa <USBD_CtlError>
      break;
 801480c:	e000      	b.n	8014810 <USBD_StdEPReq+0x330>
      break;
 801480e:	bf00      	nop
  }

  return ret;
 8014810:	7bfb      	ldrb	r3, [r7, #15]
}
 8014812:	4618      	mov	r0, r3
 8014814:	3710      	adds	r7, #16
 8014816:	46bd      	mov	sp, r7
 8014818:	bd80      	pop	{r7, pc}
	...

0801481c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801481c:	b580      	push	{r7, lr}
 801481e:	b084      	sub	sp, #16
 8014820:	af00      	add	r7, sp, #0
 8014822:	6078      	str	r0, [r7, #4]
 8014824:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014826:	2300      	movs	r3, #0
 8014828:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801482a:	2300      	movs	r3, #0
 801482c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801482e:	2300      	movs	r3, #0
 8014830:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014832:	683b      	ldr	r3, [r7, #0]
 8014834:	885b      	ldrh	r3, [r3, #2]
 8014836:	0a1b      	lsrs	r3, r3, #8
 8014838:	b29b      	uxth	r3, r3
 801483a:	3b01      	subs	r3, #1
 801483c:	2b06      	cmp	r3, #6
 801483e:	f200 8128 	bhi.w	8014a92 <USBD_GetDescriptor+0x276>
 8014842:	a201      	add	r2, pc, #4	; (adr r2, 8014848 <USBD_GetDescriptor+0x2c>)
 8014844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014848:	08014865 	.word	0x08014865
 801484c:	0801487d 	.word	0x0801487d
 8014850:	080148bd 	.word	0x080148bd
 8014854:	08014a93 	.word	0x08014a93
 8014858:	08014a93 	.word	0x08014a93
 801485c:	08014a33 	.word	0x08014a33
 8014860:	08014a5f 	.word	0x08014a5f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	687a      	ldr	r2, [r7, #4]
 801486e:	7c12      	ldrb	r2, [r2, #16]
 8014870:	f107 0108 	add.w	r1, r7, #8
 8014874:	4610      	mov	r0, r2
 8014876:	4798      	blx	r3
 8014878:	60f8      	str	r0, [r7, #12]
      break;
 801487a:	e112      	b.n	8014aa2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	7c1b      	ldrb	r3, [r3, #16]
 8014880:	2b00      	cmp	r3, #0
 8014882:	d10d      	bne.n	80148a0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801488a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801488c:	f107 0208 	add.w	r2, r7, #8
 8014890:	4610      	mov	r0, r2
 8014892:	4798      	blx	r3
 8014894:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	3301      	adds	r3, #1
 801489a:	2202      	movs	r2, #2
 801489c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801489e:	e100      	b.n	8014aa2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148a8:	f107 0208 	add.w	r2, r7, #8
 80148ac:	4610      	mov	r0, r2
 80148ae:	4798      	blx	r3
 80148b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	3301      	adds	r3, #1
 80148b6:	2202      	movs	r2, #2
 80148b8:	701a      	strb	r2, [r3, #0]
      break;
 80148ba:	e0f2      	b.n	8014aa2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80148bc:	683b      	ldr	r3, [r7, #0]
 80148be:	885b      	ldrh	r3, [r3, #2]
 80148c0:	b2db      	uxtb	r3, r3
 80148c2:	2b05      	cmp	r3, #5
 80148c4:	f200 80ac 	bhi.w	8014a20 <USBD_GetDescriptor+0x204>
 80148c8:	a201      	add	r2, pc, #4	; (adr r2, 80148d0 <USBD_GetDescriptor+0xb4>)
 80148ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148ce:	bf00      	nop
 80148d0:	080148e9 	.word	0x080148e9
 80148d4:	0801491d 	.word	0x0801491d
 80148d8:	08014951 	.word	0x08014951
 80148dc:	08014985 	.word	0x08014985
 80148e0:	080149b9 	.word	0x080149b9
 80148e4:	080149ed 	.word	0x080149ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80148ee:	685b      	ldr	r3, [r3, #4]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d00b      	beq.n	801490c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80148fa:	685b      	ldr	r3, [r3, #4]
 80148fc:	687a      	ldr	r2, [r7, #4]
 80148fe:	7c12      	ldrb	r2, [r2, #16]
 8014900:	f107 0108 	add.w	r1, r7, #8
 8014904:	4610      	mov	r0, r2
 8014906:	4798      	blx	r3
 8014908:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801490a:	e091      	b.n	8014a30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801490c:	6839      	ldr	r1, [r7, #0]
 801490e:	6878      	ldr	r0, [r7, #4]
 8014910:	f000 facb 	bl	8014eaa <USBD_CtlError>
            err++;
 8014914:	7afb      	ldrb	r3, [r7, #11]
 8014916:	3301      	adds	r3, #1
 8014918:	72fb      	strb	r3, [r7, #11]
          break;
 801491a:	e089      	b.n	8014a30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014922:	689b      	ldr	r3, [r3, #8]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d00b      	beq.n	8014940 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801492e:	689b      	ldr	r3, [r3, #8]
 8014930:	687a      	ldr	r2, [r7, #4]
 8014932:	7c12      	ldrb	r2, [r2, #16]
 8014934:	f107 0108 	add.w	r1, r7, #8
 8014938:	4610      	mov	r0, r2
 801493a:	4798      	blx	r3
 801493c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801493e:	e077      	b.n	8014a30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014940:	6839      	ldr	r1, [r7, #0]
 8014942:	6878      	ldr	r0, [r7, #4]
 8014944:	f000 fab1 	bl	8014eaa <USBD_CtlError>
            err++;
 8014948:	7afb      	ldrb	r3, [r7, #11]
 801494a:	3301      	adds	r3, #1
 801494c:	72fb      	strb	r3, [r7, #11]
          break;
 801494e:	e06f      	b.n	8014a30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014956:	68db      	ldr	r3, [r3, #12]
 8014958:	2b00      	cmp	r3, #0
 801495a:	d00b      	beq.n	8014974 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014962:	68db      	ldr	r3, [r3, #12]
 8014964:	687a      	ldr	r2, [r7, #4]
 8014966:	7c12      	ldrb	r2, [r2, #16]
 8014968:	f107 0108 	add.w	r1, r7, #8
 801496c:	4610      	mov	r0, r2
 801496e:	4798      	blx	r3
 8014970:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014972:	e05d      	b.n	8014a30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014974:	6839      	ldr	r1, [r7, #0]
 8014976:	6878      	ldr	r0, [r7, #4]
 8014978:	f000 fa97 	bl	8014eaa <USBD_CtlError>
            err++;
 801497c:	7afb      	ldrb	r3, [r7, #11]
 801497e:	3301      	adds	r3, #1
 8014980:	72fb      	strb	r3, [r7, #11]
          break;
 8014982:	e055      	b.n	8014a30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801498a:	691b      	ldr	r3, [r3, #16]
 801498c:	2b00      	cmp	r3, #0
 801498e:	d00b      	beq.n	80149a8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014996:	691b      	ldr	r3, [r3, #16]
 8014998:	687a      	ldr	r2, [r7, #4]
 801499a:	7c12      	ldrb	r2, [r2, #16]
 801499c:	f107 0108 	add.w	r1, r7, #8
 80149a0:	4610      	mov	r0, r2
 80149a2:	4798      	blx	r3
 80149a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80149a6:	e043      	b.n	8014a30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80149a8:	6839      	ldr	r1, [r7, #0]
 80149aa:	6878      	ldr	r0, [r7, #4]
 80149ac:	f000 fa7d 	bl	8014eaa <USBD_CtlError>
            err++;
 80149b0:	7afb      	ldrb	r3, [r7, #11]
 80149b2:	3301      	adds	r3, #1
 80149b4:	72fb      	strb	r3, [r7, #11]
          break;
 80149b6:	e03b      	b.n	8014a30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80149be:	695b      	ldr	r3, [r3, #20]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d00b      	beq.n	80149dc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80149ca:	695b      	ldr	r3, [r3, #20]
 80149cc:	687a      	ldr	r2, [r7, #4]
 80149ce:	7c12      	ldrb	r2, [r2, #16]
 80149d0:	f107 0108 	add.w	r1, r7, #8
 80149d4:	4610      	mov	r0, r2
 80149d6:	4798      	blx	r3
 80149d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80149da:	e029      	b.n	8014a30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80149dc:	6839      	ldr	r1, [r7, #0]
 80149de:	6878      	ldr	r0, [r7, #4]
 80149e0:	f000 fa63 	bl	8014eaa <USBD_CtlError>
            err++;
 80149e4:	7afb      	ldrb	r3, [r7, #11]
 80149e6:	3301      	adds	r3, #1
 80149e8:	72fb      	strb	r3, [r7, #11]
          break;
 80149ea:	e021      	b.n	8014a30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80149f2:	699b      	ldr	r3, [r3, #24]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d00b      	beq.n	8014a10 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80149fe:	699b      	ldr	r3, [r3, #24]
 8014a00:	687a      	ldr	r2, [r7, #4]
 8014a02:	7c12      	ldrb	r2, [r2, #16]
 8014a04:	f107 0108 	add.w	r1, r7, #8
 8014a08:	4610      	mov	r0, r2
 8014a0a:	4798      	blx	r3
 8014a0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014a0e:	e00f      	b.n	8014a30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014a10:	6839      	ldr	r1, [r7, #0]
 8014a12:	6878      	ldr	r0, [r7, #4]
 8014a14:	f000 fa49 	bl	8014eaa <USBD_CtlError>
            err++;
 8014a18:	7afb      	ldrb	r3, [r7, #11]
 8014a1a:	3301      	adds	r3, #1
 8014a1c:	72fb      	strb	r3, [r7, #11]
          break;
 8014a1e:	e007      	b.n	8014a30 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014a20:	6839      	ldr	r1, [r7, #0]
 8014a22:	6878      	ldr	r0, [r7, #4]
 8014a24:	f000 fa41 	bl	8014eaa <USBD_CtlError>
          err++;
 8014a28:	7afb      	ldrb	r3, [r7, #11]
 8014a2a:	3301      	adds	r3, #1
 8014a2c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8014a2e:	bf00      	nop
      }
      break;
 8014a30:	e037      	b.n	8014aa2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	7c1b      	ldrb	r3, [r3, #16]
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d109      	bne.n	8014a4e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a42:	f107 0208 	add.w	r2, r7, #8
 8014a46:	4610      	mov	r0, r2
 8014a48:	4798      	blx	r3
 8014a4a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014a4c:	e029      	b.n	8014aa2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8014a4e:	6839      	ldr	r1, [r7, #0]
 8014a50:	6878      	ldr	r0, [r7, #4]
 8014a52:	f000 fa2a 	bl	8014eaa <USBD_CtlError>
        err++;
 8014a56:	7afb      	ldrb	r3, [r7, #11]
 8014a58:	3301      	adds	r3, #1
 8014a5a:	72fb      	strb	r3, [r7, #11]
      break;
 8014a5c:	e021      	b.n	8014aa2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	7c1b      	ldrb	r3, [r3, #16]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d10d      	bne.n	8014a82 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a6e:	f107 0208 	add.w	r2, r7, #8
 8014a72:	4610      	mov	r0, r2
 8014a74:	4798      	blx	r3
 8014a76:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	3301      	adds	r3, #1
 8014a7c:	2207      	movs	r2, #7
 8014a7e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014a80:	e00f      	b.n	8014aa2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8014a82:	6839      	ldr	r1, [r7, #0]
 8014a84:	6878      	ldr	r0, [r7, #4]
 8014a86:	f000 fa10 	bl	8014eaa <USBD_CtlError>
        err++;
 8014a8a:	7afb      	ldrb	r3, [r7, #11]
 8014a8c:	3301      	adds	r3, #1
 8014a8e:	72fb      	strb	r3, [r7, #11]
      break;
 8014a90:	e007      	b.n	8014aa2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8014a92:	6839      	ldr	r1, [r7, #0]
 8014a94:	6878      	ldr	r0, [r7, #4]
 8014a96:	f000 fa08 	bl	8014eaa <USBD_CtlError>
      err++;
 8014a9a:	7afb      	ldrb	r3, [r7, #11]
 8014a9c:	3301      	adds	r3, #1
 8014a9e:	72fb      	strb	r3, [r7, #11]
      break;
 8014aa0:	bf00      	nop
  }

  if (err != 0U)
 8014aa2:	7afb      	ldrb	r3, [r7, #11]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d11e      	bne.n	8014ae6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8014aa8:	683b      	ldr	r3, [r7, #0]
 8014aaa:	88db      	ldrh	r3, [r3, #6]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d016      	beq.n	8014ade <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8014ab0:	893b      	ldrh	r3, [r7, #8]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d00e      	beq.n	8014ad4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8014ab6:	683b      	ldr	r3, [r7, #0]
 8014ab8:	88da      	ldrh	r2, [r3, #6]
 8014aba:	893b      	ldrh	r3, [r7, #8]
 8014abc:	4293      	cmp	r3, r2
 8014abe:	bf28      	it	cs
 8014ac0:	4613      	movcs	r3, r2
 8014ac2:	b29b      	uxth	r3, r3
 8014ac4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014ac6:	893b      	ldrh	r3, [r7, #8]
 8014ac8:	461a      	mov	r2, r3
 8014aca:	68f9      	ldr	r1, [r7, #12]
 8014acc:	6878      	ldr	r0, [r7, #4]
 8014ace:	f000 fa5d 	bl	8014f8c <USBD_CtlSendData>
 8014ad2:	e009      	b.n	8014ae8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014ad4:	6839      	ldr	r1, [r7, #0]
 8014ad6:	6878      	ldr	r0, [r7, #4]
 8014ad8:	f000 f9e7 	bl	8014eaa <USBD_CtlError>
 8014adc:	e004      	b.n	8014ae8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8014ade:	6878      	ldr	r0, [r7, #4]
 8014ae0:	f000 fa91 	bl	8015006 <USBD_CtlSendStatus>
 8014ae4:	e000      	b.n	8014ae8 <USBD_GetDescriptor+0x2cc>
    return;
 8014ae6:	bf00      	nop
  }
}
 8014ae8:	3710      	adds	r7, #16
 8014aea:	46bd      	mov	sp, r7
 8014aec:	bd80      	pop	{r7, pc}
 8014aee:	bf00      	nop

08014af0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014af0:	b580      	push	{r7, lr}
 8014af2:	b084      	sub	sp, #16
 8014af4:	af00      	add	r7, sp, #0
 8014af6:	6078      	str	r0, [r7, #4]
 8014af8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014afa:	683b      	ldr	r3, [r7, #0]
 8014afc:	889b      	ldrh	r3, [r3, #4]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d131      	bne.n	8014b66 <USBD_SetAddress+0x76>
 8014b02:	683b      	ldr	r3, [r7, #0]
 8014b04:	88db      	ldrh	r3, [r3, #6]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d12d      	bne.n	8014b66 <USBD_SetAddress+0x76>
 8014b0a:	683b      	ldr	r3, [r7, #0]
 8014b0c:	885b      	ldrh	r3, [r3, #2]
 8014b0e:	2b7f      	cmp	r3, #127	; 0x7f
 8014b10:	d829      	bhi.n	8014b66 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014b12:	683b      	ldr	r3, [r7, #0]
 8014b14:	885b      	ldrh	r3, [r3, #2]
 8014b16:	b2db      	uxtb	r3, r3
 8014b18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014b1c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b24:	b2db      	uxtb	r3, r3
 8014b26:	2b03      	cmp	r3, #3
 8014b28:	d104      	bne.n	8014b34 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8014b2a:	6839      	ldr	r1, [r7, #0]
 8014b2c:	6878      	ldr	r0, [r7, #4]
 8014b2e:	f000 f9bc 	bl	8014eaa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014b32:	e01d      	b.n	8014b70 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	7bfa      	ldrb	r2, [r7, #15]
 8014b38:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014b3c:	7bfb      	ldrb	r3, [r7, #15]
 8014b3e:	4619      	mov	r1, r3
 8014b40:	6878      	ldr	r0, [r7, #4]
 8014b42:	f004 fc72 	bl	801942a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014b46:	6878      	ldr	r0, [r7, #4]
 8014b48:	f000 fa5d 	bl	8015006 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014b4c:	7bfb      	ldrb	r3, [r7, #15]
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d004      	beq.n	8014b5c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	2202      	movs	r2, #2
 8014b56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014b5a:	e009      	b.n	8014b70 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	2201      	movs	r2, #1
 8014b60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014b64:	e004      	b.n	8014b70 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014b66:	6839      	ldr	r1, [r7, #0]
 8014b68:	6878      	ldr	r0, [r7, #4]
 8014b6a:	f000 f99e 	bl	8014eaa <USBD_CtlError>
  }
}
 8014b6e:	bf00      	nop
 8014b70:	bf00      	nop
 8014b72:	3710      	adds	r7, #16
 8014b74:	46bd      	mov	sp, r7
 8014b76:	bd80      	pop	{r7, pc}

08014b78 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b78:	b580      	push	{r7, lr}
 8014b7a:	b084      	sub	sp, #16
 8014b7c:	af00      	add	r7, sp, #0
 8014b7e:	6078      	str	r0, [r7, #4]
 8014b80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014b82:	2300      	movs	r3, #0
 8014b84:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014b86:	683b      	ldr	r3, [r7, #0]
 8014b88:	885b      	ldrh	r3, [r3, #2]
 8014b8a:	b2da      	uxtb	r2, r3
 8014b8c:	4b4e      	ldr	r3, [pc, #312]	; (8014cc8 <USBD_SetConfig+0x150>)
 8014b8e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014b90:	4b4d      	ldr	r3, [pc, #308]	; (8014cc8 <USBD_SetConfig+0x150>)
 8014b92:	781b      	ldrb	r3, [r3, #0]
 8014b94:	2b01      	cmp	r3, #1
 8014b96:	d905      	bls.n	8014ba4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014b98:	6839      	ldr	r1, [r7, #0]
 8014b9a:	6878      	ldr	r0, [r7, #4]
 8014b9c:	f000 f985 	bl	8014eaa <USBD_CtlError>
    return USBD_FAIL;
 8014ba0:	2303      	movs	r3, #3
 8014ba2:	e08c      	b.n	8014cbe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014baa:	b2db      	uxtb	r3, r3
 8014bac:	2b02      	cmp	r3, #2
 8014bae:	d002      	beq.n	8014bb6 <USBD_SetConfig+0x3e>
 8014bb0:	2b03      	cmp	r3, #3
 8014bb2:	d029      	beq.n	8014c08 <USBD_SetConfig+0x90>
 8014bb4:	e075      	b.n	8014ca2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014bb6:	4b44      	ldr	r3, [pc, #272]	; (8014cc8 <USBD_SetConfig+0x150>)
 8014bb8:	781b      	ldrb	r3, [r3, #0]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d020      	beq.n	8014c00 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8014bbe:	4b42      	ldr	r3, [pc, #264]	; (8014cc8 <USBD_SetConfig+0x150>)
 8014bc0:	781b      	ldrb	r3, [r3, #0]
 8014bc2:	461a      	mov	r2, r3
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014bc8:	4b3f      	ldr	r3, [pc, #252]	; (8014cc8 <USBD_SetConfig+0x150>)
 8014bca:	781b      	ldrb	r3, [r3, #0]
 8014bcc:	4619      	mov	r1, r3
 8014bce:	6878      	ldr	r0, [r7, #4]
 8014bd0:	f7fe ffe7 	bl	8013ba2 <USBD_SetClassConfig>
 8014bd4:	4603      	mov	r3, r0
 8014bd6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014bd8:	7bfb      	ldrb	r3, [r7, #15]
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d008      	beq.n	8014bf0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8014bde:	6839      	ldr	r1, [r7, #0]
 8014be0:	6878      	ldr	r0, [r7, #4]
 8014be2:	f000 f962 	bl	8014eaa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	2202      	movs	r2, #2
 8014bea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014bee:	e065      	b.n	8014cbc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014bf0:	6878      	ldr	r0, [r7, #4]
 8014bf2:	f000 fa08 	bl	8015006 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	2203      	movs	r2, #3
 8014bfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014bfe:	e05d      	b.n	8014cbc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014c00:	6878      	ldr	r0, [r7, #4]
 8014c02:	f000 fa00 	bl	8015006 <USBD_CtlSendStatus>
      break;
 8014c06:	e059      	b.n	8014cbc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014c08:	4b2f      	ldr	r3, [pc, #188]	; (8014cc8 <USBD_SetConfig+0x150>)
 8014c0a:	781b      	ldrb	r3, [r3, #0]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d112      	bne.n	8014c36 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	2202      	movs	r2, #2
 8014c14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8014c18:	4b2b      	ldr	r3, [pc, #172]	; (8014cc8 <USBD_SetConfig+0x150>)
 8014c1a:	781b      	ldrb	r3, [r3, #0]
 8014c1c:	461a      	mov	r2, r3
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014c22:	4b29      	ldr	r3, [pc, #164]	; (8014cc8 <USBD_SetConfig+0x150>)
 8014c24:	781b      	ldrb	r3, [r3, #0]
 8014c26:	4619      	mov	r1, r3
 8014c28:	6878      	ldr	r0, [r7, #4]
 8014c2a:	f7fe ffd6 	bl	8013bda <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014c2e:	6878      	ldr	r0, [r7, #4]
 8014c30:	f000 f9e9 	bl	8015006 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014c34:	e042      	b.n	8014cbc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8014c36:	4b24      	ldr	r3, [pc, #144]	; (8014cc8 <USBD_SetConfig+0x150>)
 8014c38:	781b      	ldrb	r3, [r3, #0]
 8014c3a:	461a      	mov	r2, r3
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	685b      	ldr	r3, [r3, #4]
 8014c40:	429a      	cmp	r2, r3
 8014c42:	d02a      	beq.n	8014c9a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	685b      	ldr	r3, [r3, #4]
 8014c48:	b2db      	uxtb	r3, r3
 8014c4a:	4619      	mov	r1, r3
 8014c4c:	6878      	ldr	r0, [r7, #4]
 8014c4e:	f7fe ffc4 	bl	8013bda <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014c52:	4b1d      	ldr	r3, [pc, #116]	; (8014cc8 <USBD_SetConfig+0x150>)
 8014c54:	781b      	ldrb	r3, [r3, #0]
 8014c56:	461a      	mov	r2, r3
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014c5c:	4b1a      	ldr	r3, [pc, #104]	; (8014cc8 <USBD_SetConfig+0x150>)
 8014c5e:	781b      	ldrb	r3, [r3, #0]
 8014c60:	4619      	mov	r1, r3
 8014c62:	6878      	ldr	r0, [r7, #4]
 8014c64:	f7fe ff9d 	bl	8013ba2 <USBD_SetClassConfig>
 8014c68:	4603      	mov	r3, r0
 8014c6a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014c6c:	7bfb      	ldrb	r3, [r7, #15]
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d00f      	beq.n	8014c92 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8014c72:	6839      	ldr	r1, [r7, #0]
 8014c74:	6878      	ldr	r0, [r7, #4]
 8014c76:	f000 f918 	bl	8014eaa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	685b      	ldr	r3, [r3, #4]
 8014c7e:	b2db      	uxtb	r3, r3
 8014c80:	4619      	mov	r1, r3
 8014c82:	6878      	ldr	r0, [r7, #4]
 8014c84:	f7fe ffa9 	bl	8013bda <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	2202      	movs	r2, #2
 8014c8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014c90:	e014      	b.n	8014cbc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014c92:	6878      	ldr	r0, [r7, #4]
 8014c94:	f000 f9b7 	bl	8015006 <USBD_CtlSendStatus>
      break;
 8014c98:	e010      	b.n	8014cbc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014c9a:	6878      	ldr	r0, [r7, #4]
 8014c9c:	f000 f9b3 	bl	8015006 <USBD_CtlSendStatus>
      break;
 8014ca0:	e00c      	b.n	8014cbc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8014ca2:	6839      	ldr	r1, [r7, #0]
 8014ca4:	6878      	ldr	r0, [r7, #4]
 8014ca6:	f000 f900 	bl	8014eaa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014caa:	4b07      	ldr	r3, [pc, #28]	; (8014cc8 <USBD_SetConfig+0x150>)
 8014cac:	781b      	ldrb	r3, [r3, #0]
 8014cae:	4619      	mov	r1, r3
 8014cb0:	6878      	ldr	r0, [r7, #4]
 8014cb2:	f7fe ff92 	bl	8013bda <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014cb6:	2303      	movs	r3, #3
 8014cb8:	73fb      	strb	r3, [r7, #15]
      break;
 8014cba:	bf00      	nop
  }

  return ret;
 8014cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8014cbe:	4618      	mov	r0, r3
 8014cc0:	3710      	adds	r7, #16
 8014cc2:	46bd      	mov	sp, r7
 8014cc4:	bd80      	pop	{r7, pc}
 8014cc6:	bf00      	nop
 8014cc8:	200009e8 	.word	0x200009e8

08014ccc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014ccc:	b580      	push	{r7, lr}
 8014cce:	b082      	sub	sp, #8
 8014cd0:	af00      	add	r7, sp, #0
 8014cd2:	6078      	str	r0, [r7, #4]
 8014cd4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014cd6:	683b      	ldr	r3, [r7, #0]
 8014cd8:	88db      	ldrh	r3, [r3, #6]
 8014cda:	2b01      	cmp	r3, #1
 8014cdc:	d004      	beq.n	8014ce8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014cde:	6839      	ldr	r1, [r7, #0]
 8014ce0:	6878      	ldr	r0, [r7, #4]
 8014ce2:	f000 f8e2 	bl	8014eaa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014ce6:	e023      	b.n	8014d30 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014cee:	b2db      	uxtb	r3, r3
 8014cf0:	2b02      	cmp	r3, #2
 8014cf2:	dc02      	bgt.n	8014cfa <USBD_GetConfig+0x2e>
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	dc03      	bgt.n	8014d00 <USBD_GetConfig+0x34>
 8014cf8:	e015      	b.n	8014d26 <USBD_GetConfig+0x5a>
 8014cfa:	2b03      	cmp	r3, #3
 8014cfc:	d00b      	beq.n	8014d16 <USBD_GetConfig+0x4a>
 8014cfe:	e012      	b.n	8014d26 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	2200      	movs	r2, #0
 8014d04:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	3308      	adds	r3, #8
 8014d0a:	2201      	movs	r2, #1
 8014d0c:	4619      	mov	r1, r3
 8014d0e:	6878      	ldr	r0, [r7, #4]
 8014d10:	f000 f93c 	bl	8014f8c <USBD_CtlSendData>
        break;
 8014d14:	e00c      	b.n	8014d30 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	3304      	adds	r3, #4
 8014d1a:	2201      	movs	r2, #1
 8014d1c:	4619      	mov	r1, r3
 8014d1e:	6878      	ldr	r0, [r7, #4]
 8014d20:	f000 f934 	bl	8014f8c <USBD_CtlSendData>
        break;
 8014d24:	e004      	b.n	8014d30 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8014d26:	6839      	ldr	r1, [r7, #0]
 8014d28:	6878      	ldr	r0, [r7, #4]
 8014d2a:	f000 f8be 	bl	8014eaa <USBD_CtlError>
        break;
 8014d2e:	bf00      	nop
}
 8014d30:	bf00      	nop
 8014d32:	3708      	adds	r7, #8
 8014d34:	46bd      	mov	sp, r7
 8014d36:	bd80      	pop	{r7, pc}

08014d38 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014d38:	b580      	push	{r7, lr}
 8014d3a:	b082      	sub	sp, #8
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	6078      	str	r0, [r7, #4]
 8014d40:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014d48:	b2db      	uxtb	r3, r3
 8014d4a:	3b01      	subs	r3, #1
 8014d4c:	2b02      	cmp	r3, #2
 8014d4e:	d81e      	bhi.n	8014d8e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014d50:	683b      	ldr	r3, [r7, #0]
 8014d52:	88db      	ldrh	r3, [r3, #6]
 8014d54:	2b02      	cmp	r3, #2
 8014d56:	d004      	beq.n	8014d62 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014d58:	6839      	ldr	r1, [r7, #0]
 8014d5a:	6878      	ldr	r0, [r7, #4]
 8014d5c:	f000 f8a5 	bl	8014eaa <USBD_CtlError>
        break;
 8014d60:	e01a      	b.n	8014d98 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	2201      	movs	r2, #1
 8014d66:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d005      	beq.n	8014d7e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	68db      	ldr	r3, [r3, #12]
 8014d76:	f043 0202 	orr.w	r2, r3, #2
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	330c      	adds	r3, #12
 8014d82:	2202      	movs	r2, #2
 8014d84:	4619      	mov	r1, r3
 8014d86:	6878      	ldr	r0, [r7, #4]
 8014d88:	f000 f900 	bl	8014f8c <USBD_CtlSendData>
      break;
 8014d8c:	e004      	b.n	8014d98 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014d8e:	6839      	ldr	r1, [r7, #0]
 8014d90:	6878      	ldr	r0, [r7, #4]
 8014d92:	f000 f88a 	bl	8014eaa <USBD_CtlError>
      break;
 8014d96:	bf00      	nop
  }
}
 8014d98:	bf00      	nop
 8014d9a:	3708      	adds	r7, #8
 8014d9c:	46bd      	mov	sp, r7
 8014d9e:	bd80      	pop	{r7, pc}

08014da0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014da0:	b580      	push	{r7, lr}
 8014da2:	b082      	sub	sp, #8
 8014da4:	af00      	add	r7, sp, #0
 8014da6:	6078      	str	r0, [r7, #4]
 8014da8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014daa:	683b      	ldr	r3, [r7, #0]
 8014dac:	885b      	ldrh	r3, [r3, #2]
 8014dae:	2b01      	cmp	r3, #1
 8014db0:	d107      	bne.n	8014dc2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	2201      	movs	r2, #1
 8014db6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014dba:	6878      	ldr	r0, [r7, #4]
 8014dbc:	f000 f923 	bl	8015006 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8014dc0:	e013      	b.n	8014dea <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8014dc2:	683b      	ldr	r3, [r7, #0]
 8014dc4:	885b      	ldrh	r3, [r3, #2]
 8014dc6:	2b02      	cmp	r3, #2
 8014dc8:	d10b      	bne.n	8014de2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8014dca:	683b      	ldr	r3, [r7, #0]
 8014dcc:	889b      	ldrh	r3, [r3, #4]
 8014dce:	0a1b      	lsrs	r3, r3, #8
 8014dd0:	b29b      	uxth	r3, r3
 8014dd2:	b2da      	uxtb	r2, r3
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8014dda:	6878      	ldr	r0, [r7, #4]
 8014ddc:	f000 f913 	bl	8015006 <USBD_CtlSendStatus>
}
 8014de0:	e003      	b.n	8014dea <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8014de2:	6839      	ldr	r1, [r7, #0]
 8014de4:	6878      	ldr	r0, [r7, #4]
 8014de6:	f000 f860 	bl	8014eaa <USBD_CtlError>
}
 8014dea:	bf00      	nop
 8014dec:	3708      	adds	r7, #8
 8014dee:	46bd      	mov	sp, r7
 8014df0:	bd80      	pop	{r7, pc}

08014df2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014df2:	b580      	push	{r7, lr}
 8014df4:	b082      	sub	sp, #8
 8014df6:	af00      	add	r7, sp, #0
 8014df8:	6078      	str	r0, [r7, #4]
 8014dfa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014e02:	b2db      	uxtb	r3, r3
 8014e04:	3b01      	subs	r3, #1
 8014e06:	2b02      	cmp	r3, #2
 8014e08:	d80b      	bhi.n	8014e22 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014e0a:	683b      	ldr	r3, [r7, #0]
 8014e0c:	885b      	ldrh	r3, [r3, #2]
 8014e0e:	2b01      	cmp	r3, #1
 8014e10:	d10c      	bne.n	8014e2c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	2200      	movs	r2, #0
 8014e16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014e1a:	6878      	ldr	r0, [r7, #4]
 8014e1c:	f000 f8f3 	bl	8015006 <USBD_CtlSendStatus>
      }
      break;
 8014e20:	e004      	b.n	8014e2c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014e22:	6839      	ldr	r1, [r7, #0]
 8014e24:	6878      	ldr	r0, [r7, #4]
 8014e26:	f000 f840 	bl	8014eaa <USBD_CtlError>
      break;
 8014e2a:	e000      	b.n	8014e2e <USBD_ClrFeature+0x3c>
      break;
 8014e2c:	bf00      	nop
  }
}
 8014e2e:	bf00      	nop
 8014e30:	3708      	adds	r7, #8
 8014e32:	46bd      	mov	sp, r7
 8014e34:	bd80      	pop	{r7, pc}

08014e36 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014e36:	b580      	push	{r7, lr}
 8014e38:	b084      	sub	sp, #16
 8014e3a:	af00      	add	r7, sp, #0
 8014e3c:	6078      	str	r0, [r7, #4]
 8014e3e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014e40:	683b      	ldr	r3, [r7, #0]
 8014e42:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	781a      	ldrb	r2, [r3, #0]
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	3301      	adds	r3, #1
 8014e50:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	781a      	ldrb	r2, [r3, #0]
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	3301      	adds	r3, #1
 8014e5e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014e60:	68f8      	ldr	r0, [r7, #12]
 8014e62:	f7ff fa41 	bl	80142e8 <SWAPBYTE>
 8014e66:	4603      	mov	r3, r0
 8014e68:	461a      	mov	r2, r3
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	3301      	adds	r3, #1
 8014e72:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	3301      	adds	r3, #1
 8014e78:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014e7a:	68f8      	ldr	r0, [r7, #12]
 8014e7c:	f7ff fa34 	bl	80142e8 <SWAPBYTE>
 8014e80:	4603      	mov	r3, r0
 8014e82:	461a      	mov	r2, r3
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	3301      	adds	r3, #1
 8014e8c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	3301      	adds	r3, #1
 8014e92:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014e94:	68f8      	ldr	r0, [r7, #12]
 8014e96:	f7ff fa27 	bl	80142e8 <SWAPBYTE>
 8014e9a:	4603      	mov	r3, r0
 8014e9c:	461a      	mov	r2, r3
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	80da      	strh	r2, [r3, #6]
}
 8014ea2:	bf00      	nop
 8014ea4:	3710      	adds	r7, #16
 8014ea6:	46bd      	mov	sp, r7
 8014ea8:	bd80      	pop	{r7, pc}

08014eaa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014eaa:	b580      	push	{r7, lr}
 8014eac:	b082      	sub	sp, #8
 8014eae:	af00      	add	r7, sp, #0
 8014eb0:	6078      	str	r0, [r7, #4]
 8014eb2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014eb4:	2180      	movs	r1, #128	; 0x80
 8014eb6:	6878      	ldr	r0, [r7, #4]
 8014eb8:	f004 fa4d 	bl	8019356 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014ebc:	2100      	movs	r1, #0
 8014ebe:	6878      	ldr	r0, [r7, #4]
 8014ec0:	f004 fa49 	bl	8019356 <USBD_LL_StallEP>
}
 8014ec4:	bf00      	nop
 8014ec6:	3708      	adds	r7, #8
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	bd80      	pop	{r7, pc}

08014ecc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014ecc:	b580      	push	{r7, lr}
 8014ece:	b086      	sub	sp, #24
 8014ed0:	af00      	add	r7, sp, #0
 8014ed2:	60f8      	str	r0, [r7, #12]
 8014ed4:	60b9      	str	r1, [r7, #8]
 8014ed6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014ed8:	2300      	movs	r3, #0
 8014eda:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d036      	beq.n	8014f50 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8014ee6:	6938      	ldr	r0, [r7, #16]
 8014ee8:	f000 f836 	bl	8014f58 <USBD_GetLen>
 8014eec:	4603      	mov	r3, r0
 8014eee:	3301      	adds	r3, #1
 8014ef0:	b29b      	uxth	r3, r3
 8014ef2:	005b      	lsls	r3, r3, #1
 8014ef4:	b29a      	uxth	r2, r3
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014efa:	7dfb      	ldrb	r3, [r7, #23]
 8014efc:	68ba      	ldr	r2, [r7, #8]
 8014efe:	4413      	add	r3, r2
 8014f00:	687a      	ldr	r2, [r7, #4]
 8014f02:	7812      	ldrb	r2, [r2, #0]
 8014f04:	701a      	strb	r2, [r3, #0]
  idx++;
 8014f06:	7dfb      	ldrb	r3, [r7, #23]
 8014f08:	3301      	adds	r3, #1
 8014f0a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014f0c:	7dfb      	ldrb	r3, [r7, #23]
 8014f0e:	68ba      	ldr	r2, [r7, #8]
 8014f10:	4413      	add	r3, r2
 8014f12:	2203      	movs	r2, #3
 8014f14:	701a      	strb	r2, [r3, #0]
  idx++;
 8014f16:	7dfb      	ldrb	r3, [r7, #23]
 8014f18:	3301      	adds	r3, #1
 8014f1a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014f1c:	e013      	b.n	8014f46 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8014f1e:	7dfb      	ldrb	r3, [r7, #23]
 8014f20:	68ba      	ldr	r2, [r7, #8]
 8014f22:	4413      	add	r3, r2
 8014f24:	693a      	ldr	r2, [r7, #16]
 8014f26:	7812      	ldrb	r2, [r2, #0]
 8014f28:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014f2a:	693b      	ldr	r3, [r7, #16]
 8014f2c:	3301      	adds	r3, #1
 8014f2e:	613b      	str	r3, [r7, #16]
    idx++;
 8014f30:	7dfb      	ldrb	r3, [r7, #23]
 8014f32:	3301      	adds	r3, #1
 8014f34:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014f36:	7dfb      	ldrb	r3, [r7, #23]
 8014f38:	68ba      	ldr	r2, [r7, #8]
 8014f3a:	4413      	add	r3, r2
 8014f3c:	2200      	movs	r2, #0
 8014f3e:	701a      	strb	r2, [r3, #0]
    idx++;
 8014f40:	7dfb      	ldrb	r3, [r7, #23]
 8014f42:	3301      	adds	r3, #1
 8014f44:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014f46:	693b      	ldr	r3, [r7, #16]
 8014f48:	781b      	ldrb	r3, [r3, #0]
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d1e7      	bne.n	8014f1e <USBD_GetString+0x52>
 8014f4e:	e000      	b.n	8014f52 <USBD_GetString+0x86>
    return;
 8014f50:	bf00      	nop
  }
}
 8014f52:	3718      	adds	r7, #24
 8014f54:	46bd      	mov	sp, r7
 8014f56:	bd80      	pop	{r7, pc}

08014f58 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014f58:	b480      	push	{r7}
 8014f5a:	b085      	sub	sp, #20
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014f60:	2300      	movs	r3, #0
 8014f62:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014f68:	e005      	b.n	8014f76 <USBD_GetLen+0x1e>
  {
    len++;
 8014f6a:	7bfb      	ldrb	r3, [r7, #15]
 8014f6c:	3301      	adds	r3, #1
 8014f6e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014f70:	68bb      	ldr	r3, [r7, #8]
 8014f72:	3301      	adds	r3, #1
 8014f74:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014f76:	68bb      	ldr	r3, [r7, #8]
 8014f78:	781b      	ldrb	r3, [r3, #0]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d1f5      	bne.n	8014f6a <USBD_GetLen+0x12>
  }

  return len;
 8014f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f80:	4618      	mov	r0, r3
 8014f82:	3714      	adds	r7, #20
 8014f84:	46bd      	mov	sp, r7
 8014f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f8a:	4770      	bx	lr

08014f8c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014f8c:	b580      	push	{r7, lr}
 8014f8e:	b084      	sub	sp, #16
 8014f90:	af00      	add	r7, sp, #0
 8014f92:	60f8      	str	r0, [r7, #12]
 8014f94:	60b9      	str	r1, [r7, #8]
 8014f96:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	2202      	movs	r2, #2
 8014f9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	687a      	ldr	r2, [r7, #4]
 8014fa4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	687a      	ldr	r2, [r7, #4]
 8014faa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	68ba      	ldr	r2, [r7, #8]
 8014fb0:	2100      	movs	r1, #0
 8014fb2:	68f8      	ldr	r0, [r7, #12]
 8014fb4:	f004 fa58 	bl	8019468 <USBD_LL_Transmit>

  return USBD_OK;
 8014fb8:	2300      	movs	r3, #0
}
 8014fba:	4618      	mov	r0, r3
 8014fbc:	3710      	adds	r7, #16
 8014fbe:	46bd      	mov	sp, r7
 8014fc0:	bd80      	pop	{r7, pc}

08014fc2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014fc2:	b580      	push	{r7, lr}
 8014fc4:	b084      	sub	sp, #16
 8014fc6:	af00      	add	r7, sp, #0
 8014fc8:	60f8      	str	r0, [r7, #12]
 8014fca:	60b9      	str	r1, [r7, #8]
 8014fcc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	68ba      	ldr	r2, [r7, #8]
 8014fd2:	2100      	movs	r1, #0
 8014fd4:	68f8      	ldr	r0, [r7, #12]
 8014fd6:	f004 fa47 	bl	8019468 <USBD_LL_Transmit>

  return USBD_OK;
 8014fda:	2300      	movs	r3, #0
}
 8014fdc:	4618      	mov	r0, r3
 8014fde:	3710      	adds	r7, #16
 8014fe0:	46bd      	mov	sp, r7
 8014fe2:	bd80      	pop	{r7, pc}

08014fe4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014fe4:	b580      	push	{r7, lr}
 8014fe6:	b084      	sub	sp, #16
 8014fe8:	af00      	add	r7, sp, #0
 8014fea:	60f8      	str	r0, [r7, #12]
 8014fec:	60b9      	str	r1, [r7, #8]
 8014fee:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	68ba      	ldr	r2, [r7, #8]
 8014ff4:	2100      	movs	r1, #0
 8014ff6:	68f8      	ldr	r0, [r7, #12]
 8014ff8:	f004 fa57 	bl	80194aa <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014ffc:	2300      	movs	r3, #0
}
 8014ffe:	4618      	mov	r0, r3
 8015000:	3710      	adds	r7, #16
 8015002:	46bd      	mov	sp, r7
 8015004:	bd80      	pop	{r7, pc}

08015006 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8015006:	b580      	push	{r7, lr}
 8015008:	b082      	sub	sp, #8
 801500a:	af00      	add	r7, sp, #0
 801500c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	2204      	movs	r2, #4
 8015012:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8015016:	2300      	movs	r3, #0
 8015018:	2200      	movs	r2, #0
 801501a:	2100      	movs	r1, #0
 801501c:	6878      	ldr	r0, [r7, #4]
 801501e:	f004 fa23 	bl	8019468 <USBD_LL_Transmit>

  return USBD_OK;
 8015022:	2300      	movs	r3, #0
}
 8015024:	4618      	mov	r0, r3
 8015026:	3708      	adds	r7, #8
 8015028:	46bd      	mov	sp, r7
 801502a:	bd80      	pop	{r7, pc}

0801502c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801502c:	b580      	push	{r7, lr}
 801502e:	b082      	sub	sp, #8
 8015030:	af00      	add	r7, sp, #0
 8015032:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	2205      	movs	r2, #5
 8015038:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801503c:	2300      	movs	r3, #0
 801503e:	2200      	movs	r2, #0
 8015040:	2100      	movs	r1, #0
 8015042:	6878      	ldr	r0, [r7, #4]
 8015044:	f004 fa31 	bl	80194aa <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015048:	2300      	movs	r3, #0
}
 801504a:	4618      	mov	r0, r3
 801504c:	3708      	adds	r7, #8
 801504e:	46bd      	mov	sp, r7
 8015050:	bd80      	pop	{r7, pc}
	...

08015054 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8015054:	b580      	push	{r7, lr}
 8015056:	b084      	sub	sp, #16
 8015058:	af00      	add	r7, sp, #0
 801505a:	4603      	mov	r3, r0
 801505c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801505e:	79fb      	ldrb	r3, [r7, #7]
 8015060:	4a08      	ldr	r2, [pc, #32]	; (8015084 <disk_status+0x30>)
 8015062:	009b      	lsls	r3, r3, #2
 8015064:	4413      	add	r3, r2
 8015066:	685b      	ldr	r3, [r3, #4]
 8015068:	685b      	ldr	r3, [r3, #4]
 801506a:	79fa      	ldrb	r2, [r7, #7]
 801506c:	4905      	ldr	r1, [pc, #20]	; (8015084 <disk_status+0x30>)
 801506e:	440a      	add	r2, r1
 8015070:	7a12      	ldrb	r2, [r2, #8]
 8015072:	4610      	mov	r0, r2
 8015074:	4798      	blx	r3
 8015076:	4603      	mov	r3, r0
 8015078:	73fb      	strb	r3, [r7, #15]
  return stat;
 801507a:	7bfb      	ldrb	r3, [r7, #15]
}
 801507c:	4618      	mov	r0, r3
 801507e:	3710      	adds	r7, #16
 8015080:	46bd      	mov	sp, r7
 8015082:	bd80      	pop	{r7, pc}
 8015084:	20000c14 	.word	0x20000c14

08015088 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8015088:	b580      	push	{r7, lr}
 801508a:	b084      	sub	sp, #16
 801508c:	af00      	add	r7, sp, #0
 801508e:	4603      	mov	r3, r0
 8015090:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8015092:	2300      	movs	r3, #0
 8015094:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8015096:	79fb      	ldrb	r3, [r7, #7]
 8015098:	4a0d      	ldr	r2, [pc, #52]	; (80150d0 <disk_initialize+0x48>)
 801509a:	5cd3      	ldrb	r3, [r2, r3]
 801509c:	2b00      	cmp	r3, #0
 801509e:	d111      	bne.n	80150c4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80150a0:	79fb      	ldrb	r3, [r7, #7]
 80150a2:	4a0b      	ldr	r2, [pc, #44]	; (80150d0 <disk_initialize+0x48>)
 80150a4:	2101      	movs	r1, #1
 80150a6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80150a8:	79fb      	ldrb	r3, [r7, #7]
 80150aa:	4a09      	ldr	r2, [pc, #36]	; (80150d0 <disk_initialize+0x48>)
 80150ac:	009b      	lsls	r3, r3, #2
 80150ae:	4413      	add	r3, r2
 80150b0:	685b      	ldr	r3, [r3, #4]
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	79fa      	ldrb	r2, [r7, #7]
 80150b6:	4906      	ldr	r1, [pc, #24]	; (80150d0 <disk_initialize+0x48>)
 80150b8:	440a      	add	r2, r1
 80150ba:	7a12      	ldrb	r2, [r2, #8]
 80150bc:	4610      	mov	r0, r2
 80150be:	4798      	blx	r3
 80150c0:	4603      	mov	r3, r0
 80150c2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80150c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80150c6:	4618      	mov	r0, r3
 80150c8:	3710      	adds	r7, #16
 80150ca:	46bd      	mov	sp, r7
 80150cc:	bd80      	pop	{r7, pc}
 80150ce:	bf00      	nop
 80150d0:	20000c14 	.word	0x20000c14

080150d4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80150d4:	b590      	push	{r4, r7, lr}
 80150d6:	b087      	sub	sp, #28
 80150d8:	af00      	add	r7, sp, #0
 80150da:	60b9      	str	r1, [r7, #8]
 80150dc:	607a      	str	r2, [r7, #4]
 80150de:	603b      	str	r3, [r7, #0]
 80150e0:	4603      	mov	r3, r0
 80150e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80150e4:	7bfb      	ldrb	r3, [r7, #15]
 80150e6:	4a0a      	ldr	r2, [pc, #40]	; (8015110 <disk_read+0x3c>)
 80150e8:	009b      	lsls	r3, r3, #2
 80150ea:	4413      	add	r3, r2
 80150ec:	685b      	ldr	r3, [r3, #4]
 80150ee:	689c      	ldr	r4, [r3, #8]
 80150f0:	7bfb      	ldrb	r3, [r7, #15]
 80150f2:	4a07      	ldr	r2, [pc, #28]	; (8015110 <disk_read+0x3c>)
 80150f4:	4413      	add	r3, r2
 80150f6:	7a18      	ldrb	r0, [r3, #8]
 80150f8:	683b      	ldr	r3, [r7, #0]
 80150fa:	687a      	ldr	r2, [r7, #4]
 80150fc:	68b9      	ldr	r1, [r7, #8]
 80150fe:	47a0      	blx	r4
 8015100:	4603      	mov	r3, r0
 8015102:	75fb      	strb	r3, [r7, #23]
  return res;
 8015104:	7dfb      	ldrb	r3, [r7, #23]
}
 8015106:	4618      	mov	r0, r3
 8015108:	371c      	adds	r7, #28
 801510a:	46bd      	mov	sp, r7
 801510c:	bd90      	pop	{r4, r7, pc}
 801510e:	bf00      	nop
 8015110:	20000c14 	.word	0x20000c14

08015114 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8015114:	b590      	push	{r4, r7, lr}
 8015116:	b087      	sub	sp, #28
 8015118:	af00      	add	r7, sp, #0
 801511a:	60b9      	str	r1, [r7, #8]
 801511c:	607a      	str	r2, [r7, #4]
 801511e:	603b      	str	r3, [r7, #0]
 8015120:	4603      	mov	r3, r0
 8015122:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8015124:	7bfb      	ldrb	r3, [r7, #15]
 8015126:	4a0a      	ldr	r2, [pc, #40]	; (8015150 <disk_write+0x3c>)
 8015128:	009b      	lsls	r3, r3, #2
 801512a:	4413      	add	r3, r2
 801512c:	685b      	ldr	r3, [r3, #4]
 801512e:	68dc      	ldr	r4, [r3, #12]
 8015130:	7bfb      	ldrb	r3, [r7, #15]
 8015132:	4a07      	ldr	r2, [pc, #28]	; (8015150 <disk_write+0x3c>)
 8015134:	4413      	add	r3, r2
 8015136:	7a18      	ldrb	r0, [r3, #8]
 8015138:	683b      	ldr	r3, [r7, #0]
 801513a:	687a      	ldr	r2, [r7, #4]
 801513c:	68b9      	ldr	r1, [r7, #8]
 801513e:	47a0      	blx	r4
 8015140:	4603      	mov	r3, r0
 8015142:	75fb      	strb	r3, [r7, #23]
  return res;
 8015144:	7dfb      	ldrb	r3, [r7, #23]
}
 8015146:	4618      	mov	r0, r3
 8015148:	371c      	adds	r7, #28
 801514a:	46bd      	mov	sp, r7
 801514c:	bd90      	pop	{r4, r7, pc}
 801514e:	bf00      	nop
 8015150:	20000c14 	.word	0x20000c14

08015154 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8015154:	b580      	push	{r7, lr}
 8015156:	b084      	sub	sp, #16
 8015158:	af00      	add	r7, sp, #0
 801515a:	4603      	mov	r3, r0
 801515c:	603a      	str	r2, [r7, #0]
 801515e:	71fb      	strb	r3, [r7, #7]
 8015160:	460b      	mov	r3, r1
 8015162:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8015164:	79fb      	ldrb	r3, [r7, #7]
 8015166:	4a09      	ldr	r2, [pc, #36]	; (801518c <disk_ioctl+0x38>)
 8015168:	009b      	lsls	r3, r3, #2
 801516a:	4413      	add	r3, r2
 801516c:	685b      	ldr	r3, [r3, #4]
 801516e:	691b      	ldr	r3, [r3, #16]
 8015170:	79fa      	ldrb	r2, [r7, #7]
 8015172:	4906      	ldr	r1, [pc, #24]	; (801518c <disk_ioctl+0x38>)
 8015174:	440a      	add	r2, r1
 8015176:	7a10      	ldrb	r0, [r2, #8]
 8015178:	79b9      	ldrb	r1, [r7, #6]
 801517a:	683a      	ldr	r2, [r7, #0]
 801517c:	4798      	blx	r3
 801517e:	4603      	mov	r3, r0
 8015180:	73fb      	strb	r3, [r7, #15]
  return res;
 8015182:	7bfb      	ldrb	r3, [r7, #15]
}
 8015184:	4618      	mov	r0, r3
 8015186:	3710      	adds	r7, #16
 8015188:	46bd      	mov	sp, r7
 801518a:	bd80      	pop	{r7, pc}
 801518c:	20000c14 	.word	0x20000c14

08015190 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8015190:	b480      	push	{r7}
 8015192:	b085      	sub	sp, #20
 8015194:	af00      	add	r7, sp, #0
 8015196:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	3301      	adds	r3, #1
 801519c:	781b      	ldrb	r3, [r3, #0]
 801519e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80151a0:	89fb      	ldrh	r3, [r7, #14]
 80151a2:	021b      	lsls	r3, r3, #8
 80151a4:	b21a      	sxth	r2, r3
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	781b      	ldrb	r3, [r3, #0]
 80151aa:	b21b      	sxth	r3, r3
 80151ac:	4313      	orrs	r3, r2
 80151ae:	b21b      	sxth	r3, r3
 80151b0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80151b2:	89fb      	ldrh	r3, [r7, #14]
}
 80151b4:	4618      	mov	r0, r3
 80151b6:	3714      	adds	r7, #20
 80151b8:	46bd      	mov	sp, r7
 80151ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151be:	4770      	bx	lr

080151c0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80151c0:	b480      	push	{r7}
 80151c2:	b085      	sub	sp, #20
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	3303      	adds	r3, #3
 80151cc:	781b      	ldrb	r3, [r3, #0]
 80151ce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	021b      	lsls	r3, r3, #8
 80151d4:	687a      	ldr	r2, [r7, #4]
 80151d6:	3202      	adds	r2, #2
 80151d8:	7812      	ldrb	r2, [r2, #0]
 80151da:	4313      	orrs	r3, r2
 80151dc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	021b      	lsls	r3, r3, #8
 80151e2:	687a      	ldr	r2, [r7, #4]
 80151e4:	3201      	adds	r2, #1
 80151e6:	7812      	ldrb	r2, [r2, #0]
 80151e8:	4313      	orrs	r3, r2
 80151ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	021b      	lsls	r3, r3, #8
 80151f0:	687a      	ldr	r2, [r7, #4]
 80151f2:	7812      	ldrb	r2, [r2, #0]
 80151f4:	4313      	orrs	r3, r2
 80151f6:	60fb      	str	r3, [r7, #12]
	return rv;
 80151f8:	68fb      	ldr	r3, [r7, #12]
}
 80151fa:	4618      	mov	r0, r3
 80151fc:	3714      	adds	r7, #20
 80151fe:	46bd      	mov	sp, r7
 8015200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015204:	4770      	bx	lr

08015206 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8015206:	b480      	push	{r7}
 8015208:	b083      	sub	sp, #12
 801520a:	af00      	add	r7, sp, #0
 801520c:	6078      	str	r0, [r7, #4]
 801520e:	460b      	mov	r3, r1
 8015210:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	1c5a      	adds	r2, r3, #1
 8015216:	607a      	str	r2, [r7, #4]
 8015218:	887a      	ldrh	r2, [r7, #2]
 801521a:	b2d2      	uxtb	r2, r2
 801521c:	701a      	strb	r2, [r3, #0]
 801521e:	887b      	ldrh	r3, [r7, #2]
 8015220:	0a1b      	lsrs	r3, r3, #8
 8015222:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	1c5a      	adds	r2, r3, #1
 8015228:	607a      	str	r2, [r7, #4]
 801522a:	887a      	ldrh	r2, [r7, #2]
 801522c:	b2d2      	uxtb	r2, r2
 801522e:	701a      	strb	r2, [r3, #0]
}
 8015230:	bf00      	nop
 8015232:	370c      	adds	r7, #12
 8015234:	46bd      	mov	sp, r7
 8015236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801523a:	4770      	bx	lr

0801523c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801523c:	b480      	push	{r7}
 801523e:	b083      	sub	sp, #12
 8015240:	af00      	add	r7, sp, #0
 8015242:	6078      	str	r0, [r7, #4]
 8015244:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	1c5a      	adds	r2, r3, #1
 801524a:	607a      	str	r2, [r7, #4]
 801524c:	683a      	ldr	r2, [r7, #0]
 801524e:	b2d2      	uxtb	r2, r2
 8015250:	701a      	strb	r2, [r3, #0]
 8015252:	683b      	ldr	r3, [r7, #0]
 8015254:	0a1b      	lsrs	r3, r3, #8
 8015256:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	1c5a      	adds	r2, r3, #1
 801525c:	607a      	str	r2, [r7, #4]
 801525e:	683a      	ldr	r2, [r7, #0]
 8015260:	b2d2      	uxtb	r2, r2
 8015262:	701a      	strb	r2, [r3, #0]
 8015264:	683b      	ldr	r3, [r7, #0]
 8015266:	0a1b      	lsrs	r3, r3, #8
 8015268:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	1c5a      	adds	r2, r3, #1
 801526e:	607a      	str	r2, [r7, #4]
 8015270:	683a      	ldr	r2, [r7, #0]
 8015272:	b2d2      	uxtb	r2, r2
 8015274:	701a      	strb	r2, [r3, #0]
 8015276:	683b      	ldr	r3, [r7, #0]
 8015278:	0a1b      	lsrs	r3, r3, #8
 801527a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	1c5a      	adds	r2, r3, #1
 8015280:	607a      	str	r2, [r7, #4]
 8015282:	683a      	ldr	r2, [r7, #0]
 8015284:	b2d2      	uxtb	r2, r2
 8015286:	701a      	strb	r2, [r3, #0]
}
 8015288:	bf00      	nop
 801528a:	370c      	adds	r7, #12
 801528c:	46bd      	mov	sp, r7
 801528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015292:	4770      	bx	lr

08015294 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8015294:	b480      	push	{r7}
 8015296:	b087      	sub	sp, #28
 8015298:	af00      	add	r7, sp, #0
 801529a:	60f8      	str	r0, [r7, #12]
 801529c:	60b9      	str	r1, [r7, #8]
 801529e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80152a4:	68bb      	ldr	r3, [r7, #8]
 80152a6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d00d      	beq.n	80152ca <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80152ae:	693a      	ldr	r2, [r7, #16]
 80152b0:	1c53      	adds	r3, r2, #1
 80152b2:	613b      	str	r3, [r7, #16]
 80152b4:	697b      	ldr	r3, [r7, #20]
 80152b6:	1c59      	adds	r1, r3, #1
 80152b8:	6179      	str	r1, [r7, #20]
 80152ba:	7812      	ldrb	r2, [r2, #0]
 80152bc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	3b01      	subs	r3, #1
 80152c2:	607b      	str	r3, [r7, #4]
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d1f1      	bne.n	80152ae <mem_cpy+0x1a>
	}
}
 80152ca:	bf00      	nop
 80152cc:	371c      	adds	r7, #28
 80152ce:	46bd      	mov	sp, r7
 80152d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152d4:	4770      	bx	lr

080152d6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80152d6:	b480      	push	{r7}
 80152d8:	b087      	sub	sp, #28
 80152da:	af00      	add	r7, sp, #0
 80152dc:	60f8      	str	r0, [r7, #12]
 80152de:	60b9      	str	r1, [r7, #8]
 80152e0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80152e6:	697b      	ldr	r3, [r7, #20]
 80152e8:	1c5a      	adds	r2, r3, #1
 80152ea:	617a      	str	r2, [r7, #20]
 80152ec:	68ba      	ldr	r2, [r7, #8]
 80152ee:	b2d2      	uxtb	r2, r2
 80152f0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	3b01      	subs	r3, #1
 80152f6:	607b      	str	r3, [r7, #4]
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d1f3      	bne.n	80152e6 <mem_set+0x10>
}
 80152fe:	bf00      	nop
 8015300:	bf00      	nop
 8015302:	371c      	adds	r7, #28
 8015304:	46bd      	mov	sp, r7
 8015306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801530a:	4770      	bx	lr

0801530c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801530c:	b480      	push	{r7}
 801530e:	b089      	sub	sp, #36	; 0x24
 8015310:	af00      	add	r7, sp, #0
 8015312:	60f8      	str	r0, [r7, #12]
 8015314:	60b9      	str	r1, [r7, #8]
 8015316:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	61fb      	str	r3, [r7, #28]
 801531c:	68bb      	ldr	r3, [r7, #8]
 801531e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8015320:	2300      	movs	r3, #0
 8015322:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8015324:	69fb      	ldr	r3, [r7, #28]
 8015326:	1c5a      	adds	r2, r3, #1
 8015328:	61fa      	str	r2, [r7, #28]
 801532a:	781b      	ldrb	r3, [r3, #0]
 801532c:	4619      	mov	r1, r3
 801532e:	69bb      	ldr	r3, [r7, #24]
 8015330:	1c5a      	adds	r2, r3, #1
 8015332:	61ba      	str	r2, [r7, #24]
 8015334:	781b      	ldrb	r3, [r3, #0]
 8015336:	1acb      	subs	r3, r1, r3
 8015338:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	3b01      	subs	r3, #1
 801533e:	607b      	str	r3, [r7, #4]
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	2b00      	cmp	r3, #0
 8015344:	d002      	beq.n	801534c <mem_cmp+0x40>
 8015346:	697b      	ldr	r3, [r7, #20]
 8015348:	2b00      	cmp	r3, #0
 801534a:	d0eb      	beq.n	8015324 <mem_cmp+0x18>

	return r;
 801534c:	697b      	ldr	r3, [r7, #20]
}
 801534e:	4618      	mov	r0, r3
 8015350:	3724      	adds	r7, #36	; 0x24
 8015352:	46bd      	mov	sp, r7
 8015354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015358:	4770      	bx	lr

0801535a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801535a:	b480      	push	{r7}
 801535c:	b083      	sub	sp, #12
 801535e:	af00      	add	r7, sp, #0
 8015360:	6078      	str	r0, [r7, #4]
 8015362:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8015364:	e002      	b.n	801536c <chk_chr+0x12>
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	3301      	adds	r3, #1
 801536a:	607b      	str	r3, [r7, #4]
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	781b      	ldrb	r3, [r3, #0]
 8015370:	2b00      	cmp	r3, #0
 8015372:	d005      	beq.n	8015380 <chk_chr+0x26>
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	781b      	ldrb	r3, [r3, #0]
 8015378:	461a      	mov	r2, r3
 801537a:	683b      	ldr	r3, [r7, #0]
 801537c:	4293      	cmp	r3, r2
 801537e:	d1f2      	bne.n	8015366 <chk_chr+0xc>
	return *str;
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	781b      	ldrb	r3, [r3, #0]
}
 8015384:	4618      	mov	r0, r3
 8015386:	370c      	adds	r7, #12
 8015388:	46bd      	mov	sp, r7
 801538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801538e:	4770      	bx	lr

08015390 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8015390:	b480      	push	{r7}
 8015392:	b085      	sub	sp, #20
 8015394:	af00      	add	r7, sp, #0
 8015396:	6078      	str	r0, [r7, #4]
 8015398:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801539a:	2300      	movs	r3, #0
 801539c:	60bb      	str	r3, [r7, #8]
 801539e:	68bb      	ldr	r3, [r7, #8]
 80153a0:	60fb      	str	r3, [r7, #12]
 80153a2:	e029      	b.n	80153f8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80153a4:	4a27      	ldr	r2, [pc, #156]	; (8015444 <chk_lock+0xb4>)
 80153a6:	68fb      	ldr	r3, [r7, #12]
 80153a8:	011b      	lsls	r3, r3, #4
 80153aa:	4413      	add	r3, r2
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d01d      	beq.n	80153ee <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80153b2:	4a24      	ldr	r2, [pc, #144]	; (8015444 <chk_lock+0xb4>)
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	011b      	lsls	r3, r3, #4
 80153b8:	4413      	add	r3, r2
 80153ba:	681a      	ldr	r2, [r3, #0]
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	429a      	cmp	r2, r3
 80153c2:	d116      	bne.n	80153f2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80153c4:	4a1f      	ldr	r2, [pc, #124]	; (8015444 <chk_lock+0xb4>)
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	011b      	lsls	r3, r3, #4
 80153ca:	4413      	add	r3, r2
 80153cc:	3304      	adds	r3, #4
 80153ce:	681a      	ldr	r2, [r3, #0]
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80153d4:	429a      	cmp	r2, r3
 80153d6:	d10c      	bne.n	80153f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80153d8:	4a1a      	ldr	r2, [pc, #104]	; (8015444 <chk_lock+0xb4>)
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	011b      	lsls	r3, r3, #4
 80153de:	4413      	add	r3, r2
 80153e0:	3308      	adds	r3, #8
 80153e2:	681a      	ldr	r2, [r3, #0]
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80153e8:	429a      	cmp	r2, r3
 80153ea:	d102      	bne.n	80153f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80153ec:	e007      	b.n	80153fe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80153ee:	2301      	movs	r3, #1
 80153f0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	3301      	adds	r3, #1
 80153f6:	60fb      	str	r3, [r7, #12]
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	2b01      	cmp	r3, #1
 80153fc:	d9d2      	bls.n	80153a4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	2b02      	cmp	r3, #2
 8015402:	d109      	bne.n	8015418 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8015404:	68bb      	ldr	r3, [r7, #8]
 8015406:	2b00      	cmp	r3, #0
 8015408:	d102      	bne.n	8015410 <chk_lock+0x80>
 801540a:	683b      	ldr	r3, [r7, #0]
 801540c:	2b02      	cmp	r3, #2
 801540e:	d101      	bne.n	8015414 <chk_lock+0x84>
 8015410:	2300      	movs	r3, #0
 8015412:	e010      	b.n	8015436 <chk_lock+0xa6>
 8015414:	2312      	movs	r3, #18
 8015416:	e00e      	b.n	8015436 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8015418:	683b      	ldr	r3, [r7, #0]
 801541a:	2b00      	cmp	r3, #0
 801541c:	d108      	bne.n	8015430 <chk_lock+0xa0>
 801541e:	4a09      	ldr	r2, [pc, #36]	; (8015444 <chk_lock+0xb4>)
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	011b      	lsls	r3, r3, #4
 8015424:	4413      	add	r3, r2
 8015426:	330c      	adds	r3, #12
 8015428:	881b      	ldrh	r3, [r3, #0]
 801542a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801542e:	d101      	bne.n	8015434 <chk_lock+0xa4>
 8015430:	2310      	movs	r3, #16
 8015432:	e000      	b.n	8015436 <chk_lock+0xa6>
 8015434:	2300      	movs	r3, #0
}
 8015436:	4618      	mov	r0, r3
 8015438:	3714      	adds	r7, #20
 801543a:	46bd      	mov	sp, r7
 801543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015440:	4770      	bx	lr
 8015442:	bf00      	nop
 8015444:	200009f4 	.word	0x200009f4

08015448 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8015448:	b480      	push	{r7}
 801544a:	b083      	sub	sp, #12
 801544c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801544e:	2300      	movs	r3, #0
 8015450:	607b      	str	r3, [r7, #4]
 8015452:	e002      	b.n	801545a <enq_lock+0x12>
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	3301      	adds	r3, #1
 8015458:	607b      	str	r3, [r7, #4]
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	2b01      	cmp	r3, #1
 801545e:	d806      	bhi.n	801546e <enq_lock+0x26>
 8015460:	4a09      	ldr	r2, [pc, #36]	; (8015488 <enq_lock+0x40>)
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	011b      	lsls	r3, r3, #4
 8015466:	4413      	add	r3, r2
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	2b00      	cmp	r3, #0
 801546c:	d1f2      	bne.n	8015454 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	2b02      	cmp	r3, #2
 8015472:	bf14      	ite	ne
 8015474:	2301      	movne	r3, #1
 8015476:	2300      	moveq	r3, #0
 8015478:	b2db      	uxtb	r3, r3
}
 801547a:	4618      	mov	r0, r3
 801547c:	370c      	adds	r7, #12
 801547e:	46bd      	mov	sp, r7
 8015480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015484:	4770      	bx	lr
 8015486:	bf00      	nop
 8015488:	200009f4 	.word	0x200009f4

0801548c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801548c:	b480      	push	{r7}
 801548e:	b085      	sub	sp, #20
 8015490:	af00      	add	r7, sp, #0
 8015492:	6078      	str	r0, [r7, #4]
 8015494:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8015496:	2300      	movs	r3, #0
 8015498:	60fb      	str	r3, [r7, #12]
 801549a:	e01f      	b.n	80154dc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801549c:	4a41      	ldr	r2, [pc, #260]	; (80155a4 <inc_lock+0x118>)
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	011b      	lsls	r3, r3, #4
 80154a2:	4413      	add	r3, r2
 80154a4:	681a      	ldr	r2, [r3, #0]
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	429a      	cmp	r2, r3
 80154ac:	d113      	bne.n	80154d6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80154ae:	4a3d      	ldr	r2, [pc, #244]	; (80155a4 <inc_lock+0x118>)
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	011b      	lsls	r3, r3, #4
 80154b4:	4413      	add	r3, r2
 80154b6:	3304      	adds	r3, #4
 80154b8:	681a      	ldr	r2, [r3, #0]
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80154be:	429a      	cmp	r2, r3
 80154c0:	d109      	bne.n	80154d6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80154c2:	4a38      	ldr	r2, [pc, #224]	; (80155a4 <inc_lock+0x118>)
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	011b      	lsls	r3, r3, #4
 80154c8:	4413      	add	r3, r2
 80154ca:	3308      	adds	r3, #8
 80154cc:	681a      	ldr	r2, [r3, #0]
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80154d2:	429a      	cmp	r2, r3
 80154d4:	d006      	beq.n	80154e4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	3301      	adds	r3, #1
 80154da:	60fb      	str	r3, [r7, #12]
 80154dc:	68fb      	ldr	r3, [r7, #12]
 80154de:	2b01      	cmp	r3, #1
 80154e0:	d9dc      	bls.n	801549c <inc_lock+0x10>
 80154e2:	e000      	b.n	80154e6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80154e4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	2b02      	cmp	r3, #2
 80154ea:	d132      	bne.n	8015552 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80154ec:	2300      	movs	r3, #0
 80154ee:	60fb      	str	r3, [r7, #12]
 80154f0:	e002      	b.n	80154f8 <inc_lock+0x6c>
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	3301      	adds	r3, #1
 80154f6:	60fb      	str	r3, [r7, #12]
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	2b01      	cmp	r3, #1
 80154fc:	d806      	bhi.n	801550c <inc_lock+0x80>
 80154fe:	4a29      	ldr	r2, [pc, #164]	; (80155a4 <inc_lock+0x118>)
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	011b      	lsls	r3, r3, #4
 8015504:	4413      	add	r3, r2
 8015506:	681b      	ldr	r3, [r3, #0]
 8015508:	2b00      	cmp	r3, #0
 801550a:	d1f2      	bne.n	80154f2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	2b02      	cmp	r3, #2
 8015510:	d101      	bne.n	8015516 <inc_lock+0x8a>
 8015512:	2300      	movs	r3, #0
 8015514:	e040      	b.n	8015598 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	681a      	ldr	r2, [r3, #0]
 801551a:	4922      	ldr	r1, [pc, #136]	; (80155a4 <inc_lock+0x118>)
 801551c:	68fb      	ldr	r3, [r7, #12]
 801551e:	011b      	lsls	r3, r3, #4
 8015520:	440b      	add	r3, r1
 8015522:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	689a      	ldr	r2, [r3, #8]
 8015528:	491e      	ldr	r1, [pc, #120]	; (80155a4 <inc_lock+0x118>)
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	011b      	lsls	r3, r3, #4
 801552e:	440b      	add	r3, r1
 8015530:	3304      	adds	r3, #4
 8015532:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	695a      	ldr	r2, [r3, #20]
 8015538:	491a      	ldr	r1, [pc, #104]	; (80155a4 <inc_lock+0x118>)
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	011b      	lsls	r3, r3, #4
 801553e:	440b      	add	r3, r1
 8015540:	3308      	adds	r3, #8
 8015542:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8015544:	4a17      	ldr	r2, [pc, #92]	; (80155a4 <inc_lock+0x118>)
 8015546:	68fb      	ldr	r3, [r7, #12]
 8015548:	011b      	lsls	r3, r3, #4
 801554a:	4413      	add	r3, r2
 801554c:	330c      	adds	r3, #12
 801554e:	2200      	movs	r2, #0
 8015550:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8015552:	683b      	ldr	r3, [r7, #0]
 8015554:	2b00      	cmp	r3, #0
 8015556:	d009      	beq.n	801556c <inc_lock+0xe0>
 8015558:	4a12      	ldr	r2, [pc, #72]	; (80155a4 <inc_lock+0x118>)
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	011b      	lsls	r3, r3, #4
 801555e:	4413      	add	r3, r2
 8015560:	330c      	adds	r3, #12
 8015562:	881b      	ldrh	r3, [r3, #0]
 8015564:	2b00      	cmp	r3, #0
 8015566:	d001      	beq.n	801556c <inc_lock+0xe0>
 8015568:	2300      	movs	r3, #0
 801556a:	e015      	b.n	8015598 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801556c:	683b      	ldr	r3, [r7, #0]
 801556e:	2b00      	cmp	r3, #0
 8015570:	d108      	bne.n	8015584 <inc_lock+0xf8>
 8015572:	4a0c      	ldr	r2, [pc, #48]	; (80155a4 <inc_lock+0x118>)
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	011b      	lsls	r3, r3, #4
 8015578:	4413      	add	r3, r2
 801557a:	330c      	adds	r3, #12
 801557c:	881b      	ldrh	r3, [r3, #0]
 801557e:	3301      	adds	r3, #1
 8015580:	b29a      	uxth	r2, r3
 8015582:	e001      	b.n	8015588 <inc_lock+0xfc>
 8015584:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015588:	4906      	ldr	r1, [pc, #24]	; (80155a4 <inc_lock+0x118>)
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	011b      	lsls	r3, r3, #4
 801558e:	440b      	add	r3, r1
 8015590:	330c      	adds	r3, #12
 8015592:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	3301      	adds	r3, #1
}
 8015598:	4618      	mov	r0, r3
 801559a:	3714      	adds	r7, #20
 801559c:	46bd      	mov	sp, r7
 801559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a2:	4770      	bx	lr
 80155a4:	200009f4 	.word	0x200009f4

080155a8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80155a8:	b480      	push	{r7}
 80155aa:	b085      	sub	sp, #20
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	3b01      	subs	r3, #1
 80155b4:	607b      	str	r3, [r7, #4]
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	2b01      	cmp	r3, #1
 80155ba:	d825      	bhi.n	8015608 <dec_lock+0x60>
		n = Files[i].ctr;
 80155bc:	4a17      	ldr	r2, [pc, #92]	; (801561c <dec_lock+0x74>)
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	011b      	lsls	r3, r3, #4
 80155c2:	4413      	add	r3, r2
 80155c4:	330c      	adds	r3, #12
 80155c6:	881b      	ldrh	r3, [r3, #0]
 80155c8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80155ca:	89fb      	ldrh	r3, [r7, #14]
 80155cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80155d0:	d101      	bne.n	80155d6 <dec_lock+0x2e>
 80155d2:	2300      	movs	r3, #0
 80155d4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80155d6:	89fb      	ldrh	r3, [r7, #14]
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d002      	beq.n	80155e2 <dec_lock+0x3a>
 80155dc:	89fb      	ldrh	r3, [r7, #14]
 80155de:	3b01      	subs	r3, #1
 80155e0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80155e2:	4a0e      	ldr	r2, [pc, #56]	; (801561c <dec_lock+0x74>)
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	011b      	lsls	r3, r3, #4
 80155e8:	4413      	add	r3, r2
 80155ea:	330c      	adds	r3, #12
 80155ec:	89fa      	ldrh	r2, [r7, #14]
 80155ee:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80155f0:	89fb      	ldrh	r3, [r7, #14]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d105      	bne.n	8015602 <dec_lock+0x5a>
 80155f6:	4a09      	ldr	r2, [pc, #36]	; (801561c <dec_lock+0x74>)
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	011b      	lsls	r3, r3, #4
 80155fc:	4413      	add	r3, r2
 80155fe:	2200      	movs	r2, #0
 8015600:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8015602:	2300      	movs	r3, #0
 8015604:	737b      	strb	r3, [r7, #13]
 8015606:	e001      	b.n	801560c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8015608:	2302      	movs	r3, #2
 801560a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801560c:	7b7b      	ldrb	r3, [r7, #13]
}
 801560e:	4618      	mov	r0, r3
 8015610:	3714      	adds	r7, #20
 8015612:	46bd      	mov	sp, r7
 8015614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015618:	4770      	bx	lr
 801561a:	bf00      	nop
 801561c:	200009f4 	.word	0x200009f4

08015620 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8015620:	b480      	push	{r7}
 8015622:	b085      	sub	sp, #20
 8015624:	af00      	add	r7, sp, #0
 8015626:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8015628:	2300      	movs	r3, #0
 801562a:	60fb      	str	r3, [r7, #12]
 801562c:	e010      	b.n	8015650 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801562e:	4a0d      	ldr	r2, [pc, #52]	; (8015664 <clear_lock+0x44>)
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	011b      	lsls	r3, r3, #4
 8015634:	4413      	add	r3, r2
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	687a      	ldr	r2, [r7, #4]
 801563a:	429a      	cmp	r2, r3
 801563c:	d105      	bne.n	801564a <clear_lock+0x2a>
 801563e:	4a09      	ldr	r2, [pc, #36]	; (8015664 <clear_lock+0x44>)
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	011b      	lsls	r3, r3, #4
 8015644:	4413      	add	r3, r2
 8015646:	2200      	movs	r2, #0
 8015648:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	3301      	adds	r3, #1
 801564e:	60fb      	str	r3, [r7, #12]
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	2b01      	cmp	r3, #1
 8015654:	d9eb      	bls.n	801562e <clear_lock+0xe>
	}
}
 8015656:	bf00      	nop
 8015658:	bf00      	nop
 801565a:	3714      	adds	r7, #20
 801565c:	46bd      	mov	sp, r7
 801565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015662:	4770      	bx	lr
 8015664:	200009f4 	.word	0x200009f4

08015668 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8015668:	b580      	push	{r7, lr}
 801566a:	b086      	sub	sp, #24
 801566c:	af00      	add	r7, sp, #0
 801566e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8015670:	2300      	movs	r3, #0
 8015672:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	78db      	ldrb	r3, [r3, #3]
 8015678:	2b00      	cmp	r3, #0
 801567a:	d034      	beq.n	80156e6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015680:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	7858      	ldrb	r0, [r3, #1]
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801568c:	2301      	movs	r3, #1
 801568e:	697a      	ldr	r2, [r7, #20]
 8015690:	f7ff fd40 	bl	8015114 <disk_write>
 8015694:	4603      	mov	r3, r0
 8015696:	2b00      	cmp	r3, #0
 8015698:	d002      	beq.n	80156a0 <sync_window+0x38>
			res = FR_DISK_ERR;
 801569a:	2301      	movs	r3, #1
 801569c:	73fb      	strb	r3, [r7, #15]
 801569e:	e022      	b.n	80156e6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	2200      	movs	r2, #0
 80156a4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156aa:	697a      	ldr	r2, [r7, #20]
 80156ac:	1ad2      	subs	r2, r2, r3
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	69db      	ldr	r3, [r3, #28]
 80156b2:	429a      	cmp	r2, r3
 80156b4:	d217      	bcs.n	80156e6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	789b      	ldrb	r3, [r3, #2]
 80156ba:	613b      	str	r3, [r7, #16]
 80156bc:	e010      	b.n	80156e0 <sync_window+0x78>
					wsect += fs->fsize;
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	69db      	ldr	r3, [r3, #28]
 80156c2:	697a      	ldr	r2, [r7, #20]
 80156c4:	4413      	add	r3, r2
 80156c6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	7858      	ldrb	r0, [r3, #1]
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80156d2:	2301      	movs	r3, #1
 80156d4:	697a      	ldr	r2, [r7, #20]
 80156d6:	f7ff fd1d 	bl	8015114 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80156da:	693b      	ldr	r3, [r7, #16]
 80156dc:	3b01      	subs	r3, #1
 80156de:	613b      	str	r3, [r7, #16]
 80156e0:	693b      	ldr	r3, [r7, #16]
 80156e2:	2b01      	cmp	r3, #1
 80156e4:	d8eb      	bhi.n	80156be <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80156e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80156e8:	4618      	mov	r0, r3
 80156ea:	3718      	adds	r7, #24
 80156ec:	46bd      	mov	sp, r7
 80156ee:	bd80      	pop	{r7, pc}

080156f0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80156f0:	b580      	push	{r7, lr}
 80156f2:	b084      	sub	sp, #16
 80156f4:	af00      	add	r7, sp, #0
 80156f6:	6078      	str	r0, [r7, #4]
 80156f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80156fa:	2300      	movs	r3, #0
 80156fc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015702:	683a      	ldr	r2, [r7, #0]
 8015704:	429a      	cmp	r2, r3
 8015706:	d01b      	beq.n	8015740 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8015708:	6878      	ldr	r0, [r7, #4]
 801570a:	f7ff ffad 	bl	8015668 <sync_window>
 801570e:	4603      	mov	r3, r0
 8015710:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8015712:	7bfb      	ldrb	r3, [r7, #15]
 8015714:	2b00      	cmp	r3, #0
 8015716:	d113      	bne.n	8015740 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	7858      	ldrb	r0, [r3, #1]
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8015722:	2301      	movs	r3, #1
 8015724:	683a      	ldr	r2, [r7, #0]
 8015726:	f7ff fcd5 	bl	80150d4 <disk_read>
 801572a:	4603      	mov	r3, r0
 801572c:	2b00      	cmp	r3, #0
 801572e:	d004      	beq.n	801573a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8015730:	f04f 33ff 	mov.w	r3, #4294967295
 8015734:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8015736:	2301      	movs	r3, #1
 8015738:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	683a      	ldr	r2, [r7, #0]
 801573e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8015740:	7bfb      	ldrb	r3, [r7, #15]
}
 8015742:	4618      	mov	r0, r3
 8015744:	3710      	adds	r7, #16
 8015746:	46bd      	mov	sp, r7
 8015748:	bd80      	pop	{r7, pc}
	...

0801574c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801574c:	b580      	push	{r7, lr}
 801574e:	b084      	sub	sp, #16
 8015750:	af00      	add	r7, sp, #0
 8015752:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8015754:	6878      	ldr	r0, [r7, #4]
 8015756:	f7ff ff87 	bl	8015668 <sync_window>
 801575a:	4603      	mov	r3, r0
 801575c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801575e:	7bfb      	ldrb	r3, [r7, #15]
 8015760:	2b00      	cmp	r3, #0
 8015762:	d158      	bne.n	8015816 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	781b      	ldrb	r3, [r3, #0]
 8015768:	2b03      	cmp	r3, #3
 801576a:	d148      	bne.n	80157fe <sync_fs+0xb2>
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	791b      	ldrb	r3, [r3, #4]
 8015770:	2b01      	cmp	r3, #1
 8015772:	d144      	bne.n	80157fe <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	3334      	adds	r3, #52	; 0x34
 8015778:	f44f 7200 	mov.w	r2, #512	; 0x200
 801577c:	2100      	movs	r1, #0
 801577e:	4618      	mov	r0, r3
 8015780:	f7ff fda9 	bl	80152d6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	3334      	adds	r3, #52	; 0x34
 8015788:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801578c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8015790:	4618      	mov	r0, r3
 8015792:	f7ff fd38 	bl	8015206 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	3334      	adds	r3, #52	; 0x34
 801579a:	4921      	ldr	r1, [pc, #132]	; (8015820 <sync_fs+0xd4>)
 801579c:	4618      	mov	r0, r3
 801579e:	f7ff fd4d 	bl	801523c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	3334      	adds	r3, #52	; 0x34
 80157a6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80157aa:	491e      	ldr	r1, [pc, #120]	; (8015824 <sync_fs+0xd8>)
 80157ac:	4618      	mov	r0, r3
 80157ae:	f7ff fd45 	bl	801523c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	3334      	adds	r3, #52	; 0x34
 80157b6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	695b      	ldr	r3, [r3, #20]
 80157be:	4619      	mov	r1, r3
 80157c0:	4610      	mov	r0, r2
 80157c2:	f7ff fd3b 	bl	801523c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	3334      	adds	r3, #52	; 0x34
 80157ca:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	691b      	ldr	r3, [r3, #16]
 80157d2:	4619      	mov	r1, r3
 80157d4:	4610      	mov	r0, r2
 80157d6:	f7ff fd31 	bl	801523c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	6a1b      	ldr	r3, [r3, #32]
 80157de:	1c5a      	adds	r2, r3, #1
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	7858      	ldrb	r0, [r3, #1]
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80157f2:	2301      	movs	r3, #1
 80157f4:	f7ff fc8e 	bl	8015114 <disk_write>
			fs->fsi_flag = 0;
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	2200      	movs	r2, #0
 80157fc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	785b      	ldrb	r3, [r3, #1]
 8015802:	2200      	movs	r2, #0
 8015804:	2100      	movs	r1, #0
 8015806:	4618      	mov	r0, r3
 8015808:	f7ff fca4 	bl	8015154 <disk_ioctl>
 801580c:	4603      	mov	r3, r0
 801580e:	2b00      	cmp	r3, #0
 8015810:	d001      	beq.n	8015816 <sync_fs+0xca>
 8015812:	2301      	movs	r3, #1
 8015814:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8015816:	7bfb      	ldrb	r3, [r7, #15]
}
 8015818:	4618      	mov	r0, r3
 801581a:	3710      	adds	r7, #16
 801581c:	46bd      	mov	sp, r7
 801581e:	bd80      	pop	{r7, pc}
 8015820:	41615252 	.word	0x41615252
 8015824:	61417272 	.word	0x61417272

08015828 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8015828:	b480      	push	{r7}
 801582a:	b083      	sub	sp, #12
 801582c:	af00      	add	r7, sp, #0
 801582e:	6078      	str	r0, [r7, #4]
 8015830:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8015832:	683b      	ldr	r3, [r7, #0]
 8015834:	3b02      	subs	r3, #2
 8015836:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	699b      	ldr	r3, [r3, #24]
 801583c:	3b02      	subs	r3, #2
 801583e:	683a      	ldr	r2, [r7, #0]
 8015840:	429a      	cmp	r2, r3
 8015842:	d301      	bcc.n	8015848 <clust2sect+0x20>
 8015844:	2300      	movs	r3, #0
 8015846:	e008      	b.n	801585a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	895b      	ldrh	r3, [r3, #10]
 801584c:	461a      	mov	r2, r3
 801584e:	683b      	ldr	r3, [r7, #0]
 8015850:	fb03 f202 	mul.w	r2, r3, r2
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015858:	4413      	add	r3, r2
}
 801585a:	4618      	mov	r0, r3
 801585c:	370c      	adds	r7, #12
 801585e:	46bd      	mov	sp, r7
 8015860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015864:	4770      	bx	lr

08015866 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8015866:	b580      	push	{r7, lr}
 8015868:	b086      	sub	sp, #24
 801586a:	af00      	add	r7, sp, #0
 801586c:	6078      	str	r0, [r7, #4]
 801586e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8015876:	683b      	ldr	r3, [r7, #0]
 8015878:	2b01      	cmp	r3, #1
 801587a:	d904      	bls.n	8015886 <get_fat+0x20>
 801587c:	693b      	ldr	r3, [r7, #16]
 801587e:	699b      	ldr	r3, [r3, #24]
 8015880:	683a      	ldr	r2, [r7, #0]
 8015882:	429a      	cmp	r2, r3
 8015884:	d302      	bcc.n	801588c <get_fat+0x26>
		val = 1;	/* Internal error */
 8015886:	2301      	movs	r3, #1
 8015888:	617b      	str	r3, [r7, #20]
 801588a:	e08f      	b.n	80159ac <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801588c:	f04f 33ff 	mov.w	r3, #4294967295
 8015890:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8015892:	693b      	ldr	r3, [r7, #16]
 8015894:	781b      	ldrb	r3, [r3, #0]
 8015896:	2b03      	cmp	r3, #3
 8015898:	d062      	beq.n	8015960 <get_fat+0xfa>
 801589a:	2b03      	cmp	r3, #3
 801589c:	dc7c      	bgt.n	8015998 <get_fat+0x132>
 801589e:	2b01      	cmp	r3, #1
 80158a0:	d002      	beq.n	80158a8 <get_fat+0x42>
 80158a2:	2b02      	cmp	r3, #2
 80158a4:	d042      	beq.n	801592c <get_fat+0xc6>
 80158a6:	e077      	b.n	8015998 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80158a8:	683b      	ldr	r3, [r7, #0]
 80158aa:	60fb      	str	r3, [r7, #12]
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	085b      	lsrs	r3, r3, #1
 80158b0:	68fa      	ldr	r2, [r7, #12]
 80158b2:	4413      	add	r3, r2
 80158b4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80158b6:	693b      	ldr	r3, [r7, #16]
 80158b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	0a5b      	lsrs	r3, r3, #9
 80158be:	4413      	add	r3, r2
 80158c0:	4619      	mov	r1, r3
 80158c2:	6938      	ldr	r0, [r7, #16]
 80158c4:	f7ff ff14 	bl	80156f0 <move_window>
 80158c8:	4603      	mov	r3, r0
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d167      	bne.n	801599e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	1c5a      	adds	r2, r3, #1
 80158d2:	60fa      	str	r2, [r7, #12]
 80158d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80158d8:	693a      	ldr	r2, [r7, #16]
 80158da:	4413      	add	r3, r2
 80158dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80158e0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80158e2:	693b      	ldr	r3, [r7, #16]
 80158e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80158e6:	68fb      	ldr	r3, [r7, #12]
 80158e8:	0a5b      	lsrs	r3, r3, #9
 80158ea:	4413      	add	r3, r2
 80158ec:	4619      	mov	r1, r3
 80158ee:	6938      	ldr	r0, [r7, #16]
 80158f0:	f7ff fefe 	bl	80156f0 <move_window>
 80158f4:	4603      	mov	r3, r0
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d153      	bne.n	80159a2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015900:	693a      	ldr	r2, [r7, #16]
 8015902:	4413      	add	r3, r2
 8015904:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015908:	021b      	lsls	r3, r3, #8
 801590a:	461a      	mov	r2, r3
 801590c:	68bb      	ldr	r3, [r7, #8]
 801590e:	4313      	orrs	r3, r2
 8015910:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8015912:	683b      	ldr	r3, [r7, #0]
 8015914:	f003 0301 	and.w	r3, r3, #1
 8015918:	2b00      	cmp	r3, #0
 801591a:	d002      	beq.n	8015922 <get_fat+0xbc>
 801591c:	68bb      	ldr	r3, [r7, #8]
 801591e:	091b      	lsrs	r3, r3, #4
 8015920:	e002      	b.n	8015928 <get_fat+0xc2>
 8015922:	68bb      	ldr	r3, [r7, #8]
 8015924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015928:	617b      	str	r3, [r7, #20]
			break;
 801592a:	e03f      	b.n	80159ac <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801592c:	693b      	ldr	r3, [r7, #16]
 801592e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015930:	683b      	ldr	r3, [r7, #0]
 8015932:	0a1b      	lsrs	r3, r3, #8
 8015934:	4413      	add	r3, r2
 8015936:	4619      	mov	r1, r3
 8015938:	6938      	ldr	r0, [r7, #16]
 801593a:	f7ff fed9 	bl	80156f0 <move_window>
 801593e:	4603      	mov	r3, r0
 8015940:	2b00      	cmp	r3, #0
 8015942:	d130      	bne.n	80159a6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8015944:	693b      	ldr	r3, [r7, #16]
 8015946:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801594a:	683b      	ldr	r3, [r7, #0]
 801594c:	005b      	lsls	r3, r3, #1
 801594e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8015952:	4413      	add	r3, r2
 8015954:	4618      	mov	r0, r3
 8015956:	f7ff fc1b 	bl	8015190 <ld_word>
 801595a:	4603      	mov	r3, r0
 801595c:	617b      	str	r3, [r7, #20]
			break;
 801595e:	e025      	b.n	80159ac <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015960:	693b      	ldr	r3, [r7, #16]
 8015962:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015964:	683b      	ldr	r3, [r7, #0]
 8015966:	09db      	lsrs	r3, r3, #7
 8015968:	4413      	add	r3, r2
 801596a:	4619      	mov	r1, r3
 801596c:	6938      	ldr	r0, [r7, #16]
 801596e:	f7ff febf 	bl	80156f0 <move_window>
 8015972:	4603      	mov	r3, r0
 8015974:	2b00      	cmp	r3, #0
 8015976:	d118      	bne.n	80159aa <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8015978:	693b      	ldr	r3, [r7, #16]
 801597a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801597e:	683b      	ldr	r3, [r7, #0]
 8015980:	009b      	lsls	r3, r3, #2
 8015982:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015986:	4413      	add	r3, r2
 8015988:	4618      	mov	r0, r3
 801598a:	f7ff fc19 	bl	80151c0 <ld_dword>
 801598e:	4603      	mov	r3, r0
 8015990:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8015994:	617b      	str	r3, [r7, #20]
			break;
 8015996:	e009      	b.n	80159ac <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8015998:	2301      	movs	r3, #1
 801599a:	617b      	str	r3, [r7, #20]
 801599c:	e006      	b.n	80159ac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801599e:	bf00      	nop
 80159a0:	e004      	b.n	80159ac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80159a2:	bf00      	nop
 80159a4:	e002      	b.n	80159ac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80159a6:	bf00      	nop
 80159a8:	e000      	b.n	80159ac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80159aa:	bf00      	nop
		}
	}

	return val;
 80159ac:	697b      	ldr	r3, [r7, #20]
}
 80159ae:	4618      	mov	r0, r3
 80159b0:	3718      	adds	r7, #24
 80159b2:	46bd      	mov	sp, r7
 80159b4:	bd80      	pop	{r7, pc}

080159b6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80159b6:	b590      	push	{r4, r7, lr}
 80159b8:	b089      	sub	sp, #36	; 0x24
 80159ba:	af00      	add	r7, sp, #0
 80159bc:	60f8      	str	r0, [r7, #12]
 80159be:	60b9      	str	r1, [r7, #8]
 80159c0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80159c2:	2302      	movs	r3, #2
 80159c4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80159c6:	68bb      	ldr	r3, [r7, #8]
 80159c8:	2b01      	cmp	r3, #1
 80159ca:	f240 80d2 	bls.w	8015b72 <put_fat+0x1bc>
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	699b      	ldr	r3, [r3, #24]
 80159d2:	68ba      	ldr	r2, [r7, #8]
 80159d4:	429a      	cmp	r2, r3
 80159d6:	f080 80cc 	bcs.w	8015b72 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	781b      	ldrb	r3, [r3, #0]
 80159de:	2b03      	cmp	r3, #3
 80159e0:	f000 8096 	beq.w	8015b10 <put_fat+0x15a>
 80159e4:	2b03      	cmp	r3, #3
 80159e6:	f300 80cd 	bgt.w	8015b84 <put_fat+0x1ce>
 80159ea:	2b01      	cmp	r3, #1
 80159ec:	d002      	beq.n	80159f4 <put_fat+0x3e>
 80159ee:	2b02      	cmp	r3, #2
 80159f0:	d06e      	beq.n	8015ad0 <put_fat+0x11a>
 80159f2:	e0c7      	b.n	8015b84 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80159f4:	68bb      	ldr	r3, [r7, #8]
 80159f6:	61bb      	str	r3, [r7, #24]
 80159f8:	69bb      	ldr	r3, [r7, #24]
 80159fa:	085b      	lsrs	r3, r3, #1
 80159fc:	69ba      	ldr	r2, [r7, #24]
 80159fe:	4413      	add	r3, r2
 8015a00:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015a02:	68fb      	ldr	r3, [r7, #12]
 8015a04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015a06:	69bb      	ldr	r3, [r7, #24]
 8015a08:	0a5b      	lsrs	r3, r3, #9
 8015a0a:	4413      	add	r3, r2
 8015a0c:	4619      	mov	r1, r3
 8015a0e:	68f8      	ldr	r0, [r7, #12]
 8015a10:	f7ff fe6e 	bl	80156f0 <move_window>
 8015a14:	4603      	mov	r3, r0
 8015a16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015a18:	7ffb      	ldrb	r3, [r7, #31]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	f040 80ab 	bne.w	8015b76 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8015a26:	69bb      	ldr	r3, [r7, #24]
 8015a28:	1c59      	adds	r1, r3, #1
 8015a2a:	61b9      	str	r1, [r7, #24]
 8015a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015a30:	4413      	add	r3, r2
 8015a32:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8015a34:	68bb      	ldr	r3, [r7, #8]
 8015a36:	f003 0301 	and.w	r3, r3, #1
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d00d      	beq.n	8015a5a <put_fat+0xa4>
 8015a3e:	697b      	ldr	r3, [r7, #20]
 8015a40:	781b      	ldrb	r3, [r3, #0]
 8015a42:	b25b      	sxtb	r3, r3
 8015a44:	f003 030f 	and.w	r3, r3, #15
 8015a48:	b25a      	sxtb	r2, r3
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	b2db      	uxtb	r3, r3
 8015a4e:	011b      	lsls	r3, r3, #4
 8015a50:	b25b      	sxtb	r3, r3
 8015a52:	4313      	orrs	r3, r2
 8015a54:	b25b      	sxtb	r3, r3
 8015a56:	b2db      	uxtb	r3, r3
 8015a58:	e001      	b.n	8015a5e <put_fat+0xa8>
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	b2db      	uxtb	r3, r3
 8015a5e:	697a      	ldr	r2, [r7, #20]
 8015a60:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	2201      	movs	r2, #1
 8015a66:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015a6c:	69bb      	ldr	r3, [r7, #24]
 8015a6e:	0a5b      	lsrs	r3, r3, #9
 8015a70:	4413      	add	r3, r2
 8015a72:	4619      	mov	r1, r3
 8015a74:	68f8      	ldr	r0, [r7, #12]
 8015a76:	f7ff fe3b 	bl	80156f0 <move_window>
 8015a7a:	4603      	mov	r3, r0
 8015a7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015a7e:	7ffb      	ldrb	r3, [r7, #31]
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d17a      	bne.n	8015b7a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8015a84:	68fb      	ldr	r3, [r7, #12]
 8015a86:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8015a8a:	69bb      	ldr	r3, [r7, #24]
 8015a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015a90:	4413      	add	r3, r2
 8015a92:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8015a94:	68bb      	ldr	r3, [r7, #8]
 8015a96:	f003 0301 	and.w	r3, r3, #1
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d003      	beq.n	8015aa6 <put_fat+0xf0>
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	091b      	lsrs	r3, r3, #4
 8015aa2:	b2db      	uxtb	r3, r3
 8015aa4:	e00e      	b.n	8015ac4 <put_fat+0x10e>
 8015aa6:	697b      	ldr	r3, [r7, #20]
 8015aa8:	781b      	ldrb	r3, [r3, #0]
 8015aaa:	b25b      	sxtb	r3, r3
 8015aac:	f023 030f 	bic.w	r3, r3, #15
 8015ab0:	b25a      	sxtb	r2, r3
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	0a1b      	lsrs	r3, r3, #8
 8015ab6:	b25b      	sxtb	r3, r3
 8015ab8:	f003 030f 	and.w	r3, r3, #15
 8015abc:	b25b      	sxtb	r3, r3
 8015abe:	4313      	orrs	r3, r2
 8015ac0:	b25b      	sxtb	r3, r3
 8015ac2:	b2db      	uxtb	r3, r3
 8015ac4:	697a      	ldr	r2, [r7, #20]
 8015ac6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8015ac8:	68fb      	ldr	r3, [r7, #12]
 8015aca:	2201      	movs	r2, #1
 8015acc:	70da      	strb	r2, [r3, #3]
			break;
 8015ace:	e059      	b.n	8015b84 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015ad4:	68bb      	ldr	r3, [r7, #8]
 8015ad6:	0a1b      	lsrs	r3, r3, #8
 8015ad8:	4413      	add	r3, r2
 8015ada:	4619      	mov	r1, r3
 8015adc:	68f8      	ldr	r0, [r7, #12]
 8015ade:	f7ff fe07 	bl	80156f0 <move_window>
 8015ae2:	4603      	mov	r3, r0
 8015ae4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015ae6:	7ffb      	ldrb	r3, [r7, #31]
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d148      	bne.n	8015b7e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8015aec:	68fb      	ldr	r3, [r7, #12]
 8015aee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8015af2:	68bb      	ldr	r3, [r7, #8]
 8015af4:	005b      	lsls	r3, r3, #1
 8015af6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8015afa:	4413      	add	r3, r2
 8015afc:	687a      	ldr	r2, [r7, #4]
 8015afe:	b292      	uxth	r2, r2
 8015b00:	4611      	mov	r1, r2
 8015b02:	4618      	mov	r0, r3
 8015b04:	f7ff fb7f 	bl	8015206 <st_word>
			fs->wflag = 1;
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	2201      	movs	r2, #1
 8015b0c:	70da      	strb	r2, [r3, #3]
			break;
 8015b0e:	e039      	b.n	8015b84 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8015b10:	68fb      	ldr	r3, [r7, #12]
 8015b12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015b14:	68bb      	ldr	r3, [r7, #8]
 8015b16:	09db      	lsrs	r3, r3, #7
 8015b18:	4413      	add	r3, r2
 8015b1a:	4619      	mov	r1, r3
 8015b1c:	68f8      	ldr	r0, [r7, #12]
 8015b1e:	f7ff fde7 	bl	80156f0 <move_window>
 8015b22:	4603      	mov	r3, r0
 8015b24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015b26:	7ffb      	ldrb	r3, [r7, #31]
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d12a      	bne.n	8015b82 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8015b38:	68bb      	ldr	r3, [r7, #8]
 8015b3a:	009b      	lsls	r3, r3, #2
 8015b3c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015b40:	4413      	add	r3, r2
 8015b42:	4618      	mov	r0, r3
 8015b44:	f7ff fb3c 	bl	80151c0 <ld_dword>
 8015b48:	4603      	mov	r3, r0
 8015b4a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8015b4e:	4323      	orrs	r3, r4
 8015b50:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8015b58:	68bb      	ldr	r3, [r7, #8]
 8015b5a:	009b      	lsls	r3, r3, #2
 8015b5c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015b60:	4413      	add	r3, r2
 8015b62:	6879      	ldr	r1, [r7, #4]
 8015b64:	4618      	mov	r0, r3
 8015b66:	f7ff fb69 	bl	801523c <st_dword>
			fs->wflag = 1;
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	2201      	movs	r2, #1
 8015b6e:	70da      	strb	r2, [r3, #3]
			break;
 8015b70:	e008      	b.n	8015b84 <put_fat+0x1ce>
		}
	}
 8015b72:	bf00      	nop
 8015b74:	e006      	b.n	8015b84 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8015b76:	bf00      	nop
 8015b78:	e004      	b.n	8015b84 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8015b7a:	bf00      	nop
 8015b7c:	e002      	b.n	8015b84 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8015b7e:	bf00      	nop
 8015b80:	e000      	b.n	8015b84 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8015b82:	bf00      	nop
	return res;
 8015b84:	7ffb      	ldrb	r3, [r7, #31]
}
 8015b86:	4618      	mov	r0, r3
 8015b88:	3724      	adds	r7, #36	; 0x24
 8015b8a:	46bd      	mov	sp, r7
 8015b8c:	bd90      	pop	{r4, r7, pc}

08015b8e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8015b8e:	b580      	push	{r7, lr}
 8015b90:	b088      	sub	sp, #32
 8015b92:	af00      	add	r7, sp, #0
 8015b94:	60f8      	str	r0, [r7, #12]
 8015b96:	60b9      	str	r1, [r7, #8]
 8015b98:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8015b9a:	2300      	movs	r3, #0
 8015b9c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8015ba4:	68bb      	ldr	r3, [r7, #8]
 8015ba6:	2b01      	cmp	r3, #1
 8015ba8:	d904      	bls.n	8015bb4 <remove_chain+0x26>
 8015baa:	69bb      	ldr	r3, [r7, #24]
 8015bac:	699b      	ldr	r3, [r3, #24]
 8015bae:	68ba      	ldr	r2, [r7, #8]
 8015bb0:	429a      	cmp	r2, r3
 8015bb2:	d301      	bcc.n	8015bb8 <remove_chain+0x2a>
 8015bb4:	2302      	movs	r3, #2
 8015bb6:	e04b      	b.n	8015c50 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d00c      	beq.n	8015bd8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8015bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8015bc2:	6879      	ldr	r1, [r7, #4]
 8015bc4:	69b8      	ldr	r0, [r7, #24]
 8015bc6:	f7ff fef6 	bl	80159b6 <put_fat>
 8015bca:	4603      	mov	r3, r0
 8015bcc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8015bce:	7ffb      	ldrb	r3, [r7, #31]
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d001      	beq.n	8015bd8 <remove_chain+0x4a>
 8015bd4:	7ffb      	ldrb	r3, [r7, #31]
 8015bd6:	e03b      	b.n	8015c50 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8015bd8:	68b9      	ldr	r1, [r7, #8]
 8015bda:	68f8      	ldr	r0, [r7, #12]
 8015bdc:	f7ff fe43 	bl	8015866 <get_fat>
 8015be0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8015be2:	697b      	ldr	r3, [r7, #20]
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d031      	beq.n	8015c4c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8015be8:	697b      	ldr	r3, [r7, #20]
 8015bea:	2b01      	cmp	r3, #1
 8015bec:	d101      	bne.n	8015bf2 <remove_chain+0x64>
 8015bee:	2302      	movs	r3, #2
 8015bf0:	e02e      	b.n	8015c50 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8015bf2:	697b      	ldr	r3, [r7, #20]
 8015bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015bf8:	d101      	bne.n	8015bfe <remove_chain+0x70>
 8015bfa:	2301      	movs	r3, #1
 8015bfc:	e028      	b.n	8015c50 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8015bfe:	2200      	movs	r2, #0
 8015c00:	68b9      	ldr	r1, [r7, #8]
 8015c02:	69b8      	ldr	r0, [r7, #24]
 8015c04:	f7ff fed7 	bl	80159b6 <put_fat>
 8015c08:	4603      	mov	r3, r0
 8015c0a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8015c0c:	7ffb      	ldrb	r3, [r7, #31]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d001      	beq.n	8015c16 <remove_chain+0x88>
 8015c12:	7ffb      	ldrb	r3, [r7, #31]
 8015c14:	e01c      	b.n	8015c50 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8015c16:	69bb      	ldr	r3, [r7, #24]
 8015c18:	695a      	ldr	r2, [r3, #20]
 8015c1a:	69bb      	ldr	r3, [r7, #24]
 8015c1c:	699b      	ldr	r3, [r3, #24]
 8015c1e:	3b02      	subs	r3, #2
 8015c20:	429a      	cmp	r2, r3
 8015c22:	d20b      	bcs.n	8015c3c <remove_chain+0xae>
			fs->free_clst++;
 8015c24:	69bb      	ldr	r3, [r7, #24]
 8015c26:	695b      	ldr	r3, [r3, #20]
 8015c28:	1c5a      	adds	r2, r3, #1
 8015c2a:	69bb      	ldr	r3, [r7, #24]
 8015c2c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8015c2e:	69bb      	ldr	r3, [r7, #24]
 8015c30:	791b      	ldrb	r3, [r3, #4]
 8015c32:	f043 0301 	orr.w	r3, r3, #1
 8015c36:	b2da      	uxtb	r2, r3
 8015c38:	69bb      	ldr	r3, [r7, #24]
 8015c3a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8015c3c:	697b      	ldr	r3, [r7, #20]
 8015c3e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8015c40:	69bb      	ldr	r3, [r7, #24]
 8015c42:	699b      	ldr	r3, [r3, #24]
 8015c44:	68ba      	ldr	r2, [r7, #8]
 8015c46:	429a      	cmp	r2, r3
 8015c48:	d3c6      	bcc.n	8015bd8 <remove_chain+0x4a>
 8015c4a:	e000      	b.n	8015c4e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8015c4c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8015c4e:	2300      	movs	r3, #0
}
 8015c50:	4618      	mov	r0, r3
 8015c52:	3720      	adds	r7, #32
 8015c54:	46bd      	mov	sp, r7
 8015c56:	bd80      	pop	{r7, pc}

08015c58 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8015c58:	b580      	push	{r7, lr}
 8015c5a:	b088      	sub	sp, #32
 8015c5c:	af00      	add	r7, sp, #0
 8015c5e:	6078      	str	r0, [r7, #4]
 8015c60:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8015c68:	683b      	ldr	r3, [r7, #0]
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d10d      	bne.n	8015c8a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8015c6e:	693b      	ldr	r3, [r7, #16]
 8015c70:	691b      	ldr	r3, [r3, #16]
 8015c72:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8015c74:	69bb      	ldr	r3, [r7, #24]
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d004      	beq.n	8015c84 <create_chain+0x2c>
 8015c7a:	693b      	ldr	r3, [r7, #16]
 8015c7c:	699b      	ldr	r3, [r3, #24]
 8015c7e:	69ba      	ldr	r2, [r7, #24]
 8015c80:	429a      	cmp	r2, r3
 8015c82:	d31b      	bcc.n	8015cbc <create_chain+0x64>
 8015c84:	2301      	movs	r3, #1
 8015c86:	61bb      	str	r3, [r7, #24]
 8015c88:	e018      	b.n	8015cbc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8015c8a:	6839      	ldr	r1, [r7, #0]
 8015c8c:	6878      	ldr	r0, [r7, #4]
 8015c8e:	f7ff fdea 	bl	8015866 <get_fat>
 8015c92:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	2b01      	cmp	r3, #1
 8015c98:	d801      	bhi.n	8015c9e <create_chain+0x46>
 8015c9a:	2301      	movs	r3, #1
 8015c9c:	e070      	b.n	8015d80 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8015c9e:	68fb      	ldr	r3, [r7, #12]
 8015ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ca4:	d101      	bne.n	8015caa <create_chain+0x52>
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	e06a      	b.n	8015d80 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8015caa:	693b      	ldr	r3, [r7, #16]
 8015cac:	699b      	ldr	r3, [r3, #24]
 8015cae:	68fa      	ldr	r2, [r7, #12]
 8015cb0:	429a      	cmp	r2, r3
 8015cb2:	d201      	bcs.n	8015cb8 <create_chain+0x60>
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	e063      	b.n	8015d80 <create_chain+0x128>
		scl = clst;
 8015cb8:	683b      	ldr	r3, [r7, #0]
 8015cba:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8015cbc:	69bb      	ldr	r3, [r7, #24]
 8015cbe:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8015cc0:	69fb      	ldr	r3, [r7, #28]
 8015cc2:	3301      	adds	r3, #1
 8015cc4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8015cc6:	693b      	ldr	r3, [r7, #16]
 8015cc8:	699b      	ldr	r3, [r3, #24]
 8015cca:	69fa      	ldr	r2, [r7, #28]
 8015ccc:	429a      	cmp	r2, r3
 8015cce:	d307      	bcc.n	8015ce0 <create_chain+0x88>
				ncl = 2;
 8015cd0:	2302      	movs	r3, #2
 8015cd2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8015cd4:	69fa      	ldr	r2, [r7, #28]
 8015cd6:	69bb      	ldr	r3, [r7, #24]
 8015cd8:	429a      	cmp	r2, r3
 8015cda:	d901      	bls.n	8015ce0 <create_chain+0x88>
 8015cdc:	2300      	movs	r3, #0
 8015cde:	e04f      	b.n	8015d80 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8015ce0:	69f9      	ldr	r1, [r7, #28]
 8015ce2:	6878      	ldr	r0, [r7, #4]
 8015ce4:	f7ff fdbf 	bl	8015866 <get_fat>
 8015ce8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d00e      	beq.n	8015d0e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8015cf0:	68fb      	ldr	r3, [r7, #12]
 8015cf2:	2b01      	cmp	r3, #1
 8015cf4:	d003      	beq.n	8015cfe <create_chain+0xa6>
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015cfc:	d101      	bne.n	8015d02 <create_chain+0xaa>
 8015cfe:	68fb      	ldr	r3, [r7, #12]
 8015d00:	e03e      	b.n	8015d80 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8015d02:	69fa      	ldr	r2, [r7, #28]
 8015d04:	69bb      	ldr	r3, [r7, #24]
 8015d06:	429a      	cmp	r2, r3
 8015d08:	d1da      	bne.n	8015cc0 <create_chain+0x68>
 8015d0a:	2300      	movs	r3, #0
 8015d0c:	e038      	b.n	8015d80 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8015d0e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8015d10:	f04f 32ff 	mov.w	r2, #4294967295
 8015d14:	69f9      	ldr	r1, [r7, #28]
 8015d16:	6938      	ldr	r0, [r7, #16]
 8015d18:	f7ff fe4d 	bl	80159b6 <put_fat>
 8015d1c:	4603      	mov	r3, r0
 8015d1e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8015d20:	7dfb      	ldrb	r3, [r7, #23]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d109      	bne.n	8015d3a <create_chain+0xe2>
 8015d26:	683b      	ldr	r3, [r7, #0]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d006      	beq.n	8015d3a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8015d2c:	69fa      	ldr	r2, [r7, #28]
 8015d2e:	6839      	ldr	r1, [r7, #0]
 8015d30:	6938      	ldr	r0, [r7, #16]
 8015d32:	f7ff fe40 	bl	80159b6 <put_fat>
 8015d36:	4603      	mov	r3, r0
 8015d38:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8015d3a:	7dfb      	ldrb	r3, [r7, #23]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d116      	bne.n	8015d6e <create_chain+0x116>
		fs->last_clst = ncl;
 8015d40:	693b      	ldr	r3, [r7, #16]
 8015d42:	69fa      	ldr	r2, [r7, #28]
 8015d44:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8015d46:	693b      	ldr	r3, [r7, #16]
 8015d48:	695a      	ldr	r2, [r3, #20]
 8015d4a:	693b      	ldr	r3, [r7, #16]
 8015d4c:	699b      	ldr	r3, [r3, #24]
 8015d4e:	3b02      	subs	r3, #2
 8015d50:	429a      	cmp	r2, r3
 8015d52:	d804      	bhi.n	8015d5e <create_chain+0x106>
 8015d54:	693b      	ldr	r3, [r7, #16]
 8015d56:	695b      	ldr	r3, [r3, #20]
 8015d58:	1e5a      	subs	r2, r3, #1
 8015d5a:	693b      	ldr	r3, [r7, #16]
 8015d5c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8015d5e:	693b      	ldr	r3, [r7, #16]
 8015d60:	791b      	ldrb	r3, [r3, #4]
 8015d62:	f043 0301 	orr.w	r3, r3, #1
 8015d66:	b2da      	uxtb	r2, r3
 8015d68:	693b      	ldr	r3, [r7, #16]
 8015d6a:	711a      	strb	r2, [r3, #4]
 8015d6c:	e007      	b.n	8015d7e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8015d6e:	7dfb      	ldrb	r3, [r7, #23]
 8015d70:	2b01      	cmp	r3, #1
 8015d72:	d102      	bne.n	8015d7a <create_chain+0x122>
 8015d74:	f04f 33ff 	mov.w	r3, #4294967295
 8015d78:	e000      	b.n	8015d7c <create_chain+0x124>
 8015d7a:	2301      	movs	r3, #1
 8015d7c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8015d7e:	69fb      	ldr	r3, [r7, #28]
}
 8015d80:	4618      	mov	r0, r3
 8015d82:	3720      	adds	r7, #32
 8015d84:	46bd      	mov	sp, r7
 8015d86:	bd80      	pop	{r7, pc}

08015d88 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8015d88:	b480      	push	{r7}
 8015d8a:	b087      	sub	sp, #28
 8015d8c:	af00      	add	r7, sp, #0
 8015d8e:	6078      	str	r0, [r7, #4]
 8015d90:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d9c:	3304      	adds	r3, #4
 8015d9e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8015da0:	683b      	ldr	r3, [r7, #0]
 8015da2:	0a5b      	lsrs	r3, r3, #9
 8015da4:	68fa      	ldr	r2, [r7, #12]
 8015da6:	8952      	ldrh	r2, [r2, #10]
 8015da8:	fbb3 f3f2 	udiv	r3, r3, r2
 8015dac:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015dae:	693b      	ldr	r3, [r7, #16]
 8015db0:	1d1a      	adds	r2, r3, #4
 8015db2:	613a      	str	r2, [r7, #16]
 8015db4:	681b      	ldr	r3, [r3, #0]
 8015db6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8015db8:	68bb      	ldr	r3, [r7, #8]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d101      	bne.n	8015dc2 <clmt_clust+0x3a>
 8015dbe:	2300      	movs	r3, #0
 8015dc0:	e010      	b.n	8015de4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8015dc2:	697a      	ldr	r2, [r7, #20]
 8015dc4:	68bb      	ldr	r3, [r7, #8]
 8015dc6:	429a      	cmp	r2, r3
 8015dc8:	d307      	bcc.n	8015dda <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8015dca:	697a      	ldr	r2, [r7, #20]
 8015dcc:	68bb      	ldr	r3, [r7, #8]
 8015dce:	1ad3      	subs	r3, r2, r3
 8015dd0:	617b      	str	r3, [r7, #20]
 8015dd2:	693b      	ldr	r3, [r7, #16]
 8015dd4:	3304      	adds	r3, #4
 8015dd6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015dd8:	e7e9      	b.n	8015dae <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8015dda:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8015ddc:	693b      	ldr	r3, [r7, #16]
 8015dde:	681a      	ldr	r2, [r3, #0]
 8015de0:	697b      	ldr	r3, [r7, #20]
 8015de2:	4413      	add	r3, r2
}
 8015de4:	4618      	mov	r0, r3
 8015de6:	371c      	adds	r7, #28
 8015de8:	46bd      	mov	sp, r7
 8015dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dee:	4770      	bx	lr

08015df0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8015df0:	b580      	push	{r7, lr}
 8015df2:	b086      	sub	sp, #24
 8015df4:	af00      	add	r7, sp, #0
 8015df6:	6078      	str	r0, [r7, #4]
 8015df8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8015e00:	683b      	ldr	r3, [r7, #0]
 8015e02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015e06:	d204      	bcs.n	8015e12 <dir_sdi+0x22>
 8015e08:	683b      	ldr	r3, [r7, #0]
 8015e0a:	f003 031f 	and.w	r3, r3, #31
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d001      	beq.n	8015e16 <dir_sdi+0x26>
		return FR_INT_ERR;
 8015e12:	2302      	movs	r3, #2
 8015e14:	e063      	b.n	8015ede <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	683a      	ldr	r2, [r7, #0]
 8015e1a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	689b      	ldr	r3, [r3, #8]
 8015e20:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8015e22:	697b      	ldr	r3, [r7, #20]
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d106      	bne.n	8015e36 <dir_sdi+0x46>
 8015e28:	693b      	ldr	r3, [r7, #16]
 8015e2a:	781b      	ldrb	r3, [r3, #0]
 8015e2c:	2b02      	cmp	r3, #2
 8015e2e:	d902      	bls.n	8015e36 <dir_sdi+0x46>
		clst = fs->dirbase;
 8015e30:	693b      	ldr	r3, [r7, #16]
 8015e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015e34:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8015e36:	697b      	ldr	r3, [r7, #20]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d10c      	bne.n	8015e56 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8015e3c:	683b      	ldr	r3, [r7, #0]
 8015e3e:	095b      	lsrs	r3, r3, #5
 8015e40:	693a      	ldr	r2, [r7, #16]
 8015e42:	8912      	ldrh	r2, [r2, #8]
 8015e44:	4293      	cmp	r3, r2
 8015e46:	d301      	bcc.n	8015e4c <dir_sdi+0x5c>
 8015e48:	2302      	movs	r3, #2
 8015e4a:	e048      	b.n	8015ede <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8015e4c:	693b      	ldr	r3, [r7, #16]
 8015e4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	61da      	str	r2, [r3, #28]
 8015e54:	e029      	b.n	8015eaa <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8015e56:	693b      	ldr	r3, [r7, #16]
 8015e58:	895b      	ldrh	r3, [r3, #10]
 8015e5a:	025b      	lsls	r3, r3, #9
 8015e5c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8015e5e:	e019      	b.n	8015e94 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	6979      	ldr	r1, [r7, #20]
 8015e64:	4618      	mov	r0, r3
 8015e66:	f7ff fcfe 	bl	8015866 <get_fat>
 8015e6a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015e6c:	697b      	ldr	r3, [r7, #20]
 8015e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e72:	d101      	bne.n	8015e78 <dir_sdi+0x88>
 8015e74:	2301      	movs	r3, #1
 8015e76:	e032      	b.n	8015ede <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8015e78:	697b      	ldr	r3, [r7, #20]
 8015e7a:	2b01      	cmp	r3, #1
 8015e7c:	d904      	bls.n	8015e88 <dir_sdi+0x98>
 8015e7e:	693b      	ldr	r3, [r7, #16]
 8015e80:	699b      	ldr	r3, [r3, #24]
 8015e82:	697a      	ldr	r2, [r7, #20]
 8015e84:	429a      	cmp	r2, r3
 8015e86:	d301      	bcc.n	8015e8c <dir_sdi+0x9c>
 8015e88:	2302      	movs	r3, #2
 8015e8a:	e028      	b.n	8015ede <dir_sdi+0xee>
			ofs -= csz;
 8015e8c:	683a      	ldr	r2, [r7, #0]
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	1ad3      	subs	r3, r2, r3
 8015e92:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8015e94:	683a      	ldr	r2, [r7, #0]
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	429a      	cmp	r2, r3
 8015e9a:	d2e1      	bcs.n	8015e60 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8015e9c:	6979      	ldr	r1, [r7, #20]
 8015e9e:	6938      	ldr	r0, [r7, #16]
 8015ea0:	f7ff fcc2 	bl	8015828 <clust2sect>
 8015ea4:	4602      	mov	r2, r0
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	697a      	ldr	r2, [r7, #20]
 8015eae:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	69db      	ldr	r3, [r3, #28]
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d101      	bne.n	8015ebc <dir_sdi+0xcc>
 8015eb8:	2302      	movs	r3, #2
 8015eba:	e010      	b.n	8015ede <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	69da      	ldr	r2, [r3, #28]
 8015ec0:	683b      	ldr	r3, [r7, #0]
 8015ec2:	0a5b      	lsrs	r3, r3, #9
 8015ec4:	441a      	add	r2, r3
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8015eca:	693b      	ldr	r3, [r7, #16]
 8015ecc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8015ed0:	683b      	ldr	r3, [r7, #0]
 8015ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015ed6:	441a      	add	r2, r3
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8015edc:	2300      	movs	r3, #0
}
 8015ede:	4618      	mov	r0, r3
 8015ee0:	3718      	adds	r7, #24
 8015ee2:	46bd      	mov	sp, r7
 8015ee4:	bd80      	pop	{r7, pc}

08015ee6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8015ee6:	b580      	push	{r7, lr}
 8015ee8:	b086      	sub	sp, #24
 8015eea:	af00      	add	r7, sp, #0
 8015eec:	6078      	str	r0, [r7, #4]
 8015eee:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	695b      	ldr	r3, [r3, #20]
 8015efa:	3320      	adds	r3, #32
 8015efc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	69db      	ldr	r3, [r3, #28]
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d003      	beq.n	8015f0e <dir_next+0x28>
 8015f06:	68bb      	ldr	r3, [r7, #8]
 8015f08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015f0c:	d301      	bcc.n	8015f12 <dir_next+0x2c>
 8015f0e:	2304      	movs	r3, #4
 8015f10:	e0aa      	b.n	8016068 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8015f12:	68bb      	ldr	r3, [r7, #8]
 8015f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	f040 8098 	bne.w	801604e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	69db      	ldr	r3, [r3, #28]
 8015f22:	1c5a      	adds	r2, r3, #1
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	699b      	ldr	r3, [r3, #24]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d10b      	bne.n	8015f48 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8015f30:	68bb      	ldr	r3, [r7, #8]
 8015f32:	095b      	lsrs	r3, r3, #5
 8015f34:	68fa      	ldr	r2, [r7, #12]
 8015f36:	8912      	ldrh	r2, [r2, #8]
 8015f38:	4293      	cmp	r3, r2
 8015f3a:	f0c0 8088 	bcc.w	801604e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	2200      	movs	r2, #0
 8015f42:	61da      	str	r2, [r3, #28]
 8015f44:	2304      	movs	r3, #4
 8015f46:	e08f      	b.n	8016068 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8015f48:	68bb      	ldr	r3, [r7, #8]
 8015f4a:	0a5b      	lsrs	r3, r3, #9
 8015f4c:	68fa      	ldr	r2, [r7, #12]
 8015f4e:	8952      	ldrh	r2, [r2, #10]
 8015f50:	3a01      	subs	r2, #1
 8015f52:	4013      	ands	r3, r2
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d17a      	bne.n	801604e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8015f58:	687a      	ldr	r2, [r7, #4]
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	699b      	ldr	r3, [r3, #24]
 8015f5e:	4619      	mov	r1, r3
 8015f60:	4610      	mov	r0, r2
 8015f62:	f7ff fc80 	bl	8015866 <get_fat>
 8015f66:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8015f68:	697b      	ldr	r3, [r7, #20]
 8015f6a:	2b01      	cmp	r3, #1
 8015f6c:	d801      	bhi.n	8015f72 <dir_next+0x8c>
 8015f6e:	2302      	movs	r3, #2
 8015f70:	e07a      	b.n	8016068 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8015f72:	697b      	ldr	r3, [r7, #20]
 8015f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f78:	d101      	bne.n	8015f7e <dir_next+0x98>
 8015f7a:	2301      	movs	r3, #1
 8015f7c:	e074      	b.n	8016068 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8015f7e:	68fb      	ldr	r3, [r7, #12]
 8015f80:	699b      	ldr	r3, [r3, #24]
 8015f82:	697a      	ldr	r2, [r7, #20]
 8015f84:	429a      	cmp	r2, r3
 8015f86:	d358      	bcc.n	801603a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8015f88:	683b      	ldr	r3, [r7, #0]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d104      	bne.n	8015f98 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	2200      	movs	r2, #0
 8015f92:	61da      	str	r2, [r3, #28]
 8015f94:	2304      	movs	r3, #4
 8015f96:	e067      	b.n	8016068 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8015f98:	687a      	ldr	r2, [r7, #4]
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	699b      	ldr	r3, [r3, #24]
 8015f9e:	4619      	mov	r1, r3
 8015fa0:	4610      	mov	r0, r2
 8015fa2:	f7ff fe59 	bl	8015c58 <create_chain>
 8015fa6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8015fa8:	697b      	ldr	r3, [r7, #20]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d101      	bne.n	8015fb2 <dir_next+0xcc>
 8015fae:	2307      	movs	r3, #7
 8015fb0:	e05a      	b.n	8016068 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8015fb2:	697b      	ldr	r3, [r7, #20]
 8015fb4:	2b01      	cmp	r3, #1
 8015fb6:	d101      	bne.n	8015fbc <dir_next+0xd6>
 8015fb8:	2302      	movs	r3, #2
 8015fba:	e055      	b.n	8016068 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015fbc:	697b      	ldr	r3, [r7, #20]
 8015fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015fc2:	d101      	bne.n	8015fc8 <dir_next+0xe2>
 8015fc4:	2301      	movs	r3, #1
 8015fc6:	e04f      	b.n	8016068 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8015fc8:	68f8      	ldr	r0, [r7, #12]
 8015fca:	f7ff fb4d 	bl	8015668 <sync_window>
 8015fce:	4603      	mov	r3, r0
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d001      	beq.n	8015fd8 <dir_next+0xf2>
 8015fd4:	2301      	movs	r3, #1
 8015fd6:	e047      	b.n	8016068 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8015fd8:	68fb      	ldr	r3, [r7, #12]
 8015fda:	3334      	adds	r3, #52	; 0x34
 8015fdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015fe0:	2100      	movs	r1, #0
 8015fe2:	4618      	mov	r0, r3
 8015fe4:	f7ff f977 	bl	80152d6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015fe8:	2300      	movs	r3, #0
 8015fea:	613b      	str	r3, [r7, #16]
 8015fec:	6979      	ldr	r1, [r7, #20]
 8015fee:	68f8      	ldr	r0, [r7, #12]
 8015ff0:	f7ff fc1a 	bl	8015828 <clust2sect>
 8015ff4:	4602      	mov	r2, r0
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	631a      	str	r2, [r3, #48]	; 0x30
 8015ffa:	e012      	b.n	8016022 <dir_next+0x13c>
						fs->wflag = 1;
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	2201      	movs	r2, #1
 8016000:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8016002:	68f8      	ldr	r0, [r7, #12]
 8016004:	f7ff fb30 	bl	8015668 <sync_window>
 8016008:	4603      	mov	r3, r0
 801600a:	2b00      	cmp	r3, #0
 801600c:	d001      	beq.n	8016012 <dir_next+0x12c>
 801600e:	2301      	movs	r3, #1
 8016010:	e02a      	b.n	8016068 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8016012:	693b      	ldr	r3, [r7, #16]
 8016014:	3301      	adds	r3, #1
 8016016:	613b      	str	r3, [r7, #16]
 8016018:	68fb      	ldr	r3, [r7, #12]
 801601a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801601c:	1c5a      	adds	r2, r3, #1
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	631a      	str	r2, [r3, #48]	; 0x30
 8016022:	68fb      	ldr	r3, [r7, #12]
 8016024:	895b      	ldrh	r3, [r3, #10]
 8016026:	461a      	mov	r2, r3
 8016028:	693b      	ldr	r3, [r7, #16]
 801602a:	4293      	cmp	r3, r2
 801602c:	d3e6      	bcc.n	8015ffc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801602e:	68fb      	ldr	r3, [r7, #12]
 8016030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016032:	693b      	ldr	r3, [r7, #16]
 8016034:	1ad2      	subs	r2, r2, r3
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	697a      	ldr	r2, [r7, #20]
 801603e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8016040:	6979      	ldr	r1, [r7, #20]
 8016042:	68f8      	ldr	r0, [r7, #12]
 8016044:	f7ff fbf0 	bl	8015828 <clust2sect>
 8016048:	4602      	mov	r2, r0
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	68ba      	ldr	r2, [r7, #8]
 8016052:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8016054:	68fb      	ldr	r3, [r7, #12]
 8016056:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801605a:	68bb      	ldr	r3, [r7, #8]
 801605c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016060:	441a      	add	r2, r3
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8016066:	2300      	movs	r3, #0
}
 8016068:	4618      	mov	r0, r3
 801606a:	3718      	adds	r7, #24
 801606c:	46bd      	mov	sp, r7
 801606e:	bd80      	pop	{r7, pc}

08016070 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8016070:	b580      	push	{r7, lr}
 8016072:	b086      	sub	sp, #24
 8016074:	af00      	add	r7, sp, #0
 8016076:	6078      	str	r0, [r7, #4]
 8016078:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8016080:	2100      	movs	r1, #0
 8016082:	6878      	ldr	r0, [r7, #4]
 8016084:	f7ff feb4 	bl	8015df0 <dir_sdi>
 8016088:	4603      	mov	r3, r0
 801608a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801608c:	7dfb      	ldrb	r3, [r7, #23]
 801608e:	2b00      	cmp	r3, #0
 8016090:	d12b      	bne.n	80160ea <dir_alloc+0x7a>
		n = 0;
 8016092:	2300      	movs	r3, #0
 8016094:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	69db      	ldr	r3, [r3, #28]
 801609a:	4619      	mov	r1, r3
 801609c:	68f8      	ldr	r0, [r7, #12]
 801609e:	f7ff fb27 	bl	80156f0 <move_window>
 80160a2:	4603      	mov	r3, r0
 80160a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80160a6:	7dfb      	ldrb	r3, [r7, #23]
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d11d      	bne.n	80160e8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	6a1b      	ldr	r3, [r3, #32]
 80160b0:	781b      	ldrb	r3, [r3, #0]
 80160b2:	2be5      	cmp	r3, #229	; 0xe5
 80160b4:	d004      	beq.n	80160c0 <dir_alloc+0x50>
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	6a1b      	ldr	r3, [r3, #32]
 80160ba:	781b      	ldrb	r3, [r3, #0]
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d107      	bne.n	80160d0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80160c0:	693b      	ldr	r3, [r7, #16]
 80160c2:	3301      	adds	r3, #1
 80160c4:	613b      	str	r3, [r7, #16]
 80160c6:	693a      	ldr	r2, [r7, #16]
 80160c8:	683b      	ldr	r3, [r7, #0]
 80160ca:	429a      	cmp	r2, r3
 80160cc:	d102      	bne.n	80160d4 <dir_alloc+0x64>
 80160ce:	e00c      	b.n	80160ea <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80160d0:	2300      	movs	r3, #0
 80160d2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80160d4:	2101      	movs	r1, #1
 80160d6:	6878      	ldr	r0, [r7, #4]
 80160d8:	f7ff ff05 	bl	8015ee6 <dir_next>
 80160dc:	4603      	mov	r3, r0
 80160de:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80160e0:	7dfb      	ldrb	r3, [r7, #23]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d0d7      	beq.n	8016096 <dir_alloc+0x26>
 80160e6:	e000      	b.n	80160ea <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80160e8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80160ea:	7dfb      	ldrb	r3, [r7, #23]
 80160ec:	2b04      	cmp	r3, #4
 80160ee:	d101      	bne.n	80160f4 <dir_alloc+0x84>
 80160f0:	2307      	movs	r3, #7
 80160f2:	75fb      	strb	r3, [r7, #23]
	return res;
 80160f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80160f6:	4618      	mov	r0, r3
 80160f8:	3718      	adds	r7, #24
 80160fa:	46bd      	mov	sp, r7
 80160fc:	bd80      	pop	{r7, pc}

080160fe <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80160fe:	b580      	push	{r7, lr}
 8016100:	b084      	sub	sp, #16
 8016102:	af00      	add	r7, sp, #0
 8016104:	6078      	str	r0, [r7, #4]
 8016106:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8016108:	683b      	ldr	r3, [r7, #0]
 801610a:	331a      	adds	r3, #26
 801610c:	4618      	mov	r0, r3
 801610e:	f7ff f83f 	bl	8015190 <ld_word>
 8016112:	4603      	mov	r3, r0
 8016114:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	781b      	ldrb	r3, [r3, #0]
 801611a:	2b03      	cmp	r3, #3
 801611c:	d109      	bne.n	8016132 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801611e:	683b      	ldr	r3, [r7, #0]
 8016120:	3314      	adds	r3, #20
 8016122:	4618      	mov	r0, r3
 8016124:	f7ff f834 	bl	8015190 <ld_word>
 8016128:	4603      	mov	r3, r0
 801612a:	041b      	lsls	r3, r3, #16
 801612c:	68fa      	ldr	r2, [r7, #12]
 801612e:	4313      	orrs	r3, r2
 8016130:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8016132:	68fb      	ldr	r3, [r7, #12]
}
 8016134:	4618      	mov	r0, r3
 8016136:	3710      	adds	r7, #16
 8016138:	46bd      	mov	sp, r7
 801613a:	bd80      	pop	{r7, pc}

0801613c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801613c:	b580      	push	{r7, lr}
 801613e:	b084      	sub	sp, #16
 8016140:	af00      	add	r7, sp, #0
 8016142:	60f8      	str	r0, [r7, #12]
 8016144:	60b9      	str	r1, [r7, #8]
 8016146:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8016148:	68bb      	ldr	r3, [r7, #8]
 801614a:	331a      	adds	r3, #26
 801614c:	687a      	ldr	r2, [r7, #4]
 801614e:	b292      	uxth	r2, r2
 8016150:	4611      	mov	r1, r2
 8016152:	4618      	mov	r0, r3
 8016154:	f7ff f857 	bl	8015206 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	781b      	ldrb	r3, [r3, #0]
 801615c:	2b03      	cmp	r3, #3
 801615e:	d109      	bne.n	8016174 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8016160:	68bb      	ldr	r3, [r7, #8]
 8016162:	f103 0214 	add.w	r2, r3, #20
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	0c1b      	lsrs	r3, r3, #16
 801616a:	b29b      	uxth	r3, r3
 801616c:	4619      	mov	r1, r3
 801616e:	4610      	mov	r0, r2
 8016170:	f7ff f849 	bl	8015206 <st_word>
	}
}
 8016174:	bf00      	nop
 8016176:	3710      	adds	r7, #16
 8016178:	46bd      	mov	sp, r7
 801617a:	bd80      	pop	{r7, pc}

0801617c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801617c:	b590      	push	{r4, r7, lr}
 801617e:	b087      	sub	sp, #28
 8016180:	af00      	add	r7, sp, #0
 8016182:	6078      	str	r0, [r7, #4]
 8016184:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8016186:	683b      	ldr	r3, [r7, #0]
 8016188:	331a      	adds	r3, #26
 801618a:	4618      	mov	r0, r3
 801618c:	f7ff f800 	bl	8015190 <ld_word>
 8016190:	4603      	mov	r3, r0
 8016192:	2b00      	cmp	r3, #0
 8016194:	d001      	beq.n	801619a <cmp_lfn+0x1e>
 8016196:	2300      	movs	r3, #0
 8016198:	e059      	b.n	801624e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801619a:	683b      	ldr	r3, [r7, #0]
 801619c:	781b      	ldrb	r3, [r3, #0]
 801619e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80161a2:	1e5a      	subs	r2, r3, #1
 80161a4:	4613      	mov	r3, r2
 80161a6:	005b      	lsls	r3, r3, #1
 80161a8:	4413      	add	r3, r2
 80161aa:	009b      	lsls	r3, r3, #2
 80161ac:	4413      	add	r3, r2
 80161ae:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80161b0:	2301      	movs	r3, #1
 80161b2:	81fb      	strh	r3, [r7, #14]
 80161b4:	2300      	movs	r3, #0
 80161b6:	613b      	str	r3, [r7, #16]
 80161b8:	e033      	b.n	8016222 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80161ba:	4a27      	ldr	r2, [pc, #156]	; (8016258 <cmp_lfn+0xdc>)
 80161bc:	693b      	ldr	r3, [r7, #16]
 80161be:	4413      	add	r3, r2
 80161c0:	781b      	ldrb	r3, [r3, #0]
 80161c2:	461a      	mov	r2, r3
 80161c4:	683b      	ldr	r3, [r7, #0]
 80161c6:	4413      	add	r3, r2
 80161c8:	4618      	mov	r0, r3
 80161ca:	f7fe ffe1 	bl	8015190 <ld_word>
 80161ce:	4603      	mov	r3, r0
 80161d0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80161d2:	89fb      	ldrh	r3, [r7, #14]
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d01a      	beq.n	801620e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80161d8:	697b      	ldr	r3, [r7, #20]
 80161da:	2bfe      	cmp	r3, #254	; 0xfe
 80161dc:	d812      	bhi.n	8016204 <cmp_lfn+0x88>
 80161de:	89bb      	ldrh	r3, [r7, #12]
 80161e0:	4618      	mov	r0, r3
 80161e2:	f001 fe25 	bl	8017e30 <ff_wtoupper>
 80161e6:	4603      	mov	r3, r0
 80161e8:	461c      	mov	r4, r3
 80161ea:	697b      	ldr	r3, [r7, #20]
 80161ec:	1c5a      	adds	r2, r3, #1
 80161ee:	617a      	str	r2, [r7, #20]
 80161f0:	005b      	lsls	r3, r3, #1
 80161f2:	687a      	ldr	r2, [r7, #4]
 80161f4:	4413      	add	r3, r2
 80161f6:	881b      	ldrh	r3, [r3, #0]
 80161f8:	4618      	mov	r0, r3
 80161fa:	f001 fe19 	bl	8017e30 <ff_wtoupper>
 80161fe:	4603      	mov	r3, r0
 8016200:	429c      	cmp	r4, r3
 8016202:	d001      	beq.n	8016208 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8016204:	2300      	movs	r3, #0
 8016206:	e022      	b.n	801624e <cmp_lfn+0xd2>
			}
			wc = uc;
 8016208:	89bb      	ldrh	r3, [r7, #12]
 801620a:	81fb      	strh	r3, [r7, #14]
 801620c:	e006      	b.n	801621c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801620e:	89bb      	ldrh	r3, [r7, #12]
 8016210:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016214:	4293      	cmp	r3, r2
 8016216:	d001      	beq.n	801621c <cmp_lfn+0xa0>
 8016218:	2300      	movs	r3, #0
 801621a:	e018      	b.n	801624e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801621c:	693b      	ldr	r3, [r7, #16]
 801621e:	3301      	adds	r3, #1
 8016220:	613b      	str	r3, [r7, #16]
 8016222:	693b      	ldr	r3, [r7, #16]
 8016224:	2b0c      	cmp	r3, #12
 8016226:	d9c8      	bls.n	80161ba <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8016228:	683b      	ldr	r3, [r7, #0]
 801622a:	781b      	ldrb	r3, [r3, #0]
 801622c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016230:	2b00      	cmp	r3, #0
 8016232:	d00b      	beq.n	801624c <cmp_lfn+0xd0>
 8016234:	89fb      	ldrh	r3, [r7, #14]
 8016236:	2b00      	cmp	r3, #0
 8016238:	d008      	beq.n	801624c <cmp_lfn+0xd0>
 801623a:	697b      	ldr	r3, [r7, #20]
 801623c:	005b      	lsls	r3, r3, #1
 801623e:	687a      	ldr	r2, [r7, #4]
 8016240:	4413      	add	r3, r2
 8016242:	881b      	ldrh	r3, [r3, #0]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d001      	beq.n	801624c <cmp_lfn+0xd0>
 8016248:	2300      	movs	r3, #0
 801624a:	e000      	b.n	801624e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801624c:	2301      	movs	r3, #1
}
 801624e:	4618      	mov	r0, r3
 8016250:	371c      	adds	r7, #28
 8016252:	46bd      	mov	sp, r7
 8016254:	bd90      	pop	{r4, r7, pc}
 8016256:	bf00      	nop
 8016258:	0801fcc4 	.word	0x0801fcc4

0801625c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801625c:	b580      	push	{r7, lr}
 801625e:	b088      	sub	sp, #32
 8016260:	af00      	add	r7, sp, #0
 8016262:	60f8      	str	r0, [r7, #12]
 8016264:	60b9      	str	r1, [r7, #8]
 8016266:	4611      	mov	r1, r2
 8016268:	461a      	mov	r2, r3
 801626a:	460b      	mov	r3, r1
 801626c:	71fb      	strb	r3, [r7, #7]
 801626e:	4613      	mov	r3, r2
 8016270:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8016272:	68bb      	ldr	r3, [r7, #8]
 8016274:	330d      	adds	r3, #13
 8016276:	79ba      	ldrb	r2, [r7, #6]
 8016278:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801627a:	68bb      	ldr	r3, [r7, #8]
 801627c:	330b      	adds	r3, #11
 801627e:	220f      	movs	r2, #15
 8016280:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8016282:	68bb      	ldr	r3, [r7, #8]
 8016284:	330c      	adds	r3, #12
 8016286:	2200      	movs	r2, #0
 8016288:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801628a:	68bb      	ldr	r3, [r7, #8]
 801628c:	331a      	adds	r3, #26
 801628e:	2100      	movs	r1, #0
 8016290:	4618      	mov	r0, r3
 8016292:	f7fe ffb8 	bl	8015206 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8016296:	79fb      	ldrb	r3, [r7, #7]
 8016298:	1e5a      	subs	r2, r3, #1
 801629a:	4613      	mov	r3, r2
 801629c:	005b      	lsls	r3, r3, #1
 801629e:	4413      	add	r3, r2
 80162a0:	009b      	lsls	r3, r3, #2
 80162a2:	4413      	add	r3, r2
 80162a4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80162a6:	2300      	movs	r3, #0
 80162a8:	82fb      	strh	r3, [r7, #22]
 80162aa:	2300      	movs	r3, #0
 80162ac:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80162ae:	8afb      	ldrh	r3, [r7, #22]
 80162b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80162b4:	4293      	cmp	r3, r2
 80162b6:	d007      	beq.n	80162c8 <put_lfn+0x6c>
 80162b8:	69fb      	ldr	r3, [r7, #28]
 80162ba:	1c5a      	adds	r2, r3, #1
 80162bc:	61fa      	str	r2, [r7, #28]
 80162be:	005b      	lsls	r3, r3, #1
 80162c0:	68fa      	ldr	r2, [r7, #12]
 80162c2:	4413      	add	r3, r2
 80162c4:	881b      	ldrh	r3, [r3, #0]
 80162c6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80162c8:	4a17      	ldr	r2, [pc, #92]	; (8016328 <put_lfn+0xcc>)
 80162ca:	69bb      	ldr	r3, [r7, #24]
 80162cc:	4413      	add	r3, r2
 80162ce:	781b      	ldrb	r3, [r3, #0]
 80162d0:	461a      	mov	r2, r3
 80162d2:	68bb      	ldr	r3, [r7, #8]
 80162d4:	4413      	add	r3, r2
 80162d6:	8afa      	ldrh	r2, [r7, #22]
 80162d8:	4611      	mov	r1, r2
 80162da:	4618      	mov	r0, r3
 80162dc:	f7fe ff93 	bl	8015206 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80162e0:	8afb      	ldrh	r3, [r7, #22]
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d102      	bne.n	80162ec <put_lfn+0x90>
 80162e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80162ea:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80162ec:	69bb      	ldr	r3, [r7, #24]
 80162ee:	3301      	adds	r3, #1
 80162f0:	61bb      	str	r3, [r7, #24]
 80162f2:	69bb      	ldr	r3, [r7, #24]
 80162f4:	2b0c      	cmp	r3, #12
 80162f6:	d9da      	bls.n	80162ae <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80162f8:	8afb      	ldrh	r3, [r7, #22]
 80162fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80162fe:	4293      	cmp	r3, r2
 8016300:	d006      	beq.n	8016310 <put_lfn+0xb4>
 8016302:	69fb      	ldr	r3, [r7, #28]
 8016304:	005b      	lsls	r3, r3, #1
 8016306:	68fa      	ldr	r2, [r7, #12]
 8016308:	4413      	add	r3, r2
 801630a:	881b      	ldrh	r3, [r3, #0]
 801630c:	2b00      	cmp	r3, #0
 801630e:	d103      	bne.n	8016318 <put_lfn+0xbc>
 8016310:	79fb      	ldrb	r3, [r7, #7]
 8016312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016316:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8016318:	68bb      	ldr	r3, [r7, #8]
 801631a:	79fa      	ldrb	r2, [r7, #7]
 801631c:	701a      	strb	r2, [r3, #0]
}
 801631e:	bf00      	nop
 8016320:	3720      	adds	r7, #32
 8016322:	46bd      	mov	sp, r7
 8016324:	bd80      	pop	{r7, pc}
 8016326:	bf00      	nop
 8016328:	0801fcc4 	.word	0x0801fcc4

0801632c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801632c:	b580      	push	{r7, lr}
 801632e:	b08c      	sub	sp, #48	; 0x30
 8016330:	af00      	add	r7, sp, #0
 8016332:	60f8      	str	r0, [r7, #12]
 8016334:	60b9      	str	r1, [r7, #8]
 8016336:	607a      	str	r2, [r7, #4]
 8016338:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801633a:	220b      	movs	r2, #11
 801633c:	68b9      	ldr	r1, [r7, #8]
 801633e:	68f8      	ldr	r0, [r7, #12]
 8016340:	f7fe ffa8 	bl	8015294 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8016344:	683b      	ldr	r3, [r7, #0]
 8016346:	2b05      	cmp	r3, #5
 8016348:	d92b      	bls.n	80163a2 <gen_numname+0x76>
		sr = seq;
 801634a:	683b      	ldr	r3, [r7, #0]
 801634c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801634e:	e022      	b.n	8016396 <gen_numname+0x6a>
			wc = *lfn++;
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	1c9a      	adds	r2, r3, #2
 8016354:	607a      	str	r2, [r7, #4]
 8016356:	881b      	ldrh	r3, [r3, #0]
 8016358:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 801635a:	2300      	movs	r3, #0
 801635c:	62bb      	str	r3, [r7, #40]	; 0x28
 801635e:	e017      	b.n	8016390 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8016360:	69fb      	ldr	r3, [r7, #28]
 8016362:	005a      	lsls	r2, r3, #1
 8016364:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016366:	f003 0301 	and.w	r3, r3, #1
 801636a:	4413      	add	r3, r2
 801636c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801636e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016370:	085b      	lsrs	r3, r3, #1
 8016372:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8016374:	69fb      	ldr	r3, [r7, #28]
 8016376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801637a:	2b00      	cmp	r3, #0
 801637c:	d005      	beq.n	801638a <gen_numname+0x5e>
 801637e:	69fb      	ldr	r3, [r7, #28]
 8016380:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8016384:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8016388:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801638a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801638c:	3301      	adds	r3, #1
 801638e:	62bb      	str	r3, [r7, #40]	; 0x28
 8016390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016392:	2b0f      	cmp	r3, #15
 8016394:	d9e4      	bls.n	8016360 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	881b      	ldrh	r3, [r3, #0]
 801639a:	2b00      	cmp	r3, #0
 801639c:	d1d8      	bne.n	8016350 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801639e:	69fb      	ldr	r3, [r7, #28]
 80163a0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80163a2:	2307      	movs	r3, #7
 80163a4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80163a6:	683b      	ldr	r3, [r7, #0]
 80163a8:	b2db      	uxtb	r3, r3
 80163aa:	f003 030f 	and.w	r3, r3, #15
 80163ae:	b2db      	uxtb	r3, r3
 80163b0:	3330      	adds	r3, #48	; 0x30
 80163b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80163b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80163ba:	2b39      	cmp	r3, #57	; 0x39
 80163bc:	d904      	bls.n	80163c8 <gen_numname+0x9c>
 80163be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80163c2:	3307      	adds	r3, #7
 80163c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80163c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163ca:	1e5a      	subs	r2, r3, #1
 80163cc:	62ba      	str	r2, [r7, #40]	; 0x28
 80163ce:	3330      	adds	r3, #48	; 0x30
 80163d0:	443b      	add	r3, r7
 80163d2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80163d6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80163da:	683b      	ldr	r3, [r7, #0]
 80163dc:	091b      	lsrs	r3, r3, #4
 80163de:	603b      	str	r3, [r7, #0]
	} while (seq);
 80163e0:	683b      	ldr	r3, [r7, #0]
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d1df      	bne.n	80163a6 <gen_numname+0x7a>
	ns[i] = '~';
 80163e6:	f107 0214 	add.w	r2, r7, #20
 80163ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163ec:	4413      	add	r3, r2
 80163ee:	227e      	movs	r2, #126	; 0x7e
 80163f0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80163f2:	2300      	movs	r3, #0
 80163f4:	627b      	str	r3, [r7, #36]	; 0x24
 80163f6:	e002      	b.n	80163fe <gen_numname+0xd2>
 80163f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163fa:	3301      	adds	r3, #1
 80163fc:	627b      	str	r3, [r7, #36]	; 0x24
 80163fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016402:	429a      	cmp	r2, r3
 8016404:	d205      	bcs.n	8016412 <gen_numname+0xe6>
 8016406:	68fa      	ldr	r2, [r7, #12]
 8016408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801640a:	4413      	add	r3, r2
 801640c:	781b      	ldrb	r3, [r3, #0]
 801640e:	2b20      	cmp	r3, #32
 8016410:	d1f2      	bne.n	80163f8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8016412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016414:	2b07      	cmp	r3, #7
 8016416:	d807      	bhi.n	8016428 <gen_numname+0xfc>
 8016418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801641a:	1c5a      	adds	r2, r3, #1
 801641c:	62ba      	str	r2, [r7, #40]	; 0x28
 801641e:	3330      	adds	r3, #48	; 0x30
 8016420:	443b      	add	r3, r7
 8016422:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8016426:	e000      	b.n	801642a <gen_numname+0xfe>
 8016428:	2120      	movs	r1, #32
 801642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801642c:	1c5a      	adds	r2, r3, #1
 801642e:	627a      	str	r2, [r7, #36]	; 0x24
 8016430:	68fa      	ldr	r2, [r7, #12]
 8016432:	4413      	add	r3, r2
 8016434:	460a      	mov	r2, r1
 8016436:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8016438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801643a:	2b07      	cmp	r3, #7
 801643c:	d9e9      	bls.n	8016412 <gen_numname+0xe6>
}
 801643e:	bf00      	nop
 8016440:	bf00      	nop
 8016442:	3730      	adds	r7, #48	; 0x30
 8016444:	46bd      	mov	sp, r7
 8016446:	bd80      	pop	{r7, pc}

08016448 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8016448:	b480      	push	{r7}
 801644a:	b085      	sub	sp, #20
 801644c:	af00      	add	r7, sp, #0
 801644e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8016450:	2300      	movs	r3, #0
 8016452:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8016454:	230b      	movs	r3, #11
 8016456:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8016458:	7bfb      	ldrb	r3, [r7, #15]
 801645a:	b2da      	uxtb	r2, r3
 801645c:	0852      	lsrs	r2, r2, #1
 801645e:	01db      	lsls	r3, r3, #7
 8016460:	4313      	orrs	r3, r2
 8016462:	b2da      	uxtb	r2, r3
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	1c59      	adds	r1, r3, #1
 8016468:	6079      	str	r1, [r7, #4]
 801646a:	781b      	ldrb	r3, [r3, #0]
 801646c:	4413      	add	r3, r2
 801646e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8016470:	68bb      	ldr	r3, [r7, #8]
 8016472:	3b01      	subs	r3, #1
 8016474:	60bb      	str	r3, [r7, #8]
 8016476:	68bb      	ldr	r3, [r7, #8]
 8016478:	2b00      	cmp	r3, #0
 801647a:	d1ed      	bne.n	8016458 <sum_sfn+0x10>
	return sum;
 801647c:	7bfb      	ldrb	r3, [r7, #15]
}
 801647e:	4618      	mov	r0, r3
 8016480:	3714      	adds	r7, #20
 8016482:	46bd      	mov	sp, r7
 8016484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016488:	4770      	bx	lr

0801648a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801648a:	b580      	push	{r7, lr}
 801648c:	b086      	sub	sp, #24
 801648e:	af00      	add	r7, sp, #0
 8016490:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8016498:	2100      	movs	r1, #0
 801649a:	6878      	ldr	r0, [r7, #4]
 801649c:	f7ff fca8 	bl	8015df0 <dir_sdi>
 80164a0:	4603      	mov	r3, r0
 80164a2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80164a4:	7dfb      	ldrb	r3, [r7, #23]
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d001      	beq.n	80164ae <dir_find+0x24>
 80164aa:	7dfb      	ldrb	r3, [r7, #23]
 80164ac:	e0a9      	b.n	8016602 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80164ae:	23ff      	movs	r3, #255	; 0xff
 80164b0:	753b      	strb	r3, [r7, #20]
 80164b2:	7d3b      	ldrb	r3, [r7, #20]
 80164b4:	757b      	strb	r3, [r7, #21]
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	f04f 32ff 	mov.w	r2, #4294967295
 80164bc:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	69db      	ldr	r3, [r3, #28]
 80164c2:	4619      	mov	r1, r3
 80164c4:	6938      	ldr	r0, [r7, #16]
 80164c6:	f7ff f913 	bl	80156f0 <move_window>
 80164ca:	4603      	mov	r3, r0
 80164cc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80164ce:	7dfb      	ldrb	r3, [r7, #23]
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	f040 8090 	bne.w	80165f6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	6a1b      	ldr	r3, [r3, #32]
 80164da:	781b      	ldrb	r3, [r3, #0]
 80164dc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80164de:	7dbb      	ldrb	r3, [r7, #22]
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d102      	bne.n	80164ea <dir_find+0x60>
 80164e4:	2304      	movs	r3, #4
 80164e6:	75fb      	strb	r3, [r7, #23]
 80164e8:	e08a      	b.n	8016600 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	6a1b      	ldr	r3, [r3, #32]
 80164ee:	330b      	adds	r3, #11
 80164f0:	781b      	ldrb	r3, [r3, #0]
 80164f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80164f6:	73fb      	strb	r3, [r7, #15]
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	7bfa      	ldrb	r2, [r7, #15]
 80164fc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80164fe:	7dbb      	ldrb	r3, [r7, #22]
 8016500:	2be5      	cmp	r3, #229	; 0xe5
 8016502:	d007      	beq.n	8016514 <dir_find+0x8a>
 8016504:	7bfb      	ldrb	r3, [r7, #15]
 8016506:	f003 0308 	and.w	r3, r3, #8
 801650a:	2b00      	cmp	r3, #0
 801650c:	d009      	beq.n	8016522 <dir_find+0x98>
 801650e:	7bfb      	ldrb	r3, [r7, #15]
 8016510:	2b0f      	cmp	r3, #15
 8016512:	d006      	beq.n	8016522 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8016514:	23ff      	movs	r3, #255	; 0xff
 8016516:	757b      	strb	r3, [r7, #21]
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	f04f 32ff 	mov.w	r2, #4294967295
 801651e:	631a      	str	r2, [r3, #48]	; 0x30
 8016520:	e05e      	b.n	80165e0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8016522:	7bfb      	ldrb	r3, [r7, #15]
 8016524:	2b0f      	cmp	r3, #15
 8016526:	d136      	bne.n	8016596 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801652e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016532:	2b00      	cmp	r3, #0
 8016534:	d154      	bne.n	80165e0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8016536:	7dbb      	ldrb	r3, [r7, #22]
 8016538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801653c:	2b00      	cmp	r3, #0
 801653e:	d00d      	beq.n	801655c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	6a1b      	ldr	r3, [r3, #32]
 8016544:	7b5b      	ldrb	r3, [r3, #13]
 8016546:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8016548:	7dbb      	ldrb	r3, [r7, #22]
 801654a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801654e:	75bb      	strb	r3, [r7, #22]
 8016550:	7dbb      	ldrb	r3, [r7, #22]
 8016552:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	695a      	ldr	r2, [r3, #20]
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801655c:	7dba      	ldrb	r2, [r7, #22]
 801655e:	7d7b      	ldrb	r3, [r7, #21]
 8016560:	429a      	cmp	r2, r3
 8016562:	d115      	bne.n	8016590 <dir_find+0x106>
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	6a1b      	ldr	r3, [r3, #32]
 8016568:	330d      	adds	r3, #13
 801656a:	781b      	ldrb	r3, [r3, #0]
 801656c:	7d3a      	ldrb	r2, [r7, #20]
 801656e:	429a      	cmp	r2, r3
 8016570:	d10e      	bne.n	8016590 <dir_find+0x106>
 8016572:	693b      	ldr	r3, [r7, #16]
 8016574:	68da      	ldr	r2, [r3, #12]
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	6a1b      	ldr	r3, [r3, #32]
 801657a:	4619      	mov	r1, r3
 801657c:	4610      	mov	r0, r2
 801657e:	f7ff fdfd 	bl	801617c <cmp_lfn>
 8016582:	4603      	mov	r3, r0
 8016584:	2b00      	cmp	r3, #0
 8016586:	d003      	beq.n	8016590 <dir_find+0x106>
 8016588:	7d7b      	ldrb	r3, [r7, #21]
 801658a:	3b01      	subs	r3, #1
 801658c:	b2db      	uxtb	r3, r3
 801658e:	e000      	b.n	8016592 <dir_find+0x108>
 8016590:	23ff      	movs	r3, #255	; 0xff
 8016592:	757b      	strb	r3, [r7, #21]
 8016594:	e024      	b.n	80165e0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8016596:	7d7b      	ldrb	r3, [r7, #21]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d109      	bne.n	80165b0 <dir_find+0x126>
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	6a1b      	ldr	r3, [r3, #32]
 80165a0:	4618      	mov	r0, r3
 80165a2:	f7ff ff51 	bl	8016448 <sum_sfn>
 80165a6:	4603      	mov	r3, r0
 80165a8:	461a      	mov	r2, r3
 80165aa:	7d3b      	ldrb	r3, [r7, #20]
 80165ac:	4293      	cmp	r3, r2
 80165ae:	d024      	beq.n	80165fa <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80165b6:	f003 0301 	and.w	r3, r3, #1
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d10a      	bne.n	80165d4 <dir_find+0x14a>
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	6a18      	ldr	r0, [r3, #32]
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	3324      	adds	r3, #36	; 0x24
 80165c6:	220b      	movs	r2, #11
 80165c8:	4619      	mov	r1, r3
 80165ca:	f7fe fe9f 	bl	801530c <mem_cmp>
 80165ce:	4603      	mov	r3, r0
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d014      	beq.n	80165fe <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80165d4:	23ff      	movs	r3, #255	; 0xff
 80165d6:	757b      	strb	r3, [r7, #21]
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	f04f 32ff 	mov.w	r2, #4294967295
 80165de:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80165e0:	2100      	movs	r1, #0
 80165e2:	6878      	ldr	r0, [r7, #4]
 80165e4:	f7ff fc7f 	bl	8015ee6 <dir_next>
 80165e8:	4603      	mov	r3, r0
 80165ea:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80165ec:	7dfb      	ldrb	r3, [r7, #23]
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	f43f af65 	beq.w	80164be <dir_find+0x34>
 80165f4:	e004      	b.n	8016600 <dir_find+0x176>
		if (res != FR_OK) break;
 80165f6:	bf00      	nop
 80165f8:	e002      	b.n	8016600 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80165fa:	bf00      	nop
 80165fc:	e000      	b.n	8016600 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80165fe:	bf00      	nop

	return res;
 8016600:	7dfb      	ldrb	r3, [r7, #23]
}
 8016602:	4618      	mov	r0, r3
 8016604:	3718      	adds	r7, #24
 8016606:	46bd      	mov	sp, r7
 8016608:	bd80      	pop	{r7, pc}
	...

0801660c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801660c:	b580      	push	{r7, lr}
 801660e:	b08c      	sub	sp, #48	; 0x30
 8016610:	af00      	add	r7, sp, #0
 8016612:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	681b      	ldr	r3, [r3, #0]
 8016618:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016620:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8016624:	2b00      	cmp	r3, #0
 8016626:	d001      	beq.n	801662c <dir_register+0x20>
 8016628:	2306      	movs	r3, #6
 801662a:	e0e0      	b.n	80167ee <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801662c:	2300      	movs	r3, #0
 801662e:	627b      	str	r3, [r7, #36]	; 0x24
 8016630:	e002      	b.n	8016638 <dir_register+0x2c>
 8016632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016634:	3301      	adds	r3, #1
 8016636:	627b      	str	r3, [r7, #36]	; 0x24
 8016638:	69fb      	ldr	r3, [r7, #28]
 801663a:	68da      	ldr	r2, [r3, #12]
 801663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801663e:	005b      	lsls	r3, r3, #1
 8016640:	4413      	add	r3, r2
 8016642:	881b      	ldrh	r3, [r3, #0]
 8016644:	2b00      	cmp	r3, #0
 8016646:	d1f4      	bne.n	8016632 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 801664e:	f107 030c 	add.w	r3, r7, #12
 8016652:	220c      	movs	r2, #12
 8016654:	4618      	mov	r0, r3
 8016656:	f7fe fe1d 	bl	8015294 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801665a:	7dfb      	ldrb	r3, [r7, #23]
 801665c:	f003 0301 	and.w	r3, r3, #1
 8016660:	2b00      	cmp	r3, #0
 8016662:	d032      	beq.n	80166ca <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	2240      	movs	r2, #64	; 0x40
 8016668:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 801666c:	2301      	movs	r3, #1
 801666e:	62bb      	str	r3, [r7, #40]	; 0x28
 8016670:	e016      	b.n	80166a0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8016678:	69fb      	ldr	r3, [r7, #28]
 801667a:	68da      	ldr	r2, [r3, #12]
 801667c:	f107 010c 	add.w	r1, r7, #12
 8016680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016682:	f7ff fe53 	bl	801632c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8016686:	6878      	ldr	r0, [r7, #4]
 8016688:	f7ff feff 	bl	801648a <dir_find>
 801668c:	4603      	mov	r3, r0
 801668e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8016692:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016696:	2b00      	cmp	r3, #0
 8016698:	d106      	bne.n	80166a8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801669a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801669c:	3301      	adds	r3, #1
 801669e:	62bb      	str	r3, [r7, #40]	; 0x28
 80166a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166a2:	2b63      	cmp	r3, #99	; 0x63
 80166a4:	d9e5      	bls.n	8016672 <dir_register+0x66>
 80166a6:	e000      	b.n	80166aa <dir_register+0x9e>
			if (res != FR_OK) break;
 80166a8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80166aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166ac:	2b64      	cmp	r3, #100	; 0x64
 80166ae:	d101      	bne.n	80166b4 <dir_register+0xa8>
 80166b0:	2307      	movs	r3, #7
 80166b2:	e09c      	b.n	80167ee <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80166b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80166b8:	2b04      	cmp	r3, #4
 80166ba:	d002      	beq.n	80166c2 <dir_register+0xb6>
 80166bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80166c0:	e095      	b.n	80167ee <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80166c2:	7dfa      	ldrb	r2, [r7, #23]
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80166ca:	7dfb      	ldrb	r3, [r7, #23]
 80166cc:	f003 0302 	and.w	r3, r3, #2
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d007      	beq.n	80166e4 <dir_register+0xd8>
 80166d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166d6:	330c      	adds	r3, #12
 80166d8:	4a47      	ldr	r2, [pc, #284]	; (80167f8 <dir_register+0x1ec>)
 80166da:	fba2 2303 	umull	r2, r3, r2, r3
 80166de:	089b      	lsrs	r3, r3, #2
 80166e0:	3301      	adds	r3, #1
 80166e2:	e000      	b.n	80166e6 <dir_register+0xda>
 80166e4:	2301      	movs	r3, #1
 80166e6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80166e8:	6a39      	ldr	r1, [r7, #32]
 80166ea:	6878      	ldr	r0, [r7, #4]
 80166ec:	f7ff fcc0 	bl	8016070 <dir_alloc>
 80166f0:	4603      	mov	r3, r0
 80166f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80166f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d148      	bne.n	8016790 <dir_register+0x184>
 80166fe:	6a3b      	ldr	r3, [r7, #32]
 8016700:	3b01      	subs	r3, #1
 8016702:	623b      	str	r3, [r7, #32]
 8016704:	6a3b      	ldr	r3, [r7, #32]
 8016706:	2b00      	cmp	r3, #0
 8016708:	d042      	beq.n	8016790 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	695a      	ldr	r2, [r3, #20]
 801670e:	6a3b      	ldr	r3, [r7, #32]
 8016710:	015b      	lsls	r3, r3, #5
 8016712:	1ad3      	subs	r3, r2, r3
 8016714:	4619      	mov	r1, r3
 8016716:	6878      	ldr	r0, [r7, #4]
 8016718:	f7ff fb6a 	bl	8015df0 <dir_sdi>
 801671c:	4603      	mov	r3, r0
 801671e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8016722:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016726:	2b00      	cmp	r3, #0
 8016728:	d132      	bne.n	8016790 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	3324      	adds	r3, #36	; 0x24
 801672e:	4618      	mov	r0, r3
 8016730:	f7ff fe8a 	bl	8016448 <sum_sfn>
 8016734:	4603      	mov	r3, r0
 8016736:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	69db      	ldr	r3, [r3, #28]
 801673c:	4619      	mov	r1, r3
 801673e:	69f8      	ldr	r0, [r7, #28]
 8016740:	f7fe ffd6 	bl	80156f0 <move_window>
 8016744:	4603      	mov	r3, r0
 8016746:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 801674a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801674e:	2b00      	cmp	r3, #0
 8016750:	d11d      	bne.n	801678e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8016752:	69fb      	ldr	r3, [r7, #28]
 8016754:	68d8      	ldr	r0, [r3, #12]
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	6a19      	ldr	r1, [r3, #32]
 801675a:	6a3b      	ldr	r3, [r7, #32]
 801675c:	b2da      	uxtb	r2, r3
 801675e:	7efb      	ldrb	r3, [r7, #27]
 8016760:	f7ff fd7c 	bl	801625c <put_lfn>
				fs->wflag = 1;
 8016764:	69fb      	ldr	r3, [r7, #28]
 8016766:	2201      	movs	r2, #1
 8016768:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801676a:	2100      	movs	r1, #0
 801676c:	6878      	ldr	r0, [r7, #4]
 801676e:	f7ff fbba 	bl	8015ee6 <dir_next>
 8016772:	4603      	mov	r3, r0
 8016774:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8016778:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801677c:	2b00      	cmp	r3, #0
 801677e:	d107      	bne.n	8016790 <dir_register+0x184>
 8016780:	6a3b      	ldr	r3, [r7, #32]
 8016782:	3b01      	subs	r3, #1
 8016784:	623b      	str	r3, [r7, #32]
 8016786:	6a3b      	ldr	r3, [r7, #32]
 8016788:	2b00      	cmp	r3, #0
 801678a:	d1d5      	bne.n	8016738 <dir_register+0x12c>
 801678c:	e000      	b.n	8016790 <dir_register+0x184>
				if (res != FR_OK) break;
 801678e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8016790:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016794:	2b00      	cmp	r3, #0
 8016796:	d128      	bne.n	80167ea <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	69db      	ldr	r3, [r3, #28]
 801679c:	4619      	mov	r1, r3
 801679e:	69f8      	ldr	r0, [r7, #28]
 80167a0:	f7fe ffa6 	bl	80156f0 <move_window>
 80167a4:	4603      	mov	r3, r0
 80167a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80167aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d11b      	bne.n	80167ea <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	6a1b      	ldr	r3, [r3, #32]
 80167b6:	2220      	movs	r2, #32
 80167b8:	2100      	movs	r1, #0
 80167ba:	4618      	mov	r0, r3
 80167bc:	f7fe fd8b 	bl	80152d6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	6a18      	ldr	r0, [r3, #32]
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	3324      	adds	r3, #36	; 0x24
 80167c8:	220b      	movs	r2, #11
 80167ca:	4619      	mov	r1, r3
 80167cc:	f7fe fd62 	bl	8015294 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	6a1b      	ldr	r3, [r3, #32]
 80167da:	330c      	adds	r3, #12
 80167dc:	f002 0218 	and.w	r2, r2, #24
 80167e0:	b2d2      	uxtb	r2, r2
 80167e2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80167e4:	69fb      	ldr	r3, [r7, #28]
 80167e6:	2201      	movs	r2, #1
 80167e8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80167ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80167ee:	4618      	mov	r0, r3
 80167f0:	3730      	adds	r7, #48	; 0x30
 80167f2:	46bd      	mov	sp, r7
 80167f4:	bd80      	pop	{r7, pc}
 80167f6:	bf00      	nop
 80167f8:	4ec4ec4f 	.word	0x4ec4ec4f

080167fc <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80167fc:	b580      	push	{r7, lr}
 80167fe:	b088      	sub	sp, #32
 8016800:	af00      	add	r7, sp, #0
 8016802:	6078      	str	r0, [r7, #4]
 8016804:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 801680c:	683b      	ldr	r3, [r7, #0]
 801680e:	2200      	movs	r2, #0
 8016810:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	69db      	ldr	r3, [r3, #28]
 8016816:	2b00      	cmp	r3, #0
 8016818:	f000 80c9 	beq.w	80169ae <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016824:	d032      	beq.n	801688c <get_fileinfo+0x90>
			i = j = 0;
 8016826:	2300      	movs	r3, #0
 8016828:	61bb      	str	r3, [r7, #24]
 801682a:	69bb      	ldr	r3, [r7, #24]
 801682c:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801682e:	e01b      	b.n	8016868 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8016830:	89fb      	ldrh	r3, [r7, #14]
 8016832:	2100      	movs	r1, #0
 8016834:	4618      	mov	r0, r3
 8016836:	f001 fabf 	bl	8017db8 <ff_convert>
 801683a:	4603      	mov	r3, r0
 801683c:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 801683e:	89fb      	ldrh	r3, [r7, #14]
 8016840:	2b00      	cmp	r3, #0
 8016842:	d102      	bne.n	801684a <get_fileinfo+0x4e>
 8016844:	2300      	movs	r3, #0
 8016846:	61fb      	str	r3, [r7, #28]
 8016848:	e01a      	b.n	8016880 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 801684a:	69fb      	ldr	r3, [r7, #28]
 801684c:	2bfe      	cmp	r3, #254	; 0xfe
 801684e:	d902      	bls.n	8016856 <get_fileinfo+0x5a>
 8016850:	2300      	movs	r3, #0
 8016852:	61fb      	str	r3, [r7, #28]
 8016854:	e014      	b.n	8016880 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8016856:	69fb      	ldr	r3, [r7, #28]
 8016858:	1c5a      	adds	r2, r3, #1
 801685a:	61fa      	str	r2, [r7, #28]
 801685c:	89fa      	ldrh	r2, [r7, #14]
 801685e:	b2d1      	uxtb	r1, r2
 8016860:	683a      	ldr	r2, [r7, #0]
 8016862:	4413      	add	r3, r2
 8016864:	460a      	mov	r2, r1
 8016866:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8016868:	693b      	ldr	r3, [r7, #16]
 801686a:	68da      	ldr	r2, [r3, #12]
 801686c:	69bb      	ldr	r3, [r7, #24]
 801686e:	1c59      	adds	r1, r3, #1
 8016870:	61b9      	str	r1, [r7, #24]
 8016872:	005b      	lsls	r3, r3, #1
 8016874:	4413      	add	r3, r2
 8016876:	881b      	ldrh	r3, [r3, #0]
 8016878:	81fb      	strh	r3, [r7, #14]
 801687a:	89fb      	ldrh	r3, [r7, #14]
 801687c:	2b00      	cmp	r3, #0
 801687e:	d1d7      	bne.n	8016830 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8016880:	683a      	ldr	r2, [r7, #0]
 8016882:	69fb      	ldr	r3, [r7, #28]
 8016884:	4413      	add	r3, r2
 8016886:	3316      	adds	r3, #22
 8016888:	2200      	movs	r2, #0
 801688a:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 801688c:	2300      	movs	r3, #0
 801688e:	61bb      	str	r3, [r7, #24]
 8016890:	69bb      	ldr	r3, [r7, #24]
 8016892:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8016894:	683a      	ldr	r2, [r7, #0]
 8016896:	69fb      	ldr	r3, [r7, #28]
 8016898:	4413      	add	r3, r2
 801689a:	3316      	adds	r3, #22
 801689c:	781b      	ldrb	r3, [r3, #0]
 801689e:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 80168a0:	e04c      	b.n	801693c <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	6a1a      	ldr	r2, [r3, #32]
 80168a6:	69fb      	ldr	r3, [r7, #28]
 80168a8:	1c59      	adds	r1, r3, #1
 80168aa:	61f9      	str	r1, [r7, #28]
 80168ac:	4413      	add	r3, r2
 80168ae:	781b      	ldrb	r3, [r3, #0]
 80168b0:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 80168b2:	7dfb      	ldrb	r3, [r7, #23]
 80168b4:	2b20      	cmp	r3, #32
 80168b6:	d100      	bne.n	80168ba <get_fileinfo+0xbe>
 80168b8:	e040      	b.n	801693c <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80168ba:	7dfb      	ldrb	r3, [r7, #23]
 80168bc:	2b05      	cmp	r3, #5
 80168be:	d101      	bne.n	80168c4 <get_fileinfo+0xc8>
 80168c0:	23e5      	movs	r3, #229	; 0xe5
 80168c2:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 80168c4:	69fb      	ldr	r3, [r7, #28]
 80168c6:	2b09      	cmp	r3, #9
 80168c8:	d10f      	bne.n	80168ea <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 80168ca:	89bb      	ldrh	r3, [r7, #12]
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d105      	bne.n	80168dc <get_fileinfo+0xe0>
 80168d0:	683a      	ldr	r2, [r7, #0]
 80168d2:	69bb      	ldr	r3, [r7, #24]
 80168d4:	4413      	add	r3, r2
 80168d6:	3316      	adds	r3, #22
 80168d8:	222e      	movs	r2, #46	; 0x2e
 80168da:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 80168dc:	69bb      	ldr	r3, [r7, #24]
 80168de:	1c5a      	adds	r2, r3, #1
 80168e0:	61ba      	str	r2, [r7, #24]
 80168e2:	683a      	ldr	r2, [r7, #0]
 80168e4:	4413      	add	r3, r2
 80168e6:	222e      	movs	r2, #46	; 0x2e
 80168e8:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 80168ea:	683a      	ldr	r2, [r7, #0]
 80168ec:	69bb      	ldr	r3, [r7, #24]
 80168ee:	4413      	add	r3, r2
 80168f0:	3309      	adds	r3, #9
 80168f2:	7dfa      	ldrb	r2, [r7, #23]
 80168f4:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 80168f6:	89bb      	ldrh	r3, [r7, #12]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d11c      	bne.n	8016936 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 80168fc:	7dfb      	ldrb	r3, [r7, #23]
 80168fe:	2b40      	cmp	r3, #64	; 0x40
 8016900:	d913      	bls.n	801692a <get_fileinfo+0x12e>
 8016902:	7dfb      	ldrb	r3, [r7, #23]
 8016904:	2b5a      	cmp	r3, #90	; 0x5a
 8016906:	d810      	bhi.n	801692a <get_fileinfo+0x12e>
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	6a1b      	ldr	r3, [r3, #32]
 801690c:	330c      	adds	r3, #12
 801690e:	781b      	ldrb	r3, [r3, #0]
 8016910:	461a      	mov	r2, r3
 8016912:	69fb      	ldr	r3, [r7, #28]
 8016914:	2b08      	cmp	r3, #8
 8016916:	d901      	bls.n	801691c <get_fileinfo+0x120>
 8016918:	2310      	movs	r3, #16
 801691a:	e000      	b.n	801691e <get_fileinfo+0x122>
 801691c:	2308      	movs	r3, #8
 801691e:	4013      	ands	r3, r2
 8016920:	2b00      	cmp	r3, #0
 8016922:	d002      	beq.n	801692a <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8016924:	7dfb      	ldrb	r3, [r7, #23]
 8016926:	3320      	adds	r3, #32
 8016928:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 801692a:	683a      	ldr	r2, [r7, #0]
 801692c:	69bb      	ldr	r3, [r7, #24]
 801692e:	4413      	add	r3, r2
 8016930:	3316      	adds	r3, #22
 8016932:	7dfa      	ldrb	r2, [r7, #23]
 8016934:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8016936:	69bb      	ldr	r3, [r7, #24]
 8016938:	3301      	adds	r3, #1
 801693a:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 801693c:	69fb      	ldr	r3, [r7, #28]
 801693e:	2b0a      	cmp	r3, #10
 8016940:	d9af      	bls.n	80168a2 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8016942:	89bb      	ldrh	r3, [r7, #12]
 8016944:	2b00      	cmp	r3, #0
 8016946:	d10d      	bne.n	8016964 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8016948:	683a      	ldr	r2, [r7, #0]
 801694a:	69bb      	ldr	r3, [r7, #24]
 801694c:	4413      	add	r3, r2
 801694e:	3316      	adds	r3, #22
 8016950:	2200      	movs	r2, #0
 8016952:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	6a1b      	ldr	r3, [r3, #32]
 8016958:	330c      	adds	r3, #12
 801695a:	781b      	ldrb	r3, [r3, #0]
 801695c:	2b00      	cmp	r3, #0
 801695e:	d101      	bne.n	8016964 <get_fileinfo+0x168>
 8016960:	2300      	movs	r3, #0
 8016962:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8016964:	683a      	ldr	r2, [r7, #0]
 8016966:	69bb      	ldr	r3, [r7, #24]
 8016968:	4413      	add	r3, r2
 801696a:	3309      	adds	r3, #9
 801696c:	2200      	movs	r2, #0
 801696e:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	6a1b      	ldr	r3, [r3, #32]
 8016974:	7ada      	ldrb	r2, [r3, #11]
 8016976:	683b      	ldr	r3, [r7, #0]
 8016978:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	6a1b      	ldr	r3, [r3, #32]
 801697e:	331c      	adds	r3, #28
 8016980:	4618      	mov	r0, r3
 8016982:	f7fe fc1d 	bl	80151c0 <ld_dword>
 8016986:	4602      	mov	r2, r0
 8016988:	683b      	ldr	r3, [r7, #0]
 801698a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	6a1b      	ldr	r3, [r3, #32]
 8016990:	3316      	adds	r3, #22
 8016992:	4618      	mov	r0, r3
 8016994:	f7fe fc14 	bl	80151c0 <ld_dword>
 8016998:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801699a:	68bb      	ldr	r3, [r7, #8]
 801699c:	b29a      	uxth	r2, r3
 801699e:	683b      	ldr	r3, [r7, #0]
 80169a0:	80da      	strh	r2, [r3, #6]
 80169a2:	68bb      	ldr	r3, [r7, #8]
 80169a4:	0c1b      	lsrs	r3, r3, #16
 80169a6:	b29a      	uxth	r2, r3
 80169a8:	683b      	ldr	r3, [r7, #0]
 80169aa:	809a      	strh	r2, [r3, #4]
 80169ac:	e000      	b.n	80169b0 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80169ae:	bf00      	nop
}
 80169b0:	3720      	adds	r7, #32
 80169b2:	46bd      	mov	sp, r7
 80169b4:	bd80      	pop	{r7, pc}
	...

080169b8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80169b8:	b580      	push	{r7, lr}
 80169ba:	b08a      	sub	sp, #40	; 0x28
 80169bc:	af00      	add	r7, sp, #0
 80169be:	6078      	str	r0, [r7, #4]
 80169c0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80169c2:	683b      	ldr	r3, [r7, #0]
 80169c4:	681b      	ldr	r3, [r3, #0]
 80169c6:	613b      	str	r3, [r7, #16]
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	68db      	ldr	r3, [r3, #12]
 80169ce:	60fb      	str	r3, [r7, #12]
 80169d0:	2300      	movs	r3, #0
 80169d2:	617b      	str	r3, [r7, #20]
 80169d4:	697b      	ldr	r3, [r7, #20]
 80169d6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80169d8:	69bb      	ldr	r3, [r7, #24]
 80169da:	1c5a      	adds	r2, r3, #1
 80169dc:	61ba      	str	r2, [r7, #24]
 80169de:	693a      	ldr	r2, [r7, #16]
 80169e0:	4413      	add	r3, r2
 80169e2:	781b      	ldrb	r3, [r3, #0]
 80169e4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80169e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80169e8:	2b1f      	cmp	r3, #31
 80169ea:	d940      	bls.n	8016a6e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80169ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80169ee:	2b2f      	cmp	r3, #47	; 0x2f
 80169f0:	d006      	beq.n	8016a00 <create_name+0x48>
 80169f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80169f4:	2b5c      	cmp	r3, #92	; 0x5c
 80169f6:	d110      	bne.n	8016a1a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80169f8:	e002      	b.n	8016a00 <create_name+0x48>
 80169fa:	69bb      	ldr	r3, [r7, #24]
 80169fc:	3301      	adds	r3, #1
 80169fe:	61bb      	str	r3, [r7, #24]
 8016a00:	693a      	ldr	r2, [r7, #16]
 8016a02:	69bb      	ldr	r3, [r7, #24]
 8016a04:	4413      	add	r3, r2
 8016a06:	781b      	ldrb	r3, [r3, #0]
 8016a08:	2b2f      	cmp	r3, #47	; 0x2f
 8016a0a:	d0f6      	beq.n	80169fa <create_name+0x42>
 8016a0c:	693a      	ldr	r2, [r7, #16]
 8016a0e:	69bb      	ldr	r3, [r7, #24]
 8016a10:	4413      	add	r3, r2
 8016a12:	781b      	ldrb	r3, [r3, #0]
 8016a14:	2b5c      	cmp	r3, #92	; 0x5c
 8016a16:	d0f0      	beq.n	80169fa <create_name+0x42>
			break;
 8016a18:	e02a      	b.n	8016a70 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8016a1a:	697b      	ldr	r3, [r7, #20]
 8016a1c:	2bfe      	cmp	r3, #254	; 0xfe
 8016a1e:	d901      	bls.n	8016a24 <create_name+0x6c>
 8016a20:	2306      	movs	r3, #6
 8016a22:	e17d      	b.n	8016d20 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8016a24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016a26:	b2db      	uxtb	r3, r3
 8016a28:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8016a2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016a2c:	2101      	movs	r1, #1
 8016a2e:	4618      	mov	r0, r3
 8016a30:	f001 f9c2 	bl	8017db8 <ff_convert>
 8016a34:	4603      	mov	r3, r0
 8016a36:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8016a38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d101      	bne.n	8016a42 <create_name+0x8a>
 8016a3e:	2306      	movs	r3, #6
 8016a40:	e16e      	b.n	8016d20 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8016a42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016a44:	2b7f      	cmp	r3, #127	; 0x7f
 8016a46:	d809      	bhi.n	8016a5c <create_name+0xa4>
 8016a48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016a4a:	4619      	mov	r1, r3
 8016a4c:	488d      	ldr	r0, [pc, #564]	; (8016c84 <create_name+0x2cc>)
 8016a4e:	f7fe fc84 	bl	801535a <chk_chr>
 8016a52:	4603      	mov	r3, r0
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	d001      	beq.n	8016a5c <create_name+0xa4>
 8016a58:	2306      	movs	r3, #6
 8016a5a:	e161      	b.n	8016d20 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8016a5c:	697b      	ldr	r3, [r7, #20]
 8016a5e:	1c5a      	adds	r2, r3, #1
 8016a60:	617a      	str	r2, [r7, #20]
 8016a62:	005b      	lsls	r3, r3, #1
 8016a64:	68fa      	ldr	r2, [r7, #12]
 8016a66:	4413      	add	r3, r2
 8016a68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016a6a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8016a6c:	e7b4      	b.n	80169d8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8016a6e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8016a70:	693a      	ldr	r2, [r7, #16]
 8016a72:	69bb      	ldr	r3, [r7, #24]
 8016a74:	441a      	add	r2, r3
 8016a76:	683b      	ldr	r3, [r7, #0]
 8016a78:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8016a7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016a7c:	2b1f      	cmp	r3, #31
 8016a7e:	d801      	bhi.n	8016a84 <create_name+0xcc>
 8016a80:	2304      	movs	r3, #4
 8016a82:	e000      	b.n	8016a86 <create_name+0xce>
 8016a84:	2300      	movs	r3, #0
 8016a86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8016a8a:	e011      	b.n	8016ab0 <create_name+0xf8>
		w = lfn[di - 1];
 8016a8c:	697b      	ldr	r3, [r7, #20]
 8016a8e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016a92:	3b01      	subs	r3, #1
 8016a94:	005b      	lsls	r3, r3, #1
 8016a96:	68fa      	ldr	r2, [r7, #12]
 8016a98:	4413      	add	r3, r2
 8016a9a:	881b      	ldrh	r3, [r3, #0]
 8016a9c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8016a9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016aa0:	2b20      	cmp	r3, #32
 8016aa2:	d002      	beq.n	8016aaa <create_name+0xf2>
 8016aa4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016aa6:	2b2e      	cmp	r3, #46	; 0x2e
 8016aa8:	d106      	bne.n	8016ab8 <create_name+0x100>
		di--;
 8016aaa:	697b      	ldr	r3, [r7, #20]
 8016aac:	3b01      	subs	r3, #1
 8016aae:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8016ab0:	697b      	ldr	r3, [r7, #20]
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d1ea      	bne.n	8016a8c <create_name+0xd4>
 8016ab6:	e000      	b.n	8016aba <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8016ab8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8016aba:	697b      	ldr	r3, [r7, #20]
 8016abc:	005b      	lsls	r3, r3, #1
 8016abe:	68fa      	ldr	r2, [r7, #12]
 8016ac0:	4413      	add	r3, r2
 8016ac2:	2200      	movs	r2, #0
 8016ac4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8016ac6:	697b      	ldr	r3, [r7, #20]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d101      	bne.n	8016ad0 <create_name+0x118>
 8016acc:	2306      	movs	r3, #6
 8016ace:	e127      	b.n	8016d20 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	3324      	adds	r3, #36	; 0x24
 8016ad4:	220b      	movs	r2, #11
 8016ad6:	2120      	movs	r1, #32
 8016ad8:	4618      	mov	r0, r3
 8016ada:	f7fe fbfc 	bl	80152d6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8016ade:	2300      	movs	r3, #0
 8016ae0:	61bb      	str	r3, [r7, #24]
 8016ae2:	e002      	b.n	8016aea <create_name+0x132>
 8016ae4:	69bb      	ldr	r3, [r7, #24]
 8016ae6:	3301      	adds	r3, #1
 8016ae8:	61bb      	str	r3, [r7, #24]
 8016aea:	69bb      	ldr	r3, [r7, #24]
 8016aec:	005b      	lsls	r3, r3, #1
 8016aee:	68fa      	ldr	r2, [r7, #12]
 8016af0:	4413      	add	r3, r2
 8016af2:	881b      	ldrh	r3, [r3, #0]
 8016af4:	2b20      	cmp	r3, #32
 8016af6:	d0f5      	beq.n	8016ae4 <create_name+0x12c>
 8016af8:	69bb      	ldr	r3, [r7, #24]
 8016afa:	005b      	lsls	r3, r3, #1
 8016afc:	68fa      	ldr	r2, [r7, #12]
 8016afe:	4413      	add	r3, r2
 8016b00:	881b      	ldrh	r3, [r3, #0]
 8016b02:	2b2e      	cmp	r3, #46	; 0x2e
 8016b04:	d0ee      	beq.n	8016ae4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8016b06:	69bb      	ldr	r3, [r7, #24]
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d009      	beq.n	8016b20 <create_name+0x168>
 8016b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b10:	f043 0303 	orr.w	r3, r3, #3
 8016b14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8016b18:	e002      	b.n	8016b20 <create_name+0x168>
 8016b1a:	697b      	ldr	r3, [r7, #20]
 8016b1c:	3b01      	subs	r3, #1
 8016b1e:	617b      	str	r3, [r7, #20]
 8016b20:	697b      	ldr	r3, [r7, #20]
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d009      	beq.n	8016b3a <create_name+0x182>
 8016b26:	697b      	ldr	r3, [r7, #20]
 8016b28:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016b2c:	3b01      	subs	r3, #1
 8016b2e:	005b      	lsls	r3, r3, #1
 8016b30:	68fa      	ldr	r2, [r7, #12]
 8016b32:	4413      	add	r3, r2
 8016b34:	881b      	ldrh	r3, [r3, #0]
 8016b36:	2b2e      	cmp	r3, #46	; 0x2e
 8016b38:	d1ef      	bne.n	8016b1a <create_name+0x162>

	i = b = 0; ni = 8;
 8016b3a:	2300      	movs	r3, #0
 8016b3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016b40:	2300      	movs	r3, #0
 8016b42:	623b      	str	r3, [r7, #32]
 8016b44:	2308      	movs	r3, #8
 8016b46:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8016b48:	69bb      	ldr	r3, [r7, #24]
 8016b4a:	1c5a      	adds	r2, r3, #1
 8016b4c:	61ba      	str	r2, [r7, #24]
 8016b4e:	005b      	lsls	r3, r3, #1
 8016b50:	68fa      	ldr	r2, [r7, #12]
 8016b52:	4413      	add	r3, r2
 8016b54:	881b      	ldrh	r3, [r3, #0]
 8016b56:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8016b58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	f000 8090 	beq.w	8016c80 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8016b60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016b62:	2b20      	cmp	r3, #32
 8016b64:	d006      	beq.n	8016b74 <create_name+0x1bc>
 8016b66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016b68:	2b2e      	cmp	r3, #46	; 0x2e
 8016b6a:	d10a      	bne.n	8016b82 <create_name+0x1ca>
 8016b6c:	69ba      	ldr	r2, [r7, #24]
 8016b6e:	697b      	ldr	r3, [r7, #20]
 8016b70:	429a      	cmp	r2, r3
 8016b72:	d006      	beq.n	8016b82 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8016b74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b78:	f043 0303 	orr.w	r3, r3, #3
 8016b7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016b80:	e07d      	b.n	8016c7e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8016b82:	6a3a      	ldr	r2, [r7, #32]
 8016b84:	69fb      	ldr	r3, [r7, #28]
 8016b86:	429a      	cmp	r2, r3
 8016b88:	d203      	bcs.n	8016b92 <create_name+0x1da>
 8016b8a:	69ba      	ldr	r2, [r7, #24]
 8016b8c:	697b      	ldr	r3, [r7, #20]
 8016b8e:	429a      	cmp	r2, r3
 8016b90:	d123      	bne.n	8016bda <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8016b92:	69fb      	ldr	r3, [r7, #28]
 8016b94:	2b0b      	cmp	r3, #11
 8016b96:	d106      	bne.n	8016ba6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8016b98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b9c:	f043 0303 	orr.w	r3, r3, #3
 8016ba0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016ba4:	e075      	b.n	8016c92 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8016ba6:	69ba      	ldr	r2, [r7, #24]
 8016ba8:	697b      	ldr	r3, [r7, #20]
 8016baa:	429a      	cmp	r2, r3
 8016bac:	d005      	beq.n	8016bba <create_name+0x202>
 8016bae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016bb2:	f043 0303 	orr.w	r3, r3, #3
 8016bb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8016bba:	69ba      	ldr	r2, [r7, #24]
 8016bbc:	697b      	ldr	r3, [r7, #20]
 8016bbe:	429a      	cmp	r2, r3
 8016bc0:	d866      	bhi.n	8016c90 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8016bc2:	697b      	ldr	r3, [r7, #20]
 8016bc4:	61bb      	str	r3, [r7, #24]
 8016bc6:	2308      	movs	r3, #8
 8016bc8:	623b      	str	r3, [r7, #32]
 8016bca:	230b      	movs	r3, #11
 8016bcc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8016bce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016bd2:	009b      	lsls	r3, r3, #2
 8016bd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016bd8:	e051      	b.n	8016c7e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8016bda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016bdc:	2b7f      	cmp	r3, #127	; 0x7f
 8016bde:	d914      	bls.n	8016c0a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8016be0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016be2:	2100      	movs	r1, #0
 8016be4:	4618      	mov	r0, r3
 8016be6:	f001 f8e7 	bl	8017db8 <ff_convert>
 8016bea:	4603      	mov	r3, r0
 8016bec:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8016bee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d004      	beq.n	8016bfe <create_name+0x246>
 8016bf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016bf6:	3b80      	subs	r3, #128	; 0x80
 8016bf8:	4a23      	ldr	r2, [pc, #140]	; (8016c88 <create_name+0x2d0>)
 8016bfa:	5cd3      	ldrb	r3, [r2, r3]
 8016bfc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8016bfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c02:	f043 0302 	orr.w	r3, r3, #2
 8016c06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8016c0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d007      	beq.n	8016c20 <create_name+0x268>
 8016c10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016c12:	4619      	mov	r1, r3
 8016c14:	481d      	ldr	r0, [pc, #116]	; (8016c8c <create_name+0x2d4>)
 8016c16:	f7fe fba0 	bl	801535a <chk_chr>
 8016c1a:	4603      	mov	r3, r0
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d008      	beq.n	8016c32 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8016c20:	235f      	movs	r3, #95	; 0x5f
 8016c22:	84bb      	strh	r3, [r7, #36]	; 0x24
 8016c24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c28:	f043 0303 	orr.w	r3, r3, #3
 8016c2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016c30:	e01b      	b.n	8016c6a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8016c32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016c34:	2b40      	cmp	r3, #64	; 0x40
 8016c36:	d909      	bls.n	8016c4c <create_name+0x294>
 8016c38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016c3a:	2b5a      	cmp	r3, #90	; 0x5a
 8016c3c:	d806      	bhi.n	8016c4c <create_name+0x294>
					b |= 2;
 8016c3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016c42:	f043 0302 	orr.w	r3, r3, #2
 8016c46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016c4a:	e00e      	b.n	8016c6a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8016c4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016c4e:	2b60      	cmp	r3, #96	; 0x60
 8016c50:	d90b      	bls.n	8016c6a <create_name+0x2b2>
 8016c52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016c54:	2b7a      	cmp	r3, #122	; 0x7a
 8016c56:	d808      	bhi.n	8016c6a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8016c58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016c5c:	f043 0301 	orr.w	r3, r3, #1
 8016c60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016c64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016c66:	3b20      	subs	r3, #32
 8016c68:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8016c6a:	6a3b      	ldr	r3, [r7, #32]
 8016c6c:	1c5a      	adds	r2, r3, #1
 8016c6e:	623a      	str	r2, [r7, #32]
 8016c70:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016c72:	b2d1      	uxtb	r1, r2
 8016c74:	687a      	ldr	r2, [r7, #4]
 8016c76:	4413      	add	r3, r2
 8016c78:	460a      	mov	r2, r1
 8016c7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8016c7e:	e763      	b.n	8016b48 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8016c80:	bf00      	nop
 8016c82:	e006      	b.n	8016c92 <create_name+0x2da>
 8016c84:	0801f3ec 	.word	0x0801f3ec
 8016c88:	0801fc44 	.word	0x0801fc44
 8016c8c:	0801f3f8 	.word	0x0801f3f8
			if (si > di) break;			/* No extension */
 8016c90:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8016c98:	2be5      	cmp	r3, #229	; 0xe5
 8016c9a:	d103      	bne.n	8016ca4 <create_name+0x2ec>
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	2205      	movs	r2, #5
 8016ca0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8016ca4:	69fb      	ldr	r3, [r7, #28]
 8016ca6:	2b08      	cmp	r3, #8
 8016ca8:	d104      	bne.n	8016cb4 <create_name+0x2fc>
 8016caa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016cae:	009b      	lsls	r3, r3, #2
 8016cb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8016cb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016cb8:	f003 030c 	and.w	r3, r3, #12
 8016cbc:	2b0c      	cmp	r3, #12
 8016cbe:	d005      	beq.n	8016ccc <create_name+0x314>
 8016cc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016cc4:	f003 0303 	and.w	r3, r3, #3
 8016cc8:	2b03      	cmp	r3, #3
 8016cca:	d105      	bne.n	8016cd8 <create_name+0x320>
 8016ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016cd0:	f043 0302 	orr.w	r3, r3, #2
 8016cd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8016cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016cdc:	f003 0302 	and.w	r3, r3, #2
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	d117      	bne.n	8016d14 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8016ce4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016ce8:	f003 0303 	and.w	r3, r3, #3
 8016cec:	2b01      	cmp	r3, #1
 8016cee:	d105      	bne.n	8016cfc <create_name+0x344>
 8016cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016cf4:	f043 0310 	orr.w	r3, r3, #16
 8016cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8016cfc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016d00:	f003 030c 	and.w	r3, r3, #12
 8016d04:	2b04      	cmp	r3, #4
 8016d06:	d105      	bne.n	8016d14 <create_name+0x35c>
 8016d08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016d0c:	f043 0308 	orr.w	r3, r3, #8
 8016d10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016d1a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8016d1e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8016d20:	4618      	mov	r0, r3
 8016d22:	3728      	adds	r7, #40	; 0x28
 8016d24:	46bd      	mov	sp, r7
 8016d26:	bd80      	pop	{r7, pc}

08016d28 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8016d28:	b580      	push	{r7, lr}
 8016d2a:	b086      	sub	sp, #24
 8016d2c:	af00      	add	r7, sp, #0
 8016d2e:	6078      	str	r0, [r7, #4]
 8016d30:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8016d36:	693b      	ldr	r3, [r7, #16]
 8016d38:	681b      	ldr	r3, [r3, #0]
 8016d3a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8016d3c:	e002      	b.n	8016d44 <follow_path+0x1c>
 8016d3e:	683b      	ldr	r3, [r7, #0]
 8016d40:	3301      	adds	r3, #1
 8016d42:	603b      	str	r3, [r7, #0]
 8016d44:	683b      	ldr	r3, [r7, #0]
 8016d46:	781b      	ldrb	r3, [r3, #0]
 8016d48:	2b2f      	cmp	r3, #47	; 0x2f
 8016d4a:	d0f8      	beq.n	8016d3e <follow_path+0x16>
 8016d4c:	683b      	ldr	r3, [r7, #0]
 8016d4e:	781b      	ldrb	r3, [r3, #0]
 8016d50:	2b5c      	cmp	r3, #92	; 0x5c
 8016d52:	d0f4      	beq.n	8016d3e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8016d54:	693b      	ldr	r3, [r7, #16]
 8016d56:	2200      	movs	r2, #0
 8016d58:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8016d5a:	683b      	ldr	r3, [r7, #0]
 8016d5c:	781b      	ldrb	r3, [r3, #0]
 8016d5e:	2b1f      	cmp	r3, #31
 8016d60:	d80a      	bhi.n	8016d78 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	2280      	movs	r2, #128	; 0x80
 8016d66:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8016d6a:	2100      	movs	r1, #0
 8016d6c:	6878      	ldr	r0, [r7, #4]
 8016d6e:	f7ff f83f 	bl	8015df0 <dir_sdi>
 8016d72:	4603      	mov	r3, r0
 8016d74:	75fb      	strb	r3, [r7, #23]
 8016d76:	e043      	b.n	8016e00 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8016d78:	463b      	mov	r3, r7
 8016d7a:	4619      	mov	r1, r3
 8016d7c:	6878      	ldr	r0, [r7, #4]
 8016d7e:	f7ff fe1b 	bl	80169b8 <create_name>
 8016d82:	4603      	mov	r3, r0
 8016d84:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8016d86:	7dfb      	ldrb	r3, [r7, #23]
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d134      	bne.n	8016df6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8016d8c:	6878      	ldr	r0, [r7, #4]
 8016d8e:	f7ff fb7c 	bl	801648a <dir_find>
 8016d92:	4603      	mov	r3, r0
 8016d94:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016d9c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8016d9e:	7dfb      	ldrb	r3, [r7, #23]
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d00a      	beq.n	8016dba <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8016da4:	7dfb      	ldrb	r3, [r7, #23]
 8016da6:	2b04      	cmp	r3, #4
 8016da8:	d127      	bne.n	8016dfa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8016daa:	7afb      	ldrb	r3, [r7, #11]
 8016dac:	f003 0304 	and.w	r3, r3, #4
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	d122      	bne.n	8016dfa <follow_path+0xd2>
 8016db4:	2305      	movs	r3, #5
 8016db6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8016db8:	e01f      	b.n	8016dfa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8016dba:	7afb      	ldrb	r3, [r7, #11]
 8016dbc:	f003 0304 	and.w	r3, r3, #4
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	d11c      	bne.n	8016dfe <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8016dc4:	693b      	ldr	r3, [r7, #16]
 8016dc6:	799b      	ldrb	r3, [r3, #6]
 8016dc8:	f003 0310 	and.w	r3, r3, #16
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d102      	bne.n	8016dd6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8016dd0:	2305      	movs	r3, #5
 8016dd2:	75fb      	strb	r3, [r7, #23]
 8016dd4:	e014      	b.n	8016e00 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8016dd6:	68fb      	ldr	r3, [r7, #12]
 8016dd8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	695b      	ldr	r3, [r3, #20]
 8016de0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016de4:	4413      	add	r3, r2
 8016de6:	4619      	mov	r1, r3
 8016de8:	68f8      	ldr	r0, [r7, #12]
 8016dea:	f7ff f988 	bl	80160fe <ld_clust>
 8016dee:	4602      	mov	r2, r0
 8016df0:	693b      	ldr	r3, [r7, #16]
 8016df2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8016df4:	e7c0      	b.n	8016d78 <follow_path+0x50>
			if (res != FR_OK) break;
 8016df6:	bf00      	nop
 8016df8:	e002      	b.n	8016e00 <follow_path+0xd8>
				break;
 8016dfa:	bf00      	nop
 8016dfc:	e000      	b.n	8016e00 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8016dfe:	bf00      	nop
			}
		}
	}

	return res;
 8016e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8016e02:	4618      	mov	r0, r3
 8016e04:	3718      	adds	r7, #24
 8016e06:	46bd      	mov	sp, r7
 8016e08:	bd80      	pop	{r7, pc}

08016e0a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8016e0a:	b480      	push	{r7}
 8016e0c:	b087      	sub	sp, #28
 8016e0e:	af00      	add	r7, sp, #0
 8016e10:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8016e12:	f04f 33ff 	mov.w	r3, #4294967295
 8016e16:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	681b      	ldr	r3, [r3, #0]
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d031      	beq.n	8016e84 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	681b      	ldr	r3, [r3, #0]
 8016e24:	617b      	str	r3, [r7, #20]
 8016e26:	e002      	b.n	8016e2e <get_ldnumber+0x24>
 8016e28:	697b      	ldr	r3, [r7, #20]
 8016e2a:	3301      	adds	r3, #1
 8016e2c:	617b      	str	r3, [r7, #20]
 8016e2e:	697b      	ldr	r3, [r7, #20]
 8016e30:	781b      	ldrb	r3, [r3, #0]
 8016e32:	2b1f      	cmp	r3, #31
 8016e34:	d903      	bls.n	8016e3e <get_ldnumber+0x34>
 8016e36:	697b      	ldr	r3, [r7, #20]
 8016e38:	781b      	ldrb	r3, [r3, #0]
 8016e3a:	2b3a      	cmp	r3, #58	; 0x3a
 8016e3c:	d1f4      	bne.n	8016e28 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8016e3e:	697b      	ldr	r3, [r7, #20]
 8016e40:	781b      	ldrb	r3, [r3, #0]
 8016e42:	2b3a      	cmp	r3, #58	; 0x3a
 8016e44:	d11c      	bne.n	8016e80 <get_ldnumber+0x76>
			tp = *path;
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	681b      	ldr	r3, [r3, #0]
 8016e4a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8016e4c:	68fb      	ldr	r3, [r7, #12]
 8016e4e:	1c5a      	adds	r2, r3, #1
 8016e50:	60fa      	str	r2, [r7, #12]
 8016e52:	781b      	ldrb	r3, [r3, #0]
 8016e54:	3b30      	subs	r3, #48	; 0x30
 8016e56:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8016e58:	68bb      	ldr	r3, [r7, #8]
 8016e5a:	2b09      	cmp	r3, #9
 8016e5c:	d80e      	bhi.n	8016e7c <get_ldnumber+0x72>
 8016e5e:	68fa      	ldr	r2, [r7, #12]
 8016e60:	697b      	ldr	r3, [r7, #20]
 8016e62:	429a      	cmp	r2, r3
 8016e64:	d10a      	bne.n	8016e7c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8016e66:	68bb      	ldr	r3, [r7, #8]
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	d107      	bne.n	8016e7c <get_ldnumber+0x72>
					vol = (int)i;
 8016e6c:	68bb      	ldr	r3, [r7, #8]
 8016e6e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8016e70:	697b      	ldr	r3, [r7, #20]
 8016e72:	3301      	adds	r3, #1
 8016e74:	617b      	str	r3, [r7, #20]
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	697a      	ldr	r2, [r7, #20]
 8016e7a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8016e7c:	693b      	ldr	r3, [r7, #16]
 8016e7e:	e002      	b.n	8016e86 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8016e80:	2300      	movs	r3, #0
 8016e82:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8016e84:	693b      	ldr	r3, [r7, #16]
}
 8016e86:	4618      	mov	r0, r3
 8016e88:	371c      	adds	r7, #28
 8016e8a:	46bd      	mov	sp, r7
 8016e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e90:	4770      	bx	lr
	...

08016e94 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8016e94:	b580      	push	{r7, lr}
 8016e96:	b082      	sub	sp, #8
 8016e98:	af00      	add	r7, sp, #0
 8016e9a:	6078      	str	r0, [r7, #4]
 8016e9c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	2200      	movs	r2, #0
 8016ea2:	70da      	strb	r2, [r3, #3]
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8016eaa:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8016eac:	6839      	ldr	r1, [r7, #0]
 8016eae:	6878      	ldr	r0, [r7, #4]
 8016eb0:	f7fe fc1e 	bl	80156f0 <move_window>
 8016eb4:	4603      	mov	r3, r0
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d001      	beq.n	8016ebe <check_fs+0x2a>
 8016eba:	2304      	movs	r3, #4
 8016ebc:	e038      	b.n	8016f30 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	3334      	adds	r3, #52	; 0x34
 8016ec2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016ec6:	4618      	mov	r0, r3
 8016ec8:	f7fe f962 	bl	8015190 <ld_word>
 8016ecc:	4603      	mov	r3, r0
 8016ece:	461a      	mov	r2, r3
 8016ed0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016ed4:	429a      	cmp	r2, r3
 8016ed6:	d001      	beq.n	8016edc <check_fs+0x48>
 8016ed8:	2303      	movs	r3, #3
 8016eda:	e029      	b.n	8016f30 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016ee2:	2be9      	cmp	r3, #233	; 0xe9
 8016ee4:	d009      	beq.n	8016efa <check_fs+0x66>
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016eec:	2beb      	cmp	r3, #235	; 0xeb
 8016eee:	d11e      	bne.n	8016f2e <check_fs+0x9a>
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8016ef6:	2b90      	cmp	r3, #144	; 0x90
 8016ef8:	d119      	bne.n	8016f2e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	3334      	adds	r3, #52	; 0x34
 8016efe:	3336      	adds	r3, #54	; 0x36
 8016f00:	4618      	mov	r0, r3
 8016f02:	f7fe f95d 	bl	80151c0 <ld_dword>
 8016f06:	4603      	mov	r3, r0
 8016f08:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8016f0c:	4a0a      	ldr	r2, [pc, #40]	; (8016f38 <check_fs+0xa4>)
 8016f0e:	4293      	cmp	r3, r2
 8016f10:	d101      	bne.n	8016f16 <check_fs+0x82>
 8016f12:	2300      	movs	r3, #0
 8016f14:	e00c      	b.n	8016f30 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	3334      	adds	r3, #52	; 0x34
 8016f1a:	3352      	adds	r3, #82	; 0x52
 8016f1c:	4618      	mov	r0, r3
 8016f1e:	f7fe f94f 	bl	80151c0 <ld_dword>
 8016f22:	4603      	mov	r3, r0
 8016f24:	4a05      	ldr	r2, [pc, #20]	; (8016f3c <check_fs+0xa8>)
 8016f26:	4293      	cmp	r3, r2
 8016f28:	d101      	bne.n	8016f2e <check_fs+0x9a>
 8016f2a:	2300      	movs	r3, #0
 8016f2c:	e000      	b.n	8016f30 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8016f2e:	2302      	movs	r3, #2
}
 8016f30:	4618      	mov	r0, r3
 8016f32:	3708      	adds	r7, #8
 8016f34:	46bd      	mov	sp, r7
 8016f36:	bd80      	pop	{r7, pc}
 8016f38:	00544146 	.word	0x00544146
 8016f3c:	33544146 	.word	0x33544146

08016f40 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8016f40:	b580      	push	{r7, lr}
 8016f42:	b096      	sub	sp, #88	; 0x58
 8016f44:	af00      	add	r7, sp, #0
 8016f46:	60f8      	str	r0, [r7, #12]
 8016f48:	60b9      	str	r1, [r7, #8]
 8016f4a:	4613      	mov	r3, r2
 8016f4c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8016f4e:	68bb      	ldr	r3, [r7, #8]
 8016f50:	2200      	movs	r2, #0
 8016f52:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8016f54:	68f8      	ldr	r0, [r7, #12]
 8016f56:	f7ff ff58 	bl	8016e0a <get_ldnumber>
 8016f5a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8016f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	da01      	bge.n	8016f66 <find_volume+0x26>
 8016f62:	230b      	movs	r3, #11
 8016f64:	e230      	b.n	80173c8 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8016f66:	4aa1      	ldr	r2, [pc, #644]	; (80171ec <find_volume+0x2ac>)
 8016f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016f6e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8016f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d101      	bne.n	8016f7a <find_volume+0x3a>
 8016f76:	230c      	movs	r3, #12
 8016f78:	e226      	b.n	80173c8 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8016f7a:	68bb      	ldr	r3, [r7, #8]
 8016f7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016f7e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8016f80:	79fb      	ldrb	r3, [r7, #7]
 8016f82:	f023 0301 	bic.w	r3, r3, #1
 8016f86:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8016f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f8a:	781b      	ldrb	r3, [r3, #0]
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d01a      	beq.n	8016fc6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8016f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f92:	785b      	ldrb	r3, [r3, #1]
 8016f94:	4618      	mov	r0, r3
 8016f96:	f7fe f85d 	bl	8015054 <disk_status>
 8016f9a:	4603      	mov	r3, r0
 8016f9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8016fa0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016fa4:	f003 0301 	and.w	r3, r3, #1
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d10c      	bne.n	8016fc6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8016fac:	79fb      	ldrb	r3, [r7, #7]
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d007      	beq.n	8016fc2 <find_volume+0x82>
 8016fb2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016fb6:	f003 0304 	and.w	r3, r3, #4
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d001      	beq.n	8016fc2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8016fbe:	230a      	movs	r3, #10
 8016fc0:	e202      	b.n	80173c8 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 8016fc2:	2300      	movs	r3, #0
 8016fc4:	e200      	b.n	80173c8 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8016fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fc8:	2200      	movs	r2, #0
 8016fca:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8016fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016fce:	b2da      	uxtb	r2, r3
 8016fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fd2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8016fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fd6:	785b      	ldrb	r3, [r3, #1]
 8016fd8:	4618      	mov	r0, r3
 8016fda:	f7fe f855 	bl	8015088 <disk_initialize>
 8016fde:	4603      	mov	r3, r0
 8016fe0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8016fe4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016fe8:	f003 0301 	and.w	r3, r3, #1
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d001      	beq.n	8016ff4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8016ff0:	2303      	movs	r3, #3
 8016ff2:	e1e9      	b.n	80173c8 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8016ff4:	79fb      	ldrb	r3, [r7, #7]
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d007      	beq.n	801700a <find_volume+0xca>
 8016ffa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016ffe:	f003 0304 	and.w	r3, r3, #4
 8017002:	2b00      	cmp	r3, #0
 8017004:	d001      	beq.n	801700a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8017006:	230a      	movs	r3, #10
 8017008:	e1de      	b.n	80173c8 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801700a:	2300      	movs	r3, #0
 801700c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801700e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017010:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017012:	f7ff ff3f 	bl	8016e94 <check_fs>
 8017016:	4603      	mov	r3, r0
 8017018:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801701c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017020:	2b02      	cmp	r3, #2
 8017022:	d149      	bne.n	80170b8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8017024:	2300      	movs	r3, #0
 8017026:	643b      	str	r3, [r7, #64]	; 0x40
 8017028:	e01e      	b.n	8017068 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801702a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801702c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017032:	011b      	lsls	r3, r3, #4
 8017034:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8017038:	4413      	add	r3, r2
 801703a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801703c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801703e:	3304      	adds	r3, #4
 8017040:	781b      	ldrb	r3, [r3, #0]
 8017042:	2b00      	cmp	r3, #0
 8017044:	d006      	beq.n	8017054 <find_volume+0x114>
 8017046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017048:	3308      	adds	r3, #8
 801704a:	4618      	mov	r0, r3
 801704c:	f7fe f8b8 	bl	80151c0 <ld_dword>
 8017050:	4602      	mov	r2, r0
 8017052:	e000      	b.n	8017056 <find_volume+0x116>
 8017054:	2200      	movs	r2, #0
 8017056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017058:	009b      	lsls	r3, r3, #2
 801705a:	3358      	adds	r3, #88	; 0x58
 801705c:	443b      	add	r3, r7
 801705e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8017062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017064:	3301      	adds	r3, #1
 8017066:	643b      	str	r3, [r7, #64]	; 0x40
 8017068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801706a:	2b03      	cmp	r3, #3
 801706c:	d9dd      	bls.n	801702a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801706e:	2300      	movs	r3, #0
 8017070:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8017072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017074:	2b00      	cmp	r3, #0
 8017076:	d002      	beq.n	801707e <find_volume+0x13e>
 8017078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801707a:	3b01      	subs	r3, #1
 801707c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801707e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017080:	009b      	lsls	r3, r3, #2
 8017082:	3358      	adds	r3, #88	; 0x58
 8017084:	443b      	add	r3, r7
 8017086:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801708a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801708c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801708e:	2b00      	cmp	r3, #0
 8017090:	d005      	beq.n	801709e <find_volume+0x15e>
 8017092:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017094:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017096:	f7ff fefd 	bl	8016e94 <check_fs>
 801709a:	4603      	mov	r3, r0
 801709c:	e000      	b.n	80170a0 <find_volume+0x160>
 801709e:	2303      	movs	r3, #3
 80170a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80170a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80170a8:	2b01      	cmp	r3, #1
 80170aa:	d905      	bls.n	80170b8 <find_volume+0x178>
 80170ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80170ae:	3301      	adds	r3, #1
 80170b0:	643b      	str	r3, [r7, #64]	; 0x40
 80170b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80170b4:	2b03      	cmp	r3, #3
 80170b6:	d9e2      	bls.n	801707e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80170b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80170bc:	2b04      	cmp	r3, #4
 80170be:	d101      	bne.n	80170c4 <find_volume+0x184>
 80170c0:	2301      	movs	r3, #1
 80170c2:	e181      	b.n	80173c8 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80170c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80170c8:	2b01      	cmp	r3, #1
 80170ca:	d901      	bls.n	80170d0 <find_volume+0x190>
 80170cc:	230d      	movs	r3, #13
 80170ce:	e17b      	b.n	80173c8 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80170d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170d2:	3334      	adds	r3, #52	; 0x34
 80170d4:	330b      	adds	r3, #11
 80170d6:	4618      	mov	r0, r3
 80170d8:	f7fe f85a 	bl	8015190 <ld_word>
 80170dc:	4603      	mov	r3, r0
 80170de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80170e2:	d001      	beq.n	80170e8 <find_volume+0x1a8>
 80170e4:	230d      	movs	r3, #13
 80170e6:	e16f      	b.n	80173c8 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80170e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170ea:	3334      	adds	r3, #52	; 0x34
 80170ec:	3316      	adds	r3, #22
 80170ee:	4618      	mov	r0, r3
 80170f0:	f7fe f84e 	bl	8015190 <ld_word>
 80170f4:	4603      	mov	r3, r0
 80170f6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80170f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d106      	bne.n	801710c <find_volume+0x1cc>
 80170fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017100:	3334      	adds	r3, #52	; 0x34
 8017102:	3324      	adds	r3, #36	; 0x24
 8017104:	4618      	mov	r0, r3
 8017106:	f7fe f85b 	bl	80151c0 <ld_dword>
 801710a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801710c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801710e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017110:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8017112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017114:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8017118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801711a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801711c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801711e:	789b      	ldrb	r3, [r3, #2]
 8017120:	2b01      	cmp	r3, #1
 8017122:	d005      	beq.n	8017130 <find_volume+0x1f0>
 8017124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017126:	789b      	ldrb	r3, [r3, #2]
 8017128:	2b02      	cmp	r3, #2
 801712a:	d001      	beq.n	8017130 <find_volume+0x1f0>
 801712c:	230d      	movs	r3, #13
 801712e:	e14b      	b.n	80173c8 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8017130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017132:	789b      	ldrb	r3, [r3, #2]
 8017134:	461a      	mov	r2, r3
 8017136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017138:	fb02 f303 	mul.w	r3, r2, r3
 801713c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801713e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017140:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017144:	b29a      	uxth	r2, r3
 8017146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017148:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801714a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801714c:	895b      	ldrh	r3, [r3, #10]
 801714e:	2b00      	cmp	r3, #0
 8017150:	d008      	beq.n	8017164 <find_volume+0x224>
 8017152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017154:	895b      	ldrh	r3, [r3, #10]
 8017156:	461a      	mov	r2, r3
 8017158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801715a:	895b      	ldrh	r3, [r3, #10]
 801715c:	3b01      	subs	r3, #1
 801715e:	4013      	ands	r3, r2
 8017160:	2b00      	cmp	r3, #0
 8017162:	d001      	beq.n	8017168 <find_volume+0x228>
 8017164:	230d      	movs	r3, #13
 8017166:	e12f      	b.n	80173c8 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8017168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801716a:	3334      	adds	r3, #52	; 0x34
 801716c:	3311      	adds	r3, #17
 801716e:	4618      	mov	r0, r3
 8017170:	f7fe f80e 	bl	8015190 <ld_word>
 8017174:	4603      	mov	r3, r0
 8017176:	461a      	mov	r2, r3
 8017178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801717a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801717c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801717e:	891b      	ldrh	r3, [r3, #8]
 8017180:	f003 030f 	and.w	r3, r3, #15
 8017184:	b29b      	uxth	r3, r3
 8017186:	2b00      	cmp	r3, #0
 8017188:	d001      	beq.n	801718e <find_volume+0x24e>
 801718a:	230d      	movs	r3, #13
 801718c:	e11c      	b.n	80173c8 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801718e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017190:	3334      	adds	r3, #52	; 0x34
 8017192:	3313      	adds	r3, #19
 8017194:	4618      	mov	r0, r3
 8017196:	f7fd fffb 	bl	8015190 <ld_word>
 801719a:	4603      	mov	r3, r0
 801719c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801719e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d106      	bne.n	80171b2 <find_volume+0x272>
 80171a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171a6:	3334      	adds	r3, #52	; 0x34
 80171a8:	3320      	adds	r3, #32
 80171aa:	4618      	mov	r0, r3
 80171ac:	f7fe f808 	bl	80151c0 <ld_dword>
 80171b0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80171b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171b4:	3334      	adds	r3, #52	; 0x34
 80171b6:	330e      	adds	r3, #14
 80171b8:	4618      	mov	r0, r3
 80171ba:	f7fd ffe9 	bl	8015190 <ld_word>
 80171be:	4603      	mov	r3, r0
 80171c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80171c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d101      	bne.n	80171cc <find_volume+0x28c>
 80171c8:	230d      	movs	r3, #13
 80171ca:	e0fd      	b.n	80173c8 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80171cc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80171ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80171d0:	4413      	add	r3, r2
 80171d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80171d4:	8912      	ldrh	r2, [r2, #8]
 80171d6:	0912      	lsrs	r2, r2, #4
 80171d8:	b292      	uxth	r2, r2
 80171da:	4413      	add	r3, r2
 80171dc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80171de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80171e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171e2:	429a      	cmp	r2, r3
 80171e4:	d204      	bcs.n	80171f0 <find_volume+0x2b0>
 80171e6:	230d      	movs	r3, #13
 80171e8:	e0ee      	b.n	80173c8 <find_volume+0x488>
 80171ea:	bf00      	nop
 80171ec:	200009ec 	.word	0x200009ec
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80171f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80171f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171f4:	1ad3      	subs	r3, r2, r3
 80171f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80171f8:	8952      	ldrh	r2, [r2, #10]
 80171fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80171fe:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8017200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017202:	2b00      	cmp	r3, #0
 8017204:	d101      	bne.n	801720a <find_volume+0x2ca>
 8017206:	230d      	movs	r3, #13
 8017208:	e0de      	b.n	80173c8 <find_volume+0x488>
		fmt = FS_FAT32;
 801720a:	2303      	movs	r3, #3
 801720c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8017210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017212:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8017216:	4293      	cmp	r3, r2
 8017218:	d802      	bhi.n	8017220 <find_volume+0x2e0>
 801721a:	2302      	movs	r3, #2
 801721c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8017220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017222:	f640 72f5 	movw	r2, #4085	; 0xff5
 8017226:	4293      	cmp	r3, r2
 8017228:	d802      	bhi.n	8017230 <find_volume+0x2f0>
 801722a:	2301      	movs	r3, #1
 801722c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8017230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017232:	1c9a      	adds	r2, r3, #2
 8017234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017236:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8017238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801723a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801723c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801723e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017242:	441a      	add	r2, r3
 8017244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017246:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8017248:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801724a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801724c:	441a      	add	r2, r3
 801724e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017250:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8017252:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017256:	2b03      	cmp	r3, #3
 8017258:	d11e      	bne.n	8017298 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801725a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801725c:	3334      	adds	r3, #52	; 0x34
 801725e:	332a      	adds	r3, #42	; 0x2a
 8017260:	4618      	mov	r0, r3
 8017262:	f7fd ff95 	bl	8015190 <ld_word>
 8017266:	4603      	mov	r3, r0
 8017268:	2b00      	cmp	r3, #0
 801726a:	d001      	beq.n	8017270 <find_volume+0x330>
 801726c:	230d      	movs	r3, #13
 801726e:	e0ab      	b.n	80173c8 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8017270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017272:	891b      	ldrh	r3, [r3, #8]
 8017274:	2b00      	cmp	r3, #0
 8017276:	d001      	beq.n	801727c <find_volume+0x33c>
 8017278:	230d      	movs	r3, #13
 801727a:	e0a5      	b.n	80173c8 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801727c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801727e:	3334      	adds	r3, #52	; 0x34
 8017280:	332c      	adds	r3, #44	; 0x2c
 8017282:	4618      	mov	r0, r3
 8017284:	f7fd ff9c 	bl	80151c0 <ld_dword>
 8017288:	4602      	mov	r2, r0
 801728a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801728c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801728e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017290:	699b      	ldr	r3, [r3, #24]
 8017292:	009b      	lsls	r3, r3, #2
 8017294:	647b      	str	r3, [r7, #68]	; 0x44
 8017296:	e01f      	b.n	80172d8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8017298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801729a:	891b      	ldrh	r3, [r3, #8]
 801729c:	2b00      	cmp	r3, #0
 801729e:	d101      	bne.n	80172a4 <find_volume+0x364>
 80172a0:	230d      	movs	r3, #13
 80172a2:	e091      	b.n	80173c8 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80172a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80172a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80172aa:	441a      	add	r2, r3
 80172ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172ae:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80172b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80172b4:	2b02      	cmp	r3, #2
 80172b6:	d103      	bne.n	80172c0 <find_volume+0x380>
 80172b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172ba:	699b      	ldr	r3, [r3, #24]
 80172bc:	005b      	lsls	r3, r3, #1
 80172be:	e00a      	b.n	80172d6 <find_volume+0x396>
 80172c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172c2:	699a      	ldr	r2, [r3, #24]
 80172c4:	4613      	mov	r3, r2
 80172c6:	005b      	lsls	r3, r3, #1
 80172c8:	4413      	add	r3, r2
 80172ca:	085a      	lsrs	r2, r3, #1
 80172cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172ce:	699b      	ldr	r3, [r3, #24]
 80172d0:	f003 0301 	and.w	r3, r3, #1
 80172d4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80172d6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80172d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172da:	69da      	ldr	r2, [r3, #28]
 80172dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80172de:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80172e2:	0a5b      	lsrs	r3, r3, #9
 80172e4:	429a      	cmp	r2, r3
 80172e6:	d201      	bcs.n	80172ec <find_volume+0x3ac>
 80172e8:	230d      	movs	r3, #13
 80172ea:	e06d      	b.n	80173c8 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80172ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172ee:	f04f 32ff 	mov.w	r2, #4294967295
 80172f2:	615a      	str	r2, [r3, #20]
 80172f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172f6:	695a      	ldr	r2, [r3, #20]
 80172f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172fa:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80172fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172fe:	2280      	movs	r2, #128	; 0x80
 8017300:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8017302:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017306:	2b03      	cmp	r3, #3
 8017308:	d149      	bne.n	801739e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801730a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801730c:	3334      	adds	r3, #52	; 0x34
 801730e:	3330      	adds	r3, #48	; 0x30
 8017310:	4618      	mov	r0, r3
 8017312:	f7fd ff3d 	bl	8015190 <ld_word>
 8017316:	4603      	mov	r3, r0
 8017318:	2b01      	cmp	r3, #1
 801731a:	d140      	bne.n	801739e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 801731c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801731e:	3301      	adds	r3, #1
 8017320:	4619      	mov	r1, r3
 8017322:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017324:	f7fe f9e4 	bl	80156f0 <move_window>
 8017328:	4603      	mov	r3, r0
 801732a:	2b00      	cmp	r3, #0
 801732c:	d137      	bne.n	801739e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801732e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017330:	2200      	movs	r2, #0
 8017332:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8017334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017336:	3334      	adds	r3, #52	; 0x34
 8017338:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801733c:	4618      	mov	r0, r3
 801733e:	f7fd ff27 	bl	8015190 <ld_word>
 8017342:	4603      	mov	r3, r0
 8017344:	461a      	mov	r2, r3
 8017346:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801734a:	429a      	cmp	r2, r3
 801734c:	d127      	bne.n	801739e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801734e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017350:	3334      	adds	r3, #52	; 0x34
 8017352:	4618      	mov	r0, r3
 8017354:	f7fd ff34 	bl	80151c0 <ld_dword>
 8017358:	4603      	mov	r3, r0
 801735a:	4a1d      	ldr	r2, [pc, #116]	; (80173d0 <find_volume+0x490>)
 801735c:	4293      	cmp	r3, r2
 801735e:	d11e      	bne.n	801739e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8017360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017362:	3334      	adds	r3, #52	; 0x34
 8017364:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8017368:	4618      	mov	r0, r3
 801736a:	f7fd ff29 	bl	80151c0 <ld_dword>
 801736e:	4603      	mov	r3, r0
 8017370:	4a18      	ldr	r2, [pc, #96]	; (80173d4 <find_volume+0x494>)
 8017372:	4293      	cmp	r3, r2
 8017374:	d113      	bne.n	801739e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8017376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017378:	3334      	adds	r3, #52	; 0x34
 801737a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801737e:	4618      	mov	r0, r3
 8017380:	f7fd ff1e 	bl	80151c0 <ld_dword>
 8017384:	4602      	mov	r2, r0
 8017386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017388:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801738a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801738c:	3334      	adds	r3, #52	; 0x34
 801738e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8017392:	4618      	mov	r0, r3
 8017394:	f7fd ff14 	bl	80151c0 <ld_dword>
 8017398:	4602      	mov	r2, r0
 801739a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801739c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801739e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173a0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80173a4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80173a6:	4b0c      	ldr	r3, [pc, #48]	; (80173d8 <find_volume+0x498>)
 80173a8:	881b      	ldrh	r3, [r3, #0]
 80173aa:	3301      	adds	r3, #1
 80173ac:	b29a      	uxth	r2, r3
 80173ae:	4b0a      	ldr	r3, [pc, #40]	; (80173d8 <find_volume+0x498>)
 80173b0:	801a      	strh	r2, [r3, #0]
 80173b2:	4b09      	ldr	r3, [pc, #36]	; (80173d8 <find_volume+0x498>)
 80173b4:	881a      	ldrh	r2, [r3, #0]
 80173b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173b8:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80173ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173bc:	4a07      	ldr	r2, [pc, #28]	; (80173dc <find_volume+0x49c>)
 80173be:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80173c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80173c2:	f7fe f92d 	bl	8015620 <clear_lock>
#endif
	return FR_OK;
 80173c6:	2300      	movs	r3, #0
}
 80173c8:	4618      	mov	r0, r3
 80173ca:	3758      	adds	r7, #88	; 0x58
 80173cc:	46bd      	mov	sp, r7
 80173ce:	bd80      	pop	{r7, pc}
 80173d0:	41615252 	.word	0x41615252
 80173d4:	61417272 	.word	0x61417272
 80173d8:	200009f0 	.word	0x200009f0
 80173dc:	20000a14 	.word	0x20000a14

080173e0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80173e0:	b580      	push	{r7, lr}
 80173e2:	b084      	sub	sp, #16
 80173e4:	af00      	add	r7, sp, #0
 80173e6:	6078      	str	r0, [r7, #4]
 80173e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80173ea:	2309      	movs	r3, #9
 80173ec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d01c      	beq.n	801742e <validate+0x4e>
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d018      	beq.n	801742e <validate+0x4e>
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	681b      	ldr	r3, [r3, #0]
 8017400:	781b      	ldrb	r3, [r3, #0]
 8017402:	2b00      	cmp	r3, #0
 8017404:	d013      	beq.n	801742e <validate+0x4e>
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	889a      	ldrh	r2, [r3, #4]
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	681b      	ldr	r3, [r3, #0]
 801740e:	88db      	ldrh	r3, [r3, #6]
 8017410:	429a      	cmp	r2, r3
 8017412:	d10c      	bne.n	801742e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	681b      	ldr	r3, [r3, #0]
 8017418:	785b      	ldrb	r3, [r3, #1]
 801741a:	4618      	mov	r0, r3
 801741c:	f7fd fe1a 	bl	8015054 <disk_status>
 8017420:	4603      	mov	r3, r0
 8017422:	f003 0301 	and.w	r3, r3, #1
 8017426:	2b00      	cmp	r3, #0
 8017428:	d101      	bne.n	801742e <validate+0x4e>
			res = FR_OK;
 801742a:	2300      	movs	r3, #0
 801742c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801742e:	7bfb      	ldrb	r3, [r7, #15]
 8017430:	2b00      	cmp	r3, #0
 8017432:	d102      	bne.n	801743a <validate+0x5a>
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	681b      	ldr	r3, [r3, #0]
 8017438:	e000      	b.n	801743c <validate+0x5c>
 801743a:	2300      	movs	r3, #0
 801743c:	683a      	ldr	r2, [r7, #0]
 801743e:	6013      	str	r3, [r2, #0]
	return res;
 8017440:	7bfb      	ldrb	r3, [r7, #15]
}
 8017442:	4618      	mov	r0, r3
 8017444:	3710      	adds	r7, #16
 8017446:	46bd      	mov	sp, r7
 8017448:	bd80      	pop	{r7, pc}
	...

0801744c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801744c:	b580      	push	{r7, lr}
 801744e:	b088      	sub	sp, #32
 8017450:	af00      	add	r7, sp, #0
 8017452:	60f8      	str	r0, [r7, #12]
 8017454:	60b9      	str	r1, [r7, #8]
 8017456:	4613      	mov	r3, r2
 8017458:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801745a:	68bb      	ldr	r3, [r7, #8]
 801745c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801745e:	f107 0310 	add.w	r3, r7, #16
 8017462:	4618      	mov	r0, r3
 8017464:	f7ff fcd1 	bl	8016e0a <get_ldnumber>
 8017468:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801746a:	69fb      	ldr	r3, [r7, #28]
 801746c:	2b00      	cmp	r3, #0
 801746e:	da01      	bge.n	8017474 <f_mount+0x28>
 8017470:	230b      	movs	r3, #11
 8017472:	e02b      	b.n	80174cc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8017474:	4a17      	ldr	r2, [pc, #92]	; (80174d4 <f_mount+0x88>)
 8017476:	69fb      	ldr	r3, [r7, #28]
 8017478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801747c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801747e:	69bb      	ldr	r3, [r7, #24]
 8017480:	2b00      	cmp	r3, #0
 8017482:	d005      	beq.n	8017490 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8017484:	69b8      	ldr	r0, [r7, #24]
 8017486:	f7fe f8cb 	bl	8015620 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801748a:	69bb      	ldr	r3, [r7, #24]
 801748c:	2200      	movs	r2, #0
 801748e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8017490:	68fb      	ldr	r3, [r7, #12]
 8017492:	2b00      	cmp	r3, #0
 8017494:	d002      	beq.n	801749c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	2200      	movs	r2, #0
 801749a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801749c:	68fa      	ldr	r2, [r7, #12]
 801749e:	490d      	ldr	r1, [pc, #52]	; (80174d4 <f_mount+0x88>)
 80174a0:	69fb      	ldr	r3, [r7, #28]
 80174a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80174a6:	68fb      	ldr	r3, [r7, #12]
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d002      	beq.n	80174b2 <f_mount+0x66>
 80174ac:	79fb      	ldrb	r3, [r7, #7]
 80174ae:	2b01      	cmp	r3, #1
 80174b0:	d001      	beq.n	80174b6 <f_mount+0x6a>
 80174b2:	2300      	movs	r3, #0
 80174b4:	e00a      	b.n	80174cc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80174b6:	f107 010c 	add.w	r1, r7, #12
 80174ba:	f107 0308 	add.w	r3, r7, #8
 80174be:	2200      	movs	r2, #0
 80174c0:	4618      	mov	r0, r3
 80174c2:	f7ff fd3d 	bl	8016f40 <find_volume>
 80174c6:	4603      	mov	r3, r0
 80174c8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80174ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80174cc:	4618      	mov	r0, r3
 80174ce:	3720      	adds	r7, #32
 80174d0:	46bd      	mov	sp, r7
 80174d2:	bd80      	pop	{r7, pc}
 80174d4:	200009ec 	.word	0x200009ec

080174d8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80174d8:	b580      	push	{r7, lr}
 80174da:	b09a      	sub	sp, #104	; 0x68
 80174dc:	af00      	add	r7, sp, #0
 80174de:	60f8      	str	r0, [r7, #12]
 80174e0:	60b9      	str	r1, [r7, #8]
 80174e2:	4613      	mov	r3, r2
 80174e4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80174e6:	68fb      	ldr	r3, [r7, #12]
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d101      	bne.n	80174f0 <f_open+0x18>
 80174ec:	2309      	movs	r3, #9
 80174ee:	e1ad      	b.n	801784c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80174f0:	79fb      	ldrb	r3, [r7, #7]
 80174f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80174f6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80174f8:	79fa      	ldrb	r2, [r7, #7]
 80174fa:	f107 0114 	add.w	r1, r7, #20
 80174fe:	f107 0308 	add.w	r3, r7, #8
 8017502:	4618      	mov	r0, r3
 8017504:	f7ff fd1c 	bl	8016f40 <find_volume>
 8017508:	4603      	mov	r3, r0
 801750a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 801750e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017512:	2b00      	cmp	r3, #0
 8017514:	f040 8191 	bne.w	801783a <f_open+0x362>
		dj.obj.fs = fs;
 8017518:	697b      	ldr	r3, [r7, #20]
 801751a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801751c:	68ba      	ldr	r2, [r7, #8]
 801751e:	f107 0318 	add.w	r3, r7, #24
 8017522:	4611      	mov	r1, r2
 8017524:	4618      	mov	r0, r3
 8017526:	f7ff fbff 	bl	8016d28 <follow_path>
 801752a:	4603      	mov	r3, r0
 801752c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8017530:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017534:	2b00      	cmp	r3, #0
 8017536:	d11a      	bne.n	801756e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8017538:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801753c:	b25b      	sxtb	r3, r3
 801753e:	2b00      	cmp	r3, #0
 8017540:	da03      	bge.n	801754a <f_open+0x72>
				res = FR_INVALID_NAME;
 8017542:	2306      	movs	r3, #6
 8017544:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8017548:	e011      	b.n	801756e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801754a:	79fb      	ldrb	r3, [r7, #7]
 801754c:	f023 0301 	bic.w	r3, r3, #1
 8017550:	2b00      	cmp	r3, #0
 8017552:	bf14      	ite	ne
 8017554:	2301      	movne	r3, #1
 8017556:	2300      	moveq	r3, #0
 8017558:	b2db      	uxtb	r3, r3
 801755a:	461a      	mov	r2, r3
 801755c:	f107 0318 	add.w	r3, r7, #24
 8017560:	4611      	mov	r1, r2
 8017562:	4618      	mov	r0, r3
 8017564:	f7fd ff14 	bl	8015390 <chk_lock>
 8017568:	4603      	mov	r3, r0
 801756a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801756e:	79fb      	ldrb	r3, [r7, #7]
 8017570:	f003 031c 	and.w	r3, r3, #28
 8017574:	2b00      	cmp	r3, #0
 8017576:	d07f      	beq.n	8017678 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8017578:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801757c:	2b00      	cmp	r3, #0
 801757e:	d017      	beq.n	80175b0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8017580:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017584:	2b04      	cmp	r3, #4
 8017586:	d10e      	bne.n	80175a6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8017588:	f7fd ff5e 	bl	8015448 <enq_lock>
 801758c:	4603      	mov	r3, r0
 801758e:	2b00      	cmp	r3, #0
 8017590:	d006      	beq.n	80175a0 <f_open+0xc8>
 8017592:	f107 0318 	add.w	r3, r7, #24
 8017596:	4618      	mov	r0, r3
 8017598:	f7ff f838 	bl	801660c <dir_register>
 801759c:	4603      	mov	r3, r0
 801759e:	e000      	b.n	80175a2 <f_open+0xca>
 80175a0:	2312      	movs	r3, #18
 80175a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80175a6:	79fb      	ldrb	r3, [r7, #7]
 80175a8:	f043 0308 	orr.w	r3, r3, #8
 80175ac:	71fb      	strb	r3, [r7, #7]
 80175ae:	e010      	b.n	80175d2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80175b0:	7fbb      	ldrb	r3, [r7, #30]
 80175b2:	f003 0311 	and.w	r3, r3, #17
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d003      	beq.n	80175c2 <f_open+0xea>
					res = FR_DENIED;
 80175ba:	2307      	movs	r3, #7
 80175bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80175c0:	e007      	b.n	80175d2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80175c2:	79fb      	ldrb	r3, [r7, #7]
 80175c4:	f003 0304 	and.w	r3, r3, #4
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d002      	beq.n	80175d2 <f_open+0xfa>
 80175cc:	2308      	movs	r3, #8
 80175ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80175d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d168      	bne.n	80176ac <f_open+0x1d4>
 80175da:	79fb      	ldrb	r3, [r7, #7]
 80175dc:	f003 0308 	and.w	r3, r3, #8
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d063      	beq.n	80176ac <f_open+0x1d4>
				dw = GET_FATTIME();
 80175e4:	f7f8 fcba 	bl	800ff5c <get_fattime>
 80175e8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80175ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175ec:	330e      	adds	r3, #14
 80175ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80175f0:	4618      	mov	r0, r3
 80175f2:	f7fd fe23 	bl	801523c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80175f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175f8:	3316      	adds	r3, #22
 80175fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80175fc:	4618      	mov	r0, r3
 80175fe:	f7fd fe1d 	bl	801523c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8017602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017604:	330b      	adds	r3, #11
 8017606:	2220      	movs	r2, #32
 8017608:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801760a:	697b      	ldr	r3, [r7, #20]
 801760c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801760e:	4611      	mov	r1, r2
 8017610:	4618      	mov	r0, r3
 8017612:	f7fe fd74 	bl	80160fe <ld_clust>
 8017616:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8017618:	697b      	ldr	r3, [r7, #20]
 801761a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801761c:	2200      	movs	r2, #0
 801761e:	4618      	mov	r0, r3
 8017620:	f7fe fd8c 	bl	801613c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8017624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017626:	331c      	adds	r3, #28
 8017628:	2100      	movs	r1, #0
 801762a:	4618      	mov	r0, r3
 801762c:	f7fd fe06 	bl	801523c <st_dword>
					fs->wflag = 1;
 8017630:	697b      	ldr	r3, [r7, #20]
 8017632:	2201      	movs	r2, #1
 8017634:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8017636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017638:	2b00      	cmp	r3, #0
 801763a:	d037      	beq.n	80176ac <f_open+0x1d4>
						dw = fs->winsect;
 801763c:	697b      	ldr	r3, [r7, #20]
 801763e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017640:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8017642:	f107 0318 	add.w	r3, r7, #24
 8017646:	2200      	movs	r2, #0
 8017648:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801764a:	4618      	mov	r0, r3
 801764c:	f7fe fa9f 	bl	8015b8e <remove_chain>
 8017650:	4603      	mov	r3, r0
 8017652:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8017656:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801765a:	2b00      	cmp	r3, #0
 801765c:	d126      	bne.n	80176ac <f_open+0x1d4>
							res = move_window(fs, dw);
 801765e:	697b      	ldr	r3, [r7, #20]
 8017660:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8017662:	4618      	mov	r0, r3
 8017664:	f7fe f844 	bl	80156f0 <move_window>
 8017668:	4603      	mov	r3, r0
 801766a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801766e:	697b      	ldr	r3, [r7, #20]
 8017670:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017672:	3a01      	subs	r2, #1
 8017674:	611a      	str	r2, [r3, #16]
 8017676:	e019      	b.n	80176ac <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8017678:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801767c:	2b00      	cmp	r3, #0
 801767e:	d115      	bne.n	80176ac <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8017680:	7fbb      	ldrb	r3, [r7, #30]
 8017682:	f003 0310 	and.w	r3, r3, #16
 8017686:	2b00      	cmp	r3, #0
 8017688:	d003      	beq.n	8017692 <f_open+0x1ba>
					res = FR_NO_FILE;
 801768a:	2304      	movs	r3, #4
 801768c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8017690:	e00c      	b.n	80176ac <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8017692:	79fb      	ldrb	r3, [r7, #7]
 8017694:	f003 0302 	and.w	r3, r3, #2
 8017698:	2b00      	cmp	r3, #0
 801769a:	d007      	beq.n	80176ac <f_open+0x1d4>
 801769c:	7fbb      	ldrb	r3, [r7, #30]
 801769e:	f003 0301 	and.w	r3, r3, #1
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	d002      	beq.n	80176ac <f_open+0x1d4>
						res = FR_DENIED;
 80176a6:	2307      	movs	r3, #7
 80176a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80176ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d128      	bne.n	8017706 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80176b4:	79fb      	ldrb	r3, [r7, #7]
 80176b6:	f003 0308 	and.w	r3, r3, #8
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d003      	beq.n	80176c6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80176be:	79fb      	ldrb	r3, [r7, #7]
 80176c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80176c4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80176c6:	697b      	ldr	r3, [r7, #20]
 80176c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80176ca:	68fb      	ldr	r3, [r7, #12]
 80176cc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80176ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80176d0:	68fb      	ldr	r3, [r7, #12]
 80176d2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80176d4:	79fb      	ldrb	r3, [r7, #7]
 80176d6:	f023 0301 	bic.w	r3, r3, #1
 80176da:	2b00      	cmp	r3, #0
 80176dc:	bf14      	ite	ne
 80176de:	2301      	movne	r3, #1
 80176e0:	2300      	moveq	r3, #0
 80176e2:	b2db      	uxtb	r3, r3
 80176e4:	461a      	mov	r2, r3
 80176e6:	f107 0318 	add.w	r3, r7, #24
 80176ea:	4611      	mov	r1, r2
 80176ec:	4618      	mov	r0, r3
 80176ee:	f7fd fecd 	bl	801548c <inc_lock>
 80176f2:	4602      	mov	r2, r0
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80176f8:	68fb      	ldr	r3, [r7, #12]
 80176fa:	691b      	ldr	r3, [r3, #16]
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	d102      	bne.n	8017706 <f_open+0x22e>
 8017700:	2302      	movs	r3, #2
 8017702:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8017706:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801770a:	2b00      	cmp	r3, #0
 801770c:	f040 8095 	bne.w	801783a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8017710:	697b      	ldr	r3, [r7, #20]
 8017712:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017714:	4611      	mov	r1, r2
 8017716:	4618      	mov	r0, r3
 8017718:	f7fe fcf1 	bl	80160fe <ld_clust>
 801771c:	4602      	mov	r2, r0
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8017722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017724:	331c      	adds	r3, #28
 8017726:	4618      	mov	r0, r3
 8017728:	f7fd fd4a 	bl	80151c0 <ld_dword>
 801772c:	4602      	mov	r2, r0
 801772e:	68fb      	ldr	r3, [r7, #12]
 8017730:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8017732:	68fb      	ldr	r3, [r7, #12]
 8017734:	2200      	movs	r2, #0
 8017736:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8017738:	697a      	ldr	r2, [r7, #20]
 801773a:	68fb      	ldr	r3, [r7, #12]
 801773c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801773e:	697b      	ldr	r3, [r7, #20]
 8017740:	88da      	ldrh	r2, [r3, #6]
 8017742:	68fb      	ldr	r3, [r7, #12]
 8017744:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8017746:	68fb      	ldr	r3, [r7, #12]
 8017748:	79fa      	ldrb	r2, [r7, #7]
 801774a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801774c:	68fb      	ldr	r3, [r7, #12]
 801774e:	2200      	movs	r2, #0
 8017750:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8017752:	68fb      	ldr	r3, [r7, #12]
 8017754:	2200      	movs	r2, #0
 8017756:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8017758:	68fb      	ldr	r3, [r7, #12]
 801775a:	2200      	movs	r2, #0
 801775c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801775e:	68fb      	ldr	r3, [r7, #12]
 8017760:	3330      	adds	r3, #48	; 0x30
 8017762:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017766:	2100      	movs	r1, #0
 8017768:	4618      	mov	r0, r3
 801776a:	f7fd fdb4 	bl	80152d6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801776e:	79fb      	ldrb	r3, [r7, #7]
 8017770:	f003 0320 	and.w	r3, r3, #32
 8017774:	2b00      	cmp	r3, #0
 8017776:	d060      	beq.n	801783a <f_open+0x362>
 8017778:	68fb      	ldr	r3, [r7, #12]
 801777a:	68db      	ldr	r3, [r3, #12]
 801777c:	2b00      	cmp	r3, #0
 801777e:	d05c      	beq.n	801783a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8017780:	68fb      	ldr	r3, [r7, #12]
 8017782:	68da      	ldr	r2, [r3, #12]
 8017784:	68fb      	ldr	r3, [r7, #12]
 8017786:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8017788:	697b      	ldr	r3, [r7, #20]
 801778a:	895b      	ldrh	r3, [r3, #10]
 801778c:	025b      	lsls	r3, r3, #9
 801778e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	689b      	ldr	r3, [r3, #8]
 8017794:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8017796:	68fb      	ldr	r3, [r7, #12]
 8017798:	68db      	ldr	r3, [r3, #12]
 801779a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801779c:	e016      	b.n	80177cc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801779e:	68fb      	ldr	r3, [r7, #12]
 80177a0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80177a2:	4618      	mov	r0, r3
 80177a4:	f7fe f85f 	bl	8015866 <get_fat>
 80177a8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80177aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80177ac:	2b01      	cmp	r3, #1
 80177ae:	d802      	bhi.n	80177b6 <f_open+0x2de>
 80177b0:	2302      	movs	r3, #2
 80177b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80177b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80177b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80177bc:	d102      	bne.n	80177c4 <f_open+0x2ec>
 80177be:	2301      	movs	r3, #1
 80177c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80177c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80177c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80177c8:	1ad3      	subs	r3, r2, r3
 80177ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80177cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d103      	bne.n	80177dc <f_open+0x304>
 80177d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80177d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80177d8:	429a      	cmp	r2, r3
 80177da:	d8e0      	bhi.n	801779e <f_open+0x2c6>
				}
				fp->clust = clst;
 80177dc:	68fb      	ldr	r3, [r7, #12]
 80177de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80177e0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80177e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d127      	bne.n	801783a <f_open+0x362>
 80177ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80177ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d022      	beq.n	801783a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80177f4:	697b      	ldr	r3, [r7, #20]
 80177f6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80177f8:	4618      	mov	r0, r3
 80177fa:	f7fe f815 	bl	8015828 <clust2sect>
 80177fe:	64f8      	str	r0, [r7, #76]	; 0x4c
 8017800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017802:	2b00      	cmp	r3, #0
 8017804:	d103      	bne.n	801780e <f_open+0x336>
						res = FR_INT_ERR;
 8017806:	2302      	movs	r3, #2
 8017808:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801780c:	e015      	b.n	801783a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801780e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017810:	0a5a      	lsrs	r2, r3, #9
 8017812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017814:	441a      	add	r2, r3
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801781a:	697b      	ldr	r3, [r7, #20]
 801781c:	7858      	ldrb	r0, [r3, #1]
 801781e:	68fb      	ldr	r3, [r7, #12]
 8017820:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017824:	68fb      	ldr	r3, [r7, #12]
 8017826:	6a1a      	ldr	r2, [r3, #32]
 8017828:	2301      	movs	r3, #1
 801782a:	f7fd fc53 	bl	80150d4 <disk_read>
 801782e:	4603      	mov	r3, r0
 8017830:	2b00      	cmp	r3, #0
 8017832:	d002      	beq.n	801783a <f_open+0x362>
 8017834:	2301      	movs	r3, #1
 8017836:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801783a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801783e:	2b00      	cmp	r3, #0
 8017840:	d002      	beq.n	8017848 <f_open+0x370>
 8017842:	68fb      	ldr	r3, [r7, #12]
 8017844:	2200      	movs	r2, #0
 8017846:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8017848:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 801784c:	4618      	mov	r0, r3
 801784e:	3768      	adds	r7, #104	; 0x68
 8017850:	46bd      	mov	sp, r7
 8017852:	bd80      	pop	{r7, pc}

08017854 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8017854:	b580      	push	{r7, lr}
 8017856:	b08c      	sub	sp, #48	; 0x30
 8017858:	af00      	add	r7, sp, #0
 801785a:	60f8      	str	r0, [r7, #12]
 801785c:	60b9      	str	r1, [r7, #8]
 801785e:	607a      	str	r2, [r7, #4]
 8017860:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8017862:	68bb      	ldr	r3, [r7, #8]
 8017864:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8017866:	683b      	ldr	r3, [r7, #0]
 8017868:	2200      	movs	r2, #0
 801786a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801786c:	68fb      	ldr	r3, [r7, #12]
 801786e:	f107 0210 	add.w	r2, r7, #16
 8017872:	4611      	mov	r1, r2
 8017874:	4618      	mov	r0, r3
 8017876:	f7ff fdb3 	bl	80173e0 <validate>
 801787a:	4603      	mov	r3, r0
 801787c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8017880:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017884:	2b00      	cmp	r3, #0
 8017886:	d107      	bne.n	8017898 <f_write+0x44>
 8017888:	68fb      	ldr	r3, [r7, #12]
 801788a:	7d5b      	ldrb	r3, [r3, #21]
 801788c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8017890:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017894:	2b00      	cmp	r3, #0
 8017896:	d002      	beq.n	801789e <f_write+0x4a>
 8017898:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801789c:	e14b      	b.n	8017b36 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801789e:	68fb      	ldr	r3, [r7, #12]
 80178a0:	7d1b      	ldrb	r3, [r3, #20]
 80178a2:	f003 0302 	and.w	r3, r3, #2
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d101      	bne.n	80178ae <f_write+0x5a>
 80178aa:	2307      	movs	r3, #7
 80178ac:	e143      	b.n	8017b36 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80178ae:	68fb      	ldr	r3, [r7, #12]
 80178b0:	699a      	ldr	r2, [r3, #24]
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	441a      	add	r2, r3
 80178b6:	68fb      	ldr	r3, [r7, #12]
 80178b8:	699b      	ldr	r3, [r3, #24]
 80178ba:	429a      	cmp	r2, r3
 80178bc:	f080 812d 	bcs.w	8017b1a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80178c0:	68fb      	ldr	r3, [r7, #12]
 80178c2:	699b      	ldr	r3, [r3, #24]
 80178c4:	43db      	mvns	r3, r3
 80178c6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80178c8:	e127      	b.n	8017b1a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80178ca:	68fb      	ldr	r3, [r7, #12]
 80178cc:	699b      	ldr	r3, [r3, #24]
 80178ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	f040 80e3 	bne.w	8017a9e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80178d8:	68fb      	ldr	r3, [r7, #12]
 80178da:	699b      	ldr	r3, [r3, #24]
 80178dc:	0a5b      	lsrs	r3, r3, #9
 80178de:	693a      	ldr	r2, [r7, #16]
 80178e0:	8952      	ldrh	r2, [r2, #10]
 80178e2:	3a01      	subs	r2, #1
 80178e4:	4013      	ands	r3, r2
 80178e6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80178e8:	69bb      	ldr	r3, [r7, #24]
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d143      	bne.n	8017976 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80178ee:	68fb      	ldr	r3, [r7, #12]
 80178f0:	699b      	ldr	r3, [r3, #24]
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d10c      	bne.n	8017910 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80178f6:	68fb      	ldr	r3, [r7, #12]
 80178f8:	689b      	ldr	r3, [r3, #8]
 80178fa:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80178fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178fe:	2b00      	cmp	r3, #0
 8017900:	d11a      	bne.n	8017938 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8017902:	68fb      	ldr	r3, [r7, #12]
 8017904:	2100      	movs	r1, #0
 8017906:	4618      	mov	r0, r3
 8017908:	f7fe f9a6 	bl	8015c58 <create_chain>
 801790c:	62b8      	str	r0, [r7, #40]	; 0x28
 801790e:	e013      	b.n	8017938 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8017910:	68fb      	ldr	r3, [r7, #12]
 8017912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017914:	2b00      	cmp	r3, #0
 8017916:	d007      	beq.n	8017928 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8017918:	68fb      	ldr	r3, [r7, #12]
 801791a:	699b      	ldr	r3, [r3, #24]
 801791c:	4619      	mov	r1, r3
 801791e:	68f8      	ldr	r0, [r7, #12]
 8017920:	f7fe fa32 	bl	8015d88 <clmt_clust>
 8017924:	62b8      	str	r0, [r7, #40]	; 0x28
 8017926:	e007      	b.n	8017938 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8017928:	68fa      	ldr	r2, [r7, #12]
 801792a:	68fb      	ldr	r3, [r7, #12]
 801792c:	69db      	ldr	r3, [r3, #28]
 801792e:	4619      	mov	r1, r3
 8017930:	4610      	mov	r0, r2
 8017932:	f7fe f991 	bl	8015c58 <create_chain>
 8017936:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8017938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801793a:	2b00      	cmp	r3, #0
 801793c:	f000 80f2 	beq.w	8017b24 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8017940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017942:	2b01      	cmp	r3, #1
 8017944:	d104      	bne.n	8017950 <f_write+0xfc>
 8017946:	68fb      	ldr	r3, [r7, #12]
 8017948:	2202      	movs	r2, #2
 801794a:	755a      	strb	r2, [r3, #21]
 801794c:	2302      	movs	r3, #2
 801794e:	e0f2      	b.n	8017b36 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8017950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017956:	d104      	bne.n	8017962 <f_write+0x10e>
 8017958:	68fb      	ldr	r3, [r7, #12]
 801795a:	2201      	movs	r2, #1
 801795c:	755a      	strb	r2, [r3, #21]
 801795e:	2301      	movs	r3, #1
 8017960:	e0e9      	b.n	8017b36 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8017962:	68fb      	ldr	r3, [r7, #12]
 8017964:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017966:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8017968:	68fb      	ldr	r3, [r7, #12]
 801796a:	689b      	ldr	r3, [r3, #8]
 801796c:	2b00      	cmp	r3, #0
 801796e:	d102      	bne.n	8017976 <f_write+0x122>
 8017970:	68fb      	ldr	r3, [r7, #12]
 8017972:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017974:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8017976:	68fb      	ldr	r3, [r7, #12]
 8017978:	7d1b      	ldrb	r3, [r3, #20]
 801797a:	b25b      	sxtb	r3, r3
 801797c:	2b00      	cmp	r3, #0
 801797e:	da18      	bge.n	80179b2 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017980:	693b      	ldr	r3, [r7, #16]
 8017982:	7858      	ldrb	r0, [r3, #1]
 8017984:	68fb      	ldr	r3, [r7, #12]
 8017986:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801798a:	68fb      	ldr	r3, [r7, #12]
 801798c:	6a1a      	ldr	r2, [r3, #32]
 801798e:	2301      	movs	r3, #1
 8017990:	f7fd fbc0 	bl	8015114 <disk_write>
 8017994:	4603      	mov	r3, r0
 8017996:	2b00      	cmp	r3, #0
 8017998:	d004      	beq.n	80179a4 <f_write+0x150>
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	2201      	movs	r2, #1
 801799e:	755a      	strb	r2, [r3, #21]
 80179a0:	2301      	movs	r3, #1
 80179a2:	e0c8      	b.n	8017b36 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80179a4:	68fb      	ldr	r3, [r7, #12]
 80179a6:	7d1b      	ldrb	r3, [r3, #20]
 80179a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80179ac:	b2da      	uxtb	r2, r3
 80179ae:	68fb      	ldr	r3, [r7, #12]
 80179b0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80179b2:	693a      	ldr	r2, [r7, #16]
 80179b4:	68fb      	ldr	r3, [r7, #12]
 80179b6:	69db      	ldr	r3, [r3, #28]
 80179b8:	4619      	mov	r1, r3
 80179ba:	4610      	mov	r0, r2
 80179bc:	f7fd ff34 	bl	8015828 <clust2sect>
 80179c0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80179c2:	697b      	ldr	r3, [r7, #20]
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d104      	bne.n	80179d2 <f_write+0x17e>
 80179c8:	68fb      	ldr	r3, [r7, #12]
 80179ca:	2202      	movs	r2, #2
 80179cc:	755a      	strb	r2, [r3, #21]
 80179ce:	2302      	movs	r3, #2
 80179d0:	e0b1      	b.n	8017b36 <f_write+0x2e2>
			sect += csect;
 80179d2:	697a      	ldr	r2, [r7, #20]
 80179d4:	69bb      	ldr	r3, [r7, #24]
 80179d6:	4413      	add	r3, r2
 80179d8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	0a5b      	lsrs	r3, r3, #9
 80179de:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80179e0:	6a3b      	ldr	r3, [r7, #32]
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d03c      	beq.n	8017a60 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80179e6:	69ba      	ldr	r2, [r7, #24]
 80179e8:	6a3b      	ldr	r3, [r7, #32]
 80179ea:	4413      	add	r3, r2
 80179ec:	693a      	ldr	r2, [r7, #16]
 80179ee:	8952      	ldrh	r2, [r2, #10]
 80179f0:	4293      	cmp	r3, r2
 80179f2:	d905      	bls.n	8017a00 <f_write+0x1ac>
					cc = fs->csize - csect;
 80179f4:	693b      	ldr	r3, [r7, #16]
 80179f6:	895b      	ldrh	r3, [r3, #10]
 80179f8:	461a      	mov	r2, r3
 80179fa:	69bb      	ldr	r3, [r7, #24]
 80179fc:	1ad3      	subs	r3, r2, r3
 80179fe:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017a00:	693b      	ldr	r3, [r7, #16]
 8017a02:	7858      	ldrb	r0, [r3, #1]
 8017a04:	6a3b      	ldr	r3, [r7, #32]
 8017a06:	697a      	ldr	r2, [r7, #20]
 8017a08:	69f9      	ldr	r1, [r7, #28]
 8017a0a:	f7fd fb83 	bl	8015114 <disk_write>
 8017a0e:	4603      	mov	r3, r0
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	d004      	beq.n	8017a1e <f_write+0x1ca>
 8017a14:	68fb      	ldr	r3, [r7, #12]
 8017a16:	2201      	movs	r2, #1
 8017a18:	755a      	strb	r2, [r3, #21]
 8017a1a:	2301      	movs	r3, #1
 8017a1c:	e08b      	b.n	8017b36 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8017a1e:	68fb      	ldr	r3, [r7, #12]
 8017a20:	6a1a      	ldr	r2, [r3, #32]
 8017a22:	697b      	ldr	r3, [r7, #20]
 8017a24:	1ad3      	subs	r3, r2, r3
 8017a26:	6a3a      	ldr	r2, [r7, #32]
 8017a28:	429a      	cmp	r2, r3
 8017a2a:	d915      	bls.n	8017a58 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8017a2c:	68fb      	ldr	r3, [r7, #12]
 8017a2e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8017a32:	68fb      	ldr	r3, [r7, #12]
 8017a34:	6a1a      	ldr	r2, [r3, #32]
 8017a36:	697b      	ldr	r3, [r7, #20]
 8017a38:	1ad3      	subs	r3, r2, r3
 8017a3a:	025b      	lsls	r3, r3, #9
 8017a3c:	69fa      	ldr	r2, [r7, #28]
 8017a3e:	4413      	add	r3, r2
 8017a40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017a44:	4619      	mov	r1, r3
 8017a46:	f7fd fc25 	bl	8015294 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8017a4a:	68fb      	ldr	r3, [r7, #12]
 8017a4c:	7d1b      	ldrb	r3, [r3, #20]
 8017a4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017a52:	b2da      	uxtb	r2, r3
 8017a54:	68fb      	ldr	r3, [r7, #12]
 8017a56:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8017a58:	6a3b      	ldr	r3, [r7, #32]
 8017a5a:	025b      	lsls	r3, r3, #9
 8017a5c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8017a5e:	e03f      	b.n	8017ae0 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8017a60:	68fb      	ldr	r3, [r7, #12]
 8017a62:	6a1b      	ldr	r3, [r3, #32]
 8017a64:	697a      	ldr	r2, [r7, #20]
 8017a66:	429a      	cmp	r2, r3
 8017a68:	d016      	beq.n	8017a98 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8017a6a:	68fb      	ldr	r3, [r7, #12]
 8017a6c:	699a      	ldr	r2, [r3, #24]
 8017a6e:	68fb      	ldr	r3, [r7, #12]
 8017a70:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8017a72:	429a      	cmp	r2, r3
 8017a74:	d210      	bcs.n	8017a98 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8017a76:	693b      	ldr	r3, [r7, #16]
 8017a78:	7858      	ldrb	r0, [r3, #1]
 8017a7a:	68fb      	ldr	r3, [r7, #12]
 8017a7c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017a80:	2301      	movs	r3, #1
 8017a82:	697a      	ldr	r2, [r7, #20]
 8017a84:	f7fd fb26 	bl	80150d4 <disk_read>
 8017a88:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d004      	beq.n	8017a98 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8017a8e:	68fb      	ldr	r3, [r7, #12]
 8017a90:	2201      	movs	r2, #1
 8017a92:	755a      	strb	r2, [r3, #21]
 8017a94:	2301      	movs	r3, #1
 8017a96:	e04e      	b.n	8017b36 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8017a98:	68fb      	ldr	r3, [r7, #12]
 8017a9a:	697a      	ldr	r2, [r7, #20]
 8017a9c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8017a9e:	68fb      	ldr	r3, [r7, #12]
 8017aa0:	699b      	ldr	r3, [r3, #24]
 8017aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017aa6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8017aaa:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8017aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	429a      	cmp	r2, r3
 8017ab2:	d901      	bls.n	8017ab8 <f_write+0x264>
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8017ab8:	68fb      	ldr	r3, [r7, #12]
 8017aba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017abe:	68fb      	ldr	r3, [r7, #12]
 8017ac0:	699b      	ldr	r3, [r3, #24]
 8017ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017ac6:	4413      	add	r3, r2
 8017ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017aca:	69f9      	ldr	r1, [r7, #28]
 8017acc:	4618      	mov	r0, r3
 8017ace:	f7fd fbe1 	bl	8015294 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8017ad2:	68fb      	ldr	r3, [r7, #12]
 8017ad4:	7d1b      	ldrb	r3, [r3, #20]
 8017ad6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8017ada:	b2da      	uxtb	r2, r3
 8017adc:	68fb      	ldr	r3, [r7, #12]
 8017ade:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8017ae0:	69fa      	ldr	r2, [r7, #28]
 8017ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ae4:	4413      	add	r3, r2
 8017ae6:	61fb      	str	r3, [r7, #28]
 8017ae8:	68fb      	ldr	r3, [r7, #12]
 8017aea:	699a      	ldr	r2, [r3, #24]
 8017aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aee:	441a      	add	r2, r3
 8017af0:	68fb      	ldr	r3, [r7, #12]
 8017af2:	619a      	str	r2, [r3, #24]
 8017af4:	68fb      	ldr	r3, [r7, #12]
 8017af6:	68da      	ldr	r2, [r3, #12]
 8017af8:	68fb      	ldr	r3, [r7, #12]
 8017afa:	699b      	ldr	r3, [r3, #24]
 8017afc:	429a      	cmp	r2, r3
 8017afe:	bf38      	it	cc
 8017b00:	461a      	movcc	r2, r3
 8017b02:	68fb      	ldr	r3, [r7, #12]
 8017b04:	60da      	str	r2, [r3, #12]
 8017b06:	683b      	ldr	r3, [r7, #0]
 8017b08:	681a      	ldr	r2, [r3, #0]
 8017b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b0c:	441a      	add	r2, r3
 8017b0e:	683b      	ldr	r3, [r7, #0]
 8017b10:	601a      	str	r2, [r3, #0]
 8017b12:	687a      	ldr	r2, [r7, #4]
 8017b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b16:	1ad3      	subs	r3, r2, r3
 8017b18:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	f47f aed4 	bne.w	80178ca <f_write+0x76>
 8017b22:	e000      	b.n	8017b26 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8017b24:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8017b26:	68fb      	ldr	r3, [r7, #12]
 8017b28:	7d1b      	ldrb	r3, [r3, #20]
 8017b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017b2e:	b2da      	uxtb	r2, r3
 8017b30:	68fb      	ldr	r3, [r7, #12]
 8017b32:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8017b34:	2300      	movs	r3, #0
}
 8017b36:	4618      	mov	r0, r3
 8017b38:	3730      	adds	r7, #48	; 0x30
 8017b3a:	46bd      	mov	sp, r7
 8017b3c:	bd80      	pop	{r7, pc}

08017b3e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8017b3e:	b580      	push	{r7, lr}
 8017b40:	b086      	sub	sp, #24
 8017b42:	af00      	add	r7, sp, #0
 8017b44:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	f107 0208 	add.w	r2, r7, #8
 8017b4c:	4611      	mov	r1, r2
 8017b4e:	4618      	mov	r0, r3
 8017b50:	f7ff fc46 	bl	80173e0 <validate>
 8017b54:	4603      	mov	r3, r0
 8017b56:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017b58:	7dfb      	ldrb	r3, [r7, #23]
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d168      	bne.n	8017c30 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	7d1b      	ldrb	r3, [r3, #20]
 8017b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d062      	beq.n	8017c30 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	7d1b      	ldrb	r3, [r3, #20]
 8017b6e:	b25b      	sxtb	r3, r3
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	da15      	bge.n	8017ba0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8017b74:	68bb      	ldr	r3, [r7, #8]
 8017b76:	7858      	ldrb	r0, [r3, #1]
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	6a1a      	ldr	r2, [r3, #32]
 8017b82:	2301      	movs	r3, #1
 8017b84:	f7fd fac6 	bl	8015114 <disk_write>
 8017b88:	4603      	mov	r3, r0
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d001      	beq.n	8017b92 <f_sync+0x54>
 8017b8e:	2301      	movs	r3, #1
 8017b90:	e04f      	b.n	8017c32 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	7d1b      	ldrb	r3, [r3, #20]
 8017b96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017b9a:	b2da      	uxtb	r2, r3
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8017ba0:	f7f8 f9dc 	bl	800ff5c <get_fattime>
 8017ba4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8017ba6:	68ba      	ldr	r2, [r7, #8]
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bac:	4619      	mov	r1, r3
 8017bae:	4610      	mov	r0, r2
 8017bb0:	f7fd fd9e 	bl	80156f0 <move_window>
 8017bb4:	4603      	mov	r3, r0
 8017bb6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8017bb8:	7dfb      	ldrb	r3, [r7, #23]
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d138      	bne.n	8017c30 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017bc2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8017bc4:	68fb      	ldr	r3, [r7, #12]
 8017bc6:	330b      	adds	r3, #11
 8017bc8:	781a      	ldrb	r2, [r3, #0]
 8017bca:	68fb      	ldr	r3, [r7, #12]
 8017bcc:	330b      	adds	r3, #11
 8017bce:	f042 0220 	orr.w	r2, r2, #32
 8017bd2:	b2d2      	uxtb	r2, r2
 8017bd4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	6818      	ldr	r0, [r3, #0]
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	689b      	ldr	r3, [r3, #8]
 8017bde:	461a      	mov	r2, r3
 8017be0:	68f9      	ldr	r1, [r7, #12]
 8017be2:	f7fe faab 	bl	801613c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8017be6:	68fb      	ldr	r3, [r7, #12]
 8017be8:	f103 021c 	add.w	r2, r3, #28
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	68db      	ldr	r3, [r3, #12]
 8017bf0:	4619      	mov	r1, r3
 8017bf2:	4610      	mov	r0, r2
 8017bf4:	f7fd fb22 	bl	801523c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8017bf8:	68fb      	ldr	r3, [r7, #12]
 8017bfa:	3316      	adds	r3, #22
 8017bfc:	6939      	ldr	r1, [r7, #16]
 8017bfe:	4618      	mov	r0, r3
 8017c00:	f7fd fb1c 	bl	801523c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	3312      	adds	r3, #18
 8017c08:	2100      	movs	r1, #0
 8017c0a:	4618      	mov	r0, r3
 8017c0c:	f7fd fafb 	bl	8015206 <st_word>
					fs->wflag = 1;
 8017c10:	68bb      	ldr	r3, [r7, #8]
 8017c12:	2201      	movs	r2, #1
 8017c14:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8017c16:	68bb      	ldr	r3, [r7, #8]
 8017c18:	4618      	mov	r0, r3
 8017c1a:	f7fd fd97 	bl	801574c <sync_fs>
 8017c1e:	4603      	mov	r3, r0
 8017c20:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	7d1b      	ldrb	r3, [r3, #20]
 8017c26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017c2a:	b2da      	uxtb	r2, r3
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8017c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8017c32:	4618      	mov	r0, r3
 8017c34:	3718      	adds	r7, #24
 8017c36:	46bd      	mov	sp, r7
 8017c38:	bd80      	pop	{r7, pc}

08017c3a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8017c3a:	b580      	push	{r7, lr}
 8017c3c:	b084      	sub	sp, #16
 8017c3e:	af00      	add	r7, sp, #0
 8017c40:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8017c42:	6878      	ldr	r0, [r7, #4]
 8017c44:	f7ff ff7b 	bl	8017b3e <f_sync>
 8017c48:	4603      	mov	r3, r0
 8017c4a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8017c4c:	7bfb      	ldrb	r3, [r7, #15]
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	d118      	bne.n	8017c84 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	f107 0208 	add.w	r2, r7, #8
 8017c58:	4611      	mov	r1, r2
 8017c5a:	4618      	mov	r0, r3
 8017c5c:	f7ff fbc0 	bl	80173e0 <validate>
 8017c60:	4603      	mov	r3, r0
 8017c62:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8017c64:	7bfb      	ldrb	r3, [r7, #15]
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	d10c      	bne.n	8017c84 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	691b      	ldr	r3, [r3, #16]
 8017c6e:	4618      	mov	r0, r3
 8017c70:	f7fd fc9a 	bl	80155a8 <dec_lock>
 8017c74:	4603      	mov	r3, r0
 8017c76:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8017c78:	7bfb      	ldrb	r3, [r7, #15]
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d102      	bne.n	8017c84 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	2200      	movs	r2, #0
 8017c82:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8017c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8017c86:	4618      	mov	r0, r3
 8017c88:	3710      	adds	r7, #16
 8017c8a:	46bd      	mov	sp, r7
 8017c8c:	bd80      	pop	{r7, pc}

08017c8e <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8017c8e:	b580      	push	{r7, lr}
 8017c90:	b090      	sub	sp, #64	; 0x40
 8017c92:	af00      	add	r7, sp, #0
 8017c94:	6078      	str	r0, [r7, #4]
 8017c96:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8017c98:	f107 0108 	add.w	r1, r7, #8
 8017c9c:	1d3b      	adds	r3, r7, #4
 8017c9e:	2200      	movs	r2, #0
 8017ca0:	4618      	mov	r0, r3
 8017ca2:	f7ff f94d 	bl	8016f40 <find_volume>
 8017ca6:	4603      	mov	r3, r0
 8017ca8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8017cac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d11f      	bne.n	8017cf4 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8017cb4:	687a      	ldr	r2, [r7, #4]
 8017cb6:	f107 0308 	add.w	r3, r7, #8
 8017cba:	4611      	mov	r1, r2
 8017cbc:	4618      	mov	r0, r3
 8017cbe:	f7ff f833 	bl	8016d28 <follow_path>
 8017cc2:	4603      	mov	r3, r0
 8017cc4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8017cc8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d111      	bne.n	8017cf4 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8017cd0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017cd4:	b25b      	sxtb	r3, r3
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	da03      	bge.n	8017ce2 <f_stat+0x54>
				res = FR_INVALID_NAME;
 8017cda:	2306      	movs	r3, #6
 8017cdc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8017ce0:	e008      	b.n	8017cf4 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8017ce2:	683b      	ldr	r3, [r7, #0]
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d005      	beq.n	8017cf4 <f_stat+0x66>
 8017ce8:	f107 0308 	add.w	r3, r7, #8
 8017cec:	6839      	ldr	r1, [r7, #0]
 8017cee:	4618      	mov	r0, r3
 8017cf0:	f7fe fd84 	bl	80167fc <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8017cf4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8017cf8:	4618      	mov	r0, r3
 8017cfa:	3740      	adds	r7, #64	; 0x40
 8017cfc:	46bd      	mov	sp, r7
 8017cfe:	bd80      	pop	{r7, pc}

08017d00 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8017d00:	b480      	push	{r7}
 8017d02:	b087      	sub	sp, #28
 8017d04:	af00      	add	r7, sp, #0
 8017d06:	60f8      	str	r0, [r7, #12]
 8017d08:	60b9      	str	r1, [r7, #8]
 8017d0a:	4613      	mov	r3, r2
 8017d0c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8017d0e:	2301      	movs	r3, #1
 8017d10:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8017d12:	2300      	movs	r3, #0
 8017d14:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8017d16:	4b1f      	ldr	r3, [pc, #124]	; (8017d94 <FATFS_LinkDriverEx+0x94>)
 8017d18:	7a5b      	ldrb	r3, [r3, #9]
 8017d1a:	b2db      	uxtb	r3, r3
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d131      	bne.n	8017d84 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8017d20:	4b1c      	ldr	r3, [pc, #112]	; (8017d94 <FATFS_LinkDriverEx+0x94>)
 8017d22:	7a5b      	ldrb	r3, [r3, #9]
 8017d24:	b2db      	uxtb	r3, r3
 8017d26:	461a      	mov	r2, r3
 8017d28:	4b1a      	ldr	r3, [pc, #104]	; (8017d94 <FATFS_LinkDriverEx+0x94>)
 8017d2a:	2100      	movs	r1, #0
 8017d2c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8017d2e:	4b19      	ldr	r3, [pc, #100]	; (8017d94 <FATFS_LinkDriverEx+0x94>)
 8017d30:	7a5b      	ldrb	r3, [r3, #9]
 8017d32:	b2db      	uxtb	r3, r3
 8017d34:	4a17      	ldr	r2, [pc, #92]	; (8017d94 <FATFS_LinkDriverEx+0x94>)
 8017d36:	009b      	lsls	r3, r3, #2
 8017d38:	4413      	add	r3, r2
 8017d3a:	68fa      	ldr	r2, [r7, #12]
 8017d3c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8017d3e:	4b15      	ldr	r3, [pc, #84]	; (8017d94 <FATFS_LinkDriverEx+0x94>)
 8017d40:	7a5b      	ldrb	r3, [r3, #9]
 8017d42:	b2db      	uxtb	r3, r3
 8017d44:	461a      	mov	r2, r3
 8017d46:	4b13      	ldr	r3, [pc, #76]	; (8017d94 <FATFS_LinkDriverEx+0x94>)
 8017d48:	4413      	add	r3, r2
 8017d4a:	79fa      	ldrb	r2, [r7, #7]
 8017d4c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8017d4e:	4b11      	ldr	r3, [pc, #68]	; (8017d94 <FATFS_LinkDriverEx+0x94>)
 8017d50:	7a5b      	ldrb	r3, [r3, #9]
 8017d52:	b2db      	uxtb	r3, r3
 8017d54:	1c5a      	adds	r2, r3, #1
 8017d56:	b2d1      	uxtb	r1, r2
 8017d58:	4a0e      	ldr	r2, [pc, #56]	; (8017d94 <FATFS_LinkDriverEx+0x94>)
 8017d5a:	7251      	strb	r1, [r2, #9]
 8017d5c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8017d5e:	7dbb      	ldrb	r3, [r7, #22]
 8017d60:	3330      	adds	r3, #48	; 0x30
 8017d62:	b2da      	uxtb	r2, r3
 8017d64:	68bb      	ldr	r3, [r7, #8]
 8017d66:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8017d68:	68bb      	ldr	r3, [r7, #8]
 8017d6a:	3301      	adds	r3, #1
 8017d6c:	223a      	movs	r2, #58	; 0x3a
 8017d6e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8017d70:	68bb      	ldr	r3, [r7, #8]
 8017d72:	3302      	adds	r3, #2
 8017d74:	222f      	movs	r2, #47	; 0x2f
 8017d76:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8017d78:	68bb      	ldr	r3, [r7, #8]
 8017d7a:	3303      	adds	r3, #3
 8017d7c:	2200      	movs	r2, #0
 8017d7e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8017d80:	2300      	movs	r3, #0
 8017d82:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8017d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8017d86:	4618      	mov	r0, r3
 8017d88:	371c      	adds	r7, #28
 8017d8a:	46bd      	mov	sp, r7
 8017d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d90:	4770      	bx	lr
 8017d92:	bf00      	nop
 8017d94:	20000c14 	.word	0x20000c14

08017d98 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8017d98:	b580      	push	{r7, lr}
 8017d9a:	b082      	sub	sp, #8
 8017d9c:	af00      	add	r7, sp, #0
 8017d9e:	6078      	str	r0, [r7, #4]
 8017da0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8017da2:	2200      	movs	r2, #0
 8017da4:	6839      	ldr	r1, [r7, #0]
 8017da6:	6878      	ldr	r0, [r7, #4]
 8017da8:	f7ff ffaa 	bl	8017d00 <FATFS_LinkDriverEx>
 8017dac:	4603      	mov	r3, r0
}
 8017dae:	4618      	mov	r0, r3
 8017db0:	3708      	adds	r7, #8
 8017db2:	46bd      	mov	sp, r7
 8017db4:	bd80      	pop	{r7, pc}
	...

08017db8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8017db8:	b480      	push	{r7}
 8017dba:	b085      	sub	sp, #20
 8017dbc:	af00      	add	r7, sp, #0
 8017dbe:	4603      	mov	r3, r0
 8017dc0:	6039      	str	r1, [r7, #0]
 8017dc2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8017dc4:	88fb      	ldrh	r3, [r7, #6]
 8017dc6:	2b7f      	cmp	r3, #127	; 0x7f
 8017dc8:	d802      	bhi.n	8017dd0 <ff_convert+0x18>
		c = chr;
 8017dca:	88fb      	ldrh	r3, [r7, #6]
 8017dcc:	81fb      	strh	r3, [r7, #14]
 8017dce:	e025      	b.n	8017e1c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8017dd0:	683b      	ldr	r3, [r7, #0]
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	d00b      	beq.n	8017dee <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8017dd6:	88fb      	ldrh	r3, [r7, #6]
 8017dd8:	2bff      	cmp	r3, #255	; 0xff
 8017dda:	d805      	bhi.n	8017de8 <ff_convert+0x30>
 8017ddc:	88fb      	ldrh	r3, [r7, #6]
 8017dde:	3b80      	subs	r3, #128	; 0x80
 8017de0:	4a12      	ldr	r2, [pc, #72]	; (8017e2c <ff_convert+0x74>)
 8017de2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017de6:	e000      	b.n	8017dea <ff_convert+0x32>
 8017de8:	2300      	movs	r3, #0
 8017dea:	81fb      	strh	r3, [r7, #14]
 8017dec:	e016      	b.n	8017e1c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8017dee:	2300      	movs	r3, #0
 8017df0:	81fb      	strh	r3, [r7, #14]
 8017df2:	e009      	b.n	8017e08 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8017df4:	89fb      	ldrh	r3, [r7, #14]
 8017df6:	4a0d      	ldr	r2, [pc, #52]	; (8017e2c <ff_convert+0x74>)
 8017df8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017dfc:	88fa      	ldrh	r2, [r7, #6]
 8017dfe:	429a      	cmp	r2, r3
 8017e00:	d006      	beq.n	8017e10 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8017e02:	89fb      	ldrh	r3, [r7, #14]
 8017e04:	3301      	adds	r3, #1
 8017e06:	81fb      	strh	r3, [r7, #14]
 8017e08:	89fb      	ldrh	r3, [r7, #14]
 8017e0a:	2b7f      	cmp	r3, #127	; 0x7f
 8017e0c:	d9f2      	bls.n	8017df4 <ff_convert+0x3c>
 8017e0e:	e000      	b.n	8017e12 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8017e10:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8017e12:	89fb      	ldrh	r3, [r7, #14]
 8017e14:	3380      	adds	r3, #128	; 0x80
 8017e16:	b29b      	uxth	r3, r3
 8017e18:	b2db      	uxtb	r3, r3
 8017e1a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8017e1c:	89fb      	ldrh	r3, [r7, #14]
}
 8017e1e:	4618      	mov	r0, r3
 8017e20:	3714      	adds	r7, #20
 8017e22:	46bd      	mov	sp, r7
 8017e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e28:	4770      	bx	lr
 8017e2a:	bf00      	nop
 8017e2c:	0801fcd4 	.word	0x0801fcd4

08017e30 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8017e30:	b480      	push	{r7}
 8017e32:	b087      	sub	sp, #28
 8017e34:	af00      	add	r7, sp, #0
 8017e36:	4603      	mov	r3, r0
 8017e38:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8017e3a:	88fb      	ldrh	r3, [r7, #6]
 8017e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017e40:	d201      	bcs.n	8017e46 <ff_wtoupper+0x16>
 8017e42:	4b3e      	ldr	r3, [pc, #248]	; (8017f3c <ff_wtoupper+0x10c>)
 8017e44:	e000      	b.n	8017e48 <ff_wtoupper+0x18>
 8017e46:	4b3e      	ldr	r3, [pc, #248]	; (8017f40 <ff_wtoupper+0x110>)
 8017e48:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8017e4a:	697b      	ldr	r3, [r7, #20]
 8017e4c:	1c9a      	adds	r2, r3, #2
 8017e4e:	617a      	str	r2, [r7, #20]
 8017e50:	881b      	ldrh	r3, [r3, #0]
 8017e52:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8017e54:	8a7b      	ldrh	r3, [r7, #18]
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d068      	beq.n	8017f2c <ff_wtoupper+0xfc>
 8017e5a:	88fa      	ldrh	r2, [r7, #6]
 8017e5c:	8a7b      	ldrh	r3, [r7, #18]
 8017e5e:	429a      	cmp	r2, r3
 8017e60:	d364      	bcc.n	8017f2c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8017e62:	697b      	ldr	r3, [r7, #20]
 8017e64:	1c9a      	adds	r2, r3, #2
 8017e66:	617a      	str	r2, [r7, #20]
 8017e68:	881b      	ldrh	r3, [r3, #0]
 8017e6a:	823b      	strh	r3, [r7, #16]
 8017e6c:	8a3b      	ldrh	r3, [r7, #16]
 8017e6e:	0a1b      	lsrs	r3, r3, #8
 8017e70:	81fb      	strh	r3, [r7, #14]
 8017e72:	8a3b      	ldrh	r3, [r7, #16]
 8017e74:	b2db      	uxtb	r3, r3
 8017e76:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8017e78:	88fa      	ldrh	r2, [r7, #6]
 8017e7a:	8a79      	ldrh	r1, [r7, #18]
 8017e7c:	8a3b      	ldrh	r3, [r7, #16]
 8017e7e:	440b      	add	r3, r1
 8017e80:	429a      	cmp	r2, r3
 8017e82:	da49      	bge.n	8017f18 <ff_wtoupper+0xe8>
			switch (cmd) {
 8017e84:	89fb      	ldrh	r3, [r7, #14]
 8017e86:	2b08      	cmp	r3, #8
 8017e88:	d84f      	bhi.n	8017f2a <ff_wtoupper+0xfa>
 8017e8a:	a201      	add	r2, pc, #4	; (adr r2, 8017e90 <ff_wtoupper+0x60>)
 8017e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017e90:	08017eb5 	.word	0x08017eb5
 8017e94:	08017ec7 	.word	0x08017ec7
 8017e98:	08017edd 	.word	0x08017edd
 8017e9c:	08017ee5 	.word	0x08017ee5
 8017ea0:	08017eed 	.word	0x08017eed
 8017ea4:	08017ef5 	.word	0x08017ef5
 8017ea8:	08017efd 	.word	0x08017efd
 8017eac:	08017f05 	.word	0x08017f05
 8017eb0:	08017f0d 	.word	0x08017f0d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8017eb4:	88fa      	ldrh	r2, [r7, #6]
 8017eb6:	8a7b      	ldrh	r3, [r7, #18]
 8017eb8:	1ad3      	subs	r3, r2, r3
 8017eba:	005b      	lsls	r3, r3, #1
 8017ebc:	697a      	ldr	r2, [r7, #20]
 8017ebe:	4413      	add	r3, r2
 8017ec0:	881b      	ldrh	r3, [r3, #0]
 8017ec2:	80fb      	strh	r3, [r7, #6]
 8017ec4:	e027      	b.n	8017f16 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8017ec6:	88fa      	ldrh	r2, [r7, #6]
 8017ec8:	8a7b      	ldrh	r3, [r7, #18]
 8017eca:	1ad3      	subs	r3, r2, r3
 8017ecc:	b29b      	uxth	r3, r3
 8017ece:	f003 0301 	and.w	r3, r3, #1
 8017ed2:	b29b      	uxth	r3, r3
 8017ed4:	88fa      	ldrh	r2, [r7, #6]
 8017ed6:	1ad3      	subs	r3, r2, r3
 8017ed8:	80fb      	strh	r3, [r7, #6]
 8017eda:	e01c      	b.n	8017f16 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8017edc:	88fb      	ldrh	r3, [r7, #6]
 8017ede:	3b10      	subs	r3, #16
 8017ee0:	80fb      	strh	r3, [r7, #6]
 8017ee2:	e018      	b.n	8017f16 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8017ee4:	88fb      	ldrh	r3, [r7, #6]
 8017ee6:	3b20      	subs	r3, #32
 8017ee8:	80fb      	strh	r3, [r7, #6]
 8017eea:	e014      	b.n	8017f16 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8017eec:	88fb      	ldrh	r3, [r7, #6]
 8017eee:	3b30      	subs	r3, #48	; 0x30
 8017ef0:	80fb      	strh	r3, [r7, #6]
 8017ef2:	e010      	b.n	8017f16 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8017ef4:	88fb      	ldrh	r3, [r7, #6]
 8017ef6:	3b1a      	subs	r3, #26
 8017ef8:	80fb      	strh	r3, [r7, #6]
 8017efa:	e00c      	b.n	8017f16 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8017efc:	88fb      	ldrh	r3, [r7, #6]
 8017efe:	3308      	adds	r3, #8
 8017f00:	80fb      	strh	r3, [r7, #6]
 8017f02:	e008      	b.n	8017f16 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8017f04:	88fb      	ldrh	r3, [r7, #6]
 8017f06:	3b50      	subs	r3, #80	; 0x50
 8017f08:	80fb      	strh	r3, [r7, #6]
 8017f0a:	e004      	b.n	8017f16 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8017f0c:	88fb      	ldrh	r3, [r7, #6]
 8017f0e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8017f12:	80fb      	strh	r3, [r7, #6]
 8017f14:	bf00      	nop
			}
			break;
 8017f16:	e008      	b.n	8017f2a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8017f18:	89fb      	ldrh	r3, [r7, #14]
 8017f1a:	2b00      	cmp	r3, #0
 8017f1c:	d195      	bne.n	8017e4a <ff_wtoupper+0x1a>
 8017f1e:	8a3b      	ldrh	r3, [r7, #16]
 8017f20:	005b      	lsls	r3, r3, #1
 8017f22:	697a      	ldr	r2, [r7, #20]
 8017f24:	4413      	add	r3, r2
 8017f26:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8017f28:	e78f      	b.n	8017e4a <ff_wtoupper+0x1a>
			break;
 8017f2a:	bf00      	nop
	}

	return chr;
 8017f2c:	88fb      	ldrh	r3, [r7, #6]
}
 8017f2e:	4618      	mov	r0, r3
 8017f30:	371c      	adds	r7, #28
 8017f32:	46bd      	mov	sp, r7
 8017f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f38:	4770      	bx	lr
 8017f3a:	bf00      	nop
 8017f3c:	0801fdd4 	.word	0x0801fdd4
 8017f40:	0801ffc8 	.word	0x0801ffc8

08017f44 <Mount_SD>:
//			}
//	}
//}

FRESULT Mount_SD (const TCHAR* path)
{
 8017f44:	b580      	push	{r7, lr}
 8017f46:	b082      	sub	sp, #8
 8017f48:	af00      	add	r7, sp, #0
 8017f4a:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8017f4c:	2201      	movs	r2, #1
 8017f4e:	6879      	ldr	r1, [r7, #4]
 8017f50:	480e      	ldr	r0, [pc, #56]	; (8017f8c <Mount_SD+0x48>)
 8017f52:	f7ff fa7b 	bl	801744c <f_mount>
 8017f56:	4603      	mov	r3, r0
 8017f58:	461a      	mov	r2, r3
 8017f5a:	4b0d      	ldr	r3, [pc, #52]	; (8017f90 <Mount_SD+0x4c>)
 8017f5c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 8017f5e:	4b0c      	ldr	r3, [pc, #48]	; (8017f90 <Mount_SD+0x4c>)
 8017f60:	781b      	ldrb	r3, [r3, #0]
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	d006      	beq.n	8017f74 <Mount_SD+0x30>
		if(sdioPrints) printf("ERROR!!! in mounting SD CARD...\n");
 8017f66:	2300      	movs	r3, #0
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	d009      	beq.n	8017f80 <Mount_SD+0x3c>
 8017f6c:	4809      	ldr	r0, [pc, #36]	; (8017f94 <Mount_SD+0x50>)
 8017f6e:	f002 fbd5 	bl	801a71c <puts>
 8017f72:	e005      	b.n	8017f80 <Mount_SD+0x3c>
	}
	else if(sdioPrints) printf("SD CARD mounted successfully...\n");
 8017f74:	2300      	movs	r3, #0
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d002      	beq.n	8017f80 <Mount_SD+0x3c>
 8017f7a:	4807      	ldr	r0, [pc, #28]	; (8017f98 <Mount_SD+0x54>)
 8017f7c:	f002 fbce 	bl	801a71c <puts>

	return fresult;
 8017f80:	4b03      	ldr	r3, [pc, #12]	; (8017f90 <Mount_SD+0x4c>)
 8017f82:	781b      	ldrb	r3, [r3, #0]
}
 8017f84:	4618      	mov	r0, r3
 8017f86:	3708      	adds	r7, #8
 8017f88:	46bd      	mov	sp, r7
 8017f8a:	bd80      	pop	{r7, pc}
 8017f8c:	20000c20 	.word	0x20000c20
 8017f90:	2000119c 	.word	0x2000119c
 8017f94:	0801f434 	.word	0x0801f434
 8017f98:	0801f454 	.word	0x0801f454

08017f9c <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 8017f9c:	b580      	push	{r7, lr}
 8017f9e:	b082      	sub	sp, #8
 8017fa0:	af00      	add	r7, sp, #0
 8017fa2:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8017fa4:	2201      	movs	r2, #1
 8017fa6:	6879      	ldr	r1, [r7, #4]
 8017fa8:	2000      	movs	r0, #0
 8017faa:	f7ff fa4f 	bl	801744c <f_mount>
 8017fae:	4603      	mov	r3, r0
 8017fb0:	461a      	mov	r2, r3
 8017fb2:	4b0b      	ldr	r3, [pc, #44]	; (8017fe0 <Unmount_SD+0x44>)
 8017fb4:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) {
 8017fb6:	4b0a      	ldr	r3, [pc, #40]	; (8017fe0 <Unmount_SD+0x44>)
 8017fb8:	781b      	ldrb	r3, [r3, #0]
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	d106      	bne.n	8017fcc <Unmount_SD+0x30>
		if(sdioPrints) printf("SD CARD UNMOUNTED successfully...\n\n");
 8017fbe:	2300      	movs	r3, #0
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d009      	beq.n	8017fd8 <Unmount_SD+0x3c>
 8017fc4:	4807      	ldr	r0, [pc, #28]	; (8017fe4 <Unmount_SD+0x48>)
 8017fc6:	f002 fba9 	bl	801a71c <puts>
	}
	else if(sdioPrints) printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
}
 8017fca:	e005      	b.n	8017fd8 <Unmount_SD+0x3c>
	else if(sdioPrints) printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
 8017fcc:	2300      	movs	r3, #0
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d002      	beq.n	8017fd8 <Unmount_SD+0x3c>
 8017fd2:	4805      	ldr	r0, [pc, #20]	; (8017fe8 <Unmount_SD+0x4c>)
 8017fd4:	f002 fba2 	bl	801a71c <puts>
}
 8017fd8:	bf00      	nop
 8017fda:	3708      	adds	r7, #8
 8017fdc:	46bd      	mov	sp, r7
 8017fde:	bd80      	pop	{r7, pc}
 8017fe0:	2000119c 	.word	0x2000119c
 8017fe4:	0801f474 	.word	0x0801f474
 8017fe8:	0801f498 	.word	0x0801f498

08017fec <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8017fec:	b580      	push	{r7, lr}
 8017fee:	b088      	sub	sp, #32
 8017ff0:	af00      	add	r7, sp, #0
 8017ff2:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8017ff4:	494c      	ldr	r1, [pc, #304]	; (8018128 <Create_File+0x13c>)
 8017ff6:	6878      	ldr	r0, [r7, #4]
 8017ff8:	f7ff fe49 	bl	8017c8e <f_stat>
 8017ffc:	4603      	mov	r3, r0
 8017ffe:	461a      	mov	r2, r3
 8018000:	4b4a      	ldr	r3, [pc, #296]	; (801812c <Create_File+0x140>)
 8018002:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8018004:	4b49      	ldr	r3, [pc, #292]	; (801812c <Create_File+0x140>)
 8018006:	781b      	ldrb	r3, [r3, #0]
 8018008:	2b00      	cmp	r3, #0
 801800a:	d118      	bne.n	801803e <Create_File+0x52>
	{
		file_already_exist = 1; //file is alrready there so now we dont create csv header
 801800c:	4b48      	ldr	r3, [pc, #288]	; (8018130 <Create_File+0x144>)
 801800e:	2201      	movs	r2, #1
 8018010:	701a      	strb	r2, [r3, #0]
		char *buf = malloc(100*sizeof(char));
 8018012:	2064      	movs	r0, #100	; 0x64
 8018014:	f001 fb62 	bl	80196dc <malloc>
 8018018:	4603      	mov	r3, r0
 801801a:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n",name);
 801801c:	687a      	ldr	r2, [r7, #4]
 801801e:	4945      	ldr	r1, [pc, #276]	; (8018134 <Create_File+0x148>)
 8018020:	68f8      	ldr	r0, [r7, #12]
 8018022:	f002 fb99 	bl	801a758 <siprintf>
		if(sdioPrints) printf(buf);
 8018026:	2300      	movs	r3, #0
 8018028:	2b00      	cmp	r3, #0
 801802a:	d002      	beq.n	8018032 <Create_File+0x46>
 801802c:	68f8      	ldr	r0, [r7, #12]
 801802e:	f002 faef 	bl	801a610 <iprintf>
		free(buf);
 8018032:	68f8      	ldr	r0, [r7, #12]
 8018034:	f001 fb5a 	bl	80196ec <free>
	    return fresult;
 8018038:	4b3c      	ldr	r3, [pc, #240]	; (801812c <Create_File+0x140>)
 801803a:	781b      	ldrb	r3, [r3, #0]
 801803c:	e06f      	b.n	801811e <Create_File+0x132>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 801803e:	220b      	movs	r2, #11
 8018040:	6879      	ldr	r1, [r7, #4]
 8018042:	483d      	ldr	r0, [pc, #244]	; (8018138 <Create_File+0x14c>)
 8018044:	f7ff fa48 	bl	80174d8 <f_open>
 8018048:	4603      	mov	r3, r0
 801804a:	461a      	mov	r2, r3
 801804c:	4b37      	ldr	r3, [pc, #220]	; (801812c <Create_File+0x140>)
 801804e:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8018050:	4b36      	ldr	r3, [pc, #216]	; (801812c <Create_File+0x140>)
 8018052:	781b      	ldrb	r3, [r3, #0]
 8018054:	2b00      	cmp	r3, #0
 8018056:	d018      	beq.n	801808a <Create_File+0x9e>
		{
			char *buf = malloc(100*sizeof(char));
 8018058:	2064      	movs	r0, #100	; 0x64
 801805a:	f001 fb3f 	bl	80196dc <malloc>
 801805e:	4603      	mov	r3, r0
 8018060:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n", fresult, name);
 8018062:	4b32      	ldr	r3, [pc, #200]	; (801812c <Create_File+0x140>)
 8018064:	781b      	ldrb	r3, [r3, #0]
 8018066:	461a      	mov	r2, r3
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	4934      	ldr	r1, [pc, #208]	; (801813c <Create_File+0x150>)
 801806c:	6938      	ldr	r0, [r7, #16]
 801806e:	f002 fb73 	bl	801a758 <siprintf>
			if(sdioPrints) printf(buf);
 8018072:	2300      	movs	r3, #0
 8018074:	2b00      	cmp	r3, #0
 8018076:	d002      	beq.n	801807e <Create_File+0x92>
 8018078:	6938      	ldr	r0, [r7, #16]
 801807a:	f002 fac9 	bl	801a610 <iprintf>
			free(buf);
 801807e:	6938      	ldr	r0, [r7, #16]
 8018080:	f001 fb34 	bl	80196ec <free>
		    return fresult;
 8018084:	4b29      	ldr	r3, [pc, #164]	; (801812c <Create_File+0x140>)
 8018086:	781b      	ldrb	r3, [r3, #0]
 8018088:	e049      	b.n	801811e <Create_File+0x132>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 801808a:	2064      	movs	r0, #100	; 0x64
 801808c:	f001 fb26 	bl	80196dc <malloc>
 8018090:	4603      	mov	r3, r0
 8018092:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8018094:	687a      	ldr	r2, [r7, #4]
 8018096:	492a      	ldr	r1, [pc, #168]	; (8018140 <Create_File+0x154>)
 8018098:	69f8      	ldr	r0, [r7, #28]
 801809a:	f002 fb5d 	bl	801a758 <siprintf>
			if(sdioPrints) printf(buf);
 801809e:	2300      	movs	r3, #0
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d002      	beq.n	80180aa <Create_File+0xbe>
 80180a4:	69f8      	ldr	r0, [r7, #28]
 80180a6:	f002 fab3 	bl	801a610 <iprintf>
			free(buf);
 80180aa:	69f8      	ldr	r0, [r7, #28]
 80180ac:	f001 fb1e 	bl	80196ec <free>
		}

		fresult = f_close(&fil);
 80180b0:	4821      	ldr	r0, [pc, #132]	; (8018138 <Create_File+0x14c>)
 80180b2:	f7ff fdc2 	bl	8017c3a <f_close>
 80180b6:	4603      	mov	r3, r0
 80180b8:	461a      	mov	r2, r3
 80180ba:	4b1c      	ldr	r3, [pc, #112]	; (801812c <Create_File+0x140>)
 80180bc:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80180be:	4b1b      	ldr	r3, [pc, #108]	; (801812c <Create_File+0x140>)
 80180c0:	781b      	ldrb	r3, [r3, #0]
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	d016      	beq.n	80180f4 <Create_File+0x108>
		{
			char *buf = malloc(100*sizeof(char));
 80180c6:	2064      	movs	r0, #100	; 0x64
 80180c8:	f001 fb08 	bl	80196dc <malloc>
 80180cc:	4603      	mov	r3, r0
 80180ce:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n", fresult, name);
 80180d0:	4b16      	ldr	r3, [pc, #88]	; (801812c <Create_File+0x140>)
 80180d2:	781b      	ldrb	r3, [r3, #0]
 80180d4:	461a      	mov	r2, r3
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	491a      	ldr	r1, [pc, #104]	; (8018144 <Create_File+0x158>)
 80180da:	6978      	ldr	r0, [r7, #20]
 80180dc:	f002 fb3c 	bl	801a758 <siprintf>
			if(sdioPrints) printf(buf);
 80180e0:	2300      	movs	r3, #0
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d002      	beq.n	80180ec <Create_File+0x100>
 80180e6:	6978      	ldr	r0, [r7, #20]
 80180e8:	f002 fa92 	bl	801a610 <iprintf>
			free(buf);
 80180ec:	6978      	ldr	r0, [r7, #20]
 80180ee:	f001 fafd 	bl	80196ec <free>
 80180f2:	e012      	b.n	801811a <Create_File+0x12e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 80180f4:	2064      	movs	r0, #100	; 0x64
 80180f6:	f001 faf1 	bl	80196dc <malloc>
 80180fa:	4603      	mov	r3, r0
 80180fc:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80180fe:	687a      	ldr	r2, [r7, #4]
 8018100:	4911      	ldr	r1, [pc, #68]	; (8018148 <Create_File+0x15c>)
 8018102:	69b8      	ldr	r0, [r7, #24]
 8018104:	f002 fb28 	bl	801a758 <siprintf>
			if(sdioPrints) printf(buf);
 8018108:	2300      	movs	r3, #0
 801810a:	2b00      	cmp	r3, #0
 801810c:	d002      	beq.n	8018114 <Create_File+0x128>
 801810e:	69b8      	ldr	r0, [r7, #24]
 8018110:	f002 fa7e 	bl	801a610 <iprintf>
			free(buf);
 8018114:	69b8      	ldr	r0, [r7, #24]
 8018116:	f001 fae9 	bl	80196ec <free>
		}
	}
    return fresult;
 801811a:	4b04      	ldr	r3, [pc, #16]	; (801812c <Create_File+0x140>)
 801811c:	781b      	ldrb	r3, [r3, #0]
}
 801811e:	4618      	mov	r0, r3
 8018120:	3720      	adds	r7, #32
 8018122:	46bd      	mov	sp, r7
 8018124:	bd80      	pop	{r7, pc}
 8018126:	bf00      	nop
 8018128:	20001084 	.word	0x20001084
 801812c:	2000119c 	.word	0x2000119c
 8018130:	2000120c 	.word	0x2000120c
 8018134:	0801f65c 	.word	0x0801f65c
 8018138:	20000e54 	.word	0x20000e54
 801813c:	0801f690 	.word	0x0801f690
 8018140:	0801f6b8 	.word	0x0801f6b8
 8018144:	0801f6f8 	.word	0x0801f6f8
 8018148:	0801f63c 	.word	0x0801f63c

0801814c <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 801814c:	b580      	push	{r7, lr}
 801814e:	b088      	sub	sp, #32
 8018150:	af00      	add	r7, sp, #0
 8018152:	6078      	str	r0, [r7, #4]
 8018154:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8018156:	495f      	ldr	r1, [pc, #380]	; (80182d4 <Update_File+0x188>)
 8018158:	6878      	ldr	r0, [r7, #4]
 801815a:	f7ff fd98 	bl	8017c8e <f_stat>
 801815e:	4603      	mov	r3, r0
 8018160:	461a      	mov	r2, r3
 8018162:	4b5d      	ldr	r3, [pc, #372]	; (80182d8 <Update_File+0x18c>)
 8018164:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8018166:	4b5c      	ldr	r3, [pc, #368]	; (80182d8 <Update_File+0x18c>)
 8018168:	781b      	ldrb	r3, [r3, #0]
 801816a:	2b00      	cmp	r3, #0
 801816c:	d015      	beq.n	801819a <Update_File+0x4e>
	{
		char *buf = malloc(100*sizeof(char));
 801816e:	2064      	movs	r0, #100	; 0x64
 8018170:	f001 fab4 	bl	80196dc <malloc>
 8018174:	4603      	mov	r3, r0
 8018176:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n", name);
 8018178:	687a      	ldr	r2, [r7, #4]
 801817a:	4958      	ldr	r1, [pc, #352]	; (80182dc <Update_File+0x190>)
 801817c:	68b8      	ldr	r0, [r7, #8]
 801817e:	f002 faeb 	bl	801a758 <siprintf>
		if(sdioPrints) printf (buf);
 8018182:	2300      	movs	r3, #0
 8018184:	2b00      	cmp	r3, #0
 8018186:	d002      	beq.n	801818e <Update_File+0x42>
 8018188:	68b8      	ldr	r0, [r7, #8]
 801818a:	f002 fa41 	bl	801a610 <iprintf>
		free(buf);
 801818e:	68b8      	ldr	r0, [r7, #8]
 8018190:	f001 faac 	bl	80196ec <free>
	    return fresult;
 8018194:	4b50      	ldr	r3, [pc, #320]	; (80182d8 <Update_File+0x18c>)
 8018196:	781b      	ldrb	r3, [r3, #0]
 8018198:	e097      	b.n	80182ca <Update_File+0x17e>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 801819a:	2232      	movs	r2, #50	; 0x32
 801819c:	6879      	ldr	r1, [r7, #4]
 801819e:	4850      	ldr	r0, [pc, #320]	; (80182e0 <Update_File+0x194>)
 80181a0:	f7ff f99a 	bl	80174d8 <f_open>
 80181a4:	4603      	mov	r3, r0
 80181a6:	461a      	mov	r2, r3
 80181a8:	4b4b      	ldr	r3, [pc, #300]	; (80182d8 <Update_File+0x18c>)
 80181aa:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80181ac:	4b4a      	ldr	r3, [pc, #296]	; (80182d8 <Update_File+0x18c>)
 80181ae:	781b      	ldrb	r3, [r3, #0]
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d018      	beq.n	80181e6 <Update_File+0x9a>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80181b4:	2064      	movs	r0, #100	; 0x64
 80181b6:	f001 fa91 	bl	80196dc <malloc>
 80181ba:	4603      	mov	r3, r0
 80181bc:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n", fresult, name);
 80181be:	4b46      	ldr	r3, [pc, #280]	; (80182d8 <Update_File+0x18c>)
 80181c0:	781b      	ldrb	r3, [r3, #0]
 80181c2:	461a      	mov	r2, r3
 80181c4:	687b      	ldr	r3, [r7, #4]
 80181c6:	4947      	ldr	r1, [pc, #284]	; (80182e4 <Update_File+0x198>)
 80181c8:	68f8      	ldr	r0, [r7, #12]
 80181ca:	f002 fac5 	bl	801a758 <siprintf>
	    	if(sdioPrints) printf(buf);
 80181ce:	2300      	movs	r3, #0
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	d002      	beq.n	80181da <Update_File+0x8e>
 80181d4:	68f8      	ldr	r0, [r7, #12]
 80181d6:	f002 fa1b 	bl	801a610 <iprintf>
	        free(buf);
 80181da:	68f8      	ldr	r0, [r7, #12]
 80181dc:	f001 fa86 	bl	80196ec <free>
	        return fresult;
 80181e0:	4b3d      	ldr	r3, [pc, #244]	; (80182d8 <Update_File+0x18c>)
 80181e2:	781b      	ldrb	r3, [r3, #0]
 80181e4:	e071      	b.n	80182ca <Update_File+0x17e>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 80181e6:	6838      	ldr	r0, [r7, #0]
 80181e8:	f7e8 f804 	bl	80001f4 <strlen>
 80181ec:	4602      	mov	r2, r0
 80181ee:	4b3e      	ldr	r3, [pc, #248]	; (80182e8 <Update_File+0x19c>)
 80181f0:	6839      	ldr	r1, [r7, #0]
 80181f2:	483b      	ldr	r0, [pc, #236]	; (80182e0 <Update_File+0x194>)
 80181f4:	f7ff fb2e 	bl	8017854 <f_write>
 80181f8:	4603      	mov	r3, r0
 80181fa:	461a      	mov	r2, r3
 80181fc:	4b36      	ldr	r3, [pc, #216]	; (80182d8 <Update_File+0x18c>)
 80181fe:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8018200:	4b35      	ldr	r3, [pc, #212]	; (80182d8 <Update_File+0x18c>)
 8018202:	781b      	ldrb	r3, [r3, #0]
 8018204:	2b00      	cmp	r3, #0
 8018206:	d016      	beq.n	8018236 <Update_File+0xea>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8018208:	2064      	movs	r0, #100	; 0x64
 801820a:	f001 fa67 	bl	80196dc <malloc>
 801820e:	4603      	mov	r3, r0
 8018210:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n", fresult, name);
 8018212:	4b31      	ldr	r3, [pc, #196]	; (80182d8 <Update_File+0x18c>)
 8018214:	781b      	ldrb	r3, [r3, #0]
 8018216:	461a      	mov	r2, r3
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	4934      	ldr	r1, [pc, #208]	; (80182ec <Update_File+0x1a0>)
 801821c:	69b8      	ldr	r0, [r7, #24]
 801821e:	f002 fa9b 	bl	801a758 <siprintf>
	    	if(sdioPrints) printf(buf);
 8018222:	2300      	movs	r3, #0
 8018224:	2b00      	cmp	r3, #0
 8018226:	d002      	beq.n	801822e <Update_File+0xe2>
 8018228:	69b8      	ldr	r0, [r7, #24]
 801822a:	f002 f9f1 	bl	801a610 <iprintf>
	    	free(buf);
 801822e:	69b8      	ldr	r0, [r7, #24]
 8018230:	f001 fa5c 	bl	80196ec <free>
 8018234:	e012      	b.n	801825c <Update_File+0x110>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8018236:	2064      	movs	r0, #100	; 0x64
 8018238:	f001 fa50 	bl	80196dc <malloc>
 801823c:	4603      	mov	r3, r0
 801823e:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 8018240:	687a      	ldr	r2, [r7, #4]
 8018242:	492b      	ldr	r1, [pc, #172]	; (80182f0 <Update_File+0x1a4>)
 8018244:	69f8      	ldr	r0, [r7, #28]
 8018246:	f002 fa87 	bl	801a758 <siprintf>
	    	if(sdioPrints) printf(buf);
 801824a:	2300      	movs	r3, #0
 801824c:	2b00      	cmp	r3, #0
 801824e:	d002      	beq.n	8018256 <Update_File+0x10a>
 8018250:	69f8      	ldr	r0, [r7, #28]
 8018252:	f002 f9dd 	bl	801a610 <iprintf>
	    	free(buf);
 8018256:	69f8      	ldr	r0, [r7, #28]
 8018258:	f001 fa48 	bl	80196ec <free>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 801825c:	4820      	ldr	r0, [pc, #128]	; (80182e0 <Update_File+0x194>)
 801825e:	f7ff fcec 	bl	8017c3a <f_close>
 8018262:	4603      	mov	r3, r0
 8018264:	461a      	mov	r2, r3
 8018266:	4b1c      	ldr	r3, [pc, #112]	; (80182d8 <Update_File+0x18c>)
 8018268:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 801826a:	4b1b      	ldr	r3, [pc, #108]	; (80182d8 <Update_File+0x18c>)
 801826c:	781b      	ldrb	r3, [r3, #0]
 801826e:	2b00      	cmp	r3, #0
 8018270:	d016      	beq.n	80182a0 <Update_File+0x154>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8018272:	2064      	movs	r0, #100	; 0x64
 8018274:	f001 fa32 	bl	80196dc <malloc>
 8018278:	4603      	mov	r3, r0
 801827a:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n", fresult, name);
 801827c:	4b16      	ldr	r3, [pc, #88]	; (80182d8 <Update_File+0x18c>)
 801827e:	781b      	ldrb	r3, [r3, #0]
 8018280:	461a      	mov	r2, r3
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	491b      	ldr	r1, [pc, #108]	; (80182f4 <Update_File+0x1a8>)
 8018286:	6938      	ldr	r0, [r7, #16]
 8018288:	f002 fa66 	bl	801a758 <siprintf>
	    	if(sdioPrints) printf(buf);
 801828c:	2300      	movs	r3, #0
 801828e:	2b00      	cmp	r3, #0
 8018290:	d002      	beq.n	8018298 <Update_File+0x14c>
 8018292:	6938      	ldr	r0, [r7, #16]
 8018294:	f002 f9bc 	bl	801a610 <iprintf>
	    	free(buf);
 8018298:	6938      	ldr	r0, [r7, #16]
 801829a:	f001 fa27 	bl	80196ec <free>
 801829e:	e012      	b.n	80182c6 <Update_File+0x17a>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 80182a0:	2064      	movs	r0, #100	; 0x64
 80182a2:	f001 fa1b 	bl	80196dc <malloc>
 80182a6:	4603      	mov	r3, r0
 80182a8:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80182aa:	687a      	ldr	r2, [r7, #4]
 80182ac:	4912      	ldr	r1, [pc, #72]	; (80182f8 <Update_File+0x1ac>)
 80182ae:	6978      	ldr	r0, [r7, #20]
 80182b0:	f002 fa52 	bl	801a758 <siprintf>
	    	if(sdioPrints) printf(buf);
 80182b4:	2300      	movs	r3, #0
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d002      	beq.n	80182c0 <Update_File+0x174>
 80182ba:	6978      	ldr	r0, [r7, #20]
 80182bc:	f002 f9a8 	bl	801a610 <iprintf>
	    	free(buf);
 80182c0:	6978      	ldr	r0, [r7, #20]
 80182c2:	f001 fa13 	bl	80196ec <free>
	     }
	}
    return fresult;
 80182c6:	4b04      	ldr	r3, [pc, #16]	; (80182d8 <Update_File+0x18c>)
 80182c8:	781b      	ldrb	r3, [r3, #0]
}
 80182ca:	4618      	mov	r0, r3
 80182cc:	3720      	adds	r7, #32
 80182ce:	46bd      	mov	sp, r7
 80182d0:	bd80      	pop	{r7, pc}
 80182d2:	bf00      	nop
 80182d4:	20001084 	.word	0x20001084
 80182d8:	2000119c 	.word	0x2000119c
 80182dc:	0801f4ec 	.word	0x0801f4ec
 80182e0:	20000e54 	.word	0x20000e54
 80182e4:	0801f50c 	.word	0x0801f50c
 80182e8:	200011a0 	.word	0x200011a0
 80182ec:	0801f71c 	.word	0x0801f71c
 80182f0:	0801f744 	.word	0x0801f744
 80182f4:	0801f614 	.word	0x0801f614
 80182f8:	0801f63c 	.word	0x0801f63c

080182fc <json_update>:

char filename_with_format[100];
uint8_t file_already_exist = 0;
char buffer[255];

void json_update() {
 80182fc:	b580      	push	{r7, lr}
 80182fe:	b088      	sub	sp, #32
 8018300:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8018302:	f107 0314 	add.w	r3, r7, #20
 8018306:	2200      	movs	r2, #0
 8018308:	4619      	mov	r1, r3
 801830a:	4886      	ldr	r0, [pc, #536]	; (8018524 <json_update+0x228>)
 801830c:	f7ef fc78 	bl	8007c00 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 8018310:	463b      	mov	r3, r7
 8018312:	2200      	movs	r2, #0
 8018314:	4619      	mov	r1, r3
 8018316:	4883      	ldr	r0, [pc, #524]	; (8018524 <json_update+0x228>)
 8018318:	f7ef fb90 	bl	8007a3c <HAL_RTC_GetTime>
	fresult1 = Mount_SD("/");
 801831c:	4882      	ldr	r0, [pc, #520]	; (8018528 <json_update+0x22c>)
 801831e:	f7ff fe11 	bl	8017f44 <Mount_SD>
 8018322:	4603      	mov	r3, r0
 8018324:	461a      	mov	r2, r3
 8018326:	4b81      	ldr	r3, [pc, #516]	; (801852c <json_update+0x230>)
 8018328:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801832a:	4b80      	ldr	r3, [pc, #512]	; (801852c <json_update+0x230>)
 801832c:	781b      	ldrb	r3, [r3, #0]
 801832e:	2b00      	cmp	r3, #0
 8018330:	f040 80f3 	bne.w	801851a <json_update+0x21e>
		//CAN Bus
		sprintf(buffer, "{\n");
 8018334:	497e      	ldr	r1, [pc, #504]	; (8018530 <json_update+0x234>)
 8018336:	487f      	ldr	r0, [pc, #508]	; (8018534 <json_update+0x238>)
 8018338:	f002 fa0e 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 801833c:	497d      	ldr	r1, [pc, #500]	; (8018534 <json_update+0x238>)
 801833e:	487e      	ldr	r0, [pc, #504]	; (8018538 <json_update+0x23c>)
 8018340:	f7ff ff04 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 8018344:	22ff      	movs	r2, #255	; 0xff
 8018346:	2100      	movs	r1, #0
 8018348:	487a      	ldr	r0, [pc, #488]	; (8018534 <json_update+0x238>)
 801834a:	f001 f9ff 	bl	801974c <memset>
		sprintf(buffer, "\"devEUI\":\"TF241_%s\",\n", ver_GetUid());
 801834e:	f7e9 fac9 	bl	80018e4 <ver_GetUid>
 8018352:	4603      	mov	r3, r0
 8018354:	461a      	mov	r2, r3
 8018356:	4979      	ldr	r1, [pc, #484]	; (801853c <json_update+0x240>)
 8018358:	4876      	ldr	r0, [pc, #472]	; (8018534 <json_update+0x238>)
 801835a:	f002 f9fd 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 801835e:	4975      	ldr	r1, [pc, #468]	; (8018534 <json_update+0x238>)
 8018360:	4875      	ldr	r0, [pc, #468]	; (8018538 <json_update+0x23c>)
 8018362:	f7ff fef3 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 8018366:	22ff      	movs	r2, #255	; 0xff
 8018368:	2100      	movs	r1, #0
 801836a:	4872      	ldr	r0, [pc, #456]	; (8018534 <json_update+0x238>)
 801836c:	f001 f9ee 	bl	801974c <memset>
		sprintf(buffer, "\"id\":\"%s\",\n", _Flash_Packet.id);
 8018370:	4a73      	ldr	r2, [pc, #460]	; (8018540 <json_update+0x244>)
 8018372:	4974      	ldr	r1, [pc, #464]	; (8018544 <json_update+0x248>)
 8018374:	486f      	ldr	r0, [pc, #444]	; (8018534 <json_update+0x238>)
 8018376:	f002 f9ef 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 801837a:	496e      	ldr	r1, [pc, #440]	; (8018534 <json_update+0x238>)
 801837c:	486e      	ldr	r0, [pc, #440]	; (8018538 <json_update+0x23c>)
 801837e:	f7ff fee5 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 8018382:	22ff      	movs	r2, #255	; 0xff
 8018384:	2100      	movs	r1, #0
 8018386:	486b      	ldr	r0, [pc, #428]	; (8018534 <json_update+0x238>)
 8018388:	f001 f9e0 	bl	801974c <memset>
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801838c:	783b      	ldrb	r3, [r7, #0]
 801838e:	461a      	mov	r2, r3
				sTime.Minutes, sTime.Seconds);
 8018390:	787b      	ldrb	r3, [r7, #1]
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 8018392:	4619      	mov	r1, r3
				sTime.Minutes, sTime.Seconds);
 8018394:	78bb      	ldrb	r3, [r7, #2]
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 8018396:	9300      	str	r3, [sp, #0]
 8018398:	460b      	mov	r3, r1
 801839a:	496b      	ldr	r1, [pc, #428]	; (8018548 <json_update+0x24c>)
 801839c:	4865      	ldr	r0, [pc, #404]	; (8018534 <json_update+0x238>)
 801839e:	f002 f9db 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 80183a2:	4964      	ldr	r1, [pc, #400]	; (8018534 <json_update+0x238>)
 80183a4:	4864      	ldr	r0, [pc, #400]	; (8018538 <json_update+0x23c>)
 80183a6:	f7ff fed1 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 80183aa:	22ff      	movs	r2, #255	; 0xff
 80183ac:	2100      	movs	r1, #0
 80183ae:	4861      	ldr	r0, [pc, #388]	; (8018534 <json_update+0x238>)
 80183b0:	f001 f9cc 	bl	801974c <memset>
		sprintf(buffer, "\"location\":\"%s\",\n", _Flash_Packet.location);
 80183b4:	4a65      	ldr	r2, [pc, #404]	; (801854c <json_update+0x250>)
 80183b6:	4966      	ldr	r1, [pc, #408]	; (8018550 <json_update+0x254>)
 80183b8:	485e      	ldr	r0, [pc, #376]	; (8018534 <json_update+0x238>)
 80183ba:	f002 f9cd 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 80183be:	495d      	ldr	r1, [pc, #372]	; (8018534 <json_update+0x238>)
 80183c0:	485d      	ldr	r0, [pc, #372]	; (8018538 <json_update+0x23c>)
 80183c2:	f7ff fec3 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 80183c6:	22ff      	movs	r2, #255	; 0xff
 80183c8:	2100      	movs	r1, #0
 80183ca:	485a      	ldr	r0, [pc, #360]	; (8018534 <json_update+0x238>)
 80183cc:	f001 f9be 	bl	801974c <memset>
		sprintf(buffer, "\"name\":\"%s\",\n", _Flash_Packet.name);
 80183d0:	4a60      	ldr	r2, [pc, #384]	; (8018554 <json_update+0x258>)
 80183d2:	4961      	ldr	r1, [pc, #388]	; (8018558 <json_update+0x25c>)
 80183d4:	4857      	ldr	r0, [pc, #348]	; (8018534 <json_update+0x238>)
 80183d6:	f002 f9bf 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 80183da:	4956      	ldr	r1, [pc, #344]	; (8018534 <json_update+0x238>)
 80183dc:	4856      	ldr	r0, [pc, #344]	; (8018538 <json_update+0x23c>)
 80183de:	f7ff feb5 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 80183e2:	22ff      	movs	r2, #255	; 0xff
 80183e4:	2100      	movs	r1, #0
 80183e6:	4853      	ldr	r0, [pc, #332]	; (8018534 <json_update+0x238>)
 80183e8:	f001 f9b0 	bl	801974c <memset>
		sprintf(buffer, "\"group\":\"%s\",\n", _Flash_Packet.group);
 80183ec:	4a5b      	ldr	r2, [pc, #364]	; (801855c <json_update+0x260>)
 80183ee:	495c      	ldr	r1, [pc, #368]	; (8018560 <json_update+0x264>)
 80183f0:	4850      	ldr	r0, [pc, #320]	; (8018534 <json_update+0x238>)
 80183f2:	f002 f9b1 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 80183f6:	494f      	ldr	r1, [pc, #316]	; (8018534 <json_update+0x238>)
 80183f8:	484f      	ldr	r0, [pc, #316]	; (8018538 <json_update+0x23c>)
 80183fa:	f7ff fea7 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 80183fe:	22ff      	movs	r2, #255	; 0xff
 8018400:	2100      	movs	r1, #0
 8018402:	484c      	ldr	r0, [pc, #304]	; (8018534 <json_update+0x238>)
 8018404:	f001 f9a2 	bl	801974c <memset>
		sprintf(buffer, "\"co2\":\"%d\",\n", _RunTime_Packet.co2);
 8018408:	4b56      	ldr	r3, [pc, #344]	; (8018564 <json_update+0x268>)
 801840a:	881b      	ldrh	r3, [r3, #0]
 801840c:	461a      	mov	r2, r3
 801840e:	4956      	ldr	r1, [pc, #344]	; (8018568 <json_update+0x26c>)
 8018410:	4848      	ldr	r0, [pc, #288]	; (8018534 <json_update+0x238>)
 8018412:	f002 f9a1 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 8018416:	4947      	ldr	r1, [pc, #284]	; (8018534 <json_update+0x238>)
 8018418:	4847      	ldr	r0, [pc, #284]	; (8018538 <json_update+0x23c>)
 801841a:	f7ff fe97 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801841e:	22ff      	movs	r2, #255	; 0xff
 8018420:	2100      	movs	r1, #0
 8018422:	4844      	ldr	r0, [pc, #272]	; (8018534 <json_update+0x238>)
 8018424:	f001 f992 	bl	801974c <memset>
		sprintf(buffer, "\"temperature\":\"%ld\",\n",
 8018428:	4b4e      	ldr	r3, [pc, #312]	; (8018564 <json_update+0x268>)
 801842a:	685b      	ldr	r3, [r3, #4]
 801842c:	461a      	mov	r2, r3
 801842e:	494f      	ldr	r1, [pc, #316]	; (801856c <json_update+0x270>)
 8018430:	4840      	ldr	r0, [pc, #256]	; (8018534 <json_update+0x238>)
 8018432:	f002 f991 	bl	801a758 <siprintf>
				_RunTime_Packet.temperature);
		Update_File(filename_with_format, buffer);
 8018436:	493f      	ldr	r1, [pc, #252]	; (8018534 <json_update+0x238>)
 8018438:	483f      	ldr	r0, [pc, #252]	; (8018538 <json_update+0x23c>)
 801843a:	f7ff fe87 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801843e:	22ff      	movs	r2, #255	; 0xff
 8018440:	2100      	movs	r1, #0
 8018442:	483c      	ldr	r0, [pc, #240]	; (8018534 <json_update+0x238>)
 8018444:	f001 f982 	bl	801974c <memset>
		sprintf(buffer, "\"humidity\":\"%ld\",\n", _RunTime_Packet.humidity);
 8018448:	4b46      	ldr	r3, [pc, #280]	; (8018564 <json_update+0x268>)
 801844a:	689b      	ldr	r3, [r3, #8]
 801844c:	461a      	mov	r2, r3
 801844e:	4948      	ldr	r1, [pc, #288]	; (8018570 <json_update+0x274>)
 8018450:	4838      	ldr	r0, [pc, #224]	; (8018534 <json_update+0x238>)
 8018452:	f002 f981 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 8018456:	4937      	ldr	r1, [pc, #220]	; (8018534 <json_update+0x238>)
 8018458:	4837      	ldr	r0, [pc, #220]	; (8018538 <json_update+0x23c>)
 801845a:	f7ff fe77 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801845e:	22ff      	movs	r2, #255	; 0xff
 8018460:	2100      	movs	r1, #0
 8018462:	4834      	ldr	r0, [pc, #208]	; (8018534 <json_update+0x238>)
 8018464:	f001 f972 	bl	801974c <memset>
		sprintf(buffer, "\"pir\":\"%s\",\n",
				_RunTime_Packet.motion_detection ? "TRUE" : "FALSE");
 8018468:	4b3e      	ldr	r3, [pc, #248]	; (8018564 <json_update+0x268>)
 801846a:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(buffer, "\"pir\":\"%s\",\n",
 801846c:	2b00      	cmp	r3, #0
 801846e:	d001      	beq.n	8018474 <json_update+0x178>
 8018470:	4b40      	ldr	r3, [pc, #256]	; (8018574 <json_update+0x278>)
 8018472:	e000      	b.n	8018476 <json_update+0x17a>
 8018474:	4b40      	ldr	r3, [pc, #256]	; (8018578 <json_update+0x27c>)
 8018476:	461a      	mov	r2, r3
 8018478:	4940      	ldr	r1, [pc, #256]	; (801857c <json_update+0x280>)
 801847a:	482e      	ldr	r0, [pc, #184]	; (8018534 <json_update+0x238>)
 801847c:	f002 f96c 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 8018480:	492c      	ldr	r1, [pc, #176]	; (8018534 <json_update+0x238>)
 8018482:	482d      	ldr	r0, [pc, #180]	; (8018538 <json_update+0x23c>)
 8018484:	f7ff fe62 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 8018488:	22ff      	movs	r2, #255	; 0xff
 801848a:	2100      	movs	r1, #0
 801848c:	4829      	ldr	r0, [pc, #164]	; (8018534 <json_update+0x238>)
 801848e:	f001 f95d 	bl	801974c <memset>
		sprintf(buffer, "\"pm2.5\":\"%.02f\",\n", _RunTime_Packet.pm2_5);
 8018492:	4b34      	ldr	r3, [pc, #208]	; (8018564 <json_update+0x268>)
 8018494:	695b      	ldr	r3, [r3, #20]
 8018496:	4618      	mov	r0, r3
 8018498:	f7e8 f86e 	bl	8000578 <__aeabi_f2d>
 801849c:	4602      	mov	r2, r0
 801849e:	460b      	mov	r3, r1
 80184a0:	4937      	ldr	r1, [pc, #220]	; (8018580 <json_update+0x284>)
 80184a2:	4824      	ldr	r0, [pc, #144]	; (8018534 <json_update+0x238>)
 80184a4:	f002 f958 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 80184a8:	4922      	ldr	r1, [pc, #136]	; (8018534 <json_update+0x238>)
 80184aa:	4823      	ldr	r0, [pc, #140]	; (8018538 <json_update+0x23c>)
 80184ac:	f7ff fe4e 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 80184b0:	22ff      	movs	r2, #255	; 0xff
 80184b2:	2100      	movs	r1, #0
 80184b4:	481f      	ldr	r0, [pc, #124]	; (8018534 <json_update+0x238>)
 80184b6:	f001 f949 	bl	801974c <memset>
		sprintf(buffer, "\"port\":\"none\",\n");
 80184ba:	4932      	ldr	r1, [pc, #200]	; (8018584 <json_update+0x288>)
 80184bc:	481d      	ldr	r0, [pc, #116]	; (8018534 <json_update+0x238>)
 80184be:	f002 f94b 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 80184c2:	491c      	ldr	r1, [pc, #112]	; (8018534 <json_update+0x238>)
 80184c4:	481c      	ldr	r0, [pc, #112]	; (8018538 <json_update+0x23c>)
 80184c6:	f7ff fe41 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 80184ca:	22ff      	movs	r2, #255	; 0xff
 80184cc:	2100      	movs	r1, #0
 80184ce:	4819      	ldr	r0, [pc, #100]	; (8018534 <json_update+0x238>)
 80184d0:	f001 f93c 	bl	801974c <memset>
		sprintf(buffer, "\"battery\":\"%.02f\",\n",
				_RunTime_Packet.battery_voltage);
 80184d4:	4b23      	ldr	r3, [pc, #140]	; (8018564 <json_update+0x268>)
 80184d6:	6a1b      	ldr	r3, [r3, #32]
		sprintf(buffer, "\"battery\":\"%.02f\",\n",
 80184d8:	4618      	mov	r0, r3
 80184da:	f7e8 f84d 	bl	8000578 <__aeabi_f2d>
 80184de:	4602      	mov	r2, r0
 80184e0:	460b      	mov	r3, r1
 80184e2:	4929      	ldr	r1, [pc, #164]	; (8018588 <json_update+0x28c>)
 80184e4:	4813      	ldr	r0, [pc, #76]	; (8018534 <json_update+0x238>)
 80184e6:	f002 f937 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 80184ea:	4912      	ldr	r1, [pc, #72]	; (8018534 <json_update+0x238>)
 80184ec:	4812      	ldr	r0, [pc, #72]	; (8018538 <json_update+0x23c>)
 80184ee:	f7ff fe2d 	bl	801814c <Update_File>

		//we end it
		memset(buffer,0,sizeof(buffer));
 80184f2:	22ff      	movs	r2, #255	; 0xff
 80184f4:	2100      	movs	r1, #0
 80184f6:	480f      	ldr	r0, [pc, #60]	; (8018534 <json_update+0x238>)
 80184f8:	f001 f928 	bl	801974c <memset>
		sprintf(buffer, "}\n\n");
 80184fc:	4923      	ldr	r1, [pc, #140]	; (801858c <json_update+0x290>)
 80184fe:	480d      	ldr	r0, [pc, #52]	; (8018534 <json_update+0x238>)
 8018500:	f002 f92a 	bl	801a758 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 8018504:	490b      	ldr	r1, [pc, #44]	; (8018534 <json_update+0x238>)
 8018506:	480c      	ldr	r0, [pc, #48]	; (8018538 <json_update+0x23c>)
 8018508:	f7ff fe20 	bl	801814c <Update_File>
 801850c:	4603      	mov	r3, r0
 801850e:	461a      	mov	r2, r3
 8018510:	4b06      	ldr	r3, [pc, #24]	; (801852c <json_update+0x230>)
 8018512:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 8018514:	4804      	ldr	r0, [pc, #16]	; (8018528 <json_update+0x22c>)
 8018516:	f7ff fd41 	bl	8017f9c <Unmount_SD>
	}
}
 801851a:	bf00      	nop
 801851c:	3718      	adds	r7, #24
 801851e:	46bd      	mov	sp, r7
 8018520:	bd80      	pop	{r7, pc}
 8018522:	bf00      	nop
 8018524:	20000814 	.word	0x20000814
 8018528:	0801f830 	.word	0x0801f830
 801852c:	200011a4 	.word	0x200011a4
 8018530:	0801f834 	.word	0x0801f834
 8018534:	20001210 	.word	0x20001210
 8018538:	200011a8 	.word	0x200011a8
 801853c:	0801f838 	.word	0x0801f838
 8018540:	200003fd 	.word	0x200003fd
 8018544:	0801f850 	.word	0x0801f850
 8018548:	0801f85c 	.word	0x0801f85c
 801854c:	2000042f 	.word	0x2000042f
 8018550:	0801f87c 	.word	0x0801f87c
 8018554:	20000461 	.word	0x20000461
 8018558:	0801f890 	.word	0x0801f890
 801855c:	20000493 	.word	0x20000493
 8018560:	0801f8a0 	.word	0x0801f8a0
 8018564:	200004c8 	.word	0x200004c8
 8018568:	0801f8b0 	.word	0x0801f8b0
 801856c:	0801f8c0 	.word	0x0801f8c0
 8018570:	0801f8d8 	.word	0x0801f8d8
 8018574:	0801f8ec 	.word	0x0801f8ec
 8018578:	0801f8f4 	.word	0x0801f8f4
 801857c:	0801f8fc 	.word	0x0801f8fc
 8018580:	0801f90c 	.word	0x0801f90c
 8018584:	0801f920 	.word	0x0801f920
 8018588:	0801f930 	.word	0x0801f930
 801858c:	0801f944 	.word	0x0801f944

08018590 <csv_update>:
void csv_update() {
 8018590:	b580      	push	{r7, lr}
 8018592:	b088      	sub	sp, #32
 8018594:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8018596:	f107 0314 	add.w	r3, r7, #20
 801859a:	2200      	movs	r2, #0
 801859c:	4619      	mov	r1, r3
 801859e:	487d      	ldr	r0, [pc, #500]	; (8018794 <csv_update+0x204>)
 80185a0:	f7ef fb2e 	bl	8007c00 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 80185a4:	463b      	mov	r3, r7
 80185a6:	2200      	movs	r2, #0
 80185a8:	4619      	mov	r1, r3
 80185aa:	487a      	ldr	r0, [pc, #488]	; (8018794 <csv_update+0x204>)
 80185ac:	f7ef fa46 	bl	8007a3c <HAL_RTC_GetTime>
	fresult1 = Mount_SD("/");
 80185b0:	4879      	ldr	r0, [pc, #484]	; (8018798 <csv_update+0x208>)
 80185b2:	f7ff fcc7 	bl	8017f44 <Mount_SD>
 80185b6:	4603      	mov	r3, r0
 80185b8:	461a      	mov	r2, r3
 80185ba:	4b78      	ldr	r3, [pc, #480]	; (801879c <csv_update+0x20c>)
 80185bc:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 80185be:	4b77      	ldr	r3, [pc, #476]	; (801879c <csv_update+0x20c>)
 80185c0:	781b      	ldrb	r3, [r3, #0]
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	f040 80e2 	bne.w	801878c <csv_update+0x1fc>
//		sprintf(buffer, "\n");
//		Update_File(filename_with_format, buffer);



		sprintf(buffer, "TF241_%s ,", ver_GetUid());
 80185c8:	f7e9 f98c 	bl	80018e4 <ver_GetUid>
 80185cc:	4603      	mov	r3, r0
 80185ce:	461a      	mov	r2, r3
 80185d0:	4973      	ldr	r1, [pc, #460]	; (80187a0 <csv_update+0x210>)
 80185d2:	4874      	ldr	r0, [pc, #464]	; (80187a4 <csv_update+0x214>)
 80185d4:	f002 f8c0 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 80185d8:	4972      	ldr	r1, [pc, #456]	; (80187a4 <csv_update+0x214>)
 80185da:	4873      	ldr	r0, [pc, #460]	; (80187a8 <csv_update+0x218>)
 80185dc:	f7ff fdb6 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 80185e0:	22ff      	movs	r2, #255	; 0xff
 80185e2:	2100      	movs	r1, #0
 80185e4:	486f      	ldr	r0, [pc, #444]	; (80187a4 <csv_update+0x214>)
 80185e6:	f001 f8b1 	bl	801974c <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.id);
 80185ea:	4a70      	ldr	r2, [pc, #448]	; (80187ac <csv_update+0x21c>)
 80185ec:	4970      	ldr	r1, [pc, #448]	; (80187b0 <csv_update+0x220>)
 80185ee:	486d      	ldr	r0, [pc, #436]	; (80187a4 <csv_update+0x214>)
 80185f0:	f002 f8b2 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 80185f4:	496b      	ldr	r1, [pc, #428]	; (80187a4 <csv_update+0x214>)
 80185f6:	486c      	ldr	r0, [pc, #432]	; (80187a8 <csv_update+0x218>)
 80185f8:	f7ff fda8 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 80185fc:	22ff      	movs	r2, #255	; 0xff
 80185fe:	2100      	movs	r1, #0
 8018600:	4868      	ldr	r0, [pc, #416]	; (80187a4 <csv_update+0x214>)
 8018602:	f001 f8a3 	bl	801974c <memset>
		sprintf(buffer, "%02d:%02d:%02d ,", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8018606:	783b      	ldrb	r3, [r7, #0]
 8018608:	461a      	mov	r2, r3
 801860a:	787b      	ldrb	r3, [r7, #1]
 801860c:	4619      	mov	r1, r3
 801860e:	78bb      	ldrb	r3, [r7, #2]
 8018610:	9300      	str	r3, [sp, #0]
 8018612:	460b      	mov	r3, r1
 8018614:	4967      	ldr	r1, [pc, #412]	; (80187b4 <csv_update+0x224>)
 8018616:	4863      	ldr	r0, [pc, #396]	; (80187a4 <csv_update+0x214>)
 8018618:	f002 f89e 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 801861c:	4961      	ldr	r1, [pc, #388]	; (80187a4 <csv_update+0x214>)
 801861e:	4862      	ldr	r0, [pc, #392]	; (80187a8 <csv_update+0x218>)
 8018620:	f7ff fd94 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 8018624:	22ff      	movs	r2, #255	; 0xff
 8018626:	2100      	movs	r1, #0
 8018628:	485e      	ldr	r0, [pc, #376]	; (80187a4 <csv_update+0x214>)
 801862a:	f001 f88f 	bl	801974c <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.location);
 801862e:	4a62      	ldr	r2, [pc, #392]	; (80187b8 <csv_update+0x228>)
 8018630:	495f      	ldr	r1, [pc, #380]	; (80187b0 <csv_update+0x220>)
 8018632:	485c      	ldr	r0, [pc, #368]	; (80187a4 <csv_update+0x214>)
 8018634:	f002 f890 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 8018638:	495a      	ldr	r1, [pc, #360]	; (80187a4 <csv_update+0x214>)
 801863a:	485b      	ldr	r0, [pc, #364]	; (80187a8 <csv_update+0x218>)
 801863c:	f7ff fd86 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 8018640:	22ff      	movs	r2, #255	; 0xff
 8018642:	2100      	movs	r1, #0
 8018644:	4857      	ldr	r0, [pc, #348]	; (80187a4 <csv_update+0x214>)
 8018646:	f001 f881 	bl	801974c <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.name);
 801864a:	4a5c      	ldr	r2, [pc, #368]	; (80187bc <csv_update+0x22c>)
 801864c:	4958      	ldr	r1, [pc, #352]	; (80187b0 <csv_update+0x220>)
 801864e:	4855      	ldr	r0, [pc, #340]	; (80187a4 <csv_update+0x214>)
 8018650:	f002 f882 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 8018654:	4953      	ldr	r1, [pc, #332]	; (80187a4 <csv_update+0x214>)
 8018656:	4854      	ldr	r0, [pc, #336]	; (80187a8 <csv_update+0x218>)
 8018658:	f7ff fd78 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801865c:	22ff      	movs	r2, #255	; 0xff
 801865e:	2100      	movs	r1, #0
 8018660:	4850      	ldr	r0, [pc, #320]	; (80187a4 <csv_update+0x214>)
 8018662:	f001 f873 	bl	801974c <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.group);
 8018666:	4a56      	ldr	r2, [pc, #344]	; (80187c0 <csv_update+0x230>)
 8018668:	4951      	ldr	r1, [pc, #324]	; (80187b0 <csv_update+0x220>)
 801866a:	484e      	ldr	r0, [pc, #312]	; (80187a4 <csv_update+0x214>)
 801866c:	f002 f874 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 8018670:	494c      	ldr	r1, [pc, #304]	; (80187a4 <csv_update+0x214>)
 8018672:	484d      	ldr	r0, [pc, #308]	; (80187a8 <csv_update+0x218>)
 8018674:	f7ff fd6a 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 8018678:	22ff      	movs	r2, #255	; 0xff
 801867a:	2100      	movs	r1, #0
 801867c:	4849      	ldr	r0, [pc, #292]	; (80187a4 <csv_update+0x214>)
 801867e:	f001 f865 	bl	801974c <memset>
		sprintf(buffer, "%d ,", _RunTime_Packet.co2);
 8018682:	4b50      	ldr	r3, [pc, #320]	; (80187c4 <csv_update+0x234>)
 8018684:	881b      	ldrh	r3, [r3, #0]
 8018686:	461a      	mov	r2, r3
 8018688:	494f      	ldr	r1, [pc, #316]	; (80187c8 <csv_update+0x238>)
 801868a:	4846      	ldr	r0, [pc, #280]	; (80187a4 <csv_update+0x214>)
 801868c:	f002 f864 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 8018690:	4944      	ldr	r1, [pc, #272]	; (80187a4 <csv_update+0x214>)
 8018692:	4845      	ldr	r0, [pc, #276]	; (80187a8 <csv_update+0x218>)
 8018694:	f7ff fd5a 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 8018698:	22ff      	movs	r2, #255	; 0xff
 801869a:	2100      	movs	r1, #0
 801869c:	4841      	ldr	r0, [pc, #260]	; (80187a4 <csv_update+0x214>)
 801869e:	f001 f855 	bl	801974c <memset>
		sprintf(buffer, "%ld ,", _RunTime_Packet.temperature);
 80186a2:	4b48      	ldr	r3, [pc, #288]	; (80187c4 <csv_update+0x234>)
 80186a4:	685b      	ldr	r3, [r3, #4]
 80186a6:	461a      	mov	r2, r3
 80186a8:	4948      	ldr	r1, [pc, #288]	; (80187cc <csv_update+0x23c>)
 80186aa:	483e      	ldr	r0, [pc, #248]	; (80187a4 <csv_update+0x214>)
 80186ac:	f002 f854 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 80186b0:	493c      	ldr	r1, [pc, #240]	; (80187a4 <csv_update+0x214>)
 80186b2:	483d      	ldr	r0, [pc, #244]	; (80187a8 <csv_update+0x218>)
 80186b4:	f7ff fd4a 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 80186b8:	22ff      	movs	r2, #255	; 0xff
 80186ba:	2100      	movs	r1, #0
 80186bc:	4839      	ldr	r0, [pc, #228]	; (80187a4 <csv_update+0x214>)
 80186be:	f001 f845 	bl	801974c <memset>
		sprintf(buffer, "%ld ,",  _RunTime_Packet.humidity);
 80186c2:	4b40      	ldr	r3, [pc, #256]	; (80187c4 <csv_update+0x234>)
 80186c4:	689b      	ldr	r3, [r3, #8]
 80186c6:	461a      	mov	r2, r3
 80186c8:	4940      	ldr	r1, [pc, #256]	; (80187cc <csv_update+0x23c>)
 80186ca:	4836      	ldr	r0, [pc, #216]	; (80187a4 <csv_update+0x214>)
 80186cc:	f002 f844 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 80186d0:	4934      	ldr	r1, [pc, #208]	; (80187a4 <csv_update+0x214>)
 80186d2:	4835      	ldr	r0, [pc, #212]	; (80187a8 <csv_update+0x218>)
 80186d4:	f7ff fd3a 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 80186d8:	22ff      	movs	r2, #255	; 0xff
 80186da:	2100      	movs	r1, #0
 80186dc:	4831      	ldr	r0, [pc, #196]	; (80187a4 <csv_update+0x214>)
 80186de:	f001 f835 	bl	801974c <memset>
		sprintf(buffer, "%s ,", _RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 80186e2:	4b38      	ldr	r3, [pc, #224]	; (80187c4 <csv_update+0x234>)
 80186e4:	7b1b      	ldrb	r3, [r3, #12]
 80186e6:	2b01      	cmp	r3, #1
 80186e8:	d101      	bne.n	80186ee <csv_update+0x15e>
 80186ea:	4b39      	ldr	r3, [pc, #228]	; (80187d0 <csv_update+0x240>)
 80186ec:	e000      	b.n	80186f0 <csv_update+0x160>
 80186ee:	4b39      	ldr	r3, [pc, #228]	; (80187d4 <csv_update+0x244>)
 80186f0:	461a      	mov	r2, r3
 80186f2:	492f      	ldr	r1, [pc, #188]	; (80187b0 <csv_update+0x220>)
 80186f4:	482b      	ldr	r0, [pc, #172]	; (80187a4 <csv_update+0x214>)
 80186f6:	f002 f82f 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 80186fa:	492a      	ldr	r1, [pc, #168]	; (80187a4 <csv_update+0x214>)
 80186fc:	482a      	ldr	r0, [pc, #168]	; (80187a8 <csv_update+0x218>)
 80186fe:	f7ff fd25 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 8018702:	22ff      	movs	r2, #255	; 0xff
 8018704:	2100      	movs	r1, #0
 8018706:	4827      	ldr	r0, [pc, #156]	; (80187a4 <csv_update+0x214>)
 8018708:	f001 f820 	bl	801974c <memset>
		sprintf(buffer, "%.02f ,", _RunTime_Packet.pm2_5);
 801870c:	4b2d      	ldr	r3, [pc, #180]	; (80187c4 <csv_update+0x234>)
 801870e:	695b      	ldr	r3, [r3, #20]
 8018710:	4618      	mov	r0, r3
 8018712:	f7e7 ff31 	bl	8000578 <__aeabi_f2d>
 8018716:	4602      	mov	r2, r0
 8018718:	460b      	mov	r3, r1
 801871a:	492f      	ldr	r1, [pc, #188]	; (80187d8 <csv_update+0x248>)
 801871c:	4821      	ldr	r0, [pc, #132]	; (80187a4 <csv_update+0x214>)
 801871e:	f002 f81b 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 8018722:	4920      	ldr	r1, [pc, #128]	; (80187a4 <csv_update+0x214>)
 8018724:	4820      	ldr	r0, [pc, #128]	; (80187a8 <csv_update+0x218>)
 8018726:	f7ff fd11 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801872a:	22ff      	movs	r2, #255	; 0xff
 801872c:	2100      	movs	r1, #0
 801872e:	481d      	ldr	r0, [pc, #116]	; (80187a4 <csv_update+0x214>)
 8018730:	f001 f80c 	bl	801974c <memset>
		sprintf(buffer, "NONE ,");
 8018734:	4929      	ldr	r1, [pc, #164]	; (80187dc <csv_update+0x24c>)
 8018736:	481b      	ldr	r0, [pc, #108]	; (80187a4 <csv_update+0x214>)
 8018738:	f002 f80e 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 801873c:	4919      	ldr	r1, [pc, #100]	; (80187a4 <csv_update+0x214>)
 801873e:	481a      	ldr	r0, [pc, #104]	; (80187a8 <csv_update+0x218>)
 8018740:	f7ff fd04 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 8018744:	22ff      	movs	r2, #255	; 0xff
 8018746:	2100      	movs	r1, #0
 8018748:	4816      	ldr	r0, [pc, #88]	; (80187a4 <csv_update+0x214>)
 801874a:	f000 ffff 	bl	801974c <memset>
		sprintf(buffer, "%.02f ,", _RunTime_Packet.battery_voltage);
 801874e:	4b1d      	ldr	r3, [pc, #116]	; (80187c4 <csv_update+0x234>)
 8018750:	6a1b      	ldr	r3, [r3, #32]
 8018752:	4618      	mov	r0, r3
 8018754:	f7e7 ff10 	bl	8000578 <__aeabi_f2d>
 8018758:	4602      	mov	r2, r0
 801875a:	460b      	mov	r3, r1
 801875c:	491e      	ldr	r1, [pc, #120]	; (80187d8 <csv_update+0x248>)
 801875e:	4811      	ldr	r0, [pc, #68]	; (80187a4 <csv_update+0x214>)
 8018760:	f001 fffa 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 8018764:	490f      	ldr	r1, [pc, #60]	; (80187a4 <csv_update+0x214>)
 8018766:	4810      	ldr	r0, [pc, #64]	; (80187a8 <csv_update+0x218>)
 8018768:	f7ff fcf0 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801876c:	22ff      	movs	r2, #255	; 0xff
 801876e:	2100      	movs	r1, #0
 8018770:	480c      	ldr	r0, [pc, #48]	; (80187a4 <csv_update+0x214>)
 8018772:	f000 ffeb 	bl	801974c <memset>
		sprintf(buffer, "\n");
 8018776:	491a      	ldr	r1, [pc, #104]	; (80187e0 <csv_update+0x250>)
 8018778:	480a      	ldr	r0, [pc, #40]	; (80187a4 <csv_update+0x214>)
 801877a:	f001 ffed 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 801877e:	4909      	ldr	r1, [pc, #36]	; (80187a4 <csv_update+0x214>)
 8018780:	4809      	ldr	r0, [pc, #36]	; (80187a8 <csv_update+0x218>)
 8018782:	f7ff fce3 	bl	801814c <Update_File>

		Unmount_SD("/");
 8018786:	4804      	ldr	r0, [pc, #16]	; (8018798 <csv_update+0x208>)
 8018788:	f7ff fc08 	bl	8017f9c <Unmount_SD>
	}
}
 801878c:	bf00      	nop
 801878e:	3718      	adds	r7, #24
 8018790:	46bd      	mov	sp, r7
 8018792:	bd80      	pop	{r7, pc}
 8018794:	20000814 	.word	0x20000814
 8018798:	0801f830 	.word	0x0801f830
 801879c:	200011a4 	.word	0x200011a4
 80187a0:	0801f948 	.word	0x0801f948
 80187a4:	20001210 	.word	0x20001210
 80187a8:	200011a8 	.word	0x200011a8
 80187ac:	200003fd 	.word	0x200003fd
 80187b0:	0801f954 	.word	0x0801f954
 80187b4:	0801f95c 	.word	0x0801f95c
 80187b8:	2000042f 	.word	0x2000042f
 80187bc:	20000461 	.word	0x20000461
 80187c0:	20000493 	.word	0x20000493
 80187c4:	200004c8 	.word	0x200004c8
 80187c8:	0801f970 	.word	0x0801f970
 80187cc:	0801f978 	.word	0x0801f978
 80187d0:	0801f8ec 	.word	0x0801f8ec
 80187d4:	0801f8f4 	.word	0x0801f8f4
 80187d8:	0801f980 	.word	0x0801f980
 80187dc:	0801f988 	.word	0x0801f988
 80187e0:	0801f990 	.word	0x0801f990

080187e4 <csv_header>:
void csv_header() {
 80187e4:	b580      	push	{r7, lr}
 80187e6:	af00      	add	r7, sp, #0

	fresult1 = Mount_SD("/");
 80187e8:	485a      	ldr	r0, [pc, #360]	; (8018954 <csv_header+0x170>)
 80187ea:	f7ff fbab 	bl	8017f44 <Mount_SD>
 80187ee:	4603      	mov	r3, r0
 80187f0:	461a      	mov	r2, r3
 80187f2:	4b59      	ldr	r3, [pc, #356]	; (8018958 <csv_header+0x174>)
 80187f4:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 80187f6:	4b58      	ldr	r3, [pc, #352]	; (8018958 <csv_header+0x174>)
 80187f8:	781b      	ldrb	r3, [r3, #0]
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	f040 80a7 	bne.w	801894e <csv_header+0x16a>
//		sprintf(buffer, " co2 , temperature , humidity ,");
//		Update_File(filename_with_format, buffer);
//		sprintf(buffer, " pir , pm2.5 , port ,battery\n\n");
//		Update_File(filename_with_format, buffer);

		sprintf(buffer, "devEUI ,");
 8018800:	4956      	ldr	r1, [pc, #344]	; (801895c <csv_header+0x178>)
 8018802:	4857      	ldr	r0, [pc, #348]	; (8018960 <csv_header+0x17c>)
 8018804:	f001 ffa8 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 8018808:	4955      	ldr	r1, [pc, #340]	; (8018960 <csv_header+0x17c>)
 801880a:	4856      	ldr	r0, [pc, #344]	; (8018964 <csv_header+0x180>)
 801880c:	f7ff fc9e 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 8018810:	22ff      	movs	r2, #255	; 0xff
 8018812:	2100      	movs	r1, #0
 8018814:	4852      	ldr	r0, [pc, #328]	; (8018960 <csv_header+0x17c>)
 8018816:	f000 ff99 	bl	801974c <memset>
		sprintf(buffer, "id ,");
 801881a:	4953      	ldr	r1, [pc, #332]	; (8018968 <csv_header+0x184>)
 801881c:	4850      	ldr	r0, [pc, #320]	; (8018960 <csv_header+0x17c>)
 801881e:	f001 ff9b 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 8018822:	494f      	ldr	r1, [pc, #316]	; (8018960 <csv_header+0x17c>)
 8018824:	484f      	ldr	r0, [pc, #316]	; (8018964 <csv_header+0x180>)
 8018826:	f7ff fc91 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801882a:	22ff      	movs	r2, #255	; 0xff
 801882c:	2100      	movs	r1, #0
 801882e:	484c      	ldr	r0, [pc, #304]	; (8018960 <csv_header+0x17c>)
 8018830:	f000 ff8c 	bl	801974c <memset>
		sprintf(buffer, "timestamp ,");
 8018834:	494d      	ldr	r1, [pc, #308]	; (801896c <csv_header+0x188>)
 8018836:	484a      	ldr	r0, [pc, #296]	; (8018960 <csv_header+0x17c>)
 8018838:	f001 ff8e 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 801883c:	4948      	ldr	r1, [pc, #288]	; (8018960 <csv_header+0x17c>)
 801883e:	4849      	ldr	r0, [pc, #292]	; (8018964 <csv_header+0x180>)
 8018840:	f7ff fc84 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 8018844:	22ff      	movs	r2, #255	; 0xff
 8018846:	2100      	movs	r1, #0
 8018848:	4845      	ldr	r0, [pc, #276]	; (8018960 <csv_header+0x17c>)
 801884a:	f000 ff7f 	bl	801974c <memset>
		sprintf(buffer, "location ,");
 801884e:	4948      	ldr	r1, [pc, #288]	; (8018970 <csv_header+0x18c>)
 8018850:	4843      	ldr	r0, [pc, #268]	; (8018960 <csv_header+0x17c>)
 8018852:	f001 ff81 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 8018856:	4942      	ldr	r1, [pc, #264]	; (8018960 <csv_header+0x17c>)
 8018858:	4842      	ldr	r0, [pc, #264]	; (8018964 <csv_header+0x180>)
 801885a:	f7ff fc77 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801885e:	22ff      	movs	r2, #255	; 0xff
 8018860:	2100      	movs	r1, #0
 8018862:	483f      	ldr	r0, [pc, #252]	; (8018960 <csv_header+0x17c>)
 8018864:	f000 ff72 	bl	801974c <memset>
		sprintf(buffer, "name ,");
 8018868:	4942      	ldr	r1, [pc, #264]	; (8018974 <csv_header+0x190>)
 801886a:	483d      	ldr	r0, [pc, #244]	; (8018960 <csv_header+0x17c>)
 801886c:	f001 ff74 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 8018870:	493b      	ldr	r1, [pc, #236]	; (8018960 <csv_header+0x17c>)
 8018872:	483c      	ldr	r0, [pc, #240]	; (8018964 <csv_header+0x180>)
 8018874:	f7ff fc6a 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 8018878:	22ff      	movs	r2, #255	; 0xff
 801887a:	2100      	movs	r1, #0
 801887c:	4838      	ldr	r0, [pc, #224]	; (8018960 <csv_header+0x17c>)
 801887e:	f000 ff65 	bl	801974c <memset>
		sprintf(buffer, "group ,");
 8018882:	493d      	ldr	r1, [pc, #244]	; (8018978 <csv_header+0x194>)
 8018884:	4836      	ldr	r0, [pc, #216]	; (8018960 <csv_header+0x17c>)
 8018886:	f001 ff67 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 801888a:	4935      	ldr	r1, [pc, #212]	; (8018960 <csv_header+0x17c>)
 801888c:	4835      	ldr	r0, [pc, #212]	; (8018964 <csv_header+0x180>)
 801888e:	f7ff fc5d 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 8018892:	22ff      	movs	r2, #255	; 0xff
 8018894:	2100      	movs	r1, #0
 8018896:	4832      	ldr	r0, [pc, #200]	; (8018960 <csv_header+0x17c>)
 8018898:	f000 ff58 	bl	801974c <memset>
		sprintf(buffer, "co2 ,");
 801889c:	4937      	ldr	r1, [pc, #220]	; (801897c <csv_header+0x198>)
 801889e:	4830      	ldr	r0, [pc, #192]	; (8018960 <csv_header+0x17c>)
 80188a0:	f001 ff5a 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 80188a4:	492e      	ldr	r1, [pc, #184]	; (8018960 <csv_header+0x17c>)
 80188a6:	482f      	ldr	r0, [pc, #188]	; (8018964 <csv_header+0x180>)
 80188a8:	f7ff fc50 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 80188ac:	22ff      	movs	r2, #255	; 0xff
 80188ae:	2100      	movs	r1, #0
 80188b0:	482b      	ldr	r0, [pc, #172]	; (8018960 <csv_header+0x17c>)
 80188b2:	f000 ff4b 	bl	801974c <memset>
		sprintf(buffer, "temperature ,");
 80188b6:	4932      	ldr	r1, [pc, #200]	; (8018980 <csv_header+0x19c>)
 80188b8:	4829      	ldr	r0, [pc, #164]	; (8018960 <csv_header+0x17c>)
 80188ba:	f001 ff4d 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 80188be:	4928      	ldr	r1, [pc, #160]	; (8018960 <csv_header+0x17c>)
 80188c0:	4828      	ldr	r0, [pc, #160]	; (8018964 <csv_header+0x180>)
 80188c2:	f7ff fc43 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 80188c6:	22ff      	movs	r2, #255	; 0xff
 80188c8:	2100      	movs	r1, #0
 80188ca:	4825      	ldr	r0, [pc, #148]	; (8018960 <csv_header+0x17c>)
 80188cc:	f000 ff3e 	bl	801974c <memset>
		sprintf(buffer, "humidity ,");
 80188d0:	492c      	ldr	r1, [pc, #176]	; (8018984 <csv_header+0x1a0>)
 80188d2:	4823      	ldr	r0, [pc, #140]	; (8018960 <csv_header+0x17c>)
 80188d4:	f001 ff40 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 80188d8:	4921      	ldr	r1, [pc, #132]	; (8018960 <csv_header+0x17c>)
 80188da:	4822      	ldr	r0, [pc, #136]	; (8018964 <csv_header+0x180>)
 80188dc:	f7ff fc36 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 80188e0:	22ff      	movs	r2, #255	; 0xff
 80188e2:	2100      	movs	r1, #0
 80188e4:	481e      	ldr	r0, [pc, #120]	; (8018960 <csv_header+0x17c>)
 80188e6:	f000 ff31 	bl	801974c <memset>
		sprintf(buffer, "pir ,");
 80188ea:	4927      	ldr	r1, [pc, #156]	; (8018988 <csv_header+0x1a4>)
 80188ec:	481c      	ldr	r0, [pc, #112]	; (8018960 <csv_header+0x17c>)
 80188ee:	f001 ff33 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 80188f2:	491b      	ldr	r1, [pc, #108]	; (8018960 <csv_header+0x17c>)
 80188f4:	481b      	ldr	r0, [pc, #108]	; (8018964 <csv_header+0x180>)
 80188f6:	f7ff fc29 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 80188fa:	22ff      	movs	r2, #255	; 0xff
 80188fc:	2100      	movs	r1, #0
 80188fe:	4818      	ldr	r0, [pc, #96]	; (8018960 <csv_header+0x17c>)
 8018900:	f000 ff24 	bl	801974c <memset>
		sprintf(buffer, "pm2.5 ,");
 8018904:	4921      	ldr	r1, [pc, #132]	; (801898c <csv_header+0x1a8>)
 8018906:	4816      	ldr	r0, [pc, #88]	; (8018960 <csv_header+0x17c>)
 8018908:	f001 ff26 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 801890c:	4914      	ldr	r1, [pc, #80]	; (8018960 <csv_header+0x17c>)
 801890e:	4815      	ldr	r0, [pc, #84]	; (8018964 <csv_header+0x180>)
 8018910:	f7ff fc1c 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 8018914:	22ff      	movs	r2, #255	; 0xff
 8018916:	2100      	movs	r1, #0
 8018918:	4811      	ldr	r0, [pc, #68]	; (8018960 <csv_header+0x17c>)
 801891a:	f000 ff17 	bl	801974c <memset>
		sprintf(buffer, "port ,");
 801891e:	491c      	ldr	r1, [pc, #112]	; (8018990 <csv_header+0x1ac>)
 8018920:	480f      	ldr	r0, [pc, #60]	; (8018960 <csv_header+0x17c>)
 8018922:	f001 ff19 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 8018926:	490e      	ldr	r1, [pc, #56]	; (8018960 <csv_header+0x17c>)
 8018928:	480e      	ldr	r0, [pc, #56]	; (8018964 <csv_header+0x180>)
 801892a:	f7ff fc0f 	bl	801814c <Update_File>

		memset(buffer,0,sizeof(buffer));
 801892e:	22ff      	movs	r2, #255	; 0xff
 8018930:	2100      	movs	r1, #0
 8018932:	480b      	ldr	r0, [pc, #44]	; (8018960 <csv_header+0x17c>)
 8018934:	f000 ff0a 	bl	801974c <memset>
		sprintf(buffer, "battery \n\n");
 8018938:	4916      	ldr	r1, [pc, #88]	; (8018994 <csv_header+0x1b0>)
 801893a:	4809      	ldr	r0, [pc, #36]	; (8018960 <csv_header+0x17c>)
 801893c:	f001 ff0c 	bl	801a758 <siprintf>
		Update_File(filename_with_format, buffer);
 8018940:	4907      	ldr	r1, [pc, #28]	; (8018960 <csv_header+0x17c>)
 8018942:	4808      	ldr	r0, [pc, #32]	; (8018964 <csv_header+0x180>)
 8018944:	f7ff fc02 	bl	801814c <Update_File>

		Unmount_SD("/");
 8018948:	4802      	ldr	r0, [pc, #8]	; (8018954 <csv_header+0x170>)
 801894a:	f7ff fb27 	bl	8017f9c <Unmount_SD>
	}
}
 801894e:	bf00      	nop
 8018950:	bd80      	pop	{r7, pc}
 8018952:	bf00      	nop
 8018954:	0801f830 	.word	0x0801f830
 8018958:	200011a4 	.word	0x200011a4
 801895c:	0801f994 	.word	0x0801f994
 8018960:	20001210 	.word	0x20001210
 8018964:	200011a8 	.word	0x200011a8
 8018968:	0801f9a0 	.word	0x0801f9a0
 801896c:	0801f9a8 	.word	0x0801f9a8
 8018970:	0801f9b4 	.word	0x0801f9b4
 8018974:	0801f9c0 	.word	0x0801f9c0
 8018978:	0801f9c8 	.word	0x0801f9c8
 801897c:	0801f9d0 	.word	0x0801f9d0
 8018980:	0801f9d8 	.word	0x0801f9d8
 8018984:	0801f9e8 	.word	0x0801f9e8
 8018988:	0801f9f4 	.word	0x0801f9f4
 801898c:	0801f9fc 	.word	0x0801f9fc
 8018990:	0801fa04 	.word	0x0801fa04
 8018994:	0801fa0c 	.word	0x0801fa0c

08018998 <filesaving_process>:
void filesaving_process() {
 8018998:	b580      	push	{r7, lr}
 801899a:	af00      	add	r7, sp, #0
	memset(buffer,0,sizeof(buffer));
 801899c:	22ff      	movs	r2, #255	; 0xff
 801899e:	2100      	movs	r1, #0
 80189a0:	4807      	ldr	r0, [pc, #28]	; (80189c0 <filesaving_process+0x28>)
 80189a2:	f000 fed3 	bl	801974c <memset>
	if (_RunTime_Packet.fileformat_selection) {
 80189a6:	4b07      	ldr	r3, [pc, #28]	; (80189c4 <filesaving_process+0x2c>)
 80189a8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	d002      	beq.n	80189b6 <filesaving_process+0x1e>
		csv_update();
 80189b0:	f7ff fdee 	bl	8018590 <csv_update>
	} else {
		json_update();
	}
}
 80189b4:	e001      	b.n	80189ba <filesaving_process+0x22>
		json_update();
 80189b6:	f7ff fca1 	bl	80182fc <json_update>
}
 80189ba:	bf00      	nop
 80189bc:	bd80      	pop	{r7, pc}
 80189be:	bf00      	nop
 80189c0:	20001210 	.word	0x20001210
 80189c4:	200004c8 	.word	0x200004c8

080189c8 <createfile>:
int8_t createfile(char *filename, char *fileformat) {
 80189c8:	b580      	push	{r7, lr}
 80189ca:	b08c      	sub	sp, #48	; 0x30
 80189cc:	af04      	add	r7, sp, #16
 80189ce:	6078      	str	r0, [r7, #4]
 80189d0:	6039      	str	r1, [r7, #0]
	if (Mount_SD("/") == FR_OK) {
 80189d2:	482b      	ldr	r0, [pc, #172]	; (8018a80 <createfile+0xb8>)
 80189d4:	f7ff fab6 	bl	8017f44 <Mount_SD>
 80189d8:	4603      	mov	r3, r0
 80189da:	2b00      	cmp	r3, #0
 80189dc:	d002      	beq.n	80189e4 <createfile+0x1c>
	} else {

		return -1;
 80189de:	f04f 33ff 	mov.w	r3, #4294967295
 80189e2:	e049      	b.n	8018a78 <createfile+0xb0>
	}
	Unmount_SD("/");
 80189e4:	4826      	ldr	r0, [pc, #152]	; (8018a80 <createfile+0xb8>)
 80189e6:	f7ff fad9 	bl	8017f9c <Unmount_SD>

	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 80189ea:	f107 031c 	add.w	r3, r7, #28
 80189ee:	2200      	movs	r2, #0
 80189f0:	4619      	mov	r1, r3
 80189f2:	4824      	ldr	r0, [pc, #144]	; (8018a84 <createfile+0xbc>)
 80189f4:	f7ef f904 	bl	8007c00 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 80189f8:	f107 0308 	add.w	r3, r7, #8
 80189fc:	2200      	movs	r2, #0
 80189fe:	4619      	mov	r1, r3
 8018a00:	4820      	ldr	r0, [pc, #128]	; (8018a84 <createfile+0xbc>)
 8018a02:	f7ef f81b 	bl	8007a3c <HAL_RTC_GetTime>

	fresult1 = Mount_SD("/");
 8018a06:	481e      	ldr	r0, [pc, #120]	; (8018a80 <createfile+0xb8>)
 8018a08:	f7ff fa9c 	bl	8017f44 <Mount_SD>
 8018a0c:	4603      	mov	r3, r0
 8018a0e:	461a      	mov	r2, r3
 8018a10:	4b1d      	ldr	r3, [pc, #116]	; (8018a88 <createfile+0xc0>)
 8018a12:	701a      	strb	r2, [r3, #0]
	if (fresult1 == FR_OK) {
 8018a14:	4b1c      	ldr	r3, [pc, #112]	; (8018a88 <createfile+0xc0>)
 8018a16:	781b      	ldrb	r3, [r3, #0]
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	d129      	bne.n	8018a70 <createfile+0xa8>

		sprintf(filename_with_format, "%s_%02d-%02d-%02d%s", filename,
				sDate.Year, sDate.Month, sDate.Date, fileformat);
 8018a1c:	7ffb      	ldrb	r3, [r7, #31]
		sprintf(filename_with_format, "%s_%02d-%02d-%02d%s", filename,
 8018a1e:	4618      	mov	r0, r3
				sDate.Year, sDate.Month, sDate.Date, fileformat);
 8018a20:	7f7b      	ldrb	r3, [r7, #29]
		sprintf(filename_with_format, "%s_%02d-%02d-%02d%s", filename,
 8018a22:	461a      	mov	r2, r3
				sDate.Year, sDate.Month, sDate.Date, fileformat);
 8018a24:	7fbb      	ldrb	r3, [r7, #30]
		sprintf(filename_with_format, "%s_%02d-%02d-%02d%s", filename,
 8018a26:	4619      	mov	r1, r3
 8018a28:	683b      	ldr	r3, [r7, #0]
 8018a2a:	9302      	str	r3, [sp, #8]
 8018a2c:	9101      	str	r1, [sp, #4]
 8018a2e:	9200      	str	r2, [sp, #0]
 8018a30:	4603      	mov	r3, r0
 8018a32:	687a      	ldr	r2, [r7, #4]
 8018a34:	4915      	ldr	r1, [pc, #84]	; (8018a8c <createfile+0xc4>)
 8018a36:	4816      	ldr	r0, [pc, #88]	; (8018a90 <createfile+0xc8>)
 8018a38:	f001 fe8e 	bl	801a758 <siprintf>

		fresult1 = Create_File(filename_with_format);
 8018a3c:	4814      	ldr	r0, [pc, #80]	; (8018a90 <createfile+0xc8>)
 8018a3e:	f7ff fad5 	bl	8017fec <Create_File>
 8018a42:	4603      	mov	r3, r0
 8018a44:	461a      	mov	r2, r3
 8018a46:	4b10      	ldr	r3, [pc, #64]	; (8018a88 <createfile+0xc0>)
 8018a48:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 8018a4a:	480d      	ldr	r0, [pc, #52]	; (8018a80 <createfile+0xb8>)
 8018a4c:	f7ff faa6 	bl	8017f9c <Unmount_SD>

		if (_RunTime_Packet.fileformat_selection) {
 8018a50:	4b10      	ldr	r3, [pc, #64]	; (8018a94 <createfile+0xcc>)
 8018a52:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	d00d      	beq.n	8018a76 <createfile+0xae>
			if (file_already_exist) {
 8018a5a:	4b0f      	ldr	r3, [pc, #60]	; (8018a98 <createfile+0xd0>)
 8018a5c:	781b      	ldrb	r3, [r3, #0]
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	d003      	beq.n	8018a6a <createfile+0xa2>
				file_already_exist = 0;
 8018a62:	4b0d      	ldr	r3, [pc, #52]	; (8018a98 <createfile+0xd0>)
 8018a64:	2200      	movs	r2, #0
 8018a66:	701a      	strb	r2, [r3, #0]
 8018a68:	e005      	b.n	8018a76 <createfile+0xae>
			} else {
				csv_header();  //json does not require an header only csv
 8018a6a:	f7ff febb 	bl	80187e4 <csv_header>
 8018a6e:	e002      	b.n	8018a76 <createfile+0xae>
			}
		}

	} else {
		return -1;
 8018a70:	f04f 33ff 	mov.w	r3, #4294967295
 8018a74:	e000      	b.n	8018a78 <createfile+0xb0>
	}

	return 0;
 8018a76:	2300      	movs	r3, #0
}
 8018a78:	4618      	mov	r0, r3
 8018a7a:	3720      	adds	r7, #32
 8018a7c:	46bd      	mov	sp, r7
 8018a7e:	bd80      	pop	{r7, pc}
 8018a80:	0801f830 	.word	0x0801f830
 8018a84:	20000814 	.word	0x20000814
 8018a88:	200011a4 	.word	0x200011a4
 8018a8c:	0801fa18 	.word	0x0801fa18
 8018a90:	200011a8 	.word	0x200011a8
 8018a94:	200004c8 	.word	0x200004c8
 8018a98:	2000120c 	.word	0x2000120c

08018a9c <MX_USB_DEVICE_DeInit>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_DeInit(void)
{
 8018a9c:	b580      	push	{r7, lr}
 8018a9e:	af00      	add	r7, sp, #0

	USBD_MSC_DeInit(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS);
 8018aa0:	4905      	ldr	r1, [pc, #20]	; (8018ab8 <MX_USB_DEVICE_DeInit+0x1c>)
 8018aa2:	4806      	ldr	r0, [pc, #24]	; (8018abc <MX_USB_DEVICE_DeInit+0x20>)
 8018aa4:	f7f9 f88a 	bl	8011bbc <USBD_MSC_DeInit>
	USBD_Stop(&hUsbDeviceFS);
 8018aa8:	4804      	ldr	r0, [pc, #16]	; (8018abc <MX_USB_DEVICE_DeInit+0x20>)
 8018aaa:	f7fb f854 	bl	8013b56 <USBD_Stop>
	USBD_DeInit(&hUsbDeviceFS);
 8018aae:	4803      	ldr	r0, [pc, #12]	; (8018abc <MX_USB_DEVICE_DeInit+0x20>)
 8018ab0:	f7fa ffdf 	bl	8013a72 <USBD_DeInit>

}
 8018ab4:	bf00      	nop
 8018ab6:	bd80      	pop	{r7, pc}
 8018ab8:	20000120 	.word	0x20000120
 8018abc:	20001310 	.word	0x20001310

08018ac0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8018ac0:	b580      	push	{r7, lr}
 8018ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8018ac4:	2200      	movs	r2, #0
 8018ac6:	4912      	ldr	r1, [pc, #72]	; (8018b10 <MX_USB_DEVICE_Init+0x50>)
 8018ac8:	4812      	ldr	r0, [pc, #72]	; (8018b14 <MX_USB_DEVICE_Init+0x54>)
 8018aca:	f7fa ffa2 	bl	8013a12 <USBD_Init>
 8018ace:	4603      	mov	r3, r0
 8018ad0:	2b00      	cmp	r3, #0
 8018ad2:	d001      	beq.n	8018ad8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8018ad4:	f7e9 fc62 	bl	800239c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8018ad8:	490f      	ldr	r1, [pc, #60]	; (8018b18 <MX_USB_DEVICE_Init+0x58>)
 8018ada:	480e      	ldr	r0, [pc, #56]	; (8018b14 <MX_USB_DEVICE_Init+0x54>)
 8018adc:	f7fa fff9 	bl	8013ad2 <USBD_RegisterClass>
 8018ae0:	4603      	mov	r3, r0
 8018ae2:	2b00      	cmp	r3, #0
 8018ae4:	d001      	beq.n	8018aea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8018ae6:	f7e9 fc59 	bl	800239c <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8018aea:	490c      	ldr	r1, [pc, #48]	; (8018b1c <MX_USB_DEVICE_Init+0x5c>)
 8018aec:	4809      	ldr	r0, [pc, #36]	; (8018b14 <MX_USB_DEVICE_Init+0x54>)
 8018aee:	f7f9 fa6d 	bl	8011fcc <USBD_MSC_RegisterStorage>
 8018af2:	4603      	mov	r3, r0
 8018af4:	2b00      	cmp	r3, #0
 8018af6:	d001      	beq.n	8018afc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018af8:	f7e9 fc50 	bl	800239c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8018afc:	4805      	ldr	r0, [pc, #20]	; (8018b14 <MX_USB_DEVICE_Init+0x54>)
 8018afe:	f7fb f81e 	bl	8013b3e <USBD_Start>
 8018b02:	4603      	mov	r3, r0
 8018b04:	2b00      	cmp	r3, #0
 8018b06:	d001      	beq.n	8018b0c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018b08:	f7e9 fc48 	bl	800239c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018b0c:	bf00      	nop
 8018b0e:	bd80      	pop	{r7, pc}
 8018b10:	200000d0 	.word	0x200000d0
 8018b14:	20001310 	.word	0x20001310
 8018b18:	20000028 	.word	0x20000028
 8018b1c:	20000120 	.word	0x20000120

08018b20 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018b20:	b480      	push	{r7}
 8018b22:	b083      	sub	sp, #12
 8018b24:	af00      	add	r7, sp, #0
 8018b26:	4603      	mov	r3, r0
 8018b28:	6039      	str	r1, [r7, #0]
 8018b2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8018b2c:	683b      	ldr	r3, [r7, #0]
 8018b2e:	2212      	movs	r2, #18
 8018b30:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8018b32:	4b03      	ldr	r3, [pc, #12]	; (8018b40 <USBD_FS_DeviceDescriptor+0x20>)
}
 8018b34:	4618      	mov	r0, r3
 8018b36:	370c      	adds	r7, #12
 8018b38:	46bd      	mov	sp, r7
 8018b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b3e:	4770      	bx	lr
 8018b40:	200000ec 	.word	0x200000ec

08018b44 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018b44:	b480      	push	{r7}
 8018b46:	b083      	sub	sp, #12
 8018b48:	af00      	add	r7, sp, #0
 8018b4a:	4603      	mov	r3, r0
 8018b4c:	6039      	str	r1, [r7, #0]
 8018b4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018b50:	683b      	ldr	r3, [r7, #0]
 8018b52:	2204      	movs	r2, #4
 8018b54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018b56:	4b03      	ldr	r3, [pc, #12]	; (8018b64 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8018b58:	4618      	mov	r0, r3
 8018b5a:	370c      	adds	r7, #12
 8018b5c:	46bd      	mov	sp, r7
 8018b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b62:	4770      	bx	lr
 8018b64:	20000100 	.word	0x20000100

08018b68 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018b68:	b580      	push	{r7, lr}
 8018b6a:	b082      	sub	sp, #8
 8018b6c:	af00      	add	r7, sp, #0
 8018b6e:	4603      	mov	r3, r0
 8018b70:	6039      	str	r1, [r7, #0]
 8018b72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018b74:	79fb      	ldrb	r3, [r7, #7]
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	d105      	bne.n	8018b86 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018b7a:	683a      	ldr	r2, [r7, #0]
 8018b7c:	4907      	ldr	r1, [pc, #28]	; (8018b9c <USBD_FS_ProductStrDescriptor+0x34>)
 8018b7e:	4808      	ldr	r0, [pc, #32]	; (8018ba0 <USBD_FS_ProductStrDescriptor+0x38>)
 8018b80:	f7fc f9a4 	bl	8014ecc <USBD_GetString>
 8018b84:	e004      	b.n	8018b90 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018b86:	683a      	ldr	r2, [r7, #0]
 8018b88:	4904      	ldr	r1, [pc, #16]	; (8018b9c <USBD_FS_ProductStrDescriptor+0x34>)
 8018b8a:	4805      	ldr	r0, [pc, #20]	; (8018ba0 <USBD_FS_ProductStrDescriptor+0x38>)
 8018b8c:	f7fc f99e 	bl	8014ecc <USBD_GetString>
  }
  return USBD_StrDesc;
 8018b90:	4b02      	ldr	r3, [pc, #8]	; (8018b9c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8018b92:	4618      	mov	r0, r3
 8018b94:	3708      	adds	r7, #8
 8018b96:	46bd      	mov	sp, r7
 8018b98:	bd80      	pop	{r7, pc}
 8018b9a:	bf00      	nop
 8018b9c:	200015ec 	.word	0x200015ec
 8018ba0:	0801fa2c 	.word	0x0801fa2c

08018ba4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018ba4:	b580      	push	{r7, lr}
 8018ba6:	b082      	sub	sp, #8
 8018ba8:	af00      	add	r7, sp, #0
 8018baa:	4603      	mov	r3, r0
 8018bac:	6039      	str	r1, [r7, #0]
 8018bae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018bb0:	683a      	ldr	r2, [r7, #0]
 8018bb2:	4904      	ldr	r1, [pc, #16]	; (8018bc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8018bb4:	4804      	ldr	r0, [pc, #16]	; (8018bc8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8018bb6:	f7fc f989 	bl	8014ecc <USBD_GetString>
  return USBD_StrDesc;
 8018bba:	4b02      	ldr	r3, [pc, #8]	; (8018bc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8018bbc:	4618      	mov	r0, r3
 8018bbe:	3708      	adds	r7, #8
 8018bc0:	46bd      	mov	sp, r7
 8018bc2:	bd80      	pop	{r7, pc}
 8018bc4:	200015ec 	.word	0x200015ec
 8018bc8:	0801fa40 	.word	0x0801fa40

08018bcc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018bcc:	b580      	push	{r7, lr}
 8018bce:	b082      	sub	sp, #8
 8018bd0:	af00      	add	r7, sp, #0
 8018bd2:	4603      	mov	r3, r0
 8018bd4:	6039      	str	r1, [r7, #0]
 8018bd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018bd8:	683b      	ldr	r3, [r7, #0]
 8018bda:	221a      	movs	r2, #26
 8018bdc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018bde:	f000 f843 	bl	8018c68 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8018be2:	4b02      	ldr	r3, [pc, #8]	; (8018bec <USBD_FS_SerialStrDescriptor+0x20>)
}
 8018be4:	4618      	mov	r0, r3
 8018be6:	3708      	adds	r7, #8
 8018be8:	46bd      	mov	sp, r7
 8018bea:	bd80      	pop	{r7, pc}
 8018bec:	20000104 	.word	0x20000104

08018bf0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018bf0:	b580      	push	{r7, lr}
 8018bf2:	b082      	sub	sp, #8
 8018bf4:	af00      	add	r7, sp, #0
 8018bf6:	4603      	mov	r3, r0
 8018bf8:	6039      	str	r1, [r7, #0]
 8018bfa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018bfc:	79fb      	ldrb	r3, [r7, #7]
 8018bfe:	2b00      	cmp	r3, #0
 8018c00:	d105      	bne.n	8018c0e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018c02:	683a      	ldr	r2, [r7, #0]
 8018c04:	4907      	ldr	r1, [pc, #28]	; (8018c24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018c06:	4808      	ldr	r0, [pc, #32]	; (8018c28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018c08:	f7fc f960 	bl	8014ecc <USBD_GetString>
 8018c0c:	e004      	b.n	8018c18 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018c0e:	683a      	ldr	r2, [r7, #0]
 8018c10:	4904      	ldr	r1, [pc, #16]	; (8018c24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018c12:	4805      	ldr	r0, [pc, #20]	; (8018c28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018c14:	f7fc f95a 	bl	8014ecc <USBD_GetString>
  }
  return USBD_StrDesc;
 8018c18:	4b02      	ldr	r3, [pc, #8]	; (8018c24 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8018c1a:	4618      	mov	r0, r3
 8018c1c:	3708      	adds	r7, #8
 8018c1e:	46bd      	mov	sp, r7
 8018c20:	bd80      	pop	{r7, pc}
 8018c22:	bf00      	nop
 8018c24:	200015ec 	.word	0x200015ec
 8018c28:	0801fa54 	.word	0x0801fa54

08018c2c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018c2c:	b580      	push	{r7, lr}
 8018c2e:	b082      	sub	sp, #8
 8018c30:	af00      	add	r7, sp, #0
 8018c32:	4603      	mov	r3, r0
 8018c34:	6039      	str	r1, [r7, #0]
 8018c36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018c38:	79fb      	ldrb	r3, [r7, #7]
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	d105      	bne.n	8018c4a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018c3e:	683a      	ldr	r2, [r7, #0]
 8018c40:	4907      	ldr	r1, [pc, #28]	; (8018c60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018c42:	4808      	ldr	r0, [pc, #32]	; (8018c64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018c44:	f7fc f942 	bl	8014ecc <USBD_GetString>
 8018c48:	e004      	b.n	8018c54 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018c4a:	683a      	ldr	r2, [r7, #0]
 8018c4c:	4904      	ldr	r1, [pc, #16]	; (8018c60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018c4e:	4805      	ldr	r0, [pc, #20]	; (8018c64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018c50:	f7fc f93c 	bl	8014ecc <USBD_GetString>
  }
  return USBD_StrDesc;
 8018c54:	4b02      	ldr	r3, [pc, #8]	; (8018c60 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8018c56:	4618      	mov	r0, r3
 8018c58:	3708      	adds	r7, #8
 8018c5a:	46bd      	mov	sp, r7
 8018c5c:	bd80      	pop	{r7, pc}
 8018c5e:	bf00      	nop
 8018c60:	200015ec 	.word	0x200015ec
 8018c64:	0801fa60 	.word	0x0801fa60

08018c68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018c68:	b580      	push	{r7, lr}
 8018c6a:	b084      	sub	sp, #16
 8018c6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018c6e:	4b0f      	ldr	r3, [pc, #60]	; (8018cac <Get_SerialNum+0x44>)
 8018c70:	681b      	ldr	r3, [r3, #0]
 8018c72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018c74:	4b0e      	ldr	r3, [pc, #56]	; (8018cb0 <Get_SerialNum+0x48>)
 8018c76:	681b      	ldr	r3, [r3, #0]
 8018c78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018c7a:	4b0e      	ldr	r3, [pc, #56]	; (8018cb4 <Get_SerialNum+0x4c>)
 8018c7c:	681b      	ldr	r3, [r3, #0]
 8018c7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018c80:	68fa      	ldr	r2, [r7, #12]
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	4413      	add	r3, r2
 8018c86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018c88:	68fb      	ldr	r3, [r7, #12]
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	d009      	beq.n	8018ca2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018c8e:	2208      	movs	r2, #8
 8018c90:	4909      	ldr	r1, [pc, #36]	; (8018cb8 <Get_SerialNum+0x50>)
 8018c92:	68f8      	ldr	r0, [r7, #12]
 8018c94:	f000 f814 	bl	8018cc0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018c98:	2204      	movs	r2, #4
 8018c9a:	4908      	ldr	r1, [pc, #32]	; (8018cbc <Get_SerialNum+0x54>)
 8018c9c:	68b8      	ldr	r0, [r7, #8]
 8018c9e:	f000 f80f 	bl	8018cc0 <IntToUnicode>
  }
}
 8018ca2:	bf00      	nop
 8018ca4:	3710      	adds	r7, #16
 8018ca6:	46bd      	mov	sp, r7
 8018ca8:	bd80      	pop	{r7, pc}
 8018caa:	bf00      	nop
 8018cac:	1fff7a10 	.word	0x1fff7a10
 8018cb0:	1fff7a14 	.word	0x1fff7a14
 8018cb4:	1fff7a18 	.word	0x1fff7a18
 8018cb8:	20000106 	.word	0x20000106
 8018cbc:	20000116 	.word	0x20000116

08018cc0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018cc0:	b480      	push	{r7}
 8018cc2:	b087      	sub	sp, #28
 8018cc4:	af00      	add	r7, sp, #0
 8018cc6:	60f8      	str	r0, [r7, #12]
 8018cc8:	60b9      	str	r1, [r7, #8]
 8018cca:	4613      	mov	r3, r2
 8018ccc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8018cce:	2300      	movs	r3, #0
 8018cd0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018cd2:	2300      	movs	r3, #0
 8018cd4:	75fb      	strb	r3, [r7, #23]
 8018cd6:	e027      	b.n	8018d28 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018cd8:	68fb      	ldr	r3, [r7, #12]
 8018cda:	0f1b      	lsrs	r3, r3, #28
 8018cdc:	2b09      	cmp	r3, #9
 8018cde:	d80b      	bhi.n	8018cf8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018ce0:	68fb      	ldr	r3, [r7, #12]
 8018ce2:	0f1b      	lsrs	r3, r3, #28
 8018ce4:	b2da      	uxtb	r2, r3
 8018ce6:	7dfb      	ldrb	r3, [r7, #23]
 8018ce8:	005b      	lsls	r3, r3, #1
 8018cea:	4619      	mov	r1, r3
 8018cec:	68bb      	ldr	r3, [r7, #8]
 8018cee:	440b      	add	r3, r1
 8018cf0:	3230      	adds	r2, #48	; 0x30
 8018cf2:	b2d2      	uxtb	r2, r2
 8018cf4:	701a      	strb	r2, [r3, #0]
 8018cf6:	e00a      	b.n	8018d0e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018cf8:	68fb      	ldr	r3, [r7, #12]
 8018cfa:	0f1b      	lsrs	r3, r3, #28
 8018cfc:	b2da      	uxtb	r2, r3
 8018cfe:	7dfb      	ldrb	r3, [r7, #23]
 8018d00:	005b      	lsls	r3, r3, #1
 8018d02:	4619      	mov	r1, r3
 8018d04:	68bb      	ldr	r3, [r7, #8]
 8018d06:	440b      	add	r3, r1
 8018d08:	3237      	adds	r2, #55	; 0x37
 8018d0a:	b2d2      	uxtb	r2, r2
 8018d0c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018d0e:	68fb      	ldr	r3, [r7, #12]
 8018d10:	011b      	lsls	r3, r3, #4
 8018d12:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018d14:	7dfb      	ldrb	r3, [r7, #23]
 8018d16:	005b      	lsls	r3, r3, #1
 8018d18:	3301      	adds	r3, #1
 8018d1a:	68ba      	ldr	r2, [r7, #8]
 8018d1c:	4413      	add	r3, r2
 8018d1e:	2200      	movs	r2, #0
 8018d20:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018d22:	7dfb      	ldrb	r3, [r7, #23]
 8018d24:	3301      	adds	r3, #1
 8018d26:	75fb      	strb	r3, [r7, #23]
 8018d28:	7dfa      	ldrb	r2, [r7, #23]
 8018d2a:	79fb      	ldrb	r3, [r7, #7]
 8018d2c:	429a      	cmp	r2, r3
 8018d2e:	d3d3      	bcc.n	8018cd8 <IntToUnicode+0x18>
  }
}
 8018d30:	bf00      	nop
 8018d32:	bf00      	nop
 8018d34:	371c      	adds	r7, #28
 8018d36:	46bd      	mov	sp, r7
 8018d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d3c:	4770      	bx	lr

08018d3e <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8018d3e:	b480      	push	{r7}
 8018d40:	b083      	sub	sp, #12
 8018d42:	af00      	add	r7, sp, #0
 8018d44:	4603      	mov	r3, r0
 8018d46:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 8018d48:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8018d4a:	4618      	mov	r0, r3
 8018d4c:	370c      	adds	r7, #12
 8018d4e:	46bd      	mov	sp, r7
 8018d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d54:	4770      	bx	lr
	...

08018d58 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8018d58:	b580      	push	{r7, lr}
 8018d5a:	b08e      	sub	sp, #56	; 0x38
 8018d5c:	af00      	add	r7, sp, #0
 8018d5e:	4603      	mov	r3, r0
 8018d60:	60b9      	str	r1, [r7, #8]
 8018d62:	607a      	str	r2, [r7, #4]
 8018d64:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	  /* USER CODE BEGIN 3 */
	  HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 8018d66:	23ff      	movs	r3, #255	; 0xff
 8018d68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd, &info);
 8018d6c:	f107 0314 	add.w	r3, r7, #20
 8018d70:	4619      	mov	r1, r3
 8018d72:	480a      	ldr	r0, [pc, #40]	; (8018d9c <STORAGE_GetCapacity_FS+0x44>)
 8018d74:	f7ef ff9c 	bl	8008cb0 <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 8018d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d7a:	1e5a      	subs	r2, r3, #1
 8018d7c:	68bb      	ldr	r3, [r7, #8]
 8018d7e:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 8018d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d82:	b29a      	uxth	r2, r3
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 8018d88:	2300      	movs	r3, #0
 8018d8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 8018d8e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 8018d92:	4618      	mov	r0, r3
 8018d94:	3738      	adds	r7, #56	; 0x38
 8018d96:	46bd      	mov	sp, r7
 8018d98:	bd80      	pop	{r7, pc}
 8018d9a:	bf00      	nop
 8018d9c:	20000834 	.word	0x20000834

08018da0 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8018da0:	b480      	push	{r7}
 8018da2:	b083      	sub	sp, #12
 8018da4:	af00      	add	r7, sp, #0
 8018da6:	4603      	mov	r3, r0
 8018da8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 8018daa:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8018dac:	4618      	mov	r0, r3
 8018dae:	370c      	adds	r7, #12
 8018db0:	46bd      	mov	sp, r7
 8018db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018db6:	4770      	bx	lr

08018db8 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8018db8:	b480      	push	{r7}
 8018dba:	b083      	sub	sp, #12
 8018dbc:	af00      	add	r7, sp, #0
 8018dbe:	4603      	mov	r3, r0
 8018dc0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 8018dc2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018dc4:	4618      	mov	r0, r3
 8018dc6:	370c      	adds	r7, #12
 8018dc8:	46bd      	mov	sp, r7
 8018dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dce:	4770      	bx	lr

08018dd0 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8018dd0:	b580      	push	{r7, lr}
 8018dd2:	b088      	sub	sp, #32
 8018dd4:	af02      	add	r7, sp, #8
 8018dd6:	60b9      	str	r1, [r7, #8]
 8018dd8:	607a      	str	r2, [r7, #4]
 8018dda:	461a      	mov	r2, r3
 8018ddc:	4603      	mov	r3, r0
 8018dde:	73fb      	strb	r3, [r7, #15]
 8018de0:	4613      	mov	r3, r2
 8018de2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

	   int8_t ret = -1;
 8018de4:	23ff      	movs	r3, #255	; 0xff
 8018de6:	75fb      	strb	r3, [r7, #23]

		prev_sleep_time = HAL_GetTick();
 8018de8:	f7e9 ff48 	bl	8002c7c <HAL_GetTick>
 8018dec:	4603      	mov	r3, r0
 8018dee:	4a0d      	ldr	r2, [pc, #52]	; (8018e24 <STORAGE_Read_FS+0x54>)
 8018df0:	6013      	str	r3, [r2, #0]
	  HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8018df2:	89bb      	ldrh	r3, [r7, #12]
 8018df4:	f04f 32ff 	mov.w	r2, #4294967295
 8018df8:	9200      	str	r2, [sp, #0]
 8018dfa:	687a      	ldr	r2, [r7, #4]
 8018dfc:	68b9      	ldr	r1, [r7, #8]
 8018dfe:	480a      	ldr	r0, [pc, #40]	; (8018e28 <STORAGE_Read_FS+0x58>)
 8018e00:	f7ef fa4e 	bl	80082a0 <HAL_SD_ReadBlocks>

	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 8018e04:	bf00      	nop
 8018e06:	4808      	ldr	r0, [pc, #32]	; (8018e28 <STORAGE_Read_FS+0x58>)
 8018e08:	f7ef ff7e 	bl	8008d08 <HAL_SD_GetCardState>
 8018e0c:	4603      	mov	r3, r0
 8018e0e:	2b04      	cmp	r3, #4
 8018e10:	d1f9      	bne.n	8018e06 <STORAGE_Read_FS+0x36>
	  ret = 0;
 8018e12:	2300      	movs	r3, #0
 8018e14:	75fb      	strb	r3, [r7, #23]
	  return ret;
 8018e16:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8018e1a:	4618      	mov	r0, r3
 8018e1c:	3718      	adds	r7, #24
 8018e1e:	46bd      	mov	sp, r7
 8018e20:	bd80      	pop	{r7, pc}
 8018e22:	bf00      	nop
 8018e24:	20000748 	.word	0x20000748
 8018e28:	20000834 	.word	0x20000834

08018e2c <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8018e2c:	b580      	push	{r7, lr}
 8018e2e:	b088      	sub	sp, #32
 8018e30:	af02      	add	r7, sp, #8
 8018e32:	60b9      	str	r1, [r7, #8]
 8018e34:	607a      	str	r2, [r7, #4]
 8018e36:	461a      	mov	r2, r3
 8018e38:	4603      	mov	r3, r0
 8018e3a:	73fb      	strb	r3, [r7, #15]
 8018e3c:	4613      	mov	r3, r2
 8018e3e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	 int8_t ret = -1;
 8018e40:	23ff      	movs	r3, #255	; 0xff
 8018e42:	75fb      	strb	r3, [r7, #23]

	   HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8018e44:	89bb      	ldrh	r3, [r7, #12]
 8018e46:	f04f 32ff 	mov.w	r2, #4294967295
 8018e4a:	9200      	str	r2, [sp, #0]
 8018e4c:	687a      	ldr	r2, [r7, #4]
 8018e4e:	68b9      	ldr	r1, [r7, #8]
 8018e50:	4808      	ldr	r0, [pc, #32]	; (8018e74 <STORAGE_Write_FS+0x48>)
 8018e52:	f7ef fc03 	bl	800865c <HAL_SD_WriteBlocks>


	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 8018e56:	bf00      	nop
 8018e58:	4806      	ldr	r0, [pc, #24]	; (8018e74 <STORAGE_Write_FS+0x48>)
 8018e5a:	f7ef ff55 	bl	8008d08 <HAL_SD_GetCardState>
 8018e5e:	4603      	mov	r3, r0
 8018e60:	2b04      	cmp	r3, #4
 8018e62:	d1f9      	bne.n	8018e58 <STORAGE_Write_FS+0x2c>
	  ret = 0;
 8018e64:	2300      	movs	r3, #0
 8018e66:	75fb      	strb	r3, [r7, #23]
	  return ret;
 8018e68:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 8018e6c:	4618      	mov	r0, r3
 8018e6e:	3718      	adds	r7, #24
 8018e70:	46bd      	mov	sp, r7
 8018e72:	bd80      	pop	{r7, pc}
 8018e74:	20000834 	.word	0x20000834

08018e78 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8018e78:	b480      	push	{r7}
 8018e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8018e7c:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8018e7e:	4618      	mov	r0, r3
 8018e80:	46bd      	mov	sp, r7
 8018e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e86:	4770      	bx	lr

08018e88 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018e88:	b580      	push	{r7, lr}
 8018e8a:	b08a      	sub	sp, #40	; 0x28
 8018e8c:	af00      	add	r7, sp, #0
 8018e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018e90:	f107 0314 	add.w	r3, r7, #20
 8018e94:	2200      	movs	r2, #0
 8018e96:	601a      	str	r2, [r3, #0]
 8018e98:	605a      	str	r2, [r3, #4]
 8018e9a:	609a      	str	r2, [r3, #8]
 8018e9c:	60da      	str	r2, [r3, #12]
 8018e9e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	681b      	ldr	r3, [r3, #0]
 8018ea4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018ea8:	d13a      	bne.n	8018f20 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018eaa:	2300      	movs	r3, #0
 8018eac:	613b      	str	r3, [r7, #16]
 8018eae:	4b1e      	ldr	r3, [pc, #120]	; (8018f28 <HAL_PCD_MspInit+0xa0>)
 8018eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018eb2:	4a1d      	ldr	r2, [pc, #116]	; (8018f28 <HAL_PCD_MspInit+0xa0>)
 8018eb4:	f043 0301 	orr.w	r3, r3, #1
 8018eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8018eba:	4b1b      	ldr	r3, [pc, #108]	; (8018f28 <HAL_PCD_MspInit+0xa0>)
 8018ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018ebe:	f003 0301 	and.w	r3, r3, #1
 8018ec2:	613b      	str	r3, [r7, #16]
 8018ec4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018ec6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8018eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018ecc:	2302      	movs	r3, #2
 8018ece:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018ed0:	2300      	movs	r3, #0
 8018ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018ed4:	2303      	movs	r3, #3
 8018ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8018ed8:	230a      	movs	r3, #10
 8018eda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018edc:	f107 0314 	add.w	r3, r7, #20
 8018ee0:	4619      	mov	r1, r3
 8018ee2:	4812      	ldr	r0, [pc, #72]	; (8018f2c <HAL_PCD_MspInit+0xa4>)
 8018ee4:	f7eb f87c 	bl	8003fe0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018ee8:	4b0f      	ldr	r3, [pc, #60]	; (8018f28 <HAL_PCD_MspInit+0xa0>)
 8018eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018eec:	4a0e      	ldr	r2, [pc, #56]	; (8018f28 <HAL_PCD_MspInit+0xa0>)
 8018eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018ef2:	6353      	str	r3, [r2, #52]	; 0x34
 8018ef4:	2300      	movs	r3, #0
 8018ef6:	60fb      	str	r3, [r7, #12]
 8018ef8:	4b0b      	ldr	r3, [pc, #44]	; (8018f28 <HAL_PCD_MspInit+0xa0>)
 8018efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018efc:	4a0a      	ldr	r2, [pc, #40]	; (8018f28 <HAL_PCD_MspInit+0xa0>)
 8018efe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018f02:	6453      	str	r3, [r2, #68]	; 0x44
 8018f04:	4b08      	ldr	r3, [pc, #32]	; (8018f28 <HAL_PCD_MspInit+0xa0>)
 8018f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018f0c:	60fb      	str	r3, [r7, #12]
 8018f0e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8018f10:	2200      	movs	r2, #0
 8018f12:	2100      	movs	r1, #0
 8018f14:	2043      	movs	r0, #67	; 0x43
 8018f16:	f7ea fc94 	bl	8003842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018f1a:	2043      	movs	r0, #67	; 0x43
 8018f1c:	f7ea fcad 	bl	800387a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8018f20:	bf00      	nop
 8018f22:	3728      	adds	r7, #40	; 0x28
 8018f24:	46bd      	mov	sp, r7
 8018f26:	bd80      	pop	{r7, pc}
 8018f28:	40023800 	.word	0x40023800
 8018f2c:	40020000 	.word	0x40020000

08018f30 <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 8018f30:	b580      	push	{r7, lr}
 8018f32:	b082      	sub	sp, #8
 8018f34:	af00      	add	r7, sp, #0
 8018f36:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_OTG_FS)
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	681b      	ldr	r3, [r3, #0]
 8018f3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018f40:	d10d      	bne.n	8018f5e <HAL_PCD_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 0 */

  /* USER CODE END USB_OTG_FS_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 8018f42:	4b09      	ldr	r3, [pc, #36]	; (8018f68 <HAL_PCD_MspDeInit+0x38>)
 8018f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018f46:	4a08      	ldr	r2, [pc, #32]	; (8018f68 <HAL_PCD_MspDeInit+0x38>)
 8018f48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8018f4c:	6353      	str	r3, [r2, #52]	; 0x34

    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8018f4e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8018f52:	4806      	ldr	r0, [pc, #24]	; (8018f6c <HAL_PCD_MspDeInit+0x3c>)
 8018f54:	f7eb f9c8 	bl	80042e8 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 8018f58:	2043      	movs	r0, #67	; 0x43
 8018f5a:	f7ea fc9c 	bl	8003896 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 1 */

  /* USER CODE END USB_OTG_FS_MspDeInit 1 */
  }
}
 8018f5e:	bf00      	nop
 8018f60:	3708      	adds	r7, #8
 8018f62:	46bd      	mov	sp, r7
 8018f64:	bd80      	pop	{r7, pc}
 8018f66:	bf00      	nop
 8018f68:	40023800 	.word	0x40023800
 8018f6c:	40020000 	.word	0x40020000

08018f70 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f70:	b580      	push	{r7, lr}
 8018f72:	b082      	sub	sp, #8
 8018f74:	af00      	add	r7, sp, #0
 8018f76:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8018f7e:	687b      	ldr	r3, [r7, #4]
 8018f80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8018f84:	4619      	mov	r1, r3
 8018f86:	4610      	mov	r0, r2
 8018f88:	f7fa fe41 	bl	8013c0e <USBD_LL_SetupStage>
}
 8018f8c:	bf00      	nop
 8018f8e:	3708      	adds	r7, #8
 8018f90:	46bd      	mov	sp, r7
 8018f92:	bd80      	pop	{r7, pc}

08018f94 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f94:	b580      	push	{r7, lr}
 8018f96:	b082      	sub	sp, #8
 8018f98:	af00      	add	r7, sp, #0
 8018f9a:	6078      	str	r0, [r7, #4]
 8018f9c:	460b      	mov	r3, r1
 8018f9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8018fa6:	78fa      	ldrb	r2, [r7, #3]
 8018fa8:	6879      	ldr	r1, [r7, #4]
 8018faa:	4613      	mov	r3, r2
 8018fac:	00db      	lsls	r3, r3, #3
 8018fae:	4413      	add	r3, r2
 8018fb0:	009b      	lsls	r3, r3, #2
 8018fb2:	440b      	add	r3, r1
 8018fb4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8018fb8:	681a      	ldr	r2, [r3, #0]
 8018fba:	78fb      	ldrb	r3, [r7, #3]
 8018fbc:	4619      	mov	r1, r3
 8018fbe:	f7fa fe7b 	bl	8013cb8 <USBD_LL_DataOutStage>
}
 8018fc2:	bf00      	nop
 8018fc4:	3708      	adds	r7, #8
 8018fc6:	46bd      	mov	sp, r7
 8018fc8:	bd80      	pop	{r7, pc}

08018fca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018fca:	b580      	push	{r7, lr}
 8018fcc:	b082      	sub	sp, #8
 8018fce:	af00      	add	r7, sp, #0
 8018fd0:	6078      	str	r0, [r7, #4]
 8018fd2:	460b      	mov	r3, r1
 8018fd4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8018fdc:	78fa      	ldrb	r2, [r7, #3]
 8018fde:	6879      	ldr	r1, [r7, #4]
 8018fe0:	4613      	mov	r3, r2
 8018fe2:	00db      	lsls	r3, r3, #3
 8018fe4:	4413      	add	r3, r2
 8018fe6:	009b      	lsls	r3, r3, #2
 8018fe8:	440b      	add	r3, r1
 8018fea:	334c      	adds	r3, #76	; 0x4c
 8018fec:	681a      	ldr	r2, [r3, #0]
 8018fee:	78fb      	ldrb	r3, [r7, #3]
 8018ff0:	4619      	mov	r1, r3
 8018ff2:	f7fa ff14 	bl	8013e1e <USBD_LL_DataInStage>
}
 8018ff6:	bf00      	nop
 8018ff8:	3708      	adds	r7, #8
 8018ffa:	46bd      	mov	sp, r7
 8018ffc:	bd80      	pop	{r7, pc}

08018ffe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018ffe:	b580      	push	{r7, lr}
 8019000:	b082      	sub	sp, #8
 8019002:	af00      	add	r7, sp, #0
 8019004:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8019006:	687b      	ldr	r3, [r7, #4]
 8019008:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801900c:	4618      	mov	r0, r3
 801900e:	f7fb f848 	bl	80140a2 <USBD_LL_SOF>
}
 8019012:	bf00      	nop
 8019014:	3708      	adds	r7, #8
 8019016:	46bd      	mov	sp, r7
 8019018:	bd80      	pop	{r7, pc}

0801901a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801901a:	b580      	push	{r7, lr}
 801901c:	b084      	sub	sp, #16
 801901e:	af00      	add	r7, sp, #0
 8019020:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8019022:	2301      	movs	r3, #1
 8019024:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8019026:	687b      	ldr	r3, [r7, #4]
 8019028:	68db      	ldr	r3, [r3, #12]
 801902a:	2b00      	cmp	r3, #0
 801902c:	d102      	bne.n	8019034 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801902e:	2300      	movs	r3, #0
 8019030:	73fb      	strb	r3, [r7, #15]
 8019032:	e008      	b.n	8019046 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	68db      	ldr	r3, [r3, #12]
 8019038:	2b02      	cmp	r3, #2
 801903a:	d102      	bne.n	8019042 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801903c:	2301      	movs	r3, #1
 801903e:	73fb      	strb	r3, [r7, #15]
 8019040:	e001      	b.n	8019046 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8019042:	f7e9 f9ab 	bl	800239c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801904c:	7bfa      	ldrb	r2, [r7, #15]
 801904e:	4611      	mov	r1, r2
 8019050:	4618      	mov	r0, r3
 8019052:	f7fa ffe8 	bl	8014026 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801905c:	4618      	mov	r0, r3
 801905e:	f7fa ff90 	bl	8013f82 <USBD_LL_Reset>
}
 8019062:	bf00      	nop
 8019064:	3710      	adds	r7, #16
 8019066:	46bd      	mov	sp, r7
 8019068:	bd80      	pop	{r7, pc}
	...

0801906c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801906c:	b580      	push	{r7, lr}
 801906e:	b082      	sub	sp, #8
 8019070:	af00      	add	r7, sp, #0
 8019072:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801907a:	4618      	mov	r0, r3
 801907c:	f7fa ffe3 	bl	8014046 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	681b      	ldr	r3, [r3, #0]
 8019084:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019088:	681b      	ldr	r3, [r3, #0]
 801908a:	687a      	ldr	r2, [r7, #4]
 801908c:	6812      	ldr	r2, [r2, #0]
 801908e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019092:	f043 0301 	orr.w	r3, r3, #1
 8019096:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	6a1b      	ldr	r3, [r3, #32]
 801909c:	2b00      	cmp	r3, #0
 801909e:	d005      	beq.n	80190ac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80190a0:	4b04      	ldr	r3, [pc, #16]	; (80190b4 <HAL_PCD_SuspendCallback+0x48>)
 80190a2:	691b      	ldr	r3, [r3, #16]
 80190a4:	4a03      	ldr	r2, [pc, #12]	; (80190b4 <HAL_PCD_SuspendCallback+0x48>)
 80190a6:	f043 0306 	orr.w	r3, r3, #6
 80190aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80190ac:	bf00      	nop
 80190ae:	3708      	adds	r7, #8
 80190b0:	46bd      	mov	sp, r7
 80190b2:	bd80      	pop	{r7, pc}
 80190b4:	e000ed00 	.word	0xe000ed00

080190b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80190b8:	b580      	push	{r7, lr}
 80190ba:	b082      	sub	sp, #8
 80190bc:	af00      	add	r7, sp, #0
 80190be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80190c6:	4618      	mov	r0, r3
 80190c8:	f7fa ffd3 	bl	8014072 <USBD_LL_Resume>
}
 80190cc:	bf00      	nop
 80190ce:	3708      	adds	r7, #8
 80190d0:	46bd      	mov	sp, r7
 80190d2:	bd80      	pop	{r7, pc}

080190d4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80190d4:	b580      	push	{r7, lr}
 80190d6:	b082      	sub	sp, #8
 80190d8:	af00      	add	r7, sp, #0
 80190da:	6078      	str	r0, [r7, #4]
 80190dc:	460b      	mov	r3, r1
 80190de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80190e6:	78fa      	ldrb	r2, [r7, #3]
 80190e8:	4611      	mov	r1, r2
 80190ea:	4618      	mov	r0, r3
 80190ec:	f7fb f82b 	bl	8014146 <USBD_LL_IsoOUTIncomplete>
}
 80190f0:	bf00      	nop
 80190f2:	3708      	adds	r7, #8
 80190f4:	46bd      	mov	sp, r7
 80190f6:	bd80      	pop	{r7, pc}

080190f8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80190f8:	b580      	push	{r7, lr}
 80190fa:	b082      	sub	sp, #8
 80190fc:	af00      	add	r7, sp, #0
 80190fe:	6078      	str	r0, [r7, #4]
 8019100:	460b      	mov	r3, r1
 8019102:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801910a:	78fa      	ldrb	r2, [r7, #3]
 801910c:	4611      	mov	r1, r2
 801910e:	4618      	mov	r0, r3
 8019110:	f7fa ffe7 	bl	80140e2 <USBD_LL_IsoINIncomplete>
}
 8019114:	bf00      	nop
 8019116:	3708      	adds	r7, #8
 8019118:	46bd      	mov	sp, r7
 801911a:	bd80      	pop	{r7, pc}

0801911c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801911c:	b580      	push	{r7, lr}
 801911e:	b082      	sub	sp, #8
 8019120:	af00      	add	r7, sp, #0
 8019122:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801912a:	4618      	mov	r0, r3
 801912c:	f7fb f83d 	bl	80141aa <USBD_LL_DevConnected>
}
 8019130:	bf00      	nop
 8019132:	3708      	adds	r7, #8
 8019134:	46bd      	mov	sp, r7
 8019136:	bd80      	pop	{r7, pc}

08019138 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019138:	b580      	push	{r7, lr}
 801913a:	b082      	sub	sp, #8
 801913c:	af00      	add	r7, sp, #0
 801913e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019146:	4618      	mov	r0, r3
 8019148:	f7fb f83a 	bl	80141c0 <USBD_LL_DevDisconnected>
}
 801914c:	bf00      	nop
 801914e:	3708      	adds	r7, #8
 8019150:	46bd      	mov	sp, r7
 8019152:	bd80      	pop	{r7, pc}

08019154 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019154:	b580      	push	{r7, lr}
 8019156:	b082      	sub	sp, #8
 8019158:	af00      	add	r7, sp, #0
 801915a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	781b      	ldrb	r3, [r3, #0]
 8019160:	2b00      	cmp	r3, #0
 8019162:	d13c      	bne.n	80191de <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8019164:	4a20      	ldr	r2, [pc, #128]	; (80191e8 <USBD_LL_Init+0x94>)
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	4a1e      	ldr	r2, [pc, #120]	; (80191e8 <USBD_LL_Init+0x94>)
 8019170:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019174:	4b1c      	ldr	r3, [pc, #112]	; (80191e8 <USBD_LL_Init+0x94>)
 8019176:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801917a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801917c:	4b1a      	ldr	r3, [pc, #104]	; (80191e8 <USBD_LL_Init+0x94>)
 801917e:	2204      	movs	r2, #4
 8019180:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8019182:	4b19      	ldr	r3, [pc, #100]	; (80191e8 <USBD_LL_Init+0x94>)
 8019184:	2202      	movs	r2, #2
 8019186:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8019188:	4b17      	ldr	r3, [pc, #92]	; (80191e8 <USBD_LL_Init+0x94>)
 801918a:	2200      	movs	r2, #0
 801918c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801918e:	4b16      	ldr	r3, [pc, #88]	; (80191e8 <USBD_LL_Init+0x94>)
 8019190:	2202      	movs	r2, #2
 8019192:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8019194:	4b14      	ldr	r3, [pc, #80]	; (80191e8 <USBD_LL_Init+0x94>)
 8019196:	2200      	movs	r2, #0
 8019198:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801919a:	4b13      	ldr	r3, [pc, #76]	; (80191e8 <USBD_LL_Init+0x94>)
 801919c:	2200      	movs	r2, #0
 801919e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80191a0:	4b11      	ldr	r3, [pc, #68]	; (80191e8 <USBD_LL_Init+0x94>)
 80191a2:	2200      	movs	r2, #0
 80191a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80191a6:	4b10      	ldr	r3, [pc, #64]	; (80191e8 <USBD_LL_Init+0x94>)
 80191a8:	2200      	movs	r2, #0
 80191aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80191ac:	4b0e      	ldr	r3, [pc, #56]	; (80191e8 <USBD_LL_Init+0x94>)
 80191ae:	2200      	movs	r2, #0
 80191b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80191b2:	480d      	ldr	r0, [pc, #52]	; (80191e8 <USBD_LL_Init+0x94>)
 80191b4:	f7ec fab9 	bl	800572a <HAL_PCD_Init>
 80191b8:	4603      	mov	r3, r0
 80191ba:	2b00      	cmp	r3, #0
 80191bc:	d001      	beq.n	80191c2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80191be:	f7e9 f8ed 	bl	800239c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80191c2:	2180      	movs	r1, #128	; 0x80
 80191c4:	4808      	ldr	r0, [pc, #32]	; (80191e8 <USBD_LL_Init+0x94>)
 80191c6:	f7ed fd9a 	bl	8006cfe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80191ca:	2240      	movs	r2, #64	; 0x40
 80191cc:	2100      	movs	r1, #0
 80191ce:	4806      	ldr	r0, [pc, #24]	; (80191e8 <USBD_LL_Init+0x94>)
 80191d0:	f7ed fd4e 	bl	8006c70 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80191d4:	2280      	movs	r2, #128	; 0x80
 80191d6:	2101      	movs	r1, #1
 80191d8:	4803      	ldr	r0, [pc, #12]	; (80191e8 <USBD_LL_Init+0x94>)
 80191da:	f7ed fd49 	bl	8006c70 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80191de:	2300      	movs	r3, #0
}
 80191e0:	4618      	mov	r0, r3
 80191e2:	3708      	adds	r7, #8
 80191e4:	46bd      	mov	sp, r7
 80191e6:	bd80      	pop	{r7, pc}
 80191e8:	200017ec 	.word	0x200017ec

080191ec <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 80191ec:	b580      	push	{r7, lr}
 80191ee:	b084      	sub	sp, #16
 80191f0:	af00      	add	r7, sp, #0
 80191f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80191f4:	2300      	movs	r3, #0
 80191f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80191f8:	2300      	movs	r3, #0
 80191fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_DeInit(pdev->pData);
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019202:	4618      	mov	r0, r3
 8019204:	f7ec fbae 	bl	8005964 <HAL_PCD_DeInit>
 8019208:	4603      	mov	r3, r0
 801920a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801920c:	7bfb      	ldrb	r3, [r7, #15]
 801920e:	4618      	mov	r0, r3
 8019210:	f000 f998 	bl	8019544 <USBD_Get_USB_Status>
 8019214:	4603      	mov	r3, r0
 8019216:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019218:	7bbb      	ldrb	r3, [r7, #14]
}
 801921a:	4618      	mov	r0, r3
 801921c:	3710      	adds	r7, #16
 801921e:	46bd      	mov	sp, r7
 8019220:	bd80      	pop	{r7, pc}

08019222 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019222:	b580      	push	{r7, lr}
 8019224:	b084      	sub	sp, #16
 8019226:	af00      	add	r7, sp, #0
 8019228:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801922a:	2300      	movs	r3, #0
 801922c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801922e:	2300      	movs	r3, #0
 8019230:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019238:	4618      	mov	r0, r3
 801923a:	f7ec fbb6 	bl	80059aa <HAL_PCD_Start>
 801923e:	4603      	mov	r3, r0
 8019240:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019242:	7bfb      	ldrb	r3, [r7, #15]
 8019244:	4618      	mov	r0, r3
 8019246:	f000 f97d 	bl	8019544 <USBD_Get_USB_Status>
 801924a:	4603      	mov	r3, r0
 801924c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801924e:	7bbb      	ldrb	r3, [r7, #14]
}
 8019250:	4618      	mov	r0, r3
 8019252:	3710      	adds	r7, #16
 8019254:	46bd      	mov	sp, r7
 8019256:	bd80      	pop	{r7, pc}

08019258 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8019258:	b580      	push	{r7, lr}
 801925a:	b084      	sub	sp, #16
 801925c:	af00      	add	r7, sp, #0
 801925e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019260:	2300      	movs	r3, #0
 8019262:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019264:	2300      	movs	r3, #0
 8019266:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801926e:	4618      	mov	r0, r3
 8019270:	f7ec fbce 	bl	8005a10 <HAL_PCD_Stop>
 8019274:	4603      	mov	r3, r0
 8019276:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019278:	7bfb      	ldrb	r3, [r7, #15]
 801927a:	4618      	mov	r0, r3
 801927c:	f000 f962 	bl	8019544 <USBD_Get_USB_Status>
 8019280:	4603      	mov	r3, r0
 8019282:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019284:	7bbb      	ldrb	r3, [r7, #14]
}
 8019286:	4618      	mov	r0, r3
 8019288:	3710      	adds	r7, #16
 801928a:	46bd      	mov	sp, r7
 801928c:	bd80      	pop	{r7, pc}

0801928e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801928e:	b580      	push	{r7, lr}
 8019290:	b084      	sub	sp, #16
 8019292:	af00      	add	r7, sp, #0
 8019294:	6078      	str	r0, [r7, #4]
 8019296:	4608      	mov	r0, r1
 8019298:	4611      	mov	r1, r2
 801929a:	461a      	mov	r2, r3
 801929c:	4603      	mov	r3, r0
 801929e:	70fb      	strb	r3, [r7, #3]
 80192a0:	460b      	mov	r3, r1
 80192a2:	70bb      	strb	r3, [r7, #2]
 80192a4:	4613      	mov	r3, r2
 80192a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80192a8:	2300      	movs	r3, #0
 80192aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80192ac:	2300      	movs	r3, #0
 80192ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80192b0:	687b      	ldr	r3, [r7, #4]
 80192b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80192b6:	78bb      	ldrb	r3, [r7, #2]
 80192b8:	883a      	ldrh	r2, [r7, #0]
 80192ba:	78f9      	ldrb	r1, [r7, #3]
 80192bc:	f7ed f8a5 	bl	800640a <HAL_PCD_EP_Open>
 80192c0:	4603      	mov	r3, r0
 80192c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80192c4:	7bfb      	ldrb	r3, [r7, #15]
 80192c6:	4618      	mov	r0, r3
 80192c8:	f000 f93c 	bl	8019544 <USBD_Get_USB_Status>
 80192cc:	4603      	mov	r3, r0
 80192ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80192d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80192d2:	4618      	mov	r0, r3
 80192d4:	3710      	adds	r7, #16
 80192d6:	46bd      	mov	sp, r7
 80192d8:	bd80      	pop	{r7, pc}

080192da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80192da:	b580      	push	{r7, lr}
 80192dc:	b084      	sub	sp, #16
 80192de:	af00      	add	r7, sp, #0
 80192e0:	6078      	str	r0, [r7, #4]
 80192e2:	460b      	mov	r3, r1
 80192e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80192e6:	2300      	movs	r3, #0
 80192e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80192ea:	2300      	movs	r3, #0
 80192ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80192f4:	78fa      	ldrb	r2, [r7, #3]
 80192f6:	4611      	mov	r1, r2
 80192f8:	4618      	mov	r0, r3
 80192fa:	f7ed f8ee 	bl	80064da <HAL_PCD_EP_Close>
 80192fe:	4603      	mov	r3, r0
 8019300:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019302:	7bfb      	ldrb	r3, [r7, #15]
 8019304:	4618      	mov	r0, r3
 8019306:	f000 f91d 	bl	8019544 <USBD_Get_USB_Status>
 801930a:	4603      	mov	r3, r0
 801930c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801930e:	7bbb      	ldrb	r3, [r7, #14]
}
 8019310:	4618      	mov	r0, r3
 8019312:	3710      	adds	r7, #16
 8019314:	46bd      	mov	sp, r7
 8019316:	bd80      	pop	{r7, pc}

08019318 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019318:	b580      	push	{r7, lr}
 801931a:	b084      	sub	sp, #16
 801931c:	af00      	add	r7, sp, #0
 801931e:	6078      	str	r0, [r7, #4]
 8019320:	460b      	mov	r3, r1
 8019322:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019324:	2300      	movs	r3, #0
 8019326:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019328:	2300      	movs	r3, #0
 801932a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801932c:	687b      	ldr	r3, [r7, #4]
 801932e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019332:	78fa      	ldrb	r2, [r7, #3]
 8019334:	4611      	mov	r1, r2
 8019336:	4618      	mov	r0, r3
 8019338:	f7ed fab1 	bl	800689e <HAL_PCD_EP_Flush>
 801933c:	4603      	mov	r3, r0
 801933e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019340:	7bfb      	ldrb	r3, [r7, #15]
 8019342:	4618      	mov	r0, r3
 8019344:	f000 f8fe 	bl	8019544 <USBD_Get_USB_Status>
 8019348:	4603      	mov	r3, r0
 801934a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801934c:	7bbb      	ldrb	r3, [r7, #14]
}
 801934e:	4618      	mov	r0, r3
 8019350:	3710      	adds	r7, #16
 8019352:	46bd      	mov	sp, r7
 8019354:	bd80      	pop	{r7, pc}

08019356 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019356:	b580      	push	{r7, lr}
 8019358:	b084      	sub	sp, #16
 801935a:	af00      	add	r7, sp, #0
 801935c:	6078      	str	r0, [r7, #4]
 801935e:	460b      	mov	r3, r1
 8019360:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019362:	2300      	movs	r3, #0
 8019364:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019366:	2300      	movs	r3, #0
 8019368:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019370:	78fa      	ldrb	r2, [r7, #3]
 8019372:	4611      	mov	r1, r2
 8019374:	4618      	mov	r0, r3
 8019376:	f7ed f9a7 	bl	80066c8 <HAL_PCD_EP_SetStall>
 801937a:	4603      	mov	r3, r0
 801937c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801937e:	7bfb      	ldrb	r3, [r7, #15]
 8019380:	4618      	mov	r0, r3
 8019382:	f000 f8df 	bl	8019544 <USBD_Get_USB_Status>
 8019386:	4603      	mov	r3, r0
 8019388:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801938a:	7bbb      	ldrb	r3, [r7, #14]
}
 801938c:	4618      	mov	r0, r3
 801938e:	3710      	adds	r7, #16
 8019390:	46bd      	mov	sp, r7
 8019392:	bd80      	pop	{r7, pc}

08019394 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019394:	b580      	push	{r7, lr}
 8019396:	b084      	sub	sp, #16
 8019398:	af00      	add	r7, sp, #0
 801939a:	6078      	str	r0, [r7, #4]
 801939c:	460b      	mov	r3, r1
 801939e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80193a0:	2300      	movs	r3, #0
 80193a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80193a4:	2300      	movs	r3, #0
 80193a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80193ae:	78fa      	ldrb	r2, [r7, #3]
 80193b0:	4611      	mov	r1, r2
 80193b2:	4618      	mov	r0, r3
 80193b4:	f7ed f9ec 	bl	8006790 <HAL_PCD_EP_ClrStall>
 80193b8:	4603      	mov	r3, r0
 80193ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80193bc:	7bfb      	ldrb	r3, [r7, #15]
 80193be:	4618      	mov	r0, r3
 80193c0:	f000 f8c0 	bl	8019544 <USBD_Get_USB_Status>
 80193c4:	4603      	mov	r3, r0
 80193c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80193c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80193ca:	4618      	mov	r0, r3
 80193cc:	3710      	adds	r7, #16
 80193ce:	46bd      	mov	sp, r7
 80193d0:	bd80      	pop	{r7, pc}

080193d2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80193d2:	b480      	push	{r7}
 80193d4:	b085      	sub	sp, #20
 80193d6:	af00      	add	r7, sp, #0
 80193d8:	6078      	str	r0, [r7, #4]
 80193da:	460b      	mov	r3, r1
 80193dc:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80193e4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80193e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80193ea:	2b00      	cmp	r3, #0
 80193ec:	da0b      	bge.n	8019406 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80193ee:	78fb      	ldrb	r3, [r7, #3]
 80193f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80193f4:	68f9      	ldr	r1, [r7, #12]
 80193f6:	4613      	mov	r3, r2
 80193f8:	00db      	lsls	r3, r3, #3
 80193fa:	4413      	add	r3, r2
 80193fc:	009b      	lsls	r3, r3, #2
 80193fe:	440b      	add	r3, r1
 8019400:	333e      	adds	r3, #62	; 0x3e
 8019402:	781b      	ldrb	r3, [r3, #0]
 8019404:	e00b      	b.n	801941e <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019406:	78fb      	ldrb	r3, [r7, #3]
 8019408:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801940c:	68f9      	ldr	r1, [r7, #12]
 801940e:	4613      	mov	r3, r2
 8019410:	00db      	lsls	r3, r3, #3
 8019412:	4413      	add	r3, r2
 8019414:	009b      	lsls	r3, r3, #2
 8019416:	440b      	add	r3, r1
 8019418:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801941c:	781b      	ldrb	r3, [r3, #0]
  }
}
 801941e:	4618      	mov	r0, r3
 8019420:	3714      	adds	r7, #20
 8019422:	46bd      	mov	sp, r7
 8019424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019428:	4770      	bx	lr

0801942a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801942a:	b580      	push	{r7, lr}
 801942c:	b084      	sub	sp, #16
 801942e:	af00      	add	r7, sp, #0
 8019430:	6078      	str	r0, [r7, #4]
 8019432:	460b      	mov	r3, r1
 8019434:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019436:	2300      	movs	r3, #0
 8019438:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801943a:	2300      	movs	r3, #0
 801943c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019444:	78fa      	ldrb	r2, [r7, #3]
 8019446:	4611      	mov	r1, r2
 8019448:	4618      	mov	r0, r3
 801944a:	f7ec ffb9 	bl	80063c0 <HAL_PCD_SetAddress>
 801944e:	4603      	mov	r3, r0
 8019450:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019452:	7bfb      	ldrb	r3, [r7, #15]
 8019454:	4618      	mov	r0, r3
 8019456:	f000 f875 	bl	8019544 <USBD_Get_USB_Status>
 801945a:	4603      	mov	r3, r0
 801945c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801945e:	7bbb      	ldrb	r3, [r7, #14]
}
 8019460:	4618      	mov	r0, r3
 8019462:	3710      	adds	r7, #16
 8019464:	46bd      	mov	sp, r7
 8019466:	bd80      	pop	{r7, pc}

08019468 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019468:	b580      	push	{r7, lr}
 801946a:	b086      	sub	sp, #24
 801946c:	af00      	add	r7, sp, #0
 801946e:	60f8      	str	r0, [r7, #12]
 8019470:	607a      	str	r2, [r7, #4]
 8019472:	603b      	str	r3, [r7, #0]
 8019474:	460b      	mov	r3, r1
 8019476:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019478:	2300      	movs	r3, #0
 801947a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801947c:	2300      	movs	r3, #0
 801947e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019480:	68fb      	ldr	r3, [r7, #12]
 8019482:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8019486:	7af9      	ldrb	r1, [r7, #11]
 8019488:	683b      	ldr	r3, [r7, #0]
 801948a:	687a      	ldr	r2, [r7, #4]
 801948c:	f7ed f8d2 	bl	8006634 <HAL_PCD_EP_Transmit>
 8019490:	4603      	mov	r3, r0
 8019492:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019494:	7dfb      	ldrb	r3, [r7, #23]
 8019496:	4618      	mov	r0, r3
 8019498:	f000 f854 	bl	8019544 <USBD_Get_USB_Status>
 801949c:	4603      	mov	r3, r0
 801949e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80194a0:	7dbb      	ldrb	r3, [r7, #22]
}
 80194a2:	4618      	mov	r0, r3
 80194a4:	3718      	adds	r7, #24
 80194a6:	46bd      	mov	sp, r7
 80194a8:	bd80      	pop	{r7, pc}

080194aa <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80194aa:	b580      	push	{r7, lr}
 80194ac:	b086      	sub	sp, #24
 80194ae:	af00      	add	r7, sp, #0
 80194b0:	60f8      	str	r0, [r7, #12]
 80194b2:	607a      	str	r2, [r7, #4]
 80194b4:	603b      	str	r3, [r7, #0]
 80194b6:	460b      	mov	r3, r1
 80194b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80194ba:	2300      	movs	r3, #0
 80194bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80194be:	2300      	movs	r3, #0
 80194c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80194c2:	68fb      	ldr	r3, [r7, #12]
 80194c4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80194c8:	7af9      	ldrb	r1, [r7, #11]
 80194ca:	683b      	ldr	r3, [r7, #0]
 80194cc:	687a      	ldr	r2, [r7, #4]
 80194ce:	f7ed f84e 	bl	800656e <HAL_PCD_EP_Receive>
 80194d2:	4603      	mov	r3, r0
 80194d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80194d6:	7dfb      	ldrb	r3, [r7, #23]
 80194d8:	4618      	mov	r0, r3
 80194da:	f000 f833 	bl	8019544 <USBD_Get_USB_Status>
 80194de:	4603      	mov	r3, r0
 80194e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80194e2:	7dbb      	ldrb	r3, [r7, #22]
}
 80194e4:	4618      	mov	r0, r3
 80194e6:	3718      	adds	r7, #24
 80194e8:	46bd      	mov	sp, r7
 80194ea:	bd80      	pop	{r7, pc}

080194ec <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80194ec:	b580      	push	{r7, lr}
 80194ee:	b082      	sub	sp, #8
 80194f0:	af00      	add	r7, sp, #0
 80194f2:	6078      	str	r0, [r7, #4]
 80194f4:	460b      	mov	r3, r1
 80194f6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80194fe:	78fa      	ldrb	r2, [r7, #3]
 8019500:	4611      	mov	r1, r2
 8019502:	4618      	mov	r0, r3
 8019504:	f7ed f87e 	bl	8006604 <HAL_PCD_EP_GetRxCount>
 8019508:	4603      	mov	r3, r0
}
 801950a:	4618      	mov	r0, r3
 801950c:	3708      	adds	r7, #8
 801950e:	46bd      	mov	sp, r7
 8019510:	bd80      	pop	{r7, pc}
	...

08019514 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019514:	b480      	push	{r7}
 8019516:	b083      	sub	sp, #12
 8019518:	af00      	add	r7, sp, #0
 801951a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801951c:	4b03      	ldr	r3, [pc, #12]	; (801952c <USBD_static_malloc+0x18>)
}
 801951e:	4618      	mov	r0, r3
 8019520:	370c      	adds	r7, #12
 8019522:	46bd      	mov	sp, r7
 8019524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019528:	4770      	bx	lr
 801952a:	bf00      	nop
 801952c:	20001cf8 	.word	0x20001cf8

08019530 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8019530:	b480      	push	{r7}
 8019532:	b083      	sub	sp, #12
 8019534:	af00      	add	r7, sp, #0
 8019536:	6078      	str	r0, [r7, #4]

}
 8019538:	bf00      	nop
 801953a:	370c      	adds	r7, #12
 801953c:	46bd      	mov	sp, r7
 801953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019542:	4770      	bx	lr

08019544 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019544:	b480      	push	{r7}
 8019546:	b085      	sub	sp, #20
 8019548:	af00      	add	r7, sp, #0
 801954a:	4603      	mov	r3, r0
 801954c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801954e:	2300      	movs	r3, #0
 8019550:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019552:	79fb      	ldrb	r3, [r7, #7]
 8019554:	2b03      	cmp	r3, #3
 8019556:	d817      	bhi.n	8019588 <USBD_Get_USB_Status+0x44>
 8019558:	a201      	add	r2, pc, #4	; (adr r2, 8019560 <USBD_Get_USB_Status+0x1c>)
 801955a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801955e:	bf00      	nop
 8019560:	08019571 	.word	0x08019571
 8019564:	08019577 	.word	0x08019577
 8019568:	0801957d 	.word	0x0801957d
 801956c:	08019583 	.word	0x08019583
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8019570:	2300      	movs	r3, #0
 8019572:	73fb      	strb	r3, [r7, #15]
    break;
 8019574:	e00b      	b.n	801958e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019576:	2303      	movs	r3, #3
 8019578:	73fb      	strb	r3, [r7, #15]
    break;
 801957a:	e008      	b.n	801958e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801957c:	2301      	movs	r3, #1
 801957e:	73fb      	strb	r3, [r7, #15]
    break;
 8019580:	e005      	b.n	801958e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019582:	2303      	movs	r3, #3
 8019584:	73fb      	strb	r3, [r7, #15]
    break;
 8019586:	e002      	b.n	801958e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8019588:	2303      	movs	r3, #3
 801958a:	73fb      	strb	r3, [r7, #15]
    break;
 801958c:	bf00      	nop
  }
  return usb_status;
 801958e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019590:	4618      	mov	r0, r3
 8019592:	3714      	adds	r7, #20
 8019594:	46bd      	mov	sp, r7
 8019596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801959a:	4770      	bx	lr

0801959c <atoi>:
 801959c:	220a      	movs	r2, #10
 801959e:	2100      	movs	r1, #0
 80195a0:	f002 b82e 	b.w	801b600 <strtol>

080195a4 <__errno>:
 80195a4:	4b01      	ldr	r3, [pc, #4]	; (80195ac <__errno+0x8>)
 80195a6:	6818      	ldr	r0, [r3, #0]
 80195a8:	4770      	bx	lr
 80195aa:	bf00      	nop
 80195ac:	20000140 	.word	0x20000140

080195b0 <_fwrite_r>:
 80195b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80195b4:	9c08      	ldr	r4, [sp, #32]
 80195b6:	468a      	mov	sl, r1
 80195b8:	4690      	mov	r8, r2
 80195ba:	fb02 f903 	mul.w	r9, r2, r3
 80195be:	4605      	mov	r5, r0
 80195c0:	b118      	cbz	r0, 80195ca <_fwrite_r+0x1a>
 80195c2:	6983      	ldr	r3, [r0, #24]
 80195c4:	b90b      	cbnz	r3, 80195ca <_fwrite_r+0x1a>
 80195c6:	f003 f8d3 	bl	801c770 <__sinit>
 80195ca:	4b26      	ldr	r3, [pc, #152]	; (8019664 <_fwrite_r+0xb4>)
 80195cc:	429c      	cmp	r4, r3
 80195ce:	d123      	bne.n	8019618 <_fwrite_r+0x68>
 80195d0:	686c      	ldr	r4, [r5, #4]
 80195d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80195d4:	07de      	lsls	r6, r3, #31
 80195d6:	d405      	bmi.n	80195e4 <_fwrite_r+0x34>
 80195d8:	89a3      	ldrh	r3, [r4, #12]
 80195da:	0598      	lsls	r0, r3, #22
 80195dc:	d402      	bmi.n	80195e4 <_fwrite_r+0x34>
 80195de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80195e0:	f000 f879 	bl	80196d6 <__retarget_lock_acquire_recursive>
 80195e4:	89a3      	ldrh	r3, [r4, #12]
 80195e6:	0719      	lsls	r1, r3, #28
 80195e8:	d520      	bpl.n	801962c <_fwrite_r+0x7c>
 80195ea:	6923      	ldr	r3, [r4, #16]
 80195ec:	b1f3      	cbz	r3, 801962c <_fwrite_r+0x7c>
 80195ee:	2600      	movs	r6, #0
 80195f0:	454e      	cmp	r6, r9
 80195f2:	d029      	beq.n	8019648 <_fwrite_r+0x98>
 80195f4:	68a7      	ldr	r7, [r4, #8]
 80195f6:	f81a 1006 	ldrb.w	r1, [sl, r6]
 80195fa:	3f01      	subs	r7, #1
 80195fc:	2f00      	cmp	r7, #0
 80195fe:	60a7      	str	r7, [r4, #8]
 8019600:	da04      	bge.n	801960c <_fwrite_r+0x5c>
 8019602:	69a3      	ldr	r3, [r4, #24]
 8019604:	429f      	cmp	r7, r3
 8019606:	db19      	blt.n	801963c <_fwrite_r+0x8c>
 8019608:	290a      	cmp	r1, #10
 801960a:	d017      	beq.n	801963c <_fwrite_r+0x8c>
 801960c:	6823      	ldr	r3, [r4, #0]
 801960e:	1c5a      	adds	r2, r3, #1
 8019610:	6022      	str	r2, [r4, #0]
 8019612:	7019      	strb	r1, [r3, #0]
 8019614:	3601      	adds	r6, #1
 8019616:	e7eb      	b.n	80195f0 <_fwrite_r+0x40>
 8019618:	4b13      	ldr	r3, [pc, #76]	; (8019668 <_fwrite_r+0xb8>)
 801961a:	429c      	cmp	r4, r3
 801961c:	d101      	bne.n	8019622 <_fwrite_r+0x72>
 801961e:	68ac      	ldr	r4, [r5, #8]
 8019620:	e7d7      	b.n	80195d2 <_fwrite_r+0x22>
 8019622:	4b12      	ldr	r3, [pc, #72]	; (801966c <_fwrite_r+0xbc>)
 8019624:	429c      	cmp	r4, r3
 8019626:	bf08      	it	eq
 8019628:	68ec      	ldreq	r4, [r5, #12]
 801962a:	e7d2      	b.n	80195d2 <_fwrite_r+0x22>
 801962c:	4621      	mov	r1, r4
 801962e:	4628      	mov	r0, r5
 8019630:	f002 f87c 	bl	801b72c <__swsetup_r>
 8019634:	2800      	cmp	r0, #0
 8019636:	d0da      	beq.n	80195ee <_fwrite_r+0x3e>
 8019638:	2600      	movs	r6, #0
 801963a:	e005      	b.n	8019648 <_fwrite_r+0x98>
 801963c:	4622      	mov	r2, r4
 801963e:	4628      	mov	r0, r5
 8019640:	f002 f822 	bl	801b688 <__swbuf_r>
 8019644:	3001      	adds	r0, #1
 8019646:	d1e5      	bne.n	8019614 <_fwrite_r+0x64>
 8019648:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801964a:	07da      	lsls	r2, r3, #31
 801964c:	d405      	bmi.n	801965a <_fwrite_r+0xaa>
 801964e:	89a3      	ldrh	r3, [r4, #12]
 8019650:	059b      	lsls	r3, r3, #22
 8019652:	d402      	bmi.n	801965a <_fwrite_r+0xaa>
 8019654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019656:	f000 f83f 	bl	80196d8 <__retarget_lock_release_recursive>
 801965a:	fbb6 f0f8 	udiv	r0, r6, r8
 801965e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019662:	bf00      	nop
 8019664:	08020384 	.word	0x08020384
 8019668:	080203a4 	.word	0x080203a4
 801966c:	08020364 	.word	0x08020364

08019670 <fwrite>:
 8019670:	b507      	push	{r0, r1, r2, lr}
 8019672:	9300      	str	r3, [sp, #0]
 8019674:	4613      	mov	r3, r2
 8019676:	460a      	mov	r2, r1
 8019678:	4601      	mov	r1, r0
 801967a:	4803      	ldr	r0, [pc, #12]	; (8019688 <fwrite+0x18>)
 801967c:	6800      	ldr	r0, [r0, #0]
 801967e:	f7ff ff97 	bl	80195b0 <_fwrite_r>
 8019682:	b003      	add	sp, #12
 8019684:	f85d fb04 	ldr.w	pc, [sp], #4
 8019688:	20000140 	.word	0x20000140

0801968c <__libc_init_array>:
 801968c:	b570      	push	{r4, r5, r6, lr}
 801968e:	4d0d      	ldr	r5, [pc, #52]	; (80196c4 <__libc_init_array+0x38>)
 8019690:	4c0d      	ldr	r4, [pc, #52]	; (80196c8 <__libc_init_array+0x3c>)
 8019692:	1b64      	subs	r4, r4, r5
 8019694:	10a4      	asrs	r4, r4, #2
 8019696:	2600      	movs	r6, #0
 8019698:	42a6      	cmp	r6, r4
 801969a:	d109      	bne.n	80196b0 <__libc_init_array+0x24>
 801969c:	4d0b      	ldr	r5, [pc, #44]	; (80196cc <__libc_init_array+0x40>)
 801969e:	4c0c      	ldr	r4, [pc, #48]	; (80196d0 <__libc_init_array+0x44>)
 80196a0:	f004 fdf2 	bl	801e288 <_init>
 80196a4:	1b64      	subs	r4, r4, r5
 80196a6:	10a4      	asrs	r4, r4, #2
 80196a8:	2600      	movs	r6, #0
 80196aa:	42a6      	cmp	r6, r4
 80196ac:	d105      	bne.n	80196ba <__libc_init_array+0x2e>
 80196ae:	bd70      	pop	{r4, r5, r6, pc}
 80196b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80196b4:	4798      	blx	r3
 80196b6:	3601      	adds	r6, #1
 80196b8:	e7ee      	b.n	8019698 <__libc_init_array+0xc>
 80196ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80196be:	4798      	blx	r3
 80196c0:	3601      	adds	r6, #1
 80196c2:	e7f2      	b.n	80196aa <__libc_init_array+0x1e>
 80196c4:	080205b8 	.word	0x080205b8
 80196c8:	080205b8 	.word	0x080205b8
 80196cc:	080205b8 	.word	0x080205b8
 80196d0:	080205bc 	.word	0x080205bc

080196d4 <__retarget_lock_init_recursive>:
 80196d4:	4770      	bx	lr

080196d6 <__retarget_lock_acquire_recursive>:
 80196d6:	4770      	bx	lr

080196d8 <__retarget_lock_release_recursive>:
 80196d8:	4770      	bx	lr
	...

080196dc <malloc>:
 80196dc:	4b02      	ldr	r3, [pc, #8]	; (80196e8 <malloc+0xc>)
 80196de:	4601      	mov	r1, r0
 80196e0:	6818      	ldr	r0, [r3, #0]
 80196e2:	f000 b8a7 	b.w	8019834 <_malloc_r>
 80196e6:	bf00      	nop
 80196e8:	20000140 	.word	0x20000140

080196ec <free>:
 80196ec:	4b02      	ldr	r3, [pc, #8]	; (80196f8 <free+0xc>)
 80196ee:	4601      	mov	r1, r0
 80196f0:	6818      	ldr	r0, [r3, #0]
 80196f2:	f000 b833 	b.w	801975c <_free_r>
 80196f6:	bf00      	nop
 80196f8:	20000140 	.word	0x20000140

080196fc <memcpy>:
 80196fc:	440a      	add	r2, r1
 80196fe:	4291      	cmp	r1, r2
 8019700:	f100 33ff 	add.w	r3, r0, #4294967295
 8019704:	d100      	bne.n	8019708 <memcpy+0xc>
 8019706:	4770      	bx	lr
 8019708:	b510      	push	{r4, lr}
 801970a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801970e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019712:	4291      	cmp	r1, r2
 8019714:	d1f9      	bne.n	801970a <memcpy+0xe>
 8019716:	bd10      	pop	{r4, pc}

08019718 <memmove>:
 8019718:	4288      	cmp	r0, r1
 801971a:	b510      	push	{r4, lr}
 801971c:	eb01 0402 	add.w	r4, r1, r2
 8019720:	d902      	bls.n	8019728 <memmove+0x10>
 8019722:	4284      	cmp	r4, r0
 8019724:	4623      	mov	r3, r4
 8019726:	d807      	bhi.n	8019738 <memmove+0x20>
 8019728:	1e43      	subs	r3, r0, #1
 801972a:	42a1      	cmp	r1, r4
 801972c:	d008      	beq.n	8019740 <memmove+0x28>
 801972e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019732:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019736:	e7f8      	b.n	801972a <memmove+0x12>
 8019738:	4402      	add	r2, r0
 801973a:	4601      	mov	r1, r0
 801973c:	428a      	cmp	r2, r1
 801973e:	d100      	bne.n	8019742 <memmove+0x2a>
 8019740:	bd10      	pop	{r4, pc}
 8019742:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019746:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801974a:	e7f7      	b.n	801973c <memmove+0x24>

0801974c <memset>:
 801974c:	4402      	add	r2, r0
 801974e:	4603      	mov	r3, r0
 8019750:	4293      	cmp	r3, r2
 8019752:	d100      	bne.n	8019756 <memset+0xa>
 8019754:	4770      	bx	lr
 8019756:	f803 1b01 	strb.w	r1, [r3], #1
 801975a:	e7f9      	b.n	8019750 <memset+0x4>

0801975c <_free_r>:
 801975c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801975e:	2900      	cmp	r1, #0
 8019760:	d044      	beq.n	80197ec <_free_r+0x90>
 8019762:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019766:	9001      	str	r0, [sp, #4]
 8019768:	2b00      	cmp	r3, #0
 801976a:	f1a1 0404 	sub.w	r4, r1, #4
 801976e:	bfb8      	it	lt
 8019770:	18e4      	addlt	r4, r4, r3
 8019772:	f003 fc97 	bl	801d0a4 <__malloc_lock>
 8019776:	4a1e      	ldr	r2, [pc, #120]	; (80197f0 <_free_r+0x94>)
 8019778:	9801      	ldr	r0, [sp, #4]
 801977a:	6813      	ldr	r3, [r2, #0]
 801977c:	b933      	cbnz	r3, 801978c <_free_r+0x30>
 801977e:	6063      	str	r3, [r4, #4]
 8019780:	6014      	str	r4, [r2, #0]
 8019782:	b003      	add	sp, #12
 8019784:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019788:	f003 bc92 	b.w	801d0b0 <__malloc_unlock>
 801978c:	42a3      	cmp	r3, r4
 801978e:	d908      	bls.n	80197a2 <_free_r+0x46>
 8019790:	6825      	ldr	r5, [r4, #0]
 8019792:	1961      	adds	r1, r4, r5
 8019794:	428b      	cmp	r3, r1
 8019796:	bf01      	itttt	eq
 8019798:	6819      	ldreq	r1, [r3, #0]
 801979a:	685b      	ldreq	r3, [r3, #4]
 801979c:	1949      	addeq	r1, r1, r5
 801979e:	6021      	streq	r1, [r4, #0]
 80197a0:	e7ed      	b.n	801977e <_free_r+0x22>
 80197a2:	461a      	mov	r2, r3
 80197a4:	685b      	ldr	r3, [r3, #4]
 80197a6:	b10b      	cbz	r3, 80197ac <_free_r+0x50>
 80197a8:	42a3      	cmp	r3, r4
 80197aa:	d9fa      	bls.n	80197a2 <_free_r+0x46>
 80197ac:	6811      	ldr	r1, [r2, #0]
 80197ae:	1855      	adds	r5, r2, r1
 80197b0:	42a5      	cmp	r5, r4
 80197b2:	d10b      	bne.n	80197cc <_free_r+0x70>
 80197b4:	6824      	ldr	r4, [r4, #0]
 80197b6:	4421      	add	r1, r4
 80197b8:	1854      	adds	r4, r2, r1
 80197ba:	42a3      	cmp	r3, r4
 80197bc:	6011      	str	r1, [r2, #0]
 80197be:	d1e0      	bne.n	8019782 <_free_r+0x26>
 80197c0:	681c      	ldr	r4, [r3, #0]
 80197c2:	685b      	ldr	r3, [r3, #4]
 80197c4:	6053      	str	r3, [r2, #4]
 80197c6:	4421      	add	r1, r4
 80197c8:	6011      	str	r1, [r2, #0]
 80197ca:	e7da      	b.n	8019782 <_free_r+0x26>
 80197cc:	d902      	bls.n	80197d4 <_free_r+0x78>
 80197ce:	230c      	movs	r3, #12
 80197d0:	6003      	str	r3, [r0, #0]
 80197d2:	e7d6      	b.n	8019782 <_free_r+0x26>
 80197d4:	6825      	ldr	r5, [r4, #0]
 80197d6:	1961      	adds	r1, r4, r5
 80197d8:	428b      	cmp	r3, r1
 80197da:	bf04      	itt	eq
 80197dc:	6819      	ldreq	r1, [r3, #0]
 80197de:	685b      	ldreq	r3, [r3, #4]
 80197e0:	6063      	str	r3, [r4, #4]
 80197e2:	bf04      	itt	eq
 80197e4:	1949      	addeq	r1, r1, r5
 80197e6:	6021      	streq	r1, [r4, #0]
 80197e8:	6054      	str	r4, [r2, #4]
 80197ea:	e7ca      	b.n	8019782 <_free_r+0x26>
 80197ec:	b003      	add	sp, #12
 80197ee:	bd30      	pop	{r4, r5, pc}
 80197f0:	20002574 	.word	0x20002574

080197f4 <sbrk_aligned>:
 80197f4:	b570      	push	{r4, r5, r6, lr}
 80197f6:	4e0e      	ldr	r6, [pc, #56]	; (8019830 <sbrk_aligned+0x3c>)
 80197f8:	460c      	mov	r4, r1
 80197fa:	6831      	ldr	r1, [r6, #0]
 80197fc:	4605      	mov	r5, r0
 80197fe:	b911      	cbnz	r1, 8019806 <sbrk_aligned+0x12>
 8019800:	f000 ff94 	bl	801a72c <_sbrk_r>
 8019804:	6030      	str	r0, [r6, #0]
 8019806:	4621      	mov	r1, r4
 8019808:	4628      	mov	r0, r5
 801980a:	f000 ff8f 	bl	801a72c <_sbrk_r>
 801980e:	1c43      	adds	r3, r0, #1
 8019810:	d00a      	beq.n	8019828 <sbrk_aligned+0x34>
 8019812:	1cc4      	adds	r4, r0, #3
 8019814:	f024 0403 	bic.w	r4, r4, #3
 8019818:	42a0      	cmp	r0, r4
 801981a:	d007      	beq.n	801982c <sbrk_aligned+0x38>
 801981c:	1a21      	subs	r1, r4, r0
 801981e:	4628      	mov	r0, r5
 8019820:	f000 ff84 	bl	801a72c <_sbrk_r>
 8019824:	3001      	adds	r0, #1
 8019826:	d101      	bne.n	801982c <sbrk_aligned+0x38>
 8019828:	f04f 34ff 	mov.w	r4, #4294967295
 801982c:	4620      	mov	r0, r4
 801982e:	bd70      	pop	{r4, r5, r6, pc}
 8019830:	20002578 	.word	0x20002578

08019834 <_malloc_r>:
 8019834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019838:	1ccd      	adds	r5, r1, #3
 801983a:	f025 0503 	bic.w	r5, r5, #3
 801983e:	3508      	adds	r5, #8
 8019840:	2d0c      	cmp	r5, #12
 8019842:	bf38      	it	cc
 8019844:	250c      	movcc	r5, #12
 8019846:	2d00      	cmp	r5, #0
 8019848:	4607      	mov	r7, r0
 801984a:	db01      	blt.n	8019850 <_malloc_r+0x1c>
 801984c:	42a9      	cmp	r1, r5
 801984e:	d905      	bls.n	801985c <_malloc_r+0x28>
 8019850:	230c      	movs	r3, #12
 8019852:	603b      	str	r3, [r7, #0]
 8019854:	2600      	movs	r6, #0
 8019856:	4630      	mov	r0, r6
 8019858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801985c:	4e2e      	ldr	r6, [pc, #184]	; (8019918 <_malloc_r+0xe4>)
 801985e:	f003 fc21 	bl	801d0a4 <__malloc_lock>
 8019862:	6833      	ldr	r3, [r6, #0]
 8019864:	461c      	mov	r4, r3
 8019866:	bb34      	cbnz	r4, 80198b6 <_malloc_r+0x82>
 8019868:	4629      	mov	r1, r5
 801986a:	4638      	mov	r0, r7
 801986c:	f7ff ffc2 	bl	80197f4 <sbrk_aligned>
 8019870:	1c43      	adds	r3, r0, #1
 8019872:	4604      	mov	r4, r0
 8019874:	d14d      	bne.n	8019912 <_malloc_r+0xde>
 8019876:	6834      	ldr	r4, [r6, #0]
 8019878:	4626      	mov	r6, r4
 801987a:	2e00      	cmp	r6, #0
 801987c:	d140      	bne.n	8019900 <_malloc_r+0xcc>
 801987e:	6823      	ldr	r3, [r4, #0]
 8019880:	4631      	mov	r1, r6
 8019882:	4638      	mov	r0, r7
 8019884:	eb04 0803 	add.w	r8, r4, r3
 8019888:	f000 ff50 	bl	801a72c <_sbrk_r>
 801988c:	4580      	cmp	r8, r0
 801988e:	d13a      	bne.n	8019906 <_malloc_r+0xd2>
 8019890:	6821      	ldr	r1, [r4, #0]
 8019892:	3503      	adds	r5, #3
 8019894:	1a6d      	subs	r5, r5, r1
 8019896:	f025 0503 	bic.w	r5, r5, #3
 801989a:	3508      	adds	r5, #8
 801989c:	2d0c      	cmp	r5, #12
 801989e:	bf38      	it	cc
 80198a0:	250c      	movcc	r5, #12
 80198a2:	4629      	mov	r1, r5
 80198a4:	4638      	mov	r0, r7
 80198a6:	f7ff ffa5 	bl	80197f4 <sbrk_aligned>
 80198aa:	3001      	adds	r0, #1
 80198ac:	d02b      	beq.n	8019906 <_malloc_r+0xd2>
 80198ae:	6823      	ldr	r3, [r4, #0]
 80198b0:	442b      	add	r3, r5
 80198b2:	6023      	str	r3, [r4, #0]
 80198b4:	e00e      	b.n	80198d4 <_malloc_r+0xa0>
 80198b6:	6822      	ldr	r2, [r4, #0]
 80198b8:	1b52      	subs	r2, r2, r5
 80198ba:	d41e      	bmi.n	80198fa <_malloc_r+0xc6>
 80198bc:	2a0b      	cmp	r2, #11
 80198be:	d916      	bls.n	80198ee <_malloc_r+0xba>
 80198c0:	1961      	adds	r1, r4, r5
 80198c2:	42a3      	cmp	r3, r4
 80198c4:	6025      	str	r5, [r4, #0]
 80198c6:	bf18      	it	ne
 80198c8:	6059      	strne	r1, [r3, #4]
 80198ca:	6863      	ldr	r3, [r4, #4]
 80198cc:	bf08      	it	eq
 80198ce:	6031      	streq	r1, [r6, #0]
 80198d0:	5162      	str	r2, [r4, r5]
 80198d2:	604b      	str	r3, [r1, #4]
 80198d4:	4638      	mov	r0, r7
 80198d6:	f104 060b 	add.w	r6, r4, #11
 80198da:	f003 fbe9 	bl	801d0b0 <__malloc_unlock>
 80198de:	f026 0607 	bic.w	r6, r6, #7
 80198e2:	1d23      	adds	r3, r4, #4
 80198e4:	1af2      	subs	r2, r6, r3
 80198e6:	d0b6      	beq.n	8019856 <_malloc_r+0x22>
 80198e8:	1b9b      	subs	r3, r3, r6
 80198ea:	50a3      	str	r3, [r4, r2]
 80198ec:	e7b3      	b.n	8019856 <_malloc_r+0x22>
 80198ee:	6862      	ldr	r2, [r4, #4]
 80198f0:	42a3      	cmp	r3, r4
 80198f2:	bf0c      	ite	eq
 80198f4:	6032      	streq	r2, [r6, #0]
 80198f6:	605a      	strne	r2, [r3, #4]
 80198f8:	e7ec      	b.n	80198d4 <_malloc_r+0xa0>
 80198fa:	4623      	mov	r3, r4
 80198fc:	6864      	ldr	r4, [r4, #4]
 80198fe:	e7b2      	b.n	8019866 <_malloc_r+0x32>
 8019900:	4634      	mov	r4, r6
 8019902:	6876      	ldr	r6, [r6, #4]
 8019904:	e7b9      	b.n	801987a <_malloc_r+0x46>
 8019906:	230c      	movs	r3, #12
 8019908:	603b      	str	r3, [r7, #0]
 801990a:	4638      	mov	r0, r7
 801990c:	f003 fbd0 	bl	801d0b0 <__malloc_unlock>
 8019910:	e7a1      	b.n	8019856 <_malloc_r+0x22>
 8019912:	6025      	str	r5, [r4, #0]
 8019914:	e7de      	b.n	80198d4 <_malloc_r+0xa0>
 8019916:	bf00      	nop
 8019918:	20002574 	.word	0x20002574

0801991c <__cvt>:
 801991c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019920:	ec55 4b10 	vmov	r4, r5, d0
 8019924:	2d00      	cmp	r5, #0
 8019926:	460e      	mov	r6, r1
 8019928:	4619      	mov	r1, r3
 801992a:	462b      	mov	r3, r5
 801992c:	bfbb      	ittet	lt
 801992e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8019932:	461d      	movlt	r5, r3
 8019934:	2300      	movge	r3, #0
 8019936:	232d      	movlt	r3, #45	; 0x2d
 8019938:	700b      	strb	r3, [r1, #0]
 801993a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801993c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8019940:	4691      	mov	r9, r2
 8019942:	f023 0820 	bic.w	r8, r3, #32
 8019946:	bfbc      	itt	lt
 8019948:	4622      	movlt	r2, r4
 801994a:	4614      	movlt	r4, r2
 801994c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019950:	d005      	beq.n	801995e <__cvt+0x42>
 8019952:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8019956:	d100      	bne.n	801995a <__cvt+0x3e>
 8019958:	3601      	adds	r6, #1
 801995a:	2102      	movs	r1, #2
 801995c:	e000      	b.n	8019960 <__cvt+0x44>
 801995e:	2103      	movs	r1, #3
 8019960:	ab03      	add	r3, sp, #12
 8019962:	9301      	str	r3, [sp, #4]
 8019964:	ab02      	add	r3, sp, #8
 8019966:	9300      	str	r3, [sp, #0]
 8019968:	ec45 4b10 	vmov	d0, r4, r5
 801996c:	4653      	mov	r3, sl
 801996e:	4632      	mov	r2, r6
 8019970:	f001 fff6 	bl	801b960 <_dtoa_r>
 8019974:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8019978:	4607      	mov	r7, r0
 801997a:	d102      	bne.n	8019982 <__cvt+0x66>
 801997c:	f019 0f01 	tst.w	r9, #1
 8019980:	d022      	beq.n	80199c8 <__cvt+0xac>
 8019982:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019986:	eb07 0906 	add.w	r9, r7, r6
 801998a:	d110      	bne.n	80199ae <__cvt+0x92>
 801998c:	783b      	ldrb	r3, [r7, #0]
 801998e:	2b30      	cmp	r3, #48	; 0x30
 8019990:	d10a      	bne.n	80199a8 <__cvt+0x8c>
 8019992:	2200      	movs	r2, #0
 8019994:	2300      	movs	r3, #0
 8019996:	4620      	mov	r0, r4
 8019998:	4629      	mov	r1, r5
 801999a:	f7e7 f8ad 	bl	8000af8 <__aeabi_dcmpeq>
 801999e:	b918      	cbnz	r0, 80199a8 <__cvt+0x8c>
 80199a0:	f1c6 0601 	rsb	r6, r6, #1
 80199a4:	f8ca 6000 	str.w	r6, [sl]
 80199a8:	f8da 3000 	ldr.w	r3, [sl]
 80199ac:	4499      	add	r9, r3
 80199ae:	2200      	movs	r2, #0
 80199b0:	2300      	movs	r3, #0
 80199b2:	4620      	mov	r0, r4
 80199b4:	4629      	mov	r1, r5
 80199b6:	f7e7 f89f 	bl	8000af8 <__aeabi_dcmpeq>
 80199ba:	b108      	cbz	r0, 80199c0 <__cvt+0xa4>
 80199bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80199c0:	2230      	movs	r2, #48	; 0x30
 80199c2:	9b03      	ldr	r3, [sp, #12]
 80199c4:	454b      	cmp	r3, r9
 80199c6:	d307      	bcc.n	80199d8 <__cvt+0xbc>
 80199c8:	9b03      	ldr	r3, [sp, #12]
 80199ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80199cc:	1bdb      	subs	r3, r3, r7
 80199ce:	4638      	mov	r0, r7
 80199d0:	6013      	str	r3, [r2, #0]
 80199d2:	b004      	add	sp, #16
 80199d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80199d8:	1c59      	adds	r1, r3, #1
 80199da:	9103      	str	r1, [sp, #12]
 80199dc:	701a      	strb	r2, [r3, #0]
 80199de:	e7f0      	b.n	80199c2 <__cvt+0xa6>

080199e0 <__exponent>:
 80199e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80199e2:	4603      	mov	r3, r0
 80199e4:	2900      	cmp	r1, #0
 80199e6:	bfb8      	it	lt
 80199e8:	4249      	neglt	r1, r1
 80199ea:	f803 2b02 	strb.w	r2, [r3], #2
 80199ee:	bfb4      	ite	lt
 80199f0:	222d      	movlt	r2, #45	; 0x2d
 80199f2:	222b      	movge	r2, #43	; 0x2b
 80199f4:	2909      	cmp	r1, #9
 80199f6:	7042      	strb	r2, [r0, #1]
 80199f8:	dd2a      	ble.n	8019a50 <__exponent+0x70>
 80199fa:	f10d 0407 	add.w	r4, sp, #7
 80199fe:	46a4      	mov	ip, r4
 8019a00:	270a      	movs	r7, #10
 8019a02:	46a6      	mov	lr, r4
 8019a04:	460a      	mov	r2, r1
 8019a06:	fb91 f6f7 	sdiv	r6, r1, r7
 8019a0a:	fb07 1516 	mls	r5, r7, r6, r1
 8019a0e:	3530      	adds	r5, #48	; 0x30
 8019a10:	2a63      	cmp	r2, #99	; 0x63
 8019a12:	f104 34ff 	add.w	r4, r4, #4294967295
 8019a16:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8019a1a:	4631      	mov	r1, r6
 8019a1c:	dcf1      	bgt.n	8019a02 <__exponent+0x22>
 8019a1e:	3130      	adds	r1, #48	; 0x30
 8019a20:	f1ae 0502 	sub.w	r5, lr, #2
 8019a24:	f804 1c01 	strb.w	r1, [r4, #-1]
 8019a28:	1c44      	adds	r4, r0, #1
 8019a2a:	4629      	mov	r1, r5
 8019a2c:	4561      	cmp	r1, ip
 8019a2e:	d30a      	bcc.n	8019a46 <__exponent+0x66>
 8019a30:	f10d 0209 	add.w	r2, sp, #9
 8019a34:	eba2 020e 	sub.w	r2, r2, lr
 8019a38:	4565      	cmp	r5, ip
 8019a3a:	bf88      	it	hi
 8019a3c:	2200      	movhi	r2, #0
 8019a3e:	4413      	add	r3, r2
 8019a40:	1a18      	subs	r0, r3, r0
 8019a42:	b003      	add	sp, #12
 8019a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019a4a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8019a4e:	e7ed      	b.n	8019a2c <__exponent+0x4c>
 8019a50:	2330      	movs	r3, #48	; 0x30
 8019a52:	3130      	adds	r1, #48	; 0x30
 8019a54:	7083      	strb	r3, [r0, #2]
 8019a56:	70c1      	strb	r1, [r0, #3]
 8019a58:	1d03      	adds	r3, r0, #4
 8019a5a:	e7f1      	b.n	8019a40 <__exponent+0x60>

08019a5c <_printf_float>:
 8019a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a60:	ed2d 8b02 	vpush	{d8}
 8019a64:	b08d      	sub	sp, #52	; 0x34
 8019a66:	460c      	mov	r4, r1
 8019a68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8019a6c:	4616      	mov	r6, r2
 8019a6e:	461f      	mov	r7, r3
 8019a70:	4605      	mov	r5, r0
 8019a72:	f003 fa9b 	bl	801cfac <_localeconv_r>
 8019a76:	f8d0 a000 	ldr.w	sl, [r0]
 8019a7a:	4650      	mov	r0, sl
 8019a7c:	f7e6 fbba 	bl	80001f4 <strlen>
 8019a80:	2300      	movs	r3, #0
 8019a82:	930a      	str	r3, [sp, #40]	; 0x28
 8019a84:	6823      	ldr	r3, [r4, #0]
 8019a86:	9305      	str	r3, [sp, #20]
 8019a88:	f8d8 3000 	ldr.w	r3, [r8]
 8019a8c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8019a90:	3307      	adds	r3, #7
 8019a92:	f023 0307 	bic.w	r3, r3, #7
 8019a96:	f103 0208 	add.w	r2, r3, #8
 8019a9a:	f8c8 2000 	str.w	r2, [r8]
 8019a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019aa2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8019aa6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8019aaa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019aae:	9307      	str	r3, [sp, #28]
 8019ab0:	f8cd 8018 	str.w	r8, [sp, #24]
 8019ab4:	ee08 0a10 	vmov	s16, r0
 8019ab8:	4b9f      	ldr	r3, [pc, #636]	; (8019d38 <_printf_float+0x2dc>)
 8019aba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019abe:	f04f 32ff 	mov.w	r2, #4294967295
 8019ac2:	f7e7 f84b 	bl	8000b5c <__aeabi_dcmpun>
 8019ac6:	bb88      	cbnz	r0, 8019b2c <_printf_float+0xd0>
 8019ac8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019acc:	4b9a      	ldr	r3, [pc, #616]	; (8019d38 <_printf_float+0x2dc>)
 8019ace:	f04f 32ff 	mov.w	r2, #4294967295
 8019ad2:	f7e7 f825 	bl	8000b20 <__aeabi_dcmple>
 8019ad6:	bb48      	cbnz	r0, 8019b2c <_printf_float+0xd0>
 8019ad8:	2200      	movs	r2, #0
 8019ada:	2300      	movs	r3, #0
 8019adc:	4640      	mov	r0, r8
 8019ade:	4649      	mov	r1, r9
 8019ae0:	f7e7 f814 	bl	8000b0c <__aeabi_dcmplt>
 8019ae4:	b110      	cbz	r0, 8019aec <_printf_float+0x90>
 8019ae6:	232d      	movs	r3, #45	; 0x2d
 8019ae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019aec:	4b93      	ldr	r3, [pc, #588]	; (8019d3c <_printf_float+0x2e0>)
 8019aee:	4894      	ldr	r0, [pc, #592]	; (8019d40 <_printf_float+0x2e4>)
 8019af0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8019af4:	bf94      	ite	ls
 8019af6:	4698      	movls	r8, r3
 8019af8:	4680      	movhi	r8, r0
 8019afa:	2303      	movs	r3, #3
 8019afc:	6123      	str	r3, [r4, #16]
 8019afe:	9b05      	ldr	r3, [sp, #20]
 8019b00:	f023 0204 	bic.w	r2, r3, #4
 8019b04:	6022      	str	r2, [r4, #0]
 8019b06:	f04f 0900 	mov.w	r9, #0
 8019b0a:	9700      	str	r7, [sp, #0]
 8019b0c:	4633      	mov	r3, r6
 8019b0e:	aa0b      	add	r2, sp, #44	; 0x2c
 8019b10:	4621      	mov	r1, r4
 8019b12:	4628      	mov	r0, r5
 8019b14:	f000 f9d8 	bl	8019ec8 <_printf_common>
 8019b18:	3001      	adds	r0, #1
 8019b1a:	f040 8090 	bne.w	8019c3e <_printf_float+0x1e2>
 8019b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8019b22:	b00d      	add	sp, #52	; 0x34
 8019b24:	ecbd 8b02 	vpop	{d8}
 8019b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b2c:	4642      	mov	r2, r8
 8019b2e:	464b      	mov	r3, r9
 8019b30:	4640      	mov	r0, r8
 8019b32:	4649      	mov	r1, r9
 8019b34:	f7e7 f812 	bl	8000b5c <__aeabi_dcmpun>
 8019b38:	b140      	cbz	r0, 8019b4c <_printf_float+0xf0>
 8019b3a:	464b      	mov	r3, r9
 8019b3c:	2b00      	cmp	r3, #0
 8019b3e:	bfbc      	itt	lt
 8019b40:	232d      	movlt	r3, #45	; 0x2d
 8019b42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019b46:	487f      	ldr	r0, [pc, #508]	; (8019d44 <_printf_float+0x2e8>)
 8019b48:	4b7f      	ldr	r3, [pc, #508]	; (8019d48 <_printf_float+0x2ec>)
 8019b4a:	e7d1      	b.n	8019af0 <_printf_float+0x94>
 8019b4c:	6863      	ldr	r3, [r4, #4]
 8019b4e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8019b52:	9206      	str	r2, [sp, #24]
 8019b54:	1c5a      	adds	r2, r3, #1
 8019b56:	d13f      	bne.n	8019bd8 <_printf_float+0x17c>
 8019b58:	2306      	movs	r3, #6
 8019b5a:	6063      	str	r3, [r4, #4]
 8019b5c:	9b05      	ldr	r3, [sp, #20]
 8019b5e:	6861      	ldr	r1, [r4, #4]
 8019b60:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8019b64:	2300      	movs	r3, #0
 8019b66:	9303      	str	r3, [sp, #12]
 8019b68:	ab0a      	add	r3, sp, #40	; 0x28
 8019b6a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8019b6e:	ab09      	add	r3, sp, #36	; 0x24
 8019b70:	ec49 8b10 	vmov	d0, r8, r9
 8019b74:	9300      	str	r3, [sp, #0]
 8019b76:	6022      	str	r2, [r4, #0]
 8019b78:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8019b7c:	4628      	mov	r0, r5
 8019b7e:	f7ff fecd 	bl	801991c <__cvt>
 8019b82:	9b06      	ldr	r3, [sp, #24]
 8019b84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019b86:	2b47      	cmp	r3, #71	; 0x47
 8019b88:	4680      	mov	r8, r0
 8019b8a:	d108      	bne.n	8019b9e <_printf_float+0x142>
 8019b8c:	1cc8      	adds	r0, r1, #3
 8019b8e:	db02      	blt.n	8019b96 <_printf_float+0x13a>
 8019b90:	6863      	ldr	r3, [r4, #4]
 8019b92:	4299      	cmp	r1, r3
 8019b94:	dd41      	ble.n	8019c1a <_printf_float+0x1be>
 8019b96:	f1ab 0b02 	sub.w	fp, fp, #2
 8019b9a:	fa5f fb8b 	uxtb.w	fp, fp
 8019b9e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019ba2:	d820      	bhi.n	8019be6 <_printf_float+0x18a>
 8019ba4:	3901      	subs	r1, #1
 8019ba6:	465a      	mov	r2, fp
 8019ba8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019bac:	9109      	str	r1, [sp, #36]	; 0x24
 8019bae:	f7ff ff17 	bl	80199e0 <__exponent>
 8019bb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019bb4:	1813      	adds	r3, r2, r0
 8019bb6:	2a01      	cmp	r2, #1
 8019bb8:	4681      	mov	r9, r0
 8019bba:	6123      	str	r3, [r4, #16]
 8019bbc:	dc02      	bgt.n	8019bc4 <_printf_float+0x168>
 8019bbe:	6822      	ldr	r2, [r4, #0]
 8019bc0:	07d2      	lsls	r2, r2, #31
 8019bc2:	d501      	bpl.n	8019bc8 <_printf_float+0x16c>
 8019bc4:	3301      	adds	r3, #1
 8019bc6:	6123      	str	r3, [r4, #16]
 8019bc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8019bcc:	2b00      	cmp	r3, #0
 8019bce:	d09c      	beq.n	8019b0a <_printf_float+0xae>
 8019bd0:	232d      	movs	r3, #45	; 0x2d
 8019bd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019bd6:	e798      	b.n	8019b0a <_printf_float+0xae>
 8019bd8:	9a06      	ldr	r2, [sp, #24]
 8019bda:	2a47      	cmp	r2, #71	; 0x47
 8019bdc:	d1be      	bne.n	8019b5c <_printf_float+0x100>
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	d1bc      	bne.n	8019b5c <_printf_float+0x100>
 8019be2:	2301      	movs	r3, #1
 8019be4:	e7b9      	b.n	8019b5a <_printf_float+0xfe>
 8019be6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8019bea:	d118      	bne.n	8019c1e <_printf_float+0x1c2>
 8019bec:	2900      	cmp	r1, #0
 8019bee:	6863      	ldr	r3, [r4, #4]
 8019bf0:	dd0b      	ble.n	8019c0a <_printf_float+0x1ae>
 8019bf2:	6121      	str	r1, [r4, #16]
 8019bf4:	b913      	cbnz	r3, 8019bfc <_printf_float+0x1a0>
 8019bf6:	6822      	ldr	r2, [r4, #0]
 8019bf8:	07d0      	lsls	r0, r2, #31
 8019bfa:	d502      	bpl.n	8019c02 <_printf_float+0x1a6>
 8019bfc:	3301      	adds	r3, #1
 8019bfe:	440b      	add	r3, r1
 8019c00:	6123      	str	r3, [r4, #16]
 8019c02:	65a1      	str	r1, [r4, #88]	; 0x58
 8019c04:	f04f 0900 	mov.w	r9, #0
 8019c08:	e7de      	b.n	8019bc8 <_printf_float+0x16c>
 8019c0a:	b913      	cbnz	r3, 8019c12 <_printf_float+0x1b6>
 8019c0c:	6822      	ldr	r2, [r4, #0]
 8019c0e:	07d2      	lsls	r2, r2, #31
 8019c10:	d501      	bpl.n	8019c16 <_printf_float+0x1ba>
 8019c12:	3302      	adds	r3, #2
 8019c14:	e7f4      	b.n	8019c00 <_printf_float+0x1a4>
 8019c16:	2301      	movs	r3, #1
 8019c18:	e7f2      	b.n	8019c00 <_printf_float+0x1a4>
 8019c1a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8019c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019c20:	4299      	cmp	r1, r3
 8019c22:	db05      	blt.n	8019c30 <_printf_float+0x1d4>
 8019c24:	6823      	ldr	r3, [r4, #0]
 8019c26:	6121      	str	r1, [r4, #16]
 8019c28:	07d8      	lsls	r0, r3, #31
 8019c2a:	d5ea      	bpl.n	8019c02 <_printf_float+0x1a6>
 8019c2c:	1c4b      	adds	r3, r1, #1
 8019c2e:	e7e7      	b.n	8019c00 <_printf_float+0x1a4>
 8019c30:	2900      	cmp	r1, #0
 8019c32:	bfd4      	ite	le
 8019c34:	f1c1 0202 	rsble	r2, r1, #2
 8019c38:	2201      	movgt	r2, #1
 8019c3a:	4413      	add	r3, r2
 8019c3c:	e7e0      	b.n	8019c00 <_printf_float+0x1a4>
 8019c3e:	6823      	ldr	r3, [r4, #0]
 8019c40:	055a      	lsls	r2, r3, #21
 8019c42:	d407      	bmi.n	8019c54 <_printf_float+0x1f8>
 8019c44:	6923      	ldr	r3, [r4, #16]
 8019c46:	4642      	mov	r2, r8
 8019c48:	4631      	mov	r1, r6
 8019c4a:	4628      	mov	r0, r5
 8019c4c:	47b8      	blx	r7
 8019c4e:	3001      	adds	r0, #1
 8019c50:	d12c      	bne.n	8019cac <_printf_float+0x250>
 8019c52:	e764      	b.n	8019b1e <_printf_float+0xc2>
 8019c54:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019c58:	f240 80e0 	bls.w	8019e1c <_printf_float+0x3c0>
 8019c5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019c60:	2200      	movs	r2, #0
 8019c62:	2300      	movs	r3, #0
 8019c64:	f7e6 ff48 	bl	8000af8 <__aeabi_dcmpeq>
 8019c68:	2800      	cmp	r0, #0
 8019c6a:	d034      	beq.n	8019cd6 <_printf_float+0x27a>
 8019c6c:	4a37      	ldr	r2, [pc, #220]	; (8019d4c <_printf_float+0x2f0>)
 8019c6e:	2301      	movs	r3, #1
 8019c70:	4631      	mov	r1, r6
 8019c72:	4628      	mov	r0, r5
 8019c74:	47b8      	blx	r7
 8019c76:	3001      	adds	r0, #1
 8019c78:	f43f af51 	beq.w	8019b1e <_printf_float+0xc2>
 8019c7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019c80:	429a      	cmp	r2, r3
 8019c82:	db02      	blt.n	8019c8a <_printf_float+0x22e>
 8019c84:	6823      	ldr	r3, [r4, #0]
 8019c86:	07d8      	lsls	r0, r3, #31
 8019c88:	d510      	bpl.n	8019cac <_printf_float+0x250>
 8019c8a:	ee18 3a10 	vmov	r3, s16
 8019c8e:	4652      	mov	r2, sl
 8019c90:	4631      	mov	r1, r6
 8019c92:	4628      	mov	r0, r5
 8019c94:	47b8      	blx	r7
 8019c96:	3001      	adds	r0, #1
 8019c98:	f43f af41 	beq.w	8019b1e <_printf_float+0xc2>
 8019c9c:	f04f 0800 	mov.w	r8, #0
 8019ca0:	f104 091a 	add.w	r9, r4, #26
 8019ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019ca6:	3b01      	subs	r3, #1
 8019ca8:	4543      	cmp	r3, r8
 8019caa:	dc09      	bgt.n	8019cc0 <_printf_float+0x264>
 8019cac:	6823      	ldr	r3, [r4, #0]
 8019cae:	079b      	lsls	r3, r3, #30
 8019cb0:	f100 8105 	bmi.w	8019ebe <_printf_float+0x462>
 8019cb4:	68e0      	ldr	r0, [r4, #12]
 8019cb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019cb8:	4298      	cmp	r0, r3
 8019cba:	bfb8      	it	lt
 8019cbc:	4618      	movlt	r0, r3
 8019cbe:	e730      	b.n	8019b22 <_printf_float+0xc6>
 8019cc0:	2301      	movs	r3, #1
 8019cc2:	464a      	mov	r2, r9
 8019cc4:	4631      	mov	r1, r6
 8019cc6:	4628      	mov	r0, r5
 8019cc8:	47b8      	blx	r7
 8019cca:	3001      	adds	r0, #1
 8019ccc:	f43f af27 	beq.w	8019b1e <_printf_float+0xc2>
 8019cd0:	f108 0801 	add.w	r8, r8, #1
 8019cd4:	e7e6      	b.n	8019ca4 <_printf_float+0x248>
 8019cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	dc39      	bgt.n	8019d50 <_printf_float+0x2f4>
 8019cdc:	4a1b      	ldr	r2, [pc, #108]	; (8019d4c <_printf_float+0x2f0>)
 8019cde:	2301      	movs	r3, #1
 8019ce0:	4631      	mov	r1, r6
 8019ce2:	4628      	mov	r0, r5
 8019ce4:	47b8      	blx	r7
 8019ce6:	3001      	adds	r0, #1
 8019ce8:	f43f af19 	beq.w	8019b1e <_printf_float+0xc2>
 8019cec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019cf0:	4313      	orrs	r3, r2
 8019cf2:	d102      	bne.n	8019cfa <_printf_float+0x29e>
 8019cf4:	6823      	ldr	r3, [r4, #0]
 8019cf6:	07d9      	lsls	r1, r3, #31
 8019cf8:	d5d8      	bpl.n	8019cac <_printf_float+0x250>
 8019cfa:	ee18 3a10 	vmov	r3, s16
 8019cfe:	4652      	mov	r2, sl
 8019d00:	4631      	mov	r1, r6
 8019d02:	4628      	mov	r0, r5
 8019d04:	47b8      	blx	r7
 8019d06:	3001      	adds	r0, #1
 8019d08:	f43f af09 	beq.w	8019b1e <_printf_float+0xc2>
 8019d0c:	f04f 0900 	mov.w	r9, #0
 8019d10:	f104 0a1a 	add.w	sl, r4, #26
 8019d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d16:	425b      	negs	r3, r3
 8019d18:	454b      	cmp	r3, r9
 8019d1a:	dc01      	bgt.n	8019d20 <_printf_float+0x2c4>
 8019d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019d1e:	e792      	b.n	8019c46 <_printf_float+0x1ea>
 8019d20:	2301      	movs	r3, #1
 8019d22:	4652      	mov	r2, sl
 8019d24:	4631      	mov	r1, r6
 8019d26:	4628      	mov	r0, r5
 8019d28:	47b8      	blx	r7
 8019d2a:	3001      	adds	r0, #1
 8019d2c:	f43f aef7 	beq.w	8019b1e <_printf_float+0xc2>
 8019d30:	f109 0901 	add.w	r9, r9, #1
 8019d34:	e7ee      	b.n	8019d14 <_printf_float+0x2b8>
 8019d36:	bf00      	nop
 8019d38:	7fefffff 	.word	0x7fefffff
 8019d3c:	080200ac 	.word	0x080200ac
 8019d40:	080200b0 	.word	0x080200b0
 8019d44:	080200b8 	.word	0x080200b8
 8019d48:	080200b4 	.word	0x080200b4
 8019d4c:	080200bc 	.word	0x080200bc
 8019d50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019d52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019d54:	429a      	cmp	r2, r3
 8019d56:	bfa8      	it	ge
 8019d58:	461a      	movge	r2, r3
 8019d5a:	2a00      	cmp	r2, #0
 8019d5c:	4691      	mov	r9, r2
 8019d5e:	dc37      	bgt.n	8019dd0 <_printf_float+0x374>
 8019d60:	f04f 0b00 	mov.w	fp, #0
 8019d64:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019d68:	f104 021a 	add.w	r2, r4, #26
 8019d6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019d6e:	9305      	str	r3, [sp, #20]
 8019d70:	eba3 0309 	sub.w	r3, r3, r9
 8019d74:	455b      	cmp	r3, fp
 8019d76:	dc33      	bgt.n	8019de0 <_printf_float+0x384>
 8019d78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019d7c:	429a      	cmp	r2, r3
 8019d7e:	db3b      	blt.n	8019df8 <_printf_float+0x39c>
 8019d80:	6823      	ldr	r3, [r4, #0]
 8019d82:	07da      	lsls	r2, r3, #31
 8019d84:	d438      	bmi.n	8019df8 <_printf_float+0x39c>
 8019d86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019d88:	9a05      	ldr	r2, [sp, #20]
 8019d8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019d8c:	1a9a      	subs	r2, r3, r2
 8019d8e:	eba3 0901 	sub.w	r9, r3, r1
 8019d92:	4591      	cmp	r9, r2
 8019d94:	bfa8      	it	ge
 8019d96:	4691      	movge	r9, r2
 8019d98:	f1b9 0f00 	cmp.w	r9, #0
 8019d9c:	dc35      	bgt.n	8019e0a <_printf_float+0x3ae>
 8019d9e:	f04f 0800 	mov.w	r8, #0
 8019da2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019da6:	f104 0a1a 	add.w	sl, r4, #26
 8019daa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019dae:	1a9b      	subs	r3, r3, r2
 8019db0:	eba3 0309 	sub.w	r3, r3, r9
 8019db4:	4543      	cmp	r3, r8
 8019db6:	f77f af79 	ble.w	8019cac <_printf_float+0x250>
 8019dba:	2301      	movs	r3, #1
 8019dbc:	4652      	mov	r2, sl
 8019dbe:	4631      	mov	r1, r6
 8019dc0:	4628      	mov	r0, r5
 8019dc2:	47b8      	blx	r7
 8019dc4:	3001      	adds	r0, #1
 8019dc6:	f43f aeaa 	beq.w	8019b1e <_printf_float+0xc2>
 8019dca:	f108 0801 	add.w	r8, r8, #1
 8019dce:	e7ec      	b.n	8019daa <_printf_float+0x34e>
 8019dd0:	4613      	mov	r3, r2
 8019dd2:	4631      	mov	r1, r6
 8019dd4:	4642      	mov	r2, r8
 8019dd6:	4628      	mov	r0, r5
 8019dd8:	47b8      	blx	r7
 8019dda:	3001      	adds	r0, #1
 8019ddc:	d1c0      	bne.n	8019d60 <_printf_float+0x304>
 8019dde:	e69e      	b.n	8019b1e <_printf_float+0xc2>
 8019de0:	2301      	movs	r3, #1
 8019de2:	4631      	mov	r1, r6
 8019de4:	4628      	mov	r0, r5
 8019de6:	9205      	str	r2, [sp, #20]
 8019de8:	47b8      	blx	r7
 8019dea:	3001      	adds	r0, #1
 8019dec:	f43f ae97 	beq.w	8019b1e <_printf_float+0xc2>
 8019df0:	9a05      	ldr	r2, [sp, #20]
 8019df2:	f10b 0b01 	add.w	fp, fp, #1
 8019df6:	e7b9      	b.n	8019d6c <_printf_float+0x310>
 8019df8:	ee18 3a10 	vmov	r3, s16
 8019dfc:	4652      	mov	r2, sl
 8019dfe:	4631      	mov	r1, r6
 8019e00:	4628      	mov	r0, r5
 8019e02:	47b8      	blx	r7
 8019e04:	3001      	adds	r0, #1
 8019e06:	d1be      	bne.n	8019d86 <_printf_float+0x32a>
 8019e08:	e689      	b.n	8019b1e <_printf_float+0xc2>
 8019e0a:	9a05      	ldr	r2, [sp, #20]
 8019e0c:	464b      	mov	r3, r9
 8019e0e:	4442      	add	r2, r8
 8019e10:	4631      	mov	r1, r6
 8019e12:	4628      	mov	r0, r5
 8019e14:	47b8      	blx	r7
 8019e16:	3001      	adds	r0, #1
 8019e18:	d1c1      	bne.n	8019d9e <_printf_float+0x342>
 8019e1a:	e680      	b.n	8019b1e <_printf_float+0xc2>
 8019e1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019e1e:	2a01      	cmp	r2, #1
 8019e20:	dc01      	bgt.n	8019e26 <_printf_float+0x3ca>
 8019e22:	07db      	lsls	r3, r3, #31
 8019e24:	d538      	bpl.n	8019e98 <_printf_float+0x43c>
 8019e26:	2301      	movs	r3, #1
 8019e28:	4642      	mov	r2, r8
 8019e2a:	4631      	mov	r1, r6
 8019e2c:	4628      	mov	r0, r5
 8019e2e:	47b8      	blx	r7
 8019e30:	3001      	adds	r0, #1
 8019e32:	f43f ae74 	beq.w	8019b1e <_printf_float+0xc2>
 8019e36:	ee18 3a10 	vmov	r3, s16
 8019e3a:	4652      	mov	r2, sl
 8019e3c:	4631      	mov	r1, r6
 8019e3e:	4628      	mov	r0, r5
 8019e40:	47b8      	blx	r7
 8019e42:	3001      	adds	r0, #1
 8019e44:	f43f ae6b 	beq.w	8019b1e <_printf_float+0xc2>
 8019e48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019e4c:	2200      	movs	r2, #0
 8019e4e:	2300      	movs	r3, #0
 8019e50:	f7e6 fe52 	bl	8000af8 <__aeabi_dcmpeq>
 8019e54:	b9d8      	cbnz	r0, 8019e8e <_printf_float+0x432>
 8019e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019e58:	f108 0201 	add.w	r2, r8, #1
 8019e5c:	3b01      	subs	r3, #1
 8019e5e:	4631      	mov	r1, r6
 8019e60:	4628      	mov	r0, r5
 8019e62:	47b8      	blx	r7
 8019e64:	3001      	adds	r0, #1
 8019e66:	d10e      	bne.n	8019e86 <_printf_float+0x42a>
 8019e68:	e659      	b.n	8019b1e <_printf_float+0xc2>
 8019e6a:	2301      	movs	r3, #1
 8019e6c:	4652      	mov	r2, sl
 8019e6e:	4631      	mov	r1, r6
 8019e70:	4628      	mov	r0, r5
 8019e72:	47b8      	blx	r7
 8019e74:	3001      	adds	r0, #1
 8019e76:	f43f ae52 	beq.w	8019b1e <_printf_float+0xc2>
 8019e7a:	f108 0801 	add.w	r8, r8, #1
 8019e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019e80:	3b01      	subs	r3, #1
 8019e82:	4543      	cmp	r3, r8
 8019e84:	dcf1      	bgt.n	8019e6a <_printf_float+0x40e>
 8019e86:	464b      	mov	r3, r9
 8019e88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019e8c:	e6dc      	b.n	8019c48 <_printf_float+0x1ec>
 8019e8e:	f04f 0800 	mov.w	r8, #0
 8019e92:	f104 0a1a 	add.w	sl, r4, #26
 8019e96:	e7f2      	b.n	8019e7e <_printf_float+0x422>
 8019e98:	2301      	movs	r3, #1
 8019e9a:	4642      	mov	r2, r8
 8019e9c:	e7df      	b.n	8019e5e <_printf_float+0x402>
 8019e9e:	2301      	movs	r3, #1
 8019ea0:	464a      	mov	r2, r9
 8019ea2:	4631      	mov	r1, r6
 8019ea4:	4628      	mov	r0, r5
 8019ea6:	47b8      	blx	r7
 8019ea8:	3001      	adds	r0, #1
 8019eaa:	f43f ae38 	beq.w	8019b1e <_printf_float+0xc2>
 8019eae:	f108 0801 	add.w	r8, r8, #1
 8019eb2:	68e3      	ldr	r3, [r4, #12]
 8019eb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019eb6:	1a5b      	subs	r3, r3, r1
 8019eb8:	4543      	cmp	r3, r8
 8019eba:	dcf0      	bgt.n	8019e9e <_printf_float+0x442>
 8019ebc:	e6fa      	b.n	8019cb4 <_printf_float+0x258>
 8019ebe:	f04f 0800 	mov.w	r8, #0
 8019ec2:	f104 0919 	add.w	r9, r4, #25
 8019ec6:	e7f4      	b.n	8019eb2 <_printf_float+0x456>

08019ec8 <_printf_common>:
 8019ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ecc:	4616      	mov	r6, r2
 8019ece:	4699      	mov	r9, r3
 8019ed0:	688a      	ldr	r2, [r1, #8]
 8019ed2:	690b      	ldr	r3, [r1, #16]
 8019ed4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019ed8:	4293      	cmp	r3, r2
 8019eda:	bfb8      	it	lt
 8019edc:	4613      	movlt	r3, r2
 8019ede:	6033      	str	r3, [r6, #0]
 8019ee0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019ee4:	4607      	mov	r7, r0
 8019ee6:	460c      	mov	r4, r1
 8019ee8:	b10a      	cbz	r2, 8019eee <_printf_common+0x26>
 8019eea:	3301      	adds	r3, #1
 8019eec:	6033      	str	r3, [r6, #0]
 8019eee:	6823      	ldr	r3, [r4, #0]
 8019ef0:	0699      	lsls	r1, r3, #26
 8019ef2:	bf42      	ittt	mi
 8019ef4:	6833      	ldrmi	r3, [r6, #0]
 8019ef6:	3302      	addmi	r3, #2
 8019ef8:	6033      	strmi	r3, [r6, #0]
 8019efa:	6825      	ldr	r5, [r4, #0]
 8019efc:	f015 0506 	ands.w	r5, r5, #6
 8019f00:	d106      	bne.n	8019f10 <_printf_common+0x48>
 8019f02:	f104 0a19 	add.w	sl, r4, #25
 8019f06:	68e3      	ldr	r3, [r4, #12]
 8019f08:	6832      	ldr	r2, [r6, #0]
 8019f0a:	1a9b      	subs	r3, r3, r2
 8019f0c:	42ab      	cmp	r3, r5
 8019f0e:	dc26      	bgt.n	8019f5e <_printf_common+0x96>
 8019f10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019f14:	1e13      	subs	r3, r2, #0
 8019f16:	6822      	ldr	r2, [r4, #0]
 8019f18:	bf18      	it	ne
 8019f1a:	2301      	movne	r3, #1
 8019f1c:	0692      	lsls	r2, r2, #26
 8019f1e:	d42b      	bmi.n	8019f78 <_printf_common+0xb0>
 8019f20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019f24:	4649      	mov	r1, r9
 8019f26:	4638      	mov	r0, r7
 8019f28:	47c0      	blx	r8
 8019f2a:	3001      	adds	r0, #1
 8019f2c:	d01e      	beq.n	8019f6c <_printf_common+0xa4>
 8019f2e:	6823      	ldr	r3, [r4, #0]
 8019f30:	68e5      	ldr	r5, [r4, #12]
 8019f32:	6832      	ldr	r2, [r6, #0]
 8019f34:	f003 0306 	and.w	r3, r3, #6
 8019f38:	2b04      	cmp	r3, #4
 8019f3a:	bf08      	it	eq
 8019f3c:	1aad      	subeq	r5, r5, r2
 8019f3e:	68a3      	ldr	r3, [r4, #8]
 8019f40:	6922      	ldr	r2, [r4, #16]
 8019f42:	bf0c      	ite	eq
 8019f44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019f48:	2500      	movne	r5, #0
 8019f4a:	4293      	cmp	r3, r2
 8019f4c:	bfc4      	itt	gt
 8019f4e:	1a9b      	subgt	r3, r3, r2
 8019f50:	18ed      	addgt	r5, r5, r3
 8019f52:	2600      	movs	r6, #0
 8019f54:	341a      	adds	r4, #26
 8019f56:	42b5      	cmp	r5, r6
 8019f58:	d11a      	bne.n	8019f90 <_printf_common+0xc8>
 8019f5a:	2000      	movs	r0, #0
 8019f5c:	e008      	b.n	8019f70 <_printf_common+0xa8>
 8019f5e:	2301      	movs	r3, #1
 8019f60:	4652      	mov	r2, sl
 8019f62:	4649      	mov	r1, r9
 8019f64:	4638      	mov	r0, r7
 8019f66:	47c0      	blx	r8
 8019f68:	3001      	adds	r0, #1
 8019f6a:	d103      	bne.n	8019f74 <_printf_common+0xac>
 8019f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8019f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f74:	3501      	adds	r5, #1
 8019f76:	e7c6      	b.n	8019f06 <_printf_common+0x3e>
 8019f78:	18e1      	adds	r1, r4, r3
 8019f7a:	1c5a      	adds	r2, r3, #1
 8019f7c:	2030      	movs	r0, #48	; 0x30
 8019f7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019f82:	4422      	add	r2, r4
 8019f84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019f88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019f8c:	3302      	adds	r3, #2
 8019f8e:	e7c7      	b.n	8019f20 <_printf_common+0x58>
 8019f90:	2301      	movs	r3, #1
 8019f92:	4622      	mov	r2, r4
 8019f94:	4649      	mov	r1, r9
 8019f96:	4638      	mov	r0, r7
 8019f98:	47c0      	blx	r8
 8019f9a:	3001      	adds	r0, #1
 8019f9c:	d0e6      	beq.n	8019f6c <_printf_common+0xa4>
 8019f9e:	3601      	adds	r6, #1
 8019fa0:	e7d9      	b.n	8019f56 <_printf_common+0x8e>
	...

08019fa4 <_printf_i>:
 8019fa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019fa8:	7e0f      	ldrb	r7, [r1, #24]
 8019faa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019fac:	2f78      	cmp	r7, #120	; 0x78
 8019fae:	4691      	mov	r9, r2
 8019fb0:	4680      	mov	r8, r0
 8019fb2:	460c      	mov	r4, r1
 8019fb4:	469a      	mov	sl, r3
 8019fb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019fba:	d807      	bhi.n	8019fcc <_printf_i+0x28>
 8019fbc:	2f62      	cmp	r7, #98	; 0x62
 8019fbe:	d80a      	bhi.n	8019fd6 <_printf_i+0x32>
 8019fc0:	2f00      	cmp	r7, #0
 8019fc2:	f000 80d8 	beq.w	801a176 <_printf_i+0x1d2>
 8019fc6:	2f58      	cmp	r7, #88	; 0x58
 8019fc8:	f000 80a3 	beq.w	801a112 <_printf_i+0x16e>
 8019fcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019fd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019fd4:	e03a      	b.n	801a04c <_printf_i+0xa8>
 8019fd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019fda:	2b15      	cmp	r3, #21
 8019fdc:	d8f6      	bhi.n	8019fcc <_printf_i+0x28>
 8019fde:	a101      	add	r1, pc, #4	; (adr r1, 8019fe4 <_printf_i+0x40>)
 8019fe0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019fe4:	0801a03d 	.word	0x0801a03d
 8019fe8:	0801a051 	.word	0x0801a051
 8019fec:	08019fcd 	.word	0x08019fcd
 8019ff0:	08019fcd 	.word	0x08019fcd
 8019ff4:	08019fcd 	.word	0x08019fcd
 8019ff8:	08019fcd 	.word	0x08019fcd
 8019ffc:	0801a051 	.word	0x0801a051
 801a000:	08019fcd 	.word	0x08019fcd
 801a004:	08019fcd 	.word	0x08019fcd
 801a008:	08019fcd 	.word	0x08019fcd
 801a00c:	08019fcd 	.word	0x08019fcd
 801a010:	0801a15d 	.word	0x0801a15d
 801a014:	0801a081 	.word	0x0801a081
 801a018:	0801a13f 	.word	0x0801a13f
 801a01c:	08019fcd 	.word	0x08019fcd
 801a020:	08019fcd 	.word	0x08019fcd
 801a024:	0801a17f 	.word	0x0801a17f
 801a028:	08019fcd 	.word	0x08019fcd
 801a02c:	0801a081 	.word	0x0801a081
 801a030:	08019fcd 	.word	0x08019fcd
 801a034:	08019fcd 	.word	0x08019fcd
 801a038:	0801a147 	.word	0x0801a147
 801a03c:	682b      	ldr	r3, [r5, #0]
 801a03e:	1d1a      	adds	r2, r3, #4
 801a040:	681b      	ldr	r3, [r3, #0]
 801a042:	602a      	str	r2, [r5, #0]
 801a044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a048:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a04c:	2301      	movs	r3, #1
 801a04e:	e0a3      	b.n	801a198 <_printf_i+0x1f4>
 801a050:	6820      	ldr	r0, [r4, #0]
 801a052:	6829      	ldr	r1, [r5, #0]
 801a054:	0606      	lsls	r6, r0, #24
 801a056:	f101 0304 	add.w	r3, r1, #4
 801a05a:	d50a      	bpl.n	801a072 <_printf_i+0xce>
 801a05c:	680e      	ldr	r6, [r1, #0]
 801a05e:	602b      	str	r3, [r5, #0]
 801a060:	2e00      	cmp	r6, #0
 801a062:	da03      	bge.n	801a06c <_printf_i+0xc8>
 801a064:	232d      	movs	r3, #45	; 0x2d
 801a066:	4276      	negs	r6, r6
 801a068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a06c:	485e      	ldr	r0, [pc, #376]	; (801a1e8 <_printf_i+0x244>)
 801a06e:	230a      	movs	r3, #10
 801a070:	e019      	b.n	801a0a6 <_printf_i+0x102>
 801a072:	680e      	ldr	r6, [r1, #0]
 801a074:	602b      	str	r3, [r5, #0]
 801a076:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a07a:	bf18      	it	ne
 801a07c:	b236      	sxthne	r6, r6
 801a07e:	e7ef      	b.n	801a060 <_printf_i+0xbc>
 801a080:	682b      	ldr	r3, [r5, #0]
 801a082:	6820      	ldr	r0, [r4, #0]
 801a084:	1d19      	adds	r1, r3, #4
 801a086:	6029      	str	r1, [r5, #0]
 801a088:	0601      	lsls	r1, r0, #24
 801a08a:	d501      	bpl.n	801a090 <_printf_i+0xec>
 801a08c:	681e      	ldr	r6, [r3, #0]
 801a08e:	e002      	b.n	801a096 <_printf_i+0xf2>
 801a090:	0646      	lsls	r6, r0, #25
 801a092:	d5fb      	bpl.n	801a08c <_printf_i+0xe8>
 801a094:	881e      	ldrh	r6, [r3, #0]
 801a096:	4854      	ldr	r0, [pc, #336]	; (801a1e8 <_printf_i+0x244>)
 801a098:	2f6f      	cmp	r7, #111	; 0x6f
 801a09a:	bf0c      	ite	eq
 801a09c:	2308      	moveq	r3, #8
 801a09e:	230a      	movne	r3, #10
 801a0a0:	2100      	movs	r1, #0
 801a0a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a0a6:	6865      	ldr	r5, [r4, #4]
 801a0a8:	60a5      	str	r5, [r4, #8]
 801a0aa:	2d00      	cmp	r5, #0
 801a0ac:	bfa2      	ittt	ge
 801a0ae:	6821      	ldrge	r1, [r4, #0]
 801a0b0:	f021 0104 	bicge.w	r1, r1, #4
 801a0b4:	6021      	strge	r1, [r4, #0]
 801a0b6:	b90e      	cbnz	r6, 801a0bc <_printf_i+0x118>
 801a0b8:	2d00      	cmp	r5, #0
 801a0ba:	d04d      	beq.n	801a158 <_printf_i+0x1b4>
 801a0bc:	4615      	mov	r5, r2
 801a0be:	fbb6 f1f3 	udiv	r1, r6, r3
 801a0c2:	fb03 6711 	mls	r7, r3, r1, r6
 801a0c6:	5dc7      	ldrb	r7, [r0, r7]
 801a0c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a0cc:	4637      	mov	r7, r6
 801a0ce:	42bb      	cmp	r3, r7
 801a0d0:	460e      	mov	r6, r1
 801a0d2:	d9f4      	bls.n	801a0be <_printf_i+0x11a>
 801a0d4:	2b08      	cmp	r3, #8
 801a0d6:	d10b      	bne.n	801a0f0 <_printf_i+0x14c>
 801a0d8:	6823      	ldr	r3, [r4, #0]
 801a0da:	07de      	lsls	r6, r3, #31
 801a0dc:	d508      	bpl.n	801a0f0 <_printf_i+0x14c>
 801a0de:	6923      	ldr	r3, [r4, #16]
 801a0e0:	6861      	ldr	r1, [r4, #4]
 801a0e2:	4299      	cmp	r1, r3
 801a0e4:	bfde      	ittt	le
 801a0e6:	2330      	movle	r3, #48	; 0x30
 801a0e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a0ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a0f0:	1b52      	subs	r2, r2, r5
 801a0f2:	6122      	str	r2, [r4, #16]
 801a0f4:	f8cd a000 	str.w	sl, [sp]
 801a0f8:	464b      	mov	r3, r9
 801a0fa:	aa03      	add	r2, sp, #12
 801a0fc:	4621      	mov	r1, r4
 801a0fe:	4640      	mov	r0, r8
 801a100:	f7ff fee2 	bl	8019ec8 <_printf_common>
 801a104:	3001      	adds	r0, #1
 801a106:	d14c      	bne.n	801a1a2 <_printf_i+0x1fe>
 801a108:	f04f 30ff 	mov.w	r0, #4294967295
 801a10c:	b004      	add	sp, #16
 801a10e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a112:	4835      	ldr	r0, [pc, #212]	; (801a1e8 <_printf_i+0x244>)
 801a114:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a118:	6829      	ldr	r1, [r5, #0]
 801a11a:	6823      	ldr	r3, [r4, #0]
 801a11c:	f851 6b04 	ldr.w	r6, [r1], #4
 801a120:	6029      	str	r1, [r5, #0]
 801a122:	061d      	lsls	r5, r3, #24
 801a124:	d514      	bpl.n	801a150 <_printf_i+0x1ac>
 801a126:	07df      	lsls	r7, r3, #31
 801a128:	bf44      	itt	mi
 801a12a:	f043 0320 	orrmi.w	r3, r3, #32
 801a12e:	6023      	strmi	r3, [r4, #0]
 801a130:	b91e      	cbnz	r6, 801a13a <_printf_i+0x196>
 801a132:	6823      	ldr	r3, [r4, #0]
 801a134:	f023 0320 	bic.w	r3, r3, #32
 801a138:	6023      	str	r3, [r4, #0]
 801a13a:	2310      	movs	r3, #16
 801a13c:	e7b0      	b.n	801a0a0 <_printf_i+0xfc>
 801a13e:	6823      	ldr	r3, [r4, #0]
 801a140:	f043 0320 	orr.w	r3, r3, #32
 801a144:	6023      	str	r3, [r4, #0]
 801a146:	2378      	movs	r3, #120	; 0x78
 801a148:	4828      	ldr	r0, [pc, #160]	; (801a1ec <_printf_i+0x248>)
 801a14a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a14e:	e7e3      	b.n	801a118 <_printf_i+0x174>
 801a150:	0659      	lsls	r1, r3, #25
 801a152:	bf48      	it	mi
 801a154:	b2b6      	uxthmi	r6, r6
 801a156:	e7e6      	b.n	801a126 <_printf_i+0x182>
 801a158:	4615      	mov	r5, r2
 801a15a:	e7bb      	b.n	801a0d4 <_printf_i+0x130>
 801a15c:	682b      	ldr	r3, [r5, #0]
 801a15e:	6826      	ldr	r6, [r4, #0]
 801a160:	6961      	ldr	r1, [r4, #20]
 801a162:	1d18      	adds	r0, r3, #4
 801a164:	6028      	str	r0, [r5, #0]
 801a166:	0635      	lsls	r5, r6, #24
 801a168:	681b      	ldr	r3, [r3, #0]
 801a16a:	d501      	bpl.n	801a170 <_printf_i+0x1cc>
 801a16c:	6019      	str	r1, [r3, #0]
 801a16e:	e002      	b.n	801a176 <_printf_i+0x1d2>
 801a170:	0670      	lsls	r0, r6, #25
 801a172:	d5fb      	bpl.n	801a16c <_printf_i+0x1c8>
 801a174:	8019      	strh	r1, [r3, #0]
 801a176:	2300      	movs	r3, #0
 801a178:	6123      	str	r3, [r4, #16]
 801a17a:	4615      	mov	r5, r2
 801a17c:	e7ba      	b.n	801a0f4 <_printf_i+0x150>
 801a17e:	682b      	ldr	r3, [r5, #0]
 801a180:	1d1a      	adds	r2, r3, #4
 801a182:	602a      	str	r2, [r5, #0]
 801a184:	681d      	ldr	r5, [r3, #0]
 801a186:	6862      	ldr	r2, [r4, #4]
 801a188:	2100      	movs	r1, #0
 801a18a:	4628      	mov	r0, r5
 801a18c:	f7e6 f840 	bl	8000210 <memchr>
 801a190:	b108      	cbz	r0, 801a196 <_printf_i+0x1f2>
 801a192:	1b40      	subs	r0, r0, r5
 801a194:	6060      	str	r0, [r4, #4]
 801a196:	6863      	ldr	r3, [r4, #4]
 801a198:	6123      	str	r3, [r4, #16]
 801a19a:	2300      	movs	r3, #0
 801a19c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a1a0:	e7a8      	b.n	801a0f4 <_printf_i+0x150>
 801a1a2:	6923      	ldr	r3, [r4, #16]
 801a1a4:	462a      	mov	r2, r5
 801a1a6:	4649      	mov	r1, r9
 801a1a8:	4640      	mov	r0, r8
 801a1aa:	47d0      	blx	sl
 801a1ac:	3001      	adds	r0, #1
 801a1ae:	d0ab      	beq.n	801a108 <_printf_i+0x164>
 801a1b0:	6823      	ldr	r3, [r4, #0]
 801a1b2:	079b      	lsls	r3, r3, #30
 801a1b4:	d413      	bmi.n	801a1de <_printf_i+0x23a>
 801a1b6:	68e0      	ldr	r0, [r4, #12]
 801a1b8:	9b03      	ldr	r3, [sp, #12]
 801a1ba:	4298      	cmp	r0, r3
 801a1bc:	bfb8      	it	lt
 801a1be:	4618      	movlt	r0, r3
 801a1c0:	e7a4      	b.n	801a10c <_printf_i+0x168>
 801a1c2:	2301      	movs	r3, #1
 801a1c4:	4632      	mov	r2, r6
 801a1c6:	4649      	mov	r1, r9
 801a1c8:	4640      	mov	r0, r8
 801a1ca:	47d0      	blx	sl
 801a1cc:	3001      	adds	r0, #1
 801a1ce:	d09b      	beq.n	801a108 <_printf_i+0x164>
 801a1d0:	3501      	adds	r5, #1
 801a1d2:	68e3      	ldr	r3, [r4, #12]
 801a1d4:	9903      	ldr	r1, [sp, #12]
 801a1d6:	1a5b      	subs	r3, r3, r1
 801a1d8:	42ab      	cmp	r3, r5
 801a1da:	dcf2      	bgt.n	801a1c2 <_printf_i+0x21e>
 801a1dc:	e7eb      	b.n	801a1b6 <_printf_i+0x212>
 801a1de:	2500      	movs	r5, #0
 801a1e0:	f104 0619 	add.w	r6, r4, #25
 801a1e4:	e7f5      	b.n	801a1d2 <_printf_i+0x22e>
 801a1e6:	bf00      	nop
 801a1e8:	080200be 	.word	0x080200be
 801a1ec:	080200cf 	.word	0x080200cf

0801a1f0 <_scanf_float>:
 801a1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1f4:	b087      	sub	sp, #28
 801a1f6:	4617      	mov	r7, r2
 801a1f8:	9303      	str	r3, [sp, #12]
 801a1fa:	688b      	ldr	r3, [r1, #8]
 801a1fc:	1e5a      	subs	r2, r3, #1
 801a1fe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a202:	bf83      	ittte	hi
 801a204:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a208:	195b      	addhi	r3, r3, r5
 801a20a:	9302      	strhi	r3, [sp, #8]
 801a20c:	2300      	movls	r3, #0
 801a20e:	bf86      	itte	hi
 801a210:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a214:	608b      	strhi	r3, [r1, #8]
 801a216:	9302      	strls	r3, [sp, #8]
 801a218:	680b      	ldr	r3, [r1, #0]
 801a21a:	468b      	mov	fp, r1
 801a21c:	2500      	movs	r5, #0
 801a21e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801a222:	f84b 3b1c 	str.w	r3, [fp], #28
 801a226:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a22a:	4680      	mov	r8, r0
 801a22c:	460c      	mov	r4, r1
 801a22e:	465e      	mov	r6, fp
 801a230:	46aa      	mov	sl, r5
 801a232:	46a9      	mov	r9, r5
 801a234:	9501      	str	r5, [sp, #4]
 801a236:	68a2      	ldr	r2, [r4, #8]
 801a238:	b152      	cbz	r2, 801a250 <_scanf_float+0x60>
 801a23a:	683b      	ldr	r3, [r7, #0]
 801a23c:	781b      	ldrb	r3, [r3, #0]
 801a23e:	2b4e      	cmp	r3, #78	; 0x4e
 801a240:	d864      	bhi.n	801a30c <_scanf_float+0x11c>
 801a242:	2b40      	cmp	r3, #64	; 0x40
 801a244:	d83c      	bhi.n	801a2c0 <_scanf_float+0xd0>
 801a246:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801a24a:	b2c8      	uxtb	r0, r1
 801a24c:	280e      	cmp	r0, #14
 801a24e:	d93a      	bls.n	801a2c6 <_scanf_float+0xd6>
 801a250:	f1b9 0f00 	cmp.w	r9, #0
 801a254:	d003      	beq.n	801a25e <_scanf_float+0x6e>
 801a256:	6823      	ldr	r3, [r4, #0]
 801a258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a25c:	6023      	str	r3, [r4, #0]
 801a25e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a262:	f1ba 0f01 	cmp.w	sl, #1
 801a266:	f200 8113 	bhi.w	801a490 <_scanf_float+0x2a0>
 801a26a:	455e      	cmp	r6, fp
 801a26c:	f200 8105 	bhi.w	801a47a <_scanf_float+0x28a>
 801a270:	2501      	movs	r5, #1
 801a272:	4628      	mov	r0, r5
 801a274:	b007      	add	sp, #28
 801a276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a27a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801a27e:	2a0d      	cmp	r2, #13
 801a280:	d8e6      	bhi.n	801a250 <_scanf_float+0x60>
 801a282:	a101      	add	r1, pc, #4	; (adr r1, 801a288 <_scanf_float+0x98>)
 801a284:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801a288:	0801a3c7 	.word	0x0801a3c7
 801a28c:	0801a251 	.word	0x0801a251
 801a290:	0801a251 	.word	0x0801a251
 801a294:	0801a251 	.word	0x0801a251
 801a298:	0801a427 	.word	0x0801a427
 801a29c:	0801a3ff 	.word	0x0801a3ff
 801a2a0:	0801a251 	.word	0x0801a251
 801a2a4:	0801a251 	.word	0x0801a251
 801a2a8:	0801a3d5 	.word	0x0801a3d5
 801a2ac:	0801a251 	.word	0x0801a251
 801a2b0:	0801a251 	.word	0x0801a251
 801a2b4:	0801a251 	.word	0x0801a251
 801a2b8:	0801a251 	.word	0x0801a251
 801a2bc:	0801a38d 	.word	0x0801a38d
 801a2c0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801a2c4:	e7db      	b.n	801a27e <_scanf_float+0x8e>
 801a2c6:	290e      	cmp	r1, #14
 801a2c8:	d8c2      	bhi.n	801a250 <_scanf_float+0x60>
 801a2ca:	a001      	add	r0, pc, #4	; (adr r0, 801a2d0 <_scanf_float+0xe0>)
 801a2cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801a2d0:	0801a37f 	.word	0x0801a37f
 801a2d4:	0801a251 	.word	0x0801a251
 801a2d8:	0801a37f 	.word	0x0801a37f
 801a2dc:	0801a413 	.word	0x0801a413
 801a2e0:	0801a251 	.word	0x0801a251
 801a2e4:	0801a32d 	.word	0x0801a32d
 801a2e8:	0801a369 	.word	0x0801a369
 801a2ec:	0801a369 	.word	0x0801a369
 801a2f0:	0801a369 	.word	0x0801a369
 801a2f4:	0801a369 	.word	0x0801a369
 801a2f8:	0801a369 	.word	0x0801a369
 801a2fc:	0801a369 	.word	0x0801a369
 801a300:	0801a369 	.word	0x0801a369
 801a304:	0801a369 	.word	0x0801a369
 801a308:	0801a369 	.word	0x0801a369
 801a30c:	2b6e      	cmp	r3, #110	; 0x6e
 801a30e:	d809      	bhi.n	801a324 <_scanf_float+0x134>
 801a310:	2b60      	cmp	r3, #96	; 0x60
 801a312:	d8b2      	bhi.n	801a27a <_scanf_float+0x8a>
 801a314:	2b54      	cmp	r3, #84	; 0x54
 801a316:	d077      	beq.n	801a408 <_scanf_float+0x218>
 801a318:	2b59      	cmp	r3, #89	; 0x59
 801a31a:	d199      	bne.n	801a250 <_scanf_float+0x60>
 801a31c:	2d07      	cmp	r5, #7
 801a31e:	d197      	bne.n	801a250 <_scanf_float+0x60>
 801a320:	2508      	movs	r5, #8
 801a322:	e029      	b.n	801a378 <_scanf_float+0x188>
 801a324:	2b74      	cmp	r3, #116	; 0x74
 801a326:	d06f      	beq.n	801a408 <_scanf_float+0x218>
 801a328:	2b79      	cmp	r3, #121	; 0x79
 801a32a:	e7f6      	b.n	801a31a <_scanf_float+0x12a>
 801a32c:	6821      	ldr	r1, [r4, #0]
 801a32e:	05c8      	lsls	r0, r1, #23
 801a330:	d51a      	bpl.n	801a368 <_scanf_float+0x178>
 801a332:	9b02      	ldr	r3, [sp, #8]
 801a334:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801a338:	6021      	str	r1, [r4, #0]
 801a33a:	f109 0901 	add.w	r9, r9, #1
 801a33e:	b11b      	cbz	r3, 801a348 <_scanf_float+0x158>
 801a340:	3b01      	subs	r3, #1
 801a342:	3201      	adds	r2, #1
 801a344:	9302      	str	r3, [sp, #8]
 801a346:	60a2      	str	r2, [r4, #8]
 801a348:	68a3      	ldr	r3, [r4, #8]
 801a34a:	3b01      	subs	r3, #1
 801a34c:	60a3      	str	r3, [r4, #8]
 801a34e:	6923      	ldr	r3, [r4, #16]
 801a350:	3301      	adds	r3, #1
 801a352:	6123      	str	r3, [r4, #16]
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	3b01      	subs	r3, #1
 801a358:	2b00      	cmp	r3, #0
 801a35a:	607b      	str	r3, [r7, #4]
 801a35c:	f340 8084 	ble.w	801a468 <_scanf_float+0x278>
 801a360:	683b      	ldr	r3, [r7, #0]
 801a362:	3301      	adds	r3, #1
 801a364:	603b      	str	r3, [r7, #0]
 801a366:	e766      	b.n	801a236 <_scanf_float+0x46>
 801a368:	eb1a 0f05 	cmn.w	sl, r5
 801a36c:	f47f af70 	bne.w	801a250 <_scanf_float+0x60>
 801a370:	6822      	ldr	r2, [r4, #0]
 801a372:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801a376:	6022      	str	r2, [r4, #0]
 801a378:	f806 3b01 	strb.w	r3, [r6], #1
 801a37c:	e7e4      	b.n	801a348 <_scanf_float+0x158>
 801a37e:	6822      	ldr	r2, [r4, #0]
 801a380:	0610      	lsls	r0, r2, #24
 801a382:	f57f af65 	bpl.w	801a250 <_scanf_float+0x60>
 801a386:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801a38a:	e7f4      	b.n	801a376 <_scanf_float+0x186>
 801a38c:	f1ba 0f00 	cmp.w	sl, #0
 801a390:	d10e      	bne.n	801a3b0 <_scanf_float+0x1c0>
 801a392:	f1b9 0f00 	cmp.w	r9, #0
 801a396:	d10e      	bne.n	801a3b6 <_scanf_float+0x1c6>
 801a398:	6822      	ldr	r2, [r4, #0]
 801a39a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a39e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a3a2:	d108      	bne.n	801a3b6 <_scanf_float+0x1c6>
 801a3a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a3a8:	6022      	str	r2, [r4, #0]
 801a3aa:	f04f 0a01 	mov.w	sl, #1
 801a3ae:	e7e3      	b.n	801a378 <_scanf_float+0x188>
 801a3b0:	f1ba 0f02 	cmp.w	sl, #2
 801a3b4:	d055      	beq.n	801a462 <_scanf_float+0x272>
 801a3b6:	2d01      	cmp	r5, #1
 801a3b8:	d002      	beq.n	801a3c0 <_scanf_float+0x1d0>
 801a3ba:	2d04      	cmp	r5, #4
 801a3bc:	f47f af48 	bne.w	801a250 <_scanf_float+0x60>
 801a3c0:	3501      	adds	r5, #1
 801a3c2:	b2ed      	uxtb	r5, r5
 801a3c4:	e7d8      	b.n	801a378 <_scanf_float+0x188>
 801a3c6:	f1ba 0f01 	cmp.w	sl, #1
 801a3ca:	f47f af41 	bne.w	801a250 <_scanf_float+0x60>
 801a3ce:	f04f 0a02 	mov.w	sl, #2
 801a3d2:	e7d1      	b.n	801a378 <_scanf_float+0x188>
 801a3d4:	b97d      	cbnz	r5, 801a3f6 <_scanf_float+0x206>
 801a3d6:	f1b9 0f00 	cmp.w	r9, #0
 801a3da:	f47f af3c 	bne.w	801a256 <_scanf_float+0x66>
 801a3de:	6822      	ldr	r2, [r4, #0]
 801a3e0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a3e4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a3e8:	f47f af39 	bne.w	801a25e <_scanf_float+0x6e>
 801a3ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a3f0:	6022      	str	r2, [r4, #0]
 801a3f2:	2501      	movs	r5, #1
 801a3f4:	e7c0      	b.n	801a378 <_scanf_float+0x188>
 801a3f6:	2d03      	cmp	r5, #3
 801a3f8:	d0e2      	beq.n	801a3c0 <_scanf_float+0x1d0>
 801a3fa:	2d05      	cmp	r5, #5
 801a3fc:	e7de      	b.n	801a3bc <_scanf_float+0x1cc>
 801a3fe:	2d02      	cmp	r5, #2
 801a400:	f47f af26 	bne.w	801a250 <_scanf_float+0x60>
 801a404:	2503      	movs	r5, #3
 801a406:	e7b7      	b.n	801a378 <_scanf_float+0x188>
 801a408:	2d06      	cmp	r5, #6
 801a40a:	f47f af21 	bne.w	801a250 <_scanf_float+0x60>
 801a40e:	2507      	movs	r5, #7
 801a410:	e7b2      	b.n	801a378 <_scanf_float+0x188>
 801a412:	6822      	ldr	r2, [r4, #0]
 801a414:	0591      	lsls	r1, r2, #22
 801a416:	f57f af1b 	bpl.w	801a250 <_scanf_float+0x60>
 801a41a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801a41e:	6022      	str	r2, [r4, #0]
 801a420:	f8cd 9004 	str.w	r9, [sp, #4]
 801a424:	e7a8      	b.n	801a378 <_scanf_float+0x188>
 801a426:	6822      	ldr	r2, [r4, #0]
 801a428:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801a42c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801a430:	d006      	beq.n	801a440 <_scanf_float+0x250>
 801a432:	0550      	lsls	r0, r2, #21
 801a434:	f57f af0c 	bpl.w	801a250 <_scanf_float+0x60>
 801a438:	f1b9 0f00 	cmp.w	r9, #0
 801a43c:	f43f af0f 	beq.w	801a25e <_scanf_float+0x6e>
 801a440:	0591      	lsls	r1, r2, #22
 801a442:	bf58      	it	pl
 801a444:	9901      	ldrpl	r1, [sp, #4]
 801a446:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a44a:	bf58      	it	pl
 801a44c:	eba9 0101 	subpl.w	r1, r9, r1
 801a450:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801a454:	bf58      	it	pl
 801a456:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801a45a:	6022      	str	r2, [r4, #0]
 801a45c:	f04f 0900 	mov.w	r9, #0
 801a460:	e78a      	b.n	801a378 <_scanf_float+0x188>
 801a462:	f04f 0a03 	mov.w	sl, #3
 801a466:	e787      	b.n	801a378 <_scanf_float+0x188>
 801a468:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a46c:	4639      	mov	r1, r7
 801a46e:	4640      	mov	r0, r8
 801a470:	4798      	blx	r3
 801a472:	2800      	cmp	r0, #0
 801a474:	f43f aedf 	beq.w	801a236 <_scanf_float+0x46>
 801a478:	e6ea      	b.n	801a250 <_scanf_float+0x60>
 801a47a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a47e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a482:	463a      	mov	r2, r7
 801a484:	4640      	mov	r0, r8
 801a486:	4798      	blx	r3
 801a488:	6923      	ldr	r3, [r4, #16]
 801a48a:	3b01      	subs	r3, #1
 801a48c:	6123      	str	r3, [r4, #16]
 801a48e:	e6ec      	b.n	801a26a <_scanf_float+0x7a>
 801a490:	1e6b      	subs	r3, r5, #1
 801a492:	2b06      	cmp	r3, #6
 801a494:	d825      	bhi.n	801a4e2 <_scanf_float+0x2f2>
 801a496:	2d02      	cmp	r5, #2
 801a498:	d836      	bhi.n	801a508 <_scanf_float+0x318>
 801a49a:	455e      	cmp	r6, fp
 801a49c:	f67f aee8 	bls.w	801a270 <_scanf_float+0x80>
 801a4a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a4a4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a4a8:	463a      	mov	r2, r7
 801a4aa:	4640      	mov	r0, r8
 801a4ac:	4798      	blx	r3
 801a4ae:	6923      	ldr	r3, [r4, #16]
 801a4b0:	3b01      	subs	r3, #1
 801a4b2:	6123      	str	r3, [r4, #16]
 801a4b4:	e7f1      	b.n	801a49a <_scanf_float+0x2aa>
 801a4b6:	9802      	ldr	r0, [sp, #8]
 801a4b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a4bc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801a4c0:	9002      	str	r0, [sp, #8]
 801a4c2:	463a      	mov	r2, r7
 801a4c4:	4640      	mov	r0, r8
 801a4c6:	4798      	blx	r3
 801a4c8:	6923      	ldr	r3, [r4, #16]
 801a4ca:	3b01      	subs	r3, #1
 801a4cc:	6123      	str	r3, [r4, #16]
 801a4ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a4d2:	fa5f fa8a 	uxtb.w	sl, sl
 801a4d6:	f1ba 0f02 	cmp.w	sl, #2
 801a4da:	d1ec      	bne.n	801a4b6 <_scanf_float+0x2c6>
 801a4dc:	3d03      	subs	r5, #3
 801a4de:	b2ed      	uxtb	r5, r5
 801a4e0:	1b76      	subs	r6, r6, r5
 801a4e2:	6823      	ldr	r3, [r4, #0]
 801a4e4:	05da      	lsls	r2, r3, #23
 801a4e6:	d52f      	bpl.n	801a548 <_scanf_float+0x358>
 801a4e8:	055b      	lsls	r3, r3, #21
 801a4ea:	d510      	bpl.n	801a50e <_scanf_float+0x31e>
 801a4ec:	455e      	cmp	r6, fp
 801a4ee:	f67f aebf 	bls.w	801a270 <_scanf_float+0x80>
 801a4f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a4f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a4fa:	463a      	mov	r2, r7
 801a4fc:	4640      	mov	r0, r8
 801a4fe:	4798      	blx	r3
 801a500:	6923      	ldr	r3, [r4, #16]
 801a502:	3b01      	subs	r3, #1
 801a504:	6123      	str	r3, [r4, #16]
 801a506:	e7f1      	b.n	801a4ec <_scanf_float+0x2fc>
 801a508:	46aa      	mov	sl, r5
 801a50a:	9602      	str	r6, [sp, #8]
 801a50c:	e7df      	b.n	801a4ce <_scanf_float+0x2de>
 801a50e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801a512:	6923      	ldr	r3, [r4, #16]
 801a514:	2965      	cmp	r1, #101	; 0x65
 801a516:	f103 33ff 	add.w	r3, r3, #4294967295
 801a51a:	f106 35ff 	add.w	r5, r6, #4294967295
 801a51e:	6123      	str	r3, [r4, #16]
 801a520:	d00c      	beq.n	801a53c <_scanf_float+0x34c>
 801a522:	2945      	cmp	r1, #69	; 0x45
 801a524:	d00a      	beq.n	801a53c <_scanf_float+0x34c>
 801a526:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a52a:	463a      	mov	r2, r7
 801a52c:	4640      	mov	r0, r8
 801a52e:	4798      	blx	r3
 801a530:	6923      	ldr	r3, [r4, #16]
 801a532:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801a536:	3b01      	subs	r3, #1
 801a538:	1eb5      	subs	r5, r6, #2
 801a53a:	6123      	str	r3, [r4, #16]
 801a53c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a540:	463a      	mov	r2, r7
 801a542:	4640      	mov	r0, r8
 801a544:	4798      	blx	r3
 801a546:	462e      	mov	r6, r5
 801a548:	6825      	ldr	r5, [r4, #0]
 801a54a:	f015 0510 	ands.w	r5, r5, #16
 801a54e:	d159      	bne.n	801a604 <_scanf_float+0x414>
 801a550:	7035      	strb	r5, [r6, #0]
 801a552:	6823      	ldr	r3, [r4, #0]
 801a554:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801a558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a55c:	d11b      	bne.n	801a596 <_scanf_float+0x3a6>
 801a55e:	9b01      	ldr	r3, [sp, #4]
 801a560:	454b      	cmp	r3, r9
 801a562:	eba3 0209 	sub.w	r2, r3, r9
 801a566:	d123      	bne.n	801a5b0 <_scanf_float+0x3c0>
 801a568:	2200      	movs	r2, #0
 801a56a:	4659      	mov	r1, fp
 801a56c:	4640      	mov	r0, r8
 801a56e:	f000 ff61 	bl	801b434 <_strtod_r>
 801a572:	6822      	ldr	r2, [r4, #0]
 801a574:	9b03      	ldr	r3, [sp, #12]
 801a576:	f012 0f02 	tst.w	r2, #2
 801a57a:	ec57 6b10 	vmov	r6, r7, d0
 801a57e:	681b      	ldr	r3, [r3, #0]
 801a580:	d021      	beq.n	801a5c6 <_scanf_float+0x3d6>
 801a582:	9903      	ldr	r1, [sp, #12]
 801a584:	1d1a      	adds	r2, r3, #4
 801a586:	600a      	str	r2, [r1, #0]
 801a588:	681b      	ldr	r3, [r3, #0]
 801a58a:	e9c3 6700 	strd	r6, r7, [r3]
 801a58e:	68e3      	ldr	r3, [r4, #12]
 801a590:	3301      	adds	r3, #1
 801a592:	60e3      	str	r3, [r4, #12]
 801a594:	e66d      	b.n	801a272 <_scanf_float+0x82>
 801a596:	9b04      	ldr	r3, [sp, #16]
 801a598:	2b00      	cmp	r3, #0
 801a59a:	d0e5      	beq.n	801a568 <_scanf_float+0x378>
 801a59c:	9905      	ldr	r1, [sp, #20]
 801a59e:	230a      	movs	r3, #10
 801a5a0:	462a      	mov	r2, r5
 801a5a2:	3101      	adds	r1, #1
 801a5a4:	4640      	mov	r0, r8
 801a5a6:	f001 f829 	bl	801b5fc <_strtol_r>
 801a5aa:	9b04      	ldr	r3, [sp, #16]
 801a5ac:	9e05      	ldr	r6, [sp, #20]
 801a5ae:	1ac2      	subs	r2, r0, r3
 801a5b0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801a5b4:	429e      	cmp	r6, r3
 801a5b6:	bf28      	it	cs
 801a5b8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801a5bc:	4912      	ldr	r1, [pc, #72]	; (801a608 <_scanf_float+0x418>)
 801a5be:	4630      	mov	r0, r6
 801a5c0:	f000 f8ca 	bl	801a758 <siprintf>
 801a5c4:	e7d0      	b.n	801a568 <_scanf_float+0x378>
 801a5c6:	9903      	ldr	r1, [sp, #12]
 801a5c8:	f012 0f04 	tst.w	r2, #4
 801a5cc:	f103 0204 	add.w	r2, r3, #4
 801a5d0:	600a      	str	r2, [r1, #0]
 801a5d2:	d1d9      	bne.n	801a588 <_scanf_float+0x398>
 801a5d4:	f8d3 8000 	ldr.w	r8, [r3]
 801a5d8:	ee10 2a10 	vmov	r2, s0
 801a5dc:	ee10 0a10 	vmov	r0, s0
 801a5e0:	463b      	mov	r3, r7
 801a5e2:	4639      	mov	r1, r7
 801a5e4:	f7e6 faba 	bl	8000b5c <__aeabi_dcmpun>
 801a5e8:	b128      	cbz	r0, 801a5f6 <_scanf_float+0x406>
 801a5ea:	4808      	ldr	r0, [pc, #32]	; (801a60c <_scanf_float+0x41c>)
 801a5ec:	f000 f8ae 	bl	801a74c <nanf>
 801a5f0:	ed88 0a00 	vstr	s0, [r8]
 801a5f4:	e7cb      	b.n	801a58e <_scanf_float+0x39e>
 801a5f6:	4630      	mov	r0, r6
 801a5f8:	4639      	mov	r1, r7
 801a5fa:	f7e6 fb0d 	bl	8000c18 <__aeabi_d2f>
 801a5fe:	f8c8 0000 	str.w	r0, [r8]
 801a602:	e7c4      	b.n	801a58e <_scanf_float+0x39e>
 801a604:	2500      	movs	r5, #0
 801a606:	e634      	b.n	801a272 <_scanf_float+0x82>
 801a608:	080200e0 	.word	0x080200e0
 801a60c:	080201e7 	.word	0x080201e7

0801a610 <iprintf>:
 801a610:	b40f      	push	{r0, r1, r2, r3}
 801a612:	4b0a      	ldr	r3, [pc, #40]	; (801a63c <iprintf+0x2c>)
 801a614:	b513      	push	{r0, r1, r4, lr}
 801a616:	681c      	ldr	r4, [r3, #0]
 801a618:	b124      	cbz	r4, 801a624 <iprintf+0x14>
 801a61a:	69a3      	ldr	r3, [r4, #24]
 801a61c:	b913      	cbnz	r3, 801a624 <iprintf+0x14>
 801a61e:	4620      	mov	r0, r4
 801a620:	f002 f8a6 	bl	801c770 <__sinit>
 801a624:	ab05      	add	r3, sp, #20
 801a626:	9a04      	ldr	r2, [sp, #16]
 801a628:	68a1      	ldr	r1, [r4, #8]
 801a62a:	9301      	str	r3, [sp, #4]
 801a62c:	4620      	mov	r0, r4
 801a62e:	f003 fba1 	bl	801dd74 <_vfiprintf_r>
 801a632:	b002      	add	sp, #8
 801a634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a638:	b004      	add	sp, #16
 801a63a:	4770      	bx	lr
 801a63c:	20000140 	.word	0x20000140

0801a640 <_puts_r>:
 801a640:	b570      	push	{r4, r5, r6, lr}
 801a642:	460e      	mov	r6, r1
 801a644:	4605      	mov	r5, r0
 801a646:	b118      	cbz	r0, 801a650 <_puts_r+0x10>
 801a648:	6983      	ldr	r3, [r0, #24]
 801a64a:	b90b      	cbnz	r3, 801a650 <_puts_r+0x10>
 801a64c:	f002 f890 	bl	801c770 <__sinit>
 801a650:	69ab      	ldr	r3, [r5, #24]
 801a652:	68ac      	ldr	r4, [r5, #8]
 801a654:	b913      	cbnz	r3, 801a65c <_puts_r+0x1c>
 801a656:	4628      	mov	r0, r5
 801a658:	f002 f88a 	bl	801c770 <__sinit>
 801a65c:	4b2c      	ldr	r3, [pc, #176]	; (801a710 <_puts_r+0xd0>)
 801a65e:	429c      	cmp	r4, r3
 801a660:	d120      	bne.n	801a6a4 <_puts_r+0x64>
 801a662:	686c      	ldr	r4, [r5, #4]
 801a664:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a666:	07db      	lsls	r3, r3, #31
 801a668:	d405      	bmi.n	801a676 <_puts_r+0x36>
 801a66a:	89a3      	ldrh	r3, [r4, #12]
 801a66c:	0598      	lsls	r0, r3, #22
 801a66e:	d402      	bmi.n	801a676 <_puts_r+0x36>
 801a670:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a672:	f7ff f830 	bl	80196d6 <__retarget_lock_acquire_recursive>
 801a676:	89a3      	ldrh	r3, [r4, #12]
 801a678:	0719      	lsls	r1, r3, #28
 801a67a:	d51d      	bpl.n	801a6b8 <_puts_r+0x78>
 801a67c:	6923      	ldr	r3, [r4, #16]
 801a67e:	b1db      	cbz	r3, 801a6b8 <_puts_r+0x78>
 801a680:	3e01      	subs	r6, #1
 801a682:	68a3      	ldr	r3, [r4, #8]
 801a684:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a688:	3b01      	subs	r3, #1
 801a68a:	60a3      	str	r3, [r4, #8]
 801a68c:	bb39      	cbnz	r1, 801a6de <_puts_r+0x9e>
 801a68e:	2b00      	cmp	r3, #0
 801a690:	da38      	bge.n	801a704 <_puts_r+0xc4>
 801a692:	4622      	mov	r2, r4
 801a694:	210a      	movs	r1, #10
 801a696:	4628      	mov	r0, r5
 801a698:	f000 fff6 	bl	801b688 <__swbuf_r>
 801a69c:	3001      	adds	r0, #1
 801a69e:	d011      	beq.n	801a6c4 <_puts_r+0x84>
 801a6a0:	250a      	movs	r5, #10
 801a6a2:	e011      	b.n	801a6c8 <_puts_r+0x88>
 801a6a4:	4b1b      	ldr	r3, [pc, #108]	; (801a714 <_puts_r+0xd4>)
 801a6a6:	429c      	cmp	r4, r3
 801a6a8:	d101      	bne.n	801a6ae <_puts_r+0x6e>
 801a6aa:	68ac      	ldr	r4, [r5, #8]
 801a6ac:	e7da      	b.n	801a664 <_puts_r+0x24>
 801a6ae:	4b1a      	ldr	r3, [pc, #104]	; (801a718 <_puts_r+0xd8>)
 801a6b0:	429c      	cmp	r4, r3
 801a6b2:	bf08      	it	eq
 801a6b4:	68ec      	ldreq	r4, [r5, #12]
 801a6b6:	e7d5      	b.n	801a664 <_puts_r+0x24>
 801a6b8:	4621      	mov	r1, r4
 801a6ba:	4628      	mov	r0, r5
 801a6bc:	f001 f836 	bl	801b72c <__swsetup_r>
 801a6c0:	2800      	cmp	r0, #0
 801a6c2:	d0dd      	beq.n	801a680 <_puts_r+0x40>
 801a6c4:	f04f 35ff 	mov.w	r5, #4294967295
 801a6c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a6ca:	07da      	lsls	r2, r3, #31
 801a6cc:	d405      	bmi.n	801a6da <_puts_r+0x9a>
 801a6ce:	89a3      	ldrh	r3, [r4, #12]
 801a6d0:	059b      	lsls	r3, r3, #22
 801a6d2:	d402      	bmi.n	801a6da <_puts_r+0x9a>
 801a6d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a6d6:	f7fe ffff 	bl	80196d8 <__retarget_lock_release_recursive>
 801a6da:	4628      	mov	r0, r5
 801a6dc:	bd70      	pop	{r4, r5, r6, pc}
 801a6de:	2b00      	cmp	r3, #0
 801a6e0:	da04      	bge.n	801a6ec <_puts_r+0xac>
 801a6e2:	69a2      	ldr	r2, [r4, #24]
 801a6e4:	429a      	cmp	r2, r3
 801a6e6:	dc06      	bgt.n	801a6f6 <_puts_r+0xb6>
 801a6e8:	290a      	cmp	r1, #10
 801a6ea:	d004      	beq.n	801a6f6 <_puts_r+0xb6>
 801a6ec:	6823      	ldr	r3, [r4, #0]
 801a6ee:	1c5a      	adds	r2, r3, #1
 801a6f0:	6022      	str	r2, [r4, #0]
 801a6f2:	7019      	strb	r1, [r3, #0]
 801a6f4:	e7c5      	b.n	801a682 <_puts_r+0x42>
 801a6f6:	4622      	mov	r2, r4
 801a6f8:	4628      	mov	r0, r5
 801a6fa:	f000 ffc5 	bl	801b688 <__swbuf_r>
 801a6fe:	3001      	adds	r0, #1
 801a700:	d1bf      	bne.n	801a682 <_puts_r+0x42>
 801a702:	e7df      	b.n	801a6c4 <_puts_r+0x84>
 801a704:	6823      	ldr	r3, [r4, #0]
 801a706:	250a      	movs	r5, #10
 801a708:	1c5a      	adds	r2, r3, #1
 801a70a:	6022      	str	r2, [r4, #0]
 801a70c:	701d      	strb	r5, [r3, #0]
 801a70e:	e7db      	b.n	801a6c8 <_puts_r+0x88>
 801a710:	08020384 	.word	0x08020384
 801a714:	080203a4 	.word	0x080203a4
 801a718:	08020364 	.word	0x08020364

0801a71c <puts>:
 801a71c:	4b02      	ldr	r3, [pc, #8]	; (801a728 <puts+0xc>)
 801a71e:	4601      	mov	r1, r0
 801a720:	6818      	ldr	r0, [r3, #0]
 801a722:	f7ff bf8d 	b.w	801a640 <_puts_r>
 801a726:	bf00      	nop
 801a728:	20000140 	.word	0x20000140

0801a72c <_sbrk_r>:
 801a72c:	b538      	push	{r3, r4, r5, lr}
 801a72e:	4d06      	ldr	r5, [pc, #24]	; (801a748 <_sbrk_r+0x1c>)
 801a730:	2300      	movs	r3, #0
 801a732:	4604      	mov	r4, r0
 801a734:	4608      	mov	r0, r1
 801a736:	602b      	str	r3, [r5, #0]
 801a738:	f7e8 f9c8 	bl	8002acc <_sbrk>
 801a73c:	1c43      	adds	r3, r0, #1
 801a73e:	d102      	bne.n	801a746 <_sbrk_r+0x1a>
 801a740:	682b      	ldr	r3, [r5, #0]
 801a742:	b103      	cbz	r3, 801a746 <_sbrk_r+0x1a>
 801a744:	6023      	str	r3, [r4, #0]
 801a746:	bd38      	pop	{r3, r4, r5, pc}
 801a748:	2000257c 	.word	0x2000257c

0801a74c <nanf>:
 801a74c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a754 <nanf+0x8>
 801a750:	4770      	bx	lr
 801a752:	bf00      	nop
 801a754:	7fc00000 	.word	0x7fc00000

0801a758 <siprintf>:
 801a758:	b40e      	push	{r1, r2, r3}
 801a75a:	b500      	push	{lr}
 801a75c:	b09c      	sub	sp, #112	; 0x70
 801a75e:	ab1d      	add	r3, sp, #116	; 0x74
 801a760:	9002      	str	r0, [sp, #8]
 801a762:	9006      	str	r0, [sp, #24]
 801a764:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a768:	4809      	ldr	r0, [pc, #36]	; (801a790 <siprintf+0x38>)
 801a76a:	9107      	str	r1, [sp, #28]
 801a76c:	9104      	str	r1, [sp, #16]
 801a76e:	4909      	ldr	r1, [pc, #36]	; (801a794 <siprintf+0x3c>)
 801a770:	f853 2b04 	ldr.w	r2, [r3], #4
 801a774:	9105      	str	r1, [sp, #20]
 801a776:	6800      	ldr	r0, [r0, #0]
 801a778:	9301      	str	r3, [sp, #4]
 801a77a:	a902      	add	r1, sp, #8
 801a77c:	f003 f9d0 	bl	801db20 <_svfiprintf_r>
 801a780:	9b02      	ldr	r3, [sp, #8]
 801a782:	2200      	movs	r2, #0
 801a784:	701a      	strb	r2, [r3, #0]
 801a786:	b01c      	add	sp, #112	; 0x70
 801a788:	f85d eb04 	ldr.w	lr, [sp], #4
 801a78c:	b003      	add	sp, #12
 801a78e:	4770      	bx	lr
 801a790:	20000140 	.word	0x20000140
 801a794:	ffff0208 	.word	0xffff0208

0801a798 <strchr>:
 801a798:	b2c9      	uxtb	r1, r1
 801a79a:	4603      	mov	r3, r0
 801a79c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a7a0:	b11a      	cbz	r2, 801a7aa <strchr+0x12>
 801a7a2:	428a      	cmp	r2, r1
 801a7a4:	d1f9      	bne.n	801a79a <strchr+0x2>
 801a7a6:	4618      	mov	r0, r3
 801a7a8:	4770      	bx	lr
 801a7aa:	2900      	cmp	r1, #0
 801a7ac:	bf18      	it	ne
 801a7ae:	2300      	movne	r3, #0
 801a7b0:	e7f9      	b.n	801a7a6 <strchr+0xe>

0801a7b2 <strcpy>:
 801a7b2:	4603      	mov	r3, r0
 801a7b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a7b8:	f803 2b01 	strb.w	r2, [r3], #1
 801a7bc:	2a00      	cmp	r2, #0
 801a7be:	d1f9      	bne.n	801a7b4 <strcpy+0x2>
 801a7c0:	4770      	bx	lr

0801a7c2 <strstr>:
 801a7c2:	780a      	ldrb	r2, [r1, #0]
 801a7c4:	b570      	push	{r4, r5, r6, lr}
 801a7c6:	b96a      	cbnz	r2, 801a7e4 <strstr+0x22>
 801a7c8:	bd70      	pop	{r4, r5, r6, pc}
 801a7ca:	429a      	cmp	r2, r3
 801a7cc:	d109      	bne.n	801a7e2 <strstr+0x20>
 801a7ce:	460c      	mov	r4, r1
 801a7d0:	4605      	mov	r5, r0
 801a7d2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801a7d6:	2b00      	cmp	r3, #0
 801a7d8:	d0f6      	beq.n	801a7c8 <strstr+0x6>
 801a7da:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801a7de:	429e      	cmp	r6, r3
 801a7e0:	d0f7      	beq.n	801a7d2 <strstr+0x10>
 801a7e2:	3001      	adds	r0, #1
 801a7e4:	7803      	ldrb	r3, [r0, #0]
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	d1ef      	bne.n	801a7ca <strstr+0x8>
 801a7ea:	4618      	mov	r0, r3
 801a7ec:	e7ec      	b.n	801a7c8 <strstr+0x6>

0801a7ee <sulp>:
 801a7ee:	b570      	push	{r4, r5, r6, lr}
 801a7f0:	4604      	mov	r4, r0
 801a7f2:	460d      	mov	r5, r1
 801a7f4:	ec45 4b10 	vmov	d0, r4, r5
 801a7f8:	4616      	mov	r6, r2
 801a7fa:	f002 ffd1 	bl	801d7a0 <__ulp>
 801a7fe:	ec51 0b10 	vmov	r0, r1, d0
 801a802:	b17e      	cbz	r6, 801a824 <sulp+0x36>
 801a804:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801a808:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a80c:	2b00      	cmp	r3, #0
 801a80e:	dd09      	ble.n	801a824 <sulp+0x36>
 801a810:	051b      	lsls	r3, r3, #20
 801a812:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801a816:	2400      	movs	r4, #0
 801a818:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801a81c:	4622      	mov	r2, r4
 801a81e:	462b      	mov	r3, r5
 801a820:	f7e5 ff02 	bl	8000628 <__aeabi_dmul>
 801a824:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a828 <_strtod_l>:
 801a828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a82c:	ed2d 8b02 	vpush	{d8}
 801a830:	b09d      	sub	sp, #116	; 0x74
 801a832:	461f      	mov	r7, r3
 801a834:	2300      	movs	r3, #0
 801a836:	9318      	str	r3, [sp, #96]	; 0x60
 801a838:	4ba2      	ldr	r3, [pc, #648]	; (801aac4 <_strtod_l+0x29c>)
 801a83a:	9213      	str	r2, [sp, #76]	; 0x4c
 801a83c:	681b      	ldr	r3, [r3, #0]
 801a83e:	9305      	str	r3, [sp, #20]
 801a840:	4604      	mov	r4, r0
 801a842:	4618      	mov	r0, r3
 801a844:	4688      	mov	r8, r1
 801a846:	f7e5 fcd5 	bl	80001f4 <strlen>
 801a84a:	f04f 0a00 	mov.w	sl, #0
 801a84e:	4605      	mov	r5, r0
 801a850:	f04f 0b00 	mov.w	fp, #0
 801a854:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a858:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a85a:	781a      	ldrb	r2, [r3, #0]
 801a85c:	2a2b      	cmp	r2, #43	; 0x2b
 801a85e:	d04e      	beq.n	801a8fe <_strtod_l+0xd6>
 801a860:	d83b      	bhi.n	801a8da <_strtod_l+0xb2>
 801a862:	2a0d      	cmp	r2, #13
 801a864:	d834      	bhi.n	801a8d0 <_strtod_l+0xa8>
 801a866:	2a08      	cmp	r2, #8
 801a868:	d834      	bhi.n	801a8d4 <_strtod_l+0xac>
 801a86a:	2a00      	cmp	r2, #0
 801a86c:	d03e      	beq.n	801a8ec <_strtod_l+0xc4>
 801a86e:	2300      	movs	r3, #0
 801a870:	930a      	str	r3, [sp, #40]	; 0x28
 801a872:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801a874:	7833      	ldrb	r3, [r6, #0]
 801a876:	2b30      	cmp	r3, #48	; 0x30
 801a878:	f040 80b0 	bne.w	801a9dc <_strtod_l+0x1b4>
 801a87c:	7873      	ldrb	r3, [r6, #1]
 801a87e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a882:	2b58      	cmp	r3, #88	; 0x58
 801a884:	d168      	bne.n	801a958 <_strtod_l+0x130>
 801a886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a888:	9301      	str	r3, [sp, #4]
 801a88a:	ab18      	add	r3, sp, #96	; 0x60
 801a88c:	9702      	str	r7, [sp, #8]
 801a88e:	9300      	str	r3, [sp, #0]
 801a890:	4a8d      	ldr	r2, [pc, #564]	; (801aac8 <_strtod_l+0x2a0>)
 801a892:	ab19      	add	r3, sp, #100	; 0x64
 801a894:	a917      	add	r1, sp, #92	; 0x5c
 801a896:	4620      	mov	r0, r4
 801a898:	f002 f880 	bl	801c99c <__gethex>
 801a89c:	f010 0707 	ands.w	r7, r0, #7
 801a8a0:	4605      	mov	r5, r0
 801a8a2:	d005      	beq.n	801a8b0 <_strtod_l+0x88>
 801a8a4:	2f06      	cmp	r7, #6
 801a8a6:	d12c      	bne.n	801a902 <_strtod_l+0xda>
 801a8a8:	3601      	adds	r6, #1
 801a8aa:	2300      	movs	r3, #0
 801a8ac:	9617      	str	r6, [sp, #92]	; 0x5c
 801a8ae:	930a      	str	r3, [sp, #40]	; 0x28
 801a8b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a8b2:	2b00      	cmp	r3, #0
 801a8b4:	f040 8590 	bne.w	801b3d8 <_strtod_l+0xbb0>
 801a8b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a8ba:	b1eb      	cbz	r3, 801a8f8 <_strtod_l+0xd0>
 801a8bc:	4652      	mov	r2, sl
 801a8be:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801a8c2:	ec43 2b10 	vmov	d0, r2, r3
 801a8c6:	b01d      	add	sp, #116	; 0x74
 801a8c8:	ecbd 8b02 	vpop	{d8}
 801a8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8d0:	2a20      	cmp	r2, #32
 801a8d2:	d1cc      	bne.n	801a86e <_strtod_l+0x46>
 801a8d4:	3301      	adds	r3, #1
 801a8d6:	9317      	str	r3, [sp, #92]	; 0x5c
 801a8d8:	e7be      	b.n	801a858 <_strtod_l+0x30>
 801a8da:	2a2d      	cmp	r2, #45	; 0x2d
 801a8dc:	d1c7      	bne.n	801a86e <_strtod_l+0x46>
 801a8de:	2201      	movs	r2, #1
 801a8e0:	920a      	str	r2, [sp, #40]	; 0x28
 801a8e2:	1c5a      	adds	r2, r3, #1
 801a8e4:	9217      	str	r2, [sp, #92]	; 0x5c
 801a8e6:	785b      	ldrb	r3, [r3, #1]
 801a8e8:	2b00      	cmp	r3, #0
 801a8ea:	d1c2      	bne.n	801a872 <_strtod_l+0x4a>
 801a8ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a8ee:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a8f2:	2b00      	cmp	r3, #0
 801a8f4:	f040 856e 	bne.w	801b3d4 <_strtod_l+0xbac>
 801a8f8:	4652      	mov	r2, sl
 801a8fa:	465b      	mov	r3, fp
 801a8fc:	e7e1      	b.n	801a8c2 <_strtod_l+0x9a>
 801a8fe:	2200      	movs	r2, #0
 801a900:	e7ee      	b.n	801a8e0 <_strtod_l+0xb8>
 801a902:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a904:	b13a      	cbz	r2, 801a916 <_strtod_l+0xee>
 801a906:	2135      	movs	r1, #53	; 0x35
 801a908:	a81a      	add	r0, sp, #104	; 0x68
 801a90a:	f003 f854 	bl	801d9b6 <__copybits>
 801a90e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a910:	4620      	mov	r0, r4
 801a912:	f002 fc13 	bl	801d13c <_Bfree>
 801a916:	3f01      	subs	r7, #1
 801a918:	2f04      	cmp	r7, #4
 801a91a:	d806      	bhi.n	801a92a <_strtod_l+0x102>
 801a91c:	e8df f007 	tbb	[pc, r7]
 801a920:	1714030a 	.word	0x1714030a
 801a924:	0a          	.byte	0x0a
 801a925:	00          	.byte	0x00
 801a926:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801a92a:	0728      	lsls	r0, r5, #28
 801a92c:	d5c0      	bpl.n	801a8b0 <_strtod_l+0x88>
 801a92e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801a932:	e7bd      	b.n	801a8b0 <_strtod_l+0x88>
 801a934:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801a938:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801a93a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801a93e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a942:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801a946:	e7f0      	b.n	801a92a <_strtod_l+0x102>
 801a948:	f8df b180 	ldr.w	fp, [pc, #384]	; 801aacc <_strtod_l+0x2a4>
 801a94c:	e7ed      	b.n	801a92a <_strtod_l+0x102>
 801a94e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801a952:	f04f 3aff 	mov.w	sl, #4294967295
 801a956:	e7e8      	b.n	801a92a <_strtod_l+0x102>
 801a958:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a95a:	1c5a      	adds	r2, r3, #1
 801a95c:	9217      	str	r2, [sp, #92]	; 0x5c
 801a95e:	785b      	ldrb	r3, [r3, #1]
 801a960:	2b30      	cmp	r3, #48	; 0x30
 801a962:	d0f9      	beq.n	801a958 <_strtod_l+0x130>
 801a964:	2b00      	cmp	r3, #0
 801a966:	d0a3      	beq.n	801a8b0 <_strtod_l+0x88>
 801a968:	2301      	movs	r3, #1
 801a96a:	f04f 0900 	mov.w	r9, #0
 801a96e:	9304      	str	r3, [sp, #16]
 801a970:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a972:	9308      	str	r3, [sp, #32]
 801a974:	f8cd 901c 	str.w	r9, [sp, #28]
 801a978:	464f      	mov	r7, r9
 801a97a:	220a      	movs	r2, #10
 801a97c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a97e:	7806      	ldrb	r6, [r0, #0]
 801a980:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801a984:	b2d9      	uxtb	r1, r3
 801a986:	2909      	cmp	r1, #9
 801a988:	d92a      	bls.n	801a9e0 <_strtod_l+0x1b8>
 801a98a:	9905      	ldr	r1, [sp, #20]
 801a98c:	462a      	mov	r2, r5
 801a98e:	f003 fb6e 	bl	801e06e <strncmp>
 801a992:	b398      	cbz	r0, 801a9fc <_strtod_l+0x1d4>
 801a994:	2000      	movs	r0, #0
 801a996:	4632      	mov	r2, r6
 801a998:	463d      	mov	r5, r7
 801a99a:	9005      	str	r0, [sp, #20]
 801a99c:	4603      	mov	r3, r0
 801a99e:	2a65      	cmp	r2, #101	; 0x65
 801a9a0:	d001      	beq.n	801a9a6 <_strtod_l+0x17e>
 801a9a2:	2a45      	cmp	r2, #69	; 0x45
 801a9a4:	d118      	bne.n	801a9d8 <_strtod_l+0x1b0>
 801a9a6:	b91d      	cbnz	r5, 801a9b0 <_strtod_l+0x188>
 801a9a8:	9a04      	ldr	r2, [sp, #16]
 801a9aa:	4302      	orrs	r2, r0
 801a9ac:	d09e      	beq.n	801a8ec <_strtod_l+0xc4>
 801a9ae:	2500      	movs	r5, #0
 801a9b0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801a9b4:	f108 0201 	add.w	r2, r8, #1
 801a9b8:	9217      	str	r2, [sp, #92]	; 0x5c
 801a9ba:	f898 2001 	ldrb.w	r2, [r8, #1]
 801a9be:	2a2b      	cmp	r2, #43	; 0x2b
 801a9c0:	d075      	beq.n	801aaae <_strtod_l+0x286>
 801a9c2:	2a2d      	cmp	r2, #45	; 0x2d
 801a9c4:	d07b      	beq.n	801aabe <_strtod_l+0x296>
 801a9c6:	f04f 0c00 	mov.w	ip, #0
 801a9ca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801a9ce:	2909      	cmp	r1, #9
 801a9d0:	f240 8082 	bls.w	801aad8 <_strtod_l+0x2b0>
 801a9d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a9d8:	2600      	movs	r6, #0
 801a9da:	e09d      	b.n	801ab18 <_strtod_l+0x2f0>
 801a9dc:	2300      	movs	r3, #0
 801a9de:	e7c4      	b.n	801a96a <_strtod_l+0x142>
 801a9e0:	2f08      	cmp	r7, #8
 801a9e2:	bfd8      	it	le
 801a9e4:	9907      	ldrle	r1, [sp, #28]
 801a9e6:	f100 0001 	add.w	r0, r0, #1
 801a9ea:	bfda      	itte	le
 801a9ec:	fb02 3301 	mlale	r3, r2, r1, r3
 801a9f0:	9307      	strle	r3, [sp, #28]
 801a9f2:	fb02 3909 	mlagt	r9, r2, r9, r3
 801a9f6:	3701      	adds	r7, #1
 801a9f8:	9017      	str	r0, [sp, #92]	; 0x5c
 801a9fa:	e7bf      	b.n	801a97c <_strtod_l+0x154>
 801a9fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a9fe:	195a      	adds	r2, r3, r5
 801aa00:	9217      	str	r2, [sp, #92]	; 0x5c
 801aa02:	5d5a      	ldrb	r2, [r3, r5]
 801aa04:	2f00      	cmp	r7, #0
 801aa06:	d037      	beq.n	801aa78 <_strtod_l+0x250>
 801aa08:	9005      	str	r0, [sp, #20]
 801aa0a:	463d      	mov	r5, r7
 801aa0c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801aa10:	2b09      	cmp	r3, #9
 801aa12:	d912      	bls.n	801aa3a <_strtod_l+0x212>
 801aa14:	2301      	movs	r3, #1
 801aa16:	e7c2      	b.n	801a99e <_strtod_l+0x176>
 801aa18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801aa1a:	1c5a      	adds	r2, r3, #1
 801aa1c:	9217      	str	r2, [sp, #92]	; 0x5c
 801aa1e:	785a      	ldrb	r2, [r3, #1]
 801aa20:	3001      	adds	r0, #1
 801aa22:	2a30      	cmp	r2, #48	; 0x30
 801aa24:	d0f8      	beq.n	801aa18 <_strtod_l+0x1f0>
 801aa26:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801aa2a:	2b08      	cmp	r3, #8
 801aa2c:	f200 84d9 	bhi.w	801b3e2 <_strtod_l+0xbba>
 801aa30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801aa32:	9005      	str	r0, [sp, #20]
 801aa34:	2000      	movs	r0, #0
 801aa36:	9308      	str	r3, [sp, #32]
 801aa38:	4605      	mov	r5, r0
 801aa3a:	3a30      	subs	r2, #48	; 0x30
 801aa3c:	f100 0301 	add.w	r3, r0, #1
 801aa40:	d014      	beq.n	801aa6c <_strtod_l+0x244>
 801aa42:	9905      	ldr	r1, [sp, #20]
 801aa44:	4419      	add	r1, r3
 801aa46:	9105      	str	r1, [sp, #20]
 801aa48:	462b      	mov	r3, r5
 801aa4a:	eb00 0e05 	add.w	lr, r0, r5
 801aa4e:	210a      	movs	r1, #10
 801aa50:	4573      	cmp	r3, lr
 801aa52:	d113      	bne.n	801aa7c <_strtod_l+0x254>
 801aa54:	182b      	adds	r3, r5, r0
 801aa56:	2b08      	cmp	r3, #8
 801aa58:	f105 0501 	add.w	r5, r5, #1
 801aa5c:	4405      	add	r5, r0
 801aa5e:	dc1c      	bgt.n	801aa9a <_strtod_l+0x272>
 801aa60:	9907      	ldr	r1, [sp, #28]
 801aa62:	230a      	movs	r3, #10
 801aa64:	fb03 2301 	mla	r3, r3, r1, r2
 801aa68:	9307      	str	r3, [sp, #28]
 801aa6a:	2300      	movs	r3, #0
 801aa6c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801aa6e:	1c51      	adds	r1, r2, #1
 801aa70:	9117      	str	r1, [sp, #92]	; 0x5c
 801aa72:	7852      	ldrb	r2, [r2, #1]
 801aa74:	4618      	mov	r0, r3
 801aa76:	e7c9      	b.n	801aa0c <_strtod_l+0x1e4>
 801aa78:	4638      	mov	r0, r7
 801aa7a:	e7d2      	b.n	801aa22 <_strtod_l+0x1fa>
 801aa7c:	2b08      	cmp	r3, #8
 801aa7e:	dc04      	bgt.n	801aa8a <_strtod_l+0x262>
 801aa80:	9e07      	ldr	r6, [sp, #28]
 801aa82:	434e      	muls	r6, r1
 801aa84:	9607      	str	r6, [sp, #28]
 801aa86:	3301      	adds	r3, #1
 801aa88:	e7e2      	b.n	801aa50 <_strtod_l+0x228>
 801aa8a:	f103 0c01 	add.w	ip, r3, #1
 801aa8e:	f1bc 0f10 	cmp.w	ip, #16
 801aa92:	bfd8      	it	le
 801aa94:	fb01 f909 	mulle.w	r9, r1, r9
 801aa98:	e7f5      	b.n	801aa86 <_strtod_l+0x25e>
 801aa9a:	2d10      	cmp	r5, #16
 801aa9c:	bfdc      	itt	le
 801aa9e:	230a      	movle	r3, #10
 801aaa0:	fb03 2909 	mlale	r9, r3, r9, r2
 801aaa4:	e7e1      	b.n	801aa6a <_strtod_l+0x242>
 801aaa6:	2300      	movs	r3, #0
 801aaa8:	9305      	str	r3, [sp, #20]
 801aaaa:	2301      	movs	r3, #1
 801aaac:	e77c      	b.n	801a9a8 <_strtod_l+0x180>
 801aaae:	f04f 0c00 	mov.w	ip, #0
 801aab2:	f108 0202 	add.w	r2, r8, #2
 801aab6:	9217      	str	r2, [sp, #92]	; 0x5c
 801aab8:	f898 2002 	ldrb.w	r2, [r8, #2]
 801aabc:	e785      	b.n	801a9ca <_strtod_l+0x1a2>
 801aabe:	f04f 0c01 	mov.w	ip, #1
 801aac2:	e7f6      	b.n	801aab2 <_strtod_l+0x28a>
 801aac4:	0802042c 	.word	0x0802042c
 801aac8:	080200e8 	.word	0x080200e8
 801aacc:	7ff00000 	.word	0x7ff00000
 801aad0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801aad2:	1c51      	adds	r1, r2, #1
 801aad4:	9117      	str	r1, [sp, #92]	; 0x5c
 801aad6:	7852      	ldrb	r2, [r2, #1]
 801aad8:	2a30      	cmp	r2, #48	; 0x30
 801aada:	d0f9      	beq.n	801aad0 <_strtod_l+0x2a8>
 801aadc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801aae0:	2908      	cmp	r1, #8
 801aae2:	f63f af79 	bhi.w	801a9d8 <_strtod_l+0x1b0>
 801aae6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801aaea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801aaec:	9206      	str	r2, [sp, #24]
 801aaee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801aaf0:	1c51      	adds	r1, r2, #1
 801aaf2:	9117      	str	r1, [sp, #92]	; 0x5c
 801aaf4:	7852      	ldrb	r2, [r2, #1]
 801aaf6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801aafa:	2e09      	cmp	r6, #9
 801aafc:	d937      	bls.n	801ab6e <_strtod_l+0x346>
 801aafe:	9e06      	ldr	r6, [sp, #24]
 801ab00:	1b89      	subs	r1, r1, r6
 801ab02:	2908      	cmp	r1, #8
 801ab04:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801ab08:	dc02      	bgt.n	801ab10 <_strtod_l+0x2e8>
 801ab0a:	4576      	cmp	r6, lr
 801ab0c:	bfa8      	it	ge
 801ab0e:	4676      	movge	r6, lr
 801ab10:	f1bc 0f00 	cmp.w	ip, #0
 801ab14:	d000      	beq.n	801ab18 <_strtod_l+0x2f0>
 801ab16:	4276      	negs	r6, r6
 801ab18:	2d00      	cmp	r5, #0
 801ab1a:	d14d      	bne.n	801abb8 <_strtod_l+0x390>
 801ab1c:	9904      	ldr	r1, [sp, #16]
 801ab1e:	4301      	orrs	r1, r0
 801ab20:	f47f aec6 	bne.w	801a8b0 <_strtod_l+0x88>
 801ab24:	2b00      	cmp	r3, #0
 801ab26:	f47f aee1 	bne.w	801a8ec <_strtod_l+0xc4>
 801ab2a:	2a69      	cmp	r2, #105	; 0x69
 801ab2c:	d027      	beq.n	801ab7e <_strtod_l+0x356>
 801ab2e:	dc24      	bgt.n	801ab7a <_strtod_l+0x352>
 801ab30:	2a49      	cmp	r2, #73	; 0x49
 801ab32:	d024      	beq.n	801ab7e <_strtod_l+0x356>
 801ab34:	2a4e      	cmp	r2, #78	; 0x4e
 801ab36:	f47f aed9 	bne.w	801a8ec <_strtod_l+0xc4>
 801ab3a:	499f      	ldr	r1, [pc, #636]	; (801adb8 <_strtod_l+0x590>)
 801ab3c:	a817      	add	r0, sp, #92	; 0x5c
 801ab3e:	f002 f985 	bl	801ce4c <__match>
 801ab42:	2800      	cmp	r0, #0
 801ab44:	f43f aed2 	beq.w	801a8ec <_strtod_l+0xc4>
 801ab48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ab4a:	781b      	ldrb	r3, [r3, #0]
 801ab4c:	2b28      	cmp	r3, #40	; 0x28
 801ab4e:	d12d      	bne.n	801abac <_strtod_l+0x384>
 801ab50:	499a      	ldr	r1, [pc, #616]	; (801adbc <_strtod_l+0x594>)
 801ab52:	aa1a      	add	r2, sp, #104	; 0x68
 801ab54:	a817      	add	r0, sp, #92	; 0x5c
 801ab56:	f002 f98d 	bl	801ce74 <__hexnan>
 801ab5a:	2805      	cmp	r0, #5
 801ab5c:	d126      	bne.n	801abac <_strtod_l+0x384>
 801ab5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ab60:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801ab64:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801ab68:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801ab6c:	e6a0      	b.n	801a8b0 <_strtod_l+0x88>
 801ab6e:	210a      	movs	r1, #10
 801ab70:	fb01 2e0e 	mla	lr, r1, lr, r2
 801ab74:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801ab78:	e7b9      	b.n	801aaee <_strtod_l+0x2c6>
 801ab7a:	2a6e      	cmp	r2, #110	; 0x6e
 801ab7c:	e7db      	b.n	801ab36 <_strtod_l+0x30e>
 801ab7e:	4990      	ldr	r1, [pc, #576]	; (801adc0 <_strtod_l+0x598>)
 801ab80:	a817      	add	r0, sp, #92	; 0x5c
 801ab82:	f002 f963 	bl	801ce4c <__match>
 801ab86:	2800      	cmp	r0, #0
 801ab88:	f43f aeb0 	beq.w	801a8ec <_strtod_l+0xc4>
 801ab8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ab8e:	498d      	ldr	r1, [pc, #564]	; (801adc4 <_strtod_l+0x59c>)
 801ab90:	3b01      	subs	r3, #1
 801ab92:	a817      	add	r0, sp, #92	; 0x5c
 801ab94:	9317      	str	r3, [sp, #92]	; 0x5c
 801ab96:	f002 f959 	bl	801ce4c <__match>
 801ab9a:	b910      	cbnz	r0, 801aba2 <_strtod_l+0x37a>
 801ab9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ab9e:	3301      	adds	r3, #1
 801aba0:	9317      	str	r3, [sp, #92]	; 0x5c
 801aba2:	f8df b230 	ldr.w	fp, [pc, #560]	; 801add4 <_strtod_l+0x5ac>
 801aba6:	f04f 0a00 	mov.w	sl, #0
 801abaa:	e681      	b.n	801a8b0 <_strtod_l+0x88>
 801abac:	4886      	ldr	r0, [pc, #536]	; (801adc8 <_strtod_l+0x5a0>)
 801abae:	f003 fa13 	bl	801dfd8 <nan>
 801abb2:	ec5b ab10 	vmov	sl, fp, d0
 801abb6:	e67b      	b.n	801a8b0 <_strtod_l+0x88>
 801abb8:	9b05      	ldr	r3, [sp, #20]
 801abba:	9807      	ldr	r0, [sp, #28]
 801abbc:	1af3      	subs	r3, r6, r3
 801abbe:	2f00      	cmp	r7, #0
 801abc0:	bf08      	it	eq
 801abc2:	462f      	moveq	r7, r5
 801abc4:	2d10      	cmp	r5, #16
 801abc6:	9306      	str	r3, [sp, #24]
 801abc8:	46a8      	mov	r8, r5
 801abca:	bfa8      	it	ge
 801abcc:	f04f 0810 	movge.w	r8, #16
 801abd0:	f7e5 fcb0 	bl	8000534 <__aeabi_ui2d>
 801abd4:	2d09      	cmp	r5, #9
 801abd6:	4682      	mov	sl, r0
 801abd8:	468b      	mov	fp, r1
 801abda:	dd13      	ble.n	801ac04 <_strtod_l+0x3dc>
 801abdc:	4b7b      	ldr	r3, [pc, #492]	; (801adcc <_strtod_l+0x5a4>)
 801abde:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801abe2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801abe6:	f7e5 fd1f 	bl	8000628 <__aeabi_dmul>
 801abea:	4682      	mov	sl, r0
 801abec:	4648      	mov	r0, r9
 801abee:	468b      	mov	fp, r1
 801abf0:	f7e5 fca0 	bl	8000534 <__aeabi_ui2d>
 801abf4:	4602      	mov	r2, r0
 801abf6:	460b      	mov	r3, r1
 801abf8:	4650      	mov	r0, sl
 801abfa:	4659      	mov	r1, fp
 801abfc:	f7e5 fb5e 	bl	80002bc <__adddf3>
 801ac00:	4682      	mov	sl, r0
 801ac02:	468b      	mov	fp, r1
 801ac04:	2d0f      	cmp	r5, #15
 801ac06:	dc38      	bgt.n	801ac7a <_strtod_l+0x452>
 801ac08:	9b06      	ldr	r3, [sp, #24]
 801ac0a:	2b00      	cmp	r3, #0
 801ac0c:	f43f ae50 	beq.w	801a8b0 <_strtod_l+0x88>
 801ac10:	dd24      	ble.n	801ac5c <_strtod_l+0x434>
 801ac12:	2b16      	cmp	r3, #22
 801ac14:	dc0b      	bgt.n	801ac2e <_strtod_l+0x406>
 801ac16:	496d      	ldr	r1, [pc, #436]	; (801adcc <_strtod_l+0x5a4>)
 801ac18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801ac1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ac20:	4652      	mov	r2, sl
 801ac22:	465b      	mov	r3, fp
 801ac24:	f7e5 fd00 	bl	8000628 <__aeabi_dmul>
 801ac28:	4682      	mov	sl, r0
 801ac2a:	468b      	mov	fp, r1
 801ac2c:	e640      	b.n	801a8b0 <_strtod_l+0x88>
 801ac2e:	9a06      	ldr	r2, [sp, #24]
 801ac30:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801ac34:	4293      	cmp	r3, r2
 801ac36:	db20      	blt.n	801ac7a <_strtod_l+0x452>
 801ac38:	4c64      	ldr	r4, [pc, #400]	; (801adcc <_strtod_l+0x5a4>)
 801ac3a:	f1c5 050f 	rsb	r5, r5, #15
 801ac3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801ac42:	4652      	mov	r2, sl
 801ac44:	465b      	mov	r3, fp
 801ac46:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ac4a:	f7e5 fced 	bl	8000628 <__aeabi_dmul>
 801ac4e:	9b06      	ldr	r3, [sp, #24]
 801ac50:	1b5d      	subs	r5, r3, r5
 801ac52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801ac56:	e9d4 2300 	ldrd	r2, r3, [r4]
 801ac5a:	e7e3      	b.n	801ac24 <_strtod_l+0x3fc>
 801ac5c:	9b06      	ldr	r3, [sp, #24]
 801ac5e:	3316      	adds	r3, #22
 801ac60:	db0b      	blt.n	801ac7a <_strtod_l+0x452>
 801ac62:	9b05      	ldr	r3, [sp, #20]
 801ac64:	1b9e      	subs	r6, r3, r6
 801ac66:	4b59      	ldr	r3, [pc, #356]	; (801adcc <_strtod_l+0x5a4>)
 801ac68:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801ac6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801ac70:	4650      	mov	r0, sl
 801ac72:	4659      	mov	r1, fp
 801ac74:	f7e5 fe02 	bl	800087c <__aeabi_ddiv>
 801ac78:	e7d6      	b.n	801ac28 <_strtod_l+0x400>
 801ac7a:	9b06      	ldr	r3, [sp, #24]
 801ac7c:	eba5 0808 	sub.w	r8, r5, r8
 801ac80:	4498      	add	r8, r3
 801ac82:	f1b8 0f00 	cmp.w	r8, #0
 801ac86:	dd74      	ble.n	801ad72 <_strtod_l+0x54a>
 801ac88:	f018 030f 	ands.w	r3, r8, #15
 801ac8c:	d00a      	beq.n	801aca4 <_strtod_l+0x47c>
 801ac8e:	494f      	ldr	r1, [pc, #316]	; (801adcc <_strtod_l+0x5a4>)
 801ac90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801ac94:	4652      	mov	r2, sl
 801ac96:	465b      	mov	r3, fp
 801ac98:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ac9c:	f7e5 fcc4 	bl	8000628 <__aeabi_dmul>
 801aca0:	4682      	mov	sl, r0
 801aca2:	468b      	mov	fp, r1
 801aca4:	f038 080f 	bics.w	r8, r8, #15
 801aca8:	d04f      	beq.n	801ad4a <_strtod_l+0x522>
 801acaa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801acae:	dd22      	ble.n	801acf6 <_strtod_l+0x4ce>
 801acb0:	2500      	movs	r5, #0
 801acb2:	462e      	mov	r6, r5
 801acb4:	9507      	str	r5, [sp, #28]
 801acb6:	9505      	str	r5, [sp, #20]
 801acb8:	2322      	movs	r3, #34	; 0x22
 801acba:	f8df b118 	ldr.w	fp, [pc, #280]	; 801add4 <_strtod_l+0x5ac>
 801acbe:	6023      	str	r3, [r4, #0]
 801acc0:	f04f 0a00 	mov.w	sl, #0
 801acc4:	9b07      	ldr	r3, [sp, #28]
 801acc6:	2b00      	cmp	r3, #0
 801acc8:	f43f adf2 	beq.w	801a8b0 <_strtod_l+0x88>
 801accc:	9918      	ldr	r1, [sp, #96]	; 0x60
 801acce:	4620      	mov	r0, r4
 801acd0:	f002 fa34 	bl	801d13c <_Bfree>
 801acd4:	9905      	ldr	r1, [sp, #20]
 801acd6:	4620      	mov	r0, r4
 801acd8:	f002 fa30 	bl	801d13c <_Bfree>
 801acdc:	4631      	mov	r1, r6
 801acde:	4620      	mov	r0, r4
 801ace0:	f002 fa2c 	bl	801d13c <_Bfree>
 801ace4:	9907      	ldr	r1, [sp, #28]
 801ace6:	4620      	mov	r0, r4
 801ace8:	f002 fa28 	bl	801d13c <_Bfree>
 801acec:	4629      	mov	r1, r5
 801acee:	4620      	mov	r0, r4
 801acf0:	f002 fa24 	bl	801d13c <_Bfree>
 801acf4:	e5dc      	b.n	801a8b0 <_strtod_l+0x88>
 801acf6:	4b36      	ldr	r3, [pc, #216]	; (801add0 <_strtod_l+0x5a8>)
 801acf8:	9304      	str	r3, [sp, #16]
 801acfa:	2300      	movs	r3, #0
 801acfc:	ea4f 1828 	mov.w	r8, r8, asr #4
 801ad00:	4650      	mov	r0, sl
 801ad02:	4659      	mov	r1, fp
 801ad04:	4699      	mov	r9, r3
 801ad06:	f1b8 0f01 	cmp.w	r8, #1
 801ad0a:	dc21      	bgt.n	801ad50 <_strtod_l+0x528>
 801ad0c:	b10b      	cbz	r3, 801ad12 <_strtod_l+0x4ea>
 801ad0e:	4682      	mov	sl, r0
 801ad10:	468b      	mov	fp, r1
 801ad12:	4b2f      	ldr	r3, [pc, #188]	; (801add0 <_strtod_l+0x5a8>)
 801ad14:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801ad18:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801ad1c:	4652      	mov	r2, sl
 801ad1e:	465b      	mov	r3, fp
 801ad20:	e9d9 0100 	ldrd	r0, r1, [r9]
 801ad24:	f7e5 fc80 	bl	8000628 <__aeabi_dmul>
 801ad28:	4b2a      	ldr	r3, [pc, #168]	; (801add4 <_strtod_l+0x5ac>)
 801ad2a:	460a      	mov	r2, r1
 801ad2c:	400b      	ands	r3, r1
 801ad2e:	492a      	ldr	r1, [pc, #168]	; (801add8 <_strtod_l+0x5b0>)
 801ad30:	428b      	cmp	r3, r1
 801ad32:	4682      	mov	sl, r0
 801ad34:	d8bc      	bhi.n	801acb0 <_strtod_l+0x488>
 801ad36:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801ad3a:	428b      	cmp	r3, r1
 801ad3c:	bf86      	itte	hi
 801ad3e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801addc <_strtod_l+0x5b4>
 801ad42:	f04f 3aff 	movhi.w	sl, #4294967295
 801ad46:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801ad4a:	2300      	movs	r3, #0
 801ad4c:	9304      	str	r3, [sp, #16]
 801ad4e:	e084      	b.n	801ae5a <_strtod_l+0x632>
 801ad50:	f018 0f01 	tst.w	r8, #1
 801ad54:	d005      	beq.n	801ad62 <_strtod_l+0x53a>
 801ad56:	9b04      	ldr	r3, [sp, #16]
 801ad58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad5c:	f7e5 fc64 	bl	8000628 <__aeabi_dmul>
 801ad60:	2301      	movs	r3, #1
 801ad62:	9a04      	ldr	r2, [sp, #16]
 801ad64:	3208      	adds	r2, #8
 801ad66:	f109 0901 	add.w	r9, r9, #1
 801ad6a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801ad6e:	9204      	str	r2, [sp, #16]
 801ad70:	e7c9      	b.n	801ad06 <_strtod_l+0x4de>
 801ad72:	d0ea      	beq.n	801ad4a <_strtod_l+0x522>
 801ad74:	f1c8 0800 	rsb	r8, r8, #0
 801ad78:	f018 020f 	ands.w	r2, r8, #15
 801ad7c:	d00a      	beq.n	801ad94 <_strtod_l+0x56c>
 801ad7e:	4b13      	ldr	r3, [pc, #76]	; (801adcc <_strtod_l+0x5a4>)
 801ad80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ad84:	4650      	mov	r0, sl
 801ad86:	4659      	mov	r1, fp
 801ad88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad8c:	f7e5 fd76 	bl	800087c <__aeabi_ddiv>
 801ad90:	4682      	mov	sl, r0
 801ad92:	468b      	mov	fp, r1
 801ad94:	ea5f 1828 	movs.w	r8, r8, asr #4
 801ad98:	d0d7      	beq.n	801ad4a <_strtod_l+0x522>
 801ad9a:	f1b8 0f1f 	cmp.w	r8, #31
 801ad9e:	dd1f      	ble.n	801ade0 <_strtod_l+0x5b8>
 801ada0:	2500      	movs	r5, #0
 801ada2:	462e      	mov	r6, r5
 801ada4:	9507      	str	r5, [sp, #28]
 801ada6:	9505      	str	r5, [sp, #20]
 801ada8:	2322      	movs	r3, #34	; 0x22
 801adaa:	f04f 0a00 	mov.w	sl, #0
 801adae:	f04f 0b00 	mov.w	fp, #0
 801adb2:	6023      	str	r3, [r4, #0]
 801adb4:	e786      	b.n	801acc4 <_strtod_l+0x49c>
 801adb6:	bf00      	nop
 801adb8:	080200b9 	.word	0x080200b9
 801adbc:	080200fc 	.word	0x080200fc
 801adc0:	080200b1 	.word	0x080200b1
 801adc4:	080202ec 	.word	0x080202ec
 801adc8:	080201e7 	.word	0x080201e7
 801adcc:	080204c8 	.word	0x080204c8
 801add0:	080204a0 	.word	0x080204a0
 801add4:	7ff00000 	.word	0x7ff00000
 801add8:	7ca00000 	.word	0x7ca00000
 801addc:	7fefffff 	.word	0x7fefffff
 801ade0:	f018 0310 	ands.w	r3, r8, #16
 801ade4:	bf18      	it	ne
 801ade6:	236a      	movne	r3, #106	; 0x6a
 801ade8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 801b198 <_strtod_l+0x970>
 801adec:	9304      	str	r3, [sp, #16]
 801adee:	4650      	mov	r0, sl
 801adf0:	4659      	mov	r1, fp
 801adf2:	2300      	movs	r3, #0
 801adf4:	f018 0f01 	tst.w	r8, #1
 801adf8:	d004      	beq.n	801ae04 <_strtod_l+0x5dc>
 801adfa:	e9d9 2300 	ldrd	r2, r3, [r9]
 801adfe:	f7e5 fc13 	bl	8000628 <__aeabi_dmul>
 801ae02:	2301      	movs	r3, #1
 801ae04:	ea5f 0868 	movs.w	r8, r8, asr #1
 801ae08:	f109 0908 	add.w	r9, r9, #8
 801ae0c:	d1f2      	bne.n	801adf4 <_strtod_l+0x5cc>
 801ae0e:	b10b      	cbz	r3, 801ae14 <_strtod_l+0x5ec>
 801ae10:	4682      	mov	sl, r0
 801ae12:	468b      	mov	fp, r1
 801ae14:	9b04      	ldr	r3, [sp, #16]
 801ae16:	b1c3      	cbz	r3, 801ae4a <_strtod_l+0x622>
 801ae18:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801ae1c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801ae20:	2b00      	cmp	r3, #0
 801ae22:	4659      	mov	r1, fp
 801ae24:	dd11      	ble.n	801ae4a <_strtod_l+0x622>
 801ae26:	2b1f      	cmp	r3, #31
 801ae28:	f340 8124 	ble.w	801b074 <_strtod_l+0x84c>
 801ae2c:	2b34      	cmp	r3, #52	; 0x34
 801ae2e:	bfde      	ittt	le
 801ae30:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801ae34:	f04f 33ff 	movle.w	r3, #4294967295
 801ae38:	fa03 f202 	lslle.w	r2, r3, r2
 801ae3c:	f04f 0a00 	mov.w	sl, #0
 801ae40:	bfcc      	ite	gt
 801ae42:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801ae46:	ea02 0b01 	andle.w	fp, r2, r1
 801ae4a:	2200      	movs	r2, #0
 801ae4c:	2300      	movs	r3, #0
 801ae4e:	4650      	mov	r0, sl
 801ae50:	4659      	mov	r1, fp
 801ae52:	f7e5 fe51 	bl	8000af8 <__aeabi_dcmpeq>
 801ae56:	2800      	cmp	r0, #0
 801ae58:	d1a2      	bne.n	801ada0 <_strtod_l+0x578>
 801ae5a:	9b07      	ldr	r3, [sp, #28]
 801ae5c:	9300      	str	r3, [sp, #0]
 801ae5e:	9908      	ldr	r1, [sp, #32]
 801ae60:	462b      	mov	r3, r5
 801ae62:	463a      	mov	r2, r7
 801ae64:	4620      	mov	r0, r4
 801ae66:	f002 f9d1 	bl	801d20c <__s2b>
 801ae6a:	9007      	str	r0, [sp, #28]
 801ae6c:	2800      	cmp	r0, #0
 801ae6e:	f43f af1f 	beq.w	801acb0 <_strtod_l+0x488>
 801ae72:	9b05      	ldr	r3, [sp, #20]
 801ae74:	1b9e      	subs	r6, r3, r6
 801ae76:	9b06      	ldr	r3, [sp, #24]
 801ae78:	2b00      	cmp	r3, #0
 801ae7a:	bfb4      	ite	lt
 801ae7c:	4633      	movlt	r3, r6
 801ae7e:	2300      	movge	r3, #0
 801ae80:	930c      	str	r3, [sp, #48]	; 0x30
 801ae82:	9b06      	ldr	r3, [sp, #24]
 801ae84:	2500      	movs	r5, #0
 801ae86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ae8a:	9312      	str	r3, [sp, #72]	; 0x48
 801ae8c:	462e      	mov	r6, r5
 801ae8e:	9b07      	ldr	r3, [sp, #28]
 801ae90:	4620      	mov	r0, r4
 801ae92:	6859      	ldr	r1, [r3, #4]
 801ae94:	f002 f912 	bl	801d0bc <_Balloc>
 801ae98:	9005      	str	r0, [sp, #20]
 801ae9a:	2800      	cmp	r0, #0
 801ae9c:	f43f af0c 	beq.w	801acb8 <_strtod_l+0x490>
 801aea0:	9b07      	ldr	r3, [sp, #28]
 801aea2:	691a      	ldr	r2, [r3, #16]
 801aea4:	3202      	adds	r2, #2
 801aea6:	f103 010c 	add.w	r1, r3, #12
 801aeaa:	0092      	lsls	r2, r2, #2
 801aeac:	300c      	adds	r0, #12
 801aeae:	f7fe fc25 	bl	80196fc <memcpy>
 801aeb2:	ec4b ab10 	vmov	d0, sl, fp
 801aeb6:	aa1a      	add	r2, sp, #104	; 0x68
 801aeb8:	a919      	add	r1, sp, #100	; 0x64
 801aeba:	4620      	mov	r0, r4
 801aebc:	f002 fcec 	bl	801d898 <__d2b>
 801aec0:	ec4b ab18 	vmov	d8, sl, fp
 801aec4:	9018      	str	r0, [sp, #96]	; 0x60
 801aec6:	2800      	cmp	r0, #0
 801aec8:	f43f aef6 	beq.w	801acb8 <_strtod_l+0x490>
 801aecc:	2101      	movs	r1, #1
 801aece:	4620      	mov	r0, r4
 801aed0:	f002 fa36 	bl	801d340 <__i2b>
 801aed4:	4606      	mov	r6, r0
 801aed6:	2800      	cmp	r0, #0
 801aed8:	f43f aeee 	beq.w	801acb8 <_strtod_l+0x490>
 801aedc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801aede:	9904      	ldr	r1, [sp, #16]
 801aee0:	2b00      	cmp	r3, #0
 801aee2:	bfab      	itete	ge
 801aee4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801aee6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801aee8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801aeea:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801aeee:	bfac      	ite	ge
 801aef0:	eb03 0902 	addge.w	r9, r3, r2
 801aef4:	1ad7      	sublt	r7, r2, r3
 801aef6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801aef8:	eba3 0801 	sub.w	r8, r3, r1
 801aefc:	4490      	add	r8, r2
 801aefe:	4ba1      	ldr	r3, [pc, #644]	; (801b184 <_strtod_l+0x95c>)
 801af00:	f108 38ff 	add.w	r8, r8, #4294967295
 801af04:	4598      	cmp	r8, r3
 801af06:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801af0a:	f280 80c7 	bge.w	801b09c <_strtod_l+0x874>
 801af0e:	eba3 0308 	sub.w	r3, r3, r8
 801af12:	2b1f      	cmp	r3, #31
 801af14:	eba2 0203 	sub.w	r2, r2, r3
 801af18:	f04f 0101 	mov.w	r1, #1
 801af1c:	f300 80b1 	bgt.w	801b082 <_strtod_l+0x85a>
 801af20:	fa01 f303 	lsl.w	r3, r1, r3
 801af24:	930d      	str	r3, [sp, #52]	; 0x34
 801af26:	2300      	movs	r3, #0
 801af28:	9308      	str	r3, [sp, #32]
 801af2a:	eb09 0802 	add.w	r8, r9, r2
 801af2e:	9b04      	ldr	r3, [sp, #16]
 801af30:	45c1      	cmp	r9, r8
 801af32:	4417      	add	r7, r2
 801af34:	441f      	add	r7, r3
 801af36:	464b      	mov	r3, r9
 801af38:	bfa8      	it	ge
 801af3a:	4643      	movge	r3, r8
 801af3c:	42bb      	cmp	r3, r7
 801af3e:	bfa8      	it	ge
 801af40:	463b      	movge	r3, r7
 801af42:	2b00      	cmp	r3, #0
 801af44:	bfc2      	ittt	gt
 801af46:	eba8 0803 	subgt.w	r8, r8, r3
 801af4a:	1aff      	subgt	r7, r7, r3
 801af4c:	eba9 0903 	subgt.w	r9, r9, r3
 801af50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801af52:	2b00      	cmp	r3, #0
 801af54:	dd17      	ble.n	801af86 <_strtod_l+0x75e>
 801af56:	4631      	mov	r1, r6
 801af58:	461a      	mov	r2, r3
 801af5a:	4620      	mov	r0, r4
 801af5c:	f002 fab0 	bl	801d4c0 <__pow5mult>
 801af60:	4606      	mov	r6, r0
 801af62:	2800      	cmp	r0, #0
 801af64:	f43f aea8 	beq.w	801acb8 <_strtod_l+0x490>
 801af68:	4601      	mov	r1, r0
 801af6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801af6c:	4620      	mov	r0, r4
 801af6e:	f002 f9fd 	bl	801d36c <__multiply>
 801af72:	900b      	str	r0, [sp, #44]	; 0x2c
 801af74:	2800      	cmp	r0, #0
 801af76:	f43f ae9f 	beq.w	801acb8 <_strtod_l+0x490>
 801af7a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801af7c:	4620      	mov	r0, r4
 801af7e:	f002 f8dd 	bl	801d13c <_Bfree>
 801af82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801af84:	9318      	str	r3, [sp, #96]	; 0x60
 801af86:	f1b8 0f00 	cmp.w	r8, #0
 801af8a:	f300 808c 	bgt.w	801b0a6 <_strtod_l+0x87e>
 801af8e:	9b06      	ldr	r3, [sp, #24]
 801af90:	2b00      	cmp	r3, #0
 801af92:	dd08      	ble.n	801afa6 <_strtod_l+0x77e>
 801af94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801af96:	9905      	ldr	r1, [sp, #20]
 801af98:	4620      	mov	r0, r4
 801af9a:	f002 fa91 	bl	801d4c0 <__pow5mult>
 801af9e:	9005      	str	r0, [sp, #20]
 801afa0:	2800      	cmp	r0, #0
 801afa2:	f43f ae89 	beq.w	801acb8 <_strtod_l+0x490>
 801afa6:	2f00      	cmp	r7, #0
 801afa8:	dd08      	ble.n	801afbc <_strtod_l+0x794>
 801afaa:	9905      	ldr	r1, [sp, #20]
 801afac:	463a      	mov	r2, r7
 801afae:	4620      	mov	r0, r4
 801afb0:	f002 fae0 	bl	801d574 <__lshift>
 801afb4:	9005      	str	r0, [sp, #20]
 801afb6:	2800      	cmp	r0, #0
 801afb8:	f43f ae7e 	beq.w	801acb8 <_strtod_l+0x490>
 801afbc:	f1b9 0f00 	cmp.w	r9, #0
 801afc0:	dd08      	ble.n	801afd4 <_strtod_l+0x7ac>
 801afc2:	4631      	mov	r1, r6
 801afc4:	464a      	mov	r2, r9
 801afc6:	4620      	mov	r0, r4
 801afc8:	f002 fad4 	bl	801d574 <__lshift>
 801afcc:	4606      	mov	r6, r0
 801afce:	2800      	cmp	r0, #0
 801afd0:	f43f ae72 	beq.w	801acb8 <_strtod_l+0x490>
 801afd4:	9a05      	ldr	r2, [sp, #20]
 801afd6:	9918      	ldr	r1, [sp, #96]	; 0x60
 801afd8:	4620      	mov	r0, r4
 801afda:	f002 fb57 	bl	801d68c <__mdiff>
 801afde:	4605      	mov	r5, r0
 801afe0:	2800      	cmp	r0, #0
 801afe2:	f43f ae69 	beq.w	801acb8 <_strtod_l+0x490>
 801afe6:	68c3      	ldr	r3, [r0, #12]
 801afe8:	930b      	str	r3, [sp, #44]	; 0x2c
 801afea:	2300      	movs	r3, #0
 801afec:	60c3      	str	r3, [r0, #12]
 801afee:	4631      	mov	r1, r6
 801aff0:	f002 fb30 	bl	801d654 <__mcmp>
 801aff4:	2800      	cmp	r0, #0
 801aff6:	da60      	bge.n	801b0ba <_strtod_l+0x892>
 801aff8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801affa:	ea53 030a 	orrs.w	r3, r3, sl
 801affe:	f040 8082 	bne.w	801b106 <_strtod_l+0x8de>
 801b002:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b006:	2b00      	cmp	r3, #0
 801b008:	d17d      	bne.n	801b106 <_strtod_l+0x8de>
 801b00a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b00e:	0d1b      	lsrs	r3, r3, #20
 801b010:	051b      	lsls	r3, r3, #20
 801b012:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801b016:	d976      	bls.n	801b106 <_strtod_l+0x8de>
 801b018:	696b      	ldr	r3, [r5, #20]
 801b01a:	b913      	cbnz	r3, 801b022 <_strtod_l+0x7fa>
 801b01c:	692b      	ldr	r3, [r5, #16]
 801b01e:	2b01      	cmp	r3, #1
 801b020:	dd71      	ble.n	801b106 <_strtod_l+0x8de>
 801b022:	4629      	mov	r1, r5
 801b024:	2201      	movs	r2, #1
 801b026:	4620      	mov	r0, r4
 801b028:	f002 faa4 	bl	801d574 <__lshift>
 801b02c:	4631      	mov	r1, r6
 801b02e:	4605      	mov	r5, r0
 801b030:	f002 fb10 	bl	801d654 <__mcmp>
 801b034:	2800      	cmp	r0, #0
 801b036:	dd66      	ble.n	801b106 <_strtod_l+0x8de>
 801b038:	9904      	ldr	r1, [sp, #16]
 801b03a:	4a53      	ldr	r2, [pc, #332]	; (801b188 <_strtod_l+0x960>)
 801b03c:	465b      	mov	r3, fp
 801b03e:	2900      	cmp	r1, #0
 801b040:	f000 8081 	beq.w	801b146 <_strtod_l+0x91e>
 801b044:	ea02 010b 	and.w	r1, r2, fp
 801b048:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801b04c:	dc7b      	bgt.n	801b146 <_strtod_l+0x91e>
 801b04e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801b052:	f77f aea9 	ble.w	801ada8 <_strtod_l+0x580>
 801b056:	4b4d      	ldr	r3, [pc, #308]	; (801b18c <_strtod_l+0x964>)
 801b058:	4650      	mov	r0, sl
 801b05a:	4659      	mov	r1, fp
 801b05c:	2200      	movs	r2, #0
 801b05e:	f7e5 fae3 	bl	8000628 <__aeabi_dmul>
 801b062:	460b      	mov	r3, r1
 801b064:	4303      	orrs	r3, r0
 801b066:	bf08      	it	eq
 801b068:	2322      	moveq	r3, #34	; 0x22
 801b06a:	4682      	mov	sl, r0
 801b06c:	468b      	mov	fp, r1
 801b06e:	bf08      	it	eq
 801b070:	6023      	streq	r3, [r4, #0]
 801b072:	e62b      	b.n	801accc <_strtod_l+0x4a4>
 801b074:	f04f 32ff 	mov.w	r2, #4294967295
 801b078:	fa02 f303 	lsl.w	r3, r2, r3
 801b07c:	ea03 0a0a 	and.w	sl, r3, sl
 801b080:	e6e3      	b.n	801ae4a <_strtod_l+0x622>
 801b082:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801b086:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801b08a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801b08e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801b092:	fa01 f308 	lsl.w	r3, r1, r8
 801b096:	9308      	str	r3, [sp, #32]
 801b098:	910d      	str	r1, [sp, #52]	; 0x34
 801b09a:	e746      	b.n	801af2a <_strtod_l+0x702>
 801b09c:	2300      	movs	r3, #0
 801b09e:	9308      	str	r3, [sp, #32]
 801b0a0:	2301      	movs	r3, #1
 801b0a2:	930d      	str	r3, [sp, #52]	; 0x34
 801b0a4:	e741      	b.n	801af2a <_strtod_l+0x702>
 801b0a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b0a8:	4642      	mov	r2, r8
 801b0aa:	4620      	mov	r0, r4
 801b0ac:	f002 fa62 	bl	801d574 <__lshift>
 801b0b0:	9018      	str	r0, [sp, #96]	; 0x60
 801b0b2:	2800      	cmp	r0, #0
 801b0b4:	f47f af6b 	bne.w	801af8e <_strtod_l+0x766>
 801b0b8:	e5fe      	b.n	801acb8 <_strtod_l+0x490>
 801b0ba:	465f      	mov	r7, fp
 801b0bc:	d16e      	bne.n	801b19c <_strtod_l+0x974>
 801b0be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b0c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b0c4:	b342      	cbz	r2, 801b118 <_strtod_l+0x8f0>
 801b0c6:	4a32      	ldr	r2, [pc, #200]	; (801b190 <_strtod_l+0x968>)
 801b0c8:	4293      	cmp	r3, r2
 801b0ca:	d128      	bne.n	801b11e <_strtod_l+0x8f6>
 801b0cc:	9b04      	ldr	r3, [sp, #16]
 801b0ce:	4651      	mov	r1, sl
 801b0d0:	b1eb      	cbz	r3, 801b10e <_strtod_l+0x8e6>
 801b0d2:	4b2d      	ldr	r3, [pc, #180]	; (801b188 <_strtod_l+0x960>)
 801b0d4:	403b      	ands	r3, r7
 801b0d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801b0da:	f04f 32ff 	mov.w	r2, #4294967295
 801b0de:	d819      	bhi.n	801b114 <_strtod_l+0x8ec>
 801b0e0:	0d1b      	lsrs	r3, r3, #20
 801b0e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b0e6:	fa02 f303 	lsl.w	r3, r2, r3
 801b0ea:	4299      	cmp	r1, r3
 801b0ec:	d117      	bne.n	801b11e <_strtod_l+0x8f6>
 801b0ee:	4b29      	ldr	r3, [pc, #164]	; (801b194 <_strtod_l+0x96c>)
 801b0f0:	429f      	cmp	r7, r3
 801b0f2:	d102      	bne.n	801b0fa <_strtod_l+0x8d2>
 801b0f4:	3101      	adds	r1, #1
 801b0f6:	f43f addf 	beq.w	801acb8 <_strtod_l+0x490>
 801b0fa:	4b23      	ldr	r3, [pc, #140]	; (801b188 <_strtod_l+0x960>)
 801b0fc:	403b      	ands	r3, r7
 801b0fe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801b102:	f04f 0a00 	mov.w	sl, #0
 801b106:	9b04      	ldr	r3, [sp, #16]
 801b108:	2b00      	cmp	r3, #0
 801b10a:	d1a4      	bne.n	801b056 <_strtod_l+0x82e>
 801b10c:	e5de      	b.n	801accc <_strtod_l+0x4a4>
 801b10e:	f04f 33ff 	mov.w	r3, #4294967295
 801b112:	e7ea      	b.n	801b0ea <_strtod_l+0x8c2>
 801b114:	4613      	mov	r3, r2
 801b116:	e7e8      	b.n	801b0ea <_strtod_l+0x8c2>
 801b118:	ea53 030a 	orrs.w	r3, r3, sl
 801b11c:	d08c      	beq.n	801b038 <_strtod_l+0x810>
 801b11e:	9b08      	ldr	r3, [sp, #32]
 801b120:	b1db      	cbz	r3, 801b15a <_strtod_l+0x932>
 801b122:	423b      	tst	r3, r7
 801b124:	d0ef      	beq.n	801b106 <_strtod_l+0x8de>
 801b126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b128:	9a04      	ldr	r2, [sp, #16]
 801b12a:	4650      	mov	r0, sl
 801b12c:	4659      	mov	r1, fp
 801b12e:	b1c3      	cbz	r3, 801b162 <_strtod_l+0x93a>
 801b130:	f7ff fb5d 	bl	801a7ee <sulp>
 801b134:	4602      	mov	r2, r0
 801b136:	460b      	mov	r3, r1
 801b138:	ec51 0b18 	vmov	r0, r1, d8
 801b13c:	f7e5 f8be 	bl	80002bc <__adddf3>
 801b140:	4682      	mov	sl, r0
 801b142:	468b      	mov	fp, r1
 801b144:	e7df      	b.n	801b106 <_strtod_l+0x8de>
 801b146:	4013      	ands	r3, r2
 801b148:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801b14c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801b150:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801b154:	f04f 3aff 	mov.w	sl, #4294967295
 801b158:	e7d5      	b.n	801b106 <_strtod_l+0x8de>
 801b15a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b15c:	ea13 0f0a 	tst.w	r3, sl
 801b160:	e7e0      	b.n	801b124 <_strtod_l+0x8fc>
 801b162:	f7ff fb44 	bl	801a7ee <sulp>
 801b166:	4602      	mov	r2, r0
 801b168:	460b      	mov	r3, r1
 801b16a:	ec51 0b18 	vmov	r0, r1, d8
 801b16e:	f7e5 f8a3 	bl	80002b8 <__aeabi_dsub>
 801b172:	2200      	movs	r2, #0
 801b174:	2300      	movs	r3, #0
 801b176:	4682      	mov	sl, r0
 801b178:	468b      	mov	fp, r1
 801b17a:	f7e5 fcbd 	bl	8000af8 <__aeabi_dcmpeq>
 801b17e:	2800      	cmp	r0, #0
 801b180:	d0c1      	beq.n	801b106 <_strtod_l+0x8de>
 801b182:	e611      	b.n	801ada8 <_strtod_l+0x580>
 801b184:	fffffc02 	.word	0xfffffc02
 801b188:	7ff00000 	.word	0x7ff00000
 801b18c:	39500000 	.word	0x39500000
 801b190:	000fffff 	.word	0x000fffff
 801b194:	7fefffff 	.word	0x7fefffff
 801b198:	08020110 	.word	0x08020110
 801b19c:	4631      	mov	r1, r6
 801b19e:	4628      	mov	r0, r5
 801b1a0:	f002 fbd6 	bl	801d950 <__ratio>
 801b1a4:	ec59 8b10 	vmov	r8, r9, d0
 801b1a8:	ee10 0a10 	vmov	r0, s0
 801b1ac:	2200      	movs	r2, #0
 801b1ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b1b2:	4649      	mov	r1, r9
 801b1b4:	f7e5 fcb4 	bl	8000b20 <__aeabi_dcmple>
 801b1b8:	2800      	cmp	r0, #0
 801b1ba:	d07a      	beq.n	801b2b2 <_strtod_l+0xa8a>
 801b1bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b1be:	2b00      	cmp	r3, #0
 801b1c0:	d04a      	beq.n	801b258 <_strtod_l+0xa30>
 801b1c2:	4b95      	ldr	r3, [pc, #596]	; (801b418 <_strtod_l+0xbf0>)
 801b1c4:	2200      	movs	r2, #0
 801b1c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b1ca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801b418 <_strtod_l+0xbf0>
 801b1ce:	f04f 0800 	mov.w	r8, #0
 801b1d2:	4b92      	ldr	r3, [pc, #584]	; (801b41c <_strtod_l+0xbf4>)
 801b1d4:	403b      	ands	r3, r7
 801b1d6:	930d      	str	r3, [sp, #52]	; 0x34
 801b1d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b1da:	4b91      	ldr	r3, [pc, #580]	; (801b420 <_strtod_l+0xbf8>)
 801b1dc:	429a      	cmp	r2, r3
 801b1de:	f040 80b0 	bne.w	801b342 <_strtod_l+0xb1a>
 801b1e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b1e6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801b1ea:	ec4b ab10 	vmov	d0, sl, fp
 801b1ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b1f2:	f002 fad5 	bl	801d7a0 <__ulp>
 801b1f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b1fa:	ec53 2b10 	vmov	r2, r3, d0
 801b1fe:	f7e5 fa13 	bl	8000628 <__aeabi_dmul>
 801b202:	4652      	mov	r2, sl
 801b204:	465b      	mov	r3, fp
 801b206:	f7e5 f859 	bl	80002bc <__adddf3>
 801b20a:	460b      	mov	r3, r1
 801b20c:	4983      	ldr	r1, [pc, #524]	; (801b41c <_strtod_l+0xbf4>)
 801b20e:	4a85      	ldr	r2, [pc, #532]	; (801b424 <_strtod_l+0xbfc>)
 801b210:	4019      	ands	r1, r3
 801b212:	4291      	cmp	r1, r2
 801b214:	4682      	mov	sl, r0
 801b216:	d960      	bls.n	801b2da <_strtod_l+0xab2>
 801b218:	ee18 3a90 	vmov	r3, s17
 801b21c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801b220:	4293      	cmp	r3, r2
 801b222:	d104      	bne.n	801b22e <_strtod_l+0xa06>
 801b224:	ee18 3a10 	vmov	r3, s16
 801b228:	3301      	adds	r3, #1
 801b22a:	f43f ad45 	beq.w	801acb8 <_strtod_l+0x490>
 801b22e:	f8df b200 	ldr.w	fp, [pc, #512]	; 801b430 <_strtod_l+0xc08>
 801b232:	f04f 3aff 	mov.w	sl, #4294967295
 801b236:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b238:	4620      	mov	r0, r4
 801b23a:	f001 ff7f 	bl	801d13c <_Bfree>
 801b23e:	9905      	ldr	r1, [sp, #20]
 801b240:	4620      	mov	r0, r4
 801b242:	f001 ff7b 	bl	801d13c <_Bfree>
 801b246:	4631      	mov	r1, r6
 801b248:	4620      	mov	r0, r4
 801b24a:	f001 ff77 	bl	801d13c <_Bfree>
 801b24e:	4629      	mov	r1, r5
 801b250:	4620      	mov	r0, r4
 801b252:	f001 ff73 	bl	801d13c <_Bfree>
 801b256:	e61a      	b.n	801ae8e <_strtod_l+0x666>
 801b258:	f1ba 0f00 	cmp.w	sl, #0
 801b25c:	d11b      	bne.n	801b296 <_strtod_l+0xa6e>
 801b25e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b262:	b9f3      	cbnz	r3, 801b2a2 <_strtod_l+0xa7a>
 801b264:	4b6c      	ldr	r3, [pc, #432]	; (801b418 <_strtod_l+0xbf0>)
 801b266:	2200      	movs	r2, #0
 801b268:	4640      	mov	r0, r8
 801b26a:	4649      	mov	r1, r9
 801b26c:	f7e5 fc4e 	bl	8000b0c <__aeabi_dcmplt>
 801b270:	b9d0      	cbnz	r0, 801b2a8 <_strtod_l+0xa80>
 801b272:	4640      	mov	r0, r8
 801b274:	4649      	mov	r1, r9
 801b276:	4b6c      	ldr	r3, [pc, #432]	; (801b428 <_strtod_l+0xc00>)
 801b278:	2200      	movs	r2, #0
 801b27a:	f7e5 f9d5 	bl	8000628 <__aeabi_dmul>
 801b27e:	4680      	mov	r8, r0
 801b280:	4689      	mov	r9, r1
 801b282:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b286:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801b28a:	9315      	str	r3, [sp, #84]	; 0x54
 801b28c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801b290:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b294:	e79d      	b.n	801b1d2 <_strtod_l+0x9aa>
 801b296:	f1ba 0f01 	cmp.w	sl, #1
 801b29a:	d102      	bne.n	801b2a2 <_strtod_l+0xa7a>
 801b29c:	2f00      	cmp	r7, #0
 801b29e:	f43f ad83 	beq.w	801ada8 <_strtod_l+0x580>
 801b2a2:	4b62      	ldr	r3, [pc, #392]	; (801b42c <_strtod_l+0xc04>)
 801b2a4:	2200      	movs	r2, #0
 801b2a6:	e78e      	b.n	801b1c6 <_strtod_l+0x99e>
 801b2a8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801b428 <_strtod_l+0xc00>
 801b2ac:	f04f 0800 	mov.w	r8, #0
 801b2b0:	e7e7      	b.n	801b282 <_strtod_l+0xa5a>
 801b2b2:	4b5d      	ldr	r3, [pc, #372]	; (801b428 <_strtod_l+0xc00>)
 801b2b4:	4640      	mov	r0, r8
 801b2b6:	4649      	mov	r1, r9
 801b2b8:	2200      	movs	r2, #0
 801b2ba:	f7e5 f9b5 	bl	8000628 <__aeabi_dmul>
 801b2be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b2c0:	4680      	mov	r8, r0
 801b2c2:	4689      	mov	r9, r1
 801b2c4:	b933      	cbnz	r3, 801b2d4 <_strtod_l+0xaac>
 801b2c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b2ca:	900e      	str	r0, [sp, #56]	; 0x38
 801b2cc:	930f      	str	r3, [sp, #60]	; 0x3c
 801b2ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801b2d2:	e7dd      	b.n	801b290 <_strtod_l+0xa68>
 801b2d4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801b2d8:	e7f9      	b.n	801b2ce <_strtod_l+0xaa6>
 801b2da:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801b2de:	9b04      	ldr	r3, [sp, #16]
 801b2e0:	2b00      	cmp	r3, #0
 801b2e2:	d1a8      	bne.n	801b236 <_strtod_l+0xa0e>
 801b2e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b2e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b2ea:	0d1b      	lsrs	r3, r3, #20
 801b2ec:	051b      	lsls	r3, r3, #20
 801b2ee:	429a      	cmp	r2, r3
 801b2f0:	d1a1      	bne.n	801b236 <_strtod_l+0xa0e>
 801b2f2:	4640      	mov	r0, r8
 801b2f4:	4649      	mov	r1, r9
 801b2f6:	f7e5 fcf7 	bl	8000ce8 <__aeabi_d2lz>
 801b2fa:	f7e5 f967 	bl	80005cc <__aeabi_l2d>
 801b2fe:	4602      	mov	r2, r0
 801b300:	460b      	mov	r3, r1
 801b302:	4640      	mov	r0, r8
 801b304:	4649      	mov	r1, r9
 801b306:	f7e4 ffd7 	bl	80002b8 <__aeabi_dsub>
 801b30a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b30c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b310:	ea43 030a 	orr.w	r3, r3, sl
 801b314:	4313      	orrs	r3, r2
 801b316:	4680      	mov	r8, r0
 801b318:	4689      	mov	r9, r1
 801b31a:	d055      	beq.n	801b3c8 <_strtod_l+0xba0>
 801b31c:	a336      	add	r3, pc, #216	; (adr r3, 801b3f8 <_strtod_l+0xbd0>)
 801b31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b322:	f7e5 fbf3 	bl	8000b0c <__aeabi_dcmplt>
 801b326:	2800      	cmp	r0, #0
 801b328:	f47f acd0 	bne.w	801accc <_strtod_l+0x4a4>
 801b32c:	a334      	add	r3, pc, #208	; (adr r3, 801b400 <_strtod_l+0xbd8>)
 801b32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b332:	4640      	mov	r0, r8
 801b334:	4649      	mov	r1, r9
 801b336:	f7e5 fc07 	bl	8000b48 <__aeabi_dcmpgt>
 801b33a:	2800      	cmp	r0, #0
 801b33c:	f43f af7b 	beq.w	801b236 <_strtod_l+0xa0e>
 801b340:	e4c4      	b.n	801accc <_strtod_l+0x4a4>
 801b342:	9b04      	ldr	r3, [sp, #16]
 801b344:	b333      	cbz	r3, 801b394 <_strtod_l+0xb6c>
 801b346:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b348:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801b34c:	d822      	bhi.n	801b394 <_strtod_l+0xb6c>
 801b34e:	a32e      	add	r3, pc, #184	; (adr r3, 801b408 <_strtod_l+0xbe0>)
 801b350:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b354:	4640      	mov	r0, r8
 801b356:	4649      	mov	r1, r9
 801b358:	f7e5 fbe2 	bl	8000b20 <__aeabi_dcmple>
 801b35c:	b1a0      	cbz	r0, 801b388 <_strtod_l+0xb60>
 801b35e:	4649      	mov	r1, r9
 801b360:	4640      	mov	r0, r8
 801b362:	f7e5 fc39 	bl	8000bd8 <__aeabi_d2uiz>
 801b366:	2801      	cmp	r0, #1
 801b368:	bf38      	it	cc
 801b36a:	2001      	movcc	r0, #1
 801b36c:	f7e5 f8e2 	bl	8000534 <__aeabi_ui2d>
 801b370:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b372:	4680      	mov	r8, r0
 801b374:	4689      	mov	r9, r1
 801b376:	bb23      	cbnz	r3, 801b3c2 <_strtod_l+0xb9a>
 801b378:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b37c:	9010      	str	r0, [sp, #64]	; 0x40
 801b37e:	9311      	str	r3, [sp, #68]	; 0x44
 801b380:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801b384:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b38a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b38c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801b390:	1a9b      	subs	r3, r3, r2
 801b392:	9309      	str	r3, [sp, #36]	; 0x24
 801b394:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b398:	eeb0 0a48 	vmov.f32	s0, s16
 801b39c:	eef0 0a68 	vmov.f32	s1, s17
 801b3a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b3a4:	f002 f9fc 	bl	801d7a0 <__ulp>
 801b3a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b3ac:	ec53 2b10 	vmov	r2, r3, d0
 801b3b0:	f7e5 f93a 	bl	8000628 <__aeabi_dmul>
 801b3b4:	ec53 2b18 	vmov	r2, r3, d8
 801b3b8:	f7e4 ff80 	bl	80002bc <__adddf3>
 801b3bc:	4682      	mov	sl, r0
 801b3be:	468b      	mov	fp, r1
 801b3c0:	e78d      	b.n	801b2de <_strtod_l+0xab6>
 801b3c2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801b3c6:	e7db      	b.n	801b380 <_strtod_l+0xb58>
 801b3c8:	a311      	add	r3, pc, #68	; (adr r3, 801b410 <_strtod_l+0xbe8>)
 801b3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3ce:	f7e5 fb9d 	bl	8000b0c <__aeabi_dcmplt>
 801b3d2:	e7b2      	b.n	801b33a <_strtod_l+0xb12>
 801b3d4:	2300      	movs	r3, #0
 801b3d6:	930a      	str	r3, [sp, #40]	; 0x28
 801b3d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b3da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b3dc:	6013      	str	r3, [r2, #0]
 801b3de:	f7ff ba6b 	b.w	801a8b8 <_strtod_l+0x90>
 801b3e2:	2a65      	cmp	r2, #101	; 0x65
 801b3e4:	f43f ab5f 	beq.w	801aaa6 <_strtod_l+0x27e>
 801b3e8:	2a45      	cmp	r2, #69	; 0x45
 801b3ea:	f43f ab5c 	beq.w	801aaa6 <_strtod_l+0x27e>
 801b3ee:	2301      	movs	r3, #1
 801b3f0:	f7ff bb94 	b.w	801ab1c <_strtod_l+0x2f4>
 801b3f4:	f3af 8000 	nop.w
 801b3f8:	94a03595 	.word	0x94a03595
 801b3fc:	3fdfffff 	.word	0x3fdfffff
 801b400:	35afe535 	.word	0x35afe535
 801b404:	3fe00000 	.word	0x3fe00000
 801b408:	ffc00000 	.word	0xffc00000
 801b40c:	41dfffff 	.word	0x41dfffff
 801b410:	94a03595 	.word	0x94a03595
 801b414:	3fcfffff 	.word	0x3fcfffff
 801b418:	3ff00000 	.word	0x3ff00000
 801b41c:	7ff00000 	.word	0x7ff00000
 801b420:	7fe00000 	.word	0x7fe00000
 801b424:	7c9fffff 	.word	0x7c9fffff
 801b428:	3fe00000 	.word	0x3fe00000
 801b42c:	bff00000 	.word	0xbff00000
 801b430:	7fefffff 	.word	0x7fefffff

0801b434 <_strtod_r>:
 801b434:	4b01      	ldr	r3, [pc, #4]	; (801b43c <_strtod_r+0x8>)
 801b436:	f7ff b9f7 	b.w	801a828 <_strtod_l>
 801b43a:	bf00      	nop
 801b43c:	200001a8 	.word	0x200001a8

0801b440 <strtok>:
 801b440:	4b16      	ldr	r3, [pc, #88]	; (801b49c <strtok+0x5c>)
 801b442:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b444:	681e      	ldr	r6, [r3, #0]
 801b446:	6db4      	ldr	r4, [r6, #88]	; 0x58
 801b448:	4605      	mov	r5, r0
 801b44a:	b9fc      	cbnz	r4, 801b48c <strtok+0x4c>
 801b44c:	2050      	movs	r0, #80	; 0x50
 801b44e:	9101      	str	r1, [sp, #4]
 801b450:	f7fe f944 	bl	80196dc <malloc>
 801b454:	9901      	ldr	r1, [sp, #4]
 801b456:	65b0      	str	r0, [r6, #88]	; 0x58
 801b458:	4602      	mov	r2, r0
 801b45a:	b920      	cbnz	r0, 801b466 <strtok+0x26>
 801b45c:	4b10      	ldr	r3, [pc, #64]	; (801b4a0 <strtok+0x60>)
 801b45e:	4811      	ldr	r0, [pc, #68]	; (801b4a4 <strtok+0x64>)
 801b460:	2157      	movs	r1, #87	; 0x57
 801b462:	f000 f9d1 	bl	801b808 <__assert_func>
 801b466:	e9c0 4400 	strd	r4, r4, [r0]
 801b46a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801b46e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801b472:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801b476:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801b47a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801b47e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801b482:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801b486:	6184      	str	r4, [r0, #24]
 801b488:	7704      	strb	r4, [r0, #28]
 801b48a:	6244      	str	r4, [r0, #36]	; 0x24
 801b48c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801b48e:	2301      	movs	r3, #1
 801b490:	4628      	mov	r0, r5
 801b492:	b002      	add	sp, #8
 801b494:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b498:	f000 b806 	b.w	801b4a8 <__strtok_r>
 801b49c:	20000140 	.word	0x20000140
 801b4a0:	08020138 	.word	0x08020138
 801b4a4:	0802014f 	.word	0x0802014f

0801b4a8 <__strtok_r>:
 801b4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b4aa:	b908      	cbnz	r0, 801b4b0 <__strtok_r+0x8>
 801b4ac:	6810      	ldr	r0, [r2, #0]
 801b4ae:	b188      	cbz	r0, 801b4d4 <__strtok_r+0x2c>
 801b4b0:	4604      	mov	r4, r0
 801b4b2:	4620      	mov	r0, r4
 801b4b4:	f814 5b01 	ldrb.w	r5, [r4], #1
 801b4b8:	460f      	mov	r7, r1
 801b4ba:	f817 6b01 	ldrb.w	r6, [r7], #1
 801b4be:	b91e      	cbnz	r6, 801b4c8 <__strtok_r+0x20>
 801b4c0:	b965      	cbnz	r5, 801b4dc <__strtok_r+0x34>
 801b4c2:	6015      	str	r5, [r2, #0]
 801b4c4:	4628      	mov	r0, r5
 801b4c6:	e005      	b.n	801b4d4 <__strtok_r+0x2c>
 801b4c8:	42b5      	cmp	r5, r6
 801b4ca:	d1f6      	bne.n	801b4ba <__strtok_r+0x12>
 801b4cc:	2b00      	cmp	r3, #0
 801b4ce:	d1f0      	bne.n	801b4b2 <__strtok_r+0xa>
 801b4d0:	6014      	str	r4, [r2, #0]
 801b4d2:	7003      	strb	r3, [r0, #0]
 801b4d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b4d6:	461c      	mov	r4, r3
 801b4d8:	e00c      	b.n	801b4f4 <__strtok_r+0x4c>
 801b4da:	b915      	cbnz	r5, 801b4e2 <__strtok_r+0x3a>
 801b4dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b4e0:	460e      	mov	r6, r1
 801b4e2:	f816 5b01 	ldrb.w	r5, [r6], #1
 801b4e6:	42ab      	cmp	r3, r5
 801b4e8:	d1f7      	bne.n	801b4da <__strtok_r+0x32>
 801b4ea:	2b00      	cmp	r3, #0
 801b4ec:	d0f3      	beq.n	801b4d6 <__strtok_r+0x2e>
 801b4ee:	2300      	movs	r3, #0
 801b4f0:	f804 3c01 	strb.w	r3, [r4, #-1]
 801b4f4:	6014      	str	r4, [r2, #0]
 801b4f6:	e7ed      	b.n	801b4d4 <__strtok_r+0x2c>

0801b4f8 <_strtol_l.constprop.0>:
 801b4f8:	2b01      	cmp	r3, #1
 801b4fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b4fe:	d001      	beq.n	801b504 <_strtol_l.constprop.0+0xc>
 801b500:	2b24      	cmp	r3, #36	; 0x24
 801b502:	d906      	bls.n	801b512 <_strtol_l.constprop.0+0x1a>
 801b504:	f7fe f84e 	bl	80195a4 <__errno>
 801b508:	2316      	movs	r3, #22
 801b50a:	6003      	str	r3, [r0, #0]
 801b50c:	2000      	movs	r0, #0
 801b50e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b512:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801b5f8 <_strtol_l.constprop.0+0x100>
 801b516:	460d      	mov	r5, r1
 801b518:	462e      	mov	r6, r5
 801b51a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b51e:	f814 700c 	ldrb.w	r7, [r4, ip]
 801b522:	f017 0708 	ands.w	r7, r7, #8
 801b526:	d1f7      	bne.n	801b518 <_strtol_l.constprop.0+0x20>
 801b528:	2c2d      	cmp	r4, #45	; 0x2d
 801b52a:	d132      	bne.n	801b592 <_strtol_l.constprop.0+0x9a>
 801b52c:	782c      	ldrb	r4, [r5, #0]
 801b52e:	2701      	movs	r7, #1
 801b530:	1cb5      	adds	r5, r6, #2
 801b532:	2b00      	cmp	r3, #0
 801b534:	d05b      	beq.n	801b5ee <_strtol_l.constprop.0+0xf6>
 801b536:	2b10      	cmp	r3, #16
 801b538:	d109      	bne.n	801b54e <_strtol_l.constprop.0+0x56>
 801b53a:	2c30      	cmp	r4, #48	; 0x30
 801b53c:	d107      	bne.n	801b54e <_strtol_l.constprop.0+0x56>
 801b53e:	782c      	ldrb	r4, [r5, #0]
 801b540:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801b544:	2c58      	cmp	r4, #88	; 0x58
 801b546:	d14d      	bne.n	801b5e4 <_strtol_l.constprop.0+0xec>
 801b548:	786c      	ldrb	r4, [r5, #1]
 801b54a:	2310      	movs	r3, #16
 801b54c:	3502      	adds	r5, #2
 801b54e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801b552:	f108 38ff 	add.w	r8, r8, #4294967295
 801b556:	f04f 0c00 	mov.w	ip, #0
 801b55a:	fbb8 f9f3 	udiv	r9, r8, r3
 801b55e:	4666      	mov	r6, ip
 801b560:	fb03 8a19 	mls	sl, r3, r9, r8
 801b564:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801b568:	f1be 0f09 	cmp.w	lr, #9
 801b56c:	d816      	bhi.n	801b59c <_strtol_l.constprop.0+0xa4>
 801b56e:	4674      	mov	r4, lr
 801b570:	42a3      	cmp	r3, r4
 801b572:	dd24      	ble.n	801b5be <_strtol_l.constprop.0+0xc6>
 801b574:	f1bc 0f00 	cmp.w	ip, #0
 801b578:	db1e      	blt.n	801b5b8 <_strtol_l.constprop.0+0xc0>
 801b57a:	45b1      	cmp	r9, r6
 801b57c:	d31c      	bcc.n	801b5b8 <_strtol_l.constprop.0+0xc0>
 801b57e:	d101      	bne.n	801b584 <_strtol_l.constprop.0+0x8c>
 801b580:	45a2      	cmp	sl, r4
 801b582:	db19      	blt.n	801b5b8 <_strtol_l.constprop.0+0xc0>
 801b584:	fb06 4603 	mla	r6, r6, r3, r4
 801b588:	f04f 0c01 	mov.w	ip, #1
 801b58c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b590:	e7e8      	b.n	801b564 <_strtol_l.constprop.0+0x6c>
 801b592:	2c2b      	cmp	r4, #43	; 0x2b
 801b594:	bf04      	itt	eq
 801b596:	782c      	ldrbeq	r4, [r5, #0]
 801b598:	1cb5      	addeq	r5, r6, #2
 801b59a:	e7ca      	b.n	801b532 <_strtol_l.constprop.0+0x3a>
 801b59c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801b5a0:	f1be 0f19 	cmp.w	lr, #25
 801b5a4:	d801      	bhi.n	801b5aa <_strtol_l.constprop.0+0xb2>
 801b5a6:	3c37      	subs	r4, #55	; 0x37
 801b5a8:	e7e2      	b.n	801b570 <_strtol_l.constprop.0+0x78>
 801b5aa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801b5ae:	f1be 0f19 	cmp.w	lr, #25
 801b5b2:	d804      	bhi.n	801b5be <_strtol_l.constprop.0+0xc6>
 801b5b4:	3c57      	subs	r4, #87	; 0x57
 801b5b6:	e7db      	b.n	801b570 <_strtol_l.constprop.0+0x78>
 801b5b8:	f04f 3cff 	mov.w	ip, #4294967295
 801b5bc:	e7e6      	b.n	801b58c <_strtol_l.constprop.0+0x94>
 801b5be:	f1bc 0f00 	cmp.w	ip, #0
 801b5c2:	da05      	bge.n	801b5d0 <_strtol_l.constprop.0+0xd8>
 801b5c4:	2322      	movs	r3, #34	; 0x22
 801b5c6:	6003      	str	r3, [r0, #0]
 801b5c8:	4646      	mov	r6, r8
 801b5ca:	b942      	cbnz	r2, 801b5de <_strtol_l.constprop.0+0xe6>
 801b5cc:	4630      	mov	r0, r6
 801b5ce:	e79e      	b.n	801b50e <_strtol_l.constprop.0+0x16>
 801b5d0:	b107      	cbz	r7, 801b5d4 <_strtol_l.constprop.0+0xdc>
 801b5d2:	4276      	negs	r6, r6
 801b5d4:	2a00      	cmp	r2, #0
 801b5d6:	d0f9      	beq.n	801b5cc <_strtol_l.constprop.0+0xd4>
 801b5d8:	f1bc 0f00 	cmp.w	ip, #0
 801b5dc:	d000      	beq.n	801b5e0 <_strtol_l.constprop.0+0xe8>
 801b5de:	1e69      	subs	r1, r5, #1
 801b5e0:	6011      	str	r1, [r2, #0]
 801b5e2:	e7f3      	b.n	801b5cc <_strtol_l.constprop.0+0xd4>
 801b5e4:	2430      	movs	r4, #48	; 0x30
 801b5e6:	2b00      	cmp	r3, #0
 801b5e8:	d1b1      	bne.n	801b54e <_strtol_l.constprop.0+0x56>
 801b5ea:	2308      	movs	r3, #8
 801b5ec:	e7af      	b.n	801b54e <_strtol_l.constprop.0+0x56>
 801b5ee:	2c30      	cmp	r4, #48	; 0x30
 801b5f0:	d0a5      	beq.n	801b53e <_strtol_l.constprop.0+0x46>
 801b5f2:	230a      	movs	r3, #10
 801b5f4:	e7ab      	b.n	801b54e <_strtol_l.constprop.0+0x56>
 801b5f6:	bf00      	nop
 801b5f8:	080201e9 	.word	0x080201e9

0801b5fc <_strtol_r>:
 801b5fc:	f7ff bf7c 	b.w	801b4f8 <_strtol_l.constprop.0>

0801b600 <strtol>:
 801b600:	4613      	mov	r3, r2
 801b602:	460a      	mov	r2, r1
 801b604:	4601      	mov	r1, r0
 801b606:	4802      	ldr	r0, [pc, #8]	; (801b610 <strtol+0x10>)
 801b608:	6800      	ldr	r0, [r0, #0]
 801b60a:	f7ff bf75 	b.w	801b4f8 <_strtol_l.constprop.0>
 801b60e:	bf00      	nop
 801b610:	20000140 	.word	0x20000140

0801b614 <_vsniprintf_r>:
 801b614:	b530      	push	{r4, r5, lr}
 801b616:	4614      	mov	r4, r2
 801b618:	2c00      	cmp	r4, #0
 801b61a:	b09b      	sub	sp, #108	; 0x6c
 801b61c:	4605      	mov	r5, r0
 801b61e:	461a      	mov	r2, r3
 801b620:	da05      	bge.n	801b62e <_vsniprintf_r+0x1a>
 801b622:	238b      	movs	r3, #139	; 0x8b
 801b624:	6003      	str	r3, [r0, #0]
 801b626:	f04f 30ff 	mov.w	r0, #4294967295
 801b62a:	b01b      	add	sp, #108	; 0x6c
 801b62c:	bd30      	pop	{r4, r5, pc}
 801b62e:	f44f 7302 	mov.w	r3, #520	; 0x208
 801b632:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b636:	bf14      	ite	ne
 801b638:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b63c:	4623      	moveq	r3, r4
 801b63e:	9302      	str	r3, [sp, #8]
 801b640:	9305      	str	r3, [sp, #20]
 801b642:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b646:	9100      	str	r1, [sp, #0]
 801b648:	9104      	str	r1, [sp, #16]
 801b64a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b64e:	4669      	mov	r1, sp
 801b650:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801b652:	f002 fa65 	bl	801db20 <_svfiprintf_r>
 801b656:	1c43      	adds	r3, r0, #1
 801b658:	bfbc      	itt	lt
 801b65a:	238b      	movlt	r3, #139	; 0x8b
 801b65c:	602b      	strlt	r3, [r5, #0]
 801b65e:	2c00      	cmp	r4, #0
 801b660:	d0e3      	beq.n	801b62a <_vsniprintf_r+0x16>
 801b662:	9b00      	ldr	r3, [sp, #0]
 801b664:	2200      	movs	r2, #0
 801b666:	701a      	strb	r2, [r3, #0]
 801b668:	e7df      	b.n	801b62a <_vsniprintf_r+0x16>
	...

0801b66c <vsniprintf>:
 801b66c:	b507      	push	{r0, r1, r2, lr}
 801b66e:	9300      	str	r3, [sp, #0]
 801b670:	4613      	mov	r3, r2
 801b672:	460a      	mov	r2, r1
 801b674:	4601      	mov	r1, r0
 801b676:	4803      	ldr	r0, [pc, #12]	; (801b684 <vsniprintf+0x18>)
 801b678:	6800      	ldr	r0, [r0, #0]
 801b67a:	f7ff ffcb 	bl	801b614 <_vsniprintf_r>
 801b67e:	b003      	add	sp, #12
 801b680:	f85d fb04 	ldr.w	pc, [sp], #4
 801b684:	20000140 	.word	0x20000140

0801b688 <__swbuf_r>:
 801b688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b68a:	460e      	mov	r6, r1
 801b68c:	4614      	mov	r4, r2
 801b68e:	4605      	mov	r5, r0
 801b690:	b118      	cbz	r0, 801b69a <__swbuf_r+0x12>
 801b692:	6983      	ldr	r3, [r0, #24]
 801b694:	b90b      	cbnz	r3, 801b69a <__swbuf_r+0x12>
 801b696:	f001 f86b 	bl	801c770 <__sinit>
 801b69a:	4b21      	ldr	r3, [pc, #132]	; (801b720 <__swbuf_r+0x98>)
 801b69c:	429c      	cmp	r4, r3
 801b69e:	d12b      	bne.n	801b6f8 <__swbuf_r+0x70>
 801b6a0:	686c      	ldr	r4, [r5, #4]
 801b6a2:	69a3      	ldr	r3, [r4, #24]
 801b6a4:	60a3      	str	r3, [r4, #8]
 801b6a6:	89a3      	ldrh	r3, [r4, #12]
 801b6a8:	071a      	lsls	r2, r3, #28
 801b6aa:	d52f      	bpl.n	801b70c <__swbuf_r+0x84>
 801b6ac:	6923      	ldr	r3, [r4, #16]
 801b6ae:	b36b      	cbz	r3, 801b70c <__swbuf_r+0x84>
 801b6b0:	6923      	ldr	r3, [r4, #16]
 801b6b2:	6820      	ldr	r0, [r4, #0]
 801b6b4:	1ac0      	subs	r0, r0, r3
 801b6b6:	6963      	ldr	r3, [r4, #20]
 801b6b8:	b2f6      	uxtb	r6, r6
 801b6ba:	4283      	cmp	r3, r0
 801b6bc:	4637      	mov	r7, r6
 801b6be:	dc04      	bgt.n	801b6ca <__swbuf_r+0x42>
 801b6c0:	4621      	mov	r1, r4
 801b6c2:	4628      	mov	r0, r5
 801b6c4:	f000 ffc0 	bl	801c648 <_fflush_r>
 801b6c8:	bb30      	cbnz	r0, 801b718 <__swbuf_r+0x90>
 801b6ca:	68a3      	ldr	r3, [r4, #8]
 801b6cc:	3b01      	subs	r3, #1
 801b6ce:	60a3      	str	r3, [r4, #8]
 801b6d0:	6823      	ldr	r3, [r4, #0]
 801b6d2:	1c5a      	adds	r2, r3, #1
 801b6d4:	6022      	str	r2, [r4, #0]
 801b6d6:	701e      	strb	r6, [r3, #0]
 801b6d8:	6963      	ldr	r3, [r4, #20]
 801b6da:	3001      	adds	r0, #1
 801b6dc:	4283      	cmp	r3, r0
 801b6de:	d004      	beq.n	801b6ea <__swbuf_r+0x62>
 801b6e0:	89a3      	ldrh	r3, [r4, #12]
 801b6e2:	07db      	lsls	r3, r3, #31
 801b6e4:	d506      	bpl.n	801b6f4 <__swbuf_r+0x6c>
 801b6e6:	2e0a      	cmp	r6, #10
 801b6e8:	d104      	bne.n	801b6f4 <__swbuf_r+0x6c>
 801b6ea:	4621      	mov	r1, r4
 801b6ec:	4628      	mov	r0, r5
 801b6ee:	f000 ffab 	bl	801c648 <_fflush_r>
 801b6f2:	b988      	cbnz	r0, 801b718 <__swbuf_r+0x90>
 801b6f4:	4638      	mov	r0, r7
 801b6f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b6f8:	4b0a      	ldr	r3, [pc, #40]	; (801b724 <__swbuf_r+0x9c>)
 801b6fa:	429c      	cmp	r4, r3
 801b6fc:	d101      	bne.n	801b702 <__swbuf_r+0x7a>
 801b6fe:	68ac      	ldr	r4, [r5, #8]
 801b700:	e7cf      	b.n	801b6a2 <__swbuf_r+0x1a>
 801b702:	4b09      	ldr	r3, [pc, #36]	; (801b728 <__swbuf_r+0xa0>)
 801b704:	429c      	cmp	r4, r3
 801b706:	bf08      	it	eq
 801b708:	68ec      	ldreq	r4, [r5, #12]
 801b70a:	e7ca      	b.n	801b6a2 <__swbuf_r+0x1a>
 801b70c:	4621      	mov	r1, r4
 801b70e:	4628      	mov	r0, r5
 801b710:	f000 f80c 	bl	801b72c <__swsetup_r>
 801b714:	2800      	cmp	r0, #0
 801b716:	d0cb      	beq.n	801b6b0 <__swbuf_r+0x28>
 801b718:	f04f 37ff 	mov.w	r7, #4294967295
 801b71c:	e7ea      	b.n	801b6f4 <__swbuf_r+0x6c>
 801b71e:	bf00      	nop
 801b720:	08020384 	.word	0x08020384
 801b724:	080203a4 	.word	0x080203a4
 801b728:	08020364 	.word	0x08020364

0801b72c <__swsetup_r>:
 801b72c:	4b32      	ldr	r3, [pc, #200]	; (801b7f8 <__swsetup_r+0xcc>)
 801b72e:	b570      	push	{r4, r5, r6, lr}
 801b730:	681d      	ldr	r5, [r3, #0]
 801b732:	4606      	mov	r6, r0
 801b734:	460c      	mov	r4, r1
 801b736:	b125      	cbz	r5, 801b742 <__swsetup_r+0x16>
 801b738:	69ab      	ldr	r3, [r5, #24]
 801b73a:	b913      	cbnz	r3, 801b742 <__swsetup_r+0x16>
 801b73c:	4628      	mov	r0, r5
 801b73e:	f001 f817 	bl	801c770 <__sinit>
 801b742:	4b2e      	ldr	r3, [pc, #184]	; (801b7fc <__swsetup_r+0xd0>)
 801b744:	429c      	cmp	r4, r3
 801b746:	d10f      	bne.n	801b768 <__swsetup_r+0x3c>
 801b748:	686c      	ldr	r4, [r5, #4]
 801b74a:	89a3      	ldrh	r3, [r4, #12]
 801b74c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b750:	0719      	lsls	r1, r3, #28
 801b752:	d42c      	bmi.n	801b7ae <__swsetup_r+0x82>
 801b754:	06dd      	lsls	r5, r3, #27
 801b756:	d411      	bmi.n	801b77c <__swsetup_r+0x50>
 801b758:	2309      	movs	r3, #9
 801b75a:	6033      	str	r3, [r6, #0]
 801b75c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b760:	81a3      	strh	r3, [r4, #12]
 801b762:	f04f 30ff 	mov.w	r0, #4294967295
 801b766:	e03e      	b.n	801b7e6 <__swsetup_r+0xba>
 801b768:	4b25      	ldr	r3, [pc, #148]	; (801b800 <__swsetup_r+0xd4>)
 801b76a:	429c      	cmp	r4, r3
 801b76c:	d101      	bne.n	801b772 <__swsetup_r+0x46>
 801b76e:	68ac      	ldr	r4, [r5, #8]
 801b770:	e7eb      	b.n	801b74a <__swsetup_r+0x1e>
 801b772:	4b24      	ldr	r3, [pc, #144]	; (801b804 <__swsetup_r+0xd8>)
 801b774:	429c      	cmp	r4, r3
 801b776:	bf08      	it	eq
 801b778:	68ec      	ldreq	r4, [r5, #12]
 801b77a:	e7e6      	b.n	801b74a <__swsetup_r+0x1e>
 801b77c:	0758      	lsls	r0, r3, #29
 801b77e:	d512      	bpl.n	801b7a6 <__swsetup_r+0x7a>
 801b780:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b782:	b141      	cbz	r1, 801b796 <__swsetup_r+0x6a>
 801b784:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b788:	4299      	cmp	r1, r3
 801b78a:	d002      	beq.n	801b792 <__swsetup_r+0x66>
 801b78c:	4630      	mov	r0, r6
 801b78e:	f7fd ffe5 	bl	801975c <_free_r>
 801b792:	2300      	movs	r3, #0
 801b794:	6363      	str	r3, [r4, #52]	; 0x34
 801b796:	89a3      	ldrh	r3, [r4, #12]
 801b798:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b79c:	81a3      	strh	r3, [r4, #12]
 801b79e:	2300      	movs	r3, #0
 801b7a0:	6063      	str	r3, [r4, #4]
 801b7a2:	6923      	ldr	r3, [r4, #16]
 801b7a4:	6023      	str	r3, [r4, #0]
 801b7a6:	89a3      	ldrh	r3, [r4, #12]
 801b7a8:	f043 0308 	orr.w	r3, r3, #8
 801b7ac:	81a3      	strh	r3, [r4, #12]
 801b7ae:	6923      	ldr	r3, [r4, #16]
 801b7b0:	b94b      	cbnz	r3, 801b7c6 <__swsetup_r+0x9a>
 801b7b2:	89a3      	ldrh	r3, [r4, #12]
 801b7b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b7b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b7bc:	d003      	beq.n	801b7c6 <__swsetup_r+0x9a>
 801b7be:	4621      	mov	r1, r4
 801b7c0:	4630      	mov	r0, r6
 801b7c2:	f001 fc1d 	bl	801d000 <__smakebuf_r>
 801b7c6:	89a0      	ldrh	r0, [r4, #12]
 801b7c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b7cc:	f010 0301 	ands.w	r3, r0, #1
 801b7d0:	d00a      	beq.n	801b7e8 <__swsetup_r+0xbc>
 801b7d2:	2300      	movs	r3, #0
 801b7d4:	60a3      	str	r3, [r4, #8]
 801b7d6:	6963      	ldr	r3, [r4, #20]
 801b7d8:	425b      	negs	r3, r3
 801b7da:	61a3      	str	r3, [r4, #24]
 801b7dc:	6923      	ldr	r3, [r4, #16]
 801b7de:	b943      	cbnz	r3, 801b7f2 <__swsetup_r+0xc6>
 801b7e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b7e4:	d1ba      	bne.n	801b75c <__swsetup_r+0x30>
 801b7e6:	bd70      	pop	{r4, r5, r6, pc}
 801b7e8:	0781      	lsls	r1, r0, #30
 801b7ea:	bf58      	it	pl
 801b7ec:	6963      	ldrpl	r3, [r4, #20]
 801b7ee:	60a3      	str	r3, [r4, #8]
 801b7f0:	e7f4      	b.n	801b7dc <__swsetup_r+0xb0>
 801b7f2:	2000      	movs	r0, #0
 801b7f4:	e7f7      	b.n	801b7e6 <__swsetup_r+0xba>
 801b7f6:	bf00      	nop
 801b7f8:	20000140 	.word	0x20000140
 801b7fc:	08020384 	.word	0x08020384
 801b800:	080203a4 	.word	0x080203a4
 801b804:	08020364 	.word	0x08020364

0801b808 <__assert_func>:
 801b808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b80a:	4614      	mov	r4, r2
 801b80c:	461a      	mov	r2, r3
 801b80e:	4b09      	ldr	r3, [pc, #36]	; (801b834 <__assert_func+0x2c>)
 801b810:	681b      	ldr	r3, [r3, #0]
 801b812:	4605      	mov	r5, r0
 801b814:	68d8      	ldr	r0, [r3, #12]
 801b816:	b14c      	cbz	r4, 801b82c <__assert_func+0x24>
 801b818:	4b07      	ldr	r3, [pc, #28]	; (801b838 <__assert_func+0x30>)
 801b81a:	9100      	str	r1, [sp, #0]
 801b81c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b820:	4906      	ldr	r1, [pc, #24]	; (801b83c <__assert_func+0x34>)
 801b822:	462b      	mov	r3, r5
 801b824:	f001 f822 	bl	801c86c <fiprintf>
 801b828:	f002 fc54 	bl	801e0d4 <abort>
 801b82c:	4b04      	ldr	r3, [pc, #16]	; (801b840 <__assert_func+0x38>)
 801b82e:	461c      	mov	r4, r3
 801b830:	e7f3      	b.n	801b81a <__assert_func+0x12>
 801b832:	bf00      	nop
 801b834:	20000140 	.word	0x20000140
 801b838:	080201ac 	.word	0x080201ac
 801b83c:	080201b9 	.word	0x080201b9
 801b840:	080201e7 	.word	0x080201e7

0801b844 <quorem>:
 801b844:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b848:	6903      	ldr	r3, [r0, #16]
 801b84a:	690c      	ldr	r4, [r1, #16]
 801b84c:	42a3      	cmp	r3, r4
 801b84e:	4607      	mov	r7, r0
 801b850:	f2c0 8081 	blt.w	801b956 <quorem+0x112>
 801b854:	3c01      	subs	r4, #1
 801b856:	f101 0814 	add.w	r8, r1, #20
 801b85a:	f100 0514 	add.w	r5, r0, #20
 801b85e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b862:	9301      	str	r3, [sp, #4]
 801b864:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b868:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b86c:	3301      	adds	r3, #1
 801b86e:	429a      	cmp	r2, r3
 801b870:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801b874:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b878:	fbb2 f6f3 	udiv	r6, r2, r3
 801b87c:	d331      	bcc.n	801b8e2 <quorem+0x9e>
 801b87e:	f04f 0e00 	mov.w	lr, #0
 801b882:	4640      	mov	r0, r8
 801b884:	46ac      	mov	ip, r5
 801b886:	46f2      	mov	sl, lr
 801b888:	f850 2b04 	ldr.w	r2, [r0], #4
 801b88c:	b293      	uxth	r3, r2
 801b88e:	fb06 e303 	mla	r3, r6, r3, lr
 801b892:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801b896:	b29b      	uxth	r3, r3
 801b898:	ebaa 0303 	sub.w	r3, sl, r3
 801b89c:	f8dc a000 	ldr.w	sl, [ip]
 801b8a0:	0c12      	lsrs	r2, r2, #16
 801b8a2:	fa13 f38a 	uxtah	r3, r3, sl
 801b8a6:	fb06 e202 	mla	r2, r6, r2, lr
 801b8aa:	9300      	str	r3, [sp, #0]
 801b8ac:	9b00      	ldr	r3, [sp, #0]
 801b8ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b8b2:	b292      	uxth	r2, r2
 801b8b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801b8b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b8bc:	f8bd 3000 	ldrh.w	r3, [sp]
 801b8c0:	4581      	cmp	r9, r0
 801b8c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b8c6:	f84c 3b04 	str.w	r3, [ip], #4
 801b8ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801b8ce:	d2db      	bcs.n	801b888 <quorem+0x44>
 801b8d0:	f855 300b 	ldr.w	r3, [r5, fp]
 801b8d4:	b92b      	cbnz	r3, 801b8e2 <quorem+0x9e>
 801b8d6:	9b01      	ldr	r3, [sp, #4]
 801b8d8:	3b04      	subs	r3, #4
 801b8da:	429d      	cmp	r5, r3
 801b8dc:	461a      	mov	r2, r3
 801b8de:	d32e      	bcc.n	801b93e <quorem+0xfa>
 801b8e0:	613c      	str	r4, [r7, #16]
 801b8e2:	4638      	mov	r0, r7
 801b8e4:	f001 feb6 	bl	801d654 <__mcmp>
 801b8e8:	2800      	cmp	r0, #0
 801b8ea:	db24      	blt.n	801b936 <quorem+0xf2>
 801b8ec:	3601      	adds	r6, #1
 801b8ee:	4628      	mov	r0, r5
 801b8f0:	f04f 0c00 	mov.w	ip, #0
 801b8f4:	f858 2b04 	ldr.w	r2, [r8], #4
 801b8f8:	f8d0 e000 	ldr.w	lr, [r0]
 801b8fc:	b293      	uxth	r3, r2
 801b8fe:	ebac 0303 	sub.w	r3, ip, r3
 801b902:	0c12      	lsrs	r2, r2, #16
 801b904:	fa13 f38e 	uxtah	r3, r3, lr
 801b908:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801b90c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b910:	b29b      	uxth	r3, r3
 801b912:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b916:	45c1      	cmp	r9, r8
 801b918:	f840 3b04 	str.w	r3, [r0], #4
 801b91c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801b920:	d2e8      	bcs.n	801b8f4 <quorem+0xb0>
 801b922:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b926:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b92a:	b922      	cbnz	r2, 801b936 <quorem+0xf2>
 801b92c:	3b04      	subs	r3, #4
 801b92e:	429d      	cmp	r5, r3
 801b930:	461a      	mov	r2, r3
 801b932:	d30a      	bcc.n	801b94a <quorem+0x106>
 801b934:	613c      	str	r4, [r7, #16]
 801b936:	4630      	mov	r0, r6
 801b938:	b003      	add	sp, #12
 801b93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b93e:	6812      	ldr	r2, [r2, #0]
 801b940:	3b04      	subs	r3, #4
 801b942:	2a00      	cmp	r2, #0
 801b944:	d1cc      	bne.n	801b8e0 <quorem+0x9c>
 801b946:	3c01      	subs	r4, #1
 801b948:	e7c7      	b.n	801b8da <quorem+0x96>
 801b94a:	6812      	ldr	r2, [r2, #0]
 801b94c:	3b04      	subs	r3, #4
 801b94e:	2a00      	cmp	r2, #0
 801b950:	d1f0      	bne.n	801b934 <quorem+0xf0>
 801b952:	3c01      	subs	r4, #1
 801b954:	e7eb      	b.n	801b92e <quorem+0xea>
 801b956:	2000      	movs	r0, #0
 801b958:	e7ee      	b.n	801b938 <quorem+0xf4>
 801b95a:	0000      	movs	r0, r0
 801b95c:	0000      	movs	r0, r0
	...

0801b960 <_dtoa_r>:
 801b960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b964:	ed2d 8b04 	vpush	{d8-d9}
 801b968:	ec57 6b10 	vmov	r6, r7, d0
 801b96c:	b093      	sub	sp, #76	; 0x4c
 801b96e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801b970:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801b974:	9106      	str	r1, [sp, #24]
 801b976:	ee10 aa10 	vmov	sl, s0
 801b97a:	4604      	mov	r4, r0
 801b97c:	9209      	str	r2, [sp, #36]	; 0x24
 801b97e:	930c      	str	r3, [sp, #48]	; 0x30
 801b980:	46bb      	mov	fp, r7
 801b982:	b975      	cbnz	r5, 801b9a2 <_dtoa_r+0x42>
 801b984:	2010      	movs	r0, #16
 801b986:	f7fd fea9 	bl	80196dc <malloc>
 801b98a:	4602      	mov	r2, r0
 801b98c:	6260      	str	r0, [r4, #36]	; 0x24
 801b98e:	b920      	cbnz	r0, 801b99a <_dtoa_r+0x3a>
 801b990:	4ba7      	ldr	r3, [pc, #668]	; (801bc30 <_dtoa_r+0x2d0>)
 801b992:	21ea      	movs	r1, #234	; 0xea
 801b994:	48a7      	ldr	r0, [pc, #668]	; (801bc34 <_dtoa_r+0x2d4>)
 801b996:	f7ff ff37 	bl	801b808 <__assert_func>
 801b99a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b99e:	6005      	str	r5, [r0, #0]
 801b9a0:	60c5      	str	r5, [r0, #12]
 801b9a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b9a4:	6819      	ldr	r1, [r3, #0]
 801b9a6:	b151      	cbz	r1, 801b9be <_dtoa_r+0x5e>
 801b9a8:	685a      	ldr	r2, [r3, #4]
 801b9aa:	604a      	str	r2, [r1, #4]
 801b9ac:	2301      	movs	r3, #1
 801b9ae:	4093      	lsls	r3, r2
 801b9b0:	608b      	str	r3, [r1, #8]
 801b9b2:	4620      	mov	r0, r4
 801b9b4:	f001 fbc2 	bl	801d13c <_Bfree>
 801b9b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b9ba:	2200      	movs	r2, #0
 801b9bc:	601a      	str	r2, [r3, #0]
 801b9be:	1e3b      	subs	r3, r7, #0
 801b9c0:	bfaa      	itet	ge
 801b9c2:	2300      	movge	r3, #0
 801b9c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801b9c8:	f8c8 3000 	strge.w	r3, [r8]
 801b9cc:	4b9a      	ldr	r3, [pc, #616]	; (801bc38 <_dtoa_r+0x2d8>)
 801b9ce:	bfbc      	itt	lt
 801b9d0:	2201      	movlt	r2, #1
 801b9d2:	f8c8 2000 	strlt.w	r2, [r8]
 801b9d6:	ea33 030b 	bics.w	r3, r3, fp
 801b9da:	d11b      	bne.n	801ba14 <_dtoa_r+0xb4>
 801b9dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b9de:	f242 730f 	movw	r3, #9999	; 0x270f
 801b9e2:	6013      	str	r3, [r2, #0]
 801b9e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b9e8:	4333      	orrs	r3, r6
 801b9ea:	f000 8592 	beq.w	801c512 <_dtoa_r+0xbb2>
 801b9ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b9f0:	b963      	cbnz	r3, 801ba0c <_dtoa_r+0xac>
 801b9f2:	4b92      	ldr	r3, [pc, #584]	; (801bc3c <_dtoa_r+0x2dc>)
 801b9f4:	e022      	b.n	801ba3c <_dtoa_r+0xdc>
 801b9f6:	4b92      	ldr	r3, [pc, #584]	; (801bc40 <_dtoa_r+0x2e0>)
 801b9f8:	9301      	str	r3, [sp, #4]
 801b9fa:	3308      	adds	r3, #8
 801b9fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b9fe:	6013      	str	r3, [r2, #0]
 801ba00:	9801      	ldr	r0, [sp, #4]
 801ba02:	b013      	add	sp, #76	; 0x4c
 801ba04:	ecbd 8b04 	vpop	{d8-d9}
 801ba08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba0c:	4b8b      	ldr	r3, [pc, #556]	; (801bc3c <_dtoa_r+0x2dc>)
 801ba0e:	9301      	str	r3, [sp, #4]
 801ba10:	3303      	adds	r3, #3
 801ba12:	e7f3      	b.n	801b9fc <_dtoa_r+0x9c>
 801ba14:	2200      	movs	r2, #0
 801ba16:	2300      	movs	r3, #0
 801ba18:	4650      	mov	r0, sl
 801ba1a:	4659      	mov	r1, fp
 801ba1c:	f7e5 f86c 	bl	8000af8 <__aeabi_dcmpeq>
 801ba20:	ec4b ab19 	vmov	d9, sl, fp
 801ba24:	4680      	mov	r8, r0
 801ba26:	b158      	cbz	r0, 801ba40 <_dtoa_r+0xe0>
 801ba28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ba2a:	2301      	movs	r3, #1
 801ba2c:	6013      	str	r3, [r2, #0]
 801ba2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ba30:	2b00      	cmp	r3, #0
 801ba32:	f000 856b 	beq.w	801c50c <_dtoa_r+0xbac>
 801ba36:	4883      	ldr	r0, [pc, #524]	; (801bc44 <_dtoa_r+0x2e4>)
 801ba38:	6018      	str	r0, [r3, #0]
 801ba3a:	1e43      	subs	r3, r0, #1
 801ba3c:	9301      	str	r3, [sp, #4]
 801ba3e:	e7df      	b.n	801ba00 <_dtoa_r+0xa0>
 801ba40:	ec4b ab10 	vmov	d0, sl, fp
 801ba44:	aa10      	add	r2, sp, #64	; 0x40
 801ba46:	a911      	add	r1, sp, #68	; 0x44
 801ba48:	4620      	mov	r0, r4
 801ba4a:	f001 ff25 	bl	801d898 <__d2b>
 801ba4e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801ba52:	ee08 0a10 	vmov	s16, r0
 801ba56:	2d00      	cmp	r5, #0
 801ba58:	f000 8084 	beq.w	801bb64 <_dtoa_r+0x204>
 801ba5c:	ee19 3a90 	vmov	r3, s19
 801ba60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ba64:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801ba68:	4656      	mov	r6, sl
 801ba6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801ba6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801ba72:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801ba76:	4b74      	ldr	r3, [pc, #464]	; (801bc48 <_dtoa_r+0x2e8>)
 801ba78:	2200      	movs	r2, #0
 801ba7a:	4630      	mov	r0, r6
 801ba7c:	4639      	mov	r1, r7
 801ba7e:	f7e4 fc1b 	bl	80002b8 <__aeabi_dsub>
 801ba82:	a365      	add	r3, pc, #404	; (adr r3, 801bc18 <_dtoa_r+0x2b8>)
 801ba84:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba88:	f7e4 fdce 	bl	8000628 <__aeabi_dmul>
 801ba8c:	a364      	add	r3, pc, #400	; (adr r3, 801bc20 <_dtoa_r+0x2c0>)
 801ba8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba92:	f7e4 fc13 	bl	80002bc <__adddf3>
 801ba96:	4606      	mov	r6, r0
 801ba98:	4628      	mov	r0, r5
 801ba9a:	460f      	mov	r7, r1
 801ba9c:	f7e4 fd5a 	bl	8000554 <__aeabi_i2d>
 801baa0:	a361      	add	r3, pc, #388	; (adr r3, 801bc28 <_dtoa_r+0x2c8>)
 801baa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801baa6:	f7e4 fdbf 	bl	8000628 <__aeabi_dmul>
 801baaa:	4602      	mov	r2, r0
 801baac:	460b      	mov	r3, r1
 801baae:	4630      	mov	r0, r6
 801bab0:	4639      	mov	r1, r7
 801bab2:	f7e4 fc03 	bl	80002bc <__adddf3>
 801bab6:	4606      	mov	r6, r0
 801bab8:	460f      	mov	r7, r1
 801baba:	f7e5 f865 	bl	8000b88 <__aeabi_d2iz>
 801babe:	2200      	movs	r2, #0
 801bac0:	9000      	str	r0, [sp, #0]
 801bac2:	2300      	movs	r3, #0
 801bac4:	4630      	mov	r0, r6
 801bac6:	4639      	mov	r1, r7
 801bac8:	f7e5 f820 	bl	8000b0c <__aeabi_dcmplt>
 801bacc:	b150      	cbz	r0, 801bae4 <_dtoa_r+0x184>
 801bace:	9800      	ldr	r0, [sp, #0]
 801bad0:	f7e4 fd40 	bl	8000554 <__aeabi_i2d>
 801bad4:	4632      	mov	r2, r6
 801bad6:	463b      	mov	r3, r7
 801bad8:	f7e5 f80e 	bl	8000af8 <__aeabi_dcmpeq>
 801badc:	b910      	cbnz	r0, 801bae4 <_dtoa_r+0x184>
 801bade:	9b00      	ldr	r3, [sp, #0]
 801bae0:	3b01      	subs	r3, #1
 801bae2:	9300      	str	r3, [sp, #0]
 801bae4:	9b00      	ldr	r3, [sp, #0]
 801bae6:	2b16      	cmp	r3, #22
 801bae8:	d85a      	bhi.n	801bba0 <_dtoa_r+0x240>
 801baea:	9a00      	ldr	r2, [sp, #0]
 801baec:	4b57      	ldr	r3, [pc, #348]	; (801bc4c <_dtoa_r+0x2ec>)
 801baee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801baf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801baf6:	ec51 0b19 	vmov	r0, r1, d9
 801bafa:	f7e5 f807 	bl	8000b0c <__aeabi_dcmplt>
 801bafe:	2800      	cmp	r0, #0
 801bb00:	d050      	beq.n	801bba4 <_dtoa_r+0x244>
 801bb02:	9b00      	ldr	r3, [sp, #0]
 801bb04:	3b01      	subs	r3, #1
 801bb06:	9300      	str	r3, [sp, #0]
 801bb08:	2300      	movs	r3, #0
 801bb0a:	930b      	str	r3, [sp, #44]	; 0x2c
 801bb0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bb0e:	1b5d      	subs	r5, r3, r5
 801bb10:	1e6b      	subs	r3, r5, #1
 801bb12:	9305      	str	r3, [sp, #20]
 801bb14:	bf45      	ittet	mi
 801bb16:	f1c5 0301 	rsbmi	r3, r5, #1
 801bb1a:	9304      	strmi	r3, [sp, #16]
 801bb1c:	2300      	movpl	r3, #0
 801bb1e:	2300      	movmi	r3, #0
 801bb20:	bf4c      	ite	mi
 801bb22:	9305      	strmi	r3, [sp, #20]
 801bb24:	9304      	strpl	r3, [sp, #16]
 801bb26:	9b00      	ldr	r3, [sp, #0]
 801bb28:	2b00      	cmp	r3, #0
 801bb2a:	db3d      	blt.n	801bba8 <_dtoa_r+0x248>
 801bb2c:	9b05      	ldr	r3, [sp, #20]
 801bb2e:	9a00      	ldr	r2, [sp, #0]
 801bb30:	920a      	str	r2, [sp, #40]	; 0x28
 801bb32:	4413      	add	r3, r2
 801bb34:	9305      	str	r3, [sp, #20]
 801bb36:	2300      	movs	r3, #0
 801bb38:	9307      	str	r3, [sp, #28]
 801bb3a:	9b06      	ldr	r3, [sp, #24]
 801bb3c:	2b09      	cmp	r3, #9
 801bb3e:	f200 8089 	bhi.w	801bc54 <_dtoa_r+0x2f4>
 801bb42:	2b05      	cmp	r3, #5
 801bb44:	bfc4      	itt	gt
 801bb46:	3b04      	subgt	r3, #4
 801bb48:	9306      	strgt	r3, [sp, #24]
 801bb4a:	9b06      	ldr	r3, [sp, #24]
 801bb4c:	f1a3 0302 	sub.w	r3, r3, #2
 801bb50:	bfcc      	ite	gt
 801bb52:	2500      	movgt	r5, #0
 801bb54:	2501      	movle	r5, #1
 801bb56:	2b03      	cmp	r3, #3
 801bb58:	f200 8087 	bhi.w	801bc6a <_dtoa_r+0x30a>
 801bb5c:	e8df f003 	tbb	[pc, r3]
 801bb60:	59383a2d 	.word	0x59383a2d
 801bb64:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801bb68:	441d      	add	r5, r3
 801bb6a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801bb6e:	2b20      	cmp	r3, #32
 801bb70:	bfc1      	itttt	gt
 801bb72:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801bb76:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801bb7a:	fa0b f303 	lslgt.w	r3, fp, r3
 801bb7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 801bb82:	bfda      	itte	le
 801bb84:	f1c3 0320 	rsble	r3, r3, #32
 801bb88:	fa06 f003 	lslle.w	r0, r6, r3
 801bb8c:	4318      	orrgt	r0, r3
 801bb8e:	f7e4 fcd1 	bl	8000534 <__aeabi_ui2d>
 801bb92:	2301      	movs	r3, #1
 801bb94:	4606      	mov	r6, r0
 801bb96:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801bb9a:	3d01      	subs	r5, #1
 801bb9c:	930e      	str	r3, [sp, #56]	; 0x38
 801bb9e:	e76a      	b.n	801ba76 <_dtoa_r+0x116>
 801bba0:	2301      	movs	r3, #1
 801bba2:	e7b2      	b.n	801bb0a <_dtoa_r+0x1aa>
 801bba4:	900b      	str	r0, [sp, #44]	; 0x2c
 801bba6:	e7b1      	b.n	801bb0c <_dtoa_r+0x1ac>
 801bba8:	9b04      	ldr	r3, [sp, #16]
 801bbaa:	9a00      	ldr	r2, [sp, #0]
 801bbac:	1a9b      	subs	r3, r3, r2
 801bbae:	9304      	str	r3, [sp, #16]
 801bbb0:	4253      	negs	r3, r2
 801bbb2:	9307      	str	r3, [sp, #28]
 801bbb4:	2300      	movs	r3, #0
 801bbb6:	930a      	str	r3, [sp, #40]	; 0x28
 801bbb8:	e7bf      	b.n	801bb3a <_dtoa_r+0x1da>
 801bbba:	2300      	movs	r3, #0
 801bbbc:	9308      	str	r3, [sp, #32]
 801bbbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bbc0:	2b00      	cmp	r3, #0
 801bbc2:	dc55      	bgt.n	801bc70 <_dtoa_r+0x310>
 801bbc4:	2301      	movs	r3, #1
 801bbc6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801bbca:	461a      	mov	r2, r3
 801bbcc:	9209      	str	r2, [sp, #36]	; 0x24
 801bbce:	e00c      	b.n	801bbea <_dtoa_r+0x28a>
 801bbd0:	2301      	movs	r3, #1
 801bbd2:	e7f3      	b.n	801bbbc <_dtoa_r+0x25c>
 801bbd4:	2300      	movs	r3, #0
 801bbd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bbd8:	9308      	str	r3, [sp, #32]
 801bbda:	9b00      	ldr	r3, [sp, #0]
 801bbdc:	4413      	add	r3, r2
 801bbde:	9302      	str	r3, [sp, #8]
 801bbe0:	3301      	adds	r3, #1
 801bbe2:	2b01      	cmp	r3, #1
 801bbe4:	9303      	str	r3, [sp, #12]
 801bbe6:	bfb8      	it	lt
 801bbe8:	2301      	movlt	r3, #1
 801bbea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801bbec:	2200      	movs	r2, #0
 801bbee:	6042      	str	r2, [r0, #4]
 801bbf0:	2204      	movs	r2, #4
 801bbf2:	f102 0614 	add.w	r6, r2, #20
 801bbf6:	429e      	cmp	r6, r3
 801bbf8:	6841      	ldr	r1, [r0, #4]
 801bbfa:	d93d      	bls.n	801bc78 <_dtoa_r+0x318>
 801bbfc:	4620      	mov	r0, r4
 801bbfe:	f001 fa5d 	bl	801d0bc <_Balloc>
 801bc02:	9001      	str	r0, [sp, #4]
 801bc04:	2800      	cmp	r0, #0
 801bc06:	d13b      	bne.n	801bc80 <_dtoa_r+0x320>
 801bc08:	4b11      	ldr	r3, [pc, #68]	; (801bc50 <_dtoa_r+0x2f0>)
 801bc0a:	4602      	mov	r2, r0
 801bc0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801bc10:	e6c0      	b.n	801b994 <_dtoa_r+0x34>
 801bc12:	2301      	movs	r3, #1
 801bc14:	e7df      	b.n	801bbd6 <_dtoa_r+0x276>
 801bc16:	bf00      	nop
 801bc18:	636f4361 	.word	0x636f4361
 801bc1c:	3fd287a7 	.word	0x3fd287a7
 801bc20:	8b60c8b3 	.word	0x8b60c8b3
 801bc24:	3fc68a28 	.word	0x3fc68a28
 801bc28:	509f79fb 	.word	0x509f79fb
 801bc2c:	3fd34413 	.word	0x3fd34413
 801bc30:	08020138 	.word	0x08020138
 801bc34:	080202f6 	.word	0x080202f6
 801bc38:	7ff00000 	.word	0x7ff00000
 801bc3c:	080202f2 	.word	0x080202f2
 801bc40:	080202e9 	.word	0x080202e9
 801bc44:	080200bd 	.word	0x080200bd
 801bc48:	3ff80000 	.word	0x3ff80000
 801bc4c:	080204c8 	.word	0x080204c8
 801bc50:	08020351 	.word	0x08020351
 801bc54:	2501      	movs	r5, #1
 801bc56:	2300      	movs	r3, #0
 801bc58:	9306      	str	r3, [sp, #24]
 801bc5a:	9508      	str	r5, [sp, #32]
 801bc5c:	f04f 33ff 	mov.w	r3, #4294967295
 801bc60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801bc64:	2200      	movs	r2, #0
 801bc66:	2312      	movs	r3, #18
 801bc68:	e7b0      	b.n	801bbcc <_dtoa_r+0x26c>
 801bc6a:	2301      	movs	r3, #1
 801bc6c:	9308      	str	r3, [sp, #32]
 801bc6e:	e7f5      	b.n	801bc5c <_dtoa_r+0x2fc>
 801bc70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801bc76:	e7b8      	b.n	801bbea <_dtoa_r+0x28a>
 801bc78:	3101      	adds	r1, #1
 801bc7a:	6041      	str	r1, [r0, #4]
 801bc7c:	0052      	lsls	r2, r2, #1
 801bc7e:	e7b8      	b.n	801bbf2 <_dtoa_r+0x292>
 801bc80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bc82:	9a01      	ldr	r2, [sp, #4]
 801bc84:	601a      	str	r2, [r3, #0]
 801bc86:	9b03      	ldr	r3, [sp, #12]
 801bc88:	2b0e      	cmp	r3, #14
 801bc8a:	f200 809d 	bhi.w	801bdc8 <_dtoa_r+0x468>
 801bc8e:	2d00      	cmp	r5, #0
 801bc90:	f000 809a 	beq.w	801bdc8 <_dtoa_r+0x468>
 801bc94:	9b00      	ldr	r3, [sp, #0]
 801bc96:	2b00      	cmp	r3, #0
 801bc98:	dd32      	ble.n	801bd00 <_dtoa_r+0x3a0>
 801bc9a:	4ab7      	ldr	r2, [pc, #732]	; (801bf78 <_dtoa_r+0x618>)
 801bc9c:	f003 030f 	and.w	r3, r3, #15
 801bca0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801bca4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bca8:	9b00      	ldr	r3, [sp, #0]
 801bcaa:	05d8      	lsls	r0, r3, #23
 801bcac:	ea4f 1723 	mov.w	r7, r3, asr #4
 801bcb0:	d516      	bpl.n	801bce0 <_dtoa_r+0x380>
 801bcb2:	4bb2      	ldr	r3, [pc, #712]	; (801bf7c <_dtoa_r+0x61c>)
 801bcb4:	ec51 0b19 	vmov	r0, r1, d9
 801bcb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801bcbc:	f7e4 fdde 	bl	800087c <__aeabi_ddiv>
 801bcc0:	f007 070f 	and.w	r7, r7, #15
 801bcc4:	4682      	mov	sl, r0
 801bcc6:	468b      	mov	fp, r1
 801bcc8:	2503      	movs	r5, #3
 801bcca:	4eac      	ldr	r6, [pc, #688]	; (801bf7c <_dtoa_r+0x61c>)
 801bccc:	b957      	cbnz	r7, 801bce4 <_dtoa_r+0x384>
 801bcce:	4642      	mov	r2, r8
 801bcd0:	464b      	mov	r3, r9
 801bcd2:	4650      	mov	r0, sl
 801bcd4:	4659      	mov	r1, fp
 801bcd6:	f7e4 fdd1 	bl	800087c <__aeabi_ddiv>
 801bcda:	4682      	mov	sl, r0
 801bcdc:	468b      	mov	fp, r1
 801bcde:	e028      	b.n	801bd32 <_dtoa_r+0x3d2>
 801bce0:	2502      	movs	r5, #2
 801bce2:	e7f2      	b.n	801bcca <_dtoa_r+0x36a>
 801bce4:	07f9      	lsls	r1, r7, #31
 801bce6:	d508      	bpl.n	801bcfa <_dtoa_r+0x39a>
 801bce8:	4640      	mov	r0, r8
 801bcea:	4649      	mov	r1, r9
 801bcec:	e9d6 2300 	ldrd	r2, r3, [r6]
 801bcf0:	f7e4 fc9a 	bl	8000628 <__aeabi_dmul>
 801bcf4:	3501      	adds	r5, #1
 801bcf6:	4680      	mov	r8, r0
 801bcf8:	4689      	mov	r9, r1
 801bcfa:	107f      	asrs	r7, r7, #1
 801bcfc:	3608      	adds	r6, #8
 801bcfe:	e7e5      	b.n	801bccc <_dtoa_r+0x36c>
 801bd00:	f000 809b 	beq.w	801be3a <_dtoa_r+0x4da>
 801bd04:	9b00      	ldr	r3, [sp, #0]
 801bd06:	4f9d      	ldr	r7, [pc, #628]	; (801bf7c <_dtoa_r+0x61c>)
 801bd08:	425e      	negs	r6, r3
 801bd0a:	4b9b      	ldr	r3, [pc, #620]	; (801bf78 <_dtoa_r+0x618>)
 801bd0c:	f006 020f 	and.w	r2, r6, #15
 801bd10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd18:	ec51 0b19 	vmov	r0, r1, d9
 801bd1c:	f7e4 fc84 	bl	8000628 <__aeabi_dmul>
 801bd20:	1136      	asrs	r6, r6, #4
 801bd22:	4682      	mov	sl, r0
 801bd24:	468b      	mov	fp, r1
 801bd26:	2300      	movs	r3, #0
 801bd28:	2502      	movs	r5, #2
 801bd2a:	2e00      	cmp	r6, #0
 801bd2c:	d17a      	bne.n	801be24 <_dtoa_r+0x4c4>
 801bd2e:	2b00      	cmp	r3, #0
 801bd30:	d1d3      	bne.n	801bcda <_dtoa_r+0x37a>
 801bd32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bd34:	2b00      	cmp	r3, #0
 801bd36:	f000 8082 	beq.w	801be3e <_dtoa_r+0x4de>
 801bd3a:	4b91      	ldr	r3, [pc, #580]	; (801bf80 <_dtoa_r+0x620>)
 801bd3c:	2200      	movs	r2, #0
 801bd3e:	4650      	mov	r0, sl
 801bd40:	4659      	mov	r1, fp
 801bd42:	f7e4 fee3 	bl	8000b0c <__aeabi_dcmplt>
 801bd46:	2800      	cmp	r0, #0
 801bd48:	d079      	beq.n	801be3e <_dtoa_r+0x4de>
 801bd4a:	9b03      	ldr	r3, [sp, #12]
 801bd4c:	2b00      	cmp	r3, #0
 801bd4e:	d076      	beq.n	801be3e <_dtoa_r+0x4de>
 801bd50:	9b02      	ldr	r3, [sp, #8]
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	dd36      	ble.n	801bdc4 <_dtoa_r+0x464>
 801bd56:	9b00      	ldr	r3, [sp, #0]
 801bd58:	4650      	mov	r0, sl
 801bd5a:	4659      	mov	r1, fp
 801bd5c:	1e5f      	subs	r7, r3, #1
 801bd5e:	2200      	movs	r2, #0
 801bd60:	4b88      	ldr	r3, [pc, #544]	; (801bf84 <_dtoa_r+0x624>)
 801bd62:	f7e4 fc61 	bl	8000628 <__aeabi_dmul>
 801bd66:	9e02      	ldr	r6, [sp, #8]
 801bd68:	4682      	mov	sl, r0
 801bd6a:	468b      	mov	fp, r1
 801bd6c:	3501      	adds	r5, #1
 801bd6e:	4628      	mov	r0, r5
 801bd70:	f7e4 fbf0 	bl	8000554 <__aeabi_i2d>
 801bd74:	4652      	mov	r2, sl
 801bd76:	465b      	mov	r3, fp
 801bd78:	f7e4 fc56 	bl	8000628 <__aeabi_dmul>
 801bd7c:	4b82      	ldr	r3, [pc, #520]	; (801bf88 <_dtoa_r+0x628>)
 801bd7e:	2200      	movs	r2, #0
 801bd80:	f7e4 fa9c 	bl	80002bc <__adddf3>
 801bd84:	46d0      	mov	r8, sl
 801bd86:	46d9      	mov	r9, fp
 801bd88:	4682      	mov	sl, r0
 801bd8a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801bd8e:	2e00      	cmp	r6, #0
 801bd90:	d158      	bne.n	801be44 <_dtoa_r+0x4e4>
 801bd92:	4b7e      	ldr	r3, [pc, #504]	; (801bf8c <_dtoa_r+0x62c>)
 801bd94:	2200      	movs	r2, #0
 801bd96:	4640      	mov	r0, r8
 801bd98:	4649      	mov	r1, r9
 801bd9a:	f7e4 fa8d 	bl	80002b8 <__aeabi_dsub>
 801bd9e:	4652      	mov	r2, sl
 801bda0:	465b      	mov	r3, fp
 801bda2:	4680      	mov	r8, r0
 801bda4:	4689      	mov	r9, r1
 801bda6:	f7e4 fecf 	bl	8000b48 <__aeabi_dcmpgt>
 801bdaa:	2800      	cmp	r0, #0
 801bdac:	f040 8295 	bne.w	801c2da <_dtoa_r+0x97a>
 801bdb0:	4652      	mov	r2, sl
 801bdb2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801bdb6:	4640      	mov	r0, r8
 801bdb8:	4649      	mov	r1, r9
 801bdba:	f7e4 fea7 	bl	8000b0c <__aeabi_dcmplt>
 801bdbe:	2800      	cmp	r0, #0
 801bdc0:	f040 8289 	bne.w	801c2d6 <_dtoa_r+0x976>
 801bdc4:	ec5b ab19 	vmov	sl, fp, d9
 801bdc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bdca:	2b00      	cmp	r3, #0
 801bdcc:	f2c0 8148 	blt.w	801c060 <_dtoa_r+0x700>
 801bdd0:	9a00      	ldr	r2, [sp, #0]
 801bdd2:	2a0e      	cmp	r2, #14
 801bdd4:	f300 8144 	bgt.w	801c060 <_dtoa_r+0x700>
 801bdd8:	4b67      	ldr	r3, [pc, #412]	; (801bf78 <_dtoa_r+0x618>)
 801bdda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bdde:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bde2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bde4:	2b00      	cmp	r3, #0
 801bde6:	f280 80d5 	bge.w	801bf94 <_dtoa_r+0x634>
 801bdea:	9b03      	ldr	r3, [sp, #12]
 801bdec:	2b00      	cmp	r3, #0
 801bdee:	f300 80d1 	bgt.w	801bf94 <_dtoa_r+0x634>
 801bdf2:	f040 826f 	bne.w	801c2d4 <_dtoa_r+0x974>
 801bdf6:	4b65      	ldr	r3, [pc, #404]	; (801bf8c <_dtoa_r+0x62c>)
 801bdf8:	2200      	movs	r2, #0
 801bdfa:	4640      	mov	r0, r8
 801bdfc:	4649      	mov	r1, r9
 801bdfe:	f7e4 fc13 	bl	8000628 <__aeabi_dmul>
 801be02:	4652      	mov	r2, sl
 801be04:	465b      	mov	r3, fp
 801be06:	f7e4 fe95 	bl	8000b34 <__aeabi_dcmpge>
 801be0a:	9e03      	ldr	r6, [sp, #12]
 801be0c:	4637      	mov	r7, r6
 801be0e:	2800      	cmp	r0, #0
 801be10:	f040 8245 	bne.w	801c29e <_dtoa_r+0x93e>
 801be14:	9d01      	ldr	r5, [sp, #4]
 801be16:	2331      	movs	r3, #49	; 0x31
 801be18:	f805 3b01 	strb.w	r3, [r5], #1
 801be1c:	9b00      	ldr	r3, [sp, #0]
 801be1e:	3301      	adds	r3, #1
 801be20:	9300      	str	r3, [sp, #0]
 801be22:	e240      	b.n	801c2a6 <_dtoa_r+0x946>
 801be24:	07f2      	lsls	r2, r6, #31
 801be26:	d505      	bpl.n	801be34 <_dtoa_r+0x4d4>
 801be28:	e9d7 2300 	ldrd	r2, r3, [r7]
 801be2c:	f7e4 fbfc 	bl	8000628 <__aeabi_dmul>
 801be30:	3501      	adds	r5, #1
 801be32:	2301      	movs	r3, #1
 801be34:	1076      	asrs	r6, r6, #1
 801be36:	3708      	adds	r7, #8
 801be38:	e777      	b.n	801bd2a <_dtoa_r+0x3ca>
 801be3a:	2502      	movs	r5, #2
 801be3c:	e779      	b.n	801bd32 <_dtoa_r+0x3d2>
 801be3e:	9f00      	ldr	r7, [sp, #0]
 801be40:	9e03      	ldr	r6, [sp, #12]
 801be42:	e794      	b.n	801bd6e <_dtoa_r+0x40e>
 801be44:	9901      	ldr	r1, [sp, #4]
 801be46:	4b4c      	ldr	r3, [pc, #304]	; (801bf78 <_dtoa_r+0x618>)
 801be48:	4431      	add	r1, r6
 801be4a:	910d      	str	r1, [sp, #52]	; 0x34
 801be4c:	9908      	ldr	r1, [sp, #32]
 801be4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801be52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801be56:	2900      	cmp	r1, #0
 801be58:	d043      	beq.n	801bee2 <_dtoa_r+0x582>
 801be5a:	494d      	ldr	r1, [pc, #308]	; (801bf90 <_dtoa_r+0x630>)
 801be5c:	2000      	movs	r0, #0
 801be5e:	f7e4 fd0d 	bl	800087c <__aeabi_ddiv>
 801be62:	4652      	mov	r2, sl
 801be64:	465b      	mov	r3, fp
 801be66:	f7e4 fa27 	bl	80002b8 <__aeabi_dsub>
 801be6a:	9d01      	ldr	r5, [sp, #4]
 801be6c:	4682      	mov	sl, r0
 801be6e:	468b      	mov	fp, r1
 801be70:	4649      	mov	r1, r9
 801be72:	4640      	mov	r0, r8
 801be74:	f7e4 fe88 	bl	8000b88 <__aeabi_d2iz>
 801be78:	4606      	mov	r6, r0
 801be7a:	f7e4 fb6b 	bl	8000554 <__aeabi_i2d>
 801be7e:	4602      	mov	r2, r0
 801be80:	460b      	mov	r3, r1
 801be82:	4640      	mov	r0, r8
 801be84:	4649      	mov	r1, r9
 801be86:	f7e4 fa17 	bl	80002b8 <__aeabi_dsub>
 801be8a:	3630      	adds	r6, #48	; 0x30
 801be8c:	f805 6b01 	strb.w	r6, [r5], #1
 801be90:	4652      	mov	r2, sl
 801be92:	465b      	mov	r3, fp
 801be94:	4680      	mov	r8, r0
 801be96:	4689      	mov	r9, r1
 801be98:	f7e4 fe38 	bl	8000b0c <__aeabi_dcmplt>
 801be9c:	2800      	cmp	r0, #0
 801be9e:	d163      	bne.n	801bf68 <_dtoa_r+0x608>
 801bea0:	4642      	mov	r2, r8
 801bea2:	464b      	mov	r3, r9
 801bea4:	4936      	ldr	r1, [pc, #216]	; (801bf80 <_dtoa_r+0x620>)
 801bea6:	2000      	movs	r0, #0
 801bea8:	f7e4 fa06 	bl	80002b8 <__aeabi_dsub>
 801beac:	4652      	mov	r2, sl
 801beae:	465b      	mov	r3, fp
 801beb0:	f7e4 fe2c 	bl	8000b0c <__aeabi_dcmplt>
 801beb4:	2800      	cmp	r0, #0
 801beb6:	f040 80b5 	bne.w	801c024 <_dtoa_r+0x6c4>
 801beba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bebc:	429d      	cmp	r5, r3
 801bebe:	d081      	beq.n	801bdc4 <_dtoa_r+0x464>
 801bec0:	4b30      	ldr	r3, [pc, #192]	; (801bf84 <_dtoa_r+0x624>)
 801bec2:	2200      	movs	r2, #0
 801bec4:	4650      	mov	r0, sl
 801bec6:	4659      	mov	r1, fp
 801bec8:	f7e4 fbae 	bl	8000628 <__aeabi_dmul>
 801becc:	4b2d      	ldr	r3, [pc, #180]	; (801bf84 <_dtoa_r+0x624>)
 801bece:	4682      	mov	sl, r0
 801bed0:	468b      	mov	fp, r1
 801bed2:	4640      	mov	r0, r8
 801bed4:	4649      	mov	r1, r9
 801bed6:	2200      	movs	r2, #0
 801bed8:	f7e4 fba6 	bl	8000628 <__aeabi_dmul>
 801bedc:	4680      	mov	r8, r0
 801bede:	4689      	mov	r9, r1
 801bee0:	e7c6      	b.n	801be70 <_dtoa_r+0x510>
 801bee2:	4650      	mov	r0, sl
 801bee4:	4659      	mov	r1, fp
 801bee6:	f7e4 fb9f 	bl	8000628 <__aeabi_dmul>
 801beea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801beec:	9d01      	ldr	r5, [sp, #4]
 801beee:	930f      	str	r3, [sp, #60]	; 0x3c
 801bef0:	4682      	mov	sl, r0
 801bef2:	468b      	mov	fp, r1
 801bef4:	4649      	mov	r1, r9
 801bef6:	4640      	mov	r0, r8
 801bef8:	f7e4 fe46 	bl	8000b88 <__aeabi_d2iz>
 801befc:	4606      	mov	r6, r0
 801befe:	f7e4 fb29 	bl	8000554 <__aeabi_i2d>
 801bf02:	3630      	adds	r6, #48	; 0x30
 801bf04:	4602      	mov	r2, r0
 801bf06:	460b      	mov	r3, r1
 801bf08:	4640      	mov	r0, r8
 801bf0a:	4649      	mov	r1, r9
 801bf0c:	f7e4 f9d4 	bl	80002b8 <__aeabi_dsub>
 801bf10:	f805 6b01 	strb.w	r6, [r5], #1
 801bf14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bf16:	429d      	cmp	r5, r3
 801bf18:	4680      	mov	r8, r0
 801bf1a:	4689      	mov	r9, r1
 801bf1c:	f04f 0200 	mov.w	r2, #0
 801bf20:	d124      	bne.n	801bf6c <_dtoa_r+0x60c>
 801bf22:	4b1b      	ldr	r3, [pc, #108]	; (801bf90 <_dtoa_r+0x630>)
 801bf24:	4650      	mov	r0, sl
 801bf26:	4659      	mov	r1, fp
 801bf28:	f7e4 f9c8 	bl	80002bc <__adddf3>
 801bf2c:	4602      	mov	r2, r0
 801bf2e:	460b      	mov	r3, r1
 801bf30:	4640      	mov	r0, r8
 801bf32:	4649      	mov	r1, r9
 801bf34:	f7e4 fe08 	bl	8000b48 <__aeabi_dcmpgt>
 801bf38:	2800      	cmp	r0, #0
 801bf3a:	d173      	bne.n	801c024 <_dtoa_r+0x6c4>
 801bf3c:	4652      	mov	r2, sl
 801bf3e:	465b      	mov	r3, fp
 801bf40:	4913      	ldr	r1, [pc, #76]	; (801bf90 <_dtoa_r+0x630>)
 801bf42:	2000      	movs	r0, #0
 801bf44:	f7e4 f9b8 	bl	80002b8 <__aeabi_dsub>
 801bf48:	4602      	mov	r2, r0
 801bf4a:	460b      	mov	r3, r1
 801bf4c:	4640      	mov	r0, r8
 801bf4e:	4649      	mov	r1, r9
 801bf50:	f7e4 fddc 	bl	8000b0c <__aeabi_dcmplt>
 801bf54:	2800      	cmp	r0, #0
 801bf56:	f43f af35 	beq.w	801bdc4 <_dtoa_r+0x464>
 801bf5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801bf5c:	1e6b      	subs	r3, r5, #1
 801bf5e:	930f      	str	r3, [sp, #60]	; 0x3c
 801bf60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801bf64:	2b30      	cmp	r3, #48	; 0x30
 801bf66:	d0f8      	beq.n	801bf5a <_dtoa_r+0x5fa>
 801bf68:	9700      	str	r7, [sp, #0]
 801bf6a:	e049      	b.n	801c000 <_dtoa_r+0x6a0>
 801bf6c:	4b05      	ldr	r3, [pc, #20]	; (801bf84 <_dtoa_r+0x624>)
 801bf6e:	f7e4 fb5b 	bl	8000628 <__aeabi_dmul>
 801bf72:	4680      	mov	r8, r0
 801bf74:	4689      	mov	r9, r1
 801bf76:	e7bd      	b.n	801bef4 <_dtoa_r+0x594>
 801bf78:	080204c8 	.word	0x080204c8
 801bf7c:	080204a0 	.word	0x080204a0
 801bf80:	3ff00000 	.word	0x3ff00000
 801bf84:	40240000 	.word	0x40240000
 801bf88:	401c0000 	.word	0x401c0000
 801bf8c:	40140000 	.word	0x40140000
 801bf90:	3fe00000 	.word	0x3fe00000
 801bf94:	9d01      	ldr	r5, [sp, #4]
 801bf96:	4656      	mov	r6, sl
 801bf98:	465f      	mov	r7, fp
 801bf9a:	4642      	mov	r2, r8
 801bf9c:	464b      	mov	r3, r9
 801bf9e:	4630      	mov	r0, r6
 801bfa0:	4639      	mov	r1, r7
 801bfa2:	f7e4 fc6b 	bl	800087c <__aeabi_ddiv>
 801bfa6:	f7e4 fdef 	bl	8000b88 <__aeabi_d2iz>
 801bfaa:	4682      	mov	sl, r0
 801bfac:	f7e4 fad2 	bl	8000554 <__aeabi_i2d>
 801bfb0:	4642      	mov	r2, r8
 801bfb2:	464b      	mov	r3, r9
 801bfb4:	f7e4 fb38 	bl	8000628 <__aeabi_dmul>
 801bfb8:	4602      	mov	r2, r0
 801bfba:	460b      	mov	r3, r1
 801bfbc:	4630      	mov	r0, r6
 801bfbe:	4639      	mov	r1, r7
 801bfc0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801bfc4:	f7e4 f978 	bl	80002b8 <__aeabi_dsub>
 801bfc8:	f805 6b01 	strb.w	r6, [r5], #1
 801bfcc:	9e01      	ldr	r6, [sp, #4]
 801bfce:	9f03      	ldr	r7, [sp, #12]
 801bfd0:	1bae      	subs	r6, r5, r6
 801bfd2:	42b7      	cmp	r7, r6
 801bfd4:	4602      	mov	r2, r0
 801bfd6:	460b      	mov	r3, r1
 801bfd8:	d135      	bne.n	801c046 <_dtoa_r+0x6e6>
 801bfda:	f7e4 f96f 	bl	80002bc <__adddf3>
 801bfde:	4642      	mov	r2, r8
 801bfe0:	464b      	mov	r3, r9
 801bfe2:	4606      	mov	r6, r0
 801bfe4:	460f      	mov	r7, r1
 801bfe6:	f7e4 fdaf 	bl	8000b48 <__aeabi_dcmpgt>
 801bfea:	b9d0      	cbnz	r0, 801c022 <_dtoa_r+0x6c2>
 801bfec:	4642      	mov	r2, r8
 801bfee:	464b      	mov	r3, r9
 801bff0:	4630      	mov	r0, r6
 801bff2:	4639      	mov	r1, r7
 801bff4:	f7e4 fd80 	bl	8000af8 <__aeabi_dcmpeq>
 801bff8:	b110      	cbz	r0, 801c000 <_dtoa_r+0x6a0>
 801bffa:	f01a 0f01 	tst.w	sl, #1
 801bffe:	d110      	bne.n	801c022 <_dtoa_r+0x6c2>
 801c000:	4620      	mov	r0, r4
 801c002:	ee18 1a10 	vmov	r1, s16
 801c006:	f001 f899 	bl	801d13c <_Bfree>
 801c00a:	2300      	movs	r3, #0
 801c00c:	9800      	ldr	r0, [sp, #0]
 801c00e:	702b      	strb	r3, [r5, #0]
 801c010:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c012:	3001      	adds	r0, #1
 801c014:	6018      	str	r0, [r3, #0]
 801c016:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c018:	2b00      	cmp	r3, #0
 801c01a:	f43f acf1 	beq.w	801ba00 <_dtoa_r+0xa0>
 801c01e:	601d      	str	r5, [r3, #0]
 801c020:	e4ee      	b.n	801ba00 <_dtoa_r+0xa0>
 801c022:	9f00      	ldr	r7, [sp, #0]
 801c024:	462b      	mov	r3, r5
 801c026:	461d      	mov	r5, r3
 801c028:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c02c:	2a39      	cmp	r2, #57	; 0x39
 801c02e:	d106      	bne.n	801c03e <_dtoa_r+0x6de>
 801c030:	9a01      	ldr	r2, [sp, #4]
 801c032:	429a      	cmp	r2, r3
 801c034:	d1f7      	bne.n	801c026 <_dtoa_r+0x6c6>
 801c036:	9901      	ldr	r1, [sp, #4]
 801c038:	2230      	movs	r2, #48	; 0x30
 801c03a:	3701      	adds	r7, #1
 801c03c:	700a      	strb	r2, [r1, #0]
 801c03e:	781a      	ldrb	r2, [r3, #0]
 801c040:	3201      	adds	r2, #1
 801c042:	701a      	strb	r2, [r3, #0]
 801c044:	e790      	b.n	801bf68 <_dtoa_r+0x608>
 801c046:	4ba6      	ldr	r3, [pc, #664]	; (801c2e0 <_dtoa_r+0x980>)
 801c048:	2200      	movs	r2, #0
 801c04a:	f7e4 faed 	bl	8000628 <__aeabi_dmul>
 801c04e:	2200      	movs	r2, #0
 801c050:	2300      	movs	r3, #0
 801c052:	4606      	mov	r6, r0
 801c054:	460f      	mov	r7, r1
 801c056:	f7e4 fd4f 	bl	8000af8 <__aeabi_dcmpeq>
 801c05a:	2800      	cmp	r0, #0
 801c05c:	d09d      	beq.n	801bf9a <_dtoa_r+0x63a>
 801c05e:	e7cf      	b.n	801c000 <_dtoa_r+0x6a0>
 801c060:	9a08      	ldr	r2, [sp, #32]
 801c062:	2a00      	cmp	r2, #0
 801c064:	f000 80d7 	beq.w	801c216 <_dtoa_r+0x8b6>
 801c068:	9a06      	ldr	r2, [sp, #24]
 801c06a:	2a01      	cmp	r2, #1
 801c06c:	f300 80ba 	bgt.w	801c1e4 <_dtoa_r+0x884>
 801c070:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c072:	2a00      	cmp	r2, #0
 801c074:	f000 80b2 	beq.w	801c1dc <_dtoa_r+0x87c>
 801c078:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801c07c:	9e07      	ldr	r6, [sp, #28]
 801c07e:	9d04      	ldr	r5, [sp, #16]
 801c080:	9a04      	ldr	r2, [sp, #16]
 801c082:	441a      	add	r2, r3
 801c084:	9204      	str	r2, [sp, #16]
 801c086:	9a05      	ldr	r2, [sp, #20]
 801c088:	2101      	movs	r1, #1
 801c08a:	441a      	add	r2, r3
 801c08c:	4620      	mov	r0, r4
 801c08e:	9205      	str	r2, [sp, #20]
 801c090:	f001 f956 	bl	801d340 <__i2b>
 801c094:	4607      	mov	r7, r0
 801c096:	2d00      	cmp	r5, #0
 801c098:	dd0c      	ble.n	801c0b4 <_dtoa_r+0x754>
 801c09a:	9b05      	ldr	r3, [sp, #20]
 801c09c:	2b00      	cmp	r3, #0
 801c09e:	dd09      	ble.n	801c0b4 <_dtoa_r+0x754>
 801c0a0:	42ab      	cmp	r3, r5
 801c0a2:	9a04      	ldr	r2, [sp, #16]
 801c0a4:	bfa8      	it	ge
 801c0a6:	462b      	movge	r3, r5
 801c0a8:	1ad2      	subs	r2, r2, r3
 801c0aa:	9204      	str	r2, [sp, #16]
 801c0ac:	9a05      	ldr	r2, [sp, #20]
 801c0ae:	1aed      	subs	r5, r5, r3
 801c0b0:	1ad3      	subs	r3, r2, r3
 801c0b2:	9305      	str	r3, [sp, #20]
 801c0b4:	9b07      	ldr	r3, [sp, #28]
 801c0b6:	b31b      	cbz	r3, 801c100 <_dtoa_r+0x7a0>
 801c0b8:	9b08      	ldr	r3, [sp, #32]
 801c0ba:	2b00      	cmp	r3, #0
 801c0bc:	f000 80af 	beq.w	801c21e <_dtoa_r+0x8be>
 801c0c0:	2e00      	cmp	r6, #0
 801c0c2:	dd13      	ble.n	801c0ec <_dtoa_r+0x78c>
 801c0c4:	4639      	mov	r1, r7
 801c0c6:	4632      	mov	r2, r6
 801c0c8:	4620      	mov	r0, r4
 801c0ca:	f001 f9f9 	bl	801d4c0 <__pow5mult>
 801c0ce:	ee18 2a10 	vmov	r2, s16
 801c0d2:	4601      	mov	r1, r0
 801c0d4:	4607      	mov	r7, r0
 801c0d6:	4620      	mov	r0, r4
 801c0d8:	f001 f948 	bl	801d36c <__multiply>
 801c0dc:	ee18 1a10 	vmov	r1, s16
 801c0e0:	4680      	mov	r8, r0
 801c0e2:	4620      	mov	r0, r4
 801c0e4:	f001 f82a 	bl	801d13c <_Bfree>
 801c0e8:	ee08 8a10 	vmov	s16, r8
 801c0ec:	9b07      	ldr	r3, [sp, #28]
 801c0ee:	1b9a      	subs	r2, r3, r6
 801c0f0:	d006      	beq.n	801c100 <_dtoa_r+0x7a0>
 801c0f2:	ee18 1a10 	vmov	r1, s16
 801c0f6:	4620      	mov	r0, r4
 801c0f8:	f001 f9e2 	bl	801d4c0 <__pow5mult>
 801c0fc:	ee08 0a10 	vmov	s16, r0
 801c100:	2101      	movs	r1, #1
 801c102:	4620      	mov	r0, r4
 801c104:	f001 f91c 	bl	801d340 <__i2b>
 801c108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c10a:	2b00      	cmp	r3, #0
 801c10c:	4606      	mov	r6, r0
 801c10e:	f340 8088 	ble.w	801c222 <_dtoa_r+0x8c2>
 801c112:	461a      	mov	r2, r3
 801c114:	4601      	mov	r1, r0
 801c116:	4620      	mov	r0, r4
 801c118:	f001 f9d2 	bl	801d4c0 <__pow5mult>
 801c11c:	9b06      	ldr	r3, [sp, #24]
 801c11e:	2b01      	cmp	r3, #1
 801c120:	4606      	mov	r6, r0
 801c122:	f340 8081 	ble.w	801c228 <_dtoa_r+0x8c8>
 801c126:	f04f 0800 	mov.w	r8, #0
 801c12a:	6933      	ldr	r3, [r6, #16]
 801c12c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801c130:	6918      	ldr	r0, [r3, #16]
 801c132:	f001 f8b5 	bl	801d2a0 <__hi0bits>
 801c136:	f1c0 0020 	rsb	r0, r0, #32
 801c13a:	9b05      	ldr	r3, [sp, #20]
 801c13c:	4418      	add	r0, r3
 801c13e:	f010 001f 	ands.w	r0, r0, #31
 801c142:	f000 8092 	beq.w	801c26a <_dtoa_r+0x90a>
 801c146:	f1c0 0320 	rsb	r3, r0, #32
 801c14a:	2b04      	cmp	r3, #4
 801c14c:	f340 808a 	ble.w	801c264 <_dtoa_r+0x904>
 801c150:	f1c0 001c 	rsb	r0, r0, #28
 801c154:	9b04      	ldr	r3, [sp, #16]
 801c156:	4403      	add	r3, r0
 801c158:	9304      	str	r3, [sp, #16]
 801c15a:	9b05      	ldr	r3, [sp, #20]
 801c15c:	4403      	add	r3, r0
 801c15e:	4405      	add	r5, r0
 801c160:	9305      	str	r3, [sp, #20]
 801c162:	9b04      	ldr	r3, [sp, #16]
 801c164:	2b00      	cmp	r3, #0
 801c166:	dd07      	ble.n	801c178 <_dtoa_r+0x818>
 801c168:	ee18 1a10 	vmov	r1, s16
 801c16c:	461a      	mov	r2, r3
 801c16e:	4620      	mov	r0, r4
 801c170:	f001 fa00 	bl	801d574 <__lshift>
 801c174:	ee08 0a10 	vmov	s16, r0
 801c178:	9b05      	ldr	r3, [sp, #20]
 801c17a:	2b00      	cmp	r3, #0
 801c17c:	dd05      	ble.n	801c18a <_dtoa_r+0x82a>
 801c17e:	4631      	mov	r1, r6
 801c180:	461a      	mov	r2, r3
 801c182:	4620      	mov	r0, r4
 801c184:	f001 f9f6 	bl	801d574 <__lshift>
 801c188:	4606      	mov	r6, r0
 801c18a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c18c:	2b00      	cmp	r3, #0
 801c18e:	d06e      	beq.n	801c26e <_dtoa_r+0x90e>
 801c190:	ee18 0a10 	vmov	r0, s16
 801c194:	4631      	mov	r1, r6
 801c196:	f001 fa5d 	bl	801d654 <__mcmp>
 801c19a:	2800      	cmp	r0, #0
 801c19c:	da67      	bge.n	801c26e <_dtoa_r+0x90e>
 801c19e:	9b00      	ldr	r3, [sp, #0]
 801c1a0:	3b01      	subs	r3, #1
 801c1a2:	ee18 1a10 	vmov	r1, s16
 801c1a6:	9300      	str	r3, [sp, #0]
 801c1a8:	220a      	movs	r2, #10
 801c1aa:	2300      	movs	r3, #0
 801c1ac:	4620      	mov	r0, r4
 801c1ae:	f000 ffe7 	bl	801d180 <__multadd>
 801c1b2:	9b08      	ldr	r3, [sp, #32]
 801c1b4:	ee08 0a10 	vmov	s16, r0
 801c1b8:	2b00      	cmp	r3, #0
 801c1ba:	f000 81b1 	beq.w	801c520 <_dtoa_r+0xbc0>
 801c1be:	2300      	movs	r3, #0
 801c1c0:	4639      	mov	r1, r7
 801c1c2:	220a      	movs	r2, #10
 801c1c4:	4620      	mov	r0, r4
 801c1c6:	f000 ffdb 	bl	801d180 <__multadd>
 801c1ca:	9b02      	ldr	r3, [sp, #8]
 801c1cc:	2b00      	cmp	r3, #0
 801c1ce:	4607      	mov	r7, r0
 801c1d0:	f300 808e 	bgt.w	801c2f0 <_dtoa_r+0x990>
 801c1d4:	9b06      	ldr	r3, [sp, #24]
 801c1d6:	2b02      	cmp	r3, #2
 801c1d8:	dc51      	bgt.n	801c27e <_dtoa_r+0x91e>
 801c1da:	e089      	b.n	801c2f0 <_dtoa_r+0x990>
 801c1dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c1de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801c1e2:	e74b      	b.n	801c07c <_dtoa_r+0x71c>
 801c1e4:	9b03      	ldr	r3, [sp, #12]
 801c1e6:	1e5e      	subs	r6, r3, #1
 801c1e8:	9b07      	ldr	r3, [sp, #28]
 801c1ea:	42b3      	cmp	r3, r6
 801c1ec:	bfbf      	itttt	lt
 801c1ee:	9b07      	ldrlt	r3, [sp, #28]
 801c1f0:	9607      	strlt	r6, [sp, #28]
 801c1f2:	1af2      	sublt	r2, r6, r3
 801c1f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801c1f6:	bfb6      	itet	lt
 801c1f8:	189b      	addlt	r3, r3, r2
 801c1fa:	1b9e      	subge	r6, r3, r6
 801c1fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 801c1fe:	9b03      	ldr	r3, [sp, #12]
 801c200:	bfb8      	it	lt
 801c202:	2600      	movlt	r6, #0
 801c204:	2b00      	cmp	r3, #0
 801c206:	bfb7      	itett	lt
 801c208:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801c20c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801c210:	1a9d      	sublt	r5, r3, r2
 801c212:	2300      	movlt	r3, #0
 801c214:	e734      	b.n	801c080 <_dtoa_r+0x720>
 801c216:	9e07      	ldr	r6, [sp, #28]
 801c218:	9d04      	ldr	r5, [sp, #16]
 801c21a:	9f08      	ldr	r7, [sp, #32]
 801c21c:	e73b      	b.n	801c096 <_dtoa_r+0x736>
 801c21e:	9a07      	ldr	r2, [sp, #28]
 801c220:	e767      	b.n	801c0f2 <_dtoa_r+0x792>
 801c222:	9b06      	ldr	r3, [sp, #24]
 801c224:	2b01      	cmp	r3, #1
 801c226:	dc18      	bgt.n	801c25a <_dtoa_r+0x8fa>
 801c228:	f1ba 0f00 	cmp.w	sl, #0
 801c22c:	d115      	bne.n	801c25a <_dtoa_r+0x8fa>
 801c22e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c232:	b993      	cbnz	r3, 801c25a <_dtoa_r+0x8fa>
 801c234:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c238:	0d1b      	lsrs	r3, r3, #20
 801c23a:	051b      	lsls	r3, r3, #20
 801c23c:	b183      	cbz	r3, 801c260 <_dtoa_r+0x900>
 801c23e:	9b04      	ldr	r3, [sp, #16]
 801c240:	3301      	adds	r3, #1
 801c242:	9304      	str	r3, [sp, #16]
 801c244:	9b05      	ldr	r3, [sp, #20]
 801c246:	3301      	adds	r3, #1
 801c248:	9305      	str	r3, [sp, #20]
 801c24a:	f04f 0801 	mov.w	r8, #1
 801c24e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c250:	2b00      	cmp	r3, #0
 801c252:	f47f af6a 	bne.w	801c12a <_dtoa_r+0x7ca>
 801c256:	2001      	movs	r0, #1
 801c258:	e76f      	b.n	801c13a <_dtoa_r+0x7da>
 801c25a:	f04f 0800 	mov.w	r8, #0
 801c25e:	e7f6      	b.n	801c24e <_dtoa_r+0x8ee>
 801c260:	4698      	mov	r8, r3
 801c262:	e7f4      	b.n	801c24e <_dtoa_r+0x8ee>
 801c264:	f43f af7d 	beq.w	801c162 <_dtoa_r+0x802>
 801c268:	4618      	mov	r0, r3
 801c26a:	301c      	adds	r0, #28
 801c26c:	e772      	b.n	801c154 <_dtoa_r+0x7f4>
 801c26e:	9b03      	ldr	r3, [sp, #12]
 801c270:	2b00      	cmp	r3, #0
 801c272:	dc37      	bgt.n	801c2e4 <_dtoa_r+0x984>
 801c274:	9b06      	ldr	r3, [sp, #24]
 801c276:	2b02      	cmp	r3, #2
 801c278:	dd34      	ble.n	801c2e4 <_dtoa_r+0x984>
 801c27a:	9b03      	ldr	r3, [sp, #12]
 801c27c:	9302      	str	r3, [sp, #8]
 801c27e:	9b02      	ldr	r3, [sp, #8]
 801c280:	b96b      	cbnz	r3, 801c29e <_dtoa_r+0x93e>
 801c282:	4631      	mov	r1, r6
 801c284:	2205      	movs	r2, #5
 801c286:	4620      	mov	r0, r4
 801c288:	f000 ff7a 	bl	801d180 <__multadd>
 801c28c:	4601      	mov	r1, r0
 801c28e:	4606      	mov	r6, r0
 801c290:	ee18 0a10 	vmov	r0, s16
 801c294:	f001 f9de 	bl	801d654 <__mcmp>
 801c298:	2800      	cmp	r0, #0
 801c29a:	f73f adbb 	bgt.w	801be14 <_dtoa_r+0x4b4>
 801c29e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c2a0:	9d01      	ldr	r5, [sp, #4]
 801c2a2:	43db      	mvns	r3, r3
 801c2a4:	9300      	str	r3, [sp, #0]
 801c2a6:	f04f 0800 	mov.w	r8, #0
 801c2aa:	4631      	mov	r1, r6
 801c2ac:	4620      	mov	r0, r4
 801c2ae:	f000 ff45 	bl	801d13c <_Bfree>
 801c2b2:	2f00      	cmp	r7, #0
 801c2b4:	f43f aea4 	beq.w	801c000 <_dtoa_r+0x6a0>
 801c2b8:	f1b8 0f00 	cmp.w	r8, #0
 801c2bc:	d005      	beq.n	801c2ca <_dtoa_r+0x96a>
 801c2be:	45b8      	cmp	r8, r7
 801c2c0:	d003      	beq.n	801c2ca <_dtoa_r+0x96a>
 801c2c2:	4641      	mov	r1, r8
 801c2c4:	4620      	mov	r0, r4
 801c2c6:	f000 ff39 	bl	801d13c <_Bfree>
 801c2ca:	4639      	mov	r1, r7
 801c2cc:	4620      	mov	r0, r4
 801c2ce:	f000 ff35 	bl	801d13c <_Bfree>
 801c2d2:	e695      	b.n	801c000 <_dtoa_r+0x6a0>
 801c2d4:	2600      	movs	r6, #0
 801c2d6:	4637      	mov	r7, r6
 801c2d8:	e7e1      	b.n	801c29e <_dtoa_r+0x93e>
 801c2da:	9700      	str	r7, [sp, #0]
 801c2dc:	4637      	mov	r7, r6
 801c2de:	e599      	b.n	801be14 <_dtoa_r+0x4b4>
 801c2e0:	40240000 	.word	0x40240000
 801c2e4:	9b08      	ldr	r3, [sp, #32]
 801c2e6:	2b00      	cmp	r3, #0
 801c2e8:	f000 80ca 	beq.w	801c480 <_dtoa_r+0xb20>
 801c2ec:	9b03      	ldr	r3, [sp, #12]
 801c2ee:	9302      	str	r3, [sp, #8]
 801c2f0:	2d00      	cmp	r5, #0
 801c2f2:	dd05      	ble.n	801c300 <_dtoa_r+0x9a0>
 801c2f4:	4639      	mov	r1, r7
 801c2f6:	462a      	mov	r2, r5
 801c2f8:	4620      	mov	r0, r4
 801c2fa:	f001 f93b 	bl	801d574 <__lshift>
 801c2fe:	4607      	mov	r7, r0
 801c300:	f1b8 0f00 	cmp.w	r8, #0
 801c304:	d05b      	beq.n	801c3be <_dtoa_r+0xa5e>
 801c306:	6879      	ldr	r1, [r7, #4]
 801c308:	4620      	mov	r0, r4
 801c30a:	f000 fed7 	bl	801d0bc <_Balloc>
 801c30e:	4605      	mov	r5, r0
 801c310:	b928      	cbnz	r0, 801c31e <_dtoa_r+0x9be>
 801c312:	4b87      	ldr	r3, [pc, #540]	; (801c530 <_dtoa_r+0xbd0>)
 801c314:	4602      	mov	r2, r0
 801c316:	f240 21ea 	movw	r1, #746	; 0x2ea
 801c31a:	f7ff bb3b 	b.w	801b994 <_dtoa_r+0x34>
 801c31e:	693a      	ldr	r2, [r7, #16]
 801c320:	3202      	adds	r2, #2
 801c322:	0092      	lsls	r2, r2, #2
 801c324:	f107 010c 	add.w	r1, r7, #12
 801c328:	300c      	adds	r0, #12
 801c32a:	f7fd f9e7 	bl	80196fc <memcpy>
 801c32e:	2201      	movs	r2, #1
 801c330:	4629      	mov	r1, r5
 801c332:	4620      	mov	r0, r4
 801c334:	f001 f91e 	bl	801d574 <__lshift>
 801c338:	9b01      	ldr	r3, [sp, #4]
 801c33a:	f103 0901 	add.w	r9, r3, #1
 801c33e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801c342:	4413      	add	r3, r2
 801c344:	9305      	str	r3, [sp, #20]
 801c346:	f00a 0301 	and.w	r3, sl, #1
 801c34a:	46b8      	mov	r8, r7
 801c34c:	9304      	str	r3, [sp, #16]
 801c34e:	4607      	mov	r7, r0
 801c350:	4631      	mov	r1, r6
 801c352:	ee18 0a10 	vmov	r0, s16
 801c356:	f7ff fa75 	bl	801b844 <quorem>
 801c35a:	4641      	mov	r1, r8
 801c35c:	9002      	str	r0, [sp, #8]
 801c35e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801c362:	ee18 0a10 	vmov	r0, s16
 801c366:	f001 f975 	bl	801d654 <__mcmp>
 801c36a:	463a      	mov	r2, r7
 801c36c:	9003      	str	r0, [sp, #12]
 801c36e:	4631      	mov	r1, r6
 801c370:	4620      	mov	r0, r4
 801c372:	f001 f98b 	bl	801d68c <__mdiff>
 801c376:	68c2      	ldr	r2, [r0, #12]
 801c378:	f109 3bff 	add.w	fp, r9, #4294967295
 801c37c:	4605      	mov	r5, r0
 801c37e:	bb02      	cbnz	r2, 801c3c2 <_dtoa_r+0xa62>
 801c380:	4601      	mov	r1, r0
 801c382:	ee18 0a10 	vmov	r0, s16
 801c386:	f001 f965 	bl	801d654 <__mcmp>
 801c38a:	4602      	mov	r2, r0
 801c38c:	4629      	mov	r1, r5
 801c38e:	4620      	mov	r0, r4
 801c390:	9207      	str	r2, [sp, #28]
 801c392:	f000 fed3 	bl	801d13c <_Bfree>
 801c396:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801c39a:	ea43 0102 	orr.w	r1, r3, r2
 801c39e:	9b04      	ldr	r3, [sp, #16]
 801c3a0:	430b      	orrs	r3, r1
 801c3a2:	464d      	mov	r5, r9
 801c3a4:	d10f      	bne.n	801c3c6 <_dtoa_r+0xa66>
 801c3a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c3aa:	d02a      	beq.n	801c402 <_dtoa_r+0xaa2>
 801c3ac:	9b03      	ldr	r3, [sp, #12]
 801c3ae:	2b00      	cmp	r3, #0
 801c3b0:	dd02      	ble.n	801c3b8 <_dtoa_r+0xa58>
 801c3b2:	9b02      	ldr	r3, [sp, #8]
 801c3b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801c3b8:	f88b a000 	strb.w	sl, [fp]
 801c3bc:	e775      	b.n	801c2aa <_dtoa_r+0x94a>
 801c3be:	4638      	mov	r0, r7
 801c3c0:	e7ba      	b.n	801c338 <_dtoa_r+0x9d8>
 801c3c2:	2201      	movs	r2, #1
 801c3c4:	e7e2      	b.n	801c38c <_dtoa_r+0xa2c>
 801c3c6:	9b03      	ldr	r3, [sp, #12]
 801c3c8:	2b00      	cmp	r3, #0
 801c3ca:	db04      	blt.n	801c3d6 <_dtoa_r+0xa76>
 801c3cc:	9906      	ldr	r1, [sp, #24]
 801c3ce:	430b      	orrs	r3, r1
 801c3d0:	9904      	ldr	r1, [sp, #16]
 801c3d2:	430b      	orrs	r3, r1
 801c3d4:	d122      	bne.n	801c41c <_dtoa_r+0xabc>
 801c3d6:	2a00      	cmp	r2, #0
 801c3d8:	ddee      	ble.n	801c3b8 <_dtoa_r+0xa58>
 801c3da:	ee18 1a10 	vmov	r1, s16
 801c3de:	2201      	movs	r2, #1
 801c3e0:	4620      	mov	r0, r4
 801c3e2:	f001 f8c7 	bl	801d574 <__lshift>
 801c3e6:	4631      	mov	r1, r6
 801c3e8:	ee08 0a10 	vmov	s16, r0
 801c3ec:	f001 f932 	bl	801d654 <__mcmp>
 801c3f0:	2800      	cmp	r0, #0
 801c3f2:	dc03      	bgt.n	801c3fc <_dtoa_r+0xa9c>
 801c3f4:	d1e0      	bne.n	801c3b8 <_dtoa_r+0xa58>
 801c3f6:	f01a 0f01 	tst.w	sl, #1
 801c3fa:	d0dd      	beq.n	801c3b8 <_dtoa_r+0xa58>
 801c3fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c400:	d1d7      	bne.n	801c3b2 <_dtoa_r+0xa52>
 801c402:	2339      	movs	r3, #57	; 0x39
 801c404:	f88b 3000 	strb.w	r3, [fp]
 801c408:	462b      	mov	r3, r5
 801c40a:	461d      	mov	r5, r3
 801c40c:	3b01      	subs	r3, #1
 801c40e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801c412:	2a39      	cmp	r2, #57	; 0x39
 801c414:	d071      	beq.n	801c4fa <_dtoa_r+0xb9a>
 801c416:	3201      	adds	r2, #1
 801c418:	701a      	strb	r2, [r3, #0]
 801c41a:	e746      	b.n	801c2aa <_dtoa_r+0x94a>
 801c41c:	2a00      	cmp	r2, #0
 801c41e:	dd07      	ble.n	801c430 <_dtoa_r+0xad0>
 801c420:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c424:	d0ed      	beq.n	801c402 <_dtoa_r+0xaa2>
 801c426:	f10a 0301 	add.w	r3, sl, #1
 801c42a:	f88b 3000 	strb.w	r3, [fp]
 801c42e:	e73c      	b.n	801c2aa <_dtoa_r+0x94a>
 801c430:	9b05      	ldr	r3, [sp, #20]
 801c432:	f809 ac01 	strb.w	sl, [r9, #-1]
 801c436:	4599      	cmp	r9, r3
 801c438:	d047      	beq.n	801c4ca <_dtoa_r+0xb6a>
 801c43a:	ee18 1a10 	vmov	r1, s16
 801c43e:	2300      	movs	r3, #0
 801c440:	220a      	movs	r2, #10
 801c442:	4620      	mov	r0, r4
 801c444:	f000 fe9c 	bl	801d180 <__multadd>
 801c448:	45b8      	cmp	r8, r7
 801c44a:	ee08 0a10 	vmov	s16, r0
 801c44e:	f04f 0300 	mov.w	r3, #0
 801c452:	f04f 020a 	mov.w	r2, #10
 801c456:	4641      	mov	r1, r8
 801c458:	4620      	mov	r0, r4
 801c45a:	d106      	bne.n	801c46a <_dtoa_r+0xb0a>
 801c45c:	f000 fe90 	bl	801d180 <__multadd>
 801c460:	4680      	mov	r8, r0
 801c462:	4607      	mov	r7, r0
 801c464:	f109 0901 	add.w	r9, r9, #1
 801c468:	e772      	b.n	801c350 <_dtoa_r+0x9f0>
 801c46a:	f000 fe89 	bl	801d180 <__multadd>
 801c46e:	4639      	mov	r1, r7
 801c470:	4680      	mov	r8, r0
 801c472:	2300      	movs	r3, #0
 801c474:	220a      	movs	r2, #10
 801c476:	4620      	mov	r0, r4
 801c478:	f000 fe82 	bl	801d180 <__multadd>
 801c47c:	4607      	mov	r7, r0
 801c47e:	e7f1      	b.n	801c464 <_dtoa_r+0xb04>
 801c480:	9b03      	ldr	r3, [sp, #12]
 801c482:	9302      	str	r3, [sp, #8]
 801c484:	9d01      	ldr	r5, [sp, #4]
 801c486:	ee18 0a10 	vmov	r0, s16
 801c48a:	4631      	mov	r1, r6
 801c48c:	f7ff f9da 	bl	801b844 <quorem>
 801c490:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801c494:	9b01      	ldr	r3, [sp, #4]
 801c496:	f805 ab01 	strb.w	sl, [r5], #1
 801c49a:	1aea      	subs	r2, r5, r3
 801c49c:	9b02      	ldr	r3, [sp, #8]
 801c49e:	4293      	cmp	r3, r2
 801c4a0:	dd09      	ble.n	801c4b6 <_dtoa_r+0xb56>
 801c4a2:	ee18 1a10 	vmov	r1, s16
 801c4a6:	2300      	movs	r3, #0
 801c4a8:	220a      	movs	r2, #10
 801c4aa:	4620      	mov	r0, r4
 801c4ac:	f000 fe68 	bl	801d180 <__multadd>
 801c4b0:	ee08 0a10 	vmov	s16, r0
 801c4b4:	e7e7      	b.n	801c486 <_dtoa_r+0xb26>
 801c4b6:	9b02      	ldr	r3, [sp, #8]
 801c4b8:	2b00      	cmp	r3, #0
 801c4ba:	bfc8      	it	gt
 801c4bc:	461d      	movgt	r5, r3
 801c4be:	9b01      	ldr	r3, [sp, #4]
 801c4c0:	bfd8      	it	le
 801c4c2:	2501      	movle	r5, #1
 801c4c4:	441d      	add	r5, r3
 801c4c6:	f04f 0800 	mov.w	r8, #0
 801c4ca:	ee18 1a10 	vmov	r1, s16
 801c4ce:	2201      	movs	r2, #1
 801c4d0:	4620      	mov	r0, r4
 801c4d2:	f001 f84f 	bl	801d574 <__lshift>
 801c4d6:	4631      	mov	r1, r6
 801c4d8:	ee08 0a10 	vmov	s16, r0
 801c4dc:	f001 f8ba 	bl	801d654 <__mcmp>
 801c4e0:	2800      	cmp	r0, #0
 801c4e2:	dc91      	bgt.n	801c408 <_dtoa_r+0xaa8>
 801c4e4:	d102      	bne.n	801c4ec <_dtoa_r+0xb8c>
 801c4e6:	f01a 0f01 	tst.w	sl, #1
 801c4ea:	d18d      	bne.n	801c408 <_dtoa_r+0xaa8>
 801c4ec:	462b      	mov	r3, r5
 801c4ee:	461d      	mov	r5, r3
 801c4f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c4f4:	2a30      	cmp	r2, #48	; 0x30
 801c4f6:	d0fa      	beq.n	801c4ee <_dtoa_r+0xb8e>
 801c4f8:	e6d7      	b.n	801c2aa <_dtoa_r+0x94a>
 801c4fa:	9a01      	ldr	r2, [sp, #4]
 801c4fc:	429a      	cmp	r2, r3
 801c4fe:	d184      	bne.n	801c40a <_dtoa_r+0xaaa>
 801c500:	9b00      	ldr	r3, [sp, #0]
 801c502:	3301      	adds	r3, #1
 801c504:	9300      	str	r3, [sp, #0]
 801c506:	2331      	movs	r3, #49	; 0x31
 801c508:	7013      	strb	r3, [r2, #0]
 801c50a:	e6ce      	b.n	801c2aa <_dtoa_r+0x94a>
 801c50c:	4b09      	ldr	r3, [pc, #36]	; (801c534 <_dtoa_r+0xbd4>)
 801c50e:	f7ff ba95 	b.w	801ba3c <_dtoa_r+0xdc>
 801c512:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c514:	2b00      	cmp	r3, #0
 801c516:	f47f aa6e 	bne.w	801b9f6 <_dtoa_r+0x96>
 801c51a:	4b07      	ldr	r3, [pc, #28]	; (801c538 <_dtoa_r+0xbd8>)
 801c51c:	f7ff ba8e 	b.w	801ba3c <_dtoa_r+0xdc>
 801c520:	9b02      	ldr	r3, [sp, #8]
 801c522:	2b00      	cmp	r3, #0
 801c524:	dcae      	bgt.n	801c484 <_dtoa_r+0xb24>
 801c526:	9b06      	ldr	r3, [sp, #24]
 801c528:	2b02      	cmp	r3, #2
 801c52a:	f73f aea8 	bgt.w	801c27e <_dtoa_r+0x91e>
 801c52e:	e7a9      	b.n	801c484 <_dtoa_r+0xb24>
 801c530:	08020351 	.word	0x08020351
 801c534:	080200bc 	.word	0x080200bc
 801c538:	080202e9 	.word	0x080202e9

0801c53c <__sflush_r>:
 801c53c:	898a      	ldrh	r2, [r1, #12]
 801c53e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c542:	4605      	mov	r5, r0
 801c544:	0710      	lsls	r0, r2, #28
 801c546:	460c      	mov	r4, r1
 801c548:	d458      	bmi.n	801c5fc <__sflush_r+0xc0>
 801c54a:	684b      	ldr	r3, [r1, #4]
 801c54c:	2b00      	cmp	r3, #0
 801c54e:	dc05      	bgt.n	801c55c <__sflush_r+0x20>
 801c550:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c552:	2b00      	cmp	r3, #0
 801c554:	dc02      	bgt.n	801c55c <__sflush_r+0x20>
 801c556:	2000      	movs	r0, #0
 801c558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c55c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c55e:	2e00      	cmp	r6, #0
 801c560:	d0f9      	beq.n	801c556 <__sflush_r+0x1a>
 801c562:	2300      	movs	r3, #0
 801c564:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c568:	682f      	ldr	r7, [r5, #0]
 801c56a:	602b      	str	r3, [r5, #0]
 801c56c:	d032      	beq.n	801c5d4 <__sflush_r+0x98>
 801c56e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c570:	89a3      	ldrh	r3, [r4, #12]
 801c572:	075a      	lsls	r2, r3, #29
 801c574:	d505      	bpl.n	801c582 <__sflush_r+0x46>
 801c576:	6863      	ldr	r3, [r4, #4]
 801c578:	1ac0      	subs	r0, r0, r3
 801c57a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c57c:	b10b      	cbz	r3, 801c582 <__sflush_r+0x46>
 801c57e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c580:	1ac0      	subs	r0, r0, r3
 801c582:	2300      	movs	r3, #0
 801c584:	4602      	mov	r2, r0
 801c586:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c588:	6a21      	ldr	r1, [r4, #32]
 801c58a:	4628      	mov	r0, r5
 801c58c:	47b0      	blx	r6
 801c58e:	1c43      	adds	r3, r0, #1
 801c590:	89a3      	ldrh	r3, [r4, #12]
 801c592:	d106      	bne.n	801c5a2 <__sflush_r+0x66>
 801c594:	6829      	ldr	r1, [r5, #0]
 801c596:	291d      	cmp	r1, #29
 801c598:	d82c      	bhi.n	801c5f4 <__sflush_r+0xb8>
 801c59a:	4a2a      	ldr	r2, [pc, #168]	; (801c644 <__sflush_r+0x108>)
 801c59c:	40ca      	lsrs	r2, r1
 801c59e:	07d6      	lsls	r6, r2, #31
 801c5a0:	d528      	bpl.n	801c5f4 <__sflush_r+0xb8>
 801c5a2:	2200      	movs	r2, #0
 801c5a4:	6062      	str	r2, [r4, #4]
 801c5a6:	04d9      	lsls	r1, r3, #19
 801c5a8:	6922      	ldr	r2, [r4, #16]
 801c5aa:	6022      	str	r2, [r4, #0]
 801c5ac:	d504      	bpl.n	801c5b8 <__sflush_r+0x7c>
 801c5ae:	1c42      	adds	r2, r0, #1
 801c5b0:	d101      	bne.n	801c5b6 <__sflush_r+0x7a>
 801c5b2:	682b      	ldr	r3, [r5, #0]
 801c5b4:	b903      	cbnz	r3, 801c5b8 <__sflush_r+0x7c>
 801c5b6:	6560      	str	r0, [r4, #84]	; 0x54
 801c5b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c5ba:	602f      	str	r7, [r5, #0]
 801c5bc:	2900      	cmp	r1, #0
 801c5be:	d0ca      	beq.n	801c556 <__sflush_r+0x1a>
 801c5c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c5c4:	4299      	cmp	r1, r3
 801c5c6:	d002      	beq.n	801c5ce <__sflush_r+0x92>
 801c5c8:	4628      	mov	r0, r5
 801c5ca:	f7fd f8c7 	bl	801975c <_free_r>
 801c5ce:	2000      	movs	r0, #0
 801c5d0:	6360      	str	r0, [r4, #52]	; 0x34
 801c5d2:	e7c1      	b.n	801c558 <__sflush_r+0x1c>
 801c5d4:	6a21      	ldr	r1, [r4, #32]
 801c5d6:	2301      	movs	r3, #1
 801c5d8:	4628      	mov	r0, r5
 801c5da:	47b0      	blx	r6
 801c5dc:	1c41      	adds	r1, r0, #1
 801c5de:	d1c7      	bne.n	801c570 <__sflush_r+0x34>
 801c5e0:	682b      	ldr	r3, [r5, #0]
 801c5e2:	2b00      	cmp	r3, #0
 801c5e4:	d0c4      	beq.n	801c570 <__sflush_r+0x34>
 801c5e6:	2b1d      	cmp	r3, #29
 801c5e8:	d001      	beq.n	801c5ee <__sflush_r+0xb2>
 801c5ea:	2b16      	cmp	r3, #22
 801c5ec:	d101      	bne.n	801c5f2 <__sflush_r+0xb6>
 801c5ee:	602f      	str	r7, [r5, #0]
 801c5f0:	e7b1      	b.n	801c556 <__sflush_r+0x1a>
 801c5f2:	89a3      	ldrh	r3, [r4, #12]
 801c5f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c5f8:	81a3      	strh	r3, [r4, #12]
 801c5fa:	e7ad      	b.n	801c558 <__sflush_r+0x1c>
 801c5fc:	690f      	ldr	r7, [r1, #16]
 801c5fe:	2f00      	cmp	r7, #0
 801c600:	d0a9      	beq.n	801c556 <__sflush_r+0x1a>
 801c602:	0793      	lsls	r3, r2, #30
 801c604:	680e      	ldr	r6, [r1, #0]
 801c606:	bf08      	it	eq
 801c608:	694b      	ldreq	r3, [r1, #20]
 801c60a:	600f      	str	r7, [r1, #0]
 801c60c:	bf18      	it	ne
 801c60e:	2300      	movne	r3, #0
 801c610:	eba6 0807 	sub.w	r8, r6, r7
 801c614:	608b      	str	r3, [r1, #8]
 801c616:	f1b8 0f00 	cmp.w	r8, #0
 801c61a:	dd9c      	ble.n	801c556 <__sflush_r+0x1a>
 801c61c:	6a21      	ldr	r1, [r4, #32]
 801c61e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c620:	4643      	mov	r3, r8
 801c622:	463a      	mov	r2, r7
 801c624:	4628      	mov	r0, r5
 801c626:	47b0      	blx	r6
 801c628:	2800      	cmp	r0, #0
 801c62a:	dc06      	bgt.n	801c63a <__sflush_r+0xfe>
 801c62c:	89a3      	ldrh	r3, [r4, #12]
 801c62e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c632:	81a3      	strh	r3, [r4, #12]
 801c634:	f04f 30ff 	mov.w	r0, #4294967295
 801c638:	e78e      	b.n	801c558 <__sflush_r+0x1c>
 801c63a:	4407      	add	r7, r0
 801c63c:	eba8 0800 	sub.w	r8, r8, r0
 801c640:	e7e9      	b.n	801c616 <__sflush_r+0xda>
 801c642:	bf00      	nop
 801c644:	20400001 	.word	0x20400001

0801c648 <_fflush_r>:
 801c648:	b538      	push	{r3, r4, r5, lr}
 801c64a:	690b      	ldr	r3, [r1, #16]
 801c64c:	4605      	mov	r5, r0
 801c64e:	460c      	mov	r4, r1
 801c650:	b913      	cbnz	r3, 801c658 <_fflush_r+0x10>
 801c652:	2500      	movs	r5, #0
 801c654:	4628      	mov	r0, r5
 801c656:	bd38      	pop	{r3, r4, r5, pc}
 801c658:	b118      	cbz	r0, 801c662 <_fflush_r+0x1a>
 801c65a:	6983      	ldr	r3, [r0, #24]
 801c65c:	b90b      	cbnz	r3, 801c662 <_fflush_r+0x1a>
 801c65e:	f000 f887 	bl	801c770 <__sinit>
 801c662:	4b14      	ldr	r3, [pc, #80]	; (801c6b4 <_fflush_r+0x6c>)
 801c664:	429c      	cmp	r4, r3
 801c666:	d11b      	bne.n	801c6a0 <_fflush_r+0x58>
 801c668:	686c      	ldr	r4, [r5, #4]
 801c66a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c66e:	2b00      	cmp	r3, #0
 801c670:	d0ef      	beq.n	801c652 <_fflush_r+0xa>
 801c672:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c674:	07d0      	lsls	r0, r2, #31
 801c676:	d404      	bmi.n	801c682 <_fflush_r+0x3a>
 801c678:	0599      	lsls	r1, r3, #22
 801c67a:	d402      	bmi.n	801c682 <_fflush_r+0x3a>
 801c67c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c67e:	f7fd f82a 	bl	80196d6 <__retarget_lock_acquire_recursive>
 801c682:	4628      	mov	r0, r5
 801c684:	4621      	mov	r1, r4
 801c686:	f7ff ff59 	bl	801c53c <__sflush_r>
 801c68a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c68c:	07da      	lsls	r2, r3, #31
 801c68e:	4605      	mov	r5, r0
 801c690:	d4e0      	bmi.n	801c654 <_fflush_r+0xc>
 801c692:	89a3      	ldrh	r3, [r4, #12]
 801c694:	059b      	lsls	r3, r3, #22
 801c696:	d4dd      	bmi.n	801c654 <_fflush_r+0xc>
 801c698:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c69a:	f7fd f81d 	bl	80196d8 <__retarget_lock_release_recursive>
 801c69e:	e7d9      	b.n	801c654 <_fflush_r+0xc>
 801c6a0:	4b05      	ldr	r3, [pc, #20]	; (801c6b8 <_fflush_r+0x70>)
 801c6a2:	429c      	cmp	r4, r3
 801c6a4:	d101      	bne.n	801c6aa <_fflush_r+0x62>
 801c6a6:	68ac      	ldr	r4, [r5, #8]
 801c6a8:	e7df      	b.n	801c66a <_fflush_r+0x22>
 801c6aa:	4b04      	ldr	r3, [pc, #16]	; (801c6bc <_fflush_r+0x74>)
 801c6ac:	429c      	cmp	r4, r3
 801c6ae:	bf08      	it	eq
 801c6b0:	68ec      	ldreq	r4, [r5, #12]
 801c6b2:	e7da      	b.n	801c66a <_fflush_r+0x22>
 801c6b4:	08020384 	.word	0x08020384
 801c6b8:	080203a4 	.word	0x080203a4
 801c6bc:	08020364 	.word	0x08020364

0801c6c0 <std>:
 801c6c0:	2300      	movs	r3, #0
 801c6c2:	b510      	push	{r4, lr}
 801c6c4:	4604      	mov	r4, r0
 801c6c6:	e9c0 3300 	strd	r3, r3, [r0]
 801c6ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c6ce:	6083      	str	r3, [r0, #8]
 801c6d0:	8181      	strh	r1, [r0, #12]
 801c6d2:	6643      	str	r3, [r0, #100]	; 0x64
 801c6d4:	81c2      	strh	r2, [r0, #14]
 801c6d6:	6183      	str	r3, [r0, #24]
 801c6d8:	4619      	mov	r1, r3
 801c6da:	2208      	movs	r2, #8
 801c6dc:	305c      	adds	r0, #92	; 0x5c
 801c6de:	f7fd f835 	bl	801974c <memset>
 801c6e2:	4b05      	ldr	r3, [pc, #20]	; (801c6f8 <std+0x38>)
 801c6e4:	6263      	str	r3, [r4, #36]	; 0x24
 801c6e6:	4b05      	ldr	r3, [pc, #20]	; (801c6fc <std+0x3c>)
 801c6e8:	62a3      	str	r3, [r4, #40]	; 0x28
 801c6ea:	4b05      	ldr	r3, [pc, #20]	; (801c700 <std+0x40>)
 801c6ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c6ee:	4b05      	ldr	r3, [pc, #20]	; (801c704 <std+0x44>)
 801c6f0:	6224      	str	r4, [r4, #32]
 801c6f2:	6323      	str	r3, [r4, #48]	; 0x30
 801c6f4:	bd10      	pop	{r4, pc}
 801c6f6:	bf00      	nop
 801c6f8:	0801dfe9 	.word	0x0801dfe9
 801c6fc:	0801e00b 	.word	0x0801e00b
 801c700:	0801e043 	.word	0x0801e043
 801c704:	0801e067 	.word	0x0801e067

0801c708 <_cleanup_r>:
 801c708:	4901      	ldr	r1, [pc, #4]	; (801c710 <_cleanup_r+0x8>)
 801c70a:	f000 b8c1 	b.w	801c890 <_fwalk_reent>
 801c70e:	bf00      	nop
 801c710:	0801c649 	.word	0x0801c649

0801c714 <__sfmoreglue>:
 801c714:	b570      	push	{r4, r5, r6, lr}
 801c716:	2268      	movs	r2, #104	; 0x68
 801c718:	1e4d      	subs	r5, r1, #1
 801c71a:	4355      	muls	r5, r2
 801c71c:	460e      	mov	r6, r1
 801c71e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801c722:	f7fd f887 	bl	8019834 <_malloc_r>
 801c726:	4604      	mov	r4, r0
 801c728:	b140      	cbz	r0, 801c73c <__sfmoreglue+0x28>
 801c72a:	2100      	movs	r1, #0
 801c72c:	e9c0 1600 	strd	r1, r6, [r0]
 801c730:	300c      	adds	r0, #12
 801c732:	60a0      	str	r0, [r4, #8]
 801c734:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c738:	f7fd f808 	bl	801974c <memset>
 801c73c:	4620      	mov	r0, r4
 801c73e:	bd70      	pop	{r4, r5, r6, pc}

0801c740 <__sfp_lock_acquire>:
 801c740:	4801      	ldr	r0, [pc, #4]	; (801c748 <__sfp_lock_acquire+0x8>)
 801c742:	f7fc bfc8 	b.w	80196d6 <__retarget_lock_acquire_recursive>
 801c746:	bf00      	nop
 801c748:	20002571 	.word	0x20002571

0801c74c <__sfp_lock_release>:
 801c74c:	4801      	ldr	r0, [pc, #4]	; (801c754 <__sfp_lock_release+0x8>)
 801c74e:	f7fc bfc3 	b.w	80196d8 <__retarget_lock_release_recursive>
 801c752:	bf00      	nop
 801c754:	20002571 	.word	0x20002571

0801c758 <__sinit_lock_acquire>:
 801c758:	4801      	ldr	r0, [pc, #4]	; (801c760 <__sinit_lock_acquire+0x8>)
 801c75a:	f7fc bfbc 	b.w	80196d6 <__retarget_lock_acquire_recursive>
 801c75e:	bf00      	nop
 801c760:	20002572 	.word	0x20002572

0801c764 <__sinit_lock_release>:
 801c764:	4801      	ldr	r0, [pc, #4]	; (801c76c <__sinit_lock_release+0x8>)
 801c766:	f7fc bfb7 	b.w	80196d8 <__retarget_lock_release_recursive>
 801c76a:	bf00      	nop
 801c76c:	20002572 	.word	0x20002572

0801c770 <__sinit>:
 801c770:	b510      	push	{r4, lr}
 801c772:	4604      	mov	r4, r0
 801c774:	f7ff fff0 	bl	801c758 <__sinit_lock_acquire>
 801c778:	69a3      	ldr	r3, [r4, #24]
 801c77a:	b11b      	cbz	r3, 801c784 <__sinit+0x14>
 801c77c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c780:	f7ff bff0 	b.w	801c764 <__sinit_lock_release>
 801c784:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801c788:	6523      	str	r3, [r4, #80]	; 0x50
 801c78a:	4b13      	ldr	r3, [pc, #76]	; (801c7d8 <__sinit+0x68>)
 801c78c:	4a13      	ldr	r2, [pc, #76]	; (801c7dc <__sinit+0x6c>)
 801c78e:	681b      	ldr	r3, [r3, #0]
 801c790:	62a2      	str	r2, [r4, #40]	; 0x28
 801c792:	42a3      	cmp	r3, r4
 801c794:	bf04      	itt	eq
 801c796:	2301      	moveq	r3, #1
 801c798:	61a3      	streq	r3, [r4, #24]
 801c79a:	4620      	mov	r0, r4
 801c79c:	f000 f820 	bl	801c7e0 <__sfp>
 801c7a0:	6060      	str	r0, [r4, #4]
 801c7a2:	4620      	mov	r0, r4
 801c7a4:	f000 f81c 	bl	801c7e0 <__sfp>
 801c7a8:	60a0      	str	r0, [r4, #8]
 801c7aa:	4620      	mov	r0, r4
 801c7ac:	f000 f818 	bl	801c7e0 <__sfp>
 801c7b0:	2200      	movs	r2, #0
 801c7b2:	60e0      	str	r0, [r4, #12]
 801c7b4:	2104      	movs	r1, #4
 801c7b6:	6860      	ldr	r0, [r4, #4]
 801c7b8:	f7ff ff82 	bl	801c6c0 <std>
 801c7bc:	68a0      	ldr	r0, [r4, #8]
 801c7be:	2201      	movs	r2, #1
 801c7c0:	2109      	movs	r1, #9
 801c7c2:	f7ff ff7d 	bl	801c6c0 <std>
 801c7c6:	68e0      	ldr	r0, [r4, #12]
 801c7c8:	2202      	movs	r2, #2
 801c7ca:	2112      	movs	r1, #18
 801c7cc:	f7ff ff78 	bl	801c6c0 <std>
 801c7d0:	2301      	movs	r3, #1
 801c7d2:	61a3      	str	r3, [r4, #24]
 801c7d4:	e7d2      	b.n	801c77c <__sinit+0xc>
 801c7d6:	bf00      	nop
 801c7d8:	080200a8 	.word	0x080200a8
 801c7dc:	0801c709 	.word	0x0801c709

0801c7e0 <__sfp>:
 801c7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c7e2:	4607      	mov	r7, r0
 801c7e4:	f7ff ffac 	bl	801c740 <__sfp_lock_acquire>
 801c7e8:	4b1e      	ldr	r3, [pc, #120]	; (801c864 <__sfp+0x84>)
 801c7ea:	681e      	ldr	r6, [r3, #0]
 801c7ec:	69b3      	ldr	r3, [r6, #24]
 801c7ee:	b913      	cbnz	r3, 801c7f6 <__sfp+0x16>
 801c7f0:	4630      	mov	r0, r6
 801c7f2:	f7ff ffbd 	bl	801c770 <__sinit>
 801c7f6:	3648      	adds	r6, #72	; 0x48
 801c7f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c7fc:	3b01      	subs	r3, #1
 801c7fe:	d503      	bpl.n	801c808 <__sfp+0x28>
 801c800:	6833      	ldr	r3, [r6, #0]
 801c802:	b30b      	cbz	r3, 801c848 <__sfp+0x68>
 801c804:	6836      	ldr	r6, [r6, #0]
 801c806:	e7f7      	b.n	801c7f8 <__sfp+0x18>
 801c808:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c80c:	b9d5      	cbnz	r5, 801c844 <__sfp+0x64>
 801c80e:	4b16      	ldr	r3, [pc, #88]	; (801c868 <__sfp+0x88>)
 801c810:	60e3      	str	r3, [r4, #12]
 801c812:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c816:	6665      	str	r5, [r4, #100]	; 0x64
 801c818:	f7fc ff5c 	bl	80196d4 <__retarget_lock_init_recursive>
 801c81c:	f7ff ff96 	bl	801c74c <__sfp_lock_release>
 801c820:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801c824:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801c828:	6025      	str	r5, [r4, #0]
 801c82a:	61a5      	str	r5, [r4, #24]
 801c82c:	2208      	movs	r2, #8
 801c82e:	4629      	mov	r1, r5
 801c830:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c834:	f7fc ff8a 	bl	801974c <memset>
 801c838:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c83c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c840:	4620      	mov	r0, r4
 801c842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c844:	3468      	adds	r4, #104	; 0x68
 801c846:	e7d9      	b.n	801c7fc <__sfp+0x1c>
 801c848:	2104      	movs	r1, #4
 801c84a:	4638      	mov	r0, r7
 801c84c:	f7ff ff62 	bl	801c714 <__sfmoreglue>
 801c850:	4604      	mov	r4, r0
 801c852:	6030      	str	r0, [r6, #0]
 801c854:	2800      	cmp	r0, #0
 801c856:	d1d5      	bne.n	801c804 <__sfp+0x24>
 801c858:	f7ff ff78 	bl	801c74c <__sfp_lock_release>
 801c85c:	230c      	movs	r3, #12
 801c85e:	603b      	str	r3, [r7, #0]
 801c860:	e7ee      	b.n	801c840 <__sfp+0x60>
 801c862:	bf00      	nop
 801c864:	080200a8 	.word	0x080200a8
 801c868:	ffff0001 	.word	0xffff0001

0801c86c <fiprintf>:
 801c86c:	b40e      	push	{r1, r2, r3}
 801c86e:	b503      	push	{r0, r1, lr}
 801c870:	4601      	mov	r1, r0
 801c872:	ab03      	add	r3, sp, #12
 801c874:	4805      	ldr	r0, [pc, #20]	; (801c88c <fiprintf+0x20>)
 801c876:	f853 2b04 	ldr.w	r2, [r3], #4
 801c87a:	6800      	ldr	r0, [r0, #0]
 801c87c:	9301      	str	r3, [sp, #4]
 801c87e:	f001 fa79 	bl	801dd74 <_vfiprintf_r>
 801c882:	b002      	add	sp, #8
 801c884:	f85d eb04 	ldr.w	lr, [sp], #4
 801c888:	b003      	add	sp, #12
 801c88a:	4770      	bx	lr
 801c88c:	20000140 	.word	0x20000140

0801c890 <_fwalk_reent>:
 801c890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c894:	4606      	mov	r6, r0
 801c896:	4688      	mov	r8, r1
 801c898:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c89c:	2700      	movs	r7, #0
 801c89e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c8a2:	f1b9 0901 	subs.w	r9, r9, #1
 801c8a6:	d505      	bpl.n	801c8b4 <_fwalk_reent+0x24>
 801c8a8:	6824      	ldr	r4, [r4, #0]
 801c8aa:	2c00      	cmp	r4, #0
 801c8ac:	d1f7      	bne.n	801c89e <_fwalk_reent+0xe>
 801c8ae:	4638      	mov	r0, r7
 801c8b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c8b4:	89ab      	ldrh	r3, [r5, #12]
 801c8b6:	2b01      	cmp	r3, #1
 801c8b8:	d907      	bls.n	801c8ca <_fwalk_reent+0x3a>
 801c8ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c8be:	3301      	adds	r3, #1
 801c8c0:	d003      	beq.n	801c8ca <_fwalk_reent+0x3a>
 801c8c2:	4629      	mov	r1, r5
 801c8c4:	4630      	mov	r0, r6
 801c8c6:	47c0      	blx	r8
 801c8c8:	4307      	orrs	r7, r0
 801c8ca:	3568      	adds	r5, #104	; 0x68
 801c8cc:	e7e9      	b.n	801c8a2 <_fwalk_reent+0x12>

0801c8ce <rshift>:
 801c8ce:	6903      	ldr	r3, [r0, #16]
 801c8d0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801c8d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c8d8:	ea4f 1261 	mov.w	r2, r1, asr #5
 801c8dc:	f100 0414 	add.w	r4, r0, #20
 801c8e0:	dd45      	ble.n	801c96e <rshift+0xa0>
 801c8e2:	f011 011f 	ands.w	r1, r1, #31
 801c8e6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801c8ea:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c8ee:	d10c      	bne.n	801c90a <rshift+0x3c>
 801c8f0:	f100 0710 	add.w	r7, r0, #16
 801c8f4:	4629      	mov	r1, r5
 801c8f6:	42b1      	cmp	r1, r6
 801c8f8:	d334      	bcc.n	801c964 <rshift+0x96>
 801c8fa:	1a9b      	subs	r3, r3, r2
 801c8fc:	009b      	lsls	r3, r3, #2
 801c8fe:	1eea      	subs	r2, r5, #3
 801c900:	4296      	cmp	r6, r2
 801c902:	bf38      	it	cc
 801c904:	2300      	movcc	r3, #0
 801c906:	4423      	add	r3, r4
 801c908:	e015      	b.n	801c936 <rshift+0x68>
 801c90a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801c90e:	f1c1 0820 	rsb	r8, r1, #32
 801c912:	40cf      	lsrs	r7, r1
 801c914:	f105 0e04 	add.w	lr, r5, #4
 801c918:	46a1      	mov	r9, r4
 801c91a:	4576      	cmp	r6, lr
 801c91c:	46f4      	mov	ip, lr
 801c91e:	d815      	bhi.n	801c94c <rshift+0x7e>
 801c920:	1a9a      	subs	r2, r3, r2
 801c922:	0092      	lsls	r2, r2, #2
 801c924:	3a04      	subs	r2, #4
 801c926:	3501      	adds	r5, #1
 801c928:	42ae      	cmp	r6, r5
 801c92a:	bf38      	it	cc
 801c92c:	2200      	movcc	r2, #0
 801c92e:	18a3      	adds	r3, r4, r2
 801c930:	50a7      	str	r7, [r4, r2]
 801c932:	b107      	cbz	r7, 801c936 <rshift+0x68>
 801c934:	3304      	adds	r3, #4
 801c936:	1b1a      	subs	r2, r3, r4
 801c938:	42a3      	cmp	r3, r4
 801c93a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c93e:	bf08      	it	eq
 801c940:	2300      	moveq	r3, #0
 801c942:	6102      	str	r2, [r0, #16]
 801c944:	bf08      	it	eq
 801c946:	6143      	streq	r3, [r0, #20]
 801c948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c94c:	f8dc c000 	ldr.w	ip, [ip]
 801c950:	fa0c fc08 	lsl.w	ip, ip, r8
 801c954:	ea4c 0707 	orr.w	r7, ip, r7
 801c958:	f849 7b04 	str.w	r7, [r9], #4
 801c95c:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c960:	40cf      	lsrs	r7, r1
 801c962:	e7da      	b.n	801c91a <rshift+0x4c>
 801c964:	f851 cb04 	ldr.w	ip, [r1], #4
 801c968:	f847 cf04 	str.w	ip, [r7, #4]!
 801c96c:	e7c3      	b.n	801c8f6 <rshift+0x28>
 801c96e:	4623      	mov	r3, r4
 801c970:	e7e1      	b.n	801c936 <rshift+0x68>

0801c972 <__hexdig_fun>:
 801c972:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801c976:	2b09      	cmp	r3, #9
 801c978:	d802      	bhi.n	801c980 <__hexdig_fun+0xe>
 801c97a:	3820      	subs	r0, #32
 801c97c:	b2c0      	uxtb	r0, r0
 801c97e:	4770      	bx	lr
 801c980:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801c984:	2b05      	cmp	r3, #5
 801c986:	d801      	bhi.n	801c98c <__hexdig_fun+0x1a>
 801c988:	3847      	subs	r0, #71	; 0x47
 801c98a:	e7f7      	b.n	801c97c <__hexdig_fun+0xa>
 801c98c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801c990:	2b05      	cmp	r3, #5
 801c992:	d801      	bhi.n	801c998 <__hexdig_fun+0x26>
 801c994:	3827      	subs	r0, #39	; 0x27
 801c996:	e7f1      	b.n	801c97c <__hexdig_fun+0xa>
 801c998:	2000      	movs	r0, #0
 801c99a:	4770      	bx	lr

0801c99c <__gethex>:
 801c99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9a0:	ed2d 8b02 	vpush	{d8}
 801c9a4:	b089      	sub	sp, #36	; 0x24
 801c9a6:	ee08 0a10 	vmov	s16, r0
 801c9aa:	9304      	str	r3, [sp, #16]
 801c9ac:	4bb4      	ldr	r3, [pc, #720]	; (801cc80 <__gethex+0x2e4>)
 801c9ae:	681b      	ldr	r3, [r3, #0]
 801c9b0:	9301      	str	r3, [sp, #4]
 801c9b2:	4618      	mov	r0, r3
 801c9b4:	468b      	mov	fp, r1
 801c9b6:	4690      	mov	r8, r2
 801c9b8:	f7e3 fc1c 	bl	80001f4 <strlen>
 801c9bc:	9b01      	ldr	r3, [sp, #4]
 801c9be:	f8db 2000 	ldr.w	r2, [fp]
 801c9c2:	4403      	add	r3, r0
 801c9c4:	4682      	mov	sl, r0
 801c9c6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801c9ca:	9305      	str	r3, [sp, #20]
 801c9cc:	1c93      	adds	r3, r2, #2
 801c9ce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801c9d2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801c9d6:	32fe      	adds	r2, #254	; 0xfe
 801c9d8:	18d1      	adds	r1, r2, r3
 801c9da:	461f      	mov	r7, r3
 801c9dc:	f813 0b01 	ldrb.w	r0, [r3], #1
 801c9e0:	9100      	str	r1, [sp, #0]
 801c9e2:	2830      	cmp	r0, #48	; 0x30
 801c9e4:	d0f8      	beq.n	801c9d8 <__gethex+0x3c>
 801c9e6:	f7ff ffc4 	bl	801c972 <__hexdig_fun>
 801c9ea:	4604      	mov	r4, r0
 801c9ec:	2800      	cmp	r0, #0
 801c9ee:	d13a      	bne.n	801ca66 <__gethex+0xca>
 801c9f0:	9901      	ldr	r1, [sp, #4]
 801c9f2:	4652      	mov	r2, sl
 801c9f4:	4638      	mov	r0, r7
 801c9f6:	f001 fb3a 	bl	801e06e <strncmp>
 801c9fa:	4605      	mov	r5, r0
 801c9fc:	2800      	cmp	r0, #0
 801c9fe:	d168      	bne.n	801cad2 <__gethex+0x136>
 801ca00:	f817 000a 	ldrb.w	r0, [r7, sl]
 801ca04:	eb07 060a 	add.w	r6, r7, sl
 801ca08:	f7ff ffb3 	bl	801c972 <__hexdig_fun>
 801ca0c:	2800      	cmp	r0, #0
 801ca0e:	d062      	beq.n	801cad6 <__gethex+0x13a>
 801ca10:	4633      	mov	r3, r6
 801ca12:	7818      	ldrb	r0, [r3, #0]
 801ca14:	2830      	cmp	r0, #48	; 0x30
 801ca16:	461f      	mov	r7, r3
 801ca18:	f103 0301 	add.w	r3, r3, #1
 801ca1c:	d0f9      	beq.n	801ca12 <__gethex+0x76>
 801ca1e:	f7ff ffa8 	bl	801c972 <__hexdig_fun>
 801ca22:	2301      	movs	r3, #1
 801ca24:	fab0 f480 	clz	r4, r0
 801ca28:	0964      	lsrs	r4, r4, #5
 801ca2a:	4635      	mov	r5, r6
 801ca2c:	9300      	str	r3, [sp, #0]
 801ca2e:	463a      	mov	r2, r7
 801ca30:	4616      	mov	r6, r2
 801ca32:	3201      	adds	r2, #1
 801ca34:	7830      	ldrb	r0, [r6, #0]
 801ca36:	f7ff ff9c 	bl	801c972 <__hexdig_fun>
 801ca3a:	2800      	cmp	r0, #0
 801ca3c:	d1f8      	bne.n	801ca30 <__gethex+0x94>
 801ca3e:	9901      	ldr	r1, [sp, #4]
 801ca40:	4652      	mov	r2, sl
 801ca42:	4630      	mov	r0, r6
 801ca44:	f001 fb13 	bl	801e06e <strncmp>
 801ca48:	b980      	cbnz	r0, 801ca6c <__gethex+0xd0>
 801ca4a:	b94d      	cbnz	r5, 801ca60 <__gethex+0xc4>
 801ca4c:	eb06 050a 	add.w	r5, r6, sl
 801ca50:	462a      	mov	r2, r5
 801ca52:	4616      	mov	r6, r2
 801ca54:	3201      	adds	r2, #1
 801ca56:	7830      	ldrb	r0, [r6, #0]
 801ca58:	f7ff ff8b 	bl	801c972 <__hexdig_fun>
 801ca5c:	2800      	cmp	r0, #0
 801ca5e:	d1f8      	bne.n	801ca52 <__gethex+0xb6>
 801ca60:	1bad      	subs	r5, r5, r6
 801ca62:	00ad      	lsls	r5, r5, #2
 801ca64:	e004      	b.n	801ca70 <__gethex+0xd4>
 801ca66:	2400      	movs	r4, #0
 801ca68:	4625      	mov	r5, r4
 801ca6a:	e7e0      	b.n	801ca2e <__gethex+0x92>
 801ca6c:	2d00      	cmp	r5, #0
 801ca6e:	d1f7      	bne.n	801ca60 <__gethex+0xc4>
 801ca70:	7833      	ldrb	r3, [r6, #0]
 801ca72:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801ca76:	2b50      	cmp	r3, #80	; 0x50
 801ca78:	d13b      	bne.n	801caf2 <__gethex+0x156>
 801ca7a:	7873      	ldrb	r3, [r6, #1]
 801ca7c:	2b2b      	cmp	r3, #43	; 0x2b
 801ca7e:	d02c      	beq.n	801cada <__gethex+0x13e>
 801ca80:	2b2d      	cmp	r3, #45	; 0x2d
 801ca82:	d02e      	beq.n	801cae2 <__gethex+0x146>
 801ca84:	1c71      	adds	r1, r6, #1
 801ca86:	f04f 0900 	mov.w	r9, #0
 801ca8a:	7808      	ldrb	r0, [r1, #0]
 801ca8c:	f7ff ff71 	bl	801c972 <__hexdig_fun>
 801ca90:	1e43      	subs	r3, r0, #1
 801ca92:	b2db      	uxtb	r3, r3
 801ca94:	2b18      	cmp	r3, #24
 801ca96:	d82c      	bhi.n	801caf2 <__gethex+0x156>
 801ca98:	f1a0 0210 	sub.w	r2, r0, #16
 801ca9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801caa0:	f7ff ff67 	bl	801c972 <__hexdig_fun>
 801caa4:	1e43      	subs	r3, r0, #1
 801caa6:	b2db      	uxtb	r3, r3
 801caa8:	2b18      	cmp	r3, #24
 801caaa:	d91d      	bls.n	801cae8 <__gethex+0x14c>
 801caac:	f1b9 0f00 	cmp.w	r9, #0
 801cab0:	d000      	beq.n	801cab4 <__gethex+0x118>
 801cab2:	4252      	negs	r2, r2
 801cab4:	4415      	add	r5, r2
 801cab6:	f8cb 1000 	str.w	r1, [fp]
 801caba:	b1e4      	cbz	r4, 801caf6 <__gethex+0x15a>
 801cabc:	9b00      	ldr	r3, [sp, #0]
 801cabe:	2b00      	cmp	r3, #0
 801cac0:	bf14      	ite	ne
 801cac2:	2700      	movne	r7, #0
 801cac4:	2706      	moveq	r7, #6
 801cac6:	4638      	mov	r0, r7
 801cac8:	b009      	add	sp, #36	; 0x24
 801caca:	ecbd 8b02 	vpop	{d8}
 801cace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cad2:	463e      	mov	r6, r7
 801cad4:	4625      	mov	r5, r4
 801cad6:	2401      	movs	r4, #1
 801cad8:	e7ca      	b.n	801ca70 <__gethex+0xd4>
 801cada:	f04f 0900 	mov.w	r9, #0
 801cade:	1cb1      	adds	r1, r6, #2
 801cae0:	e7d3      	b.n	801ca8a <__gethex+0xee>
 801cae2:	f04f 0901 	mov.w	r9, #1
 801cae6:	e7fa      	b.n	801cade <__gethex+0x142>
 801cae8:	230a      	movs	r3, #10
 801caea:	fb03 0202 	mla	r2, r3, r2, r0
 801caee:	3a10      	subs	r2, #16
 801caf0:	e7d4      	b.n	801ca9c <__gethex+0x100>
 801caf2:	4631      	mov	r1, r6
 801caf4:	e7df      	b.n	801cab6 <__gethex+0x11a>
 801caf6:	1bf3      	subs	r3, r6, r7
 801caf8:	3b01      	subs	r3, #1
 801cafa:	4621      	mov	r1, r4
 801cafc:	2b07      	cmp	r3, #7
 801cafe:	dc0b      	bgt.n	801cb18 <__gethex+0x17c>
 801cb00:	ee18 0a10 	vmov	r0, s16
 801cb04:	f000 fada 	bl	801d0bc <_Balloc>
 801cb08:	4604      	mov	r4, r0
 801cb0a:	b940      	cbnz	r0, 801cb1e <__gethex+0x182>
 801cb0c:	4b5d      	ldr	r3, [pc, #372]	; (801cc84 <__gethex+0x2e8>)
 801cb0e:	4602      	mov	r2, r0
 801cb10:	21de      	movs	r1, #222	; 0xde
 801cb12:	485d      	ldr	r0, [pc, #372]	; (801cc88 <__gethex+0x2ec>)
 801cb14:	f7fe fe78 	bl	801b808 <__assert_func>
 801cb18:	3101      	adds	r1, #1
 801cb1a:	105b      	asrs	r3, r3, #1
 801cb1c:	e7ee      	b.n	801cafc <__gethex+0x160>
 801cb1e:	f100 0914 	add.w	r9, r0, #20
 801cb22:	f04f 0b00 	mov.w	fp, #0
 801cb26:	f1ca 0301 	rsb	r3, sl, #1
 801cb2a:	f8cd 9008 	str.w	r9, [sp, #8]
 801cb2e:	f8cd b000 	str.w	fp, [sp]
 801cb32:	9306      	str	r3, [sp, #24]
 801cb34:	42b7      	cmp	r7, r6
 801cb36:	d340      	bcc.n	801cbba <__gethex+0x21e>
 801cb38:	9802      	ldr	r0, [sp, #8]
 801cb3a:	9b00      	ldr	r3, [sp, #0]
 801cb3c:	f840 3b04 	str.w	r3, [r0], #4
 801cb40:	eba0 0009 	sub.w	r0, r0, r9
 801cb44:	1080      	asrs	r0, r0, #2
 801cb46:	0146      	lsls	r6, r0, #5
 801cb48:	6120      	str	r0, [r4, #16]
 801cb4a:	4618      	mov	r0, r3
 801cb4c:	f000 fba8 	bl	801d2a0 <__hi0bits>
 801cb50:	1a30      	subs	r0, r6, r0
 801cb52:	f8d8 6000 	ldr.w	r6, [r8]
 801cb56:	42b0      	cmp	r0, r6
 801cb58:	dd63      	ble.n	801cc22 <__gethex+0x286>
 801cb5a:	1b87      	subs	r7, r0, r6
 801cb5c:	4639      	mov	r1, r7
 801cb5e:	4620      	mov	r0, r4
 801cb60:	f000 ff4c 	bl	801d9fc <__any_on>
 801cb64:	4682      	mov	sl, r0
 801cb66:	b1a8      	cbz	r0, 801cb94 <__gethex+0x1f8>
 801cb68:	1e7b      	subs	r3, r7, #1
 801cb6a:	1159      	asrs	r1, r3, #5
 801cb6c:	f003 021f 	and.w	r2, r3, #31
 801cb70:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801cb74:	f04f 0a01 	mov.w	sl, #1
 801cb78:	fa0a f202 	lsl.w	r2, sl, r2
 801cb7c:	420a      	tst	r2, r1
 801cb7e:	d009      	beq.n	801cb94 <__gethex+0x1f8>
 801cb80:	4553      	cmp	r3, sl
 801cb82:	dd05      	ble.n	801cb90 <__gethex+0x1f4>
 801cb84:	1eb9      	subs	r1, r7, #2
 801cb86:	4620      	mov	r0, r4
 801cb88:	f000 ff38 	bl	801d9fc <__any_on>
 801cb8c:	2800      	cmp	r0, #0
 801cb8e:	d145      	bne.n	801cc1c <__gethex+0x280>
 801cb90:	f04f 0a02 	mov.w	sl, #2
 801cb94:	4639      	mov	r1, r7
 801cb96:	4620      	mov	r0, r4
 801cb98:	f7ff fe99 	bl	801c8ce <rshift>
 801cb9c:	443d      	add	r5, r7
 801cb9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801cba2:	42ab      	cmp	r3, r5
 801cba4:	da4c      	bge.n	801cc40 <__gethex+0x2a4>
 801cba6:	ee18 0a10 	vmov	r0, s16
 801cbaa:	4621      	mov	r1, r4
 801cbac:	f000 fac6 	bl	801d13c <_Bfree>
 801cbb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cbb2:	2300      	movs	r3, #0
 801cbb4:	6013      	str	r3, [r2, #0]
 801cbb6:	27a3      	movs	r7, #163	; 0xa3
 801cbb8:	e785      	b.n	801cac6 <__gethex+0x12a>
 801cbba:	1e73      	subs	r3, r6, #1
 801cbbc:	9a05      	ldr	r2, [sp, #20]
 801cbbe:	9303      	str	r3, [sp, #12]
 801cbc0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801cbc4:	4293      	cmp	r3, r2
 801cbc6:	d019      	beq.n	801cbfc <__gethex+0x260>
 801cbc8:	f1bb 0f20 	cmp.w	fp, #32
 801cbcc:	d107      	bne.n	801cbde <__gethex+0x242>
 801cbce:	9b02      	ldr	r3, [sp, #8]
 801cbd0:	9a00      	ldr	r2, [sp, #0]
 801cbd2:	f843 2b04 	str.w	r2, [r3], #4
 801cbd6:	9302      	str	r3, [sp, #8]
 801cbd8:	2300      	movs	r3, #0
 801cbda:	9300      	str	r3, [sp, #0]
 801cbdc:	469b      	mov	fp, r3
 801cbde:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801cbe2:	f7ff fec6 	bl	801c972 <__hexdig_fun>
 801cbe6:	9b00      	ldr	r3, [sp, #0]
 801cbe8:	f000 000f 	and.w	r0, r0, #15
 801cbec:	fa00 f00b 	lsl.w	r0, r0, fp
 801cbf0:	4303      	orrs	r3, r0
 801cbf2:	9300      	str	r3, [sp, #0]
 801cbf4:	f10b 0b04 	add.w	fp, fp, #4
 801cbf8:	9b03      	ldr	r3, [sp, #12]
 801cbfa:	e00d      	b.n	801cc18 <__gethex+0x27c>
 801cbfc:	9b03      	ldr	r3, [sp, #12]
 801cbfe:	9a06      	ldr	r2, [sp, #24]
 801cc00:	4413      	add	r3, r2
 801cc02:	42bb      	cmp	r3, r7
 801cc04:	d3e0      	bcc.n	801cbc8 <__gethex+0x22c>
 801cc06:	4618      	mov	r0, r3
 801cc08:	9901      	ldr	r1, [sp, #4]
 801cc0a:	9307      	str	r3, [sp, #28]
 801cc0c:	4652      	mov	r2, sl
 801cc0e:	f001 fa2e 	bl	801e06e <strncmp>
 801cc12:	9b07      	ldr	r3, [sp, #28]
 801cc14:	2800      	cmp	r0, #0
 801cc16:	d1d7      	bne.n	801cbc8 <__gethex+0x22c>
 801cc18:	461e      	mov	r6, r3
 801cc1a:	e78b      	b.n	801cb34 <__gethex+0x198>
 801cc1c:	f04f 0a03 	mov.w	sl, #3
 801cc20:	e7b8      	b.n	801cb94 <__gethex+0x1f8>
 801cc22:	da0a      	bge.n	801cc3a <__gethex+0x29e>
 801cc24:	1a37      	subs	r7, r6, r0
 801cc26:	4621      	mov	r1, r4
 801cc28:	ee18 0a10 	vmov	r0, s16
 801cc2c:	463a      	mov	r2, r7
 801cc2e:	f000 fca1 	bl	801d574 <__lshift>
 801cc32:	1bed      	subs	r5, r5, r7
 801cc34:	4604      	mov	r4, r0
 801cc36:	f100 0914 	add.w	r9, r0, #20
 801cc3a:	f04f 0a00 	mov.w	sl, #0
 801cc3e:	e7ae      	b.n	801cb9e <__gethex+0x202>
 801cc40:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801cc44:	42a8      	cmp	r0, r5
 801cc46:	dd72      	ble.n	801cd2e <__gethex+0x392>
 801cc48:	1b45      	subs	r5, r0, r5
 801cc4a:	42ae      	cmp	r6, r5
 801cc4c:	dc36      	bgt.n	801ccbc <__gethex+0x320>
 801cc4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801cc52:	2b02      	cmp	r3, #2
 801cc54:	d02a      	beq.n	801ccac <__gethex+0x310>
 801cc56:	2b03      	cmp	r3, #3
 801cc58:	d02c      	beq.n	801ccb4 <__gethex+0x318>
 801cc5a:	2b01      	cmp	r3, #1
 801cc5c:	d11c      	bne.n	801cc98 <__gethex+0x2fc>
 801cc5e:	42ae      	cmp	r6, r5
 801cc60:	d11a      	bne.n	801cc98 <__gethex+0x2fc>
 801cc62:	2e01      	cmp	r6, #1
 801cc64:	d112      	bne.n	801cc8c <__gethex+0x2f0>
 801cc66:	9a04      	ldr	r2, [sp, #16]
 801cc68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801cc6c:	6013      	str	r3, [r2, #0]
 801cc6e:	2301      	movs	r3, #1
 801cc70:	6123      	str	r3, [r4, #16]
 801cc72:	f8c9 3000 	str.w	r3, [r9]
 801cc76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801cc78:	2762      	movs	r7, #98	; 0x62
 801cc7a:	601c      	str	r4, [r3, #0]
 801cc7c:	e723      	b.n	801cac6 <__gethex+0x12a>
 801cc7e:	bf00      	nop
 801cc80:	0802042c 	.word	0x0802042c
 801cc84:	08020351 	.word	0x08020351
 801cc88:	080203c4 	.word	0x080203c4
 801cc8c:	1e71      	subs	r1, r6, #1
 801cc8e:	4620      	mov	r0, r4
 801cc90:	f000 feb4 	bl	801d9fc <__any_on>
 801cc94:	2800      	cmp	r0, #0
 801cc96:	d1e6      	bne.n	801cc66 <__gethex+0x2ca>
 801cc98:	ee18 0a10 	vmov	r0, s16
 801cc9c:	4621      	mov	r1, r4
 801cc9e:	f000 fa4d 	bl	801d13c <_Bfree>
 801cca2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cca4:	2300      	movs	r3, #0
 801cca6:	6013      	str	r3, [r2, #0]
 801cca8:	2750      	movs	r7, #80	; 0x50
 801ccaa:	e70c      	b.n	801cac6 <__gethex+0x12a>
 801ccac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ccae:	2b00      	cmp	r3, #0
 801ccb0:	d1f2      	bne.n	801cc98 <__gethex+0x2fc>
 801ccb2:	e7d8      	b.n	801cc66 <__gethex+0x2ca>
 801ccb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ccb6:	2b00      	cmp	r3, #0
 801ccb8:	d1d5      	bne.n	801cc66 <__gethex+0x2ca>
 801ccba:	e7ed      	b.n	801cc98 <__gethex+0x2fc>
 801ccbc:	1e6f      	subs	r7, r5, #1
 801ccbe:	f1ba 0f00 	cmp.w	sl, #0
 801ccc2:	d131      	bne.n	801cd28 <__gethex+0x38c>
 801ccc4:	b127      	cbz	r7, 801ccd0 <__gethex+0x334>
 801ccc6:	4639      	mov	r1, r7
 801ccc8:	4620      	mov	r0, r4
 801ccca:	f000 fe97 	bl	801d9fc <__any_on>
 801ccce:	4682      	mov	sl, r0
 801ccd0:	117b      	asrs	r3, r7, #5
 801ccd2:	2101      	movs	r1, #1
 801ccd4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801ccd8:	f007 071f 	and.w	r7, r7, #31
 801ccdc:	fa01 f707 	lsl.w	r7, r1, r7
 801cce0:	421f      	tst	r7, r3
 801cce2:	4629      	mov	r1, r5
 801cce4:	4620      	mov	r0, r4
 801cce6:	bf18      	it	ne
 801cce8:	f04a 0a02 	orrne.w	sl, sl, #2
 801ccec:	1b76      	subs	r6, r6, r5
 801ccee:	f7ff fdee 	bl	801c8ce <rshift>
 801ccf2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801ccf6:	2702      	movs	r7, #2
 801ccf8:	f1ba 0f00 	cmp.w	sl, #0
 801ccfc:	d048      	beq.n	801cd90 <__gethex+0x3f4>
 801ccfe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801cd02:	2b02      	cmp	r3, #2
 801cd04:	d015      	beq.n	801cd32 <__gethex+0x396>
 801cd06:	2b03      	cmp	r3, #3
 801cd08:	d017      	beq.n	801cd3a <__gethex+0x39e>
 801cd0a:	2b01      	cmp	r3, #1
 801cd0c:	d109      	bne.n	801cd22 <__gethex+0x386>
 801cd0e:	f01a 0f02 	tst.w	sl, #2
 801cd12:	d006      	beq.n	801cd22 <__gethex+0x386>
 801cd14:	f8d9 0000 	ldr.w	r0, [r9]
 801cd18:	ea4a 0a00 	orr.w	sl, sl, r0
 801cd1c:	f01a 0f01 	tst.w	sl, #1
 801cd20:	d10e      	bne.n	801cd40 <__gethex+0x3a4>
 801cd22:	f047 0710 	orr.w	r7, r7, #16
 801cd26:	e033      	b.n	801cd90 <__gethex+0x3f4>
 801cd28:	f04f 0a01 	mov.w	sl, #1
 801cd2c:	e7d0      	b.n	801ccd0 <__gethex+0x334>
 801cd2e:	2701      	movs	r7, #1
 801cd30:	e7e2      	b.n	801ccf8 <__gethex+0x35c>
 801cd32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cd34:	f1c3 0301 	rsb	r3, r3, #1
 801cd38:	9315      	str	r3, [sp, #84]	; 0x54
 801cd3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cd3c:	2b00      	cmp	r3, #0
 801cd3e:	d0f0      	beq.n	801cd22 <__gethex+0x386>
 801cd40:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801cd44:	f104 0314 	add.w	r3, r4, #20
 801cd48:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801cd4c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801cd50:	f04f 0c00 	mov.w	ip, #0
 801cd54:	4618      	mov	r0, r3
 801cd56:	f853 2b04 	ldr.w	r2, [r3], #4
 801cd5a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801cd5e:	d01c      	beq.n	801cd9a <__gethex+0x3fe>
 801cd60:	3201      	adds	r2, #1
 801cd62:	6002      	str	r2, [r0, #0]
 801cd64:	2f02      	cmp	r7, #2
 801cd66:	f104 0314 	add.w	r3, r4, #20
 801cd6a:	d13f      	bne.n	801cdec <__gethex+0x450>
 801cd6c:	f8d8 2000 	ldr.w	r2, [r8]
 801cd70:	3a01      	subs	r2, #1
 801cd72:	42b2      	cmp	r2, r6
 801cd74:	d10a      	bne.n	801cd8c <__gethex+0x3f0>
 801cd76:	1171      	asrs	r1, r6, #5
 801cd78:	2201      	movs	r2, #1
 801cd7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801cd7e:	f006 061f 	and.w	r6, r6, #31
 801cd82:	fa02 f606 	lsl.w	r6, r2, r6
 801cd86:	421e      	tst	r6, r3
 801cd88:	bf18      	it	ne
 801cd8a:	4617      	movne	r7, r2
 801cd8c:	f047 0720 	orr.w	r7, r7, #32
 801cd90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801cd92:	601c      	str	r4, [r3, #0]
 801cd94:	9b04      	ldr	r3, [sp, #16]
 801cd96:	601d      	str	r5, [r3, #0]
 801cd98:	e695      	b.n	801cac6 <__gethex+0x12a>
 801cd9a:	4299      	cmp	r1, r3
 801cd9c:	f843 cc04 	str.w	ip, [r3, #-4]
 801cda0:	d8d8      	bhi.n	801cd54 <__gethex+0x3b8>
 801cda2:	68a3      	ldr	r3, [r4, #8]
 801cda4:	459b      	cmp	fp, r3
 801cda6:	db19      	blt.n	801cddc <__gethex+0x440>
 801cda8:	6861      	ldr	r1, [r4, #4]
 801cdaa:	ee18 0a10 	vmov	r0, s16
 801cdae:	3101      	adds	r1, #1
 801cdb0:	f000 f984 	bl	801d0bc <_Balloc>
 801cdb4:	4681      	mov	r9, r0
 801cdb6:	b918      	cbnz	r0, 801cdc0 <__gethex+0x424>
 801cdb8:	4b1a      	ldr	r3, [pc, #104]	; (801ce24 <__gethex+0x488>)
 801cdba:	4602      	mov	r2, r0
 801cdbc:	2184      	movs	r1, #132	; 0x84
 801cdbe:	e6a8      	b.n	801cb12 <__gethex+0x176>
 801cdc0:	6922      	ldr	r2, [r4, #16]
 801cdc2:	3202      	adds	r2, #2
 801cdc4:	f104 010c 	add.w	r1, r4, #12
 801cdc8:	0092      	lsls	r2, r2, #2
 801cdca:	300c      	adds	r0, #12
 801cdcc:	f7fc fc96 	bl	80196fc <memcpy>
 801cdd0:	4621      	mov	r1, r4
 801cdd2:	ee18 0a10 	vmov	r0, s16
 801cdd6:	f000 f9b1 	bl	801d13c <_Bfree>
 801cdda:	464c      	mov	r4, r9
 801cddc:	6923      	ldr	r3, [r4, #16]
 801cdde:	1c5a      	adds	r2, r3, #1
 801cde0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801cde4:	6122      	str	r2, [r4, #16]
 801cde6:	2201      	movs	r2, #1
 801cde8:	615a      	str	r2, [r3, #20]
 801cdea:	e7bb      	b.n	801cd64 <__gethex+0x3c8>
 801cdec:	6922      	ldr	r2, [r4, #16]
 801cdee:	455a      	cmp	r2, fp
 801cdf0:	dd0b      	ble.n	801ce0a <__gethex+0x46e>
 801cdf2:	2101      	movs	r1, #1
 801cdf4:	4620      	mov	r0, r4
 801cdf6:	f7ff fd6a 	bl	801c8ce <rshift>
 801cdfa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801cdfe:	3501      	adds	r5, #1
 801ce00:	42ab      	cmp	r3, r5
 801ce02:	f6ff aed0 	blt.w	801cba6 <__gethex+0x20a>
 801ce06:	2701      	movs	r7, #1
 801ce08:	e7c0      	b.n	801cd8c <__gethex+0x3f0>
 801ce0a:	f016 061f 	ands.w	r6, r6, #31
 801ce0e:	d0fa      	beq.n	801ce06 <__gethex+0x46a>
 801ce10:	4453      	add	r3, sl
 801ce12:	f1c6 0620 	rsb	r6, r6, #32
 801ce16:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801ce1a:	f000 fa41 	bl	801d2a0 <__hi0bits>
 801ce1e:	42b0      	cmp	r0, r6
 801ce20:	dbe7      	blt.n	801cdf2 <__gethex+0x456>
 801ce22:	e7f0      	b.n	801ce06 <__gethex+0x46a>
 801ce24:	08020351 	.word	0x08020351

0801ce28 <L_shift>:
 801ce28:	f1c2 0208 	rsb	r2, r2, #8
 801ce2c:	0092      	lsls	r2, r2, #2
 801ce2e:	b570      	push	{r4, r5, r6, lr}
 801ce30:	f1c2 0620 	rsb	r6, r2, #32
 801ce34:	6843      	ldr	r3, [r0, #4]
 801ce36:	6804      	ldr	r4, [r0, #0]
 801ce38:	fa03 f506 	lsl.w	r5, r3, r6
 801ce3c:	432c      	orrs	r4, r5
 801ce3e:	40d3      	lsrs	r3, r2
 801ce40:	6004      	str	r4, [r0, #0]
 801ce42:	f840 3f04 	str.w	r3, [r0, #4]!
 801ce46:	4288      	cmp	r0, r1
 801ce48:	d3f4      	bcc.n	801ce34 <L_shift+0xc>
 801ce4a:	bd70      	pop	{r4, r5, r6, pc}

0801ce4c <__match>:
 801ce4c:	b530      	push	{r4, r5, lr}
 801ce4e:	6803      	ldr	r3, [r0, #0]
 801ce50:	3301      	adds	r3, #1
 801ce52:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ce56:	b914      	cbnz	r4, 801ce5e <__match+0x12>
 801ce58:	6003      	str	r3, [r0, #0]
 801ce5a:	2001      	movs	r0, #1
 801ce5c:	bd30      	pop	{r4, r5, pc}
 801ce5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ce62:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801ce66:	2d19      	cmp	r5, #25
 801ce68:	bf98      	it	ls
 801ce6a:	3220      	addls	r2, #32
 801ce6c:	42a2      	cmp	r2, r4
 801ce6e:	d0f0      	beq.n	801ce52 <__match+0x6>
 801ce70:	2000      	movs	r0, #0
 801ce72:	e7f3      	b.n	801ce5c <__match+0x10>

0801ce74 <__hexnan>:
 801ce74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce78:	680b      	ldr	r3, [r1, #0]
 801ce7a:	115e      	asrs	r6, r3, #5
 801ce7c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801ce80:	f013 031f 	ands.w	r3, r3, #31
 801ce84:	b087      	sub	sp, #28
 801ce86:	bf18      	it	ne
 801ce88:	3604      	addne	r6, #4
 801ce8a:	2500      	movs	r5, #0
 801ce8c:	1f37      	subs	r7, r6, #4
 801ce8e:	4690      	mov	r8, r2
 801ce90:	6802      	ldr	r2, [r0, #0]
 801ce92:	9301      	str	r3, [sp, #4]
 801ce94:	4682      	mov	sl, r0
 801ce96:	f846 5c04 	str.w	r5, [r6, #-4]
 801ce9a:	46b9      	mov	r9, r7
 801ce9c:	463c      	mov	r4, r7
 801ce9e:	9502      	str	r5, [sp, #8]
 801cea0:	46ab      	mov	fp, r5
 801cea2:	7851      	ldrb	r1, [r2, #1]
 801cea4:	1c53      	adds	r3, r2, #1
 801cea6:	9303      	str	r3, [sp, #12]
 801cea8:	b341      	cbz	r1, 801cefc <__hexnan+0x88>
 801ceaa:	4608      	mov	r0, r1
 801ceac:	9205      	str	r2, [sp, #20]
 801ceae:	9104      	str	r1, [sp, #16]
 801ceb0:	f7ff fd5f 	bl	801c972 <__hexdig_fun>
 801ceb4:	2800      	cmp	r0, #0
 801ceb6:	d14f      	bne.n	801cf58 <__hexnan+0xe4>
 801ceb8:	9904      	ldr	r1, [sp, #16]
 801ceba:	9a05      	ldr	r2, [sp, #20]
 801cebc:	2920      	cmp	r1, #32
 801cebe:	d818      	bhi.n	801cef2 <__hexnan+0x7e>
 801cec0:	9b02      	ldr	r3, [sp, #8]
 801cec2:	459b      	cmp	fp, r3
 801cec4:	dd13      	ble.n	801ceee <__hexnan+0x7a>
 801cec6:	454c      	cmp	r4, r9
 801cec8:	d206      	bcs.n	801ced8 <__hexnan+0x64>
 801ceca:	2d07      	cmp	r5, #7
 801cecc:	dc04      	bgt.n	801ced8 <__hexnan+0x64>
 801cece:	462a      	mov	r2, r5
 801ced0:	4649      	mov	r1, r9
 801ced2:	4620      	mov	r0, r4
 801ced4:	f7ff ffa8 	bl	801ce28 <L_shift>
 801ced8:	4544      	cmp	r4, r8
 801ceda:	d950      	bls.n	801cf7e <__hexnan+0x10a>
 801cedc:	2300      	movs	r3, #0
 801cede:	f1a4 0904 	sub.w	r9, r4, #4
 801cee2:	f844 3c04 	str.w	r3, [r4, #-4]
 801cee6:	f8cd b008 	str.w	fp, [sp, #8]
 801ceea:	464c      	mov	r4, r9
 801ceec:	461d      	mov	r5, r3
 801ceee:	9a03      	ldr	r2, [sp, #12]
 801cef0:	e7d7      	b.n	801cea2 <__hexnan+0x2e>
 801cef2:	2929      	cmp	r1, #41	; 0x29
 801cef4:	d156      	bne.n	801cfa4 <__hexnan+0x130>
 801cef6:	3202      	adds	r2, #2
 801cef8:	f8ca 2000 	str.w	r2, [sl]
 801cefc:	f1bb 0f00 	cmp.w	fp, #0
 801cf00:	d050      	beq.n	801cfa4 <__hexnan+0x130>
 801cf02:	454c      	cmp	r4, r9
 801cf04:	d206      	bcs.n	801cf14 <__hexnan+0xa0>
 801cf06:	2d07      	cmp	r5, #7
 801cf08:	dc04      	bgt.n	801cf14 <__hexnan+0xa0>
 801cf0a:	462a      	mov	r2, r5
 801cf0c:	4649      	mov	r1, r9
 801cf0e:	4620      	mov	r0, r4
 801cf10:	f7ff ff8a 	bl	801ce28 <L_shift>
 801cf14:	4544      	cmp	r4, r8
 801cf16:	d934      	bls.n	801cf82 <__hexnan+0x10e>
 801cf18:	f1a8 0204 	sub.w	r2, r8, #4
 801cf1c:	4623      	mov	r3, r4
 801cf1e:	f853 1b04 	ldr.w	r1, [r3], #4
 801cf22:	f842 1f04 	str.w	r1, [r2, #4]!
 801cf26:	429f      	cmp	r7, r3
 801cf28:	d2f9      	bcs.n	801cf1e <__hexnan+0xaa>
 801cf2a:	1b3b      	subs	r3, r7, r4
 801cf2c:	f023 0303 	bic.w	r3, r3, #3
 801cf30:	3304      	adds	r3, #4
 801cf32:	3401      	adds	r4, #1
 801cf34:	3e03      	subs	r6, #3
 801cf36:	42b4      	cmp	r4, r6
 801cf38:	bf88      	it	hi
 801cf3a:	2304      	movhi	r3, #4
 801cf3c:	4443      	add	r3, r8
 801cf3e:	2200      	movs	r2, #0
 801cf40:	f843 2b04 	str.w	r2, [r3], #4
 801cf44:	429f      	cmp	r7, r3
 801cf46:	d2fb      	bcs.n	801cf40 <__hexnan+0xcc>
 801cf48:	683b      	ldr	r3, [r7, #0]
 801cf4a:	b91b      	cbnz	r3, 801cf54 <__hexnan+0xe0>
 801cf4c:	4547      	cmp	r7, r8
 801cf4e:	d127      	bne.n	801cfa0 <__hexnan+0x12c>
 801cf50:	2301      	movs	r3, #1
 801cf52:	603b      	str	r3, [r7, #0]
 801cf54:	2005      	movs	r0, #5
 801cf56:	e026      	b.n	801cfa6 <__hexnan+0x132>
 801cf58:	3501      	adds	r5, #1
 801cf5a:	2d08      	cmp	r5, #8
 801cf5c:	f10b 0b01 	add.w	fp, fp, #1
 801cf60:	dd06      	ble.n	801cf70 <__hexnan+0xfc>
 801cf62:	4544      	cmp	r4, r8
 801cf64:	d9c3      	bls.n	801ceee <__hexnan+0x7a>
 801cf66:	2300      	movs	r3, #0
 801cf68:	f844 3c04 	str.w	r3, [r4, #-4]
 801cf6c:	2501      	movs	r5, #1
 801cf6e:	3c04      	subs	r4, #4
 801cf70:	6822      	ldr	r2, [r4, #0]
 801cf72:	f000 000f 	and.w	r0, r0, #15
 801cf76:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801cf7a:	6022      	str	r2, [r4, #0]
 801cf7c:	e7b7      	b.n	801ceee <__hexnan+0x7a>
 801cf7e:	2508      	movs	r5, #8
 801cf80:	e7b5      	b.n	801ceee <__hexnan+0x7a>
 801cf82:	9b01      	ldr	r3, [sp, #4]
 801cf84:	2b00      	cmp	r3, #0
 801cf86:	d0df      	beq.n	801cf48 <__hexnan+0xd4>
 801cf88:	f04f 32ff 	mov.w	r2, #4294967295
 801cf8c:	f1c3 0320 	rsb	r3, r3, #32
 801cf90:	fa22 f303 	lsr.w	r3, r2, r3
 801cf94:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801cf98:	401a      	ands	r2, r3
 801cf9a:	f846 2c04 	str.w	r2, [r6, #-4]
 801cf9e:	e7d3      	b.n	801cf48 <__hexnan+0xd4>
 801cfa0:	3f04      	subs	r7, #4
 801cfa2:	e7d1      	b.n	801cf48 <__hexnan+0xd4>
 801cfa4:	2004      	movs	r0, #4
 801cfa6:	b007      	add	sp, #28
 801cfa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cfac <_localeconv_r>:
 801cfac:	4800      	ldr	r0, [pc, #0]	; (801cfb0 <_localeconv_r+0x4>)
 801cfae:	4770      	bx	lr
 801cfb0:	20000298 	.word	0x20000298

0801cfb4 <__swhatbuf_r>:
 801cfb4:	b570      	push	{r4, r5, r6, lr}
 801cfb6:	460e      	mov	r6, r1
 801cfb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cfbc:	2900      	cmp	r1, #0
 801cfbe:	b096      	sub	sp, #88	; 0x58
 801cfc0:	4614      	mov	r4, r2
 801cfc2:	461d      	mov	r5, r3
 801cfc4:	da08      	bge.n	801cfd8 <__swhatbuf_r+0x24>
 801cfc6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801cfca:	2200      	movs	r2, #0
 801cfcc:	602a      	str	r2, [r5, #0]
 801cfce:	061a      	lsls	r2, r3, #24
 801cfd0:	d410      	bmi.n	801cff4 <__swhatbuf_r+0x40>
 801cfd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cfd6:	e00e      	b.n	801cff6 <__swhatbuf_r+0x42>
 801cfd8:	466a      	mov	r2, sp
 801cfda:	f001 f893 	bl	801e104 <_fstat_r>
 801cfde:	2800      	cmp	r0, #0
 801cfe0:	dbf1      	blt.n	801cfc6 <__swhatbuf_r+0x12>
 801cfe2:	9a01      	ldr	r2, [sp, #4]
 801cfe4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801cfe8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801cfec:	425a      	negs	r2, r3
 801cfee:	415a      	adcs	r2, r3
 801cff0:	602a      	str	r2, [r5, #0]
 801cff2:	e7ee      	b.n	801cfd2 <__swhatbuf_r+0x1e>
 801cff4:	2340      	movs	r3, #64	; 0x40
 801cff6:	2000      	movs	r0, #0
 801cff8:	6023      	str	r3, [r4, #0]
 801cffa:	b016      	add	sp, #88	; 0x58
 801cffc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801d000 <__smakebuf_r>:
 801d000:	898b      	ldrh	r3, [r1, #12]
 801d002:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d004:	079d      	lsls	r5, r3, #30
 801d006:	4606      	mov	r6, r0
 801d008:	460c      	mov	r4, r1
 801d00a:	d507      	bpl.n	801d01c <__smakebuf_r+0x1c>
 801d00c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d010:	6023      	str	r3, [r4, #0]
 801d012:	6123      	str	r3, [r4, #16]
 801d014:	2301      	movs	r3, #1
 801d016:	6163      	str	r3, [r4, #20]
 801d018:	b002      	add	sp, #8
 801d01a:	bd70      	pop	{r4, r5, r6, pc}
 801d01c:	ab01      	add	r3, sp, #4
 801d01e:	466a      	mov	r2, sp
 801d020:	f7ff ffc8 	bl	801cfb4 <__swhatbuf_r>
 801d024:	9900      	ldr	r1, [sp, #0]
 801d026:	4605      	mov	r5, r0
 801d028:	4630      	mov	r0, r6
 801d02a:	f7fc fc03 	bl	8019834 <_malloc_r>
 801d02e:	b948      	cbnz	r0, 801d044 <__smakebuf_r+0x44>
 801d030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d034:	059a      	lsls	r2, r3, #22
 801d036:	d4ef      	bmi.n	801d018 <__smakebuf_r+0x18>
 801d038:	f023 0303 	bic.w	r3, r3, #3
 801d03c:	f043 0302 	orr.w	r3, r3, #2
 801d040:	81a3      	strh	r3, [r4, #12]
 801d042:	e7e3      	b.n	801d00c <__smakebuf_r+0xc>
 801d044:	4b0d      	ldr	r3, [pc, #52]	; (801d07c <__smakebuf_r+0x7c>)
 801d046:	62b3      	str	r3, [r6, #40]	; 0x28
 801d048:	89a3      	ldrh	r3, [r4, #12]
 801d04a:	6020      	str	r0, [r4, #0]
 801d04c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d050:	81a3      	strh	r3, [r4, #12]
 801d052:	9b00      	ldr	r3, [sp, #0]
 801d054:	6163      	str	r3, [r4, #20]
 801d056:	9b01      	ldr	r3, [sp, #4]
 801d058:	6120      	str	r0, [r4, #16]
 801d05a:	b15b      	cbz	r3, 801d074 <__smakebuf_r+0x74>
 801d05c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d060:	4630      	mov	r0, r6
 801d062:	f001 f861 	bl	801e128 <_isatty_r>
 801d066:	b128      	cbz	r0, 801d074 <__smakebuf_r+0x74>
 801d068:	89a3      	ldrh	r3, [r4, #12]
 801d06a:	f023 0303 	bic.w	r3, r3, #3
 801d06e:	f043 0301 	orr.w	r3, r3, #1
 801d072:	81a3      	strh	r3, [r4, #12]
 801d074:	89a0      	ldrh	r0, [r4, #12]
 801d076:	4305      	orrs	r5, r0
 801d078:	81a5      	strh	r5, [r4, #12]
 801d07a:	e7cd      	b.n	801d018 <__smakebuf_r+0x18>
 801d07c:	0801c709 	.word	0x0801c709

0801d080 <__ascii_mbtowc>:
 801d080:	b082      	sub	sp, #8
 801d082:	b901      	cbnz	r1, 801d086 <__ascii_mbtowc+0x6>
 801d084:	a901      	add	r1, sp, #4
 801d086:	b142      	cbz	r2, 801d09a <__ascii_mbtowc+0x1a>
 801d088:	b14b      	cbz	r3, 801d09e <__ascii_mbtowc+0x1e>
 801d08a:	7813      	ldrb	r3, [r2, #0]
 801d08c:	600b      	str	r3, [r1, #0]
 801d08e:	7812      	ldrb	r2, [r2, #0]
 801d090:	1e10      	subs	r0, r2, #0
 801d092:	bf18      	it	ne
 801d094:	2001      	movne	r0, #1
 801d096:	b002      	add	sp, #8
 801d098:	4770      	bx	lr
 801d09a:	4610      	mov	r0, r2
 801d09c:	e7fb      	b.n	801d096 <__ascii_mbtowc+0x16>
 801d09e:	f06f 0001 	mvn.w	r0, #1
 801d0a2:	e7f8      	b.n	801d096 <__ascii_mbtowc+0x16>

0801d0a4 <__malloc_lock>:
 801d0a4:	4801      	ldr	r0, [pc, #4]	; (801d0ac <__malloc_lock+0x8>)
 801d0a6:	f7fc bb16 	b.w	80196d6 <__retarget_lock_acquire_recursive>
 801d0aa:	bf00      	nop
 801d0ac:	20002570 	.word	0x20002570

0801d0b0 <__malloc_unlock>:
 801d0b0:	4801      	ldr	r0, [pc, #4]	; (801d0b8 <__malloc_unlock+0x8>)
 801d0b2:	f7fc bb11 	b.w	80196d8 <__retarget_lock_release_recursive>
 801d0b6:	bf00      	nop
 801d0b8:	20002570 	.word	0x20002570

0801d0bc <_Balloc>:
 801d0bc:	b570      	push	{r4, r5, r6, lr}
 801d0be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801d0c0:	4604      	mov	r4, r0
 801d0c2:	460d      	mov	r5, r1
 801d0c4:	b976      	cbnz	r6, 801d0e4 <_Balloc+0x28>
 801d0c6:	2010      	movs	r0, #16
 801d0c8:	f7fc fb08 	bl	80196dc <malloc>
 801d0cc:	4602      	mov	r2, r0
 801d0ce:	6260      	str	r0, [r4, #36]	; 0x24
 801d0d0:	b920      	cbnz	r0, 801d0dc <_Balloc+0x20>
 801d0d2:	4b18      	ldr	r3, [pc, #96]	; (801d134 <_Balloc+0x78>)
 801d0d4:	4818      	ldr	r0, [pc, #96]	; (801d138 <_Balloc+0x7c>)
 801d0d6:	2166      	movs	r1, #102	; 0x66
 801d0d8:	f7fe fb96 	bl	801b808 <__assert_func>
 801d0dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d0e0:	6006      	str	r6, [r0, #0]
 801d0e2:	60c6      	str	r6, [r0, #12]
 801d0e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801d0e6:	68f3      	ldr	r3, [r6, #12]
 801d0e8:	b183      	cbz	r3, 801d10c <_Balloc+0x50>
 801d0ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d0ec:	68db      	ldr	r3, [r3, #12]
 801d0ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d0f2:	b9b8      	cbnz	r0, 801d124 <_Balloc+0x68>
 801d0f4:	2101      	movs	r1, #1
 801d0f6:	fa01 f605 	lsl.w	r6, r1, r5
 801d0fa:	1d72      	adds	r2, r6, #5
 801d0fc:	0092      	lsls	r2, r2, #2
 801d0fe:	4620      	mov	r0, r4
 801d100:	f000 fc9d 	bl	801da3e <_calloc_r>
 801d104:	b160      	cbz	r0, 801d120 <_Balloc+0x64>
 801d106:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d10a:	e00e      	b.n	801d12a <_Balloc+0x6e>
 801d10c:	2221      	movs	r2, #33	; 0x21
 801d10e:	2104      	movs	r1, #4
 801d110:	4620      	mov	r0, r4
 801d112:	f000 fc94 	bl	801da3e <_calloc_r>
 801d116:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d118:	60f0      	str	r0, [r6, #12]
 801d11a:	68db      	ldr	r3, [r3, #12]
 801d11c:	2b00      	cmp	r3, #0
 801d11e:	d1e4      	bne.n	801d0ea <_Balloc+0x2e>
 801d120:	2000      	movs	r0, #0
 801d122:	bd70      	pop	{r4, r5, r6, pc}
 801d124:	6802      	ldr	r2, [r0, #0]
 801d126:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801d12a:	2300      	movs	r3, #0
 801d12c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d130:	e7f7      	b.n	801d122 <_Balloc+0x66>
 801d132:	bf00      	nop
 801d134:	08020138 	.word	0x08020138
 801d138:	08020440 	.word	0x08020440

0801d13c <_Bfree>:
 801d13c:	b570      	push	{r4, r5, r6, lr}
 801d13e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801d140:	4605      	mov	r5, r0
 801d142:	460c      	mov	r4, r1
 801d144:	b976      	cbnz	r6, 801d164 <_Bfree+0x28>
 801d146:	2010      	movs	r0, #16
 801d148:	f7fc fac8 	bl	80196dc <malloc>
 801d14c:	4602      	mov	r2, r0
 801d14e:	6268      	str	r0, [r5, #36]	; 0x24
 801d150:	b920      	cbnz	r0, 801d15c <_Bfree+0x20>
 801d152:	4b09      	ldr	r3, [pc, #36]	; (801d178 <_Bfree+0x3c>)
 801d154:	4809      	ldr	r0, [pc, #36]	; (801d17c <_Bfree+0x40>)
 801d156:	218a      	movs	r1, #138	; 0x8a
 801d158:	f7fe fb56 	bl	801b808 <__assert_func>
 801d15c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d160:	6006      	str	r6, [r0, #0]
 801d162:	60c6      	str	r6, [r0, #12]
 801d164:	b13c      	cbz	r4, 801d176 <_Bfree+0x3a>
 801d166:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801d168:	6862      	ldr	r2, [r4, #4]
 801d16a:	68db      	ldr	r3, [r3, #12]
 801d16c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d170:	6021      	str	r1, [r4, #0]
 801d172:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801d176:	bd70      	pop	{r4, r5, r6, pc}
 801d178:	08020138 	.word	0x08020138
 801d17c:	08020440 	.word	0x08020440

0801d180 <__multadd>:
 801d180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d184:	690d      	ldr	r5, [r1, #16]
 801d186:	4607      	mov	r7, r0
 801d188:	460c      	mov	r4, r1
 801d18a:	461e      	mov	r6, r3
 801d18c:	f101 0c14 	add.w	ip, r1, #20
 801d190:	2000      	movs	r0, #0
 801d192:	f8dc 3000 	ldr.w	r3, [ip]
 801d196:	b299      	uxth	r1, r3
 801d198:	fb02 6101 	mla	r1, r2, r1, r6
 801d19c:	0c1e      	lsrs	r6, r3, #16
 801d19e:	0c0b      	lsrs	r3, r1, #16
 801d1a0:	fb02 3306 	mla	r3, r2, r6, r3
 801d1a4:	b289      	uxth	r1, r1
 801d1a6:	3001      	adds	r0, #1
 801d1a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801d1ac:	4285      	cmp	r5, r0
 801d1ae:	f84c 1b04 	str.w	r1, [ip], #4
 801d1b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801d1b6:	dcec      	bgt.n	801d192 <__multadd+0x12>
 801d1b8:	b30e      	cbz	r6, 801d1fe <__multadd+0x7e>
 801d1ba:	68a3      	ldr	r3, [r4, #8]
 801d1bc:	42ab      	cmp	r3, r5
 801d1be:	dc19      	bgt.n	801d1f4 <__multadd+0x74>
 801d1c0:	6861      	ldr	r1, [r4, #4]
 801d1c2:	4638      	mov	r0, r7
 801d1c4:	3101      	adds	r1, #1
 801d1c6:	f7ff ff79 	bl	801d0bc <_Balloc>
 801d1ca:	4680      	mov	r8, r0
 801d1cc:	b928      	cbnz	r0, 801d1da <__multadd+0x5a>
 801d1ce:	4602      	mov	r2, r0
 801d1d0:	4b0c      	ldr	r3, [pc, #48]	; (801d204 <__multadd+0x84>)
 801d1d2:	480d      	ldr	r0, [pc, #52]	; (801d208 <__multadd+0x88>)
 801d1d4:	21b5      	movs	r1, #181	; 0xb5
 801d1d6:	f7fe fb17 	bl	801b808 <__assert_func>
 801d1da:	6922      	ldr	r2, [r4, #16]
 801d1dc:	3202      	adds	r2, #2
 801d1de:	f104 010c 	add.w	r1, r4, #12
 801d1e2:	0092      	lsls	r2, r2, #2
 801d1e4:	300c      	adds	r0, #12
 801d1e6:	f7fc fa89 	bl	80196fc <memcpy>
 801d1ea:	4621      	mov	r1, r4
 801d1ec:	4638      	mov	r0, r7
 801d1ee:	f7ff ffa5 	bl	801d13c <_Bfree>
 801d1f2:	4644      	mov	r4, r8
 801d1f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801d1f8:	3501      	adds	r5, #1
 801d1fa:	615e      	str	r6, [r3, #20]
 801d1fc:	6125      	str	r5, [r4, #16]
 801d1fe:	4620      	mov	r0, r4
 801d200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d204:	08020351 	.word	0x08020351
 801d208:	08020440 	.word	0x08020440

0801d20c <__s2b>:
 801d20c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d210:	460c      	mov	r4, r1
 801d212:	4615      	mov	r5, r2
 801d214:	461f      	mov	r7, r3
 801d216:	2209      	movs	r2, #9
 801d218:	3308      	adds	r3, #8
 801d21a:	4606      	mov	r6, r0
 801d21c:	fb93 f3f2 	sdiv	r3, r3, r2
 801d220:	2100      	movs	r1, #0
 801d222:	2201      	movs	r2, #1
 801d224:	429a      	cmp	r2, r3
 801d226:	db09      	blt.n	801d23c <__s2b+0x30>
 801d228:	4630      	mov	r0, r6
 801d22a:	f7ff ff47 	bl	801d0bc <_Balloc>
 801d22e:	b940      	cbnz	r0, 801d242 <__s2b+0x36>
 801d230:	4602      	mov	r2, r0
 801d232:	4b19      	ldr	r3, [pc, #100]	; (801d298 <__s2b+0x8c>)
 801d234:	4819      	ldr	r0, [pc, #100]	; (801d29c <__s2b+0x90>)
 801d236:	21ce      	movs	r1, #206	; 0xce
 801d238:	f7fe fae6 	bl	801b808 <__assert_func>
 801d23c:	0052      	lsls	r2, r2, #1
 801d23e:	3101      	adds	r1, #1
 801d240:	e7f0      	b.n	801d224 <__s2b+0x18>
 801d242:	9b08      	ldr	r3, [sp, #32]
 801d244:	6143      	str	r3, [r0, #20]
 801d246:	2d09      	cmp	r5, #9
 801d248:	f04f 0301 	mov.w	r3, #1
 801d24c:	6103      	str	r3, [r0, #16]
 801d24e:	dd16      	ble.n	801d27e <__s2b+0x72>
 801d250:	f104 0909 	add.w	r9, r4, #9
 801d254:	46c8      	mov	r8, r9
 801d256:	442c      	add	r4, r5
 801d258:	f818 3b01 	ldrb.w	r3, [r8], #1
 801d25c:	4601      	mov	r1, r0
 801d25e:	3b30      	subs	r3, #48	; 0x30
 801d260:	220a      	movs	r2, #10
 801d262:	4630      	mov	r0, r6
 801d264:	f7ff ff8c 	bl	801d180 <__multadd>
 801d268:	45a0      	cmp	r8, r4
 801d26a:	d1f5      	bne.n	801d258 <__s2b+0x4c>
 801d26c:	f1a5 0408 	sub.w	r4, r5, #8
 801d270:	444c      	add	r4, r9
 801d272:	1b2d      	subs	r5, r5, r4
 801d274:	1963      	adds	r3, r4, r5
 801d276:	42bb      	cmp	r3, r7
 801d278:	db04      	blt.n	801d284 <__s2b+0x78>
 801d27a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d27e:	340a      	adds	r4, #10
 801d280:	2509      	movs	r5, #9
 801d282:	e7f6      	b.n	801d272 <__s2b+0x66>
 801d284:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d288:	4601      	mov	r1, r0
 801d28a:	3b30      	subs	r3, #48	; 0x30
 801d28c:	220a      	movs	r2, #10
 801d28e:	4630      	mov	r0, r6
 801d290:	f7ff ff76 	bl	801d180 <__multadd>
 801d294:	e7ee      	b.n	801d274 <__s2b+0x68>
 801d296:	bf00      	nop
 801d298:	08020351 	.word	0x08020351
 801d29c:	08020440 	.word	0x08020440

0801d2a0 <__hi0bits>:
 801d2a0:	0c03      	lsrs	r3, r0, #16
 801d2a2:	041b      	lsls	r3, r3, #16
 801d2a4:	b9d3      	cbnz	r3, 801d2dc <__hi0bits+0x3c>
 801d2a6:	0400      	lsls	r0, r0, #16
 801d2a8:	2310      	movs	r3, #16
 801d2aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801d2ae:	bf04      	itt	eq
 801d2b0:	0200      	lsleq	r0, r0, #8
 801d2b2:	3308      	addeq	r3, #8
 801d2b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801d2b8:	bf04      	itt	eq
 801d2ba:	0100      	lsleq	r0, r0, #4
 801d2bc:	3304      	addeq	r3, #4
 801d2be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801d2c2:	bf04      	itt	eq
 801d2c4:	0080      	lsleq	r0, r0, #2
 801d2c6:	3302      	addeq	r3, #2
 801d2c8:	2800      	cmp	r0, #0
 801d2ca:	db05      	blt.n	801d2d8 <__hi0bits+0x38>
 801d2cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801d2d0:	f103 0301 	add.w	r3, r3, #1
 801d2d4:	bf08      	it	eq
 801d2d6:	2320      	moveq	r3, #32
 801d2d8:	4618      	mov	r0, r3
 801d2da:	4770      	bx	lr
 801d2dc:	2300      	movs	r3, #0
 801d2de:	e7e4      	b.n	801d2aa <__hi0bits+0xa>

0801d2e0 <__lo0bits>:
 801d2e0:	6803      	ldr	r3, [r0, #0]
 801d2e2:	f013 0207 	ands.w	r2, r3, #7
 801d2e6:	4601      	mov	r1, r0
 801d2e8:	d00b      	beq.n	801d302 <__lo0bits+0x22>
 801d2ea:	07da      	lsls	r2, r3, #31
 801d2ec:	d423      	bmi.n	801d336 <__lo0bits+0x56>
 801d2ee:	0798      	lsls	r0, r3, #30
 801d2f0:	bf49      	itett	mi
 801d2f2:	085b      	lsrmi	r3, r3, #1
 801d2f4:	089b      	lsrpl	r3, r3, #2
 801d2f6:	2001      	movmi	r0, #1
 801d2f8:	600b      	strmi	r3, [r1, #0]
 801d2fa:	bf5c      	itt	pl
 801d2fc:	600b      	strpl	r3, [r1, #0]
 801d2fe:	2002      	movpl	r0, #2
 801d300:	4770      	bx	lr
 801d302:	b298      	uxth	r0, r3
 801d304:	b9a8      	cbnz	r0, 801d332 <__lo0bits+0x52>
 801d306:	0c1b      	lsrs	r3, r3, #16
 801d308:	2010      	movs	r0, #16
 801d30a:	b2da      	uxtb	r2, r3
 801d30c:	b90a      	cbnz	r2, 801d312 <__lo0bits+0x32>
 801d30e:	3008      	adds	r0, #8
 801d310:	0a1b      	lsrs	r3, r3, #8
 801d312:	071a      	lsls	r2, r3, #28
 801d314:	bf04      	itt	eq
 801d316:	091b      	lsreq	r3, r3, #4
 801d318:	3004      	addeq	r0, #4
 801d31a:	079a      	lsls	r2, r3, #30
 801d31c:	bf04      	itt	eq
 801d31e:	089b      	lsreq	r3, r3, #2
 801d320:	3002      	addeq	r0, #2
 801d322:	07da      	lsls	r2, r3, #31
 801d324:	d403      	bmi.n	801d32e <__lo0bits+0x4e>
 801d326:	085b      	lsrs	r3, r3, #1
 801d328:	f100 0001 	add.w	r0, r0, #1
 801d32c:	d005      	beq.n	801d33a <__lo0bits+0x5a>
 801d32e:	600b      	str	r3, [r1, #0]
 801d330:	4770      	bx	lr
 801d332:	4610      	mov	r0, r2
 801d334:	e7e9      	b.n	801d30a <__lo0bits+0x2a>
 801d336:	2000      	movs	r0, #0
 801d338:	4770      	bx	lr
 801d33a:	2020      	movs	r0, #32
 801d33c:	4770      	bx	lr
	...

0801d340 <__i2b>:
 801d340:	b510      	push	{r4, lr}
 801d342:	460c      	mov	r4, r1
 801d344:	2101      	movs	r1, #1
 801d346:	f7ff feb9 	bl	801d0bc <_Balloc>
 801d34a:	4602      	mov	r2, r0
 801d34c:	b928      	cbnz	r0, 801d35a <__i2b+0x1a>
 801d34e:	4b05      	ldr	r3, [pc, #20]	; (801d364 <__i2b+0x24>)
 801d350:	4805      	ldr	r0, [pc, #20]	; (801d368 <__i2b+0x28>)
 801d352:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801d356:	f7fe fa57 	bl	801b808 <__assert_func>
 801d35a:	2301      	movs	r3, #1
 801d35c:	6144      	str	r4, [r0, #20]
 801d35e:	6103      	str	r3, [r0, #16]
 801d360:	bd10      	pop	{r4, pc}
 801d362:	bf00      	nop
 801d364:	08020351 	.word	0x08020351
 801d368:	08020440 	.word	0x08020440

0801d36c <__multiply>:
 801d36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d370:	4691      	mov	r9, r2
 801d372:	690a      	ldr	r2, [r1, #16]
 801d374:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d378:	429a      	cmp	r2, r3
 801d37a:	bfb8      	it	lt
 801d37c:	460b      	movlt	r3, r1
 801d37e:	460c      	mov	r4, r1
 801d380:	bfbc      	itt	lt
 801d382:	464c      	movlt	r4, r9
 801d384:	4699      	movlt	r9, r3
 801d386:	6927      	ldr	r7, [r4, #16]
 801d388:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801d38c:	68a3      	ldr	r3, [r4, #8]
 801d38e:	6861      	ldr	r1, [r4, #4]
 801d390:	eb07 060a 	add.w	r6, r7, sl
 801d394:	42b3      	cmp	r3, r6
 801d396:	b085      	sub	sp, #20
 801d398:	bfb8      	it	lt
 801d39a:	3101      	addlt	r1, #1
 801d39c:	f7ff fe8e 	bl	801d0bc <_Balloc>
 801d3a0:	b930      	cbnz	r0, 801d3b0 <__multiply+0x44>
 801d3a2:	4602      	mov	r2, r0
 801d3a4:	4b44      	ldr	r3, [pc, #272]	; (801d4b8 <__multiply+0x14c>)
 801d3a6:	4845      	ldr	r0, [pc, #276]	; (801d4bc <__multiply+0x150>)
 801d3a8:	f240 115d 	movw	r1, #349	; 0x15d
 801d3ac:	f7fe fa2c 	bl	801b808 <__assert_func>
 801d3b0:	f100 0514 	add.w	r5, r0, #20
 801d3b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801d3b8:	462b      	mov	r3, r5
 801d3ba:	2200      	movs	r2, #0
 801d3bc:	4543      	cmp	r3, r8
 801d3be:	d321      	bcc.n	801d404 <__multiply+0x98>
 801d3c0:	f104 0314 	add.w	r3, r4, #20
 801d3c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801d3c8:	f109 0314 	add.w	r3, r9, #20
 801d3cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801d3d0:	9202      	str	r2, [sp, #8]
 801d3d2:	1b3a      	subs	r2, r7, r4
 801d3d4:	3a15      	subs	r2, #21
 801d3d6:	f022 0203 	bic.w	r2, r2, #3
 801d3da:	3204      	adds	r2, #4
 801d3dc:	f104 0115 	add.w	r1, r4, #21
 801d3e0:	428f      	cmp	r7, r1
 801d3e2:	bf38      	it	cc
 801d3e4:	2204      	movcc	r2, #4
 801d3e6:	9201      	str	r2, [sp, #4]
 801d3e8:	9a02      	ldr	r2, [sp, #8]
 801d3ea:	9303      	str	r3, [sp, #12]
 801d3ec:	429a      	cmp	r2, r3
 801d3ee:	d80c      	bhi.n	801d40a <__multiply+0x9e>
 801d3f0:	2e00      	cmp	r6, #0
 801d3f2:	dd03      	ble.n	801d3fc <__multiply+0x90>
 801d3f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801d3f8:	2b00      	cmp	r3, #0
 801d3fa:	d05a      	beq.n	801d4b2 <__multiply+0x146>
 801d3fc:	6106      	str	r6, [r0, #16]
 801d3fe:	b005      	add	sp, #20
 801d400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d404:	f843 2b04 	str.w	r2, [r3], #4
 801d408:	e7d8      	b.n	801d3bc <__multiply+0x50>
 801d40a:	f8b3 a000 	ldrh.w	sl, [r3]
 801d40e:	f1ba 0f00 	cmp.w	sl, #0
 801d412:	d024      	beq.n	801d45e <__multiply+0xf2>
 801d414:	f104 0e14 	add.w	lr, r4, #20
 801d418:	46a9      	mov	r9, r5
 801d41a:	f04f 0c00 	mov.w	ip, #0
 801d41e:	f85e 2b04 	ldr.w	r2, [lr], #4
 801d422:	f8d9 1000 	ldr.w	r1, [r9]
 801d426:	fa1f fb82 	uxth.w	fp, r2
 801d42a:	b289      	uxth	r1, r1
 801d42c:	fb0a 110b 	mla	r1, sl, fp, r1
 801d430:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801d434:	f8d9 2000 	ldr.w	r2, [r9]
 801d438:	4461      	add	r1, ip
 801d43a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801d43e:	fb0a c20b 	mla	r2, sl, fp, ip
 801d442:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801d446:	b289      	uxth	r1, r1
 801d448:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801d44c:	4577      	cmp	r7, lr
 801d44e:	f849 1b04 	str.w	r1, [r9], #4
 801d452:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801d456:	d8e2      	bhi.n	801d41e <__multiply+0xb2>
 801d458:	9a01      	ldr	r2, [sp, #4]
 801d45a:	f845 c002 	str.w	ip, [r5, r2]
 801d45e:	9a03      	ldr	r2, [sp, #12]
 801d460:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801d464:	3304      	adds	r3, #4
 801d466:	f1b9 0f00 	cmp.w	r9, #0
 801d46a:	d020      	beq.n	801d4ae <__multiply+0x142>
 801d46c:	6829      	ldr	r1, [r5, #0]
 801d46e:	f104 0c14 	add.w	ip, r4, #20
 801d472:	46ae      	mov	lr, r5
 801d474:	f04f 0a00 	mov.w	sl, #0
 801d478:	f8bc b000 	ldrh.w	fp, [ip]
 801d47c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801d480:	fb09 220b 	mla	r2, r9, fp, r2
 801d484:	4492      	add	sl, r2
 801d486:	b289      	uxth	r1, r1
 801d488:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801d48c:	f84e 1b04 	str.w	r1, [lr], #4
 801d490:	f85c 2b04 	ldr.w	r2, [ip], #4
 801d494:	f8be 1000 	ldrh.w	r1, [lr]
 801d498:	0c12      	lsrs	r2, r2, #16
 801d49a:	fb09 1102 	mla	r1, r9, r2, r1
 801d49e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801d4a2:	4567      	cmp	r7, ip
 801d4a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801d4a8:	d8e6      	bhi.n	801d478 <__multiply+0x10c>
 801d4aa:	9a01      	ldr	r2, [sp, #4]
 801d4ac:	50a9      	str	r1, [r5, r2]
 801d4ae:	3504      	adds	r5, #4
 801d4b0:	e79a      	b.n	801d3e8 <__multiply+0x7c>
 801d4b2:	3e01      	subs	r6, #1
 801d4b4:	e79c      	b.n	801d3f0 <__multiply+0x84>
 801d4b6:	bf00      	nop
 801d4b8:	08020351 	.word	0x08020351
 801d4bc:	08020440 	.word	0x08020440

0801d4c0 <__pow5mult>:
 801d4c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d4c4:	4615      	mov	r5, r2
 801d4c6:	f012 0203 	ands.w	r2, r2, #3
 801d4ca:	4606      	mov	r6, r0
 801d4cc:	460f      	mov	r7, r1
 801d4ce:	d007      	beq.n	801d4e0 <__pow5mult+0x20>
 801d4d0:	4c25      	ldr	r4, [pc, #148]	; (801d568 <__pow5mult+0xa8>)
 801d4d2:	3a01      	subs	r2, #1
 801d4d4:	2300      	movs	r3, #0
 801d4d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d4da:	f7ff fe51 	bl	801d180 <__multadd>
 801d4de:	4607      	mov	r7, r0
 801d4e0:	10ad      	asrs	r5, r5, #2
 801d4e2:	d03d      	beq.n	801d560 <__pow5mult+0xa0>
 801d4e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801d4e6:	b97c      	cbnz	r4, 801d508 <__pow5mult+0x48>
 801d4e8:	2010      	movs	r0, #16
 801d4ea:	f7fc f8f7 	bl	80196dc <malloc>
 801d4ee:	4602      	mov	r2, r0
 801d4f0:	6270      	str	r0, [r6, #36]	; 0x24
 801d4f2:	b928      	cbnz	r0, 801d500 <__pow5mult+0x40>
 801d4f4:	4b1d      	ldr	r3, [pc, #116]	; (801d56c <__pow5mult+0xac>)
 801d4f6:	481e      	ldr	r0, [pc, #120]	; (801d570 <__pow5mult+0xb0>)
 801d4f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801d4fc:	f7fe f984 	bl	801b808 <__assert_func>
 801d500:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d504:	6004      	str	r4, [r0, #0]
 801d506:	60c4      	str	r4, [r0, #12]
 801d508:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801d50c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d510:	b94c      	cbnz	r4, 801d526 <__pow5mult+0x66>
 801d512:	f240 2171 	movw	r1, #625	; 0x271
 801d516:	4630      	mov	r0, r6
 801d518:	f7ff ff12 	bl	801d340 <__i2b>
 801d51c:	2300      	movs	r3, #0
 801d51e:	f8c8 0008 	str.w	r0, [r8, #8]
 801d522:	4604      	mov	r4, r0
 801d524:	6003      	str	r3, [r0, #0]
 801d526:	f04f 0900 	mov.w	r9, #0
 801d52a:	07eb      	lsls	r3, r5, #31
 801d52c:	d50a      	bpl.n	801d544 <__pow5mult+0x84>
 801d52e:	4639      	mov	r1, r7
 801d530:	4622      	mov	r2, r4
 801d532:	4630      	mov	r0, r6
 801d534:	f7ff ff1a 	bl	801d36c <__multiply>
 801d538:	4639      	mov	r1, r7
 801d53a:	4680      	mov	r8, r0
 801d53c:	4630      	mov	r0, r6
 801d53e:	f7ff fdfd 	bl	801d13c <_Bfree>
 801d542:	4647      	mov	r7, r8
 801d544:	106d      	asrs	r5, r5, #1
 801d546:	d00b      	beq.n	801d560 <__pow5mult+0xa0>
 801d548:	6820      	ldr	r0, [r4, #0]
 801d54a:	b938      	cbnz	r0, 801d55c <__pow5mult+0x9c>
 801d54c:	4622      	mov	r2, r4
 801d54e:	4621      	mov	r1, r4
 801d550:	4630      	mov	r0, r6
 801d552:	f7ff ff0b 	bl	801d36c <__multiply>
 801d556:	6020      	str	r0, [r4, #0]
 801d558:	f8c0 9000 	str.w	r9, [r0]
 801d55c:	4604      	mov	r4, r0
 801d55e:	e7e4      	b.n	801d52a <__pow5mult+0x6a>
 801d560:	4638      	mov	r0, r7
 801d562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d566:	bf00      	nop
 801d568:	08020590 	.word	0x08020590
 801d56c:	08020138 	.word	0x08020138
 801d570:	08020440 	.word	0x08020440

0801d574 <__lshift>:
 801d574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d578:	460c      	mov	r4, r1
 801d57a:	6849      	ldr	r1, [r1, #4]
 801d57c:	6923      	ldr	r3, [r4, #16]
 801d57e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d582:	68a3      	ldr	r3, [r4, #8]
 801d584:	4607      	mov	r7, r0
 801d586:	4691      	mov	r9, r2
 801d588:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d58c:	f108 0601 	add.w	r6, r8, #1
 801d590:	42b3      	cmp	r3, r6
 801d592:	db0b      	blt.n	801d5ac <__lshift+0x38>
 801d594:	4638      	mov	r0, r7
 801d596:	f7ff fd91 	bl	801d0bc <_Balloc>
 801d59a:	4605      	mov	r5, r0
 801d59c:	b948      	cbnz	r0, 801d5b2 <__lshift+0x3e>
 801d59e:	4602      	mov	r2, r0
 801d5a0:	4b2a      	ldr	r3, [pc, #168]	; (801d64c <__lshift+0xd8>)
 801d5a2:	482b      	ldr	r0, [pc, #172]	; (801d650 <__lshift+0xdc>)
 801d5a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 801d5a8:	f7fe f92e 	bl	801b808 <__assert_func>
 801d5ac:	3101      	adds	r1, #1
 801d5ae:	005b      	lsls	r3, r3, #1
 801d5b0:	e7ee      	b.n	801d590 <__lshift+0x1c>
 801d5b2:	2300      	movs	r3, #0
 801d5b4:	f100 0114 	add.w	r1, r0, #20
 801d5b8:	f100 0210 	add.w	r2, r0, #16
 801d5bc:	4618      	mov	r0, r3
 801d5be:	4553      	cmp	r3, sl
 801d5c0:	db37      	blt.n	801d632 <__lshift+0xbe>
 801d5c2:	6920      	ldr	r0, [r4, #16]
 801d5c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d5c8:	f104 0314 	add.w	r3, r4, #20
 801d5cc:	f019 091f 	ands.w	r9, r9, #31
 801d5d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d5d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801d5d8:	d02f      	beq.n	801d63a <__lshift+0xc6>
 801d5da:	f1c9 0e20 	rsb	lr, r9, #32
 801d5de:	468a      	mov	sl, r1
 801d5e0:	f04f 0c00 	mov.w	ip, #0
 801d5e4:	681a      	ldr	r2, [r3, #0]
 801d5e6:	fa02 f209 	lsl.w	r2, r2, r9
 801d5ea:	ea42 020c 	orr.w	r2, r2, ip
 801d5ee:	f84a 2b04 	str.w	r2, [sl], #4
 801d5f2:	f853 2b04 	ldr.w	r2, [r3], #4
 801d5f6:	4298      	cmp	r0, r3
 801d5f8:	fa22 fc0e 	lsr.w	ip, r2, lr
 801d5fc:	d8f2      	bhi.n	801d5e4 <__lshift+0x70>
 801d5fe:	1b03      	subs	r3, r0, r4
 801d600:	3b15      	subs	r3, #21
 801d602:	f023 0303 	bic.w	r3, r3, #3
 801d606:	3304      	adds	r3, #4
 801d608:	f104 0215 	add.w	r2, r4, #21
 801d60c:	4290      	cmp	r0, r2
 801d60e:	bf38      	it	cc
 801d610:	2304      	movcc	r3, #4
 801d612:	f841 c003 	str.w	ip, [r1, r3]
 801d616:	f1bc 0f00 	cmp.w	ip, #0
 801d61a:	d001      	beq.n	801d620 <__lshift+0xac>
 801d61c:	f108 0602 	add.w	r6, r8, #2
 801d620:	3e01      	subs	r6, #1
 801d622:	4638      	mov	r0, r7
 801d624:	612e      	str	r6, [r5, #16]
 801d626:	4621      	mov	r1, r4
 801d628:	f7ff fd88 	bl	801d13c <_Bfree>
 801d62c:	4628      	mov	r0, r5
 801d62e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d632:	f842 0f04 	str.w	r0, [r2, #4]!
 801d636:	3301      	adds	r3, #1
 801d638:	e7c1      	b.n	801d5be <__lshift+0x4a>
 801d63a:	3904      	subs	r1, #4
 801d63c:	f853 2b04 	ldr.w	r2, [r3], #4
 801d640:	f841 2f04 	str.w	r2, [r1, #4]!
 801d644:	4298      	cmp	r0, r3
 801d646:	d8f9      	bhi.n	801d63c <__lshift+0xc8>
 801d648:	e7ea      	b.n	801d620 <__lshift+0xac>
 801d64a:	bf00      	nop
 801d64c:	08020351 	.word	0x08020351
 801d650:	08020440 	.word	0x08020440

0801d654 <__mcmp>:
 801d654:	b530      	push	{r4, r5, lr}
 801d656:	6902      	ldr	r2, [r0, #16]
 801d658:	690c      	ldr	r4, [r1, #16]
 801d65a:	1b12      	subs	r2, r2, r4
 801d65c:	d10e      	bne.n	801d67c <__mcmp+0x28>
 801d65e:	f100 0314 	add.w	r3, r0, #20
 801d662:	3114      	adds	r1, #20
 801d664:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801d668:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801d66c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801d670:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801d674:	42a5      	cmp	r5, r4
 801d676:	d003      	beq.n	801d680 <__mcmp+0x2c>
 801d678:	d305      	bcc.n	801d686 <__mcmp+0x32>
 801d67a:	2201      	movs	r2, #1
 801d67c:	4610      	mov	r0, r2
 801d67e:	bd30      	pop	{r4, r5, pc}
 801d680:	4283      	cmp	r3, r0
 801d682:	d3f3      	bcc.n	801d66c <__mcmp+0x18>
 801d684:	e7fa      	b.n	801d67c <__mcmp+0x28>
 801d686:	f04f 32ff 	mov.w	r2, #4294967295
 801d68a:	e7f7      	b.n	801d67c <__mcmp+0x28>

0801d68c <__mdiff>:
 801d68c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d690:	460c      	mov	r4, r1
 801d692:	4606      	mov	r6, r0
 801d694:	4611      	mov	r1, r2
 801d696:	4620      	mov	r0, r4
 801d698:	4690      	mov	r8, r2
 801d69a:	f7ff ffdb 	bl	801d654 <__mcmp>
 801d69e:	1e05      	subs	r5, r0, #0
 801d6a0:	d110      	bne.n	801d6c4 <__mdiff+0x38>
 801d6a2:	4629      	mov	r1, r5
 801d6a4:	4630      	mov	r0, r6
 801d6a6:	f7ff fd09 	bl	801d0bc <_Balloc>
 801d6aa:	b930      	cbnz	r0, 801d6ba <__mdiff+0x2e>
 801d6ac:	4b3a      	ldr	r3, [pc, #232]	; (801d798 <__mdiff+0x10c>)
 801d6ae:	4602      	mov	r2, r0
 801d6b0:	f240 2132 	movw	r1, #562	; 0x232
 801d6b4:	4839      	ldr	r0, [pc, #228]	; (801d79c <__mdiff+0x110>)
 801d6b6:	f7fe f8a7 	bl	801b808 <__assert_func>
 801d6ba:	2301      	movs	r3, #1
 801d6bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d6c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d6c4:	bfa4      	itt	ge
 801d6c6:	4643      	movge	r3, r8
 801d6c8:	46a0      	movge	r8, r4
 801d6ca:	4630      	mov	r0, r6
 801d6cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d6d0:	bfa6      	itte	ge
 801d6d2:	461c      	movge	r4, r3
 801d6d4:	2500      	movge	r5, #0
 801d6d6:	2501      	movlt	r5, #1
 801d6d8:	f7ff fcf0 	bl	801d0bc <_Balloc>
 801d6dc:	b920      	cbnz	r0, 801d6e8 <__mdiff+0x5c>
 801d6de:	4b2e      	ldr	r3, [pc, #184]	; (801d798 <__mdiff+0x10c>)
 801d6e0:	4602      	mov	r2, r0
 801d6e2:	f44f 7110 	mov.w	r1, #576	; 0x240
 801d6e6:	e7e5      	b.n	801d6b4 <__mdiff+0x28>
 801d6e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801d6ec:	6926      	ldr	r6, [r4, #16]
 801d6ee:	60c5      	str	r5, [r0, #12]
 801d6f0:	f104 0914 	add.w	r9, r4, #20
 801d6f4:	f108 0514 	add.w	r5, r8, #20
 801d6f8:	f100 0e14 	add.w	lr, r0, #20
 801d6fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801d700:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801d704:	f108 0210 	add.w	r2, r8, #16
 801d708:	46f2      	mov	sl, lr
 801d70a:	2100      	movs	r1, #0
 801d70c:	f859 3b04 	ldr.w	r3, [r9], #4
 801d710:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801d714:	fa1f f883 	uxth.w	r8, r3
 801d718:	fa11 f18b 	uxtah	r1, r1, fp
 801d71c:	0c1b      	lsrs	r3, r3, #16
 801d71e:	eba1 0808 	sub.w	r8, r1, r8
 801d722:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801d726:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801d72a:	fa1f f888 	uxth.w	r8, r8
 801d72e:	1419      	asrs	r1, r3, #16
 801d730:	454e      	cmp	r6, r9
 801d732:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801d736:	f84a 3b04 	str.w	r3, [sl], #4
 801d73a:	d8e7      	bhi.n	801d70c <__mdiff+0x80>
 801d73c:	1b33      	subs	r3, r6, r4
 801d73e:	3b15      	subs	r3, #21
 801d740:	f023 0303 	bic.w	r3, r3, #3
 801d744:	3304      	adds	r3, #4
 801d746:	3415      	adds	r4, #21
 801d748:	42a6      	cmp	r6, r4
 801d74a:	bf38      	it	cc
 801d74c:	2304      	movcc	r3, #4
 801d74e:	441d      	add	r5, r3
 801d750:	4473      	add	r3, lr
 801d752:	469e      	mov	lr, r3
 801d754:	462e      	mov	r6, r5
 801d756:	4566      	cmp	r6, ip
 801d758:	d30e      	bcc.n	801d778 <__mdiff+0xec>
 801d75a:	f10c 0203 	add.w	r2, ip, #3
 801d75e:	1b52      	subs	r2, r2, r5
 801d760:	f022 0203 	bic.w	r2, r2, #3
 801d764:	3d03      	subs	r5, #3
 801d766:	45ac      	cmp	ip, r5
 801d768:	bf38      	it	cc
 801d76a:	2200      	movcc	r2, #0
 801d76c:	441a      	add	r2, r3
 801d76e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801d772:	b17b      	cbz	r3, 801d794 <__mdiff+0x108>
 801d774:	6107      	str	r7, [r0, #16]
 801d776:	e7a3      	b.n	801d6c0 <__mdiff+0x34>
 801d778:	f856 8b04 	ldr.w	r8, [r6], #4
 801d77c:	fa11 f288 	uxtah	r2, r1, r8
 801d780:	1414      	asrs	r4, r2, #16
 801d782:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801d786:	b292      	uxth	r2, r2
 801d788:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801d78c:	f84e 2b04 	str.w	r2, [lr], #4
 801d790:	1421      	asrs	r1, r4, #16
 801d792:	e7e0      	b.n	801d756 <__mdiff+0xca>
 801d794:	3f01      	subs	r7, #1
 801d796:	e7ea      	b.n	801d76e <__mdiff+0xe2>
 801d798:	08020351 	.word	0x08020351
 801d79c:	08020440 	.word	0x08020440

0801d7a0 <__ulp>:
 801d7a0:	b082      	sub	sp, #8
 801d7a2:	ed8d 0b00 	vstr	d0, [sp]
 801d7a6:	9b01      	ldr	r3, [sp, #4]
 801d7a8:	4912      	ldr	r1, [pc, #72]	; (801d7f4 <__ulp+0x54>)
 801d7aa:	4019      	ands	r1, r3
 801d7ac:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801d7b0:	2900      	cmp	r1, #0
 801d7b2:	dd05      	ble.n	801d7c0 <__ulp+0x20>
 801d7b4:	2200      	movs	r2, #0
 801d7b6:	460b      	mov	r3, r1
 801d7b8:	ec43 2b10 	vmov	d0, r2, r3
 801d7bc:	b002      	add	sp, #8
 801d7be:	4770      	bx	lr
 801d7c0:	4249      	negs	r1, r1
 801d7c2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801d7c6:	ea4f 5021 	mov.w	r0, r1, asr #20
 801d7ca:	f04f 0200 	mov.w	r2, #0
 801d7ce:	f04f 0300 	mov.w	r3, #0
 801d7d2:	da04      	bge.n	801d7de <__ulp+0x3e>
 801d7d4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801d7d8:	fa41 f300 	asr.w	r3, r1, r0
 801d7dc:	e7ec      	b.n	801d7b8 <__ulp+0x18>
 801d7de:	f1a0 0114 	sub.w	r1, r0, #20
 801d7e2:	291e      	cmp	r1, #30
 801d7e4:	bfda      	itte	le
 801d7e6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801d7ea:	fa20 f101 	lsrle.w	r1, r0, r1
 801d7ee:	2101      	movgt	r1, #1
 801d7f0:	460a      	mov	r2, r1
 801d7f2:	e7e1      	b.n	801d7b8 <__ulp+0x18>
 801d7f4:	7ff00000 	.word	0x7ff00000

0801d7f8 <__b2d>:
 801d7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d7fa:	6905      	ldr	r5, [r0, #16]
 801d7fc:	f100 0714 	add.w	r7, r0, #20
 801d800:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801d804:	1f2e      	subs	r6, r5, #4
 801d806:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801d80a:	4620      	mov	r0, r4
 801d80c:	f7ff fd48 	bl	801d2a0 <__hi0bits>
 801d810:	f1c0 0320 	rsb	r3, r0, #32
 801d814:	280a      	cmp	r0, #10
 801d816:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801d894 <__b2d+0x9c>
 801d81a:	600b      	str	r3, [r1, #0]
 801d81c:	dc14      	bgt.n	801d848 <__b2d+0x50>
 801d81e:	f1c0 0e0b 	rsb	lr, r0, #11
 801d822:	fa24 f10e 	lsr.w	r1, r4, lr
 801d826:	42b7      	cmp	r7, r6
 801d828:	ea41 030c 	orr.w	r3, r1, ip
 801d82c:	bf34      	ite	cc
 801d82e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801d832:	2100      	movcs	r1, #0
 801d834:	3015      	adds	r0, #21
 801d836:	fa04 f000 	lsl.w	r0, r4, r0
 801d83a:	fa21 f10e 	lsr.w	r1, r1, lr
 801d83e:	ea40 0201 	orr.w	r2, r0, r1
 801d842:	ec43 2b10 	vmov	d0, r2, r3
 801d846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d848:	42b7      	cmp	r7, r6
 801d84a:	bf3a      	itte	cc
 801d84c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801d850:	f1a5 0608 	subcc.w	r6, r5, #8
 801d854:	2100      	movcs	r1, #0
 801d856:	380b      	subs	r0, #11
 801d858:	d017      	beq.n	801d88a <__b2d+0x92>
 801d85a:	f1c0 0c20 	rsb	ip, r0, #32
 801d85e:	fa04 f500 	lsl.w	r5, r4, r0
 801d862:	42be      	cmp	r6, r7
 801d864:	fa21 f40c 	lsr.w	r4, r1, ip
 801d868:	ea45 0504 	orr.w	r5, r5, r4
 801d86c:	bf8c      	ite	hi
 801d86e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801d872:	2400      	movls	r4, #0
 801d874:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801d878:	fa01 f000 	lsl.w	r0, r1, r0
 801d87c:	fa24 f40c 	lsr.w	r4, r4, ip
 801d880:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801d884:	ea40 0204 	orr.w	r2, r0, r4
 801d888:	e7db      	b.n	801d842 <__b2d+0x4a>
 801d88a:	ea44 030c 	orr.w	r3, r4, ip
 801d88e:	460a      	mov	r2, r1
 801d890:	e7d7      	b.n	801d842 <__b2d+0x4a>
 801d892:	bf00      	nop
 801d894:	3ff00000 	.word	0x3ff00000

0801d898 <__d2b>:
 801d898:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d89c:	4689      	mov	r9, r1
 801d89e:	2101      	movs	r1, #1
 801d8a0:	ec57 6b10 	vmov	r6, r7, d0
 801d8a4:	4690      	mov	r8, r2
 801d8a6:	f7ff fc09 	bl	801d0bc <_Balloc>
 801d8aa:	4604      	mov	r4, r0
 801d8ac:	b930      	cbnz	r0, 801d8bc <__d2b+0x24>
 801d8ae:	4602      	mov	r2, r0
 801d8b0:	4b25      	ldr	r3, [pc, #148]	; (801d948 <__d2b+0xb0>)
 801d8b2:	4826      	ldr	r0, [pc, #152]	; (801d94c <__d2b+0xb4>)
 801d8b4:	f240 310a 	movw	r1, #778	; 0x30a
 801d8b8:	f7fd ffa6 	bl	801b808 <__assert_func>
 801d8bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801d8c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801d8c4:	bb35      	cbnz	r5, 801d914 <__d2b+0x7c>
 801d8c6:	2e00      	cmp	r6, #0
 801d8c8:	9301      	str	r3, [sp, #4]
 801d8ca:	d028      	beq.n	801d91e <__d2b+0x86>
 801d8cc:	4668      	mov	r0, sp
 801d8ce:	9600      	str	r6, [sp, #0]
 801d8d0:	f7ff fd06 	bl	801d2e0 <__lo0bits>
 801d8d4:	9900      	ldr	r1, [sp, #0]
 801d8d6:	b300      	cbz	r0, 801d91a <__d2b+0x82>
 801d8d8:	9a01      	ldr	r2, [sp, #4]
 801d8da:	f1c0 0320 	rsb	r3, r0, #32
 801d8de:	fa02 f303 	lsl.w	r3, r2, r3
 801d8e2:	430b      	orrs	r3, r1
 801d8e4:	40c2      	lsrs	r2, r0
 801d8e6:	6163      	str	r3, [r4, #20]
 801d8e8:	9201      	str	r2, [sp, #4]
 801d8ea:	9b01      	ldr	r3, [sp, #4]
 801d8ec:	61a3      	str	r3, [r4, #24]
 801d8ee:	2b00      	cmp	r3, #0
 801d8f0:	bf14      	ite	ne
 801d8f2:	2202      	movne	r2, #2
 801d8f4:	2201      	moveq	r2, #1
 801d8f6:	6122      	str	r2, [r4, #16]
 801d8f8:	b1d5      	cbz	r5, 801d930 <__d2b+0x98>
 801d8fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d8fe:	4405      	add	r5, r0
 801d900:	f8c9 5000 	str.w	r5, [r9]
 801d904:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d908:	f8c8 0000 	str.w	r0, [r8]
 801d90c:	4620      	mov	r0, r4
 801d90e:	b003      	add	sp, #12
 801d910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d914:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d918:	e7d5      	b.n	801d8c6 <__d2b+0x2e>
 801d91a:	6161      	str	r1, [r4, #20]
 801d91c:	e7e5      	b.n	801d8ea <__d2b+0x52>
 801d91e:	a801      	add	r0, sp, #4
 801d920:	f7ff fcde 	bl	801d2e0 <__lo0bits>
 801d924:	9b01      	ldr	r3, [sp, #4]
 801d926:	6163      	str	r3, [r4, #20]
 801d928:	2201      	movs	r2, #1
 801d92a:	6122      	str	r2, [r4, #16]
 801d92c:	3020      	adds	r0, #32
 801d92e:	e7e3      	b.n	801d8f8 <__d2b+0x60>
 801d930:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d934:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d938:	f8c9 0000 	str.w	r0, [r9]
 801d93c:	6918      	ldr	r0, [r3, #16]
 801d93e:	f7ff fcaf 	bl	801d2a0 <__hi0bits>
 801d942:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d946:	e7df      	b.n	801d908 <__d2b+0x70>
 801d948:	08020351 	.word	0x08020351
 801d94c:	08020440 	.word	0x08020440

0801d950 <__ratio>:
 801d950:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d954:	4688      	mov	r8, r1
 801d956:	4669      	mov	r1, sp
 801d958:	4681      	mov	r9, r0
 801d95a:	f7ff ff4d 	bl	801d7f8 <__b2d>
 801d95e:	a901      	add	r1, sp, #4
 801d960:	4640      	mov	r0, r8
 801d962:	ec55 4b10 	vmov	r4, r5, d0
 801d966:	f7ff ff47 	bl	801d7f8 <__b2d>
 801d96a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d96e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801d972:	eba3 0c02 	sub.w	ip, r3, r2
 801d976:	e9dd 3200 	ldrd	r3, r2, [sp]
 801d97a:	1a9b      	subs	r3, r3, r2
 801d97c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801d980:	ec51 0b10 	vmov	r0, r1, d0
 801d984:	2b00      	cmp	r3, #0
 801d986:	bfd6      	itet	le
 801d988:	460a      	movle	r2, r1
 801d98a:	462a      	movgt	r2, r5
 801d98c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d990:	468b      	mov	fp, r1
 801d992:	462f      	mov	r7, r5
 801d994:	bfd4      	ite	le
 801d996:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801d99a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d99e:	4620      	mov	r0, r4
 801d9a0:	ee10 2a10 	vmov	r2, s0
 801d9a4:	465b      	mov	r3, fp
 801d9a6:	4639      	mov	r1, r7
 801d9a8:	f7e2 ff68 	bl	800087c <__aeabi_ddiv>
 801d9ac:	ec41 0b10 	vmov	d0, r0, r1
 801d9b0:	b003      	add	sp, #12
 801d9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d9b6 <__copybits>:
 801d9b6:	3901      	subs	r1, #1
 801d9b8:	b570      	push	{r4, r5, r6, lr}
 801d9ba:	1149      	asrs	r1, r1, #5
 801d9bc:	6914      	ldr	r4, [r2, #16]
 801d9be:	3101      	adds	r1, #1
 801d9c0:	f102 0314 	add.w	r3, r2, #20
 801d9c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d9c8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d9cc:	1f05      	subs	r5, r0, #4
 801d9ce:	42a3      	cmp	r3, r4
 801d9d0:	d30c      	bcc.n	801d9ec <__copybits+0x36>
 801d9d2:	1aa3      	subs	r3, r4, r2
 801d9d4:	3b11      	subs	r3, #17
 801d9d6:	f023 0303 	bic.w	r3, r3, #3
 801d9da:	3211      	adds	r2, #17
 801d9dc:	42a2      	cmp	r2, r4
 801d9de:	bf88      	it	hi
 801d9e0:	2300      	movhi	r3, #0
 801d9e2:	4418      	add	r0, r3
 801d9e4:	2300      	movs	r3, #0
 801d9e6:	4288      	cmp	r0, r1
 801d9e8:	d305      	bcc.n	801d9f6 <__copybits+0x40>
 801d9ea:	bd70      	pop	{r4, r5, r6, pc}
 801d9ec:	f853 6b04 	ldr.w	r6, [r3], #4
 801d9f0:	f845 6f04 	str.w	r6, [r5, #4]!
 801d9f4:	e7eb      	b.n	801d9ce <__copybits+0x18>
 801d9f6:	f840 3b04 	str.w	r3, [r0], #4
 801d9fa:	e7f4      	b.n	801d9e6 <__copybits+0x30>

0801d9fc <__any_on>:
 801d9fc:	f100 0214 	add.w	r2, r0, #20
 801da00:	6900      	ldr	r0, [r0, #16]
 801da02:	114b      	asrs	r3, r1, #5
 801da04:	4298      	cmp	r0, r3
 801da06:	b510      	push	{r4, lr}
 801da08:	db11      	blt.n	801da2e <__any_on+0x32>
 801da0a:	dd0a      	ble.n	801da22 <__any_on+0x26>
 801da0c:	f011 011f 	ands.w	r1, r1, #31
 801da10:	d007      	beq.n	801da22 <__any_on+0x26>
 801da12:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801da16:	fa24 f001 	lsr.w	r0, r4, r1
 801da1a:	fa00 f101 	lsl.w	r1, r0, r1
 801da1e:	428c      	cmp	r4, r1
 801da20:	d10b      	bne.n	801da3a <__any_on+0x3e>
 801da22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801da26:	4293      	cmp	r3, r2
 801da28:	d803      	bhi.n	801da32 <__any_on+0x36>
 801da2a:	2000      	movs	r0, #0
 801da2c:	bd10      	pop	{r4, pc}
 801da2e:	4603      	mov	r3, r0
 801da30:	e7f7      	b.n	801da22 <__any_on+0x26>
 801da32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801da36:	2900      	cmp	r1, #0
 801da38:	d0f5      	beq.n	801da26 <__any_on+0x2a>
 801da3a:	2001      	movs	r0, #1
 801da3c:	e7f6      	b.n	801da2c <__any_on+0x30>

0801da3e <_calloc_r>:
 801da3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801da40:	fba1 2402 	umull	r2, r4, r1, r2
 801da44:	b94c      	cbnz	r4, 801da5a <_calloc_r+0x1c>
 801da46:	4611      	mov	r1, r2
 801da48:	9201      	str	r2, [sp, #4]
 801da4a:	f7fb fef3 	bl	8019834 <_malloc_r>
 801da4e:	9a01      	ldr	r2, [sp, #4]
 801da50:	4605      	mov	r5, r0
 801da52:	b930      	cbnz	r0, 801da62 <_calloc_r+0x24>
 801da54:	4628      	mov	r0, r5
 801da56:	b003      	add	sp, #12
 801da58:	bd30      	pop	{r4, r5, pc}
 801da5a:	220c      	movs	r2, #12
 801da5c:	6002      	str	r2, [r0, #0]
 801da5e:	2500      	movs	r5, #0
 801da60:	e7f8      	b.n	801da54 <_calloc_r+0x16>
 801da62:	4621      	mov	r1, r4
 801da64:	f7fb fe72 	bl	801974c <memset>
 801da68:	e7f4      	b.n	801da54 <_calloc_r+0x16>

0801da6a <__ssputs_r>:
 801da6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801da6e:	688e      	ldr	r6, [r1, #8]
 801da70:	429e      	cmp	r6, r3
 801da72:	4682      	mov	sl, r0
 801da74:	460c      	mov	r4, r1
 801da76:	4690      	mov	r8, r2
 801da78:	461f      	mov	r7, r3
 801da7a:	d838      	bhi.n	801daee <__ssputs_r+0x84>
 801da7c:	898a      	ldrh	r2, [r1, #12]
 801da7e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801da82:	d032      	beq.n	801daea <__ssputs_r+0x80>
 801da84:	6825      	ldr	r5, [r4, #0]
 801da86:	6909      	ldr	r1, [r1, #16]
 801da88:	eba5 0901 	sub.w	r9, r5, r1
 801da8c:	6965      	ldr	r5, [r4, #20]
 801da8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801da92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801da96:	3301      	adds	r3, #1
 801da98:	444b      	add	r3, r9
 801da9a:	106d      	asrs	r5, r5, #1
 801da9c:	429d      	cmp	r5, r3
 801da9e:	bf38      	it	cc
 801daa0:	461d      	movcc	r5, r3
 801daa2:	0553      	lsls	r3, r2, #21
 801daa4:	d531      	bpl.n	801db0a <__ssputs_r+0xa0>
 801daa6:	4629      	mov	r1, r5
 801daa8:	f7fb fec4 	bl	8019834 <_malloc_r>
 801daac:	4606      	mov	r6, r0
 801daae:	b950      	cbnz	r0, 801dac6 <__ssputs_r+0x5c>
 801dab0:	230c      	movs	r3, #12
 801dab2:	f8ca 3000 	str.w	r3, [sl]
 801dab6:	89a3      	ldrh	r3, [r4, #12]
 801dab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dabc:	81a3      	strh	r3, [r4, #12]
 801dabe:	f04f 30ff 	mov.w	r0, #4294967295
 801dac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dac6:	6921      	ldr	r1, [r4, #16]
 801dac8:	464a      	mov	r2, r9
 801daca:	f7fb fe17 	bl	80196fc <memcpy>
 801dace:	89a3      	ldrh	r3, [r4, #12]
 801dad0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801dad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dad8:	81a3      	strh	r3, [r4, #12]
 801dada:	6126      	str	r6, [r4, #16]
 801dadc:	6165      	str	r5, [r4, #20]
 801dade:	444e      	add	r6, r9
 801dae0:	eba5 0509 	sub.w	r5, r5, r9
 801dae4:	6026      	str	r6, [r4, #0]
 801dae6:	60a5      	str	r5, [r4, #8]
 801dae8:	463e      	mov	r6, r7
 801daea:	42be      	cmp	r6, r7
 801daec:	d900      	bls.n	801daf0 <__ssputs_r+0x86>
 801daee:	463e      	mov	r6, r7
 801daf0:	6820      	ldr	r0, [r4, #0]
 801daf2:	4632      	mov	r2, r6
 801daf4:	4641      	mov	r1, r8
 801daf6:	f7fb fe0f 	bl	8019718 <memmove>
 801dafa:	68a3      	ldr	r3, [r4, #8]
 801dafc:	1b9b      	subs	r3, r3, r6
 801dafe:	60a3      	str	r3, [r4, #8]
 801db00:	6823      	ldr	r3, [r4, #0]
 801db02:	4433      	add	r3, r6
 801db04:	6023      	str	r3, [r4, #0]
 801db06:	2000      	movs	r0, #0
 801db08:	e7db      	b.n	801dac2 <__ssputs_r+0x58>
 801db0a:	462a      	mov	r2, r5
 801db0c:	f000 fb2e 	bl	801e16c <_realloc_r>
 801db10:	4606      	mov	r6, r0
 801db12:	2800      	cmp	r0, #0
 801db14:	d1e1      	bne.n	801dada <__ssputs_r+0x70>
 801db16:	6921      	ldr	r1, [r4, #16]
 801db18:	4650      	mov	r0, sl
 801db1a:	f7fb fe1f 	bl	801975c <_free_r>
 801db1e:	e7c7      	b.n	801dab0 <__ssputs_r+0x46>

0801db20 <_svfiprintf_r>:
 801db20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db24:	4698      	mov	r8, r3
 801db26:	898b      	ldrh	r3, [r1, #12]
 801db28:	061b      	lsls	r3, r3, #24
 801db2a:	b09d      	sub	sp, #116	; 0x74
 801db2c:	4607      	mov	r7, r0
 801db2e:	460d      	mov	r5, r1
 801db30:	4614      	mov	r4, r2
 801db32:	d50e      	bpl.n	801db52 <_svfiprintf_r+0x32>
 801db34:	690b      	ldr	r3, [r1, #16]
 801db36:	b963      	cbnz	r3, 801db52 <_svfiprintf_r+0x32>
 801db38:	2140      	movs	r1, #64	; 0x40
 801db3a:	f7fb fe7b 	bl	8019834 <_malloc_r>
 801db3e:	6028      	str	r0, [r5, #0]
 801db40:	6128      	str	r0, [r5, #16]
 801db42:	b920      	cbnz	r0, 801db4e <_svfiprintf_r+0x2e>
 801db44:	230c      	movs	r3, #12
 801db46:	603b      	str	r3, [r7, #0]
 801db48:	f04f 30ff 	mov.w	r0, #4294967295
 801db4c:	e0d1      	b.n	801dcf2 <_svfiprintf_r+0x1d2>
 801db4e:	2340      	movs	r3, #64	; 0x40
 801db50:	616b      	str	r3, [r5, #20]
 801db52:	2300      	movs	r3, #0
 801db54:	9309      	str	r3, [sp, #36]	; 0x24
 801db56:	2320      	movs	r3, #32
 801db58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801db5c:	f8cd 800c 	str.w	r8, [sp, #12]
 801db60:	2330      	movs	r3, #48	; 0x30
 801db62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801dd0c <_svfiprintf_r+0x1ec>
 801db66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801db6a:	f04f 0901 	mov.w	r9, #1
 801db6e:	4623      	mov	r3, r4
 801db70:	469a      	mov	sl, r3
 801db72:	f813 2b01 	ldrb.w	r2, [r3], #1
 801db76:	b10a      	cbz	r2, 801db7c <_svfiprintf_r+0x5c>
 801db78:	2a25      	cmp	r2, #37	; 0x25
 801db7a:	d1f9      	bne.n	801db70 <_svfiprintf_r+0x50>
 801db7c:	ebba 0b04 	subs.w	fp, sl, r4
 801db80:	d00b      	beq.n	801db9a <_svfiprintf_r+0x7a>
 801db82:	465b      	mov	r3, fp
 801db84:	4622      	mov	r2, r4
 801db86:	4629      	mov	r1, r5
 801db88:	4638      	mov	r0, r7
 801db8a:	f7ff ff6e 	bl	801da6a <__ssputs_r>
 801db8e:	3001      	adds	r0, #1
 801db90:	f000 80aa 	beq.w	801dce8 <_svfiprintf_r+0x1c8>
 801db94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801db96:	445a      	add	r2, fp
 801db98:	9209      	str	r2, [sp, #36]	; 0x24
 801db9a:	f89a 3000 	ldrb.w	r3, [sl]
 801db9e:	2b00      	cmp	r3, #0
 801dba0:	f000 80a2 	beq.w	801dce8 <_svfiprintf_r+0x1c8>
 801dba4:	2300      	movs	r3, #0
 801dba6:	f04f 32ff 	mov.w	r2, #4294967295
 801dbaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dbae:	f10a 0a01 	add.w	sl, sl, #1
 801dbb2:	9304      	str	r3, [sp, #16]
 801dbb4:	9307      	str	r3, [sp, #28]
 801dbb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801dbba:	931a      	str	r3, [sp, #104]	; 0x68
 801dbbc:	4654      	mov	r4, sl
 801dbbe:	2205      	movs	r2, #5
 801dbc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dbc4:	4851      	ldr	r0, [pc, #324]	; (801dd0c <_svfiprintf_r+0x1ec>)
 801dbc6:	f7e2 fb23 	bl	8000210 <memchr>
 801dbca:	9a04      	ldr	r2, [sp, #16]
 801dbcc:	b9d8      	cbnz	r0, 801dc06 <_svfiprintf_r+0xe6>
 801dbce:	06d0      	lsls	r0, r2, #27
 801dbd0:	bf44      	itt	mi
 801dbd2:	2320      	movmi	r3, #32
 801dbd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dbd8:	0711      	lsls	r1, r2, #28
 801dbda:	bf44      	itt	mi
 801dbdc:	232b      	movmi	r3, #43	; 0x2b
 801dbde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dbe2:	f89a 3000 	ldrb.w	r3, [sl]
 801dbe6:	2b2a      	cmp	r3, #42	; 0x2a
 801dbe8:	d015      	beq.n	801dc16 <_svfiprintf_r+0xf6>
 801dbea:	9a07      	ldr	r2, [sp, #28]
 801dbec:	4654      	mov	r4, sl
 801dbee:	2000      	movs	r0, #0
 801dbf0:	f04f 0c0a 	mov.w	ip, #10
 801dbf4:	4621      	mov	r1, r4
 801dbf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dbfa:	3b30      	subs	r3, #48	; 0x30
 801dbfc:	2b09      	cmp	r3, #9
 801dbfe:	d94e      	bls.n	801dc9e <_svfiprintf_r+0x17e>
 801dc00:	b1b0      	cbz	r0, 801dc30 <_svfiprintf_r+0x110>
 801dc02:	9207      	str	r2, [sp, #28]
 801dc04:	e014      	b.n	801dc30 <_svfiprintf_r+0x110>
 801dc06:	eba0 0308 	sub.w	r3, r0, r8
 801dc0a:	fa09 f303 	lsl.w	r3, r9, r3
 801dc0e:	4313      	orrs	r3, r2
 801dc10:	9304      	str	r3, [sp, #16]
 801dc12:	46a2      	mov	sl, r4
 801dc14:	e7d2      	b.n	801dbbc <_svfiprintf_r+0x9c>
 801dc16:	9b03      	ldr	r3, [sp, #12]
 801dc18:	1d19      	adds	r1, r3, #4
 801dc1a:	681b      	ldr	r3, [r3, #0]
 801dc1c:	9103      	str	r1, [sp, #12]
 801dc1e:	2b00      	cmp	r3, #0
 801dc20:	bfbb      	ittet	lt
 801dc22:	425b      	neglt	r3, r3
 801dc24:	f042 0202 	orrlt.w	r2, r2, #2
 801dc28:	9307      	strge	r3, [sp, #28]
 801dc2a:	9307      	strlt	r3, [sp, #28]
 801dc2c:	bfb8      	it	lt
 801dc2e:	9204      	strlt	r2, [sp, #16]
 801dc30:	7823      	ldrb	r3, [r4, #0]
 801dc32:	2b2e      	cmp	r3, #46	; 0x2e
 801dc34:	d10c      	bne.n	801dc50 <_svfiprintf_r+0x130>
 801dc36:	7863      	ldrb	r3, [r4, #1]
 801dc38:	2b2a      	cmp	r3, #42	; 0x2a
 801dc3a:	d135      	bne.n	801dca8 <_svfiprintf_r+0x188>
 801dc3c:	9b03      	ldr	r3, [sp, #12]
 801dc3e:	1d1a      	adds	r2, r3, #4
 801dc40:	681b      	ldr	r3, [r3, #0]
 801dc42:	9203      	str	r2, [sp, #12]
 801dc44:	2b00      	cmp	r3, #0
 801dc46:	bfb8      	it	lt
 801dc48:	f04f 33ff 	movlt.w	r3, #4294967295
 801dc4c:	3402      	adds	r4, #2
 801dc4e:	9305      	str	r3, [sp, #20]
 801dc50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801dd1c <_svfiprintf_r+0x1fc>
 801dc54:	7821      	ldrb	r1, [r4, #0]
 801dc56:	2203      	movs	r2, #3
 801dc58:	4650      	mov	r0, sl
 801dc5a:	f7e2 fad9 	bl	8000210 <memchr>
 801dc5e:	b140      	cbz	r0, 801dc72 <_svfiprintf_r+0x152>
 801dc60:	2340      	movs	r3, #64	; 0x40
 801dc62:	eba0 000a 	sub.w	r0, r0, sl
 801dc66:	fa03 f000 	lsl.w	r0, r3, r0
 801dc6a:	9b04      	ldr	r3, [sp, #16]
 801dc6c:	4303      	orrs	r3, r0
 801dc6e:	3401      	adds	r4, #1
 801dc70:	9304      	str	r3, [sp, #16]
 801dc72:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dc76:	4826      	ldr	r0, [pc, #152]	; (801dd10 <_svfiprintf_r+0x1f0>)
 801dc78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801dc7c:	2206      	movs	r2, #6
 801dc7e:	f7e2 fac7 	bl	8000210 <memchr>
 801dc82:	2800      	cmp	r0, #0
 801dc84:	d038      	beq.n	801dcf8 <_svfiprintf_r+0x1d8>
 801dc86:	4b23      	ldr	r3, [pc, #140]	; (801dd14 <_svfiprintf_r+0x1f4>)
 801dc88:	bb1b      	cbnz	r3, 801dcd2 <_svfiprintf_r+0x1b2>
 801dc8a:	9b03      	ldr	r3, [sp, #12]
 801dc8c:	3307      	adds	r3, #7
 801dc8e:	f023 0307 	bic.w	r3, r3, #7
 801dc92:	3308      	adds	r3, #8
 801dc94:	9303      	str	r3, [sp, #12]
 801dc96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dc98:	4433      	add	r3, r6
 801dc9a:	9309      	str	r3, [sp, #36]	; 0x24
 801dc9c:	e767      	b.n	801db6e <_svfiprintf_r+0x4e>
 801dc9e:	fb0c 3202 	mla	r2, ip, r2, r3
 801dca2:	460c      	mov	r4, r1
 801dca4:	2001      	movs	r0, #1
 801dca6:	e7a5      	b.n	801dbf4 <_svfiprintf_r+0xd4>
 801dca8:	2300      	movs	r3, #0
 801dcaa:	3401      	adds	r4, #1
 801dcac:	9305      	str	r3, [sp, #20]
 801dcae:	4619      	mov	r1, r3
 801dcb0:	f04f 0c0a 	mov.w	ip, #10
 801dcb4:	4620      	mov	r0, r4
 801dcb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dcba:	3a30      	subs	r2, #48	; 0x30
 801dcbc:	2a09      	cmp	r2, #9
 801dcbe:	d903      	bls.n	801dcc8 <_svfiprintf_r+0x1a8>
 801dcc0:	2b00      	cmp	r3, #0
 801dcc2:	d0c5      	beq.n	801dc50 <_svfiprintf_r+0x130>
 801dcc4:	9105      	str	r1, [sp, #20]
 801dcc6:	e7c3      	b.n	801dc50 <_svfiprintf_r+0x130>
 801dcc8:	fb0c 2101 	mla	r1, ip, r1, r2
 801dccc:	4604      	mov	r4, r0
 801dcce:	2301      	movs	r3, #1
 801dcd0:	e7f0      	b.n	801dcb4 <_svfiprintf_r+0x194>
 801dcd2:	ab03      	add	r3, sp, #12
 801dcd4:	9300      	str	r3, [sp, #0]
 801dcd6:	462a      	mov	r2, r5
 801dcd8:	4b0f      	ldr	r3, [pc, #60]	; (801dd18 <_svfiprintf_r+0x1f8>)
 801dcda:	a904      	add	r1, sp, #16
 801dcdc:	4638      	mov	r0, r7
 801dcde:	f7fb febd 	bl	8019a5c <_printf_float>
 801dce2:	1c42      	adds	r2, r0, #1
 801dce4:	4606      	mov	r6, r0
 801dce6:	d1d6      	bne.n	801dc96 <_svfiprintf_r+0x176>
 801dce8:	89ab      	ldrh	r3, [r5, #12]
 801dcea:	065b      	lsls	r3, r3, #25
 801dcec:	f53f af2c 	bmi.w	801db48 <_svfiprintf_r+0x28>
 801dcf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801dcf2:	b01d      	add	sp, #116	; 0x74
 801dcf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dcf8:	ab03      	add	r3, sp, #12
 801dcfa:	9300      	str	r3, [sp, #0]
 801dcfc:	462a      	mov	r2, r5
 801dcfe:	4b06      	ldr	r3, [pc, #24]	; (801dd18 <_svfiprintf_r+0x1f8>)
 801dd00:	a904      	add	r1, sp, #16
 801dd02:	4638      	mov	r0, r7
 801dd04:	f7fc f94e 	bl	8019fa4 <_printf_i>
 801dd08:	e7eb      	b.n	801dce2 <_svfiprintf_r+0x1c2>
 801dd0a:	bf00      	nop
 801dd0c:	0802059c 	.word	0x0802059c
 801dd10:	080205a6 	.word	0x080205a6
 801dd14:	08019a5d 	.word	0x08019a5d
 801dd18:	0801da6b 	.word	0x0801da6b
 801dd1c:	080205a2 	.word	0x080205a2

0801dd20 <__sfputc_r>:
 801dd20:	6893      	ldr	r3, [r2, #8]
 801dd22:	3b01      	subs	r3, #1
 801dd24:	2b00      	cmp	r3, #0
 801dd26:	b410      	push	{r4}
 801dd28:	6093      	str	r3, [r2, #8]
 801dd2a:	da08      	bge.n	801dd3e <__sfputc_r+0x1e>
 801dd2c:	6994      	ldr	r4, [r2, #24]
 801dd2e:	42a3      	cmp	r3, r4
 801dd30:	db01      	blt.n	801dd36 <__sfputc_r+0x16>
 801dd32:	290a      	cmp	r1, #10
 801dd34:	d103      	bne.n	801dd3e <__sfputc_r+0x1e>
 801dd36:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dd3a:	f7fd bca5 	b.w	801b688 <__swbuf_r>
 801dd3e:	6813      	ldr	r3, [r2, #0]
 801dd40:	1c58      	adds	r0, r3, #1
 801dd42:	6010      	str	r0, [r2, #0]
 801dd44:	7019      	strb	r1, [r3, #0]
 801dd46:	4608      	mov	r0, r1
 801dd48:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dd4c:	4770      	bx	lr

0801dd4e <__sfputs_r>:
 801dd4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dd50:	4606      	mov	r6, r0
 801dd52:	460f      	mov	r7, r1
 801dd54:	4614      	mov	r4, r2
 801dd56:	18d5      	adds	r5, r2, r3
 801dd58:	42ac      	cmp	r4, r5
 801dd5a:	d101      	bne.n	801dd60 <__sfputs_r+0x12>
 801dd5c:	2000      	movs	r0, #0
 801dd5e:	e007      	b.n	801dd70 <__sfputs_r+0x22>
 801dd60:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dd64:	463a      	mov	r2, r7
 801dd66:	4630      	mov	r0, r6
 801dd68:	f7ff ffda 	bl	801dd20 <__sfputc_r>
 801dd6c:	1c43      	adds	r3, r0, #1
 801dd6e:	d1f3      	bne.n	801dd58 <__sfputs_r+0xa>
 801dd70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801dd74 <_vfiprintf_r>:
 801dd74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd78:	460d      	mov	r5, r1
 801dd7a:	b09d      	sub	sp, #116	; 0x74
 801dd7c:	4614      	mov	r4, r2
 801dd7e:	4698      	mov	r8, r3
 801dd80:	4606      	mov	r6, r0
 801dd82:	b118      	cbz	r0, 801dd8c <_vfiprintf_r+0x18>
 801dd84:	6983      	ldr	r3, [r0, #24]
 801dd86:	b90b      	cbnz	r3, 801dd8c <_vfiprintf_r+0x18>
 801dd88:	f7fe fcf2 	bl	801c770 <__sinit>
 801dd8c:	4b89      	ldr	r3, [pc, #548]	; (801dfb4 <_vfiprintf_r+0x240>)
 801dd8e:	429d      	cmp	r5, r3
 801dd90:	d11b      	bne.n	801ddca <_vfiprintf_r+0x56>
 801dd92:	6875      	ldr	r5, [r6, #4]
 801dd94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dd96:	07d9      	lsls	r1, r3, #31
 801dd98:	d405      	bmi.n	801dda6 <_vfiprintf_r+0x32>
 801dd9a:	89ab      	ldrh	r3, [r5, #12]
 801dd9c:	059a      	lsls	r2, r3, #22
 801dd9e:	d402      	bmi.n	801dda6 <_vfiprintf_r+0x32>
 801dda0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801dda2:	f7fb fc98 	bl	80196d6 <__retarget_lock_acquire_recursive>
 801dda6:	89ab      	ldrh	r3, [r5, #12]
 801dda8:	071b      	lsls	r3, r3, #28
 801ddaa:	d501      	bpl.n	801ddb0 <_vfiprintf_r+0x3c>
 801ddac:	692b      	ldr	r3, [r5, #16]
 801ddae:	b9eb      	cbnz	r3, 801ddec <_vfiprintf_r+0x78>
 801ddb0:	4629      	mov	r1, r5
 801ddb2:	4630      	mov	r0, r6
 801ddb4:	f7fd fcba 	bl	801b72c <__swsetup_r>
 801ddb8:	b1c0      	cbz	r0, 801ddec <_vfiprintf_r+0x78>
 801ddba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ddbc:	07dc      	lsls	r4, r3, #31
 801ddbe:	d50e      	bpl.n	801ddde <_vfiprintf_r+0x6a>
 801ddc0:	f04f 30ff 	mov.w	r0, #4294967295
 801ddc4:	b01d      	add	sp, #116	; 0x74
 801ddc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ddca:	4b7b      	ldr	r3, [pc, #492]	; (801dfb8 <_vfiprintf_r+0x244>)
 801ddcc:	429d      	cmp	r5, r3
 801ddce:	d101      	bne.n	801ddd4 <_vfiprintf_r+0x60>
 801ddd0:	68b5      	ldr	r5, [r6, #8]
 801ddd2:	e7df      	b.n	801dd94 <_vfiprintf_r+0x20>
 801ddd4:	4b79      	ldr	r3, [pc, #484]	; (801dfbc <_vfiprintf_r+0x248>)
 801ddd6:	429d      	cmp	r5, r3
 801ddd8:	bf08      	it	eq
 801ddda:	68f5      	ldreq	r5, [r6, #12]
 801dddc:	e7da      	b.n	801dd94 <_vfiprintf_r+0x20>
 801ddde:	89ab      	ldrh	r3, [r5, #12]
 801dde0:	0598      	lsls	r0, r3, #22
 801dde2:	d4ed      	bmi.n	801ddc0 <_vfiprintf_r+0x4c>
 801dde4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801dde6:	f7fb fc77 	bl	80196d8 <__retarget_lock_release_recursive>
 801ddea:	e7e9      	b.n	801ddc0 <_vfiprintf_r+0x4c>
 801ddec:	2300      	movs	r3, #0
 801ddee:	9309      	str	r3, [sp, #36]	; 0x24
 801ddf0:	2320      	movs	r3, #32
 801ddf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ddf6:	f8cd 800c 	str.w	r8, [sp, #12]
 801ddfa:	2330      	movs	r3, #48	; 0x30
 801ddfc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801dfc0 <_vfiprintf_r+0x24c>
 801de00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801de04:	f04f 0901 	mov.w	r9, #1
 801de08:	4623      	mov	r3, r4
 801de0a:	469a      	mov	sl, r3
 801de0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801de10:	b10a      	cbz	r2, 801de16 <_vfiprintf_r+0xa2>
 801de12:	2a25      	cmp	r2, #37	; 0x25
 801de14:	d1f9      	bne.n	801de0a <_vfiprintf_r+0x96>
 801de16:	ebba 0b04 	subs.w	fp, sl, r4
 801de1a:	d00b      	beq.n	801de34 <_vfiprintf_r+0xc0>
 801de1c:	465b      	mov	r3, fp
 801de1e:	4622      	mov	r2, r4
 801de20:	4629      	mov	r1, r5
 801de22:	4630      	mov	r0, r6
 801de24:	f7ff ff93 	bl	801dd4e <__sfputs_r>
 801de28:	3001      	adds	r0, #1
 801de2a:	f000 80aa 	beq.w	801df82 <_vfiprintf_r+0x20e>
 801de2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801de30:	445a      	add	r2, fp
 801de32:	9209      	str	r2, [sp, #36]	; 0x24
 801de34:	f89a 3000 	ldrb.w	r3, [sl]
 801de38:	2b00      	cmp	r3, #0
 801de3a:	f000 80a2 	beq.w	801df82 <_vfiprintf_r+0x20e>
 801de3e:	2300      	movs	r3, #0
 801de40:	f04f 32ff 	mov.w	r2, #4294967295
 801de44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801de48:	f10a 0a01 	add.w	sl, sl, #1
 801de4c:	9304      	str	r3, [sp, #16]
 801de4e:	9307      	str	r3, [sp, #28]
 801de50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801de54:	931a      	str	r3, [sp, #104]	; 0x68
 801de56:	4654      	mov	r4, sl
 801de58:	2205      	movs	r2, #5
 801de5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801de5e:	4858      	ldr	r0, [pc, #352]	; (801dfc0 <_vfiprintf_r+0x24c>)
 801de60:	f7e2 f9d6 	bl	8000210 <memchr>
 801de64:	9a04      	ldr	r2, [sp, #16]
 801de66:	b9d8      	cbnz	r0, 801dea0 <_vfiprintf_r+0x12c>
 801de68:	06d1      	lsls	r1, r2, #27
 801de6a:	bf44      	itt	mi
 801de6c:	2320      	movmi	r3, #32
 801de6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801de72:	0713      	lsls	r3, r2, #28
 801de74:	bf44      	itt	mi
 801de76:	232b      	movmi	r3, #43	; 0x2b
 801de78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801de7c:	f89a 3000 	ldrb.w	r3, [sl]
 801de80:	2b2a      	cmp	r3, #42	; 0x2a
 801de82:	d015      	beq.n	801deb0 <_vfiprintf_r+0x13c>
 801de84:	9a07      	ldr	r2, [sp, #28]
 801de86:	4654      	mov	r4, sl
 801de88:	2000      	movs	r0, #0
 801de8a:	f04f 0c0a 	mov.w	ip, #10
 801de8e:	4621      	mov	r1, r4
 801de90:	f811 3b01 	ldrb.w	r3, [r1], #1
 801de94:	3b30      	subs	r3, #48	; 0x30
 801de96:	2b09      	cmp	r3, #9
 801de98:	d94e      	bls.n	801df38 <_vfiprintf_r+0x1c4>
 801de9a:	b1b0      	cbz	r0, 801deca <_vfiprintf_r+0x156>
 801de9c:	9207      	str	r2, [sp, #28]
 801de9e:	e014      	b.n	801deca <_vfiprintf_r+0x156>
 801dea0:	eba0 0308 	sub.w	r3, r0, r8
 801dea4:	fa09 f303 	lsl.w	r3, r9, r3
 801dea8:	4313      	orrs	r3, r2
 801deaa:	9304      	str	r3, [sp, #16]
 801deac:	46a2      	mov	sl, r4
 801deae:	e7d2      	b.n	801de56 <_vfiprintf_r+0xe2>
 801deb0:	9b03      	ldr	r3, [sp, #12]
 801deb2:	1d19      	adds	r1, r3, #4
 801deb4:	681b      	ldr	r3, [r3, #0]
 801deb6:	9103      	str	r1, [sp, #12]
 801deb8:	2b00      	cmp	r3, #0
 801deba:	bfbb      	ittet	lt
 801debc:	425b      	neglt	r3, r3
 801debe:	f042 0202 	orrlt.w	r2, r2, #2
 801dec2:	9307      	strge	r3, [sp, #28]
 801dec4:	9307      	strlt	r3, [sp, #28]
 801dec6:	bfb8      	it	lt
 801dec8:	9204      	strlt	r2, [sp, #16]
 801deca:	7823      	ldrb	r3, [r4, #0]
 801decc:	2b2e      	cmp	r3, #46	; 0x2e
 801dece:	d10c      	bne.n	801deea <_vfiprintf_r+0x176>
 801ded0:	7863      	ldrb	r3, [r4, #1]
 801ded2:	2b2a      	cmp	r3, #42	; 0x2a
 801ded4:	d135      	bne.n	801df42 <_vfiprintf_r+0x1ce>
 801ded6:	9b03      	ldr	r3, [sp, #12]
 801ded8:	1d1a      	adds	r2, r3, #4
 801deda:	681b      	ldr	r3, [r3, #0]
 801dedc:	9203      	str	r2, [sp, #12]
 801dede:	2b00      	cmp	r3, #0
 801dee0:	bfb8      	it	lt
 801dee2:	f04f 33ff 	movlt.w	r3, #4294967295
 801dee6:	3402      	adds	r4, #2
 801dee8:	9305      	str	r3, [sp, #20]
 801deea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801dfd0 <_vfiprintf_r+0x25c>
 801deee:	7821      	ldrb	r1, [r4, #0]
 801def0:	2203      	movs	r2, #3
 801def2:	4650      	mov	r0, sl
 801def4:	f7e2 f98c 	bl	8000210 <memchr>
 801def8:	b140      	cbz	r0, 801df0c <_vfiprintf_r+0x198>
 801defa:	2340      	movs	r3, #64	; 0x40
 801defc:	eba0 000a 	sub.w	r0, r0, sl
 801df00:	fa03 f000 	lsl.w	r0, r3, r0
 801df04:	9b04      	ldr	r3, [sp, #16]
 801df06:	4303      	orrs	r3, r0
 801df08:	3401      	adds	r4, #1
 801df0a:	9304      	str	r3, [sp, #16]
 801df0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801df10:	482c      	ldr	r0, [pc, #176]	; (801dfc4 <_vfiprintf_r+0x250>)
 801df12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801df16:	2206      	movs	r2, #6
 801df18:	f7e2 f97a 	bl	8000210 <memchr>
 801df1c:	2800      	cmp	r0, #0
 801df1e:	d03f      	beq.n	801dfa0 <_vfiprintf_r+0x22c>
 801df20:	4b29      	ldr	r3, [pc, #164]	; (801dfc8 <_vfiprintf_r+0x254>)
 801df22:	bb1b      	cbnz	r3, 801df6c <_vfiprintf_r+0x1f8>
 801df24:	9b03      	ldr	r3, [sp, #12]
 801df26:	3307      	adds	r3, #7
 801df28:	f023 0307 	bic.w	r3, r3, #7
 801df2c:	3308      	adds	r3, #8
 801df2e:	9303      	str	r3, [sp, #12]
 801df30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801df32:	443b      	add	r3, r7
 801df34:	9309      	str	r3, [sp, #36]	; 0x24
 801df36:	e767      	b.n	801de08 <_vfiprintf_r+0x94>
 801df38:	fb0c 3202 	mla	r2, ip, r2, r3
 801df3c:	460c      	mov	r4, r1
 801df3e:	2001      	movs	r0, #1
 801df40:	e7a5      	b.n	801de8e <_vfiprintf_r+0x11a>
 801df42:	2300      	movs	r3, #0
 801df44:	3401      	adds	r4, #1
 801df46:	9305      	str	r3, [sp, #20]
 801df48:	4619      	mov	r1, r3
 801df4a:	f04f 0c0a 	mov.w	ip, #10
 801df4e:	4620      	mov	r0, r4
 801df50:	f810 2b01 	ldrb.w	r2, [r0], #1
 801df54:	3a30      	subs	r2, #48	; 0x30
 801df56:	2a09      	cmp	r2, #9
 801df58:	d903      	bls.n	801df62 <_vfiprintf_r+0x1ee>
 801df5a:	2b00      	cmp	r3, #0
 801df5c:	d0c5      	beq.n	801deea <_vfiprintf_r+0x176>
 801df5e:	9105      	str	r1, [sp, #20]
 801df60:	e7c3      	b.n	801deea <_vfiprintf_r+0x176>
 801df62:	fb0c 2101 	mla	r1, ip, r1, r2
 801df66:	4604      	mov	r4, r0
 801df68:	2301      	movs	r3, #1
 801df6a:	e7f0      	b.n	801df4e <_vfiprintf_r+0x1da>
 801df6c:	ab03      	add	r3, sp, #12
 801df6e:	9300      	str	r3, [sp, #0]
 801df70:	462a      	mov	r2, r5
 801df72:	4b16      	ldr	r3, [pc, #88]	; (801dfcc <_vfiprintf_r+0x258>)
 801df74:	a904      	add	r1, sp, #16
 801df76:	4630      	mov	r0, r6
 801df78:	f7fb fd70 	bl	8019a5c <_printf_float>
 801df7c:	4607      	mov	r7, r0
 801df7e:	1c78      	adds	r0, r7, #1
 801df80:	d1d6      	bne.n	801df30 <_vfiprintf_r+0x1bc>
 801df82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801df84:	07d9      	lsls	r1, r3, #31
 801df86:	d405      	bmi.n	801df94 <_vfiprintf_r+0x220>
 801df88:	89ab      	ldrh	r3, [r5, #12]
 801df8a:	059a      	lsls	r2, r3, #22
 801df8c:	d402      	bmi.n	801df94 <_vfiprintf_r+0x220>
 801df8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801df90:	f7fb fba2 	bl	80196d8 <__retarget_lock_release_recursive>
 801df94:	89ab      	ldrh	r3, [r5, #12]
 801df96:	065b      	lsls	r3, r3, #25
 801df98:	f53f af12 	bmi.w	801ddc0 <_vfiprintf_r+0x4c>
 801df9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801df9e:	e711      	b.n	801ddc4 <_vfiprintf_r+0x50>
 801dfa0:	ab03      	add	r3, sp, #12
 801dfa2:	9300      	str	r3, [sp, #0]
 801dfa4:	462a      	mov	r2, r5
 801dfa6:	4b09      	ldr	r3, [pc, #36]	; (801dfcc <_vfiprintf_r+0x258>)
 801dfa8:	a904      	add	r1, sp, #16
 801dfaa:	4630      	mov	r0, r6
 801dfac:	f7fb fffa 	bl	8019fa4 <_printf_i>
 801dfb0:	e7e4      	b.n	801df7c <_vfiprintf_r+0x208>
 801dfb2:	bf00      	nop
 801dfb4:	08020384 	.word	0x08020384
 801dfb8:	080203a4 	.word	0x080203a4
 801dfbc:	08020364 	.word	0x08020364
 801dfc0:	0802059c 	.word	0x0802059c
 801dfc4:	080205a6 	.word	0x080205a6
 801dfc8:	08019a5d 	.word	0x08019a5d
 801dfcc:	0801dd4f 	.word	0x0801dd4f
 801dfd0:	080205a2 	.word	0x080205a2
 801dfd4:	00000000 	.word	0x00000000

0801dfd8 <nan>:
 801dfd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801dfe0 <nan+0x8>
 801dfdc:	4770      	bx	lr
 801dfde:	bf00      	nop
 801dfe0:	00000000 	.word	0x00000000
 801dfe4:	7ff80000 	.word	0x7ff80000

0801dfe8 <__sread>:
 801dfe8:	b510      	push	{r4, lr}
 801dfea:	460c      	mov	r4, r1
 801dfec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dff0:	f000 f8ec 	bl	801e1cc <_read_r>
 801dff4:	2800      	cmp	r0, #0
 801dff6:	bfab      	itete	ge
 801dff8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801dffa:	89a3      	ldrhlt	r3, [r4, #12]
 801dffc:	181b      	addge	r3, r3, r0
 801dffe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e002:	bfac      	ite	ge
 801e004:	6563      	strge	r3, [r4, #84]	; 0x54
 801e006:	81a3      	strhlt	r3, [r4, #12]
 801e008:	bd10      	pop	{r4, pc}

0801e00a <__swrite>:
 801e00a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e00e:	461f      	mov	r7, r3
 801e010:	898b      	ldrh	r3, [r1, #12]
 801e012:	05db      	lsls	r3, r3, #23
 801e014:	4605      	mov	r5, r0
 801e016:	460c      	mov	r4, r1
 801e018:	4616      	mov	r6, r2
 801e01a:	d505      	bpl.n	801e028 <__swrite+0x1e>
 801e01c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e020:	2302      	movs	r3, #2
 801e022:	2200      	movs	r2, #0
 801e024:	f000 f890 	bl	801e148 <_lseek_r>
 801e028:	89a3      	ldrh	r3, [r4, #12]
 801e02a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e02e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e032:	81a3      	strh	r3, [r4, #12]
 801e034:	4632      	mov	r2, r6
 801e036:	463b      	mov	r3, r7
 801e038:	4628      	mov	r0, r5
 801e03a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e03e:	f000 b837 	b.w	801e0b0 <_write_r>

0801e042 <__sseek>:
 801e042:	b510      	push	{r4, lr}
 801e044:	460c      	mov	r4, r1
 801e046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e04a:	f000 f87d 	bl	801e148 <_lseek_r>
 801e04e:	1c43      	adds	r3, r0, #1
 801e050:	89a3      	ldrh	r3, [r4, #12]
 801e052:	bf15      	itete	ne
 801e054:	6560      	strne	r0, [r4, #84]	; 0x54
 801e056:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e05a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e05e:	81a3      	strheq	r3, [r4, #12]
 801e060:	bf18      	it	ne
 801e062:	81a3      	strhne	r3, [r4, #12]
 801e064:	bd10      	pop	{r4, pc}

0801e066 <__sclose>:
 801e066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e06a:	f000 b83b 	b.w	801e0e4 <_close_r>

0801e06e <strncmp>:
 801e06e:	b510      	push	{r4, lr}
 801e070:	b17a      	cbz	r2, 801e092 <strncmp+0x24>
 801e072:	4603      	mov	r3, r0
 801e074:	3901      	subs	r1, #1
 801e076:	1884      	adds	r4, r0, r2
 801e078:	f813 0b01 	ldrb.w	r0, [r3], #1
 801e07c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801e080:	4290      	cmp	r0, r2
 801e082:	d101      	bne.n	801e088 <strncmp+0x1a>
 801e084:	42a3      	cmp	r3, r4
 801e086:	d101      	bne.n	801e08c <strncmp+0x1e>
 801e088:	1a80      	subs	r0, r0, r2
 801e08a:	bd10      	pop	{r4, pc}
 801e08c:	2800      	cmp	r0, #0
 801e08e:	d1f3      	bne.n	801e078 <strncmp+0xa>
 801e090:	e7fa      	b.n	801e088 <strncmp+0x1a>
 801e092:	4610      	mov	r0, r2
 801e094:	e7f9      	b.n	801e08a <strncmp+0x1c>

0801e096 <__ascii_wctomb>:
 801e096:	b149      	cbz	r1, 801e0ac <__ascii_wctomb+0x16>
 801e098:	2aff      	cmp	r2, #255	; 0xff
 801e09a:	bf85      	ittet	hi
 801e09c:	238a      	movhi	r3, #138	; 0x8a
 801e09e:	6003      	strhi	r3, [r0, #0]
 801e0a0:	700a      	strbls	r2, [r1, #0]
 801e0a2:	f04f 30ff 	movhi.w	r0, #4294967295
 801e0a6:	bf98      	it	ls
 801e0a8:	2001      	movls	r0, #1
 801e0aa:	4770      	bx	lr
 801e0ac:	4608      	mov	r0, r1
 801e0ae:	4770      	bx	lr

0801e0b0 <_write_r>:
 801e0b0:	b538      	push	{r3, r4, r5, lr}
 801e0b2:	4d07      	ldr	r5, [pc, #28]	; (801e0d0 <_write_r+0x20>)
 801e0b4:	4604      	mov	r4, r0
 801e0b6:	4608      	mov	r0, r1
 801e0b8:	4611      	mov	r1, r2
 801e0ba:	2200      	movs	r2, #0
 801e0bc:	602a      	str	r2, [r5, #0]
 801e0be:	461a      	mov	r2, r3
 801e0c0:	f7e4 fcb3 	bl	8002a2a <_write>
 801e0c4:	1c43      	adds	r3, r0, #1
 801e0c6:	d102      	bne.n	801e0ce <_write_r+0x1e>
 801e0c8:	682b      	ldr	r3, [r5, #0]
 801e0ca:	b103      	cbz	r3, 801e0ce <_write_r+0x1e>
 801e0cc:	6023      	str	r3, [r4, #0]
 801e0ce:	bd38      	pop	{r3, r4, r5, pc}
 801e0d0:	2000257c 	.word	0x2000257c

0801e0d4 <abort>:
 801e0d4:	b508      	push	{r3, lr}
 801e0d6:	2006      	movs	r0, #6
 801e0d8:	f000 f8b2 	bl	801e240 <raise>
 801e0dc:	2001      	movs	r0, #1
 801e0de:	f7e4 fc7d 	bl	80029dc <_exit>
	...

0801e0e4 <_close_r>:
 801e0e4:	b538      	push	{r3, r4, r5, lr}
 801e0e6:	4d06      	ldr	r5, [pc, #24]	; (801e100 <_close_r+0x1c>)
 801e0e8:	2300      	movs	r3, #0
 801e0ea:	4604      	mov	r4, r0
 801e0ec:	4608      	mov	r0, r1
 801e0ee:	602b      	str	r3, [r5, #0]
 801e0f0:	f7e4 fcb7 	bl	8002a62 <_close>
 801e0f4:	1c43      	adds	r3, r0, #1
 801e0f6:	d102      	bne.n	801e0fe <_close_r+0x1a>
 801e0f8:	682b      	ldr	r3, [r5, #0]
 801e0fa:	b103      	cbz	r3, 801e0fe <_close_r+0x1a>
 801e0fc:	6023      	str	r3, [r4, #0]
 801e0fe:	bd38      	pop	{r3, r4, r5, pc}
 801e100:	2000257c 	.word	0x2000257c

0801e104 <_fstat_r>:
 801e104:	b538      	push	{r3, r4, r5, lr}
 801e106:	4d07      	ldr	r5, [pc, #28]	; (801e124 <_fstat_r+0x20>)
 801e108:	2300      	movs	r3, #0
 801e10a:	4604      	mov	r4, r0
 801e10c:	4608      	mov	r0, r1
 801e10e:	4611      	mov	r1, r2
 801e110:	602b      	str	r3, [r5, #0]
 801e112:	f7e4 fcb2 	bl	8002a7a <_fstat>
 801e116:	1c43      	adds	r3, r0, #1
 801e118:	d102      	bne.n	801e120 <_fstat_r+0x1c>
 801e11a:	682b      	ldr	r3, [r5, #0]
 801e11c:	b103      	cbz	r3, 801e120 <_fstat_r+0x1c>
 801e11e:	6023      	str	r3, [r4, #0]
 801e120:	bd38      	pop	{r3, r4, r5, pc}
 801e122:	bf00      	nop
 801e124:	2000257c 	.word	0x2000257c

0801e128 <_isatty_r>:
 801e128:	b538      	push	{r3, r4, r5, lr}
 801e12a:	4d06      	ldr	r5, [pc, #24]	; (801e144 <_isatty_r+0x1c>)
 801e12c:	2300      	movs	r3, #0
 801e12e:	4604      	mov	r4, r0
 801e130:	4608      	mov	r0, r1
 801e132:	602b      	str	r3, [r5, #0]
 801e134:	f7e4 fcb1 	bl	8002a9a <_isatty>
 801e138:	1c43      	adds	r3, r0, #1
 801e13a:	d102      	bne.n	801e142 <_isatty_r+0x1a>
 801e13c:	682b      	ldr	r3, [r5, #0]
 801e13e:	b103      	cbz	r3, 801e142 <_isatty_r+0x1a>
 801e140:	6023      	str	r3, [r4, #0]
 801e142:	bd38      	pop	{r3, r4, r5, pc}
 801e144:	2000257c 	.word	0x2000257c

0801e148 <_lseek_r>:
 801e148:	b538      	push	{r3, r4, r5, lr}
 801e14a:	4d07      	ldr	r5, [pc, #28]	; (801e168 <_lseek_r+0x20>)
 801e14c:	4604      	mov	r4, r0
 801e14e:	4608      	mov	r0, r1
 801e150:	4611      	mov	r1, r2
 801e152:	2200      	movs	r2, #0
 801e154:	602a      	str	r2, [r5, #0]
 801e156:	461a      	mov	r2, r3
 801e158:	f7e4 fcaa 	bl	8002ab0 <_lseek>
 801e15c:	1c43      	adds	r3, r0, #1
 801e15e:	d102      	bne.n	801e166 <_lseek_r+0x1e>
 801e160:	682b      	ldr	r3, [r5, #0]
 801e162:	b103      	cbz	r3, 801e166 <_lseek_r+0x1e>
 801e164:	6023      	str	r3, [r4, #0]
 801e166:	bd38      	pop	{r3, r4, r5, pc}
 801e168:	2000257c 	.word	0x2000257c

0801e16c <_realloc_r>:
 801e16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e170:	4680      	mov	r8, r0
 801e172:	4614      	mov	r4, r2
 801e174:	460e      	mov	r6, r1
 801e176:	b921      	cbnz	r1, 801e182 <_realloc_r+0x16>
 801e178:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e17c:	4611      	mov	r1, r2
 801e17e:	f7fb bb59 	b.w	8019834 <_malloc_r>
 801e182:	b92a      	cbnz	r2, 801e190 <_realloc_r+0x24>
 801e184:	f7fb faea 	bl	801975c <_free_r>
 801e188:	4625      	mov	r5, r4
 801e18a:	4628      	mov	r0, r5
 801e18c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e190:	f000 f872 	bl	801e278 <_malloc_usable_size_r>
 801e194:	4284      	cmp	r4, r0
 801e196:	4607      	mov	r7, r0
 801e198:	d802      	bhi.n	801e1a0 <_realloc_r+0x34>
 801e19a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801e19e:	d812      	bhi.n	801e1c6 <_realloc_r+0x5a>
 801e1a0:	4621      	mov	r1, r4
 801e1a2:	4640      	mov	r0, r8
 801e1a4:	f7fb fb46 	bl	8019834 <_malloc_r>
 801e1a8:	4605      	mov	r5, r0
 801e1aa:	2800      	cmp	r0, #0
 801e1ac:	d0ed      	beq.n	801e18a <_realloc_r+0x1e>
 801e1ae:	42bc      	cmp	r4, r7
 801e1b0:	4622      	mov	r2, r4
 801e1b2:	4631      	mov	r1, r6
 801e1b4:	bf28      	it	cs
 801e1b6:	463a      	movcs	r2, r7
 801e1b8:	f7fb faa0 	bl	80196fc <memcpy>
 801e1bc:	4631      	mov	r1, r6
 801e1be:	4640      	mov	r0, r8
 801e1c0:	f7fb facc 	bl	801975c <_free_r>
 801e1c4:	e7e1      	b.n	801e18a <_realloc_r+0x1e>
 801e1c6:	4635      	mov	r5, r6
 801e1c8:	e7df      	b.n	801e18a <_realloc_r+0x1e>
	...

0801e1cc <_read_r>:
 801e1cc:	b538      	push	{r3, r4, r5, lr}
 801e1ce:	4d07      	ldr	r5, [pc, #28]	; (801e1ec <_read_r+0x20>)
 801e1d0:	4604      	mov	r4, r0
 801e1d2:	4608      	mov	r0, r1
 801e1d4:	4611      	mov	r1, r2
 801e1d6:	2200      	movs	r2, #0
 801e1d8:	602a      	str	r2, [r5, #0]
 801e1da:	461a      	mov	r2, r3
 801e1dc:	f7e4 fc08 	bl	80029f0 <_read>
 801e1e0:	1c43      	adds	r3, r0, #1
 801e1e2:	d102      	bne.n	801e1ea <_read_r+0x1e>
 801e1e4:	682b      	ldr	r3, [r5, #0]
 801e1e6:	b103      	cbz	r3, 801e1ea <_read_r+0x1e>
 801e1e8:	6023      	str	r3, [r4, #0]
 801e1ea:	bd38      	pop	{r3, r4, r5, pc}
 801e1ec:	2000257c 	.word	0x2000257c

0801e1f0 <_raise_r>:
 801e1f0:	291f      	cmp	r1, #31
 801e1f2:	b538      	push	{r3, r4, r5, lr}
 801e1f4:	4604      	mov	r4, r0
 801e1f6:	460d      	mov	r5, r1
 801e1f8:	d904      	bls.n	801e204 <_raise_r+0x14>
 801e1fa:	2316      	movs	r3, #22
 801e1fc:	6003      	str	r3, [r0, #0]
 801e1fe:	f04f 30ff 	mov.w	r0, #4294967295
 801e202:	bd38      	pop	{r3, r4, r5, pc}
 801e204:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e206:	b112      	cbz	r2, 801e20e <_raise_r+0x1e>
 801e208:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e20c:	b94b      	cbnz	r3, 801e222 <_raise_r+0x32>
 801e20e:	4620      	mov	r0, r4
 801e210:	f000 f830 	bl	801e274 <_getpid_r>
 801e214:	462a      	mov	r2, r5
 801e216:	4601      	mov	r1, r0
 801e218:	4620      	mov	r0, r4
 801e21a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e21e:	f000 b817 	b.w	801e250 <_kill_r>
 801e222:	2b01      	cmp	r3, #1
 801e224:	d00a      	beq.n	801e23c <_raise_r+0x4c>
 801e226:	1c59      	adds	r1, r3, #1
 801e228:	d103      	bne.n	801e232 <_raise_r+0x42>
 801e22a:	2316      	movs	r3, #22
 801e22c:	6003      	str	r3, [r0, #0]
 801e22e:	2001      	movs	r0, #1
 801e230:	e7e7      	b.n	801e202 <_raise_r+0x12>
 801e232:	2400      	movs	r4, #0
 801e234:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e238:	4628      	mov	r0, r5
 801e23a:	4798      	blx	r3
 801e23c:	2000      	movs	r0, #0
 801e23e:	e7e0      	b.n	801e202 <_raise_r+0x12>

0801e240 <raise>:
 801e240:	4b02      	ldr	r3, [pc, #8]	; (801e24c <raise+0xc>)
 801e242:	4601      	mov	r1, r0
 801e244:	6818      	ldr	r0, [r3, #0]
 801e246:	f7ff bfd3 	b.w	801e1f0 <_raise_r>
 801e24a:	bf00      	nop
 801e24c:	20000140 	.word	0x20000140

0801e250 <_kill_r>:
 801e250:	b538      	push	{r3, r4, r5, lr}
 801e252:	4d07      	ldr	r5, [pc, #28]	; (801e270 <_kill_r+0x20>)
 801e254:	2300      	movs	r3, #0
 801e256:	4604      	mov	r4, r0
 801e258:	4608      	mov	r0, r1
 801e25a:	4611      	mov	r1, r2
 801e25c:	602b      	str	r3, [r5, #0]
 801e25e:	f7e4 fbad 	bl	80029bc <_kill>
 801e262:	1c43      	adds	r3, r0, #1
 801e264:	d102      	bne.n	801e26c <_kill_r+0x1c>
 801e266:	682b      	ldr	r3, [r5, #0]
 801e268:	b103      	cbz	r3, 801e26c <_kill_r+0x1c>
 801e26a:	6023      	str	r3, [r4, #0]
 801e26c:	bd38      	pop	{r3, r4, r5, pc}
 801e26e:	bf00      	nop
 801e270:	2000257c 	.word	0x2000257c

0801e274 <_getpid_r>:
 801e274:	f7e4 bb9a 	b.w	80029ac <_getpid>

0801e278 <_malloc_usable_size_r>:
 801e278:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e27c:	1f18      	subs	r0, r3, #4
 801e27e:	2b00      	cmp	r3, #0
 801e280:	bfbc      	itt	lt
 801e282:	580b      	ldrlt	r3, [r1, r0]
 801e284:	18c0      	addlt	r0, r0, r3
 801e286:	4770      	bx	lr

0801e288 <_init>:
 801e288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e28a:	bf00      	nop
 801e28c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e28e:	bc08      	pop	{r3}
 801e290:	469e      	mov	lr, r3
 801e292:	4770      	bx	lr

0801e294 <_fini>:
 801e294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e296:	bf00      	nop
 801e298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e29a:	bc08      	pop	{r3}
 801e29c:	469e      	mov	lr, r3
 801e29e:	4770      	bx	lr
