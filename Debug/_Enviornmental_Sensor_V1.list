
_Enviornmental_Sensor_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f8c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002318  0801fa60  0801fa60  0002fa60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021d78  08021d78  00040314  2**0
                  CONTENTS
  4 .ARM          00000008  08021d78  08021d78  00031d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021d80  08021d80  00040314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021d80  08021d80  00031d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021d84  08021d84  00031d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000314  20000000  08021d88  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003304  20000314  0802209c  00040314  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003618  0802209c  00043618  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040314  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003793d  00000000  00000000  00040344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008123  00000000  00000000  00077c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002dd8  00000000  00000000  0007fda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002a98  00000000  00000000  00082b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002580f  00000000  00000000  00085618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003e925  00000000  00000000  000aae27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b358b  00000000  00000000  000e974c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019ccd7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d628  00000000  00000000  0019cd28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000314 	.word	0x20000314
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801fa48 	.word	0x0801fa48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000318 	.word	0x20000318
 80001dc:	0801fa48 	.word	0x0801fa48

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <setSoftPWM>:
#define battery_Low  2.43f
#define battery_very_low 2.25f

#define lengthSoftPWMbuffer 1000
uint32_t dataA[lengthSoftPWMbuffer];
static void setSoftPWM(uint16_t pin, uint32_t duty, uint32_t *softpwmbuffer) {
 8001028:	b480      	push	{r7}
 800102a:	b087      	sub	sp, #28
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	81fb      	strh	r3, [r7, #14]
	for (uint32_t i = 0; i < lengthSoftPWMbuffer; ++i) {
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	e03d      	b.n	80010b8 <setSoftPWM+0x90>
		if (i < duty) { //set pin
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	429a      	cmp	r2, r3
 8001042:	d21b      	bcs.n	800107c <setSoftPWM+0x54>
			softpwmbuffer[i] &= (uint32_t) ~(pin << 16);
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	4413      	add	r3, r2
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	89fb      	ldrh	r3, [r7, #14]
 8001050:	041b      	lsls	r3, r3, #16
 8001052:	43db      	mvns	r3, r3
 8001054:	4618      	mov	r0, r3
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	440b      	add	r3, r1
 800105e:	4002      	ands	r2, r0
 8001060:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i] |= (uint32_t) pin;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	6819      	ldr	r1, [r3, #0]
 800106c:	89fa      	ldrh	r2, [r7, #14]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	4403      	add	r3, r0
 8001076:	430a      	orrs	r2, r1
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	e01a      	b.n	80010b2 <setSoftPWM+0x8a>
		} else { //reset pin
			softpwmbuffer[i] &= (uint32_t) ~(pin);
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	4413      	add	r3, r2
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	89fb      	ldrh	r3, [r7, #14]
 8001088:	43db      	mvns	r3, r3
 800108a:	4618      	mov	r0, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	440b      	add	r3, r1
 8001094:	4002      	ands	r2, r0
 8001096:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i] |= (uint32_t) pin << 16;
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	4413      	add	r3, r2
 80010a0:	6819      	ldr	r1, [r3, #0]
 80010a2:	89fb      	ldrh	r3, [r7, #14]
 80010a4:	041a      	lsls	r2, r3, #16
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	4403      	add	r3, r0
 80010ae:	430a      	orrs	r2, r1
 80010b0:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < lengthSoftPWMbuffer; ++i) {
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	3301      	adds	r3, #1
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010be:	d3bd      	bcc.n	800103c <setSoftPWM+0x14>
		}
	}

}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	371c      	adds	r7, #28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <pir_interrupt>:

uint32_t usb_time_ = 50000;
uint32_t prev_usb_time_ = 0;

//##############Interrupts###############
void pir_interrupt() {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	debug_pir_motion = 1;
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <pir_interrupt+0x2c>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 80010da:	2101      	movs	r1, #1
 80010dc:	4808      	ldr	r0, [pc, #32]	; (8001100 <pir_interrupt+0x30>)
 80010de:	f004 f9c7 	bl	8005470 <HAL_GPIO_ReadPin>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <pir_interrupt+0x20>
		pir_motion_flag = 1;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <pir_interrupt+0x34>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	701a      	strb	r2, [r3, #0]
	} else {
		pir_motion_flag = 0;
	}
}
 80010ee:	e002      	b.n	80010f6 <pir_interrupt+0x26>
		pir_motion_flag = 0;
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <pir_interrupt+0x34>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200014b9 	.word	0x200014b9
 8001100:	40020000 	.word	0x40020000
 8001104:	200014b8 	.word	0x200014b8

08001108 <timer_interrupt>:

void timer_interrupt() {
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	time_keep = time_keep + 1;
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <timer_interrupt+0x2c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	3301      	adds	r3, #1
 8001112:	4a08      	ldr	r2, [pc, #32]	; (8001134 <timer_interrupt+0x2c>)
 8001114:	6013      	str	r3, [r2, #0]
	if (time_keep > 65535) {
 8001116:	4b07      	ldr	r3, [pc, #28]	; (8001134 <timer_interrupt+0x2c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800111e:	d302      	bcc.n	8001126 <timer_interrupt+0x1e>
		time_keep = 0;
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <timer_interrupt+0x2c>)
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
//
//	if(!save_param && !start_usb_timer)//if both are off and for some reason timer is still on we shut it down
//	{
//		HAL_TIM_Base_Stop_IT(&htim2);
//	}
	prev_sleep_time = HAL_GetTick();
 8001126:	f002 f9d7 	bl	80034d8 <HAL_GetTick>
 800112a:	4603      	mov	r3, r0
 800112c:	4a02      	ldr	r2, [pc, #8]	; (8001138 <timer_interrupt+0x30>)
 800112e:	6013      	str	r3, [r2, #0]
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200014ac 	.word	0x200014ac
 8001138:	200016f0 	.word	0x200016f0

0800113c <power_off_detect>:

void power_off_detect() {
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
 if(!HAL_GPIO_ReadPin(SW_DET_GPIO_Port,SW_DET_Pin))
 8001140:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001144:	4802      	ldr	r0, [pc, #8]	; (8001150 <power_off_detect+0x14>)
 8001146:	f004 f993 	bl	8005470 <HAL_GPIO_ReadPin>
 {
	//_RunTime_Packet.pwr_off_det = 1;
 }
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40020000 	.word	0x40020000

08001154 <MX_DMA_Init>:

//######################################

static void MX_DMA_Init(void)
 {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
	  /* DMA controller clock enable */
	  __HAL_RCC_DMA2_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <MX_DMA_Init+0x3c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a0b      	ldr	r2, [pc, #44]	; (8001190 <MX_DMA_Init+0x3c>)
 8001164:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <MX_DMA_Init+0x3c>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]

	  /* DMA interrupt init */
	  /* DMA2_Stream5_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2100      	movs	r1, #0
 800117a:	2044      	movs	r0, #68	; 0x44
 800117c:	f002 ff8f 	bl	800409e <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001180:	2044      	movs	r0, #68	; 0x44
 8001182:	f002 ffa8 	bl	80040d6 <HAL_NVIC_EnableIRQ>

 }
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800

08001194 <pwr_off_detected>:

static void pwr_off_detected()
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	if(_RunTime_Packet.pwr_off_det)
 8001198:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <pwr_off_detected+0x30>)
 800119a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d00d      	beq.n	80011be <pwr_off_detected+0x2a>
	{
		_RunTime_Packet.pwr_off_det = 0;
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <pwr_off_detected+0x30>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        BLUE_LED_PWM(900);
 80011aa:	4a07      	ldr	r2, [pc, #28]	; (80011c8 <pwr_off_detected+0x34>)
 80011ac:	f44f 7161 	mov.w	r1, #900	; 0x384
 80011b0:	2008      	movs	r0, #8
 80011b2:	f7ff ff39 	bl	8001028 <setSoftPWM>
		HAL_Delay(5000);
 80011b6:	f241 3088 	movw	r0, #5000	; 0x1388
 80011ba:	f002 f999 	bl	80034f0 <HAL_Delay>

	}
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2000146c 	.word	0x2000146c
 80011c8:	20000330 	.word	0x20000330

080011cc <clock_speed_slow>:
/*
 * setting clock speed to 250khz
 */
static void clock_speed_slow() {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b094      	sub	sp, #80	; 0x50
 80011d0:	af00      	add	r7, sp, #0
//
//	/* Disable PLL */
//	RCC->CR &= ~RCC_CR_PLLON;

//we will set clock speed to 250khz
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80011d2:	f107 0320 	add.w	r3, r7, #32
 80011d6:	2230      	movs	r2, #48	; 0x30
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f019 fe94 	bl	801af08 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80011f0:	2300      	movs	r3, #0
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	4b24      	ldr	r3, [pc, #144]	; (8001288 <clock_speed_slow+0xbc>)
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	4a23      	ldr	r2, [pc, #140]	; (8001288 <clock_speed_slow+0xbc>)
 80011fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001200:	4b21      	ldr	r3, [pc, #132]	; (8001288 <clock_speed_slow+0xbc>)
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800120c:	2300      	movs	r3, #0
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	4b1e      	ldr	r3, [pc, #120]	; (800128c <clock_speed_slow+0xc0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001218:	4a1c      	ldr	r2, [pc, #112]	; (800128c <clock_speed_slow+0xc0>)
 800121a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	4b1a      	ldr	r3, [pc, #104]	; (800128c <clock_speed_slow+0xc0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800122c:	2306      	movs	r3, #6
 800122e:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001230:	2301      	movs	r3, #1
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001234:	2301      	movs	r3, #1
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001238:	2310      	movs	r3, #16
 800123a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800123c:	2300      	movs	r3, #0
 800123e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001240:	f107 0320 	add.w	r3, r7, #32
 8001244:	4618      	mov	r0, r3
 8001246:	f006 fd9d 	bl	8007d84 <HAL_RCC_OscConfig>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <clock_speed_slow+0x88>
		Error_Handler();
 8001250:	f001 fc04 	bl	8002a5c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001254:	230f      	movs	r3, #15
 8001256:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001258:	2300      	movs	r3, #0
 800125a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV64;
 800125c:	23c0      	movs	r3, #192	; 0xc0
 800125e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001260:	2300      	movs	r3, #0
 8001262:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f007 f800 	bl	8008274 <HAL_RCC_ClockConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <clock_speed_slow+0xb2>
		Error_Handler();
 800127a:	f001 fbef 	bl	8002a5c <Error_Handler>
	}

}
 800127e:	bf00      	nop
 8001280:	3750      	adds	r7, #80	; 0x50
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800
 800128c:	40007000 	.word	0x40007000

08001290 <clock_speed_high>:

/**
 * setting clock speed to 84Mhz
 */
static void clock_speed_high() {
 8001290:	b580      	push	{r7, lr}
 8001292:	b094      	sub	sp, #80	; 0x50
 8001294:	af00      	add	r7, sp, #0
	//we will set clock speed to 84Mhz
	uint16_t timeout;

	/* Enable HSI clock */
	RCC->CR |= RCC_CR_HSION;
 8001296:	4b45      	ldr	r3, [pc, #276]	; (80013ac <clock_speed_high+0x11c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a44      	ldr	r2, [pc, #272]	; (80013ac <clock_speed_high+0x11c>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6013      	str	r3, [r2, #0]

	/* Wait till HSI is ready */
	timeout = 0xFFFF;
 80012a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012a6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	while (!(RCC->CR & RCC_CR_HSIRDY) && timeout--)
 80012aa:	bf00      	nop
 80012ac:	4b3f      	ldr	r3, [pc, #252]	; (80013ac <clock_speed_high+0x11c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d106      	bne.n	80012c6 <clock_speed_high+0x36>
 80012b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80012bc:	1e5a      	subs	r2, r3, #1
 80012be:	f8a7 204e 	strh.w	r2, [r7, #78]	; 0x4e
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f2      	bne.n	80012ac <clock_speed_high+0x1c>
		;

	/* Select HSI clock as main clock */
	RCC->CFGR = (RCC->CFGR & ~(RCC_CFGR_SW)) | RCC_CFGR_SW_HSI;
 80012c6:	4b39      	ldr	r3, [pc, #228]	; (80013ac <clock_speed_high+0x11c>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	4a38      	ldr	r2, [pc, #224]	; (80013ac <clock_speed_high+0x11c>)
 80012cc:	f023 0303 	bic.w	r3, r3, #3
 80012d0:	6093      	str	r3, [r2, #8]

	/* Disable PLL */
	RCC->CR &= ~RCC_CR_PLLON;
 80012d2:	4b36      	ldr	r3, [pc, #216]	; (80013ac <clock_speed_high+0x11c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a35      	ldr	r2, [pc, #212]	; (80013ac <clock_speed_high+0x11c>)
 80012d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012dc:	6013      	str	r3, [r2, #0]

	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80012de:	f107 031c 	add.w	r3, r7, #28
 80012e2:	2230      	movs	r2, #48	; 0x30
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f019 fe0e 	bl	801af08 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80012ec:	f107 0308 	add.w	r3, r7, #8
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80012fc:	2300      	movs	r3, #0
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <clock_speed_high+0x11c>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	4a29      	ldr	r2, [pc, #164]	; (80013ac <clock_speed_high+0x11c>)
 8001306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800130a:	6413      	str	r3, [r2, #64]	; 0x40
 800130c:	4b27      	ldr	r3, [pc, #156]	; (80013ac <clock_speed_high+0x11c>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001318:	2300      	movs	r3, #0
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <clock_speed_high+0x120>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001324:	4a22      	ldr	r2, [pc, #136]	; (80013b0 <clock_speed_high+0x120>)
 8001326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <clock_speed_high+0x120>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
 8001338:	2305      	movs	r3, #5
 800133a:	61fb      	str	r3, [r7, #28]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800133c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001340:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001342:	2301      	movs	r3, #1
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001346:	2302      	movs	r3, #2
 8001348:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800134a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800134e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 25;
 8001350:	2319      	movs	r3, #25
 8001352:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001354:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001358:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800135a:	2304      	movs	r3, #4
 800135c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800135e:	2307      	movs	r3, #7
 8001360:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4618      	mov	r0, r3
 8001368:	f006 fd0c 	bl	8007d84 <HAL_RCC_OscConfig>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <clock_speed_high+0xe6>
		Error_Handler();
 8001372:	f001 fb73 	bl	8002a5c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001376:	230f      	movs	r3, #15
 8001378:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800137a:	2302      	movs	r3, #2
 800137c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001386:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001388:	2300      	movs	r3, #0
 800138a:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800138c:	f107 0308 	add.w	r3, r7, #8
 8001390:	2102      	movs	r1, #2
 8001392:	4618      	mov	r0, r3
 8001394:	f006 ff6e 	bl	8008274 <HAL_RCC_ClockConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <clock_speed_high+0x112>
		Error_Handler();
 800139e:	f001 fb5d 	bl	8002a5c <Error_Handler>
	}

}
 80013a2:	bf00      	nop
 80013a4:	3750      	adds	r7, #80	; 0x50
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40007000 	.word	0x40007000

080013b4 <load_param>:
/*
 * we check if there is anything stored inside internal flash
 * if nothing in available then we store our default values
 * else we take the values stroed inside the flash
 */
static void load_param() {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0

	Flash_Packet *ipFlaPar;
	ipFlaPar = (Flash_Packet*) Address_Mem;
 80013ba:	4b1c      	ldr	r3, [pc, #112]	; (800142c <load_param+0x78>)
 80013bc:	607b      	str	r3, [r7, #4]

	if (ipFlaPar->valid_pattern == m_Flash_Packet.valid_pattern) // 1. Sentence, pattern valid ?
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f8b3 3195 	ldrh.w	r3, [r3, #405]	; 0x195
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	f44f 52c2 	mov.w	r2, #6208	; 0x1840
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d109      	bne.n	80013e2 <load_param+0x2e>
			{
		memcpy(&_Flash_Packet, ipFlaPar, sizeof(Flash_Packet));
 80013ce:	4a18      	ldr	r2, [pc, #96]	; (8001430 <load_param+0x7c>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	f240 1397 	movw	r3, #407	; 0x197
 80013da:	461a      	mov	r2, r3
 80013dc:	f019 fd6c 	bl	801aeb8 <memcpy>
 80013e0:	e008      	b.n	80013f4 <load_param+0x40>
	}

	else //load default param
	{
		memcpy(&_Flash_Packet, &m_Flash_Packet, sizeof(Flash_Packet));
 80013e2:	4a13      	ldr	r2, [pc, #76]	; (8001430 <load_param+0x7c>)
 80013e4:	4b13      	ldr	r3, [pc, #76]	; (8001434 <load_param+0x80>)
 80013e6:	4610      	mov	r0, r2
 80013e8:	4619      	mov	r1, r3
 80013ea:	f240 1397 	movw	r3, #407	; 0x197
 80013ee:	461a      	mov	r2, r3
 80013f0:	f019 fd62 	bl	801aeb8 <memcpy>
	}

	if (strstr(_Flash_Packet.File_Format, ".CSV")) {
 80013f4:	4910      	ldr	r1, [pc, #64]	; (8001438 <load_param+0x84>)
 80013f6:	4811      	ldr	r0, [pc, #68]	; (800143c <load_param+0x88>)
 80013f8:	f01a fdc1 	bl	801bf7e <strstr>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d004      	beq.n	800140c <load_param+0x58>
		_RunTime_Packet.fileformat_selection = 1;
 8001402:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <load_param+0x8c>)
 8001404:	2201      	movs	r2, #1
 8001406:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	} else if (strstr(_Flash_Packet.File_Format, ".JSON")) {
		_RunTime_Packet.fileformat_selection = 0;
	}

}
 800140a:	e00a      	b.n	8001422 <load_param+0x6e>
	} else if (strstr(_Flash_Packet.File_Format, ".JSON")) {
 800140c:	490d      	ldr	r1, [pc, #52]	; (8001444 <load_param+0x90>)
 800140e:	480b      	ldr	r0, [pc, #44]	; (800143c <load_param+0x88>)
 8001410:	f01a fdb5 	bl	801bf7e <strstr>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <load_param+0x6e>
		_RunTime_Packet.fileformat_selection = 0;
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <load_param+0x8c>)
 800141c:	2200      	movs	r2, #0
 800141e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	08060000 	.word	0x08060000
 8001430:	200012d4 	.word	0x200012d4
 8001434:	08021230 	.word	0x08021230
 8001438:	0801fa60 	.word	0x0801fa60
 800143c:	20001338 	.word	0x20001338
 8001440:	2000146c 	.word	0x2000146c
 8001444:	0801fa68 	.word	0x0801fa68

08001448 <store_param>:

/*
 * we store the whole structure inside the internal flash
 */
static uint32_t store_param() {
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800144e:	b672      	cpsid	i
}
 8001450:	bf00      	nop
	__disable_irq();

	uint32_t ZielAdr;
	uint32_t WrAdr;
	uint32_t QuellAdr = (uint32_t) &_Flash_Packet;
 8001452:	4b2d      	ldr	r3, [pc, #180]	; (8001508 <store_param+0xc0>)
 8001454:	60bb      	str	r3, [r7, #8]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8001456:	f003 fb03 	bl	8004a60 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800145a:	4b2c      	ldr	r3, [pc, #176]	; (800150c <store_param+0xc4>)
 800145c:	2201      	movs	r2, #1
 800145e:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001460:	4b2a      	ldr	r3, [pc, #168]	; (800150c <store_param+0xc4>)
 8001462:	2202      	movs	r2, #2
 8001464:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001466:	4b29      	ldr	r3, [pc, #164]	; (800150c <store_param+0xc4>)
 8001468:	2210      	movs	r2, #16
 800146a:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800146c:	4b27      	ldr	r3, [pc, #156]	; (800150c <store_param+0xc4>)
 800146e:	2220      	movs	r2, #32
 8001470:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001472:	4b26      	ldr	r3, [pc, #152]	; (800150c <store_param+0xc4>)
 8001474:	2240      	movs	r2, #64	; 0x40
 8001476:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001478:	4b24      	ldr	r3, [pc, #144]	; (800150c <store_param+0xc4>)
 800147a:	2280      	movs	r2, #128	; 0x80
 800147c:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800147e:	4b23      	ldr	r3, [pc, #140]	; (800150c <store_param+0xc4>)
 8001480:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001484:	60da      	str	r2, [r3, #12]

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001486:	4b22      	ldr	r3, [pc, #136]	; (8001510 <store_param+0xc8>)
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800148c:	4b20      	ldr	r3, [pc, #128]	; (8001510 <store_param+0xc8>)
 800148e:	2202      	movs	r2, #2
 8001490:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector = FLASH_SECTOR_7;
 8001492:	4b1f      	ldr	r3, [pc, #124]	; (8001510 <store_param+0xc8>)
 8001494:	2207      	movs	r2, #7
 8001496:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors = 1;
 8001498:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <store_param+0xc8>)
 800149a:	2201      	movs	r2, #1
 800149c:	60da      	str	r2, [r3, #12]

	/* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	 you have to make sure that these data are rewritten before they are accessed during code
	 execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	 DCRST and ICRST bits in the FLASH_CR register. */
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) {
 800149e:	463b      	mov	r3, r7
 80014a0:	4619      	mov	r1, r3
 80014a2:	481b      	ldr	r0, [pc, #108]	; (8001510 <store_param+0xc8>)
 80014a4:	f003 fc5a 	bl	8004d5c <HAL_FLASHEx_Erase>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <store_param+0x6e>
		return HAL_FLASH_GetError();
 80014ae:	f003 fb09 	bl	8004ac4 <HAL_FLASH_GetError>
 80014b2:	4603      	mov	r3, r0
 80014b4:	e024      	b.n	8001500 <store_param+0xb8>
	}

	ZielAdr = Address_Mem + sizeof(Flash_Packet); /* - FLASH_DOUBLE_SIZE))*/
 80014b6:	4b17      	ldr	r3, [pc, #92]	; (8001514 <store_param+0xcc>)
 80014b8:	607b      	str	r3, [r7, #4]
	WrAdr = Address_Mem; // Pointer on 1st entry
 80014ba:	4b17      	ldr	r3, [pc, #92]	; (8001518 <store_param+0xd0>)
 80014bc:	60fb      	str	r3, [r7, #12]

	while (WrAdr < ZielAdr) {
 80014be:	e016      	b.n	80014ee <store_param+0xa6>

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, WrAdr,
				*(uint64_t*) QuellAdr) == HAL_OK)
 80014c0:	68bb      	ldr	r3, [r7, #8]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, WrAdr,
 80014c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c6:	68f9      	ldr	r1, [r7, #12]
 80014c8:	2002      	movs	r0, #2
 80014ca:	f003 fa75 	bl	80049b8 <HAL_FLASH_Program>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d106      	bne.n	80014e2 <store_param+0x9a>

		{
			WrAdr += 4;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	3304      	adds	r3, #4
 80014d8:	60fb      	str	r3, [r7, #12]
			QuellAdr += 4;
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	3304      	adds	r3, #4
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	e005      	b.n	80014ee <store_param+0xa6>

		} else {

			HAL_FLASH_Lock();
 80014e2:	f003 fadf 	bl	8004aa4 <HAL_FLASH_Lock>
			return HAL_FLASH_GetError();
 80014e6:	f003 faed 	bl	8004ac4 <HAL_FLASH_GetError>
 80014ea:	4603      	mov	r3, r0
 80014ec:	e008      	b.n	8001500 <store_param+0xb8>
	while (WrAdr < ZielAdr) {
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d3e4      	bcc.n	80014c0 <store_param+0x78>

		}

	}
	HAL_FLASH_Lock();
 80014f6:	f003 fad5 	bl	8004aa4 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 80014fa:	b662      	cpsie	i
}
 80014fc:	bf00      	nop
//	if(start_usb_timer)
//	{
//		HAL_TIM_Base_Start_IT(&htim2);
//	}

	return 0;
 80014fe:	2300      	movs	r3, #0

}
 8001500:	4618      	mov	r0, r3
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	200012d4 	.word	0x200012d4
 800150c:	40023c00 	.word	0x40023c00
 8001510:	2000170c 	.word	0x2000170c
 8001514:	08060197 	.word	0x08060197
 8001518:	08060000 	.word	0x08060000

0800151c <save_data>:
/*
 * This is to save data in internal flash. when user change something that needs to be saved in flash for future use
 * we wait for 30seconds, so in this time if user also changes something else we write to flash at once then
 */
static void save_data() {
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	if (save_param) {
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <save_data+0x58>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d022      	beq.n	800156e <save_data+0x52>
		if (start_timer) {
 8001528:	4b13      	ldr	r3, [pc, #76]	; (8001578 <save_data+0x5c>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d00b      	beq.n	8001548 <save_data+0x2c>
			HAL_TIM_Base_Stop_IT(&htim2);
 8001530:	4812      	ldr	r0, [pc, #72]	; (800157c <save_data+0x60>)
 8001532:	f008 fee7 	bl	800a304 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Start_IT(&htim2);
 8001536:	4811      	ldr	r0, [pc, #68]	; (800157c <save_data+0x60>)
 8001538:	f008 fe82 	bl	800a240 <HAL_TIM_Base_Start_IT>
			time_keep = 0;
 800153c:	4b10      	ldr	r3, [pc, #64]	; (8001580 <save_data+0x64>)
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
			start_timer = 0;
 8001542:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <save_data+0x5c>)
 8001544:	2200      	movs	r2, #0
 8001546:	701a      	strb	r2, [r3, #0]
		}

		if (time_keep >= 300) //save after 30secs when data occur happens
 8001548:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <save_data+0x64>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001550:	d30d      	bcc.n	800156e <save_data+0x52>
				{
			//if(!start_usb_timer) //if usb timer is on dont stop timer as usb will stop itself when its operation will end
			//{
			HAL_TIM_Base_Stop_IT(&htim2);
 8001552:	480a      	ldr	r0, [pc, #40]	; (800157c <save_data+0x60>)
 8001554:	f008 fed6 	bl	800a304 <HAL_TIM_Base_Stop_IT>
			//}
			store_param();
 8001558:	f7ff ff76 	bl	8001448 <store_param>
			time_keep = 0;
 800155c:	4b08      	ldr	r3, [pc, #32]	; (8001580 <save_data+0x64>)
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
			save_param = 0;
 8001562:	4b04      	ldr	r3, [pc, #16]	; (8001574 <save_data+0x58>)
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
			start_timer = 0;
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <save_data+0x5c>)
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]
		}
	}

}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200014a9 	.word	0x200014a9
 8001578:	200014aa 	.word	0x200014aa
 800157c:	200018a8 	.word	0x200018a8
 8001580:	200014ac 	.word	0x200014ac

08001584 <init_scd4x_i2c>:
static void init_scd4x_i2c() {
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
	int16_t error = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	80fb      	strh	r3, [r7, #6]
	sensirion_i2c_hal_init();
 800158e:	f011 f857 	bl	8012640 <sensirion_i2c_hal_init>
	scd4x_wake_up();
 8001592:	f010 ff07 	bl	80123a4 <scd4x_wake_up>
	error = scd4x_stop_periodic_measurement();
 8001596:	f010 fd9f 	bl	80120d8 <scd4x_stop_periodic_measurement>
 800159a:	4603      	mov	r3, r0
 800159c:	80fb      	strh	r3, [r7, #6]
	scd4x_reinit();
 800159e:	f010 feb5 	bl	801230c <scd4x_reinit>
	uint16_t serial_0;
	uint16_t serial_1;
	uint16_t serial_2;
	error = scd4x_get_serial_number(&serial_0, &serial_1, &serial_2);
 80015a2:	463a      	mov	r2, r7
 80015a4:	1cb9      	adds	r1, r7, #2
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	4618      	mov	r0, r3
 80015aa:	f010 fe57 	bl	801225c <scd4x_get_serial_number>
 80015ae:	4603      	mov	r3, r0
 80015b0:	80fb      	strh	r3, [r7, #6]

}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <get_scd4x_measurement>:
static void get_scd4x_measurement() {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b090      	sub	sp, #64	; 0x40
 80015c0:	af02      	add	r7, sp, #8
	int16_t error = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	86fb      	strh	r3, [r7, #54]	; 0x36

	error = scd4x_start_periodic_measurement();
 80015c6:	f010 fcd7 	bl	8011f78 <scd4x_start_periodic_measurement>
 80015ca:	4603      	mov	r3, r0
 80015cc:	86fb      	strh	r3, [r7, #54]	; 0x36
	sensirion_i2c_hal_sleep_usec(100000);
 80015ce:	483e      	ldr	r0, [pc, #248]	; (80016c8 <get_scd4x_measurement+0x10c>)
 80015d0:	f011 f8ac 	bl	801272c <sensirion_i2c_hal_sleep_usec>
	bool data_ready_flag = false;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	error = scd4x_get_data_ready_flag(&data_ready_flag);
 80015da:	f107 0335 	add.w	r3, r7, #53	; 0x35
 80015de:	4618      	mov	r0, r3
 80015e0:	f010 fdf0 	bl	80121c4 <scd4x_get_data_ready_flag>
 80015e4:	4603      	mov	r3, r0
 80015e6:	86fb      	strh	r3, [r7, #54]	; 0x36

	if (data_ready_flag) {
 80015e8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d066      	beq.n	80016be <get_scd4x_measurement+0x102>
		error = scd4x_read_measurement(&_RunTime_Packet.co2,
 80015f0:	4a36      	ldr	r2, [pc, #216]	; (80016cc <get_scd4x_measurement+0x110>)
 80015f2:	4937      	ldr	r1, [pc, #220]	; (80016d0 <get_scd4x_measurement+0x114>)
 80015f4:	4837      	ldr	r0, [pc, #220]	; (80016d4 <get_scd4x_measurement+0x118>)
 80015f6:	f010 fd3d 	bl	8012074 <scd4x_read_measurement>
 80015fa:	4603      	mov	r3, r0
 80015fc:	86fb      	strh	r3, [r7, #54]	; 0x36
				&_RunTime_Packet.temperature, &_RunTime_Packet.humidity);
		_RunTime_Packet.temperature = _RunTime_Packet.temperature / 1000;
 80015fe:	4b35      	ldr	r3, [pc, #212]	; (80016d4 <get_scd4x_measurement+0x118>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	4a35      	ldr	r2, [pc, #212]	; (80016d8 <get_scd4x_measurement+0x11c>)
 8001604:	fb82 1203 	smull	r1, r2, r2, r3
 8001608:	1192      	asrs	r2, r2, #6
 800160a:	17db      	asrs	r3, r3, #31
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	4a31      	ldr	r2, [pc, #196]	; (80016d4 <get_scd4x_measurement+0x118>)
 8001610:	6053      	str	r3, [r2, #4]
		_RunTime_Packet.humidity = _RunTime_Packet.humidity / 1000;
 8001612:	4b30      	ldr	r3, [pc, #192]	; (80016d4 <get_scd4x_measurement+0x118>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	4a30      	ldr	r2, [pc, #192]	; (80016d8 <get_scd4x_measurement+0x11c>)
 8001618:	fb82 1203 	smull	r1, r2, r2, r3
 800161c:	1192      	asrs	r2, r2, #6
 800161e:	17db      	asrs	r3, r3, #31
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	4a2c      	ldr	r2, [pc, #176]	; (80016d4 <get_scd4x_measurement+0x118>)
 8001624:	6093      	str	r3, [r2, #8]

		if (debug_scd_pm) {
 8001626:	4b2d      	ldr	r3, [pc, #180]	; (80016dc <get_scd4x_measurement+0x120>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d047      	beq.n	80016be <get_scd4x_measurement+0x102>
			char buf[50];
			if (error) {
 800162e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001632:	2b00      	cmp	r3, #0
 8001634:	d013      	beq.n	800165e <get_scd4x_measurement+0xa2>
				sprintf(buf, "Error executing scd4x_read_measurement(): %i\n",
 8001636:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800163a:	463b      	mov	r3, r7
 800163c:	4928      	ldr	r1, [pc, #160]	; (80016e0 <get_scd4x_measurement+0x124>)
 800163e:	4618      	mov	r0, r3
 8001640:	f01a fc68 	bl	801bf14 <siprintf>
						error);
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 8001644:	463b      	mov	r3, r7
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe fdd4 	bl	80001f4 <strlen>
 800164c:	4603      	mov	r3, r0
 800164e:	b29a      	uxth	r2, r3
 8001650:	4639      	mov	r1, r7
 8001652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001656:	4823      	ldr	r0, [pc, #140]	; (80016e4 <get_scd4x_measurement+0x128>)
 8001658:	f009 fe10 	bl	800b27c <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
			}
		}
	}
	//error = scd4x_stop_periodic_measurement();
}
 800165c:	e02f      	b.n	80016be <get_scd4x_measurement+0x102>
			} else if (_RunTime_Packet.co2 == 0) {
 800165e:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <get_scd4x_measurement+0x118>)
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d111      	bne.n	800168a <get_scd4x_measurement+0xce>
				sprintf(buf, "Invalid sample detected, skipping.\n");
 8001666:	463b      	mov	r3, r7
 8001668:	491f      	ldr	r1, [pc, #124]	; (80016e8 <get_scd4x_measurement+0x12c>)
 800166a:	4618      	mov	r0, r3
 800166c:	f01a fc52 	bl	801bf14 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 8001670:	463b      	mov	r3, r7
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe fdbe 	bl	80001f4 <strlen>
 8001678:	4603      	mov	r3, r0
 800167a:	b29a      	uxth	r2, r3
 800167c:	4639      	mov	r1, r7
 800167e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001682:	4818      	ldr	r0, [pc, #96]	; (80016e4 <get_scd4x_measurement+0x128>)
 8001684:	f009 fdfa 	bl	800b27c <HAL_UART_Transmit>
}
 8001688:	e019      	b.n	80016be <get_scd4x_measurement+0x102>
						_RunTime_Packet.co2, _RunTime_Packet.temperature,
 800168a:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <get_scd4x_measurement+0x118>)
 800168c:	881b      	ldrh	r3, [r3, #0]
				sprintf(buf, "Co2: %d, Temperature: %ld C, Humidity: %ld \r\n",
 800168e:	4619      	mov	r1, r3
 8001690:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <get_scd4x_measurement+0x118>)
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <get_scd4x_measurement+0x118>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	4638      	mov	r0, r7
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	4613      	mov	r3, r2
 800169e:	460a      	mov	r2, r1
 80016a0:	4912      	ldr	r1, [pc, #72]	; (80016ec <get_scd4x_measurement+0x130>)
 80016a2:	f01a fc37 	bl	801bf14 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 80016a6:	463b      	mov	r3, r7
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe fda3 	bl	80001f4 <strlen>
 80016ae:	4603      	mov	r3, r0
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	4639      	mov	r1, r7
 80016b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b8:	480a      	ldr	r0, [pc, #40]	; (80016e4 <get_scd4x_measurement+0x128>)
 80016ba:	f009 fddf 	bl	800b27c <HAL_UART_Transmit>
}
 80016be:	bf00      	nop
 80016c0:	3738      	adds	r7, #56	; 0x38
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	000186a0 	.word	0x000186a0
 80016cc:	20001474 	.word	0x20001474
 80016d0:	20001470 	.word	0x20001470
 80016d4:	2000146c 	.word	0x2000146c
 80016d8:	10624dd3 	.word	0x10624dd3
 80016dc:	200014a8 	.word	0x200014a8
 80016e0:	0801fa70 	.word	0x0801fa70
 80016e4:	20001998 	.word	0x20001998
 80016e8:	0801faa0 	.word	0x0801faa0
 80016ec:	0801fac4 	.word	0x0801fac4

080016f0 <init_sps30>:
static void init_sps30() {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08c      	sub	sp, #48	; 0x30
 80016f4:	af00      	add	r7, sp, #0
	char serial[SPS30_MAX_SERIAL_LEN];
	const uint8_t AUTO_CLEAN_DAYS = 4;
 80016f6:	2304      	movs	r3, #4
 80016f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	int16_t ret;
	sensirion_sleep_usec(1000000); /* sleep for 1s */
 80016fc:	480a      	ldr	r0, [pc, #40]	; (8001728 <init_sps30+0x38>)
 80016fe:	f011 fc2b 	bl	8012f58 <sensirion_sleep_usec>

	sensirion_uart_open();
 8001702:	f011 fb73 	bl	8012dec <sensirion_uart_open>

	//printf("SPS30 sensor probing successful\r\n");

	struct sps30_version_information version_information;
	ret = sps30_read_version(&version_information);
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	4618      	mov	r0, r3
 800170a:	f011 fd65 	bl	80131d8 <sps30_read_version>
 800170e:	4603      	mov	r3, r0
 8001710:	85bb      	strh	r3, [r7, #44]	; 0x2c
//				version_information.hardware_revision,
//				version_information.shdlc_major,
//				version_information.shdlc_minor);
	}

	ret = sps30_get_serial(serial);
 8001712:	f107 030c 	add.w	r3, r7, #12
 8001716:	4618      	mov	r0, r3
 8001718:	f011 fc32 	bl	8012f80 <sps30_get_serial>
 800171c:	4603      	mov	r3, r0
 800171e:	85bb      	strh	r3, [r7, #44]	; 0x2c
//	if (ret)
//	{
//		//printf("error %d setting the auto-clean interval\r\n", ret);
//	}

}
 8001720:	bf00      	nop
 8001722:	3730      	adds	r7, #48	; 0x30
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	000f4240 	.word	0x000f4240

0800172c <get_sps30_measurement>:
static void get_sps30_measurement() {
 800172c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001730:	b0a0      	sub	sp, #128	; 0x80
 8001732:	af06      	add	r7, sp, #24

	int16_t ret;
	char buffer[100];
	ret = sps30_start_measurement();
 8001734:	f011 fc50 	bl	8012fd8 <sps30_start_measurement>
 8001738:	4603      	mov	r3, r0
 800173a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
//			sprintf(buffer,"error starting measurement\r\n");
//			HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);

	}

	ret = sps30_read_measurement(&m);
 800173e:	483a      	ldr	r0, [pc, #232]	; (8001828 <get_sps30_measurement+0xfc>)
 8001740:	f011 fc76 	bl	8013030 <sps30_read_measurement>
 8001744:	4603      	mov	r3, r0
 8001746:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	_RunTime_Packet.pm1_0 = m.mc_1p0;
 800174a:	4b37      	ldr	r3, [pc, #220]	; (8001828 <get_sps30_measurement+0xfc>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a37      	ldr	r2, [pc, #220]	; (800182c <get_sps30_measurement+0x100>)
 8001750:	6113      	str	r3, [r2, #16]
	_RunTime_Packet.pm2_5 = m.mc_2p5;
 8001752:	4b35      	ldr	r3, [pc, #212]	; (8001828 <get_sps30_measurement+0xfc>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	4a35      	ldr	r2, [pc, #212]	; (800182c <get_sps30_measurement+0x100>)
 8001758:	6153      	str	r3, [r2, #20]
	_RunTime_Packet.pm4_0 = m.mc_4p0;
 800175a:	4b33      	ldr	r3, [pc, #204]	; (8001828 <get_sps30_measurement+0xfc>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	4a33      	ldr	r2, [pc, #204]	; (800182c <get_sps30_measurement+0x100>)
 8001760:	6193      	str	r3, [r2, #24]
	_RunTime_Packet.pm10_0 = m.mc_10p0;
 8001762:	4b31      	ldr	r3, [pc, #196]	; (8001828 <get_sps30_measurement+0xfc>)
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	4a31      	ldr	r2, [pc, #196]	; (800182c <get_sps30_measurement+0x100>)
 8001768:	61d3      	str	r3, [r2, #28]

	if (ret < 0) {
 800176a:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 800176e:	2b00      	cmp	r3, #0
 8001770:	db54      	blt.n	800181c <get_sps30_measurement+0xf0>
//				printf("error reading measurement\r\n");
//				HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
//				}

	} else {
		if (debug_scd_pm) {
 8001772:	4b2f      	ldr	r3, [pc, #188]	; (8001830 <get_sps30_measurement+0x104>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d050      	beq.n	800181c <get_sps30_measurement+0xf0>
			if (SPS30_IS_ERR_STATE(ret)) {
 800177a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800177e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8001782:	b21b      	sxth	r3, r3
 8001784:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001788:	4293      	cmp	r3, r2
 800178a:	d113      	bne.n	80017b4 <get_sps30_measurement+0x88>
				sprintf(buffer,
 800178c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001790:	b2da      	uxtb	r2, r3
 8001792:	463b      	mov	r3, r7
 8001794:	4927      	ldr	r1, [pc, #156]	; (8001834 <get_sps30_measurement+0x108>)
 8001796:	4618      	mov	r0, r3
 8001798:	f01a fbbc 	bl	801bf14 <siprintf>
						"Chip state: %u - measurements may not be accurate\r\n",
						SPS30_GET_ERR_STATE(ret));
				HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
 800179c:	463b      	mov	r3, r7
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe fd28 	bl	80001f4 <strlen>
 80017a4:	4603      	mov	r3, r0
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	4639      	mov	r1, r7
 80017aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ae:	4822      	ldr	r0, [pc, #136]	; (8001838 <get_sps30_measurement+0x10c>)
 80017b0:	f009 fd64 	bl	800b27c <HAL_UART_Transmit>
						1000);
			}
			sprintf(buffer,
					"%0.2f pm1.0\r\n%0.2f pm2.5\r\n%0.2f pm4.0\r\n%0.2f pm10.0\r\n",
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 80017b4:	4b1c      	ldr	r3, [pc, #112]	; (8001828 <get_sps30_measurement+0xfc>)
 80017b6:	681b      	ldr	r3, [r3, #0]
			sprintf(buffer,
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe fedd 	bl	8000578 <__aeabi_f2d>
 80017be:	4682      	mov	sl, r0
 80017c0:	468b      	mov	fp, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 80017c2:	4b19      	ldr	r3, [pc, #100]	; (8001828 <get_sps30_measurement+0xfc>)
 80017c4:	685b      	ldr	r3, [r3, #4]
			sprintf(buffer,
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fed6 	bl	8000578 <__aeabi_f2d>
 80017cc:	4604      	mov	r4, r0
 80017ce:	460d      	mov	r5, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 80017d0:	4b15      	ldr	r3, [pc, #84]	; (8001828 <get_sps30_measurement+0xfc>)
 80017d2:	689b      	ldr	r3, [r3, #8]
			sprintf(buffer,
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fecf 	bl	8000578 <__aeabi_f2d>
 80017da:	4680      	mov	r8, r0
 80017dc:	4689      	mov	r9, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 80017de:	4b12      	ldr	r3, [pc, #72]	; (8001828 <get_sps30_measurement+0xfc>)
 80017e0:	68db      	ldr	r3, [r3, #12]
			sprintf(buffer,
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe fec8 	bl	8000578 <__aeabi_f2d>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4638      	mov	r0, r7
 80017ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80017f2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80017f6:	e9cd 4500 	strd	r4, r5, [sp]
 80017fa:	4652      	mov	r2, sl
 80017fc:	465b      	mov	r3, fp
 80017fe:	490f      	ldr	r1, [pc, #60]	; (800183c <get_sps30_measurement+0x110>)
 8001800:	f01a fb88 	bl	801bf14 <siprintf>

			HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 8001804:	463b      	mov	r3, r7
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe fcf4 	bl	80001f4 <strlen>
 800180c:	4603      	mov	r3, r0
 800180e:	b29a      	uxth	r2, r3
 8001810:	4639      	mov	r1, r7
 8001812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001816:	4808      	ldr	r0, [pc, #32]	; (8001838 <get_sps30_measurement+0x10c>)
 8001818:	f009 fd30 	bl	800b27c <HAL_UART_Transmit>
		}
	}

	//	ret =	sps30_stop_measurement();

}
 800181c:	bf00      	nop
 800181e:	3768      	adds	r7, #104	; 0x68
 8001820:	46bd      	mov	sp, r7
 8001822:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001826:	bf00      	nop
 8001828:	200016c8 	.word	0x200016c8
 800182c:	2000146c 	.word	0x2000146c
 8001830:	200014a8 	.word	0x200014a8
 8001834:	0801faf4 	.word	0x0801faf4
 8001838:	20001998 	.word	0x20001998
 800183c:	0801fb28 	.word	0x0801fb28

08001840 <check_peripheral_error>:
static void check_peripheral_error() {
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
	if (_RunTime_Packet.console_uart_error) {
 8001844:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <check_peripheral_error+0x70>)
 8001846:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800184a:	2b00      	cmp	r3, #0
 800184c:	d005      	beq.n	800185a <check_peripheral_error+0x1a>
		_RunTime_Packet.console_uart_error = 0; //we clear it and reset the peripherals
 800184e:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <check_peripheral_error+0x70>)
 8001850:	2200      	movs	r2, #0
 8001852:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		console_uart_init();
 8001856:	f00e fcbb 	bl	80101d0 <console_uart_init>
	}

	if (_RunTime_Packet.sps30_uart_error) {
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <check_peripheral_error+0x70>)
 800185c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001860:	2b00      	cmp	r3, #0
 8001862:	d015      	beq.n	8001890 <check_peripheral_error+0x50>
		_RunTime_Packet.sps30_uart_error = 0;
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <check_peripheral_error+0x70>)
 8001866:	2200      	movs	r2, #0
 8001868:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		disable_5v();
 800186c:	2200      	movs	r2, #0
 800186e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001872:	4810      	ldr	r0, [pc, #64]	; (80018b4 <check_peripheral_error+0x74>)
 8001874:	f003 fe14 	bl	80054a0 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8001878:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800187c:	f001 fe38 	bl	80034f0 <HAL_Delay>
		enable_5v();
 8001880:	2201      	movs	r2, #1
 8001882:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001886:	480b      	ldr	r0, [pc, #44]	; (80018b4 <check_peripheral_error+0x74>)
 8001888:	f003 fe0a 	bl	80054a0 <HAL_GPIO_WritePin>
		init_sps30();
 800188c:	f7ff ff30 	bl	80016f0 <init_sps30>
	}

	if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (0x62 << 1), 5, 100)
 8001890:	2364      	movs	r3, #100	; 0x64
 8001892:	2205      	movs	r2, #5
 8001894:	21c4      	movs	r1, #196	; 0xc4
 8001896:	4808      	ldr	r0, [pc, #32]	; (80018b8 <check_peripheral_error+0x78>)
 8001898:	f004 fae6 	bl	8005e68 <HAL_I2C_IsDeviceReady>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <check_peripheral_error+0x6a>
			!= HAL_OK) {

		_RunTime_Packet.scd4x_i2c_error = 1;
 80018a2:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <check_peripheral_error+0x70>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	}

}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	2000146c 	.word	0x2000146c
 80018b4:	40020400 	.word	0x40020400
 80018b8:	20001768 	.word	0x20001768

080018bc <sensor_calibration>:
static void sensor_calibration() {
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0




	if (_RunTime_Packet.PM_calibration && !_RunTime_Packet.usb_detection) {
 80018c0:	4b10      	ldr	r3, [pc, #64]	; (8001904 <sensor_calibration+0x48>)
 80018c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00b      	beq.n	80018e2 <sensor_calibration+0x26>
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <sensor_calibration+0x48>)
 80018cc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d106      	bne.n	80018e2 <sensor_calibration+0x26>
		_RunTime_Packet.PM_calibration = 0;
 80018d4:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <sensor_calibration+0x48>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		sps30_set_fan_auto_cleaning_interval_days(4);
 80018dc:	2004      	movs	r0, #4
 80018de:	f011 fc67 	bl	80131b0 <sps30_set_fan_auto_cleaning_interval_days>
	}

	if (_RunTime_Packet.CO2_calibration) {
 80018e2:	4b08      	ldr	r3, [pc, #32]	; (8001904 <sensor_calibration+0x48>)
 80018e4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d009      	beq.n	8001900 <sensor_calibration+0x44>
		_RunTime_Packet.CO2_calibration = 0;
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <sensor_calibration+0x48>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		scd4x_perform_forced_recalibration(
 80018f4:	4b03      	ldr	r3, [pc, #12]	; (8001904 <sensor_calibration+0x48>)
 80018f6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80018f8:	4903      	ldr	r1, [pc, #12]	; (8001908 <sensor_calibration+0x4c>)
 80018fa:	4618      	mov	r0, r3
 80018fc:	f010 fc14 	bl	8012128 <scd4x_perform_forced_recalibration>
	}




}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	2000146c 	.word	0x2000146c
 8001908:	200014a2 	.word	0x200014a2

0800190c <sleep>:
static void sleep() {
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0

//save stuff to sd card right here then go to sleep
	GREEN_LED_PWM(0);
 8001910:	4b20      	ldr	r3, [pc, #128]	; (8001994 <sleep+0x88>)
 8001912:	2200      	movs	r2, #0
 8001914:	635a      	str	r2, [r3, #52]	; 0x34
	RED_LED_PWM(0);
 8001916:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <sleep+0x88>)
 8001918:	2200      	movs	r2, #0
 800191a:	639a      	str	r2, [r3, #56]	; 0x38
	BLUE_LED_PWM(0);
 800191c:	4a1e      	ldr	r2, [pc, #120]	; (8001998 <sleep+0x8c>)
 800191e:	2100      	movs	r1, #0
 8001920:	2008      	movs	r0, #8
 8001922:	f7ff fb81 	bl	8001028 <setSoftPWM>

	HAL_ADC_DeInit(&hadc1);
 8001926:	481d      	ldr	r0, [pc, #116]	; (800199c <sleep+0x90>)
 8001928:	f001 fe8d 	bl	8003646 <HAL_ADC_DeInit>
	HAL_UART_Transmit(&huart1, (uint8_t*) "sleepTime\r\n", 11, 1000);
 800192c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001930:	220b      	movs	r2, #11
 8001932:	491b      	ldr	r1, [pc, #108]	; (80019a0 <sleep+0x94>)
 8001934:	481b      	ldr	r0, [pc, #108]	; (80019a4 <sleep+0x98>)
 8001936:	f009 fca1 	bl	800b27c <HAL_UART_Transmit>
	disable_5v();
 800193a:	2200      	movs	r2, #0
 800193c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001940:	4819      	ldr	r0, [pc, #100]	; (80019a8 <sleep+0x9c>)
 8001942:	f003 fdad 	bl	80054a0 <HAL_GPIO_WritePin>
	disable_motion();
 8001946:	2201      	movs	r2, #1
 8001948:	2102      	movs	r1, #2
 800194a:	4818      	ldr	r0, [pc, #96]	; (80019ac <sleep+0xa0>)
 800194c:	f003 fda8 	bl	80054a0 <HAL_GPIO_WritePin>
	scd4x_stop_periodic_measurement();
 8001950:	f010 fbc2 	bl	80120d8 <scd4x_stop_periodic_measurement>
	scd4x_power_down();
 8001954:	f010 fd00 	bl	8012358 <scd4x_power_down>
	console_uart_deinit();
 8001958:	f00e fc2e 	bl	80101b8 <console_uart_deinit>
	sensirion_i2c_hal_free();
 800195c:	f010 fea2 	bl	80126a4 <sensirion_i2c_hal_free>
	sensirion_uart_close();
 8001960:	f011 fa84 	bl	8012e6c <sensirion_uart_close>
	MX_USB_DEVICE_DeInit();
 8001964:	f018 fc78 	bl	801a258 <MX_USB_DEVICE_DeInit>

	HAL_TIM_Base_DeInit(&htim1);
 8001968:	4811      	ldr	r0, [pc, #68]	; (80019b0 <sleep+0xa4>)
 800196a:	f008 fbba 	bl	800a0e2 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim2);
 800196e:	4811      	ldr	r0, [pc, #68]	; (80019b4 <sleep+0xa8>)
 8001970:	f008 fbb7 	bl	800a0e2 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim3);
 8001974:	4810      	ldr	r0, [pc, #64]	; (80019b8 <sleep+0xac>)
 8001976:	f008 fbb4 	bl	800a0e2 <HAL_TIM_Base_DeInit>
	HAL_DMA_DeInit(&hdma_tim1_up);
 800197a:	4810      	ldr	r0, [pc, #64]	; (80019bc <sleep+0xb0>)
 800197c:	f002 fc86 	bl	800428c <HAL_DMA_DeInit>




	clock_speed_slow();
 8001980:	f7ff fc24 	bl	80011cc <clock_speed_slow>

	HAL_SuspendTick();
 8001984:	f001 fdd8 	bl	8003538 <HAL_SuspendTick>
	/*## Enter Stop Mode #######################################################*/
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001988:	2101      	movs	r1, #1
 800198a:	2001      	movs	r0, #1
 800198c:	f006 f9ce 	bl	8007d2c <HAL_PWR_EnterSTOPMode>

}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40000400 	.word	0x40000400
 8001998:	20000330 	.word	0x20000330
 800199c:	20001720 	.word	0x20001720
 80019a0:	0801fb60 	.word	0x0801fb60
 80019a4:	20001998 	.word	0x20001998
 80019a8:	40020400 	.word	0x40020400
 80019ac:	40020000 	.word	0x40020000
 80019b0:	20001860 	.word	0x20001860
 80019b4:	200018a8 	.word	0x200018a8
 80019b8:	200018f0 	.word	0x200018f0
 80019bc:	20001938 	.word	0x20001938

080019c0 <wakeup>:
static void wakeup() {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0

	//also add usb stuff

	HAL_ResumeTick();
 80019c4:	f001 fdc8 	bl	8003558 <HAL_ResumeTick>
	clock_speed_high();
 80019c8:	f7ff fc62 	bl	8001290 <clock_speed_high>
	enable_5v();
 80019cc:	2201      	movs	r2, #1
 80019ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019d2:	4830      	ldr	r0, [pc, #192]	; (8001a94 <wakeup+0xd4>)
 80019d4:	f003 fd64 	bl	80054a0 <HAL_GPIO_WritePin>
	enable_motion();
 80019d8:	2200      	movs	r2, #0
 80019da:	2102      	movs	r1, #2
 80019dc:	482e      	ldr	r0, [pc, #184]	; (8001a98 <wakeup+0xd8>)
 80019de:	f003 fd5f 	bl	80054a0 <HAL_GPIO_WritePin>
	console_uart_init();
 80019e2:	f00e fbf5 	bl	80101d0 <console_uart_init>

	MX_DMA_Init();
 80019e6:	f7ff fbb5 	bl	8001154 <MX_DMA_Init>
	MX_TIM1_Init();
 80019ea:	f000 fd33 	bl	8002454 <MX_TIM1_Init>
	MX_TIM2_Init();
 80019ee:	f000 fd81 	bl	80024f4 <MX_TIM2_Init>
	MX_TIM3_Init();
 80019f2:	f000 fdcd 	bl	8002590 <MX_TIM3_Init>


	init_scd4x_i2c();
 80019f6:	f7ff fdc5 	bl	8001584 <init_scd4x_i2c>
	MX_USB_DEVICE_Init(); //initialize usb anyways
 80019fa:	f018 fc3f 	bl	801a27c <MX_USB_DEVICE_Init>
	if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 80019fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a02:	4825      	ldr	r0, [pc, #148]	; (8001a98 <wakeup+0xd8>)
 8001a04:	f003 fd34 	bl	8005470 <HAL_GPIO_ReadPin>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d102      	bne.n	8001a14 <wakeup+0x54>
		init_sps30();
 8001a0e:	f7ff fe6f 	bl	80016f0 <init_sps30>
 8001a12:	e00f      	b.n	8001a34 <wakeup+0x74>
	} else {
		_RunTime_Packet.usb_detection = 1;
 8001a14:	4b21      	ldr	r3, [pc, #132]	; (8001a9c <wakeup+0xdc>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		_RunTime_Packet.usb_start_timer = 1;
 8001a1c:	4b1f      	ldr	r3, [pc, #124]	; (8001a9c <wakeup+0xdc>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		usb_time_keep = 0;
 8001a24:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <wakeup+0xe0>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
		prev_usb_time_ = HAL_GetTick();
 8001a2a:	f001 fd55 	bl	80034d8 <HAL_GetTick>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4a1c      	ldr	r2, [pc, #112]	; (8001aa4 <wakeup+0xe4>)
 8001a32:	6013      	str	r3, [r2, #0]
	}

	HAL_TIM_Base_Start(&htim1);
 8001a34:	481c      	ldr	r0, [pc, #112]	; (8001aa8 <wakeup+0xe8>)
 8001a36:	f008 fba9 	bl	800a18c <HAL_TIM_Base_Start>
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t) &(dataA[0]),
 8001a3a:	491c      	ldr	r1, [pc, #112]	; (8001aac <wakeup+0xec>)
 8001a3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a40:	4a1b      	ldr	r2, [pc, #108]	; (8001ab0 <wakeup+0xf0>)
 8001a42:	481c      	ldr	r0, [pc, #112]	; (8001ab4 <wakeup+0xf4>)
 8001a44:	f002 fc80 	bl	8004348 <HAL_DMA_Start>
			(uint32_t) &(BLUE_LED_GPIO_Port->BSRR),
			sizeof(dataA) / sizeof(dataA[0]));
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001a48:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <wakeup+0xe8>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <wakeup+0xe8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a56:	60da      	str	r2, [r3, #12]
	BLUE_LED_PWM(0);
 8001a58:	4a14      	ldr	r2, [pc, #80]	; (8001aac <wakeup+0xec>)
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	2008      	movs	r0, #8
 8001a5e:	f7ff fae3 	bl	8001028 <setSoftPWM>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //for green led
 8001a62:	2100      	movs	r1, #0
 8001a64:	4814      	ldr	r0, [pc, #80]	; (8001ab8 <wakeup+0xf8>)
 8001a66:	f008 fcd5 	bl	800a414 <HAL_TIM_PWM_Start>
	GREEN_LED_PWM(0);
 8001a6a:	4b14      	ldr	r3, [pc, #80]	; (8001abc <wakeup+0xfc>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //for red led
 8001a70:	2104      	movs	r1, #4
 8001a72:	4811      	ldr	r0, [pc, #68]	; (8001ab8 <wakeup+0xf8>)
 8001a74:	f008 fcce 	bl	800a414 <HAL_TIM_PWM_Start>
	RED_LED_PWM(0);
 8001a78:	4b10      	ldr	r3, [pc, #64]	; (8001abc <wakeup+0xfc>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	639a      	str	r2, [r3, #56]	; 0x38


	pwr_off_detected();
 8001a7e:	f7ff fb89 	bl	8001194 <pwr_off_detected>

	HAL_UART_Transmit(&huart1, (uint8_t*) "wakeTime\r\n", 10, 1000);
 8001a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a86:	220a      	movs	r2, #10
 8001a88:	490d      	ldr	r1, [pc, #52]	; (8001ac0 <wakeup+0x100>)
 8001a8a:	480e      	ldr	r0, [pc, #56]	; (8001ac4 <wakeup+0x104>)
 8001a8c:	f009 fbf6 	bl	800b27c <HAL_UART_Transmit>
}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40020400 	.word	0x40020400
 8001a98:	40020000 	.word	0x40020000
 8001a9c:	2000146c 	.word	0x2000146c
 8001aa0:	200014b4 	.word	0x200014b4
 8001aa4:	200016f8 	.word	0x200016f8
 8001aa8:	20001860 	.word	0x20001860
 8001aac:	20000330 	.word	0x20000330
 8001ab0:	40020418 	.word	0x40020418
 8001ab4:	20001938 	.word	0x20001938
 8001ab8:	200018f0 	.word	0x200018f0
 8001abc:	40000400 	.word	0x40000400
 8001ac0:	0801fb6c 	.word	0x0801fb6c
 8001ac4:	20001998 	.word	0x20001998

08001ac8 <green_led_blink>:

static void green_led_blink() {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
	GREEN_LED_PWM(900);
 8001acc:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <green_led_blink+0x5c>)
 8001ace:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001ad2:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(1000);
 8001ad4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ad8:	f001 fd0a 	bl	80034f0 <HAL_Delay>

	GREEN_LED_PWM(0);
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <green_led_blink+0x5c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(1000);
 8001ae2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ae6:	f001 fd03 	bl	80034f0 <HAL_Delay>

	GREEN_LED_PWM(900);
 8001aea:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <green_led_blink+0x5c>)
 8001aec:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001af0:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(1000);
 8001af2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001af6:	f001 fcfb 	bl	80034f0 <HAL_Delay>

	GREEN_LED_PWM(0);
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <green_led_blink+0x5c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(1000);
 8001b00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b04:	f001 fcf4 	bl	80034f0 <HAL_Delay>

	GREEN_LED_PWM(900);
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <green_led_blink+0x5c>)
 8001b0a:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001b0e:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(1000);
 8001b10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b14:	f001 fcec 	bl	80034f0 <HAL_Delay>
	GREEN_LED_PWM(0);
 8001b18:	4b02      	ldr	r3, [pc, #8]	; (8001b24 <green_led_blink+0x5c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	635a      	str	r2, [r3, #52]	; 0x34

}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40000400 	.word	0x40000400

08001b28 <led_awake_routine>:

static void led_awake_routine() {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is detected, then just turn the blue led on
 8001b2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b30:	485c      	ldr	r0, [pc, #368]	; (8001ca4 <led_awake_routine+0x17c>)
 8001b32:	f003 fc9d 	bl	8005470 <HAL_GPIO_ReadPin>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d00c      	beq.n	8001b56 <led_awake_routine+0x2e>
			{
		GREEN_LED_PWM(0);
 8001b3c:	4b5a      	ldr	r3, [pc, #360]	; (8001ca8 <led_awake_routine+0x180>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	635a      	str	r2, [r3, #52]	; 0x34
		RED_LED_PWM(0);
 8001b42:	4b59      	ldr	r3, [pc, #356]	; (8001ca8 <led_awake_routine+0x180>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	639a      	str	r2, [r3, #56]	; 0x38
		BLUE_LED_PWM(900);
 8001b48:	4a58      	ldr	r2, [pc, #352]	; (8001cac <led_awake_routine+0x184>)
 8001b4a:	f44f 7161 	mov.w	r1, #900	; 0x384
 8001b4e:	2008      	movs	r0, #8
 8001b50:	f7ff fa6a 	bl	8001028 <setSoftPWM>
			}

		}

	}
}
 8001b54:	e0a3      	b.n	8001c9e <led_awake_routine+0x176>
		BLUE_LED_PWM(0); //we turn off the blue led incase it was on before
 8001b56:	4a55      	ldr	r2, [pc, #340]	; (8001cac <led_awake_routine+0x184>)
 8001b58:	2100      	movs	r1, #0
 8001b5a:	2008      	movs	r0, #8
 8001b5c:	f7ff fa64 	bl	8001028 <setSoftPWM>
		if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8001b60:	4b53      	ldr	r3, [pc, #332]	; (8001cb0 <led_awake_routine+0x188>)
 8001b62:	edd3 7a08 	vldr	s15, [r3, #32]
 8001b66:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001cb4 <led_awake_routine+0x18c>
 8001b6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b72:	db0c      	blt.n	8001b8e <led_awake_routine+0x66>
			GREEN_LED_PWM(900);
 8001b74:	4b4c      	ldr	r3, [pc, #304]	; (8001ca8 <led_awake_routine+0x180>)
 8001b76:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001b7a:	635a      	str	r2, [r3, #52]	; 0x34
			RED_LED_PWM(0);
 8001b7c:	4b4a      	ldr	r3, [pc, #296]	; (8001ca8 <led_awake_routine+0x180>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	639a      	str	r2, [r3, #56]	; 0x38
			BLUE_LED_PWM(0);
 8001b82:	4a4a      	ldr	r2, [pc, #296]	; (8001cac <led_awake_routine+0x184>)
 8001b84:	2100      	movs	r1, #0
 8001b86:	2008      	movs	r0, #8
 8001b88:	f7ff fa4e 	bl	8001028 <setSoftPWM>
}
 8001b8c:	e087      	b.n	8001c9e <led_awake_routine+0x176>
			if (_RunTime_Packet.battery_voltage > battery_Low
 8001b8e:	4b48      	ldr	r3, [pc, #288]	; (8001cb0 <led_awake_routine+0x188>)
 8001b90:	edd3 7a08 	vldr	s15, [r3, #32]
 8001b94:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001cb8 <led_awake_routine+0x190>
 8001b98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba0:	dd24      	ble.n	8001bec <led_awake_routine+0xc4>
					&& _RunTime_Packet.battery_voltage <= battery_Full) {
 8001ba2:	4b43      	ldr	r3, [pc, #268]	; (8001cb0 <led_awake_routine+0x188>)
 8001ba4:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ba8:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001cb4 <led_awake_routine+0x18c>
 8001bac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb4:	d81a      	bhi.n	8001bec <led_awake_routine+0xc4>
				RED_LED_PWM(0);
 8001bb6:	4b3c      	ldr	r3, [pc, #240]	; (8001ca8 <led_awake_routine+0x180>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	639a      	str	r2, [r3, #56]	; 0x38
				BLUE_LED_PWM(0);
 8001bbc:	4a3b      	ldr	r2, [pc, #236]	; (8001cac <led_awake_routine+0x184>)
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	2008      	movs	r0, #8
 8001bc2:	f7ff fa31 	bl	8001028 <setSoftPWM>
				green_led_pwm_val += 70;
 8001bc6:	4b3d      	ldr	r3, [pc, #244]	; (8001cbc <led_awake_routine+0x194>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	3346      	adds	r3, #70	; 0x46
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	4b3b      	ldr	r3, [pc, #236]	; (8001cbc <led_awake_routine+0x194>)
 8001bd0:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8001bd2:	4b3a      	ldr	r3, [pc, #232]	; (8001cbc <led_awake_routine+0x194>)
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bda:	d902      	bls.n	8001be2 <led_awake_routine+0xba>
					green_led_pwm_val = 0;
 8001bdc:	4b37      	ldr	r3, [pc, #220]	; (8001cbc <led_awake_routine+0x194>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	801a      	strh	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001be2:	4b36      	ldr	r3, [pc, #216]	; (8001cbc <led_awake_routine+0x194>)
 8001be4:	881a      	ldrh	r2, [r3, #0]
 8001be6:	4b30      	ldr	r3, [pc, #192]	; (8001ca8 <led_awake_routine+0x180>)
 8001be8:	635a      	str	r2, [r3, #52]	; 0x34
 8001bea:	e058      	b.n	8001c9e <led_awake_routine+0x176>
			} else if (_RunTime_Packet.battery_voltage > battery_very_low
 8001bec:	4b30      	ldr	r3, [pc, #192]	; (8001cb0 <led_awake_routine+0x188>)
 8001bee:	edd3 7a08 	vldr	s15, [r3, #32]
 8001bf2:	eeb0 7a02 	vmov.f32	s14, #2	; 0x40100000  2.250
 8001bf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfe:	dd33      	ble.n	8001c68 <led_awake_routine+0x140>
					&& _RunTime_Packet.battery_voltage <= battery_Low) {
 8001c00:	4b2b      	ldr	r3, [pc, #172]	; (8001cb0 <led_awake_routine+0x188>)
 8001c02:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c06:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001cb8 <led_awake_routine+0x190>
 8001c0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c12:	d829      	bhi.n	8001c68 <led_awake_routine+0x140>
				BLUE_LED_PWM(0);
 8001c14:	4a25      	ldr	r2, [pc, #148]	; (8001cac <led_awake_routine+0x184>)
 8001c16:	2100      	movs	r1, #0
 8001c18:	2008      	movs	r0, #8
 8001c1a:	f7ff fa05 	bl	8001028 <setSoftPWM>
				green_led_pwm_val += 70;
 8001c1e:	4b27      	ldr	r3, [pc, #156]	; (8001cbc <led_awake_routine+0x194>)
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	3346      	adds	r3, #70	; 0x46
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <led_awake_routine+0x194>)
 8001c28:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8001c2a:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <led_awake_routine+0x194>)
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c32:	d902      	bls.n	8001c3a <led_awake_routine+0x112>
					green_led_pwm_val = 0;
 8001c34:	4b21      	ldr	r3, [pc, #132]	; (8001cbc <led_awake_routine+0x194>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	801a      	strh	r2, [r3, #0]
				red_led_pwm_val += 70;
 8001c3a:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <led_awake_routine+0x198>)
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	3346      	adds	r3, #70	; 0x46
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	4b1f      	ldr	r3, [pc, #124]	; (8001cc0 <led_awake_routine+0x198>)
 8001c44:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 8001c46:	4b1e      	ldr	r3, [pc, #120]	; (8001cc0 <led_awake_routine+0x198>)
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c4e:	d902      	bls.n	8001c56 <led_awake_routine+0x12e>
					red_led_pwm_val = 0;
 8001c50:	4b1b      	ldr	r3, [pc, #108]	; (8001cc0 <led_awake_routine+0x198>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	801a      	strh	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001c56:	4b19      	ldr	r3, [pc, #100]	; (8001cbc <led_awake_routine+0x194>)
 8001c58:	881a      	ldrh	r2, [r3, #0]
 8001c5a:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <led_awake_routine+0x180>)
 8001c5c:	635a      	str	r2, [r3, #52]	; 0x34
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8001c5e:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <led_awake_routine+0x198>)
 8001c60:	881a      	ldrh	r2, [r3, #0]
 8001c62:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <led_awake_routine+0x180>)
 8001c64:	639a      	str	r2, [r3, #56]	; 0x38
 8001c66:	e01a      	b.n	8001c9e <led_awake_routine+0x176>
				GREEN_LED_PWM(0);
 8001c68:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <led_awake_routine+0x180>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	635a      	str	r2, [r3, #52]	; 0x34
				BLUE_LED_PWM(0);
 8001c6e:	4a0f      	ldr	r2, [pc, #60]	; (8001cac <led_awake_routine+0x184>)
 8001c70:	2100      	movs	r1, #0
 8001c72:	2008      	movs	r0, #8
 8001c74:	f7ff f9d8 	bl	8001028 <setSoftPWM>
				red_led_pwm_val += 70;
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <led_awake_routine+0x198>)
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	3346      	adds	r3, #70	; 0x46
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <led_awake_routine+0x198>)
 8001c82:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 8001c84:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <led_awake_routine+0x198>)
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c8c:	d902      	bls.n	8001c94 <led_awake_routine+0x16c>
					red_led_pwm_val = 0;
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <led_awake_routine+0x198>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	801a      	strh	r2, [r3, #0]
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8001c94:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <led_awake_routine+0x198>)
 8001c96:	881a      	ldrh	r2, [r3, #0]
 8001c98:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <led_awake_routine+0x180>)
 8001c9a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001c9c:	e7ff      	b.n	8001c9e <led_awake_routine+0x176>
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40020000 	.word	0x40020000
 8001ca8:	40000400 	.word	0x40000400
 8001cac:	20000330 	.word	0x20000330
 8001cb0:	2000146c 	.word	0x2000146c
 8001cb4:	405147ae 	.word	0x405147ae
 8001cb8:	401b851f 	.word	0x401b851f
 8001cbc:	200012d0 	.word	0x200012d0
 8001cc0:	200012d2 	.word	0x200012d2

08001cc4 <ver_GetUid>:


static uint8_t sUid[13];	//12-bit asci

//unique ID from MCU
char* ver_GetUid(void) {
 8001cc4:	b590      	push	{r4, r7, lr}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
	uint32_t iWafer;

	iWafer = HAL_GetUIDw1() & 0x00FFul;
 8001cca:	f001 fc61 	bl	8003590 <HAL_GetUIDw1>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	607b      	str	r3, [r7, #4]
	// 7 lot numbers are already in ASCII
	*(uint32_t*) (&sUid[0]) = HAL_GetUIDw1() >> 8;
 8001cd4:	f001 fc5c 	bl	8003590 <HAL_GetUIDw1>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	4a1d      	ldr	r2, [pc, #116]	; (8001d50 <ver_GetUid+0x8c>)
 8001cdc:	0a1b      	lsrs	r3, r3, #8
 8001cde:	6013      	str	r3, [r2, #0]
	*(uint32_t*) (&sUid[3]) = HAL_GetUIDw2();
 8001ce0:	4c1c      	ldr	r4, [pc, #112]	; (8001d54 <ver_GetUid+0x90>)
 8001ce2:	f001 fc61 	bl	80035a8 <HAL_GetUIDw2>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	6023      	str	r3, [r4, #0]

	// Convert wafer number to 1 ASCII character
	if (iWafer >= 36)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b23      	cmp	r3, #35	; 0x23
 8001cee:	d909      	bls.n	8001d04 <ver_GetUid+0x40>
		sUid[7] = (iWafer >= 62) ? 'z' : ('a' + (iWafer - 36));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b3d      	cmp	r3, #61	; 0x3d
 8001cf4:	bf28      	it	cs
 8001cf6:	233d      	movcs	r3, #61	; 0x3d
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	333d      	adds	r3, #61	; 0x3d
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <ver_GetUid+0x8c>)
 8001d00:	71da      	strb	r2, [r3, #7]
 8001d02:	e00b      	b.n	8001d1c <ver_GetUid+0x58>
	// Display with 10 + 26 + 26 symbols
	else
		sUid[7] = ((iWafer >= 10) ? 'A' : '0') + iWafer;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b09      	cmp	r3, #9
 8001d08:	d901      	bls.n	8001d0e <ver_GetUid+0x4a>
 8001d0a:	2241      	movs	r2, #65	; 0x41
 8001d0c:	e000      	b.n	8001d10 <ver_GetUid+0x4c>
 8001d0e:	2230      	movs	r2, #48	; 0x30
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	4413      	add	r3, r2
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <ver_GetUid+0x8c>)
 8001d1a:	71da      	strb	r2, [r3, #7]

	// Convert X and Y to 4 ASCII-HEX
	CharToHexasc(&sUid[8], (HAL_GetUIDw0() >> 16) & 0x00FFul);
 8001d1c:	f001 fc2c 	bl	8003578 <HAL_GetUIDw0>
 8001d20:	4603      	mov	r3, r0
 8001d22:	0c1b      	lsrs	r3, r3, #16
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	4619      	mov	r1, r3
 8001d28:	480b      	ldr	r0, [pc, #44]	; (8001d58 <ver_GetUid+0x94>)
 8001d2a:	f010 f807 	bl	8011d3c <CharToHexasc>
	CharToHexasc(&sUid[10], HAL_GetUIDw0() & 0x00FFul);
 8001d2e:	f001 fc23 	bl	8003578 <HAL_GetUIDw0>
 8001d32:	4603      	mov	r3, r0
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	4619      	mov	r1, r3
 8001d38:	4808      	ldr	r0, [pc, #32]	; (8001d5c <ver_GetUid+0x98>)
 8001d3a:	f00f ffff 	bl	8011d3c <CharToHexasc>
	sUid[12] = 0;
 8001d3e:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <ver_GetUid+0x8c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	731a      	strb	r2, [r3, #12]
	return ((char*) sUid);
 8001d44:	4b02      	ldr	r3, [pc, #8]	; (8001d50 <ver_GetUid+0x8c>)
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd90      	pop	{r4, r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200016fc 	.word	0x200016fc
 8001d54:	200016ff 	.word	0x200016ff
 8001d58:	20001704 	.word	0x20001704
 8001d5c:	20001706 	.word	0x20001706

08001d60 <app_main>:

void app_main() {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b088      	sub	sp, #32
 8001d64:	af00      	add	r7, sp, #0

	uint8_t stop_measurement = 1;
 8001d66:	2301      	movs	r3, #1
 8001d68:	77fb      	strb	r3, [r7, #31]
	memset(&_RunTime_Packet, 0, sizeof(_RunTime_Packet));
 8001d6a:	223c      	movs	r2, #60	; 0x3c
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	487a      	ldr	r0, [pc, #488]	; (8001f58 <app_main+0x1f8>)
 8001d70:	f019 f8ca 	bl	801af08 <memset>

	load_param();
 8001d74:	f7ff fb1e 	bl	80013b4 <load_param>

	MX_USB_DEVICE_Init(); //initialize usb anyways
 8001d78:	f018 fa80 	bl	801a27c <MX_USB_DEVICE_Init>
	prev_usb_time_ = HAL_GetTick();
 8001d7c:	f001 fbac 	bl	80034d8 <HAL_GetTick>
 8001d80:	4603      	mov	r3, r0
 8001d82:	4a76      	ldr	r2, [pc, #472]	; (8001f5c <app_main+0x1fc>)
 8001d84:	6013      	str	r3, [r2, #0]
//
//
	if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 8001d86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d8a:	4875      	ldr	r0, [pc, #468]	; (8001f60 <app_main+0x200>)
 8001d8c:	f003 fb70 	bl	8005470 <HAL_GPIO_ReadPin>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d102      	bne.n	8001d9c <app_main+0x3c>
		init_sps30();
 8001d96:	f7ff fcab 	bl	80016f0 <init_sps30>
 8001d9a:	e012      	b.n	8001dc2 <app_main+0x62>
	} else {
		_RunTime_Packet.usb_detection = 0;
 8001d9c:	4b6e      	ldr	r3, [pc, #440]	; (8001f58 <app_main+0x1f8>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		_RunTime_Packet.usb_first_start = 1;
 8001da4:	4b6c      	ldr	r3, [pc, #432]	; (8001f58 <app_main+0x1f8>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		_RunTime_Packet.usb_active_disable_pm = 1;
 8001dac:	4b6a      	ldr	r3, [pc, #424]	; (8001f58 <app_main+0x1f8>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		_RunTime_Packet.usb_start_timer = 1;
 8001db4:	4b68      	ldr	r3, [pc, #416]	; (8001f58 <app_main+0x1f8>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		usb_time_keep = 0;
 8001dbc:	4b69      	ldr	r3, [pc, #420]	; (8001f64 <app_main+0x204>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
	}

	//init_sps30();
	init_scd4x_i2c();
 8001dc2:	f7ff fbdf 	bl	8001584 <init_scd4x_i2c>
	console_init();
 8001dc6:	f00e fa37 	bl	8010238 <console_init>
	Rtc_set_alarm();
 8001dca:	f00f fe43 	bl	8011a54 <Rtc_set_alarm>

	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8001dce:	f107 0318 	add.w	r3, r7, #24
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4864      	ldr	r0, [pc, #400]	; (8001f68 <app_main+0x208>)
 8001dd8:	f006 ff0c 	bl	8008bf4 <HAL_RTC_GetDate>
	_RunTime_Packet.prev_day = sDate.Date;
 8001ddc:	7eba      	ldrb	r2, [r7, #26]
 8001dde:	4b5e      	ldr	r3, [pc, #376]	; (8001f58 <app_main+0x1f8>)
 8001de0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	//if this flag is -1 this means that file creation failed at the start of program because usb was connected
	//as accessing both usb and sdcard is not possible
	//therefore we will run file creation again when usb operation is completed. it takes about 30second
	//untill that 30second we wont even go to sleep as usb is connected so power is not the issue
	_RunTime_Packet.sd_file_creation = createfile(_Flash_Packet.File_Name,
 8001de4:	4961      	ldr	r1, [pc, #388]	; (8001f6c <app_main+0x20c>)
 8001de6:	4862      	ldr	r0, [pc, #392]	; (8001f70 <app_main+0x210>)
 8001de8:	f018 f9cc 	bl	801a184 <createfile>
 8001dec:	4603      	mov	r3, r0
 8001dee:	461a      	mov	r2, r3
 8001df0:	4b59      	ldr	r3, [pc, #356]	; (8001f58 <app_main+0x1f8>)
 8001df2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			_Flash_Packet.File_Format);

	HAL_TIM_Base_Start(&htim1);
 8001df6:	485f      	ldr	r0, [pc, #380]	; (8001f74 <app_main+0x214>)
 8001df8:	f008 f9c8 	bl	800a18c <HAL_TIM_Base_Start>
		HAL_DMA_Start(&hdma_tim1_up, (uint32_t) &(dataA[0]),
 8001dfc:	495e      	ldr	r1, [pc, #376]	; (8001f78 <app_main+0x218>)
 8001dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e02:	4a5e      	ldr	r2, [pc, #376]	; (8001f7c <app_main+0x21c>)
 8001e04:	485e      	ldr	r0, [pc, #376]	; (8001f80 <app_main+0x220>)
 8001e06:	f002 fa9f 	bl	8004348 <HAL_DMA_Start>
				(uint32_t) &(BLUE_LED_GPIO_Port->BSRR),
				sizeof(dataA) / sizeof(dataA[0]));
		__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001e0a:	4b5a      	ldr	r3, [pc, #360]	; (8001f74 <app_main+0x214>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	4b58      	ldr	r3, [pc, #352]	; (8001f74 <app_main+0x214>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e18:	60da      	str	r2, [r3, #12]
		BLUE_LED_PWM(0);
 8001e1a:	4a57      	ldr	r2, [pc, #348]	; (8001f78 <app_main+0x218>)
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	2008      	movs	r0, #8
 8001e20:	f7ff f902 	bl	8001028 <setSoftPWM>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //for green led
 8001e24:	2100      	movs	r1, #0
 8001e26:	4857      	ldr	r0, [pc, #348]	; (8001f84 <app_main+0x224>)
 8001e28:	f008 faf4 	bl	800a414 <HAL_TIM_PWM_Start>
		GREEN_LED_PWM(0);
 8001e2c:	4b56      	ldr	r3, [pc, #344]	; (8001f88 <app_main+0x228>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //for red led
 8001e32:	2104      	movs	r1, #4
 8001e34:	4853      	ldr	r0, [pc, #332]	; (8001f84 <app_main+0x224>)
 8001e36:	f008 faed 	bl	800a414 <HAL_TIM_PWM_Start>
		RED_LED_PWM(0);
 8001e3a:	4b53      	ldr	r3, [pc, #332]	; (8001f88 <app_main+0x228>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	639a      	str	r2, [r3, #56]	; 0x38

	green_led_blink();
 8001e40:	f7ff fe42 	bl	8001ac8 <green_led_blink>

//MX_USB_DEVICE_DeInit();
	HAL_UART_Transmit(&huart1, (uint8_t*) "System Has Started \r\n", 21, 200);
 8001e44:	23c8      	movs	r3, #200	; 0xc8
 8001e46:	2215      	movs	r2, #21
 8001e48:	4950      	ldr	r1, [pc, #320]	; (8001f8c <app_main+0x22c>)
 8001e4a:	4851      	ldr	r0, [pc, #324]	; (8001f90 <app_main+0x230>)
 8001e4c:	f009 fa16 	bl	800b27c <HAL_UART_Transmit>

	while (1) {

		prev_sleep_time = HAL_GetTick();
 8001e50:	f001 fb42 	bl	80034d8 <HAL_GetTick>
 8001e54:	4603      	mov	r3, r0
 8001e56:	4a4f      	ldr	r2, [pc, #316]	; (8001f94 <app_main+0x234>)
 8001e58:	6013      	str	r3, [r2, #0]
		prev_sleep_time_pm_co2 = HAL_GetTick();
 8001e5a:	f001 fb3d 	bl	80034d8 <HAL_GetTick>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	4a4d      	ldr	r2, [pc, #308]	; (8001f98 <app_main+0x238>)
 8001e62:	6013      	str	r3, [r2, #0]
		stop_measurement = 1;
 8001e64:	2301      	movs	r3, #1
 8001e66:	77fb      	strb	r3, [r7, #31]
		while (HAL_GetTick() - prev_sleep_time <= sleep_time) //stay awake for only 1min and then sleep
 8001e68:	e135      	b.n	80020d6 <app_main+0x376>
		{

			if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is active dont go to sleep
 8001e6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e6e:	483c      	ldr	r0, [pc, #240]	; (8001f60 <app_main+0x200>)
 8001e70:	f003 fafe 	bl	8005470 <HAL_GPIO_ReadPin>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d004      	beq.n	8001e84 <app_main+0x124>
					{
				prev_sleep_time = HAL_GetTick();
 8001e7a:	f001 fb2d 	bl	80034d8 <HAL_GetTick>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4a44      	ldr	r2, [pc, #272]	; (8001f94 <app_main+0x234>)
 8001e82:	6013      	str	r3, [r2, #0]
			 * sometimes it does but this is the solution to solve it.

			 */

			RTC_TimeTypeDef gTime;
			HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 8001e84:	1d3b      	adds	r3, r7, #4
 8001e86:	2200      	movs	r2, #0
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4837      	ldr	r0, [pc, #220]	; (8001f68 <app_main+0x208>)
 8001e8c:	f006 fdd0 	bl	8008a30 <HAL_RTC_GetTime>
			RTC_DateTypeDef sDate;
			HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8001e90:	463b      	mov	r3, r7
 8001e92:	2200      	movs	r2, #0
 8001e94:	4619      	mov	r1, r3
 8001e96:	4834      	ldr	r0, [pc, #208]	; (8001f68 <app_main+0x208>)
 8001e98:	f006 feac 	bl	8008bf4 <HAL_RTC_GetDate>

			if (_RunTime_Packet.prev_day != sDate.Date) {
 8001e9c:	4b2e      	ldr	r3, [pc, #184]	; (8001f58 <app_main+0x1f8>)
 8001e9e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8001ea2:	78bb      	ldrb	r3, [r7, #2]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d007      	beq.n	8001eb8 <app_main+0x158>
				_RunTime_Packet.day_changed = 1;
 8001ea8:	4b2b      	ldr	r3, [pc, #172]	; (8001f58 <app_main+0x1f8>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				_RunTime_Packet.prev_day = sDate.Date;
 8001eb0:	78ba      	ldrb	r2, [r7, #2]
 8001eb2:	4b29      	ldr	r3, [pc, #164]	; (8001f58 <app_main+0x1f8>)
 8001eb4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			}

			check_peripheral_error();
 8001eb8:	f7ff fcc2 	bl	8001840 <check_peripheral_error>

//this routine is for when usb is detected
//the time calculated right now for mass storage to do its operation is about 30second but time is kept about 50sec to be on safe side
//this routine is specifically made for sps30 as for some reason sps30 uart stops working when usb is connected
			if (_RunTime_Packet.usb_detection
 8001ebc:	4b26      	ldr	r3, [pc, #152]	; (8001f58 <app_main+0x1f8>)
 8001ebe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d104      	bne.n	8001ed0 <app_main+0x170>
					|| _RunTime_Packet.usb_first_start) {
 8001ec6:	4b24      	ldr	r3, [pc, #144]	; (8001f58 <app_main+0x1f8>)
 8001ec8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d040      	beq.n	8001f52 <app_main+0x1f2>

				if (_RunTime_Packet.usb_first_start) //part of old implementation not being used
 8001ed0:	4b21      	ldr	r3, [pc, #132]	; (8001f58 <app_main+0x1f8>)
 8001ed2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <app_main+0x182>
				{

					start_usb_timer = 1;
 8001eda:	4b30      	ldr	r3, [pc, #192]	; (8001f9c <app_main+0x23c>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	701a      	strb	r2, [r3, #0]
 8001ee0:	e003      	b.n	8001eea <app_main+0x18a>
				} else {
					_RunTime_Packet.usb_active_disable_pm = 1; //old implementation not being used
 8001ee2:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <app_main+0x1f8>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				}

				if ((HAL_GetTick() - prev_usb_time_ >= usb_time_)) //50sec has passed our usb must have initialized now
 8001eea:	f001 faf5 	bl	80034d8 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	4b1a      	ldr	r3, [pc, #104]	; (8001f5c <app_main+0x1fc>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	1ad2      	subs	r2, r2, r3
 8001ef6:	4b2a      	ldr	r3, [pc, #168]	; (8001fa0 <app_main+0x240>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d324      	bcc.n	8001f48 <app_main+0x1e8>
				{
					if (_RunTime_Packet.sd_file_creation == -1
 8001efe:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <app_main+0x1f8>)
 8001f00:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8001f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f08:	d108      	bne.n	8001f1c <app_main+0x1bc>
							&& _RunTime_Packet.usb_first_start) {
 8001f0a:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <app_main+0x1f8>)
 8001f0c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <app_main+0x1bc>
						createfile(_Flash_Packet.File_Name,
 8001f14:	4915      	ldr	r1, [pc, #84]	; (8001f6c <app_main+0x20c>)
 8001f16:	4816      	ldr	r0, [pc, #88]	; (8001f70 <app_main+0x210>)
 8001f18:	f018 f934 	bl	801a184 <createfile>
								_Flash_Packet.File_Format);
					}

					_RunTime_Packet.usb_first_start = 0;
 8001f1c:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <app_main+0x1f8>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
					_RunTime_Packet.usb_detection = 0;
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <app_main+0x1f8>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
					_RunTime_Packet.usb_active_disable_pm = 0;
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <app_main+0x1f8>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
					start_usb_timer = 0;
 8001f34:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <app_main+0x23c>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	701a      	strb	r2, [r3, #0]

					init_sps30();
 8001f3a:	f7ff fbd9 	bl	80016f0 <init_sps30>
					//now as after connection of usb the 50seconds have passed now we can enable PM uart to access it

					prev_sleep_time_pm_co2 = HAL_GetTick(); //as we need to take measurements now
 8001f3e:	f001 facb 	bl	80034d8 <HAL_GetTick>
 8001f42:	4603      	mov	r3, r0
 8001f44:	4a14      	ldr	r2, [pc, #80]	; (8001f98 <app_main+0x238>)
 8001f46:	6013      	str	r3, [r2, #0]
				}

				prev_sleep_time = HAL_GetTick();
 8001f48:	f001 fac6 	bl	80034d8 <HAL_GetTick>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	4a11      	ldr	r2, [pc, #68]	; (8001f94 <app_main+0x234>)
 8001f50:	6013      	str	r3, [r2, #0]
			}

			console_process();
 8001f52:	f00e f925 	bl	80101a0 <console_process>

			//we wont take measurement until usb_detection flag disables. this flag means usb is in operation right now.
			//reason of doing this is when usb is in operation sps30 does not work so we wait for usb operation to end and then take the readings
			while ((HAL_GetTick() - prev_sleep_time_pm_co2 <= sleep_time_pm_co2)
 8001f56:	e037      	b.n	8001fc8 <app_main+0x268>
 8001f58:	2000146c 	.word	0x2000146c
 8001f5c:	200016f8 	.word	0x200016f8
 8001f60:	40020000 	.word	0x40020000
 8001f64:	200014b4 	.word	0x200014b4
 8001f68:	200017bc 	.word	0x200017bc
 8001f6c:	20001338 	.word	0x20001338
 8001f70:	200012d4 	.word	0x200012d4
 8001f74:	20001860 	.word	0x20001860
 8001f78:	20000330 	.word	0x20000330
 8001f7c:	40020418 	.word	0x40020418
 8001f80:	20001938 	.word	0x20001938
 8001f84:	200018f0 	.word	0x200018f0
 8001f88:	40000400 	.word	0x40000400
 8001f8c:	0801fb78 	.word	0x0801fb78
 8001f90:	20001998 	.word	0x20001998
 8001f94:	200016f0 	.word	0x200016f0
 8001f98:	200016f4 	.word	0x200016f4
 8001f9c:	200014b0 	.word	0x200014b0
 8001fa0:	20000008 	.word	0x20000008
					&& !_RunTime_Packet.usb_detection
					&& !_RunTime_Packet.usb_first_start)
			//if(!_RunTime_Packet.usb_detection && !_RunTime_Packet.usb_first_start)
			{

				console_process(); //run console here also so user can still access it
 8001fa4:	f00e f8fc 	bl	80101a0 <console_process>
				if (!_RunTime_Packet.scd4x_i2c_error) {
 8001fa8:	4b6b      	ldr	r3, [pc, #428]	; (8002158 <app_main+0x3f8>)
 8001faa:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <app_main+0x256>
					get_scd4x_measurement();
 8001fb2:	f7ff fb03 	bl	80015bc <get_scd4x_measurement>
				}

				get_sps30_measurement();
 8001fb6:	f7ff fbb9 	bl	800172c <get_sps30_measurement>

				adc_Measure(&_RunTime_Packet.battery_voltage);
 8001fba:	4868      	ldr	r0, [pc, #416]	; (800215c <app_main+0x3fc>)
 8001fbc:	f00f ff52 	bl	8011e64 <adc_Measure>
				led_awake_routine();
 8001fc0:	f7ff fdb2 	bl	8001b28 <led_awake_routine>
				pwr_off_detected();
 8001fc4:	f7ff f8e6 	bl	8001194 <pwr_off_detected>
			while ((HAL_GetTick() - prev_sleep_time_pm_co2 <= sleep_time_pm_co2)
 8001fc8:	f001 fa86 	bl	80034d8 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	4b64      	ldr	r3, [pc, #400]	; (8002160 <app_main+0x400>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	1ad2      	subs	r2, r2, r3
 8001fd4:	4b63      	ldr	r3, [pc, #396]	; (8002164 <app_main+0x404>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d809      	bhi.n	8001ff0 <app_main+0x290>
					&& !_RunTime_Packet.usb_detection
 8001fdc:	4b5e      	ldr	r3, [pc, #376]	; (8002158 <app_main+0x3f8>)
 8001fde:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d104      	bne.n	8001ff0 <app_main+0x290>
					&& !_RunTime_Packet.usb_first_start)
 8001fe6:	4b5c      	ldr	r3, [pc, #368]	; (8002158 <app_main+0x3f8>)
 8001fe8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0d9      	beq.n	8001fa4 <app_main+0x244>
			}

			/*
			 * if user performs calibration
			 */
			sensor_calibration();
 8001ff0:	f7ff fc64 	bl	80018bc <sensor_calibration>

			//dont stop measurement if USB is detected, we keep taking measurement after interval as power is not an issue if usb is active
			if (stop_measurement && !_RunTime_Packet.usb_detection
 8001ff4:	7ffb      	ldrb	r3, [r7, #31]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d017      	beq.n	800202a <app_main+0x2ca>
 8001ffa:	4b57      	ldr	r3, [pc, #348]	; (8002158 <app_main+0x3f8>)
 8001ffc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002000:	2b00      	cmp	r3, #0
 8002002:	d112      	bne.n	800202a <app_main+0x2ca>
					&& !_RunTime_Packet.usb_first_start
 8002004:	4b54      	ldr	r3, [pc, #336]	; (8002158 <app_main+0x3f8>)
 8002006:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10d      	bne.n	800202a <app_main+0x2ca>
					&& !HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port,
 800200e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002012:	4855      	ldr	r0, [pc, #340]	; (8002168 <app_main+0x408>)
 8002014:	f003 fa2c 	bl	8005470 <HAL_GPIO_ReadPin>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d105      	bne.n	800202a <app_main+0x2ca>
							USB_DETECT_Pin)) {
				scd4x_stop_periodic_measurement();
 800201e:	f010 f85b 	bl	80120d8 <scd4x_stop_periodic_measurement>
				sps30_stop_measurement();
 8002022:	f010 fff1 	bl	8013008 <sps30_stop_measurement>
				stop_measurement = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	77fb      	strb	r3, [r7, #31]

//if USB is active and time interval is passed then we still save into the file, but make sure usb is not working at that time otherwise sdcard wont take data
//thats why usb_Detection flag is used
//this routine is specifically to table the issue, if user keeps the usb plugged in for somereason
//because the mostly the system will save data before going to sleep. if usb cable is plugged in it wont go to sleep, but with routine we still save the data after set intervals
			if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)
 800202a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800202e:	484e      	ldr	r0, [pc, #312]	; (8002168 <app_main+0x408>)
 8002030:	f003 fa1e 	bl	8005470 <HAL_GPIO_ReadPin>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d02e      	beq.n	8002098 <app_main+0x338>
					&& set_alarm_Time && !_RunTime_Packet.usb_detection) {
 800203a:	4b4c      	ldr	r3, [pc, #304]	; (800216c <app_main+0x40c>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d02a      	beq.n	8002098 <app_main+0x338>
 8002042:	4b45      	ldr	r3, [pc, #276]	; (8002158 <app_main+0x3f8>)
 8002044:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002048:	2b00      	cmp	r3, #0
 800204a:	d125      	bne.n	8002098 <app_main+0x338>
				//if day changes create new file
				//if user change filename or fileformat then also create new file with that format or name
				if (_RunTime_Packet.day_changed
 800204c:	4b42      	ldr	r3, [pc, #264]	; (8002158 <app_main+0x3f8>)
 800204e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002052:	2b00      	cmp	r3, #0
 8002054:	d109      	bne.n	800206a <app_main+0x30a>
						|| _RunTime_Packet.filename_changed
 8002056:	4b40      	ldr	r3, [pc, #256]	; (8002158 <app_main+0x3f8>)
 8002058:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800205c:	2b00      	cmp	r3, #0
 800205e:	d104      	bne.n	800206a <app_main+0x30a>
						|| _RunTime_Packet.fileformat_changed) {
 8002060:	4b3d      	ldr	r3, [pc, #244]	; (8002158 <app_main+0x3f8>)
 8002062:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00f      	beq.n	800208a <app_main+0x32a>
					_RunTime_Packet.day_changed = 0;
 800206a:	4b3b      	ldr	r3, [pc, #236]	; (8002158 <app_main+0x3f8>)
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					_RunTime_Packet.filename_changed = 0;
 8002072:	4b39      	ldr	r3, [pc, #228]	; (8002158 <app_main+0x3f8>)
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					_RunTime_Packet.fileformat_changed = 0;
 800207a:	4b37      	ldr	r3, [pc, #220]	; (8002158 <app_main+0x3f8>)
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					createfile(_Flash_Packet.File_Name,
 8002082:	493b      	ldr	r1, [pc, #236]	; (8002170 <app_main+0x410>)
 8002084:	483b      	ldr	r0, [pc, #236]	; (8002174 <app_main+0x414>)
 8002086:	f018 f87d 	bl	801a184 <createfile>
							_Flash_Packet.File_Format);
				}
				filesaving_process();
 800208a:	f018 f863 	bl	801a154 <filesaving_process>

				prev_sleep_time_pm_co2 = HAL_GetTick(); //we also enable sensors to take reading then
 800208e:	f001 fa23 	bl	80034d8 <HAL_GetTick>
 8002092:	4603      	mov	r3, r0
 8002094:	4a32      	ldr	r2, [pc, #200]	; (8002160 <app_main+0x400>)
 8002096:	6013      	str	r3, [r2, #0]
			}

			Rtc_set_alarm();
 8002098:	f00f fcdc 	bl	8011a54 <Rtc_set_alarm>

			adc_Measure(&_RunTime_Packet.battery_voltage);
 800209c:	482f      	ldr	r0, [pc, #188]	; (800215c <app_main+0x3fc>)
 800209e:	f00f fee1 	bl	8011e64 <adc_Measure>
			led_awake_routine();
 80020a2:	f7ff fd41 	bl	8001b28 <led_awake_routine>
			save_data();
 80020a6:	f7ff fa39 	bl	800151c <save_data>

			if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 80020aa:	2101      	movs	r1, #1
 80020ac:	482e      	ldr	r0, [pc, #184]	; (8002168 <app_main+0x408>)
 80020ae:	f003 f9df 	bl	8005470 <HAL_GPIO_ReadPin>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d006      	beq.n	80020c6 <app_main+0x366>
				_RunTime_Packet.motion_detection = 1;
 80020b8:	4b27      	ldr	r3, [pc, #156]	; (8002158 <app_main+0x3f8>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	731a      	strb	r2, [r3, #12]
				debug_pir_motion = 1;
 80020be:	4b2e      	ldr	r3, [pc, #184]	; (8002178 <app_main+0x418>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	701a      	strb	r2, [r3, #0]
 80020c4:	e005      	b.n	80020d2 <app_main+0x372>
			} else {
				_RunTime_Packet.motion_detection = 0;
 80020c6:	4b24      	ldr	r3, [pc, #144]	; (8002158 <app_main+0x3f8>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	731a      	strb	r2, [r3, #12]
				debug_pir_motion = 1;
 80020cc:	4b2a      	ldr	r3, [pc, #168]	; (8002178 <app_main+0x418>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	701a      	strb	r2, [r3, #0]

			}
			pwr_off_detected();
 80020d2:	f7ff f85f 	bl	8001194 <pwr_off_detected>
		while (HAL_GetTick() - prev_sleep_time <= sleep_time) //stay awake for only 1min and then sleep
 80020d6:	f001 f9ff 	bl	80034d8 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	4b27      	ldr	r3, [pc, #156]	; (800217c <app_main+0x41c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	1ad2      	subs	r2, r2, r3
 80020e2:	4b27      	ldr	r3, [pc, #156]	; (8002180 <app_main+0x420>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	f67f aebf 	bls.w	8001e6a <app_main+0x10a>
		}

		//if day changes create new file
		//if user change filename or fileformat then also create new file with that format or name
		if (_RunTime_Packet.day_changed || _RunTime_Packet.filename_changed
 80020ec:	4b1a      	ldr	r3, [pc, #104]	; (8002158 <app_main+0x3f8>)
 80020ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10f      	bne.n	8002116 <app_main+0x3b6>
 80020f6:	4b18      	ldr	r3, [pc, #96]	; (8002158 <app_main+0x3f8>)
 80020f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10a      	bne.n	8002116 <app_main+0x3b6>
				|| _RunTime_Packet.fileformat_changed || _RunTime_Packet.sd_file_creation == -1) {
 8002100:	4b15      	ldr	r3, [pc, #84]	; (8002158 <app_main+0x3f8>)
 8002102:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002106:	2b00      	cmp	r3, #0
 8002108:	d105      	bne.n	8002116 <app_main+0x3b6>
 800210a:	4b13      	ldr	r3, [pc, #76]	; (8002158 <app_main+0x3f8>)
 800210c:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8002110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002114:	d114      	bne.n	8002140 <app_main+0x3e0>
			_RunTime_Packet.day_changed = 0;
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <app_main+0x3f8>)
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			_RunTime_Packet.filename_changed = 0;
 800211e:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <app_main+0x3f8>)
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			_RunTime_Packet.fileformat_changed = 0;
 8002126:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <app_main+0x3f8>)
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			_RunTime_Packet.sd_file_creation = createfile(_Flash_Packet.File_Name, _Flash_Packet.File_Format);
 800212e:	4910      	ldr	r1, [pc, #64]	; (8002170 <app_main+0x410>)
 8002130:	4810      	ldr	r0, [pc, #64]	; (8002174 <app_main+0x414>)
 8002132:	f018 f827 	bl	801a184 <createfile>
 8002136:	4603      	mov	r3, r0
 8002138:	461a      	mov	r2, r3
 800213a:	4b07      	ldr	r3, [pc, #28]	; (8002158 <app_main+0x3f8>)
 800213c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
		filesaving_process();
 8002140:	f018 f808 	bl	801a154 <filesaving_process>
		prev_sleep_time = HAL_GetTick();
 8002144:	f001 f9c8 	bl	80034d8 <HAL_GetTick>
 8002148:	4603      	mov	r3, r0
 800214a:	4a0c      	ldr	r2, [pc, #48]	; (800217c <app_main+0x41c>)
 800214c:	6013      	str	r3, [r2, #0]
		sleep();
 800214e:	f7ff fbdd 	bl	800190c <sleep>
		wakeup();
 8002152:	f7ff fc35 	bl	80019c0 <wakeup>
		prev_sleep_time = HAL_GetTick();
 8002156:	e67b      	b.n	8001e50 <app_main+0xf0>
 8002158:	2000146c 	.word	0x2000146c
 800215c:	2000148c 	.word	0x2000148c
 8002160:	200016f4 	.word	0x200016f4
 8002164:	20000004 	.word	0x20000004
 8002168:	40020000 	.word	0x40020000
 800216c:	20000025 	.word	0x20000025
 8002170:	20001338 	.word	0x20001338
 8002174:	200012d4 	.word	0x200012d4
 8002178:	200014b9 	.word	0x200014b9
 800217c:	200016f0 	.word	0x200016f0
 8002180:	20000000 	.word	0x20000000

08002184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002188:	f001 f940 	bl	800340c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800218c:	f000 f81c 	bl	80021c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//comment usb initialization from here
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002190:	f000 faf4 	bl	800277c <MX_GPIO_Init>
  MX_DMA_Init();
 8002194:	f000 fad2 	bl	800273c <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8002198:	f000 f93c 	bl	8002414 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 800219c:	f000 fa7a 	bl	8002694 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80021a0:	f000 f900 	bl	80023a4 <MX_RTC_Init>
  MX_I2C1_Init();
 80021a4:	f000 f8d0 	bl	8002348 <MX_I2C1_Init>
  MX_TIM2_Init();
 80021a8:	f000 f9a4 	bl	80024f4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80021ac:	f000 fa9c 	bl	80026e8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80021b0:	f000 f878 	bl	80022a4 <MX_ADC1_Init>
  //MX_USB_DEVICE_Init();
  MX_FATFS_Init();
 80021b4:	f00f fa9e 	bl	80116f4 <MX_FATFS_Init>
  MX_TIM1_Init();
 80021b8:	f000 f94c 	bl	8002454 <MX_TIM1_Init>
  MX_TIM3_Init();
 80021bc:	f000 f9e8 	bl	8002590 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  app_main(); //keep mx_usb_device_init off here
 80021c0:	f7ff fdce 	bl	8001d60 <app_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80021c4:	e7fe      	b.n	80021c4 <main+0x40>
	...

080021c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b094      	sub	sp, #80	; 0x50
 80021cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ce:	f107 0320 	add.w	r3, r7, #32
 80021d2:	2230      	movs	r2, #48	; 0x30
 80021d4:	2100      	movs	r1, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f018 fe96 	bl	801af08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021dc:	f107 030c 	add.w	r3, r7, #12
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ec:	2300      	movs	r3, #0
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	4b2a      	ldr	r3, [pc, #168]	; (800229c <SystemClock_Config+0xd4>)
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	4a29      	ldr	r2, [pc, #164]	; (800229c <SystemClock_Config+0xd4>)
 80021f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021fa:	6413      	str	r3, [r2, #64]	; 0x40
 80021fc:	4b27      	ldr	r3, [pc, #156]	; (800229c <SystemClock_Config+0xd4>)
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002208:	2300      	movs	r3, #0
 800220a:	607b      	str	r3, [r7, #4]
 800220c:	4b24      	ldr	r3, [pc, #144]	; (80022a0 <SystemClock_Config+0xd8>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002214:	4a22      	ldr	r2, [pc, #136]	; (80022a0 <SystemClock_Config+0xd8>)
 8002216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	4b20      	ldr	r3, [pc, #128]	; (80022a0 <SystemClock_Config+0xd8>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002224:	607b      	str	r3, [r7, #4]
 8002226:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002228:	2305      	movs	r3, #5
 800222a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800222c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002232:	2301      	movs	r3, #1
 8002234:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002236:	2302      	movs	r3, #2
 8002238:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800223a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800223e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002240:	2319      	movs	r3, #25
 8002242:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002244:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002248:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800224a:	2304      	movs	r3, #4
 800224c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800224e:	2307      	movs	r3, #7
 8002250:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002252:	f107 0320 	add.w	r3, r7, #32
 8002256:	4618      	mov	r0, r3
 8002258:	f005 fd94 	bl	8007d84 <HAL_RCC_OscConfig>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002262:	f000 fbfb 	bl	8002a5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002266:	230f      	movs	r3, #15
 8002268:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800226a:	2302      	movs	r3, #2
 800226c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800226e:	2300      	movs	r3, #0
 8002270:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002272:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002276:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002278:	2300      	movs	r3, #0
 800227a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800227c:	f107 030c 	add.w	r3, r7, #12
 8002280:	2102      	movs	r1, #2
 8002282:	4618      	mov	r0, r3
 8002284:	f005 fff6 	bl	8008274 <HAL_RCC_ClockConfig>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800228e:	f000 fbe5 	bl	8002a5c <Error_Handler>
  }
}
 8002292:	bf00      	nop
 8002294:	3750      	adds	r7, #80	; 0x50
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40023800 	.word	0x40023800
 80022a0:	40007000 	.word	0x40007000

080022a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022aa:	463b      	mov	r3, r7
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80022b6:	4b21      	ldr	r3, [pc, #132]	; (800233c <MX_ADC1_Init+0x98>)
 80022b8:	4a21      	ldr	r2, [pc, #132]	; (8002340 <MX_ADC1_Init+0x9c>)
 80022ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80022bc:	4b1f      	ldr	r3, [pc, #124]	; (800233c <MX_ADC1_Init+0x98>)
 80022be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022c4:	4b1d      	ldr	r3, [pc, #116]	; (800233c <MX_ADC1_Init+0x98>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80022ca:	4b1c      	ldr	r3, [pc, #112]	; (800233c <MX_ADC1_Init+0x98>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80022d0:	4b1a      	ldr	r3, [pc, #104]	; (800233c <MX_ADC1_Init+0x98>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022d6:	4b19      	ldr	r3, [pc, #100]	; (800233c <MX_ADC1_Init+0x98>)
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022de:	4b17      	ldr	r3, [pc, #92]	; (800233c <MX_ADC1_Init+0x98>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022e4:	4b15      	ldr	r3, [pc, #84]	; (800233c <MX_ADC1_Init+0x98>)
 80022e6:	4a17      	ldr	r2, [pc, #92]	; (8002344 <MX_ADC1_Init+0xa0>)
 80022e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022ea:	4b14      	ldr	r3, [pc, #80]	; (800233c <MX_ADC1_Init+0x98>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80022f0:	4b12      	ldr	r3, [pc, #72]	; (800233c <MX_ADC1_Init+0x98>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80022f6:	4b11      	ldr	r3, [pc, #68]	; (800233c <MX_ADC1_Init+0x98>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022fe:	4b0f      	ldr	r3, [pc, #60]	; (800233c <MX_ADC1_Init+0x98>)
 8002300:	2201      	movs	r2, #1
 8002302:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002304:	480d      	ldr	r0, [pc, #52]	; (800233c <MX_ADC1_Init+0x98>)
 8002306:	f001 f95b 	bl	80035c0 <HAL_ADC_Init>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002310:	f000 fba4 	bl	8002a5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002314:	230a      	movs	r3, #10
 8002316:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002318:	2301      	movs	r3, #1
 800231a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800231c:	2300      	movs	r3, #0
 800231e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002320:	463b      	mov	r3, r7
 8002322:	4619      	mov	r1, r3
 8002324:	4805      	ldr	r0, [pc, #20]	; (800233c <MX_ADC1_Init+0x98>)
 8002326:	f001 fb41 	bl	80039ac <HAL_ADC_ConfigChannel>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002330:	f000 fb94 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002334:	bf00      	nop
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	20001720 	.word	0x20001720
 8002340:	40012000 	.word	0x40012000
 8002344:	0f000001 	.word	0x0f000001

08002348 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <MX_I2C1_Init+0x50>)
 800234e:	4a13      	ldr	r2, [pc, #76]	; (800239c <MX_I2C1_Init+0x54>)
 8002350:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002352:	4b11      	ldr	r3, [pc, #68]	; (8002398 <MX_I2C1_Init+0x50>)
 8002354:	4a12      	ldr	r2, [pc, #72]	; (80023a0 <MX_I2C1_Init+0x58>)
 8002356:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002358:	4b0f      	ldr	r3, [pc, #60]	; (8002398 <MX_I2C1_Init+0x50>)
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800235e:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <MX_I2C1_Init+0x50>)
 8002360:	2200      	movs	r2, #0
 8002362:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <MX_I2C1_Init+0x50>)
 8002366:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800236a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800236c:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <MX_I2C1_Init+0x50>)
 800236e:	2200      	movs	r2, #0
 8002370:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002372:	4b09      	ldr	r3, [pc, #36]	; (8002398 <MX_I2C1_Init+0x50>)
 8002374:	2200      	movs	r2, #0
 8002376:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002378:	4b07      	ldr	r3, [pc, #28]	; (8002398 <MX_I2C1_Init+0x50>)
 800237a:	2200      	movs	r2, #0
 800237c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800237e:	4b06      	ldr	r3, [pc, #24]	; (8002398 <MX_I2C1_Init+0x50>)
 8002380:	2200      	movs	r2, #0
 8002382:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002384:	4804      	ldr	r0, [pc, #16]	; (8002398 <MX_I2C1_Init+0x50>)
 8002386:	f003 f8d7 	bl	8005538 <HAL_I2C_Init>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002390:	f000 fb64 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002394:	bf00      	nop
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20001768 	.word	0x20001768
 800239c:	40005400 	.word	0x40005400
 80023a0:	00061a80 	.word	0x00061a80

080023a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b090      	sub	sp, #64	; 0x40
 80023a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80023aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	605a      	str	r2, [r3, #4]
 80023b4:	609a      	str	r2, [r3, #8]
 80023b6:	60da      	str	r2, [r3, #12]
 80023b8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80023ba:	2300      	movs	r3, #0
 80023bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80023be:	463b      	mov	r3, r7
 80023c0:	2228      	movs	r2, #40	; 0x28
 80023c2:	2100      	movs	r1, #0
 80023c4:	4618      	mov	r0, r3
 80023c6:	f018 fd9f 	bl	801af08 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <MX_RTC_Init+0x68>)
 80023cc:	4a10      	ldr	r2, [pc, #64]	; (8002410 <MX_RTC_Init+0x6c>)
 80023ce:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80023d0:	4b0e      	ldr	r3, [pc, #56]	; (800240c <MX_RTC_Init+0x68>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80023d6:	4b0d      	ldr	r3, [pc, #52]	; (800240c <MX_RTC_Init+0x68>)
 80023d8:	227f      	movs	r2, #127	; 0x7f
 80023da:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <MX_RTC_Init+0x68>)
 80023de:	22ff      	movs	r2, #255	; 0xff
 80023e0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80023e2:	4b0a      	ldr	r3, [pc, #40]	; (800240c <MX_RTC_Init+0x68>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80023e8:	4b08      	ldr	r3, [pc, #32]	; (800240c <MX_RTC_Init+0x68>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80023ee:	4b07      	ldr	r3, [pc, #28]	; (800240c <MX_RTC_Init+0x68>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80023f4:	4805      	ldr	r0, [pc, #20]	; (800240c <MX_RTC_Init+0x68>)
 80023f6:	f006 fa0b 	bl	8008810 <HAL_RTC_Init>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002400:	f000 fb2c 	bl	8002a5c <Error_Handler>
  /* USER CODE BEGIN RTC_Init 2 */
#endif

  /* USER CODE END RTC_Init 2 */

}
 8002404:	bf00      	nop
 8002406:	3740      	adds	r7, #64	; 0x40
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	200017bc 	.word	0x200017bc
 8002410:	40002800 	.word	0x40002800

08002414 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
void MX_SDIO_SD_Init(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002418:	4b0c      	ldr	r3, [pc, #48]	; (800244c <MX_SDIO_SD_Init+0x38>)
 800241a:	4a0d      	ldr	r2, [pc, #52]	; (8002450 <MX_SDIO_SD_Init+0x3c>)
 800241c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800241e:	4b0b      	ldr	r3, [pc, #44]	; (800244c <MX_SDIO_SD_Init+0x38>)
 8002420:	2200      	movs	r2, #0
 8002422:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002424:	4b09      	ldr	r3, [pc, #36]	; (800244c <MX_SDIO_SD_Init+0x38>)
 8002426:	2200      	movs	r2, #0
 8002428:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800242a:	4b08      	ldr	r3, [pc, #32]	; (800244c <MX_SDIO_SD_Init+0x38>)
 800242c:	2200      	movs	r2, #0
 800242e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002430:	4b06      	ldr	r3, [pc, #24]	; (800244c <MX_SDIO_SD_Init+0x38>)
 8002432:	2200      	movs	r2, #0
 8002434:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002436:	4b05      	ldr	r3, [pc, #20]	; (800244c <MX_SDIO_SD_Init+0x38>)
 8002438:	2200      	movs	r2, #0
 800243a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 5;
 800243c:	4b03      	ldr	r3, [pc, #12]	; (800244c <MX_SDIO_SD_Init+0x38>)
 800243e:	2205      	movs	r2, #5
 8002440:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002442:	bf00      	nop
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	200017dc 	.word	0x200017dc
 8002450:	40012c00 	.word	0x40012c00

08002454 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800245a:	f107 0308 	add.w	r3, r7, #8
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	605a      	str	r2, [r3, #4]
 8002464:	609a      	str	r2, [r3, #8]
 8002466:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002468:	463b      	mov	r3, r7
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002470:	4b1e      	ldr	r3, [pc, #120]	; (80024ec <MX_TIM1_Init+0x98>)
 8002472:	4a1f      	ldr	r2, [pc, #124]	; (80024f0 <MX_TIM1_Init+0x9c>)
 8002474:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002476:	4b1d      	ldr	r3, [pc, #116]	; (80024ec <MX_TIM1_Init+0x98>)
 8002478:	2200      	movs	r2, #0
 800247a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800247c:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <MX_TIM1_Init+0x98>)
 800247e:	2200      	movs	r2, #0
 8002480:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002482:	4b1a      	ldr	r3, [pc, #104]	; (80024ec <MX_TIM1_Init+0x98>)
 8002484:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002488:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800248a:	4b18      	ldr	r3, [pc, #96]	; (80024ec <MX_TIM1_Init+0x98>)
 800248c:	2200      	movs	r2, #0
 800248e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002490:	4b16      	ldr	r3, [pc, #88]	; (80024ec <MX_TIM1_Init+0x98>)
 8002492:	2200      	movs	r2, #0
 8002494:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002496:	4b15      	ldr	r3, [pc, #84]	; (80024ec <MX_TIM1_Init+0x98>)
 8002498:	2200      	movs	r2, #0
 800249a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800249c:	4813      	ldr	r0, [pc, #76]	; (80024ec <MX_TIM1_Init+0x98>)
 800249e:	f007 fdd1 	bl	800a044 <HAL_TIM_Base_Init>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80024a8:	f000 fad8 	bl	8002a5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024b2:	f107 0308 	add.w	r3, r7, #8
 80024b6:	4619      	mov	r1, r3
 80024b8:	480c      	ldr	r0, [pc, #48]	; (80024ec <MX_TIM1_Init+0x98>)
 80024ba:	f008 fa25 	bl	800a908 <HAL_TIM_ConfigClockSource>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80024c4:	f000 faca 	bl	8002a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80024c8:	2320      	movs	r3, #32
 80024ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024cc:	2300      	movs	r3, #0
 80024ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024d0:	463b      	mov	r3, r7
 80024d2:	4619      	mov	r1, r3
 80024d4:	4805      	ldr	r0, [pc, #20]	; (80024ec <MX_TIM1_Init+0x98>)
 80024d6:	f008 fdd3 	bl	800b080 <HAL_TIMEx_MasterConfigSynchronization>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80024e0:	f000 fabc 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80024e4:	bf00      	nop
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	20001860 	.word	0x20001860
 80024f0:	40010000 	.word	0x40010000

080024f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024fa:	f107 0308 	add.w	r3, r7, #8
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	609a      	str	r2, [r3, #8]
 8002506:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002508:	463b      	mov	r3, r7
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002510:	4b1e      	ldr	r3, [pc, #120]	; (800258c <MX_TIM2_Init+0x98>)
 8002512:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002516:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8002518:	4b1c      	ldr	r3, [pc, #112]	; (800258c <MX_TIM2_Init+0x98>)
 800251a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800251e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002520:	4b1a      	ldr	r3, [pc, #104]	; (800258c <MX_TIM2_Init+0x98>)
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400;
 8002526:	4b19      	ldr	r3, [pc, #100]	; (800258c <MX_TIM2_Init+0x98>)
 8002528:	f242 02d0 	movw	r2, #8400	; 0x20d0
 800252c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800252e:	4b17      	ldr	r3, [pc, #92]	; (800258c <MX_TIM2_Init+0x98>)
 8002530:	2200      	movs	r2, #0
 8002532:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002534:	4b15      	ldr	r3, [pc, #84]	; (800258c <MX_TIM2_Init+0x98>)
 8002536:	2280      	movs	r2, #128	; 0x80
 8002538:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800253a:	4814      	ldr	r0, [pc, #80]	; (800258c <MX_TIM2_Init+0x98>)
 800253c:	f007 fd82 	bl	800a044 <HAL_TIM_Base_Init>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002546:	f000 fa89 	bl	8002a5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800254a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800254e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002550:	f107 0308 	add.w	r3, r7, #8
 8002554:	4619      	mov	r1, r3
 8002556:	480d      	ldr	r0, [pc, #52]	; (800258c <MX_TIM2_Init+0x98>)
 8002558:	f008 f9d6 	bl	800a908 <HAL_TIM_ConfigClockSource>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002562:	f000 fa7b 	bl	8002a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002566:	2300      	movs	r3, #0
 8002568:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800256a:	2300      	movs	r3, #0
 800256c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800256e:	463b      	mov	r3, r7
 8002570:	4619      	mov	r1, r3
 8002572:	4806      	ldr	r0, [pc, #24]	; (800258c <MX_TIM2_Init+0x98>)
 8002574:	f008 fd84 	bl	800b080 <HAL_TIMEx_MasterConfigSynchronization>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800257e:	f000 fa6d 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002582:	bf00      	nop
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	200018a8 	.word	0x200018a8

08002590 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b08e      	sub	sp, #56	; 0x38
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002596:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	609a      	str	r2, [r3, #8]
 80025a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a4:	f107 0320 	add.w	r3, r7, #32
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025ae:	1d3b      	adds	r3, r7, #4
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
 80025ba:	611a      	str	r2, [r3, #16]
 80025bc:	615a      	str	r2, [r3, #20]
 80025be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025c0:	4b32      	ldr	r3, [pc, #200]	; (800268c <MX_TIM3_Init+0xfc>)
 80025c2:	4a33      	ldr	r2, [pc, #204]	; (8002690 <MX_TIM3_Init+0x100>)
 80025c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80025c6:	4b31      	ldr	r3, [pc, #196]	; (800268c <MX_TIM3_Init+0xfc>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025cc:	4b2f      	ldr	r3, [pc, #188]	; (800268c <MX_TIM3_Init+0xfc>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80025d2:	4b2e      	ldr	r3, [pc, #184]	; (800268c <MX_TIM3_Init+0xfc>)
 80025d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025da:	4b2c      	ldr	r3, [pc, #176]	; (800268c <MX_TIM3_Init+0xfc>)
 80025dc:	2200      	movs	r2, #0
 80025de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025e0:	4b2a      	ldr	r3, [pc, #168]	; (800268c <MX_TIM3_Init+0xfc>)
 80025e2:	2280      	movs	r2, #128	; 0x80
 80025e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025e6:	4829      	ldr	r0, [pc, #164]	; (800268c <MX_TIM3_Init+0xfc>)
 80025e8:	f007 fd2c 	bl	800a044 <HAL_TIM_Base_Init>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80025f2:	f000 fa33 	bl	8002a5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002600:	4619      	mov	r1, r3
 8002602:	4822      	ldr	r0, [pc, #136]	; (800268c <MX_TIM3_Init+0xfc>)
 8002604:	f008 f980 	bl	800a908 <HAL_TIM_ConfigClockSource>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800260e:	f000 fa25 	bl	8002a5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002612:	481e      	ldr	r0, [pc, #120]	; (800268c <MX_TIM3_Init+0xfc>)
 8002614:	f007 fea5 	bl	800a362 <HAL_TIM_PWM_Init>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800261e:	f000 fa1d 	bl	8002a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002622:	2300      	movs	r3, #0
 8002624:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002626:	2300      	movs	r3, #0
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800262a:	f107 0320 	add.w	r3, r7, #32
 800262e:	4619      	mov	r1, r3
 8002630:	4816      	ldr	r0, [pc, #88]	; (800268c <MX_TIM3_Init+0xfc>)
 8002632:	f008 fd25 	bl	800b080 <HAL_TIMEx_MasterConfigSynchronization>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800263c:	f000 fa0e 	bl	8002a5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002640:	2360      	movs	r3, #96	; 0x60
 8002642:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002644:	2300      	movs	r3, #0
 8002646:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002648:	2300      	movs	r3, #0
 800264a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002650:	1d3b      	adds	r3, r7, #4
 8002652:	2200      	movs	r2, #0
 8002654:	4619      	mov	r1, r3
 8002656:	480d      	ldr	r0, [pc, #52]	; (800268c <MX_TIM3_Init+0xfc>)
 8002658:	f008 f894 	bl	800a784 <HAL_TIM_PWM_ConfigChannel>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002662:	f000 f9fb 	bl	8002a5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002666:	1d3b      	adds	r3, r7, #4
 8002668:	2204      	movs	r2, #4
 800266a:	4619      	mov	r1, r3
 800266c:	4807      	ldr	r0, [pc, #28]	; (800268c <MX_TIM3_Init+0xfc>)
 800266e:	f008 f889 	bl	800a784 <HAL_TIM_PWM_ConfigChannel>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002678:	f000 f9f0 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800267c:	4803      	ldr	r0, [pc, #12]	; (800268c <MX_TIM3_Init+0xfc>)
 800267e:	f000 fc0b 	bl	8002e98 <HAL_TIM_MspPostInit>

}
 8002682:	bf00      	nop
 8002684:	3738      	adds	r7, #56	; 0x38
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	200018f0 	.word	0x200018f0
 8002690:	40000400 	.word	0x40000400

08002694 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002698:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <MX_USART1_UART_Init+0x4c>)
 800269a:	4a12      	ldr	r2, [pc, #72]	; (80026e4 <MX_USART1_UART_Init+0x50>)
 800269c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800269e:	4b10      	ldr	r3, [pc, #64]	; (80026e0 <MX_USART1_UART_Init+0x4c>)
 80026a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026a6:	4b0e      	ldr	r3, [pc, #56]	; (80026e0 <MX_USART1_UART_Init+0x4c>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026ac:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <MX_USART1_UART_Init+0x4c>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026b2:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <MX_USART1_UART_Init+0x4c>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026b8:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <MX_USART1_UART_Init+0x4c>)
 80026ba:	220c      	movs	r2, #12
 80026bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026be:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <MX_USART1_UART_Init+0x4c>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026c4:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <MX_USART1_UART_Init+0x4c>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026ca:	4805      	ldr	r0, [pc, #20]	; (80026e0 <MX_USART1_UART_Init+0x4c>)
 80026cc:	f008 fd5a 	bl	800b184 <HAL_UART_Init>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80026d6:	f000 f9c1 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20001998 	.word	0x20001998
 80026e4:	40011000 	.word	0x40011000

080026e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026ec:	4b11      	ldr	r3, [pc, #68]	; (8002734 <MX_USART2_UART_Init+0x4c>)
 80026ee:	4a12      	ldr	r2, [pc, #72]	; (8002738 <MX_USART2_UART_Init+0x50>)
 80026f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80026f2:	4b10      	ldr	r3, [pc, #64]	; (8002734 <MX_USART2_UART_Init+0x4c>)
 80026f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026fa:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <MX_USART2_UART_Init+0x4c>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002700:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <MX_USART2_UART_Init+0x4c>)
 8002702:	2200      	movs	r2, #0
 8002704:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002706:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <MX_USART2_UART_Init+0x4c>)
 8002708:	2200      	movs	r2, #0
 800270a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800270c:	4b09      	ldr	r3, [pc, #36]	; (8002734 <MX_USART2_UART_Init+0x4c>)
 800270e:	220c      	movs	r2, #12
 8002710:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002712:	4b08      	ldr	r3, [pc, #32]	; (8002734 <MX_USART2_UART_Init+0x4c>)
 8002714:	2200      	movs	r2, #0
 8002716:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002718:	4b06      	ldr	r3, [pc, #24]	; (8002734 <MX_USART2_UART_Init+0x4c>)
 800271a:	2200      	movs	r2, #0
 800271c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800271e:	4805      	ldr	r0, [pc, #20]	; (8002734 <MX_USART2_UART_Init+0x4c>)
 8002720:	f008 fd30 	bl	800b184 <HAL_UART_Init>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800272a:	f000 f997 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	200019dc 	.word	0x200019dc
 8002738:	40004400 	.word	0x40004400

0800273c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	607b      	str	r3, [r7, #4]
 8002746:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <MX_DMA_Init+0x3c>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	4a0b      	ldr	r2, [pc, #44]	; (8002778 <MX_DMA_Init+0x3c>)
 800274c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002750:	6313      	str	r3, [r2, #48]	; 0x30
 8002752:	4b09      	ldr	r3, [pc, #36]	; (8002778 <MX_DMA_Init+0x3c>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800275a:	607b      	str	r3, [r7, #4]
 800275c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800275e:	2200      	movs	r2, #0
 8002760:	2100      	movs	r1, #0
 8002762:	2044      	movs	r0, #68	; 0x44
 8002764:	f001 fc9b 	bl	800409e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8002768:	2044      	movs	r0, #68	; 0x44
 800276a:	f001 fcb4 	bl	80040d6 <HAL_NVIC_EnableIRQ>

}
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40023800 	.word	0x40023800

0800277c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08a      	sub	sp, #40	; 0x28
 8002780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002782:	f107 0314 	add.w	r3, r7, #20
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	605a      	str	r2, [r3, #4]
 800278c:	609a      	str	r2, [r3, #8]
 800278e:	60da      	str	r2, [r3, #12]
 8002790:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	4b71      	ldr	r3, [pc, #452]	; (800295c <MX_GPIO_Init+0x1e0>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	4a70      	ldr	r2, [pc, #448]	; (800295c <MX_GPIO_Init+0x1e0>)
 800279c:	f043 0304 	orr.w	r3, r3, #4
 80027a0:	6313      	str	r3, [r2, #48]	; 0x30
 80027a2:	4b6e      	ldr	r3, [pc, #440]	; (800295c <MX_GPIO_Init+0x1e0>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	613b      	str	r3, [r7, #16]
 80027ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	4b6a      	ldr	r3, [pc, #424]	; (800295c <MX_GPIO_Init+0x1e0>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	4a69      	ldr	r2, [pc, #420]	; (800295c <MX_GPIO_Init+0x1e0>)
 80027b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027bc:	6313      	str	r3, [r2, #48]	; 0x30
 80027be:	4b67      	ldr	r3, [pc, #412]	; (800295c <MX_GPIO_Init+0x1e0>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	4b63      	ldr	r3, [pc, #396]	; (800295c <MX_GPIO_Init+0x1e0>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	4a62      	ldr	r2, [pc, #392]	; (800295c <MX_GPIO_Init+0x1e0>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	6313      	str	r3, [r2, #48]	; 0x30
 80027da:	4b60      	ldr	r3, [pc, #384]	; (800295c <MX_GPIO_Init+0x1e0>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	60bb      	str	r3, [r7, #8]
 80027e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	607b      	str	r3, [r7, #4]
 80027ea:	4b5c      	ldr	r3, [pc, #368]	; (800295c <MX_GPIO_Init+0x1e0>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	4a5b      	ldr	r2, [pc, #364]	; (800295c <MX_GPIO_Init+0x1e0>)
 80027f0:	f043 0302 	orr.w	r3, r3, #2
 80027f4:	6313      	str	r3, [r2, #48]	; 0x30
 80027f6:	4b59      	ldr	r3, [pc, #356]	; (800295c <MX_GPIO_Init+0x1e0>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	607b      	str	r3, [r7, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	603b      	str	r3, [r7, #0]
 8002806:	4b55      	ldr	r3, [pc, #340]	; (800295c <MX_GPIO_Init+0x1e0>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	4a54      	ldr	r2, [pc, #336]	; (800295c <MX_GPIO_Init+0x1e0>)
 800280c:	f043 0308 	orr.w	r3, r3, #8
 8002810:	6313      	str	r3, [r2, #48]	; 0x30
 8002812:	4b52      	ldr	r3, [pc, #328]	; (800295c <MX_GPIO_Init+0x1e0>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	603b      	str	r3, [r7, #0]
 800281c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_MOTION_GPIO_Port, EN_MOTION_Pin, GPIO_PIN_RESET);
 800281e:	2200      	movs	r2, #0
 8002820:	2102      	movs	r1, #2
 8002822:	484f      	ldr	r0, [pc, #316]	; (8002960 <MX_GPIO_Init+0x1e4>)
 8002824:	f002 fe3c 	bl	80054a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, GPIO_PIN_SET);
 8002828:	2201      	movs	r2, #1
 800282a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800282e:	484d      	ldr	r0, [pc, #308]	; (8002964 <MX_GPIO_Init+0x1e8>)
 8002830:	f002 fe36 	bl	80054a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8002834:	2200      	movs	r2, #0
 8002836:	2108      	movs	r1, #8
 8002838:	484a      	ldr	r0, [pc, #296]	; (8002964 <MX_GPIO_Init+0x1e8>)
 800283a:	f002 fe31 	bl	80054a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800283e:	f642 63fe 	movw	r3, #12030	; 0x2efe
 8002842:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002844:	2303      	movs	r3, #3
 8002846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002848:	2300      	movs	r3, #0
 800284a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800284c:	f107 0314 	add.w	r3, r7, #20
 8002850:	4619      	mov	r1, r3
 8002852:	4845      	ldr	r0, [pc, #276]	; (8002968 <MX_GPIO_Init+0x1ec>)
 8002854:	f002 fba4 	bl	8004fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_MOTION_Pin */
  GPIO_InitStruct.Pin = OUT_MOTION_Pin;
 8002858:	2301      	movs	r3, #1
 800285a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800285c:	2300      	movs	r3, #0
 800285e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002860:	2300      	movs	r3, #0
 8002862:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OUT_MOTION_GPIO_Port, &GPIO_InitStruct);
 8002864:	f107 0314 	add.w	r3, r7, #20
 8002868:	4619      	mov	r1, r3
 800286a:	483d      	ldr	r0, [pc, #244]	; (8002960 <MX_GPIO_Init+0x1e4>)
 800286c:	f002 fb98 	bl	8004fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_MOTION_Pin */
  GPIO_InitStruct.Pin = EN_MOTION_Pin;
 8002870:	2302      	movs	r3, #2
 8002872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002874:	2301      	movs	r3, #1
 8002876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002878:	2300      	movs	r3, #0
 800287a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800287c:	2302      	movs	r3, #2
 800287e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_MOTION_GPIO_Port, &GPIO_InitStruct);
 8002880:	f107 0314 	add.w	r3, r7, #20
 8002884:	4619      	mov	r1, r3
 8002886:	4836      	ldr	r0, [pc, #216]	; (8002960 <MX_GPIO_Init+0x1e4>)
 8002888:	f002 fb8a 	bl	8004fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800288c:	f44f 63be 	mov.w	r3, #1520	; 0x5f0
 8002890:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002892:	2303      	movs	r3, #3
 8002894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289a:	f107 0314 	add.w	r3, r7, #20
 800289e:	4619      	mov	r1, r3
 80028a0:	482f      	ldr	r0, [pc, #188]	; (8002960 <MX_GPIO_Init+0x1e4>)
 80028a2:	f002 fb7d 	bl	8004fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80028a6:	f247 4307 	movw	r3, #29703	; 0x7407
 80028aa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028ac:	2303      	movs	r3, #3
 80028ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b4:	f107 0314 	add.w	r3, r7, #20
 80028b8:	4619      	mov	r1, r3
 80028ba:	482a      	ldr	r0, [pc, #168]	; (8002964 <MX_GPIO_Init+0x1e8>)
 80028bc:	f002 fb70 	bl	8004fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_5V_Pin */
  GPIO_InitStruct.Pin = EN_5V_Pin;
 80028c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028c6:	2301      	movs	r3, #1
 80028c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028ce:	2302      	movs	r3, #2
 80028d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_5V_GPIO_Port, &GPIO_InitStruct);
 80028d2:	f107 0314 	add.w	r3, r7, #20
 80028d6:	4619      	mov	r1, r3
 80028d8:	4822      	ldr	r0, [pc, #136]	; (8002964 <MX_GPIO_Init+0x1e8>)
 80028da:	f002 fb61 	bl	8004fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 80028de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028e4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80028e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028ea:	2302      	movs	r3, #2
 80028ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 80028ee:	f107 0314 	add.w	r3, r7, #20
 80028f2:	4619      	mov	r1, r3
 80028f4:	481a      	ldr	r0, [pc, #104]	; (8002960 <MX_GPIO_Init+0x1e4>)
 80028f6:	f002 fb53 	bl	8004fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_DET_Pin */
  GPIO_InitStruct.Pin = SW_DET_Pin;
 80028fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002900:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002906:	2301      	movs	r3, #1
 8002908:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_DET_GPIO_Port, &GPIO_InitStruct);
 800290a:	f107 0314 	add.w	r3, r7, #20
 800290e:	4619      	mov	r1, r3
 8002910:	4813      	ldr	r0, [pc, #76]	; (8002960 <MX_GPIO_Init+0x1e4>)
 8002912:	f002 fb45 	bl	8004fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8002916:	2308      	movs	r3, #8
 8002918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800291a:	2301      	movs	r3, #1
 800291c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291e:	2300      	movs	r3, #0
 8002920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002922:	2300      	movs	r3, #0
 8002924:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8002926:	f107 0314 	add.w	r3, r7, #20
 800292a:	4619      	mov	r1, r3
 800292c:	480d      	ldr	r0, [pc, #52]	; (8002964 <MX_GPIO_Init+0x1e8>)
 800292e:	f002 fb37 	bl	8004fa0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002932:	2200      	movs	r2, #0
 8002934:	2100      	movs	r1, #0
 8002936:	2017      	movs	r0, #23
 8002938:	f001 fbb1 	bl	800409e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800293c:	2017      	movs	r0, #23
 800293e:	f001 fbca 	bl	80040d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002942:	2200      	movs	r2, #0
 8002944:	2100      	movs	r1, #0
 8002946:	2028      	movs	r0, #40	; 0x28
 8002948:	f001 fba9 	bl	800409e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800294c:	2028      	movs	r0, #40	; 0x28
 800294e:	f001 fbc2 	bl	80040d6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002952:	bf00      	nop
 8002954:	3728      	adds	r7, #40	; 0x28
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40023800 	.word	0x40023800
 8002960:	40020000 	.word	0x40020000
 8002964:	40020400 	.word	0x40020400
 8002968:	40020800 	.word	0x40020800

0800296c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]

if(htim->Instance == TIM2)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800297c:	d101      	bne.n	8002982 <HAL_TIM_PeriodElapsedCallback+0x16>
{
	timer_interrupt();
 800297e:	f7fe fbc3 	bl	8001108 <timer_interrupt>
}

}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == OUT_MOTION_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 8002996:	88fb      	ldrh	r3, [r7, #6]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_GPIO_EXTI_Callback+0x14>
    {
    	pir_interrupt();
 800299c:	f7fe fb98 	bl	80010d0 <pir_interrupt>
    }
    if(GPIO_Pin == USB_DETECT_Pin)
 80029a0:	88fb      	ldrh	r3, [r7, #6]
 80029a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029a6:	d114      	bne.n	80029d2 <HAL_GPIO_EXTI_Callback+0x46>
    {
        _RunTime_Packet.usb_detection = 1;
 80029a8:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <HAL_GPIO_EXTI_Callback+0x58>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        _RunTime_Packet.usb_start_timer = 1;
 80029b0:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <HAL_GPIO_EXTI_Callback+0x58>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        usb_time_keep = 0;
 80029b8:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <HAL_GPIO_EXTI_Callback+0x5c>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
        prev_usb_time_ = HAL_GetTick();
 80029be:	f000 fd8b 	bl	80034d8 <HAL_GetTick>
 80029c2:	4603      	mov	r3, r0
 80029c4:	4a09      	ldr	r2, [pc, #36]	; (80029ec <HAL_GPIO_EXTI_Callback+0x60>)
 80029c6:	6013      	str	r3, [r2, #0]
		prev_sleep_time = HAL_GetTick();
 80029c8:	f000 fd86 	bl	80034d8 <HAL_GetTick>
 80029cc:	4603      	mov	r3, r0
 80029ce:	4a08      	ldr	r2, [pc, #32]	; (80029f0 <HAL_GPIO_EXTI_Callback+0x64>)
 80029d0:	6013      	str	r3, [r2, #0]
    }
    if(GPIO_Pin = SW_DET_Pin)
 80029d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029d6:	80fb      	strh	r3, [r7, #6]
    {
    	power_off_detect();
 80029d8:	f7fe fbb0 	bl	800113c <power_off_detect>
    }
}
 80029dc:	bf00      	nop
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	2000146c 	.word	0x2000146c
 80029e8:	200014b4 	.word	0x200014b4
 80029ec:	200016f8 	.word	0x200016f8
 80029f0:	200016f0 	.word	0x200016f0

080029f4 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
	RtcInt();
 80029fc:	f00e fff8 	bl	80119f0 <RtcInt>
}
 8002a00:	bf00      	nop
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]


  if(huart == &huart1) //console uart
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a0f      	ldr	r2, [pc, #60]	; (8002a50 <HAL_UART_ErrorCallback+0x48>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d10a      	bne.n	8002a2e <HAL_UART_ErrorCallback+0x26>
    {

      //HMI_uart_err = 1;
	  _RunTime_Packet.console_uart_error = 1;
 8002a18:	4b0e      	ldr	r3, [pc, #56]	; (8002a54 <HAL_UART_ErrorCallback+0x4c>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	43d2      	mvns	r2, r2
 8002a2a:	601a      	str	r2, [r3, #0]
   //   _RunTime_Packet.sps30_uart_error = 1;
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
    }


}
 8002a2c:	e009      	b.n	8002a42 <HAL_UART_ErrorCallback+0x3a>
  else if(huart == &huart2) //sps30 uart
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a09      	ldr	r2, [pc, #36]	; (8002a58 <HAL_UART_ErrorCallback+0x50>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d105      	bne.n	8002a42 <HAL_UART_ErrorCallback+0x3a>
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	43d2      	mvns	r2, r2
 8002a40:	601a      	str	r2, [r3, #0]
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	20001998 	.word	0x20001998
 8002a54:	2000146c 	.word	0x2000146c
 8002a58:	200019dc 	.word	0x200019dc

08002a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002a60:	b672      	cpsid	i
}
 8002a62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a64:	e7fe      	b.n	8002a64 <Error_Handler+0x8>
	...

08002a68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	607b      	str	r3, [r7, #4]
 8002a72:	4b10      	ldr	r3, [pc, #64]	; (8002ab4 <HAL_MspInit+0x4c>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	4a0f      	ldr	r2, [pc, #60]	; (8002ab4 <HAL_MspInit+0x4c>)
 8002a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a7e:	4b0d      	ldr	r3, [pc, #52]	; (8002ab4 <HAL_MspInit+0x4c>)
 8002a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a86:	607b      	str	r3, [r7, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	603b      	str	r3, [r7, #0]
 8002a8e:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <HAL_MspInit+0x4c>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	4a08      	ldr	r2, [pc, #32]	; (8002ab4 <HAL_MspInit+0x4c>)
 8002a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a98:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9a:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <HAL_MspInit+0x4c>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa2:	603b      	str	r3, [r7, #0]
 8002aa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40023800 	.word	0x40023800

08002ab8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08a      	sub	sp, #40	; 0x28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac0:	f107 0314 	add.w	r3, r7, #20
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	60da      	str	r2, [r3, #12]
 8002ace:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a17      	ldr	r2, [pc, #92]	; (8002b34 <HAL_ADC_MspInit+0x7c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d127      	bne.n	8002b2a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	613b      	str	r3, [r7, #16]
 8002ade:	4b16      	ldr	r3, [pc, #88]	; (8002b38 <HAL_ADC_MspInit+0x80>)
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae2:	4a15      	ldr	r2, [pc, #84]	; (8002b38 <HAL_ADC_MspInit+0x80>)
 8002ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aea:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <HAL_ADC_MspInit+0x80>)
 8002aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <HAL_ADC_MspInit+0x80>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	4a0e      	ldr	r2, [pc, #56]	; (8002b38 <HAL_ADC_MspInit+0x80>)
 8002b00:	f043 0304 	orr.w	r3, r3, #4
 8002b04:	6313      	str	r3, [r2, #48]	; 0x30
 8002b06:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <HAL_ADC_MspInit+0x80>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	f003 0304 	and.w	r3, r3, #4
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = BATT_ADC_IN10_Pin;
 8002b12:	2301      	movs	r3, #1
 8002b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b16:	2303      	movs	r3, #3
 8002b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_ADC_IN10_GPIO_Port, &GPIO_InitStruct);
 8002b1e:	f107 0314 	add.w	r3, r7, #20
 8002b22:	4619      	mov	r1, r3
 8002b24:	4805      	ldr	r0, [pc, #20]	; (8002b3c <HAL_ADC_MspInit+0x84>)
 8002b26:	f002 fa3b 	bl	8004fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b2a:	bf00      	nop
 8002b2c:	3728      	adds	r7, #40	; 0x28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40012000 	.word	0x40012000
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	40020800 	.word	0x40020800

08002b40 <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a08      	ldr	r2, [pc, #32]	; (8002b70 <HAL_ADC_MspDeInit+0x30>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d109      	bne.n	8002b66 <HAL_ADC_MspDeInit+0x26>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8002b52:	4b08      	ldr	r3, [pc, #32]	; (8002b74 <HAL_ADC_MspDeInit+0x34>)
 8002b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b56:	4a07      	ldr	r2, [pc, #28]	; (8002b74 <HAL_ADC_MspDeInit+0x34>)
 8002b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b5c:	6453      	str	r3, [r2, #68]	; 0x44

    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    HAL_GPIO_DeInit(BATT_ADC_IN10_GPIO_Port, BATT_ADC_IN10_Pin);
 8002b5e:	2101      	movs	r1, #1
 8002b60:	4805      	ldr	r0, [pc, #20]	; (8002b78 <HAL_ADC_MspDeInit+0x38>)
 8002b62:	f002 fba1 	bl	80052a8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40012000 	.word	0x40012000
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40020800 	.word	0x40020800

08002b7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08a      	sub	sp, #40	; 0x28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b84:	f107 0314 	add.w	r3, r7, #20
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	60da      	str	r2, [r3, #12]
 8002b92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a19      	ldr	r2, [pc, #100]	; (8002c00 <HAL_I2C_MspInit+0x84>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d12c      	bne.n	8002bf8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	613b      	str	r3, [r7, #16]
 8002ba2:	4b18      	ldr	r3, [pc, #96]	; (8002c04 <HAL_I2C_MspInit+0x88>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	4a17      	ldr	r2, [pc, #92]	; (8002c04 <HAL_I2C_MspInit+0x88>)
 8002ba8:	f043 0302 	orr.w	r3, r3, #2
 8002bac:	6313      	str	r3, [r2, #48]	; 0x30
 8002bae:	4b15      	ldr	r3, [pc, #84]	; (8002c04 <HAL_I2C_MspInit+0x88>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	613b      	str	r3, [r7, #16]
 8002bb8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCD4x_SCL_Pin|SCD4x_SDA_Pin;
 8002bba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bc0:	2312      	movs	r3, #18
 8002bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002bcc:	2304      	movs	r3, #4
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd0:	f107 0314 	add.w	r3, r7, #20
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	480c      	ldr	r0, [pc, #48]	; (8002c08 <HAL_I2C_MspInit+0x8c>)
 8002bd8:	f002 f9e2 	bl	8004fa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <HAL_I2C_MspInit+0x88>)
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	4a07      	ldr	r2, [pc, #28]	; (8002c04 <HAL_I2C_MspInit+0x88>)
 8002be6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bea:	6413      	str	r3, [r2, #64]	; 0x40
 8002bec:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <HAL_I2C_MspInit+0x88>)
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002bf8:	bf00      	nop
 8002bfa:	3728      	adds	r7, #40	; 0x28
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40005400 	.word	0x40005400
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40020400 	.word	0x40020400

08002c0c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a0b      	ldr	r2, [pc, #44]	; (8002c48 <HAL_I2C_MspDeInit+0x3c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d10f      	bne.n	8002c3e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002c1e:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <HAL_I2C_MspDeInit+0x40>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	4a0a      	ldr	r2, [pc, #40]	; (8002c4c <HAL_I2C_MspDeInit+0x40>)
 8002c24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c28:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(SCD4x_SCL_GPIO_Port, SCD4x_SCL_Pin);
 8002c2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c2e:	4808      	ldr	r0, [pc, #32]	; (8002c50 <HAL_I2C_MspDeInit+0x44>)
 8002c30:	f002 fb3a 	bl	80052a8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SCD4x_SDA_GPIO_Port, SCD4x_SDA_Pin);
 8002c34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c38:	4805      	ldr	r0, [pc, #20]	; (8002c50 <HAL_I2C_MspDeInit+0x44>)
 8002c3a:	f002 fb35 	bl	80052a8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8002c3e:	bf00      	nop
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40005400 	.word	0x40005400
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40020400 	.word	0x40020400

08002c54 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b088      	sub	sp, #32
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c5c:	f107 030c 	add.w	r3, r7, #12
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	605a      	str	r2, [r3, #4]
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	60da      	str	r2, [r3, #12]
 8002c6a:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a10      	ldr	r2, [pc, #64]	; (8002cb4 <HAL_RTC_MspInit+0x60>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d119      	bne.n	8002caa <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002c76:	2302      	movs	r3, #2
 8002c78:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002c7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c7e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c80:	f107 030c 	add.w	r3, r7, #12
 8002c84:	4618      	mov	r0, r3
 8002c86:	f005 fcd5 	bl	8008634 <HAL_RCCEx_PeriphCLKConfig>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002c90:	f7ff fee4 	bl	8002a5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c94:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <HAL_RTC_MspInit+0x64>)
 8002c96:	2201      	movs	r2, #1
 8002c98:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	2029      	movs	r0, #41	; 0x29
 8002ca0:	f001 f9fd 	bl	800409e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002ca4:	2029      	movs	r0, #41	; 0x29
 8002ca6:	f001 fa16 	bl	80040d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002caa:	bf00      	nop
 8002cac:	3720      	adds	r7, #32
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40002800 	.word	0x40002800
 8002cb8:	42470e3c 	.word	0x42470e3c

08002cbc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08a      	sub	sp, #40	; 0x28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc4:	f107 0314 	add.w	r3, r7, #20
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
 8002cce:	609a      	str	r2, [r3, #8]
 8002cd0:	60da      	str	r2, [r3, #12]
 8002cd2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a28      	ldr	r2, [pc, #160]	; (8002d7c <HAL_SD_MspInit+0xc0>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d14a      	bne.n	8002d74 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	4b27      	ldr	r3, [pc, #156]	; (8002d80 <HAL_SD_MspInit+0xc4>)
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce6:	4a26      	ldr	r2, [pc, #152]	; (8002d80 <HAL_SD_MspInit+0xc4>)
 8002ce8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002cec:	6453      	str	r3, [r2, #68]	; 0x44
 8002cee:	4b24      	ldr	r3, [pc, #144]	; (8002d80 <HAL_SD_MspInit+0xc4>)
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cf6:	613b      	str	r3, [r7, #16]
 8002cf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	4b20      	ldr	r3, [pc, #128]	; (8002d80 <HAL_SD_MspInit+0xc4>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	4a1f      	ldr	r2, [pc, #124]	; (8002d80 <HAL_SD_MspInit+0xc4>)
 8002d04:	f043 0304 	orr.w	r3, r3, #4
 8002d08:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0a:	4b1d      	ldr	r3, [pc, #116]	; (8002d80 <HAL_SD_MspInit+0xc4>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	f003 0304 	and.w	r3, r3, #4
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	4b19      	ldr	r3, [pc, #100]	; (8002d80 <HAL_SD_MspInit+0xc4>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	4a18      	ldr	r2, [pc, #96]	; (8002d80 <HAL_SD_MspInit+0xc4>)
 8002d20:	f043 0308 	orr.w	r3, r3, #8
 8002d24:	6313      	str	r3, [r2, #48]	; 0x30
 8002d26:	4b16      	ldr	r3, [pc, #88]	; (8002d80 <HAL_SD_MspInit+0xc4>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	60bb      	str	r3, [r7, #8]
 8002d30:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8002d32:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8002d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d40:	2303      	movs	r3, #3
 8002d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002d44:	230c      	movs	r3, #12
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d48:	f107 0314 	add.w	r3, r7, #20
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	480d      	ldr	r0, [pc, #52]	; (8002d84 <HAL_SD_MspInit+0xc8>)
 8002d50:	f002 f926 	bl	8004fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d54:	2304      	movs	r3, #4
 8002d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d58:	2302      	movs	r3, #2
 8002d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d60:	2303      	movs	r3, #3
 8002d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002d64:	230c      	movs	r3, #12
 8002d66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d68:	f107 0314 	add.w	r3, r7, #20
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4806      	ldr	r0, [pc, #24]	; (8002d88 <HAL_SD_MspInit+0xcc>)
 8002d70:	f002 f916 	bl	8004fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002d74:	bf00      	nop
 8002d76:	3728      	adds	r7, #40	; 0x28
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40012c00 	.word	0x40012c00
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40020800 	.word	0x40020800
 8002d88:	40020c00 	.word	0x40020c00

08002d8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a3a      	ldr	r2, [pc, #232]	; (8002e84 <HAL_TIM_Base_MspInit+0xf8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d13f      	bne.n	8002e1e <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	4b39      	ldr	r3, [pc, #228]	; (8002e88 <HAL_TIM_Base_MspInit+0xfc>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	4a38      	ldr	r2, [pc, #224]	; (8002e88 <HAL_TIM_Base_MspInit+0xfc>)
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	6453      	str	r3, [r2, #68]	; 0x44
 8002dae:	4b36      	ldr	r3, [pc, #216]	; (8002e88 <HAL_TIM_Base_MspInit+0xfc>)
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8002dba:	4b34      	ldr	r3, [pc, #208]	; (8002e8c <HAL_TIM_Base_MspInit+0x100>)
 8002dbc:	4a34      	ldr	r2, [pc, #208]	; (8002e90 <HAL_TIM_Base_MspInit+0x104>)
 8002dbe:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8002dc0:	4b32      	ldr	r3, [pc, #200]	; (8002e8c <HAL_TIM_Base_MspInit+0x100>)
 8002dc2:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002dc6:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dc8:	4b30      	ldr	r3, [pc, #192]	; (8002e8c <HAL_TIM_Base_MspInit+0x100>)
 8002dca:	2240      	movs	r2, #64	; 0x40
 8002dcc:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dce:	4b2f      	ldr	r3, [pc, #188]	; (8002e8c <HAL_TIM_Base_MspInit+0x100>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8002dd4:	4b2d      	ldr	r3, [pc, #180]	; (8002e8c <HAL_TIM_Base_MspInit+0x100>)
 8002dd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dda:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ddc:	4b2b      	ldr	r3, [pc, #172]	; (8002e8c <HAL_TIM_Base_MspInit+0x100>)
 8002dde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002de2:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002de4:	4b29      	ldr	r3, [pc, #164]	; (8002e8c <HAL_TIM_Base_MspInit+0x100>)
 8002de6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002dea:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8002dec:	4b27      	ldr	r3, [pc, #156]	; (8002e8c <HAL_TIM_Base_MspInit+0x100>)
 8002dee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002df2:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8002df4:	4b25      	ldr	r3, [pc, #148]	; (8002e8c <HAL_TIM_Base_MspInit+0x100>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dfa:	4b24      	ldr	r3, [pc, #144]	; (8002e8c <HAL_TIM_Base_MspInit+0x100>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8002e00:	4822      	ldr	r0, [pc, #136]	; (8002e8c <HAL_TIM_Base_MspInit+0x100>)
 8002e02:	f001 f995 	bl	8004130 <HAL_DMA_Init>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8002e0c:	f7ff fe26 	bl	8002a5c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a1e      	ldr	r2, [pc, #120]	; (8002e8c <HAL_TIM_Base_MspInit+0x100>)
 8002e14:	621a      	str	r2, [r3, #32]
 8002e16:	4a1d      	ldr	r2, [pc, #116]	; (8002e8c <HAL_TIM_Base_MspInit+0x100>)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002e1c:	e02e      	b.n	8002e7c <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM2)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e26:	d116      	bne.n	8002e56 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e28:	2300      	movs	r3, #0
 8002e2a:	613b      	str	r3, [r7, #16]
 8002e2c:	4b16      	ldr	r3, [pc, #88]	; (8002e88 <HAL_TIM_Base_MspInit+0xfc>)
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	4a15      	ldr	r2, [pc, #84]	; (8002e88 <HAL_TIM_Base_MspInit+0xfc>)
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	6413      	str	r3, [r2, #64]	; 0x40
 8002e38:	4b13      	ldr	r3, [pc, #76]	; (8002e88 <HAL_TIM_Base_MspInit+0xfc>)
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	613b      	str	r3, [r7, #16]
 8002e42:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e44:	2200      	movs	r2, #0
 8002e46:	2100      	movs	r1, #0
 8002e48:	201c      	movs	r0, #28
 8002e4a:	f001 f928 	bl	800409e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e4e:	201c      	movs	r0, #28
 8002e50:	f001 f941 	bl	80040d6 <HAL_NVIC_EnableIRQ>
}
 8002e54:	e012      	b.n	8002e7c <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM3)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a0e      	ldr	r2, [pc, #56]	; (8002e94 <HAL_TIM_Base_MspInit+0x108>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d10d      	bne.n	8002e7c <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e60:	2300      	movs	r3, #0
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	4b08      	ldr	r3, [pc, #32]	; (8002e88 <HAL_TIM_Base_MspInit+0xfc>)
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	4a07      	ldr	r2, [pc, #28]	; (8002e88 <HAL_TIM_Base_MspInit+0xfc>)
 8002e6a:	f043 0302 	orr.w	r3, r3, #2
 8002e6e:	6413      	str	r3, [r2, #64]	; 0x40
 8002e70:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <HAL_TIM_Base_MspInit+0xfc>)
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
}
 8002e7c:	bf00      	nop
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40010000 	.word	0x40010000
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	20001938 	.word	0x20001938
 8002e90:	40026488 	.word	0x40026488
 8002e94:	40000400 	.word	0x40000400

08002e98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b088      	sub	sp, #32
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea0:	f107 030c 	add.w	r3, r7, #12
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	605a      	str	r2, [r3, #4]
 8002eaa:	609a      	str	r2, [r3, #8]
 8002eac:	60da      	str	r2, [r3, #12]
 8002eae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a12      	ldr	r2, [pc, #72]	; (8002f00 <HAL_TIM_MspPostInit+0x68>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d11d      	bne.n	8002ef6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	4b11      	ldr	r3, [pc, #68]	; (8002f04 <HAL_TIM_MspPostInit+0x6c>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	4a10      	ldr	r2, [pc, #64]	; (8002f04 <HAL_TIM_MspPostInit+0x6c>)
 8002ec4:	f043 0302 	orr.w	r3, r3, #2
 8002ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eca:	4b0e      	ldr	r3, [pc, #56]	; (8002f04 <HAL_TIM_MspPostInit+0x6c>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	60bb      	str	r3, [r7, #8]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8002ed6:	2330      	movs	r3, #48	; 0x30
 8002ed8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eda:	2302      	movs	r3, #2
 8002edc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eea:	f107 030c 	add.w	r3, r7, #12
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4805      	ldr	r0, [pc, #20]	; (8002f08 <HAL_TIM_MspPostInit+0x70>)
 8002ef2:	f002 f855 	bl	8004fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002ef6:	bf00      	nop
 8002ef8:	3720      	adds	r7, #32
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40000400 	.word	0x40000400
 8002f04:	40023800 	.word	0x40023800
 8002f08:	40020400 	.word	0x40020400

08002f0c <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a16      	ldr	r2, [pc, #88]	; (8002f74 <HAL_TIM_Base_MspDeInit+0x68>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d10b      	bne.n	8002f36 <HAL_TIM_Base_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 8002f1e:	4b16      	ldr	r3, [pc, #88]	; (8002f78 <HAL_TIM_Base_MspDeInit+0x6c>)
 8002f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f22:	4a15      	ldr	r2, [pc, #84]	; (8002f78 <HAL_TIM_Base_MspDeInit+0x6c>)
 8002f24:	f023 0301 	bic.w	r3, r3, #1
 8002f28:	6453      	str	r3, [r2, #68]	; 0x44

    /* TIM1 DMA DeInit */
    HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f001 f9ac 	bl	800428c <HAL_DMA_DeInit>
  /* USER CODE BEGIN TIM3_MspDeInit 1 */

  /* USER CODE END TIM3_MspDeInit 1 */
  }

}
 8002f34:	e019      	b.n	8002f6a <HAL_TIM_Base_MspDeInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f3e:	d109      	bne.n	8002f54 <HAL_TIM_Base_MspDeInit+0x48>
    __HAL_RCC_TIM2_CLK_DISABLE();
 8002f40:	4b0d      	ldr	r3, [pc, #52]	; (8002f78 <HAL_TIM_Base_MspDeInit+0x6c>)
 8002f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f44:	4a0c      	ldr	r2, [pc, #48]	; (8002f78 <HAL_TIM_Base_MspDeInit+0x6c>)
 8002f46:	f023 0301 	bic.w	r3, r3, #1
 8002f4a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8002f4c:	201c      	movs	r0, #28
 8002f4e:	f001 f8d0 	bl	80040f2 <HAL_NVIC_DisableIRQ>
}
 8002f52:	e00a      	b.n	8002f6a <HAL_TIM_Base_MspDeInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a08      	ldr	r2, [pc, #32]	; (8002f7c <HAL_TIM_Base_MspDeInit+0x70>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d105      	bne.n	8002f6a <HAL_TIM_Base_MspDeInit+0x5e>
    __HAL_RCC_TIM3_CLK_DISABLE();
 8002f5e:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <HAL_TIM_Base_MspDeInit+0x6c>)
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	4a05      	ldr	r2, [pc, #20]	; (8002f78 <HAL_TIM_Base_MspDeInit+0x6c>)
 8002f64:	f023 0302 	bic.w	r3, r3, #2
 8002f68:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002f6a:	bf00      	nop
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40010000 	.word	0x40010000
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	40000400 	.word	0x40000400

08002f80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08c      	sub	sp, #48	; 0x30
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f88:	f107 031c 	add.w	r3, r7, #28
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	605a      	str	r2, [r3, #4]
 8002f92:	609a      	str	r2, [r3, #8]
 8002f94:	60da      	str	r2, [r3, #12]
 8002f96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a3a      	ldr	r2, [pc, #232]	; (8003088 <HAL_UART_MspInit+0x108>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d134      	bne.n	800300c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	61bb      	str	r3, [r7, #24]
 8002fa6:	4b39      	ldr	r3, [pc, #228]	; (800308c <HAL_UART_MspInit+0x10c>)
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002faa:	4a38      	ldr	r2, [pc, #224]	; (800308c <HAL_UART_MspInit+0x10c>)
 8002fac:	f043 0310 	orr.w	r3, r3, #16
 8002fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fb2:	4b36      	ldr	r3, [pc, #216]	; (800308c <HAL_UART_MspInit+0x10c>)
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb6:	f003 0310 	and.w	r3, r3, #16
 8002fba:	61bb      	str	r3, [r7, #24]
 8002fbc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	617b      	str	r3, [r7, #20]
 8002fc2:	4b32      	ldr	r3, [pc, #200]	; (800308c <HAL_UART_MspInit+0x10c>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	4a31      	ldr	r2, [pc, #196]	; (800308c <HAL_UART_MspInit+0x10c>)
 8002fc8:	f043 0302 	orr.w	r3, r3, #2
 8002fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fce:	4b2f      	ldr	r3, [pc, #188]	; (800308c <HAL_UART_MspInit+0x10c>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	617b      	str	r3, [r7, #20]
 8002fd8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = CLI_UART1_TX_Pin|CLI_UART1_RX_Pin;
 8002fda:	23c0      	movs	r3, #192	; 0xc0
 8002fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fde:	2302      	movs	r3, #2
 8002fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002fea:	2307      	movs	r3, #7
 8002fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fee:	f107 031c 	add.w	r3, r7, #28
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4826      	ldr	r0, [pc, #152]	; (8003090 <HAL_UART_MspInit+0x110>)
 8002ff6:	f001 ffd3 	bl	8004fa0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	2025      	movs	r0, #37	; 0x25
 8003000:	f001 f84d 	bl	800409e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003004:	2025      	movs	r0, #37	; 0x25
 8003006:	f001 f866 	bl	80040d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800300a:	e038      	b.n	800307e <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a20      	ldr	r2, [pc, #128]	; (8003094 <HAL_UART_MspInit+0x114>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d133      	bne.n	800307e <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003016:	2300      	movs	r3, #0
 8003018:	613b      	str	r3, [r7, #16]
 800301a:	4b1c      	ldr	r3, [pc, #112]	; (800308c <HAL_UART_MspInit+0x10c>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	4a1b      	ldr	r2, [pc, #108]	; (800308c <HAL_UART_MspInit+0x10c>)
 8003020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003024:	6413      	str	r3, [r2, #64]	; 0x40
 8003026:	4b19      	ldr	r3, [pc, #100]	; (800308c <HAL_UART_MspInit+0x10c>)
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302e:	613b      	str	r3, [r7, #16]
 8003030:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	4b15      	ldr	r3, [pc, #84]	; (800308c <HAL_UART_MspInit+0x10c>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	4a14      	ldr	r2, [pc, #80]	; (800308c <HAL_UART_MspInit+0x10c>)
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	6313      	str	r3, [r2, #48]	; 0x30
 8003042:	4b12      	ldr	r3, [pc, #72]	; (800308c <HAL_UART_MspInit+0x10c>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PM_USART2_TX_Pin|PM_USART2_RX_Pin;
 800304e:	230c      	movs	r3, #12
 8003050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003052:	2302      	movs	r3, #2
 8003054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003056:	2300      	movs	r3, #0
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800305a:	2303      	movs	r3, #3
 800305c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800305e:	2307      	movs	r3, #7
 8003060:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003062:	f107 031c 	add.w	r3, r7, #28
 8003066:	4619      	mov	r1, r3
 8003068:	480b      	ldr	r0, [pc, #44]	; (8003098 <HAL_UART_MspInit+0x118>)
 800306a:	f001 ff99 	bl	8004fa0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800306e:	2200      	movs	r2, #0
 8003070:	2100      	movs	r1, #0
 8003072:	2026      	movs	r0, #38	; 0x26
 8003074:	f001 f813 	bl	800409e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003078:	2026      	movs	r0, #38	; 0x26
 800307a:	f001 f82c 	bl	80040d6 <HAL_NVIC_EnableIRQ>
}
 800307e:	bf00      	nop
 8003080:	3730      	adds	r7, #48	; 0x30
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40011000 	.word	0x40011000
 800308c:	40023800 	.word	0x40023800
 8003090:	40020400 	.word	0x40020400
 8003094:	40004400 	.word	0x40004400
 8003098:	40020000 	.word	0x40020000

0800309c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a13      	ldr	r2, [pc, #76]	; (80030f8 <HAL_UART_MspDeInit+0x5c>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d10d      	bne.n	80030ca <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80030ae:	4b13      	ldr	r3, [pc, #76]	; (80030fc <HAL_UART_MspDeInit+0x60>)
 80030b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b2:	4a12      	ldr	r2, [pc, #72]	; (80030fc <HAL_UART_MspDeInit+0x60>)
 80030b4:	f023 0310 	bic.w	r3, r3, #16
 80030b8:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, CLI_UART1_TX_Pin|CLI_UART1_RX_Pin);
 80030ba:	21c0      	movs	r1, #192	; 0xc0
 80030bc:	4810      	ldr	r0, [pc, #64]	; (8003100 <HAL_UART_MspDeInit+0x64>)
 80030be:	f002 f8f3 	bl	80052a8 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80030c2:	2025      	movs	r0, #37	; 0x25
 80030c4:	f001 f815 	bl	80040f2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 80030c8:	e011      	b.n	80030ee <HAL_UART_MspDeInit+0x52>
  else if(huart->Instance==USART2)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a0d      	ldr	r2, [pc, #52]	; (8003104 <HAL_UART_MspDeInit+0x68>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d10c      	bne.n	80030ee <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART2_CLK_DISABLE();
 80030d4:	4b09      	ldr	r3, [pc, #36]	; (80030fc <HAL_UART_MspDeInit+0x60>)
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	4a08      	ldr	r2, [pc, #32]	; (80030fc <HAL_UART_MspDeInit+0x60>)
 80030da:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80030de:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, PM_USART2_TX_Pin|PM_USART2_RX_Pin);
 80030e0:	210c      	movs	r1, #12
 80030e2:	4809      	ldr	r0, [pc, #36]	; (8003108 <HAL_UART_MspDeInit+0x6c>)
 80030e4:	f002 f8e0 	bl	80052a8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80030e8:	2026      	movs	r0, #38	; 0x26
 80030ea:	f001 f802 	bl	80040f2 <HAL_NVIC_DisableIRQ>
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40011000 	.word	0x40011000
 80030fc:	40023800 	.word	0x40023800
 8003100:	40020400 	.word	0x40020400
 8003104:	40004400 	.word	0x40004400
 8003108:	40020000 	.word	0x40020000

0800310c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003110:	f000 fffd 	bl	800410e <HAL_NVIC_SystemReset>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003114:	e7fe      	b.n	8003114 <NMI_Handler+0x8>

08003116 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 800311a:	f000 fff8 	bl	800410e <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800311e:	e7fe      	b.n	800311e <HardFault_Handler+0x8>

08003120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003124:	f000 fff3 	bl	800410e <HAL_NVIC_SystemReset>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003128:	e7fe      	b.n	8003128 <MemManage_Handler+0x8>

0800312a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 800312e:	f000 ffee 	bl	800410e <HAL_NVIC_SystemReset>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003132:	e7fe      	b.n	8003132 <BusFault_Handler+0x8>

08003134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003138:	f000 ffe9 	bl	800410e <HAL_NVIC_SystemReset>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800313c:	e7fe      	b.n	800313c <UsageFault_Handler+0x8>

0800313e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003142:	f000 ffe4 	bl	800410e <HAL_NVIC_SystemReset>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003146:	bf00      	nop
 8003148:	bd80      	pop	{r7, pc}

0800314a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	HAL_NVIC_SystemReset();
 800314e:	f000 ffde 	bl	800410e <HAL_NVIC_SystemReset>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003152:	bf00      	nop
 8003154:	bd80      	pop	{r7, pc}

08003156 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
	HAL_NVIC_SystemReset();
 800315a:	f000 ffd8 	bl	800410e <HAL_NVIC_SystemReset>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800315e:	bf00      	nop
 8003160:	bd80      	pop	{r7, pc}

08003162 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003166:	f000 f9a3 	bl	80034b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}

0800316e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 8003172:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003176:	f002 f9c7 	bl	8005508 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800317a:	bf00      	nop
 800317c:	bd80      	pop	{r7, pc}
	...

08003180 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003184:	4802      	ldr	r0, [pc, #8]	; (8003190 <TIM2_IRQHandler+0x10>)
 8003186:	f007 f9f5 	bl	800a574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800318a:	bf00      	nop
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	200018a8 	.word	0x200018a8

08003194 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003198:	4802      	ldr	r0, [pc, #8]	; (80031a4 <USART1_IRQHandler+0x10>)
 800319a:	f008 f997 	bl	800b4cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20001998 	.word	0x20001998

080031a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80031ac:	4802      	ldr	r0, [pc, #8]	; (80031b8 <USART2_IRQHandler+0x10>)
 80031ae:	f008 f98d 	bl	800b4cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	200019dc 	.word	0x200019dc

080031bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_DET_Pin);
 80031c0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80031c4:	f002 f9a0 	bl	8005508 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80031c8:	bf00      	nop
 80031ca:	bd80      	pop	{r7, pc}

080031cc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80031d0:	4802      	ldr	r0, [pc, #8]	; (80031dc <RTC_Alarm_IRQHandler+0x10>)
 80031d2:	f005 fea1 	bl	8008f18 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80031d6:	bf00      	nop
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	200017bc 	.word	0x200017bc

080031e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80031e4:	4802      	ldr	r0, [pc, #8]	; (80031f0 <OTG_FS_IRQHandler+0x10>)
 80031e6:	f003 fc46 	bl	8006a76 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80031ea:	bf00      	nop
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	20002884 	.word	0x20002884

080031f4 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 80031f8:	4802      	ldr	r0, [pc, #8]	; (8003204 <DMA2_Stream5_IRQHandler+0x10>)
 80031fa:	f001 f973 	bl	80044e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80031fe:	bf00      	nop
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	20001938 	.word	0x20001938

08003208 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  return 1;
 800320c:	2301      	movs	r3, #1
}
 800320e:	4618      	mov	r0, r3
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <_kill>:

int _kill(int pid, int sig)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003222:	f017 fd9d 	bl	801ad60 <__errno>
 8003226:	4603      	mov	r3, r0
 8003228:	2216      	movs	r2, #22
 800322a:	601a      	str	r2, [r3, #0]
  return -1;
 800322c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003230:	4618      	mov	r0, r3
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <_exit>:

void _exit (int status)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003240:	f04f 31ff 	mov.w	r1, #4294967295
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f7ff ffe7 	bl	8003218 <_kill>
  while (1) {}    /* Make sure we hang here */
 800324a:	e7fe      	b.n	800324a <_exit+0x12>

0800324c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	e00a      	b.n	8003274 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800325e:	f3af 8000 	nop.w
 8003262:	4601      	mov	r1, r0
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	60ba      	str	r2, [r7, #8]
 800326a:	b2ca      	uxtb	r2, r1
 800326c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	3301      	adds	r3, #1
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	429a      	cmp	r2, r3
 800327a:	dbf0      	blt.n	800325e <_read+0x12>
  }

  return len;
 800327c:	687b      	ldr	r3, [r7, #4]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b086      	sub	sp, #24
 800328a:	af00      	add	r7, sp, #0
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003292:	2300      	movs	r3, #0
 8003294:	617b      	str	r3, [r7, #20]
 8003296:	e009      	b.n	80032ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	60ba      	str	r2, [r7, #8]
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	3301      	adds	r3, #1
 80032aa:	617b      	str	r3, [r7, #20]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	dbf1      	blt.n	8003298 <_write+0x12>
  }
  return len;
 80032b4:	687b      	ldr	r3, [r7, #4]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <_close>:

int _close(int file)
{
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80032c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032e6:	605a      	str	r2, [r3, #4]
  return 0;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <_isatty>:

int _isatty(int file)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80032fe:	2301      	movs	r3, #1
}
 8003300:	4618      	mov	r0, r3
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
	...

08003328 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003330:	4a14      	ldr	r2, [pc, #80]	; (8003384 <_sbrk+0x5c>)
 8003332:	4b15      	ldr	r3, [pc, #84]	; (8003388 <_sbrk+0x60>)
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800333c:	4b13      	ldr	r3, [pc, #76]	; (800338c <_sbrk+0x64>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d102      	bne.n	800334a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003344:	4b11      	ldr	r3, [pc, #68]	; (800338c <_sbrk+0x64>)
 8003346:	4a12      	ldr	r2, [pc, #72]	; (8003390 <_sbrk+0x68>)
 8003348:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800334a:	4b10      	ldr	r3, [pc, #64]	; (800338c <_sbrk+0x64>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	429a      	cmp	r2, r3
 8003356:	d207      	bcs.n	8003368 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003358:	f017 fd02 	bl	801ad60 <__errno>
 800335c:	4603      	mov	r3, r0
 800335e:	220c      	movs	r2, #12
 8003360:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003362:	f04f 33ff 	mov.w	r3, #4294967295
 8003366:	e009      	b.n	800337c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003368:	4b08      	ldr	r3, [pc, #32]	; (800338c <_sbrk+0x64>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800336e:	4b07      	ldr	r3, [pc, #28]	; (800338c <_sbrk+0x64>)
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4413      	add	r3, r2
 8003376:	4a05      	ldr	r2, [pc, #20]	; (800338c <_sbrk+0x64>)
 8003378:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800337a:	68fb      	ldr	r3, [r7, #12]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3718      	adds	r7, #24
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	20018000 	.word	0x20018000
 8003388:	00000400 	.word	0x00000400
 800338c:	20001a20 	.word	0x20001a20
 8003390:	20003618 	.word	0x20003618

08003394 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003398:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <SystemInit+0x20>)
 800339a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339e:	4a05      	ldr	r2, [pc, #20]	; (80033b4 <SystemInit+0x20>)
 80033a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033a8:	bf00      	nop
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	e000ed00 	.word	0xe000ed00

080033b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80033b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033bc:	480d      	ldr	r0, [pc, #52]	; (80033f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80033be:	490e      	ldr	r1, [pc, #56]	; (80033f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80033c0:	4a0e      	ldr	r2, [pc, #56]	; (80033fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80033c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033c4:	e002      	b.n	80033cc <LoopCopyDataInit>

080033c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033ca:	3304      	adds	r3, #4

080033cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033d0:	d3f9      	bcc.n	80033c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033d2:	4a0b      	ldr	r2, [pc, #44]	; (8003400 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80033d4:	4c0b      	ldr	r4, [pc, #44]	; (8003404 <LoopFillZerobss+0x26>)
  movs r3, #0
 80033d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033d8:	e001      	b.n	80033de <LoopFillZerobss>

080033da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033dc:	3204      	adds	r2, #4

080033de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033e0:	d3fb      	bcc.n	80033da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80033e2:	f7ff ffd7 	bl	8003394 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033e6:	f017 fd2f 	bl	801ae48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033ea:	f7fe fecb 	bl	8002184 <main>
  bx  lr    
 80033ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80033f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80033f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033f8:	20000314 	.word	0x20000314
  ldr r2, =_sidata
 80033fc:	08021d88 	.word	0x08021d88
  ldr r2, =_sbss
 8003400:	20000314 	.word	0x20000314
  ldr r4, =_ebss
 8003404:	20003618 	.word	0x20003618

08003408 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003408:	e7fe      	b.n	8003408 <ADC_IRQHandler>
	...

0800340c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003410:	4b0e      	ldr	r3, [pc, #56]	; (800344c <HAL_Init+0x40>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a0d      	ldr	r2, [pc, #52]	; (800344c <HAL_Init+0x40>)
 8003416:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800341a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800341c:	4b0b      	ldr	r3, [pc, #44]	; (800344c <HAL_Init+0x40>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a0a      	ldr	r2, [pc, #40]	; (800344c <HAL_Init+0x40>)
 8003422:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003426:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003428:	4b08      	ldr	r3, [pc, #32]	; (800344c <HAL_Init+0x40>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a07      	ldr	r2, [pc, #28]	; (800344c <HAL_Init+0x40>)
 800342e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003432:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003434:	2003      	movs	r0, #3
 8003436:	f000 fe27 	bl	8004088 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800343a:	200f      	movs	r0, #15
 800343c:	f000 f808 	bl	8003450 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003440:	f7ff fb12 	bl	8002a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40023c00 	.word	0x40023c00

08003450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003458:	4b12      	ldr	r3, [pc, #72]	; (80034a4 <HAL_InitTick+0x54>)
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	4b12      	ldr	r3, [pc, #72]	; (80034a8 <HAL_InitTick+0x58>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	4619      	mov	r1, r3
 8003462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003466:	fbb3 f3f1 	udiv	r3, r3, r1
 800346a:	fbb2 f3f3 	udiv	r3, r2, r3
 800346e:	4618      	mov	r0, r3
 8003470:	f000 fe51 	bl	8004116 <HAL_SYSTICK_Config>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e00e      	b.n	800349c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b0f      	cmp	r3, #15
 8003482:	d80a      	bhi.n	800349a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003484:	2200      	movs	r2, #0
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	f04f 30ff 	mov.w	r0, #4294967295
 800348c:	f000 fe07 	bl	800409e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003490:	4a06      	ldr	r2, [pc, #24]	; (80034ac <HAL_InitTick+0x5c>)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003496:	2300      	movs	r3, #0
 8003498:	e000      	b.n	800349c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
}
 800349c:	4618      	mov	r0, r3
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	2000000c 	.word	0x2000000c
 80034a8:	20000014 	.word	0x20000014
 80034ac:	20000010 	.word	0x20000010

080034b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034b4:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <HAL_IncTick+0x20>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	461a      	mov	r2, r3
 80034ba:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <HAL_IncTick+0x24>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4413      	add	r3, r2
 80034c0:	4a04      	ldr	r2, [pc, #16]	; (80034d4 <HAL_IncTick+0x24>)
 80034c2:	6013      	str	r3, [r2, #0]
}
 80034c4:	bf00      	nop
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	20000014 	.word	0x20000014
 80034d4:	20001a24 	.word	0x20001a24

080034d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  return uwTick;
 80034dc:	4b03      	ldr	r3, [pc, #12]	; (80034ec <HAL_GetTick+0x14>)
 80034de:	681b      	ldr	r3, [r3, #0]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	20001a24 	.word	0x20001a24

080034f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034f8:	f7ff ffee 	bl	80034d8 <HAL_GetTick>
 80034fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003508:	d005      	beq.n	8003516 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800350a:	4b0a      	ldr	r3, [pc, #40]	; (8003534 <HAL_Delay+0x44>)
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	461a      	mov	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4413      	add	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003516:	bf00      	nop
 8003518:	f7ff ffde 	bl	80034d8 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	429a      	cmp	r2, r3
 8003526:	d8f7      	bhi.n	8003518 <HAL_Delay+0x28>
  {
  }
}
 8003528:	bf00      	nop
 800352a:	bf00      	nop
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	20000014 	.word	0x20000014

08003538 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800353c:	4b05      	ldr	r3, [pc, #20]	; (8003554 <HAL_SuspendTick+0x1c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a04      	ldr	r2, [pc, #16]	; (8003554 <HAL_SuspendTick+0x1c>)
 8003542:	f023 0302 	bic.w	r3, r3, #2
 8003546:	6013      	str	r3, [r2, #0]
}
 8003548:	bf00      	nop
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	e000e010 	.word	0xe000e010

08003558 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800355c:	4b05      	ldr	r3, [pc, #20]	; (8003574 <HAL_ResumeTick+0x1c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a04      	ldr	r2, [pc, #16]	; (8003574 <HAL_ResumeTick+0x1c>)
 8003562:	f043 0302 	orr.w	r3, r3, #2
 8003566:	6013      	str	r3, [r2, #0]
}
 8003568:	bf00      	nop
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	e000e010 	.word	0xe000e010

08003578 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 800357c:	4b03      	ldr	r3, [pc, #12]	; (800358c <HAL_GetUIDw0+0x14>)
 800357e:	681b      	ldr	r3, [r3, #0]
}
 8003580:	4618      	mov	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	1fff7a10 	.word	0x1fff7a10

08003590 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003594:	4b03      	ldr	r3, [pc, #12]	; (80035a4 <HAL_GetUIDw1+0x14>)
 8003596:	681b      	ldr	r3, [r3, #0]
}
 8003598:	4618      	mov	r0, r3
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	1fff7a14 	.word	0x1fff7a14

080035a8 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80035ac:	4b03      	ldr	r3, [pc, #12]	; (80035bc <HAL_GetUIDw2+0x14>)
 80035ae:	681b      	ldr	r3, [r3, #0]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	1fff7a18 	.word	0x1fff7a18

080035c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035c8:	2300      	movs	r3, #0
 80035ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e033      	b.n	800363e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d109      	bne.n	80035f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7ff fa6a 	bl	8002ab8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	f003 0310 	and.w	r3, r3, #16
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d118      	bne.n	8003630 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003606:	f023 0302 	bic.w	r3, r3, #2
 800360a:	f043 0202 	orr.w	r2, r3, #2
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 faec 	bl	8003bf0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	f023 0303 	bic.w	r3, r3, #3
 8003626:	f043 0201 	orr.w	r2, r3, #1
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	641a      	str	r2, [r3, #64]	; 0x40
 800362e:	e001      	b.n	8003634 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800363c:	7bfb      	ldrb	r3, [r7, #15]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b084      	sub	sp, #16
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e022      	b.n	80036a2 <HAL_ADC_DeInit+0x5c>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	f043 0202 	orr.w	r2, r3, #2
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0201 	bic.w	r2, r2, #1
 8003676:	609a      	str	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d108      	bne.n	8003698 <HAL_ADC_DeInit+0x52>

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7ff fa5a 	bl	8002b40 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d101      	bne.n	80036c6 <HAL_ADC_Start+0x1a>
 80036c2:	2302      	movs	r3, #2
 80036c4:	e097      	b.n	80037f6 <HAL_ADC_Start+0x14a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d018      	beq.n	800370e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0201 	orr.w	r2, r2, #1
 80036ea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80036ec:	4b45      	ldr	r3, [pc, #276]	; (8003804 <HAL_ADC_Start+0x158>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a45      	ldr	r2, [pc, #276]	; (8003808 <HAL_ADC_Start+0x15c>)
 80036f2:	fba2 2303 	umull	r2, r3, r2, r3
 80036f6:	0c9a      	lsrs	r2, r3, #18
 80036f8:	4613      	mov	r3, r2
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	4413      	add	r3, r2
 80036fe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003700:	e002      	b.n	8003708 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	3b01      	subs	r3, #1
 8003706:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f9      	bne.n	8003702 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b01      	cmp	r3, #1
 800371a:	d15f      	bne.n	80037dc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003724:	f023 0301 	bic.w	r3, r3, #1
 8003728:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800373a:	2b00      	cmp	r3, #0
 800373c:	d007      	beq.n	800374e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003746:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800375a:	d106      	bne.n	800376a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003760:	f023 0206 	bic.w	r2, r3, #6
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	645a      	str	r2, [r3, #68]	; 0x44
 8003768:	e002      	b.n	8003770 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003778:	4b24      	ldr	r3, [pc, #144]	; (800380c <HAL_ADC_Start+0x160>)
 800377a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003784:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f003 031f 	and.w	r3, r3, #31
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10f      	bne.n	80037b2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d129      	bne.n	80037f4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689a      	ldr	r2, [r3, #8]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80037ae:	609a      	str	r2, [r3, #8]
 80037b0:	e020      	b.n	80037f4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a16      	ldr	r2, [pc, #88]	; (8003810 <HAL_ADC_Start+0x164>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d11b      	bne.n	80037f4 <HAL_ADC_Start+0x148>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d114      	bne.n	80037f4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80037d8:	609a      	str	r2, [r3, #8]
 80037da:	e00b      	b.n	80037f4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e0:	f043 0210 	orr.w	r2, r3, #16
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ec:	f043 0201 	orr.w	r2, r3, #1
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	2000000c 	.word	0x2000000c
 8003808:	431bde83 	.word	0x431bde83
 800380c:	40012300 	.word	0x40012300
 8003810:	40012000 	.word	0x40012000

08003814 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003822:	2b01      	cmp	r3, #1
 8003824:	d101      	bne.n	800382a <HAL_ADC_Stop+0x16>
 8003826:	2302      	movs	r3, #2
 8003828:	e021      	b.n	800386e <HAL_ADC_Stop+0x5a>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0201 	bic.w	r2, r2, #1
 8003840:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d109      	bne.n	8003864 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003858:	f023 0301 	bic.w	r3, r3, #1
 800385c:	f043 0201 	orr.w	r2, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b084      	sub	sp, #16
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
 8003882:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003896:	d113      	bne.n	80038c0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80038a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038a6:	d10b      	bne.n	80038c0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	f043 0220 	orr.w	r2, r3, #32
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e063      	b.n	8003988 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80038c0:	f7ff fe0a 	bl	80034d8 <HAL_GetTick>
 80038c4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80038c6:	e021      	b.n	800390c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ce:	d01d      	beq.n	800390c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d007      	beq.n	80038e6 <HAL_ADC_PollForConversion+0x6c>
 80038d6:	f7ff fdff 	bl	80034d8 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d212      	bcs.n	800390c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d00b      	beq.n	800390c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	f043 0204 	orr.w	r2, r3, #4
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e03d      	b.n	8003988 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b02      	cmp	r3, #2
 8003918:	d1d6      	bne.n	80038c8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f06f 0212 	mvn.w	r2, #18
 8003922:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d123      	bne.n	8003986 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003942:	2b00      	cmp	r3, #0
 8003944:	d11f      	bne.n	8003986 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003950:	2b00      	cmp	r3, #0
 8003952:	d006      	beq.n	8003962 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800395e:	2b00      	cmp	r3, #0
 8003960:	d111      	bne.n	8003986 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d105      	bne.n	8003986 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	f043 0201 	orr.w	r2, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800399e:	4618      	mov	r0, r3
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
	...

080039ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_ADC_ConfigChannel+0x1c>
 80039c4:	2302      	movs	r3, #2
 80039c6:	e105      	b.n	8003bd4 <HAL_ADC_ConfigChannel+0x228>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b09      	cmp	r3, #9
 80039d6:	d925      	bls.n	8003a24 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68d9      	ldr	r1, [r3, #12]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	461a      	mov	r2, r3
 80039e6:	4613      	mov	r3, r2
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	4413      	add	r3, r2
 80039ec:	3b1e      	subs	r3, #30
 80039ee:	2207      	movs	r2, #7
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	43da      	mvns	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	400a      	ands	r2, r1
 80039fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68d9      	ldr	r1, [r3, #12]
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	4618      	mov	r0, r3
 8003a10:	4603      	mov	r3, r0
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	4403      	add	r3, r0
 8003a16:	3b1e      	subs	r3, #30
 8003a18:	409a      	lsls	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	60da      	str	r2, [r3, #12]
 8003a22:	e022      	b.n	8003a6a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6919      	ldr	r1, [r3, #16]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	461a      	mov	r2, r3
 8003a32:	4613      	mov	r3, r2
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	4413      	add	r3, r2
 8003a38:	2207      	movs	r2, #7
 8003a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3e:	43da      	mvns	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	400a      	ands	r2, r1
 8003a46:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6919      	ldr	r1, [r3, #16]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	4618      	mov	r0, r3
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	4403      	add	r3, r0
 8003a60:	409a      	lsls	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b06      	cmp	r3, #6
 8003a70:	d824      	bhi.n	8003abc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	3b05      	subs	r3, #5
 8003a84:	221f      	movs	r2, #31
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	43da      	mvns	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	400a      	ands	r2, r1
 8003a92:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	3b05      	subs	r3, #5
 8003aae:	fa00 f203 	lsl.w	r2, r0, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	635a      	str	r2, [r3, #52]	; 0x34
 8003aba:	e04c      	b.n	8003b56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2b0c      	cmp	r3, #12
 8003ac2:	d824      	bhi.n	8003b0e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4413      	add	r3, r2
 8003ad4:	3b23      	subs	r3, #35	; 0x23
 8003ad6:	221f      	movs	r2, #31
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	43da      	mvns	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	400a      	ands	r2, r1
 8003ae4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	4618      	mov	r0, r3
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	3b23      	subs	r3, #35	; 0x23
 8003b00:	fa00 f203 	lsl.w	r2, r0, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	631a      	str	r2, [r3, #48]	; 0x30
 8003b0c:	e023      	b.n	8003b56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	3b41      	subs	r3, #65	; 0x41
 8003b20:	221f      	movs	r2, #31
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	43da      	mvns	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	400a      	ands	r2, r1
 8003b2e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	4613      	mov	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	4413      	add	r3, r2
 8003b48:	3b41      	subs	r3, #65	; 0x41
 8003b4a:	fa00 f203 	lsl.w	r2, r0, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b56:	4b22      	ldr	r3, [pc, #136]	; (8003be0 <HAL_ADC_ConfigChannel+0x234>)
 8003b58:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a21      	ldr	r2, [pc, #132]	; (8003be4 <HAL_ADC_ConfigChannel+0x238>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d109      	bne.n	8003b78 <HAL_ADC_ConfigChannel+0x1cc>
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b12      	cmp	r3, #18
 8003b6a:	d105      	bne.n	8003b78 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a19      	ldr	r2, [pc, #100]	; (8003be4 <HAL_ADC_ConfigChannel+0x238>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d123      	bne.n	8003bca <HAL_ADC_ConfigChannel+0x21e>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2b10      	cmp	r3, #16
 8003b88:	d003      	beq.n	8003b92 <HAL_ADC_ConfigChannel+0x1e6>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2b11      	cmp	r3, #17
 8003b90:	d11b      	bne.n	8003bca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2b10      	cmp	r3, #16
 8003ba4:	d111      	bne.n	8003bca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ba6:	4b10      	ldr	r3, [pc, #64]	; (8003be8 <HAL_ADC_ConfigChannel+0x23c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a10      	ldr	r2, [pc, #64]	; (8003bec <HAL_ADC_ConfigChannel+0x240>)
 8003bac:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb0:	0c9a      	lsrs	r2, r3, #18
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003bbc:	e002      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f9      	bne.n	8003bbe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	40012300 	.word	0x40012300
 8003be4:	40012000 	.word	0x40012000
 8003be8:	2000000c 	.word	0x2000000c
 8003bec:	431bde83 	.word	0x431bde83

08003bf0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bf8:	4b79      	ldr	r3, [pc, #484]	; (8003de0 <ADC_Init+0x1f0>)
 8003bfa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	431a      	orrs	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6859      	ldr	r1, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	021a      	lsls	r2, r3, #8
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003c48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6859      	ldr	r1, [r3, #4]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689a      	ldr	r2, [r3, #8]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6899      	ldr	r1, [r3, #8]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c82:	4a58      	ldr	r2, [pc, #352]	; (8003de4 <ADC_Init+0x1f4>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d022      	beq.n	8003cce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6899      	ldr	r1, [r3, #8]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003cb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6899      	ldr	r1, [r3, #8]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	609a      	str	r2, [r3, #8]
 8003ccc:	e00f      	b.n	8003cee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003cdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003cec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0202 	bic.w	r2, r2, #2
 8003cfc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6899      	ldr	r1, [r3, #8]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	7e1b      	ldrb	r3, [r3, #24]
 8003d08:	005a      	lsls	r2, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d01b      	beq.n	8003d54 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d2a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003d3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6859      	ldr	r1, [r3, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	3b01      	subs	r3, #1
 8003d48:	035a      	lsls	r2, r3, #13
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	605a      	str	r2, [r3, #4]
 8003d52:	e007      	b.n	8003d64 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d62:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003d72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	051a      	lsls	r2, r3, #20
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6899      	ldr	r1, [r3, #8]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003da6:	025a      	lsls	r2, r3, #9
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689a      	ldr	r2, [r3, #8]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6899      	ldr	r1, [r3, #8]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	029a      	lsls	r2, r3, #10
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	609a      	str	r2, [r3, #8]
}
 8003dd4:	bf00      	nop
 8003dd6:	3714      	adds	r7, #20
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	40012300 	.word	0x40012300
 8003de4:	0f000001 	.word	0x0f000001

08003de8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d101      	bne.n	8003e00 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e031      	b.n	8003e64 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e08:	4b19      	ldr	r3, [pc, #100]	; (8003e70 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f023 021f 	bic.w	r2, r3, #31
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	431a      	orrs	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	431a      	orrs	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	40012300 	.word	0x40012300

08003e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e84:	4b0c      	ldr	r3, [pc, #48]	; (8003eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e90:	4013      	ands	r3, r2
 8003e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ea6:	4a04      	ldr	r2, [pc, #16]	; (8003eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	60d3      	str	r3, [r2, #12]
}
 8003eac:	bf00      	nop
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	e000ed00 	.word	0xe000ed00

08003ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ec0:	4b04      	ldr	r3, [pc, #16]	; (8003ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	0a1b      	lsrs	r3, r3, #8
 8003ec6:	f003 0307 	and.w	r3, r3, #7
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	e000ed00 	.word	0xe000ed00

08003ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	4603      	mov	r3, r0
 8003ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	db0b      	blt.n	8003f02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eea:	79fb      	ldrb	r3, [r7, #7]
 8003eec:	f003 021f 	and.w	r2, r3, #31
 8003ef0:	4907      	ldr	r1, [pc, #28]	; (8003f10 <__NVIC_EnableIRQ+0x38>)
 8003ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef6:	095b      	lsrs	r3, r3, #5
 8003ef8:	2001      	movs	r0, #1
 8003efa:	fa00 f202 	lsl.w	r2, r0, r2
 8003efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f02:	bf00      	nop
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	e000e100 	.word	0xe000e100

08003f14 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	db12      	blt.n	8003f4c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f26:	79fb      	ldrb	r3, [r7, #7]
 8003f28:	f003 021f 	and.w	r2, r3, #31
 8003f2c:	490a      	ldr	r1, [pc, #40]	; (8003f58 <__NVIC_DisableIRQ+0x44>)
 8003f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f32:	095b      	lsrs	r3, r3, #5
 8003f34:	2001      	movs	r0, #1
 8003f36:	fa00 f202 	lsl.w	r2, r0, r2
 8003f3a:	3320      	adds	r3, #32
 8003f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003f40:	f3bf 8f4f 	dsb	sy
}
 8003f44:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003f46:	f3bf 8f6f 	isb	sy
}
 8003f4a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	e000e100 	.word	0xe000e100

08003f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	4603      	mov	r3, r0
 8003f64:	6039      	str	r1, [r7, #0]
 8003f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	db0a      	blt.n	8003f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	490c      	ldr	r1, [pc, #48]	; (8003fa8 <__NVIC_SetPriority+0x4c>)
 8003f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f7a:	0112      	lsls	r2, r2, #4
 8003f7c:	b2d2      	uxtb	r2, r2
 8003f7e:	440b      	add	r3, r1
 8003f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f84:	e00a      	b.n	8003f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	b2da      	uxtb	r2, r3
 8003f8a:	4908      	ldr	r1, [pc, #32]	; (8003fac <__NVIC_SetPriority+0x50>)
 8003f8c:	79fb      	ldrb	r3, [r7, #7]
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	3b04      	subs	r3, #4
 8003f94:	0112      	lsls	r2, r2, #4
 8003f96:	b2d2      	uxtb	r2, r2
 8003f98:	440b      	add	r3, r1
 8003f9a:	761a      	strb	r2, [r3, #24]
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	e000e100 	.word	0xe000e100
 8003fac:	e000ed00 	.word	0xe000ed00

08003fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b089      	sub	sp, #36	; 0x24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f1c3 0307 	rsb	r3, r3, #7
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	bf28      	it	cs
 8003fce:	2304      	movcs	r3, #4
 8003fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	3304      	adds	r3, #4
 8003fd6:	2b06      	cmp	r3, #6
 8003fd8:	d902      	bls.n	8003fe0 <NVIC_EncodePriority+0x30>
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	3b03      	subs	r3, #3
 8003fde:	e000      	b.n	8003fe2 <NVIC_EncodePriority+0x32>
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	43da      	mvns	r2, r3
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	401a      	ands	r2, r3
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8004002:	43d9      	mvns	r1, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004008:	4313      	orrs	r3, r2
         );
}
 800400a:	4618      	mov	r0, r3
 800400c:	3724      	adds	r7, #36	; 0x24
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
	...

08004018 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800401c:	f3bf 8f4f 	dsb	sy
}
 8004020:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004022:	4b06      	ldr	r3, [pc, #24]	; (800403c <__NVIC_SystemReset+0x24>)
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800402a:	4904      	ldr	r1, [pc, #16]	; (800403c <__NVIC_SystemReset+0x24>)
 800402c:	4b04      	ldr	r3, [pc, #16]	; (8004040 <__NVIC_SystemReset+0x28>)
 800402e:	4313      	orrs	r3, r2
 8004030:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004032:	f3bf 8f4f 	dsb	sy
}
 8004036:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004038:	bf00      	nop
 800403a:	e7fd      	b.n	8004038 <__NVIC_SystemReset+0x20>
 800403c:	e000ed00 	.word	0xe000ed00
 8004040:	05fa0004 	.word	0x05fa0004

08004044 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3b01      	subs	r3, #1
 8004050:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004054:	d301      	bcc.n	800405a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004056:	2301      	movs	r3, #1
 8004058:	e00f      	b.n	800407a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800405a:	4a0a      	ldr	r2, [pc, #40]	; (8004084 <SysTick_Config+0x40>)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3b01      	subs	r3, #1
 8004060:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004062:	210f      	movs	r1, #15
 8004064:	f04f 30ff 	mov.w	r0, #4294967295
 8004068:	f7ff ff78 	bl	8003f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800406c:	4b05      	ldr	r3, [pc, #20]	; (8004084 <SysTick_Config+0x40>)
 800406e:	2200      	movs	r2, #0
 8004070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004072:	4b04      	ldr	r3, [pc, #16]	; (8004084 <SysTick_Config+0x40>)
 8004074:	2207      	movs	r2, #7
 8004076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	e000e010 	.word	0xe000e010

08004088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7ff feef 	bl	8003e74 <__NVIC_SetPriorityGrouping>
}
 8004096:	bf00      	nop
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800409e:	b580      	push	{r7, lr}
 80040a0:	b086      	sub	sp, #24
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	4603      	mov	r3, r0
 80040a6:	60b9      	str	r1, [r7, #8]
 80040a8:	607a      	str	r2, [r7, #4]
 80040aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040b0:	f7ff ff04 	bl	8003ebc <__NVIC_GetPriorityGrouping>
 80040b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	68b9      	ldr	r1, [r7, #8]
 80040ba:	6978      	ldr	r0, [r7, #20]
 80040bc:	f7ff ff78 	bl	8003fb0 <NVIC_EncodePriority>
 80040c0:	4602      	mov	r2, r0
 80040c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040c6:	4611      	mov	r1, r2
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff ff47 	bl	8003f5c <__NVIC_SetPriority>
}
 80040ce:	bf00      	nop
 80040d0:	3718      	adds	r7, #24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b082      	sub	sp, #8
 80040da:	af00      	add	r7, sp, #0
 80040dc:	4603      	mov	r3, r0
 80040de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff fef7 	bl	8003ed8 <__NVIC_EnableIRQ>
}
 80040ea:	bf00      	nop
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b082      	sub	sp, #8
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	4603      	mov	r3, r0
 80040fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80040fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff ff07 	bl	8003f14 <__NVIC_DisableIRQ>
}
 8004106:	bf00      	nop
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004112:	f7ff ff81 	bl	8004018 <__NVIC_SystemReset>

08004116 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b082      	sub	sp, #8
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7ff ff90 	bl	8004044 <SysTick_Config>
 8004124:	4603      	mov	r3, r0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
	...

08004130 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800413c:	f7ff f9cc 	bl	80034d8 <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e099      	b.n	8004280 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0201 	bic.w	r2, r2, #1
 800416a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800416c:	e00f      	b.n	800418e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800416e:	f7ff f9b3 	bl	80034d8 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b05      	cmp	r3, #5
 800417a:	d908      	bls.n	800418e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2220      	movs	r2, #32
 8004180:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2203      	movs	r2, #3
 8004186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e078      	b.n	8004280 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1e8      	bne.n	800416e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	4b38      	ldr	r3, [pc, #224]	; (8004288 <HAL_DMA_Init+0x158>)
 80041a8:	4013      	ands	r3, r2
 80041aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	4313      	orrs	r3, r2
 80041de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	2b04      	cmp	r3, #4
 80041e6:	d107      	bne.n	80041f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f0:	4313      	orrs	r3, r2
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f023 0307 	bic.w	r3, r3, #7
 800420e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	4313      	orrs	r3, r2
 8004218:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	2b04      	cmp	r3, #4
 8004220:	d117      	bne.n	8004252 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00e      	beq.n	8004252 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 fb43 	bl	80048c0 <DMA_CheckFifoParam>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d008      	beq.n	8004252 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2240      	movs	r2, #64	; 0x40
 8004244:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800424e:	2301      	movs	r3, #1
 8004250:	e016      	b.n	8004280 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 fafa 	bl	8004854 <DMA_CalcBaseAndBitshift>
 8004260:	4603      	mov	r3, r0
 8004262:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004268:	223f      	movs	r2, #63	; 0x3f
 800426a:	409a      	lsls	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3718      	adds	r7, #24
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	f010803f 	.word	0xf010803f

0800428c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e050      	b.n	8004340 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d101      	bne.n	80042ae <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80042aa:	2302      	movs	r3, #2
 80042ac:	e048      	b.n	8004340 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 0201 	bic.w	r2, r2, #1
 80042bc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2200      	movs	r2, #0
 80042cc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2200      	movs	r2, #0
 80042d4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2200      	movs	r2, #0
 80042dc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2200      	movs	r2, #0
 80042e4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2221      	movs	r2, #33	; 0x21
 80042ec:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 fab0 	bl	8004854 <DMA_CalcBaseAndBitshift>
 80042f4:	4603      	mov	r3, r0
 80042f6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004320:	223f      	movs	r2, #63	; 0x3f
 8004322:	409a      	lsls	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
 8004354:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004360:	2b01      	cmp	r3, #1
 8004362:	d101      	bne.n	8004368 <HAL_DMA_Start+0x20>
 8004364:	2302      	movs	r3, #2
 8004366:	e026      	b.n	80043b6 <HAL_DMA_Start+0x6e>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b01      	cmp	r3, #1
 800437a:	d115      	bne.n	80043a8 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	68b9      	ldr	r1, [r7, #8]
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 fa31 	bl	80047f8 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f042 0201 	orr.w	r2, r2, #1
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	e005      	b.n	80043b4 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80043b0:	2302      	movs	r3, #2
 80043b2:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 80043b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b084      	sub	sp, #16
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80043cc:	f7ff f884 	bl	80034d8 <HAL_GetTick>
 80043d0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d008      	beq.n	80043f0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2280      	movs	r2, #128	; 0x80
 80043e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e052      	b.n	8004496 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 0216 	bic.w	r2, r2, #22
 80043fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695a      	ldr	r2, [r3, #20]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800440e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	2b00      	cmp	r3, #0
 8004416:	d103      	bne.n	8004420 <HAL_DMA_Abort+0x62>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800441c:	2b00      	cmp	r3, #0
 800441e:	d007      	beq.n	8004430 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0208 	bic.w	r2, r2, #8
 800442e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0201 	bic.w	r2, r2, #1
 800443e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004440:	e013      	b.n	800446a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004442:	f7ff f849 	bl	80034d8 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b05      	cmp	r3, #5
 800444e:	d90c      	bls.n	800446a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2220      	movs	r2, #32
 8004454:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2203      	movs	r2, #3
 800445a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e015      	b.n	8004496 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1e4      	bne.n	8004442 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800447c:	223f      	movs	r2, #63	; 0x3f
 800447e:	409a      	lsls	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d004      	beq.n	80044bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2280      	movs	r2, #128	; 0x80
 80044b6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e00c      	b.n	80044d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2205      	movs	r2, #5
 80044c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0201 	bic.w	r2, r2, #1
 80044d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
	...

080044e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80044f0:	4b8e      	ldr	r3, [pc, #568]	; (800472c <HAL_DMA_IRQHandler+0x248>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a8e      	ldr	r2, [pc, #568]	; (8004730 <HAL_DMA_IRQHandler+0x24c>)
 80044f6:	fba2 2303 	umull	r2, r3, r2, r3
 80044fa:	0a9b      	lsrs	r3, r3, #10
 80044fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004502:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800450e:	2208      	movs	r2, #8
 8004510:	409a      	lsls	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	4013      	ands	r3, r2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d01a      	beq.n	8004550 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	2b00      	cmp	r3, #0
 8004526:	d013      	beq.n	8004550 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 0204 	bic.w	r2, r2, #4
 8004536:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800453c:	2208      	movs	r2, #8
 800453e:	409a      	lsls	r2, r3
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004548:	f043 0201 	orr.w	r2, r3, #1
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004554:	2201      	movs	r2, #1
 8004556:	409a      	lsls	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4013      	ands	r3, r2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d012      	beq.n	8004586 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00b      	beq.n	8004586 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004572:	2201      	movs	r2, #1
 8004574:	409a      	lsls	r2, r3
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457e:	f043 0202 	orr.w	r2, r3, #2
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800458a:	2204      	movs	r2, #4
 800458c:	409a      	lsls	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	4013      	ands	r3, r2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d012      	beq.n	80045bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00b      	beq.n	80045bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a8:	2204      	movs	r2, #4
 80045aa:	409a      	lsls	r2, r3
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b4:	f043 0204 	orr.w	r2, r3, #4
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c0:	2210      	movs	r2, #16
 80045c2:	409a      	lsls	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4013      	ands	r3, r2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d043      	beq.n	8004654 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0308 	and.w	r3, r3, #8
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d03c      	beq.n	8004654 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045de:	2210      	movs	r2, #16
 80045e0:	409a      	lsls	r2, r3
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d018      	beq.n	8004626 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d108      	bne.n	8004614 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	2b00      	cmp	r3, #0
 8004608:	d024      	beq.n	8004654 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	4798      	blx	r3
 8004612:	e01f      	b.n	8004654 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004618:	2b00      	cmp	r3, #0
 800461a:	d01b      	beq.n	8004654 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	4798      	blx	r3
 8004624:	e016      	b.n	8004654 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004630:	2b00      	cmp	r3, #0
 8004632:	d107      	bne.n	8004644 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0208 	bic.w	r2, r2, #8
 8004642:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004658:	2220      	movs	r2, #32
 800465a:	409a      	lsls	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4013      	ands	r3, r2
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 808f 	beq.w	8004784 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0310 	and.w	r3, r3, #16
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 8087 	beq.w	8004784 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800467a:	2220      	movs	r2, #32
 800467c:	409a      	lsls	r2, r3
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b05      	cmp	r3, #5
 800468c:	d136      	bne.n	80046fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0216 	bic.w	r2, r2, #22
 800469c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	695a      	ldr	r2, [r3, #20]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d103      	bne.n	80046be <HAL_DMA_IRQHandler+0x1da>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d007      	beq.n	80046ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0208 	bic.w	r2, r2, #8
 80046cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d2:	223f      	movs	r2, #63	; 0x3f
 80046d4:	409a      	lsls	r2, r3
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d07e      	beq.n	80047f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	4798      	blx	r3
        }
        return;
 80046fa:	e079      	b.n	80047f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d01d      	beq.n	8004746 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10d      	bne.n	8004734 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471c:	2b00      	cmp	r3, #0
 800471e:	d031      	beq.n	8004784 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	4798      	blx	r3
 8004728:	e02c      	b.n	8004784 <HAL_DMA_IRQHandler+0x2a0>
 800472a:	bf00      	nop
 800472c:	2000000c 	.word	0x2000000c
 8004730:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004738:	2b00      	cmp	r3, #0
 800473a:	d023      	beq.n	8004784 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	4798      	blx	r3
 8004744:	e01e      	b.n	8004784 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10f      	bne.n	8004774 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f022 0210 	bic.w	r2, r2, #16
 8004762:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004788:	2b00      	cmp	r3, #0
 800478a:	d032      	beq.n	80047f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b00      	cmp	r3, #0
 8004796:	d022      	beq.n	80047de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2205      	movs	r2, #5
 800479c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 0201 	bic.w	r2, r2, #1
 80047ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	3301      	adds	r3, #1
 80047b4:	60bb      	str	r3, [r7, #8]
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d307      	bcc.n	80047cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1f2      	bne.n	80047b0 <HAL_DMA_IRQHandler+0x2cc>
 80047ca:	e000      	b.n	80047ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80047cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d005      	beq.n	80047f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	4798      	blx	r3
 80047ee:	e000      	b.n	80047f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80047f0:	bf00      	nop
    }
  }
}
 80047f2:	3718      	adds	r7, #24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
 8004804:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004814:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	2b40      	cmp	r3, #64	; 0x40
 8004824:	d108      	bne.n	8004838 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004836:	e007      	b.n	8004848 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	60da      	str	r2, [r3, #12]
}
 8004848:	bf00      	nop
 800484a:	3714      	adds	r7, #20
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	b2db      	uxtb	r3, r3
 8004862:	3b10      	subs	r3, #16
 8004864:	4a14      	ldr	r2, [pc, #80]	; (80048b8 <DMA_CalcBaseAndBitshift+0x64>)
 8004866:	fba2 2303 	umull	r2, r3, r2, r3
 800486a:	091b      	lsrs	r3, r3, #4
 800486c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800486e:	4a13      	ldr	r2, [pc, #76]	; (80048bc <DMA_CalcBaseAndBitshift+0x68>)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4413      	add	r3, r2
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	461a      	mov	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2b03      	cmp	r3, #3
 8004880:	d909      	bls.n	8004896 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800488a:	f023 0303 	bic.w	r3, r3, #3
 800488e:	1d1a      	adds	r2, r3, #4
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	659a      	str	r2, [r3, #88]	; 0x58
 8004894:	e007      	b.n	80048a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800489e:	f023 0303 	bic.w	r3, r3, #3
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	aaaaaaab 	.word	0xaaaaaaab
 80048bc:	080213e0 	.word	0x080213e0

080048c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048c8:	2300      	movs	r3, #0
 80048ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d11f      	bne.n	800491a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	2b03      	cmp	r3, #3
 80048de:	d856      	bhi.n	800498e <DMA_CheckFifoParam+0xce>
 80048e0:	a201      	add	r2, pc, #4	; (adr r2, 80048e8 <DMA_CheckFifoParam+0x28>)
 80048e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e6:	bf00      	nop
 80048e8:	080048f9 	.word	0x080048f9
 80048ec:	0800490b 	.word	0x0800490b
 80048f0:	080048f9 	.word	0x080048f9
 80048f4:	0800498f 	.word	0x0800498f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d046      	beq.n	8004992 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004908:	e043      	b.n	8004992 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004912:	d140      	bne.n	8004996 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004918:	e03d      	b.n	8004996 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004922:	d121      	bne.n	8004968 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2b03      	cmp	r3, #3
 8004928:	d837      	bhi.n	800499a <DMA_CheckFifoParam+0xda>
 800492a:	a201      	add	r2, pc, #4	; (adr r2, 8004930 <DMA_CheckFifoParam+0x70>)
 800492c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004930:	08004941 	.word	0x08004941
 8004934:	08004947 	.word	0x08004947
 8004938:	08004941 	.word	0x08004941
 800493c:	08004959 	.word	0x08004959
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	73fb      	strb	r3, [r7, #15]
      break;
 8004944:	e030      	b.n	80049a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d025      	beq.n	800499e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004956:	e022      	b.n	800499e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004960:	d11f      	bne.n	80049a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004966:	e01c      	b.n	80049a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2b02      	cmp	r3, #2
 800496c:	d903      	bls.n	8004976 <DMA_CheckFifoParam+0xb6>
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	2b03      	cmp	r3, #3
 8004972:	d003      	beq.n	800497c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004974:	e018      	b.n	80049a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	73fb      	strb	r3, [r7, #15]
      break;
 800497a:	e015      	b.n	80049a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00e      	beq.n	80049a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	73fb      	strb	r3, [r7, #15]
      break;
 800498c:	e00b      	b.n	80049a6 <DMA_CheckFifoParam+0xe6>
      break;
 800498e:	bf00      	nop
 8004990:	e00a      	b.n	80049a8 <DMA_CheckFifoParam+0xe8>
      break;
 8004992:	bf00      	nop
 8004994:	e008      	b.n	80049a8 <DMA_CheckFifoParam+0xe8>
      break;
 8004996:	bf00      	nop
 8004998:	e006      	b.n	80049a8 <DMA_CheckFifoParam+0xe8>
      break;
 800499a:	bf00      	nop
 800499c:	e004      	b.n	80049a8 <DMA_CheckFifoParam+0xe8>
      break;
 800499e:	bf00      	nop
 80049a0:	e002      	b.n	80049a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80049a2:	bf00      	nop
 80049a4:	e000      	b.n	80049a8 <DMA_CheckFifoParam+0xe8>
      break;
 80049a6:	bf00      	nop
    }
  } 
  
  return status; 
 80049a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop

080049b8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80049ca:	4b23      	ldr	r3, [pc, #140]	; (8004a58 <HAL_FLASH_Program+0xa0>)
 80049cc:	7e1b      	ldrb	r3, [r3, #24]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d101      	bne.n	80049d6 <HAL_FLASH_Program+0x1e>
 80049d2:	2302      	movs	r3, #2
 80049d4:	e03b      	b.n	8004a4e <HAL_FLASH_Program+0x96>
 80049d6:	4b20      	ldr	r3, [pc, #128]	; (8004a58 <HAL_FLASH_Program+0xa0>)
 80049d8:	2201      	movs	r2, #1
 80049da:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80049dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80049e0:	f000 f87c 	bl	8004adc <FLASH_WaitForLastOperation>
 80049e4:	4603      	mov	r3, r0
 80049e6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80049e8:	7dfb      	ldrb	r3, [r7, #23]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d12b      	bne.n	8004a46 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d105      	bne.n	8004a00 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80049f4:	783b      	ldrb	r3, [r7, #0]
 80049f6:	4619      	mov	r1, r3
 80049f8:	68b8      	ldr	r0, [r7, #8]
 80049fa:	f000 f927 	bl	8004c4c <FLASH_Program_Byte>
 80049fe:	e016      	b.n	8004a2e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d105      	bne.n	8004a12 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004a06:	883b      	ldrh	r3, [r7, #0]
 8004a08:	4619      	mov	r1, r3
 8004a0a:	68b8      	ldr	r0, [r7, #8]
 8004a0c:	f000 f8fa 	bl	8004c04 <FLASH_Program_HalfWord>
 8004a10:	e00d      	b.n	8004a2e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d105      	bne.n	8004a24 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	68b8      	ldr	r0, [r7, #8]
 8004a1e:	f000 f8cf 	bl	8004bc0 <FLASH_Program_Word>
 8004a22:	e004      	b.n	8004a2e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004a24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a28:	68b8      	ldr	r0, [r7, #8]
 8004a2a:	f000 f897 	bl	8004b5c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004a2e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004a32:	f000 f853 	bl	8004adc <FLASH_WaitForLastOperation>
 8004a36:	4603      	mov	r3, r0
 8004a38:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004a3a:	4b08      	ldr	r3, [pc, #32]	; (8004a5c <HAL_FLASH_Program+0xa4>)
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	4a07      	ldr	r2, [pc, #28]	; (8004a5c <HAL_FLASH_Program+0xa4>)
 8004a40:	f023 0301 	bic.w	r3, r3, #1
 8004a44:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004a46:	4b04      	ldr	r3, [pc, #16]	; (8004a58 <HAL_FLASH_Program+0xa0>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3718      	adds	r7, #24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	20001a28 	.word	0x20001a28
 8004a5c:	40023c00 	.word	0x40023c00

08004a60 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004a66:	2300      	movs	r3, #0
 8004a68:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004a6a:	4b0b      	ldr	r3, [pc, #44]	; (8004a98 <HAL_FLASH_Unlock+0x38>)
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	da0b      	bge.n	8004a8a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004a72:	4b09      	ldr	r3, [pc, #36]	; (8004a98 <HAL_FLASH_Unlock+0x38>)
 8004a74:	4a09      	ldr	r2, [pc, #36]	; (8004a9c <HAL_FLASH_Unlock+0x3c>)
 8004a76:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004a78:	4b07      	ldr	r3, [pc, #28]	; (8004a98 <HAL_FLASH_Unlock+0x38>)
 8004a7a:	4a09      	ldr	r2, [pc, #36]	; (8004aa0 <HAL_FLASH_Unlock+0x40>)
 8004a7c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004a7e:	4b06      	ldr	r3, [pc, #24]	; (8004a98 <HAL_FLASH_Unlock+0x38>)
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	da01      	bge.n	8004a8a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004a8a:	79fb      	ldrb	r3, [r7, #7]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	40023c00 	.word	0x40023c00
 8004a9c:	45670123 	.word	0x45670123
 8004aa0:	cdef89ab 	.word	0xcdef89ab

08004aa4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004aa8:	4b05      	ldr	r3, [pc, #20]	; (8004ac0 <HAL_FLASH_Lock+0x1c>)
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	4a04      	ldr	r2, [pc, #16]	; (8004ac0 <HAL_FLASH_Lock+0x1c>)
 8004aae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ab2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	40023c00 	.word	0x40023c00

08004ac4 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8004ac8:	4b03      	ldr	r3, [pc, #12]	; (8004ad8 <HAL_FLASH_GetError+0x14>)
 8004aca:	69db      	ldr	r3, [r3, #28]
}  
 8004acc:	4618      	mov	r0, r3
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	20001a28 	.word	0x20001a28

08004adc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004ae8:	4b1a      	ldr	r3, [pc, #104]	; (8004b54 <FLASH_WaitForLastOperation+0x78>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004aee:	f7fe fcf3 	bl	80034d8 <HAL_GetTick>
 8004af2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004af4:	e010      	b.n	8004b18 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004afc:	d00c      	beq.n	8004b18 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d007      	beq.n	8004b14 <FLASH_WaitForLastOperation+0x38>
 8004b04:	f7fe fce8 	bl	80034d8 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d201      	bcs.n	8004b18 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e019      	b.n	8004b4c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004b18:	4b0f      	ldr	r3, [pc, #60]	; (8004b58 <FLASH_WaitForLastOperation+0x7c>)
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1e8      	bne.n	8004af6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004b24:	4b0c      	ldr	r3, [pc, #48]	; (8004b58 <FLASH_WaitForLastOperation+0x7c>)
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d002      	beq.n	8004b36 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004b30:	4b09      	ldr	r3, [pc, #36]	; (8004b58 <FLASH_WaitForLastOperation+0x7c>)
 8004b32:	2201      	movs	r2, #1
 8004b34:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004b36:	4b08      	ldr	r3, [pc, #32]	; (8004b58 <FLASH_WaitForLastOperation+0x7c>)
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004b42:	f000 f8a5 	bl	8004c90 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e000      	b.n	8004b4c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
  
}  
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	20001a28 	.word	0x20001a28
 8004b58:	40023c00 	.word	0x40023c00

08004b5c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004b68:	4b14      	ldr	r3, [pc, #80]	; (8004bbc <FLASH_Program_DoubleWord+0x60>)
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	4a13      	ldr	r2, [pc, #76]	; (8004bbc <FLASH_Program_DoubleWord+0x60>)
 8004b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b72:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004b74:	4b11      	ldr	r3, [pc, #68]	; (8004bbc <FLASH_Program_DoubleWord+0x60>)
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	4a10      	ldr	r2, [pc, #64]	; (8004bbc <FLASH_Program_DoubleWord+0x60>)
 8004b7a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004b7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004b80:	4b0e      	ldr	r3, [pc, #56]	; (8004bbc <FLASH_Program_DoubleWord+0x60>)
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	4a0d      	ldr	r2, [pc, #52]	; (8004bbc <FLASH_Program_DoubleWord+0x60>)
 8004b86:	f043 0301 	orr.w	r3, r3, #1
 8004b8a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004b92:	f3bf 8f6f 	isb	sy
}
 8004b96:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004b98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b9c:	f04f 0200 	mov.w	r2, #0
 8004ba0:	f04f 0300 	mov.w	r3, #0
 8004ba4:	000a      	movs	r2, r1
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	68f9      	ldr	r1, [r7, #12]
 8004baa:	3104      	adds	r1, #4
 8004bac:	4613      	mov	r3, r2
 8004bae:	600b      	str	r3, [r1, #0]
}
 8004bb0:	bf00      	nop
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	40023c00 	.word	0x40023c00

08004bc0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004bca:	4b0d      	ldr	r3, [pc, #52]	; (8004c00 <FLASH_Program_Word+0x40>)
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	4a0c      	ldr	r2, [pc, #48]	; (8004c00 <FLASH_Program_Word+0x40>)
 8004bd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004bd6:	4b0a      	ldr	r3, [pc, #40]	; (8004c00 <FLASH_Program_Word+0x40>)
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	4a09      	ldr	r2, [pc, #36]	; (8004c00 <FLASH_Program_Word+0x40>)
 8004bdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004be0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004be2:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <FLASH_Program_Word+0x40>)
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	4a06      	ldr	r2, [pc, #24]	; (8004c00 <FLASH_Program_Word+0x40>)
 8004be8:	f043 0301 	orr.w	r3, r3, #1
 8004bec:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	601a      	str	r2, [r3, #0]
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	40023c00 	.word	0x40023c00

08004c04 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004c10:	4b0d      	ldr	r3, [pc, #52]	; (8004c48 <FLASH_Program_HalfWord+0x44>)
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	4a0c      	ldr	r2, [pc, #48]	; (8004c48 <FLASH_Program_HalfWord+0x44>)
 8004c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004c1c:	4b0a      	ldr	r3, [pc, #40]	; (8004c48 <FLASH_Program_HalfWord+0x44>)
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	4a09      	ldr	r2, [pc, #36]	; (8004c48 <FLASH_Program_HalfWord+0x44>)
 8004c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004c28:	4b07      	ldr	r3, [pc, #28]	; (8004c48 <FLASH_Program_HalfWord+0x44>)
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	4a06      	ldr	r2, [pc, #24]	; (8004c48 <FLASH_Program_HalfWord+0x44>)
 8004c2e:	f043 0301 	orr.w	r3, r3, #1
 8004c32:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	887a      	ldrh	r2, [r7, #2]
 8004c38:	801a      	strh	r2, [r3, #0]
}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	40023c00 	.word	0x40023c00

08004c4c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	460b      	mov	r3, r1
 8004c56:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004c58:	4b0c      	ldr	r3, [pc, #48]	; (8004c8c <FLASH_Program_Byte+0x40>)
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	4a0b      	ldr	r2, [pc, #44]	; (8004c8c <FLASH_Program_Byte+0x40>)
 8004c5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c62:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004c64:	4b09      	ldr	r3, [pc, #36]	; (8004c8c <FLASH_Program_Byte+0x40>)
 8004c66:	4a09      	ldr	r2, [pc, #36]	; (8004c8c <FLASH_Program_Byte+0x40>)
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004c6c:	4b07      	ldr	r3, [pc, #28]	; (8004c8c <FLASH_Program_Byte+0x40>)
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	4a06      	ldr	r2, [pc, #24]	; (8004c8c <FLASH_Program_Byte+0x40>)
 8004c72:	f043 0301 	orr.w	r3, r3, #1
 8004c76:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	78fa      	ldrb	r2, [r7, #3]
 8004c7c:	701a      	strb	r2, [r3, #0]
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	40023c00 	.word	0x40023c00

08004c90 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004c90:	b480      	push	{r7}
 8004c92:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004c94:	4b2f      	ldr	r3, [pc, #188]	; (8004d54 <FLASH_SetErrorCode+0xc4>)
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f003 0310 	and.w	r3, r3, #16
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d008      	beq.n	8004cb2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004ca0:	4b2d      	ldr	r3, [pc, #180]	; (8004d58 <FLASH_SetErrorCode+0xc8>)
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	f043 0310 	orr.w	r3, r3, #16
 8004ca8:	4a2b      	ldr	r2, [pc, #172]	; (8004d58 <FLASH_SetErrorCode+0xc8>)
 8004caa:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004cac:	4b29      	ldr	r3, [pc, #164]	; (8004d54 <FLASH_SetErrorCode+0xc4>)
 8004cae:	2210      	movs	r2, #16
 8004cb0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004cb2:	4b28      	ldr	r3, [pc, #160]	; (8004d54 <FLASH_SetErrorCode+0xc4>)
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f003 0320 	and.w	r3, r3, #32
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d008      	beq.n	8004cd0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004cbe:	4b26      	ldr	r3, [pc, #152]	; (8004d58 <FLASH_SetErrorCode+0xc8>)
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	f043 0308 	orr.w	r3, r3, #8
 8004cc6:	4a24      	ldr	r2, [pc, #144]	; (8004d58 <FLASH_SetErrorCode+0xc8>)
 8004cc8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004cca:	4b22      	ldr	r3, [pc, #136]	; (8004d54 <FLASH_SetErrorCode+0xc4>)
 8004ccc:	2220      	movs	r2, #32
 8004cce:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004cd0:	4b20      	ldr	r3, [pc, #128]	; (8004d54 <FLASH_SetErrorCode+0xc4>)
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d008      	beq.n	8004cee <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004cdc:	4b1e      	ldr	r3, [pc, #120]	; (8004d58 <FLASH_SetErrorCode+0xc8>)
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	f043 0304 	orr.w	r3, r3, #4
 8004ce4:	4a1c      	ldr	r2, [pc, #112]	; (8004d58 <FLASH_SetErrorCode+0xc8>)
 8004ce6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004ce8:	4b1a      	ldr	r3, [pc, #104]	; (8004d54 <FLASH_SetErrorCode+0xc4>)
 8004cea:	2240      	movs	r2, #64	; 0x40
 8004cec:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004cee:	4b19      	ldr	r3, [pc, #100]	; (8004d54 <FLASH_SetErrorCode+0xc4>)
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d008      	beq.n	8004d0c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004cfa:	4b17      	ldr	r3, [pc, #92]	; (8004d58 <FLASH_SetErrorCode+0xc8>)
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	f043 0302 	orr.w	r3, r3, #2
 8004d02:	4a15      	ldr	r2, [pc, #84]	; (8004d58 <FLASH_SetErrorCode+0xc8>)
 8004d04:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004d06:	4b13      	ldr	r3, [pc, #76]	; (8004d54 <FLASH_SetErrorCode+0xc4>)
 8004d08:	2280      	movs	r2, #128	; 0x80
 8004d0a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004d0c:	4b11      	ldr	r3, [pc, #68]	; (8004d54 <FLASH_SetErrorCode+0xc4>)
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d009      	beq.n	8004d2c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004d18:	4b0f      	ldr	r3, [pc, #60]	; (8004d58 <FLASH_SetErrorCode+0xc8>)
 8004d1a:	69db      	ldr	r3, [r3, #28]
 8004d1c:	f043 0301 	orr.w	r3, r3, #1
 8004d20:	4a0d      	ldr	r2, [pc, #52]	; (8004d58 <FLASH_SetErrorCode+0xc8>)
 8004d22:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004d24:	4b0b      	ldr	r3, [pc, #44]	; (8004d54 <FLASH_SetErrorCode+0xc4>)
 8004d26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d2a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004d2c:	4b09      	ldr	r3, [pc, #36]	; (8004d54 <FLASH_SetErrorCode+0xc4>)
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d008      	beq.n	8004d4a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004d38:	4b07      	ldr	r3, [pc, #28]	; (8004d58 <FLASH_SetErrorCode+0xc8>)
 8004d3a:	69db      	ldr	r3, [r3, #28]
 8004d3c:	f043 0320 	orr.w	r3, r3, #32
 8004d40:	4a05      	ldr	r2, [pc, #20]	; (8004d58 <FLASH_SetErrorCode+0xc8>)
 8004d42:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004d44:	4b03      	ldr	r3, [pc, #12]	; (8004d54 <FLASH_SetErrorCode+0xc4>)
 8004d46:	2202      	movs	r2, #2
 8004d48:	60da      	str	r2, [r3, #12]
  }
}
 8004d4a:	bf00      	nop
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr
 8004d54:	40023c00 	.word	0x40023c00
 8004d58:	20001a28 	.word	0x20001a28

08004d5c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004d6e:	4b31      	ldr	r3, [pc, #196]	; (8004e34 <HAL_FLASHEx_Erase+0xd8>)
 8004d70:	7e1b      	ldrb	r3, [r3, #24]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d101      	bne.n	8004d7a <HAL_FLASHEx_Erase+0x1e>
 8004d76:	2302      	movs	r3, #2
 8004d78:	e058      	b.n	8004e2c <HAL_FLASHEx_Erase+0xd0>
 8004d7a:	4b2e      	ldr	r3, [pc, #184]	; (8004e34 <HAL_FLASHEx_Erase+0xd8>)
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004d80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004d84:	f7ff feaa 	bl	8004adc <FLASH_WaitForLastOperation>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d148      	bne.n	8004e24 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	f04f 32ff 	mov.w	r2, #4294967295
 8004d98:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d115      	bne.n	8004dce <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	b2da      	uxtb	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	4619      	mov	r1, r3
 8004dae:	4610      	mov	r0, r2
 8004db0:	f000 f844 	bl	8004e3c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004db4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004db8:	f7ff fe90 	bl	8004adc <FLASH_WaitForLastOperation>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004dc0:	4b1d      	ldr	r3, [pc, #116]	; (8004e38 <HAL_FLASHEx_Erase+0xdc>)
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	4a1c      	ldr	r2, [pc, #112]	; (8004e38 <HAL_FLASHEx_Erase+0xdc>)
 8004dc6:	f023 0304 	bic.w	r3, r3, #4
 8004dca:	6113      	str	r3, [r2, #16]
 8004dcc:	e028      	b.n	8004e20 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	60bb      	str	r3, [r7, #8]
 8004dd4:	e01c      	b.n	8004e10 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	4619      	mov	r1, r3
 8004dde:	68b8      	ldr	r0, [r7, #8]
 8004de0:	f000 f850 	bl	8004e84 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004de4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004de8:	f7ff fe78 	bl	8004adc <FLASH_WaitForLastOperation>
 8004dec:	4603      	mov	r3, r0
 8004dee:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004df0:	4b11      	ldr	r3, [pc, #68]	; (8004e38 <HAL_FLASHEx_Erase+0xdc>)
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	4a10      	ldr	r2, [pc, #64]	; (8004e38 <HAL_FLASHEx_Erase+0xdc>)
 8004df6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8004dfa:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8004dfc:	7bfb      	ldrb	r3, [r7, #15]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	601a      	str	r2, [r3, #0]
          break;
 8004e08:	e00a      	b.n	8004e20 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	60bb      	str	r3, [r7, #8]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68da      	ldr	r2, [r3, #12]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	4413      	add	r3, r2
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d3da      	bcc.n	8004dd6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004e20:	f000 f878 	bl	8004f14 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004e24:	4b03      	ldr	r3, [pc, #12]	; (8004e34 <HAL_FLASHEx_Erase+0xd8>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	761a      	strb	r2, [r3, #24]

  return status;
 8004e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	20001a28 	.word	0x20001a28
 8004e38:	40023c00 	.word	0x40023c00

08004e3c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	4603      	mov	r3, r0
 8004e44:	6039      	str	r1, [r7, #0]
 8004e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004e48:	4b0d      	ldr	r3, [pc, #52]	; (8004e80 <FLASH_MassErase+0x44>)
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	4a0c      	ldr	r2, [pc, #48]	; (8004e80 <FLASH_MassErase+0x44>)
 8004e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8004e54:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <FLASH_MassErase+0x44>)
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	4a09      	ldr	r2, [pc, #36]	; (8004e80 <FLASH_MassErase+0x44>)
 8004e5a:	f043 0304 	orr.w	r3, r3, #4
 8004e5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8004e60:	4b07      	ldr	r3, [pc, #28]	; (8004e80 <FLASH_MassErase+0x44>)
 8004e62:	691a      	ldr	r2, [r3, #16]
 8004e64:	79fb      	ldrb	r3, [r7, #7]
 8004e66:	021b      	lsls	r3, r3, #8
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	4a05      	ldr	r2, [pc, #20]	; (8004e80 <FLASH_MassErase+0x44>)
 8004e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e70:	6113      	str	r3, [r2, #16]
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40023c00 	.word	0x40023c00

08004e84 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004e94:	78fb      	ldrb	r3, [r7, #3]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d102      	bne.n	8004ea0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	60fb      	str	r3, [r7, #12]
 8004e9e:	e010      	b.n	8004ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004ea0:	78fb      	ldrb	r3, [r7, #3]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d103      	bne.n	8004eae <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004eaa:	60fb      	str	r3, [r7, #12]
 8004eac:	e009      	b.n	8004ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004eae:	78fb      	ldrb	r3, [r7, #3]
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d103      	bne.n	8004ebc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004eb8:	60fb      	str	r3, [r7, #12]
 8004eba:	e002      	b.n	8004ec2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004ebc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004ec0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004ec2:	4b13      	ldr	r3, [pc, #76]	; (8004f10 <FLASH_Erase_Sector+0x8c>)
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	4a12      	ldr	r2, [pc, #72]	; (8004f10 <FLASH_Erase_Sector+0x8c>)
 8004ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ecc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004ece:	4b10      	ldr	r3, [pc, #64]	; (8004f10 <FLASH_Erase_Sector+0x8c>)
 8004ed0:	691a      	ldr	r2, [r3, #16]
 8004ed2:	490f      	ldr	r1, [pc, #60]	; (8004f10 <FLASH_Erase_Sector+0x8c>)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004eda:	4b0d      	ldr	r3, [pc, #52]	; (8004f10 <FLASH_Erase_Sector+0x8c>)
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	4a0c      	ldr	r2, [pc, #48]	; (8004f10 <FLASH_Erase_Sector+0x8c>)
 8004ee0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004ee4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004ee6:	4b0a      	ldr	r3, [pc, #40]	; (8004f10 <FLASH_Erase_Sector+0x8c>)
 8004ee8:	691a      	ldr	r2, [r3, #16]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	00db      	lsls	r3, r3, #3
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	4a07      	ldr	r2, [pc, #28]	; (8004f10 <FLASH_Erase_Sector+0x8c>)
 8004ef2:	f043 0302 	orr.w	r3, r3, #2
 8004ef6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004ef8:	4b05      	ldr	r3, [pc, #20]	; (8004f10 <FLASH_Erase_Sector+0x8c>)
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	4a04      	ldr	r2, [pc, #16]	; (8004f10 <FLASH_Erase_Sector+0x8c>)
 8004efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f02:	6113      	str	r3, [r2, #16]
}
 8004f04:	bf00      	nop
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	40023c00 	.word	0x40023c00

08004f14 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004f14:	b480      	push	{r7}
 8004f16:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8004f18:	4b20      	ldr	r3, [pc, #128]	; (8004f9c <FLASH_FlushCaches+0x88>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d017      	beq.n	8004f54 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004f24:	4b1d      	ldr	r3, [pc, #116]	; (8004f9c <FLASH_FlushCaches+0x88>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a1c      	ldr	r2, [pc, #112]	; (8004f9c <FLASH_FlushCaches+0x88>)
 8004f2a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f2e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004f30:	4b1a      	ldr	r3, [pc, #104]	; (8004f9c <FLASH_FlushCaches+0x88>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a19      	ldr	r2, [pc, #100]	; (8004f9c <FLASH_FlushCaches+0x88>)
 8004f36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f3a:	6013      	str	r3, [r2, #0]
 8004f3c:	4b17      	ldr	r3, [pc, #92]	; (8004f9c <FLASH_FlushCaches+0x88>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a16      	ldr	r2, [pc, #88]	; (8004f9c <FLASH_FlushCaches+0x88>)
 8004f42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f46:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f48:	4b14      	ldr	r3, [pc, #80]	; (8004f9c <FLASH_FlushCaches+0x88>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a13      	ldr	r2, [pc, #76]	; (8004f9c <FLASH_FlushCaches+0x88>)
 8004f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f52:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004f54:	4b11      	ldr	r3, [pc, #68]	; (8004f9c <FLASH_FlushCaches+0x88>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d017      	beq.n	8004f90 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004f60:	4b0e      	ldr	r3, [pc, #56]	; (8004f9c <FLASH_FlushCaches+0x88>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a0d      	ldr	r2, [pc, #52]	; (8004f9c <FLASH_FlushCaches+0x88>)
 8004f66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f6a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004f6c:	4b0b      	ldr	r3, [pc, #44]	; (8004f9c <FLASH_FlushCaches+0x88>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a0a      	ldr	r2, [pc, #40]	; (8004f9c <FLASH_FlushCaches+0x88>)
 8004f72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f76:	6013      	str	r3, [r2, #0]
 8004f78:	4b08      	ldr	r3, [pc, #32]	; (8004f9c <FLASH_FlushCaches+0x88>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a07      	ldr	r2, [pc, #28]	; (8004f9c <FLASH_FlushCaches+0x88>)
 8004f7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f82:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f84:	4b05      	ldr	r3, [pc, #20]	; (8004f9c <FLASH_FlushCaches+0x88>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a04      	ldr	r2, [pc, #16]	; (8004f9c <FLASH_FlushCaches+0x88>)
 8004f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f8e:	6013      	str	r3, [r2, #0]
  }
}
 8004f90:	bf00      	nop
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	40023c00 	.word	0x40023c00

08004fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b089      	sub	sp, #36	; 0x24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	61fb      	str	r3, [r7, #28]
 8004fba:	e159      	b.n	8005270 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	4013      	ands	r3, r2
 8004fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	f040 8148 	bne.w	800526a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f003 0303 	and.w	r3, r3, #3
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d005      	beq.n	8004ff2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d130      	bne.n	8005054 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	005b      	lsls	r3, r3, #1
 8004ffc:	2203      	movs	r2, #3
 8004ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8005002:	43db      	mvns	r3, r3
 8005004:	69ba      	ldr	r2, [r7, #24]
 8005006:	4013      	ands	r3, r2
 8005008:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	68da      	ldr	r2, [r3, #12]
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	005b      	lsls	r3, r3, #1
 8005012:	fa02 f303 	lsl.w	r3, r2, r3
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	4313      	orrs	r3, r2
 800501a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005028:	2201      	movs	r2, #1
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	fa02 f303 	lsl.w	r3, r2, r3
 8005030:	43db      	mvns	r3, r3
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	4013      	ands	r3, r2
 8005036:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	091b      	lsrs	r3, r3, #4
 800503e:	f003 0201 	and.w	r2, r3, #1
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	fa02 f303 	lsl.w	r3, r2, r3
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	4313      	orrs	r3, r2
 800504c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f003 0303 	and.w	r3, r3, #3
 800505c:	2b03      	cmp	r3, #3
 800505e:	d017      	beq.n	8005090 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	005b      	lsls	r3, r3, #1
 800506a:	2203      	movs	r2, #3
 800506c:	fa02 f303 	lsl.w	r3, r2, r3
 8005070:	43db      	mvns	r3, r3
 8005072:	69ba      	ldr	r2, [r7, #24]
 8005074:	4013      	ands	r3, r2
 8005076:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	689a      	ldr	r2, [r3, #8]
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	fa02 f303 	lsl.w	r3, r2, r3
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	4313      	orrs	r3, r2
 8005088:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f003 0303 	and.w	r3, r3, #3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d123      	bne.n	80050e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	08da      	lsrs	r2, r3, #3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	3208      	adds	r2, #8
 80050a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	f003 0307 	and.w	r3, r3, #7
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	220f      	movs	r2, #15
 80050b4:	fa02 f303 	lsl.w	r3, r2, r3
 80050b8:	43db      	mvns	r3, r3
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	4013      	ands	r3, r2
 80050be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	691a      	ldr	r2, [r3, #16]
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	f003 0307 	and.w	r3, r3, #7
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	fa02 f303 	lsl.w	r3, r2, r3
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	08da      	lsrs	r2, r3, #3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	3208      	adds	r2, #8
 80050de:	69b9      	ldr	r1, [r7, #24]
 80050e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	2203      	movs	r2, #3
 80050f0:	fa02 f303 	lsl.w	r3, r2, r3
 80050f4:	43db      	mvns	r3, r3
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	4013      	ands	r3, r2
 80050fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f003 0203 	and.w	r2, r3, #3
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	fa02 f303 	lsl.w	r3, r2, r3
 800510c:	69ba      	ldr	r2, [r7, #24]
 800510e:	4313      	orrs	r3, r2
 8005110:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005120:	2b00      	cmp	r3, #0
 8005122:	f000 80a2 	beq.w	800526a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005126:	2300      	movs	r3, #0
 8005128:	60fb      	str	r3, [r7, #12]
 800512a:	4b57      	ldr	r3, [pc, #348]	; (8005288 <HAL_GPIO_Init+0x2e8>)
 800512c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512e:	4a56      	ldr	r2, [pc, #344]	; (8005288 <HAL_GPIO_Init+0x2e8>)
 8005130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005134:	6453      	str	r3, [r2, #68]	; 0x44
 8005136:	4b54      	ldr	r3, [pc, #336]	; (8005288 <HAL_GPIO_Init+0x2e8>)
 8005138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800513e:	60fb      	str	r3, [r7, #12]
 8005140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005142:	4a52      	ldr	r2, [pc, #328]	; (800528c <HAL_GPIO_Init+0x2ec>)
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	089b      	lsrs	r3, r3, #2
 8005148:	3302      	adds	r3, #2
 800514a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800514e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	f003 0303 	and.w	r3, r3, #3
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	220f      	movs	r2, #15
 800515a:	fa02 f303 	lsl.w	r3, r2, r3
 800515e:	43db      	mvns	r3, r3
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	4013      	ands	r3, r2
 8005164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a49      	ldr	r2, [pc, #292]	; (8005290 <HAL_GPIO_Init+0x2f0>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d019      	beq.n	80051a2 <HAL_GPIO_Init+0x202>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a48      	ldr	r2, [pc, #288]	; (8005294 <HAL_GPIO_Init+0x2f4>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d013      	beq.n	800519e <HAL_GPIO_Init+0x1fe>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a47      	ldr	r2, [pc, #284]	; (8005298 <HAL_GPIO_Init+0x2f8>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d00d      	beq.n	800519a <HAL_GPIO_Init+0x1fa>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a46      	ldr	r2, [pc, #280]	; (800529c <HAL_GPIO_Init+0x2fc>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d007      	beq.n	8005196 <HAL_GPIO_Init+0x1f6>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a45      	ldr	r2, [pc, #276]	; (80052a0 <HAL_GPIO_Init+0x300>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d101      	bne.n	8005192 <HAL_GPIO_Init+0x1f2>
 800518e:	2304      	movs	r3, #4
 8005190:	e008      	b.n	80051a4 <HAL_GPIO_Init+0x204>
 8005192:	2307      	movs	r3, #7
 8005194:	e006      	b.n	80051a4 <HAL_GPIO_Init+0x204>
 8005196:	2303      	movs	r3, #3
 8005198:	e004      	b.n	80051a4 <HAL_GPIO_Init+0x204>
 800519a:	2302      	movs	r3, #2
 800519c:	e002      	b.n	80051a4 <HAL_GPIO_Init+0x204>
 800519e:	2301      	movs	r3, #1
 80051a0:	e000      	b.n	80051a4 <HAL_GPIO_Init+0x204>
 80051a2:	2300      	movs	r3, #0
 80051a4:	69fa      	ldr	r2, [r7, #28]
 80051a6:	f002 0203 	and.w	r2, r2, #3
 80051aa:	0092      	lsls	r2, r2, #2
 80051ac:	4093      	lsls	r3, r2
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051b4:	4935      	ldr	r1, [pc, #212]	; (800528c <HAL_GPIO_Init+0x2ec>)
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	089b      	lsrs	r3, r3, #2
 80051ba:	3302      	adds	r3, #2
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80051c2:	4b38      	ldr	r3, [pc, #224]	; (80052a4 <HAL_GPIO_Init+0x304>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	43db      	mvns	r3, r3
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	4013      	ands	r3, r2
 80051d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80051e6:	4a2f      	ldr	r2, [pc, #188]	; (80052a4 <HAL_GPIO_Init+0x304>)
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80051ec:	4b2d      	ldr	r3, [pc, #180]	; (80052a4 <HAL_GPIO_Init+0x304>)
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	43db      	mvns	r3, r3
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	4013      	ands	r3, r2
 80051fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d003      	beq.n	8005210 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	4313      	orrs	r3, r2
 800520e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005210:	4a24      	ldr	r2, [pc, #144]	; (80052a4 <HAL_GPIO_Init+0x304>)
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005216:	4b23      	ldr	r3, [pc, #140]	; (80052a4 <HAL_GPIO_Init+0x304>)
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	43db      	mvns	r3, r3
 8005220:	69ba      	ldr	r2, [r7, #24]
 8005222:	4013      	ands	r3, r2
 8005224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	4313      	orrs	r3, r2
 8005238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800523a:	4a1a      	ldr	r2, [pc, #104]	; (80052a4 <HAL_GPIO_Init+0x304>)
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005240:	4b18      	ldr	r3, [pc, #96]	; (80052a4 <HAL_GPIO_Init+0x304>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	43db      	mvns	r3, r3
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	4013      	ands	r3, r2
 800524e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d003      	beq.n	8005264 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	4313      	orrs	r3, r2
 8005262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005264:	4a0f      	ldr	r2, [pc, #60]	; (80052a4 <HAL_GPIO_Init+0x304>)
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	3301      	adds	r3, #1
 800526e:	61fb      	str	r3, [r7, #28]
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	2b0f      	cmp	r3, #15
 8005274:	f67f aea2 	bls.w	8004fbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005278:	bf00      	nop
 800527a:	bf00      	nop
 800527c:	3724      	adds	r7, #36	; 0x24
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	40023800 	.word	0x40023800
 800528c:	40013800 	.word	0x40013800
 8005290:	40020000 	.word	0x40020000
 8005294:	40020400 	.word	0x40020400
 8005298:	40020800 	.word	0x40020800
 800529c:	40020c00 	.word	0x40020c00
 80052a0:	40021000 	.word	0x40021000
 80052a4:	40013c00 	.word	0x40013c00

080052a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80052ba:	2300      	movs	r3, #0
 80052bc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052be:	2300      	movs	r3, #0
 80052c0:	617b      	str	r3, [r7, #20]
 80052c2:	e0bb      	b.n	800543c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80052c4:	2201      	movs	r2, #1
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	fa02 f303 	lsl.w	r3, r2, r3
 80052cc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	4013      	ands	r3, r2
 80052d4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	429a      	cmp	r2, r3
 80052dc:	f040 80ab 	bne.w	8005436 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80052e0:	4a5c      	ldr	r2, [pc, #368]	; (8005454 <HAL_GPIO_DeInit+0x1ac>)
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	089b      	lsrs	r3, r3, #2
 80052e6:	3302      	adds	r3, #2
 80052e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ec:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f003 0303 	and.w	r3, r3, #3
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	220f      	movs	r2, #15
 80052f8:	fa02 f303 	lsl.w	r3, r2, r3
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	4013      	ands	r3, r2
 8005300:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a54      	ldr	r2, [pc, #336]	; (8005458 <HAL_GPIO_DeInit+0x1b0>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d019      	beq.n	800533e <HAL_GPIO_DeInit+0x96>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a53      	ldr	r2, [pc, #332]	; (800545c <HAL_GPIO_DeInit+0x1b4>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d013      	beq.n	800533a <HAL_GPIO_DeInit+0x92>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a52      	ldr	r2, [pc, #328]	; (8005460 <HAL_GPIO_DeInit+0x1b8>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d00d      	beq.n	8005336 <HAL_GPIO_DeInit+0x8e>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a51      	ldr	r2, [pc, #324]	; (8005464 <HAL_GPIO_DeInit+0x1bc>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d007      	beq.n	8005332 <HAL_GPIO_DeInit+0x8a>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a50      	ldr	r2, [pc, #320]	; (8005468 <HAL_GPIO_DeInit+0x1c0>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d101      	bne.n	800532e <HAL_GPIO_DeInit+0x86>
 800532a:	2304      	movs	r3, #4
 800532c:	e008      	b.n	8005340 <HAL_GPIO_DeInit+0x98>
 800532e:	2307      	movs	r3, #7
 8005330:	e006      	b.n	8005340 <HAL_GPIO_DeInit+0x98>
 8005332:	2303      	movs	r3, #3
 8005334:	e004      	b.n	8005340 <HAL_GPIO_DeInit+0x98>
 8005336:	2302      	movs	r3, #2
 8005338:	e002      	b.n	8005340 <HAL_GPIO_DeInit+0x98>
 800533a:	2301      	movs	r3, #1
 800533c:	e000      	b.n	8005340 <HAL_GPIO_DeInit+0x98>
 800533e:	2300      	movs	r3, #0
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	f002 0203 	and.w	r2, r2, #3
 8005346:	0092      	lsls	r2, r2, #2
 8005348:	4093      	lsls	r3, r2
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	429a      	cmp	r2, r3
 800534e:	d132      	bne.n	80053b6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005350:	4b46      	ldr	r3, [pc, #280]	; (800546c <HAL_GPIO_DeInit+0x1c4>)
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	43db      	mvns	r3, r3
 8005358:	4944      	ldr	r1, [pc, #272]	; (800546c <HAL_GPIO_DeInit+0x1c4>)
 800535a:	4013      	ands	r3, r2
 800535c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800535e:	4b43      	ldr	r3, [pc, #268]	; (800546c <HAL_GPIO_DeInit+0x1c4>)
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	43db      	mvns	r3, r3
 8005366:	4941      	ldr	r1, [pc, #260]	; (800546c <HAL_GPIO_DeInit+0x1c4>)
 8005368:	4013      	ands	r3, r2
 800536a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800536c:	4b3f      	ldr	r3, [pc, #252]	; (800546c <HAL_GPIO_DeInit+0x1c4>)
 800536e:	68da      	ldr	r2, [r3, #12]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	43db      	mvns	r3, r3
 8005374:	493d      	ldr	r1, [pc, #244]	; (800546c <HAL_GPIO_DeInit+0x1c4>)
 8005376:	4013      	ands	r3, r2
 8005378:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800537a:	4b3c      	ldr	r3, [pc, #240]	; (800546c <HAL_GPIO_DeInit+0x1c4>)
 800537c:	689a      	ldr	r2, [r3, #8]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	43db      	mvns	r3, r3
 8005382:	493a      	ldr	r1, [pc, #232]	; (800546c <HAL_GPIO_DeInit+0x1c4>)
 8005384:	4013      	ands	r3, r2
 8005386:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	220f      	movs	r2, #15
 8005392:	fa02 f303 	lsl.w	r3, r2, r3
 8005396:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005398:	4a2e      	ldr	r2, [pc, #184]	; (8005454 <HAL_GPIO_DeInit+0x1ac>)
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	089b      	lsrs	r3, r3, #2
 800539e:	3302      	adds	r3, #2
 80053a0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	43da      	mvns	r2, r3
 80053a8:	482a      	ldr	r0, [pc, #168]	; (8005454 <HAL_GPIO_DeInit+0x1ac>)
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	089b      	lsrs	r3, r3, #2
 80053ae:	400a      	ands	r2, r1
 80053b0:	3302      	adds	r3, #2
 80053b2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	2103      	movs	r1, #3
 80053c0:	fa01 f303 	lsl.w	r3, r1, r3
 80053c4:	43db      	mvns	r3, r3
 80053c6:	401a      	ands	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	08da      	lsrs	r2, r3, #3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	3208      	adds	r2, #8
 80053d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f003 0307 	and.w	r3, r3, #7
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	220f      	movs	r2, #15
 80053e2:	fa02 f303 	lsl.w	r3, r2, r3
 80053e6:	43db      	mvns	r3, r3
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	08d2      	lsrs	r2, r2, #3
 80053ec:	4019      	ands	r1, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	3208      	adds	r2, #8
 80053f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68da      	ldr	r2, [r3, #12]
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	005b      	lsls	r3, r3, #1
 80053fe:	2103      	movs	r1, #3
 8005400:	fa01 f303 	lsl.w	r3, r1, r3
 8005404:	43db      	mvns	r3, r3
 8005406:	401a      	ands	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	2101      	movs	r1, #1
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	fa01 f303 	lsl.w	r3, r1, r3
 8005418:	43db      	mvns	r3, r3
 800541a:	401a      	ands	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	2103      	movs	r1, #3
 800542a:	fa01 f303 	lsl.w	r3, r1, r3
 800542e:	43db      	mvns	r3, r3
 8005430:	401a      	ands	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	3301      	adds	r3, #1
 800543a:	617b      	str	r3, [r7, #20]
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	2b0f      	cmp	r3, #15
 8005440:	f67f af40 	bls.w	80052c4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005444:	bf00      	nop
 8005446:	bf00      	nop
 8005448:	371c      	adds	r7, #28
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40013800 	.word	0x40013800
 8005458:	40020000 	.word	0x40020000
 800545c:	40020400 	.word	0x40020400
 8005460:	40020800 	.word	0x40020800
 8005464:	40020c00 	.word	0x40020c00
 8005468:	40021000 	.word	0x40021000
 800546c:	40013c00 	.word	0x40013c00

08005470 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	460b      	mov	r3, r1
 800547a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691a      	ldr	r2, [r3, #16]
 8005480:	887b      	ldrh	r3, [r7, #2]
 8005482:	4013      	ands	r3, r2
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005488:	2301      	movs	r3, #1
 800548a:	73fb      	strb	r3, [r7, #15]
 800548c:	e001      	b.n	8005492 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800548e:	2300      	movs	r3, #0
 8005490:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005492:	7bfb      	ldrb	r3, [r7, #15]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	460b      	mov	r3, r1
 80054aa:	807b      	strh	r3, [r7, #2]
 80054ac:	4613      	mov	r3, r2
 80054ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054b0:	787b      	ldrb	r3, [r7, #1]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054b6:	887a      	ldrh	r2, [r7, #2]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80054bc:	e003      	b.n	80054c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80054be:	887b      	ldrh	r3, [r7, #2]
 80054c0:	041a      	lsls	r2, r3, #16
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	619a      	str	r2, [r3, #24]
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b085      	sub	sp, #20
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
 80054da:	460b      	mov	r3, r1
 80054dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80054e4:	887a      	ldrh	r2, [r7, #2]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	4013      	ands	r3, r2
 80054ea:	041a      	lsls	r2, r3, #16
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	43d9      	mvns	r1, r3
 80054f0:	887b      	ldrh	r3, [r7, #2]
 80054f2:	400b      	ands	r3, r1
 80054f4:	431a      	orrs	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	619a      	str	r2, [r3, #24]
}
 80054fa:	bf00      	nop
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
	...

08005508 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	4603      	mov	r3, r0
 8005510:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005512:	4b08      	ldr	r3, [pc, #32]	; (8005534 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005514:	695a      	ldr	r2, [r3, #20]
 8005516:	88fb      	ldrh	r3, [r7, #6]
 8005518:	4013      	ands	r3, r2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d006      	beq.n	800552c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800551e:	4a05      	ldr	r2, [pc, #20]	; (8005534 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005520:	88fb      	ldrh	r3, [r7, #6]
 8005522:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005524:	88fb      	ldrh	r3, [r7, #6]
 8005526:	4618      	mov	r0, r3
 8005528:	f7fd fa30 	bl	800298c <HAL_GPIO_EXTI_Callback>
  }
}
 800552c:	bf00      	nop
 800552e:	3708      	adds	r7, #8
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	40013c00 	.word	0x40013c00

08005538 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e12b      	b.n	80057a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d106      	bne.n	8005564 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7fd fb0c 	bl	8002b7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2224      	movs	r2, #36	; 0x24
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 0201 	bic.w	r2, r2, #1
 800557a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800558a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800559a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800559c:	f003 f822 	bl	80085e4 <HAL_RCC_GetPCLK1Freq>
 80055a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	4a81      	ldr	r2, [pc, #516]	; (80057ac <HAL_I2C_Init+0x274>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d807      	bhi.n	80055bc <HAL_I2C_Init+0x84>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4a80      	ldr	r2, [pc, #512]	; (80057b0 <HAL_I2C_Init+0x278>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	bf94      	ite	ls
 80055b4:	2301      	movls	r3, #1
 80055b6:	2300      	movhi	r3, #0
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	e006      	b.n	80055ca <HAL_I2C_Init+0x92>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4a7d      	ldr	r2, [pc, #500]	; (80057b4 <HAL_I2C_Init+0x27c>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	bf94      	ite	ls
 80055c4:	2301      	movls	r3, #1
 80055c6:	2300      	movhi	r3, #0
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e0e7      	b.n	80057a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	4a78      	ldr	r2, [pc, #480]	; (80057b8 <HAL_I2C_Init+0x280>)
 80055d6:	fba2 2303 	umull	r2, r3, r2, r3
 80055da:	0c9b      	lsrs	r3, r3, #18
 80055dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	4a6a      	ldr	r2, [pc, #424]	; (80057ac <HAL_I2C_Init+0x274>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d802      	bhi.n	800560c <HAL_I2C_Init+0xd4>
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	3301      	adds	r3, #1
 800560a:	e009      	b.n	8005620 <HAL_I2C_Init+0xe8>
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005612:	fb02 f303 	mul.w	r3, r2, r3
 8005616:	4a69      	ldr	r2, [pc, #420]	; (80057bc <HAL_I2C_Init+0x284>)
 8005618:	fba2 2303 	umull	r2, r3, r2, r3
 800561c:	099b      	lsrs	r3, r3, #6
 800561e:	3301      	adds	r3, #1
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6812      	ldr	r2, [r2, #0]
 8005624:	430b      	orrs	r3, r1
 8005626:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005632:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	495c      	ldr	r1, [pc, #368]	; (80057ac <HAL_I2C_Init+0x274>)
 800563c:	428b      	cmp	r3, r1
 800563e:	d819      	bhi.n	8005674 <HAL_I2C_Init+0x13c>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	1e59      	subs	r1, r3, #1
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	fbb1 f3f3 	udiv	r3, r1, r3
 800564e:	1c59      	adds	r1, r3, #1
 8005650:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005654:	400b      	ands	r3, r1
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00a      	beq.n	8005670 <HAL_I2C_Init+0x138>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	1e59      	subs	r1, r3, #1
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	fbb1 f3f3 	udiv	r3, r1, r3
 8005668:	3301      	adds	r3, #1
 800566a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800566e:	e051      	b.n	8005714 <HAL_I2C_Init+0x1dc>
 8005670:	2304      	movs	r3, #4
 8005672:	e04f      	b.n	8005714 <HAL_I2C_Init+0x1dc>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d111      	bne.n	80056a0 <HAL_I2C_Init+0x168>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	1e58      	subs	r0, r3, #1
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6859      	ldr	r1, [r3, #4]
 8005684:	460b      	mov	r3, r1
 8005686:	005b      	lsls	r3, r3, #1
 8005688:	440b      	add	r3, r1
 800568a:	fbb0 f3f3 	udiv	r3, r0, r3
 800568e:	3301      	adds	r3, #1
 8005690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005694:	2b00      	cmp	r3, #0
 8005696:	bf0c      	ite	eq
 8005698:	2301      	moveq	r3, #1
 800569a:	2300      	movne	r3, #0
 800569c:	b2db      	uxtb	r3, r3
 800569e:	e012      	b.n	80056c6 <HAL_I2C_Init+0x18e>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	1e58      	subs	r0, r3, #1
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6859      	ldr	r1, [r3, #4]
 80056a8:	460b      	mov	r3, r1
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	440b      	add	r3, r1
 80056ae:	0099      	lsls	r1, r3, #2
 80056b0:	440b      	add	r3, r1
 80056b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80056b6:	3301      	adds	r3, #1
 80056b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056bc:	2b00      	cmp	r3, #0
 80056be:	bf0c      	ite	eq
 80056c0:	2301      	moveq	r3, #1
 80056c2:	2300      	movne	r3, #0
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <HAL_I2C_Init+0x196>
 80056ca:	2301      	movs	r3, #1
 80056cc:	e022      	b.n	8005714 <HAL_I2C_Init+0x1dc>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10e      	bne.n	80056f4 <HAL_I2C_Init+0x1bc>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	1e58      	subs	r0, r3, #1
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6859      	ldr	r1, [r3, #4]
 80056de:	460b      	mov	r3, r1
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	440b      	add	r3, r1
 80056e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80056e8:	3301      	adds	r3, #1
 80056ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056f2:	e00f      	b.n	8005714 <HAL_I2C_Init+0x1dc>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	1e58      	subs	r0, r3, #1
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6859      	ldr	r1, [r3, #4]
 80056fc:	460b      	mov	r3, r1
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	440b      	add	r3, r1
 8005702:	0099      	lsls	r1, r3, #2
 8005704:	440b      	add	r3, r1
 8005706:	fbb0 f3f3 	udiv	r3, r0, r3
 800570a:	3301      	adds	r3, #1
 800570c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005710:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005714:	6879      	ldr	r1, [r7, #4]
 8005716:	6809      	ldr	r1, [r1, #0]
 8005718:	4313      	orrs	r3, r2
 800571a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	69da      	ldr	r2, [r3, #28]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	431a      	orrs	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	430a      	orrs	r2, r1
 8005736:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005742:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	6911      	ldr	r1, [r2, #16]
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	68d2      	ldr	r2, [r2, #12]
 800574e:	4311      	orrs	r1, r2
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	6812      	ldr	r2, [r2, #0]
 8005754:	430b      	orrs	r3, r1
 8005756:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	695a      	ldr	r2, [r3, #20]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	431a      	orrs	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f042 0201 	orr.w	r2, r2, #1
 8005782:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2220      	movs	r2, #32
 800578e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	000186a0 	.word	0x000186a0
 80057b0:	001e847f 	.word	0x001e847f
 80057b4:	003d08ff 	.word	0x003d08ff
 80057b8:	431bde83 	.word	0x431bde83
 80057bc:	10624dd3 	.word	0x10624dd3

080057c0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e021      	b.n	8005816 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2224      	movs	r2, #36	; 0x24
 80057d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 0201 	bic.w	r2, r2, #1
 80057e8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7fd fa0e 	bl	8002c0c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3708      	adds	r7, #8
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
	...

08005820 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b088      	sub	sp, #32
 8005824:	af02      	add	r7, sp, #8
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	607a      	str	r2, [r7, #4]
 800582a:	461a      	mov	r2, r3
 800582c:	460b      	mov	r3, r1
 800582e:	817b      	strh	r3, [r7, #10]
 8005830:	4613      	mov	r3, r2
 8005832:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005834:	f7fd fe50 	bl	80034d8 <HAL_GetTick>
 8005838:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b20      	cmp	r3, #32
 8005844:	f040 80e0 	bne.w	8005a08 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	2319      	movs	r3, #25
 800584e:	2201      	movs	r2, #1
 8005850:	4970      	ldr	r1, [pc, #448]	; (8005a14 <HAL_I2C_Master_Transmit+0x1f4>)
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f000 fd86 	bl	8006364 <I2C_WaitOnFlagUntilTimeout>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800585e:	2302      	movs	r3, #2
 8005860:	e0d3      	b.n	8005a0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005868:	2b01      	cmp	r3, #1
 800586a:	d101      	bne.n	8005870 <HAL_I2C_Master_Transmit+0x50>
 800586c:	2302      	movs	r3, #2
 800586e:	e0cc      	b.n	8005a0a <HAL_I2C_Master_Transmit+0x1ea>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b01      	cmp	r3, #1
 8005884:	d007      	beq.n	8005896 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f042 0201 	orr.w	r2, r2, #1
 8005894:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2221      	movs	r2, #33	; 0x21
 80058aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2210      	movs	r2, #16
 80058b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	893a      	ldrh	r2, [r7, #8]
 80058c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	4a50      	ldr	r2, [pc, #320]	; (8005a18 <HAL_I2C_Master_Transmit+0x1f8>)
 80058d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80058d8:	8979      	ldrh	r1, [r7, #10]
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	6a3a      	ldr	r2, [r7, #32]
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f000 fbf0 	bl	80060c4 <I2C_MasterRequestWrite>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e08d      	b.n	8005a0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058ee:	2300      	movs	r3, #0
 80058f0:	613b      	str	r3, [r7, #16]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	613b      	str	r3, [r7, #16]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	613b      	str	r3, [r7, #16]
 8005902:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005904:	e066      	b.n	80059d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	6a39      	ldr	r1, [r7, #32]
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 fe00 	bl	8006510 <I2C_WaitOnTXEFlagUntilTimeout>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00d      	beq.n	8005932 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591a:	2b04      	cmp	r3, #4
 800591c:	d107      	bne.n	800592e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800592c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e06b      	b.n	8005a0a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	781a      	ldrb	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005942:	1c5a      	adds	r2, r3, #1
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800594c:	b29b      	uxth	r3, r3
 800594e:	3b01      	subs	r3, #1
 8005950:	b29a      	uxth	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800595a:	3b01      	subs	r3, #1
 800595c:	b29a      	uxth	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b04      	cmp	r3, #4
 800596e:	d11b      	bne.n	80059a8 <HAL_I2C_Master_Transmit+0x188>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005974:	2b00      	cmp	r3, #0
 8005976:	d017      	beq.n	80059a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	781a      	ldrb	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005988:	1c5a      	adds	r2, r3, #1
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005992:	b29b      	uxth	r3, r3
 8005994:	3b01      	subs	r3, #1
 8005996:	b29a      	uxth	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059a0:	3b01      	subs	r3, #1
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	6a39      	ldr	r1, [r7, #32]
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f000 fdf0 	bl	8006592 <I2C_WaitOnBTFFlagUntilTimeout>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00d      	beq.n	80059d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059bc:	2b04      	cmp	r3, #4
 80059be:	d107      	bne.n	80059d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e01a      	b.n	8005a0a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d194      	bne.n	8005906 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2220      	movs	r2, #32
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a04:	2300      	movs	r3, #0
 8005a06:	e000      	b.n	8005a0a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005a08:	2302      	movs	r3, #2
  }
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3718      	adds	r7, #24
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	00100002 	.word	0x00100002
 8005a18:	ffff0000 	.word	0xffff0000

08005a1c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b08c      	sub	sp, #48	; 0x30
 8005a20:	af02      	add	r7, sp, #8
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	607a      	str	r2, [r7, #4]
 8005a26:	461a      	mov	r2, r3
 8005a28:	460b      	mov	r3, r1
 8005a2a:	817b      	strh	r3, [r7, #10]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a30:	f7fd fd52 	bl	80034d8 <HAL_GetTick>
 8005a34:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b20      	cmp	r3, #32
 8005a40:	f040 820b 	bne.w	8005e5a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	9300      	str	r3, [sp, #0]
 8005a48:	2319      	movs	r3, #25
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	497c      	ldr	r1, [pc, #496]	; (8005c40 <HAL_I2C_Master_Receive+0x224>)
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f000 fc88 	bl	8006364 <I2C_WaitOnFlagUntilTimeout>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	e1fe      	b.n	8005e5c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d101      	bne.n	8005a6c <HAL_I2C_Master_Receive+0x50>
 8005a68:	2302      	movs	r3, #2
 8005a6a:	e1f7      	b.n	8005e5c <HAL_I2C_Master_Receive+0x440>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d007      	beq.n	8005a92 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f042 0201 	orr.w	r2, r2, #1
 8005a90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005aa0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2222      	movs	r2, #34	; 0x22
 8005aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2210      	movs	r2, #16
 8005aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	893a      	ldrh	r2, [r7, #8]
 8005ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	4a5c      	ldr	r2, [pc, #368]	; (8005c44 <HAL_I2C_Master_Receive+0x228>)
 8005ad2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005ad4:	8979      	ldrh	r1, [r7, #10]
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 fb74 	bl	80061c8 <I2C_MasterRequestRead>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e1b8      	b.n	8005e5c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d113      	bne.n	8005b1a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005af2:	2300      	movs	r3, #0
 8005af4:	623b      	str	r3, [r7, #32]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	623b      	str	r3, [r7, #32]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	623b      	str	r3, [r7, #32]
 8005b06:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b16:	601a      	str	r2, [r3, #0]
 8005b18:	e18c      	b.n	8005e34 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d11b      	bne.n	8005b5a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b32:	2300      	movs	r3, #0
 8005b34:	61fb      	str	r3, [r7, #28]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	61fb      	str	r3, [r7, #28]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	61fb      	str	r3, [r7, #28]
 8005b46:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	e16c      	b.n	8005e34 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d11b      	bne.n	8005b9a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b70:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b82:	2300      	movs	r3, #0
 8005b84:	61bb      	str	r3, [r7, #24]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	61bb      	str	r3, [r7, #24]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	61bb      	str	r3, [r7, #24]
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	e14c      	b.n	8005e34 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ba8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005baa:	2300      	movs	r3, #0
 8005bac:	617b      	str	r3, [r7, #20]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	617b      	str	r3, [r7, #20]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	617b      	str	r3, [r7, #20]
 8005bbe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005bc0:	e138      	b.n	8005e34 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bc6:	2b03      	cmp	r3, #3
 8005bc8:	f200 80f1 	bhi.w	8005dae <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d123      	bne.n	8005c1c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 fd1b 	bl	8006614 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d001      	beq.n	8005be8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e139      	b.n	8005e5c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	691a      	ldr	r2, [r3, #16]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf2:	b2d2      	uxtb	r2, r2
 8005bf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	1c5a      	adds	r2, r3, #1
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c04:	3b01      	subs	r3, #1
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	3b01      	subs	r3, #1
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c1a:	e10b      	b.n	8005e34 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d14e      	bne.n	8005cc2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	4906      	ldr	r1, [pc, #24]	; (8005c48 <HAL_I2C_Master_Receive+0x22c>)
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f000 fb98 	bl	8006364 <I2C_WaitOnFlagUntilTimeout>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d008      	beq.n	8005c4c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e10e      	b.n	8005e5c <HAL_I2C_Master_Receive+0x440>
 8005c3e:	bf00      	nop
 8005c40:	00100002 	.word	0x00100002
 8005c44:	ffff0000 	.word	0xffff0000
 8005c48:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	691a      	ldr	r2, [r3, #16]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c66:	b2d2      	uxtb	r2, r2
 8005c68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	1c5a      	adds	r2, r3, #1
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	3b01      	subs	r3, #1
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	691a      	ldr	r2, [r3, #16]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c98:	b2d2      	uxtb	r2, r2
 8005c9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005caa:	3b01      	subs	r3, #1
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005cc0:	e0b8      	b.n	8005e34 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc8:	2200      	movs	r2, #0
 8005cca:	4966      	ldr	r1, [pc, #408]	; (8005e64 <HAL_I2C_Master_Receive+0x448>)
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 fb49 	bl	8006364 <I2C_WaitOnFlagUntilTimeout>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e0bf      	b.n	8005e5c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	691a      	ldr	r2, [r3, #16]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf6:	b2d2      	uxtb	r2, r2
 8005cf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfe:	1c5a      	adds	r2, r3, #1
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	3b01      	subs	r3, #1
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d24:	2200      	movs	r2, #0
 8005d26:	494f      	ldr	r1, [pc, #316]	; (8005e64 <HAL_I2C_Master_Receive+0x448>)
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 fb1b 	bl	8006364 <I2C_WaitOnFlagUntilTimeout>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d001      	beq.n	8005d38 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e091      	b.n	8005e5c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	691a      	ldr	r2, [r3, #16]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d52:	b2d2      	uxtb	r2, r2
 8005d54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	1c5a      	adds	r2, r3, #1
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d64:	3b01      	subs	r3, #1
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	3b01      	subs	r3, #1
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	691a      	ldr	r2, [r3, #16]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d84:	b2d2      	uxtb	r2, r2
 8005d86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8c:	1c5a      	adds	r2, r3, #1
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d96:	3b01      	subs	r3, #1
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	3b01      	subs	r3, #1
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005dac:	e042      	b.n	8005e34 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005db0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f000 fc2e 	bl	8006614 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d001      	beq.n	8005dc2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e04c      	b.n	8005e5c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	691a      	ldr	r2, [r3, #16]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dcc:	b2d2      	uxtb	r2, r2
 8005dce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd4:	1c5a      	adds	r2, r3, #1
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dde:	3b01      	subs	r3, #1
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	3b01      	subs	r3, #1
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	f003 0304 	and.w	r3, r3, #4
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d118      	bne.n	8005e34 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	691a      	ldr	r2, [r3, #16]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	b2d2      	uxtb	r2, r2
 8005e0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	1c5a      	adds	r2, r3, #1
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f47f aec2 	bne.w	8005bc2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2220      	movs	r2, #32
 8005e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005e56:	2300      	movs	r3, #0
 8005e58:	e000      	b.n	8005e5c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005e5a:	2302      	movs	r3, #2
  }
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3728      	adds	r7, #40	; 0x28
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	00010004 	.word	0x00010004

08005e68 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b08a      	sub	sp, #40	; 0x28
 8005e6c:	af02      	add	r7, sp, #8
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	607a      	str	r2, [r7, #4]
 8005e72:	603b      	str	r3, [r7, #0]
 8005e74:	460b      	mov	r3, r1
 8005e76:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005e78:	f7fd fb2e 	bl	80034d8 <HAL_GetTick>
 8005e7c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b20      	cmp	r3, #32
 8005e8c:	f040 8111 	bne.w	80060b2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	2319      	movs	r3, #25
 8005e96:	2201      	movs	r2, #1
 8005e98:	4988      	ldr	r1, [pc, #544]	; (80060bc <HAL_I2C_IsDeviceReady+0x254>)
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f000 fa62 	bl	8006364 <I2C_WaitOnFlagUntilTimeout>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d001      	beq.n	8005eaa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	e104      	b.n	80060b4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d101      	bne.n	8005eb8 <HAL_I2C_IsDeviceReady+0x50>
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	e0fd      	b.n	80060b4 <HAL_I2C_IsDeviceReady+0x24c>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d007      	beq.n	8005ede <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f042 0201 	orr.w	r2, r2, #1
 8005edc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005eec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2224      	movs	r2, #36	; 0x24
 8005ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	4a70      	ldr	r2, [pc, #448]	; (80060c0 <HAL_I2C_IsDeviceReady+0x258>)
 8005f00:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f10:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f000 fa20 	bl	8006364 <I2C_WaitOnFlagUntilTimeout>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00d      	beq.n	8005f46 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f38:	d103      	bne.n	8005f42 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f40:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e0b6      	b.n	80060b4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f46:	897b      	ldrh	r3, [r7, #10]
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f54:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005f56:	f7fd fabf 	bl	80034d8 <HAL_GetTick>
 8005f5a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	bf0c      	ite	eq
 8005f6a:	2301      	moveq	r3, #1
 8005f6c:	2300      	movne	r3, #0
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	695b      	ldr	r3, [r3, #20]
 8005f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f80:	bf0c      	ite	eq
 8005f82:	2301      	moveq	r3, #1
 8005f84:	2300      	movne	r3, #0
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005f8a:	e025      	b.n	8005fd8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005f8c:	f7fd faa4 	bl	80034d8 <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d302      	bcc.n	8005fa2 <HAL_I2C_IsDeviceReady+0x13a>
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d103      	bne.n	8005faa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	22a0      	movs	r2, #160	; 0xa0
 8005fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	bf0c      	ite	eq
 8005fb8:	2301      	moveq	r3, #1
 8005fba:	2300      	movne	r3, #0
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fce:	bf0c      	ite	eq
 8005fd0:	2301      	moveq	r3, #1
 8005fd2:	2300      	movne	r3, #0
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2ba0      	cmp	r3, #160	; 0xa0
 8005fe2:	d005      	beq.n	8005ff0 <HAL_I2C_IsDeviceReady+0x188>
 8005fe4:	7dfb      	ldrb	r3, [r7, #23]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d102      	bne.n	8005ff0 <HAL_I2C_IsDeviceReady+0x188>
 8005fea:	7dbb      	ldrb	r3, [r7, #22]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d0cd      	beq.n	8005f8c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b02      	cmp	r3, #2
 8006004:	d129      	bne.n	800605a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006014:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006016:	2300      	movs	r3, #0
 8006018:	613b      	str	r3, [r7, #16]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	695b      	ldr	r3, [r3, #20]
 8006020:	613b      	str	r3, [r7, #16]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	613b      	str	r3, [r7, #16]
 800602a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	2319      	movs	r3, #25
 8006032:	2201      	movs	r2, #1
 8006034:	4921      	ldr	r1, [pc, #132]	; (80060bc <HAL_I2C_IsDeviceReady+0x254>)
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f000 f994 	bl	8006364 <I2C_WaitOnFlagUntilTimeout>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e036      	b.n	80060b4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2220      	movs	r2, #32
 800604a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8006056:	2300      	movs	r3, #0
 8006058:	e02c      	b.n	80060b4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006068:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006072:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	2319      	movs	r3, #25
 800607a:	2201      	movs	r2, #1
 800607c:	490f      	ldr	r1, [pc, #60]	; (80060bc <HAL_I2C_IsDeviceReady+0x254>)
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f000 f970 	bl	8006364 <I2C_WaitOnFlagUntilTimeout>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e012      	b.n	80060b4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	3301      	adds	r3, #1
 8006092:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006094:	69ba      	ldr	r2, [r7, #24]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	429a      	cmp	r2, r3
 800609a:	f4ff af32 	bcc.w	8005f02 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2220      	movs	r2, #32
 80060a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e000      	b.n	80060b4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80060b2:	2302      	movs	r3, #2
  }
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3720      	adds	r7, #32
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	00100002 	.word	0x00100002
 80060c0:	ffff0000 	.word	0xffff0000

080060c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b088      	sub	sp, #32
 80060c8:	af02      	add	r7, sp, #8
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	607a      	str	r2, [r7, #4]
 80060ce:	603b      	str	r3, [r7, #0]
 80060d0:	460b      	mov	r3, r1
 80060d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2b08      	cmp	r3, #8
 80060de:	d006      	beq.n	80060ee <I2C_MasterRequestWrite+0x2a>
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d003      	beq.n	80060ee <I2C_MasterRequestWrite+0x2a>
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80060ec:	d108      	bne.n	8006100 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060fc:	601a      	str	r2, [r3, #0]
 80060fe:	e00b      	b.n	8006118 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006104:	2b12      	cmp	r3, #18
 8006106:	d107      	bne.n	8006118 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006116:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f000 f91d 	bl	8006364 <I2C_WaitOnFlagUntilTimeout>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00d      	beq.n	800614c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800613a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800613e:	d103      	bne.n	8006148 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006146:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e035      	b.n	80061b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006154:	d108      	bne.n	8006168 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006156:	897b      	ldrh	r3, [r7, #10]
 8006158:	b2db      	uxtb	r3, r3
 800615a:	461a      	mov	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006164:	611a      	str	r2, [r3, #16]
 8006166:	e01b      	b.n	80061a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006168:	897b      	ldrh	r3, [r7, #10]
 800616a:	11db      	asrs	r3, r3, #7
 800616c:	b2db      	uxtb	r3, r3
 800616e:	f003 0306 	and.w	r3, r3, #6
 8006172:	b2db      	uxtb	r3, r3
 8006174:	f063 030f 	orn	r3, r3, #15
 8006178:	b2da      	uxtb	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	490e      	ldr	r1, [pc, #56]	; (80061c0 <I2C_MasterRequestWrite+0xfc>)
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f000 f943 	bl	8006412 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e010      	b.n	80061b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006196:	897b      	ldrh	r3, [r7, #10]
 8006198:	b2da      	uxtb	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	4907      	ldr	r1, [pc, #28]	; (80061c4 <I2C_MasterRequestWrite+0x100>)
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 f933 	bl	8006412 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e000      	b.n	80061b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3718      	adds	r7, #24
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	00010008 	.word	0x00010008
 80061c4:	00010002 	.word	0x00010002

080061c8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b088      	sub	sp, #32
 80061cc:	af02      	add	r7, sp, #8
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	607a      	str	r2, [r7, #4]
 80061d2:	603b      	str	r3, [r7, #0]
 80061d4:	460b      	mov	r3, r1
 80061d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061dc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061ec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	2b08      	cmp	r3, #8
 80061f2:	d006      	beq.n	8006202 <I2C_MasterRequestRead+0x3a>
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d003      	beq.n	8006202 <I2C_MasterRequestRead+0x3a>
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006200:	d108      	bne.n	8006214 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006210:	601a      	str	r2, [r3, #0]
 8006212:	e00b      	b.n	800622c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006218:	2b11      	cmp	r3, #17
 800621a:	d107      	bne.n	800622c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800622a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	9300      	str	r3, [sp, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f000 f893 	bl	8006364 <I2C_WaitOnFlagUntilTimeout>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00d      	beq.n	8006260 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800624e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006252:	d103      	bne.n	800625c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f44f 7200 	mov.w	r2, #512	; 0x200
 800625a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e079      	b.n	8006354 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006268:	d108      	bne.n	800627c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800626a:	897b      	ldrh	r3, [r7, #10]
 800626c:	b2db      	uxtb	r3, r3
 800626e:	f043 0301 	orr.w	r3, r3, #1
 8006272:	b2da      	uxtb	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	611a      	str	r2, [r3, #16]
 800627a:	e05f      	b.n	800633c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800627c:	897b      	ldrh	r3, [r7, #10]
 800627e:	11db      	asrs	r3, r3, #7
 8006280:	b2db      	uxtb	r3, r3
 8006282:	f003 0306 	and.w	r3, r3, #6
 8006286:	b2db      	uxtb	r3, r3
 8006288:	f063 030f 	orn	r3, r3, #15
 800628c:	b2da      	uxtb	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	4930      	ldr	r1, [pc, #192]	; (800635c <I2C_MasterRequestRead+0x194>)
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f000 f8b9 	bl	8006412 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e054      	b.n	8006354 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80062aa:	897b      	ldrh	r3, [r7, #10]
 80062ac:	b2da      	uxtb	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	4929      	ldr	r1, [pc, #164]	; (8006360 <I2C_MasterRequestRead+0x198>)
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f000 f8a9 	bl	8006412 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d001      	beq.n	80062ca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e044      	b.n	8006354 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062ca:	2300      	movs	r3, #0
 80062cc:	613b      	str	r3, [r7, #16]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	695b      	ldr	r3, [r3, #20]
 80062d4:	613b      	str	r3, [r7, #16]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	699b      	ldr	r3, [r3, #24]
 80062dc:	613b      	str	r3, [r7, #16]
 80062de:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062ee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f000 f831 	bl	8006364 <I2C_WaitOnFlagUntilTimeout>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00d      	beq.n	8006324 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006316:	d103      	bne.n	8006320 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800631e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e017      	b.n	8006354 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006324:	897b      	ldrh	r3, [r7, #10]
 8006326:	11db      	asrs	r3, r3, #7
 8006328:	b2db      	uxtb	r3, r3
 800632a:	f003 0306 	and.w	r3, r3, #6
 800632e:	b2db      	uxtb	r3, r3
 8006330:	f063 030e 	orn	r3, r3, #14
 8006334:	b2da      	uxtb	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	4907      	ldr	r1, [pc, #28]	; (8006360 <I2C_MasterRequestRead+0x198>)
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 f865 	bl	8006412 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d001      	beq.n	8006352 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e000      	b.n	8006354 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3718      	adds	r7, #24
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	00010008 	.word	0x00010008
 8006360:	00010002 	.word	0x00010002

08006364 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	603b      	str	r3, [r7, #0]
 8006370:	4613      	mov	r3, r2
 8006372:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006374:	e025      	b.n	80063c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800637c:	d021      	beq.n	80063c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800637e:	f7fd f8ab 	bl	80034d8 <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	429a      	cmp	r2, r3
 800638c:	d302      	bcc.n	8006394 <I2C_WaitOnFlagUntilTimeout+0x30>
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d116      	bne.n	80063c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2220      	movs	r2, #32
 800639e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	f043 0220 	orr.w	r2, r3, #32
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e023      	b.n	800640a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	0c1b      	lsrs	r3, r3, #16
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d10d      	bne.n	80063e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	43da      	mvns	r2, r3
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	4013      	ands	r3, r2
 80063d8:	b29b      	uxth	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	bf0c      	ite	eq
 80063de:	2301      	moveq	r3, #1
 80063e0:	2300      	movne	r3, #0
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	461a      	mov	r2, r3
 80063e6:	e00c      	b.n	8006402 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	43da      	mvns	r2, r3
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	4013      	ands	r3, r2
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	bf0c      	ite	eq
 80063fa:	2301      	moveq	r3, #1
 80063fc:	2300      	movne	r3, #0
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	461a      	mov	r2, r3
 8006402:	79fb      	ldrb	r3, [r7, #7]
 8006404:	429a      	cmp	r2, r3
 8006406:	d0b6      	beq.n	8006376 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b084      	sub	sp, #16
 8006416:	af00      	add	r7, sp, #0
 8006418:	60f8      	str	r0, [r7, #12]
 800641a:	60b9      	str	r1, [r7, #8]
 800641c:	607a      	str	r2, [r7, #4]
 800641e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006420:	e051      	b.n	80064c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800642c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006430:	d123      	bne.n	800647a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006440:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800644a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2220      	movs	r2, #32
 8006456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006466:	f043 0204 	orr.w	r2, r3, #4
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e046      	b.n	8006508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006480:	d021      	beq.n	80064c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006482:	f7fd f829 	bl	80034d8 <HAL_GetTick>
 8006486:	4602      	mov	r2, r0
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	429a      	cmp	r2, r3
 8006490:	d302      	bcc.n	8006498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d116      	bne.n	80064c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2220      	movs	r2, #32
 80064a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	f043 0220 	orr.w	r2, r3, #32
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e020      	b.n	8006508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	0c1b      	lsrs	r3, r3, #16
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d10c      	bne.n	80064ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	43da      	mvns	r2, r3
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	4013      	ands	r3, r2
 80064dc:	b29b      	uxth	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	bf14      	ite	ne
 80064e2:	2301      	movne	r3, #1
 80064e4:	2300      	moveq	r3, #0
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	e00b      	b.n	8006502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	43da      	mvns	r2, r3
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	4013      	ands	r3, r2
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	bf14      	ite	ne
 80064fc:	2301      	movne	r3, #1
 80064fe:	2300      	moveq	r3, #0
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d18d      	bne.n	8006422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800651c:	e02d      	b.n	800657a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f000 f8ce 	bl	80066c0 <I2C_IsAcknowledgeFailed>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e02d      	b.n	800658a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006534:	d021      	beq.n	800657a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006536:	f7fc ffcf 	bl	80034d8 <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	429a      	cmp	r2, r3
 8006544:	d302      	bcc.n	800654c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d116      	bne.n	800657a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2220      	movs	r2, #32
 8006556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006566:	f043 0220 	orr.w	r2, r3, #32
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e007      	b.n	800658a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	695b      	ldr	r3, [r3, #20]
 8006580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006584:	2b80      	cmp	r3, #128	; 0x80
 8006586:	d1ca      	bne.n	800651e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006592:	b580      	push	{r7, lr}
 8006594:	b084      	sub	sp, #16
 8006596:	af00      	add	r7, sp, #0
 8006598:	60f8      	str	r0, [r7, #12]
 800659a:	60b9      	str	r1, [r7, #8]
 800659c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800659e:	e02d      	b.n	80065fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 f88d 	bl	80066c0 <I2C_IsAcknowledgeFailed>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d001      	beq.n	80065b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e02d      	b.n	800660c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b6:	d021      	beq.n	80065fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065b8:	f7fc ff8e 	bl	80034d8 <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d302      	bcc.n	80065ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d116      	bne.n	80065fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e8:	f043 0220 	orr.w	r2, r3, #32
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e007      	b.n	800660c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	f003 0304 	and.w	r3, r3, #4
 8006606:	2b04      	cmp	r3, #4
 8006608:	d1ca      	bne.n	80065a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006620:	e042      	b.n	80066a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	695b      	ldr	r3, [r3, #20]
 8006628:	f003 0310 	and.w	r3, r3, #16
 800662c:	2b10      	cmp	r3, #16
 800662e:	d119      	bne.n	8006664 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f06f 0210 	mvn.w	r2, #16
 8006638:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2220      	movs	r2, #32
 8006644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e029      	b.n	80066b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006664:	f7fc ff38 	bl	80034d8 <HAL_GetTick>
 8006668:	4602      	mov	r2, r0
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	429a      	cmp	r2, r3
 8006672:	d302      	bcc.n	800667a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d116      	bne.n	80066a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2220      	movs	r2, #32
 8006684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006694:	f043 0220 	orr.w	r2, r3, #32
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e007      	b.n	80066b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b2:	2b40      	cmp	r3, #64	; 0x40
 80066b4:	d1b5      	bne.n	8006622 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d6:	d11b      	bne.n	8006710 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80066e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2220      	movs	r2, #32
 80066ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fc:	f043 0204 	orr.w	r2, r3, #4
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e000      	b.n	8006712 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800671e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006720:	b08f      	sub	sp, #60	; 0x3c
 8006722:	af0a      	add	r7, sp, #40	; 0x28
 8006724:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d101      	bne.n	8006730 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e10f      	b.n	8006950 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b00      	cmp	r3, #0
 8006740:	d106      	bne.n	8006750 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f013 ff7a 	bl	801a644 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2203      	movs	r2, #3
 8006754:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800675c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006760:	2b00      	cmp	r3, #0
 8006762:	d102      	bne.n	800676a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4618      	mov	r0, r3
 8006770:	f006 fc45 	bl	800cffe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	603b      	str	r3, [r7, #0]
 800677a:	687e      	ldr	r6, [r7, #4]
 800677c:	466d      	mov	r5, sp
 800677e:	f106 0410 	add.w	r4, r6, #16
 8006782:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006784:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006786:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006788:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800678a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800678e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006792:	1d33      	adds	r3, r6, #4
 8006794:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006796:	6838      	ldr	r0, [r7, #0]
 8006798:	f006 fb1c 	bl	800cdd4 <USB_CoreInit>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d005      	beq.n	80067ae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2202      	movs	r2, #2
 80067a6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e0d0      	b.n	8006950 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2100      	movs	r1, #0
 80067b4:	4618      	mov	r0, r3
 80067b6:	f006 fc33 	bl	800d020 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067ba:	2300      	movs	r3, #0
 80067bc:	73fb      	strb	r3, [r7, #15]
 80067be:	e04a      	b.n	8006856 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80067c0:	7bfa      	ldrb	r2, [r7, #15]
 80067c2:	6879      	ldr	r1, [r7, #4]
 80067c4:	4613      	mov	r3, r2
 80067c6:	00db      	lsls	r3, r3, #3
 80067c8:	4413      	add	r3, r2
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	440b      	add	r3, r1
 80067ce:	333d      	adds	r3, #61	; 0x3d
 80067d0:	2201      	movs	r2, #1
 80067d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80067d4:	7bfa      	ldrb	r2, [r7, #15]
 80067d6:	6879      	ldr	r1, [r7, #4]
 80067d8:	4613      	mov	r3, r2
 80067da:	00db      	lsls	r3, r3, #3
 80067dc:	4413      	add	r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	440b      	add	r3, r1
 80067e2:	333c      	adds	r3, #60	; 0x3c
 80067e4:	7bfa      	ldrb	r2, [r7, #15]
 80067e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80067e8:	7bfa      	ldrb	r2, [r7, #15]
 80067ea:	7bfb      	ldrb	r3, [r7, #15]
 80067ec:	b298      	uxth	r0, r3
 80067ee:	6879      	ldr	r1, [r7, #4]
 80067f0:	4613      	mov	r3, r2
 80067f2:	00db      	lsls	r3, r3, #3
 80067f4:	4413      	add	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	440b      	add	r3, r1
 80067fa:	3344      	adds	r3, #68	; 0x44
 80067fc:	4602      	mov	r2, r0
 80067fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006800:	7bfa      	ldrb	r2, [r7, #15]
 8006802:	6879      	ldr	r1, [r7, #4]
 8006804:	4613      	mov	r3, r2
 8006806:	00db      	lsls	r3, r3, #3
 8006808:	4413      	add	r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	440b      	add	r3, r1
 800680e:	3340      	adds	r3, #64	; 0x40
 8006810:	2200      	movs	r2, #0
 8006812:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006814:	7bfa      	ldrb	r2, [r7, #15]
 8006816:	6879      	ldr	r1, [r7, #4]
 8006818:	4613      	mov	r3, r2
 800681a:	00db      	lsls	r3, r3, #3
 800681c:	4413      	add	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	440b      	add	r3, r1
 8006822:	3348      	adds	r3, #72	; 0x48
 8006824:	2200      	movs	r2, #0
 8006826:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006828:	7bfa      	ldrb	r2, [r7, #15]
 800682a:	6879      	ldr	r1, [r7, #4]
 800682c:	4613      	mov	r3, r2
 800682e:	00db      	lsls	r3, r3, #3
 8006830:	4413      	add	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	440b      	add	r3, r1
 8006836:	334c      	adds	r3, #76	; 0x4c
 8006838:	2200      	movs	r2, #0
 800683a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800683c:	7bfa      	ldrb	r2, [r7, #15]
 800683e:	6879      	ldr	r1, [r7, #4]
 8006840:	4613      	mov	r3, r2
 8006842:	00db      	lsls	r3, r3, #3
 8006844:	4413      	add	r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	440b      	add	r3, r1
 800684a:	3354      	adds	r3, #84	; 0x54
 800684c:	2200      	movs	r2, #0
 800684e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006850:	7bfb      	ldrb	r3, [r7, #15]
 8006852:	3301      	adds	r3, #1
 8006854:	73fb      	strb	r3, [r7, #15]
 8006856:	7bfa      	ldrb	r2, [r7, #15]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	429a      	cmp	r2, r3
 800685e:	d3af      	bcc.n	80067c0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006860:	2300      	movs	r3, #0
 8006862:	73fb      	strb	r3, [r7, #15]
 8006864:	e044      	b.n	80068f0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006866:	7bfa      	ldrb	r2, [r7, #15]
 8006868:	6879      	ldr	r1, [r7, #4]
 800686a:	4613      	mov	r3, r2
 800686c:	00db      	lsls	r3, r3, #3
 800686e:	4413      	add	r3, r2
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	440b      	add	r3, r1
 8006874:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006878:	2200      	movs	r2, #0
 800687a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800687c:	7bfa      	ldrb	r2, [r7, #15]
 800687e:	6879      	ldr	r1, [r7, #4]
 8006880:	4613      	mov	r3, r2
 8006882:	00db      	lsls	r3, r3, #3
 8006884:	4413      	add	r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	440b      	add	r3, r1
 800688a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800688e:	7bfa      	ldrb	r2, [r7, #15]
 8006890:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006892:	7bfa      	ldrb	r2, [r7, #15]
 8006894:	6879      	ldr	r1, [r7, #4]
 8006896:	4613      	mov	r3, r2
 8006898:	00db      	lsls	r3, r3, #3
 800689a:	4413      	add	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	440b      	add	r3, r1
 80068a0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80068a4:	2200      	movs	r2, #0
 80068a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80068a8:	7bfa      	ldrb	r2, [r7, #15]
 80068aa:	6879      	ldr	r1, [r7, #4]
 80068ac:	4613      	mov	r3, r2
 80068ae:	00db      	lsls	r3, r3, #3
 80068b0:	4413      	add	r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	440b      	add	r3, r1
 80068b6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80068ba:	2200      	movs	r2, #0
 80068bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80068be:	7bfa      	ldrb	r2, [r7, #15]
 80068c0:	6879      	ldr	r1, [r7, #4]
 80068c2:	4613      	mov	r3, r2
 80068c4:	00db      	lsls	r3, r3, #3
 80068c6:	4413      	add	r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	440b      	add	r3, r1
 80068cc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80068d0:	2200      	movs	r2, #0
 80068d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80068d4:	7bfa      	ldrb	r2, [r7, #15]
 80068d6:	6879      	ldr	r1, [r7, #4]
 80068d8:	4613      	mov	r3, r2
 80068da:	00db      	lsls	r3, r3, #3
 80068dc:	4413      	add	r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	440b      	add	r3, r1
 80068e2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80068e6:	2200      	movs	r2, #0
 80068e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068ea:	7bfb      	ldrb	r3, [r7, #15]
 80068ec:	3301      	adds	r3, #1
 80068ee:	73fb      	strb	r3, [r7, #15]
 80068f0:	7bfa      	ldrb	r2, [r7, #15]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d3b5      	bcc.n	8006866 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	603b      	str	r3, [r7, #0]
 8006900:	687e      	ldr	r6, [r7, #4]
 8006902:	466d      	mov	r5, sp
 8006904:	f106 0410 	add.w	r4, r6, #16
 8006908:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800690a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800690c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800690e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006910:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006914:	e885 0003 	stmia.w	r5, {r0, r1}
 8006918:	1d33      	adds	r3, r6, #4
 800691a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800691c:	6838      	ldr	r0, [r7, #0]
 800691e:	f006 fbcb 	bl	800d0b8 <USB_DevInit>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d005      	beq.n	8006934 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2202      	movs	r2, #2
 800692c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e00d      	b.n	8006950 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4618      	mov	r0, r3
 800694a:	f007 fd69 	bl	800e420 <USB_DevDisconnect>

  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3714      	adds	r7, #20
 8006954:	46bd      	mov	sp, r7
 8006956:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006958 <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d101      	bne.n	800696a <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e015      	b.n	8006996 <HAL_PCD_DeInit+0x3e>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2203      	movs	r2, #3
 800696e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Stop Device */
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4618      	mov	r0, r3
 8006978:	f007 fcbc 	bl	800e2f4 <USB_StopDevice>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d001      	beq.n	8006986 <HAL_PCD_DeInit+0x2e>
  {
    return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e007      	b.n	8006996 <HAL_PCD_DeInit+0x3e>

  /* DeInit the low level hardware */
  hpcd->MspDeInitCallback(hpcd);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_PCD_MspDeInit(hpcd);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f013 feb0 	bl	801a6ec <HAL_PCD_MspDeInit>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3708      	adds	r7, #8
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b084      	sub	sp, #16
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d101      	bne.n	80069ba <HAL_PCD_Start+0x1c>
 80069b6:	2302      	movs	r3, #2
 80069b8:	e020      	b.n	80069fc <HAL_PCD_Start+0x5e>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2201      	movs	r2, #1
 80069be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d109      	bne.n	80069de <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d005      	beq.n	80069de <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f006 fafa 	bl	800cfdc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f007 fcf6 	bl	800e3de <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3710      	adds	r7, #16
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d101      	bne.n	8006a20 <HAL_PCD_Stop+0x1c>
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	e026      	b.n	8006a6e <HAL_PCD_Stop+0x6a>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_DISABLE(hpcd);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f006 fae6 	bl	800cffe <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f007 fcf2 	bl	800e420 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2110      	movs	r1, #16
 8006a42:	4618      	mov	r0, r3
 8006a44:	f006 fc9c 	bl	800d380 <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d109      	bne.n	8006a64 <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d005      	beq.n	8006a64 <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_UNLOCK(hpcd);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006a76:	b590      	push	{r4, r7, lr}
 8006a78:	b08d      	sub	sp, #52	; 0x34
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a84:	6a3b      	ldr	r3, [r7, #32]
 8006a86:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f007 fd7b 	bl	800e588 <USB_GetMode>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f040 848a 	bne.w	80073ae <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f007 fcdf 	bl	800e462 <USB_ReadInterrupts>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f000 8480 	beq.w	80073ac <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	0a1b      	lsrs	r3, r3, #8
 8006ab6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f007 fccc 	bl	800e462 <USB_ReadInterrupts>
 8006aca:	4603      	mov	r3, r0
 8006acc:	f003 0302 	and.w	r3, r3, #2
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d107      	bne.n	8006ae4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	695a      	ldr	r2, [r3, #20]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f002 0202 	and.w	r2, r2, #2
 8006ae2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f007 fcba 	bl	800e462 <USB_ReadInterrupts>
 8006aee:	4603      	mov	r3, r0
 8006af0:	f003 0310 	and.w	r3, r3, #16
 8006af4:	2b10      	cmp	r3, #16
 8006af6:	d161      	bne.n	8006bbc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	699a      	ldr	r2, [r3, #24]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f022 0210 	bic.w	r2, r2, #16
 8006b06:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	6a1b      	ldr	r3, [r3, #32]
 8006b0c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	f003 020f 	and.w	r2, r3, #15
 8006b14:	4613      	mov	r3, r2
 8006b16:	00db      	lsls	r3, r3, #3
 8006b18:	4413      	add	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	4413      	add	r3, r2
 8006b24:	3304      	adds	r3, #4
 8006b26:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	0c5b      	lsrs	r3, r3, #17
 8006b2c:	f003 030f 	and.w	r3, r3, #15
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d124      	bne.n	8006b7e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006b34:	69ba      	ldr	r2, [r7, #24]
 8006b36:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d035      	beq.n	8006bac <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	091b      	lsrs	r3, r3, #4
 8006b48:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006b4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	461a      	mov	r2, r3
 8006b52:	6a38      	ldr	r0, [r7, #32]
 8006b54:	f007 faa2 	bl	800e09c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	691a      	ldr	r2, [r3, #16]
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	091b      	lsrs	r3, r3, #4
 8006b60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b64:	441a      	add	r2, r3
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	6a1a      	ldr	r2, [r3, #32]
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	091b      	lsrs	r3, r3, #4
 8006b72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b76:	441a      	add	r2, r3
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	621a      	str	r2, [r3, #32]
 8006b7c:	e016      	b.n	8006bac <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	0c5b      	lsrs	r3, r3, #17
 8006b82:	f003 030f 	and.w	r3, r3, #15
 8006b86:	2b06      	cmp	r3, #6
 8006b88:	d110      	bne.n	8006bac <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006b90:	2208      	movs	r2, #8
 8006b92:	4619      	mov	r1, r3
 8006b94:	6a38      	ldr	r0, [r7, #32]
 8006b96:	f007 fa81 	bl	800e09c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	6a1a      	ldr	r2, [r3, #32]
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	091b      	lsrs	r3, r3, #4
 8006ba2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ba6:	441a      	add	r2, r3
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	699a      	ldr	r2, [r3, #24]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f042 0210 	orr.w	r2, r2, #16
 8006bba:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f007 fc4e 	bl	800e462 <USB_ReadInterrupts>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bcc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006bd0:	f040 80a7 	bne.w	8006d22 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f007 fc53 	bl	800e488 <USB_ReadDevAllOutEpInterrupt>
 8006be2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006be4:	e099      	b.n	8006d1a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be8:	f003 0301 	and.w	r3, r3, #1
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f000 808e 	beq.w	8006d0e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bf8:	b2d2      	uxtb	r2, r2
 8006bfa:	4611      	mov	r1, r2
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f007 fc77 	bl	800e4f0 <USB_ReadDevOutEPInterrupt>
 8006c02:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	f003 0301 	and.w	r3, r3, #1
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00c      	beq.n	8006c28 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c10:	015a      	lsls	r2, r3, #5
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	4413      	add	r3, r2
 8006c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006c20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 fef0 	bl	8007a08 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	f003 0308 	and.w	r3, r3, #8
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00c      	beq.n	8006c4c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c34:	015a      	lsls	r2, r3, #5
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	4413      	add	r3, r2
 8006c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c3e:	461a      	mov	r2, r3
 8006c40:	2308      	movs	r3, #8
 8006c42:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006c44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 ffc6 	bl	8007bd8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	f003 0310 	and.w	r3, r3, #16
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d008      	beq.n	8006c68 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c58:	015a      	lsls	r2, r3, #5
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c62:	461a      	mov	r2, r3
 8006c64:	2310      	movs	r3, #16
 8006c66:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d030      	beq.n	8006cd4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006c72:	6a3b      	ldr	r3, [r7, #32]
 8006c74:	695b      	ldr	r3, [r3, #20]
 8006c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c7a:	2b80      	cmp	r3, #128	; 0x80
 8006c7c:	d109      	bne.n	8006c92 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	69fa      	ldr	r2, [r7, #28]
 8006c88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006c90:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c94:	4613      	mov	r3, r2
 8006c96:	00db      	lsls	r3, r3, #3
 8006c98:	4413      	add	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	3304      	adds	r3, #4
 8006ca6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	78db      	ldrb	r3, [r3, #3]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d108      	bne.n	8006cc2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	4619      	mov	r1, r3
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f013 fde7 	bl	801a890 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc4:	015a      	lsls	r2, r3, #5
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	4413      	add	r3, r2
 8006cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cce:	461a      	mov	r2, r3
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	f003 0320 	and.w	r3, r3, #32
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d008      	beq.n	8006cf0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce0:	015a      	lsls	r2, r3, #5
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cea:	461a      	mov	r2, r3
 8006cec:	2320      	movs	r3, #32
 8006cee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d009      	beq.n	8006d0e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d06:	461a      	mov	r2, r3
 8006d08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006d0c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d10:	3301      	adds	r3, #1
 8006d12:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d16:	085b      	lsrs	r3, r3, #1
 8006d18:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f47f af62 	bne.w	8006be6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4618      	mov	r0, r3
 8006d28:	f007 fb9b 	bl	800e462 <USB_ReadInterrupts>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d36:	f040 80db 	bne.w	8006ef0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f007 fbbc 	bl	800e4bc <USB_ReadDevAllInEpInterrupt>
 8006d44:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006d4a:	e0cd      	b.n	8006ee8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f000 80c2 	beq.w	8006edc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d5e:	b2d2      	uxtb	r2, r2
 8006d60:	4611      	mov	r1, r2
 8006d62:	4618      	mov	r0, r3
 8006d64:	f007 fbe2 	bl	800e52c <USB_ReadDevInEPInterrupt>
 8006d68:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	f003 0301 	and.w	r3, r3, #1
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d057      	beq.n	8006e24 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d76:	f003 030f 	and.w	r3, r3, #15
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d80:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	43db      	mvns	r3, r3
 8006d8e:	69f9      	ldr	r1, [r7, #28]
 8006d90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d94:	4013      	ands	r3, r2
 8006d96:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	015a      	lsls	r2, r3, #5
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da4:	461a      	mov	r2, r3
 8006da6:	2301      	movs	r3, #1
 8006da8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d132      	bne.n	8006e18 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006db2:	6879      	ldr	r1, [r7, #4]
 8006db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006db6:	4613      	mov	r3, r2
 8006db8:	00db      	lsls	r3, r3, #3
 8006dba:	4413      	add	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	440b      	add	r3, r1
 8006dc0:	334c      	adds	r3, #76	; 0x4c
 8006dc2:	6819      	ldr	r1, [r3, #0]
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dc8:	4613      	mov	r3, r2
 8006dca:	00db      	lsls	r3, r3, #3
 8006dcc:	4413      	add	r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4403      	add	r3, r0
 8006dd2:	3348      	adds	r3, #72	; 0x48
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4419      	add	r1, r3
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ddc:	4613      	mov	r3, r2
 8006dde:	00db      	lsls	r3, r3, #3
 8006de0:	4413      	add	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4403      	add	r3, r0
 8006de6:	334c      	adds	r3, #76	; 0x4c
 8006de8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d113      	bne.n	8006e18 <HAL_PCD_IRQHandler+0x3a2>
 8006df0:	6879      	ldr	r1, [r7, #4]
 8006df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006df4:	4613      	mov	r3, r2
 8006df6:	00db      	lsls	r3, r3, #3
 8006df8:	4413      	add	r3, r2
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	440b      	add	r3, r1
 8006dfe:	3354      	adds	r3, #84	; 0x54
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d108      	bne.n	8006e18 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6818      	ldr	r0, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006e10:	461a      	mov	r2, r3
 8006e12:	2101      	movs	r1, #1
 8006e14:	f007 fbea 	bl	800e5ec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f013 fcb1 	bl	801a786 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	f003 0308 	and.w	r3, r3, #8
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d008      	beq.n	8006e40 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e30:	015a      	lsls	r2, r3, #5
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	4413      	add	r3, r2
 8006e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	2308      	movs	r3, #8
 8006e3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	f003 0310 	and.w	r3, r3, #16
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d008      	beq.n	8006e5c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4c:	015a      	lsls	r2, r3, #5
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	4413      	add	r3, r2
 8006e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e56:	461a      	mov	r2, r3
 8006e58:	2310      	movs	r3, #16
 8006e5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d008      	beq.n	8006e78 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e68:	015a      	lsls	r2, r3, #5
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e72:	461a      	mov	r2, r3
 8006e74:	2340      	movs	r3, #64	; 0x40
 8006e76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	f003 0302 	and.w	r3, r3, #2
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d023      	beq.n	8006eca <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006e82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e84:	6a38      	ldr	r0, [r7, #32]
 8006e86:	f006 fa7b 	bl	800d380 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	00db      	lsls	r3, r3, #3
 8006e90:	4413      	add	r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	3338      	adds	r3, #56	; 0x38
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	4413      	add	r3, r2
 8006e9a:	3304      	adds	r3, #4
 8006e9c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	78db      	ldrb	r3, [r3, #3]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d108      	bne.n	8006eb8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f013 fcfe 	bl	801a8b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eba:	015a      	lsls	r2, r3, #5
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	2302      	movs	r3, #2
 8006ec8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d003      	beq.n	8006edc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006ed4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 fd08 	bl	80078ec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ede:	3301      	adds	r3, #1
 8006ee0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee4:	085b      	lsrs	r3, r3, #1
 8006ee6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f47f af2e 	bne.w	8006d4c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f007 fab4 	bl	800e462 <USB_ReadInterrupts>
 8006efa:	4603      	mov	r3, r0
 8006efc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f04:	d122      	bne.n	8006f4c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	69fa      	ldr	r2, [r7, #28]
 8006f10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f14:	f023 0301 	bic.w	r3, r3, #1
 8006f18:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d108      	bne.n	8006f36 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fef0 	bl	8007d14 <HAL_PCDEx_LPM_Callback>
 8006f34:	e002      	b.n	8006f3c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f013 fc9c 	bl	801a874 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	695a      	ldr	r2, [r3, #20]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006f4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f007 fa86 	bl	800e462 <USB_ReadInterrupts>
 8006f56:	4603      	mov	r3, r0
 8006f58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f60:	d112      	bne.n	8006f88 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d102      	bne.n	8006f78 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f013 fc58 	bl	801a828 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	695a      	ldr	r2, [r3, #20]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006f86:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f007 fa68 	bl	800e462 <USB_ReadInterrupts>
 8006f92:	4603      	mov	r3, r0
 8006f94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f9c:	f040 80b7 	bne.w	800710e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	69fa      	ldr	r2, [r7, #28]
 8006faa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fae:	f023 0301 	bic.w	r3, r3, #1
 8006fb2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2110      	movs	r1, #16
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f006 f9e0 	bl	800d380 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fc4:	e046      	b.n	8007054 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc8:	015a      	lsls	r2, r3, #5
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	4413      	add	r3, r2
 8006fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006fd8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fdc:	015a      	lsls	r2, r3, #5
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fea:	0151      	lsls	r1, r2, #5
 8006fec:	69fa      	ldr	r2, [r7, #28]
 8006fee:	440a      	add	r2, r1
 8006ff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ff4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ff8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffc:	015a      	lsls	r2, r3, #5
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	4413      	add	r3, r2
 8007002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007006:	461a      	mov	r2, r3
 8007008:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800700c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800700e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007010:	015a      	lsls	r2, r3, #5
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	4413      	add	r3, r2
 8007016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800701e:	0151      	lsls	r1, r2, #5
 8007020:	69fa      	ldr	r2, [r7, #28]
 8007022:	440a      	add	r2, r1
 8007024:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007028:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800702c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800702e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007030:	015a      	lsls	r2, r3, #5
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	4413      	add	r3, r2
 8007036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800703e:	0151      	lsls	r1, r2, #5
 8007040:	69fa      	ldr	r2, [r7, #28]
 8007042:	440a      	add	r2, r1
 8007044:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007048:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800704c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800704e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007050:	3301      	adds	r3, #1
 8007052:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800705a:	429a      	cmp	r2, r3
 800705c:	d3b3      	bcc.n	8006fc6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007064:	69db      	ldr	r3, [r3, #28]
 8007066:	69fa      	ldr	r2, [r7, #28]
 8007068:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800706c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007070:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007076:	2b00      	cmp	r3, #0
 8007078:	d016      	beq.n	80070a8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007084:	69fa      	ldr	r2, [r7, #28]
 8007086:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800708a:	f043 030b 	orr.w	r3, r3, #11
 800708e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800709a:	69fa      	ldr	r2, [r7, #28]
 800709c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070a0:	f043 030b 	orr.w	r3, r3, #11
 80070a4:	6453      	str	r3, [r2, #68]	; 0x44
 80070a6:	e015      	b.n	80070d4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ae:	695b      	ldr	r3, [r3, #20]
 80070b0:	69fa      	ldr	r2, [r7, #28]
 80070b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80070ba:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80070be:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	69fa      	ldr	r2, [r7, #28]
 80070ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070ce:	f043 030b 	orr.w	r3, r3, #11
 80070d2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	69fa      	ldr	r2, [r7, #28]
 80070de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80070e6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6818      	ldr	r0, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80070f8:	461a      	mov	r2, r3
 80070fa:	f007 fa77 	bl	800e5ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	695a      	ldr	r2, [r3, #20]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800710c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4618      	mov	r0, r3
 8007114:	f007 f9a5 	bl	800e462 <USB_ReadInterrupts>
 8007118:	4603      	mov	r3, r0
 800711a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800711e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007122:	d124      	bne.n	800716e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4618      	mov	r0, r3
 800712a:	f007 fa3b 	bl	800e5a4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4618      	mov	r0, r3
 8007134:	f006 f9a1 	bl	800d47a <USB_GetDevSpeed>
 8007138:	4603      	mov	r3, r0
 800713a:	461a      	mov	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681c      	ldr	r4, [r3, #0]
 8007144:	f001 fa42 	bl	80085cc <HAL_RCC_GetHCLKFreq>
 8007148:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800714e:	b2db      	uxtb	r3, r3
 8007150:	461a      	mov	r2, r3
 8007152:	4620      	mov	r0, r4
 8007154:	f005 fea0 	bl	800ce98 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f013 fb3c 	bl	801a7d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	695a      	ldr	r2, [r3, #20]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800716c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4618      	mov	r0, r3
 8007174:	f007 f975 	bl	800e462 <USB_ReadInterrupts>
 8007178:	4603      	mov	r3, r0
 800717a:	f003 0308 	and.w	r3, r3, #8
 800717e:	2b08      	cmp	r3, #8
 8007180:	d10a      	bne.n	8007198 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f013 fb19 	bl	801a7ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	695a      	ldr	r2, [r3, #20]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f002 0208 	and.w	r2, r2, #8
 8007196:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4618      	mov	r0, r3
 800719e:	f007 f960 	bl	800e462 <USB_ReadInterrupts>
 80071a2:	4603      	mov	r3, r0
 80071a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071a8:	2b80      	cmp	r3, #128	; 0x80
 80071aa:	d122      	bne.n	80071f2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80071ac:	6a3b      	ldr	r3, [r7, #32]
 80071ae:	699b      	ldr	r3, [r3, #24]
 80071b0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071b4:	6a3b      	ldr	r3, [r7, #32]
 80071b6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80071b8:	2301      	movs	r3, #1
 80071ba:	627b      	str	r3, [r7, #36]	; 0x24
 80071bc:	e014      	b.n	80071e8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80071be:	6879      	ldr	r1, [r7, #4]
 80071c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071c2:	4613      	mov	r3, r2
 80071c4:	00db      	lsls	r3, r3, #3
 80071c6:	4413      	add	r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	440b      	add	r3, r1
 80071cc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d105      	bne.n	80071e2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80071d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	4619      	mov	r1, r3
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fb27 	bl	8007830 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	3301      	adds	r3, #1
 80071e6:	627b      	str	r3, [r7, #36]	; 0x24
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d3e5      	bcc.n	80071be <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4618      	mov	r0, r3
 80071f8:	f007 f933 	bl	800e462 <USB_ReadInterrupts>
 80071fc:	4603      	mov	r3, r0
 80071fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007202:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007206:	d13b      	bne.n	8007280 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007208:	2301      	movs	r3, #1
 800720a:	627b      	str	r3, [r7, #36]	; 0x24
 800720c:	e02b      	b.n	8007266 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800720e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007210:	015a      	lsls	r2, r3, #5
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	4413      	add	r3, r2
 8007216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800721e:	6879      	ldr	r1, [r7, #4]
 8007220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007222:	4613      	mov	r3, r2
 8007224:	00db      	lsls	r3, r3, #3
 8007226:	4413      	add	r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	440b      	add	r3, r1
 800722c:	3340      	adds	r3, #64	; 0x40
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d115      	bne.n	8007260 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007234:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007236:	2b00      	cmp	r3, #0
 8007238:	da12      	bge.n	8007260 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800723a:	6879      	ldr	r1, [r7, #4]
 800723c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800723e:	4613      	mov	r3, r2
 8007240:	00db      	lsls	r3, r3, #3
 8007242:	4413      	add	r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	440b      	add	r3, r1
 8007248:	333f      	adds	r3, #63	; 0x3f
 800724a:	2201      	movs	r2, #1
 800724c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800724e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007250:	b2db      	uxtb	r3, r3
 8007252:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007256:	b2db      	uxtb	r3, r3
 8007258:	4619      	mov	r1, r3
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 fae8 	bl	8007830 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007262:	3301      	adds	r3, #1
 8007264:	627b      	str	r3, [r7, #36]	; 0x24
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800726c:	429a      	cmp	r2, r3
 800726e:	d3ce      	bcc.n	800720e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	695a      	ldr	r2, [r3, #20]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800727e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4618      	mov	r0, r3
 8007286:	f007 f8ec 	bl	800e462 <USB_ReadInterrupts>
 800728a:	4603      	mov	r3, r0
 800728c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007290:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007294:	d155      	bne.n	8007342 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007296:	2301      	movs	r3, #1
 8007298:	627b      	str	r3, [r7, #36]	; 0x24
 800729a:	e045      	b.n	8007328 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800729c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729e:	015a      	lsls	r2, r3, #5
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80072ac:	6879      	ldr	r1, [r7, #4]
 80072ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072b0:	4613      	mov	r3, r2
 80072b2:	00db      	lsls	r3, r3, #3
 80072b4:	4413      	add	r3, r2
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	440b      	add	r3, r1
 80072ba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d12e      	bne.n	8007322 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80072c4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	da2b      	bge.n	8007322 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80072d6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80072da:	429a      	cmp	r2, r3
 80072dc:	d121      	bne.n	8007322 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80072de:	6879      	ldr	r1, [r7, #4]
 80072e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072e2:	4613      	mov	r3, r2
 80072e4:	00db      	lsls	r3, r3, #3
 80072e6:	4413      	add	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	440b      	add	r3, r1
 80072ec:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80072f0:	2201      	movs	r2, #1
 80072f2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80072f4:	6a3b      	ldr	r3, [r7, #32]
 80072f6:	699b      	ldr	r3, [r3, #24]
 80072f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80072fc:	6a3b      	ldr	r3, [r7, #32]
 80072fe:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	695b      	ldr	r3, [r3, #20]
 8007304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007308:	2b00      	cmp	r3, #0
 800730a:	d10a      	bne.n	8007322 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	69fa      	ldr	r2, [r7, #28]
 8007316:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800731a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800731e:	6053      	str	r3, [r2, #4]
            break;
 8007320:	e007      	b.n	8007332 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007324:	3301      	adds	r3, #1
 8007326:	627b      	str	r3, [r7, #36]	; 0x24
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800732e:	429a      	cmp	r2, r3
 8007330:	d3b4      	bcc.n	800729c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	695a      	ldr	r2, [r3, #20]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007340:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4618      	mov	r0, r3
 8007348:	f007 f88b 	bl	800e462 <USB_ReadInterrupts>
 800734c:	4603      	mov	r3, r0
 800734e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007356:	d10a      	bne.n	800736e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f013 fabd 	bl	801a8d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	695a      	ldr	r2, [r3, #20]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800736c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4618      	mov	r0, r3
 8007374:	f007 f875 	bl	800e462 <USB_ReadInterrupts>
 8007378:	4603      	mov	r3, r0
 800737a:	f003 0304 	and.w	r3, r3, #4
 800737e:	2b04      	cmp	r3, #4
 8007380:	d115      	bne.n	80073ae <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	f003 0304 	and.w	r3, r3, #4
 8007390:	2b00      	cmp	r3, #0
 8007392:	d002      	beq.n	800739a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f013 faad 	bl	801a8f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	6859      	ldr	r1, [r3, #4]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	69ba      	ldr	r2, [r7, #24]
 80073a6:	430a      	orrs	r2, r1
 80073a8:	605a      	str	r2, [r3, #4]
 80073aa:	e000      	b.n	80073ae <HAL_PCD_IRQHandler+0x938>
      return;
 80073ac:	bf00      	nop
    }
  }
}
 80073ae:	3734      	adds	r7, #52	; 0x34
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd90      	pop	{r4, r7, pc}

080073b4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d101      	bne.n	80073ce <HAL_PCD_SetAddress+0x1a>
 80073ca:	2302      	movs	r3, #2
 80073cc:	e013      	b.n	80073f6 <HAL_PCD_SetAddress+0x42>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2201      	movs	r2, #1
 80073d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	78fa      	ldrb	r2, [r7, #3]
 80073da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	78fa      	ldrb	r2, [r7, #3]
 80073e4:	4611      	mov	r1, r2
 80073e6:	4618      	mov	r0, r3
 80073e8:	f006 ffd3 	bl	800e392 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3708      	adds	r7, #8
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}

080073fe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b084      	sub	sp, #16
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
 8007406:	4608      	mov	r0, r1
 8007408:	4611      	mov	r1, r2
 800740a:	461a      	mov	r2, r3
 800740c:	4603      	mov	r3, r0
 800740e:	70fb      	strb	r3, [r7, #3]
 8007410:	460b      	mov	r3, r1
 8007412:	803b      	strh	r3, [r7, #0]
 8007414:	4613      	mov	r3, r2
 8007416:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007418:	2300      	movs	r3, #0
 800741a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800741c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007420:	2b00      	cmp	r3, #0
 8007422:	da0f      	bge.n	8007444 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007424:	78fb      	ldrb	r3, [r7, #3]
 8007426:	f003 020f 	and.w	r2, r3, #15
 800742a:	4613      	mov	r3, r2
 800742c:	00db      	lsls	r3, r3, #3
 800742e:	4413      	add	r3, r2
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	3338      	adds	r3, #56	; 0x38
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	4413      	add	r3, r2
 8007438:	3304      	adds	r3, #4
 800743a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2201      	movs	r2, #1
 8007440:	705a      	strb	r2, [r3, #1]
 8007442:	e00f      	b.n	8007464 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007444:	78fb      	ldrb	r3, [r7, #3]
 8007446:	f003 020f 	and.w	r2, r3, #15
 800744a:	4613      	mov	r3, r2
 800744c:	00db      	lsls	r3, r3, #3
 800744e:	4413      	add	r3, r2
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	4413      	add	r3, r2
 800745a:	3304      	adds	r3, #4
 800745c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007464:	78fb      	ldrb	r3, [r7, #3]
 8007466:	f003 030f 	and.w	r3, r3, #15
 800746a:	b2da      	uxtb	r2, r3
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007470:	883a      	ldrh	r2, [r7, #0]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	78ba      	ldrb	r2, [r7, #2]
 800747a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	785b      	ldrb	r3, [r3, #1]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d004      	beq.n	800748e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	b29a      	uxth	r2, r3
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800748e:	78bb      	ldrb	r3, [r7, #2]
 8007490:	2b02      	cmp	r3, #2
 8007492:	d102      	bne.n	800749a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d101      	bne.n	80074a8 <HAL_PCD_EP_Open+0xaa>
 80074a4:	2302      	movs	r3, #2
 80074a6:	e00e      	b.n	80074c6 <HAL_PCD_EP_Open+0xc8>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68f9      	ldr	r1, [r7, #12]
 80074b6:	4618      	mov	r0, r3
 80074b8:	f006 f804 	bl	800d4c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80074c4:	7afb      	ldrb	r3, [r7, #11]
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b084      	sub	sp, #16
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
 80074d6:	460b      	mov	r3, r1
 80074d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80074da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	da0f      	bge.n	8007502 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074e2:	78fb      	ldrb	r3, [r7, #3]
 80074e4:	f003 020f 	and.w	r2, r3, #15
 80074e8:	4613      	mov	r3, r2
 80074ea:	00db      	lsls	r3, r3, #3
 80074ec:	4413      	add	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	3338      	adds	r3, #56	; 0x38
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	4413      	add	r3, r2
 80074f6:	3304      	adds	r3, #4
 80074f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2201      	movs	r2, #1
 80074fe:	705a      	strb	r2, [r3, #1]
 8007500:	e00f      	b.n	8007522 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007502:	78fb      	ldrb	r3, [r7, #3]
 8007504:	f003 020f 	and.w	r2, r3, #15
 8007508:	4613      	mov	r3, r2
 800750a:	00db      	lsls	r3, r3, #3
 800750c:	4413      	add	r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	4413      	add	r3, r2
 8007518:	3304      	adds	r3, #4
 800751a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007522:	78fb      	ldrb	r3, [r7, #3]
 8007524:	f003 030f 	and.w	r3, r3, #15
 8007528:	b2da      	uxtb	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007534:	2b01      	cmp	r3, #1
 8007536:	d101      	bne.n	800753c <HAL_PCD_EP_Close+0x6e>
 8007538:	2302      	movs	r3, #2
 800753a:	e00e      	b.n	800755a <HAL_PCD_EP_Close+0x8c>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68f9      	ldr	r1, [r7, #12]
 800754a:	4618      	mov	r0, r3
 800754c:	f006 f842 	bl	800d5d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b086      	sub	sp, #24
 8007566:	af00      	add	r7, sp, #0
 8007568:	60f8      	str	r0, [r7, #12]
 800756a:	607a      	str	r2, [r7, #4]
 800756c:	603b      	str	r3, [r7, #0]
 800756e:	460b      	mov	r3, r1
 8007570:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007572:	7afb      	ldrb	r3, [r7, #11]
 8007574:	f003 020f 	and.w	r2, r3, #15
 8007578:	4613      	mov	r3, r2
 800757a:	00db      	lsls	r3, r3, #3
 800757c:	4413      	add	r3, r2
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	4413      	add	r3, r2
 8007588:	3304      	adds	r3, #4
 800758a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	683a      	ldr	r2, [r7, #0]
 8007596:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	2200      	movs	r2, #0
 800759c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	2200      	movs	r2, #0
 80075a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80075a4:	7afb      	ldrb	r3, [r7, #11]
 80075a6:	f003 030f 	and.w	r3, r3, #15
 80075aa:	b2da      	uxtb	r2, r3
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d102      	bne.n	80075be <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80075be:	7afb      	ldrb	r3, [r7, #11]
 80075c0:	f003 030f 	and.w	r3, r3, #15
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d109      	bne.n	80075dc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6818      	ldr	r0, [r3, #0]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	461a      	mov	r2, r3
 80075d4:	6979      	ldr	r1, [r7, #20]
 80075d6:	f006 fb21 	bl	800dc1c <USB_EP0StartXfer>
 80075da:	e008      	b.n	80075ee <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6818      	ldr	r0, [r3, #0]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	461a      	mov	r2, r3
 80075e8:	6979      	ldr	r1, [r7, #20]
 80075ea:	f006 f8cf 	bl	800d78c <USB_EPStartXfer>
  }

  return HAL_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3718      	adds	r7, #24
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	460b      	mov	r3, r1
 8007602:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007604:	78fb      	ldrb	r3, [r7, #3]
 8007606:	f003 020f 	and.w	r2, r3, #15
 800760a:	6879      	ldr	r1, [r7, #4]
 800760c:	4613      	mov	r3, r2
 800760e:	00db      	lsls	r3, r3, #3
 8007610:	4413      	add	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	440b      	add	r3, r1
 8007616:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800761a:	681b      	ldr	r3, [r3, #0]
}
 800761c:	4618      	mov	r0, r3
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b086      	sub	sp, #24
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	607a      	str	r2, [r7, #4]
 8007632:	603b      	str	r3, [r7, #0]
 8007634:	460b      	mov	r3, r1
 8007636:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007638:	7afb      	ldrb	r3, [r7, #11]
 800763a:	f003 020f 	and.w	r2, r3, #15
 800763e:	4613      	mov	r3, r2
 8007640:	00db      	lsls	r3, r3, #3
 8007642:	4413      	add	r3, r2
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	3338      	adds	r3, #56	; 0x38
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	4413      	add	r3, r2
 800764c:	3304      	adds	r3, #4
 800764e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	683a      	ldr	r2, [r7, #0]
 800765a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	2200      	movs	r2, #0
 8007660:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	2201      	movs	r2, #1
 8007666:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007668:	7afb      	ldrb	r3, [r7, #11]
 800766a:	f003 030f 	and.w	r3, r3, #15
 800766e:	b2da      	uxtb	r2, r3
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d102      	bne.n	8007682 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007682:	7afb      	ldrb	r3, [r7, #11]
 8007684:	f003 030f 	and.w	r3, r3, #15
 8007688:	2b00      	cmp	r3, #0
 800768a:	d109      	bne.n	80076a0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6818      	ldr	r0, [r3, #0]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	b2db      	uxtb	r3, r3
 8007696:	461a      	mov	r2, r3
 8007698:	6979      	ldr	r1, [r7, #20]
 800769a:	f006 fabf 	bl	800dc1c <USB_EP0StartXfer>
 800769e:	e008      	b.n	80076b2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6818      	ldr	r0, [r3, #0]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	461a      	mov	r2, r3
 80076ac:	6979      	ldr	r1, [r7, #20]
 80076ae:	f006 f86d 	bl	800d78c <USB_EPStartXfer>
  }

  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3718      	adds	r7, #24
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	460b      	mov	r3, r1
 80076c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80076c8:	78fb      	ldrb	r3, [r7, #3]
 80076ca:	f003 020f 	and.w	r2, r3, #15
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d901      	bls.n	80076da <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e050      	b.n	800777c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80076da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	da0f      	bge.n	8007702 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076e2:	78fb      	ldrb	r3, [r7, #3]
 80076e4:	f003 020f 	and.w	r2, r3, #15
 80076e8:	4613      	mov	r3, r2
 80076ea:	00db      	lsls	r3, r3, #3
 80076ec:	4413      	add	r3, r2
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	3338      	adds	r3, #56	; 0x38
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	4413      	add	r3, r2
 80076f6:	3304      	adds	r3, #4
 80076f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2201      	movs	r2, #1
 80076fe:	705a      	strb	r2, [r3, #1]
 8007700:	e00d      	b.n	800771e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007702:	78fa      	ldrb	r2, [r7, #3]
 8007704:	4613      	mov	r3, r2
 8007706:	00db      	lsls	r3, r3, #3
 8007708:	4413      	add	r3, r2
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	4413      	add	r3, r2
 8007714:	3304      	adds	r3, #4
 8007716:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2201      	movs	r2, #1
 8007722:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007724:	78fb      	ldrb	r3, [r7, #3]
 8007726:	f003 030f 	and.w	r3, r3, #15
 800772a:	b2da      	uxtb	r2, r3
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007736:	2b01      	cmp	r3, #1
 8007738:	d101      	bne.n	800773e <HAL_PCD_EP_SetStall+0x82>
 800773a:	2302      	movs	r3, #2
 800773c:	e01e      	b.n	800777c <HAL_PCD_EP_SetStall+0xc0>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2201      	movs	r2, #1
 8007742:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68f9      	ldr	r1, [r7, #12]
 800774c:	4618      	mov	r0, r3
 800774e:	f006 fcfd 	bl	800e14c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007752:	78fb      	ldrb	r3, [r7, #3]
 8007754:	f003 030f 	and.w	r3, r3, #15
 8007758:	2b00      	cmp	r3, #0
 800775a:	d10a      	bne.n	8007772 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6818      	ldr	r0, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	b2d9      	uxtb	r1, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800776c:	461a      	mov	r2, r3
 800776e:	f006 ff3d 	bl	800e5ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	460b      	mov	r3, r1
 800778e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007790:	78fb      	ldrb	r3, [r7, #3]
 8007792:	f003 020f 	and.w	r2, r3, #15
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	429a      	cmp	r2, r3
 800779c:	d901      	bls.n	80077a2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e042      	b.n	8007828 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80077a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	da0f      	bge.n	80077ca <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80077aa:	78fb      	ldrb	r3, [r7, #3]
 80077ac:	f003 020f 	and.w	r2, r3, #15
 80077b0:	4613      	mov	r3, r2
 80077b2:	00db      	lsls	r3, r3, #3
 80077b4:	4413      	add	r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	3338      	adds	r3, #56	; 0x38
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	4413      	add	r3, r2
 80077be:	3304      	adds	r3, #4
 80077c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2201      	movs	r2, #1
 80077c6:	705a      	strb	r2, [r3, #1]
 80077c8:	e00f      	b.n	80077ea <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80077ca:	78fb      	ldrb	r3, [r7, #3]
 80077cc:	f003 020f 	and.w	r2, r3, #15
 80077d0:	4613      	mov	r3, r2
 80077d2:	00db      	lsls	r3, r3, #3
 80077d4:	4413      	add	r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	4413      	add	r3, r2
 80077e0:	3304      	adds	r3, #4
 80077e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2200      	movs	r2, #0
 80077e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80077f0:	78fb      	ldrb	r3, [r7, #3]
 80077f2:	f003 030f 	and.w	r3, r3, #15
 80077f6:	b2da      	uxtb	r2, r3
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007802:	2b01      	cmp	r3, #1
 8007804:	d101      	bne.n	800780a <HAL_PCD_EP_ClrStall+0x86>
 8007806:	2302      	movs	r3, #2
 8007808:	e00e      	b.n	8007828 <HAL_PCD_EP_ClrStall+0xa4>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2201      	movs	r2, #1
 800780e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68f9      	ldr	r1, [r7, #12]
 8007818:	4618      	mov	r0, r3
 800781a:	f006 fd05 	bl	800e228 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	460b      	mov	r3, r1
 800783a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800783c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007840:	2b00      	cmp	r3, #0
 8007842:	da0c      	bge.n	800785e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007844:	78fb      	ldrb	r3, [r7, #3]
 8007846:	f003 020f 	and.w	r2, r3, #15
 800784a:	4613      	mov	r3, r2
 800784c:	00db      	lsls	r3, r3, #3
 800784e:	4413      	add	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	3338      	adds	r3, #56	; 0x38
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	4413      	add	r3, r2
 8007858:	3304      	adds	r3, #4
 800785a:	60fb      	str	r3, [r7, #12]
 800785c:	e00c      	b.n	8007878 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800785e:	78fb      	ldrb	r3, [r7, #3]
 8007860:	f003 020f 	and.w	r2, r3, #15
 8007864:	4613      	mov	r3, r2
 8007866:	00db      	lsls	r3, r3, #3
 8007868:	4413      	add	r3, r2
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	4413      	add	r3, r2
 8007874:	3304      	adds	r3, #4
 8007876:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68f9      	ldr	r1, [r7, #12]
 800787e:	4618      	mov	r0, r3
 8007880:	f006 fb24 	bl	800decc <USB_EPStopXfer>
 8007884:	4603      	mov	r3, r0
 8007886:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007888:	7afb      	ldrb	r3, [r7, #11]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b082      	sub	sp, #8
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
 800789a:	460b      	mov	r3, r1
 800789c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d101      	bne.n	80078ac <HAL_PCD_EP_Flush+0x1a>
 80078a8:	2302      	movs	r3, #2
 80078aa:	e01b      	b.n	80078e4 <HAL_PCD_EP_Flush+0x52>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 80078b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	da09      	bge.n	80078d0 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	78fb      	ldrb	r3, [r7, #3]
 80078c2:	f003 030f 	and.w	r3, r3, #15
 80078c6:	4619      	mov	r1, r3
 80078c8:	4610      	mov	r0, r2
 80078ca:	f005 fd59 	bl	800d380 <USB_FlushTxFifo>
 80078ce:	e004      	b.n	80078da <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4618      	mov	r0, r3
 80078d6:	f005 fd87 	bl	800d3e8 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b08a      	sub	sp, #40	; 0x28
 80078f0:	af02      	add	r7, sp, #8
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007900:	683a      	ldr	r2, [r7, #0]
 8007902:	4613      	mov	r3, r2
 8007904:	00db      	lsls	r3, r3, #3
 8007906:	4413      	add	r3, r2
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	3338      	adds	r3, #56	; 0x38
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	4413      	add	r3, r2
 8007910:	3304      	adds	r3, #4
 8007912:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6a1a      	ldr	r2, [r3, #32]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	699b      	ldr	r3, [r3, #24]
 800791c:	429a      	cmp	r2, r3
 800791e:	d901      	bls.n	8007924 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	e06c      	b.n	80079fe <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	699a      	ldr	r2, [r3, #24]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6a1b      	ldr	r3, [r3, #32]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	69fa      	ldr	r2, [r7, #28]
 8007936:	429a      	cmp	r2, r3
 8007938:	d902      	bls.n	8007940 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	3303      	adds	r3, #3
 8007944:	089b      	lsrs	r3, r3, #2
 8007946:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007948:	e02b      	b.n	80079a2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	699a      	ldr	r2, [r3, #24]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6a1b      	ldr	r3, [r3, #32]
 8007952:	1ad3      	subs	r3, r2, r3
 8007954:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	69fa      	ldr	r2, [r7, #28]
 800795c:	429a      	cmp	r2, r3
 800795e:	d902      	bls.n	8007966 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	3303      	adds	r3, #3
 800796a:	089b      	lsrs	r3, r3, #2
 800796c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6919      	ldr	r1, [r3, #16]
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	b2da      	uxtb	r2, r3
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800797e:	b2db      	uxtb	r3, r3
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	4603      	mov	r3, r0
 8007984:	6978      	ldr	r0, [r7, #20]
 8007986:	f006 fb4b 	bl	800e020 <USB_WritePacket>

    ep->xfer_buff  += len;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	691a      	ldr	r2, [r3, #16]
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	441a      	add	r2, r3
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6a1a      	ldr	r2, [r3, #32]
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	441a      	add	r2, r3
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	015a      	lsls	r2, r3, #5
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	4413      	add	r3, r2
 80079aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ae:	699b      	ldr	r3, [r3, #24]
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	69ba      	ldr	r2, [r7, #24]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d809      	bhi.n	80079cc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6a1a      	ldr	r2, [r3, #32]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d203      	bcs.n	80079cc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	699b      	ldr	r3, [r3, #24]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1be      	bne.n	800794a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	699a      	ldr	r2, [r3, #24]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6a1b      	ldr	r3, [r3, #32]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d811      	bhi.n	80079fc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	f003 030f 	and.w	r3, r3, #15
 80079de:	2201      	movs	r2, #1
 80079e0:	fa02 f303 	lsl.w	r3, r2, r3
 80079e4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	43db      	mvns	r3, r3
 80079f2:	6939      	ldr	r1, [r7, #16]
 80079f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079f8:	4013      	ands	r3, r2
 80079fa:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3720      	adds	r7, #32
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
	...

08007a08 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b088      	sub	sp, #32
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	333c      	adds	r3, #60	; 0x3c
 8007a20:	3304      	adds	r3, #4
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	015a      	lsls	r2, r3, #5
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d17b      	bne.n	8007b36 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	f003 0308 	and.w	r3, r3, #8
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d015      	beq.n	8007a74 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	4a61      	ldr	r2, [pc, #388]	; (8007bd0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	f240 80b9 	bls.w	8007bc4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f000 80b3 	beq.w	8007bc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	015a      	lsls	r2, r3, #5
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	4413      	add	r3, r2
 8007a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a70:	6093      	str	r3, [r2, #8]
 8007a72:	e0a7      	b.n	8007bc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	f003 0320 	and.w	r3, r3, #32
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d009      	beq.n	8007a92 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	015a      	lsls	r2, r3, #5
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	4413      	add	r3, r2
 8007a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	2320      	movs	r3, #32
 8007a8e:	6093      	str	r3, [r2, #8]
 8007a90:	e098      	b.n	8007bc4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f040 8093 	bne.w	8007bc4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	4a4b      	ldr	r2, [pc, #300]	; (8007bd0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d90f      	bls.n	8007ac6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00a      	beq.n	8007ac6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	015a      	lsls	r2, r3, #5
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007abc:	461a      	mov	r2, r3
 8007abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ac2:	6093      	str	r3, [r2, #8]
 8007ac4:	e07e      	b.n	8007bc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007ac6:	683a      	ldr	r2, [r7, #0]
 8007ac8:	4613      	mov	r3, r2
 8007aca:	00db      	lsls	r3, r3, #3
 8007acc:	4413      	add	r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	3304      	adds	r3, #4
 8007ada:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	69da      	ldr	r2, [r3, #28]
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	0159      	lsls	r1, r3, #5
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	440b      	add	r3, r1
 8007ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007af2:	1ad2      	subs	r2, r2, r3
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d114      	bne.n	8007b28 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	699b      	ldr	r3, [r3, #24]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d109      	bne.n	8007b1a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6818      	ldr	r0, [r3, #0]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007b10:	461a      	mov	r2, r3
 8007b12:	2101      	movs	r1, #1
 8007b14:	f006 fd6a 	bl	800e5ec <USB_EP0_OutStart>
 8007b18:	e006      	b.n	8007b28 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	691a      	ldr	r2, [r3, #16]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6a1b      	ldr	r3, [r3, #32]
 8007b22:	441a      	add	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f012 fe0e 	bl	801a750 <HAL_PCD_DataOutStageCallback>
 8007b34:	e046      	b.n	8007bc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	4a26      	ldr	r2, [pc, #152]	; (8007bd4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d124      	bne.n	8007b88 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00a      	beq.n	8007b5e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	015a      	lsls	r2, r3, #5
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	4413      	add	r3, r2
 8007b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b54:	461a      	mov	r2, r3
 8007b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b5a:	6093      	str	r3, [r2, #8]
 8007b5c:	e032      	b.n	8007bc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	f003 0320 	and.w	r3, r3, #32
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d008      	beq.n	8007b7a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	015a      	lsls	r2, r3, #5
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	4413      	add	r3, r2
 8007b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b74:	461a      	mov	r2, r3
 8007b76:	2320      	movs	r3, #32
 8007b78:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	4619      	mov	r1, r3
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f012 fde5 	bl	801a750 <HAL_PCD_DataOutStageCallback>
 8007b86:	e01d      	b.n	8007bc4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d114      	bne.n	8007bb8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007b8e:	6879      	ldr	r1, [r7, #4]
 8007b90:	683a      	ldr	r2, [r7, #0]
 8007b92:	4613      	mov	r3, r2
 8007b94:	00db      	lsls	r3, r3, #3
 8007b96:	4413      	add	r3, r2
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	440b      	add	r3, r1
 8007b9c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d108      	bne.n	8007bb8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6818      	ldr	r0, [r3, #0]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	f006 fd1a 	bl	800e5ec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f012 fdc6 	bl	801a750 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3720      	adds	r7, #32
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	4f54300a 	.word	0x4f54300a
 8007bd4:	4f54310a 	.word	0x4f54310a

08007bd8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b086      	sub	sp, #24
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	333c      	adds	r3, #60	; 0x3c
 8007bf0:	3304      	adds	r3, #4
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	015a      	lsls	r2, r3, #5
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	4a15      	ldr	r2, [pc, #84]	; (8007c60 <PCD_EP_OutSetupPacket_int+0x88>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d90e      	bls.n	8007c2c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d009      	beq.n	8007c2c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	015a      	lsls	r2, r3, #5
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	4413      	add	r3, r2
 8007c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c24:	461a      	mov	r2, r3
 8007c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c2a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f012 fd7d 	bl	801a72c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	4a0a      	ldr	r2, [pc, #40]	; (8007c60 <PCD_EP_OutSetupPacket_int+0x88>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d90c      	bls.n	8007c54 <PCD_EP_OutSetupPacket_int+0x7c>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d108      	bne.n	8007c54 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6818      	ldr	r0, [r3, #0]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	2101      	movs	r1, #1
 8007c50:	f006 fccc 	bl	800e5ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3718      	adds	r7, #24
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	4f54300a 	.word	0x4f54300a

08007c64 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	70fb      	strb	r3, [r7, #3]
 8007c70:	4613      	mov	r3, r2
 8007c72:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007c7c:	78fb      	ldrb	r3, [r7, #3]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d107      	bne.n	8007c92 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007c82:	883b      	ldrh	r3, [r7, #0]
 8007c84:	0419      	lsls	r1, r3, #16
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	68ba      	ldr	r2, [r7, #8]
 8007c8c:	430a      	orrs	r2, r1
 8007c8e:	629a      	str	r2, [r3, #40]	; 0x28
 8007c90:	e028      	b.n	8007ce4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c98:	0c1b      	lsrs	r3, r3, #16
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	73fb      	strb	r3, [r7, #15]
 8007ca4:	e00d      	b.n	8007cc2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	7bfb      	ldrb	r3, [r7, #15]
 8007cac:	3340      	adds	r3, #64	; 0x40
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	4413      	add	r3, r2
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	0c1b      	lsrs	r3, r3, #16
 8007cb6:	68ba      	ldr	r2, [r7, #8]
 8007cb8:	4413      	add	r3, r2
 8007cba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007cbc:	7bfb      	ldrb	r3, [r7, #15]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	73fb      	strb	r3, [r7, #15]
 8007cc2:	7bfa      	ldrb	r2, [r7, #15]
 8007cc4:	78fb      	ldrb	r3, [r7, #3]
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d3ec      	bcc.n	8007ca6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007ccc:	883b      	ldrh	r3, [r7, #0]
 8007cce:	0418      	lsls	r0, r3, #16
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6819      	ldr	r1, [r3, #0]
 8007cd4:	78fb      	ldrb	r3, [r7, #3]
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	68ba      	ldr	r2, [r7, #8]
 8007cda:	4302      	orrs	r2, r0
 8007cdc:	3340      	adds	r3, #64	; 0x40
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	440b      	add	r3, r1
 8007ce2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3714      	adds	r7, #20
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr

08007cf2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007cf2:	b480      	push	{r7}
 8007cf4:	b083      	sub	sp, #12
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	887a      	ldrh	r2, [r7, #2]
 8007d04:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007d20:	bf00      	nop
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	460b      	mov	r3, r1
 8007d36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8007d38:	4b10      	ldr	r3, [pc, #64]	; (8007d7c <HAL_PWR_EnterSTOPMode+0x50>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f023 0203 	bic.w	r2, r3, #3
 8007d40:	490e      	ldr	r1, [pc, #56]	; (8007d7c <HAL_PWR_EnterSTOPMode+0x50>)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007d48:	4b0d      	ldr	r3, [pc, #52]	; (8007d80 <HAL_PWR_EnterSTOPMode+0x54>)
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	4a0c      	ldr	r2, [pc, #48]	; (8007d80 <HAL_PWR_EnterSTOPMode+0x54>)
 8007d4e:	f043 0304 	orr.w	r3, r3, #4
 8007d52:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8007d54:	78fb      	ldrb	r3, [r7, #3]
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d101      	bne.n	8007d5e <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8007d5a:	bf30      	wfi
 8007d5c:	e002      	b.n	8007d64 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8007d5e:	bf40      	sev
    __WFE();
 8007d60:	bf20      	wfe
    __WFE();
 8007d62:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8007d64:	4b06      	ldr	r3, [pc, #24]	; (8007d80 <HAL_PWR_EnterSTOPMode+0x54>)
 8007d66:	691b      	ldr	r3, [r3, #16]
 8007d68:	4a05      	ldr	r2, [pc, #20]	; (8007d80 <HAL_PWR_EnterSTOPMode+0x54>)
 8007d6a:	f023 0304 	bic.w	r3, r3, #4
 8007d6e:	6113      	str	r3, [r2, #16]
}
 8007d70:	bf00      	nop
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr
 8007d7c:	40007000 	.word	0x40007000
 8007d80:	e000ed00 	.word	0xe000ed00

08007d84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b086      	sub	sp, #24
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d101      	bne.n	8007d96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e267      	b.n	8008266 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 0301 	and.w	r3, r3, #1
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d075      	beq.n	8007e8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007da2:	4b88      	ldr	r3, [pc, #544]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	f003 030c 	and.w	r3, r3, #12
 8007daa:	2b04      	cmp	r3, #4
 8007dac:	d00c      	beq.n	8007dc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007dae:	4b85      	ldr	r3, [pc, #532]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007db6:	2b08      	cmp	r3, #8
 8007db8:	d112      	bne.n	8007de0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007dba:	4b82      	ldr	r3, [pc, #520]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007dc6:	d10b      	bne.n	8007de0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dc8:	4b7e      	ldr	r3, [pc, #504]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d05b      	beq.n	8007e8c <HAL_RCC_OscConfig+0x108>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d157      	bne.n	8007e8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e242      	b.n	8008266 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007de8:	d106      	bne.n	8007df8 <HAL_RCC_OscConfig+0x74>
 8007dea:	4b76      	ldr	r3, [pc, #472]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a75      	ldr	r2, [pc, #468]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007df4:	6013      	str	r3, [r2, #0]
 8007df6:	e01d      	b.n	8007e34 <HAL_RCC_OscConfig+0xb0>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e00:	d10c      	bne.n	8007e1c <HAL_RCC_OscConfig+0x98>
 8007e02:	4b70      	ldr	r3, [pc, #448]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a6f      	ldr	r2, [pc, #444]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e0c:	6013      	str	r3, [r2, #0]
 8007e0e:	4b6d      	ldr	r3, [pc, #436]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a6c      	ldr	r2, [pc, #432]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e18:	6013      	str	r3, [r2, #0]
 8007e1a:	e00b      	b.n	8007e34 <HAL_RCC_OscConfig+0xb0>
 8007e1c:	4b69      	ldr	r3, [pc, #420]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a68      	ldr	r2, [pc, #416]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e26:	6013      	str	r3, [r2, #0]
 8007e28:	4b66      	ldr	r3, [pc, #408]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a65      	ldr	r2, [pc, #404]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d013      	beq.n	8007e64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e3c:	f7fb fb4c 	bl	80034d8 <HAL_GetTick>
 8007e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e42:	e008      	b.n	8007e56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e44:	f7fb fb48 	bl	80034d8 <HAL_GetTick>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	1ad3      	subs	r3, r2, r3
 8007e4e:	2b64      	cmp	r3, #100	; 0x64
 8007e50:	d901      	bls.n	8007e56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007e52:	2303      	movs	r3, #3
 8007e54:	e207      	b.n	8008266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e56:	4b5b      	ldr	r3, [pc, #364]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d0f0      	beq.n	8007e44 <HAL_RCC_OscConfig+0xc0>
 8007e62:	e014      	b.n	8007e8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e64:	f7fb fb38 	bl	80034d8 <HAL_GetTick>
 8007e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e6a:	e008      	b.n	8007e7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e6c:	f7fb fb34 	bl	80034d8 <HAL_GetTick>
 8007e70:	4602      	mov	r2, r0
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	1ad3      	subs	r3, r2, r3
 8007e76:	2b64      	cmp	r3, #100	; 0x64
 8007e78:	d901      	bls.n	8007e7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	e1f3      	b.n	8008266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e7e:	4b51      	ldr	r3, [pc, #324]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1f0      	bne.n	8007e6c <HAL_RCC_OscConfig+0xe8>
 8007e8a:	e000      	b.n	8007e8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f003 0302 	and.w	r3, r3, #2
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d063      	beq.n	8007f62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e9a:	4b4a      	ldr	r3, [pc, #296]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	f003 030c 	and.w	r3, r3, #12
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00b      	beq.n	8007ebe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ea6:	4b47      	ldr	r3, [pc, #284]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007eae:	2b08      	cmp	r3, #8
 8007eb0:	d11c      	bne.n	8007eec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007eb2:	4b44      	ldr	r3, [pc, #272]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d116      	bne.n	8007eec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ebe:	4b41      	ldr	r3, [pc, #260]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 0302 	and.w	r3, r3, #2
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d005      	beq.n	8007ed6 <HAL_RCC_OscConfig+0x152>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d001      	beq.n	8007ed6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e1c7      	b.n	8008266 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ed6:	4b3b      	ldr	r3, [pc, #236]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	00db      	lsls	r3, r3, #3
 8007ee4:	4937      	ldr	r1, [pc, #220]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007eea:	e03a      	b.n	8007f62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d020      	beq.n	8007f36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ef4:	4b34      	ldr	r3, [pc, #208]	; (8007fc8 <HAL_RCC_OscConfig+0x244>)
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007efa:	f7fb faed 	bl	80034d8 <HAL_GetTick>
 8007efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f00:	e008      	b.n	8007f14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f02:	f7fb fae9 	bl	80034d8 <HAL_GetTick>
 8007f06:	4602      	mov	r2, r0
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	2b02      	cmp	r3, #2
 8007f0e:	d901      	bls.n	8007f14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007f10:	2303      	movs	r3, #3
 8007f12:	e1a8      	b.n	8008266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f14:	4b2b      	ldr	r3, [pc, #172]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 0302 	and.w	r3, r3, #2
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d0f0      	beq.n	8007f02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f20:	4b28      	ldr	r3, [pc, #160]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	00db      	lsls	r3, r3, #3
 8007f2e:	4925      	ldr	r1, [pc, #148]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007f30:	4313      	orrs	r3, r2
 8007f32:	600b      	str	r3, [r1, #0]
 8007f34:	e015      	b.n	8007f62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f36:	4b24      	ldr	r3, [pc, #144]	; (8007fc8 <HAL_RCC_OscConfig+0x244>)
 8007f38:	2200      	movs	r2, #0
 8007f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f3c:	f7fb facc 	bl	80034d8 <HAL_GetTick>
 8007f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f42:	e008      	b.n	8007f56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f44:	f7fb fac8 	bl	80034d8 <HAL_GetTick>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	1ad3      	subs	r3, r2, r3
 8007f4e:	2b02      	cmp	r3, #2
 8007f50:	d901      	bls.n	8007f56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007f52:	2303      	movs	r3, #3
 8007f54:	e187      	b.n	8008266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f56:	4b1b      	ldr	r3, [pc, #108]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 0302 	and.w	r3, r3, #2
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1f0      	bne.n	8007f44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f003 0308 	and.w	r3, r3, #8
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d036      	beq.n	8007fdc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	695b      	ldr	r3, [r3, #20]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d016      	beq.n	8007fa4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f76:	4b15      	ldr	r3, [pc, #84]	; (8007fcc <HAL_RCC_OscConfig+0x248>)
 8007f78:	2201      	movs	r2, #1
 8007f7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f7c:	f7fb faac 	bl	80034d8 <HAL_GetTick>
 8007f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f82:	e008      	b.n	8007f96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f84:	f7fb faa8 	bl	80034d8 <HAL_GetTick>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	1ad3      	subs	r3, r2, r3
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d901      	bls.n	8007f96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007f92:	2303      	movs	r3, #3
 8007f94:	e167      	b.n	8008266 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f96:	4b0b      	ldr	r3, [pc, #44]	; (8007fc4 <HAL_RCC_OscConfig+0x240>)
 8007f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f9a:	f003 0302 	and.w	r3, r3, #2
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d0f0      	beq.n	8007f84 <HAL_RCC_OscConfig+0x200>
 8007fa2:	e01b      	b.n	8007fdc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007fa4:	4b09      	ldr	r3, [pc, #36]	; (8007fcc <HAL_RCC_OscConfig+0x248>)
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007faa:	f7fb fa95 	bl	80034d8 <HAL_GetTick>
 8007fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007fb0:	e00e      	b.n	8007fd0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007fb2:	f7fb fa91 	bl	80034d8 <HAL_GetTick>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	1ad3      	subs	r3, r2, r3
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d907      	bls.n	8007fd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	e150      	b.n	8008266 <HAL_RCC_OscConfig+0x4e2>
 8007fc4:	40023800 	.word	0x40023800
 8007fc8:	42470000 	.word	0x42470000
 8007fcc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007fd0:	4b88      	ldr	r3, [pc, #544]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 8007fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fd4:	f003 0302 	and.w	r3, r3, #2
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d1ea      	bne.n	8007fb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f003 0304 	and.w	r3, r3, #4
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f000 8097 	beq.w	8008118 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007fea:	2300      	movs	r3, #0
 8007fec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007fee:	4b81      	ldr	r3, [pc, #516]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 8007ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d10f      	bne.n	800801a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	60bb      	str	r3, [r7, #8]
 8007ffe:	4b7d      	ldr	r3, [pc, #500]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 8008000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008002:	4a7c      	ldr	r2, [pc, #496]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 8008004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008008:	6413      	str	r3, [r2, #64]	; 0x40
 800800a:	4b7a      	ldr	r3, [pc, #488]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 800800c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008012:	60bb      	str	r3, [r7, #8]
 8008014:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008016:	2301      	movs	r3, #1
 8008018:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800801a:	4b77      	ldr	r3, [pc, #476]	; (80081f8 <HAL_RCC_OscConfig+0x474>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008022:	2b00      	cmp	r3, #0
 8008024:	d118      	bne.n	8008058 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008026:	4b74      	ldr	r3, [pc, #464]	; (80081f8 <HAL_RCC_OscConfig+0x474>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a73      	ldr	r2, [pc, #460]	; (80081f8 <HAL_RCC_OscConfig+0x474>)
 800802c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008030:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008032:	f7fb fa51 	bl	80034d8 <HAL_GetTick>
 8008036:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008038:	e008      	b.n	800804c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800803a:	f7fb fa4d 	bl	80034d8 <HAL_GetTick>
 800803e:	4602      	mov	r2, r0
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	2b02      	cmp	r3, #2
 8008046:	d901      	bls.n	800804c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008048:	2303      	movs	r3, #3
 800804a:	e10c      	b.n	8008266 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800804c:	4b6a      	ldr	r3, [pc, #424]	; (80081f8 <HAL_RCC_OscConfig+0x474>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008054:	2b00      	cmp	r3, #0
 8008056:	d0f0      	beq.n	800803a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d106      	bne.n	800806e <HAL_RCC_OscConfig+0x2ea>
 8008060:	4b64      	ldr	r3, [pc, #400]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 8008062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008064:	4a63      	ldr	r2, [pc, #396]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 8008066:	f043 0301 	orr.w	r3, r3, #1
 800806a:	6713      	str	r3, [r2, #112]	; 0x70
 800806c:	e01c      	b.n	80080a8 <HAL_RCC_OscConfig+0x324>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	2b05      	cmp	r3, #5
 8008074:	d10c      	bne.n	8008090 <HAL_RCC_OscConfig+0x30c>
 8008076:	4b5f      	ldr	r3, [pc, #380]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 8008078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800807a:	4a5e      	ldr	r2, [pc, #376]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 800807c:	f043 0304 	orr.w	r3, r3, #4
 8008080:	6713      	str	r3, [r2, #112]	; 0x70
 8008082:	4b5c      	ldr	r3, [pc, #368]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 8008084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008086:	4a5b      	ldr	r2, [pc, #364]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 8008088:	f043 0301 	orr.w	r3, r3, #1
 800808c:	6713      	str	r3, [r2, #112]	; 0x70
 800808e:	e00b      	b.n	80080a8 <HAL_RCC_OscConfig+0x324>
 8008090:	4b58      	ldr	r3, [pc, #352]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 8008092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008094:	4a57      	ldr	r2, [pc, #348]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 8008096:	f023 0301 	bic.w	r3, r3, #1
 800809a:	6713      	str	r3, [r2, #112]	; 0x70
 800809c:	4b55      	ldr	r3, [pc, #340]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 800809e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080a0:	4a54      	ldr	r2, [pc, #336]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 80080a2:	f023 0304 	bic.w	r3, r3, #4
 80080a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d015      	beq.n	80080dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080b0:	f7fb fa12 	bl	80034d8 <HAL_GetTick>
 80080b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080b6:	e00a      	b.n	80080ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080b8:	f7fb fa0e 	bl	80034d8 <HAL_GetTick>
 80080bc:	4602      	mov	r2, r0
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d901      	bls.n	80080ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80080ca:	2303      	movs	r3, #3
 80080cc:	e0cb      	b.n	8008266 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080ce:	4b49      	ldr	r3, [pc, #292]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 80080d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d2:	f003 0302 	and.w	r3, r3, #2
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d0ee      	beq.n	80080b8 <HAL_RCC_OscConfig+0x334>
 80080da:	e014      	b.n	8008106 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080dc:	f7fb f9fc 	bl	80034d8 <HAL_GetTick>
 80080e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080e2:	e00a      	b.n	80080fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080e4:	f7fb f9f8 	bl	80034d8 <HAL_GetTick>
 80080e8:	4602      	mov	r2, r0
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d901      	bls.n	80080fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80080f6:	2303      	movs	r3, #3
 80080f8:	e0b5      	b.n	8008266 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080fa:	4b3e      	ldr	r3, [pc, #248]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 80080fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080fe:	f003 0302 	and.w	r3, r3, #2
 8008102:	2b00      	cmp	r3, #0
 8008104:	d1ee      	bne.n	80080e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008106:	7dfb      	ldrb	r3, [r7, #23]
 8008108:	2b01      	cmp	r3, #1
 800810a:	d105      	bne.n	8008118 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800810c:	4b39      	ldr	r3, [pc, #228]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 800810e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008110:	4a38      	ldr	r2, [pc, #224]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 8008112:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008116:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	699b      	ldr	r3, [r3, #24]
 800811c:	2b00      	cmp	r3, #0
 800811e:	f000 80a1 	beq.w	8008264 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008122:	4b34      	ldr	r3, [pc, #208]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	f003 030c 	and.w	r3, r3, #12
 800812a:	2b08      	cmp	r3, #8
 800812c:	d05c      	beq.n	80081e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	699b      	ldr	r3, [r3, #24]
 8008132:	2b02      	cmp	r3, #2
 8008134:	d141      	bne.n	80081ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008136:	4b31      	ldr	r3, [pc, #196]	; (80081fc <HAL_RCC_OscConfig+0x478>)
 8008138:	2200      	movs	r2, #0
 800813a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800813c:	f7fb f9cc 	bl	80034d8 <HAL_GetTick>
 8008140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008142:	e008      	b.n	8008156 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008144:	f7fb f9c8 	bl	80034d8 <HAL_GetTick>
 8008148:	4602      	mov	r2, r0
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	2b02      	cmp	r3, #2
 8008150:	d901      	bls.n	8008156 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e087      	b.n	8008266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008156:	4b27      	ldr	r3, [pc, #156]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1f0      	bne.n	8008144 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	69da      	ldr	r2, [r3, #28]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a1b      	ldr	r3, [r3, #32]
 800816a:	431a      	orrs	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008170:	019b      	lsls	r3, r3, #6
 8008172:	431a      	orrs	r2, r3
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008178:	085b      	lsrs	r3, r3, #1
 800817a:	3b01      	subs	r3, #1
 800817c:	041b      	lsls	r3, r3, #16
 800817e:	431a      	orrs	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008184:	061b      	lsls	r3, r3, #24
 8008186:	491b      	ldr	r1, [pc, #108]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 8008188:	4313      	orrs	r3, r2
 800818a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800818c:	4b1b      	ldr	r3, [pc, #108]	; (80081fc <HAL_RCC_OscConfig+0x478>)
 800818e:	2201      	movs	r2, #1
 8008190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008192:	f7fb f9a1 	bl	80034d8 <HAL_GetTick>
 8008196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008198:	e008      	b.n	80081ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800819a:	f7fb f99d 	bl	80034d8 <HAL_GetTick>
 800819e:	4602      	mov	r2, r0
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	1ad3      	subs	r3, r2, r3
 80081a4:	2b02      	cmp	r3, #2
 80081a6:	d901      	bls.n	80081ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80081a8:	2303      	movs	r3, #3
 80081aa:	e05c      	b.n	8008266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081ac:	4b11      	ldr	r3, [pc, #68]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d0f0      	beq.n	800819a <HAL_RCC_OscConfig+0x416>
 80081b8:	e054      	b.n	8008264 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081ba:	4b10      	ldr	r3, [pc, #64]	; (80081fc <HAL_RCC_OscConfig+0x478>)
 80081bc:	2200      	movs	r2, #0
 80081be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081c0:	f7fb f98a 	bl	80034d8 <HAL_GetTick>
 80081c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081c6:	e008      	b.n	80081da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081c8:	f7fb f986 	bl	80034d8 <HAL_GetTick>
 80081cc:	4602      	mov	r2, r0
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	1ad3      	subs	r3, r2, r3
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	d901      	bls.n	80081da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80081d6:	2303      	movs	r3, #3
 80081d8:	e045      	b.n	8008266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081da:	4b06      	ldr	r3, [pc, #24]	; (80081f4 <HAL_RCC_OscConfig+0x470>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d1f0      	bne.n	80081c8 <HAL_RCC_OscConfig+0x444>
 80081e6:	e03d      	b.n	8008264 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d107      	bne.n	8008200 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	e038      	b.n	8008266 <HAL_RCC_OscConfig+0x4e2>
 80081f4:	40023800 	.word	0x40023800
 80081f8:	40007000 	.word	0x40007000
 80081fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008200:	4b1b      	ldr	r3, [pc, #108]	; (8008270 <HAL_RCC_OscConfig+0x4ec>)
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	699b      	ldr	r3, [r3, #24]
 800820a:	2b01      	cmp	r3, #1
 800820c:	d028      	beq.n	8008260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008218:	429a      	cmp	r2, r3
 800821a:	d121      	bne.n	8008260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008226:	429a      	cmp	r2, r3
 8008228:	d11a      	bne.n	8008260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008230:	4013      	ands	r3, r2
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008236:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008238:	4293      	cmp	r3, r2
 800823a:	d111      	bne.n	8008260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008246:	085b      	lsrs	r3, r3, #1
 8008248:	3b01      	subs	r3, #1
 800824a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800824c:	429a      	cmp	r2, r3
 800824e:	d107      	bne.n	8008260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800825c:	429a      	cmp	r2, r3
 800825e:	d001      	beq.n	8008264 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	e000      	b.n	8008266 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	3718      	adds	r7, #24
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	40023800 	.word	0x40023800

08008274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d101      	bne.n	8008288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	e0cc      	b.n	8008422 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008288:	4b68      	ldr	r3, [pc, #416]	; (800842c <HAL_RCC_ClockConfig+0x1b8>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 0307 	and.w	r3, r3, #7
 8008290:	683a      	ldr	r2, [r7, #0]
 8008292:	429a      	cmp	r2, r3
 8008294:	d90c      	bls.n	80082b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008296:	4b65      	ldr	r3, [pc, #404]	; (800842c <HAL_RCC_ClockConfig+0x1b8>)
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	b2d2      	uxtb	r2, r2
 800829c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800829e:	4b63      	ldr	r3, [pc, #396]	; (800842c <HAL_RCC_ClockConfig+0x1b8>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 0307 	and.w	r3, r3, #7
 80082a6:	683a      	ldr	r2, [r7, #0]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d001      	beq.n	80082b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	e0b8      	b.n	8008422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0302 	and.w	r3, r3, #2
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d020      	beq.n	80082fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 0304 	and.w	r3, r3, #4
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d005      	beq.n	80082d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80082c8:	4b59      	ldr	r3, [pc, #356]	; (8008430 <HAL_RCC_ClockConfig+0x1bc>)
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	4a58      	ldr	r2, [pc, #352]	; (8008430 <HAL_RCC_ClockConfig+0x1bc>)
 80082ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80082d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f003 0308 	and.w	r3, r3, #8
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d005      	beq.n	80082ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80082e0:	4b53      	ldr	r3, [pc, #332]	; (8008430 <HAL_RCC_ClockConfig+0x1bc>)
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	4a52      	ldr	r2, [pc, #328]	; (8008430 <HAL_RCC_ClockConfig+0x1bc>)
 80082e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80082ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082ec:	4b50      	ldr	r3, [pc, #320]	; (8008430 <HAL_RCC_ClockConfig+0x1bc>)
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	494d      	ldr	r1, [pc, #308]	; (8008430 <HAL_RCC_ClockConfig+0x1bc>)
 80082fa:	4313      	orrs	r3, r2
 80082fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 0301 	and.w	r3, r3, #1
 8008306:	2b00      	cmp	r3, #0
 8008308:	d044      	beq.n	8008394 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	2b01      	cmp	r3, #1
 8008310:	d107      	bne.n	8008322 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008312:	4b47      	ldr	r3, [pc, #284]	; (8008430 <HAL_RCC_ClockConfig+0x1bc>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800831a:	2b00      	cmp	r3, #0
 800831c:	d119      	bne.n	8008352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	e07f      	b.n	8008422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	2b02      	cmp	r3, #2
 8008328:	d003      	beq.n	8008332 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800832e:	2b03      	cmp	r3, #3
 8008330:	d107      	bne.n	8008342 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008332:	4b3f      	ldr	r3, [pc, #252]	; (8008430 <HAL_RCC_ClockConfig+0x1bc>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800833a:	2b00      	cmp	r3, #0
 800833c:	d109      	bne.n	8008352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	e06f      	b.n	8008422 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008342:	4b3b      	ldr	r3, [pc, #236]	; (8008430 <HAL_RCC_ClockConfig+0x1bc>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f003 0302 	and.w	r3, r3, #2
 800834a:	2b00      	cmp	r3, #0
 800834c:	d101      	bne.n	8008352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	e067      	b.n	8008422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008352:	4b37      	ldr	r3, [pc, #220]	; (8008430 <HAL_RCC_ClockConfig+0x1bc>)
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	f023 0203 	bic.w	r2, r3, #3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	4934      	ldr	r1, [pc, #208]	; (8008430 <HAL_RCC_ClockConfig+0x1bc>)
 8008360:	4313      	orrs	r3, r2
 8008362:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008364:	f7fb f8b8 	bl	80034d8 <HAL_GetTick>
 8008368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800836a:	e00a      	b.n	8008382 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800836c:	f7fb f8b4 	bl	80034d8 <HAL_GetTick>
 8008370:	4602      	mov	r2, r0
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	f241 3288 	movw	r2, #5000	; 0x1388
 800837a:	4293      	cmp	r3, r2
 800837c:	d901      	bls.n	8008382 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800837e:	2303      	movs	r3, #3
 8008380:	e04f      	b.n	8008422 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008382:	4b2b      	ldr	r3, [pc, #172]	; (8008430 <HAL_RCC_ClockConfig+0x1bc>)
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f003 020c 	and.w	r2, r3, #12
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	429a      	cmp	r2, r3
 8008392:	d1eb      	bne.n	800836c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008394:	4b25      	ldr	r3, [pc, #148]	; (800842c <HAL_RCC_ClockConfig+0x1b8>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 0307 	and.w	r3, r3, #7
 800839c:	683a      	ldr	r2, [r7, #0]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d20c      	bcs.n	80083bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083a2:	4b22      	ldr	r3, [pc, #136]	; (800842c <HAL_RCC_ClockConfig+0x1b8>)
 80083a4:	683a      	ldr	r2, [r7, #0]
 80083a6:	b2d2      	uxtb	r2, r2
 80083a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083aa:	4b20      	ldr	r3, [pc, #128]	; (800842c <HAL_RCC_ClockConfig+0x1b8>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f003 0307 	and.w	r3, r3, #7
 80083b2:	683a      	ldr	r2, [r7, #0]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d001      	beq.n	80083bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	e032      	b.n	8008422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 0304 	and.w	r3, r3, #4
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d008      	beq.n	80083da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80083c8:	4b19      	ldr	r3, [pc, #100]	; (8008430 <HAL_RCC_ClockConfig+0x1bc>)
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	4916      	ldr	r1, [pc, #88]	; (8008430 <HAL_RCC_ClockConfig+0x1bc>)
 80083d6:	4313      	orrs	r3, r2
 80083d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 0308 	and.w	r3, r3, #8
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d009      	beq.n	80083fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80083e6:	4b12      	ldr	r3, [pc, #72]	; (8008430 <HAL_RCC_ClockConfig+0x1bc>)
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	691b      	ldr	r3, [r3, #16]
 80083f2:	00db      	lsls	r3, r3, #3
 80083f4:	490e      	ldr	r1, [pc, #56]	; (8008430 <HAL_RCC_ClockConfig+0x1bc>)
 80083f6:	4313      	orrs	r3, r2
 80083f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80083fa:	f000 f821 	bl	8008440 <HAL_RCC_GetSysClockFreq>
 80083fe:	4602      	mov	r2, r0
 8008400:	4b0b      	ldr	r3, [pc, #44]	; (8008430 <HAL_RCC_ClockConfig+0x1bc>)
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	091b      	lsrs	r3, r3, #4
 8008406:	f003 030f 	and.w	r3, r3, #15
 800840a:	490a      	ldr	r1, [pc, #40]	; (8008434 <HAL_RCC_ClockConfig+0x1c0>)
 800840c:	5ccb      	ldrb	r3, [r1, r3]
 800840e:	fa22 f303 	lsr.w	r3, r2, r3
 8008412:	4a09      	ldr	r2, [pc, #36]	; (8008438 <HAL_RCC_ClockConfig+0x1c4>)
 8008414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008416:	4b09      	ldr	r3, [pc, #36]	; (800843c <HAL_RCC_ClockConfig+0x1c8>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4618      	mov	r0, r3
 800841c:	f7fb f818 	bl	8003450 <HAL_InitTick>

  return HAL_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	40023c00 	.word	0x40023c00
 8008430:	40023800 	.word	0x40023800
 8008434:	080213c8 	.word	0x080213c8
 8008438:	2000000c 	.word	0x2000000c
 800843c:	20000010 	.word	0x20000010

08008440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008444:	b090      	sub	sp, #64	; 0x40
 8008446:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008448:	2300      	movs	r3, #0
 800844a:	637b      	str	r3, [r7, #52]	; 0x34
 800844c:	2300      	movs	r3, #0
 800844e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008450:	2300      	movs	r3, #0
 8008452:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008454:	2300      	movs	r3, #0
 8008456:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008458:	4b59      	ldr	r3, [pc, #356]	; (80085c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	f003 030c 	and.w	r3, r3, #12
 8008460:	2b08      	cmp	r3, #8
 8008462:	d00d      	beq.n	8008480 <HAL_RCC_GetSysClockFreq+0x40>
 8008464:	2b08      	cmp	r3, #8
 8008466:	f200 80a1 	bhi.w	80085ac <HAL_RCC_GetSysClockFreq+0x16c>
 800846a:	2b00      	cmp	r3, #0
 800846c:	d002      	beq.n	8008474 <HAL_RCC_GetSysClockFreq+0x34>
 800846e:	2b04      	cmp	r3, #4
 8008470:	d003      	beq.n	800847a <HAL_RCC_GetSysClockFreq+0x3a>
 8008472:	e09b      	b.n	80085ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008474:	4b53      	ldr	r3, [pc, #332]	; (80085c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8008476:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008478:	e09b      	b.n	80085b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800847a:	4b53      	ldr	r3, [pc, #332]	; (80085c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800847c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800847e:	e098      	b.n	80085b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008480:	4b4f      	ldr	r3, [pc, #316]	; (80085c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008488:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800848a:	4b4d      	ldr	r3, [pc, #308]	; (80085c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008492:	2b00      	cmp	r3, #0
 8008494:	d028      	beq.n	80084e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008496:	4b4a      	ldr	r3, [pc, #296]	; (80085c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	099b      	lsrs	r3, r3, #6
 800849c:	2200      	movs	r2, #0
 800849e:	623b      	str	r3, [r7, #32]
 80084a0:	627a      	str	r2, [r7, #36]	; 0x24
 80084a2:	6a3b      	ldr	r3, [r7, #32]
 80084a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80084a8:	2100      	movs	r1, #0
 80084aa:	4b47      	ldr	r3, [pc, #284]	; (80085c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80084ac:	fb03 f201 	mul.w	r2, r3, r1
 80084b0:	2300      	movs	r3, #0
 80084b2:	fb00 f303 	mul.w	r3, r0, r3
 80084b6:	4413      	add	r3, r2
 80084b8:	4a43      	ldr	r2, [pc, #268]	; (80085c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80084ba:	fba0 1202 	umull	r1, r2, r0, r2
 80084be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80084c0:	460a      	mov	r2, r1
 80084c2:	62ba      	str	r2, [r7, #40]	; 0x28
 80084c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084c6:	4413      	add	r3, r2
 80084c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084cc:	2200      	movs	r2, #0
 80084ce:	61bb      	str	r3, [r7, #24]
 80084d0:	61fa      	str	r2, [r7, #28]
 80084d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80084d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80084da:	f7f8 fbed 	bl	8000cb8 <__aeabi_uldivmod>
 80084de:	4602      	mov	r2, r0
 80084e0:	460b      	mov	r3, r1
 80084e2:	4613      	mov	r3, r2
 80084e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084e6:	e053      	b.n	8008590 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80084e8:	4b35      	ldr	r3, [pc, #212]	; (80085c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	099b      	lsrs	r3, r3, #6
 80084ee:	2200      	movs	r2, #0
 80084f0:	613b      	str	r3, [r7, #16]
 80084f2:	617a      	str	r2, [r7, #20]
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80084fa:	f04f 0b00 	mov.w	fp, #0
 80084fe:	4652      	mov	r2, sl
 8008500:	465b      	mov	r3, fp
 8008502:	f04f 0000 	mov.w	r0, #0
 8008506:	f04f 0100 	mov.w	r1, #0
 800850a:	0159      	lsls	r1, r3, #5
 800850c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008510:	0150      	lsls	r0, r2, #5
 8008512:	4602      	mov	r2, r0
 8008514:	460b      	mov	r3, r1
 8008516:	ebb2 080a 	subs.w	r8, r2, sl
 800851a:	eb63 090b 	sbc.w	r9, r3, fp
 800851e:	f04f 0200 	mov.w	r2, #0
 8008522:	f04f 0300 	mov.w	r3, #0
 8008526:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800852a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800852e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008532:	ebb2 0408 	subs.w	r4, r2, r8
 8008536:	eb63 0509 	sbc.w	r5, r3, r9
 800853a:	f04f 0200 	mov.w	r2, #0
 800853e:	f04f 0300 	mov.w	r3, #0
 8008542:	00eb      	lsls	r3, r5, #3
 8008544:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008548:	00e2      	lsls	r2, r4, #3
 800854a:	4614      	mov	r4, r2
 800854c:	461d      	mov	r5, r3
 800854e:	eb14 030a 	adds.w	r3, r4, sl
 8008552:	603b      	str	r3, [r7, #0]
 8008554:	eb45 030b 	adc.w	r3, r5, fp
 8008558:	607b      	str	r3, [r7, #4]
 800855a:	f04f 0200 	mov.w	r2, #0
 800855e:	f04f 0300 	mov.w	r3, #0
 8008562:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008566:	4629      	mov	r1, r5
 8008568:	028b      	lsls	r3, r1, #10
 800856a:	4621      	mov	r1, r4
 800856c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008570:	4621      	mov	r1, r4
 8008572:	028a      	lsls	r2, r1, #10
 8008574:	4610      	mov	r0, r2
 8008576:	4619      	mov	r1, r3
 8008578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800857a:	2200      	movs	r2, #0
 800857c:	60bb      	str	r3, [r7, #8]
 800857e:	60fa      	str	r2, [r7, #12]
 8008580:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008584:	f7f8 fb98 	bl	8000cb8 <__aeabi_uldivmod>
 8008588:	4602      	mov	r2, r0
 800858a:	460b      	mov	r3, r1
 800858c:	4613      	mov	r3, r2
 800858e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008590:	4b0b      	ldr	r3, [pc, #44]	; (80085c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	0c1b      	lsrs	r3, r3, #16
 8008596:	f003 0303 	and.w	r3, r3, #3
 800859a:	3301      	adds	r3, #1
 800859c:	005b      	lsls	r3, r3, #1
 800859e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80085a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80085a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80085a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80085aa:	e002      	b.n	80085b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80085ac:	4b05      	ldr	r3, [pc, #20]	; (80085c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80085ae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80085b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80085b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3740      	adds	r7, #64	; 0x40
 80085b8:	46bd      	mov	sp, r7
 80085ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085be:	bf00      	nop
 80085c0:	40023800 	.word	0x40023800
 80085c4:	00f42400 	.word	0x00f42400
 80085c8:	017d7840 	.word	0x017d7840

080085cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80085cc:	b480      	push	{r7}
 80085ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80085d0:	4b03      	ldr	r3, [pc, #12]	; (80085e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80085d2:	681b      	ldr	r3, [r3, #0]
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr
 80085de:	bf00      	nop
 80085e0:	2000000c 	.word	0x2000000c

080085e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80085e8:	f7ff fff0 	bl	80085cc <HAL_RCC_GetHCLKFreq>
 80085ec:	4602      	mov	r2, r0
 80085ee:	4b05      	ldr	r3, [pc, #20]	; (8008604 <HAL_RCC_GetPCLK1Freq+0x20>)
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	0a9b      	lsrs	r3, r3, #10
 80085f4:	f003 0307 	and.w	r3, r3, #7
 80085f8:	4903      	ldr	r1, [pc, #12]	; (8008608 <HAL_RCC_GetPCLK1Freq+0x24>)
 80085fa:	5ccb      	ldrb	r3, [r1, r3]
 80085fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008600:	4618      	mov	r0, r3
 8008602:	bd80      	pop	{r7, pc}
 8008604:	40023800 	.word	0x40023800
 8008608:	080213d8 	.word	0x080213d8

0800860c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008610:	f7ff ffdc 	bl	80085cc <HAL_RCC_GetHCLKFreq>
 8008614:	4602      	mov	r2, r0
 8008616:	4b05      	ldr	r3, [pc, #20]	; (800862c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	0b5b      	lsrs	r3, r3, #13
 800861c:	f003 0307 	and.w	r3, r3, #7
 8008620:	4903      	ldr	r1, [pc, #12]	; (8008630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008622:	5ccb      	ldrb	r3, [r1, r3]
 8008624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008628:	4618      	mov	r0, r3
 800862a:	bd80      	pop	{r7, pc}
 800862c:	40023800 	.word	0x40023800
 8008630:	080213d8 	.word	0x080213d8

08008634 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b086      	sub	sp, #24
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800863c:	2300      	movs	r3, #0
 800863e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008640:	2300      	movs	r3, #0
 8008642:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f003 0301 	and.w	r3, r3, #1
 800864c:	2b00      	cmp	r3, #0
 800864e:	d105      	bne.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008658:	2b00      	cmp	r3, #0
 800865a:	d035      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800865c:	4b67      	ldr	r3, [pc, #412]	; (80087fc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800865e:	2200      	movs	r2, #0
 8008660:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008662:	f7fa ff39 	bl	80034d8 <HAL_GetTick>
 8008666:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008668:	e008      	b.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800866a:	f7fa ff35 	bl	80034d8 <HAL_GetTick>
 800866e:	4602      	mov	r2, r0
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	1ad3      	subs	r3, r2, r3
 8008674:	2b02      	cmp	r3, #2
 8008676:	d901      	bls.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008678:	2303      	movs	r3, #3
 800867a:	e0ba      	b.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800867c:	4b60      	ldr	r3, [pc, #384]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008684:	2b00      	cmp	r3, #0
 8008686:	d1f0      	bne.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	019a      	lsls	r2, r3, #6
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	071b      	lsls	r3, r3, #28
 8008694:	495a      	ldr	r1, [pc, #360]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008696:	4313      	orrs	r3, r2
 8008698:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800869c:	4b57      	ldr	r3, [pc, #348]	; (80087fc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800869e:	2201      	movs	r2, #1
 80086a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80086a2:	f7fa ff19 	bl	80034d8 <HAL_GetTick>
 80086a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80086a8:	e008      	b.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80086aa:	f7fa ff15 	bl	80034d8 <HAL_GetTick>
 80086ae:	4602      	mov	r2, r0
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	1ad3      	subs	r3, r2, r3
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	d901      	bls.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80086b8:	2303      	movs	r3, #3
 80086ba:	e09a      	b.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80086bc:	4b50      	ldr	r3, [pc, #320]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d0f0      	beq.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 0302 	and.w	r3, r3, #2
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f000 8083 	beq.w	80087dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80086d6:	2300      	movs	r3, #0
 80086d8:	60fb      	str	r3, [r7, #12]
 80086da:	4b49      	ldr	r3, [pc, #292]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80086dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086de:	4a48      	ldr	r2, [pc, #288]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80086e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086e4:	6413      	str	r3, [r2, #64]	; 0x40
 80086e6:	4b46      	ldr	r3, [pc, #280]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80086e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086ee:	60fb      	str	r3, [r7, #12]
 80086f0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80086f2:	4b44      	ldr	r3, [pc, #272]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a43      	ldr	r2, [pc, #268]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086fc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80086fe:	f7fa feeb 	bl	80034d8 <HAL_GetTick>
 8008702:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008704:	e008      	b.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008706:	f7fa fee7 	bl	80034d8 <HAL_GetTick>
 800870a:	4602      	mov	r2, r0
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	2b02      	cmp	r3, #2
 8008712:	d901      	bls.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8008714:	2303      	movs	r3, #3
 8008716:	e06c      	b.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008718:	4b3a      	ldr	r3, [pc, #232]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008720:	2b00      	cmp	r3, #0
 8008722:	d0f0      	beq.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008724:	4b36      	ldr	r3, [pc, #216]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008728:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800872c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d02f      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800873c:	693a      	ldr	r2, [r7, #16]
 800873e:	429a      	cmp	r2, r3
 8008740:	d028      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008742:	4b2f      	ldr	r3, [pc, #188]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800874a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800874c:	4b2e      	ldr	r3, [pc, #184]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800874e:	2201      	movs	r2, #1
 8008750:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008752:	4b2d      	ldr	r3, [pc, #180]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008754:	2200      	movs	r2, #0
 8008756:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008758:	4a29      	ldr	r2, [pc, #164]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800875e:	4b28      	ldr	r3, [pc, #160]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008762:	f003 0301 	and.w	r3, r3, #1
 8008766:	2b01      	cmp	r3, #1
 8008768:	d114      	bne.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800876a:	f7fa feb5 	bl	80034d8 <HAL_GetTick>
 800876e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008770:	e00a      	b.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008772:	f7fa feb1 	bl	80034d8 <HAL_GetTick>
 8008776:	4602      	mov	r2, r0
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	1ad3      	subs	r3, r2, r3
 800877c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008780:	4293      	cmp	r3, r2
 8008782:	d901      	bls.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8008784:	2303      	movs	r3, #3
 8008786:	e034      	b.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008788:	4b1d      	ldr	r3, [pc, #116]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800878a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800878c:	f003 0302 	and.w	r3, r3, #2
 8008790:	2b00      	cmp	r3, #0
 8008792:	d0ee      	beq.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800879c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087a0:	d10d      	bne.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80087a2:	4b17      	ldr	r3, [pc, #92]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80087b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087b6:	4912      	ldr	r1, [pc, #72]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80087b8:	4313      	orrs	r3, r2
 80087ba:	608b      	str	r3, [r1, #8]
 80087bc:	e005      	b.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 80087be:	4b10      	ldr	r3, [pc, #64]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	4a0f      	ldr	r2, [pc, #60]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80087c4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80087c8:	6093      	str	r3, [r2, #8]
 80087ca:	4b0d      	ldr	r3, [pc, #52]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80087cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	68db      	ldr	r3, [r3, #12]
 80087d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087d6:	490a      	ldr	r1, [pc, #40]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80087d8:	4313      	orrs	r3, r2
 80087da:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 0308 	and.w	r3, r3, #8
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d003      	beq.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	7c1a      	ldrb	r2, [r3, #16]
 80087ec:	4b07      	ldr	r3, [pc, #28]	; (800880c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80087ee:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3718      	adds	r7, #24
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	42470068 	.word	0x42470068
 8008800:	40023800 	.word	0x40023800
 8008804:	40007000 	.word	0x40007000
 8008808:	42470e40 	.word	0x42470e40
 800880c:	424711e0 	.word	0x424711e0

08008810 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d101      	bne.n	8008826 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	e066      	b.n	80088f4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	7f5b      	ldrb	r3, [r3, #29]
 800882a:	b2db      	uxtb	r3, r3
 800882c:	2b00      	cmp	r3, #0
 800882e:	d105      	bne.n	800883c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f7fa fa0c 	bl	8002c54 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2202      	movs	r2, #2
 8008840:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	22ca      	movs	r2, #202	; 0xca
 8008848:	625a      	str	r2, [r3, #36]	; 0x24
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2253      	movs	r2, #83	; 0x53
 8008850:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 fbce 	bl	8008ff4 <RTC_EnterInitMode>
 8008858:	4603      	mov	r3, r0
 800885a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800885c:	7bfb      	ldrb	r3, [r7, #15]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d12c      	bne.n	80088bc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	6812      	ldr	r2, [r2, #0]
 800886c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008874:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	6899      	ldr	r1, [r3, #8]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	685a      	ldr	r2, [r3, #4]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	431a      	orrs	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	431a      	orrs	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	430a      	orrs	r2, r1
 8008892:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	68d2      	ldr	r2, [r2, #12]
 800889c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	6919      	ldr	r1, [r3, #16]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	041a      	lsls	r2, r3, #16
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	430a      	orrs	r2, r1
 80088b0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 fbd5 	bl	8009062 <RTC_ExitInitMode>
 80088b8:	4603      	mov	r3, r0
 80088ba:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80088bc:	7bfb      	ldrb	r3, [r7, #15]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d113      	bne.n	80088ea <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80088d0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	699a      	ldr	r2, [r3, #24]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	430a      	orrs	r2, r1
 80088e2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	22ff      	movs	r2, #255	; 0xff
 80088f0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80088f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3710      	adds	r7, #16
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80088fc:	b590      	push	{r4, r7, lr}
 80088fe:	b087      	sub	sp, #28
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008908:	2300      	movs	r3, #0
 800890a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	7f1b      	ldrb	r3, [r3, #28]
 8008910:	2b01      	cmp	r3, #1
 8008912:	d101      	bne.n	8008918 <HAL_RTC_SetTime+0x1c>
 8008914:	2302      	movs	r3, #2
 8008916:	e087      	b.n	8008a28 <HAL_RTC_SetTime+0x12c>
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2201      	movs	r2, #1
 800891c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2202      	movs	r2, #2
 8008922:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d126      	bne.n	8008978 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008934:	2b00      	cmp	r3, #0
 8008936:	d102      	bne.n	800893e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	2200      	movs	r2, #0
 800893c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	4618      	mov	r0, r3
 8008944:	f000 fbb2 	bl	80090ac <RTC_ByteToBcd2>
 8008948:	4603      	mov	r3, r0
 800894a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	785b      	ldrb	r3, [r3, #1]
 8008950:	4618      	mov	r0, r3
 8008952:	f000 fbab 	bl	80090ac <RTC_ByteToBcd2>
 8008956:	4603      	mov	r3, r0
 8008958:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800895a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	789b      	ldrb	r3, [r3, #2]
 8008960:	4618      	mov	r0, r3
 8008962:	f000 fba3 	bl	80090ac <RTC_ByteToBcd2>
 8008966:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008968:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	78db      	ldrb	r3, [r3, #3]
 8008970:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008972:	4313      	orrs	r3, r2
 8008974:	617b      	str	r3, [r7, #20]
 8008976:	e018      	b.n	80089aa <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008982:	2b00      	cmp	r3, #0
 8008984:	d102      	bne.n	800898c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	2200      	movs	r2, #0
 800898a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	785b      	ldrb	r3, [r3, #1]
 8008996:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008998:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800899a:	68ba      	ldr	r2, [r7, #8]
 800899c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800899e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	78db      	ldrb	r3, [r3, #3]
 80089a4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80089a6:	4313      	orrs	r3, r2
 80089a8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	22ca      	movs	r2, #202	; 0xca
 80089b0:	625a      	str	r2, [r3, #36]	; 0x24
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2253      	movs	r2, #83	; 0x53
 80089b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80089ba:	68f8      	ldr	r0, [r7, #12]
 80089bc:	f000 fb1a 	bl	8008ff4 <RTC_EnterInitMode>
 80089c0:	4603      	mov	r3, r0
 80089c2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80089c4:	7cfb      	ldrb	r3, [r7, #19]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d120      	bne.n	8008a0c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80089d4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80089d8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	689a      	ldr	r2, [r3, #8]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80089e8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	6899      	ldr	r1, [r3, #8]
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	68da      	ldr	r2, [r3, #12]
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	691b      	ldr	r3, [r3, #16]
 80089f8:	431a      	orrs	r2, r3
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	430a      	orrs	r2, r1
 8008a00:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008a02:	68f8      	ldr	r0, [r7, #12]
 8008a04:	f000 fb2d 	bl	8009062 <RTC_ExitInitMode>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008a0c:	7cfb      	ldrb	r3, [r7, #19]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d102      	bne.n	8008a18 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2201      	movs	r2, #1
 8008a16:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	22ff      	movs	r2, #255	; 0xff
 8008a1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2200      	movs	r2, #0
 8008a24:	771a      	strb	r2, [r3, #28]

  return status;
 8008a26:	7cfb      	ldrb	r3, [r7, #19]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	371c      	adds	r7, #28
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd90      	pop	{r4, r7, pc}

08008a30 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b086      	sub	sp, #24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008a62:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008a66:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	0c1b      	lsrs	r3, r3, #16
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a72:	b2da      	uxtb	r2, r3
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	0a1b      	lsrs	r3, r3, #8
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a82:	b2da      	uxtb	r2, r3
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a90:	b2da      	uxtb	r2, r3
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	0d9b      	lsrs	r3, r3, #22
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	f003 0301 	and.w	r3, r3, #1
 8008aa0:	b2da      	uxtb	r2, r3
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d11a      	bne.n	8008ae2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f000 fb18 	bl	80090e6 <RTC_Bcd2ToByte>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	461a      	mov	r2, r3
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	785b      	ldrb	r3, [r3, #1]
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f000 fb0f 	bl	80090e6 <RTC_Bcd2ToByte>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	461a      	mov	r2, r3
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	789b      	ldrb	r3, [r3, #2]
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f000 fb06 	bl	80090e6 <RTC_Bcd2ToByte>
 8008ada:	4603      	mov	r3, r0
 8008adc:	461a      	mov	r2, r3
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008ae2:	2300      	movs	r3, #0
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3718      	adds	r7, #24
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008aec:	b590      	push	{r4, r7, lr}
 8008aee:	b087      	sub	sp, #28
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008af8:	2300      	movs	r3, #0
 8008afa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	7f1b      	ldrb	r3, [r3, #28]
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d101      	bne.n	8008b08 <HAL_RTC_SetDate+0x1c>
 8008b04:	2302      	movs	r3, #2
 8008b06:	e071      	b.n	8008bec <HAL_RTC_SetDate+0x100>
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2202      	movs	r2, #2
 8008b12:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d10e      	bne.n	8008b38 <HAL_RTC_SetDate+0x4c>
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	785b      	ldrb	r3, [r3, #1]
 8008b1e:	f003 0310 	and.w	r3, r3, #16
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d008      	beq.n	8008b38 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	785b      	ldrb	r3, [r3, #1]
 8008b2a:	f023 0310 	bic.w	r3, r3, #16
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	330a      	adds	r3, #10
 8008b32:	b2da      	uxtb	r2, r3
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d11c      	bne.n	8008b78 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	78db      	ldrb	r3, [r3, #3]
 8008b42:	4618      	mov	r0, r3
 8008b44:	f000 fab2 	bl	80090ac <RTC_ByteToBcd2>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	785b      	ldrb	r3, [r3, #1]
 8008b50:	4618      	mov	r0, r3
 8008b52:	f000 faab 	bl	80090ac <RTC_ByteToBcd2>
 8008b56:	4603      	mov	r3, r0
 8008b58:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008b5a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	789b      	ldrb	r3, [r3, #2]
 8008b60:	4618      	mov	r0, r3
 8008b62:	f000 faa3 	bl	80090ac <RTC_ByteToBcd2>
 8008b66:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008b68:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008b72:	4313      	orrs	r3, r2
 8008b74:	617b      	str	r3, [r7, #20]
 8008b76:	e00e      	b.n	8008b96 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	78db      	ldrb	r3, [r3, #3]
 8008b7c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	785b      	ldrb	r3, [r3, #1]
 8008b82:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008b84:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008b8a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008b92:	4313      	orrs	r3, r2
 8008b94:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	22ca      	movs	r2, #202	; 0xca
 8008b9c:	625a      	str	r2, [r3, #36]	; 0x24
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2253      	movs	r2, #83	; 0x53
 8008ba4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008ba6:	68f8      	ldr	r0, [r7, #12]
 8008ba8:	f000 fa24 	bl	8008ff4 <RTC_EnterInitMode>
 8008bac:	4603      	mov	r3, r0
 8008bae:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008bb0:	7cfb      	ldrb	r3, [r7, #19]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d10c      	bne.n	8008bd0 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008bc0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008bc4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f000 fa4b 	bl	8009062 <RTC_ExitInitMode>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008bd0:	7cfb      	ldrb	r3, [r7, #19]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d102      	bne.n	8008bdc <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	22ff      	movs	r2, #255	; 0xff
 8008be2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2200      	movs	r2, #0
 8008be8:	771a      	strb	r2, [r3, #28]

  return status;
 8008bea:	7cfb      	ldrb	r3, [r7, #19]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	371c      	adds	r7, #28
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd90      	pop	{r4, r7, pc}

08008bf4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b086      	sub	sp, #24
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008c00:	2300      	movs	r3, #0
 8008c02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008c0e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008c12:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	0c1b      	lsrs	r3, r3, #16
 8008c18:	b2da      	uxtb	r2, r3
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	0a1b      	lsrs	r3, r3, #8
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	f003 031f 	and.w	r3, r3, #31
 8008c28:	b2da      	uxtb	r2, r3
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c36:	b2da      	uxtb	r2, r3
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	0b5b      	lsrs	r3, r3, #13
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	f003 0307 	and.w	r3, r3, #7
 8008c46:	b2da      	uxtb	r2, r3
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d11a      	bne.n	8008c88 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	78db      	ldrb	r3, [r3, #3]
 8008c56:	4618      	mov	r0, r3
 8008c58:	f000 fa45 	bl	80090e6 <RTC_Bcd2ToByte>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	461a      	mov	r2, r3
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	785b      	ldrb	r3, [r3, #1]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f000 fa3c 	bl	80090e6 <RTC_Bcd2ToByte>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	461a      	mov	r2, r3
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	789b      	ldrb	r3, [r3, #2]
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f000 fa33 	bl	80090e6 <RTC_Bcd2ToByte>
 8008c80:	4603      	mov	r3, r0
 8008c82:	461a      	mov	r2, r3
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008c88:	2300      	movs	r3, #0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3718      	adds	r7, #24
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
	...

08008c94 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008c94:	b590      	push	{r4, r7, lr}
 8008c96:	b089      	sub	sp, #36	; 0x24
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	60f8      	str	r0, [r7, #12]
 8008c9c:	60b9      	str	r1, [r7, #8]
 8008c9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8008ca0:	4b9a      	ldr	r3, [pc, #616]	; (8008f0c <HAL_RTC_SetAlarm_IT+0x278>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a9a      	ldr	r2, [pc, #616]	; (8008f10 <HAL_RTC_SetAlarm_IT+0x27c>)
 8008ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8008caa:	0adb      	lsrs	r3, r3, #11
 8008cac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008cb0:	fb02 f303 	mul.w	r3, r2, r3
 8008cb4:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	7f1b      	ldrb	r3, [r3, #28]
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d101      	bne.n	8008cca <HAL_RTC_SetAlarm_IT+0x36>
 8008cc6:	2302      	movs	r3, #2
 8008cc8:	e11c      	b.n	8008f04 <HAL_RTC_SetAlarm_IT+0x270>
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2202      	movs	r2, #2
 8008cd4:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d137      	bne.n	8008d4c <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d102      	bne.n	8008cf0 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	2200      	movs	r2, #0
 8008cee:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f000 f9d9 	bl	80090ac <RTC_ByteToBcd2>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	785b      	ldrb	r3, [r3, #1]
 8008d02:	4618      	mov	r0, r3
 8008d04:	f000 f9d2 	bl	80090ac <RTC_ByteToBcd2>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008d0c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	789b      	ldrb	r3, [r3, #2]
 8008d12:	4618      	mov	r0, r3
 8008d14:	f000 f9ca 	bl	80090ac <RTC_ByteToBcd2>
 8008d18:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008d1a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	78db      	ldrb	r3, [r3, #3]
 8008d22:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008d24:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f000 f9bc 	bl	80090ac <RTC_ByteToBcd2>
 8008d34:	4603      	mov	r3, r0
 8008d36:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008d38:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008d40:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008d46:	4313      	orrs	r3, r2
 8008d48:	61fb      	str	r3, [r7, #28]
 8008d4a:	e023      	b.n	8008d94 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d102      	bne.n	8008d60 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	785b      	ldrb	r3, [r3, #1]
 8008d6a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008d6c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008d6e:	68ba      	ldr	r2, [r7, #8]
 8008d70:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008d72:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	78db      	ldrb	r3, [r3, #3]
 8008d78:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008d7a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d82:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008d84:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008d8a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008d90:	4313      	orrs	r3, r2
 8008d92:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	22ca      	movs	r2, #202	; 0xca
 8008da6:	625a      	str	r2, [r3, #36]	; 0x24
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2253      	movs	r2, #83	; 0x53
 8008dae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008db8:	d141      	bne.n	8008e3e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	689a      	ldr	r2, [r3, #8]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008dc8:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	b2da      	uxtb	r2, r3
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008dda:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	1e5a      	subs	r2, r3, #1
 8008de0:	617a      	str	r2, [r7, #20]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d10b      	bne.n	8008dfe <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	22ff      	movs	r2, #255	; 0xff
 8008dec:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2203      	movs	r2, #3
 8008df2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2200      	movs	r2, #0
 8008df8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008dfa:	2303      	movs	r3, #3
 8008dfc:	e082      	b.n	8008f04 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	f003 0301 	and.w	r3, r3, #1
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d0e7      	beq.n	8008ddc <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	69fa      	ldr	r2, [r7, #28]
 8008e12:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	69ba      	ldr	r2, [r7, #24]
 8008e1a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	689a      	ldr	r2, [r3, #8]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e2a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	689a      	ldr	r2, [r3, #8]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008e3a:	609a      	str	r2, [r3, #8]
 8008e3c:	e04b      	b.n	8008ed6 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	689a      	ldr	r2, [r3, #8]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008e4c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	b2da      	uxtb	r2, r3
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008e5e:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8008e60:	4b2a      	ldr	r3, [pc, #168]	; (8008f0c <HAL_RTC_SetAlarm_IT+0x278>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a2a      	ldr	r2, [pc, #168]	; (8008f10 <HAL_RTC_SetAlarm_IT+0x27c>)
 8008e66:	fba2 2303 	umull	r2, r3, r2, r3
 8008e6a:	0adb      	lsrs	r3, r3, #11
 8008e6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008e70:	fb02 f303 	mul.w	r3, r2, r3
 8008e74:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	1e5a      	subs	r2, r3, #1
 8008e7a:	617a      	str	r2, [r7, #20]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d10b      	bne.n	8008e98 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	22ff      	movs	r2, #255	; 0xff
 8008e86:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2203      	movs	r2, #3
 8008e8c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2200      	movs	r2, #0
 8008e92:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008e94:	2303      	movs	r3, #3
 8008e96:	e035      	b.n	8008f04 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	f003 0302 	and.w	r3, r3, #2
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d0e7      	beq.n	8008e76 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	69fa      	ldr	r2, [r7, #28]
 8008eac:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	69ba      	ldr	r2, [r7, #24]
 8008eb4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	689a      	ldr	r2, [r3, #8]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ec4:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	689a      	ldr	r2, [r3, #8]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ed4:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8008ed6:	4b0f      	ldr	r3, [pc, #60]	; (8008f14 <HAL_RTC_SetAlarm_IT+0x280>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a0e      	ldr	r2, [pc, #56]	; (8008f14 <HAL_RTC_SetAlarm_IT+0x280>)
 8008edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ee0:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8008ee2:	4b0c      	ldr	r3, [pc, #48]	; (8008f14 <HAL_RTC_SetAlarm_IT+0x280>)
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	4a0b      	ldr	r2, [pc, #44]	; (8008f14 <HAL_RTC_SetAlarm_IT+0x280>)
 8008ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008eec:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	22ff      	movs	r2, #255	; 0xff
 8008ef4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2201      	movs	r2, #1
 8008efa:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2200      	movs	r2, #0
 8008f00:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3724      	adds	r7, #36	; 0x24
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd90      	pop	{r4, r7, pc}
 8008f0c:	2000000c 	.word	0x2000000c
 8008f10:	10624dd3 	.word	0x10624dd3
 8008f14:	40013c00 	.word	0x40013c00

08008f18 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d012      	beq.n	8008f54 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d00b      	beq.n	8008f54 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f7f9 fd59 	bl	80029f4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	b2da      	uxtb	r2, r3
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008f52:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d012      	beq.n	8008f88 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d00b      	beq.n	8008f88 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 f8d4 	bl	800911e <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	b2da      	uxtb	r2, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008f86:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8008f88:	4b05      	ldr	r3, [pc, #20]	; (8008fa0 <HAL_RTC_AlarmIRQHandler+0x88>)
 8008f8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008f8e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	775a      	strb	r2, [r3, #29]
}
 8008f96:	bf00      	nop
 8008f98:	3708      	adds	r7, #8
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	40013c00 	.word	0x40013c00

08008fa4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008fac:	2300      	movs	r3, #0
 8008fae:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	68da      	ldr	r2, [r3, #12]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008fbe:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008fc0:	f7fa fa8a 	bl	80034d8 <HAL_GetTick>
 8008fc4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008fc6:	e009      	b.n	8008fdc <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008fc8:	f7fa fa86 	bl	80034d8 <HAL_GetTick>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	1ad3      	subs	r3, r2, r3
 8008fd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008fd6:	d901      	bls.n	8008fdc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008fd8:	2303      	movs	r3, #3
 8008fda:	e007      	b.n	8008fec <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	f003 0320 	and.w	r3, r3, #32
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d0ee      	beq.n	8008fc8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008fea:	2300      	movs	r3, #0
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009000:	2300      	movs	r3, #0
 8009002:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800900e:	2b00      	cmp	r3, #0
 8009010:	d122      	bne.n	8009058 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68da      	ldr	r2, [r3, #12]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009020:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009022:	f7fa fa59 	bl	80034d8 <HAL_GetTick>
 8009026:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009028:	e00c      	b.n	8009044 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800902a:	f7fa fa55 	bl	80034d8 <HAL_GetTick>
 800902e:	4602      	mov	r2, r0
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	1ad3      	subs	r3, r2, r3
 8009034:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009038:	d904      	bls.n	8009044 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2204      	movs	r2, #4
 800903e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800904e:	2b00      	cmp	r3, #0
 8009050:	d102      	bne.n	8009058 <RTC_EnterInitMode+0x64>
 8009052:	7bfb      	ldrb	r3, [r7, #15]
 8009054:	2b01      	cmp	r3, #1
 8009056:	d1e8      	bne.n	800902a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009058:	7bfb      	ldrb	r3, [r7, #15]
}
 800905a:	4618      	mov	r0, r3
 800905c:	3710      	adds	r7, #16
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b084      	sub	sp, #16
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800906a:	2300      	movs	r3, #0
 800906c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	68da      	ldr	r2, [r3, #12]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800907c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	f003 0320 	and.w	r3, r3, #32
 8009088:	2b00      	cmp	r3, #0
 800908a:	d10a      	bne.n	80090a2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f7ff ff89 	bl	8008fa4 <HAL_RTC_WaitForSynchro>
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d004      	beq.n	80090a2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2204      	movs	r2, #4
 800909c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800909e:	2301      	movs	r3, #1
 80090a0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80090a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3710      	adds	r7, #16
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b085      	sub	sp, #20
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	4603      	mov	r3, r0
 80090b4:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80090b6:	2300      	movs	r3, #0
 80090b8:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80090ba:	e005      	b.n	80090c8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80090bc:	7bfb      	ldrb	r3, [r7, #15]
 80090be:	3301      	adds	r3, #1
 80090c0:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80090c2:	79fb      	ldrb	r3, [r7, #7]
 80090c4:	3b0a      	subs	r3, #10
 80090c6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80090c8:	79fb      	ldrb	r3, [r7, #7]
 80090ca:	2b09      	cmp	r3, #9
 80090cc:	d8f6      	bhi.n	80090bc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80090ce:	7bfb      	ldrb	r3, [r7, #15]
 80090d0:	011b      	lsls	r3, r3, #4
 80090d2:	b2da      	uxtb	r2, r3
 80090d4:	79fb      	ldrb	r3, [r7, #7]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	b2db      	uxtb	r3, r3
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3714      	adds	r7, #20
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr

080090e6 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80090e6:	b480      	push	{r7}
 80090e8:	b085      	sub	sp, #20
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	4603      	mov	r3, r0
 80090ee:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80090f0:	2300      	movs	r3, #0
 80090f2:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80090f4:	79fb      	ldrb	r3, [r7, #7]
 80090f6:	091b      	lsrs	r3, r3, #4
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	461a      	mov	r2, r3
 80090fc:	0092      	lsls	r2, r2, #2
 80090fe:	4413      	add	r3, r2
 8009100:	005b      	lsls	r3, r3, #1
 8009102:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8009104:	79fb      	ldrb	r3, [r7, #7]
 8009106:	f003 030f 	and.w	r3, r3, #15
 800910a:	b2da      	uxtb	r2, r3
 800910c:	7bfb      	ldrb	r3, [r7, #15]
 800910e:	4413      	add	r3, r2
 8009110:	b2db      	uxtb	r3, r3
}
 8009112:	4618      	mov	r0, r3
 8009114:	3714      	adds	r7, #20
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr

0800911e <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800911e:	b480      	push	{r7}
 8009120:	b083      	sub	sp, #12
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8009126:	bf00      	nop
 8009128:	370c      	adds	r7, #12
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr

08009132 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b082      	sub	sp, #8
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d101      	bne.n	8009144 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009140:	2301      	movs	r3, #1
 8009142:	e022      	b.n	800918a <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800914a:	b2db      	uxtb	r3, r3
 800914c:	2b00      	cmp	r3, #0
 800914e:	d105      	bne.n	800915c <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f7f9 fdb0 	bl	8002cbc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2203      	movs	r2, #3
 8009160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 f815 	bl	8009194 <HAL_SD_InitCard>
 800916a:	4603      	mov	r3, r0
 800916c:	2b00      	cmp	r3, #0
 800916e:	d001      	beq.n	8009174 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	e00a      	b.n	800918a <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009188:	2300      	movs	r3, #0
}
 800918a:	4618      	mov	r0, r3
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
	...

08009194 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009194:	b5b0      	push	{r4, r5, r7, lr}
 8009196:	b08e      	sub	sp, #56	; 0x38
 8009198:	af04      	add	r7, sp, #16
 800919a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800919c:	2300      	movs	r3, #0
 800919e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80091a0:	2300      	movs	r3, #0
 80091a2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80091a4:	2300      	movs	r3, #0
 80091a6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80091a8:	2300      	movs	r3, #0
 80091aa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80091ac:	2300      	movs	r3, #0
 80091ae:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80091b0:	2376      	movs	r3, #118	; 0x76
 80091b2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681d      	ldr	r5, [r3, #0]
 80091b8:	466c      	mov	r4, sp
 80091ba:	f107 0314 	add.w	r3, r7, #20
 80091be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80091c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80091c6:	f107 0308 	add.w	r3, r7, #8
 80091ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80091cc:	4628      	mov	r0, r5
 80091ce:	f003 f8cf 	bl	800c370 <SDIO_Init>
 80091d2:	4603      	mov	r3, r0
 80091d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80091d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d001      	beq.n	80091e4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80091e0:	2301      	movs	r3, #1
 80091e2:	e04f      	b.n	8009284 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80091e4:	4b29      	ldr	r3, [pc, #164]	; (800928c <HAL_SD_InitCard+0xf8>)
 80091e6:	2200      	movs	r2, #0
 80091e8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4618      	mov	r0, r3
 80091f0:	f003 f907 	bl	800c402 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80091f4:	4b25      	ldr	r3, [pc, #148]	; (800928c <HAL_SD_InitCard+0xf8>)
 80091f6:	2201      	movs	r2, #1
 80091f8:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80091fa:	2002      	movs	r0, #2
 80091fc:	f7fa f978 	bl	80034f0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 fe69 	bl	8009ed8 <SD_PowerON>
 8009206:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009208:	6a3b      	ldr	r3, [r7, #32]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d00b      	beq.n	8009226 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2201      	movs	r2, #1
 8009212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800921a:	6a3b      	ldr	r3, [r7, #32]
 800921c:	431a      	orrs	r2, r3
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009222:	2301      	movs	r3, #1
 8009224:	e02e      	b.n	8009284 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 fd88 	bl	8009d3c <SD_InitCard>
 800922c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800922e:	6a3b      	ldr	r3, [r7, #32]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d00b      	beq.n	800924c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2201      	movs	r2, #1
 8009238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009240:	6a3b      	ldr	r3, [r7, #32]
 8009242:	431a      	orrs	r2, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	e01b      	b.n	8009284 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009254:	4618      	mov	r0, r3
 8009256:	f003 f966 	bl	800c526 <SDMMC_CmdBlockLength>
 800925a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800925c:	6a3b      	ldr	r3, [r7, #32]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d00f      	beq.n	8009282 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a0a      	ldr	r2, [pc, #40]	; (8009290 <HAL_SD_InitCard+0xfc>)
 8009268:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800926e:	6a3b      	ldr	r3, [r7, #32]
 8009270:	431a      	orrs	r2, r3
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2201      	movs	r2, #1
 800927a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	e000      	b.n	8009284 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8009282:	2300      	movs	r3, #0
}
 8009284:	4618      	mov	r0, r3
 8009286:	3728      	adds	r7, #40	; 0x28
 8009288:	46bd      	mov	sp, r7
 800928a:	bdb0      	pop	{r4, r5, r7, pc}
 800928c:	422580a0 	.word	0x422580a0
 8009290:	004005ff 	.word	0x004005ff

08009294 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b092      	sub	sp, #72	; 0x48
 8009298:	af00      	add	r7, sp, #0
 800929a:	60f8      	str	r0, [r7, #12]
 800929c:	60b9      	str	r1, [r7, #8]
 800929e:	607a      	str	r2, [r7, #4]
 80092a0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80092a2:	f7fa f919 	bl	80034d8 <HAL_GetTick>
 80092a6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d107      	bne.n	80092c6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80092c2:	2301      	movs	r3, #1
 80092c4:	e1bd      	b.n	8009642 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	f040 81b0 	bne.w	8009634 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2200      	movs	r2, #0
 80092d8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80092da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	441a      	add	r2, r3
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d907      	bls.n	80092f8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ec:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80092f4:	2301      	movs	r3, #1
 80092f6:	e1a4      	b.n	8009642 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2203      	movs	r2, #3
 80092fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2200      	movs	r2, #0
 8009306:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800930c:	2b01      	cmp	r3, #1
 800930e:	d002      	beq.n	8009316 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8009310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009312:	025b      	lsls	r3, r3, #9
 8009314:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009316:	f04f 33ff 	mov.w	r3, #4294967295
 800931a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	025b      	lsls	r3, r3, #9
 8009320:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009322:	2390      	movs	r3, #144	; 0x90
 8009324:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009326:	2302      	movs	r3, #2
 8009328:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800932a:	2300      	movs	r3, #0
 800932c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800932e:	2301      	movs	r3, #1
 8009330:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f107 0214 	add.w	r2, r7, #20
 800933a:	4611      	mov	r1, r2
 800933c:	4618      	mov	r0, r3
 800933e:	f003 f8c6 	bl	800c4ce <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	2b01      	cmp	r3, #1
 8009346:	d90a      	bls.n	800935e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2202      	movs	r2, #2
 800934c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009354:	4618      	mov	r0, r3
 8009356:	f003 f92a 	bl	800c5ae <SDMMC_CmdReadMultiBlock>
 800935a:	6478      	str	r0, [r7, #68]	; 0x44
 800935c:	e009      	b.n	8009372 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2201      	movs	r2, #1
 8009362:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800936a:	4618      	mov	r0, r3
 800936c:	f003 f8fd 	bl	800c56a <SDMMC_CmdReadSingleBlock>
 8009370:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009372:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009374:	2b00      	cmp	r3, #0
 8009376:	d012      	beq.n	800939e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a7a      	ldr	r2, [pc, #488]	; (8009568 <HAL_SD_ReadBlocks+0x2d4>)
 800937e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009386:	431a      	orrs	r2, r3
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2201      	movs	r2, #1
 8009390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2200      	movs	r2, #0
 8009398:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	e151      	b.n	8009642 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80093a2:	e061      	b.n	8009468 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d03c      	beq.n	800942c <HAL_SD_ReadBlocks+0x198>
 80093b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d039      	beq.n	800942c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80093b8:	2300      	movs	r3, #0
 80093ba:	643b      	str	r3, [r7, #64]	; 0x40
 80093bc:	e033      	b.n	8009426 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4618      	mov	r0, r3
 80093c4:	f002 ffff 	bl	800c3c6 <SDIO_ReadFIFO>
 80093c8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80093ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093cc:	b2da      	uxtb	r2, r3
 80093ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80093d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d4:	3301      	adds	r3, #1
 80093d6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80093d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093da:	3b01      	subs	r3, #1
 80093dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80093de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e0:	0a1b      	lsrs	r3, r3, #8
 80093e2:	b2da      	uxtb	r2, r3
 80093e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093e6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80093e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ea:	3301      	adds	r3, #1
 80093ec:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80093ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093f0:	3b01      	subs	r3, #1
 80093f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80093f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f6:	0c1b      	lsrs	r3, r3, #16
 80093f8:	b2da      	uxtb	r2, r3
 80093fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093fc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80093fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009400:	3301      	adds	r3, #1
 8009402:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009406:	3b01      	subs	r3, #1
 8009408:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800940a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800940c:	0e1b      	lsrs	r3, r3, #24
 800940e:	b2da      	uxtb	r2, r3
 8009410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009412:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009416:	3301      	adds	r3, #1
 8009418:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800941a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800941c:	3b01      	subs	r3, #1
 800941e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8009420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009422:	3301      	adds	r3, #1
 8009424:	643b      	str	r3, [r7, #64]	; 0x40
 8009426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009428:	2b07      	cmp	r3, #7
 800942a:	d9c8      	bls.n	80093be <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800942c:	f7fa f854 	bl	80034d8 <HAL_GetTick>
 8009430:	4602      	mov	r2, r0
 8009432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009434:	1ad3      	subs	r3, r2, r3
 8009436:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009438:	429a      	cmp	r2, r3
 800943a:	d902      	bls.n	8009442 <HAL_SD_ReadBlocks+0x1ae>
 800943c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800943e:	2b00      	cmp	r3, #0
 8009440:	d112      	bne.n	8009468 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a48      	ldr	r2, [pc, #288]	; (8009568 <HAL_SD_ReadBlocks+0x2d4>)
 8009448:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800944e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2201      	movs	r2, #1
 800945a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2200      	movs	r2, #0
 8009462:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009464:	2303      	movs	r3, #3
 8009466:	e0ec      	b.n	8009642 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800946e:	f240 332a 	movw	r3, #810	; 0x32a
 8009472:	4013      	ands	r3, r2
 8009474:	2b00      	cmp	r3, #0
 8009476:	d095      	beq.n	80093a4 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800947e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009482:	2b00      	cmp	r3, #0
 8009484:	d022      	beq.n	80094cc <HAL_SD_ReadBlocks+0x238>
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	2b01      	cmp	r3, #1
 800948a:	d91f      	bls.n	80094cc <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009490:	2b03      	cmp	r3, #3
 8009492:	d01b      	beq.n	80094cc <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4618      	mov	r0, r3
 800949a:	f003 f8ef 	bl	800c67c <SDMMC_CmdStopTransfer>
 800949e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80094a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d012      	beq.n	80094cc <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a2f      	ldr	r2, [pc, #188]	; (8009568 <HAL_SD_ReadBlocks+0x2d4>)
 80094ac:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094b4:	431a      	orrs	r2, r3
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2201      	movs	r2, #1
 80094be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2200      	movs	r2, #0
 80094c6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	e0ba      	b.n	8009642 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094d2:	f003 0308 	and.w	r3, r3, #8
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d012      	beq.n	8009500 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a22      	ldr	r2, [pc, #136]	; (8009568 <HAL_SD_ReadBlocks+0x2d4>)
 80094e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e6:	f043 0208 	orr.w	r2, r3, #8
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2201      	movs	r2, #1
 80094f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2200      	movs	r2, #0
 80094fa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80094fc:	2301      	movs	r3, #1
 80094fe:	e0a0      	b.n	8009642 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009506:	f003 0302 	and.w	r3, r3, #2
 800950a:	2b00      	cmp	r3, #0
 800950c:	d012      	beq.n	8009534 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a15      	ldr	r2, [pc, #84]	; (8009568 <HAL_SD_ReadBlocks+0x2d4>)
 8009514:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800951a:	f043 0202 	orr.w	r2, r3, #2
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2201      	movs	r2, #1
 8009526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2200      	movs	r2, #0
 800952e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009530:	2301      	movs	r3, #1
 8009532:	e086      	b.n	8009642 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800953a:	f003 0320 	and.w	r3, r3, #32
 800953e:	2b00      	cmp	r3, #0
 8009540:	d063      	beq.n	800960a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a08      	ldr	r2, [pc, #32]	; (8009568 <HAL_SD_ReadBlocks+0x2d4>)
 8009548:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800954e:	f043 0220 	orr.w	r2, r3, #32
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2201      	movs	r2, #1
 800955a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2200      	movs	r2, #0
 8009562:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009564:	2301      	movs	r3, #1
 8009566:	e06c      	b.n	8009642 <HAL_SD_ReadBlocks+0x3ae>
 8009568:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4618      	mov	r0, r3
 8009572:	f002 ff28 	bl	800c3c6 <SDIO_ReadFIFO>
 8009576:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8009578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800957a:	b2da      	uxtb	r2, r3
 800957c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800957e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009582:	3301      	adds	r3, #1
 8009584:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009588:	3b01      	subs	r3, #1
 800958a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800958c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800958e:	0a1b      	lsrs	r3, r3, #8
 8009590:	b2da      	uxtb	r2, r3
 8009592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009594:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009598:	3301      	adds	r3, #1
 800959a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800959c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800959e:	3b01      	subs	r3, #1
 80095a0:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80095a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a4:	0c1b      	lsrs	r3, r3, #16
 80095a6:	b2da      	uxtb	r2, r3
 80095a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095aa:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80095ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ae:	3301      	adds	r3, #1
 80095b0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80095b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095b4:	3b01      	subs	r3, #1
 80095b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80095b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ba:	0e1b      	lsrs	r3, r3, #24
 80095bc:	b2da      	uxtb	r2, r3
 80095be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80095c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c4:	3301      	adds	r3, #1
 80095c6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80095c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ca:	3b01      	subs	r3, #1
 80095cc:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80095ce:	f7f9 ff83 	bl	80034d8 <HAL_GetTick>
 80095d2:	4602      	mov	r2, r0
 80095d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d6:	1ad3      	subs	r3, r2, r3
 80095d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80095da:	429a      	cmp	r2, r3
 80095dc:	d902      	bls.n	80095e4 <HAL_SD_ReadBlocks+0x350>
 80095de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d112      	bne.n	800960a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a18      	ldr	r2, [pc, #96]	; (800964c <HAL_SD_ReadBlocks+0x3b8>)
 80095ea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2201      	movs	r2, #1
 80095fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2200      	movs	r2, #0
 8009604:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8009606:	2301      	movs	r3, #1
 8009608:	e01b      	b.n	8009642 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009614:	2b00      	cmp	r3, #0
 8009616:	d002      	beq.n	800961e <HAL_SD_ReadBlocks+0x38a>
 8009618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800961a:	2b00      	cmp	r3, #0
 800961c:	d1a6      	bne.n	800956c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f240 523a 	movw	r2, #1338	; 0x53a
 8009626:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2201      	movs	r2, #1
 800962c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009630:	2300      	movs	r3, #0
 8009632:	e006      	b.n	8009642 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009638:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009640:	2301      	movs	r3, #1
  }
}
 8009642:	4618      	mov	r0, r3
 8009644:	3748      	adds	r7, #72	; 0x48
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	004005ff 	.word	0x004005ff

08009650 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b092      	sub	sp, #72	; 0x48
 8009654:	af00      	add	r7, sp, #0
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	60b9      	str	r1, [r7, #8]
 800965a:	607a      	str	r2, [r7, #4]
 800965c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800965e:	f7f9 ff3b 	bl	80034d8 <HAL_GetTick>
 8009662:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d107      	bne.n	8009682 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009676:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	e166      	b.n	8009950 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009688:	b2db      	uxtb	r3, r3
 800968a:	2b01      	cmp	r3, #1
 800968c:	f040 8159 	bne.w	8009942 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2200      	movs	r2, #0
 8009694:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009696:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	441a      	add	r2, r3
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d907      	bls.n	80096b4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80096b0:	2301      	movs	r3, #1
 80096b2:	e14d      	b.n	8009950 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2203      	movs	r2, #3
 80096b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2200      	movs	r2, #0
 80096c2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d002      	beq.n	80096d2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80096cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ce:	025b      	lsls	r3, r3, #9
 80096d0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80096d2:	f04f 33ff 	mov.w	r3, #4294967295
 80096d6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	025b      	lsls	r3, r3, #9
 80096dc:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80096de:	2390      	movs	r3, #144	; 0x90
 80096e0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80096e2:	2300      	movs	r3, #0
 80096e4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80096e6:	2300      	movs	r3, #0
 80096e8:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80096ea:	2301      	movs	r3, #1
 80096ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f107 0218 	add.w	r2, r7, #24
 80096f6:	4611      	mov	r1, r2
 80096f8:	4618      	mov	r0, r3
 80096fa:	f002 fee8 	bl	800c4ce <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	2b01      	cmp	r3, #1
 8009702:	d90a      	bls.n	800971a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2220      	movs	r2, #32
 8009708:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009710:	4618      	mov	r0, r3
 8009712:	f002 ff90 	bl	800c636 <SDMMC_CmdWriteMultiBlock>
 8009716:	6478      	str	r0, [r7, #68]	; 0x44
 8009718:	e009      	b.n	800972e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2210      	movs	r2, #16
 800971e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009726:	4618      	mov	r0, r3
 8009728:	f002 ff63 	bl	800c5f2 <SDMMC_CmdWriteSingleBlock>
 800972c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800972e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009730:	2b00      	cmp	r3, #0
 8009732:	d012      	beq.n	800975a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a87      	ldr	r2, [pc, #540]	; (8009958 <HAL_SD_WriteBlocks+0x308>)
 800973a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009742:	431a      	orrs	r2, r3
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2200      	movs	r2, #0
 8009754:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	e0fa      	b.n	8009950 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800975a:	69fb      	ldr	r3, [r7, #28]
 800975c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800975e:	e065      	b.n	800982c <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800976a:	2b00      	cmp	r3, #0
 800976c:	d040      	beq.n	80097f0 <HAL_SD_WriteBlocks+0x1a0>
 800976e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009770:	2b00      	cmp	r3, #0
 8009772:	d03d      	beq.n	80097f0 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8009774:	2300      	movs	r3, #0
 8009776:	643b      	str	r3, [r7, #64]	; 0x40
 8009778:	e037      	b.n	80097ea <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800977a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009782:	3301      	adds	r3, #1
 8009784:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009788:	3b01      	subs	r3, #1
 800978a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800978c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	021a      	lsls	r2, r3, #8
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	4313      	orrs	r3, r2
 8009796:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800979a:	3301      	adds	r3, #1
 800979c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800979e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097a0:	3b01      	subs	r3, #1
 80097a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80097a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	041a      	lsls	r2, r3, #16
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	4313      	orrs	r3, r2
 80097ae:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80097b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097b2:	3301      	adds	r3, #1
 80097b4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80097b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097b8:	3b01      	subs	r3, #1
 80097ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80097bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	061a      	lsls	r2, r3, #24
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	4313      	orrs	r3, r2
 80097c6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80097c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ca:	3301      	adds	r3, #1
 80097cc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80097ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097d0:	3b01      	subs	r3, #1
 80097d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f107 0214 	add.w	r2, r7, #20
 80097dc:	4611      	mov	r1, r2
 80097de:	4618      	mov	r0, r3
 80097e0:	f002 fdfe 	bl	800c3e0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80097e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097e6:	3301      	adds	r3, #1
 80097e8:	643b      	str	r3, [r7, #64]	; 0x40
 80097ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097ec:	2b07      	cmp	r3, #7
 80097ee:	d9c4      	bls.n	800977a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80097f0:	f7f9 fe72 	bl	80034d8 <HAL_GetTick>
 80097f4:	4602      	mov	r2, r0
 80097f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f8:	1ad3      	subs	r3, r2, r3
 80097fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d902      	bls.n	8009806 <HAL_SD_WriteBlocks+0x1b6>
 8009800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009802:	2b00      	cmp	r3, #0
 8009804:	d112      	bne.n	800982c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a53      	ldr	r2, [pc, #332]	; (8009958 <HAL_SD_WriteBlocks+0x308>)
 800980c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009814:	431a      	orrs	r2, r3
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2201      	movs	r2, #1
 800981e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2200      	movs	r2, #0
 8009826:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009828:	2303      	movs	r3, #3
 800982a:	e091      	b.n	8009950 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009832:	f240 331a 	movw	r3, #794	; 0x31a
 8009836:	4013      	ands	r3, r2
 8009838:	2b00      	cmp	r3, #0
 800983a:	d091      	beq.n	8009760 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009846:	2b00      	cmp	r3, #0
 8009848:	d022      	beq.n	8009890 <HAL_SD_WriteBlocks+0x240>
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	2b01      	cmp	r3, #1
 800984e:	d91f      	bls.n	8009890 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009854:	2b03      	cmp	r3, #3
 8009856:	d01b      	beq.n	8009890 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4618      	mov	r0, r3
 800985e:	f002 ff0d 	bl	800c67c <SDMMC_CmdStopTransfer>
 8009862:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009866:	2b00      	cmp	r3, #0
 8009868:	d012      	beq.n	8009890 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a3a      	ldr	r2, [pc, #232]	; (8009958 <HAL_SD_WriteBlocks+0x308>)
 8009870:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009876:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009878:	431a      	orrs	r2, r3
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2201      	movs	r2, #1
 8009882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2200      	movs	r2, #0
 800988a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800988c:	2301      	movs	r3, #1
 800988e:	e05f      	b.n	8009950 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009896:	f003 0308 	and.w	r3, r3, #8
 800989a:	2b00      	cmp	r3, #0
 800989c:	d012      	beq.n	80098c4 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a2d      	ldr	r2, [pc, #180]	; (8009958 <HAL_SD_WriteBlocks+0x308>)
 80098a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098aa:	f043 0208 	orr.w	r2, r3, #8
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2201      	movs	r2, #1
 80098b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2200      	movs	r2, #0
 80098be:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80098c0:	2301      	movs	r3, #1
 80098c2:	e045      	b.n	8009950 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ca:	f003 0302 	and.w	r3, r3, #2
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d012      	beq.n	80098f8 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a20      	ldr	r2, [pc, #128]	; (8009958 <HAL_SD_WriteBlocks+0x308>)
 80098d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098de:	f043 0202 	orr.w	r2, r3, #2
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2201      	movs	r2, #1
 80098ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2200      	movs	r2, #0
 80098f2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80098f4:	2301      	movs	r3, #1
 80098f6:	e02b      	b.n	8009950 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098fe:	f003 0310 	and.w	r3, r3, #16
 8009902:	2b00      	cmp	r3, #0
 8009904:	d012      	beq.n	800992c <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a13      	ldr	r2, [pc, #76]	; (8009958 <HAL_SD_WriteBlocks+0x308>)
 800990c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009912:	f043 0210 	orr.w	r2, r3, #16
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2201      	movs	r2, #1
 800991e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2200      	movs	r2, #0
 8009926:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009928:	2301      	movs	r3, #1
 800992a:	e011      	b.n	8009950 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f240 523a 	movw	r2, #1338	; 0x53a
 8009934:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2201      	movs	r2, #1
 800993a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800993e:	2300      	movs	r3, #0
 8009940:	e006      	b.n	8009950 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009946:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800994e:	2301      	movs	r3, #1
  }
}
 8009950:	4618      	mov	r0, r3
 8009952:	3748      	adds	r7, #72	; 0x48
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}
 8009958:	004005ff 	.word	0x004005ff

0800995c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800996a:	0f9b      	lsrs	r3, r3, #30
 800996c:	b2da      	uxtb	r2, r3
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009976:	0e9b      	lsrs	r3, r3, #26
 8009978:	b2db      	uxtb	r3, r3
 800997a:	f003 030f 	and.w	r3, r3, #15
 800997e:	b2da      	uxtb	r2, r3
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009988:	0e1b      	lsrs	r3, r3, #24
 800998a:	b2db      	uxtb	r3, r3
 800998c:	f003 0303 	and.w	r3, r3, #3
 8009990:	b2da      	uxtb	r2, r3
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800999a:	0c1b      	lsrs	r3, r3, #16
 800999c:	b2da      	uxtb	r2, r3
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099a6:	0a1b      	lsrs	r3, r3, #8
 80099a8:	b2da      	uxtb	r2, r3
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099b2:	b2da      	uxtb	r2, r3
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099bc:	0d1b      	lsrs	r3, r3, #20
 80099be:	b29a      	uxth	r2, r3
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099c8:	0c1b      	lsrs	r3, r3, #16
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	f003 030f 	and.w	r3, r3, #15
 80099d0:	b2da      	uxtb	r2, r3
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099da:	0bdb      	lsrs	r3, r3, #15
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	f003 0301 	and.w	r3, r3, #1
 80099e2:	b2da      	uxtb	r2, r3
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099ec:	0b9b      	lsrs	r3, r3, #14
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	f003 0301 	and.w	r3, r3, #1
 80099f4:	b2da      	uxtb	r2, r3
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099fe:	0b5b      	lsrs	r3, r3, #13
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	f003 0301 	and.w	r3, r3, #1
 8009a06:	b2da      	uxtb	r2, r3
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a10:	0b1b      	lsrs	r3, r3, #12
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	f003 0301 	and.w	r3, r3, #1
 8009a18:	b2da      	uxtb	r2, r3
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	2200      	movs	r2, #0
 8009a22:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d163      	bne.n	8009af4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a30:	009a      	lsls	r2, r3, #2
 8009a32:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009a36:	4013      	ands	r3, r2
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009a3c:	0f92      	lsrs	r2, r2, #30
 8009a3e:	431a      	orrs	r2, r3
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a48:	0edb      	lsrs	r3, r3, #27
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	f003 0307 	and.w	r3, r3, #7
 8009a50:	b2da      	uxtb	r2, r3
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a5a:	0e1b      	lsrs	r3, r3, #24
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	f003 0307 	and.w	r3, r3, #7
 8009a62:	b2da      	uxtb	r2, r3
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a6c:	0d5b      	lsrs	r3, r3, #21
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	f003 0307 	and.w	r3, r3, #7
 8009a74:	b2da      	uxtb	r2, r3
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a7e:	0c9b      	lsrs	r3, r3, #18
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	f003 0307 	and.w	r3, r3, #7
 8009a86:	b2da      	uxtb	r2, r3
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a90:	0bdb      	lsrs	r3, r3, #15
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	f003 0307 	and.w	r3, r3, #7
 8009a98:	b2da      	uxtb	r2, r3
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	691b      	ldr	r3, [r3, #16]
 8009aa2:	1c5a      	adds	r2, r3, #1
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	7e1b      	ldrb	r3, [r3, #24]
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	f003 0307 	and.w	r3, r3, #7
 8009ab2:	3302      	adds	r3, #2
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009abe:	fb03 f202 	mul.w	r2, r3, r2
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	7a1b      	ldrb	r3, [r3, #8]
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	f003 030f 	and.w	r3, r3, #15
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	409a      	lsls	r2, r3
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009ae0:	0a52      	lsrs	r2, r2, #9
 8009ae2:	fb03 f202 	mul.w	r2, r3, r2
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009af0:	661a      	str	r2, [r3, #96]	; 0x60
 8009af2:	e031      	b.n	8009b58 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d11d      	bne.n	8009b38 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b00:	041b      	lsls	r3, r3, #16
 8009b02:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b0a:	0c1b      	lsrs	r3, r3, #16
 8009b0c:	431a      	orrs	r2, r3
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	691b      	ldr	r3, [r3, #16]
 8009b16:	3301      	adds	r3, #1
 8009b18:	029a      	lsls	r2, r3, #10
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b2c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	661a      	str	r2, [r3, #96]	; 0x60
 8009b36:	e00f      	b.n	8009b58 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a58      	ldr	r2, [pc, #352]	; (8009ca0 <HAL_SD_GetCardCSD+0x344>)
 8009b3e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b44:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	e09d      	b.n	8009c94 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b5c:	0b9b      	lsrs	r3, r3, #14
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	f003 0301 	and.w	r3, r3, #1
 8009b64:	b2da      	uxtb	r2, r3
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b6e:	09db      	lsrs	r3, r3, #7
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b76:	b2da      	uxtb	r2, r3
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b86:	b2da      	uxtb	r2, r3
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b90:	0fdb      	lsrs	r3, r3, #31
 8009b92:	b2da      	uxtb	r2, r3
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b9c:	0f5b      	lsrs	r3, r3, #29
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	f003 0303 	and.w	r3, r3, #3
 8009ba4:	b2da      	uxtb	r2, r3
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bae:	0e9b      	lsrs	r3, r3, #26
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	f003 0307 	and.w	r3, r3, #7
 8009bb6:	b2da      	uxtb	r2, r3
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bc0:	0d9b      	lsrs	r3, r3, #22
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	f003 030f 	and.w	r3, r3, #15
 8009bc8:	b2da      	uxtb	r2, r3
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bd2:	0d5b      	lsrs	r3, r3, #21
 8009bd4:	b2db      	uxtb	r3, r3
 8009bd6:	f003 0301 	and.w	r3, r3, #1
 8009bda:	b2da      	uxtb	r2, r3
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	2200      	movs	r2, #0
 8009be6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bee:	0c1b      	lsrs	r3, r3, #16
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	f003 0301 	and.w	r3, r3, #1
 8009bf6:	b2da      	uxtb	r2, r3
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c02:	0bdb      	lsrs	r3, r3, #15
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	f003 0301 	and.w	r3, r3, #1
 8009c0a:	b2da      	uxtb	r2, r3
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c16:	0b9b      	lsrs	r3, r3, #14
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	f003 0301 	and.w	r3, r3, #1
 8009c1e:	b2da      	uxtb	r2, r3
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c2a:	0b5b      	lsrs	r3, r3, #13
 8009c2c:	b2db      	uxtb	r3, r3
 8009c2e:	f003 0301 	and.w	r3, r3, #1
 8009c32:	b2da      	uxtb	r2, r3
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c3e:	0b1b      	lsrs	r3, r3, #12
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	f003 0301 	and.w	r3, r3, #1
 8009c46:	b2da      	uxtb	r2, r3
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c52:	0a9b      	lsrs	r3, r3, #10
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	f003 0303 	and.w	r3, r3, #3
 8009c5a:	b2da      	uxtb	r2, r3
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c66:	0a1b      	lsrs	r3, r3, #8
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	f003 0303 	and.w	r3, r3, #3
 8009c6e:	b2da      	uxtb	r2, r3
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c7a:	085b      	lsrs	r3, r3, #1
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c82:	b2da      	uxtb	r2, r3
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009c92:	2300      	movs	r3, #0
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr
 8009ca0:	004005ff 	.word	0x004005ff

08009ca4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009cee:	2300      	movs	r3, #0
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	370c      	adds	r7, #12
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b086      	sub	sp, #24
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009d04:	2300      	movs	r3, #0
 8009d06:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009d08:	f107 030c 	add.w	r3, r7, #12
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 f970 	bl	8009ff4 <SD_SendStatus>
 8009d14:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d005      	beq.n	8009d28 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	431a      	orrs	r2, r3
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	0a5b      	lsrs	r3, r3, #9
 8009d2c:	f003 030f 	and.w	r3, r3, #15
 8009d30:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009d32:	693b      	ldr	r3, [r7, #16]
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3718      	adds	r7, #24
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009d3c:	b5b0      	push	{r4, r5, r7, lr}
 8009d3e:	b094      	sub	sp, #80	; 0x50
 8009d40:	af04      	add	r7, sp, #16
 8009d42:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009d44:	2301      	movs	r3, #1
 8009d46:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f002 fb66 	bl	800c41e <SDIO_GetPowerState>
 8009d52:	4603      	mov	r3, r0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d102      	bne.n	8009d5e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009d58:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009d5c:	e0b8      	b.n	8009ed0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d62:	2b03      	cmp	r3, #3
 8009d64:	d02f      	beq.n	8009dc6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f002 fd4d 	bl	800c80a <SDMMC_CmdSendCID>
 8009d70:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d001      	beq.n	8009d7c <SD_InitCard+0x40>
    {
      return errorstate;
 8009d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d7a:	e0a9      	b.n	8009ed0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	2100      	movs	r1, #0
 8009d82:	4618      	mov	r0, r3
 8009d84:	f002 fb90 	bl	800c4a8 <SDIO_GetResponse>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	2104      	movs	r1, #4
 8009d94:	4618      	mov	r0, r3
 8009d96:	f002 fb87 	bl	800c4a8 <SDIO_GetResponse>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	2108      	movs	r1, #8
 8009da6:	4618      	mov	r0, r3
 8009da8:	f002 fb7e 	bl	800c4a8 <SDIO_GetResponse>
 8009dac:	4602      	mov	r2, r0
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	210c      	movs	r1, #12
 8009db8:	4618      	mov	r0, r3
 8009dba:	f002 fb75 	bl	800c4a8 <SDIO_GetResponse>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dca:	2b03      	cmp	r3, #3
 8009dcc:	d00d      	beq.n	8009dea <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f107 020e 	add.w	r2, r7, #14
 8009dd6:	4611      	mov	r1, r2
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f002 fd53 	bl	800c884 <SDMMC_CmdSetRelAdd>
 8009dde:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d001      	beq.n	8009dea <SD_InitCard+0xae>
    {
      return errorstate;
 8009de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009de8:	e072      	b.n	8009ed0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dee:	2b03      	cmp	r3, #3
 8009df0:	d036      	beq.n	8009e60 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009df2:	89fb      	ldrh	r3, [r7, #14]
 8009df4:	461a      	mov	r2, r3
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e02:	041b      	lsls	r3, r3, #16
 8009e04:	4619      	mov	r1, r3
 8009e06:	4610      	mov	r0, r2
 8009e08:	f002 fd1d 	bl	800c846 <SDMMC_CmdSendCSD>
 8009e0c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d001      	beq.n	8009e18 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e16:	e05b      	b.n	8009ed0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	2100      	movs	r1, #0
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f002 fb42 	bl	800c4a8 <SDIO_GetResponse>
 8009e24:	4602      	mov	r2, r0
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2104      	movs	r1, #4
 8009e30:	4618      	mov	r0, r3
 8009e32:	f002 fb39 	bl	800c4a8 <SDIO_GetResponse>
 8009e36:	4602      	mov	r2, r0
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2108      	movs	r1, #8
 8009e42:	4618      	mov	r0, r3
 8009e44:	f002 fb30 	bl	800c4a8 <SDIO_GetResponse>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	210c      	movs	r1, #12
 8009e54:	4618      	mov	r0, r3
 8009e56:	f002 fb27 	bl	800c4a8 <SDIO_GetResponse>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	2104      	movs	r1, #4
 8009e66:	4618      	mov	r0, r3
 8009e68:	f002 fb1e 	bl	800c4a8 <SDIO_GetResponse>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	0d1a      	lsrs	r2, r3, #20
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009e74:	f107 0310 	add.w	r3, r7, #16
 8009e78:	4619      	mov	r1, r3
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f7ff fd6e 	bl	800995c <HAL_SD_GetCardCSD>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d002      	beq.n	8009e8c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009e86:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009e8a:	e021      	b.n	8009ed0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6819      	ldr	r1, [r3, #0]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e94:	041b      	lsls	r3, r3, #16
 8009e96:	2200      	movs	r2, #0
 8009e98:	461c      	mov	r4, r3
 8009e9a:	4615      	mov	r5, r2
 8009e9c:	4622      	mov	r2, r4
 8009e9e:	462b      	mov	r3, r5
 8009ea0:	4608      	mov	r0, r1
 8009ea2:	f002 fc0d 	bl	800c6c0 <SDMMC_CmdSelDesel>
 8009ea6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d001      	beq.n	8009eb2 <SD_InitCard+0x176>
  {
    return errorstate;
 8009eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eb0:	e00e      	b.n	8009ed0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681d      	ldr	r5, [r3, #0]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	466c      	mov	r4, sp
 8009eba:	f103 0210 	add.w	r2, r3, #16
 8009ebe:	ca07      	ldmia	r2, {r0, r1, r2}
 8009ec0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009ec4:	3304      	adds	r3, #4
 8009ec6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009ec8:	4628      	mov	r0, r5
 8009eca:	f002 fa51 	bl	800c370 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009ece:	2300      	movs	r3, #0
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3740      	adds	r7, #64	; 0x40
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bdb0      	pop	{r4, r5, r7, pc}

08009ed8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b086      	sub	sp, #24
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	617b      	str	r3, [r7, #20]
 8009ee8:	2300      	movs	r3, #0
 8009eea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f002 fc08 	bl	800c706 <SDMMC_CmdGoIdleState>
 8009ef6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d001      	beq.n	8009f02 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	e072      	b.n	8009fe8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4618      	mov	r0, r3
 8009f08:	f002 fc1b 	bl	800c742 <SDMMC_CmdOperCond>
 8009f0c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d00d      	beq.n	8009f30 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f002 fbf1 	bl	800c706 <SDMMC_CmdGoIdleState>
 8009f24:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d004      	beq.n	8009f36 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	e05b      	b.n	8009fe8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2201      	movs	r2, #1
 8009f34:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d137      	bne.n	8009fae <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2100      	movs	r1, #0
 8009f44:	4618      	mov	r0, r3
 8009f46:	f002 fc1b 	bl	800c780 <SDMMC_CmdAppCommand>
 8009f4a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d02d      	beq.n	8009fae <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009f52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009f56:	e047      	b.n	8009fe8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2100      	movs	r1, #0
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f002 fc0e 	bl	800c780 <SDMMC_CmdAppCommand>
 8009f64:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d001      	beq.n	8009f70 <SD_PowerON+0x98>
    {
      return errorstate;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	e03b      	b.n	8009fe8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	491e      	ldr	r1, [pc, #120]	; (8009ff0 <SD_PowerON+0x118>)
 8009f76:	4618      	mov	r0, r3
 8009f78:	f002 fc24 	bl	800c7c4 <SDMMC_CmdAppOperCommand>
 8009f7c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d002      	beq.n	8009f8a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009f84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009f88:	e02e      	b.n	8009fe8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2100      	movs	r1, #0
 8009f90:	4618      	mov	r0, r3
 8009f92:	f002 fa89 	bl	800c4a8 <SDIO_GetResponse>
 8009f96:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	0fdb      	lsrs	r3, r3, #31
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d101      	bne.n	8009fa4 <SD_PowerON+0xcc>
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	e000      	b.n	8009fa6 <SD_PowerON+0xce>
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	613b      	str	r3, [r7, #16]

    count++;
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	3301      	adds	r3, #1
 8009fac:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d802      	bhi.n	8009fbe <SD_PowerON+0xe6>
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d0cc      	beq.n	8009f58 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d902      	bls.n	8009fce <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009fc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009fcc:	e00c      	b.n	8009fe8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d003      	beq.n	8009fe0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	645a      	str	r2, [r3, #68]	; 0x44
 8009fde:	e002      	b.n	8009fe6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009fe6:	2300      	movs	r3, #0
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3718      	adds	r7, #24
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	c1100000 	.word	0xc1100000

08009ff4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d102      	bne.n	800a00a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a004:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a008:	e018      	b.n	800a03c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a012:	041b      	lsls	r3, r3, #16
 800a014:	4619      	mov	r1, r3
 800a016:	4610      	mov	r0, r2
 800a018:	f002 fc55 	bl	800c8c6 <SDMMC_CmdSendStatus>
 800a01c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d001      	beq.n	800a028 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	e009      	b.n	800a03c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	2100      	movs	r1, #0
 800a02e:	4618      	mov	r0, r3
 800a030:	f002 fa3a 	bl	800c4a8 <SDIO_GetResponse>
 800a034:	4602      	mov	r2, r0
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a03a:	2300      	movs	r3, #0
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3710      	adds	r7, #16
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d101      	bne.n	800a056 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a052:	2301      	movs	r3, #1
 800a054:	e041      	b.n	800a0da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d106      	bne.n	800a070 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f7f8 fe8e 	bl	8002d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2202      	movs	r2, #2
 800a074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	3304      	adds	r3, #4
 800a080:	4619      	mov	r1, r3
 800a082:	4610      	mov	r0, r2
 800a084:	f000 fd30 	bl	800aae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2201      	movs	r2, #1
 800a08c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2201      	movs	r2, #1
 800a094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2201      	movs	r2, #1
 800a09c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3708      	adds	r7, #8
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}

0800a0e2 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 800a0e2:	b580      	push	{r7, lr}
 800a0e4:	b082      	sub	sp, #8
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2202      	movs	r2, #2
 800a0ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	6a1a      	ldr	r2, [r3, #32]
 800a0f8:	f241 1311 	movw	r3, #4369	; 0x1111
 800a0fc:	4013      	ands	r3, r2
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d10f      	bne.n	800a122 <HAL_TIM_Base_DeInit+0x40>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	6a1a      	ldr	r2, [r3, #32]
 800a108:	f240 4344 	movw	r3, #1092	; 0x444
 800a10c:	4013      	ands	r3, r2
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d107      	bne.n	800a122 <HAL_TIM_Base_DeInit+0x40>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f022 0201 	bic.w	r2, r2, #1
 800a120:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f7f8 fef2 	bl	8002f0c <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2200      	movs	r2, #0
 800a134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2200      	movs	r2, #0
 800a144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2200      	movs	r2, #0
 800a14c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2200      	movs	r2, #0
 800a15c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2200      	movs	r2, #0
 800a164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2200      	movs	r2, #0
 800a174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2200      	movs	r2, #0
 800a17c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3708      	adds	r7, #8
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
	...

0800a18c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b085      	sub	sp, #20
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d001      	beq.n	800a1a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	e03c      	b.n	800a21e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2202      	movs	r2, #2
 800a1a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a1e      	ldr	r2, [pc, #120]	; (800a22c <HAL_TIM_Base_Start+0xa0>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d018      	beq.n	800a1e8 <HAL_TIM_Base_Start+0x5c>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1be:	d013      	beq.n	800a1e8 <HAL_TIM_Base_Start+0x5c>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a1a      	ldr	r2, [pc, #104]	; (800a230 <HAL_TIM_Base_Start+0xa4>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d00e      	beq.n	800a1e8 <HAL_TIM_Base_Start+0x5c>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a19      	ldr	r2, [pc, #100]	; (800a234 <HAL_TIM_Base_Start+0xa8>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d009      	beq.n	800a1e8 <HAL_TIM_Base_Start+0x5c>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a17      	ldr	r2, [pc, #92]	; (800a238 <HAL_TIM_Base_Start+0xac>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d004      	beq.n	800a1e8 <HAL_TIM_Base_Start+0x5c>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a16      	ldr	r2, [pc, #88]	; (800a23c <HAL_TIM_Base_Start+0xb0>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d111      	bne.n	800a20c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	689b      	ldr	r3, [r3, #8]
 800a1ee:	f003 0307 	and.w	r3, r3, #7
 800a1f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2b06      	cmp	r3, #6
 800a1f8:	d010      	beq.n	800a21c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	681a      	ldr	r2, [r3, #0]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f042 0201 	orr.w	r2, r2, #1
 800a208:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a20a:	e007      	b.n	800a21c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f042 0201 	orr.w	r2, r2, #1
 800a21a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a21c:	2300      	movs	r3, #0
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3714      	adds	r7, #20
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr
 800a22a:	bf00      	nop
 800a22c:	40010000 	.word	0x40010000
 800a230:	40000400 	.word	0x40000400
 800a234:	40000800 	.word	0x40000800
 800a238:	40000c00 	.word	0x40000c00
 800a23c:	40014000 	.word	0x40014000

0800a240 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a240:	b480      	push	{r7}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a24e:	b2db      	uxtb	r3, r3
 800a250:	2b01      	cmp	r3, #1
 800a252:	d001      	beq.n	800a258 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a254:	2301      	movs	r3, #1
 800a256:	e044      	b.n	800a2e2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2202      	movs	r2, #2
 800a25c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	68da      	ldr	r2, [r3, #12]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f042 0201 	orr.w	r2, r2, #1
 800a26e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a1e      	ldr	r2, [pc, #120]	; (800a2f0 <HAL_TIM_Base_Start_IT+0xb0>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d018      	beq.n	800a2ac <HAL_TIM_Base_Start_IT+0x6c>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a282:	d013      	beq.n	800a2ac <HAL_TIM_Base_Start_IT+0x6c>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a1a      	ldr	r2, [pc, #104]	; (800a2f4 <HAL_TIM_Base_Start_IT+0xb4>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d00e      	beq.n	800a2ac <HAL_TIM_Base_Start_IT+0x6c>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4a19      	ldr	r2, [pc, #100]	; (800a2f8 <HAL_TIM_Base_Start_IT+0xb8>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d009      	beq.n	800a2ac <HAL_TIM_Base_Start_IT+0x6c>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a17      	ldr	r2, [pc, #92]	; (800a2fc <HAL_TIM_Base_Start_IT+0xbc>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d004      	beq.n	800a2ac <HAL_TIM_Base_Start_IT+0x6c>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a16      	ldr	r2, [pc, #88]	; (800a300 <HAL_TIM_Base_Start_IT+0xc0>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d111      	bne.n	800a2d0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	f003 0307 	and.w	r3, r3, #7
 800a2b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2b06      	cmp	r3, #6
 800a2bc:	d010      	beq.n	800a2e0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f042 0201 	orr.w	r2, r2, #1
 800a2cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2ce:	e007      	b.n	800a2e0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f042 0201 	orr.w	r2, r2, #1
 800a2de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a2e0:	2300      	movs	r3, #0
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3714      	adds	r7, #20
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop
 800a2f0:	40010000 	.word	0x40010000
 800a2f4:	40000400 	.word	0x40000400
 800a2f8:	40000800 	.word	0x40000800
 800a2fc:	40000c00 	.word	0x40000c00
 800a300:	40014000 	.word	0x40014000

0800a304 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a304:	b480      	push	{r7}
 800a306:	b083      	sub	sp, #12
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	68da      	ldr	r2, [r3, #12]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f022 0201 	bic.w	r2, r2, #1
 800a31a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	6a1a      	ldr	r2, [r3, #32]
 800a322:	f241 1311 	movw	r3, #4369	; 0x1111
 800a326:	4013      	ands	r3, r2
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d10f      	bne.n	800a34c <HAL_TIM_Base_Stop_IT+0x48>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	6a1a      	ldr	r2, [r3, #32]
 800a332:	f240 4344 	movw	r3, #1092	; 0x444
 800a336:	4013      	ands	r3, r2
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d107      	bne.n	800a34c <HAL_TIM_Base_Stop_IT+0x48>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f022 0201 	bic.w	r2, r2, #1
 800a34a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2201      	movs	r2, #1
 800a350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a354:	2300      	movs	r3, #0
}
 800a356:	4618      	mov	r0, r3
 800a358:	370c      	adds	r7, #12
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr

0800a362 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b082      	sub	sp, #8
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d101      	bne.n	800a374 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a370:	2301      	movs	r3, #1
 800a372:	e041      	b.n	800a3f8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a37a:	b2db      	uxtb	r3, r3
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d106      	bne.n	800a38e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 f839 	bl	800a400 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2202      	movs	r2, #2
 800a392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	3304      	adds	r3, #4
 800a39e:	4619      	mov	r1, r3
 800a3a0:	4610      	mov	r0, r2
 800a3a2:	f000 fba1 	bl	800aae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2201      	movs	r2, #1
 800a3da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a3f6:	2300      	movs	r3, #0
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3708      	adds	r7, #8
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a400:	b480      	push	{r7}
 800a402:	b083      	sub	sp, #12
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a408:	bf00      	nop
 800a40a:	370c      	adds	r7, #12
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d109      	bne.n	800a438 <HAL_TIM_PWM_Start+0x24>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	bf14      	ite	ne
 800a430:	2301      	movne	r3, #1
 800a432:	2300      	moveq	r3, #0
 800a434:	b2db      	uxtb	r3, r3
 800a436:	e022      	b.n	800a47e <HAL_TIM_PWM_Start+0x6a>
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	2b04      	cmp	r3, #4
 800a43c:	d109      	bne.n	800a452 <HAL_TIM_PWM_Start+0x3e>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a444:	b2db      	uxtb	r3, r3
 800a446:	2b01      	cmp	r3, #1
 800a448:	bf14      	ite	ne
 800a44a:	2301      	movne	r3, #1
 800a44c:	2300      	moveq	r3, #0
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	e015      	b.n	800a47e <HAL_TIM_PWM_Start+0x6a>
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	2b08      	cmp	r3, #8
 800a456:	d109      	bne.n	800a46c <HAL_TIM_PWM_Start+0x58>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	2b01      	cmp	r3, #1
 800a462:	bf14      	ite	ne
 800a464:	2301      	movne	r3, #1
 800a466:	2300      	moveq	r3, #0
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	e008      	b.n	800a47e <HAL_TIM_PWM_Start+0x6a>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a472:	b2db      	uxtb	r3, r3
 800a474:	2b01      	cmp	r3, #1
 800a476:	bf14      	ite	ne
 800a478:	2301      	movne	r3, #1
 800a47a:	2300      	moveq	r3, #0
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d001      	beq.n	800a486 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a482:	2301      	movs	r3, #1
 800a484:	e068      	b.n	800a558 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d104      	bne.n	800a496 <HAL_TIM_PWM_Start+0x82>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2202      	movs	r2, #2
 800a490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a494:	e013      	b.n	800a4be <HAL_TIM_PWM_Start+0xaa>
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	2b04      	cmp	r3, #4
 800a49a:	d104      	bne.n	800a4a6 <HAL_TIM_PWM_Start+0x92>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2202      	movs	r2, #2
 800a4a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a4a4:	e00b      	b.n	800a4be <HAL_TIM_PWM_Start+0xaa>
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	2b08      	cmp	r3, #8
 800a4aa:	d104      	bne.n	800a4b6 <HAL_TIM_PWM_Start+0xa2>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2202      	movs	r2, #2
 800a4b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a4b4:	e003      	b.n	800a4be <HAL_TIM_PWM_Start+0xaa>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2202      	movs	r2, #2
 800a4ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	6839      	ldr	r1, [r7, #0]
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f000 fdb4 	bl	800b034 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4a23      	ldr	r2, [pc, #140]	; (800a560 <HAL_TIM_PWM_Start+0x14c>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d107      	bne.n	800a4e6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a4e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a1d      	ldr	r2, [pc, #116]	; (800a560 <HAL_TIM_PWM_Start+0x14c>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d018      	beq.n	800a522 <HAL_TIM_PWM_Start+0x10e>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4f8:	d013      	beq.n	800a522 <HAL_TIM_PWM_Start+0x10e>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4a19      	ldr	r2, [pc, #100]	; (800a564 <HAL_TIM_PWM_Start+0x150>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d00e      	beq.n	800a522 <HAL_TIM_PWM_Start+0x10e>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4a17      	ldr	r2, [pc, #92]	; (800a568 <HAL_TIM_PWM_Start+0x154>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d009      	beq.n	800a522 <HAL_TIM_PWM_Start+0x10e>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4a16      	ldr	r2, [pc, #88]	; (800a56c <HAL_TIM_PWM_Start+0x158>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d004      	beq.n	800a522 <HAL_TIM_PWM_Start+0x10e>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4a14      	ldr	r2, [pc, #80]	; (800a570 <HAL_TIM_PWM_Start+0x15c>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d111      	bne.n	800a546 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	689b      	ldr	r3, [r3, #8]
 800a528:	f003 0307 	and.w	r3, r3, #7
 800a52c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2b06      	cmp	r3, #6
 800a532:	d010      	beq.n	800a556 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f042 0201 	orr.w	r2, r2, #1
 800a542:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a544:	e007      	b.n	800a556 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f042 0201 	orr.w	r2, r2, #1
 800a554:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a556:	2300      	movs	r3, #0
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3710      	adds	r7, #16
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	40010000 	.word	0x40010000
 800a564:	40000400 	.word	0x40000400
 800a568:	40000800 	.word	0x40000800
 800a56c:	40000c00 	.word	0x40000c00
 800a570:	40014000 	.word	0x40014000

0800a574 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	691b      	ldr	r3, [r3, #16]
 800a582:	f003 0302 	and.w	r3, r3, #2
 800a586:	2b02      	cmp	r3, #2
 800a588:	d122      	bne.n	800a5d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	68db      	ldr	r3, [r3, #12]
 800a590:	f003 0302 	and.w	r3, r3, #2
 800a594:	2b02      	cmp	r3, #2
 800a596:	d11b      	bne.n	800a5d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f06f 0202 	mvn.w	r2, #2
 800a5a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	699b      	ldr	r3, [r3, #24]
 800a5ae:	f003 0303 	and.w	r3, r3, #3
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d003      	beq.n	800a5be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 fa77 	bl	800aaaa <HAL_TIM_IC_CaptureCallback>
 800a5bc:	e005      	b.n	800a5ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 fa69 	bl	800aa96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 fa7a 	bl	800aabe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	691b      	ldr	r3, [r3, #16]
 800a5d6:	f003 0304 	and.w	r3, r3, #4
 800a5da:	2b04      	cmp	r3, #4
 800a5dc:	d122      	bne.n	800a624 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	68db      	ldr	r3, [r3, #12]
 800a5e4:	f003 0304 	and.w	r3, r3, #4
 800a5e8:	2b04      	cmp	r3, #4
 800a5ea:	d11b      	bne.n	800a624 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f06f 0204 	mvn.w	r2, #4
 800a5f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2202      	movs	r2, #2
 800a5fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	699b      	ldr	r3, [r3, #24]
 800a602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a606:	2b00      	cmp	r3, #0
 800a608:	d003      	beq.n	800a612 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 fa4d 	bl	800aaaa <HAL_TIM_IC_CaptureCallback>
 800a610:	e005      	b.n	800a61e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 fa3f 	bl	800aa96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f000 fa50 	bl	800aabe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	691b      	ldr	r3, [r3, #16]
 800a62a:	f003 0308 	and.w	r3, r3, #8
 800a62e:	2b08      	cmp	r3, #8
 800a630:	d122      	bne.n	800a678 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	68db      	ldr	r3, [r3, #12]
 800a638:	f003 0308 	and.w	r3, r3, #8
 800a63c:	2b08      	cmp	r3, #8
 800a63e:	d11b      	bne.n	800a678 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f06f 0208 	mvn.w	r2, #8
 800a648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2204      	movs	r2, #4
 800a64e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	69db      	ldr	r3, [r3, #28]
 800a656:	f003 0303 	and.w	r3, r3, #3
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d003      	beq.n	800a666 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 fa23 	bl	800aaaa <HAL_TIM_IC_CaptureCallback>
 800a664:	e005      	b.n	800a672 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f000 fa15 	bl	800aa96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 fa26 	bl	800aabe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2200      	movs	r2, #0
 800a676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	691b      	ldr	r3, [r3, #16]
 800a67e:	f003 0310 	and.w	r3, r3, #16
 800a682:	2b10      	cmp	r3, #16
 800a684:	d122      	bne.n	800a6cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	68db      	ldr	r3, [r3, #12]
 800a68c:	f003 0310 	and.w	r3, r3, #16
 800a690:	2b10      	cmp	r3, #16
 800a692:	d11b      	bne.n	800a6cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f06f 0210 	mvn.w	r2, #16
 800a69c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2208      	movs	r2, #8
 800a6a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	69db      	ldr	r3, [r3, #28]
 800a6aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d003      	beq.n	800a6ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f000 f9f9 	bl	800aaaa <HAL_TIM_IC_CaptureCallback>
 800a6b8:	e005      	b.n	800a6c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 f9eb 	bl	800aa96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f000 f9fc 	bl	800aabe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	691b      	ldr	r3, [r3, #16]
 800a6d2:	f003 0301 	and.w	r3, r3, #1
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d10e      	bne.n	800a6f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	f003 0301 	and.w	r3, r3, #1
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d107      	bne.n	800a6f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f06f 0201 	mvn.w	r2, #1
 800a6f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f7f8 f93a 	bl	800296c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	691b      	ldr	r3, [r3, #16]
 800a6fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a702:	2b80      	cmp	r3, #128	; 0x80
 800a704:	d10e      	bne.n	800a724 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	68db      	ldr	r3, [r3, #12]
 800a70c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a710:	2b80      	cmp	r3, #128	; 0x80
 800a712:	d107      	bne.n	800a724 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a71c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f000 fd26 	bl	800b170 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	691b      	ldr	r3, [r3, #16]
 800a72a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a72e:	2b40      	cmp	r3, #64	; 0x40
 800a730:	d10e      	bne.n	800a750 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a73c:	2b40      	cmp	r3, #64	; 0x40
 800a73e:	d107      	bne.n	800a750 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f000 f9c1 	bl	800aad2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	691b      	ldr	r3, [r3, #16]
 800a756:	f003 0320 	and.w	r3, r3, #32
 800a75a:	2b20      	cmp	r3, #32
 800a75c:	d10e      	bne.n	800a77c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	f003 0320 	and.w	r3, r3, #32
 800a768:	2b20      	cmp	r3, #32
 800a76a:	d107      	bne.n	800a77c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f06f 0220 	mvn.w	r2, #32
 800a774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 fcf0 	bl	800b15c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a77c:	bf00      	nop
 800a77e:	3708      	adds	r7, #8
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b086      	sub	sp, #24
 800a788:	af00      	add	r7, sp, #0
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	60b9      	str	r1, [r7, #8]
 800a78e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a790:	2300      	movs	r3, #0
 800a792:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d101      	bne.n	800a7a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a79e:	2302      	movs	r3, #2
 800a7a0:	e0ae      	b.n	800a900 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2201      	movs	r2, #1
 800a7a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2b0c      	cmp	r3, #12
 800a7ae:	f200 809f 	bhi.w	800a8f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a7b2:	a201      	add	r2, pc, #4	; (adr r2, 800a7b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a7b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b8:	0800a7ed 	.word	0x0800a7ed
 800a7bc:	0800a8f1 	.word	0x0800a8f1
 800a7c0:	0800a8f1 	.word	0x0800a8f1
 800a7c4:	0800a8f1 	.word	0x0800a8f1
 800a7c8:	0800a82d 	.word	0x0800a82d
 800a7cc:	0800a8f1 	.word	0x0800a8f1
 800a7d0:	0800a8f1 	.word	0x0800a8f1
 800a7d4:	0800a8f1 	.word	0x0800a8f1
 800a7d8:	0800a86f 	.word	0x0800a86f
 800a7dc:	0800a8f1 	.word	0x0800a8f1
 800a7e0:	0800a8f1 	.word	0x0800a8f1
 800a7e4:	0800a8f1 	.word	0x0800a8f1
 800a7e8:	0800a8af 	.word	0x0800a8af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	68b9      	ldr	r1, [r7, #8]
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f000 f9f8 	bl	800abe8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	699a      	ldr	r2, [r3, #24]
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f042 0208 	orr.w	r2, r2, #8
 800a806:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	699a      	ldr	r2, [r3, #24]
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f022 0204 	bic.w	r2, r2, #4
 800a816:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	6999      	ldr	r1, [r3, #24]
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	691a      	ldr	r2, [r3, #16]
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	430a      	orrs	r2, r1
 800a828:	619a      	str	r2, [r3, #24]
      break;
 800a82a:	e064      	b.n	800a8f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	68b9      	ldr	r1, [r7, #8]
 800a832:	4618      	mov	r0, r3
 800a834:	f000 fa3e 	bl	800acb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	699a      	ldr	r2, [r3, #24]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a846:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	699a      	ldr	r2, [r3, #24]
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a856:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	6999      	ldr	r1, [r3, #24]
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	691b      	ldr	r3, [r3, #16]
 800a862:	021a      	lsls	r2, r3, #8
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	430a      	orrs	r2, r1
 800a86a:	619a      	str	r2, [r3, #24]
      break;
 800a86c:	e043      	b.n	800a8f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	68b9      	ldr	r1, [r7, #8]
 800a874:	4618      	mov	r0, r3
 800a876:	f000 fa89 	bl	800ad8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	69da      	ldr	r2, [r3, #28]
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f042 0208 	orr.w	r2, r2, #8
 800a888:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	69da      	ldr	r2, [r3, #28]
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f022 0204 	bic.w	r2, r2, #4
 800a898:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	69d9      	ldr	r1, [r3, #28]
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	691a      	ldr	r2, [r3, #16]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	430a      	orrs	r2, r1
 800a8aa:	61da      	str	r2, [r3, #28]
      break;
 800a8ac:	e023      	b.n	800a8f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	68b9      	ldr	r1, [r7, #8]
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f000 fad3 	bl	800ae60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	69da      	ldr	r2, [r3, #28]
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a8c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	69da      	ldr	r2, [r3, #28]
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a8d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	69d9      	ldr	r1, [r3, #28]
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	691b      	ldr	r3, [r3, #16]
 800a8e4:	021a      	lsls	r2, r3, #8
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	430a      	orrs	r2, r1
 800a8ec:	61da      	str	r2, [r3, #28]
      break;
 800a8ee:	e002      	b.n	800a8f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	75fb      	strb	r3, [r7, #23]
      break;
 800a8f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a8fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800a900:	4618      	mov	r0, r3
 800a902:	3718      	adds	r7, #24
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a912:	2300      	movs	r3, #0
 800a914:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d101      	bne.n	800a924 <HAL_TIM_ConfigClockSource+0x1c>
 800a920:	2302      	movs	r3, #2
 800a922:	e0b4      	b.n	800aa8e <HAL_TIM_ConfigClockSource+0x186>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2201      	movs	r2, #1
 800a928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2202      	movs	r2, #2
 800a930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a942:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a94a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	68ba      	ldr	r2, [r7, #8]
 800a952:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a95c:	d03e      	beq.n	800a9dc <HAL_TIM_ConfigClockSource+0xd4>
 800a95e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a962:	f200 8087 	bhi.w	800aa74 <HAL_TIM_ConfigClockSource+0x16c>
 800a966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a96a:	f000 8086 	beq.w	800aa7a <HAL_TIM_ConfigClockSource+0x172>
 800a96e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a972:	d87f      	bhi.n	800aa74 <HAL_TIM_ConfigClockSource+0x16c>
 800a974:	2b70      	cmp	r3, #112	; 0x70
 800a976:	d01a      	beq.n	800a9ae <HAL_TIM_ConfigClockSource+0xa6>
 800a978:	2b70      	cmp	r3, #112	; 0x70
 800a97a:	d87b      	bhi.n	800aa74 <HAL_TIM_ConfigClockSource+0x16c>
 800a97c:	2b60      	cmp	r3, #96	; 0x60
 800a97e:	d050      	beq.n	800aa22 <HAL_TIM_ConfigClockSource+0x11a>
 800a980:	2b60      	cmp	r3, #96	; 0x60
 800a982:	d877      	bhi.n	800aa74 <HAL_TIM_ConfigClockSource+0x16c>
 800a984:	2b50      	cmp	r3, #80	; 0x50
 800a986:	d03c      	beq.n	800aa02 <HAL_TIM_ConfigClockSource+0xfa>
 800a988:	2b50      	cmp	r3, #80	; 0x50
 800a98a:	d873      	bhi.n	800aa74 <HAL_TIM_ConfigClockSource+0x16c>
 800a98c:	2b40      	cmp	r3, #64	; 0x40
 800a98e:	d058      	beq.n	800aa42 <HAL_TIM_ConfigClockSource+0x13a>
 800a990:	2b40      	cmp	r3, #64	; 0x40
 800a992:	d86f      	bhi.n	800aa74 <HAL_TIM_ConfigClockSource+0x16c>
 800a994:	2b30      	cmp	r3, #48	; 0x30
 800a996:	d064      	beq.n	800aa62 <HAL_TIM_ConfigClockSource+0x15a>
 800a998:	2b30      	cmp	r3, #48	; 0x30
 800a99a:	d86b      	bhi.n	800aa74 <HAL_TIM_ConfigClockSource+0x16c>
 800a99c:	2b20      	cmp	r3, #32
 800a99e:	d060      	beq.n	800aa62 <HAL_TIM_ConfigClockSource+0x15a>
 800a9a0:	2b20      	cmp	r3, #32
 800a9a2:	d867      	bhi.n	800aa74 <HAL_TIM_ConfigClockSource+0x16c>
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d05c      	beq.n	800aa62 <HAL_TIM_ConfigClockSource+0x15a>
 800a9a8:	2b10      	cmp	r3, #16
 800a9aa:	d05a      	beq.n	800aa62 <HAL_TIM_ConfigClockSource+0x15a>
 800a9ac:	e062      	b.n	800aa74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6818      	ldr	r0, [r3, #0]
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	6899      	ldr	r1, [r3, #8]
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	685a      	ldr	r2, [r3, #4]
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	68db      	ldr	r3, [r3, #12]
 800a9be:	f000 fb19 	bl	800aff4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	689b      	ldr	r3, [r3, #8]
 800a9c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a9d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	68ba      	ldr	r2, [r7, #8]
 800a9d8:	609a      	str	r2, [r3, #8]
      break;
 800a9da:	e04f      	b.n	800aa7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6818      	ldr	r0, [r3, #0]
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	6899      	ldr	r1, [r3, #8]
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	685a      	ldr	r2, [r3, #4]
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	68db      	ldr	r3, [r3, #12]
 800a9ec:	f000 fb02 	bl	800aff4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	689a      	ldr	r2, [r3, #8]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a9fe:	609a      	str	r2, [r3, #8]
      break;
 800aa00:	e03c      	b.n	800aa7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6818      	ldr	r0, [r3, #0]
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	6859      	ldr	r1, [r3, #4]
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	68db      	ldr	r3, [r3, #12]
 800aa0e:	461a      	mov	r2, r3
 800aa10:	f000 fa76 	bl	800af00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	2150      	movs	r1, #80	; 0x50
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f000 facf 	bl	800afbe <TIM_ITRx_SetConfig>
      break;
 800aa20:	e02c      	b.n	800aa7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6818      	ldr	r0, [r3, #0]
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	6859      	ldr	r1, [r3, #4]
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	68db      	ldr	r3, [r3, #12]
 800aa2e:	461a      	mov	r2, r3
 800aa30:	f000 fa95 	bl	800af5e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	2160      	movs	r1, #96	; 0x60
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f000 fabf 	bl	800afbe <TIM_ITRx_SetConfig>
      break;
 800aa40:	e01c      	b.n	800aa7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6818      	ldr	r0, [r3, #0]
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	6859      	ldr	r1, [r3, #4]
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	461a      	mov	r2, r3
 800aa50:	f000 fa56 	bl	800af00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2140      	movs	r1, #64	; 0x40
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f000 faaf 	bl	800afbe <TIM_ITRx_SetConfig>
      break;
 800aa60:	e00c      	b.n	800aa7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681a      	ldr	r2, [r3, #0]
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	4610      	mov	r0, r2
 800aa6e:	f000 faa6 	bl	800afbe <TIM_ITRx_SetConfig>
      break;
 800aa72:	e003      	b.n	800aa7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800aa74:	2301      	movs	r3, #1
 800aa76:	73fb      	strb	r3, [r7, #15]
      break;
 800aa78:	e000      	b.n	800aa7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800aa7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2201      	movs	r2, #1
 800aa80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aa8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}

0800aa96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa96:	b480      	push	{r7}
 800aa98:	b083      	sub	sp, #12
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa9e:	bf00      	nop
 800aaa0:	370c      	adds	r7, #12
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr

0800aaaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aaaa:	b480      	push	{r7}
 800aaac:	b083      	sub	sp, #12
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aab2:	bf00      	nop
 800aab4:	370c      	adds	r7, #12
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr

0800aabe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aabe:	b480      	push	{r7}
 800aac0:	b083      	sub	sp, #12
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aac6:	bf00      	nop
 800aac8:	370c      	adds	r7, #12
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr

0800aad2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aad2:	b480      	push	{r7}
 800aad4:	b083      	sub	sp, #12
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aada:	bf00      	nop
 800aadc:	370c      	adds	r7, #12
 800aade:	46bd      	mov	sp, r7
 800aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae4:	4770      	bx	lr
	...

0800aae8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b085      	sub	sp, #20
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	4a34      	ldr	r2, [pc, #208]	; (800abcc <TIM_Base_SetConfig+0xe4>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d00f      	beq.n	800ab20 <TIM_Base_SetConfig+0x38>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab06:	d00b      	beq.n	800ab20 <TIM_Base_SetConfig+0x38>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4a31      	ldr	r2, [pc, #196]	; (800abd0 <TIM_Base_SetConfig+0xe8>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d007      	beq.n	800ab20 <TIM_Base_SetConfig+0x38>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	4a30      	ldr	r2, [pc, #192]	; (800abd4 <TIM_Base_SetConfig+0xec>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d003      	beq.n	800ab20 <TIM_Base_SetConfig+0x38>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	4a2f      	ldr	r2, [pc, #188]	; (800abd8 <TIM_Base_SetConfig+0xf0>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d108      	bne.n	800ab32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	68fa      	ldr	r2, [r7, #12]
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	4a25      	ldr	r2, [pc, #148]	; (800abcc <TIM_Base_SetConfig+0xe4>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d01b      	beq.n	800ab72 <TIM_Base_SetConfig+0x8a>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab40:	d017      	beq.n	800ab72 <TIM_Base_SetConfig+0x8a>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	4a22      	ldr	r2, [pc, #136]	; (800abd0 <TIM_Base_SetConfig+0xe8>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d013      	beq.n	800ab72 <TIM_Base_SetConfig+0x8a>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4a21      	ldr	r2, [pc, #132]	; (800abd4 <TIM_Base_SetConfig+0xec>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d00f      	beq.n	800ab72 <TIM_Base_SetConfig+0x8a>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	4a20      	ldr	r2, [pc, #128]	; (800abd8 <TIM_Base_SetConfig+0xf0>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d00b      	beq.n	800ab72 <TIM_Base_SetConfig+0x8a>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4a1f      	ldr	r2, [pc, #124]	; (800abdc <TIM_Base_SetConfig+0xf4>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d007      	beq.n	800ab72 <TIM_Base_SetConfig+0x8a>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	4a1e      	ldr	r2, [pc, #120]	; (800abe0 <TIM_Base_SetConfig+0xf8>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d003      	beq.n	800ab72 <TIM_Base_SetConfig+0x8a>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	4a1d      	ldr	r2, [pc, #116]	; (800abe4 <TIM_Base_SetConfig+0xfc>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d108      	bne.n	800ab84 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	68db      	ldr	r3, [r3, #12]
 800ab7e:	68fa      	ldr	r2, [r7, #12]
 800ab80:	4313      	orrs	r3, r2
 800ab82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	695b      	ldr	r3, [r3, #20]
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	68fa      	ldr	r2, [r7, #12]
 800ab96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	689a      	ldr	r2, [r3, #8]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	681a      	ldr	r2, [r3, #0]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	4a08      	ldr	r2, [pc, #32]	; (800abcc <TIM_Base_SetConfig+0xe4>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d103      	bne.n	800abb8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	691a      	ldr	r2, [r3, #16]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2201      	movs	r2, #1
 800abbc:	615a      	str	r2, [r3, #20]
}
 800abbe:	bf00      	nop
 800abc0:	3714      	adds	r7, #20
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr
 800abca:	bf00      	nop
 800abcc:	40010000 	.word	0x40010000
 800abd0:	40000400 	.word	0x40000400
 800abd4:	40000800 	.word	0x40000800
 800abd8:	40000c00 	.word	0x40000c00
 800abdc:	40014000 	.word	0x40014000
 800abe0:	40014400 	.word	0x40014400
 800abe4:	40014800 	.word	0x40014800

0800abe8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800abe8:	b480      	push	{r7}
 800abea:	b087      	sub	sp, #28
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6a1b      	ldr	r3, [r3, #32]
 800abf6:	f023 0201 	bic.w	r2, r3, #1
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6a1b      	ldr	r3, [r3, #32]
 800ac02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	699b      	ldr	r3, [r3, #24]
 800ac0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f023 0303 	bic.w	r3, r3, #3
 800ac1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	68fa      	ldr	r2, [r7, #12]
 800ac26:	4313      	orrs	r3, r2
 800ac28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	f023 0302 	bic.w	r3, r3, #2
 800ac30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	689b      	ldr	r3, [r3, #8]
 800ac36:	697a      	ldr	r2, [r7, #20]
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	4a1c      	ldr	r2, [pc, #112]	; (800acb0 <TIM_OC1_SetConfig+0xc8>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d10c      	bne.n	800ac5e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	f023 0308 	bic.w	r3, r3, #8
 800ac4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	697a      	ldr	r2, [r7, #20]
 800ac52:	4313      	orrs	r3, r2
 800ac54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	f023 0304 	bic.w	r3, r3, #4
 800ac5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	4a13      	ldr	r2, [pc, #76]	; (800acb0 <TIM_OC1_SetConfig+0xc8>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d111      	bne.n	800ac8a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ac74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	695b      	ldr	r3, [r3, #20]
 800ac7a:	693a      	ldr	r2, [r7, #16]
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	699b      	ldr	r3, [r3, #24]
 800ac84:	693a      	ldr	r2, [r7, #16]
 800ac86:	4313      	orrs	r3, r2
 800ac88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	693a      	ldr	r2, [r7, #16]
 800ac8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	68fa      	ldr	r2, [r7, #12]
 800ac94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	685a      	ldr	r2, [r3, #4]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	697a      	ldr	r2, [r7, #20]
 800aca2:	621a      	str	r2, [r3, #32]
}
 800aca4:	bf00      	nop
 800aca6:	371c      	adds	r7, #28
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr
 800acb0:	40010000 	.word	0x40010000

0800acb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b087      	sub	sp, #28
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6a1b      	ldr	r3, [r3, #32]
 800acc2:	f023 0210 	bic.w	r2, r3, #16
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6a1b      	ldr	r3, [r3, #32]
 800acce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	699b      	ldr	r3, [r3, #24]
 800acda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ace2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	021b      	lsls	r3, r3, #8
 800acf2:	68fa      	ldr	r2, [r7, #12]
 800acf4:	4313      	orrs	r3, r2
 800acf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	f023 0320 	bic.w	r3, r3, #32
 800acfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	689b      	ldr	r3, [r3, #8]
 800ad04:	011b      	lsls	r3, r3, #4
 800ad06:	697a      	ldr	r2, [r7, #20]
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	4a1e      	ldr	r2, [pc, #120]	; (800ad88 <TIM_OC2_SetConfig+0xd4>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d10d      	bne.n	800ad30 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	68db      	ldr	r3, [r3, #12]
 800ad20:	011b      	lsls	r3, r3, #4
 800ad22:	697a      	ldr	r2, [r7, #20]
 800ad24:	4313      	orrs	r3, r2
 800ad26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	4a15      	ldr	r2, [pc, #84]	; (800ad88 <TIM_OC2_SetConfig+0xd4>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d113      	bne.n	800ad60 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ad3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ad46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	695b      	ldr	r3, [r3, #20]
 800ad4c:	009b      	lsls	r3, r3, #2
 800ad4e:	693a      	ldr	r2, [r7, #16]
 800ad50:	4313      	orrs	r3, r2
 800ad52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	699b      	ldr	r3, [r3, #24]
 800ad58:	009b      	lsls	r3, r3, #2
 800ad5a:	693a      	ldr	r2, [r7, #16]
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	693a      	ldr	r2, [r7, #16]
 800ad64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	68fa      	ldr	r2, [r7, #12]
 800ad6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	685a      	ldr	r2, [r3, #4]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	697a      	ldr	r2, [r7, #20]
 800ad78:	621a      	str	r2, [r3, #32]
}
 800ad7a:	bf00      	nop
 800ad7c:	371c      	adds	r7, #28
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr
 800ad86:	bf00      	nop
 800ad88:	40010000 	.word	0x40010000

0800ad8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b087      	sub	sp, #28
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6a1b      	ldr	r3, [r3, #32]
 800ad9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6a1b      	ldr	r3, [r3, #32]
 800ada6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	69db      	ldr	r3, [r3, #28]
 800adb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f023 0303 	bic.w	r3, r3, #3
 800adc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	68fa      	ldr	r2, [r7, #12]
 800adca:	4313      	orrs	r3, r2
 800adcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800add4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	021b      	lsls	r3, r3, #8
 800addc:	697a      	ldr	r2, [r7, #20]
 800adde:	4313      	orrs	r3, r2
 800ade0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	4a1d      	ldr	r2, [pc, #116]	; (800ae5c <TIM_OC3_SetConfig+0xd0>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d10d      	bne.n	800ae06 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800adf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	021b      	lsls	r3, r3, #8
 800adf8:	697a      	ldr	r2, [r7, #20]
 800adfa:	4313      	orrs	r3, r2
 800adfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ae04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	4a14      	ldr	r2, [pc, #80]	; (800ae5c <TIM_OC3_SetConfig+0xd0>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d113      	bne.n	800ae36 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ae1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	695b      	ldr	r3, [r3, #20]
 800ae22:	011b      	lsls	r3, r3, #4
 800ae24:	693a      	ldr	r2, [r7, #16]
 800ae26:	4313      	orrs	r3, r2
 800ae28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	699b      	ldr	r3, [r3, #24]
 800ae2e:	011b      	lsls	r3, r3, #4
 800ae30:	693a      	ldr	r2, [r7, #16]
 800ae32:	4313      	orrs	r3, r2
 800ae34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	693a      	ldr	r2, [r7, #16]
 800ae3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	68fa      	ldr	r2, [r7, #12]
 800ae40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	685a      	ldr	r2, [r3, #4]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	697a      	ldr	r2, [r7, #20]
 800ae4e:	621a      	str	r2, [r3, #32]
}
 800ae50:	bf00      	nop
 800ae52:	371c      	adds	r7, #28
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr
 800ae5c:	40010000 	.word	0x40010000

0800ae60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b087      	sub	sp, #28
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6a1b      	ldr	r3, [r3, #32]
 800ae6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6a1b      	ldr	r3, [r3, #32]
 800ae7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	69db      	ldr	r3, [r3, #28]
 800ae86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	021b      	lsls	r3, r3, #8
 800ae9e:	68fa      	ldr	r2, [r7, #12]
 800aea0:	4313      	orrs	r3, r2
 800aea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aeaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	689b      	ldr	r3, [r3, #8]
 800aeb0:	031b      	lsls	r3, r3, #12
 800aeb2:	693a      	ldr	r2, [r7, #16]
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	4a10      	ldr	r2, [pc, #64]	; (800aefc <TIM_OC4_SetConfig+0x9c>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d109      	bne.n	800aed4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aec6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	695b      	ldr	r3, [r3, #20]
 800aecc:	019b      	lsls	r3, r3, #6
 800aece:	697a      	ldr	r2, [r7, #20]
 800aed0:	4313      	orrs	r3, r2
 800aed2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	697a      	ldr	r2, [r7, #20]
 800aed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	68fa      	ldr	r2, [r7, #12]
 800aede:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	685a      	ldr	r2, [r3, #4]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	693a      	ldr	r2, [r7, #16]
 800aeec:	621a      	str	r2, [r3, #32]
}
 800aeee:	bf00      	nop
 800aef0:	371c      	adds	r7, #28
 800aef2:	46bd      	mov	sp, r7
 800aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef8:	4770      	bx	lr
 800aefa:	bf00      	nop
 800aefc:	40010000 	.word	0x40010000

0800af00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af00:	b480      	push	{r7}
 800af02:	b087      	sub	sp, #28
 800af04:	af00      	add	r7, sp, #0
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	6a1b      	ldr	r3, [r3, #32]
 800af10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	6a1b      	ldr	r3, [r3, #32]
 800af16:	f023 0201 	bic.w	r2, r3, #1
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	699b      	ldr	r3, [r3, #24]
 800af22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	011b      	lsls	r3, r3, #4
 800af30:	693a      	ldr	r2, [r7, #16]
 800af32:	4313      	orrs	r3, r2
 800af34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	f023 030a 	bic.w	r3, r3, #10
 800af3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800af3e:	697a      	ldr	r2, [r7, #20]
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	4313      	orrs	r3, r2
 800af44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	693a      	ldr	r2, [r7, #16]
 800af4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	697a      	ldr	r2, [r7, #20]
 800af50:	621a      	str	r2, [r3, #32]
}
 800af52:	bf00      	nop
 800af54:	371c      	adds	r7, #28
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr

0800af5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af5e:	b480      	push	{r7}
 800af60:	b087      	sub	sp, #28
 800af62:	af00      	add	r7, sp, #0
 800af64:	60f8      	str	r0, [r7, #12]
 800af66:	60b9      	str	r1, [r7, #8]
 800af68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	6a1b      	ldr	r3, [r3, #32]
 800af6e:	f023 0210 	bic.w	r2, r3, #16
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	699b      	ldr	r3, [r3, #24]
 800af7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	6a1b      	ldr	r3, [r3, #32]
 800af80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800af88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	031b      	lsls	r3, r3, #12
 800af8e:	697a      	ldr	r2, [r7, #20]
 800af90:	4313      	orrs	r3, r2
 800af92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800af9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	011b      	lsls	r3, r3, #4
 800afa0:	693a      	ldr	r2, [r7, #16]
 800afa2:	4313      	orrs	r3, r2
 800afa4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	697a      	ldr	r2, [r7, #20]
 800afaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	693a      	ldr	r2, [r7, #16]
 800afb0:	621a      	str	r2, [r3, #32]
}
 800afb2:	bf00      	nop
 800afb4:	371c      	adds	r7, #28
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr

0800afbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800afbe:	b480      	push	{r7}
 800afc0:	b085      	sub	sp, #20
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
 800afc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	689b      	ldr	r3, [r3, #8]
 800afcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800afd6:	683a      	ldr	r2, [r7, #0]
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	4313      	orrs	r3, r2
 800afdc:	f043 0307 	orr.w	r3, r3, #7
 800afe0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	68fa      	ldr	r2, [r7, #12]
 800afe6:	609a      	str	r2, [r3, #8]
}
 800afe8:	bf00      	nop
 800afea:	3714      	adds	r7, #20
 800afec:	46bd      	mov	sp, r7
 800afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff2:	4770      	bx	lr

0800aff4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aff4:	b480      	push	{r7}
 800aff6:	b087      	sub	sp, #28
 800aff8:	af00      	add	r7, sp, #0
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	60b9      	str	r1, [r7, #8]
 800affe:	607a      	str	r2, [r7, #4]
 800b000:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	689b      	ldr	r3, [r3, #8]
 800b006:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b00e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	021a      	lsls	r2, r3, #8
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	431a      	orrs	r2, r3
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	4313      	orrs	r3, r2
 800b01c:	697a      	ldr	r2, [r7, #20]
 800b01e:	4313      	orrs	r3, r2
 800b020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	697a      	ldr	r2, [r7, #20]
 800b026:	609a      	str	r2, [r3, #8]
}
 800b028:	bf00      	nop
 800b02a:	371c      	adds	r7, #28
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr

0800b034 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b034:	b480      	push	{r7}
 800b036:	b087      	sub	sp, #28
 800b038:	af00      	add	r7, sp, #0
 800b03a:	60f8      	str	r0, [r7, #12]
 800b03c:	60b9      	str	r1, [r7, #8]
 800b03e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	f003 031f 	and.w	r3, r3, #31
 800b046:	2201      	movs	r2, #1
 800b048:	fa02 f303 	lsl.w	r3, r2, r3
 800b04c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	6a1a      	ldr	r2, [r3, #32]
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	43db      	mvns	r3, r3
 800b056:	401a      	ands	r2, r3
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	6a1a      	ldr	r2, [r3, #32]
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	f003 031f 	and.w	r3, r3, #31
 800b066:	6879      	ldr	r1, [r7, #4]
 800b068:	fa01 f303 	lsl.w	r3, r1, r3
 800b06c:	431a      	orrs	r2, r3
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	621a      	str	r2, [r3, #32]
}
 800b072:	bf00      	nop
 800b074:	371c      	adds	r7, #28
 800b076:	46bd      	mov	sp, r7
 800b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07c:	4770      	bx	lr
	...

0800b080 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b080:	b480      	push	{r7}
 800b082:	b085      	sub	sp, #20
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b090:	2b01      	cmp	r3, #1
 800b092:	d101      	bne.n	800b098 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b094:	2302      	movs	r3, #2
 800b096:	e050      	b.n	800b13a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2202      	movs	r2, #2
 800b0a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	689b      	ldr	r3, [r3, #8]
 800b0b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	68fa      	ldr	r2, [r7, #12]
 800b0c6:	4313      	orrs	r3, r2
 800b0c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	68fa      	ldr	r2, [r7, #12]
 800b0d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4a1c      	ldr	r2, [pc, #112]	; (800b148 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d018      	beq.n	800b10e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0e4:	d013      	beq.n	800b10e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4a18      	ldr	r2, [pc, #96]	; (800b14c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d00e      	beq.n	800b10e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	4a16      	ldr	r2, [pc, #88]	; (800b150 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d009      	beq.n	800b10e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	4a15      	ldr	r2, [pc, #84]	; (800b154 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d004      	beq.n	800b10e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4a13      	ldr	r2, [pc, #76]	; (800b158 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d10c      	bne.n	800b128 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b114:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	68ba      	ldr	r2, [r7, #8]
 800b11c:	4313      	orrs	r3, r2
 800b11e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	68ba      	ldr	r2, [r7, #8]
 800b126:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2201      	movs	r2, #1
 800b12c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2200      	movs	r2, #0
 800b134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b138:	2300      	movs	r3, #0
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3714      	adds	r7, #20
 800b13e:	46bd      	mov	sp, r7
 800b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b144:	4770      	bx	lr
 800b146:	bf00      	nop
 800b148:	40010000 	.word	0x40010000
 800b14c:	40000400 	.word	0x40000400
 800b150:	40000800 	.word	0x40000800
 800b154:	40000c00 	.word	0x40000c00
 800b158:	40014000 	.word	0x40014000

0800b15c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b083      	sub	sp, #12
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b164:	bf00      	nop
 800b166:	370c      	adds	r7, #12
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr

0800b170 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b178:	bf00      	nop
 800b17a:	370c      	adds	r7, #12
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr

0800b184 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b082      	sub	sp, #8
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d101      	bne.n	800b196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b192:	2301      	movs	r3, #1
 800b194:	e03f      	b.n	800b216 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b19c:	b2db      	uxtb	r3, r3
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d106      	bne.n	800b1b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f7f7 fee8 	bl	8002f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2224      	movs	r2, #36	; 0x24
 800b1b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	68da      	ldr	r2, [r3, #12]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b1c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 fe5d 	bl	800be88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	691a      	ldr	r2, [r3, #16]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b1dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	695a      	ldr	r2, [r3, #20]
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b1ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	68da      	ldr	r2, [r3, #12]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b1fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2200      	movs	r2, #0
 800b202:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2220      	movs	r2, #32
 800b208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2220      	movs	r2, #32
 800b210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b214:	2300      	movs	r3, #0
}
 800b216:	4618      	mov	r0, r3
 800b218:	3708      	adds	r7, #8
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}

0800b21e <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800b21e:	b580      	push	{r7, lr}
 800b220:	b082      	sub	sp, #8
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d101      	bne.n	800b230 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800b22c:	2301      	movs	r3, #1
 800b22e:	e021      	b.n	800b274 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2224      	movs	r2, #36	; 0x24
 800b234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	68da      	ldr	r2, [r3, #12]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b246:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f7f7 ff27 	bl	800309c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2200      	movs	r2, #0
 800b252:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2200      	movs	r2, #0
 800b260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2200      	movs	r2, #0
 800b268:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2200      	movs	r2, #0
 800b26e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b272:	2300      	movs	r3, #0
}
 800b274:	4618      	mov	r0, r3
 800b276:	3708      	adds	r7, #8
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b08a      	sub	sp, #40	; 0x28
 800b280:	af02      	add	r7, sp, #8
 800b282:	60f8      	str	r0, [r7, #12]
 800b284:	60b9      	str	r1, [r7, #8]
 800b286:	603b      	str	r3, [r7, #0]
 800b288:	4613      	mov	r3, r2
 800b28a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b28c:	2300      	movs	r3, #0
 800b28e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b296:	b2db      	uxtb	r3, r3
 800b298:	2b20      	cmp	r3, #32
 800b29a:	d17c      	bne.n	800b396 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d002      	beq.n	800b2a8 <HAL_UART_Transmit+0x2c>
 800b2a2:	88fb      	ldrh	r3, [r7, #6]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d101      	bne.n	800b2ac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	e075      	b.n	800b398 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	d101      	bne.n	800b2ba <HAL_UART_Transmit+0x3e>
 800b2b6:	2302      	movs	r3, #2
 800b2b8:	e06e      	b.n	800b398 <HAL_UART_Transmit+0x11c>
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2201      	movs	r2, #1
 800b2be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2221      	movs	r2, #33	; 0x21
 800b2cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b2d0:	f7f8 f902 	bl	80034d8 <HAL_GetTick>
 800b2d4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	88fa      	ldrh	r2, [r7, #6]
 800b2da:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	88fa      	ldrh	r2, [r7, #6]
 800b2e0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	689b      	ldr	r3, [r3, #8]
 800b2e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2ea:	d108      	bne.n	800b2fe <HAL_UART_Transmit+0x82>
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	691b      	ldr	r3, [r3, #16]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d104      	bne.n	800b2fe <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	61bb      	str	r3, [r7, #24]
 800b2fc:	e003      	b.n	800b306 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b302:	2300      	movs	r3, #0
 800b304:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	2200      	movs	r2, #0
 800b30a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b30e:	e02a      	b.n	800b366 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	9300      	str	r3, [sp, #0]
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	2200      	movs	r2, #0
 800b318:	2180      	movs	r1, #128	; 0x80
 800b31a:	68f8      	ldr	r0, [r7, #12]
 800b31c:	f000 fb6e 	bl	800b9fc <UART_WaitOnFlagUntilTimeout>
 800b320:	4603      	mov	r3, r0
 800b322:	2b00      	cmp	r3, #0
 800b324:	d001      	beq.n	800b32a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b326:	2303      	movs	r3, #3
 800b328:	e036      	b.n	800b398 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b32a:	69fb      	ldr	r3, [r7, #28]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d10b      	bne.n	800b348 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b330:	69bb      	ldr	r3, [r7, #24]
 800b332:	881b      	ldrh	r3, [r3, #0]
 800b334:	461a      	mov	r2, r3
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b33e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b340:	69bb      	ldr	r3, [r7, #24]
 800b342:	3302      	adds	r3, #2
 800b344:	61bb      	str	r3, [r7, #24]
 800b346:	e007      	b.n	800b358 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	781a      	ldrb	r2, [r3, #0]
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b352:	69fb      	ldr	r3, [r7, #28]
 800b354:	3301      	adds	r3, #1
 800b356:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	3b01      	subs	r3, #1
 800b360:	b29a      	uxth	r2, r3
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d1cf      	bne.n	800b310 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	9300      	str	r3, [sp, #0]
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	2200      	movs	r2, #0
 800b378:	2140      	movs	r1, #64	; 0x40
 800b37a:	68f8      	ldr	r0, [r7, #12]
 800b37c:	f000 fb3e 	bl	800b9fc <UART_WaitOnFlagUntilTimeout>
 800b380:	4603      	mov	r3, r0
 800b382:	2b00      	cmp	r3, #0
 800b384:	d001      	beq.n	800b38a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b386:	2303      	movs	r3, #3
 800b388:	e006      	b.n	800b398 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2220      	movs	r2, #32
 800b38e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b392:	2300      	movs	r3, #0
 800b394:	e000      	b.n	800b398 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b396:	2302      	movs	r3, #2
  }
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3720      	adds	r7, #32
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b084      	sub	sp, #16
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	60b9      	str	r1, [r7, #8]
 800b3aa:	4613      	mov	r3, r2
 800b3ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b3b4:	b2db      	uxtb	r3, r3
 800b3b6:	2b20      	cmp	r3, #32
 800b3b8:	d11d      	bne.n	800b3f6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d002      	beq.n	800b3c6 <HAL_UART_Receive_IT+0x26>
 800b3c0:	88fb      	ldrh	r3, [r7, #6]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d101      	bne.n	800b3ca <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	e016      	b.n	800b3f8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	d101      	bne.n	800b3d8 <HAL_UART_Receive_IT+0x38>
 800b3d4:	2302      	movs	r3, #2
 800b3d6:	e00f      	b.n	800b3f8 <HAL_UART_Receive_IT+0x58>
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2201      	movs	r2, #1
 800b3dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b3e6:	88fb      	ldrh	r3, [r7, #6]
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	68b9      	ldr	r1, [r7, #8]
 800b3ec:	68f8      	ldr	r0, [r7, #12]
 800b3ee:	f000 fb73 	bl	800bad8 <UART_Start_Receive_IT>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	e000      	b.n	800b3f8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b3f6:	2302      	movs	r3, #2
  }
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3710      	adds	r7, #16
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b08c      	sub	sp, #48	; 0x30
 800b404:	af00      	add	r7, sp, #0
 800b406:	60f8      	str	r0, [r7, #12]
 800b408:	60b9      	str	r1, [r7, #8]
 800b40a:	4613      	mov	r3, r2
 800b40c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b414:	b2db      	uxtb	r3, r3
 800b416:	2b20      	cmp	r3, #32
 800b418:	d152      	bne.n	800b4c0 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d002      	beq.n	800b426 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800b420:	88fb      	ldrh	r3, [r7, #6]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d101      	bne.n	800b42a <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800b426:	2301      	movs	r3, #1
 800b428:	e04b      	b.n	800b4c2 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b430:	2b01      	cmp	r3, #1
 800b432:	d101      	bne.n	800b438 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 800b434:	2302      	movs	r3, #2
 800b436:	e044      	b.n	800b4c2 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2201      	movs	r2, #1
 800b43c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2201      	movs	r2, #1
 800b444:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800b446:	88fb      	ldrh	r3, [r7, #6]
 800b448:	461a      	mov	r2, r3
 800b44a:	68b9      	ldr	r1, [r7, #8]
 800b44c:	68f8      	ldr	r0, [r7, #12]
 800b44e:	f000 fb43 	bl	800bad8 <UART_Start_Receive_IT>
 800b452:	4603      	mov	r3, r0
 800b454:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b458:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d12c      	bne.n	800b4ba <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b464:	2b01      	cmp	r3, #1
 800b466:	d125      	bne.n	800b4b4 <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b468:	2300      	movs	r3, #0
 800b46a:	613b      	str	r3, [r7, #16]
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	613b      	str	r3, [r7, #16]
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	613b      	str	r3, [r7, #16]
 800b47c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	330c      	adds	r3, #12
 800b484:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b486:	69bb      	ldr	r3, [r7, #24]
 800b488:	e853 3f00 	ldrex	r3, [r3]
 800b48c:	617b      	str	r3, [r7, #20]
   return(result);
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	f043 0310 	orr.w	r3, r3, #16
 800b494:	62bb      	str	r3, [r7, #40]	; 0x28
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	330c      	adds	r3, #12
 800b49c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b49e:	627a      	str	r2, [r7, #36]	; 0x24
 800b4a0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a2:	6a39      	ldr	r1, [r7, #32]
 800b4a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4a6:	e841 2300 	strex	r3, r2, [r1]
 800b4aa:	61fb      	str	r3, [r7, #28]
   return(result);
 800b4ac:	69fb      	ldr	r3, [r7, #28]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d1e5      	bne.n	800b47e <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 800b4b2:	e002      	b.n	800b4ba <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800b4ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b4be:	e000      	b.n	800b4c2 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800b4c0:	2302      	movs	r3, #2
  }
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3730      	adds	r7, #48	; 0x30
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
	...

0800b4cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b0ba      	sub	sp, #232	; 0xe8
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	68db      	ldr	r3, [r3, #12]
 800b4e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	695b      	ldr	r3, [r3, #20]
 800b4ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b4fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b502:	f003 030f 	and.w	r3, r3, #15
 800b506:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b50a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d10f      	bne.n	800b532 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b516:	f003 0320 	and.w	r3, r3, #32
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d009      	beq.n	800b532 <HAL_UART_IRQHandler+0x66>
 800b51e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b522:	f003 0320 	and.w	r3, r3, #32
 800b526:	2b00      	cmp	r3, #0
 800b528:	d003      	beq.n	800b532 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f000 fbf1 	bl	800bd12 <UART_Receive_IT>
      return;
 800b530:	e256      	b.n	800b9e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b532:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b536:	2b00      	cmp	r3, #0
 800b538:	f000 80de 	beq.w	800b6f8 <HAL_UART_IRQHandler+0x22c>
 800b53c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b540:	f003 0301 	and.w	r3, r3, #1
 800b544:	2b00      	cmp	r3, #0
 800b546:	d106      	bne.n	800b556 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b54c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b550:	2b00      	cmp	r3, #0
 800b552:	f000 80d1 	beq.w	800b6f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b55a:	f003 0301 	and.w	r3, r3, #1
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d00b      	beq.n	800b57a <HAL_UART_IRQHandler+0xae>
 800b562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d005      	beq.n	800b57a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b572:	f043 0201 	orr.w	r2, r3, #1
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b57a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b57e:	f003 0304 	and.w	r3, r3, #4
 800b582:	2b00      	cmp	r3, #0
 800b584:	d00b      	beq.n	800b59e <HAL_UART_IRQHandler+0xd2>
 800b586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b58a:	f003 0301 	and.w	r3, r3, #1
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d005      	beq.n	800b59e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b596:	f043 0202 	orr.w	r2, r3, #2
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b59e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5a2:	f003 0302 	and.w	r3, r3, #2
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d00b      	beq.n	800b5c2 <HAL_UART_IRQHandler+0xf6>
 800b5aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5ae:	f003 0301 	and.w	r3, r3, #1
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d005      	beq.n	800b5c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ba:	f043 0204 	orr.w	r2, r3, #4
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b5c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5c6:	f003 0308 	and.w	r3, r3, #8
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d011      	beq.n	800b5f2 <HAL_UART_IRQHandler+0x126>
 800b5ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5d2:	f003 0320 	and.w	r3, r3, #32
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d105      	bne.n	800b5e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b5da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5de:	f003 0301 	and.w	r3, r3, #1
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d005      	beq.n	800b5f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ea:	f043 0208 	orr.w	r2, r3, #8
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	f000 81ed 	beq.w	800b9d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b5fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b600:	f003 0320 	and.w	r3, r3, #32
 800b604:	2b00      	cmp	r3, #0
 800b606:	d008      	beq.n	800b61a <HAL_UART_IRQHandler+0x14e>
 800b608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b60c:	f003 0320 	and.w	r3, r3, #32
 800b610:	2b00      	cmp	r3, #0
 800b612:	d002      	beq.n	800b61a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 fb7c 	bl	800bd12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	695b      	ldr	r3, [r3, #20]
 800b620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b624:	2b40      	cmp	r3, #64	; 0x40
 800b626:	bf0c      	ite	eq
 800b628:	2301      	moveq	r3, #1
 800b62a:	2300      	movne	r3, #0
 800b62c:	b2db      	uxtb	r3, r3
 800b62e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b636:	f003 0308 	and.w	r3, r3, #8
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d103      	bne.n	800b646 <HAL_UART_IRQHandler+0x17a>
 800b63e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b642:	2b00      	cmp	r3, #0
 800b644:	d04f      	beq.n	800b6e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 fa84 	bl	800bb54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	695b      	ldr	r3, [r3, #20]
 800b652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b656:	2b40      	cmp	r3, #64	; 0x40
 800b658:	d141      	bne.n	800b6de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	3314      	adds	r3, #20
 800b660:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b664:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b668:	e853 3f00 	ldrex	r3, [r3]
 800b66c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b670:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b678:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	3314      	adds	r3, #20
 800b682:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b686:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b68a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b68e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b692:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b696:	e841 2300 	strex	r3, r2, [r1]
 800b69a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b69e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d1d9      	bne.n	800b65a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d013      	beq.n	800b6d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6b2:	4a7d      	ldr	r2, [pc, #500]	; (800b8a8 <HAL_UART_IRQHandler+0x3dc>)
 800b6b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f7f8 feef 	bl	800449e <HAL_DMA_Abort_IT>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d016      	beq.n	800b6f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6cc:	687a      	ldr	r2, [r7, #4]
 800b6ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b6d0:	4610      	mov	r0, r2
 800b6d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6d4:	e00e      	b.n	800b6f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f7f7 f996 	bl	8002a08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6dc:	e00a      	b.n	800b6f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f7f7 f992 	bl	8002a08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6e4:	e006      	b.n	800b6f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f7f7 f98e 	bl	8002a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b6f2:	e170      	b.n	800b9d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6f4:	bf00      	nop
    return;
 800b6f6:	e16e      	b.n	800b9d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	f040 814a 	bne.w	800b996 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b706:	f003 0310 	and.w	r3, r3, #16
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	f000 8143 	beq.w	800b996 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b714:	f003 0310 	and.w	r3, r3, #16
 800b718:	2b00      	cmp	r3, #0
 800b71a:	f000 813c 	beq.w	800b996 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b71e:	2300      	movs	r3, #0
 800b720:	60bb      	str	r3, [r7, #8]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	60bb      	str	r3, [r7, #8]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	685b      	ldr	r3, [r3, #4]
 800b730:	60bb      	str	r3, [r7, #8]
 800b732:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	695b      	ldr	r3, [r3, #20]
 800b73a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b73e:	2b40      	cmp	r3, #64	; 0x40
 800b740:	f040 80b4 	bne.w	800b8ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b750:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b754:	2b00      	cmp	r3, #0
 800b756:	f000 8140 	beq.w	800b9da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b75e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b762:	429a      	cmp	r2, r3
 800b764:	f080 8139 	bcs.w	800b9da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b76e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b774:	69db      	ldr	r3, [r3, #28]
 800b776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b77a:	f000 8088 	beq.w	800b88e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	330c      	adds	r3, #12
 800b784:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b788:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b78c:	e853 3f00 	ldrex	r3, [r3]
 800b790:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b794:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b798:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b79c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	330c      	adds	r3, #12
 800b7a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b7aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b7ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b7b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b7ba:	e841 2300 	strex	r3, r2, [r1]
 800b7be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b7c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d1d9      	bne.n	800b77e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	3314      	adds	r3, #20
 800b7d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b7d4:	e853 3f00 	ldrex	r3, [r3]
 800b7d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b7da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b7dc:	f023 0301 	bic.w	r3, r3, #1
 800b7e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	3314      	adds	r3, #20
 800b7ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b7ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b7f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b7f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b7fa:	e841 2300 	strex	r3, r2, [r1]
 800b7fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b800:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b802:	2b00      	cmp	r3, #0
 800b804:	d1e1      	bne.n	800b7ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	3314      	adds	r3, #20
 800b80c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b80e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b810:	e853 3f00 	ldrex	r3, [r3]
 800b814:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b816:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b81c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	3314      	adds	r3, #20
 800b826:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b82a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b82c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b82e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b830:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b832:	e841 2300 	strex	r3, r2, [r1]
 800b836:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b838:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d1e3      	bne.n	800b806 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2220      	movs	r2, #32
 800b842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2200      	movs	r2, #0
 800b84a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	330c      	adds	r3, #12
 800b852:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b856:	e853 3f00 	ldrex	r3, [r3]
 800b85a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b85c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b85e:	f023 0310 	bic.w	r3, r3, #16
 800b862:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	330c      	adds	r3, #12
 800b86c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b870:	65ba      	str	r2, [r7, #88]	; 0x58
 800b872:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b874:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b876:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b878:	e841 2300 	strex	r3, r2, [r1]
 800b87c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b87e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b880:	2b00      	cmp	r3, #0
 800b882:	d1e3      	bne.n	800b84c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b888:	4618      	mov	r0, r3
 800b88a:	f7f8 fd98 	bl	80043be <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b896:	b29b      	uxth	r3, r3
 800b898:	1ad3      	subs	r3, r2, r3
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	4619      	mov	r1, r3
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f007 fb0e 	bl	8012ec0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b8a4:	e099      	b.n	800b9da <HAL_UART_IRQHandler+0x50e>
 800b8a6:	bf00      	nop
 800b8a8:	0800bc1b 	.word	0x0800bc1b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b8b4:	b29b      	uxth	r3, r3
 800b8b6:	1ad3      	subs	r3, r2, r3
 800b8b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b8c0:	b29b      	uxth	r3, r3
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	f000 808b 	beq.w	800b9de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b8c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	f000 8086 	beq.w	800b9de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	330c      	adds	r3, #12
 800b8d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8dc:	e853 3f00 	ldrex	r3, [r3]
 800b8e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b8e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b8e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	330c      	adds	r3, #12
 800b8f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b8f6:	647a      	str	r2, [r7, #68]	; 0x44
 800b8f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b8fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b8fe:	e841 2300 	strex	r3, r2, [r1]
 800b902:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b906:	2b00      	cmp	r3, #0
 800b908:	d1e3      	bne.n	800b8d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	3314      	adds	r3, #20
 800b910:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b914:	e853 3f00 	ldrex	r3, [r3]
 800b918:	623b      	str	r3, [r7, #32]
   return(result);
 800b91a:	6a3b      	ldr	r3, [r7, #32]
 800b91c:	f023 0301 	bic.w	r3, r3, #1
 800b920:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	3314      	adds	r3, #20
 800b92a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b92e:	633a      	str	r2, [r7, #48]	; 0x30
 800b930:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b936:	e841 2300 	strex	r3, r2, [r1]
 800b93a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d1e3      	bne.n	800b90a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2220      	movs	r2, #32
 800b946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2200      	movs	r2, #0
 800b94e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	330c      	adds	r3, #12
 800b956:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	e853 3f00 	ldrex	r3, [r3]
 800b95e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f023 0310 	bic.w	r3, r3, #16
 800b966:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	330c      	adds	r3, #12
 800b970:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b974:	61fa      	str	r2, [r7, #28]
 800b976:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b978:	69b9      	ldr	r1, [r7, #24]
 800b97a:	69fa      	ldr	r2, [r7, #28]
 800b97c:	e841 2300 	strex	r3, r2, [r1]
 800b980:	617b      	str	r3, [r7, #20]
   return(result);
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d1e3      	bne.n	800b950 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b988:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b98c:	4619      	mov	r1, r3
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f007 fa96 	bl	8012ec0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b994:	e023      	b.n	800b9de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b99a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d009      	beq.n	800b9b6 <HAL_UART_IRQHandler+0x4ea>
 800b9a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d003      	beq.n	800b9b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 f947 	bl	800bc42 <UART_Transmit_IT>
    return;
 800b9b4:	e014      	b.n	800b9e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b9b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d00e      	beq.n	800b9e0 <HAL_UART_IRQHandler+0x514>
 800b9c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d008      	beq.n	800b9e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 f987 	bl	800bce2 <UART_EndTransmit_IT>
    return;
 800b9d4:	e004      	b.n	800b9e0 <HAL_UART_IRQHandler+0x514>
    return;
 800b9d6:	bf00      	nop
 800b9d8:	e002      	b.n	800b9e0 <HAL_UART_IRQHandler+0x514>
      return;
 800b9da:	bf00      	nop
 800b9dc:	e000      	b.n	800b9e0 <HAL_UART_IRQHandler+0x514>
      return;
 800b9de:	bf00      	nop
  }
}
 800b9e0:	37e8      	adds	r7, #232	; 0xe8
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}
 800b9e6:	bf00      	nop

0800b9e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b083      	sub	sp, #12
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b9f0:	bf00      	nop
 800b9f2:	370c      	adds	r7, #12
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr

0800b9fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b090      	sub	sp, #64	; 0x40
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	60f8      	str	r0, [r7, #12]
 800ba04:	60b9      	str	r1, [r7, #8]
 800ba06:	603b      	str	r3, [r7, #0]
 800ba08:	4613      	mov	r3, r2
 800ba0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba0c:	e050      	b.n	800bab0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba14:	d04c      	beq.n	800bab0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ba16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d007      	beq.n	800ba2c <UART_WaitOnFlagUntilTimeout+0x30>
 800ba1c:	f7f7 fd5c 	bl	80034d8 <HAL_GetTick>
 800ba20:	4602      	mov	r2, r0
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	1ad3      	subs	r3, r2, r3
 800ba26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d241      	bcs.n	800bab0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	330c      	adds	r3, #12
 800ba32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba36:	e853 3f00 	ldrex	r3, [r3]
 800ba3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ba3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ba42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	330c      	adds	r3, #12
 800ba4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ba4c:	637a      	str	r2, [r7, #52]	; 0x34
 800ba4e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ba52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba54:	e841 2300 	strex	r3, r2, [r1]
 800ba58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ba5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d1e5      	bne.n	800ba2c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	3314      	adds	r3, #20
 800ba66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	e853 3f00 	ldrex	r3, [r3]
 800ba6e:	613b      	str	r3, [r7, #16]
   return(result);
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	f023 0301 	bic.w	r3, r3, #1
 800ba76:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	3314      	adds	r3, #20
 800ba7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba80:	623a      	str	r2, [r7, #32]
 800ba82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba84:	69f9      	ldr	r1, [r7, #28]
 800ba86:	6a3a      	ldr	r2, [r7, #32]
 800ba88:	e841 2300 	strex	r3, r2, [r1]
 800ba8c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ba8e:	69bb      	ldr	r3, [r7, #24]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d1e5      	bne.n	800ba60 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2220      	movs	r2, #32
 800ba98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2220      	movs	r2, #32
 800baa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2200      	movs	r2, #0
 800baa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800baac:	2303      	movs	r3, #3
 800baae:	e00f      	b.n	800bad0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	4013      	ands	r3, r2
 800baba:	68ba      	ldr	r2, [r7, #8]
 800babc:	429a      	cmp	r2, r3
 800babe:	bf0c      	ite	eq
 800bac0:	2301      	moveq	r3, #1
 800bac2:	2300      	movne	r3, #0
 800bac4:	b2db      	uxtb	r3, r3
 800bac6:	461a      	mov	r2, r3
 800bac8:	79fb      	ldrb	r3, [r7, #7]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d09f      	beq.n	800ba0e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bace:	2300      	movs	r3, #0
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3740      	adds	r7, #64	; 0x40
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bad8:	b480      	push	{r7}
 800bada:	b085      	sub	sp, #20
 800badc:	af00      	add	r7, sp, #0
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	60b9      	str	r1, [r7, #8]
 800bae2:	4613      	mov	r3, r2
 800bae4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	68ba      	ldr	r2, [r7, #8]
 800baea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	88fa      	ldrh	r2, [r7, #6]
 800baf0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	88fa      	ldrh	r2, [r7, #6]
 800baf6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2200      	movs	r2, #0
 800bafc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2222      	movs	r2, #34	; 0x22
 800bb02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	691b      	ldr	r3, [r3, #16]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d007      	beq.n	800bb26 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	68da      	ldr	r2, [r3, #12]
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bb24:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	695a      	ldr	r2, [r3, #20]
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f042 0201 	orr.w	r2, r2, #1
 800bb34:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	68da      	ldr	r2, [r3, #12]
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f042 0220 	orr.w	r2, r2, #32
 800bb44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bb46:	2300      	movs	r3, #0
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3714      	adds	r7, #20
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr

0800bb54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b095      	sub	sp, #84	; 0x54
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	330c      	adds	r3, #12
 800bb62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb66:	e853 3f00 	ldrex	r3, [r3]
 800bb6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bb6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bb72:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	330c      	adds	r3, #12
 800bb7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bb7c:	643a      	str	r2, [r7, #64]	; 0x40
 800bb7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bb82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bb84:	e841 2300 	strex	r3, r2, [r1]
 800bb88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bb8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d1e5      	bne.n	800bb5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	3314      	adds	r3, #20
 800bb96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb98:	6a3b      	ldr	r3, [r7, #32]
 800bb9a:	e853 3f00 	ldrex	r3, [r3]
 800bb9e:	61fb      	str	r3, [r7, #28]
   return(result);
 800bba0:	69fb      	ldr	r3, [r7, #28]
 800bba2:	f023 0301 	bic.w	r3, r3, #1
 800bba6:	64bb      	str	r3, [r7, #72]	; 0x48
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	3314      	adds	r3, #20
 800bbae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bbb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bbb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bbb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbb8:	e841 2300 	strex	r3, r2, [r1]
 800bbbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d1e5      	bne.n	800bb90 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbc8:	2b01      	cmp	r3, #1
 800bbca:	d119      	bne.n	800bc00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	330c      	adds	r3, #12
 800bbd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	e853 3f00 	ldrex	r3, [r3]
 800bbda:	60bb      	str	r3, [r7, #8]
   return(result);
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	f023 0310 	bic.w	r3, r3, #16
 800bbe2:	647b      	str	r3, [r7, #68]	; 0x44
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	330c      	adds	r3, #12
 800bbea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bbec:	61ba      	str	r2, [r7, #24]
 800bbee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbf0:	6979      	ldr	r1, [r7, #20]
 800bbf2:	69ba      	ldr	r2, [r7, #24]
 800bbf4:	e841 2300 	strex	r3, r2, [r1]
 800bbf8:	613b      	str	r3, [r7, #16]
   return(result);
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d1e5      	bne.n	800bbcc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2220      	movs	r2, #32
 800bc04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bc0e:	bf00      	nop
 800bc10:	3754      	adds	r7, #84	; 0x54
 800bc12:	46bd      	mov	sp, r7
 800bc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc18:	4770      	bx	lr

0800bc1a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bc1a:	b580      	push	{r7, lr}
 800bc1c:	b084      	sub	sp, #16
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	2200      	movs	r2, #0
 800bc32:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc34:	68f8      	ldr	r0, [r7, #12]
 800bc36:	f7f6 fee7 	bl	8002a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc3a:	bf00      	nop
 800bc3c:	3710      	adds	r7, #16
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}

0800bc42 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bc42:	b480      	push	{r7}
 800bc44:	b085      	sub	sp, #20
 800bc46:	af00      	add	r7, sp, #0
 800bc48:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc50:	b2db      	uxtb	r3, r3
 800bc52:	2b21      	cmp	r3, #33	; 0x21
 800bc54:	d13e      	bne.n	800bcd4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	689b      	ldr	r3, [r3, #8]
 800bc5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc5e:	d114      	bne.n	800bc8a <UART_Transmit_IT+0x48>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	691b      	ldr	r3, [r3, #16]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d110      	bne.n	800bc8a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6a1b      	ldr	r3, [r3, #32]
 800bc6c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	881b      	ldrh	r3, [r3, #0]
 800bc72:	461a      	mov	r2, r3
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bc7c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6a1b      	ldr	r3, [r3, #32]
 800bc82:	1c9a      	adds	r2, r3, #2
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	621a      	str	r2, [r3, #32]
 800bc88:	e008      	b.n	800bc9c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6a1b      	ldr	r3, [r3, #32]
 800bc8e:	1c59      	adds	r1, r3, #1
 800bc90:	687a      	ldr	r2, [r7, #4]
 800bc92:	6211      	str	r1, [r2, #32]
 800bc94:	781a      	ldrb	r2, [r3, #0]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bca0:	b29b      	uxth	r3, r3
 800bca2:	3b01      	subs	r3, #1
 800bca4:	b29b      	uxth	r3, r3
 800bca6:	687a      	ldr	r2, [r7, #4]
 800bca8:	4619      	mov	r1, r3
 800bcaa:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d10f      	bne.n	800bcd0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	68da      	ldr	r2, [r3, #12]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bcbe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	68da      	ldr	r2, [r3, #12]
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bcce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	e000      	b.n	800bcd6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bcd4:	2302      	movs	r3, #2
  }
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3714      	adds	r7, #20
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr

0800bce2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bce2:	b580      	push	{r7, lr}
 800bce4:	b082      	sub	sp, #8
 800bce6:	af00      	add	r7, sp, #0
 800bce8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	68da      	ldr	r2, [r3, #12]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bcf8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2220      	movs	r2, #32
 800bcfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f7ff fe70 	bl	800b9e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bd08:	2300      	movs	r3, #0
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3708      	adds	r7, #8
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}

0800bd12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bd12:	b580      	push	{r7, lr}
 800bd14:	b08c      	sub	sp, #48	; 0x30
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bd20:	b2db      	uxtb	r3, r3
 800bd22:	2b22      	cmp	r3, #34	; 0x22
 800bd24:	f040 80ab 	bne.w	800be7e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	689b      	ldr	r3, [r3, #8]
 800bd2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd30:	d117      	bne.n	800bd62 <UART_Receive_IT+0x50>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	691b      	ldr	r3, [r3, #16]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d113      	bne.n	800bd62 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd42:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	685b      	ldr	r3, [r3, #4]
 800bd4a:	b29b      	uxth	r3, r3
 800bd4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd50:	b29a      	uxth	r2, r3
 800bd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd5a:	1c9a      	adds	r2, r3, #2
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	629a      	str	r2, [r3, #40]	; 0x28
 800bd60:	e026      	b.n	800bdb0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd66:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	689b      	ldr	r3, [r3, #8]
 800bd70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd74:	d007      	beq.n	800bd86 <UART_Receive_IT+0x74>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	689b      	ldr	r3, [r3, #8]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d10a      	bne.n	800bd94 <UART_Receive_IT+0x82>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	691b      	ldr	r3, [r3, #16]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d106      	bne.n	800bd94 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	685b      	ldr	r3, [r3, #4]
 800bd8c:	b2da      	uxtb	r2, r3
 800bd8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd90:	701a      	strb	r2, [r3, #0]
 800bd92:	e008      	b.n	800bda6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	b2db      	uxtb	r3, r3
 800bd9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bda0:	b2da      	uxtb	r2, r3
 800bda2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdaa:	1c5a      	adds	r2, r3, #1
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	3b01      	subs	r3, #1
 800bdb8:	b29b      	uxth	r3, r3
 800bdba:	687a      	ldr	r2, [r7, #4]
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d15a      	bne.n	800be7a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	68da      	ldr	r2, [r3, #12]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f022 0220 	bic.w	r2, r2, #32
 800bdd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	68da      	ldr	r2, [r3, #12]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bde2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	695a      	ldr	r2, [r3, #20]
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f022 0201 	bic.w	r2, r2, #1
 800bdf2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2220      	movs	r2, #32
 800bdf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be00:	2b01      	cmp	r3, #1
 800be02:	d135      	bne.n	800be70 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2200      	movs	r2, #0
 800be08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	330c      	adds	r3, #12
 800be10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	e853 3f00 	ldrex	r3, [r3]
 800be18:	613b      	str	r3, [r7, #16]
   return(result);
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	f023 0310 	bic.w	r3, r3, #16
 800be20:	627b      	str	r3, [r7, #36]	; 0x24
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	330c      	adds	r3, #12
 800be28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be2a:	623a      	str	r2, [r7, #32]
 800be2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be2e:	69f9      	ldr	r1, [r7, #28]
 800be30:	6a3a      	ldr	r2, [r7, #32]
 800be32:	e841 2300 	strex	r3, r2, [r1]
 800be36:	61bb      	str	r3, [r7, #24]
   return(result);
 800be38:	69bb      	ldr	r3, [r7, #24]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d1e5      	bne.n	800be0a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f003 0310 	and.w	r3, r3, #16
 800be48:	2b10      	cmp	r3, #16
 800be4a:	d10a      	bne.n	800be62 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800be4c:	2300      	movs	r3, #0
 800be4e:	60fb      	str	r3, [r7, #12]
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	60fb      	str	r3, [r7, #12]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	60fb      	str	r3, [r7, #12]
 800be60:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800be66:	4619      	mov	r1, r3
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f007 f829 	bl	8012ec0 <HAL_UARTEx_RxEventCallback>
 800be6e:	e002      	b.n	800be76 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f002 fc4d 	bl	800e710 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800be76:	2300      	movs	r3, #0
 800be78:	e002      	b.n	800be80 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800be7a:	2300      	movs	r3, #0
 800be7c:	e000      	b.n	800be80 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800be7e:	2302      	movs	r3, #2
  }
}
 800be80:	4618      	mov	r0, r3
 800be82:	3730      	adds	r7, #48	; 0x30
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}

0800be88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800be8c:	b0c0      	sub	sp, #256	; 0x100
 800be8e:	af00      	add	r7, sp, #0
 800be90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	691b      	ldr	r3, [r3, #16]
 800be9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bea4:	68d9      	ldr	r1, [r3, #12]
 800bea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800beaa:	681a      	ldr	r2, [r3, #0]
 800beac:	ea40 0301 	orr.w	r3, r0, r1
 800beb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800beb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800beb6:	689a      	ldr	r2, [r3, #8]
 800beb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bebc:	691b      	ldr	r3, [r3, #16]
 800bebe:	431a      	orrs	r2, r3
 800bec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bec4:	695b      	ldr	r3, [r3, #20]
 800bec6:	431a      	orrs	r2, r3
 800bec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800becc:	69db      	ldr	r3, [r3, #28]
 800bece:	4313      	orrs	r3, r2
 800bed0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	68db      	ldr	r3, [r3, #12]
 800bedc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bee0:	f021 010c 	bic.w	r1, r1, #12
 800bee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bee8:	681a      	ldr	r2, [r3, #0]
 800beea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800beee:	430b      	orrs	r3, r1
 800bef0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	695b      	ldr	r3, [r3, #20]
 800befa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800befe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf02:	6999      	ldr	r1, [r3, #24]
 800bf04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf08:	681a      	ldr	r2, [r3, #0]
 800bf0a:	ea40 0301 	orr.w	r3, r0, r1
 800bf0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bf10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf14:	681a      	ldr	r2, [r3, #0]
 800bf16:	4b8f      	ldr	r3, [pc, #572]	; (800c154 <UART_SetConfig+0x2cc>)
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d005      	beq.n	800bf28 <UART_SetConfig+0xa0>
 800bf1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf20:	681a      	ldr	r2, [r3, #0]
 800bf22:	4b8d      	ldr	r3, [pc, #564]	; (800c158 <UART_SetConfig+0x2d0>)
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d104      	bne.n	800bf32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bf28:	f7fc fb70 	bl	800860c <HAL_RCC_GetPCLK2Freq>
 800bf2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bf30:	e003      	b.n	800bf3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bf32:	f7fc fb57 	bl	80085e4 <HAL_RCC_GetPCLK1Freq>
 800bf36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bf3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf3e:	69db      	ldr	r3, [r3, #28]
 800bf40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf44:	f040 810c 	bne.w	800c160 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bf48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bf52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bf56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bf5a:	4622      	mov	r2, r4
 800bf5c:	462b      	mov	r3, r5
 800bf5e:	1891      	adds	r1, r2, r2
 800bf60:	65b9      	str	r1, [r7, #88]	; 0x58
 800bf62:	415b      	adcs	r3, r3
 800bf64:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bf6a:	4621      	mov	r1, r4
 800bf6c:	eb12 0801 	adds.w	r8, r2, r1
 800bf70:	4629      	mov	r1, r5
 800bf72:	eb43 0901 	adc.w	r9, r3, r1
 800bf76:	f04f 0200 	mov.w	r2, #0
 800bf7a:	f04f 0300 	mov.w	r3, #0
 800bf7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bf82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bf86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bf8a:	4690      	mov	r8, r2
 800bf8c:	4699      	mov	r9, r3
 800bf8e:	4623      	mov	r3, r4
 800bf90:	eb18 0303 	adds.w	r3, r8, r3
 800bf94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bf98:	462b      	mov	r3, r5
 800bf9a:	eb49 0303 	adc.w	r3, r9, r3
 800bf9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bfa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfa6:	685b      	ldr	r3, [r3, #4]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bfae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bfb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bfb6:	460b      	mov	r3, r1
 800bfb8:	18db      	adds	r3, r3, r3
 800bfba:	653b      	str	r3, [r7, #80]	; 0x50
 800bfbc:	4613      	mov	r3, r2
 800bfbe:	eb42 0303 	adc.w	r3, r2, r3
 800bfc2:	657b      	str	r3, [r7, #84]	; 0x54
 800bfc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bfc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800bfcc:	f7f4 fe74 	bl	8000cb8 <__aeabi_uldivmod>
 800bfd0:	4602      	mov	r2, r0
 800bfd2:	460b      	mov	r3, r1
 800bfd4:	4b61      	ldr	r3, [pc, #388]	; (800c15c <UART_SetConfig+0x2d4>)
 800bfd6:	fba3 2302 	umull	r2, r3, r3, r2
 800bfda:	095b      	lsrs	r3, r3, #5
 800bfdc:	011c      	lsls	r4, r3, #4
 800bfde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bfe8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800bfec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800bff0:	4642      	mov	r2, r8
 800bff2:	464b      	mov	r3, r9
 800bff4:	1891      	adds	r1, r2, r2
 800bff6:	64b9      	str	r1, [r7, #72]	; 0x48
 800bff8:	415b      	adcs	r3, r3
 800bffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bffc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c000:	4641      	mov	r1, r8
 800c002:	eb12 0a01 	adds.w	sl, r2, r1
 800c006:	4649      	mov	r1, r9
 800c008:	eb43 0b01 	adc.w	fp, r3, r1
 800c00c:	f04f 0200 	mov.w	r2, #0
 800c010:	f04f 0300 	mov.w	r3, #0
 800c014:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c018:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c01c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c020:	4692      	mov	sl, r2
 800c022:	469b      	mov	fp, r3
 800c024:	4643      	mov	r3, r8
 800c026:	eb1a 0303 	adds.w	r3, sl, r3
 800c02a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c02e:	464b      	mov	r3, r9
 800c030:	eb4b 0303 	adc.w	r3, fp, r3
 800c034:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	2200      	movs	r2, #0
 800c040:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c044:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c048:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c04c:	460b      	mov	r3, r1
 800c04e:	18db      	adds	r3, r3, r3
 800c050:	643b      	str	r3, [r7, #64]	; 0x40
 800c052:	4613      	mov	r3, r2
 800c054:	eb42 0303 	adc.w	r3, r2, r3
 800c058:	647b      	str	r3, [r7, #68]	; 0x44
 800c05a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c05e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c062:	f7f4 fe29 	bl	8000cb8 <__aeabi_uldivmod>
 800c066:	4602      	mov	r2, r0
 800c068:	460b      	mov	r3, r1
 800c06a:	4611      	mov	r1, r2
 800c06c:	4b3b      	ldr	r3, [pc, #236]	; (800c15c <UART_SetConfig+0x2d4>)
 800c06e:	fba3 2301 	umull	r2, r3, r3, r1
 800c072:	095b      	lsrs	r3, r3, #5
 800c074:	2264      	movs	r2, #100	; 0x64
 800c076:	fb02 f303 	mul.w	r3, r2, r3
 800c07a:	1acb      	subs	r3, r1, r3
 800c07c:	00db      	lsls	r3, r3, #3
 800c07e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c082:	4b36      	ldr	r3, [pc, #216]	; (800c15c <UART_SetConfig+0x2d4>)
 800c084:	fba3 2302 	umull	r2, r3, r3, r2
 800c088:	095b      	lsrs	r3, r3, #5
 800c08a:	005b      	lsls	r3, r3, #1
 800c08c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c090:	441c      	add	r4, r3
 800c092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c096:	2200      	movs	r2, #0
 800c098:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c09c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c0a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c0a4:	4642      	mov	r2, r8
 800c0a6:	464b      	mov	r3, r9
 800c0a8:	1891      	adds	r1, r2, r2
 800c0aa:	63b9      	str	r1, [r7, #56]	; 0x38
 800c0ac:	415b      	adcs	r3, r3
 800c0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c0b4:	4641      	mov	r1, r8
 800c0b6:	1851      	adds	r1, r2, r1
 800c0b8:	6339      	str	r1, [r7, #48]	; 0x30
 800c0ba:	4649      	mov	r1, r9
 800c0bc:	414b      	adcs	r3, r1
 800c0be:	637b      	str	r3, [r7, #52]	; 0x34
 800c0c0:	f04f 0200 	mov.w	r2, #0
 800c0c4:	f04f 0300 	mov.w	r3, #0
 800c0c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c0cc:	4659      	mov	r1, fp
 800c0ce:	00cb      	lsls	r3, r1, #3
 800c0d0:	4651      	mov	r1, sl
 800c0d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c0d6:	4651      	mov	r1, sl
 800c0d8:	00ca      	lsls	r2, r1, #3
 800c0da:	4610      	mov	r0, r2
 800c0dc:	4619      	mov	r1, r3
 800c0de:	4603      	mov	r3, r0
 800c0e0:	4642      	mov	r2, r8
 800c0e2:	189b      	adds	r3, r3, r2
 800c0e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c0e8:	464b      	mov	r3, r9
 800c0ea:	460a      	mov	r2, r1
 800c0ec:	eb42 0303 	adc.w	r3, r2, r3
 800c0f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c0f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0f8:	685b      	ldr	r3, [r3, #4]
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c100:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c104:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c108:	460b      	mov	r3, r1
 800c10a:	18db      	adds	r3, r3, r3
 800c10c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c10e:	4613      	mov	r3, r2
 800c110:	eb42 0303 	adc.w	r3, r2, r3
 800c114:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c116:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c11a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c11e:	f7f4 fdcb 	bl	8000cb8 <__aeabi_uldivmod>
 800c122:	4602      	mov	r2, r0
 800c124:	460b      	mov	r3, r1
 800c126:	4b0d      	ldr	r3, [pc, #52]	; (800c15c <UART_SetConfig+0x2d4>)
 800c128:	fba3 1302 	umull	r1, r3, r3, r2
 800c12c:	095b      	lsrs	r3, r3, #5
 800c12e:	2164      	movs	r1, #100	; 0x64
 800c130:	fb01 f303 	mul.w	r3, r1, r3
 800c134:	1ad3      	subs	r3, r2, r3
 800c136:	00db      	lsls	r3, r3, #3
 800c138:	3332      	adds	r3, #50	; 0x32
 800c13a:	4a08      	ldr	r2, [pc, #32]	; (800c15c <UART_SetConfig+0x2d4>)
 800c13c:	fba2 2303 	umull	r2, r3, r2, r3
 800c140:	095b      	lsrs	r3, r3, #5
 800c142:	f003 0207 	and.w	r2, r3, #7
 800c146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	4422      	add	r2, r4
 800c14e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c150:	e105      	b.n	800c35e <UART_SetConfig+0x4d6>
 800c152:	bf00      	nop
 800c154:	40011000 	.word	0x40011000
 800c158:	40011400 	.word	0x40011400
 800c15c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c164:	2200      	movs	r2, #0
 800c166:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c16a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c16e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c172:	4642      	mov	r2, r8
 800c174:	464b      	mov	r3, r9
 800c176:	1891      	adds	r1, r2, r2
 800c178:	6239      	str	r1, [r7, #32]
 800c17a:	415b      	adcs	r3, r3
 800c17c:	627b      	str	r3, [r7, #36]	; 0x24
 800c17e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c182:	4641      	mov	r1, r8
 800c184:	1854      	adds	r4, r2, r1
 800c186:	4649      	mov	r1, r9
 800c188:	eb43 0501 	adc.w	r5, r3, r1
 800c18c:	f04f 0200 	mov.w	r2, #0
 800c190:	f04f 0300 	mov.w	r3, #0
 800c194:	00eb      	lsls	r3, r5, #3
 800c196:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c19a:	00e2      	lsls	r2, r4, #3
 800c19c:	4614      	mov	r4, r2
 800c19e:	461d      	mov	r5, r3
 800c1a0:	4643      	mov	r3, r8
 800c1a2:	18e3      	adds	r3, r4, r3
 800c1a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c1a8:	464b      	mov	r3, r9
 800c1aa:	eb45 0303 	adc.w	r3, r5, r3
 800c1ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c1b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c1be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c1c2:	f04f 0200 	mov.w	r2, #0
 800c1c6:	f04f 0300 	mov.w	r3, #0
 800c1ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c1ce:	4629      	mov	r1, r5
 800c1d0:	008b      	lsls	r3, r1, #2
 800c1d2:	4621      	mov	r1, r4
 800c1d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c1d8:	4621      	mov	r1, r4
 800c1da:	008a      	lsls	r2, r1, #2
 800c1dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c1e0:	f7f4 fd6a 	bl	8000cb8 <__aeabi_uldivmod>
 800c1e4:	4602      	mov	r2, r0
 800c1e6:	460b      	mov	r3, r1
 800c1e8:	4b60      	ldr	r3, [pc, #384]	; (800c36c <UART_SetConfig+0x4e4>)
 800c1ea:	fba3 2302 	umull	r2, r3, r3, r2
 800c1ee:	095b      	lsrs	r3, r3, #5
 800c1f0:	011c      	lsls	r4, r3, #4
 800c1f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c1fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c200:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c204:	4642      	mov	r2, r8
 800c206:	464b      	mov	r3, r9
 800c208:	1891      	adds	r1, r2, r2
 800c20a:	61b9      	str	r1, [r7, #24]
 800c20c:	415b      	adcs	r3, r3
 800c20e:	61fb      	str	r3, [r7, #28]
 800c210:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c214:	4641      	mov	r1, r8
 800c216:	1851      	adds	r1, r2, r1
 800c218:	6139      	str	r1, [r7, #16]
 800c21a:	4649      	mov	r1, r9
 800c21c:	414b      	adcs	r3, r1
 800c21e:	617b      	str	r3, [r7, #20]
 800c220:	f04f 0200 	mov.w	r2, #0
 800c224:	f04f 0300 	mov.w	r3, #0
 800c228:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c22c:	4659      	mov	r1, fp
 800c22e:	00cb      	lsls	r3, r1, #3
 800c230:	4651      	mov	r1, sl
 800c232:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c236:	4651      	mov	r1, sl
 800c238:	00ca      	lsls	r2, r1, #3
 800c23a:	4610      	mov	r0, r2
 800c23c:	4619      	mov	r1, r3
 800c23e:	4603      	mov	r3, r0
 800c240:	4642      	mov	r2, r8
 800c242:	189b      	adds	r3, r3, r2
 800c244:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c248:	464b      	mov	r3, r9
 800c24a:	460a      	mov	r2, r1
 800c24c:	eb42 0303 	adc.w	r3, r2, r3
 800c250:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c258:	685b      	ldr	r3, [r3, #4]
 800c25a:	2200      	movs	r2, #0
 800c25c:	67bb      	str	r3, [r7, #120]	; 0x78
 800c25e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c260:	f04f 0200 	mov.w	r2, #0
 800c264:	f04f 0300 	mov.w	r3, #0
 800c268:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c26c:	4649      	mov	r1, r9
 800c26e:	008b      	lsls	r3, r1, #2
 800c270:	4641      	mov	r1, r8
 800c272:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c276:	4641      	mov	r1, r8
 800c278:	008a      	lsls	r2, r1, #2
 800c27a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c27e:	f7f4 fd1b 	bl	8000cb8 <__aeabi_uldivmod>
 800c282:	4602      	mov	r2, r0
 800c284:	460b      	mov	r3, r1
 800c286:	4b39      	ldr	r3, [pc, #228]	; (800c36c <UART_SetConfig+0x4e4>)
 800c288:	fba3 1302 	umull	r1, r3, r3, r2
 800c28c:	095b      	lsrs	r3, r3, #5
 800c28e:	2164      	movs	r1, #100	; 0x64
 800c290:	fb01 f303 	mul.w	r3, r1, r3
 800c294:	1ad3      	subs	r3, r2, r3
 800c296:	011b      	lsls	r3, r3, #4
 800c298:	3332      	adds	r3, #50	; 0x32
 800c29a:	4a34      	ldr	r2, [pc, #208]	; (800c36c <UART_SetConfig+0x4e4>)
 800c29c:	fba2 2303 	umull	r2, r3, r2, r3
 800c2a0:	095b      	lsrs	r3, r3, #5
 800c2a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c2a6:	441c      	add	r4, r3
 800c2a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	673b      	str	r3, [r7, #112]	; 0x70
 800c2b0:	677a      	str	r2, [r7, #116]	; 0x74
 800c2b2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c2b6:	4642      	mov	r2, r8
 800c2b8:	464b      	mov	r3, r9
 800c2ba:	1891      	adds	r1, r2, r2
 800c2bc:	60b9      	str	r1, [r7, #8]
 800c2be:	415b      	adcs	r3, r3
 800c2c0:	60fb      	str	r3, [r7, #12]
 800c2c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c2c6:	4641      	mov	r1, r8
 800c2c8:	1851      	adds	r1, r2, r1
 800c2ca:	6039      	str	r1, [r7, #0]
 800c2cc:	4649      	mov	r1, r9
 800c2ce:	414b      	adcs	r3, r1
 800c2d0:	607b      	str	r3, [r7, #4]
 800c2d2:	f04f 0200 	mov.w	r2, #0
 800c2d6:	f04f 0300 	mov.w	r3, #0
 800c2da:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c2de:	4659      	mov	r1, fp
 800c2e0:	00cb      	lsls	r3, r1, #3
 800c2e2:	4651      	mov	r1, sl
 800c2e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c2e8:	4651      	mov	r1, sl
 800c2ea:	00ca      	lsls	r2, r1, #3
 800c2ec:	4610      	mov	r0, r2
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	4642      	mov	r2, r8
 800c2f4:	189b      	adds	r3, r3, r2
 800c2f6:	66bb      	str	r3, [r7, #104]	; 0x68
 800c2f8:	464b      	mov	r3, r9
 800c2fa:	460a      	mov	r2, r1
 800c2fc:	eb42 0303 	adc.w	r3, r2, r3
 800c300:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c306:	685b      	ldr	r3, [r3, #4]
 800c308:	2200      	movs	r2, #0
 800c30a:	663b      	str	r3, [r7, #96]	; 0x60
 800c30c:	667a      	str	r2, [r7, #100]	; 0x64
 800c30e:	f04f 0200 	mov.w	r2, #0
 800c312:	f04f 0300 	mov.w	r3, #0
 800c316:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c31a:	4649      	mov	r1, r9
 800c31c:	008b      	lsls	r3, r1, #2
 800c31e:	4641      	mov	r1, r8
 800c320:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c324:	4641      	mov	r1, r8
 800c326:	008a      	lsls	r2, r1, #2
 800c328:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c32c:	f7f4 fcc4 	bl	8000cb8 <__aeabi_uldivmod>
 800c330:	4602      	mov	r2, r0
 800c332:	460b      	mov	r3, r1
 800c334:	4b0d      	ldr	r3, [pc, #52]	; (800c36c <UART_SetConfig+0x4e4>)
 800c336:	fba3 1302 	umull	r1, r3, r3, r2
 800c33a:	095b      	lsrs	r3, r3, #5
 800c33c:	2164      	movs	r1, #100	; 0x64
 800c33e:	fb01 f303 	mul.w	r3, r1, r3
 800c342:	1ad3      	subs	r3, r2, r3
 800c344:	011b      	lsls	r3, r3, #4
 800c346:	3332      	adds	r3, #50	; 0x32
 800c348:	4a08      	ldr	r2, [pc, #32]	; (800c36c <UART_SetConfig+0x4e4>)
 800c34a:	fba2 2303 	umull	r2, r3, r2, r3
 800c34e:	095b      	lsrs	r3, r3, #5
 800c350:	f003 020f 	and.w	r2, r3, #15
 800c354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	4422      	add	r2, r4
 800c35c:	609a      	str	r2, [r3, #8]
}
 800c35e:	bf00      	nop
 800c360:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c364:	46bd      	mov	sp, r7
 800c366:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c36a:	bf00      	nop
 800c36c:	51eb851f 	.word	0x51eb851f

0800c370 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800c370:	b084      	sub	sp, #16
 800c372:	b480      	push	{r7}
 800c374:	b085      	sub	sp, #20
 800c376:	af00      	add	r7, sp, #0
 800c378:	6078      	str	r0, [r7, #4]
 800c37a:	f107 001c 	add.w	r0, r7, #28
 800c37e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c382:	2300      	movs	r3, #0
 800c384:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c386:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c388:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c38a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c38e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c390:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c392:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c396:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c39a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c39c:	68fa      	ldr	r2, [r7, #12]
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	685b      	ldr	r3, [r3, #4]
 800c3a6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800c3aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c3ae:	68fa      	ldr	r2, [r7, #12]
 800c3b0:	431a      	orrs	r2, r3
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c3b6:	2300      	movs	r3, #0
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3714      	adds	r7, #20
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	b004      	add	sp, #16
 800c3c4:	4770      	bx	lr

0800c3c6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800c3c6:	b480      	push	{r7}
 800c3c8:	b083      	sub	sp, #12
 800c3ca:	af00      	add	r7, sp, #0
 800c3cc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	370c      	adds	r7, #12
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3de:	4770      	bx	lr

0800c3e0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800c3e0:	b480      	push	{r7}
 800c3e2:	b083      	sub	sp, #12
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	681a      	ldr	r2, [r3, #0]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c3f4:	2300      	movs	r3, #0
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	370c      	adds	r7, #12
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c400:	4770      	bx	lr

0800c402 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800c402:	b480      	push	{r7}
 800c404:	b083      	sub	sp, #12
 800c406:	af00      	add	r7, sp, #0
 800c408:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2203      	movs	r2, #3
 800c40e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c410:	2300      	movs	r3, #0
}
 800c412:	4618      	mov	r0, r3
 800c414:	370c      	adds	r7, #12
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr

0800c41e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800c41e:	b480      	push	{r7}
 800c420:	b083      	sub	sp, #12
 800c422:	af00      	add	r7, sp, #0
 800c424:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f003 0303 	and.w	r3, r3, #3
}
 800c42e:	4618      	mov	r0, r3
 800c430:	370c      	adds	r7, #12
 800c432:	46bd      	mov	sp, r7
 800c434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c438:	4770      	bx	lr

0800c43a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800c43a:	b480      	push	{r7}
 800c43c:	b085      	sub	sp, #20
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
 800c442:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c444:	2300      	movs	r3, #0
 800c446:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	681a      	ldr	r2, [r3, #0]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c458:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c45e:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c464:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c466:	68fa      	ldr	r2, [r7, #12]
 800c468:	4313      	orrs	r3, r2
 800c46a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c474:	f023 030f 	bic.w	r3, r3, #15
 800c478:	68fa      	ldr	r2, [r7, #12]
 800c47a:	431a      	orrs	r2, r3
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c480:	2300      	movs	r3, #0
}
 800c482:	4618      	mov	r0, r3
 800c484:	3714      	adds	r7, #20
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr

0800c48e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800c48e:	b480      	push	{r7}
 800c490:	b083      	sub	sp, #12
 800c492:	af00      	add	r7, sp, #0
 800c494:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	691b      	ldr	r3, [r3, #16]
 800c49a:	b2db      	uxtb	r3, r3
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	370c      	adds	r7, #12
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr

0800c4a8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b085      	sub	sp, #20
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	3314      	adds	r3, #20
 800c4b6:	461a      	mov	r2, r3
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	4413      	add	r3, r2
 800c4bc:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
}  
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	3714      	adds	r7, #20
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4cc:	4770      	bx	lr

0800c4ce <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800c4ce:	b480      	push	{r7}
 800c4d0:	b085      	sub	sp, #20
 800c4d2:	af00      	add	r7, sp, #0
 800c4d4:	6078      	str	r0, [r7, #4]
 800c4d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c4d8:	2300      	movs	r3, #0
 800c4da:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	681a      	ldr	r2, [r3, #0]
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	685a      	ldr	r2, [r3, #4]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c4f4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c4fa:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c500:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c502:	68fa      	ldr	r2, [r7, #12]
 800c504:	4313      	orrs	r3, r2
 800c506:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c50c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	431a      	orrs	r2, r3
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c518:	2300      	movs	r3, #0

}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3714      	adds	r7, #20
 800c51e:	46bd      	mov	sp, r7
 800c520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c524:	4770      	bx	lr

0800c526 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800c526:	b580      	push	{r7, lr}
 800c528:	b088      	sub	sp, #32
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
 800c52e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c534:	2310      	movs	r3, #16
 800c536:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c538:	2340      	movs	r3, #64	; 0x40
 800c53a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c53c:	2300      	movs	r3, #0
 800c53e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c540:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c544:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c546:	f107 0308 	add.w	r3, r7, #8
 800c54a:	4619      	mov	r1, r3
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f7ff ff74 	bl	800c43a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800c552:	f241 3288 	movw	r2, #5000	; 0x1388
 800c556:	2110      	movs	r1, #16
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f000 f9d7 	bl	800c90c <SDMMC_GetCmdResp1>
 800c55e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c560:	69fb      	ldr	r3, [r7, #28]
}
 800c562:	4618      	mov	r0, r3
 800c564:	3720      	adds	r7, #32
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}

0800c56a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c56a:	b580      	push	{r7, lr}
 800c56c:	b088      	sub	sp, #32
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
 800c572:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c578:	2311      	movs	r3, #17
 800c57a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c57c:	2340      	movs	r3, #64	; 0x40
 800c57e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c580:	2300      	movs	r3, #0
 800c582:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c588:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c58a:	f107 0308 	add.w	r3, r7, #8
 800c58e:	4619      	mov	r1, r3
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f7ff ff52 	bl	800c43a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c596:	f241 3288 	movw	r2, #5000	; 0x1388
 800c59a:	2111      	movs	r1, #17
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f000 f9b5 	bl	800c90c <SDMMC_GetCmdResp1>
 800c5a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5a4:	69fb      	ldr	r3, [r7, #28]
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3720      	adds	r7, #32
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}

0800c5ae <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c5ae:	b580      	push	{r7, lr}
 800c5b0:	b088      	sub	sp, #32
 800c5b2:	af00      	add	r7, sp, #0
 800c5b4:	6078      	str	r0, [r7, #4]
 800c5b6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c5bc:	2312      	movs	r3, #18
 800c5be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c5c0:	2340      	movs	r3, #64	; 0x40
 800c5c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c5c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c5ce:	f107 0308 	add.w	r3, r7, #8
 800c5d2:	4619      	mov	r1, r3
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f7ff ff30 	bl	800c43a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c5da:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5de:	2112      	movs	r1, #18
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f000 f993 	bl	800c90c <SDMMC_GetCmdResp1>
 800c5e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5e8:	69fb      	ldr	r3, [r7, #28]
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3720      	adds	r7, #32
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}

0800c5f2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c5f2:	b580      	push	{r7, lr}
 800c5f4:	b088      	sub	sp, #32
 800c5f6:	af00      	add	r7, sp, #0
 800c5f8:	6078      	str	r0, [r7, #4]
 800c5fa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c600:	2318      	movs	r3, #24
 800c602:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c604:	2340      	movs	r3, #64	; 0x40
 800c606:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c608:	2300      	movs	r3, #0
 800c60a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c60c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c610:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c612:	f107 0308 	add.w	r3, r7, #8
 800c616:	4619      	mov	r1, r3
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f7ff ff0e 	bl	800c43a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c61e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c622:	2118      	movs	r1, #24
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f000 f971 	bl	800c90c <SDMMC_GetCmdResp1>
 800c62a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c62c:	69fb      	ldr	r3, [r7, #28]
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3720      	adds	r7, #32
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}

0800c636 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c636:	b580      	push	{r7, lr}
 800c638:	b088      	sub	sp, #32
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	6078      	str	r0, [r7, #4]
 800c63e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c644:	2319      	movs	r3, #25
 800c646:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c648:	2340      	movs	r3, #64	; 0x40
 800c64a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c64c:	2300      	movs	r3, #0
 800c64e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c650:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c654:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c656:	f107 0308 	add.w	r3, r7, #8
 800c65a:	4619      	mov	r1, r3
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f7ff feec 	bl	800c43a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c662:	f241 3288 	movw	r2, #5000	; 0x1388
 800c666:	2119      	movs	r1, #25
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f000 f94f 	bl	800c90c <SDMMC_GetCmdResp1>
 800c66e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c670:	69fb      	ldr	r3, [r7, #28]
}
 800c672:	4618      	mov	r0, r3
 800c674:	3720      	adds	r7, #32
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}
	...

0800c67c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b088      	sub	sp, #32
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c684:	2300      	movs	r3, #0
 800c686:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c688:	230c      	movs	r3, #12
 800c68a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c68c:	2340      	movs	r3, #64	; 0x40
 800c68e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c690:	2300      	movs	r3, #0
 800c692:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c694:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c698:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c69a:	f107 0308 	add.w	r3, r7, #8
 800c69e:	4619      	mov	r1, r3
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f7ff feca 	bl	800c43a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800c6a6:	4a05      	ldr	r2, [pc, #20]	; (800c6bc <SDMMC_CmdStopTransfer+0x40>)
 800c6a8:	210c      	movs	r1, #12
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f000 f92e 	bl	800c90c <SDMMC_GetCmdResp1>
 800c6b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6b2:	69fb      	ldr	r3, [r7, #28]
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3720      	adds	r7, #32
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}
 800c6bc:	05f5e100 	.word	0x05f5e100

0800c6c0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b08a      	sub	sp, #40	; 0x28
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	60f8      	str	r0, [r7, #12]
 800c6c8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c6d0:	2307      	movs	r3, #7
 800c6d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c6d4:	2340      	movs	r3, #64	; 0x40
 800c6d6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c6dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6e0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c6e2:	f107 0310 	add.w	r3, r7, #16
 800c6e6:	4619      	mov	r1, r3
 800c6e8:	68f8      	ldr	r0, [r7, #12]
 800c6ea:	f7ff fea6 	bl	800c43a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800c6ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6f2:	2107      	movs	r1, #7
 800c6f4:	68f8      	ldr	r0, [r7, #12]
 800c6f6:	f000 f909 	bl	800c90c <SDMMC_GetCmdResp1>
 800c6fa:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3728      	adds	r7, #40	; 0x28
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}

0800c706 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800c706:	b580      	push	{r7, lr}
 800c708:	b088      	sub	sp, #32
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c70e:	2300      	movs	r3, #0
 800c710:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c712:	2300      	movs	r3, #0
 800c714:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800c716:	2300      	movs	r3, #0
 800c718:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c71a:	2300      	movs	r3, #0
 800c71c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c71e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c722:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c724:	f107 0308 	add.w	r3, r7, #8
 800c728:	4619      	mov	r1, r3
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f7ff fe85 	bl	800c43a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f000 fb23 	bl	800cd7c <SDMMC_GetCmdError>
 800c736:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c738:	69fb      	ldr	r3, [r7, #28]
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3720      	adds	r7, #32
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}

0800c742 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800c742:	b580      	push	{r7, lr}
 800c744:	b088      	sub	sp, #32
 800c746:	af00      	add	r7, sp, #0
 800c748:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c74a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c74e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c750:	2308      	movs	r3, #8
 800c752:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c754:	2340      	movs	r3, #64	; 0x40
 800c756:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c758:	2300      	movs	r3, #0
 800c75a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c75c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c760:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c762:	f107 0308 	add.w	r3, r7, #8
 800c766:	4619      	mov	r1, r3
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f7ff fe66 	bl	800c43a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f000 fab6 	bl	800cce0 <SDMMC_GetCmdResp7>
 800c774:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c776:	69fb      	ldr	r3, [r7, #28]
}
 800c778:	4618      	mov	r0, r3
 800c77a:	3720      	adds	r7, #32
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}

0800c780 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b088      	sub	sp, #32
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c78e:	2337      	movs	r3, #55	; 0x37
 800c790:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c792:	2340      	movs	r3, #64	; 0x40
 800c794:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c796:	2300      	movs	r3, #0
 800c798:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c79a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c79e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c7a0:	f107 0308 	add.w	r3, r7, #8
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f7ff fe47 	bl	800c43a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800c7ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7b0:	2137      	movs	r1, #55	; 0x37
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f000 f8aa 	bl	800c90c <SDMMC_GetCmdResp1>
 800c7b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7ba:	69fb      	ldr	r3, [r7, #28]
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3720      	adds	r7, #32
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b088      	sub	sp, #32
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c7d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c7d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c7da:	2329      	movs	r3, #41	; 0x29
 800c7dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c7de:	2340      	movs	r3, #64	; 0x40
 800c7e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c7e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c7ec:	f107 0308 	add.w	r3, r7, #8
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f7ff fe21 	bl	800c43a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f000 f9bd 	bl	800cb78 <SDMMC_GetCmdResp3>
 800c7fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c800:	69fb      	ldr	r3, [r7, #28]
}
 800c802:	4618      	mov	r0, r3
 800c804:	3720      	adds	r7, #32
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}

0800c80a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800c80a:	b580      	push	{r7, lr}
 800c80c:	b088      	sub	sp, #32
 800c80e:	af00      	add	r7, sp, #0
 800c810:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c812:	2300      	movs	r3, #0
 800c814:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c816:	2302      	movs	r3, #2
 800c818:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c81a:	23c0      	movs	r3, #192	; 0xc0
 800c81c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c81e:	2300      	movs	r3, #0
 800c820:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c826:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c828:	f107 0308 	add.w	r3, r7, #8
 800c82c:	4619      	mov	r1, r3
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f7ff fe03 	bl	800c43a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f000 f957 	bl	800cae8 <SDMMC_GetCmdResp2>
 800c83a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c83c:	69fb      	ldr	r3, [r7, #28]
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3720      	adds	r7, #32
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}

0800c846 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c846:	b580      	push	{r7, lr}
 800c848:	b088      	sub	sp, #32
 800c84a:	af00      	add	r7, sp, #0
 800c84c:	6078      	str	r0, [r7, #4]
 800c84e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c854:	2309      	movs	r3, #9
 800c856:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c858:	23c0      	movs	r3, #192	; 0xc0
 800c85a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c85c:	2300      	movs	r3, #0
 800c85e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c864:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c866:	f107 0308 	add.w	r3, r7, #8
 800c86a:	4619      	mov	r1, r3
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f7ff fde4 	bl	800c43a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f000 f938 	bl	800cae8 <SDMMC_GetCmdResp2>
 800c878:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c87a:	69fb      	ldr	r3, [r7, #28]
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3720      	adds	r7, #32
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}

0800c884 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b088      	sub	sp, #32
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
 800c88c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c88e:	2300      	movs	r3, #0
 800c890:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c892:	2303      	movs	r3, #3
 800c894:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c896:	2340      	movs	r3, #64	; 0x40
 800c898:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c89a:	2300      	movs	r3, #0
 800c89c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c89e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c8a4:	f107 0308 	add.w	r3, r7, #8
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f7ff fdc5 	bl	800c43a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c8b0:	683a      	ldr	r2, [r7, #0]
 800c8b2:	2103      	movs	r1, #3
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f000 f99d 	bl	800cbf4 <SDMMC_GetCmdResp6>
 800c8ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8bc:	69fb      	ldr	r3, [r7, #28]
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3720      	adds	r7, #32
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}

0800c8c6 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c8c6:	b580      	push	{r7, lr}
 800c8c8:	b088      	sub	sp, #32
 800c8ca:	af00      	add	r7, sp, #0
 800c8cc:	6078      	str	r0, [r7, #4]
 800c8ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c8d4:	230d      	movs	r3, #13
 800c8d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c8d8:	2340      	movs	r3, #64	; 0x40
 800c8da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c8e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c8e6:	f107 0308 	add.w	r3, r7, #8
 800c8ea:	4619      	mov	r1, r3
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f7ff fda4 	bl	800c43a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800c8f2:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8f6:	210d      	movs	r1, #13
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f000 f807 	bl	800c90c <SDMMC_GetCmdResp1>
 800c8fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c900:	69fb      	ldr	r3, [r7, #28]
}
 800c902:	4618      	mov	r0, r3
 800c904:	3720      	adds	r7, #32
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}
	...

0800c90c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b088      	sub	sp, #32
 800c910:	af00      	add	r7, sp, #0
 800c912:	60f8      	str	r0, [r7, #12]
 800c914:	460b      	mov	r3, r1
 800c916:	607a      	str	r2, [r7, #4]
 800c918:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c91a:	4b70      	ldr	r3, [pc, #448]	; (800cadc <SDMMC_GetCmdResp1+0x1d0>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	4a70      	ldr	r2, [pc, #448]	; (800cae0 <SDMMC_GetCmdResp1+0x1d4>)
 800c920:	fba2 2303 	umull	r2, r3, r2, r3
 800c924:	0a5a      	lsrs	r2, r3, #9
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	fb02 f303 	mul.w	r3, r2, r3
 800c92c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c92e:	69fb      	ldr	r3, [r7, #28]
 800c930:	1e5a      	subs	r2, r3, #1
 800c932:	61fa      	str	r2, [r7, #28]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d102      	bne.n	800c93e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c938:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c93c:	e0c9      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c942:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c944:	69bb      	ldr	r3, [r7, #24]
 800c946:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d0ef      	beq.n	800c92e <SDMMC_GetCmdResp1+0x22>
 800c94e:	69bb      	ldr	r3, [r7, #24]
 800c950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c954:	2b00      	cmp	r3, #0
 800c956:	d1ea      	bne.n	800c92e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c95c:	f003 0304 	and.w	r3, r3, #4
 800c960:	2b00      	cmp	r3, #0
 800c962:	d004      	beq.n	800c96e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	2204      	movs	r2, #4
 800c968:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c96a:	2304      	movs	r3, #4
 800c96c:	e0b1      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c972:	f003 0301 	and.w	r3, r3, #1
 800c976:	2b00      	cmp	r3, #0
 800c978:	d004      	beq.n	800c984 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	2201      	movs	r2, #1
 800c97e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c980:	2301      	movs	r3, #1
 800c982:	e0a6      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	22c5      	movs	r2, #197	; 0xc5
 800c988:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c98a:	68f8      	ldr	r0, [r7, #12]
 800c98c:	f7ff fd7f 	bl	800c48e <SDIO_GetCommandResponse>
 800c990:	4603      	mov	r3, r0
 800c992:	461a      	mov	r2, r3
 800c994:	7afb      	ldrb	r3, [r7, #11]
 800c996:	4293      	cmp	r3, r2
 800c998:	d001      	beq.n	800c99e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c99a:	2301      	movs	r3, #1
 800c99c:	e099      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c99e:	2100      	movs	r1, #0
 800c9a0:	68f8      	ldr	r0, [r7, #12]
 800c9a2:	f7ff fd81 	bl	800c4a8 <SDIO_GetResponse>
 800c9a6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c9a8:	697a      	ldr	r2, [r7, #20]
 800c9aa:	4b4e      	ldr	r3, [pc, #312]	; (800cae4 <SDMMC_GetCmdResp1+0x1d8>)
 800c9ac:	4013      	ands	r3, r2
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d101      	bne.n	800c9b6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	e08d      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	da02      	bge.n	800c9c2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c9bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c9c0:	e087      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d001      	beq.n	800c9d0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c9cc:	2340      	movs	r3, #64	; 0x40
 800c9ce:	e080      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d001      	beq.n	800c9de <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c9da:	2380      	movs	r3, #128	; 0x80
 800c9dc:	e079      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d002      	beq.n	800c9ee <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c9e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c9ec:	e071      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d002      	beq.n	800c9fe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c9f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c9fc:	e069      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d002      	beq.n	800ca0e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ca08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca0c:	e061      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d002      	beq.n	800ca1e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ca18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ca1c:	e059      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d002      	beq.n	800ca2e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ca28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ca2c:	e051      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d002      	beq.n	800ca3e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ca38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ca3c:	e049      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d002      	beq.n	800ca4e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ca48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ca4c:	e041      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d002      	beq.n	800ca5e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ca58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca5c:	e039      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d002      	beq.n	800ca6e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ca68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ca6c:	e031      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d002      	beq.n	800ca7e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ca78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ca7c:	e029      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d002      	beq.n	800ca8e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ca88:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ca8c:	e021      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d002      	beq.n	800ca9e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ca98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ca9c:	e019      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d002      	beq.n	800caae <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800caa8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800caac:	e011      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d002      	beq.n	800cabe <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cab8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cabc:	e009      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	f003 0308 	and.w	r3, r3, #8
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d002      	beq.n	800cace <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cac8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cacc:	e001      	b.n	800cad2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cace:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3720      	adds	r7, #32
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}
 800cada:	bf00      	nop
 800cadc:	2000000c 	.word	0x2000000c
 800cae0:	10624dd3 	.word	0x10624dd3
 800cae4:	fdffe008 	.word	0xfdffe008

0800cae8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800cae8:	b480      	push	{r7}
 800caea:	b085      	sub	sp, #20
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800caf0:	4b1f      	ldr	r3, [pc, #124]	; (800cb70 <SDMMC_GetCmdResp2+0x88>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	4a1f      	ldr	r2, [pc, #124]	; (800cb74 <SDMMC_GetCmdResp2+0x8c>)
 800caf6:	fba2 2303 	umull	r2, r3, r2, r3
 800cafa:	0a5b      	lsrs	r3, r3, #9
 800cafc:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb00:	fb02 f303 	mul.w	r3, r2, r3
 800cb04:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	1e5a      	subs	r2, r3, #1
 800cb0a:	60fa      	str	r2, [r7, #12]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d102      	bne.n	800cb16 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cb10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cb14:	e026      	b.n	800cb64 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb1a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cb1c:	68bb      	ldr	r3, [r7, #8]
 800cb1e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d0ef      	beq.n	800cb06 <SDMMC_GetCmdResp2+0x1e>
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d1ea      	bne.n	800cb06 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb34:	f003 0304 	and.w	r3, r3, #4
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d004      	beq.n	800cb46 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2204      	movs	r2, #4
 800cb40:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cb42:	2304      	movs	r3, #4
 800cb44:	e00e      	b.n	800cb64 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb4a:	f003 0301 	and.w	r3, r3, #1
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d004      	beq.n	800cb5c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2201      	movs	r2, #1
 800cb56:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb58:	2301      	movs	r3, #1
 800cb5a:	e003      	b.n	800cb64 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	22c5      	movs	r2, #197	; 0xc5
 800cb60:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800cb62:	2300      	movs	r3, #0
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3714      	adds	r7, #20
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6e:	4770      	bx	lr
 800cb70:	2000000c 	.word	0x2000000c
 800cb74:	10624dd3 	.word	0x10624dd3

0800cb78 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b085      	sub	sp, #20
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cb80:	4b1a      	ldr	r3, [pc, #104]	; (800cbec <SDMMC_GetCmdResp3+0x74>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	4a1a      	ldr	r2, [pc, #104]	; (800cbf0 <SDMMC_GetCmdResp3+0x78>)
 800cb86:	fba2 2303 	umull	r2, r3, r2, r3
 800cb8a:	0a5b      	lsrs	r3, r3, #9
 800cb8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb90:	fb02 f303 	mul.w	r3, r2, r3
 800cb94:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	1e5a      	subs	r2, r3, #1
 800cb9a:	60fa      	str	r2, [r7, #12]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d102      	bne.n	800cba6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cba0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cba4:	e01b      	b.n	800cbde <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbaa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d0ef      	beq.n	800cb96 <SDMMC_GetCmdResp3+0x1e>
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d1ea      	bne.n	800cb96 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbc4:	f003 0304 	and.w	r3, r3, #4
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d004      	beq.n	800cbd6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2204      	movs	r2, #4
 800cbd0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cbd2:	2304      	movs	r3, #4
 800cbd4:	e003      	b.n	800cbde <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	22c5      	movs	r2, #197	; 0xc5
 800cbda:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cbdc:	2300      	movs	r3, #0
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3714      	adds	r7, #20
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe8:	4770      	bx	lr
 800cbea:	bf00      	nop
 800cbec:	2000000c 	.word	0x2000000c
 800cbf0:	10624dd3 	.word	0x10624dd3

0800cbf4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b088      	sub	sp, #32
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	60f8      	str	r0, [r7, #12]
 800cbfc:	460b      	mov	r3, r1
 800cbfe:	607a      	str	r2, [r7, #4]
 800cc00:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cc02:	4b35      	ldr	r3, [pc, #212]	; (800ccd8 <SDMMC_GetCmdResp6+0xe4>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	4a35      	ldr	r2, [pc, #212]	; (800ccdc <SDMMC_GetCmdResp6+0xe8>)
 800cc08:	fba2 2303 	umull	r2, r3, r2, r3
 800cc0c:	0a5b      	lsrs	r3, r3, #9
 800cc0e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc12:	fb02 f303 	mul.w	r3, r2, r3
 800cc16:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800cc18:	69fb      	ldr	r3, [r7, #28]
 800cc1a:	1e5a      	subs	r2, r3, #1
 800cc1c:	61fa      	str	r2, [r7, #28]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d102      	bne.n	800cc28 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc22:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cc26:	e052      	b.n	800ccce <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc2c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cc2e:	69bb      	ldr	r3, [r7, #24]
 800cc30:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d0ef      	beq.n	800cc18 <SDMMC_GetCmdResp6+0x24>
 800cc38:	69bb      	ldr	r3, [r7, #24]
 800cc3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d1ea      	bne.n	800cc18 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc46:	f003 0304 	and.w	r3, r3, #4
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d004      	beq.n	800cc58 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	2204      	movs	r2, #4
 800cc52:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cc54:	2304      	movs	r3, #4
 800cc56:	e03a      	b.n	800ccce <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc5c:	f003 0301 	and.w	r3, r3, #1
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d004      	beq.n	800cc6e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	2201      	movs	r2, #1
 800cc68:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	e02f      	b.n	800ccce <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800cc6e:	68f8      	ldr	r0, [r7, #12]
 800cc70:	f7ff fc0d 	bl	800c48e <SDIO_GetCommandResponse>
 800cc74:	4603      	mov	r3, r0
 800cc76:	461a      	mov	r2, r3
 800cc78:	7afb      	ldrb	r3, [r7, #11]
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d001      	beq.n	800cc82 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cc7e:	2301      	movs	r3, #1
 800cc80:	e025      	b.n	800ccce <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	22c5      	movs	r2, #197	; 0xc5
 800cc86:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800cc88:	2100      	movs	r1, #0
 800cc8a:	68f8      	ldr	r0, [r7, #12]
 800cc8c:	f7ff fc0c 	bl	800c4a8 <SDIO_GetResponse>
 800cc90:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d106      	bne.n	800ccaa <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	0c1b      	lsrs	r3, r3, #16
 800cca0:	b29a      	uxth	r2, r3
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800cca6:	2300      	movs	r3, #0
 800cca8:	e011      	b.n	800ccce <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d002      	beq.n	800ccba <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ccb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ccb8:	e009      	b.n	800ccce <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d002      	beq.n	800ccca <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ccc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ccc8:	e001      	b.n	800ccce <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ccca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3720      	adds	r7, #32
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	2000000c 	.word	0x2000000c
 800ccdc:	10624dd3 	.word	0x10624dd3

0800cce0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800cce0:	b480      	push	{r7}
 800cce2:	b085      	sub	sp, #20
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cce8:	4b22      	ldr	r3, [pc, #136]	; (800cd74 <SDMMC_GetCmdResp7+0x94>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	4a22      	ldr	r2, [pc, #136]	; (800cd78 <SDMMC_GetCmdResp7+0x98>)
 800ccee:	fba2 2303 	umull	r2, r3, r2, r3
 800ccf2:	0a5b      	lsrs	r3, r3, #9
 800ccf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccf8:	fb02 f303 	mul.w	r3, r2, r3
 800ccfc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	1e5a      	subs	r2, r3, #1
 800cd02:	60fa      	str	r2, [r7, #12]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d102      	bne.n	800cd0e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cd08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cd0c:	e02c      	b.n	800cd68 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd12:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d0ef      	beq.n	800ccfe <SDMMC_GetCmdResp7+0x1e>
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d1ea      	bne.n	800ccfe <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd2c:	f003 0304 	and.w	r3, r3, #4
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d004      	beq.n	800cd3e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2204      	movs	r2, #4
 800cd38:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cd3a:	2304      	movs	r3, #4
 800cd3c:	e014      	b.n	800cd68 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd42:	f003 0301 	and.w	r3, r3, #1
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d004      	beq.n	800cd54 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2201      	movs	r2, #1
 800cd4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cd50:	2301      	movs	r3, #1
 800cd52:	e009      	b.n	800cd68 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d002      	beq.n	800cd66 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2240      	movs	r2, #64	; 0x40
 800cd64:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cd66:	2300      	movs	r3, #0
  
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3714      	adds	r7, #20
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd72:	4770      	bx	lr
 800cd74:	2000000c 	.word	0x2000000c
 800cd78:	10624dd3 	.word	0x10624dd3

0800cd7c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b085      	sub	sp, #20
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cd84:	4b11      	ldr	r3, [pc, #68]	; (800cdcc <SDMMC_GetCmdError+0x50>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	4a11      	ldr	r2, [pc, #68]	; (800cdd0 <SDMMC_GetCmdError+0x54>)
 800cd8a:	fba2 2303 	umull	r2, r3, r2, r3
 800cd8e:	0a5b      	lsrs	r3, r3, #9
 800cd90:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd94:	fb02 f303 	mul.w	r3, r2, r3
 800cd98:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	1e5a      	subs	r2, r3, #1
 800cd9e:	60fa      	str	r2, [r7, #12]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d102      	bne.n	800cdaa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cda4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cda8:	e009      	b.n	800cdbe <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d0f1      	beq.n	800cd9a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	22c5      	movs	r2, #197	; 0xc5
 800cdba:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800cdbc:	2300      	movs	r3, #0
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3714      	adds	r7, #20
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc8:	4770      	bx	lr
 800cdca:	bf00      	nop
 800cdcc:	2000000c 	.word	0x2000000c
 800cdd0:	10624dd3 	.word	0x10624dd3

0800cdd4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cdd4:	b084      	sub	sp, #16
 800cdd6:	b580      	push	{r7, lr}
 800cdd8:	b084      	sub	sp, #16
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	6078      	str	r0, [r7, #4]
 800cdde:	f107 001c 	add.w	r0, r7, #28
 800cde2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cde6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde8:	2b01      	cmp	r3, #1
 800cdea:	d122      	bne.n	800ce32 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdf0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	68db      	ldr	r3, [r3, #12]
 800cdfc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800ce00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce04:	687a      	ldr	r2, [r7, #4]
 800ce06:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	68db      	ldr	r3, [r3, #12]
 800ce0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ce14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce16:	2b01      	cmp	r3, #1
 800ce18:	d105      	bne.n	800ce26 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	68db      	ldr	r3, [r3, #12]
 800ce1e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f001 fc3e 	bl	800e6a8 <USB_CoreReset>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	73fb      	strb	r3, [r7, #15]
 800ce30:	e01a      	b.n	800ce68 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	68db      	ldr	r3, [r3, #12]
 800ce36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f001 fc32 	bl	800e6a8 <USB_CoreReset>
 800ce44:	4603      	mov	r3, r0
 800ce46:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ce48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d106      	bne.n	800ce5c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	639a      	str	r2, [r3, #56]	; 0x38
 800ce5a:	e005      	b.n	800ce68 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ce68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	d10b      	bne.n	800ce86 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	689b      	ldr	r3, [r3, #8]
 800ce72:	f043 0206 	orr.w	r2, r3, #6
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	689b      	ldr	r3, [r3, #8]
 800ce7e:	f043 0220 	orr.w	r2, r3, #32
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ce86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3710      	adds	r7, #16
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ce92:	b004      	add	sp, #16
 800ce94:	4770      	bx	lr
	...

0800ce98 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b087      	sub	sp, #28
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	60f8      	str	r0, [r7, #12]
 800cea0:	60b9      	str	r1, [r7, #8]
 800cea2:	4613      	mov	r3, r2
 800cea4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800cea6:	79fb      	ldrb	r3, [r7, #7]
 800cea8:	2b02      	cmp	r3, #2
 800ceaa:	d165      	bne.n	800cf78 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ceac:	68bb      	ldr	r3, [r7, #8]
 800ceae:	4a41      	ldr	r2, [pc, #260]	; (800cfb4 <USB_SetTurnaroundTime+0x11c>)
 800ceb0:	4293      	cmp	r3, r2
 800ceb2:	d906      	bls.n	800cec2 <USB_SetTurnaroundTime+0x2a>
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	4a40      	ldr	r2, [pc, #256]	; (800cfb8 <USB_SetTurnaroundTime+0x120>)
 800ceb8:	4293      	cmp	r3, r2
 800ceba:	d202      	bcs.n	800cec2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800cebc:	230f      	movs	r3, #15
 800cebe:	617b      	str	r3, [r7, #20]
 800cec0:	e062      	b.n	800cf88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	4a3c      	ldr	r2, [pc, #240]	; (800cfb8 <USB_SetTurnaroundTime+0x120>)
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d306      	bcc.n	800ced8 <USB_SetTurnaroundTime+0x40>
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	4a3b      	ldr	r2, [pc, #236]	; (800cfbc <USB_SetTurnaroundTime+0x124>)
 800cece:	4293      	cmp	r3, r2
 800ced0:	d202      	bcs.n	800ced8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ced2:	230e      	movs	r3, #14
 800ced4:	617b      	str	r3, [r7, #20]
 800ced6:	e057      	b.n	800cf88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	4a38      	ldr	r2, [pc, #224]	; (800cfbc <USB_SetTurnaroundTime+0x124>)
 800cedc:	4293      	cmp	r3, r2
 800cede:	d306      	bcc.n	800ceee <USB_SetTurnaroundTime+0x56>
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	4a37      	ldr	r2, [pc, #220]	; (800cfc0 <USB_SetTurnaroundTime+0x128>)
 800cee4:	4293      	cmp	r3, r2
 800cee6:	d202      	bcs.n	800ceee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800cee8:	230d      	movs	r3, #13
 800ceea:	617b      	str	r3, [r7, #20]
 800ceec:	e04c      	b.n	800cf88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	4a33      	ldr	r2, [pc, #204]	; (800cfc0 <USB_SetTurnaroundTime+0x128>)
 800cef2:	4293      	cmp	r3, r2
 800cef4:	d306      	bcc.n	800cf04 <USB_SetTurnaroundTime+0x6c>
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	4a32      	ldr	r2, [pc, #200]	; (800cfc4 <USB_SetTurnaroundTime+0x12c>)
 800cefa:	4293      	cmp	r3, r2
 800cefc:	d802      	bhi.n	800cf04 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800cefe:	230c      	movs	r3, #12
 800cf00:	617b      	str	r3, [r7, #20]
 800cf02:	e041      	b.n	800cf88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	4a2f      	ldr	r2, [pc, #188]	; (800cfc4 <USB_SetTurnaroundTime+0x12c>)
 800cf08:	4293      	cmp	r3, r2
 800cf0a:	d906      	bls.n	800cf1a <USB_SetTurnaroundTime+0x82>
 800cf0c:	68bb      	ldr	r3, [r7, #8]
 800cf0e:	4a2e      	ldr	r2, [pc, #184]	; (800cfc8 <USB_SetTurnaroundTime+0x130>)
 800cf10:	4293      	cmp	r3, r2
 800cf12:	d802      	bhi.n	800cf1a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800cf14:	230b      	movs	r3, #11
 800cf16:	617b      	str	r3, [r7, #20]
 800cf18:	e036      	b.n	800cf88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	4a2a      	ldr	r2, [pc, #168]	; (800cfc8 <USB_SetTurnaroundTime+0x130>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d906      	bls.n	800cf30 <USB_SetTurnaroundTime+0x98>
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	4a29      	ldr	r2, [pc, #164]	; (800cfcc <USB_SetTurnaroundTime+0x134>)
 800cf26:	4293      	cmp	r3, r2
 800cf28:	d802      	bhi.n	800cf30 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800cf2a:	230a      	movs	r3, #10
 800cf2c:	617b      	str	r3, [r7, #20]
 800cf2e:	e02b      	b.n	800cf88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	4a26      	ldr	r2, [pc, #152]	; (800cfcc <USB_SetTurnaroundTime+0x134>)
 800cf34:	4293      	cmp	r3, r2
 800cf36:	d906      	bls.n	800cf46 <USB_SetTurnaroundTime+0xae>
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	4a25      	ldr	r2, [pc, #148]	; (800cfd0 <USB_SetTurnaroundTime+0x138>)
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d202      	bcs.n	800cf46 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800cf40:	2309      	movs	r3, #9
 800cf42:	617b      	str	r3, [r7, #20]
 800cf44:	e020      	b.n	800cf88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	4a21      	ldr	r2, [pc, #132]	; (800cfd0 <USB_SetTurnaroundTime+0x138>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d306      	bcc.n	800cf5c <USB_SetTurnaroundTime+0xc4>
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	4a20      	ldr	r2, [pc, #128]	; (800cfd4 <USB_SetTurnaroundTime+0x13c>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d802      	bhi.n	800cf5c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800cf56:	2308      	movs	r3, #8
 800cf58:	617b      	str	r3, [r7, #20]
 800cf5a:	e015      	b.n	800cf88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	4a1d      	ldr	r2, [pc, #116]	; (800cfd4 <USB_SetTurnaroundTime+0x13c>)
 800cf60:	4293      	cmp	r3, r2
 800cf62:	d906      	bls.n	800cf72 <USB_SetTurnaroundTime+0xda>
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	4a1c      	ldr	r2, [pc, #112]	; (800cfd8 <USB_SetTurnaroundTime+0x140>)
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	d202      	bcs.n	800cf72 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800cf6c:	2307      	movs	r3, #7
 800cf6e:	617b      	str	r3, [r7, #20]
 800cf70:	e00a      	b.n	800cf88 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800cf72:	2306      	movs	r3, #6
 800cf74:	617b      	str	r3, [r7, #20]
 800cf76:	e007      	b.n	800cf88 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800cf78:	79fb      	ldrb	r3, [r7, #7]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d102      	bne.n	800cf84 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800cf7e:	2309      	movs	r3, #9
 800cf80:	617b      	str	r3, [r7, #20]
 800cf82:	e001      	b.n	800cf88 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800cf84:	2309      	movs	r3, #9
 800cf86:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	68db      	ldr	r3, [r3, #12]
 800cf8c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	68da      	ldr	r2, [r3, #12]
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	029b      	lsls	r3, r3, #10
 800cf9c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800cfa0:	431a      	orrs	r2, r3
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cfa6:	2300      	movs	r3, #0
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	371c      	adds	r7, #28
 800cfac:	46bd      	mov	sp, r7
 800cfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb2:	4770      	bx	lr
 800cfb4:	00d8acbf 	.word	0x00d8acbf
 800cfb8:	00e4e1c0 	.word	0x00e4e1c0
 800cfbc:	00f42400 	.word	0x00f42400
 800cfc0:	01067380 	.word	0x01067380
 800cfc4:	011a499f 	.word	0x011a499f
 800cfc8:	01312cff 	.word	0x01312cff
 800cfcc:	014ca43f 	.word	0x014ca43f
 800cfd0:	016e3600 	.word	0x016e3600
 800cfd4:	01a6ab1f 	.word	0x01a6ab1f
 800cfd8:	01e84800 	.word	0x01e84800

0800cfdc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	689b      	ldr	r3, [r3, #8]
 800cfe8:	f043 0201 	orr.w	r2, r3, #1
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cff0:	2300      	movs	r3, #0
}
 800cff2:	4618      	mov	r0, r3
 800cff4:	370c      	adds	r7, #12
 800cff6:	46bd      	mov	sp, r7
 800cff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffc:	4770      	bx	lr

0800cffe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cffe:	b480      	push	{r7}
 800d000:	b083      	sub	sp, #12
 800d002:	af00      	add	r7, sp, #0
 800d004:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	689b      	ldr	r3, [r3, #8]
 800d00a:	f023 0201 	bic.w	r2, r3, #1
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d012:	2300      	movs	r3, #0
}
 800d014:	4618      	mov	r0, r3
 800d016:	370c      	adds	r7, #12
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr

0800d020 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b084      	sub	sp, #16
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	460b      	mov	r3, r1
 800d02a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d02c:	2300      	movs	r3, #0
 800d02e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	68db      	ldr	r3, [r3, #12]
 800d034:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d03c:	78fb      	ldrb	r3, [r7, #3]
 800d03e:	2b01      	cmp	r3, #1
 800d040:	d115      	bne.n	800d06e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	68db      	ldr	r3, [r3, #12]
 800d046:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d04e:	2001      	movs	r0, #1
 800d050:	f7f6 fa4e 	bl	80034f0 <HAL_Delay>
      ms++;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	3301      	adds	r3, #1
 800d058:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f001 fa94 	bl	800e588 <USB_GetMode>
 800d060:	4603      	mov	r3, r0
 800d062:	2b01      	cmp	r3, #1
 800d064:	d01e      	beq.n	800d0a4 <USB_SetCurrentMode+0x84>
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	2b31      	cmp	r3, #49	; 0x31
 800d06a:	d9f0      	bls.n	800d04e <USB_SetCurrentMode+0x2e>
 800d06c:	e01a      	b.n	800d0a4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d06e:	78fb      	ldrb	r3, [r7, #3]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d115      	bne.n	800d0a0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	68db      	ldr	r3, [r3, #12]
 800d078:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d080:	2001      	movs	r0, #1
 800d082:	f7f6 fa35 	bl	80034f0 <HAL_Delay>
      ms++;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	3301      	adds	r3, #1
 800d08a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f001 fa7b 	bl	800e588 <USB_GetMode>
 800d092:	4603      	mov	r3, r0
 800d094:	2b00      	cmp	r3, #0
 800d096:	d005      	beq.n	800d0a4 <USB_SetCurrentMode+0x84>
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	2b31      	cmp	r3, #49	; 0x31
 800d09c:	d9f0      	bls.n	800d080 <USB_SetCurrentMode+0x60>
 800d09e:	e001      	b.n	800d0a4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	e005      	b.n	800d0b0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	2b32      	cmp	r3, #50	; 0x32
 800d0a8:	d101      	bne.n	800d0ae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	e000      	b.n	800d0b0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d0ae:	2300      	movs	r3, #0
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	3710      	adds	r7, #16
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}

0800d0b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d0b8:	b084      	sub	sp, #16
 800d0ba:	b580      	push	{r7, lr}
 800d0bc:	b086      	sub	sp, #24
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	6078      	str	r0, [r7, #4]
 800d0c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d0c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	613b      	str	r3, [r7, #16]
 800d0d6:	e009      	b.n	800d0ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d0d8:	687a      	ldr	r2, [r7, #4]
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	3340      	adds	r3, #64	; 0x40
 800d0de:	009b      	lsls	r3, r3, #2
 800d0e0:	4413      	add	r3, r2
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d0e6:	693b      	ldr	r3, [r7, #16]
 800d0e8:	3301      	adds	r3, #1
 800d0ea:	613b      	str	r3, [r7, #16]
 800d0ec:	693b      	ldr	r3, [r7, #16]
 800d0ee:	2b0e      	cmp	r3, #14
 800d0f0:	d9f2      	bls.n	800d0d8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d0f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d11c      	bne.n	800d132 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	68fa      	ldr	r2, [r7, #12]
 800d102:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d106:	f043 0302 	orr.w	r3, r3, #2
 800d10a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d110:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d11c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d128:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	639a      	str	r2, [r3, #56]	; 0x38
 800d130:	e00b      	b.n	800d14a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d136:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d142:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d150:	461a      	mov	r2, r3
 800d152:	2300      	movs	r3, #0
 800d154:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d15c:	4619      	mov	r1, r3
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d164:	461a      	mov	r2, r3
 800d166:	680b      	ldr	r3, [r1, #0]
 800d168:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d16c:	2b01      	cmp	r3, #1
 800d16e:	d10c      	bne.n	800d18a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d172:	2b00      	cmp	r3, #0
 800d174:	d104      	bne.n	800d180 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d176:	2100      	movs	r1, #0
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f000 f965 	bl	800d448 <USB_SetDevSpeed>
 800d17e:	e008      	b.n	800d192 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d180:	2101      	movs	r1, #1
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 f960 	bl	800d448 <USB_SetDevSpeed>
 800d188:	e003      	b.n	800d192 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d18a:	2103      	movs	r1, #3
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f000 f95b 	bl	800d448 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d192:	2110      	movs	r1, #16
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f000 f8f3 	bl	800d380 <USB_FlushTxFifo>
 800d19a:	4603      	mov	r3, r0
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d001      	beq.n	800d1a4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	f000 f91f 	bl	800d3e8 <USB_FlushRxFifo>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d001      	beq.n	800d1b4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1ba:	461a      	mov	r2, r3
 800d1bc:	2300      	movs	r3, #0
 800d1be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d1d8:	2300      	movs	r3, #0
 800d1da:	613b      	str	r3, [r7, #16]
 800d1dc:	e043      	b.n	800d266 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d1de:	693b      	ldr	r3, [r7, #16]
 800d1e0:	015a      	lsls	r2, r3, #5
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	4413      	add	r3, r2
 800d1e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d1f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d1f4:	d118      	bne.n	800d228 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800d1f6:	693b      	ldr	r3, [r7, #16]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d10a      	bne.n	800d212 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	015a      	lsls	r2, r3, #5
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	4413      	add	r3, r2
 800d204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d208:	461a      	mov	r2, r3
 800d20a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d20e:	6013      	str	r3, [r2, #0]
 800d210:	e013      	b.n	800d23a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	015a      	lsls	r2, r3, #5
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	4413      	add	r3, r2
 800d21a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d21e:	461a      	mov	r2, r3
 800d220:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d224:	6013      	str	r3, [r2, #0]
 800d226:	e008      	b.n	800d23a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	015a      	lsls	r2, r3, #5
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	4413      	add	r3, r2
 800d230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d234:	461a      	mov	r2, r3
 800d236:	2300      	movs	r3, #0
 800d238:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	015a      	lsls	r2, r3, #5
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	4413      	add	r3, r2
 800d242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d246:	461a      	mov	r2, r3
 800d248:	2300      	movs	r3, #0
 800d24a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	015a      	lsls	r2, r3, #5
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	4413      	add	r3, r2
 800d254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d258:	461a      	mov	r2, r3
 800d25a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d25e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d260:	693b      	ldr	r3, [r7, #16]
 800d262:	3301      	adds	r3, #1
 800d264:	613b      	str	r3, [r7, #16]
 800d266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d268:	693a      	ldr	r2, [r7, #16]
 800d26a:	429a      	cmp	r2, r3
 800d26c:	d3b7      	bcc.n	800d1de <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d26e:	2300      	movs	r3, #0
 800d270:	613b      	str	r3, [r7, #16]
 800d272:	e043      	b.n	800d2fc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	015a      	lsls	r2, r3, #5
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	4413      	add	r3, r2
 800d27c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d286:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d28a:	d118      	bne.n	800d2be <USB_DevInit+0x206>
    {
      if (i == 0U)
 800d28c:	693b      	ldr	r3, [r7, #16]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d10a      	bne.n	800d2a8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d292:	693b      	ldr	r3, [r7, #16]
 800d294:	015a      	lsls	r2, r3, #5
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	4413      	add	r3, r2
 800d29a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d29e:	461a      	mov	r2, r3
 800d2a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d2a4:	6013      	str	r3, [r2, #0]
 800d2a6:	e013      	b.n	800d2d0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	015a      	lsls	r2, r3, #5
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	4413      	add	r3, r2
 800d2b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2b4:	461a      	mov	r2, r3
 800d2b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d2ba:	6013      	str	r3, [r2, #0]
 800d2bc:	e008      	b.n	800d2d0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	015a      	lsls	r2, r3, #5
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	4413      	add	r3, r2
 800d2c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2ca:	461a      	mov	r2, r3
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	015a      	lsls	r2, r3, #5
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	4413      	add	r3, r2
 800d2d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2dc:	461a      	mov	r2, r3
 800d2de:	2300      	movs	r3, #0
 800d2e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	015a      	lsls	r2, r3, #5
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	4413      	add	r3, r2
 800d2ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2ee:	461a      	mov	r2, r3
 800d2f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d2f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	3301      	adds	r3, #1
 800d2fa:	613b      	str	r3, [r7, #16]
 800d2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2fe:	693a      	ldr	r2, [r7, #16]
 800d300:	429a      	cmp	r2, r3
 800d302:	d3b7      	bcc.n	800d274 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d30a:	691b      	ldr	r3, [r3, #16]
 800d30c:	68fa      	ldr	r2, [r7, #12]
 800d30e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d312:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d316:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2200      	movs	r2, #0
 800d31c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d324:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d105      	bne.n	800d338 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	699b      	ldr	r3, [r3, #24]
 800d330:	f043 0210 	orr.w	r2, r3, #16
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	699a      	ldr	r2, [r3, #24]
 800d33c:	4b0f      	ldr	r3, [pc, #60]	; (800d37c <USB_DevInit+0x2c4>)
 800d33e:	4313      	orrs	r3, r2
 800d340:	687a      	ldr	r2, [r7, #4]
 800d342:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d346:	2b00      	cmp	r3, #0
 800d348:	d005      	beq.n	800d356 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	699b      	ldr	r3, [r3, #24]
 800d34e:	f043 0208 	orr.w	r2, r3, #8
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d358:	2b01      	cmp	r3, #1
 800d35a:	d107      	bne.n	800d36c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	699b      	ldr	r3, [r3, #24]
 800d360:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d364:	f043 0304 	orr.w	r3, r3, #4
 800d368:	687a      	ldr	r2, [r7, #4]
 800d36a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d36c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3718      	adds	r7, #24
 800d372:	46bd      	mov	sp, r7
 800d374:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d378:	b004      	add	sp, #16
 800d37a:	4770      	bx	lr
 800d37c:	803c3800 	.word	0x803c3800

0800d380 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d380:	b480      	push	{r7}
 800d382:	b085      	sub	sp, #20
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d38a:	2300      	movs	r3, #0
 800d38c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	3301      	adds	r3, #1
 800d392:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	4a13      	ldr	r2, [pc, #76]	; (800d3e4 <USB_FlushTxFifo+0x64>)
 800d398:	4293      	cmp	r3, r2
 800d39a:	d901      	bls.n	800d3a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d39c:	2303      	movs	r3, #3
 800d39e:	e01b      	b.n	800d3d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	691b      	ldr	r3, [r3, #16]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	daf2      	bge.n	800d38e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	019b      	lsls	r3, r3, #6
 800d3b0:	f043 0220 	orr.w	r2, r3, #32
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	3301      	adds	r3, #1
 800d3bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	4a08      	ldr	r2, [pc, #32]	; (800d3e4 <USB_FlushTxFifo+0x64>)
 800d3c2:	4293      	cmp	r3, r2
 800d3c4:	d901      	bls.n	800d3ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d3c6:	2303      	movs	r3, #3
 800d3c8:	e006      	b.n	800d3d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	691b      	ldr	r3, [r3, #16]
 800d3ce:	f003 0320 	and.w	r3, r3, #32
 800d3d2:	2b20      	cmp	r3, #32
 800d3d4:	d0f0      	beq.n	800d3b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d3d6:	2300      	movs	r3, #0
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3714      	adds	r7, #20
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e2:	4770      	bx	lr
 800d3e4:	00030d40 	.word	0x00030d40

0800d3e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d3e8:	b480      	push	{r7}
 800d3ea:	b085      	sub	sp, #20
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	3301      	adds	r3, #1
 800d3f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	4a11      	ldr	r2, [pc, #68]	; (800d444 <USB_FlushRxFifo+0x5c>)
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d901      	bls.n	800d406 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d402:	2303      	movs	r3, #3
 800d404:	e018      	b.n	800d438 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	691b      	ldr	r3, [r3, #16]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	daf2      	bge.n	800d3f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d40e:	2300      	movs	r3, #0
 800d410:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2210      	movs	r2, #16
 800d416:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	3301      	adds	r3, #1
 800d41c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	4a08      	ldr	r2, [pc, #32]	; (800d444 <USB_FlushRxFifo+0x5c>)
 800d422:	4293      	cmp	r3, r2
 800d424:	d901      	bls.n	800d42a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d426:	2303      	movs	r3, #3
 800d428:	e006      	b.n	800d438 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	691b      	ldr	r3, [r3, #16]
 800d42e:	f003 0310 	and.w	r3, r3, #16
 800d432:	2b10      	cmp	r3, #16
 800d434:	d0f0      	beq.n	800d418 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d436:	2300      	movs	r3, #0
}
 800d438:	4618      	mov	r0, r3
 800d43a:	3714      	adds	r7, #20
 800d43c:	46bd      	mov	sp, r7
 800d43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d442:	4770      	bx	lr
 800d444:	00030d40 	.word	0x00030d40

0800d448 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d448:	b480      	push	{r7}
 800d44a:	b085      	sub	sp, #20
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
 800d450:	460b      	mov	r3, r1
 800d452:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d45e:	681a      	ldr	r2, [r3, #0]
 800d460:	78fb      	ldrb	r3, [r7, #3]
 800d462:	68f9      	ldr	r1, [r7, #12]
 800d464:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d468:	4313      	orrs	r3, r2
 800d46a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d46c:	2300      	movs	r3, #0
}
 800d46e:	4618      	mov	r0, r3
 800d470:	3714      	adds	r7, #20
 800d472:	46bd      	mov	sp, r7
 800d474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d478:	4770      	bx	lr

0800d47a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d47a:	b480      	push	{r7}
 800d47c:	b087      	sub	sp, #28
 800d47e:	af00      	add	r7, sp, #0
 800d480:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d486:	693b      	ldr	r3, [r7, #16]
 800d488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d48c:	689b      	ldr	r3, [r3, #8]
 800d48e:	f003 0306 	and.w	r3, r3, #6
 800d492:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d102      	bne.n	800d4a0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d49a:	2300      	movs	r3, #0
 800d49c:	75fb      	strb	r3, [r7, #23]
 800d49e:	e00a      	b.n	800d4b6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	2b02      	cmp	r3, #2
 800d4a4:	d002      	beq.n	800d4ac <USB_GetDevSpeed+0x32>
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	2b06      	cmp	r3, #6
 800d4aa:	d102      	bne.n	800d4b2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d4ac:	2302      	movs	r3, #2
 800d4ae:	75fb      	strb	r3, [r7, #23]
 800d4b0:	e001      	b.n	800d4b6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d4b2:	230f      	movs	r3, #15
 800d4b4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d4b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	371c      	adds	r7, #28
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c2:	4770      	bx	lr

0800d4c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b085      	sub	sp, #20
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	781b      	ldrb	r3, [r3, #0]
 800d4d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	785b      	ldrb	r3, [r3, #1]
 800d4dc:	2b01      	cmp	r3, #1
 800d4de:	d13a      	bne.n	800d556 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4e6:	69da      	ldr	r2, [r3, #28]
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	781b      	ldrb	r3, [r3, #0]
 800d4ec:	f003 030f 	and.w	r3, r3, #15
 800d4f0:	2101      	movs	r1, #1
 800d4f2:	fa01 f303 	lsl.w	r3, r1, r3
 800d4f6:	b29b      	uxth	r3, r3
 800d4f8:	68f9      	ldr	r1, [r7, #12]
 800d4fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d4fe:	4313      	orrs	r3, r2
 800d500:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	015a      	lsls	r2, r3, #5
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	4413      	add	r3, r2
 800d50a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d514:	2b00      	cmp	r3, #0
 800d516:	d155      	bne.n	800d5c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	015a      	lsls	r2, r3, #5
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	4413      	add	r3, r2
 800d520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d524:	681a      	ldr	r2, [r3, #0]
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	68db      	ldr	r3, [r3, #12]
 800d52a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	791b      	ldrb	r3, [r3, #4]
 800d532:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d534:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	059b      	lsls	r3, r3, #22
 800d53a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d53c:	4313      	orrs	r3, r2
 800d53e:	68ba      	ldr	r2, [r7, #8]
 800d540:	0151      	lsls	r1, r2, #5
 800d542:	68fa      	ldr	r2, [r7, #12]
 800d544:	440a      	add	r2, r1
 800d546:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d54a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d54e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d552:	6013      	str	r3, [r2, #0]
 800d554:	e036      	b.n	800d5c4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d55c:	69da      	ldr	r2, [r3, #28]
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	781b      	ldrb	r3, [r3, #0]
 800d562:	f003 030f 	and.w	r3, r3, #15
 800d566:	2101      	movs	r1, #1
 800d568:	fa01 f303 	lsl.w	r3, r1, r3
 800d56c:	041b      	lsls	r3, r3, #16
 800d56e:	68f9      	ldr	r1, [r7, #12]
 800d570:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d574:	4313      	orrs	r3, r2
 800d576:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	015a      	lsls	r2, r3, #5
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	4413      	add	r3, r2
 800d580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d11a      	bne.n	800d5c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	015a      	lsls	r2, r3, #5
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	4413      	add	r3, r2
 800d596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d59a:	681a      	ldr	r2, [r3, #0]
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	68db      	ldr	r3, [r3, #12]
 800d5a0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	791b      	ldrb	r3, [r3, #4]
 800d5a8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d5aa:	430b      	orrs	r3, r1
 800d5ac:	4313      	orrs	r3, r2
 800d5ae:	68ba      	ldr	r2, [r7, #8]
 800d5b0:	0151      	lsls	r1, r2, #5
 800d5b2:	68fa      	ldr	r2, [r7, #12]
 800d5b4:	440a      	add	r2, r1
 800d5b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d5be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d5c2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d5c4:	2300      	movs	r3, #0
}
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	3714      	adds	r7, #20
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d0:	4770      	bx	lr
	...

0800d5d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	b085      	sub	sp, #20
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	781b      	ldrb	r3, [r3, #0]
 800d5e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	785b      	ldrb	r3, [r3, #1]
 800d5ec:	2b01      	cmp	r3, #1
 800d5ee:	d161      	bne.n	800d6b4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	015a      	lsls	r2, r3, #5
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	4413      	add	r3, r2
 800d5f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d602:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d606:	d11f      	bne.n	800d648 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d608:	68bb      	ldr	r3, [r7, #8]
 800d60a:	015a      	lsls	r2, r3, #5
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	4413      	add	r3, r2
 800d610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	68ba      	ldr	r2, [r7, #8]
 800d618:	0151      	lsls	r1, r2, #5
 800d61a:	68fa      	ldr	r2, [r7, #12]
 800d61c:	440a      	add	r2, r1
 800d61e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d622:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d626:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	015a      	lsls	r2, r3, #5
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	4413      	add	r3, r2
 800d630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	68ba      	ldr	r2, [r7, #8]
 800d638:	0151      	lsls	r1, r2, #5
 800d63a:	68fa      	ldr	r2, [r7, #12]
 800d63c:	440a      	add	r2, r1
 800d63e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d642:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d646:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d64e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	781b      	ldrb	r3, [r3, #0]
 800d654:	f003 030f 	and.w	r3, r3, #15
 800d658:	2101      	movs	r1, #1
 800d65a:	fa01 f303 	lsl.w	r3, r1, r3
 800d65e:	b29b      	uxth	r3, r3
 800d660:	43db      	mvns	r3, r3
 800d662:	68f9      	ldr	r1, [r7, #12]
 800d664:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d668:	4013      	ands	r3, r2
 800d66a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d672:	69da      	ldr	r2, [r3, #28]
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	781b      	ldrb	r3, [r3, #0]
 800d678:	f003 030f 	and.w	r3, r3, #15
 800d67c:	2101      	movs	r1, #1
 800d67e:	fa01 f303 	lsl.w	r3, r1, r3
 800d682:	b29b      	uxth	r3, r3
 800d684:	43db      	mvns	r3, r3
 800d686:	68f9      	ldr	r1, [r7, #12]
 800d688:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d68c:	4013      	ands	r3, r2
 800d68e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	015a      	lsls	r2, r3, #5
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	4413      	add	r3, r2
 800d698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d69c:	681a      	ldr	r2, [r3, #0]
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	0159      	lsls	r1, r3, #5
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	440b      	add	r3, r1
 800d6a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6aa:	4619      	mov	r1, r3
 800d6ac:	4b35      	ldr	r3, [pc, #212]	; (800d784 <USB_DeactivateEndpoint+0x1b0>)
 800d6ae:	4013      	ands	r3, r2
 800d6b0:	600b      	str	r3, [r1, #0]
 800d6b2:	e060      	b.n	800d776 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	015a      	lsls	r2, r3, #5
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	4413      	add	r3, r2
 800d6bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d6c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d6ca:	d11f      	bne.n	800d70c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	015a      	lsls	r2, r3, #5
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	4413      	add	r3, r2
 800d6d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	68ba      	ldr	r2, [r7, #8]
 800d6dc:	0151      	lsls	r1, r2, #5
 800d6de:	68fa      	ldr	r2, [r7, #12]
 800d6e0:	440a      	add	r2, r1
 800d6e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d6e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d6ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	015a      	lsls	r2, r3, #5
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	4413      	add	r3, r2
 800d6f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	68ba      	ldr	r2, [r7, #8]
 800d6fc:	0151      	lsls	r1, r2, #5
 800d6fe:	68fa      	ldr	r2, [r7, #12]
 800d700:	440a      	add	r2, r1
 800d702:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d706:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d70a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d712:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	781b      	ldrb	r3, [r3, #0]
 800d718:	f003 030f 	and.w	r3, r3, #15
 800d71c:	2101      	movs	r1, #1
 800d71e:	fa01 f303 	lsl.w	r3, r1, r3
 800d722:	041b      	lsls	r3, r3, #16
 800d724:	43db      	mvns	r3, r3
 800d726:	68f9      	ldr	r1, [r7, #12]
 800d728:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d72c:	4013      	ands	r3, r2
 800d72e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d736:	69da      	ldr	r2, [r3, #28]
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	781b      	ldrb	r3, [r3, #0]
 800d73c:	f003 030f 	and.w	r3, r3, #15
 800d740:	2101      	movs	r1, #1
 800d742:	fa01 f303 	lsl.w	r3, r1, r3
 800d746:	041b      	lsls	r3, r3, #16
 800d748:	43db      	mvns	r3, r3
 800d74a:	68f9      	ldr	r1, [r7, #12]
 800d74c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d750:	4013      	ands	r3, r2
 800d752:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d754:	68bb      	ldr	r3, [r7, #8]
 800d756:	015a      	lsls	r2, r3, #5
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	4413      	add	r3, r2
 800d75c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d760:	681a      	ldr	r2, [r3, #0]
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	0159      	lsls	r1, r3, #5
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	440b      	add	r3, r1
 800d76a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d76e:	4619      	mov	r1, r3
 800d770:	4b05      	ldr	r3, [pc, #20]	; (800d788 <USB_DeactivateEndpoint+0x1b4>)
 800d772:	4013      	ands	r3, r2
 800d774:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d776:	2300      	movs	r3, #0
}
 800d778:	4618      	mov	r0, r3
 800d77a:	3714      	adds	r7, #20
 800d77c:	46bd      	mov	sp, r7
 800d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d782:	4770      	bx	lr
 800d784:	ec337800 	.word	0xec337800
 800d788:	eff37800 	.word	0xeff37800

0800d78c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b08a      	sub	sp, #40	; 0x28
 800d790:	af02      	add	r7, sp, #8
 800d792:	60f8      	str	r0, [r7, #12]
 800d794:	60b9      	str	r1, [r7, #8]
 800d796:	4613      	mov	r3, r2
 800d798:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	781b      	ldrb	r3, [r3, #0]
 800d7a2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	785b      	ldrb	r3, [r3, #1]
 800d7a8:	2b01      	cmp	r3, #1
 800d7aa:	f040 815c 	bne.w	800da66 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d7ae:	68bb      	ldr	r3, [r7, #8]
 800d7b0:	699b      	ldr	r3, [r3, #24]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d132      	bne.n	800d81c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d7b6:	69bb      	ldr	r3, [r7, #24]
 800d7b8:	015a      	lsls	r2, r3, #5
 800d7ba:	69fb      	ldr	r3, [r7, #28]
 800d7bc:	4413      	add	r3, r2
 800d7be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7c2:	691b      	ldr	r3, [r3, #16]
 800d7c4:	69ba      	ldr	r2, [r7, #24]
 800d7c6:	0151      	lsls	r1, r2, #5
 800d7c8:	69fa      	ldr	r2, [r7, #28]
 800d7ca:	440a      	add	r2, r1
 800d7cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d7d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d7d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d7da:	69bb      	ldr	r3, [r7, #24]
 800d7dc:	015a      	lsls	r2, r3, #5
 800d7de:	69fb      	ldr	r3, [r7, #28]
 800d7e0:	4413      	add	r3, r2
 800d7e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7e6:	691b      	ldr	r3, [r3, #16]
 800d7e8:	69ba      	ldr	r2, [r7, #24]
 800d7ea:	0151      	lsls	r1, r2, #5
 800d7ec:	69fa      	ldr	r2, [r7, #28]
 800d7ee:	440a      	add	r2, r1
 800d7f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d7f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d7fa:	69bb      	ldr	r3, [r7, #24]
 800d7fc:	015a      	lsls	r2, r3, #5
 800d7fe:	69fb      	ldr	r3, [r7, #28]
 800d800:	4413      	add	r3, r2
 800d802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d806:	691b      	ldr	r3, [r3, #16]
 800d808:	69ba      	ldr	r2, [r7, #24]
 800d80a:	0151      	lsls	r1, r2, #5
 800d80c:	69fa      	ldr	r2, [r7, #28]
 800d80e:	440a      	add	r2, r1
 800d810:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d814:	0cdb      	lsrs	r3, r3, #19
 800d816:	04db      	lsls	r3, r3, #19
 800d818:	6113      	str	r3, [r2, #16]
 800d81a:	e074      	b.n	800d906 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d81c:	69bb      	ldr	r3, [r7, #24]
 800d81e:	015a      	lsls	r2, r3, #5
 800d820:	69fb      	ldr	r3, [r7, #28]
 800d822:	4413      	add	r3, r2
 800d824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d828:	691b      	ldr	r3, [r3, #16]
 800d82a:	69ba      	ldr	r2, [r7, #24]
 800d82c:	0151      	lsls	r1, r2, #5
 800d82e:	69fa      	ldr	r2, [r7, #28]
 800d830:	440a      	add	r2, r1
 800d832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d836:	0cdb      	lsrs	r3, r3, #19
 800d838:	04db      	lsls	r3, r3, #19
 800d83a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d83c:	69bb      	ldr	r3, [r7, #24]
 800d83e:	015a      	lsls	r2, r3, #5
 800d840:	69fb      	ldr	r3, [r7, #28]
 800d842:	4413      	add	r3, r2
 800d844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d848:	691b      	ldr	r3, [r3, #16]
 800d84a:	69ba      	ldr	r2, [r7, #24]
 800d84c:	0151      	lsls	r1, r2, #5
 800d84e:	69fa      	ldr	r2, [r7, #28]
 800d850:	440a      	add	r2, r1
 800d852:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d856:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d85a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d85e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d860:	69bb      	ldr	r3, [r7, #24]
 800d862:	015a      	lsls	r2, r3, #5
 800d864:	69fb      	ldr	r3, [r7, #28]
 800d866:	4413      	add	r3, r2
 800d868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d86c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	6999      	ldr	r1, [r3, #24]
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	68db      	ldr	r3, [r3, #12]
 800d876:	440b      	add	r3, r1
 800d878:	1e59      	subs	r1, r3, #1
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	68db      	ldr	r3, [r3, #12]
 800d87e:	fbb1 f3f3 	udiv	r3, r1, r3
 800d882:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d884:	4b9d      	ldr	r3, [pc, #628]	; (800dafc <USB_EPStartXfer+0x370>)
 800d886:	400b      	ands	r3, r1
 800d888:	69b9      	ldr	r1, [r7, #24]
 800d88a:	0148      	lsls	r0, r1, #5
 800d88c:	69f9      	ldr	r1, [r7, #28]
 800d88e:	4401      	add	r1, r0
 800d890:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d894:	4313      	orrs	r3, r2
 800d896:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d898:	69bb      	ldr	r3, [r7, #24]
 800d89a:	015a      	lsls	r2, r3, #5
 800d89c:	69fb      	ldr	r3, [r7, #28]
 800d89e:	4413      	add	r3, r2
 800d8a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8a4:	691a      	ldr	r2, [r3, #16]
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	699b      	ldr	r3, [r3, #24]
 800d8aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d8ae:	69b9      	ldr	r1, [r7, #24]
 800d8b0:	0148      	lsls	r0, r1, #5
 800d8b2:	69f9      	ldr	r1, [r7, #28]
 800d8b4:	4401      	add	r1, r0
 800d8b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d8ba:	4313      	orrs	r3, r2
 800d8bc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	791b      	ldrb	r3, [r3, #4]
 800d8c2:	2b01      	cmp	r3, #1
 800d8c4:	d11f      	bne.n	800d906 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d8c6:	69bb      	ldr	r3, [r7, #24]
 800d8c8:	015a      	lsls	r2, r3, #5
 800d8ca:	69fb      	ldr	r3, [r7, #28]
 800d8cc:	4413      	add	r3, r2
 800d8ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8d2:	691b      	ldr	r3, [r3, #16]
 800d8d4:	69ba      	ldr	r2, [r7, #24]
 800d8d6:	0151      	lsls	r1, r2, #5
 800d8d8:	69fa      	ldr	r2, [r7, #28]
 800d8da:	440a      	add	r2, r1
 800d8dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d8e0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d8e4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d8e6:	69bb      	ldr	r3, [r7, #24]
 800d8e8:	015a      	lsls	r2, r3, #5
 800d8ea:	69fb      	ldr	r3, [r7, #28]
 800d8ec:	4413      	add	r3, r2
 800d8ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8f2:	691b      	ldr	r3, [r3, #16]
 800d8f4:	69ba      	ldr	r2, [r7, #24]
 800d8f6:	0151      	lsls	r1, r2, #5
 800d8f8:	69fa      	ldr	r2, [r7, #28]
 800d8fa:	440a      	add	r2, r1
 800d8fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d900:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d904:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d906:	79fb      	ldrb	r3, [r7, #7]
 800d908:	2b01      	cmp	r3, #1
 800d90a:	d14b      	bne.n	800d9a4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	695b      	ldr	r3, [r3, #20]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d009      	beq.n	800d928 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d914:	69bb      	ldr	r3, [r7, #24]
 800d916:	015a      	lsls	r2, r3, #5
 800d918:	69fb      	ldr	r3, [r7, #28]
 800d91a:	4413      	add	r3, r2
 800d91c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d920:	461a      	mov	r2, r3
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	695b      	ldr	r3, [r3, #20]
 800d926:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	791b      	ldrb	r3, [r3, #4]
 800d92c:	2b01      	cmp	r3, #1
 800d92e:	d128      	bne.n	800d982 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d930:	69fb      	ldr	r3, [r7, #28]
 800d932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d936:	689b      	ldr	r3, [r3, #8]
 800d938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d110      	bne.n	800d962 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d940:	69bb      	ldr	r3, [r7, #24]
 800d942:	015a      	lsls	r2, r3, #5
 800d944:	69fb      	ldr	r3, [r7, #28]
 800d946:	4413      	add	r3, r2
 800d948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	69ba      	ldr	r2, [r7, #24]
 800d950:	0151      	lsls	r1, r2, #5
 800d952:	69fa      	ldr	r2, [r7, #28]
 800d954:	440a      	add	r2, r1
 800d956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d95a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d95e:	6013      	str	r3, [r2, #0]
 800d960:	e00f      	b.n	800d982 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d962:	69bb      	ldr	r3, [r7, #24]
 800d964:	015a      	lsls	r2, r3, #5
 800d966:	69fb      	ldr	r3, [r7, #28]
 800d968:	4413      	add	r3, r2
 800d96a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	69ba      	ldr	r2, [r7, #24]
 800d972:	0151      	lsls	r1, r2, #5
 800d974:	69fa      	ldr	r2, [r7, #28]
 800d976:	440a      	add	r2, r1
 800d978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d97c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d980:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d982:	69bb      	ldr	r3, [r7, #24]
 800d984:	015a      	lsls	r2, r3, #5
 800d986:	69fb      	ldr	r3, [r7, #28]
 800d988:	4413      	add	r3, r2
 800d98a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	69ba      	ldr	r2, [r7, #24]
 800d992:	0151      	lsls	r1, r2, #5
 800d994:	69fa      	ldr	r2, [r7, #28]
 800d996:	440a      	add	r2, r1
 800d998:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d99c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d9a0:	6013      	str	r3, [r2, #0]
 800d9a2:	e133      	b.n	800dc0c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d9a4:	69bb      	ldr	r3, [r7, #24]
 800d9a6:	015a      	lsls	r2, r3, #5
 800d9a8:	69fb      	ldr	r3, [r7, #28]
 800d9aa:	4413      	add	r3, r2
 800d9ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	69ba      	ldr	r2, [r7, #24]
 800d9b4:	0151      	lsls	r1, r2, #5
 800d9b6:	69fa      	ldr	r2, [r7, #28]
 800d9b8:	440a      	add	r2, r1
 800d9ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d9be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d9c2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	791b      	ldrb	r3, [r3, #4]
 800d9c8:	2b01      	cmp	r3, #1
 800d9ca:	d015      	beq.n	800d9f8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	699b      	ldr	r3, [r3, #24]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	f000 811b 	beq.w	800dc0c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d9d6:	69fb      	ldr	r3, [r7, #28]
 800d9d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	781b      	ldrb	r3, [r3, #0]
 800d9e2:	f003 030f 	and.w	r3, r3, #15
 800d9e6:	2101      	movs	r1, #1
 800d9e8:	fa01 f303 	lsl.w	r3, r1, r3
 800d9ec:	69f9      	ldr	r1, [r7, #28]
 800d9ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d9f2:	4313      	orrs	r3, r2
 800d9f4:	634b      	str	r3, [r1, #52]	; 0x34
 800d9f6:	e109      	b.n	800dc0c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d9f8:	69fb      	ldr	r3, [r7, #28]
 800d9fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9fe:	689b      	ldr	r3, [r3, #8]
 800da00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da04:	2b00      	cmp	r3, #0
 800da06:	d110      	bne.n	800da2a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800da08:	69bb      	ldr	r3, [r7, #24]
 800da0a:	015a      	lsls	r2, r3, #5
 800da0c:	69fb      	ldr	r3, [r7, #28]
 800da0e:	4413      	add	r3, r2
 800da10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	69ba      	ldr	r2, [r7, #24]
 800da18:	0151      	lsls	r1, r2, #5
 800da1a:	69fa      	ldr	r2, [r7, #28]
 800da1c:	440a      	add	r2, r1
 800da1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800da26:	6013      	str	r3, [r2, #0]
 800da28:	e00f      	b.n	800da4a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800da2a:	69bb      	ldr	r3, [r7, #24]
 800da2c:	015a      	lsls	r2, r3, #5
 800da2e:	69fb      	ldr	r3, [r7, #28]
 800da30:	4413      	add	r3, r2
 800da32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	69ba      	ldr	r2, [r7, #24]
 800da3a:	0151      	lsls	r1, r2, #5
 800da3c:	69fa      	ldr	r2, [r7, #28]
 800da3e:	440a      	add	r2, r1
 800da40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da48:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	6919      	ldr	r1, [r3, #16]
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	781a      	ldrb	r2, [r3, #0]
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	699b      	ldr	r3, [r3, #24]
 800da56:	b298      	uxth	r0, r3
 800da58:	79fb      	ldrb	r3, [r7, #7]
 800da5a:	9300      	str	r3, [sp, #0]
 800da5c:	4603      	mov	r3, r0
 800da5e:	68f8      	ldr	r0, [r7, #12]
 800da60:	f000 fade 	bl	800e020 <USB_WritePacket>
 800da64:	e0d2      	b.n	800dc0c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800da66:	69bb      	ldr	r3, [r7, #24]
 800da68:	015a      	lsls	r2, r3, #5
 800da6a:	69fb      	ldr	r3, [r7, #28]
 800da6c:	4413      	add	r3, r2
 800da6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da72:	691b      	ldr	r3, [r3, #16]
 800da74:	69ba      	ldr	r2, [r7, #24]
 800da76:	0151      	lsls	r1, r2, #5
 800da78:	69fa      	ldr	r2, [r7, #28]
 800da7a:	440a      	add	r2, r1
 800da7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da80:	0cdb      	lsrs	r3, r3, #19
 800da82:	04db      	lsls	r3, r3, #19
 800da84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800da86:	69bb      	ldr	r3, [r7, #24]
 800da88:	015a      	lsls	r2, r3, #5
 800da8a:	69fb      	ldr	r3, [r7, #28]
 800da8c:	4413      	add	r3, r2
 800da8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da92:	691b      	ldr	r3, [r3, #16]
 800da94:	69ba      	ldr	r2, [r7, #24]
 800da96:	0151      	lsls	r1, r2, #5
 800da98:	69fa      	ldr	r2, [r7, #28]
 800da9a:	440a      	add	r2, r1
 800da9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800daa0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800daa4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800daa8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800daaa:	68bb      	ldr	r3, [r7, #8]
 800daac:	699b      	ldr	r3, [r3, #24]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d126      	bne.n	800db00 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800dab2:	69bb      	ldr	r3, [r7, #24]
 800dab4:	015a      	lsls	r2, r3, #5
 800dab6:	69fb      	ldr	r3, [r7, #28]
 800dab8:	4413      	add	r3, r2
 800daba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dabe:	691a      	ldr	r2, [r3, #16]
 800dac0:	68bb      	ldr	r3, [r7, #8]
 800dac2:	68db      	ldr	r3, [r3, #12]
 800dac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dac8:	69b9      	ldr	r1, [r7, #24]
 800daca:	0148      	lsls	r0, r1, #5
 800dacc:	69f9      	ldr	r1, [r7, #28]
 800dace:	4401      	add	r1, r0
 800dad0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dad4:	4313      	orrs	r3, r2
 800dad6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dad8:	69bb      	ldr	r3, [r7, #24]
 800dada:	015a      	lsls	r2, r3, #5
 800dadc:	69fb      	ldr	r3, [r7, #28]
 800dade:	4413      	add	r3, r2
 800dae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dae4:	691b      	ldr	r3, [r3, #16]
 800dae6:	69ba      	ldr	r2, [r7, #24]
 800dae8:	0151      	lsls	r1, r2, #5
 800daea:	69fa      	ldr	r2, [r7, #28]
 800daec:	440a      	add	r2, r1
 800daee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800daf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800daf6:	6113      	str	r3, [r2, #16]
 800daf8:	e03a      	b.n	800db70 <USB_EPStartXfer+0x3e4>
 800dafa:	bf00      	nop
 800dafc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	699a      	ldr	r2, [r3, #24]
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	68db      	ldr	r3, [r3, #12]
 800db08:	4413      	add	r3, r2
 800db0a:	1e5a      	subs	r2, r3, #1
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	68db      	ldr	r3, [r3, #12]
 800db10:	fbb2 f3f3 	udiv	r3, r2, r3
 800db14:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	68db      	ldr	r3, [r3, #12]
 800db1a:	8afa      	ldrh	r2, [r7, #22]
 800db1c:	fb03 f202 	mul.w	r2, r3, r2
 800db20:	68bb      	ldr	r3, [r7, #8]
 800db22:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800db24:	69bb      	ldr	r3, [r7, #24]
 800db26:	015a      	lsls	r2, r3, #5
 800db28:	69fb      	ldr	r3, [r7, #28]
 800db2a:	4413      	add	r3, r2
 800db2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db30:	691a      	ldr	r2, [r3, #16]
 800db32:	8afb      	ldrh	r3, [r7, #22]
 800db34:	04d9      	lsls	r1, r3, #19
 800db36:	4b38      	ldr	r3, [pc, #224]	; (800dc18 <USB_EPStartXfer+0x48c>)
 800db38:	400b      	ands	r3, r1
 800db3a:	69b9      	ldr	r1, [r7, #24]
 800db3c:	0148      	lsls	r0, r1, #5
 800db3e:	69f9      	ldr	r1, [r7, #28]
 800db40:	4401      	add	r1, r0
 800db42:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800db46:	4313      	orrs	r3, r2
 800db48:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800db4a:	69bb      	ldr	r3, [r7, #24]
 800db4c:	015a      	lsls	r2, r3, #5
 800db4e:	69fb      	ldr	r3, [r7, #28]
 800db50:	4413      	add	r3, r2
 800db52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db56:	691a      	ldr	r2, [r3, #16]
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	69db      	ldr	r3, [r3, #28]
 800db5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800db60:	69b9      	ldr	r1, [r7, #24]
 800db62:	0148      	lsls	r0, r1, #5
 800db64:	69f9      	ldr	r1, [r7, #28]
 800db66:	4401      	add	r1, r0
 800db68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800db6c:	4313      	orrs	r3, r2
 800db6e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800db70:	79fb      	ldrb	r3, [r7, #7]
 800db72:	2b01      	cmp	r3, #1
 800db74:	d10d      	bne.n	800db92 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	691b      	ldr	r3, [r3, #16]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d009      	beq.n	800db92 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	6919      	ldr	r1, [r3, #16]
 800db82:	69bb      	ldr	r3, [r7, #24]
 800db84:	015a      	lsls	r2, r3, #5
 800db86:	69fb      	ldr	r3, [r7, #28]
 800db88:	4413      	add	r3, r2
 800db8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db8e:	460a      	mov	r2, r1
 800db90:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	791b      	ldrb	r3, [r3, #4]
 800db96:	2b01      	cmp	r3, #1
 800db98:	d128      	bne.n	800dbec <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800db9a:	69fb      	ldr	r3, [r7, #28]
 800db9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dba0:	689b      	ldr	r3, [r3, #8]
 800dba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d110      	bne.n	800dbcc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800dbaa:	69bb      	ldr	r3, [r7, #24]
 800dbac:	015a      	lsls	r2, r3, #5
 800dbae:	69fb      	ldr	r3, [r7, #28]
 800dbb0:	4413      	add	r3, r2
 800dbb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	69ba      	ldr	r2, [r7, #24]
 800dbba:	0151      	lsls	r1, r2, #5
 800dbbc:	69fa      	ldr	r2, [r7, #28]
 800dbbe:	440a      	add	r2, r1
 800dbc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dbc4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dbc8:	6013      	str	r3, [r2, #0]
 800dbca:	e00f      	b.n	800dbec <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800dbcc:	69bb      	ldr	r3, [r7, #24]
 800dbce:	015a      	lsls	r2, r3, #5
 800dbd0:	69fb      	ldr	r3, [r7, #28]
 800dbd2:	4413      	add	r3, r2
 800dbd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	69ba      	ldr	r2, [r7, #24]
 800dbdc:	0151      	lsls	r1, r2, #5
 800dbde:	69fa      	ldr	r2, [r7, #28]
 800dbe0:	440a      	add	r2, r1
 800dbe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dbe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dbea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800dbec:	69bb      	ldr	r3, [r7, #24]
 800dbee:	015a      	lsls	r2, r3, #5
 800dbf0:	69fb      	ldr	r3, [r7, #28]
 800dbf2:	4413      	add	r3, r2
 800dbf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	69ba      	ldr	r2, [r7, #24]
 800dbfc:	0151      	lsls	r1, r2, #5
 800dbfe:	69fa      	ldr	r2, [r7, #28]
 800dc00:	440a      	add	r2, r1
 800dc02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dc0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dc0c:	2300      	movs	r3, #0
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3720      	adds	r7, #32
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
 800dc16:	bf00      	nop
 800dc18:	1ff80000 	.word	0x1ff80000

0800dc1c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800dc1c:	b480      	push	{r7}
 800dc1e:	b087      	sub	sp, #28
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	60f8      	str	r0, [r7, #12]
 800dc24:	60b9      	str	r1, [r7, #8]
 800dc26:	4613      	mov	r3, r2
 800dc28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	781b      	ldrb	r3, [r3, #0]
 800dc32:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	785b      	ldrb	r3, [r3, #1]
 800dc38:	2b01      	cmp	r3, #1
 800dc3a:	f040 80ce 	bne.w	800ddda <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	699b      	ldr	r3, [r3, #24]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d132      	bne.n	800dcac <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dc46:	693b      	ldr	r3, [r7, #16]
 800dc48:	015a      	lsls	r2, r3, #5
 800dc4a:	697b      	ldr	r3, [r7, #20]
 800dc4c:	4413      	add	r3, r2
 800dc4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc52:	691b      	ldr	r3, [r3, #16]
 800dc54:	693a      	ldr	r2, [r7, #16]
 800dc56:	0151      	lsls	r1, r2, #5
 800dc58:	697a      	ldr	r2, [r7, #20]
 800dc5a:	440a      	add	r2, r1
 800dc5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dc64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dc68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	015a      	lsls	r2, r3, #5
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	4413      	add	r3, r2
 800dc72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc76:	691b      	ldr	r3, [r3, #16]
 800dc78:	693a      	ldr	r2, [r7, #16]
 800dc7a:	0151      	lsls	r1, r2, #5
 800dc7c:	697a      	ldr	r2, [r7, #20]
 800dc7e:	440a      	add	r2, r1
 800dc80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dc88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dc8a:	693b      	ldr	r3, [r7, #16]
 800dc8c:	015a      	lsls	r2, r3, #5
 800dc8e:	697b      	ldr	r3, [r7, #20]
 800dc90:	4413      	add	r3, r2
 800dc92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc96:	691b      	ldr	r3, [r3, #16]
 800dc98:	693a      	ldr	r2, [r7, #16]
 800dc9a:	0151      	lsls	r1, r2, #5
 800dc9c:	697a      	ldr	r2, [r7, #20]
 800dc9e:	440a      	add	r2, r1
 800dca0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dca4:	0cdb      	lsrs	r3, r3, #19
 800dca6:	04db      	lsls	r3, r3, #19
 800dca8:	6113      	str	r3, [r2, #16]
 800dcaa:	e04e      	b.n	800dd4a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	015a      	lsls	r2, r3, #5
 800dcb0:	697b      	ldr	r3, [r7, #20]
 800dcb2:	4413      	add	r3, r2
 800dcb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcb8:	691b      	ldr	r3, [r3, #16]
 800dcba:	693a      	ldr	r2, [r7, #16]
 800dcbc:	0151      	lsls	r1, r2, #5
 800dcbe:	697a      	ldr	r2, [r7, #20]
 800dcc0:	440a      	add	r2, r1
 800dcc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dcc6:	0cdb      	lsrs	r3, r3, #19
 800dcc8:	04db      	lsls	r3, r3, #19
 800dcca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	015a      	lsls	r2, r3, #5
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	4413      	add	r3, r2
 800dcd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcd8:	691b      	ldr	r3, [r3, #16]
 800dcda:	693a      	ldr	r2, [r7, #16]
 800dcdc:	0151      	lsls	r1, r2, #5
 800dcde:	697a      	ldr	r2, [r7, #20]
 800dce0:	440a      	add	r2, r1
 800dce2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dce6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dcea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dcee:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	699a      	ldr	r2, [r3, #24]
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	68db      	ldr	r3, [r3, #12]
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	d903      	bls.n	800dd04 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	68da      	ldr	r2, [r3, #12]
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	015a      	lsls	r2, r3, #5
 800dd08:	697b      	ldr	r3, [r7, #20]
 800dd0a:	4413      	add	r3, r2
 800dd0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd10:	691b      	ldr	r3, [r3, #16]
 800dd12:	693a      	ldr	r2, [r7, #16]
 800dd14:	0151      	lsls	r1, r2, #5
 800dd16:	697a      	ldr	r2, [r7, #20]
 800dd18:	440a      	add	r2, r1
 800dd1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dd22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	015a      	lsls	r2, r3, #5
 800dd28:	697b      	ldr	r3, [r7, #20]
 800dd2a:	4413      	add	r3, r2
 800dd2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd30:	691a      	ldr	r2, [r3, #16]
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	699b      	ldr	r3, [r3, #24]
 800dd36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dd3a:	6939      	ldr	r1, [r7, #16]
 800dd3c:	0148      	lsls	r0, r1, #5
 800dd3e:	6979      	ldr	r1, [r7, #20]
 800dd40:	4401      	add	r1, r0
 800dd42:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dd46:	4313      	orrs	r3, r2
 800dd48:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800dd4a:	79fb      	ldrb	r3, [r7, #7]
 800dd4c:	2b01      	cmp	r3, #1
 800dd4e:	d11e      	bne.n	800dd8e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	695b      	ldr	r3, [r3, #20]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d009      	beq.n	800dd6c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	015a      	lsls	r2, r3, #5
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	4413      	add	r3, r2
 800dd60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd64:	461a      	mov	r2, r3
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	695b      	ldr	r3, [r3, #20]
 800dd6a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dd6c:	693b      	ldr	r3, [r7, #16]
 800dd6e:	015a      	lsls	r2, r3, #5
 800dd70:	697b      	ldr	r3, [r7, #20]
 800dd72:	4413      	add	r3, r2
 800dd74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	693a      	ldr	r2, [r7, #16]
 800dd7c:	0151      	lsls	r1, r2, #5
 800dd7e:	697a      	ldr	r2, [r7, #20]
 800dd80:	440a      	add	r2, r1
 800dd82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dd8a:	6013      	str	r3, [r2, #0]
 800dd8c:	e097      	b.n	800debe <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	015a      	lsls	r2, r3, #5
 800dd92:	697b      	ldr	r3, [r7, #20]
 800dd94:	4413      	add	r3, r2
 800dd96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	693a      	ldr	r2, [r7, #16]
 800dd9e:	0151      	lsls	r1, r2, #5
 800dda0:	697a      	ldr	r2, [r7, #20]
 800dda2:	440a      	add	r2, r1
 800dda4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dda8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ddac:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	699b      	ldr	r3, [r3, #24]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	f000 8083 	beq.w	800debe <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ddb8:	697b      	ldr	r3, [r7, #20]
 800ddba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	781b      	ldrb	r3, [r3, #0]
 800ddc4:	f003 030f 	and.w	r3, r3, #15
 800ddc8:	2101      	movs	r1, #1
 800ddca:	fa01 f303 	lsl.w	r3, r1, r3
 800ddce:	6979      	ldr	r1, [r7, #20]
 800ddd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ddd4:	4313      	orrs	r3, r2
 800ddd6:	634b      	str	r3, [r1, #52]	; 0x34
 800ddd8:	e071      	b.n	800debe <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ddda:	693b      	ldr	r3, [r7, #16]
 800dddc:	015a      	lsls	r2, r3, #5
 800ddde:	697b      	ldr	r3, [r7, #20]
 800dde0:	4413      	add	r3, r2
 800dde2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dde6:	691b      	ldr	r3, [r3, #16]
 800dde8:	693a      	ldr	r2, [r7, #16]
 800ddea:	0151      	lsls	r1, r2, #5
 800ddec:	697a      	ldr	r2, [r7, #20]
 800ddee:	440a      	add	r2, r1
 800ddf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ddf4:	0cdb      	lsrs	r3, r3, #19
 800ddf6:	04db      	lsls	r3, r3, #19
 800ddf8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ddfa:	693b      	ldr	r3, [r7, #16]
 800ddfc:	015a      	lsls	r2, r3, #5
 800ddfe:	697b      	ldr	r3, [r7, #20]
 800de00:	4413      	add	r3, r2
 800de02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de06:	691b      	ldr	r3, [r3, #16]
 800de08:	693a      	ldr	r2, [r7, #16]
 800de0a:	0151      	lsls	r1, r2, #5
 800de0c:	697a      	ldr	r2, [r7, #20]
 800de0e:	440a      	add	r2, r1
 800de10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800de18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800de1c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	699b      	ldr	r3, [r3, #24]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d003      	beq.n	800de2e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	68da      	ldr	r2, [r3, #12]
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	68da      	ldr	r2, [r3, #12]
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	015a      	lsls	r2, r3, #5
 800de3a:	697b      	ldr	r3, [r7, #20]
 800de3c:	4413      	add	r3, r2
 800de3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de42:	691b      	ldr	r3, [r3, #16]
 800de44:	693a      	ldr	r2, [r7, #16]
 800de46:	0151      	lsls	r1, r2, #5
 800de48:	697a      	ldr	r2, [r7, #20]
 800de4a:	440a      	add	r2, r1
 800de4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800de54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800de56:	693b      	ldr	r3, [r7, #16]
 800de58:	015a      	lsls	r2, r3, #5
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	4413      	add	r3, r2
 800de5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de62:	691a      	ldr	r2, [r3, #16]
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	69db      	ldr	r3, [r3, #28]
 800de68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800de6c:	6939      	ldr	r1, [r7, #16]
 800de6e:	0148      	lsls	r0, r1, #5
 800de70:	6979      	ldr	r1, [r7, #20]
 800de72:	4401      	add	r1, r0
 800de74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800de78:	4313      	orrs	r3, r2
 800de7a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800de7c:	79fb      	ldrb	r3, [r7, #7]
 800de7e:	2b01      	cmp	r3, #1
 800de80:	d10d      	bne.n	800de9e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	691b      	ldr	r3, [r3, #16]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d009      	beq.n	800de9e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	6919      	ldr	r1, [r3, #16]
 800de8e:	693b      	ldr	r3, [r7, #16]
 800de90:	015a      	lsls	r2, r3, #5
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	4413      	add	r3, r2
 800de96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de9a:	460a      	mov	r2, r1
 800de9c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800de9e:	693b      	ldr	r3, [r7, #16]
 800dea0:	015a      	lsls	r2, r3, #5
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	4413      	add	r3, r2
 800dea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	693a      	ldr	r2, [r7, #16]
 800deae:	0151      	lsls	r1, r2, #5
 800deb0:	697a      	ldr	r2, [r7, #20]
 800deb2:	440a      	add	r2, r1
 800deb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800deb8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800debc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800debe:	2300      	movs	r3, #0
}
 800dec0:	4618      	mov	r0, r3
 800dec2:	371c      	adds	r7, #28
 800dec4:	46bd      	mov	sp, r7
 800dec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deca:	4770      	bx	lr

0800decc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800decc:	b480      	push	{r7}
 800dece:	b087      	sub	sp, #28
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ded6:	2300      	movs	r3, #0
 800ded8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800deda:	2300      	movs	r3, #0
 800dedc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	785b      	ldrb	r3, [r3, #1]
 800dee6:	2b01      	cmp	r3, #1
 800dee8:	d14a      	bne.n	800df80 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	781b      	ldrb	r3, [r3, #0]
 800deee:	015a      	lsls	r2, r3, #5
 800def0:	693b      	ldr	r3, [r7, #16]
 800def2:	4413      	add	r3, r2
 800def4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800defe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800df02:	f040 8086 	bne.w	800e012 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	015a      	lsls	r2, r3, #5
 800df0c:	693b      	ldr	r3, [r7, #16]
 800df0e:	4413      	add	r3, r2
 800df10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	683a      	ldr	r2, [r7, #0]
 800df18:	7812      	ldrb	r2, [r2, #0]
 800df1a:	0151      	lsls	r1, r2, #5
 800df1c:	693a      	ldr	r2, [r7, #16]
 800df1e:	440a      	add	r2, r1
 800df20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800df28:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	781b      	ldrb	r3, [r3, #0]
 800df2e:	015a      	lsls	r2, r3, #5
 800df30:	693b      	ldr	r3, [r7, #16]
 800df32:	4413      	add	r3, r2
 800df34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	683a      	ldr	r2, [r7, #0]
 800df3c:	7812      	ldrb	r2, [r2, #0]
 800df3e:	0151      	lsls	r1, r2, #5
 800df40:	693a      	ldr	r2, [r7, #16]
 800df42:	440a      	add	r2, r1
 800df44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800df4c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	3301      	adds	r3, #1
 800df52:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	f242 7210 	movw	r2, #10000	; 0x2710
 800df5a:	4293      	cmp	r3, r2
 800df5c:	d902      	bls.n	800df64 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800df5e:	2301      	movs	r3, #1
 800df60:	75fb      	strb	r3, [r7, #23]
          break;
 800df62:	e056      	b.n	800e012 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	781b      	ldrb	r3, [r3, #0]
 800df68:	015a      	lsls	r2, r3, #5
 800df6a:	693b      	ldr	r3, [r7, #16]
 800df6c:	4413      	add	r3, r2
 800df6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800df78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800df7c:	d0e7      	beq.n	800df4e <USB_EPStopXfer+0x82>
 800df7e:	e048      	b.n	800e012 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	781b      	ldrb	r3, [r3, #0]
 800df84:	015a      	lsls	r2, r3, #5
 800df86:	693b      	ldr	r3, [r7, #16]
 800df88:	4413      	add	r3, r2
 800df8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800df94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800df98:	d13b      	bne.n	800e012 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	781b      	ldrb	r3, [r3, #0]
 800df9e:	015a      	lsls	r2, r3, #5
 800dfa0:	693b      	ldr	r3, [r7, #16]
 800dfa2:	4413      	add	r3, r2
 800dfa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	683a      	ldr	r2, [r7, #0]
 800dfac:	7812      	ldrb	r2, [r2, #0]
 800dfae:	0151      	lsls	r1, r2, #5
 800dfb0:	693a      	ldr	r2, [r7, #16]
 800dfb2:	440a      	add	r2, r1
 800dfb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dfb8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dfbc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	781b      	ldrb	r3, [r3, #0]
 800dfc2:	015a      	lsls	r2, r3, #5
 800dfc4:	693b      	ldr	r3, [r7, #16]
 800dfc6:	4413      	add	r3, r2
 800dfc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	683a      	ldr	r2, [r7, #0]
 800dfd0:	7812      	ldrb	r2, [r2, #0]
 800dfd2:	0151      	lsls	r1, r2, #5
 800dfd4:	693a      	ldr	r2, [r7, #16]
 800dfd6:	440a      	add	r2, r1
 800dfd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dfdc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dfe0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	3301      	adds	r3, #1
 800dfe6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	f242 7210 	movw	r2, #10000	; 0x2710
 800dfee:	4293      	cmp	r3, r2
 800dff0:	d902      	bls.n	800dff8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800dff2:	2301      	movs	r3, #1
 800dff4:	75fb      	strb	r3, [r7, #23]
          break;
 800dff6:	e00c      	b.n	800e012 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	781b      	ldrb	r3, [r3, #0]
 800dffc:	015a      	lsls	r2, r3, #5
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	4413      	add	r3, r2
 800e002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e00c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e010:	d0e7      	beq.n	800dfe2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e012:	7dfb      	ldrb	r3, [r7, #23]
}
 800e014:	4618      	mov	r0, r3
 800e016:	371c      	adds	r7, #28
 800e018:	46bd      	mov	sp, r7
 800e01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01e:	4770      	bx	lr

0800e020 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e020:	b480      	push	{r7}
 800e022:	b089      	sub	sp, #36	; 0x24
 800e024:	af00      	add	r7, sp, #0
 800e026:	60f8      	str	r0, [r7, #12]
 800e028:	60b9      	str	r1, [r7, #8]
 800e02a:	4611      	mov	r1, r2
 800e02c:	461a      	mov	r2, r3
 800e02e:	460b      	mov	r3, r1
 800e030:	71fb      	strb	r3, [r7, #7]
 800e032:	4613      	mov	r3, r2
 800e034:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e03e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e042:	2b00      	cmp	r3, #0
 800e044:	d123      	bne.n	800e08e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e046:	88bb      	ldrh	r3, [r7, #4]
 800e048:	3303      	adds	r3, #3
 800e04a:	089b      	lsrs	r3, r3, #2
 800e04c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e04e:	2300      	movs	r3, #0
 800e050:	61bb      	str	r3, [r7, #24]
 800e052:	e018      	b.n	800e086 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e054:	79fb      	ldrb	r3, [r7, #7]
 800e056:	031a      	lsls	r2, r3, #12
 800e058:	697b      	ldr	r3, [r7, #20]
 800e05a:	4413      	add	r3, r2
 800e05c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e060:	461a      	mov	r2, r3
 800e062:	69fb      	ldr	r3, [r7, #28]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e068:	69fb      	ldr	r3, [r7, #28]
 800e06a:	3301      	adds	r3, #1
 800e06c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e06e:	69fb      	ldr	r3, [r7, #28]
 800e070:	3301      	adds	r3, #1
 800e072:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e074:	69fb      	ldr	r3, [r7, #28]
 800e076:	3301      	adds	r3, #1
 800e078:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e07a:	69fb      	ldr	r3, [r7, #28]
 800e07c:	3301      	adds	r3, #1
 800e07e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e080:	69bb      	ldr	r3, [r7, #24]
 800e082:	3301      	adds	r3, #1
 800e084:	61bb      	str	r3, [r7, #24]
 800e086:	69ba      	ldr	r2, [r7, #24]
 800e088:	693b      	ldr	r3, [r7, #16]
 800e08a:	429a      	cmp	r2, r3
 800e08c:	d3e2      	bcc.n	800e054 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e08e:	2300      	movs	r3, #0
}
 800e090:	4618      	mov	r0, r3
 800e092:	3724      	adds	r7, #36	; 0x24
 800e094:	46bd      	mov	sp, r7
 800e096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09a:	4770      	bx	lr

0800e09c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e09c:	b480      	push	{r7}
 800e09e:	b08b      	sub	sp, #44	; 0x2c
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	60f8      	str	r0, [r7, #12]
 800e0a4:	60b9      	str	r1, [r7, #8]
 800e0a6:	4613      	mov	r3, r2
 800e0a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e0b2:	88fb      	ldrh	r3, [r7, #6]
 800e0b4:	089b      	lsrs	r3, r3, #2
 800e0b6:	b29b      	uxth	r3, r3
 800e0b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e0ba:	88fb      	ldrh	r3, [r7, #6]
 800e0bc:	f003 0303 	and.w	r3, r3, #3
 800e0c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	623b      	str	r3, [r7, #32]
 800e0c6:	e014      	b.n	800e0f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e0c8:	69bb      	ldr	r3, [r7, #24]
 800e0ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0ce:	681a      	ldr	r2, [r3, #0]
 800e0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d2:	601a      	str	r2, [r3, #0]
    pDest++;
 800e0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d6:	3301      	adds	r3, #1
 800e0d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0dc:	3301      	adds	r3, #1
 800e0de:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e8:	3301      	adds	r3, #1
 800e0ea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800e0ec:	6a3b      	ldr	r3, [r7, #32]
 800e0ee:	3301      	adds	r3, #1
 800e0f0:	623b      	str	r3, [r7, #32]
 800e0f2:	6a3a      	ldr	r2, [r7, #32]
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	d3e6      	bcc.n	800e0c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e0fa:	8bfb      	ldrh	r3, [r7, #30]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d01e      	beq.n	800e13e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e100:	2300      	movs	r3, #0
 800e102:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e104:	69bb      	ldr	r3, [r7, #24]
 800e106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e10a:	461a      	mov	r2, r3
 800e10c:	f107 0310 	add.w	r3, r7, #16
 800e110:	6812      	ldr	r2, [r2, #0]
 800e112:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e114:	693a      	ldr	r2, [r7, #16]
 800e116:	6a3b      	ldr	r3, [r7, #32]
 800e118:	b2db      	uxtb	r3, r3
 800e11a:	00db      	lsls	r3, r3, #3
 800e11c:	fa22 f303 	lsr.w	r3, r2, r3
 800e120:	b2da      	uxtb	r2, r3
 800e122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e124:	701a      	strb	r2, [r3, #0]
      i++;
 800e126:	6a3b      	ldr	r3, [r7, #32]
 800e128:	3301      	adds	r3, #1
 800e12a:	623b      	str	r3, [r7, #32]
      pDest++;
 800e12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e12e:	3301      	adds	r3, #1
 800e130:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800e132:	8bfb      	ldrh	r3, [r7, #30]
 800e134:	3b01      	subs	r3, #1
 800e136:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e138:	8bfb      	ldrh	r3, [r7, #30]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d1ea      	bne.n	800e114 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e140:	4618      	mov	r0, r3
 800e142:	372c      	adds	r7, #44	; 0x2c
 800e144:	46bd      	mov	sp, r7
 800e146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14a:	4770      	bx	lr

0800e14c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e14c:	b480      	push	{r7}
 800e14e:	b085      	sub	sp, #20
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
 800e154:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	781b      	ldrb	r3, [r3, #0]
 800e15e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	785b      	ldrb	r3, [r3, #1]
 800e164:	2b01      	cmp	r3, #1
 800e166:	d12c      	bne.n	800e1c2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	015a      	lsls	r2, r3, #5
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	4413      	add	r3, r2
 800e170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	2b00      	cmp	r3, #0
 800e178:	db12      	blt.n	800e1a0 <USB_EPSetStall+0x54>
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d00f      	beq.n	800e1a0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	015a      	lsls	r2, r3, #5
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	4413      	add	r3, r2
 800e188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	68ba      	ldr	r2, [r7, #8]
 800e190:	0151      	lsls	r1, r2, #5
 800e192:	68fa      	ldr	r2, [r7, #12]
 800e194:	440a      	add	r2, r1
 800e196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e19a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e19e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e1a0:	68bb      	ldr	r3, [r7, #8]
 800e1a2:	015a      	lsls	r2, r3, #5
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	4413      	add	r3, r2
 800e1a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	68ba      	ldr	r2, [r7, #8]
 800e1b0:	0151      	lsls	r1, r2, #5
 800e1b2:	68fa      	ldr	r2, [r7, #12]
 800e1b4:	440a      	add	r2, r1
 800e1b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e1ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e1be:	6013      	str	r3, [r2, #0]
 800e1c0:	e02b      	b.n	800e21a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e1c2:	68bb      	ldr	r3, [r7, #8]
 800e1c4:	015a      	lsls	r2, r3, #5
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	4413      	add	r3, r2
 800e1ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	db12      	blt.n	800e1fa <USB_EPSetStall+0xae>
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d00f      	beq.n	800e1fa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e1da:	68bb      	ldr	r3, [r7, #8]
 800e1dc:	015a      	lsls	r2, r3, #5
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	4413      	add	r3, r2
 800e1e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	68ba      	ldr	r2, [r7, #8]
 800e1ea:	0151      	lsls	r1, r2, #5
 800e1ec:	68fa      	ldr	r2, [r7, #12]
 800e1ee:	440a      	add	r2, r1
 800e1f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e1f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e1f8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	015a      	lsls	r2, r3, #5
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	4413      	add	r3, r2
 800e202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	68ba      	ldr	r2, [r7, #8]
 800e20a:	0151      	lsls	r1, r2, #5
 800e20c:	68fa      	ldr	r2, [r7, #12]
 800e20e:	440a      	add	r2, r1
 800e210:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e214:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e218:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e21a:	2300      	movs	r3, #0
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3714      	adds	r7, #20
 800e220:	46bd      	mov	sp, r7
 800e222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e226:	4770      	bx	lr

0800e228 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e228:	b480      	push	{r7}
 800e22a:	b085      	sub	sp, #20
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
 800e230:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	781b      	ldrb	r3, [r3, #0]
 800e23a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	785b      	ldrb	r3, [r3, #1]
 800e240:	2b01      	cmp	r3, #1
 800e242:	d128      	bne.n	800e296 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	015a      	lsls	r2, r3, #5
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	4413      	add	r3, r2
 800e24c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	68ba      	ldr	r2, [r7, #8]
 800e254:	0151      	lsls	r1, r2, #5
 800e256:	68fa      	ldr	r2, [r7, #12]
 800e258:	440a      	add	r2, r1
 800e25a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e25e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e262:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	791b      	ldrb	r3, [r3, #4]
 800e268:	2b03      	cmp	r3, #3
 800e26a:	d003      	beq.n	800e274 <USB_EPClearStall+0x4c>
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	791b      	ldrb	r3, [r3, #4]
 800e270:	2b02      	cmp	r3, #2
 800e272:	d138      	bne.n	800e2e6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e274:	68bb      	ldr	r3, [r7, #8]
 800e276:	015a      	lsls	r2, r3, #5
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	4413      	add	r3, r2
 800e27c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	68ba      	ldr	r2, [r7, #8]
 800e284:	0151      	lsls	r1, r2, #5
 800e286:	68fa      	ldr	r2, [r7, #12]
 800e288:	440a      	add	r2, r1
 800e28a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e28e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e292:	6013      	str	r3, [r2, #0]
 800e294:	e027      	b.n	800e2e6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	015a      	lsls	r2, r3, #5
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	4413      	add	r3, r2
 800e29e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	68ba      	ldr	r2, [r7, #8]
 800e2a6:	0151      	lsls	r1, r2, #5
 800e2a8:	68fa      	ldr	r2, [r7, #12]
 800e2aa:	440a      	add	r2, r1
 800e2ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e2b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e2b4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	791b      	ldrb	r3, [r3, #4]
 800e2ba:	2b03      	cmp	r3, #3
 800e2bc:	d003      	beq.n	800e2c6 <USB_EPClearStall+0x9e>
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	791b      	ldrb	r3, [r3, #4]
 800e2c2:	2b02      	cmp	r3, #2
 800e2c4:	d10f      	bne.n	800e2e6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e2c6:	68bb      	ldr	r3, [r7, #8]
 800e2c8:	015a      	lsls	r2, r3, #5
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	4413      	add	r3, r2
 800e2ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	68ba      	ldr	r2, [r7, #8]
 800e2d6:	0151      	lsls	r1, r2, #5
 800e2d8:	68fa      	ldr	r2, [r7, #12]
 800e2da:	440a      	add	r2, r1
 800e2dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e2e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e2e4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e2e6:	2300      	movs	r3, #0
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	3714      	adds	r7, #20
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f2:	4770      	bx	lr

0800e2f4 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b086      	sub	sp, #24
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 800e300:	2300      	movs	r3, #0
 800e302:	617b      	str	r3, [r7, #20]
 800e304:	e016      	b.n	800e334 <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800e306:	697b      	ldr	r3, [r7, #20]
 800e308:	015a      	lsls	r2, r3, #5
 800e30a:	693b      	ldr	r3, [r7, #16]
 800e30c:	4413      	add	r3, r2
 800e30e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e312:	461a      	mov	r2, r3
 800e314:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e318:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800e31a:	697b      	ldr	r3, [r7, #20]
 800e31c:	015a      	lsls	r2, r3, #5
 800e31e:	693b      	ldr	r3, [r7, #16]
 800e320:	4413      	add	r3, r2
 800e322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e326:	461a      	mov	r2, r3
 800e328:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e32c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 800e32e:	697b      	ldr	r3, [r7, #20]
 800e330:	3301      	adds	r3, #1
 800e332:	617b      	str	r3, [r7, #20]
 800e334:	697b      	ldr	r3, [r7, #20]
 800e336:	2b0e      	cmp	r3, #14
 800e338:	d9e5      	bls.n	800e306 <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 800e33a:	693b      	ldr	r3, [r7, #16]
 800e33c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e340:	461a      	mov	r2, r3
 800e342:	2300      	movs	r3, #0
 800e344:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 800e346:	693b      	ldr	r3, [r7, #16]
 800e348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e34c:	461a      	mov	r2, r3
 800e34e:	2300      	movs	r3, #0
 800e350:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e358:	461a      	mov	r2, r3
 800e35a:	2300      	movs	r3, #0
 800e35c:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	f7ff f842 	bl	800d3e8 <USB_FlushRxFifo>
 800e364:	4603      	mov	r3, r0
 800e366:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800e368:	7bfb      	ldrb	r3, [r7, #15]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d001      	beq.n	800e372 <USB_StopDevice+0x7e>
  {
    return ret;
 800e36e:	7bfb      	ldrb	r3, [r7, #15]
 800e370:	e00b      	b.n	800e38a <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 800e372:	2110      	movs	r1, #16
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f7ff f803 	bl	800d380 <USB_FlushTxFifo>
 800e37a:	4603      	mov	r3, r0
 800e37c:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800e37e:	7bfb      	ldrb	r3, [r7, #15]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d001      	beq.n	800e388 <USB_StopDevice+0x94>
  {
    return ret;
 800e384:	7bfb      	ldrb	r3, [r7, #15]
 800e386:	e000      	b.n	800e38a <USB_StopDevice+0x96>
  }

  return ret;
 800e388:	7bfb      	ldrb	r3, [r7, #15]
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3718      	adds	r7, #24
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}

0800e392 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e392:	b480      	push	{r7}
 800e394:	b085      	sub	sp, #20
 800e396:	af00      	add	r7, sp, #0
 800e398:	6078      	str	r0, [r7, #4]
 800e39a:	460b      	mov	r3, r1
 800e39c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	68fa      	ldr	r2, [r7, #12]
 800e3ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e3b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e3b4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3bc:	681a      	ldr	r2, [r3, #0]
 800e3be:	78fb      	ldrb	r3, [r7, #3]
 800e3c0:	011b      	lsls	r3, r3, #4
 800e3c2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e3c6:	68f9      	ldr	r1, [r7, #12]
 800e3c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e3cc:	4313      	orrs	r3, r2
 800e3ce:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e3d0:	2300      	movs	r3, #0
}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	3714      	adds	r7, #20
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3dc:	4770      	bx	lr

0800e3de <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e3de:	b480      	push	{r7}
 800e3e0:	b085      	sub	sp, #20
 800e3e2:	af00      	add	r7, sp, #0
 800e3e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	68fa      	ldr	r2, [r7, #12]
 800e3f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e3f8:	f023 0303 	bic.w	r3, r3, #3
 800e3fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e404:	685b      	ldr	r3, [r3, #4]
 800e406:	68fa      	ldr	r2, [r7, #12]
 800e408:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e40c:	f023 0302 	bic.w	r3, r3, #2
 800e410:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e412:	2300      	movs	r3, #0
}
 800e414:	4618      	mov	r0, r3
 800e416:	3714      	adds	r7, #20
 800e418:	46bd      	mov	sp, r7
 800e41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41e:	4770      	bx	lr

0800e420 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e420:	b480      	push	{r7}
 800e422:	b085      	sub	sp, #20
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	68fa      	ldr	r2, [r7, #12]
 800e436:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e43a:	f023 0303 	bic.w	r3, r3, #3
 800e43e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e446:	685b      	ldr	r3, [r3, #4]
 800e448:	68fa      	ldr	r2, [r7, #12]
 800e44a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e44e:	f043 0302 	orr.w	r3, r3, #2
 800e452:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e454:	2300      	movs	r3, #0
}
 800e456:	4618      	mov	r0, r3
 800e458:	3714      	adds	r7, #20
 800e45a:	46bd      	mov	sp, r7
 800e45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e460:	4770      	bx	lr

0800e462 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e462:	b480      	push	{r7}
 800e464:	b085      	sub	sp, #20
 800e466:	af00      	add	r7, sp, #0
 800e468:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	695b      	ldr	r3, [r3, #20]
 800e46e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	699b      	ldr	r3, [r3, #24]
 800e474:	68fa      	ldr	r2, [r7, #12]
 800e476:	4013      	ands	r3, r2
 800e478:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e47a:	68fb      	ldr	r3, [r7, #12]
}
 800e47c:	4618      	mov	r0, r3
 800e47e:	3714      	adds	r7, #20
 800e480:	46bd      	mov	sp, r7
 800e482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e486:	4770      	bx	lr

0800e488 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e488:	b480      	push	{r7}
 800e48a:	b085      	sub	sp, #20
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e49a:	699b      	ldr	r3, [r3, #24]
 800e49c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4a4:	69db      	ldr	r3, [r3, #28]
 800e4a6:	68ba      	ldr	r2, [r7, #8]
 800e4a8:	4013      	ands	r3, r2
 800e4aa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	0c1b      	lsrs	r3, r3, #16
}
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	3714      	adds	r7, #20
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ba:	4770      	bx	lr

0800e4bc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e4bc:	b480      	push	{r7}
 800e4be:	b085      	sub	sp, #20
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4ce:	699b      	ldr	r3, [r3, #24]
 800e4d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4d8:	69db      	ldr	r3, [r3, #28]
 800e4da:	68ba      	ldr	r2, [r7, #8]
 800e4dc:	4013      	ands	r3, r2
 800e4de:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e4e0:	68bb      	ldr	r3, [r7, #8]
 800e4e2:	b29b      	uxth	r3, r3
}
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3714      	adds	r7, #20
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ee:	4770      	bx	lr

0800e4f0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e4f0:	b480      	push	{r7}
 800e4f2:	b085      	sub	sp, #20
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
 800e4f8:	460b      	mov	r3, r1
 800e4fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e500:	78fb      	ldrb	r3, [r7, #3]
 800e502:	015a      	lsls	r2, r3, #5
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	4413      	add	r3, r2
 800e508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e50c:	689b      	ldr	r3, [r3, #8]
 800e50e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e516:	695b      	ldr	r3, [r3, #20]
 800e518:	68ba      	ldr	r2, [r7, #8]
 800e51a:	4013      	ands	r3, r2
 800e51c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e51e:	68bb      	ldr	r3, [r7, #8]
}
 800e520:	4618      	mov	r0, r3
 800e522:	3714      	adds	r7, #20
 800e524:	46bd      	mov	sp, r7
 800e526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52a:	4770      	bx	lr

0800e52c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e52c:	b480      	push	{r7}
 800e52e:	b087      	sub	sp, #28
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	460b      	mov	r3, r1
 800e536:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e53c:	697b      	ldr	r3, [r7, #20]
 800e53e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e542:	691b      	ldr	r3, [r3, #16]
 800e544:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e546:	697b      	ldr	r3, [r7, #20]
 800e548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e54c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e54e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e550:	78fb      	ldrb	r3, [r7, #3]
 800e552:	f003 030f 	and.w	r3, r3, #15
 800e556:	68fa      	ldr	r2, [r7, #12]
 800e558:	fa22 f303 	lsr.w	r3, r2, r3
 800e55c:	01db      	lsls	r3, r3, #7
 800e55e:	b2db      	uxtb	r3, r3
 800e560:	693a      	ldr	r2, [r7, #16]
 800e562:	4313      	orrs	r3, r2
 800e564:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e566:	78fb      	ldrb	r3, [r7, #3]
 800e568:	015a      	lsls	r2, r3, #5
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	4413      	add	r3, r2
 800e56e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e572:	689b      	ldr	r3, [r3, #8]
 800e574:	693a      	ldr	r2, [r7, #16]
 800e576:	4013      	ands	r3, r2
 800e578:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e57a:	68bb      	ldr	r3, [r7, #8]
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	371c      	adds	r7, #28
 800e580:	46bd      	mov	sp, r7
 800e582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e586:	4770      	bx	lr

0800e588 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e588:	b480      	push	{r7}
 800e58a:	b083      	sub	sp, #12
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	695b      	ldr	r3, [r3, #20]
 800e594:	f003 0301 	and.w	r3, r3, #1
}
 800e598:	4618      	mov	r0, r3
 800e59a:	370c      	adds	r7, #12
 800e59c:	46bd      	mov	sp, r7
 800e59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a2:	4770      	bx	lr

0800e5a4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e5a4:	b480      	push	{r7}
 800e5a6:	b085      	sub	sp, #20
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	68fa      	ldr	r2, [r7, #12]
 800e5ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e5be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800e5c2:	f023 0307 	bic.w	r3, r3, #7
 800e5c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5ce:	685b      	ldr	r3, [r3, #4]
 800e5d0:	68fa      	ldr	r2, [r7, #12]
 800e5d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e5d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e5da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e5dc:	2300      	movs	r3, #0
}
 800e5de:	4618      	mov	r0, r3
 800e5e0:	3714      	adds	r7, #20
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e8:	4770      	bx	lr
	...

0800e5ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800e5ec:	b480      	push	{r7}
 800e5ee:	b087      	sub	sp, #28
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	60f8      	str	r0, [r7, #12]
 800e5f4:	460b      	mov	r3, r1
 800e5f6:	607a      	str	r2, [r7, #4]
 800e5f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	333c      	adds	r3, #60	; 0x3c
 800e602:	3304      	adds	r3, #4
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e608:	693b      	ldr	r3, [r7, #16]
 800e60a:	4a26      	ldr	r2, [pc, #152]	; (800e6a4 <USB_EP0_OutStart+0xb8>)
 800e60c:	4293      	cmp	r3, r2
 800e60e:	d90a      	bls.n	800e626 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e610:	697b      	ldr	r3, [r7, #20]
 800e612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e61c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e620:	d101      	bne.n	800e626 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e622:	2300      	movs	r3, #0
 800e624:	e037      	b.n	800e696 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e626:	697b      	ldr	r3, [r7, #20]
 800e628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e62c:	461a      	mov	r2, r3
 800e62e:	2300      	movs	r3, #0
 800e630:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e632:	697b      	ldr	r3, [r7, #20]
 800e634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e638:	691b      	ldr	r3, [r3, #16]
 800e63a:	697a      	ldr	r2, [r7, #20]
 800e63c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e640:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e644:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e646:	697b      	ldr	r3, [r7, #20]
 800e648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e64c:	691b      	ldr	r3, [r3, #16]
 800e64e:	697a      	ldr	r2, [r7, #20]
 800e650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e654:	f043 0318 	orr.w	r3, r3, #24
 800e658:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e65a:	697b      	ldr	r3, [r7, #20]
 800e65c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e660:	691b      	ldr	r3, [r3, #16]
 800e662:	697a      	ldr	r2, [r7, #20]
 800e664:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e668:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e66c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e66e:	7afb      	ldrb	r3, [r7, #11]
 800e670:	2b01      	cmp	r3, #1
 800e672:	d10f      	bne.n	800e694 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e67a:	461a      	mov	r2, r3
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	697a      	ldr	r2, [r7, #20]
 800e68a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e68e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800e692:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e694:	2300      	movs	r3, #0
}
 800e696:	4618      	mov	r0, r3
 800e698:	371c      	adds	r7, #28
 800e69a:	46bd      	mov	sp, r7
 800e69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a0:	4770      	bx	lr
 800e6a2:	bf00      	nop
 800e6a4:	4f54300a 	.word	0x4f54300a

0800e6a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b085      	sub	sp, #20
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	3301      	adds	r3, #1
 800e6b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	4a13      	ldr	r2, [pc, #76]	; (800e70c <USB_CoreReset+0x64>)
 800e6be:	4293      	cmp	r3, r2
 800e6c0:	d901      	bls.n	800e6c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e6c2:	2303      	movs	r3, #3
 800e6c4:	e01b      	b.n	800e6fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	691b      	ldr	r3, [r3, #16]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	daf2      	bge.n	800e6b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	691b      	ldr	r3, [r3, #16]
 800e6d6:	f043 0201 	orr.w	r2, r3, #1
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	3301      	adds	r3, #1
 800e6e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	4a09      	ldr	r2, [pc, #36]	; (800e70c <USB_CoreReset+0x64>)
 800e6e8:	4293      	cmp	r3, r2
 800e6ea:	d901      	bls.n	800e6f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e6ec:	2303      	movs	r3, #3
 800e6ee:	e006      	b.n	800e6fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	691b      	ldr	r3, [r3, #16]
 800e6f4:	f003 0301 	and.w	r3, r3, #1
 800e6f8:	2b01      	cmp	r3, #1
 800e6fa:	d0f0      	beq.n	800e6de <USB_CoreReset+0x36>

  return HAL_OK;
 800e6fc:	2300      	movs	r3, #0
}
 800e6fe:	4618      	mov	r0, r3
 800e700:	3714      	adds	r7, #20
 800e702:	46bd      	mov	sp, r7
 800e704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e708:	4770      	bx	lr
 800e70a:	bf00      	nop
 800e70c:	00030d40 	.word	0x00030d40

0800e710 <HAL_UART_RxCpltCallback>:
uint8_t flag_cli = 0;
uint8_t invoke_time =0;
uint8_t invoke_date =0;

// STM32 UART callback function, to pass received characters to the embedded-cli
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800e710:	b580      	push	{r7, lr}
 800e712:	b084      	sub	sp, #16
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
	if (huart == UART_CLI_PERIPH && cliIsReady) {
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	4a13      	ldr	r2, [pc, #76]	; (800e768 <HAL_UART_RxCpltCallback+0x58>)
 800e71c:	4293      	cmp	r3, r2
 800e71e:	d11f      	bne.n	800e760 <HAL_UART_RxCpltCallback+0x50>
 800e720:	4b12      	ldr	r3, [pc, #72]	; (800e76c <HAL_UART_RxCpltCallback+0x5c>)
 800e722:	781b      	ldrb	r3, [r3, #0]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d01b      	beq.n	800e760 <HAL_UART_RxCpltCallback+0x50>
		HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer,
 800e728:	2201      	movs	r2, #1
 800e72a:	4911      	ldr	r1, [pc, #68]	; (800e770 <HAL_UART_RxCpltCallback+0x60>)
 800e72c:	480e      	ldr	r0, [pc, #56]	; (800e768 <HAL_UART_RxCpltCallback+0x58>)
 800e72e:	f7fc fe37 	bl	800b3a0 <HAL_UART_Receive_IT>
				UART_RX_BUFF_SIZE);

		if (!cli_other) {
 800e732:	4b10      	ldr	r3, [pc, #64]	; (800e774 <HAL_UART_RxCpltCallback+0x64>)
 800e734:	781b      	ldrb	r3, [r3, #0]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d10a      	bne.n	800e750 <HAL_UART_RxCpltCallback+0x40>
			char c = UART_CLI_rxBuffer[0];
 800e73a:	4b0d      	ldr	r3, [pc, #52]	; (800e770 <HAL_UART_RxCpltCallback+0x60>)
 800e73c:	781b      	ldrb	r3, [r3, #0]
 800e73e:	73fb      	strb	r3, [r7, #15]
			embeddedCliReceiveChar(cli, c);
 800e740:	4b0d      	ldr	r3, [pc, #52]	; (800e778 <HAL_UART_RxCpltCallback+0x68>)
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	7bfa      	ldrb	r2, [r7, #15]
 800e746:	4611      	mov	r1, r2
 800e748:	4618      	mov	r0, r3
 800e74a:	f001 fe9d 	bl	8010488 <embeddedCliReceiveChar>
 800e74e:	e002      	b.n	800e756 <HAL_UART_RxCpltCallback+0x46>
		} else {
			flag_cli = 1;
 800e750:	4b0a      	ldr	r3, [pc, #40]	; (800e77c <HAL_UART_RxCpltCallback+0x6c>)
 800e752:	2201      	movs	r2, #1
 800e754:	701a      	strb	r2, [r3, #0]
		}

		prev_sleep_time = HAL_GetTick();
 800e756:	f7f4 febf 	bl	80034d8 <HAL_GetTick>
 800e75a:	4603      	mov	r3, r0
 800e75c:	4a08      	ldr	r2, [pc, #32]	; (800e780 <HAL_UART_RxCpltCallback+0x70>)
 800e75e:	6013      	str	r3, [r2, #0]

//	if(huart == &huart2)
//	{
//		sensirion_uart_interrupt();
//	}
}
 800e760:	bf00      	nop
 800e762:	3710      	adds	r7, #16
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}
 800e768:	20001998 	.word	0x20001998
 800e76c:	20001a55 	.word	0x20001a55
 800e770:	20001a54 	.word	0x20001a54
 800e774:	20001a56 	.word	0x20001a56
 800e778:	20001a48 	.word	0x20001a48
 800e77c:	20001a57 	.word	0x20001a57
 800e780:	200016f0 	.word	0x200016f0

0800e784 <writeCharToCli>:
 HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)token, tokenSize, 1000);
 }
 }
 **/

static void writeCharToCli(EmbeddedCli *embeddedCli, char c) {
 800e784:	b580      	push	{r7, lr}
 800e786:	b084      	sub	sp, #16
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
 800e78c:	460b      	mov	r3, r1
 800e78e:	70fb      	strb	r3, [r7, #3]
	uint8_t c_to_send = c;
 800e790:	78fb      	ldrb	r3, [r7, #3]
 800e792:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(UART_CLI_PERIPH, &c_to_send, 1, 100);
 800e794:	f107 010f 	add.w	r1, r7, #15
 800e798:	2364      	movs	r3, #100	; 0x64
 800e79a:	2201      	movs	r2, #1
 800e79c:	4803      	ldr	r0, [pc, #12]	; (800e7ac <writeCharToCli+0x28>)
 800e79e:	f7fc fd6d 	bl	800b27c <HAL_UART_Transmit>
}
 800e7a2:	bf00      	nop
 800e7a4:	3710      	adds	r7, #16
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}
 800e7aa:	bf00      	nop
 800e7ac:	20001998 	.word	0x20001998

0800e7b0 <cli_printf>:

// Function to encapsulate the 'embeddedCliPrint()' call with print formatting arguments (act like printf(), but keeps cursor at correct location).
// The 'embeddedCliPrint()' function does already add a linebreak ('\r\n') to the end of the print statement, so no need to add it yourself.
void cli_printf(EmbeddedCli *cli, const char *format, ...) {
 800e7b0:	b40e      	push	{r1, r2, r3}
 800e7b2:	b580      	push	{r7, lr}
 800e7b4:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800e7be:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800e7c2:	6018      	str	r0, [r3, #0]
	// Create a buffer to store the formatted string
	char buffer[CLI_PRINT_BUFFER_SIZE];

	// Format the string using snprintf
	va_list args;
	va_start(args, format);
 800e7c4:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800e7c8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800e7cc:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800e7d0:	601a      	str	r2, [r3, #0]
	int length = vsnprintf(buffer, sizeof(buffer), format, args);
 800e7d2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800e7d6:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800e7da:	f107 000c 	add.w	r0, r7, #12
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 800e7e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e7e8:	f00e fb20 	bl	801ce2c <vsniprintf>
 800e7ec:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
	va_end(args);

	// Check if string fitted in buffer else print error to stderr
	if (length < 0) {
 800e7f0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	da08      	bge.n	800e80a <cli_printf+0x5a>
		fprintf(stderr, "Error formatting the string\r\n");
 800e7f8:	4b0c      	ldr	r3, [pc, #48]	; (800e82c <cli_printf+0x7c>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	68db      	ldr	r3, [r3, #12]
 800e7fe:	221d      	movs	r2, #29
 800e800:	2101      	movs	r1, #1
 800e802:	480b      	ldr	r0, [pc, #44]	; (800e830 <cli_printf+0x80>)
 800e804:	f00c fb12 	bl	801ae2c <fwrite>
 800e808:	e009      	b.n	800e81e <cli_printf+0x6e>
		return;
	}

	// Call embeddedCliPrint with the formatted string
	embeddedCliPrint(cli, buffer);
 800e80a:	f107 020c 	add.w	r2, r7, #12
 800e80e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800e812:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800e816:	4611      	mov	r1, r2
 800e818:	6818      	ldr	r0, [r3, #0]
 800e81a:	f001 ff1b 	bl	8010654 <embeddedCliPrint>
}
 800e81e:	f507 7705 	add.w	r7, r7, #532	; 0x214
 800e822:	46bd      	mov	sp, r7
 800e824:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e828:	b003      	add	sp, #12
 800e82a:	4770      	bx	lr
 800e82c:	20000140 	.word	0x20000140
 800e830:	0801ffac 	.word	0x0801ffac

0800e834 <receiveString>:

void receiveString(EmbeddedCli *cli, char *buffer, size_t bufferSize) {
 800e834:	b580      	push	{r7, lr}
 800e836:	b086      	sub	sp, #24
 800e838:	af00      	add	r7, sp, #0
 800e83a:	60f8      	str	r0, [r7, #12]
 800e83c:	60b9      	str	r1, [r7, #8]
 800e83e:	607a      	str	r2, [r7, #4]
	size_t index = 0;
 800e840:	2300      	movs	r3, #0
 800e842:	617b      	str	r3, [r7, #20]

	prev_max_wait_time = HAL_GetTick();
 800e844:	f7f4 fe48 	bl	80034d8 <HAL_GetTick>
 800e848:	4603      	mov	r3, r0
 800e84a:	4a1d      	ldr	r2, [pc, #116]	; (800e8c0 <receiveString+0x8c>)
 800e84c:	6013      	str	r3, [r2, #0]
	while (1) {
		if (flag_cli) {
 800e84e:	4b1d      	ldr	r3, [pc, #116]	; (800e8c4 <receiveString+0x90>)
 800e850:	781b      	ldrb	r3, [r3, #0]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d023      	beq.n	800e89e <receiveString+0x6a>
			if (UART_CLI_rxBuffer[0] == '\x0d' || index == bufferSize - 1) {
 800e856:	4b1c      	ldr	r3, [pc, #112]	; (800e8c8 <receiveString+0x94>)
 800e858:	781b      	ldrb	r3, [r3, #0]
 800e85a:	2b0d      	cmp	r3, #13
 800e85c:	d004      	beq.n	800e868 <receiveString+0x34>
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	3b01      	subs	r3, #1
 800e862:	697a      	ldr	r2, [r7, #20]
 800e864:	429a      	cmp	r2, r3
 800e866:	d108      	bne.n	800e87a <receiveString+0x46>
				// Exit the loop when Enter key is pressed or buffer is full
				buffer[index] = '\0'; // Null-terminate the string
 800e868:	68ba      	ldr	r2, [r7, #8]
 800e86a:	697b      	ldr	r3, [r7, #20]
 800e86c:	4413      	add	r3, r2
 800e86e:	2200      	movs	r2, #0
 800e870:	701a      	strb	r2, [r3, #0]
				flag_cli = 0;
 800e872:	4b14      	ldr	r3, [pc, #80]	; (800e8c4 <receiveString+0x90>)
 800e874:	2200      	movs	r2, #0
 800e876:	701a      	strb	r2, [r3, #0]
				// Convert the entered string to lowercase
//				for (size_t i = 0; buffer[i]; i++) {
//					buffer[i] = tolower(buffer[i]);
//				}
				break;
 800e878:	e01d      	b.n	800e8b6 <receiveString+0x82>
			} else {
				// Check if the received character is an alphabet character
				buffer[index++] = UART_CLI_rxBuffer[0];
 800e87a:	697b      	ldr	r3, [r7, #20]
 800e87c:	1c5a      	adds	r2, r3, #1
 800e87e:	617a      	str	r2, [r7, #20]
 800e880:	68ba      	ldr	r2, [r7, #8]
 800e882:	4413      	add	r3, r2
 800e884:	4a10      	ldr	r2, [pc, #64]	; (800e8c8 <receiveString+0x94>)
 800e886:	7812      	ldrb	r2, [r2, #0]
 800e888:	701a      	strb	r2, [r3, #0]
				cli->writeChar(cli, UART_CLI_rxBuffer[0]);
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	4a0e      	ldr	r2, [pc, #56]	; (800e8c8 <receiveString+0x94>)
 800e890:	7812      	ldrb	r2, [r2, #0]
 800e892:	4611      	mov	r1, r2
 800e894:	68f8      	ldr	r0, [r7, #12]
 800e896:	4798      	blx	r3
			}
			flag_cli = 0;
 800e898:	4b0a      	ldr	r3, [pc, #40]	; (800e8c4 <receiveString+0x90>)
 800e89a:	2200      	movs	r2, #0
 800e89c:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GetTick() - prev_max_wait_time > max_wait_time)
 800e89e:	f7f4 fe1b 	bl	80034d8 <HAL_GetTick>
 800e8a2:	4602      	mov	r2, r0
 800e8a4:	4b06      	ldr	r3, [pc, #24]	; (800e8c0 <receiveString+0x8c>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	1ad2      	subs	r2, r2, r3
 800e8aa:	4b08      	ldr	r3, [pc, #32]	; (800e8cc <receiveString+0x98>)
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	429a      	cmp	r2, r3
 800e8b0:	d800      	bhi.n	800e8b4 <receiveString+0x80>
		if (flag_cli) {
 800e8b2:	e7cc      	b.n	800e84e <receiveString+0x1a>
		{
          //we break the loop if time goes above 5min
			break;
 800e8b4:	bf00      	nop
		}

	}
}
 800e8b6:	bf00      	nop
 800e8b8:	3718      	adds	r7, #24
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}
 800e8be:	bf00      	nop
 800e8c0:	20001a4c 	.word	0x20001a4c
 800e8c4:	20001a57 	.word	0x20001a57
 800e8c8:	20001a54 	.word	0x20001a54
 800e8cc:	20000018 	.word	0x20000018

0800e8d0 <onClearCLI>:

void onClearCLI(EmbeddedCli *cli, char *args, void *context) {
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b084      	sub	sp, #16
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	60f8      	str	r0, [r7, #12]
 800e8d8:	60b9      	str	r1, [r7, #8]
 800e8da:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "\33[2J");
 800e8dc:	4903      	ldr	r1, [pc, #12]	; (800e8ec <onClearCLI+0x1c>)
 800e8de:	68f8      	ldr	r0, [r7, #12]
 800e8e0:	f7ff ff66 	bl	800e7b0 <cli_printf>
}
 800e8e4:	bf00      	nop
 800e8e6:	3710      	adds	r7, #16
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bd80      	pop	{r7, pc}
 800e8ec:	0801ffcc 	.word	0x0801ffcc

0800e8f0 <debug_scd4x_PM25>:

void debug_scd4x_PM25(EmbeddedCli *cli, char *args, void *context) {
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b092      	sub	sp, #72	; 0x48
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	60f8      	str	r0, [r7, #12]
 800e8f8:	60b9      	str	r1, [r7, #8]
 800e8fa:	607a      	str	r2, [r7, #4]
	  const char *newLine = "\r\n";
 800e8fc:	4b24      	ldr	r3, [pc, #144]	; (800e990 <debug_scd4x_PM25+0xa0>)
 800e8fe:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Do you want to enable debug for scd4x and PM y/n?");
 800e900:	4924      	ldr	r1, [pc, #144]	; (800e994 <debug_scd4x_PM25+0xa4>)
 800e902:	68f8      	ldr	r0, [r7, #12]
 800e904:	f7ff ff54 	bl	800e7b0 <cli_printf>

	cli_other = 1;
 800e908:	4b23      	ldr	r3, [pc, #140]	; (800e998 <debug_scd4x_PM25+0xa8>)
 800e90a:	2201      	movs	r2, #1
 800e90c:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 800e90e:	4b23      	ldr	r3, [pc, #140]	; (800e99c <debug_scd4x_PM25+0xac>)
 800e910:	2200      	movs	r2, #0
 800e912:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		receiveString(cli,buffer,sizeof(buffer));
 800e914:	f107 0310 	add.w	r3, r7, #16
 800e918:	2232      	movs	r2, #50	; 0x32
 800e91a:	4619      	mov	r1, r3
 800e91c:	68f8      	ldr	r0, [r7, #12]
 800e91e:	f7ff ff89 	bl	800e834 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800e922:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e924:	f7f1 fc66 	bl	80001f4 <strlen>
 800e928:	4603      	mov	r3, r0
 800e92a:	b29a      	uxth	r2, r3
 800e92c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e930:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e932:	481b      	ldr	r0, [pc, #108]	; (800e9a0 <debug_scd4x_PM25+0xb0>)
 800e934:	f7fc fca2 	bl	800b27c <HAL_UART_Transmit>


		if(strstr(buffer, "y"))
 800e938:	f107 0310 	add.w	r3, r7, #16
 800e93c:	2179      	movs	r1, #121	; 0x79
 800e93e:	4618      	mov	r0, r3
 800e940:	f00d fb08 	bl	801bf54 <strchr>
 800e944:	4603      	mov	r3, r0
 800e946:	2b00      	cmp	r3, #0
 800e948:	d007      	beq.n	800e95a <debug_scd4x_PM25+0x6a>
		{
			debug_scd_pm=1;
 800e94a:	4b16      	ldr	r3, [pc, #88]	; (800e9a4 <debug_scd4x_PM25+0xb4>)
 800e94c:	2201      	movs	r2, #1
 800e94e:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"Debug enabled");
 800e950:	4915      	ldr	r1, [pc, #84]	; (800e9a8 <debug_scd4x_PM25+0xb8>)
 800e952:	68f8      	ldr	r0, [r7, #12]
 800e954:	f7ff ff2c 	bl	800e7b0 <cli_printf>
 800e958:	e00f      	b.n	800e97a <debug_scd4x_PM25+0x8a>
		}
		else if(strstr(buffer, "n"))
 800e95a:	f107 0310 	add.w	r3, r7, #16
 800e95e:	216e      	movs	r1, #110	; 0x6e
 800e960:	4618      	mov	r0, r3
 800e962:	f00d faf7 	bl	801bf54 <strchr>
 800e966:	4603      	mov	r3, r0
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d006      	beq.n	800e97a <debug_scd4x_PM25+0x8a>
		{
			debug_scd_pm=0;
 800e96c:	4b0d      	ldr	r3, [pc, #52]	; (800e9a4 <debug_scd4x_PM25+0xb4>)
 800e96e:	2200      	movs	r2, #0
 800e970:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"Debug disabled");
 800e972:	490e      	ldr	r1, [pc, #56]	; (800e9ac <debug_scd4x_PM25+0xbc>)
 800e974:	68f8      	ldr	r0, [r7, #12]
 800e976:	f7ff ff1b 	bl	800e7b0 <cli_printf>
		}


		flag_cli = 0;
 800e97a:	4b08      	ldr	r3, [pc, #32]	; (800e99c <debug_scd4x_PM25+0xac>)
 800e97c:	2200      	movs	r2, #0
 800e97e:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 800e980:	4b05      	ldr	r3, [pc, #20]	; (800e998 <debug_scd4x_PM25+0xa8>)
 800e982:	2200      	movs	r2, #0
 800e984:	701a      	strb	r2, [r3, #0]
}
 800e986:	bf00      	nop
 800e988:	3748      	adds	r7, #72	; 0x48
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}
 800e98e:	bf00      	nop
 800e990:	0801ffd4 	.word	0x0801ffd4
 800e994:	0801ffd8 	.word	0x0801ffd8
 800e998:	20001a56 	.word	0x20001a56
 800e99c:	20001a57 	.word	0x20001a57
 800e9a0:	20001998 	.word	0x20001998
 800e9a4:	200014a8 	.word	0x200014a8
 800e9a8:	0802000c 	.word	0x0802000c
 800e9ac:	0802001c 	.word	0x0802001c

0800e9b0 <DeviceSignature>:


void DeviceSignature(EmbeddedCli *cli, char *args, void *context) {
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b084      	sub	sp, #16
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	60f8      	str	r0, [r7, #12]
 800e9b8:	60b9      	str	r1, [r7, #8]
 800e9ba:	607a      	str	r2, [r7, #4]

//	cli_printf(cli,"Device ID/Signature: TF241_0x%04X.",_ID_GetSignature());

	cli_printf(cli,"Device ID/Signature: TF241_%s.",	ver_GetUid());
 800e9bc:	f7f3 f982 	bl	8001cc4 <ver_GetUid>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	461a      	mov	r2, r3
 800e9c4:	4903      	ldr	r1, [pc, #12]	; (800e9d4 <DeviceSignature+0x24>)
 800e9c6:	68f8      	ldr	r0, [r7, #12]
 800e9c8:	f7ff fef2 	bl	800e7b0 <cli_printf>
}
 800e9cc:	bf00      	nop
 800e9ce:	3710      	adds	r7, #16
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}
 800e9d4:	0802002c 	.word	0x0802002c

0800e9d8 <SetID>:

void SetID(EmbeddedCli *cli, char *args, void *context) {
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b092      	sub	sp, #72	; 0x48
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	60f8      	str	r0, [r7, #12]
 800e9e0:	60b9      	str	r1, [r7, #8]
 800e9e2:	607a      	str	r2, [r7, #4]
	uint16_t len;
    const char *newLine = "\r\n";
 800e9e4:	4b2d      	ldr	r3, [pc, #180]	; (800ea9c <SetID+0xc4>)
 800e9e6:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800e9e8:	492d      	ldr	r1, [pc, #180]	; (800eaa0 <SetID+0xc8>)
 800e9ea:	68f8      	ldr	r0, [r7, #12]
 800e9ec:	f7ff fee0 	bl	800e7b0 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800e9f0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e9f2:	f7f1 fbff 	bl	80001f4 <strlen>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	b29a      	uxth	r2, r3
 800e9fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e9fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ea00:	4828      	ldr	r0, [pc, #160]	; (800eaa4 <SetID+0xcc>)
 800ea02:	f7fc fc3b 	bl	800b27c <HAL_UART_Transmit>
	cli_printf(cli,"Set the ID. Keep ID below 30 characters");
 800ea06:	4928      	ldr	r1, [pc, #160]	; (800eaa8 <SetID+0xd0>)
 800ea08:	68f8      	ldr	r0, [r7, #12]
 800ea0a:	f7ff fed1 	bl	800e7b0 <cli_printf>
	cli_other = 1;
 800ea0e:	4b27      	ldr	r3, [pc, #156]	; (800eaac <SetID+0xd4>)
 800ea10:	2201      	movs	r2, #1
 800ea12:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800ea14:	4b26      	ldr	r3, [pc, #152]	; (800eab0 <SetID+0xd8>)
 800ea16:	2200      	movs	r2, #0
 800ea18:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800ea1a:	f107 0310 	add.w	r3, r7, #16
 800ea1e:	2232      	movs	r2, #50	; 0x32
 800ea20:	4619      	mov	r1, r3
 800ea22:	68f8      	ldr	r0, [r7, #12]
 800ea24:	f7ff ff06 	bl	800e834 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800ea28:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ea2a:	f7f1 fbe3 	bl	80001f4 <strlen>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	b29a      	uxth	r2, r3
 800ea32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ea36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ea38:	481a      	ldr	r0, [pc, #104]	; (800eaa4 <SetID+0xcc>)
 800ea3a:	f7fc fc1f 	bl	800b27c <HAL_UART_Transmit>

	len = strlen(buffer);
 800ea3e:	f107 0310 	add.w	r3, r7, #16
 800ea42:	4618      	mov	r0, r3
 800ea44:	f7f1 fbd6 	bl	80001f4 <strlen>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	if(len < 30)
 800ea4e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ea52:	2b1d      	cmp	r3, #29
 800ea54:	d814      	bhi.n	800ea80 <SetID+0xa8>
	{
	   if(buffer[0] != '\0' )
 800ea56:	7c3b      	ldrb	r3, [r7, #16]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d015      	beq.n	800ea88 <SetID+0xb0>
		{if(buffer != NULL)
		{
			strcpy(_Flash_Packet.id,buffer);
 800ea5c:	f107 0310 	add.w	r3, r7, #16
 800ea60:	4619      	mov	r1, r3
 800ea62:	4814      	ldr	r0, [pc, #80]	; (800eab4 <SetID+0xdc>)
 800ea64:	f00d fa83 	bl	801bf6e <strcpy>
			set_param_flags();
 800ea68:	4b13      	ldr	r3, [pc, #76]	; (800eab8 <SetID+0xe0>)
 800ea6a:	2201      	movs	r2, #1
 800ea6c:	701a      	strb	r2, [r3, #0]
 800ea6e:	4b13      	ldr	r3, [pc, #76]	; (800eabc <SetID+0xe4>)
 800ea70:	2201      	movs	r2, #1
 800ea72:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"ID is set to: %s",_Flash_Packet.id);
 800ea74:	4a0f      	ldr	r2, [pc, #60]	; (800eab4 <SetID+0xdc>)
 800ea76:	4912      	ldr	r1, [pc, #72]	; (800eac0 <SetID+0xe8>)
 800ea78:	68f8      	ldr	r0, [r7, #12]
 800ea7a:	f7ff fe99 	bl	800e7b0 <cli_printf>
 800ea7e:	e003      	b.n	800ea88 <SetID+0xb0>
		}
		}
	}
	else
	{
		cli_printf(cli,"ID is too long");
 800ea80:	4910      	ldr	r1, [pc, #64]	; (800eac4 <SetID+0xec>)
 800ea82:	68f8      	ldr	r0, [r7, #12]
 800ea84:	f7ff fe94 	bl	800e7b0 <cli_printf>
	}

	flag_cli = 0;
 800ea88:	4b09      	ldr	r3, [pc, #36]	; (800eab0 <SetID+0xd8>)
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800ea8e:	4b07      	ldr	r3, [pc, #28]	; (800eaac <SetID+0xd4>)
 800ea90:	2200      	movs	r2, #0
 800ea92:	701a      	strb	r2, [r3, #0]

}
 800ea94:	bf00      	nop
 800ea96:	3748      	adds	r7, #72	; 0x48
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}
 800ea9c:	0801ffd4 	.word	0x0801ffd4
 800eaa0:	0802004c 	.word	0x0802004c
 800eaa4:	20001998 	.word	0x20001998
 800eaa8:	08020084 	.word	0x08020084
 800eaac:	20001a56 	.word	0x20001a56
 800eab0:	20001a57 	.word	0x20001a57
 800eab4:	200013a1 	.word	0x200013a1
 800eab8:	200014a9 	.word	0x200014a9
 800eabc:	200014aa 	.word	0x200014aa
 800eac0:	080200ac 	.word	0x080200ac
 800eac4:	080200c0 	.word	0x080200c0

0800eac8 <SetLocation>:

void SetLocation(EmbeddedCli *cli, char *args, void *context) {
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b092      	sub	sp, #72	; 0x48
 800eacc:	af00      	add	r7, sp, #0
 800eace:	60f8      	str	r0, [r7, #12]
 800ead0:	60b9      	str	r1, [r7, #8]
 800ead2:	607a      	str	r2, [r7, #4]
	uint16_t len;
    const char *newLine = "\r\n";
 800ead4:	4b2d      	ldr	r3, [pc, #180]	; (800eb8c <SetLocation+0xc4>)
 800ead6:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800ead8:	492d      	ldr	r1, [pc, #180]	; (800eb90 <SetLocation+0xc8>)
 800eada:	68f8      	ldr	r0, [r7, #12]
 800eadc:	f7ff fe68 	bl	800e7b0 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800eae0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800eae2:	f7f1 fb87 	bl	80001f4 <strlen>
 800eae6:	4603      	mov	r3, r0
 800eae8:	b29a      	uxth	r2, r3
 800eaea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800eaee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eaf0:	4828      	ldr	r0, [pc, #160]	; (800eb94 <SetLocation+0xcc>)
 800eaf2:	f7fc fbc3 	bl	800b27c <HAL_UART_Transmit>
	cli_printf(cli,"Set the Location. Keep Location below 15 characters");
 800eaf6:	4928      	ldr	r1, [pc, #160]	; (800eb98 <SetLocation+0xd0>)
 800eaf8:	68f8      	ldr	r0, [r7, #12]
 800eafa:	f7ff fe59 	bl	800e7b0 <cli_printf>
	cli_other = 1;
 800eafe:	4b27      	ldr	r3, [pc, #156]	; (800eb9c <SetLocation+0xd4>)
 800eb00:	2201      	movs	r2, #1
 800eb02:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800eb04:	4b26      	ldr	r3, [pc, #152]	; (800eba0 <SetLocation+0xd8>)
 800eb06:	2200      	movs	r2, #0
 800eb08:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800eb0a:	f107 0310 	add.w	r3, r7, #16
 800eb0e:	2232      	movs	r2, #50	; 0x32
 800eb10:	4619      	mov	r1, r3
 800eb12:	68f8      	ldr	r0, [r7, #12]
 800eb14:	f7ff fe8e 	bl	800e834 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800eb18:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800eb1a:	f7f1 fb6b 	bl	80001f4 <strlen>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	b29a      	uxth	r2, r3
 800eb22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800eb26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eb28:	481a      	ldr	r0, [pc, #104]	; (800eb94 <SetLocation+0xcc>)
 800eb2a:	f7fc fba7 	bl	800b27c <HAL_UART_Transmit>

	len = strlen(buffer);
 800eb2e:	f107 0310 	add.w	r3, r7, #16
 800eb32:	4618      	mov	r0, r3
 800eb34:	f7f1 fb5e 	bl	80001f4 <strlen>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	if(len < 15)
 800eb3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800eb42:	2b0e      	cmp	r3, #14
 800eb44:	d814      	bhi.n	800eb70 <SetLocation+0xa8>
	{
		if(buffer[0] != '\0' )
 800eb46:	7c3b      	ldrb	r3, [r7, #16]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d015      	beq.n	800eb78 <SetLocation+0xb0>
		   {
		if(buffer != NULL)
		{
			strcpy(_Flash_Packet.location,buffer);
 800eb4c:	f107 0310 	add.w	r3, r7, #16
 800eb50:	4619      	mov	r1, r3
 800eb52:	4814      	ldr	r0, [pc, #80]	; (800eba4 <SetLocation+0xdc>)
 800eb54:	f00d fa0b 	bl	801bf6e <strcpy>
			set_param_flags();
 800eb58:	4b13      	ldr	r3, [pc, #76]	; (800eba8 <SetLocation+0xe0>)
 800eb5a:	2201      	movs	r2, #1
 800eb5c:	701a      	strb	r2, [r3, #0]
 800eb5e:	4b13      	ldr	r3, [pc, #76]	; (800ebac <SetLocation+0xe4>)
 800eb60:	2201      	movs	r2, #1
 800eb62:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"Location is set to: %s",_Flash_Packet.location);
 800eb64:	4a0f      	ldr	r2, [pc, #60]	; (800eba4 <SetLocation+0xdc>)
 800eb66:	4912      	ldr	r1, [pc, #72]	; (800ebb0 <SetLocation+0xe8>)
 800eb68:	68f8      	ldr	r0, [r7, #12]
 800eb6a:	f7ff fe21 	bl	800e7b0 <cli_printf>
 800eb6e:	e003      	b.n	800eb78 <SetLocation+0xb0>
		}
		   }
	}
	else
	{
		cli_printf(cli,"Location is too long");
 800eb70:	4910      	ldr	r1, [pc, #64]	; (800ebb4 <SetLocation+0xec>)
 800eb72:	68f8      	ldr	r0, [r7, #12]
 800eb74:	f7ff fe1c 	bl	800e7b0 <cli_printf>
	}

	flag_cli = 0;
 800eb78:	4b09      	ldr	r3, [pc, #36]	; (800eba0 <SetLocation+0xd8>)
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800eb7e:	4b07      	ldr	r3, [pc, #28]	; (800eb9c <SetLocation+0xd4>)
 800eb80:	2200      	movs	r2, #0
 800eb82:	701a      	strb	r2, [r3, #0]

}
 800eb84:	bf00      	nop
 800eb86:	3748      	adds	r7, #72	; 0x48
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}
 800eb8c:	0801ffd4 	.word	0x0801ffd4
 800eb90:	0802004c 	.word	0x0802004c
 800eb94:	20001998 	.word	0x20001998
 800eb98:	080200d0 	.word	0x080200d0
 800eb9c:	20001a56 	.word	0x20001a56
 800eba0:	20001a57 	.word	0x20001a57
 800eba4:	200013d3 	.word	0x200013d3
 800eba8:	200014a9 	.word	0x200014a9
 800ebac:	200014aa 	.word	0x200014aa
 800ebb0:	08020104 	.word	0x08020104
 800ebb4:	0802011c 	.word	0x0802011c

0800ebb8 <Setname>:

void Setname(EmbeddedCli *cli, char *args, void *context) {
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b092      	sub	sp, #72	; 0x48
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	60f8      	str	r0, [r7, #12]
 800ebc0:	60b9      	str	r1, [r7, #8]
 800ebc2:	607a      	str	r2, [r7, #4]
	uint16_t len;
    const char *newLine = "\r\n";
 800ebc4:	4b2d      	ldr	r3, [pc, #180]	; (800ec7c <Setname+0xc4>)
 800ebc6:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800ebc8:	492d      	ldr	r1, [pc, #180]	; (800ec80 <Setname+0xc8>)
 800ebca:	68f8      	ldr	r0, [r7, #12]
 800ebcc:	f7ff fdf0 	bl	800e7b0 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800ebd0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ebd2:	f7f1 fb0f 	bl	80001f4 <strlen>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	b29a      	uxth	r2, r3
 800ebda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ebde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ebe0:	4828      	ldr	r0, [pc, #160]	; (800ec84 <Setname+0xcc>)
 800ebe2:	f7fc fb4b 	bl	800b27c <HAL_UART_Transmit>
	cli_printf(cli,"Set the name. Keep name below 15 characters");
 800ebe6:	4928      	ldr	r1, [pc, #160]	; (800ec88 <Setname+0xd0>)
 800ebe8:	68f8      	ldr	r0, [r7, #12]
 800ebea:	f7ff fde1 	bl	800e7b0 <cli_printf>
	cli_other = 1;
 800ebee:	4b27      	ldr	r3, [pc, #156]	; (800ec8c <Setname+0xd4>)
 800ebf0:	2201      	movs	r2, #1
 800ebf2:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800ebf4:	4b26      	ldr	r3, [pc, #152]	; (800ec90 <Setname+0xd8>)
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800ebfa:	f107 0310 	add.w	r3, r7, #16
 800ebfe:	2232      	movs	r2, #50	; 0x32
 800ec00:	4619      	mov	r1, r3
 800ec02:	68f8      	ldr	r0, [r7, #12]
 800ec04:	f7ff fe16 	bl	800e834 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800ec08:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ec0a:	f7f1 faf3 	bl	80001f4 <strlen>
 800ec0e:	4603      	mov	r3, r0
 800ec10:	b29a      	uxth	r2, r3
 800ec12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ec16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec18:	481a      	ldr	r0, [pc, #104]	; (800ec84 <Setname+0xcc>)
 800ec1a:	f7fc fb2f 	bl	800b27c <HAL_UART_Transmit>

	len = strlen(buffer);
 800ec1e:	f107 0310 	add.w	r3, r7, #16
 800ec22:	4618      	mov	r0, r3
 800ec24:	f7f1 fae6 	bl	80001f4 <strlen>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	if(len < 15)
 800ec2e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ec32:	2b0e      	cmp	r3, #14
 800ec34:	d814      	bhi.n	800ec60 <Setname+0xa8>
	{
		   if(buffer[0] != '\0' )
 800ec36:	7c3b      	ldrb	r3, [r7, #16]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d015      	beq.n	800ec68 <Setname+0xb0>
		   {
		if(buffer != NULL)
		{
			strcpy(_Flash_Packet.name,buffer);
 800ec3c:	f107 0310 	add.w	r3, r7, #16
 800ec40:	4619      	mov	r1, r3
 800ec42:	4814      	ldr	r0, [pc, #80]	; (800ec94 <Setname+0xdc>)
 800ec44:	f00d f993 	bl	801bf6e <strcpy>
			set_param_flags();
 800ec48:	4b13      	ldr	r3, [pc, #76]	; (800ec98 <Setname+0xe0>)
 800ec4a:	2201      	movs	r2, #1
 800ec4c:	701a      	strb	r2, [r3, #0]
 800ec4e:	4b13      	ldr	r3, [pc, #76]	; (800ec9c <Setname+0xe4>)
 800ec50:	2201      	movs	r2, #1
 800ec52:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"name is set to: %s",_Flash_Packet.name);
 800ec54:	4a0f      	ldr	r2, [pc, #60]	; (800ec94 <Setname+0xdc>)
 800ec56:	4912      	ldr	r1, [pc, #72]	; (800eca0 <Setname+0xe8>)
 800ec58:	68f8      	ldr	r0, [r7, #12]
 800ec5a:	f7ff fda9 	bl	800e7b0 <cli_printf>
 800ec5e:	e003      	b.n	800ec68 <Setname+0xb0>
		}
		   }
	}
	else
	{
		cli_printf(cli,"name is too long");
 800ec60:	4910      	ldr	r1, [pc, #64]	; (800eca4 <Setname+0xec>)
 800ec62:	68f8      	ldr	r0, [r7, #12]
 800ec64:	f7ff fda4 	bl	800e7b0 <cli_printf>
	}

	flag_cli = 0;
 800ec68:	4b09      	ldr	r3, [pc, #36]	; (800ec90 <Setname+0xd8>)
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800ec6e:	4b07      	ldr	r3, [pc, #28]	; (800ec8c <Setname+0xd4>)
 800ec70:	2200      	movs	r2, #0
 800ec72:	701a      	strb	r2, [r3, #0]

}
 800ec74:	bf00      	nop
 800ec76:	3748      	adds	r7, #72	; 0x48
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	bd80      	pop	{r7, pc}
 800ec7c:	0801ffd4 	.word	0x0801ffd4
 800ec80:	0802004c 	.word	0x0802004c
 800ec84:	20001998 	.word	0x20001998
 800ec88:	08020134 	.word	0x08020134
 800ec8c:	20001a56 	.word	0x20001a56
 800ec90:	20001a57 	.word	0x20001a57
 800ec94:	20001405 	.word	0x20001405
 800ec98:	200014a9 	.word	0x200014a9
 800ec9c:	200014aa 	.word	0x200014aa
 800eca0:	08020160 	.word	0x08020160
 800eca4:	08020174 	.word	0x08020174

0800eca8 <Setgroup>:

void Setgroup(EmbeddedCli *cli, char *args, void *context) {
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b092      	sub	sp, #72	; 0x48
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	60f8      	str	r0, [r7, #12]
 800ecb0:	60b9      	str	r1, [r7, #8]
 800ecb2:	607a      	str	r2, [r7, #4]
	uint16_t len;
    const char *newLine = "\r\n";
 800ecb4:	4b2d      	ldr	r3, [pc, #180]	; (800ed6c <Setgroup+0xc4>)
 800ecb6:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800ecb8:	492d      	ldr	r1, [pc, #180]	; (800ed70 <Setgroup+0xc8>)
 800ecba:	68f8      	ldr	r0, [r7, #12]
 800ecbc:	f7ff fd78 	bl	800e7b0 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800ecc0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ecc2:	f7f1 fa97 	bl	80001f4 <strlen>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	b29a      	uxth	r2, r3
 800ecca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ecce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ecd0:	4828      	ldr	r0, [pc, #160]	; (800ed74 <Setgroup+0xcc>)
 800ecd2:	f7fc fad3 	bl	800b27c <HAL_UART_Transmit>
	cli_printf(cli,"Set the group. Keep name below 15 characters");
 800ecd6:	4928      	ldr	r1, [pc, #160]	; (800ed78 <Setgroup+0xd0>)
 800ecd8:	68f8      	ldr	r0, [r7, #12]
 800ecda:	f7ff fd69 	bl	800e7b0 <cli_printf>
	cli_other = 1;
 800ecde:	4b27      	ldr	r3, [pc, #156]	; (800ed7c <Setgroup+0xd4>)
 800ece0:	2201      	movs	r2, #1
 800ece2:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800ece4:	4b26      	ldr	r3, [pc, #152]	; (800ed80 <Setgroup+0xd8>)
 800ece6:	2200      	movs	r2, #0
 800ece8:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800ecea:	f107 0310 	add.w	r3, r7, #16
 800ecee:	2232      	movs	r2, #50	; 0x32
 800ecf0:	4619      	mov	r1, r3
 800ecf2:	68f8      	ldr	r0, [r7, #12]
 800ecf4:	f7ff fd9e 	bl	800e834 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800ecf8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ecfa:	f7f1 fa7b 	bl	80001f4 <strlen>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	b29a      	uxth	r2, r3
 800ed02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ed06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed08:	481a      	ldr	r0, [pc, #104]	; (800ed74 <Setgroup+0xcc>)
 800ed0a:	f7fc fab7 	bl	800b27c <HAL_UART_Transmit>

	len = strlen(buffer);
 800ed0e:	f107 0310 	add.w	r3, r7, #16
 800ed12:	4618      	mov	r0, r3
 800ed14:	f7f1 fa6e 	bl	80001f4 <strlen>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	if(len < 15)
 800ed1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ed22:	2b0e      	cmp	r3, #14
 800ed24:	d814      	bhi.n	800ed50 <Setgroup+0xa8>
	{
		   if(buffer[0] != '\0' )
 800ed26:	7c3b      	ldrb	r3, [r7, #16]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d015      	beq.n	800ed58 <Setgroup+0xb0>
		   {
		if(buffer != NULL)
		{
			strcpy(_Flash_Packet.group,buffer);
 800ed2c:	f107 0310 	add.w	r3, r7, #16
 800ed30:	4619      	mov	r1, r3
 800ed32:	4814      	ldr	r0, [pc, #80]	; (800ed84 <Setgroup+0xdc>)
 800ed34:	f00d f91b 	bl	801bf6e <strcpy>
			set_param_flags();
 800ed38:	4b13      	ldr	r3, [pc, #76]	; (800ed88 <Setgroup+0xe0>)
 800ed3a:	2201      	movs	r2, #1
 800ed3c:	701a      	strb	r2, [r3, #0]
 800ed3e:	4b13      	ldr	r3, [pc, #76]	; (800ed8c <Setgroup+0xe4>)
 800ed40:	2201      	movs	r2, #1
 800ed42:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"group is set to: %s",_Flash_Packet.group);
 800ed44:	4a0f      	ldr	r2, [pc, #60]	; (800ed84 <Setgroup+0xdc>)
 800ed46:	4912      	ldr	r1, [pc, #72]	; (800ed90 <Setgroup+0xe8>)
 800ed48:	68f8      	ldr	r0, [r7, #12]
 800ed4a:	f7ff fd31 	bl	800e7b0 <cli_printf>
 800ed4e:	e003      	b.n	800ed58 <Setgroup+0xb0>
		}
		   }
	}
	else
	{
		cli_printf(cli,"group is too long");
 800ed50:	4910      	ldr	r1, [pc, #64]	; (800ed94 <Setgroup+0xec>)
 800ed52:	68f8      	ldr	r0, [r7, #12]
 800ed54:	f7ff fd2c 	bl	800e7b0 <cli_printf>
	}

	flag_cli = 0;
 800ed58:	4b09      	ldr	r3, [pc, #36]	; (800ed80 <Setgroup+0xd8>)
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800ed5e:	4b07      	ldr	r3, [pc, #28]	; (800ed7c <Setgroup+0xd4>)
 800ed60:	2200      	movs	r2, #0
 800ed62:	701a      	strb	r2, [r3, #0]

}
 800ed64:	bf00      	nop
 800ed66:	3748      	adds	r7, #72	; 0x48
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd80      	pop	{r7, pc}
 800ed6c:	0801ffd4 	.word	0x0801ffd4
 800ed70:	0802004c 	.word	0x0802004c
 800ed74:	20001998 	.word	0x20001998
 800ed78:	08020188 	.word	0x08020188
 800ed7c:	20001a56 	.word	0x20001a56
 800ed80:	20001a57 	.word	0x20001a57
 800ed84:	20001437 	.word	0x20001437
 800ed88:	200014a9 	.word	0x200014a9
 800ed8c:	200014aa 	.word	0x200014aa
 800ed90:	080201b8 	.word	0x080201b8
 800ed94:	080201cc 	.word	0x080201cc

0800ed98 <GetID>:




void GetID(EmbeddedCli *cli, char *args, void *context) {
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b084      	sub	sp, #16
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	60f8      	str	r0, [r7, #12]
 800eda0:	60b9      	str	r1, [r7, #8]
 800eda2:	607a      	str	r2, [r7, #4]
	cli_printf(cli,"ID: %s",	_Flash_Packet.id);
 800eda4:	4a04      	ldr	r2, [pc, #16]	; (800edb8 <GetID+0x20>)
 800eda6:	4905      	ldr	r1, [pc, #20]	; (800edbc <GetID+0x24>)
 800eda8:	68f8      	ldr	r0, [r7, #12]
 800edaa:	f7ff fd01 	bl	800e7b0 <cli_printf>
}
 800edae:	bf00      	nop
 800edb0:	3710      	adds	r7, #16
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}
 800edb6:	bf00      	nop
 800edb8:	200013a1 	.word	0x200013a1
 800edbc:	080201e0 	.word	0x080201e0

0800edc0 <GetLocation>:

void GetLocation(EmbeddedCli *cli, char *args, void *context) {
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b084      	sub	sp, #16
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	60f8      	str	r0, [r7, #12]
 800edc8:	60b9      	str	r1, [r7, #8]
 800edca:	607a      	str	r2, [r7, #4]
	cli_printf(cli,"Location: %s",	_Flash_Packet.location);
 800edcc:	4a04      	ldr	r2, [pc, #16]	; (800ede0 <GetLocation+0x20>)
 800edce:	4905      	ldr	r1, [pc, #20]	; (800ede4 <GetLocation+0x24>)
 800edd0:	68f8      	ldr	r0, [r7, #12]
 800edd2:	f7ff fced 	bl	800e7b0 <cli_printf>

}
 800edd6:	bf00      	nop
 800edd8:	3710      	adds	r7, #16
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}
 800edde:	bf00      	nop
 800ede0:	200013d3 	.word	0x200013d3
 800ede4:	080201e8 	.word	0x080201e8

0800ede8 <Getname>:

void Getname(EmbeddedCli *cli, char *args, void *context) {
 800ede8:	b580      	push	{r7, lr}
 800edea:	b084      	sub	sp, #16
 800edec:	af00      	add	r7, sp, #0
 800edee:	60f8      	str	r0, [r7, #12]
 800edf0:	60b9      	str	r1, [r7, #8]
 800edf2:	607a      	str	r2, [r7, #4]
	cli_printf(cli,"Name: %s",	_Flash_Packet.name);
 800edf4:	4a04      	ldr	r2, [pc, #16]	; (800ee08 <Getname+0x20>)
 800edf6:	4905      	ldr	r1, [pc, #20]	; (800ee0c <Getname+0x24>)
 800edf8:	68f8      	ldr	r0, [r7, #12]
 800edfa:	f7ff fcd9 	bl	800e7b0 <cli_printf>

}
 800edfe:	bf00      	nop
 800ee00:	3710      	adds	r7, #16
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}
 800ee06:	bf00      	nop
 800ee08:	20001405 	.word	0x20001405
 800ee0c:	080201f8 	.word	0x080201f8

0800ee10 <Getgroup>:

void Getgroup(EmbeddedCli *cli, char *args, void *context) {
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b084      	sub	sp, #16
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	60f8      	str	r0, [r7, #12]
 800ee18:	60b9      	str	r1, [r7, #8]
 800ee1a:	607a      	str	r2, [r7, #4]
	cli_printf(cli,"Group: %s",	_Flash_Packet.group);
 800ee1c:	4a04      	ldr	r2, [pc, #16]	; (800ee30 <Getgroup+0x20>)
 800ee1e:	4905      	ldr	r1, [pc, #20]	; (800ee34 <Getgroup+0x24>)
 800ee20:	68f8      	ldr	r0, [r7, #12]
 800ee22:	f7ff fcc5 	bl	800e7b0 <cli_printf>

}
 800ee26:	bf00      	nop
 800ee28:	3710      	adds	r7, #16
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd80      	pop	{r7, pc}
 800ee2e:	bf00      	nop
 800ee30:	20001437 	.word	0x20001437
 800ee34:	08020204 	.word	0x08020204

0800ee38 <SetDate>:





void SetDate(EmbeddedCli *cli, char *args, void *context) {
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b09a      	sub	sp, #104	; 0x68
 800ee3c:	af02      	add	r7, sp, #8
 800ee3e:	60f8      	str	r0, [r7, #12]
 800ee40:	60b9      	str	r1, [r7, #8]
 800ee42:	607a      	str	r2, [r7, #4]
    const char *newLine = "\r\n";
 800ee44:	4b26      	ldr	r3, [pc, #152]	; (800eee0 <SetDate+0xa8>)
 800ee46:	65fb      	str	r3, [r7, #92]	; 0x5c
	cli_printf(cli,"Set date in following format: day:month:year eg:(15:1:23).");
 800ee48:	4926      	ldr	r1, [pc, #152]	; (800eee4 <SetDate+0xac>)
 800ee4a:	68f8      	ldr	r0, [r7, #12]
 800ee4c:	f7ff fcb0 	bl	800e7b0 <cli_printf>
	cli_other = 1;
 800ee50:	4b25      	ldr	r3, [pc, #148]	; (800eee8 <SetDate+0xb0>)
 800ee52:	2201      	movs	r2, #1
 800ee54:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800ee56:	4b25      	ldr	r3, [pc, #148]	; (800eeec <SetDate+0xb4>)
 800ee58:	2200      	movs	r2, #0
 800ee5a:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800ee5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ee60:	2232      	movs	r2, #50	; 0x32
 800ee62:	4619      	mov	r1, r3
 800ee64:	68f8      	ldr	r0, [r7, #12]
 800ee66:	f7ff fce5 	bl	800e834 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800ee6a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800ee6c:	f7f1 f9c2 	bl	80001f4 <strlen>
 800ee70:	4603      	mov	r3, r0
 800ee72:	b29a      	uxth	r2, r3
 800ee74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ee78:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800ee7a:	481d      	ldr	r0, [pc, #116]	; (800eef0 <SetDate+0xb8>)
 800ee7c:	f7fc f9fe 	bl	800b27c <HAL_UART_Transmit>
	if(buffer[0] != '\0' )
 800ee80:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d004      	beq.n	800ee92 <SetDate+0x5a>
	{
	Set_Date(buffer);
 800ee88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f002 fdbb 	bl	8011a08 <Set_Date>
	}
	flag_cli = 0;
 800ee92:	4b16      	ldr	r3, [pc, #88]	; (800eeec <SetDate+0xb4>)
 800ee94:	2200      	movs	r2, #0
 800ee96:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800ee98:	4b13      	ldr	r3, [pc, #76]	; (800eee8 <SetDate+0xb0>)
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	701a      	strb	r2, [r3, #0]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800ee9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eea2:	2200      	movs	r2, #0
 800eea4:	4619      	mov	r1, r3
 800eea6:	4813      	ldr	r0, [pc, #76]	; (800eef4 <SetDate+0xbc>)
 800eea8:	f7f9 fea4 	bl	8008bf4 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800eeac:	f107 0310 	add.w	r3, r7, #16
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	4619      	mov	r1, r3
 800eeb4:	480f      	ldr	r0, [pc, #60]	; (800eef4 <SetDate+0xbc>)
 800eeb6:	f7f9 fdbb 	bl	8008a30 <HAL_RTC_GetTime>
	cli_printf(cli,"Set Date: %02d.%02d.%02d",gDate.Date,gDate.Month,gDate.Year);
 800eeba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eebe:	461a      	mov	r2, r3
 800eec0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800eec4:	4619      	mov	r1, r3
 800eec6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eeca:	9300      	str	r3, [sp, #0]
 800eecc:	460b      	mov	r3, r1
 800eece:	490a      	ldr	r1, [pc, #40]	; (800eef8 <SetDate+0xc0>)
 800eed0:	68f8      	ldr	r0, [r7, #12]
 800eed2:	f7ff fc6d 	bl	800e7b0 <cli_printf>

}
 800eed6:	bf00      	nop
 800eed8:	3760      	adds	r7, #96	; 0x60
 800eeda:	46bd      	mov	sp, r7
 800eedc:	bd80      	pop	{r7, pc}
 800eede:	bf00      	nop
 800eee0:	0801ffd4 	.word	0x0801ffd4
 800eee4:	08020210 	.word	0x08020210
 800eee8:	20001a56 	.word	0x20001a56
 800eeec:	20001a57 	.word	0x20001a57
 800eef0:	20001998 	.word	0x20001998
 800eef4:	200017bc 	.word	0x200017bc
 800eef8:	0802024c 	.word	0x0802024c

0800eefc <SetTime>:

void SetTime(EmbeddedCli *cli, char *args, void *context) {
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b09a      	sub	sp, #104	; 0x68
 800ef00:	af02      	add	r7, sp, #8
 800ef02:	60f8      	str	r0, [r7, #12]
 800ef04:	60b9      	str	r1, [r7, #8]
 800ef06:	607a      	str	r2, [r7, #4]
    const char *newLine = "\r\n";
 800ef08:	4b26      	ldr	r3, [pc, #152]	; (800efa4 <SetTime+0xa8>)
 800ef0a:	65fb      	str	r3, [r7, #92]	; 0x5c
	cli_printf(cli,"Set time in following format: hours:minutes:seconds eg:(11:15:01).");
 800ef0c:	4926      	ldr	r1, [pc, #152]	; (800efa8 <SetTime+0xac>)
 800ef0e:	68f8      	ldr	r0, [r7, #12]
 800ef10:	f7ff fc4e 	bl	800e7b0 <cli_printf>
	cli_other = 1;
 800ef14:	4b25      	ldr	r3, [pc, #148]	; (800efac <SetTime+0xb0>)
 800ef16:	2201      	movs	r2, #1
 800ef18:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800ef1a:	4b25      	ldr	r3, [pc, #148]	; (800efb0 <SetTime+0xb4>)
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800ef20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ef24:	2232      	movs	r2, #50	; 0x32
 800ef26:	4619      	mov	r1, r3
 800ef28:	68f8      	ldr	r0, [r7, #12]
 800ef2a:	f7ff fc83 	bl	800e834 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800ef2e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800ef30:	f7f1 f960 	bl	80001f4 <strlen>
 800ef34:	4603      	mov	r3, r0
 800ef36:	b29a      	uxth	r2, r3
 800ef38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ef3c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800ef3e:	481d      	ldr	r0, [pc, #116]	; (800efb4 <SetTime+0xb8>)
 800ef40:	f7fc f99c 	bl	800b27c <HAL_UART_Transmit>
	if(buffer[0] != '\0' )
 800ef44:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d004      	beq.n	800ef56 <SetTime+0x5a>
	{
	Set_Time(buffer);
 800ef4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ef50:	4618      	mov	r0, r3
 800ef52:	f002 fdf9 	bl	8011b48 <Set_Time>
    }
	flag_cli = 0;
 800ef56:	4b16      	ldr	r3, [pc, #88]	; (800efb0 <SetTime+0xb4>)
 800ef58:	2200      	movs	r2, #0
 800ef5a:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800ef5c:	4b13      	ldr	r3, [pc, #76]	; (800efac <SetTime+0xb0>)
 800ef5e:	2200      	movs	r2, #0
 800ef60:	701a      	strb	r2, [r3, #0]
	set_alarm_Time = 1;
 800ef62:	4b15      	ldr	r3, [pc, #84]	; (800efb8 <SetTime+0xbc>)
 800ef64:	2201      	movs	r2, #1
 800ef66:	701a      	strb	r2, [r3, #0]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800ef68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	4619      	mov	r1, r3
 800ef70:	4812      	ldr	r0, [pc, #72]	; (800efbc <SetTime+0xc0>)
 800ef72:	f7f9 fe3f 	bl	8008bf4 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800ef76:	f107 0310 	add.w	r3, r7, #16
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	4619      	mov	r1, r3
 800ef7e:	480f      	ldr	r0, [pc, #60]	; (800efbc <SetTime+0xc0>)
 800ef80:	f7f9 fd56 	bl	8008a30 <HAL_RTC_GetTime>
	cli_printf(cli,"Set Time: %02d:%02d:%02d",gTime.Hours,gTime.Minutes,gTime.Seconds);
 800ef84:	7c3b      	ldrb	r3, [r7, #16]
 800ef86:	461a      	mov	r2, r3
 800ef88:	7c7b      	ldrb	r3, [r7, #17]
 800ef8a:	4619      	mov	r1, r3
 800ef8c:	7cbb      	ldrb	r3, [r7, #18]
 800ef8e:	9300      	str	r3, [sp, #0]
 800ef90:	460b      	mov	r3, r1
 800ef92:	490b      	ldr	r1, [pc, #44]	; (800efc0 <SetTime+0xc4>)
 800ef94:	68f8      	ldr	r0, [r7, #12]
 800ef96:	f7ff fc0b 	bl	800e7b0 <cli_printf>

}
 800ef9a:	bf00      	nop
 800ef9c:	3760      	adds	r7, #96	; 0x60
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}
 800efa2:	bf00      	nop
 800efa4:	0801ffd4 	.word	0x0801ffd4
 800efa8:	08020268 	.word	0x08020268
 800efac:	20001a56 	.word	0x20001a56
 800efb0:	20001a57 	.word	0x20001a57
 800efb4:	20001998 	.word	0x20001998
 800efb8:	20000025 	.word	0x20000025
 800efbc:	200017bc 	.word	0x200017bc
 800efc0:	080202ac 	.word	0x080202ac

0800efc4 <GetDate>:

void GetDate(EmbeddedCli *cli, char *args, void *context) {
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b08c      	sub	sp, #48	; 0x30
 800efc8:	af02      	add	r7, sp, #8
 800efca:	60f8      	str	r0, [r7, #12]
 800efcc:	60b9      	str	r1, [r7, #8]
 800efce:	607a      	str	r2, [r7, #4]



	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800efd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800efd4:	2200      	movs	r2, #0
 800efd6:	4619      	mov	r1, r3
 800efd8:	480f      	ldr	r0, [pc, #60]	; (800f018 <GetDate+0x54>)
 800efda:	f7f9 fe0b 	bl	8008bf4 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800efde:	f107 0310 	add.w	r3, r7, #16
 800efe2:	2200      	movs	r2, #0
 800efe4:	4619      	mov	r1, r3
 800efe6:	480c      	ldr	r0, [pc, #48]	; (800f018 <GetDate+0x54>)
 800efe8:	f7f9 fd22 	bl	8008a30 <HAL_RTC_GetTime>
	cli_printf(cli,"%02d.%02d.%02d",gDate.Date,gDate.Month,gDate.Year);
 800efec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eff0:	461a      	mov	r2, r3
 800eff2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800eff6:	4619      	mov	r1, r3
 800eff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800effc:	9300      	str	r3, [sp, #0]
 800effe:	460b      	mov	r3, r1
 800f000:	4906      	ldr	r1, [pc, #24]	; (800f01c <GetDate+0x58>)
 800f002:	68f8      	ldr	r0, [r7, #12]
 800f004:	f7ff fbd4 	bl	800e7b0 <cli_printf>
	HAL_Delay(100);
 800f008:	2064      	movs	r0, #100	; 0x64
 800f00a:	f7f4 fa71 	bl	80034f0 <HAL_Delay>
}
 800f00e:	bf00      	nop
 800f010:	3728      	adds	r7, #40	; 0x28
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}
 800f016:	bf00      	nop
 800f018:	200017bc 	.word	0x200017bc
 800f01c:	080202c8 	.word	0x080202c8

0800f020 <GetTime>:

//for some reason if you dont read date the time does not update

void GetTime(EmbeddedCli *cli, char *args, void *context) {
 800f020:	b580      	push	{r7, lr}
 800f022:	b08c      	sub	sp, #48	; 0x30
 800f024:	af02      	add	r7, sp, #8
 800f026:	60f8      	str	r0, [r7, #12]
 800f028:	60b9      	str	r1, [r7, #8]
 800f02a:	607a      	str	r2, [r7, #4]


	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800f02c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f030:	2200      	movs	r2, #0
 800f032:	4619      	mov	r1, r3
 800f034:	480d      	ldr	r0, [pc, #52]	; (800f06c <GetTime+0x4c>)
 800f036:	f7f9 fddd 	bl	8008bf4 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800f03a:	f107 0310 	add.w	r3, r7, #16
 800f03e:	2200      	movs	r2, #0
 800f040:	4619      	mov	r1, r3
 800f042:	480a      	ldr	r0, [pc, #40]	; (800f06c <GetTime+0x4c>)
 800f044:	f7f9 fcf4 	bl	8008a30 <HAL_RTC_GetTime>
	cli_printf(cli,"%02d:%02d:%02d",gTime.Hours,gTime.Minutes,gTime.Seconds);
 800f048:	7c3b      	ldrb	r3, [r7, #16]
 800f04a:	461a      	mov	r2, r3
 800f04c:	7c7b      	ldrb	r3, [r7, #17]
 800f04e:	4619      	mov	r1, r3
 800f050:	7cbb      	ldrb	r3, [r7, #18]
 800f052:	9300      	str	r3, [sp, #0]
 800f054:	460b      	mov	r3, r1
 800f056:	4906      	ldr	r1, [pc, #24]	; (800f070 <GetTime+0x50>)
 800f058:	68f8      	ldr	r0, [r7, #12]
 800f05a:	f7ff fba9 	bl	800e7b0 <cli_printf>
	HAL_Delay(100);
 800f05e:	2064      	movs	r0, #100	; 0x64
 800f060:	f7f4 fa46 	bl	80034f0 <HAL_Delay>
}
 800f064:	bf00      	nop
 800f066:	3728      	adds	r7, #40	; 0x28
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd80      	pop	{r7, pc}
 800f06c:	200017bc 	.word	0x200017bc
 800f070:	080202d8 	.word	0x080202d8

0800f074 <SetInterval>:

void SetInterval(EmbeddedCli *cli, char *args, void *context) {
 800f074:	b580      	push	{r7, lr}
 800f076:	b092      	sub	sp, #72	; 0x48
 800f078:	af00      	add	r7, sp, #0
 800f07a:	60f8      	str	r0, [r7, #12]
 800f07c:	60b9      	str	r1, [r7, #8]
 800f07e:	607a      	str	r2, [r7, #4]
	  const char *newLine = "\r\n";
 800f080:	4b54      	ldr	r3, [pc, #336]	; (800f1d4 <SetInterval+0x160>)
 800f082:	647b      	str	r3, [r7, #68]	; 0x44
		cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800f084:	4954      	ldr	r1, [pc, #336]	; (800f1d8 <SetInterval+0x164>)
 800f086:	68f8      	ldr	r0, [r7, #12]
 800f088:	f7ff fb92 	bl	800e7b0 <cli_printf>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f08c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f08e:	f7f1 f8b1 	bl	80001f4 <strlen>
 800f092:	4603      	mov	r3, r0
 800f094:	b29a      	uxth	r2, r3
 800f096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f09a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f09c:	484f      	ldr	r0, [pc, #316]	; (800f1dc <SetInterval+0x168>)
 800f09e:	f7fc f8ed 	bl	800b27c <HAL_UART_Transmit>
	cli_printf(cli,"Enter 1 for 5min.");
 800f0a2:	494f      	ldr	r1, [pc, #316]	; (800f1e0 <SetInterval+0x16c>)
 800f0a4:	68f8      	ldr	r0, [r7, #12]
 800f0a6:	f7ff fb83 	bl	800e7b0 <cli_printf>
	cli_printf(cli,"Enter 2 for 15min.");
 800f0aa:	494e      	ldr	r1, [pc, #312]	; (800f1e4 <SetInterval+0x170>)
 800f0ac:	68f8      	ldr	r0, [r7, #12]
 800f0ae:	f7ff fb7f 	bl	800e7b0 <cli_printf>
	cli_printf(cli,"Enter 3 for 60min.");
 800f0b2:	494d      	ldr	r1, [pc, #308]	; (800f1e8 <SetInterval+0x174>)
 800f0b4:	68f8      	ldr	r0, [r7, #12]
 800f0b6:	f7ff fb7b 	bl	800e7b0 <cli_printf>
	cli_printf(cli,"Disclaimer: The battery life will be reduced if interval is reduced.");
 800f0ba:	494c      	ldr	r1, [pc, #304]	; (800f1ec <SetInterval+0x178>)
 800f0bc:	68f8      	ldr	r0, [r7, #12]
 800f0be:	f7ff fb77 	bl	800e7b0 <cli_printf>
	cli_other = 1;
 800f0c2:	4b4b      	ldr	r3, [pc, #300]	; (800f1f0 <SetInterval+0x17c>)
 800f0c4:	2201      	movs	r2, #1
 800f0c6:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f0c8:	4b4a      	ldr	r3, [pc, #296]	; (800f1f4 <SetInterval+0x180>)
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800f0ce:	f107 0310 	add.w	r3, r7, #16
 800f0d2:	2232      	movs	r2, #50	; 0x32
 800f0d4:	4619      	mov	r1, r3
 800f0d6:	68f8      	ldr	r0, [r7, #12]
 800f0d8:	f7ff fbac 	bl	800e834 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f0dc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f0de:	f7f1 f889 	bl	80001f4 <strlen>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	b29a      	uxth	r2, r3
 800f0e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f0ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f0ec:	483b      	ldr	r0, [pc, #236]	; (800f1dc <SetInterval+0x168>)
 800f0ee:	f7fc f8c5 	bl	800b27c <HAL_UART_Transmit>


	if(strstr(buffer, "1"))
 800f0f2:	f107 0310 	add.w	r3, r7, #16
 800f0f6:	2131      	movs	r1, #49	; 0x31
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	f00c ff2b 	bl	801bf54 <strchr>
 800f0fe:	4603      	mov	r3, r0
 800f100:	2b00      	cmp	r3, #0
 800f102:	d015      	beq.n	800f130 <SetInterval+0xbc>
	{
        _Flash_Packet.Time_Interval = 5;
 800f104:	4b3c      	ldr	r3, [pc, #240]	; (800f1f8 <SetInterval+0x184>)
 800f106:	2200      	movs	r2, #0
 800f108:	f042 0205 	orr.w	r2, r2, #5
 800f10c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 800f110:	2200      	movs	r2, #0
 800f112:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 800f116:	2200      	movs	r2, #0
 800f118:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 800f11c:	2200      	movs	r2, #0
 800f11e:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
        set_param_flags();
 800f122:	4b36      	ldr	r3, [pc, #216]	; (800f1fc <SetInterval+0x188>)
 800f124:	2201      	movs	r2, #1
 800f126:	701a      	strb	r2, [r3, #0]
 800f128:	4b35      	ldr	r3, [pc, #212]	; (800f200 <SetInterval+0x18c>)
 800f12a:	2201      	movs	r2, #1
 800f12c:	701a      	strb	r2, [r3, #0]
 800f12e:	e03c      	b.n	800f1aa <SetInterval+0x136>
	}
	else if(strstr(buffer, "2"))
 800f130:	f107 0310 	add.w	r3, r7, #16
 800f134:	2132      	movs	r1, #50	; 0x32
 800f136:	4618      	mov	r0, r3
 800f138:	f00c ff0c 	bl	801bf54 <strchr>
 800f13c:	4603      	mov	r3, r0
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d015      	beq.n	800f16e <SetInterval+0xfa>
	{
		_Flash_Packet.Time_Interval = 15;
 800f142:	4b2d      	ldr	r3, [pc, #180]	; (800f1f8 <SetInterval+0x184>)
 800f144:	2200      	movs	r2, #0
 800f146:	f042 020f 	orr.w	r2, r2, #15
 800f14a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 800f14e:	2200      	movs	r2, #0
 800f150:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 800f154:	2200      	movs	r2, #0
 800f156:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 800f15a:	2200      	movs	r2, #0
 800f15c:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
		set_param_flags();
 800f160:	4b26      	ldr	r3, [pc, #152]	; (800f1fc <SetInterval+0x188>)
 800f162:	2201      	movs	r2, #1
 800f164:	701a      	strb	r2, [r3, #0]
 800f166:	4b26      	ldr	r3, [pc, #152]	; (800f200 <SetInterval+0x18c>)
 800f168:	2201      	movs	r2, #1
 800f16a:	701a      	strb	r2, [r3, #0]
 800f16c:	e01d      	b.n	800f1aa <SetInterval+0x136>
	}
	else if(strstr(buffer, "3"))
 800f16e:	f107 0310 	add.w	r3, r7, #16
 800f172:	2133      	movs	r1, #51	; 0x33
 800f174:	4618      	mov	r0, r3
 800f176:	f00c feed 	bl	801bf54 <strchr>
 800f17a:	4603      	mov	r3, r0
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d014      	beq.n	800f1aa <SetInterval+0x136>
	{
		_Flash_Packet.Time_Interval = 60;
 800f180:	4b1d      	ldr	r3, [pc, #116]	; (800f1f8 <SetInterval+0x184>)
 800f182:	2200      	movs	r2, #0
 800f184:	f042 023c 	orr.w	r2, r2, #60	; 0x3c
 800f188:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 800f18c:	2200      	movs	r2, #0
 800f18e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 800f192:	2200      	movs	r2, #0
 800f194:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 800f198:	2200      	movs	r2, #0
 800f19a:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
		set_param_flags();
 800f19e:	4b17      	ldr	r3, [pc, #92]	; (800f1fc <SetInterval+0x188>)
 800f1a0:	2201      	movs	r2, #1
 800f1a2:	701a      	strb	r2, [r3, #0]
 800f1a4:	4b16      	ldr	r3, [pc, #88]	; (800f200 <SetInterval+0x18c>)
 800f1a6:	2201      	movs	r2, #1
 800f1a8:	701a      	strb	r2, [r3, #0]
	}

	flag_cli = 0;
 800f1aa:	4b12      	ldr	r3, [pc, #72]	; (800f1f4 <SetInterval+0x180>)
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f1b0:	4b0f      	ldr	r3, [pc, #60]	; (800f1f0 <SetInterval+0x17c>)
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	701a      	strb	r2, [r3, #0]
	cli_printf(cli,"Interval is set to: %ldmin",_Flash_Packet.Time_Interval);
 800f1b6:	4b10      	ldr	r3, [pc, #64]	; (800f1f8 <SetInterval+0x184>)
 800f1b8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800f1bc:	461a      	mov	r2, r3
 800f1be:	4911      	ldr	r1, [pc, #68]	; (800f204 <SetInterval+0x190>)
 800f1c0:	68f8      	ldr	r0, [r7, #12]
 800f1c2:	f7ff faf5 	bl	800e7b0 <cli_printf>
	set_alarm_Time = 1;
 800f1c6:	4b10      	ldr	r3, [pc, #64]	; (800f208 <SetInterval+0x194>)
 800f1c8:	2201      	movs	r2, #1
 800f1ca:	701a      	strb	r2, [r3, #0]
}
 800f1cc:	bf00      	nop
 800f1ce:	3748      	adds	r7, #72	; 0x48
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	bd80      	pop	{r7, pc}
 800f1d4:	0801ffd4 	.word	0x0801ffd4
 800f1d8:	0802004c 	.word	0x0802004c
 800f1dc:	20001998 	.word	0x20001998
 800f1e0:	080202e8 	.word	0x080202e8
 800f1e4:	080202fc 	.word	0x080202fc
 800f1e8:	08020310 	.word	0x08020310
 800f1ec:	08020324 	.word	0x08020324
 800f1f0:	20001a56 	.word	0x20001a56
 800f1f4:	20001a57 	.word	0x20001a57
 800f1f8:	200012d4 	.word	0x200012d4
 800f1fc:	200014a9 	.word	0x200014a9
 800f200:	200014aa 	.word	0x200014aa
 800f204:	0802036c 	.word	0x0802036c
 800f208:	20000025 	.word	0x20000025

0800f20c <GetInterval>:

void GetInterval(EmbeddedCli *cli, char *args, void *context) {
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b084      	sub	sp, #16
 800f210:	af00      	add	r7, sp, #0
 800f212:	60f8      	str	r0, [r7, #12]
 800f214:	60b9      	str	r1, [r7, #8]
 800f216:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"Interval is Set to: %ldmin",_Flash_Packet.Time_Interval);
 800f218:	4b05      	ldr	r3, [pc, #20]	; (800f230 <GetInterval+0x24>)
 800f21a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800f21e:	461a      	mov	r2, r3
 800f220:	4904      	ldr	r1, [pc, #16]	; (800f234 <GetInterval+0x28>)
 800f222:	68f8      	ldr	r0, [r7, #12]
 800f224:	f7ff fac4 	bl	800e7b0 <cli_printf>

}
 800f228:	bf00      	nop
 800f22a:	3710      	adds	r7, #16
 800f22c:	46bd      	mov	sp, r7
 800f22e:	bd80      	pop	{r7, pc}
 800f230:	200012d4 	.word	0x200012d4
 800f234:	08020388 	.word	0x08020388

0800f238 <SetFilename>:

void SetFilename(EmbeddedCli *cli, char *args, void *context) {
 800f238:	b580      	push	{r7, lr}
 800f23a:	b092      	sub	sp, #72	; 0x48
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	60f8      	str	r0, [r7, #12]
 800f240:	60b9      	str	r1, [r7, #8]
 800f242:	607a      	str	r2, [r7, #4]
uint16_t len;
	  const char *newLine = "\r\n";
 800f244:	4b2f      	ldr	r3, [pc, #188]	; (800f304 <SetFilename+0xcc>)
 800f246:	647b      	str	r3, [r7, #68]	; 0x44
		cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800f248:	492f      	ldr	r1, [pc, #188]	; (800f308 <SetFilename+0xd0>)
 800f24a:	68f8      	ldr	r0, [r7, #12]
 800f24c:	f7ff fab0 	bl	800e7b0 <cli_printf>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f250:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f252:	f7f0 ffcf 	bl	80001f4 <strlen>
 800f256:	4603      	mov	r3, r0
 800f258:	b29a      	uxth	r2, r3
 800f25a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f25e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f260:	482a      	ldr	r0, [pc, #168]	; (800f30c <SetFilename+0xd4>)
 800f262:	f7fc f80b 	bl	800b27c <HAL_UART_Transmit>
	cli_printf(cli,"To set file name dont use special characters or space, '_' can be used and please keep the name below 18characters.");
 800f266:	492a      	ldr	r1, [pc, #168]	; (800f310 <SetFilename+0xd8>)
 800f268:	68f8      	ldr	r0, [r7, #12]
 800f26a:	f7ff faa1 	bl	800e7b0 <cli_printf>

	cli_other = 1;
 800f26e:	4b29      	ldr	r3, [pc, #164]	; (800f314 <SetFilename+0xdc>)
 800f270:	2201      	movs	r2, #1
 800f272:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f274:	4b28      	ldr	r3, [pc, #160]	; (800f318 <SetFilename+0xe0>)
 800f276:	2200      	movs	r2, #0
 800f278:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800f27a:	f107 0310 	add.w	r3, r7, #16
 800f27e:	2232      	movs	r2, #50	; 0x32
 800f280:	4619      	mov	r1, r3
 800f282:	68f8      	ldr	r0, [r7, #12]
 800f284:	f7ff fad6 	bl	800e834 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f288:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f28a:	f7f0 ffb3 	bl	80001f4 <strlen>
 800f28e:	4603      	mov	r3, r0
 800f290:	b29a      	uxth	r2, r3
 800f292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f296:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f298:	481c      	ldr	r0, [pc, #112]	; (800f30c <SetFilename+0xd4>)
 800f29a:	f7fb ffef 	bl	800b27c <HAL_UART_Transmit>

len = strlen(buffer);
 800f29e:	f107 0310 	add.w	r3, r7, #16
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	f7f0 ffa6 	bl	80001f4 <strlen>
 800f2a8:	4603      	mov	r3, r0
 800f2aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
if(len < 20)
 800f2ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f2b2:	2b13      	cmp	r3, #19
 800f2b4:	d818      	bhi.n	800f2e8 <SetFilename+0xb0>
{
	   if(buffer[0] != '\0' )
 800f2b6:	7c3b      	ldrb	r3, [r7, #16]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d019      	beq.n	800f2f0 <SetFilename+0xb8>
	   {
	if(buffer != NULL)
	{
		strcpy(_Flash_Packet.File_Name,buffer);
 800f2bc:	f107 0310 	add.w	r3, r7, #16
 800f2c0:	4619      	mov	r1, r3
 800f2c2:	4816      	ldr	r0, [pc, #88]	; (800f31c <SetFilename+0xe4>)
 800f2c4:	f00c fe53 	bl	801bf6e <strcpy>
		set_param_flags();
 800f2c8:	4b15      	ldr	r3, [pc, #84]	; (800f320 <SetFilename+0xe8>)
 800f2ca:	2201      	movs	r2, #1
 800f2cc:	701a      	strb	r2, [r3, #0]
 800f2ce:	4b15      	ldr	r3, [pc, #84]	; (800f324 <SetFilename+0xec>)
 800f2d0:	2201      	movs	r2, #1
 800f2d2:	701a      	strb	r2, [r3, #0]
		 _RunTime_Packet.filename_changed = 1;
 800f2d4:	4b14      	ldr	r3, [pc, #80]	; (800f328 <SetFilename+0xf0>)
 800f2d6:	2201      	movs	r2, #1
 800f2d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			cli_printf(cli,"Filename is set to: %s",_Flash_Packet.File_Name);
 800f2dc:	4a0f      	ldr	r2, [pc, #60]	; (800f31c <SetFilename+0xe4>)
 800f2de:	4913      	ldr	r1, [pc, #76]	; (800f32c <SetFilename+0xf4>)
 800f2e0:	68f8      	ldr	r0, [r7, #12]
 800f2e2:	f7ff fa65 	bl	800e7b0 <cli_printf>
 800f2e6:	e003      	b.n	800f2f0 <SetFilename+0xb8>
	}
	   }
}
else
{
	cli_printf(cli,"Filename is too long");
 800f2e8:	4911      	ldr	r1, [pc, #68]	; (800f330 <SetFilename+0xf8>)
 800f2ea:	68f8      	ldr	r0, [r7, #12]
 800f2ec:	f7ff fa60 	bl	800e7b0 <cli_printf>
}


	flag_cli = 0;
 800f2f0:	4b09      	ldr	r3, [pc, #36]	; (800f318 <SetFilename+0xe0>)
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f2f6:	4b07      	ldr	r3, [pc, #28]	; (800f314 <SetFilename+0xdc>)
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	701a      	strb	r2, [r3, #0]


}
 800f2fc:	bf00      	nop
 800f2fe:	3748      	adds	r7, #72	; 0x48
 800f300:	46bd      	mov	sp, r7
 800f302:	bd80      	pop	{r7, pc}
 800f304:	0801ffd4 	.word	0x0801ffd4
 800f308:	0802004c 	.word	0x0802004c
 800f30c:	20001998 	.word	0x20001998
 800f310:	080203a4 	.word	0x080203a4
 800f314:	20001a56 	.word	0x20001a56
 800f318:	20001a57 	.word	0x20001a57
 800f31c:	200012d4 	.word	0x200012d4
 800f320:	200014a9 	.word	0x200014a9
 800f324:	200014aa 	.word	0x200014aa
 800f328:	2000146c 	.word	0x2000146c
 800f32c:	08020418 	.word	0x08020418
 800f330:	08020430 	.word	0x08020430

0800f334 <GetFilename>:

void GetFilename(EmbeddedCli *cli, char *args, void *context) {
 800f334:	b580      	push	{r7, lr}
 800f336:	b084      	sub	sp, #16
 800f338:	af00      	add	r7, sp, #0
 800f33a:	60f8      	str	r0, [r7, #12]
 800f33c:	60b9      	str	r1, [r7, #8]
 800f33e:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"Filename is set to: %s",_Flash_Packet.File_Name);
 800f340:	4a04      	ldr	r2, [pc, #16]	; (800f354 <GetFilename+0x20>)
 800f342:	4905      	ldr	r1, [pc, #20]	; (800f358 <GetFilename+0x24>)
 800f344:	68f8      	ldr	r0, [r7, #12]
 800f346:	f7ff fa33 	bl	800e7b0 <cli_printf>

}
 800f34a:	bf00      	nop
 800f34c:	3710      	adds	r7, #16
 800f34e:	46bd      	mov	sp, r7
 800f350:	bd80      	pop	{r7, pc}
 800f352:	bf00      	nop
 800f354:	200012d4 	.word	0x200012d4
 800f358:	08020418 	.word	0x08020418

0800f35c <SetFileformat>:

void SetFileformat(EmbeddedCli *cli, char *args, void *context) {
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b092      	sub	sp, #72	; 0x48
 800f360:	af00      	add	r7, sp, #0
 800f362:	60f8      	str	r0, [r7, #12]
 800f364:	60b9      	str	r1, [r7, #8]
 800f366:	607a      	str	r2, [r7, #4]

	  const char *newLine = "\r\n";
 800f368:	4b41      	ldr	r3, [pc, #260]	; (800f470 <SetFileformat+0x114>)
 800f36a:	647b      	str	r3, [r7, #68]	; 0x44
		cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800f36c:	4941      	ldr	r1, [pc, #260]	; (800f474 <SetFileformat+0x118>)
 800f36e:	68f8      	ldr	r0, [r7, #12]
 800f370:	f7ff fa1e 	bl	800e7b0 <cli_printf>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f374:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f376:	f7f0 ff3d 	bl	80001f4 <strlen>
 800f37a:	4603      	mov	r3, r0
 800f37c:	b29a      	uxth	r2, r3
 800f37e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f382:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f384:	483c      	ldr	r0, [pc, #240]	; (800f478 <SetFileformat+0x11c>)
 800f386:	f7fb ff79 	bl	800b27c <HAL_UART_Transmit>
	cli_printf(cli,"Following file formats are allowed:");
 800f38a:	493c      	ldr	r1, [pc, #240]	; (800f47c <SetFileformat+0x120>)
 800f38c:	68f8      	ldr	r0, [r7, #12]
 800f38e:	f7ff fa0f 	bl	800e7b0 <cli_printf>
	cli_printf(cli,"1. (.csv)");
 800f392:	493b      	ldr	r1, [pc, #236]	; (800f480 <SetFileformat+0x124>)
 800f394:	68f8      	ldr	r0, [r7, #12]
 800f396:	f7ff fa0b 	bl	800e7b0 <cli_printf>
	cli_printf(cli,"2. (.json)");
 800f39a:	493a      	ldr	r1, [pc, #232]	; (800f484 <SetFileformat+0x128>)
 800f39c:	68f8      	ldr	r0, [r7, #12]
 800f39e:	f7ff fa07 	bl	800e7b0 <cli_printf>
	cli_printf(cli,"Enter the number to select your desired format");
 800f3a2:	4939      	ldr	r1, [pc, #228]	; (800f488 <SetFileformat+0x12c>)
 800f3a4:	68f8      	ldr	r0, [r7, #12]
 800f3a6:	f7ff fa03 	bl	800e7b0 <cli_printf>

	cli_other = 1;
 800f3aa:	4b38      	ldr	r3, [pc, #224]	; (800f48c <SetFileformat+0x130>)
 800f3ac:	2201      	movs	r2, #1
 800f3ae:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f3b0:	4b37      	ldr	r3, [pc, #220]	; (800f490 <SetFileformat+0x134>)
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800f3b6:	f107 0310 	add.w	r3, r7, #16
 800f3ba:	2232      	movs	r2, #50	; 0x32
 800f3bc:	4619      	mov	r1, r3
 800f3be:	68f8      	ldr	r0, [r7, #12]
 800f3c0:	f7ff fa38 	bl	800e834 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f3c4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f3c6:	f7f0 ff15 	bl	80001f4 <strlen>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	b29a      	uxth	r2, r3
 800f3ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f3d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f3d4:	4828      	ldr	r0, [pc, #160]	; (800f478 <SetFileformat+0x11c>)
 800f3d6:	f7fb ff51 	bl	800b27c <HAL_UART_Transmit>

	if(strstr(buffer, "1"))
 800f3da:	f107 0310 	add.w	r3, r7, #16
 800f3de:	2131      	movs	r1, #49	; 0x31
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f00c fdb7 	bl	801bf54 <strchr>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d014      	beq.n	800f416 <SetFileformat+0xba>
	{
		strcpy(_Flash_Packet.File_Format,".CSV");
 800f3ec:	4b29      	ldr	r3, [pc, #164]	; (800f494 <SetFileformat+0x138>)
 800f3ee:	4a2a      	ldr	r2, [pc, #168]	; (800f498 <SetFileformat+0x13c>)
 800f3f0:	6810      	ldr	r0, [r2, #0]
 800f3f2:	6018      	str	r0, [r3, #0]
 800f3f4:	7912      	ldrb	r2, [r2, #4]
 800f3f6:	711a      	strb	r2, [r3, #4]
		set_param_flags();
 800f3f8:	4b28      	ldr	r3, [pc, #160]	; (800f49c <SetFileformat+0x140>)
 800f3fa:	2201      	movs	r2, #1
 800f3fc:	701a      	strb	r2, [r3, #0]
 800f3fe:	4b28      	ldr	r3, [pc, #160]	; (800f4a0 <SetFileformat+0x144>)
 800f400:	2201      	movs	r2, #1
 800f402:	701a      	strb	r2, [r3, #0]
		 _RunTime_Packet.fileformat_changed = 1;
 800f404:	4b27      	ldr	r3, [pc, #156]	; (800f4a4 <SetFileformat+0x148>)
 800f406:	2201      	movs	r2, #1
 800f408:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			_RunTime_Packet.fileformat_selection = 1;
 800f40c:	4b25      	ldr	r3, [pc, #148]	; (800f4a4 <SetFileformat+0x148>)
 800f40e:	2201      	movs	r2, #1
 800f410:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800f414:	e01c      	b.n	800f450 <SetFileformat+0xf4>
	}
	else if(strstr(buffer, "2"))
 800f416:	f107 0310 	add.w	r3, r7, #16
 800f41a:	2132      	movs	r1, #50	; 0x32
 800f41c:	4618      	mov	r0, r3
 800f41e:	f00c fd99 	bl	801bf54 <strchr>
 800f422:	4603      	mov	r3, r0
 800f424:	2b00      	cmp	r3, #0
 800f426:	d013      	beq.n	800f450 <SetFileformat+0xf4>
	{
		strcpy(_Flash_Packet.File_Format,".JSON");
 800f428:	4b1a      	ldr	r3, [pc, #104]	; (800f494 <SetFileformat+0x138>)
 800f42a:	4a1f      	ldr	r2, [pc, #124]	; (800f4a8 <SetFileformat+0x14c>)
 800f42c:	6810      	ldr	r0, [r2, #0]
 800f42e:	6018      	str	r0, [r3, #0]
 800f430:	8892      	ldrh	r2, [r2, #4]
 800f432:	809a      	strh	r2, [r3, #4]
		set_param_flags();
 800f434:	4b19      	ldr	r3, [pc, #100]	; (800f49c <SetFileformat+0x140>)
 800f436:	2201      	movs	r2, #1
 800f438:	701a      	strb	r2, [r3, #0]
 800f43a:	4b19      	ldr	r3, [pc, #100]	; (800f4a0 <SetFileformat+0x144>)
 800f43c:	2201      	movs	r2, #1
 800f43e:	701a      	strb	r2, [r3, #0]
		 _RunTime_Packet.fileformat_changed = 1;
 800f440:	4b18      	ldr	r3, [pc, #96]	; (800f4a4 <SetFileformat+0x148>)
 800f442:	2201      	movs	r2, #1
 800f444:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			_RunTime_Packet.fileformat_selection = 0;
 800f448:	4b16      	ldr	r3, [pc, #88]	; (800f4a4 <SetFileformat+0x148>)
 800f44a:	2200      	movs	r2, #0
 800f44c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	}


	flag_cli = 0;
 800f450:	4b0f      	ldr	r3, [pc, #60]	; (800f490 <SetFileformat+0x134>)
 800f452:	2200      	movs	r2, #0
 800f454:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f456:	4b0d      	ldr	r3, [pc, #52]	; (800f48c <SetFileformat+0x130>)
 800f458:	2200      	movs	r2, #0
 800f45a:	701a      	strb	r2, [r3, #0]
	cli_printf(cli,"File format is set to: %s",_Flash_Packet.File_Format);
 800f45c:	4a0d      	ldr	r2, [pc, #52]	; (800f494 <SetFileformat+0x138>)
 800f45e:	4913      	ldr	r1, [pc, #76]	; (800f4ac <SetFileformat+0x150>)
 800f460:	68f8      	ldr	r0, [r7, #12]
 800f462:	f7ff f9a5 	bl	800e7b0 <cli_printf>

}
 800f466:	bf00      	nop
 800f468:	3748      	adds	r7, #72	; 0x48
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}
 800f46e:	bf00      	nop
 800f470:	0801ffd4 	.word	0x0801ffd4
 800f474:	0802004c 	.word	0x0802004c
 800f478:	20001998 	.word	0x20001998
 800f47c:	08020448 	.word	0x08020448
 800f480:	0802046c 	.word	0x0802046c
 800f484:	08020478 	.word	0x08020478
 800f488:	08020484 	.word	0x08020484
 800f48c:	20001a56 	.word	0x20001a56
 800f490:	20001a57 	.word	0x20001a57
 800f494:	20001338 	.word	0x20001338
 800f498:	080204b4 	.word	0x080204b4
 800f49c:	200014a9 	.word	0x200014a9
 800f4a0:	200014aa 	.word	0x200014aa
 800f4a4:	2000146c 	.word	0x2000146c
 800f4a8:	080204bc 	.word	0x080204bc
 800f4ac:	080204c4 	.word	0x080204c4

0800f4b0 <GetFileformat>:

void GetFileformat(EmbeddedCli *cli, char *args, void *context) {
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b084      	sub	sp, #16
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	60f8      	str	r0, [r7, #12]
 800f4b8:	60b9      	str	r1, [r7, #8]
 800f4ba:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"File format is set to: %s",_Flash_Packet.File_Format);
 800f4bc:	4a04      	ldr	r2, [pc, #16]	; (800f4d0 <GetFileformat+0x20>)
 800f4be:	4905      	ldr	r1, [pc, #20]	; (800f4d4 <GetFileformat+0x24>)
 800f4c0:	68f8      	ldr	r0, [r7, #12]
 800f4c2:	f7ff f975 	bl	800e7b0 <cli_printf>

}
 800f4c6:	bf00      	nop
 800f4c8:	3710      	adds	r7, #16
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	bd80      	pop	{r7, pc}
 800f4ce:	bf00      	nop
 800f4d0:	20001338 	.word	0x20001338
 800f4d4:	080204c4 	.word	0x080204c4

0800f4d8 <fanclean>:

void fanclean(EmbeddedCli *cli, char *args, void *context) {
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b096      	sub	sp, #88	; 0x58
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	60f8      	str	r0, [r7, #12]
 800f4e0:	60b9      	str	r1, [r7, #8]
 800f4e2:	607a      	str	r2, [r7, #4]
	  const char *newLine = "\r\n";
 800f4e4:	4b49      	ldr	r3, [pc, #292]	; (800f60c <fanclean+0x134>)
 800f4e6:	64fb      	str	r3, [r7, #76]	; 0x4c
	  int counter = 0;
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	657b      	str	r3, [r7, #84]	; 0x54
	  const char *dot = "........";
 800f4ec:	4b48      	ldr	r3, [pc, #288]	; (800f610 <fanclean+0x138>)
 800f4ee:	64bb      	str	r3, [r7, #72]	; 0x48
	  uint8_t do_Calibration = 0;
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	cli_printf(cli,"Do you want to initiate particle sensor fan-cleaning? y/n?");
 800f4f6:	4947      	ldr	r1, [pc, #284]	; (800f614 <fanclean+0x13c>)
 800f4f8:	68f8      	ldr	r0, [r7, #12]
 800f4fa:	f7ff f959 	bl	800e7b0 <cli_printf>

	cli_other = 1;
 800f4fe:	4b46      	ldr	r3, [pc, #280]	; (800f618 <fanclean+0x140>)
 800f500:	2201      	movs	r2, #1
 800f502:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 800f504:	4b45      	ldr	r3, [pc, #276]	; (800f61c <fanclean+0x144>)
 800f506:	2200      	movs	r2, #0
 800f508:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		receiveString(cli,buffer,sizeof(buffer));
 800f50a:	f107 0314 	add.w	r3, r7, #20
 800f50e:	2232      	movs	r2, #50	; 0x32
 800f510:	4619      	mov	r1, r3
 800f512:	68f8      	ldr	r0, [r7, #12]
 800f514:	f7ff f98e 	bl	800e834 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f518:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f51a:	f7f0 fe6b 	bl	80001f4 <strlen>
 800f51e:	4603      	mov	r3, r0
 800f520:	b29a      	uxth	r2, r3
 800f522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f526:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f528:	483d      	ldr	r0, [pc, #244]	; (800f620 <fanclean+0x148>)
 800f52a:	f7fb fea7 	bl	800b27c <HAL_UART_Transmit>


        if(strstr(buffer, "n"))
 800f52e:	f107 0314 	add.w	r3, r7, #20
 800f532:	216e      	movs	r1, #110	; 0x6e
 800f534:	4618      	mov	r0, r3
 800f536:	f00c fd0d 	bl	801bf54 <strchr>
 800f53a:	4603      	mov	r3, r0
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d00f      	beq.n	800f560 <fanclean+0x88>
		{
			_Flash_Packet.Calibration_Status=0;
 800f540:	4b38      	ldr	r3, [pc, #224]	; (800f624 <fanclean+0x14c>)
 800f542:	2200      	movs	r2, #0
 800f544:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
			_RunTime_Packet.PM_calibration=1;
 800f548:	4b37      	ldr	r3, [pc, #220]	; (800f628 <fanclean+0x150>)
 800f54a:	2201      	movs	r2, #1
 800f54c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			cli_printf(cli,"Particle sensor fan-cleaning aborted.");
 800f550:	4936      	ldr	r1, [pc, #216]	; (800f62c <fanclean+0x154>)
 800f552:	68f8      	ldr	r0, [r7, #12]
 800f554:	f7ff f92c 	bl	800e7b0 <cli_printf>
			//set_param_flags();
			do_Calibration = 0;
 800f558:	2300      	movs	r3, #0
 800f55a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800f55e:	e00f      	b.n	800f580 <fanclean+0xa8>
		}
        else if(strstr(buffer, "y"))
 800f560:	f107 0314 	add.w	r3, r7, #20
 800f564:	2179      	movs	r1, #121	; 0x79
 800f566:	4618      	mov	r0, r3
 800f568:	f00c fcf4 	bl	801bf54 <strchr>
 800f56c:	4603      	mov	r3, r0
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d006      	beq.n	800f580 <fanclean+0xa8>
        {
        	_RunTime_Packet.PM_calibration=0;
 800f572:	4b2d      	ldr	r3, [pc, #180]	; (800f628 <fanclean+0x150>)
 800f574:	2200      	movs	r2, #0
 800f576:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
        	do_Calibration = 1;
 800f57a:	2301      	movs	r3, #1
 800f57c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        }



		   if(do_Calibration == 1)
 800f580:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800f584:	2b01      	cmp	r3, #1
 800f586:	d136      	bne.n	800f5f6 <fanclean+0x11e>
		   {

				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f588:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f58a:	f7f0 fe33 	bl	80001f4 <strlen>
 800f58e:	4603      	mov	r3, r0
 800f590:	b29a      	uxth	r2, r3
 800f592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f596:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f598:	4821      	ldr	r0, [pc, #132]	; (800f620 <fanclean+0x148>)
 800f59a:	f7fb fe6f 	bl	800b27c <HAL_UART_Transmit>
				cli_printf(cli,"Particle sensor fan-cleaning initiated, please wait.");
 800f59e:	4924      	ldr	r1, [pc, #144]	; (800f630 <fanclean+0x158>)
 800f5a0:	68f8      	ldr	r0, [r7, #12]
 800f5a2:	f7ff f905 	bl	800e7b0 <cli_printf>
		   while(counter < 5 )
 800f5a6:	e014      	b.n	800f5d2 <fanclean+0xfa>
		   {
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)dot,  strlen(dot), 1000);
 800f5a8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f5aa:	f7f0 fe23 	bl	80001f4 <strlen>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	b29a      	uxth	r2, r3
 800f5b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f5b6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f5b8:	4819      	ldr	r0, [pc, #100]	; (800f620 <fanclean+0x148>)
 800f5ba:	f7fb fe5f 	bl	800b27c <HAL_UART_Transmit>
                HAL_Delay(200);
 800f5be:	20c8      	movs	r0, #200	; 0xc8
 800f5c0:	f7f3 ff96 	bl	80034f0 <HAL_Delay>
                BLUE_LED_TOGGLE();
 800f5c4:	2108      	movs	r1, #8
 800f5c6:	481b      	ldr	r0, [pc, #108]	; (800f634 <fanclean+0x15c>)
 800f5c8:	f7f5 ff83 	bl	80054d2 <HAL_GPIO_TogglePin>
                counter++;
 800f5cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f5ce:	3301      	adds	r3, #1
 800f5d0:	657b      	str	r3, [r7, #84]	; 0x54
		   while(counter < 5 )
 800f5d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f5d4:	2b04      	cmp	r3, #4
 800f5d6:	dde7      	ble.n	800f5a8 <fanclean+0xd0>
		   }

			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f5d8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f5da:	f7f0 fe0b 	bl	80001f4 <strlen>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	b29a      	uxth	r2, r3
 800f5e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f5e6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f5e8:	480d      	ldr	r0, [pc, #52]	; (800f620 <fanclean+0x148>)
 800f5ea:	f7fb fe47 	bl	800b27c <HAL_UART_Transmit>
			cli_printf(cli,"fan-cleaning done.");
 800f5ee:	4912      	ldr	r1, [pc, #72]	; (800f638 <fanclean+0x160>)
 800f5f0:	68f8      	ldr	r0, [r7, #12]
 800f5f2:	f7ff f8dd 	bl	800e7b0 <cli_printf>


		   }

		flag_cli = 0;
 800f5f6:	4b09      	ldr	r3, [pc, #36]	; (800f61c <fanclean+0x144>)
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 800f5fc:	4b06      	ldr	r3, [pc, #24]	; (800f618 <fanclean+0x140>)
 800f5fe:	2200      	movs	r2, #0
 800f600:	701a      	strb	r2, [r3, #0]
}
 800f602:	bf00      	nop
 800f604:	3758      	adds	r7, #88	; 0x58
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}
 800f60a:	bf00      	nop
 800f60c:	0801ffd4 	.word	0x0801ffd4
 800f610:	080204e0 	.word	0x080204e0
 800f614:	080204ec 	.word	0x080204ec
 800f618:	20001a56 	.word	0x20001a56
 800f61c:	20001a57 	.word	0x20001a57
 800f620:	20001998 	.word	0x20001998
 800f624:	200012d4 	.word	0x200012d4
 800f628:	2000146c 	.word	0x2000146c
 800f62c:	08020528 	.word	0x08020528
 800f630:	08020550 	.word	0x08020550
 800f634:	40020400 	.word	0x40020400
 800f638:	08020588 	.word	0x08020588

0800f63c <co2calibrate>:


void co2calibrate(EmbeddedCli *cli, char *args, void *context) {
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b096      	sub	sp, #88	; 0x58
 800f640:	af00      	add	r7, sp, #0
 800f642:	60f8      	str	r0, [r7, #12]
 800f644:	60b9      	str	r1, [r7, #8]
 800f646:	607a      	str	r2, [r7, #4]
	  const char *newLine = "\r\n";
 800f648:	4b50      	ldr	r3, [pc, #320]	; (800f78c <co2calibrate+0x150>)
 800f64a:	64fb      	str	r3, [r7, #76]	; 0x4c
	  uint32_t val;
	  int counter = 0;
 800f64c:	2300      	movs	r3, #0
 800f64e:	657b      	str	r3, [r7, #84]	; 0x54
	  const char *dot = "........";
 800f650:	4b4f      	ldr	r3, [pc, #316]	; (800f790 <co2calibrate+0x154>)
 800f652:	64bb      	str	r3, [r7, #72]	; 0x48
	  uint8_t do_Calibration = 0;
 800f654:	2300      	movs	r3, #0
 800f656:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53


	    cli_other = 1;
 800f65a:	4b4e      	ldr	r3, [pc, #312]	; (800f794 <co2calibrate+0x158>)
 800f65c:	2201      	movs	r2, #1
 800f65e:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 800f660:	4b4d      	ldr	r3, [pc, #308]	; (800f798 <co2calibrate+0x15c>)
 800f662:	2200      	movs	r2, #0
 800f664:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		memset(buffer,'\0',sizeof(buffer));
 800f666:	f107 0310 	add.w	r3, r7, #16
 800f66a:	2232      	movs	r2, #50	; 0x32
 800f66c:	2100      	movs	r1, #0
 800f66e:	4618      	mov	r0, r3
 800f670:	f00b fc4a 	bl	801af08 <memset>
		cli_printf(cli,"To calibrate Co2 sensor, please provide Co2 concentration value.");
 800f674:	4949      	ldr	r1, [pc, #292]	; (800f79c <co2calibrate+0x160>)
 800f676:	68f8      	ldr	r0, [r7, #12]
 800f678:	f7ff f89a 	bl	800e7b0 <cli_printf>
		cli_printf(cli,"If Co2 concentration is unknown then just press enter to cancel the calibration.");
 800f67c:	4948      	ldr	r1, [pc, #288]	; (800f7a0 <co2calibrate+0x164>)
 800f67e:	68f8      	ldr	r0, [r7, #12]
 800f680:	f7ff f896 	bl	800e7b0 <cli_printf>

		receiveString(cli,buffer,sizeof(buffer));
 800f684:	f107 0310 	add.w	r3, r7, #16
 800f688:	2232      	movs	r2, #50	; 0x32
 800f68a:	4619      	mov	r1, r3
 800f68c:	68f8      	ldr	r0, [r7, #12]
 800f68e:	f7ff f8d1 	bl	800e834 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f692:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f694:	f7f0 fdae 	bl	80001f4 <strlen>
 800f698:	4603      	mov	r3, r0
 800f69a:	b29a      	uxth	r2, r3
 800f69c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f6a0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f6a2:	4840      	ldr	r0, [pc, #256]	; (800f7a4 <co2calibrate+0x168>)
 800f6a4:	f7fb fdea 	bl	800b27c <HAL_UART_Transmit>

		   if(buffer[0] != '\0' )
 800f6a8:	7c3b      	ldrb	r3, [r7, #16]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d01e      	beq.n	800f6ec <co2calibrate+0xb0>
			{
			   _RunTime_Packet.CO2_calibration = 1;
 800f6ae:	4b3e      	ldr	r3, [pc, #248]	; (800f7a8 <co2calibrate+0x16c>)
 800f6b0:	2201      	movs	r2, #1
 800f6b2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

                val = atoi(buffer);
 800f6b6:	f107 0310 	add.w	r3, r7, #16
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f00b fb4c 	bl	801ad58 <atoi>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	647b      	str	r3, [r7, #68]	; 0x44

                if(val < 65535)
 800f6c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6c6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f6ca:	4293      	cmp	r3, r2
 800f6cc:	d803      	bhi.n	800f6d6 <co2calibrate+0x9a>
                {
                   _RunTime_Packet._target_co2_concentration = val;
 800f6ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6d0:	b29a      	uxth	r2, r3
 800f6d2:	4b35      	ldr	r3, [pc, #212]	; (800f7a8 <co2calibrate+0x16c>)
 800f6d4:	869a      	strh	r2, [r3, #52]	; 0x34
                }

            	cli_printf(cli,"Co2 sensor is going to be Calibrated now. Co2 concentration value provided : %d",_RunTime_Packet._target_co2_concentration);
 800f6d6:	4b34      	ldr	r3, [pc, #208]	; (800f7a8 <co2calibrate+0x16c>)
 800f6d8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800f6da:	461a      	mov	r2, r3
 800f6dc:	4933      	ldr	r1, [pc, #204]	; (800f7ac <co2calibrate+0x170>)
 800f6de:	68f8      	ldr	r0, [r7, #12]
 800f6e0:	f7ff f866 	bl	800e7b0 <cli_printf>
            	do_Calibration = 1;
 800f6e4:	2301      	movs	r3, #1
 800f6e6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800f6ea:	e00a      	b.n	800f702 <co2calibrate+0xc6>
			 }
		   else
		   {
				cli_printf(cli,"Co2 sensor Calibration aborted.");
 800f6ec:	4930      	ldr	r1, [pc, #192]	; (800f7b0 <co2calibrate+0x174>)
 800f6ee:	68f8      	ldr	r0, [r7, #12]
 800f6f0:	f7ff f85e 	bl	800e7b0 <cli_printf>
				_RunTime_Packet.CO2_calibration = 0;
 800f6f4:	4b2c      	ldr	r3, [pc, #176]	; (800f7a8 <co2calibrate+0x16c>)
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				do_Calibration = 0;
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		   }

		   if(do_Calibration == 1)
 800f702:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800f706:	2b01      	cmp	r3, #1
 800f708:	d136      	bne.n	800f778 <co2calibrate+0x13c>
		   {
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f70a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f70c:	f7f0 fd72 	bl	80001f4 <strlen>
 800f710:	4603      	mov	r3, r0
 800f712:	b29a      	uxth	r2, r3
 800f714:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f718:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f71a:	4822      	ldr	r0, [pc, #136]	; (800f7a4 <co2calibrate+0x168>)
 800f71c:	f7fb fdae 	bl	800b27c <HAL_UART_Transmit>
				cli_printf(cli,"Co2 is calibrating, please wait.");
 800f720:	4924      	ldr	r1, [pc, #144]	; (800f7b4 <co2calibrate+0x178>)
 800f722:	68f8      	ldr	r0, [r7, #12]
 800f724:	f7ff f844 	bl	800e7b0 <cli_printf>
		   while(counter < 5 )
 800f728:	e014      	b.n	800f754 <co2calibrate+0x118>
		   {
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)dot,  strlen(dot), 1000);
 800f72a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f72c:	f7f0 fd62 	bl	80001f4 <strlen>
 800f730:	4603      	mov	r3, r0
 800f732:	b29a      	uxth	r2, r3
 800f734:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f738:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f73a:	481a      	ldr	r0, [pc, #104]	; (800f7a4 <co2calibrate+0x168>)
 800f73c:	f7fb fd9e 	bl	800b27c <HAL_UART_Transmit>
			    HAL_Delay(200);
 800f740:	20c8      	movs	r0, #200	; 0xc8
 800f742:	f7f3 fed5 	bl	80034f0 <HAL_Delay>
			    BLUE_LED_TOGGLE();
 800f746:	2108      	movs	r1, #8
 800f748:	481b      	ldr	r0, [pc, #108]	; (800f7b8 <co2calibrate+0x17c>)
 800f74a:	f7f5 fec2 	bl	80054d2 <HAL_GPIO_TogglePin>
                counter++;
 800f74e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f750:	3301      	adds	r3, #1
 800f752:	657b      	str	r3, [r7, #84]	; 0x54
		   while(counter < 5 )
 800f754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f756:	2b04      	cmp	r3, #4
 800f758:	dde7      	ble.n	800f72a <co2calibrate+0xee>
		   }

			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f75a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f75c:	f7f0 fd4a 	bl	80001f4 <strlen>
 800f760:	4603      	mov	r3, r0
 800f762:	b29a      	uxth	r2, r3
 800f764:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f768:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f76a:	480e      	ldr	r0, [pc, #56]	; (800f7a4 <co2calibrate+0x168>)
 800f76c:	f7fb fd86 	bl	800b27c <HAL_UART_Transmit>
			cli_printf(cli,"Sensor calibration done.");
 800f770:	4912      	ldr	r1, [pc, #72]	; (800f7bc <co2calibrate+0x180>)
 800f772:	68f8      	ldr	r0, [r7, #12]
 800f774:	f7ff f81c 	bl	800e7b0 <cli_printf>
		   }

		flag_cli = 0;
 800f778:	4b07      	ldr	r3, [pc, #28]	; (800f798 <co2calibrate+0x15c>)
 800f77a:	2200      	movs	r2, #0
 800f77c:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 800f77e:	4b05      	ldr	r3, [pc, #20]	; (800f794 <co2calibrate+0x158>)
 800f780:	2200      	movs	r2, #0
 800f782:	701a      	strb	r2, [r3, #0]
}
 800f784:	bf00      	nop
 800f786:	3758      	adds	r7, #88	; 0x58
 800f788:	46bd      	mov	sp, r7
 800f78a:	bd80      	pop	{r7, pc}
 800f78c:	0801ffd4 	.word	0x0801ffd4
 800f790:	080204e0 	.word	0x080204e0
 800f794:	20001a56 	.word	0x20001a56
 800f798:	20001a57 	.word	0x20001a57
 800f79c:	0802059c 	.word	0x0802059c
 800f7a0:	080205e0 	.word	0x080205e0
 800f7a4:	20001998 	.word	0x20001998
 800f7a8:	2000146c 	.word	0x2000146c
 800f7ac:	08020634 	.word	0x08020634
 800f7b0:	08020684 	.word	0x08020684
 800f7b4:	080206a4 	.word	0x080206a4
 800f7b8:	40020400 	.word	0x40020400
 800f7bc:	080206c8 	.word	0x080206c8

0800f7c0 <SystemRestart>:

void SystemRestart(EmbeddedCli *cli, char *args, void *context) {
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b092      	sub	sp, #72	; 0x48
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	60f8      	str	r0, [r7, #12]
 800f7c8:	60b9      	str	r1, [r7, #8]
 800f7ca:	607a      	str	r2, [r7, #4]
	  const char *newLine = "\r\n";
 800f7cc:	4b22      	ldr	r3, [pc, #136]	; (800f858 <SystemRestart+0x98>)
 800f7ce:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Do you want to restart the device y/n?");
 800f7d0:	4922      	ldr	r1, [pc, #136]	; (800f85c <SystemRestart+0x9c>)
 800f7d2:	68f8      	ldr	r0, [r7, #12]
 800f7d4:	f7fe ffec 	bl	800e7b0 <cli_printf>

	cli_other = 1;
 800f7d8:	4b21      	ldr	r3, [pc, #132]	; (800f860 <SystemRestart+0xa0>)
 800f7da:	2201      	movs	r2, #1
 800f7dc:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 800f7de:	4b21      	ldr	r3, [pc, #132]	; (800f864 <SystemRestart+0xa4>)
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		receiveString(cli,buffer,sizeof(buffer));
 800f7e4:	f107 0310 	add.w	r3, r7, #16
 800f7e8:	2232      	movs	r2, #50	; 0x32
 800f7ea:	4619      	mov	r1, r3
 800f7ec:	68f8      	ldr	r0, [r7, #12]
 800f7ee:	f7ff f821 	bl	800e834 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f7f2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f7f4:	f7f0 fcfe 	bl	80001f4 <strlen>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	b29a      	uxth	r2, r3
 800f7fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f800:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f802:	4819      	ldr	r0, [pc, #100]	; (800f868 <SystemRestart+0xa8>)
 800f804:	f7fb fd3a 	bl	800b27c <HAL_UART_Transmit>


		if(strstr(buffer, "y"))
 800f808:	f107 0310 	add.w	r3, r7, #16
 800f80c:	2179      	movs	r1, #121	; 0x79
 800f80e:	4618      	mov	r0, r3
 800f810:	f00c fba0 	bl	801bf54 <strchr>
 800f814:	4603      	mov	r3, r0
 800f816:	2b00      	cmp	r3, #0
 800f818:	d006      	beq.n	800f828 <SystemRestart+0x68>
		{
			cli_printf(cli,"Device is going to restart.");
 800f81a:	4914      	ldr	r1, [pc, #80]	; (800f86c <SystemRestart+0xac>)
 800f81c:	68f8      	ldr	r0, [r7, #12]
 800f81e:	f7fe ffc7 	bl	800e7b0 <cli_printf>
			HAL_NVIC_SystemReset();
 800f822:	f7f4 fc74 	bl	800410e <HAL_NVIC_SystemReset>
 800f826:	e00c      	b.n	800f842 <SystemRestart+0x82>
		}
		else if(strstr(buffer, "n"))
 800f828:	f107 0310 	add.w	r3, r7, #16
 800f82c:	216e      	movs	r1, #110	; 0x6e
 800f82e:	4618      	mov	r0, r3
 800f830:	f00c fb90 	bl	801bf54 <strchr>
 800f834:	4603      	mov	r3, r0
 800f836:	2b00      	cmp	r3, #0
 800f838:	d003      	beq.n	800f842 <SystemRestart+0x82>
		{
			cli_printf(cli,"Device restart aborted.");
 800f83a:	490d      	ldr	r1, [pc, #52]	; (800f870 <SystemRestart+0xb0>)
 800f83c:	68f8      	ldr	r0, [r7, #12]
 800f83e:	f7fe ffb7 	bl	800e7b0 <cli_printf>
		}


		flag_cli = 0;
 800f842:	4b08      	ldr	r3, [pc, #32]	; (800f864 <SystemRestart+0xa4>)
 800f844:	2200      	movs	r2, #0
 800f846:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 800f848:	4b05      	ldr	r3, [pc, #20]	; (800f860 <SystemRestart+0xa0>)
 800f84a:	2200      	movs	r2, #0
 800f84c:	701a      	strb	r2, [r3, #0]
}
 800f84e:	bf00      	nop
 800f850:	3748      	adds	r7, #72	; 0x48
 800f852:	46bd      	mov	sp, r7
 800f854:	bd80      	pop	{r7, pc}
 800f856:	bf00      	nop
 800f858:	0801ffd4 	.word	0x0801ffd4
 800f85c:	080206e4 	.word	0x080206e4
 800f860:	20001a56 	.word	0x20001a56
 800f864:	20001a57 	.word	0x20001a57
 800f868:	20001998 	.word	0x20001998
 800f86c:	0802070c 	.word	0x0802070c
 800f870:	08020728 	.word	0x08020728

0800f874 <Co2Level>:

void Co2Level(EmbeddedCli *cli, char *args, void *context) {
 800f874:	b580      	push	{r7, lr}
 800f876:	b084      	sub	sp, #16
 800f878:	af00      	add	r7, sp, #0
 800f87a:	60f8      	str	r0, [r7, #12]
 800f87c:	60b9      	str	r1, [r7, #8]
 800f87e:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"Co2 Value: %d",_RunTime_Packet.co2);
 800f880:	4b05      	ldr	r3, [pc, #20]	; (800f898 <Co2Level+0x24>)
 800f882:	881b      	ldrh	r3, [r3, #0]
 800f884:	461a      	mov	r2, r3
 800f886:	4905      	ldr	r1, [pc, #20]	; (800f89c <Co2Level+0x28>)
 800f888:	68f8      	ldr	r0, [r7, #12]
 800f88a:	f7fe ff91 	bl	800e7b0 <cli_printf>
}
 800f88e:	bf00      	nop
 800f890:	3710      	adds	r7, #16
 800f892:	46bd      	mov	sp, r7
 800f894:	bd80      	pop	{r7, pc}
 800f896:	bf00      	nop
 800f898:	2000146c 	.word	0x2000146c
 800f89c:	08020740 	.word	0x08020740

0800f8a0 <TempLevel>:

void TempLevel(EmbeddedCli *cli, char *args, void *context) {
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b084      	sub	sp, #16
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	60f8      	str	r0, [r7, #12]
 800f8a8:	60b9      	str	r1, [r7, #8]
 800f8aa:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"Temperature Value: %dC ",_RunTime_Packet.temperature);
 800f8ac:	4b05      	ldr	r3, [pc, #20]	; (800f8c4 <TempLevel+0x24>)
 800f8ae:	685b      	ldr	r3, [r3, #4]
 800f8b0:	461a      	mov	r2, r3
 800f8b2:	4905      	ldr	r1, [pc, #20]	; (800f8c8 <TempLevel+0x28>)
 800f8b4:	68f8      	ldr	r0, [r7, #12]
 800f8b6:	f7fe ff7b 	bl	800e7b0 <cli_printf>
}
 800f8ba:	bf00      	nop
 800f8bc:	3710      	adds	r7, #16
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	bd80      	pop	{r7, pc}
 800f8c2:	bf00      	nop
 800f8c4:	2000146c 	.word	0x2000146c
 800f8c8:	08020750 	.word	0x08020750

0800f8cc <HumidLevel>:

void HumidLevel(EmbeddedCli *cli, char *args, void *context) {
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b084      	sub	sp, #16
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	60f8      	str	r0, [r7, #12]
 800f8d4:	60b9      	str	r1, [r7, #8]
 800f8d6:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"Humidity Value: %d ",_RunTime_Packet.humidity);
 800f8d8:	4b05      	ldr	r3, [pc, #20]	; (800f8f0 <HumidLevel+0x24>)
 800f8da:	689b      	ldr	r3, [r3, #8]
 800f8dc:	461a      	mov	r2, r3
 800f8de:	4905      	ldr	r1, [pc, #20]	; (800f8f4 <HumidLevel+0x28>)
 800f8e0:	68f8      	ldr	r0, [r7, #12]
 800f8e2:	f7fe ff65 	bl	800e7b0 <cli_printf>
}
 800f8e6:	bf00      	nop
 800f8e8:	3710      	adds	r7, #16
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	bd80      	pop	{r7, pc}
 800f8ee:	bf00      	nop
 800f8f0:	2000146c 	.word	0x2000146c
 800f8f4:	08020768 	.word	0x08020768

0800f8f8 <MotionDetection>:

uint8_t prev_motion;

void MotionDetection(EmbeddedCli *cli, char *args, void *context) {
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b084      	sub	sp, #16
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	60f8      	str	r0, [r7, #12]
 800f900:	60b9      	str	r1, [r7, #8]
 800f902:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"For 10seconds system will poll here to detect motion.");
 800f904:	491f      	ldr	r1, [pc, #124]	; (800f984 <MotionDetection+0x8c>)
 800f906:	68f8      	ldr	r0, [r7, #12]
 800f908:	f7fe ff52 	bl	800e7b0 <cli_printf>
	HAL_Delay(1500);
 800f90c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800f910:	f7f3 fdee 	bl	80034f0 <HAL_Delay>
         prev_max_wait_time_motion = HAL_GetTick();
 800f914:	f7f3 fde0 	bl	80034d8 <HAL_GetTick>
 800f918:	4603      	mov	r3, r0
 800f91a:	4a1b      	ldr	r2, [pc, #108]	; (800f988 <MotionDetection+0x90>)
 800f91c:	6013      	str	r3, [r2, #0]
         prev_motion = 0;
 800f91e:	4b1b      	ldr	r3, [pc, #108]	; (800f98c <MotionDetection+0x94>)
 800f920:	2200      	movs	r2, #0
 800f922:	701a      	strb	r2, [r3, #0]
	while(HAL_GetTick() - prev_max_wait_time_motion < max_wait_time_motion)
 800f924:	e01c      	b.n	800f960 <MotionDetection+0x68>
	{

		if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 800f926:	2101      	movs	r1, #1
 800f928:	4819      	ldr	r0, [pc, #100]	; (800f990 <MotionDetection+0x98>)
 800f92a:	f7f5 fda1 	bl	8005470 <HAL_GPIO_ReadPin>
 800f92e:	4603      	mov	r3, r0
 800f930:	2b00      	cmp	r3, #0
 800f932:	d003      	beq.n	800f93c <MotionDetection+0x44>
				_RunTime_Packet.motion_detection = 1;
 800f934:	4b17      	ldr	r3, [pc, #92]	; (800f994 <MotionDetection+0x9c>)
 800f936:	2201      	movs	r2, #1
 800f938:	731a      	strb	r2, [r3, #12]
 800f93a:	e002      	b.n	800f942 <MotionDetection+0x4a>
				//cli_printf(cli,"PIR Motion: %d\r\n",_RunTime_Packet.motion_detection);
			}
			else {
				_RunTime_Packet.motion_detection = 0;
 800f93c:	4b15      	ldr	r3, [pc, #84]	; (800f994 <MotionDetection+0x9c>)
 800f93e:	2200      	movs	r2, #0
 800f940:	731a      	strb	r2, [r3, #12]
			}

//		if(prev_motion != _RunTime_Packet.motion_detection )
//	         	{
//			prev_motion = _RunTime_Packet.motion_detection ;
			cli_printf(cli,"PIR Motion: %s\r\n",_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 800f942:	4b14      	ldr	r3, [pc, #80]	; (800f994 <MotionDetection+0x9c>)
 800f944:	7b1b      	ldrb	r3, [r3, #12]
 800f946:	2b01      	cmp	r3, #1
 800f948:	d101      	bne.n	800f94e <MotionDetection+0x56>
 800f94a:	4b13      	ldr	r3, [pc, #76]	; (800f998 <MotionDetection+0xa0>)
 800f94c:	e000      	b.n	800f950 <MotionDetection+0x58>
 800f94e:	4b13      	ldr	r3, [pc, #76]	; (800f99c <MotionDetection+0xa4>)
 800f950:	461a      	mov	r2, r3
 800f952:	4913      	ldr	r1, [pc, #76]	; (800f9a0 <MotionDetection+0xa8>)
 800f954:	68f8      	ldr	r0, [r7, #12]
 800f956:	f7fe ff2b 	bl	800e7b0 <cli_printf>
//	         	}
HAL_Delay(100);
 800f95a:	2064      	movs	r0, #100	; 0x64
 800f95c:	f7f3 fdc8 	bl	80034f0 <HAL_Delay>
	while(HAL_GetTick() - prev_max_wait_time_motion < max_wait_time_motion)
 800f960:	f7f3 fdba 	bl	80034d8 <HAL_GetTick>
 800f964:	4602      	mov	r2, r0
 800f966:	4b08      	ldr	r3, [pc, #32]	; (800f988 <MotionDetection+0x90>)
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	1ad2      	subs	r2, r2, r3
 800f96c:	4b0d      	ldr	r3, [pc, #52]	; (800f9a4 <MotionDetection+0xac>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	429a      	cmp	r2, r3
 800f972:	d3d8      	bcc.n	800f926 <MotionDetection+0x2e>

	}

	cli_printf(cli,"Session ended");
 800f974:	490c      	ldr	r1, [pc, #48]	; (800f9a8 <MotionDetection+0xb0>)
 800f976:	68f8      	ldr	r0, [r7, #12]
 800f978:	f7fe ff1a 	bl	800e7b0 <cli_printf>

}
 800f97c:	bf00      	nop
 800f97e:	3710      	adds	r7, #16
 800f980:	46bd      	mov	sp, r7
 800f982:	bd80      	pop	{r7, pc}
 800f984:	0802077c 	.word	0x0802077c
 800f988:	20001a50 	.word	0x20001a50
 800f98c:	20001a58 	.word	0x20001a58
 800f990:	40020000 	.word	0x40020000
 800f994:	2000146c 	.word	0x2000146c
 800f998:	080207b4 	.word	0x080207b4
 800f99c:	080207bc 	.word	0x080207bc
 800f9a0:	080207c4 	.word	0x080207c4
 800f9a4:	2000001c 	.word	0x2000001c
 800f9a8:	080207d8 	.word	0x080207d8

0800f9ac <AirQuality>:

void AirQuality(EmbeddedCli *cli, char *args, void *context) {
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b084      	sub	sp, #16
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	60f8      	str	r0, [r7, #12]
 800f9b4:	60b9      	str	r1, [r7, #8]
 800f9b6:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"AirQuality Measured Values:");
 800f9b8:	492c      	ldr	r1, [pc, #176]	; (800fa6c <AirQuality+0xc0>)
 800f9ba:	68f8      	ldr	r0, [r7, #12]
 800f9bc:	f7fe fef8 	bl	800e7b0 <cli_printf>
	if(_RunTime_Packet.pm1_0 == 0 && _RunTime_Packet.pm2_5 == 0 && _RunTime_Packet.pm4_0 == 0 && _RunTime_Packet.pm10_0 == 0)
 800f9c0:	4b2b      	ldr	r3, [pc, #172]	; (800fa70 <AirQuality+0xc4>)
 800f9c2:	edd3 7a04 	vldr	s15, [r3, #16]
 800f9c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f9ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9ce:	d11c      	bne.n	800fa0a <AirQuality+0x5e>
 800f9d0:	4b27      	ldr	r3, [pc, #156]	; (800fa70 <AirQuality+0xc4>)
 800f9d2:	edd3 7a05 	vldr	s15, [r3, #20]
 800f9d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f9da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9de:	d114      	bne.n	800fa0a <AirQuality+0x5e>
 800f9e0:	4b23      	ldr	r3, [pc, #140]	; (800fa70 <AirQuality+0xc4>)
 800f9e2:	edd3 7a06 	vldr	s15, [r3, #24]
 800f9e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f9ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9ee:	d10c      	bne.n	800fa0a <AirQuality+0x5e>
 800f9f0:	4b1f      	ldr	r3, [pc, #124]	; (800fa70 <AirQuality+0xc4>)
 800f9f2:	edd3 7a07 	vldr	s15, [r3, #28]
 800f9f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f9fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9fe:	d104      	bne.n	800fa0a <AirQuality+0x5e>
	{
		cli_printf(cli,"Calculating, try again later");
 800fa00:	491c      	ldr	r1, [pc, #112]	; (800fa74 <AirQuality+0xc8>)
 800fa02:	68f8      	ldr	r0, [r7, #12]
 800fa04:	f7fe fed4 	bl	800e7b0 <cli_printf>
 800fa08:	e02c      	b.n	800fa64 <AirQuality+0xb8>
	}
	else
	{
	cli_printf(cli,"%0.2f pm1.0", _RunTime_Packet.pm1_0);
 800fa0a:	4b19      	ldr	r3, [pc, #100]	; (800fa70 <AirQuality+0xc4>)
 800fa0c:	691b      	ldr	r3, [r3, #16]
 800fa0e:	4618      	mov	r0, r3
 800fa10:	f7f0 fdb2 	bl	8000578 <__aeabi_f2d>
 800fa14:	4602      	mov	r2, r0
 800fa16:	460b      	mov	r3, r1
 800fa18:	4917      	ldr	r1, [pc, #92]	; (800fa78 <AirQuality+0xcc>)
 800fa1a:	68f8      	ldr	r0, [r7, #12]
 800fa1c:	f7fe fec8 	bl	800e7b0 <cli_printf>
	cli_printf(cli,"%0.2f pm2.5 ",_RunTime_Packet.pm2_5);
 800fa20:	4b13      	ldr	r3, [pc, #76]	; (800fa70 <AirQuality+0xc4>)
 800fa22:	695b      	ldr	r3, [r3, #20]
 800fa24:	4618      	mov	r0, r3
 800fa26:	f7f0 fda7 	bl	8000578 <__aeabi_f2d>
 800fa2a:	4602      	mov	r2, r0
 800fa2c:	460b      	mov	r3, r1
 800fa2e:	4913      	ldr	r1, [pc, #76]	; (800fa7c <AirQuality+0xd0>)
 800fa30:	68f8      	ldr	r0, [r7, #12]
 800fa32:	f7fe febd 	bl	800e7b0 <cli_printf>
	cli_printf(cli,"%0.2f pm4.0 ",_RunTime_Packet.pm4_0);
 800fa36:	4b0e      	ldr	r3, [pc, #56]	; (800fa70 <AirQuality+0xc4>)
 800fa38:	699b      	ldr	r3, [r3, #24]
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f7f0 fd9c 	bl	8000578 <__aeabi_f2d>
 800fa40:	4602      	mov	r2, r0
 800fa42:	460b      	mov	r3, r1
 800fa44:	490e      	ldr	r1, [pc, #56]	; (800fa80 <AirQuality+0xd4>)
 800fa46:	68f8      	ldr	r0, [r7, #12]
 800fa48:	f7fe feb2 	bl	800e7b0 <cli_printf>
	cli_printf(cli,"%0.2f pm10.0",_RunTime_Packet.pm10_0);
 800fa4c:	4b08      	ldr	r3, [pc, #32]	; (800fa70 <AirQuality+0xc4>)
 800fa4e:	69db      	ldr	r3, [r3, #28]
 800fa50:	4618      	mov	r0, r3
 800fa52:	f7f0 fd91 	bl	8000578 <__aeabi_f2d>
 800fa56:	4602      	mov	r2, r0
 800fa58:	460b      	mov	r3, r1
 800fa5a:	490a      	ldr	r1, [pc, #40]	; (800fa84 <AirQuality+0xd8>)
 800fa5c:	68f8      	ldr	r0, [r7, #12]
 800fa5e:	f7fe fea7 	bl	800e7b0 <cli_printf>
	}


}
 800fa62:	bf00      	nop
 800fa64:	bf00      	nop
 800fa66:	3710      	adds	r7, #16
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	bd80      	pop	{r7, pc}
 800fa6c:	080207e8 	.word	0x080207e8
 800fa70:	2000146c 	.word	0x2000146c
 800fa74:	08020804 	.word	0x08020804
 800fa78:	08020824 	.word	0x08020824
 800fa7c:	08020830 	.word	0x08020830
 800fa80:	08020840 	.word	0x08020840
 800fa84:	08020850 	.word	0x08020850

0800fa88 <BattVolt>:

void BattVolt(EmbeddedCli *cli, char *args, void *context) {
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b084      	sub	sp, #16
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	60f8      	str	r0, [r7, #12]
 800fa90:	60b9      	str	r1, [r7, #8]
 800fa92:	607a      	str	r2, [r7, #4]

	//float batteryVoltage;
	adc_Measure(&_RunTime_Packet.battery_voltage);
 800fa94:	4808      	ldr	r0, [pc, #32]	; (800fab8 <BattVolt+0x30>)
 800fa96:	f002 f9e5 	bl	8011e64 <adc_Measure>
	cli_printf(cli,"Battery voltage: %0.2f",_RunTime_Packet.battery_voltage);
 800fa9a:	4b08      	ldr	r3, [pc, #32]	; (800fabc <BattVolt+0x34>)
 800fa9c:	6a1b      	ldr	r3, [r3, #32]
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7f0 fd6a 	bl	8000578 <__aeabi_f2d>
 800faa4:	4602      	mov	r2, r0
 800faa6:	460b      	mov	r3, r1
 800faa8:	4905      	ldr	r1, [pc, #20]	; (800fac0 <BattVolt+0x38>)
 800faaa:	68f8      	ldr	r0, [r7, #12]
 800faac:	f7fe fe80 	bl	800e7b0 <cli_printf>


}
 800fab0:	bf00      	nop
 800fab2:	3710      	adds	r7, #16
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd80      	pop	{r7, pc}
 800fab8:	2000148c 	.word	0x2000148c
 800fabc:	2000146c 	.word	0x2000146c
 800fac0:	08020860 	.word	0x08020860

0800fac4 <initializeEmbeddedCli>:


/**
 * Initializes the Embedded CLI instance and sets up command bindings.
 */
void initializeEmbeddedCli() {
 800fac4:	b5b0      	push	{r4, r5, r7, lr}
 800fac6:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 800faca:	af02      	add	r7, sp, #8
	cli = embeddedCliNewDefault();
 800facc:	f000 fcd1 	bl	8010472 <embeddedCliNewDefault>
 800fad0:	4603      	mov	r3, r0
 800fad2:	4aac      	ldr	r2, [pc, #688]	; (800fd84 <initializeEmbeddedCli+0x2c0>)
 800fad4:	6013      	str	r3, [r2, #0]

	CliCommandBinding clear_binding = { .name = "clear", .help =
 800fad6:	4bac      	ldr	r3, [pc, #688]	; (800fd88 <initializeEmbeddedCli+0x2c4>)
 800fad8:	f507 7411 	add.w	r4, r7, #580	; 0x244
 800fadc:	461d      	mov	r5, r3
 800fade:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fae0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fae2:	682b      	ldr	r3, [r5, #0]
 800fae4:	6023      	str	r3, [r4, #0]
			"Clears the console", .tokenizeArgs = true, .context = NULL,
			.binding = onClearCLI };

	CliCommandBinding Debug_scd4x_PM25 = { .name = "debug", .help =
 800fae6:	4ba9      	ldr	r3, [pc, #676]	; (800fd8c <initializeEmbeddedCli+0x2c8>)
 800fae8:	f507 740c 	add.w	r4, r7, #560	; 0x230
 800faec:	461d      	mov	r5, r3
 800faee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800faf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800faf2:	682b      	ldr	r3, [r5, #0]
 800faf4:	6023      	str	r3, [r4, #0]
			"Enable/Disable debug messages for scd4x and PM sensor", .tokenizeArgs = true, .context = NULL,
			.binding = debug_scd4x_PM25 };

	CliCommandBinding Get_DeviceSignature = { .name = "get-Device-Signature", .help =
 800faf6:	4ba6      	ldr	r3, [pc, #664]	; (800fd90 <initializeEmbeddedCli+0x2cc>)
 800faf8:	f507 7407 	add.w	r4, r7, #540	; 0x21c
 800fafc:	461d      	mov	r5, r3
 800fafe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb02:	682b      	ldr	r3, [r5, #0]
 800fb04:	6023      	str	r3, [r4, #0]
				"Device Signature-Electronic ID", .tokenizeArgs = true, .context = NULL,
				.binding = DeviceSignature };

	CliCommandBinding Set_ID = { .name = "set-id", .help =
 800fb06:	4ba3      	ldr	r3, [pc, #652]	; (800fd94 <initializeEmbeddedCli+0x2d0>)
 800fb08:	f507 7402 	add.w	r4, r7, #520	; 0x208
 800fb0c:	461d      	mov	r5, r3
 800fb0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb12:	682b      	ldr	r3, [r5, #0]
 800fb14:	6023      	str	r3, [r4, #0]
				"Sets ID", .tokenizeArgs = true, .context = NULL,
				.binding = SetID };

	CliCommandBinding Set_Location = { .name = "set-location", .help =
 800fb16:	4ba0      	ldr	r3, [pc, #640]	; (800fd98 <initializeEmbeddedCli+0x2d4>)
 800fb18:	f507 74fa 	add.w	r4, r7, #500	; 0x1f4
 800fb1c:	461d      	mov	r5, r3
 800fb1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb22:	682b      	ldr	r3, [r5, #0]
 800fb24:	6023      	str	r3, [r4, #0]
				"Sets Location", .tokenizeArgs = true, .context = NULL,
				.binding = SetLocation };

	CliCommandBinding Set_name = { .name = "set-name", .help =
 800fb26:	4b9d      	ldr	r3, [pc, #628]	; (800fd9c <initializeEmbeddedCli+0x2d8>)
 800fb28:	f507 74f0 	add.w	r4, r7, #480	; 0x1e0
 800fb2c:	461d      	mov	r5, r3
 800fb2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb32:	682b      	ldr	r3, [r5, #0]
 800fb34:	6023      	str	r3, [r4, #0]
				"Sets name", .tokenizeArgs = true, .context = NULL,
				.binding = Setname };

	CliCommandBinding Set_group = { .name = "set-group", .help =
 800fb36:	4b9a      	ldr	r3, [pc, #616]	; (800fda0 <initializeEmbeddedCli+0x2dc>)
 800fb38:	f507 74e6 	add.w	r4, r7, #460	; 0x1cc
 800fb3c:	461d      	mov	r5, r3
 800fb3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb42:	682b      	ldr	r3, [r5, #0]
 800fb44:	6023      	str	r3, [r4, #0]
				"Sets group", .tokenizeArgs = true, .context = NULL,
				.binding = Setgroup };

	CliCommandBinding Get_ID = { .name = "get-id", .help =
 800fb46:	4b97      	ldr	r3, [pc, #604]	; (800fda4 <initializeEmbeddedCli+0x2e0>)
 800fb48:	f507 74dc 	add.w	r4, r7, #440	; 0x1b8
 800fb4c:	461d      	mov	r5, r3
 800fb4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb52:	682b      	ldr	r3, [r5, #0]
 800fb54:	6023      	str	r3, [r4, #0]
				"gets ID", .tokenizeArgs = true, .context = NULL,
				.binding = GetID };

	CliCommandBinding Get_Location = { .name = "get-location", .help =
 800fb56:	4b94      	ldr	r3, [pc, #592]	; (800fda8 <initializeEmbeddedCli+0x2e4>)
 800fb58:	f507 74d2 	add.w	r4, r7, #420	; 0x1a4
 800fb5c:	461d      	mov	r5, r3
 800fb5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb62:	682b      	ldr	r3, [r5, #0]
 800fb64:	6023      	str	r3, [r4, #0]
				"gets Location", .tokenizeArgs = true, .context = NULL,
				.binding = GetLocation };

	CliCommandBinding Get_name = { .name = "get-name", .help =
 800fb66:	4b91      	ldr	r3, [pc, #580]	; (800fdac <initializeEmbeddedCli+0x2e8>)
 800fb68:	f507 74c8 	add.w	r4, r7, #400	; 0x190
 800fb6c:	461d      	mov	r5, r3
 800fb6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb72:	682b      	ldr	r3, [r5, #0]
 800fb74:	6023      	str	r3, [r4, #0]
				"gets name", .tokenizeArgs = true, .context = NULL,
				.binding = Getname };

	CliCommandBinding Get_group = { .name = "get-group", .help =
 800fb76:	4b8e      	ldr	r3, [pc, #568]	; (800fdb0 <initializeEmbeddedCli+0x2ec>)
 800fb78:	f507 74be 	add.w	r4, r7, #380	; 0x17c
 800fb7c:	461d      	mov	r5, r3
 800fb7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb82:	682b      	ldr	r3, [r5, #0]
 800fb84:	6023      	str	r3, [r4, #0]
				"gets group", .tokenizeArgs = true, .context = NULL,
				.binding = Getgroup };

	CliCommandBinding Set_Date = { .name = "set-date", .help =
 800fb86:	4b8b      	ldr	r3, [pc, #556]	; (800fdb4 <initializeEmbeddedCli+0x2f0>)
 800fb88:	f507 74b4 	add.w	r4, r7, #360	; 0x168
 800fb8c:	461d      	mov	r5, r3
 800fb8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb92:	682b      	ldr	r3, [r5, #0]
 800fb94:	6023      	str	r3, [r4, #0]
			"Set Systems Date", .tokenizeArgs = true, .context = NULL,
			.binding = SetDate };

	CliCommandBinding Set_Time = { .name = "set-time", .help =
 800fb96:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fb9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fb9e:	4a86      	ldr	r2, [pc, #536]	; (800fdb8 <initializeEmbeddedCli+0x2f4>)
 800fba0:	461c      	mov	r4, r3
 800fba2:	4615      	mov	r5, r2
 800fba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fba8:	682b      	ldr	r3, [r5, #0]
 800fbaa:	6023      	str	r3, [r4, #0]
			"Set Systems Time", .tokenizeArgs = true, .context = NULL,
			.binding = SetTime };

	CliCommandBinding Get_Date = { .name = "get-date", .help =
 800fbac:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fbb0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800fbb4:	4a81      	ldr	r2, [pc, #516]	; (800fdbc <initializeEmbeddedCli+0x2f8>)
 800fbb6:	461c      	mov	r4, r3
 800fbb8:	4615      	mov	r5, r2
 800fbba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fbbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fbbe:	682b      	ldr	r3, [r5, #0]
 800fbc0:	6023      	str	r3, [r4, #0]
			"Get Systems Date", .tokenizeArgs = true, .context = NULL,
			.binding = GetDate };

	CliCommandBinding Get_Time = { .name = "get-time", .help =
 800fbc2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fbc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fbca:	4a7d      	ldr	r2, [pc, #500]	; (800fdc0 <initializeEmbeddedCli+0x2fc>)
 800fbcc:	461c      	mov	r4, r3
 800fbce:	4615      	mov	r5, r2
 800fbd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fbd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fbd4:	682b      	ldr	r3, [r5, #0]
 800fbd6:	6023      	str	r3, [r4, #0]
			"Get Systems Time", .tokenizeArgs = true, .context = NULL,
			.binding = GetTime };

	CliCommandBinding Set_Interval = { .name = "set-interval", .help =
 800fbd8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fbdc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800fbe0:	4a78      	ldr	r2, [pc, #480]	; (800fdc4 <initializeEmbeddedCli+0x300>)
 800fbe2:	461c      	mov	r4, r3
 800fbe4:	4615      	mov	r5, r2
 800fbe6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fbe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fbea:	682b      	ldr	r3, [r5, #0]
 800fbec:	6023      	str	r3, [r4, #0]
			"Set Time Interval for fetching the data", .tokenizeArgs = true, .context = NULL,
			.binding = SetInterval };

	CliCommandBinding Get_Interval = { .name = "get-interval", .help =
 800fbee:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fbf2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800fbf6:	4a74      	ldr	r2, [pc, #464]	; (800fdc8 <initializeEmbeddedCli+0x304>)
 800fbf8:	461c      	mov	r4, r3
 800fbfa:	4615      	mov	r5, r2
 800fbfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fbfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fc00:	682b      	ldr	r3, [r5, #0]
 800fc02:	6023      	str	r3, [r4, #0]
			"Get Time Interval", .tokenizeArgs = true, .context = NULL,
			.binding = GetInterval };


	CliCommandBinding Set_Filename = { .name = "set-filename", .help =
 800fc04:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fc08:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800fc0c:	4a6f      	ldr	r2, [pc, #444]	; (800fdcc <initializeEmbeddedCli+0x308>)
 800fc0e:	461c      	mov	r4, r3
 800fc10:	4615      	mov	r5, r2
 800fc12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fc16:	682b      	ldr	r3, [r5, #0]
 800fc18:	6023      	str	r3, [r4, #0]
			"Set desired filename", .tokenizeArgs = true, .context = NULL,
			.binding = SetFilename };

	CliCommandBinding Get_Filename = { .name = "get-filename", .help =
 800fc1a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fc1e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800fc22:	4a6b      	ldr	r2, [pc, #428]	; (800fdd0 <initializeEmbeddedCli+0x30c>)
 800fc24:	461c      	mov	r4, r3
 800fc26:	4615      	mov	r5, r2
 800fc28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fc2c:	682b      	ldr	r3, [r5, #0]
 800fc2e:	6023      	str	r3, [r4, #0]
			"Get filename", .tokenizeArgs = true, .context = NULL,
			.binding = GetFilename };


	CliCommandBinding Set_Fileformat = { .name = "set-fileformat", .help =
 800fc30:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fc34:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800fc38:	4a66      	ldr	r2, [pc, #408]	; (800fdd4 <initializeEmbeddedCli+0x310>)
 800fc3a:	461c      	mov	r4, r3
 800fc3c:	4615      	mov	r5, r2
 800fc3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fc42:	682b      	ldr	r3, [r5, #0]
 800fc44:	6023      	str	r3, [r4, #0]
			"Set desired file format", .tokenizeArgs = true, .context = NULL,
			.binding = SetFileformat };

	CliCommandBinding Get_Fileformat = { .name = "get-fileformat", .help =
 800fc46:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fc4a:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800fc4e:	4a62      	ldr	r2, [pc, #392]	; (800fdd8 <initializeEmbeddedCli+0x314>)
 800fc50:	461c      	mov	r4, r3
 800fc52:	4615      	mov	r5, r2
 800fc54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fc58:	682b      	ldr	r3, [r5, #0]
 800fc5a:	6023      	str	r3, [r4, #0]
			"Get file format", .tokenizeArgs = true, .context = NULL,
			.binding = GetFileformat };

	CliCommandBinding Fan_Clean = { .name = "fan-clean", .help =
 800fc5c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fc60:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800fc64:	4a5d      	ldr	r2, [pc, #372]	; (800fddc <initializeEmbeddedCli+0x318>)
 800fc66:	461c      	mov	r4, r3
 800fc68:	4615      	mov	r5, r2
 800fc6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fc6e:	682b      	ldr	r3, [r5, #0]
 800fc70:	6023      	str	r3, [r4, #0]
			"Particle sensor fan cleaning", .tokenizeArgs = true, .context = NULL,
			.binding = fanclean };

	CliCommandBinding Co2_Calibration = { .name = "co2-calibration", .help =
 800fc72:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fc76:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800fc7a:	4a59      	ldr	r2, [pc, #356]	; (800fde0 <initializeEmbeddedCli+0x31c>)
 800fc7c:	461c      	mov	r4, r3
 800fc7e:	4615      	mov	r5, r2
 800fc80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fc84:	682b      	ldr	r3, [r5, #0]
 800fc86:	6023      	str	r3, [r4, #0]
			"Calibrate the co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = co2calibrate };

	CliCommandBinding Systemreset = { .name = "system-restart", .help =
 800fc88:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fc8c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800fc90:	4a54      	ldr	r2, [pc, #336]	; (800fde4 <initializeEmbeddedCli+0x320>)
 800fc92:	461c      	mov	r4, r3
 800fc94:	4615      	mov	r5, r2
 800fc96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fc9a:	682b      	ldr	r3, [r5, #0]
 800fc9c:	6023      	str	r3, [r4, #0]
			"Restart the system", .tokenizeArgs = true, .context = NULL,
			.binding = SystemRestart };

	CliCommandBinding Co2_Level = { .name = "Co2-level", .help =
 800fc9e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fca2:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800fca6:	4a50      	ldr	r2, [pc, #320]	; (800fde8 <initializeEmbeddedCli+0x324>)
 800fca8:	461c      	mov	r4, r3
 800fcaa:	4615      	mov	r5, r2
 800fcac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fcae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fcb0:	682b      	ldr	r3, [r5, #0]
 800fcb2:	6023      	str	r3, [r4, #0]
			"Check Co2 level", .tokenizeArgs = true, .context = NULL,
			.binding = Co2Level };

	CliCommandBinding Temp_Level = { .name = "temperature-level", .help =
 800fcb4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fcb8:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800fcbc:	4a4b      	ldr	r2, [pc, #300]	; (800fdec <initializeEmbeddedCli+0x328>)
 800fcbe:	461c      	mov	r4, r3
 800fcc0:	4615      	mov	r5, r2
 800fcc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fcc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fcc6:	682b      	ldr	r3, [r5, #0]
 800fcc8:	6023      	str	r3, [r4, #0]
			"Check Temperature level", .tokenizeArgs = true, .context = NULL,
			.binding = TempLevel };

	CliCommandBinding Humid_Level = { .name = "humidity-level", .help =
 800fcca:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fcce:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800fcd2:	4a47      	ldr	r2, [pc, #284]	; (800fdf0 <initializeEmbeddedCli+0x32c>)
 800fcd4:	461c      	mov	r4, r3
 800fcd6:	4615      	mov	r5, r2
 800fcd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fcda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fcdc:	682b      	ldr	r3, [r5, #0]
 800fcde:	6023      	str	r3, [r4, #0]
			"Check Humidity level", .tokenizeArgs = true, .context = NULL,
			.binding = HumidLevel };

	CliCommandBinding Motion_Detection = { .name = "motion-detection", .help =
 800fce0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fce4:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fce8:	4a42      	ldr	r2, [pc, #264]	; (800fdf4 <initializeEmbeddedCli+0x330>)
 800fcea:	461c      	mov	r4, r3
 800fcec:	4615      	mov	r5, r2
 800fcee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fcf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fcf2:	682b      	ldr	r3, [r5, #0]
 800fcf4:	6023      	str	r3, [r4, #0]
			"Detect Motion", .tokenizeArgs = true, .context = NULL,
			.binding = MotionDetection };

	CliCommandBinding Air_Quality = { .name = "air-quality", .help =
 800fcf6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fcfa:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800fcfe:	4a3e      	ldr	r2, [pc, #248]	; (800fdf8 <initializeEmbeddedCli+0x334>)
 800fd00:	461c      	mov	r4, r3
 800fd02:	4615      	mov	r5, r2
 800fd04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fd06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fd08:	682b      	ldr	r3, [r5, #0]
 800fd0a:	6023      	str	r3, [r4, #0]
				"Check air quality level", .tokenizeArgs = true, .context = NULL,
				.binding = AirQuality };

	CliCommandBinding Battery_Voltage = { .name = "battery-volt", .help =
 800fd0c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fd10:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800fd14:	4a39      	ldr	r2, [pc, #228]	; (800fdfc <initializeEmbeddedCli+0x338>)
 800fd16:	461c      	mov	r4, r3
 800fd18:	4615      	mov	r5, r2
 800fd1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fd1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fd1e:	682b      	ldr	r3, [r5, #0]
 800fd20:	6023      	str	r3, [r4, #0]
				.binding = BattVolt };



	// EmbeddedCli *cli = getCliPointer;debug_scd4x_PM25
	embeddedCliAddBinding(cli, clear_binding);
 800fd22:	4b18      	ldr	r3, [pc, #96]	; (800fd84 <initializeEmbeddedCli+0x2c0>)
 800fd24:	681c      	ldr	r4, [r3, #0]
 800fd26:	466a      	mov	r2, sp
 800fd28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fd2c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fd30:	e882 0003 	stmia.w	r2, {r0, r1}
 800fd34:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800fd38:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fd3a:	4620      	mov	r0, r4
 800fd3c:	f000 fc57 	bl	80105ee <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Debug_scd4x_PM25);
 800fd40:	4b10      	ldr	r3, [pc, #64]	; (800fd84 <initializeEmbeddedCli+0x2c0>)
 800fd42:	681c      	ldr	r4, [r3, #0]
 800fd44:	466a      	mov	r2, sp
 800fd46:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 800fd4a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fd4e:	e882 0003 	stmia.w	r2, {r0, r1}
 800fd52:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800fd56:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fd58:	4620      	mov	r0, r4
 800fd5a:	f000 fc48 	bl	80105ee <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_DeviceSignature);
 800fd5e:	4b09      	ldr	r3, [pc, #36]	; (800fd84 <initializeEmbeddedCli+0x2c0>)
 800fd60:	681c      	ldr	r4, [r3, #0]
 800fd62:	466a      	mov	r2, sp
 800fd64:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800fd68:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fd6c:	e882 0003 	stmia.w	r2, {r0, r1}
 800fd70:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800fd74:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fd76:	4620      	mov	r0, r4
 800fd78:	f000 fc39 	bl	80105ee <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_ID);
 800fd7c:	4b01      	ldr	r3, [pc, #4]	; (800fd84 <initializeEmbeddedCli+0x2c0>)
 800fd7e:	681c      	ldr	r4, [r3, #0]
 800fd80:	466a      	mov	r2, sp
 800fd82:	e03d      	b.n	800fe00 <initializeEmbeddedCli+0x33c>
 800fd84:	20001a48 	.word	0x20001a48
 800fd88:	08020878 	.word	0x08020878
 800fd8c:	0802088c 	.word	0x0802088c
 800fd90:	080208a0 	.word	0x080208a0
 800fd94:	080208b4 	.word	0x080208b4
 800fd98:	080208c8 	.word	0x080208c8
 800fd9c:	080208dc 	.word	0x080208dc
 800fda0:	080208f0 	.word	0x080208f0
 800fda4:	08020904 	.word	0x08020904
 800fda8:	08020918 	.word	0x08020918
 800fdac:	0802092c 	.word	0x0802092c
 800fdb0:	08020940 	.word	0x08020940
 800fdb4:	08020954 	.word	0x08020954
 800fdb8:	08020968 	.word	0x08020968
 800fdbc:	0802097c 	.word	0x0802097c
 800fdc0:	08020990 	.word	0x08020990
 800fdc4:	080209a4 	.word	0x080209a4
 800fdc8:	080209b8 	.word	0x080209b8
 800fdcc:	080209cc 	.word	0x080209cc
 800fdd0:	080209e0 	.word	0x080209e0
 800fdd4:	080209f4 	.word	0x080209f4
 800fdd8:	08020a08 	.word	0x08020a08
 800fddc:	08020a1c 	.word	0x08020a1c
 800fde0:	08020a30 	.word	0x08020a30
 800fde4:	08020a44 	.word	0x08020a44
 800fde8:	08020a58 	.word	0x08020a58
 800fdec:	08020a6c 	.word	0x08020a6c
 800fdf0:	08020a80 	.word	0x08020a80
 800fdf4:	08020a94 	.word	0x08020a94
 800fdf8:	08020aa8 	.word	0x08020aa8
 800fdfc:	08020abc 	.word	0x08020abc
 800fe00:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800fe04:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fe08:	e882 0003 	stmia.w	r2, {r0, r1}
 800fe0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800fe10:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fe12:	4620      	mov	r0, r4
 800fe14:	f000 fbeb 	bl	80105ee <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Location);
 800fe18:	4bd6      	ldr	r3, [pc, #856]	; (8010174 <initializeEmbeddedCli+0x6b0>)
 800fe1a:	681c      	ldr	r4, [r3, #0]
 800fe1c:	466a      	mov	r2, sp
 800fe1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800fe22:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fe26:	e882 0003 	stmia.w	r2, {r0, r1}
 800fe2a:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 800fe2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fe30:	4620      	mov	r0, r4
 800fe32:	f000 fbdc 	bl	80105ee <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_name);
 800fe36:	4bcf      	ldr	r3, [pc, #828]	; (8010174 <initializeEmbeddedCli+0x6b0>)
 800fe38:	681c      	ldr	r4, [r3, #0]
 800fe3a:	466a      	mov	r2, sp
 800fe3c:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 800fe40:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fe44:	e882 0003 	stmia.w	r2, {r0, r1}
 800fe48:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800fe4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fe4e:	4620      	mov	r0, r4
 800fe50:	f000 fbcd 	bl	80105ee <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_group);
 800fe54:	4bc7      	ldr	r3, [pc, #796]	; (8010174 <initializeEmbeddedCli+0x6b0>)
 800fe56:	681c      	ldr	r4, [r3, #0]
 800fe58:	466a      	mov	r2, sp
 800fe5a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800fe5e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fe62:	e882 0003 	stmia.w	r2, {r0, r1}
 800fe66:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800fe6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fe6c:	4620      	mov	r0, r4
 800fe6e:	f000 fbbe 	bl	80105ee <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_ID);
 800fe72:	4bc0      	ldr	r3, [pc, #768]	; (8010174 <initializeEmbeddedCli+0x6b0>)
 800fe74:	681c      	ldr	r4, [r3, #0]
 800fe76:	466a      	mov	r2, sp
 800fe78:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 800fe7c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fe80:	e882 0003 	stmia.w	r2, {r0, r1}
 800fe84:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800fe88:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fe8a:	4620      	mov	r0, r4
 800fe8c:	f000 fbaf 	bl	80105ee <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Location);
 800fe90:	4bb8      	ldr	r3, [pc, #736]	; (8010174 <initializeEmbeddedCli+0x6b0>)
 800fe92:	681c      	ldr	r4, [r3, #0]
 800fe94:	466a      	mov	r2, sp
 800fe96:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800fe9a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fe9e:	e882 0003 	stmia.w	r2, {r0, r1}
 800fea2:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800fea6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fea8:	4620      	mov	r0, r4
 800feaa:	f000 fba0 	bl	80105ee <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_name);
 800feae:	4bb1      	ldr	r3, [pc, #708]	; (8010174 <initializeEmbeddedCli+0x6b0>)
 800feb0:	681c      	ldr	r4, [r3, #0]
 800feb2:	466a      	mov	r2, sp
 800feb4:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800feb8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800febc:	e882 0003 	stmia.w	r2, {r0, r1}
 800fec0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800fec4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fec6:	4620      	mov	r0, r4
 800fec8:	f000 fb91 	bl	80105ee <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_group);
 800fecc:	4ba9      	ldr	r3, [pc, #676]	; (8010174 <initializeEmbeddedCli+0x6b0>)
 800fece:	681c      	ldr	r4, [r3, #0]
 800fed0:	466a      	mov	r2, sp
 800fed2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800fed6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800feda:	e882 0003 	stmia.w	r2, {r0, r1}
 800fede:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800fee2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fee4:	4620      	mov	r0, r4
 800fee6:	f000 fb82 	bl	80105ee <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Date);
 800feea:	4ba2      	ldr	r3, [pc, #648]	; (8010174 <initializeEmbeddedCli+0x6b0>)
 800feec:	681c      	ldr	r4, [r3, #0]
 800feee:	466a      	mov	r2, sp
 800fef0:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800fef4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fef8:	e882 0003 	stmia.w	r2, {r0, r1}
 800fefc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800ff00:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ff02:	4620      	mov	r0, r4
 800ff04:	f000 fb73 	bl	80105ee <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Time);
 800ff08:	4b9a      	ldr	r3, [pc, #616]	; (8010174 <initializeEmbeddedCli+0x6b0>)
 800ff0a:	681c      	ldr	r4, [r3, #0]
 800ff0c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800ff10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ff14:	466d      	mov	r5, sp
 800ff16:	f103 020c 	add.w	r2, r3, #12
 800ff1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ff1e:	e885 0003 	stmia.w	r5, {r0, r1}
 800ff22:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ff24:	4620      	mov	r0, r4
 800ff26:	f000 fb62 	bl	80105ee <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Date);
 800ff2a:	4b92      	ldr	r3, [pc, #584]	; (8010174 <initializeEmbeddedCli+0x6b0>)
 800ff2c:	681c      	ldr	r4, [r3, #0]
 800ff2e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800ff32:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800ff36:	466d      	mov	r5, sp
 800ff38:	f103 020c 	add.w	r2, r3, #12
 800ff3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ff40:	e885 0003 	stmia.w	r5, {r0, r1}
 800ff44:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ff46:	4620      	mov	r0, r4
 800ff48:	f000 fb51 	bl	80105ee <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Time);
 800ff4c:	4b89      	ldr	r3, [pc, #548]	; (8010174 <initializeEmbeddedCli+0x6b0>)
 800ff4e:	681c      	ldr	r4, [r3, #0]
 800ff50:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800ff54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ff58:	466d      	mov	r5, sp
 800ff5a:	f103 020c 	add.w	r2, r3, #12
 800ff5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ff62:	e885 0003 	stmia.w	r5, {r0, r1}
 800ff66:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ff68:	4620      	mov	r0, r4
 800ff6a:	f000 fb40 	bl	80105ee <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Interval);
 800ff6e:	4b81      	ldr	r3, [pc, #516]	; (8010174 <initializeEmbeddedCli+0x6b0>)
 800ff70:	681c      	ldr	r4, [r3, #0]
 800ff72:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800ff76:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800ff7a:	466d      	mov	r5, sp
 800ff7c:	f103 020c 	add.w	r2, r3, #12
 800ff80:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ff84:	e885 0003 	stmia.w	r5, {r0, r1}
 800ff88:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ff8a:	4620      	mov	r0, r4
 800ff8c:	f000 fb2f 	bl	80105ee <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Interval);
 800ff90:	4b78      	ldr	r3, [pc, #480]	; (8010174 <initializeEmbeddedCli+0x6b0>)
 800ff92:	681c      	ldr	r4, [r3, #0]
 800ff94:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800ff98:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800ff9c:	466d      	mov	r5, sp
 800ff9e:	f103 020c 	add.w	r2, r3, #12
 800ffa2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ffa6:	e885 0003 	stmia.w	r5, {r0, r1}
 800ffaa:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ffac:	4620      	mov	r0, r4
 800ffae:	f000 fb1e 	bl	80105ee <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Filename);
 800ffb2:	4b70      	ldr	r3, [pc, #448]	; (8010174 <initializeEmbeddedCli+0x6b0>)
 800ffb4:	681c      	ldr	r4, [r3, #0]
 800ffb6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800ffba:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800ffbe:	466d      	mov	r5, sp
 800ffc0:	f103 020c 	add.w	r2, r3, #12
 800ffc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ffc8:	e885 0003 	stmia.w	r5, {r0, r1}
 800ffcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ffce:	4620      	mov	r0, r4
 800ffd0:	f000 fb0d 	bl	80105ee <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Filename);
 800ffd4:	4b67      	ldr	r3, [pc, #412]	; (8010174 <initializeEmbeddedCli+0x6b0>)
 800ffd6:	681c      	ldr	r4, [r3, #0]
 800ffd8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800ffdc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800ffe0:	466d      	mov	r5, sp
 800ffe2:	f103 020c 	add.w	r2, r3, #12
 800ffe6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ffea:	e885 0003 	stmia.w	r5, {r0, r1}
 800ffee:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fff0:	4620      	mov	r0, r4
 800fff2:	f000 fafc 	bl	80105ee <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Fileformat);
 800fff6:	4b5f      	ldr	r3, [pc, #380]	; (8010174 <initializeEmbeddedCli+0x6b0>)
 800fff8:	681c      	ldr	r4, [r3, #0]
 800fffa:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fffe:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8010002:	466d      	mov	r5, sp
 8010004:	f103 020c 	add.w	r2, r3, #12
 8010008:	e892 0003 	ldmia.w	r2, {r0, r1}
 801000c:	e885 0003 	stmia.w	r5, {r0, r1}
 8010010:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010012:	4620      	mov	r0, r4
 8010014:	f000 faeb 	bl	80105ee <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Fileformat);
 8010018:	4b56      	ldr	r3, [pc, #344]	; (8010174 <initializeEmbeddedCli+0x6b0>)
 801001a:	681c      	ldr	r4, [r3, #0]
 801001c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010020:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8010024:	466d      	mov	r5, sp
 8010026:	f103 020c 	add.w	r2, r3, #12
 801002a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801002e:	e885 0003 	stmia.w	r5, {r0, r1}
 8010032:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010034:	4620      	mov	r0, r4
 8010036:	f000 fada 	bl	80105ee <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Fan_Clean);
 801003a:	4b4e      	ldr	r3, [pc, #312]	; (8010174 <initializeEmbeddedCli+0x6b0>)
 801003c:	681c      	ldr	r4, [r3, #0]
 801003e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010042:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8010046:	466d      	mov	r5, sp
 8010048:	f103 020c 	add.w	r2, r3, #12
 801004c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010050:	e885 0003 	stmia.w	r5, {r0, r1}
 8010054:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010056:	4620      	mov	r0, r4
 8010058:	f000 fac9 	bl	80105ee <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Calibration);
 801005c:	4b45      	ldr	r3, [pc, #276]	; (8010174 <initializeEmbeddedCli+0x6b0>)
 801005e:	681c      	ldr	r4, [r3, #0]
 8010060:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010064:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8010068:	466d      	mov	r5, sp
 801006a:	f103 020c 	add.w	r2, r3, #12
 801006e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010072:	e885 0003 	stmia.w	r5, {r0, r1}
 8010076:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010078:	4620      	mov	r0, r4
 801007a:	f000 fab8 	bl	80105ee <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Systemreset);
 801007e:	4b3d      	ldr	r3, [pc, #244]	; (8010174 <initializeEmbeddedCli+0x6b0>)
 8010080:	681c      	ldr	r4, [r3, #0]
 8010082:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010086:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801008a:	466d      	mov	r5, sp
 801008c:	f103 020c 	add.w	r2, r3, #12
 8010090:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010094:	e885 0003 	stmia.w	r5, {r0, r1}
 8010098:	cb0e      	ldmia	r3, {r1, r2, r3}
 801009a:	4620      	mov	r0, r4
 801009c:	f000 faa7 	bl	80105ee <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Level);
 80100a0:	4b34      	ldr	r3, [pc, #208]	; (8010174 <initializeEmbeddedCli+0x6b0>)
 80100a2:	681c      	ldr	r4, [r3, #0]
 80100a4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80100a8:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80100ac:	466d      	mov	r5, sp
 80100ae:	f103 020c 	add.w	r2, r3, #12
 80100b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80100b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80100ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80100bc:	4620      	mov	r0, r4
 80100be:	f000 fa96 	bl	80105ee <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Temp_Level);
 80100c2:	4b2c      	ldr	r3, [pc, #176]	; (8010174 <initializeEmbeddedCli+0x6b0>)
 80100c4:	681c      	ldr	r4, [r3, #0]
 80100c6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80100ca:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80100ce:	466d      	mov	r5, sp
 80100d0:	f103 020c 	add.w	r2, r3, #12
 80100d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80100d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80100dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80100de:	4620      	mov	r0, r4
 80100e0:	f000 fa85 	bl	80105ee <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Humid_Level);
 80100e4:	4b23      	ldr	r3, [pc, #140]	; (8010174 <initializeEmbeddedCli+0x6b0>)
 80100e6:	681c      	ldr	r4, [r3, #0]
 80100e8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80100ec:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80100f0:	466d      	mov	r5, sp
 80100f2:	f103 020c 	add.w	r2, r3, #12
 80100f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80100fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80100fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010100:	4620      	mov	r0, r4
 8010102:	f000 fa74 	bl	80105ee <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Motion_Detection);
 8010106:	4b1b      	ldr	r3, [pc, #108]	; (8010174 <initializeEmbeddedCli+0x6b0>)
 8010108:	681c      	ldr	r4, [r3, #0]
 801010a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801010e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010112:	466d      	mov	r5, sp
 8010114:	f103 020c 	add.w	r2, r3, #12
 8010118:	e892 0003 	ldmia.w	r2, {r0, r1}
 801011c:	e885 0003 	stmia.w	r5, {r0, r1}
 8010120:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010122:	4620      	mov	r0, r4
 8010124:	f000 fa63 	bl	80105ee <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Air_Quality);
 8010128:	4b12      	ldr	r3, [pc, #72]	; (8010174 <initializeEmbeddedCli+0x6b0>)
 801012a:	681c      	ldr	r4, [r3, #0]
 801012c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010130:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010134:	466d      	mov	r5, sp
 8010136:	f103 020c 	add.w	r2, r3, #12
 801013a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801013e:	e885 0003 	stmia.w	r5, {r0, r1}
 8010142:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010144:	4620      	mov	r0, r4
 8010146:	f000 fa52 	bl	80105ee <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Battery_Voltage);
 801014a:	4b0a      	ldr	r3, [pc, #40]	; (8010174 <initializeEmbeddedCli+0x6b0>)
 801014c:	681c      	ldr	r4, [r3, #0]
 801014e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010152:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8010156:	466d      	mov	r5, sp
 8010158:	f103 020c 	add.w	r2, r3, #12
 801015c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010160:	e885 0003 	stmia.w	r5, {r0, r1}
 8010164:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010166:	4620      	mov	r0, r4
 8010168:	f000 fa41 	bl	80105ee <embeddedCliAddBinding>
	// Assign character write function
	cli->writeChar = writeCharToCli;
 801016c:	4b01      	ldr	r3, [pc, #4]	; (8010174 <initializeEmbeddedCli+0x6b0>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	e002      	b.n	8010178 <initializeEmbeddedCli+0x6b4>
 8010172:	bf00      	nop
 8010174:	20001a48 	.word	0x20001a48
 8010178:	4a06      	ldr	r2, [pc, #24]	; (8010194 <initializeEmbeddedCli+0x6d0>)
 801017a:	601a      	str	r2, [r3, #0]
	// cli->onCommand = onCommand;
	// CLI has now been initialized, set bool to true to enable interrupts.
	cliIsReady = true;
 801017c:	4b06      	ldr	r3, [pc, #24]	; (8010198 <initializeEmbeddedCli+0x6d4>)
 801017e:	2201      	movs	r2, #1
 8010180:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 8010182:	4b06      	ldr	r3, [pc, #24]	; (801019c <initializeEmbeddedCli+0x6d8>)
 8010184:	2200      	movs	r2, #0
 8010186:	701a      	strb	r2, [r3, #0]
}
 8010188:	bf00      	nop
 801018a:	f507 7716 	add.w	r7, r7, #600	; 0x258
 801018e:	46bd      	mov	sp, r7
 8010190:	bdb0      	pop	{r4, r5, r7, pc}
 8010192:	bf00      	nop
 8010194:	0800e785 	.word	0x0800e785
 8010198:	20001a55 	.word	0x20001a55
 801019c:	20001a56 	.word	0x20001a56

080101a0 <console_process>:

void console_process(void) {
 80101a0:	b580      	push	{r7, lr}
 80101a2:	af00      	add	r7, sp, #0
	embeddedCliProcess(cli);
 80101a4:	4b03      	ldr	r3, [pc, #12]	; (80101b4 <console_process+0x14>)
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	4618      	mov	r0, r3
 80101aa:	f000 f990 	bl	80104ce <embeddedCliProcess>
}
 80101ae:	bf00      	nop
 80101b0:	bd80      	pop	{r7, pc}
 80101b2:	bf00      	nop
 80101b4:	20001a48 	.word	0x20001a48

080101b8 <console_uart_deinit>:



void console_uart_deinit()
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 80101bc:	4803      	ldr	r0, [pc, #12]	; (80101cc <console_uart_deinit+0x14>)
 80101be:	f7fb f82e 	bl	800b21e <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart1);
 80101c2:	4802      	ldr	r0, [pc, #8]	; (80101cc <console_uart_deinit+0x14>)
 80101c4:	f7f2 ff6a 	bl	800309c <HAL_UART_MspDeInit>
}
 80101c8:	bf00      	nop
 80101ca:	bd80      	pop	{r7, pc}
 80101cc:	20001998 	.word	0x20001998

080101d0 <console_uart_init>:
void console_uart_init()
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 80101d4:	4815      	ldr	r0, [pc, #84]	; (801022c <console_uart_init+0x5c>)
 80101d6:	f7fb f822 	bl	800b21e <HAL_UART_DeInit>
	  huart1.Instance = USART1;
 80101da:	4b14      	ldr	r3, [pc, #80]	; (801022c <console_uart_init+0x5c>)
 80101dc:	4a14      	ldr	r2, [pc, #80]	; (8010230 <console_uart_init+0x60>)
 80101de:	601a      	str	r2, [r3, #0]
	  huart1.Init.BaudRate = 115200;
 80101e0:	4b12      	ldr	r3, [pc, #72]	; (801022c <console_uart_init+0x5c>)
 80101e2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80101e6:	605a      	str	r2, [r3, #4]
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80101e8:	4b10      	ldr	r3, [pc, #64]	; (801022c <console_uart_init+0x5c>)
 80101ea:	2200      	movs	r2, #0
 80101ec:	609a      	str	r2, [r3, #8]
	  huart1.Init.StopBits = UART_STOPBITS_1;
 80101ee:	4b0f      	ldr	r3, [pc, #60]	; (801022c <console_uart_init+0x5c>)
 80101f0:	2200      	movs	r2, #0
 80101f2:	60da      	str	r2, [r3, #12]
	  huart1.Init.Parity = UART_PARITY_NONE;
 80101f4:	4b0d      	ldr	r3, [pc, #52]	; (801022c <console_uart_init+0x5c>)
 80101f6:	2200      	movs	r2, #0
 80101f8:	611a      	str	r2, [r3, #16]
	  huart1.Init.Mode = UART_MODE_TX_RX;
 80101fa:	4b0c      	ldr	r3, [pc, #48]	; (801022c <console_uart_init+0x5c>)
 80101fc:	220c      	movs	r2, #12
 80101fe:	615a      	str	r2, [r3, #20]
	  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010200:	4b0a      	ldr	r3, [pc, #40]	; (801022c <console_uart_init+0x5c>)
 8010202:	2200      	movs	r2, #0
 8010204:	619a      	str	r2, [r3, #24]
	  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8010206:	4b09      	ldr	r3, [pc, #36]	; (801022c <console_uart_init+0x5c>)
 8010208:	2200      	movs	r2, #0
 801020a:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart1) != HAL_OK)
 801020c:	4807      	ldr	r0, [pc, #28]	; (801022c <console_uart_init+0x5c>)
 801020e:	f7fa ffb9 	bl	800b184 <HAL_UART_Init>
 8010212:	4603      	mov	r3, r0
 8010214:	2b00      	cmp	r3, #0
 8010216:	d001      	beq.n	801021c <console_uart_init+0x4c>
	  {
	    Error_Handler();
 8010218:	f7f2 fc20 	bl	8002a5c <Error_Handler>
	  }
		HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer, UART_RX_BUFF_SIZE);
 801021c:	2201      	movs	r2, #1
 801021e:	4905      	ldr	r1, [pc, #20]	; (8010234 <console_uart_init+0x64>)
 8010220:	4802      	ldr	r0, [pc, #8]	; (801022c <console_uart_init+0x5c>)
 8010222:	f7fb f8bd 	bl	800b3a0 <HAL_UART_Receive_IT>
}
 8010226:	bf00      	nop
 8010228:	bd80      	pop	{r7, pc}
 801022a:	bf00      	nop
 801022c:	20001998 	.word	0x20001998
 8010230:	40011000 	.word	0x40011000
 8010234:	20001a54 	.word	0x20001a54

08010238 <console_init>:

void console_init(void) {
 8010238:	b580      	push	{r7, lr}
 801023a:	af00      	add	r7, sp, #0
	console_uart_init();
 801023c:	f7ff ffc8 	bl	80101d0 <console_uart_init>
	initializeEmbeddedCli();
 8010240:	f7ff fc40 	bl	800fac4 <initializeEmbeddedCli>
	HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer, UART_RX_BUFF_SIZE);
 8010244:	2201      	movs	r2, #1
 8010246:	4903      	ldr	r1, [pc, #12]	; (8010254 <console_init+0x1c>)
 8010248:	4803      	ldr	r0, [pc, #12]	; (8010258 <console_init+0x20>)
 801024a:	f7fb f8a9 	bl	800b3a0 <HAL_UART_Receive_IT>
}
 801024e:	bf00      	nop
 8010250:	bd80      	pop	{r7, pc}
 8010252:	bf00      	nop
 8010254:	20001a54 	.word	0x20001a54
 8010258:	20001998 	.word	0x20001998

0801025c <embeddedCliDefaultConfig>:
 * @param pos - token position (counted from 1)
 * @return index of first char of specified token
 */
static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos);

EmbeddedCliConfig *embeddedCliDefaultConfig(void) {
 801025c:	b480      	push	{r7}
 801025e:	af00      	add	r7, sp, #0
    defaultConfig.rxBufferSize = 64;
 8010260:	4b0e      	ldr	r3, [pc, #56]	; (801029c <embeddedCliDefaultConfig+0x40>)
 8010262:	2240      	movs	r2, #64	; 0x40
 8010264:	809a      	strh	r2, [r3, #4]
    defaultConfig.cmdBufferSize = 64;
 8010266:	4b0d      	ldr	r3, [pc, #52]	; (801029c <embeddedCliDefaultConfig+0x40>)
 8010268:	2240      	movs	r2, #64	; 0x40
 801026a:	80da      	strh	r2, [r3, #6]
    defaultConfig.historyBufferSize = 128;
 801026c:	4b0b      	ldr	r3, [pc, #44]	; (801029c <embeddedCliDefaultConfig+0x40>)
 801026e:	2280      	movs	r2, #128	; 0x80
 8010270:	811a      	strh	r2, [r3, #8]
    defaultConfig.cliBuffer = NULL;
 8010272:	4b0a      	ldr	r3, [pc, #40]	; (801029c <embeddedCliDefaultConfig+0x40>)
 8010274:	2200      	movs	r2, #0
 8010276:	60da      	str	r2, [r3, #12]
    defaultConfig.cliBufferSize = 0;
 8010278:	4b08      	ldr	r3, [pc, #32]	; (801029c <embeddedCliDefaultConfig+0x40>)
 801027a:	2200      	movs	r2, #0
 801027c:	821a      	strh	r2, [r3, #16]
    defaultConfig.maxBindingCount = 50;
 801027e:	4b07      	ldr	r3, [pc, #28]	; (801029c <embeddedCliDefaultConfig+0x40>)
 8010280:	2232      	movs	r2, #50	; 0x32
 8010282:	815a      	strh	r2, [r3, #10]
    defaultConfig.enableAutoComplete = true;
 8010284:	4b05      	ldr	r3, [pc, #20]	; (801029c <embeddedCliDefaultConfig+0x40>)
 8010286:	2201      	movs	r2, #1
 8010288:	749a      	strb	r2, [r3, #18]
    defaultConfig.invitation = "> ";
 801028a:	4b04      	ldr	r3, [pc, #16]	; (801029c <embeddedCliDefaultConfig+0x40>)
 801028c:	4a04      	ldr	r2, [pc, #16]	; (80102a0 <embeddedCliDefaultConfig+0x44>)
 801028e:	601a      	str	r2, [r3, #0]
    return &defaultConfig;
 8010290:	4b02      	ldr	r3, [pc, #8]	; (801029c <embeddedCliDefaultConfig+0x40>)
}
 8010292:	4618      	mov	r0, r3
 8010294:	46bd      	mov	sp, r7
 8010296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029a:	4770      	bx	lr
 801029c:	20001a5c 	.word	0x20001a5c
 80102a0:	08020af4 	.word	0x08020af4

080102a4 <embeddedCliRequiredSize>:

uint16_t embeddedCliRequiredSize(EmbeddedCliConfig *config) {
 80102a4:	b480      	push	{r7}
 80102a6:	b085      	sub	sp, #20
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	895b      	ldrh	r3, [r3, #10]
 80102b0:	2201      	movs	r2, #1
 80102b2:	4413      	add	r3, r2
 80102b4:	81fb      	strh	r3, [r7, #14]
    return (uint16_t) (CLI_UINT_SIZE * (
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli)) +
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl)) +
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	889b      	ldrh	r3, [r3, #4]
 80102ba:	3303      	adds	r3, #3
 80102bc:	089a      	lsrs	r2, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	88db      	ldrh	r3, [r3, #6]
 80102c2:	3303      	adds	r3, #3
 80102c4:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 80102c6:	441a      	add	r2, r3
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	891b      	ldrh	r3, [r3, #8]
 80102cc:	3303      	adds	r3, #3
 80102ce:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 80102d0:	18d1      	adds	r1, r2, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 80102d2:	89fa      	ldrh	r2, [r7, #14]
 80102d4:	4613      	mov	r3, r2
 80102d6:	009b      	lsls	r3, r3, #2
 80102d8:	4413      	add	r3, r2
 80102da:	009b      	lsls	r3, r3, #2
 80102dc:	3303      	adds	r3, #3
 80102de:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 80102e0:	18ca      	adds	r2, r1, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(uint8_t))));
 80102e2:	89fb      	ldrh	r3, [r7, #14]
 80102e4:	3303      	adds	r3, #3
 80102e6:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 80102e8:	4413      	add	r3, r2
 80102ea:	3311      	adds	r3, #17
    return (uint16_t) (CLI_UINT_SIZE * (
 80102ec:	b29b      	uxth	r3, r3
 80102ee:	009b      	lsls	r3, r3, #2
 80102f0:	b29b      	uxth	r3, r3
}
 80102f2:	4618      	mov	r0, r3
 80102f4:	3714      	adds	r7, #20
 80102f6:	46bd      	mov	sp, r7
 80102f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fc:	4770      	bx	lr

080102fe <embeddedCliNew>:

EmbeddedCli *embeddedCliNew(EmbeddedCliConfig *config) {
 80102fe:	b580      	push	{r7, lr}
 8010300:	b088      	sub	sp, #32
 8010302:	af00      	add	r7, sp, #0
 8010304:	6078      	str	r0, [r7, #4]
    EmbeddedCli *cli = NULL;
 8010306:	2300      	movs	r3, #0
 8010308:	61bb      	str	r3, [r7, #24]

    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	895b      	ldrh	r3, [r3, #10]
 801030e:	2201      	movs	r2, #1
 8010310:	4413      	add	r3, r2
 8010312:	82fb      	strh	r3, [r7, #22]

    size_t totalSize = embeddedCliRequiredSize(config);
 8010314:	6878      	ldr	r0, [r7, #4]
 8010316:	f7ff ffc5 	bl	80102a4 <embeddedCliRequiredSize>
 801031a:	4603      	mov	r3, r0
 801031c:	613b      	str	r3, [r7, #16]

    bool allocated = false;
 801031e:	2300      	movs	r3, #0
 8010320:	77fb      	strb	r3, [r7, #31]
    if (config->cliBuffer == NULL) {
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	68db      	ldr	r3, [r3, #12]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d10f      	bne.n	801034a <embeddedCliNew+0x4c>
        config->cliBuffer = (CLI_UINT *) malloc(totalSize); // malloc guarantees alignment.
 801032a:	6938      	ldr	r0, [r7, #16]
 801032c:	f00a fdb4 	bl	801ae98 <malloc>
 8010330:	4603      	mov	r3, r0
 8010332:	461a      	mov	r2, r3
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	60da      	str	r2, [r3, #12]
        if (config->cliBuffer == NULL)
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	68db      	ldr	r3, [r3, #12]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d101      	bne.n	8010344 <embeddedCliNew+0x46>
            return NULL;
 8010340:	2300      	movs	r3, #0
 8010342:	e092      	b.n	801046a <embeddedCliNew+0x16c>
        allocated = true;
 8010344:	2301      	movs	r3, #1
 8010346:	77fb      	strb	r3, [r7, #31]
 8010348:	e007      	b.n	801035a <embeddedCliNew+0x5c>
    } else if (config->cliBufferSize < totalSize) {
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	8a1b      	ldrh	r3, [r3, #16]
 801034e:	461a      	mov	r2, r3
 8010350:	693b      	ldr	r3, [r7, #16]
 8010352:	4293      	cmp	r3, r2
 8010354:	d901      	bls.n	801035a <embeddedCliNew+0x5c>
        return NULL;
 8010356:	2300      	movs	r3, #0
 8010358:	e087      	b.n	801046a <embeddedCliNew+0x16c>
    }

    CLI_UINT *buf = config->cliBuffer;
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	68db      	ldr	r3, [r3, #12]
 801035e:	60fb      	str	r3, [r7, #12]

    memset(buf, 0, totalSize);
 8010360:	693a      	ldr	r2, [r7, #16]
 8010362:	2100      	movs	r1, #0
 8010364:	68f8      	ldr	r0, [r7, #12]
 8010366:	f00a fdcf 	bl	801af08 <memset>

    cli = (EmbeddedCli *) buf;
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	61bb      	str	r3, [r7, #24]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli));
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	3310      	adds	r3, #16
 8010372:	60fb      	str	r3, [r7, #12]

    cli->_impl = (EmbeddedCliImpl *) buf;
 8010374:	69bb      	ldr	r3, [r7, #24]
 8010376:	68fa      	ldr	r2, [r7, #12]
 8010378:	60da      	str	r2, [r3, #12]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl));
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	3334      	adds	r3, #52	; 0x34
 801037e:	60fb      	str	r3, [r7, #12]

    PREPARE_IMPL(cli);
 8010380:	69bb      	ldr	r3, [r7, #24]
 8010382:	68db      	ldr	r3, [r3, #12]
 8010384:	60bb      	str	r3, [r7, #8]
    impl->rxBuffer.buf = (char *) buf;
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	68fa      	ldr	r2, [r7, #12]
 801038a:	611a      	str	r2, [r3, #16]
    buf += BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char));
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	889b      	ldrh	r3, [r3, #4]
 8010390:	3303      	adds	r3, #3
 8010392:	f023 0303 	bic.w	r3, r3, #3
 8010396:	68fa      	ldr	r2, [r7, #12]
 8010398:	4413      	add	r3, r2
 801039a:	60fb      	str	r3, [r7, #12]

    impl->cmdBuffer = (char *) buf;
 801039c:	68bb      	ldr	r3, [r7, #8]
 801039e:	68fa      	ldr	r2, [r7, #12]
 80103a0:	61da      	str	r2, [r3, #28]
    buf += BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char));
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	88db      	ldrh	r3, [r3, #6]
 80103a6:	3303      	adds	r3, #3
 80103a8:	f023 0303 	bic.w	r3, r3, #3
 80103ac:	68fa      	ldr	r2, [r7, #12]
 80103ae:	4413      	add	r3, r2
 80103b0:	60fb      	str	r3, [r7, #12]

    impl->bindings = (CliCommandBinding *) buf;
 80103b2:	68bb      	ldr	r3, [r7, #8]
 80103b4:	68fa      	ldr	r2, [r7, #12]
 80103b6:	625a      	str	r2, [r3, #36]	; 0x24
    buf += BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding));
 80103b8:	8afa      	ldrh	r2, [r7, #22]
 80103ba:	4613      	mov	r3, r2
 80103bc:	009b      	lsls	r3, r3, #2
 80103be:	4413      	add	r3, r2
 80103c0:	009b      	lsls	r3, r3, #2
 80103c2:	3303      	adds	r3, #3
 80103c4:	f023 0303 	bic.w	r3, r3, #3
 80103c8:	68fa      	ldr	r2, [r7, #12]
 80103ca:	4413      	add	r3, r2
 80103cc:	60fb      	str	r3, [r7, #12]

    impl->bindingsFlags = (uint8_t *) buf;
 80103ce:	68bb      	ldr	r3, [r7, #8]
 80103d0:	68fa      	ldr	r2, [r7, #12]
 80103d2:	629a      	str	r2, [r3, #40]	; 0x28
    buf += BYTES_TO_CLI_UINTS(bindingCount);
 80103d4:	8afb      	ldrh	r3, [r7, #22]
 80103d6:	3303      	adds	r3, #3
 80103d8:	f023 0303 	bic.w	r3, r3, #3
 80103dc:	68fa      	ldr	r2, [r7, #12]
 80103de:	4413      	add	r3, r2
 80103e0:	60fb      	str	r3, [r7, #12]

    impl->history.buf = (char *) buf;
 80103e2:	68bb      	ldr	r3, [r7, #8]
 80103e4:	68fa      	ldr	r2, [r7, #12]
 80103e6:	605a      	str	r2, [r3, #4]
    impl->history.bufferSize = config->historyBufferSize;
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	891a      	ldrh	r2, [r3, #8]
 80103ec:	68bb      	ldr	r3, [r7, #8]
 80103ee:	811a      	strh	r2, [r3, #8]

    if (allocated)
 80103f0:	7ffb      	ldrb	r3, [r7, #31]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d008      	beq.n	8010408 <embeddedCliNew+0x10a>
        SET_FLAG(impl->flags, CLI_FLAG_ALLOCATED);
 80103f6:	68bb      	ldr	r3, [r7, #8]
 80103f8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80103fc:	f043 0304 	orr.w	r3, r3, #4
 8010400:	b2da      	uxtb	r2, r3
 8010402:	68bb      	ldr	r3, [r7, #8]
 8010404:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

    if (config->enableAutoComplete)
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	7c9b      	ldrb	r3, [r3, #18]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d008      	beq.n	8010422 <embeddedCliNew+0x124>
        SET_FLAG(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED);
 8010410:	68bb      	ldr	r3, [r7, #8]
 8010412:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010416:	f043 0320 	orr.w	r3, r3, #32
 801041a:	b2da      	uxtb	r2, r3
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

    impl->rxBuffer.size = config->rxBufferSize;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	889a      	ldrh	r2, [r3, #4]
 8010426:	68bb      	ldr	r3, [r7, #8]
 8010428:	831a      	strh	r2, [r3, #24]
    impl->rxBuffer.front = 0;
 801042a:	68bb      	ldr	r3, [r7, #8]
 801042c:	2200      	movs	r2, #0
 801042e:	829a      	strh	r2, [r3, #20]
    impl->rxBuffer.back = 0;
 8010430:	68bb      	ldr	r3, [r7, #8]
 8010432:	2200      	movs	r2, #0
 8010434:	82da      	strh	r2, [r3, #22]
    impl->cmdMaxSize = config->cmdBufferSize;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	88da      	ldrh	r2, [r3, #6]
 801043a:	68bb      	ldr	r3, [r7, #8]
 801043c:	845a      	strh	r2, [r3, #34]	; 0x22
    impl->bindingsCount = 0;
 801043e:	68bb      	ldr	r3, [r7, #8]
 8010440:	2200      	movs	r2, #0
 8010442:	859a      	strh	r2, [r3, #44]	; 0x2c
    impl->maxBindingsCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	895b      	ldrh	r3, [r3, #10]
 8010448:	2201      	movs	r2, #1
 801044a:	4413      	add	r3, r2
 801044c:	b29a      	uxth	r2, r3
 801044e:	68bb      	ldr	r3, [r7, #8]
 8010450:	85da      	strh	r2, [r3, #46]	; 0x2e
    impl->lastChar = '\0';
 8010452:	68bb      	ldr	r3, [r7, #8]
 8010454:	2200      	movs	r2, #0
 8010456:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    impl->invitation = config->invitation;
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	681a      	ldr	r2, [r3, #0]
 801045e:	68bb      	ldr	r3, [r7, #8]
 8010460:	601a      	str	r2, [r3, #0]

    initInternalBindings(cli);
 8010462:	69b8      	ldr	r0, [r7, #24]
 8010464:	f000 fc5e 	bl	8010d24 <initInternalBindings>

    return cli;
 8010468:	69bb      	ldr	r3, [r7, #24]
}
 801046a:	4618      	mov	r0, r3
 801046c:	3720      	adds	r7, #32
 801046e:	46bd      	mov	sp, r7
 8010470:	bd80      	pop	{r7, pc}

08010472 <embeddedCliNewDefault>:

EmbeddedCli *embeddedCliNewDefault(void) {
 8010472:	b580      	push	{r7, lr}
 8010474:	af00      	add	r7, sp, #0
    return embeddedCliNew(embeddedCliDefaultConfig());
 8010476:	f7ff fef1 	bl	801025c <embeddedCliDefaultConfig>
 801047a:	4603      	mov	r3, r0
 801047c:	4618      	mov	r0, r3
 801047e:	f7ff ff3e 	bl	80102fe <embeddedCliNew>
 8010482:	4603      	mov	r3, r0
}
 8010484:	4618      	mov	r0, r3
 8010486:	bd80      	pop	{r7, pc}

08010488 <embeddedCliReceiveChar>:

void embeddedCliReceiveChar(EmbeddedCli *cli, char c) {
 8010488:	b580      	push	{r7, lr}
 801048a:	b084      	sub	sp, #16
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
 8010490:	460b      	mov	r3, r1
 8010492:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	68db      	ldr	r3, [r3, #12]
 8010498:	60fb      	str	r3, [r7, #12]

    if (!fifoBufPush(&impl->rxBuffer, c)) {
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	3310      	adds	r3, #16
 801049e:	78fa      	ldrb	r2, [r7, #3]
 80104a0:	4611      	mov	r1, r2
 80104a2:	4618      	mov	r0, r3
 80104a4:	f000 ffe1 	bl	801146a <fifoBufPush>
 80104a8:	4603      	mov	r3, r0
 80104aa:	f083 0301 	eor.w	r3, r3, #1
 80104ae:	b2db      	uxtb	r3, r3
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d008      	beq.n	80104c6 <embeddedCliReceiveChar+0x3e>
        SET_FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80104ba:	f043 0301 	orr.w	r3, r3, #1
 80104be:	b2da      	uxtb	r2, r3
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    }
}
 80104c6:	bf00      	nop
 80104c8:	3710      	adds	r7, #16
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bd80      	pop	{r7, pc}

080104ce <embeddedCliProcess>:

void embeddedCliProcess(EmbeddedCli *cli) {
 80104ce:	b580      	push	{r7, lr}
 80104d0:	b084      	sub	sp, #16
 80104d2:	af00      	add	r7, sp, #0
 80104d4:	6078      	str	r0, [r7, #4]
    if (cli->writeChar == NULL)
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	f000 8083 	beq.w	80105e6 <embeddedCliProcess+0x118>
        return;

    PREPARE_IMPL(cli);
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	68db      	ldr	r3, [r3, #12]
 80104e4:	60fb      	str	r3, [r7, #12]


    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_INIT_COMPLETE)) {
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80104ec:	f003 0302 	and.w	r3, r3, #2
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d155      	bne.n	80105a0 <embeddedCliProcess+0xd2>
        SET_FLAG(impl->flags, CLI_FLAG_INIT_COMPLETE);
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80104fa:	f043 0302 	orr.w	r3, r3, #2
 80104fe:	b2da      	uxtb	r2, r3
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        writeToOutput(cli, impl->invitation);
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	4619      	mov	r1, r3
 801050c:	6878      	ldr	r0, [r7, #4]
 801050e:	f000 ff0b 	bl	8011328 <writeToOutput>
    }

    while (fifoBufAvailable(&impl->rxBuffer)) {
 8010512:	e045      	b.n	80105a0 <embeddedCliProcess+0xd2>
        char c = fifoBufPop(&impl->rxBuffer);
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	3310      	adds	r3, #16
 8010518:	4618      	mov	r0, r3
 801051a:	f000 ff7e 	bl	801141a <fifoBufPop>
 801051e:	4603      	mov	r3, r0
 8010520:	72fb      	strb	r3, [r7, #11]

        if (IS_FLAG_SET(impl->flags, CLI_FLAG_ESCAPE_MODE)) {
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010528:	f003 0308 	and.w	r3, r3, #8
 801052c:	2b00      	cmp	r3, #0
 801052e:	d005      	beq.n	801053c <embeddedCliProcess+0x6e>
            onEscapedInput(cli, c);
 8010530:	7afb      	ldrb	r3, [r7, #11]
 8010532:	4619      	mov	r1, r3
 8010534:	6878      	ldr	r0, [r7, #4]
 8010536:	f000 fa17 	bl	8010968 <onEscapedInput>
 801053a:	e02a      	b.n	8010592 <embeddedCliProcess+0xc4>
        } else if (impl->lastChar == 0x1B && c == '[') {
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8010542:	2b1b      	cmp	r3, #27
 8010544:	d10c      	bne.n	8010560 <embeddedCliProcess+0x92>
 8010546:	7afb      	ldrb	r3, [r7, #11]
 8010548:	2b5b      	cmp	r3, #91	; 0x5b
 801054a:	d109      	bne.n	8010560 <embeddedCliProcess+0x92>
            //enter escape mode
            SET_FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010552:	f043 0308 	orr.w	r3, r3, #8
 8010556:	b2da      	uxtb	r2, r3
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 801055e:	e018      	b.n	8010592 <embeddedCliProcess+0xc4>
        } else if (isControlChar(c)) {
 8010560:	7afb      	ldrb	r3, [r7, #11]
 8010562:	4618      	mov	r0, r3
 8010564:	f000 ff01 	bl	801136a <isControlChar>
 8010568:	4603      	mov	r3, r0
 801056a:	2b00      	cmp	r3, #0
 801056c:	d005      	beq.n	801057a <embeddedCliProcess+0xac>
            onControlInput(cli, c);
 801056e:	7afb      	ldrb	r3, [r7, #11]
 8010570:	4619      	mov	r1, r3
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	f000 fa54 	bl	8010a20 <onControlInput>
 8010578:	e00b      	b.n	8010592 <embeddedCliProcess+0xc4>
        } else if (isDisplayableChar(c)) {
 801057a:	7afb      	ldrb	r3, [r7, #11]
 801057c:	4618      	mov	r0, r3
 801057e:	f000 ff14 	bl	80113aa <isDisplayableChar>
 8010582:	4603      	mov	r3, r0
 8010584:	2b00      	cmp	r3, #0
 8010586:	d004      	beq.n	8010592 <embeddedCliProcess+0xc4>
            onCharInput(cli, c);
 8010588:	7afb      	ldrb	r3, [r7, #11]
 801058a:	4619      	mov	r1, r3
 801058c:	6878      	ldr	r0, [r7, #4]
 801058e:	f000 fa17 	bl	80109c0 <onCharInput>
        }

        printLiveAutocompletion(cli);
 8010592:	6878      	ldr	r0, [r7, #4]
 8010594:	f000 fdb1 	bl	80110fa <printLiveAutocompletion>

        impl->lastChar = c;
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	7afa      	ldrb	r2, [r7, #11]
 801059c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    while (fifoBufAvailable(&impl->rxBuffer)) {
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	3310      	adds	r3, #16
 80105a4:	4618      	mov	r0, r3
 80105a6:	f000 ff17 	bl	80113d8 <fifoBufAvailable>
 80105aa:	4603      	mov	r3, r0
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d1b1      	bne.n	8010514 <embeddedCliProcess+0x46>
    }

    // discard unfinished command if overflow happened
    if (IS_FLAG_SET(impl->flags, CLI_FLAG_OVERFLOW)) {
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80105b6:	f003 0301 	and.w	r3, r3, #1
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d014      	beq.n	80105e8 <embeddedCliProcess+0x11a>
        impl->cmdSize = 0;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	2200      	movs	r2, #0
 80105c2:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	69db      	ldr	r3, [r3, #28]
 80105c8:	68fa      	ldr	r2, [r7, #12]
 80105ca:	8c12      	ldrh	r2, [r2, #32]
 80105cc:	4413      	add	r3, r2
 80105ce:	2200      	movs	r2, #0
 80105d0:	701a      	strb	r2, [r3, #0]
        UNSET_U8FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80105d8:	f023 0301 	bic.w	r3, r3, #1
 80105dc:	b2da      	uxtb	r2, r3
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 80105e4:	e000      	b.n	80105e8 <embeddedCliProcess+0x11a>
        return;
 80105e6:	bf00      	nop
    }
}
 80105e8:	3710      	adds	r7, #16
 80105ea:	46bd      	mov	sp, r7
 80105ec:	bd80      	pop	{r7, pc}

080105ee <embeddedCliAddBinding>:

bool embeddedCliAddBinding(EmbeddedCli *cli, CliCommandBinding binding) {
 80105ee:	b084      	sub	sp, #16
 80105f0:	b4b0      	push	{r4, r5, r7}
 80105f2:	b085      	sub	sp, #20
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
 80105f8:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80105fc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    PREPARE_IMPL(cli);
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	68db      	ldr	r3, [r3, #12]
 8010604:	60fb      	str	r3, [r7, #12]
    if (impl->bindingsCount == impl->maxBindingsCount)
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801060e:	429a      	cmp	r2, r3
 8010610:	d101      	bne.n	8010616 <embeddedCliAddBinding+0x28>
        return false;
 8010612:	2300      	movs	r3, #0
 8010614:	e017      	b.n	8010646 <embeddedCliAddBinding+0x58>

    impl->bindings[impl->bindingsCount] = binding;
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801061e:	4619      	mov	r1, r3
 8010620:	460b      	mov	r3, r1
 8010622:	009b      	lsls	r3, r3, #2
 8010624:	440b      	add	r3, r1
 8010626:	009b      	lsls	r3, r3, #2
 8010628:	4413      	add	r3, r2
 801062a:	461d      	mov	r5, r3
 801062c:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8010630:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010632:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010634:	6823      	ldr	r3, [r4, #0]
 8010636:	602b      	str	r3, [r5, #0]

    ++impl->bindingsCount;
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801063c:	3301      	adds	r3, #1
 801063e:	b29a      	uxth	r2, r3
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	859a      	strh	r2, [r3, #44]	; 0x2c
    return true;
 8010644:	2301      	movs	r3, #1
}
 8010646:	4618      	mov	r0, r3
 8010648:	3714      	adds	r7, #20
 801064a:	46bd      	mov	sp, r7
 801064c:	bcb0      	pop	{r4, r5, r7}
 801064e:	b004      	add	sp, #16
 8010650:	4770      	bx	lr
	...

08010654 <embeddedCliPrint>:

void embeddedCliPrint(EmbeddedCli *cli, const char *string) {
 8010654:	b580      	push	{r7, lr}
 8010656:	b084      	sub	sp, #16
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
 801065c:	6039      	str	r1, [r7, #0]
    if (cli->writeChar == NULL)
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d031      	beq.n	80106ca <embeddedCliPrint+0x76>
        return;

    PREPARE_IMPL(cli);
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	68db      	ldr	r3, [r3, #12]
 801066a:	60fb      	str	r3, [r7, #12]

    // remove chars for autocompletion and live command
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT))
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010672:	f003 0310 	and.w	r3, r3, #16
 8010676:	2b00      	cmp	r3, #0
 8010678:	d102      	bne.n	8010680 <embeddedCliPrint+0x2c>
        clearCurrentLine(cli);
 801067a:	6878      	ldr	r0, [r7, #4]
 801067c:	f000 fe22 	bl	80112c4 <clearCurrentLine>

    // print provided string
    writeToOutput(cli, string);
 8010680:	6839      	ldr	r1, [r7, #0]
 8010682:	6878      	ldr	r0, [r7, #4]
 8010684:	f000 fe50 	bl	8011328 <writeToOutput>
    writeToOutput(cli, lineBreak);
 8010688:	4b12      	ldr	r3, [pc, #72]	; (80106d4 <embeddedCliPrint+0x80>)
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	4619      	mov	r1, r3
 801068e:	6878      	ldr	r0, [r7, #4]
 8010690:	f000 fe4a 	bl	8011328 <writeToOutput>

    // print current command back to screen
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT)) {
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801069a:	f003 0310 	and.w	r3, r3, #16
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d114      	bne.n	80106cc <embeddedCliPrint+0x78>
        writeToOutput(cli, impl->invitation);
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	4619      	mov	r1, r3
 80106a8:	6878      	ldr	r0, [r7, #4]
 80106aa:	f000 fe3d 	bl	8011328 <writeToOutput>
        writeToOutput(cli, impl->cmdBuffer);
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	69db      	ldr	r3, [r3, #28]
 80106b2:	4619      	mov	r1, r3
 80106b4:	6878      	ldr	r0, [r7, #4]
 80106b6:	f000 fe37 	bl	8011328 <writeToOutput>
        impl->inputLineLength = impl->cmdSize;
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	8c1a      	ldrh	r2, [r3, #32]
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	861a      	strh	r2, [r3, #48]	; 0x30

        printLiveAutocompletion(cli);
 80106c2:	6878      	ldr	r0, [r7, #4]
 80106c4:	f000 fd19 	bl	80110fa <printLiveAutocompletion>
 80106c8:	e000      	b.n	80106cc <embeddedCliPrint+0x78>
        return;
 80106ca:	bf00      	nop
    }
}
 80106cc:	3710      	adds	r7, #16
 80106ce:	46bd      	mov	sp, r7
 80106d0:	bd80      	pop	{r7, pc}
 80106d2:	bf00      	nop
 80106d4:	20000020 	.word	0x20000020

080106d8 <embeddedCliTokenizeArgs>:
        // allocation is done in single call to malloc, so need only single free
        free(cli);
    }
}

void embeddedCliTokenizeArgs(char *args) {
 80106d8:	b580      	push	{r7, lr}
 80106da:	b088      	sub	sp, #32
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
    if (args == NULL)
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d066      	beq.n	80107b4 <embeddedCliTokenizeArgs+0xdc>
        return;

    // for now only space, but can add more later
    const char *separators = " ";
 80106e6:	4b35      	ldr	r3, [pc, #212]	; (80107bc <embeddedCliTokenizeArgs+0xe4>)
 80106e8:	60fb      	str	r3, [r7, #12]

    // indicates that arg is quoted so separators are copied as is
    bool quotesEnabled = false;
 80106ea:	2300      	movs	r3, #0
 80106ec:	77fb      	strb	r3, [r7, #31]
    // indicates that previous char was a slash, so next char is copied as is
    bool escapeActivated = false;
 80106ee:	2300      	movs	r3, #0
 80106f0:	77bb      	strb	r3, [r7, #30]
    int insertPos = 0;
 80106f2:	2300      	movs	r3, #0
 80106f4:	61bb      	str	r3, [r7, #24]

    int i = 0;
 80106f6:	2300      	movs	r3, #0
 80106f8:	617b      	str	r3, [r7, #20]
    char currentChar;
    while ((currentChar = args[i]) != '\0') {
 80106fa:	e047      	b.n	801078c <embeddedCliTokenizeArgs+0xb4>
        ++i;
 80106fc:	697b      	ldr	r3, [r7, #20]
 80106fe:	3301      	adds	r3, #1
 8010700:	617b      	str	r3, [r7, #20]

        if (escapeActivated) {
 8010702:	7fbb      	ldrb	r3, [r7, #30]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d002      	beq.n	801070e <embeddedCliTokenizeArgs+0x36>
            escapeActivated = false;
 8010708:	2300      	movs	r3, #0
 801070a:	77bb      	strb	r3, [r7, #30]
 801070c:	e029      	b.n	8010762 <embeddedCliTokenizeArgs+0x8a>
        } else if (currentChar == '\\') {
 801070e:	7cfb      	ldrb	r3, [r7, #19]
 8010710:	2b5c      	cmp	r3, #92	; 0x5c
 8010712:	d102      	bne.n	801071a <embeddedCliTokenizeArgs+0x42>
            escapeActivated = true;
 8010714:	2301      	movs	r3, #1
 8010716:	77bb      	strb	r3, [r7, #30]
            continue;
 8010718:	e038      	b.n	801078c <embeddedCliTokenizeArgs+0xb4>
        } else if (currentChar == '"') {
 801071a:	7cfb      	ldrb	r3, [r7, #19]
 801071c:	2b22      	cmp	r3, #34	; 0x22
 801071e:	d110      	bne.n	8010742 <embeddedCliTokenizeArgs+0x6a>
            quotesEnabled = !quotesEnabled;
 8010720:	7ffb      	ldrb	r3, [r7, #31]
 8010722:	2b00      	cmp	r3, #0
 8010724:	bf14      	ite	ne
 8010726:	2301      	movne	r3, #1
 8010728:	2300      	moveq	r3, #0
 801072a:	b2db      	uxtb	r3, r3
 801072c:	f083 0301 	eor.w	r3, r3, #1
 8010730:	b2db      	uxtb	r3, r3
 8010732:	77fb      	strb	r3, [r7, #31]
 8010734:	7ffb      	ldrb	r3, [r7, #31]
 8010736:	f003 0301 	and.w	r3, r3, #1
 801073a:	77fb      	strb	r3, [r7, #31]
            currentChar = '\0';
 801073c:	2300      	movs	r3, #0
 801073e:	74fb      	strb	r3, [r7, #19]
 8010740:	e00f      	b.n	8010762 <embeddedCliTokenizeArgs+0x8a>
        } else if (!quotesEnabled && strchr(separators, currentChar) != NULL) {
 8010742:	7ffb      	ldrb	r3, [r7, #31]
 8010744:	f083 0301 	eor.w	r3, r3, #1
 8010748:	b2db      	uxtb	r3, r3
 801074a:	2b00      	cmp	r3, #0
 801074c:	d009      	beq.n	8010762 <embeddedCliTokenizeArgs+0x8a>
 801074e:	7cfb      	ldrb	r3, [r7, #19]
 8010750:	4619      	mov	r1, r3
 8010752:	68f8      	ldr	r0, [r7, #12]
 8010754:	f00b fbfe 	bl	801bf54 <strchr>
 8010758:	4603      	mov	r3, r0
 801075a:	2b00      	cmp	r3, #0
 801075c:	d001      	beq.n	8010762 <embeddedCliTokenizeArgs+0x8a>
            currentChar = '\0';
 801075e:	2300      	movs	r3, #0
 8010760:	74fb      	strb	r3, [r7, #19]
        }

        // null chars are only copied once and not copied to the beginning
        if (currentChar != '\0' || (insertPos > 0 && args[insertPos - 1] != '\0')) {
 8010762:	7cfb      	ldrb	r3, [r7, #19]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d109      	bne.n	801077c <embeddedCliTokenizeArgs+0xa4>
 8010768:	69bb      	ldr	r3, [r7, #24]
 801076a:	2b00      	cmp	r3, #0
 801076c:	dd0e      	ble.n	801078c <embeddedCliTokenizeArgs+0xb4>
 801076e:	69bb      	ldr	r3, [r7, #24]
 8010770:	3b01      	subs	r3, #1
 8010772:	687a      	ldr	r2, [r7, #4]
 8010774:	4413      	add	r3, r2
 8010776:	781b      	ldrb	r3, [r3, #0]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d007      	beq.n	801078c <embeddedCliTokenizeArgs+0xb4>
            args[insertPos] = currentChar;
 801077c:	69bb      	ldr	r3, [r7, #24]
 801077e:	687a      	ldr	r2, [r7, #4]
 8010780:	4413      	add	r3, r2
 8010782:	7cfa      	ldrb	r2, [r7, #19]
 8010784:	701a      	strb	r2, [r3, #0]
            ++insertPos;
 8010786:	69bb      	ldr	r3, [r7, #24]
 8010788:	3301      	adds	r3, #1
 801078a:	61bb      	str	r3, [r7, #24]
    while ((currentChar = args[i]) != '\0') {
 801078c:	697b      	ldr	r3, [r7, #20]
 801078e:	687a      	ldr	r2, [r7, #4]
 8010790:	4413      	add	r3, r2
 8010792:	781b      	ldrb	r3, [r3, #0]
 8010794:	74fb      	strb	r3, [r7, #19]
 8010796:	7cfb      	ldrb	r3, [r7, #19]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d1af      	bne.n	80106fc <embeddedCliTokenizeArgs+0x24>
        }
    }

    // make args double null-terminated source buffer must be big enough to contain extra spaces
    args[insertPos] = '\0';
 801079c:	69bb      	ldr	r3, [r7, #24]
 801079e:	687a      	ldr	r2, [r7, #4]
 80107a0:	4413      	add	r3, r2
 80107a2:	2200      	movs	r2, #0
 80107a4:	701a      	strb	r2, [r3, #0]
    args[insertPos + 1] = '\0';
 80107a6:	69bb      	ldr	r3, [r7, #24]
 80107a8:	3301      	adds	r3, #1
 80107aa:	687a      	ldr	r2, [r7, #4]
 80107ac:	4413      	add	r3, r2
 80107ae:	2200      	movs	r2, #0
 80107b0:	701a      	strb	r2, [r3, #0]
 80107b2:	e000      	b.n	80107b6 <embeddedCliTokenizeArgs+0xde>
        return;
 80107b4:	bf00      	nop
}
 80107b6:	3720      	adds	r7, #32
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd80      	pop	{r7, pc}
 80107bc:	08020af8 	.word	0x08020af8

080107c0 <embeddedCliGetToken>:

const char *embeddedCliGetToken(const char *tokenizedStr, uint16_t pos) {
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b084      	sub	sp, #16
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
 80107c8:	460b      	mov	r3, r1
 80107ca:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 80107cc:	887b      	ldrh	r3, [r7, #2]
 80107ce:	4619      	mov	r1, r3
 80107d0:	6878      	ldr	r0, [r7, #4]
 80107d2:	f000 ff51 	bl	8011678 <getTokenPosition>
 80107d6:	4603      	mov	r3, r0
 80107d8:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 80107da:	89fb      	ldrh	r3, [r7, #14]
 80107dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80107e0:	4293      	cmp	r3, r2
 80107e2:	d003      	beq.n	80107ec <embeddedCliGetToken+0x2c>
        return &tokenizedStr[i];
 80107e4:	89fb      	ldrh	r3, [r7, #14]
 80107e6:	687a      	ldr	r2, [r7, #4]
 80107e8:	4413      	add	r3, r2
 80107ea:	e000      	b.n	80107ee <embeddedCliGetToken+0x2e>
    else
        return NULL;
 80107ec:	2300      	movs	r3, #0
}
 80107ee:	4618      	mov	r0, r3
 80107f0:	3710      	adds	r7, #16
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd80      	pop	{r7, pc}

080107f6 <embeddedCliGetTokenVariable>:

char *embeddedCliGetTokenVariable(char *tokenizedStr, uint16_t pos) {
 80107f6:	b580      	push	{r7, lr}
 80107f8:	b084      	sub	sp, #16
 80107fa:	af00      	add	r7, sp, #0
 80107fc:	6078      	str	r0, [r7, #4]
 80107fe:	460b      	mov	r3, r1
 8010800:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 8010802:	887b      	ldrh	r3, [r7, #2]
 8010804:	4619      	mov	r1, r3
 8010806:	6878      	ldr	r0, [r7, #4]
 8010808:	f000 ff36 	bl	8011678 <getTokenPosition>
 801080c:	4603      	mov	r3, r0
 801080e:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 8010810:	89fb      	ldrh	r3, [r7, #14]
 8010812:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010816:	4293      	cmp	r3, r2
 8010818:	d003      	beq.n	8010822 <embeddedCliGetTokenVariable+0x2c>
        return &tokenizedStr[i];
 801081a:	89fb      	ldrh	r3, [r7, #14]
 801081c:	687a      	ldr	r2, [r7, #4]
 801081e:	4413      	add	r3, r2
 8010820:	e000      	b.n	8010824 <embeddedCliGetTokenVariable+0x2e>
    else
        return NULL;
 8010822:	2300      	movs	r3, #0
}
 8010824:	4618      	mov	r0, r3
 8010826:	3710      	adds	r7, #16
 8010828:	46bd      	mov	sp, r7
 801082a:	bd80      	pop	{r7, pc}

0801082c <embeddedCliGetTokenCount>:
    }

    return 0;
}

uint16_t embeddedCliGetTokenCount(const char *tokenizedStr) {
 801082c:	b480      	push	{r7}
 801082e:	b085      	sub	sp, #20
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
    if (tokenizedStr == NULL || tokenizedStr[0] == '\0')
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d003      	beq.n	8010842 <embeddedCliGetTokenCount+0x16>
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	781b      	ldrb	r3, [r3, #0]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d101      	bne.n	8010846 <embeddedCliGetTokenCount+0x1a>
        return 0;
 8010842:	2300      	movs	r3, #0
 8010844:	e019      	b.n	801087a <embeddedCliGetTokenCount+0x4e>

    int i = 0;
 8010846:	2300      	movs	r3, #0
 8010848:	60fb      	str	r3, [r7, #12]
    uint16_t tokenCount = 1;
 801084a:	2301      	movs	r3, #1
 801084c:	817b      	strh	r3, [r7, #10]
    while (true) {
        if (tokenizedStr[i] == '\0') {
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	687a      	ldr	r2, [r7, #4]
 8010852:	4413      	add	r3, r2
 8010854:	781b      	ldrb	r3, [r3, #0]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d109      	bne.n	801086e <embeddedCliGetTokenCount+0x42>
            if (tokenizedStr[i + 1] == '\0')
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	3301      	adds	r3, #1
 801085e:	687a      	ldr	r2, [r7, #4]
 8010860:	4413      	add	r3, r2
 8010862:	781b      	ldrb	r3, [r3, #0]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d006      	beq.n	8010876 <embeddedCliGetTokenCount+0x4a>
                break;
            ++tokenCount;
 8010868:	897b      	ldrh	r3, [r7, #10]
 801086a:	3301      	adds	r3, #1
 801086c:	817b      	strh	r3, [r7, #10]
        }
        ++i;
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	3301      	adds	r3, #1
 8010872:	60fb      	str	r3, [r7, #12]
        if (tokenizedStr[i] == '\0') {
 8010874:	e7eb      	b.n	801084e <embeddedCliGetTokenCount+0x22>
                break;
 8010876:	bf00      	nop
    }

    return tokenCount;
 8010878:	897b      	ldrh	r3, [r7, #10]
}
 801087a:	4618      	mov	r0, r3
 801087c:	3714      	adds	r7, #20
 801087e:	46bd      	mov	sp, r7
 8010880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010884:	4770      	bx	lr
	...

08010888 <navigateHistory>:

static void navigateHistory(EmbeddedCli *cli, bool navigateUp) {
 8010888:	b580      	push	{r7, lr}
 801088a:	b086      	sub	sp, #24
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
 8010890:	460b      	mov	r3, r1
 8010892:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	68db      	ldr	r3, [r3, #12]
 8010898:	613b      	str	r3, [r7, #16]
    if (impl->history.itemsCount == 0 ||
 801089a:	693b      	ldr	r3, [r7, #16]
 801089c:	899b      	ldrh	r3, [r3, #12]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d05c      	beq.n	801095c <navigateHistory+0xd4>
 80108a2:	78fb      	ldrb	r3, [r7, #3]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d005      	beq.n	80108b4 <navigateHistory+0x2c>
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 80108a8:	693b      	ldr	r3, [r7, #16]
 80108aa:	895a      	ldrh	r2, [r3, #10]
 80108ac:	693b      	ldr	r3, [r7, #16]
 80108ae:	899b      	ldrh	r3, [r3, #12]
 80108b0:	429a      	cmp	r2, r3
 80108b2:	d053      	beq.n	801095c <navigateHistory+0xd4>
        (!navigateUp && impl->history.current == 0))
 80108b4:	78fb      	ldrb	r3, [r7, #3]
 80108b6:	f083 0301 	eor.w	r3, r3, #1
 80108ba:	b2db      	uxtb	r3, r3
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d003      	beq.n	80108c8 <navigateHistory+0x40>
        (!navigateUp && impl->history.current == 0))
 80108c0:	693b      	ldr	r3, [r7, #16]
 80108c2:	895b      	ldrh	r3, [r3, #10]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d049      	beq.n	801095c <navigateHistory+0xd4>
        return;

    clearCurrentLine(cli);
 80108c8:	6878      	ldr	r0, [r7, #4]
 80108ca:	f000 fcfb 	bl	80112c4 <clearCurrentLine>

    writeToOutput(cli, impl->invitation);
 80108ce:	693b      	ldr	r3, [r7, #16]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	4619      	mov	r1, r3
 80108d4:	6878      	ldr	r0, [r7, #4]
 80108d6:	f000 fd27 	bl	8011328 <writeToOutput>

    if (navigateUp)
 80108da:	78fb      	ldrb	r3, [r7, #3]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d006      	beq.n	80108ee <navigateHistory+0x66>
        ++impl->history.current;
 80108e0:	693b      	ldr	r3, [r7, #16]
 80108e2:	895b      	ldrh	r3, [r3, #10]
 80108e4:	3301      	adds	r3, #1
 80108e6:	b29a      	uxth	r2, r3
 80108e8:	693b      	ldr	r3, [r7, #16]
 80108ea:	815a      	strh	r2, [r3, #10]
 80108ec:	e005      	b.n	80108fa <navigateHistory+0x72>
    else
        --impl->history.current;
 80108ee:	693b      	ldr	r3, [r7, #16]
 80108f0:	895b      	ldrh	r3, [r3, #10]
 80108f2:	3b01      	subs	r3, #1
 80108f4:	b29a      	uxth	r2, r3
 80108f6:	693b      	ldr	r3, [r7, #16]
 80108f8:	815a      	strh	r2, [r3, #10]

    const char *item = historyGet(&impl->history, impl->history.current);
 80108fa:	693b      	ldr	r3, [r7, #16]
 80108fc:	1d1a      	adds	r2, r3, #4
 80108fe:	693b      	ldr	r3, [r7, #16]
 8010900:	895b      	ldrh	r3, [r3, #10]
 8010902:	4619      	mov	r1, r3
 8010904:	4610      	mov	r0, r2
 8010906:	f000 fe3e 	bl	8011586 <historyGet>
 801090a:	6178      	str	r0, [r7, #20]
    // simple way to handle empty command the same way as others
    if (item == NULL)
 801090c:	697b      	ldr	r3, [r7, #20]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d101      	bne.n	8010916 <navigateHistory+0x8e>
        item = "";
 8010912:	4b14      	ldr	r3, [pc, #80]	; (8010964 <navigateHistory+0xdc>)
 8010914:	617b      	str	r3, [r7, #20]
    uint16_t len = (uint16_t) strlen(item);
 8010916:	6978      	ldr	r0, [r7, #20]
 8010918:	f7ef fc6c 	bl	80001f4 <strlen>
 801091c:	4603      	mov	r3, r0
 801091e:	81fb      	strh	r3, [r7, #14]
    memcpy(impl->cmdBuffer, item, len);
 8010920:	693b      	ldr	r3, [r7, #16]
 8010922:	69db      	ldr	r3, [r3, #28]
 8010924:	89fa      	ldrh	r2, [r7, #14]
 8010926:	6979      	ldr	r1, [r7, #20]
 8010928:	4618      	mov	r0, r3
 801092a:	f00a fac5 	bl	801aeb8 <memcpy>
    impl->cmdBuffer[len] = '\0';
 801092e:	693b      	ldr	r3, [r7, #16]
 8010930:	69da      	ldr	r2, [r3, #28]
 8010932:	89fb      	ldrh	r3, [r7, #14]
 8010934:	4413      	add	r3, r2
 8010936:	2200      	movs	r2, #0
 8010938:	701a      	strb	r2, [r3, #0]
    impl->cmdSize = len;
 801093a:	693b      	ldr	r3, [r7, #16]
 801093c:	89fa      	ldrh	r2, [r7, #14]
 801093e:	841a      	strh	r2, [r3, #32]

    writeToOutput(cli, impl->cmdBuffer);
 8010940:	693b      	ldr	r3, [r7, #16]
 8010942:	69db      	ldr	r3, [r3, #28]
 8010944:	4619      	mov	r1, r3
 8010946:	6878      	ldr	r0, [r7, #4]
 8010948:	f000 fcee 	bl	8011328 <writeToOutput>
    impl->inputLineLength = impl->cmdSize;
 801094c:	693b      	ldr	r3, [r7, #16]
 801094e:	8c1a      	ldrh	r2, [r3, #32]
 8010950:	693b      	ldr	r3, [r7, #16]
 8010952:	861a      	strh	r2, [r3, #48]	; 0x30

    printLiveAutocompletion(cli);
 8010954:	6878      	ldr	r0, [r7, #4]
 8010956:	f000 fbd0 	bl	80110fa <printLiveAutocompletion>
 801095a:	e000      	b.n	801095e <navigateHistory+0xd6>
        return;
 801095c:	bf00      	nop
}
 801095e:	3718      	adds	r7, #24
 8010960:	46bd      	mov	sp, r7
 8010962:	bd80      	pop	{r7, pc}
 8010964:	08020afc 	.word	0x08020afc

08010968 <onEscapedInput>:

static void onEscapedInput(EmbeddedCli *cli, char c) {
 8010968:	b580      	push	{r7, lr}
 801096a:	b084      	sub	sp, #16
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
 8010970:	460b      	mov	r3, r1
 8010972:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	68db      	ldr	r3, [r3, #12]
 8010978:	60fb      	str	r3, [r7, #12]

    if (c >= 64 && c <= 126) {
 801097a:	78fb      	ldrb	r3, [r7, #3]
 801097c:	2b3f      	cmp	r3, #63	; 0x3f
 801097e:	d91b      	bls.n	80109b8 <onEscapedInput+0x50>
 8010980:	78fb      	ldrb	r3, [r7, #3]
 8010982:	2b7e      	cmp	r3, #126	; 0x7e
 8010984:	d818      	bhi.n	80109b8 <onEscapedInput+0x50>
        // handle escape sequence
        UNSET_U8FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801098c:	f023 0308 	bic.w	r3, r3, #8
 8010990:	b2da      	uxtb	r2, r3
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

        if (c == 'A' || c == 'B') {
 8010998:	78fb      	ldrb	r3, [r7, #3]
 801099a:	2b41      	cmp	r3, #65	; 0x41
 801099c:	d002      	beq.n	80109a4 <onEscapedInput+0x3c>
 801099e:	78fb      	ldrb	r3, [r7, #3]
 80109a0:	2b42      	cmp	r3, #66	; 0x42
 80109a2:	d109      	bne.n	80109b8 <onEscapedInput+0x50>
            // treat \e[..A as cursor up and \e[..B as cursor down
            // there might be extra chars between [ and A/B, just ignore them
            navigateHistory(cli, c == 'A');
 80109a4:	78fb      	ldrb	r3, [r7, #3]
 80109a6:	2b41      	cmp	r3, #65	; 0x41
 80109a8:	bf0c      	ite	eq
 80109aa:	2301      	moveq	r3, #1
 80109ac:	2300      	movne	r3, #0
 80109ae:	b2db      	uxtb	r3, r3
 80109b0:	4619      	mov	r1, r3
 80109b2:	6878      	ldr	r0, [r7, #4]
 80109b4:	f7ff ff68 	bl	8010888 <navigateHistory>
        }
    }
}
 80109b8:	bf00      	nop
 80109ba:	3710      	adds	r7, #16
 80109bc:	46bd      	mov	sp, r7
 80109be:	bd80      	pop	{r7, pc}

080109c0 <onCharInput>:

static void onCharInput(EmbeddedCli *cli, char c) {
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b084      	sub	sp, #16
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
 80109c8:	460b      	mov	r3, r1
 80109ca:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	68db      	ldr	r3, [r3, #12]
 80109d0:	60fb      	str	r3, [r7, #12]

    // have to reserve two extra chars for command ending (used in tokenization)
    if (impl->cmdSize + 2 >= impl->cmdMaxSize)
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	8c1b      	ldrh	r3, [r3, #32]
 80109d6:	3302      	adds	r3, #2
 80109d8:	68fa      	ldr	r2, [r7, #12]
 80109da:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80109dc:	4293      	cmp	r3, r2
 80109de:	da1a      	bge.n	8010a16 <onCharInput+0x56>
        return;

    impl->cmdBuffer[impl->cmdSize] = c;
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	69db      	ldr	r3, [r3, #28]
 80109e4:	68fa      	ldr	r2, [r7, #12]
 80109e6:	8c12      	ldrh	r2, [r2, #32]
 80109e8:	4413      	add	r3, r2
 80109ea:	78fa      	ldrb	r2, [r7, #3]
 80109ec:	701a      	strb	r2, [r3, #0]
    ++impl->cmdSize;
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	8c1b      	ldrh	r3, [r3, #32]
 80109f2:	3301      	adds	r3, #1
 80109f4:	b29a      	uxth	r2, r3
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	841a      	strh	r2, [r3, #32]
    impl->cmdBuffer[impl->cmdSize] = '\0';
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	69db      	ldr	r3, [r3, #28]
 80109fe:	68fa      	ldr	r2, [r7, #12]
 8010a00:	8c12      	ldrh	r2, [r2, #32]
 8010a02:	4413      	add	r3, r2
 8010a04:	2200      	movs	r2, #0
 8010a06:	701a      	strb	r2, [r3, #0]

    cli->writeChar(cli, c);
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	78fa      	ldrb	r2, [r7, #3]
 8010a0e:	4611      	mov	r1, r2
 8010a10:	6878      	ldr	r0, [r7, #4]
 8010a12:	4798      	blx	r3
 8010a14:	e000      	b.n	8010a18 <onCharInput+0x58>
        return;
 8010a16:	bf00      	nop
}
 8010a18:	3710      	adds	r7, #16
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	bd80      	pop	{r7, pc}
	...

08010a20 <onControlInput>:

static void onControlInput(EmbeddedCli *cli, char c) {
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b084      	sub	sp, #16
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
 8010a28:	460b      	mov	r3, r1
 8010a2a:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	68db      	ldr	r3, [r3, #12]
 8010a30:	60fb      	str	r3, [r7, #12]

    // process \r\n and \n\r as single \r\n command
    if ((impl->lastChar == '\r' && c == '\n') ||
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8010a38:	2b0d      	cmp	r3, #13
 8010a3a:	d102      	bne.n	8010a42 <onControlInput+0x22>
 8010a3c:	78fb      	ldrb	r3, [r7, #3]
 8010a3e:	2b0a      	cmp	r3, #10
 8010a40:	d062      	beq.n	8010b08 <onControlInput+0xe8>
        (impl->lastChar == '\n' && c == '\r'))
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
    if ((impl->lastChar == '\r' && c == '\n') ||
 8010a48:	2b0a      	cmp	r3, #10
 8010a4a:	d102      	bne.n	8010a52 <onControlInput+0x32>
        (impl->lastChar == '\n' && c == '\r'))
 8010a4c:	78fb      	ldrb	r3, [r7, #3]
 8010a4e:	2b0d      	cmp	r3, #13
 8010a50:	d05a      	beq.n	8010b08 <onControlInput+0xe8>
        return;

    if (c == '\r' || c == '\n') {
 8010a52:	78fb      	ldrb	r3, [r7, #3]
 8010a54:	2b0d      	cmp	r3, #13
 8010a56:	d002      	beq.n	8010a5e <onControlInput+0x3e>
 8010a58:	78fb      	ldrb	r3, [r7, #3]
 8010a5a:	2b0a      	cmp	r3, #10
 8010a5c:	d126      	bne.n	8010aac <onControlInput+0x8c>
        // try to autocomplete command and then process it
        onAutocompleteRequest(cli);
 8010a5e:	6878      	ldr	r0, [r7, #4]
 8010a60:	f000 fba6 	bl	80111b0 <onAutocompleteRequest>

        writeToOutput(cli, lineBreak);
 8010a64:	4b2a      	ldr	r3, [pc, #168]	; (8010b10 <onControlInput+0xf0>)
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	4619      	mov	r1, r3
 8010a6a:	6878      	ldr	r0, [r7, #4]
 8010a6c:	f000 fc5c 	bl	8011328 <writeToOutput>

        if (impl->cmdSize > 0)
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	8c1b      	ldrh	r3, [r3, #32]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d002      	beq.n	8010a7e <onControlInput+0x5e>
            parseCommand(cli);
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	f000 f84b 	bl	8010b14 <parseCommand>
        impl->cmdSize = 0;
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	2200      	movs	r2, #0
 8010a82:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	69db      	ldr	r3, [r3, #28]
 8010a88:	68fa      	ldr	r2, [r7, #12]
 8010a8a:	8c12      	ldrh	r2, [r2, #32]
 8010a8c:	4413      	add	r3, r2
 8010a8e:	2200      	movs	r2, #0
 8010a90:	701a      	strb	r2, [r3, #0]
        impl->inputLineLength = 0;
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	2200      	movs	r2, #0
 8010a96:	861a      	strh	r2, [r3, #48]	; 0x30
        impl->history.current = 0;
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	815a      	strh	r2, [r3, #10]

        writeToOutput(cli, impl->invitation);
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	4619      	mov	r1, r3
 8010aa4:	6878      	ldr	r0, [r7, #4]
 8010aa6:	f000 fc3f 	bl	8011328 <writeToOutput>
 8010aaa:	e02e      	b.n	8010b0a <onControlInput+0xea>
    } else if ((c == '\b' || c == 0x7F) && impl->cmdSize > 0) {
 8010aac:	78fb      	ldrb	r3, [r7, #3]
 8010aae:	2b08      	cmp	r3, #8
 8010ab0:	d002      	beq.n	8010ab8 <onControlInput+0x98>
 8010ab2:	78fb      	ldrb	r3, [r7, #3]
 8010ab4:	2b7f      	cmp	r3, #127	; 0x7f
 8010ab6:	d120      	bne.n	8010afa <onControlInput+0xda>
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	8c1b      	ldrh	r3, [r3, #32]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d01c      	beq.n	8010afa <onControlInput+0xda>
        // remove char from screen
        cli->writeChar(cli, '\b');
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	2108      	movs	r1, #8
 8010ac6:	6878      	ldr	r0, [r7, #4]
 8010ac8:	4798      	blx	r3
        cli->writeChar(cli, ' ');
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	2120      	movs	r1, #32
 8010ad0:	6878      	ldr	r0, [r7, #4]
 8010ad2:	4798      	blx	r3
        cli->writeChar(cli, '\b');
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	2108      	movs	r1, #8
 8010ada:	6878      	ldr	r0, [r7, #4]
 8010adc:	4798      	blx	r3
        // and from buffer
        --impl->cmdSize;
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	8c1b      	ldrh	r3, [r3, #32]
 8010ae2:	3b01      	subs	r3, #1
 8010ae4:	b29a      	uxth	r2, r3
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	69db      	ldr	r3, [r3, #28]
 8010aee:	68fa      	ldr	r2, [r7, #12]
 8010af0:	8c12      	ldrh	r2, [r2, #32]
 8010af2:	4413      	add	r3, r2
 8010af4:	2200      	movs	r2, #0
 8010af6:	701a      	strb	r2, [r3, #0]
 8010af8:	e007      	b.n	8010b0a <onControlInput+0xea>
    } else if (c == '\t') {
 8010afa:	78fb      	ldrb	r3, [r7, #3]
 8010afc:	2b09      	cmp	r3, #9
 8010afe:	d104      	bne.n	8010b0a <onControlInput+0xea>
        onAutocompleteRequest(cli);
 8010b00:	6878      	ldr	r0, [r7, #4]
 8010b02:	f000 fb55 	bl	80111b0 <onAutocompleteRequest>
 8010b06:	e000      	b.n	8010b0a <onControlInput+0xea>
        return;
 8010b08:	bf00      	nop
    }

}
 8010b0a:	3710      	adds	r7, #16
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	bd80      	pop	{r7, pc}
 8010b10:	20000020 	.word	0x20000020

08010b14 <parseCommand>:

static void parseCommand(EmbeddedCli *cli) {
 8010b14:	b590      	push	{r4, r7, lr}
 8010b16:	b08f      	sub	sp, #60	; 0x3c
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	68db      	ldr	r3, [r3, #12]
 8010b20:	61bb      	str	r3, [r7, #24]

    bool isEmpty = true;
 8010b22:	2301      	movs	r3, #1
 8010b24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for (int i = 0; i < impl->cmdSize; ++i) {
 8010b28:	2300      	movs	r3, #0
 8010b2a:	633b      	str	r3, [r7, #48]	; 0x30
 8010b2c:	e00d      	b.n	8010b4a <parseCommand+0x36>
        if (impl->cmdBuffer[i] != ' ') {
 8010b2e:	69bb      	ldr	r3, [r7, #24]
 8010b30:	69da      	ldr	r2, [r3, #28]
 8010b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b34:	4413      	add	r3, r2
 8010b36:	781b      	ldrb	r3, [r3, #0]
 8010b38:	2b20      	cmp	r3, #32
 8010b3a:	d003      	beq.n	8010b44 <parseCommand+0x30>
            isEmpty = false;
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            break;
 8010b42:	e008      	b.n	8010b56 <parseCommand+0x42>
    for (int i = 0; i < impl->cmdSize; ++i) {
 8010b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b46:	3301      	adds	r3, #1
 8010b48:	633b      	str	r3, [r7, #48]	; 0x30
 8010b4a:	69bb      	ldr	r3, [r7, #24]
 8010b4c:	8c1b      	ldrh	r3, [r3, #32]
 8010b4e:	461a      	mov	r2, r3
 8010b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b52:	4293      	cmp	r3, r2
 8010b54:	dbeb      	blt.n	8010b2e <parseCommand+0x1a>
        }
    }
    // do not process empty commands
    if (isEmpty)
 8010b56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	f040 80dc 	bne.w	8010d18 <parseCommand+0x204>
        return;
    // push command to history before buffer is modified
    historyPut(&impl->history, impl->cmdBuffer);
 8010b60:	69bb      	ldr	r3, [r7, #24]
 8010b62:	1d1a      	adds	r2, r3, #4
 8010b64:	69bb      	ldr	r3, [r7, #24]
 8010b66:	69db      	ldr	r3, [r3, #28]
 8010b68:	4619      	mov	r1, r3
 8010b6a:	4610      	mov	r0, r2
 8010b6c:	f000 fca7 	bl	80114be <historyPut>

    char *cmdName = NULL;
 8010b70:	2300      	movs	r3, #0
 8010b72:	62fb      	str	r3, [r7, #44]	; 0x2c
    char *cmdArgs = NULL;
 8010b74:	2300      	movs	r3, #0
 8010b76:	62bb      	str	r3, [r7, #40]	; 0x28
    bool nameFinished = false;
 8010b78:	2300      	movs	r3, #0
 8010b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // find command name and command args inside command buffer
    for (int i = 0; i < impl->cmdSize; ++i) {
 8010b7e:	2300      	movs	r3, #0
 8010b80:	623b      	str	r3, [r7, #32]
 8010b82:	e030      	b.n	8010be6 <parseCommand+0xd2>
        char c = impl->cmdBuffer[i];
 8010b84:	69bb      	ldr	r3, [r7, #24]
 8010b86:	69da      	ldr	r2, [r3, #28]
 8010b88:	6a3b      	ldr	r3, [r7, #32]
 8010b8a:	4413      	add	r3, r2
 8010b8c:	781b      	ldrb	r3, [r3, #0]
 8010b8e:	75fb      	strb	r3, [r7, #23]

        if (c == ' ') {
 8010b90:	7dfb      	ldrb	r3, [r7, #23]
 8010b92:	2b20      	cmp	r3, #32
 8010b94:	d10f      	bne.n	8010bb6 <parseCommand+0xa2>
            // all spaces between name and args are filled with zeros
            // so name is a correct null-terminated string
            if (cmdArgs == NULL)
 8010b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d105      	bne.n	8010ba8 <parseCommand+0x94>
                impl->cmdBuffer[i] = '\0';
 8010b9c:	69bb      	ldr	r3, [r7, #24]
 8010b9e:	69da      	ldr	r2, [r3, #28]
 8010ba0:	6a3b      	ldr	r3, [r7, #32]
 8010ba2:	4413      	add	r3, r2
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	701a      	strb	r2, [r3, #0]
            if (cmdName != NULL)
 8010ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d018      	beq.n	8010be0 <parseCommand+0xcc>
                nameFinished = true;
 8010bae:	2301      	movs	r3, #1
 8010bb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010bb4:	e014      	b.n	8010be0 <parseCommand+0xcc>

        } else if (cmdName == NULL) {
 8010bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d105      	bne.n	8010bc8 <parseCommand+0xb4>
            cmdName = &impl->cmdBuffer[i];
 8010bbc:	69bb      	ldr	r3, [r7, #24]
 8010bbe:	69da      	ldr	r2, [r3, #28]
 8010bc0:	6a3b      	ldr	r3, [r7, #32]
 8010bc2:	4413      	add	r3, r2
 8010bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010bc6:	e00b      	b.n	8010be0 <parseCommand+0xcc>
        } else if (cmdArgs == NULL && nameFinished) {
 8010bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d108      	bne.n	8010be0 <parseCommand+0xcc>
 8010bce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d004      	beq.n	8010be0 <parseCommand+0xcc>
            cmdArgs = &impl->cmdBuffer[i];
 8010bd6:	69bb      	ldr	r3, [r7, #24]
 8010bd8:	69da      	ldr	r2, [r3, #28]
 8010bda:	6a3b      	ldr	r3, [r7, #32]
 8010bdc:	4413      	add	r3, r2
 8010bde:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int i = 0; i < impl->cmdSize; ++i) {
 8010be0:	6a3b      	ldr	r3, [r7, #32]
 8010be2:	3301      	adds	r3, #1
 8010be4:	623b      	str	r3, [r7, #32]
 8010be6:	69bb      	ldr	r3, [r7, #24]
 8010be8:	8c1b      	ldrh	r3, [r3, #32]
 8010bea:	461a      	mov	r2, r3
 8010bec:	6a3b      	ldr	r3, [r7, #32]
 8010bee:	4293      	cmp	r3, r2
 8010bf0:	dbc8      	blt.n	8010b84 <parseCommand+0x70>
        }
    }

    // we keep two last bytes in cmd buffer reserved so cmdSize is always by 2
    // less than cmdMaxSize
    impl->cmdBuffer[impl->cmdSize + 1] = '\0';
 8010bf2:	69bb      	ldr	r3, [r7, #24]
 8010bf4:	69da      	ldr	r2, [r3, #28]
 8010bf6:	69bb      	ldr	r3, [r7, #24]
 8010bf8:	8c1b      	ldrh	r3, [r3, #32]
 8010bfa:	3301      	adds	r3, #1
 8010bfc:	4413      	add	r3, r2
 8010bfe:	2200      	movs	r2, #0
 8010c00:	701a      	strb	r2, [r3, #0]

    if (cmdName == NULL)
 8010c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	f000 8089 	beq.w	8010d1c <parseCommand+0x208>
        return;

    // try to find command in bindings
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	61fb      	str	r3, [r7, #28]
 8010c0e:	e054      	b.n	8010cba <parseCommand+0x1a6>
        if (strcmp(cmdName, impl->bindings[i].name) == 0) {
 8010c10:	69bb      	ldr	r3, [r7, #24]
 8010c12:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010c14:	69fa      	ldr	r2, [r7, #28]
 8010c16:	4613      	mov	r3, r2
 8010c18:	009b      	lsls	r3, r3, #2
 8010c1a:	4413      	add	r3, r2
 8010c1c:	009b      	lsls	r3, r3, #2
 8010c1e:	440b      	add	r3, r1
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	4619      	mov	r1, r3
 8010c24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010c26:	f7ef fadb 	bl	80001e0 <strcmp>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d141      	bne.n	8010cb4 <parseCommand+0x1a0>
            if (impl->bindings[i].binding == NULL)
 8010c30:	69bb      	ldr	r3, [r7, #24]
 8010c32:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010c34:	69fa      	ldr	r2, [r7, #28]
 8010c36:	4613      	mov	r3, r2
 8010c38:	009b      	lsls	r3, r3, #2
 8010c3a:	4413      	add	r3, r2
 8010c3c:	009b      	lsls	r3, r3, #2
 8010c3e:	440b      	add	r3, r1
 8010c40:	691b      	ldr	r3, [r3, #16]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d040      	beq.n	8010cc8 <parseCommand+0x1b4>
                break;

            if (impl->bindings[i].tokenizeArgs)
 8010c46:	69bb      	ldr	r3, [r7, #24]
 8010c48:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010c4a:	69fa      	ldr	r2, [r7, #28]
 8010c4c:	4613      	mov	r3, r2
 8010c4e:	009b      	lsls	r3, r3, #2
 8010c50:	4413      	add	r3, r2
 8010c52:	009b      	lsls	r3, r3, #2
 8010c54:	440b      	add	r3, r1
 8010c56:	7a1b      	ldrb	r3, [r3, #8]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d002      	beq.n	8010c62 <parseCommand+0x14e>
                embeddedCliTokenizeArgs(cmdArgs);
 8010c5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c5e:	f7ff fd3b 	bl	80106d8 <embeddedCliTokenizeArgs>
            // currently, output is blank line, so we can just print directly
            SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8010c62:	69bb      	ldr	r3, [r7, #24]
 8010c64:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010c68:	f043 0310 	orr.w	r3, r3, #16
 8010c6c:	b2da      	uxtb	r2, r3
 8010c6e:	69bb      	ldr	r3, [r7, #24]
 8010c70:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
            impl->bindings[i].binding(cli, cmdArgs, impl->bindings[i].context);
 8010c74:	69bb      	ldr	r3, [r7, #24]
 8010c76:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010c78:	69fa      	ldr	r2, [r7, #28]
 8010c7a:	4613      	mov	r3, r2
 8010c7c:	009b      	lsls	r3, r3, #2
 8010c7e:	4413      	add	r3, r2
 8010c80:	009b      	lsls	r3, r3, #2
 8010c82:	440b      	add	r3, r1
 8010c84:	691c      	ldr	r4, [r3, #16]
 8010c86:	69bb      	ldr	r3, [r7, #24]
 8010c88:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010c8a:	69fa      	ldr	r2, [r7, #28]
 8010c8c:	4613      	mov	r3, r2
 8010c8e:	009b      	lsls	r3, r3, #2
 8010c90:	4413      	add	r3, r2
 8010c92:	009b      	lsls	r3, r3, #2
 8010c94:	440b      	add	r3, r1
 8010c96:	68db      	ldr	r3, [r3, #12]
 8010c98:	461a      	mov	r2, r3
 8010c9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010c9c:	6878      	ldr	r0, [r7, #4]
 8010c9e:	47a0      	blx	r4
            UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8010ca0:	69bb      	ldr	r3, [r7, #24]
 8010ca2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010ca6:	f023 0310 	bic.w	r3, r3, #16
 8010caa:	b2da      	uxtb	r2, r3
 8010cac:	69bb      	ldr	r3, [r7, #24]
 8010cae:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
            return;
 8010cb2:	e034      	b.n	8010d1e <parseCommand+0x20a>
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8010cb4:	69fb      	ldr	r3, [r7, #28]
 8010cb6:	3301      	adds	r3, #1
 8010cb8:	61fb      	str	r3, [r7, #28]
 8010cba:	69bb      	ldr	r3, [r7, #24]
 8010cbc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010cbe:	461a      	mov	r2, r3
 8010cc0:	69fb      	ldr	r3, [r7, #28]
 8010cc2:	4293      	cmp	r3, r2
 8010cc4:	dba4      	blt.n	8010c10 <parseCommand+0xfc>
 8010cc6:	e000      	b.n	8010cca <parseCommand+0x1b6>
                break;
 8010cc8:	bf00      	nop
        }
    }

    // command not found in bindings or binding was null
    // try to call default callback
    if (cli->onCommand != NULL) {
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	685b      	ldr	r3, [r3, #4]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d01d      	beq.n	8010d0e <parseCommand+0x1fa>
        CliCommand command;
        command.name = cmdName;
 8010cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cd4:	60fb      	str	r3, [r7, #12]
        command.args = cmdArgs;
 8010cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cd8:	613b      	str	r3, [r7, #16]

        // currently, output is blank line, so we can just print directly
        SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8010cda:	69bb      	ldr	r3, [r7, #24]
 8010cdc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010ce0:	f043 0310 	orr.w	r3, r3, #16
 8010ce4:	b2da      	uxtb	r2, r3
 8010ce6:	69bb      	ldr	r3, [r7, #24]
 8010ce8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        cli->onCommand(cli, &command);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	685b      	ldr	r3, [r3, #4]
 8010cf0:	f107 020c 	add.w	r2, r7, #12
 8010cf4:	4611      	mov	r1, r2
 8010cf6:	6878      	ldr	r0, [r7, #4]
 8010cf8:	4798      	blx	r3
        UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8010cfa:	69bb      	ldr	r3, [r7, #24]
 8010cfc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010d00:	f023 0310 	bic.w	r3, r3, #16
 8010d04:	b2da      	uxtb	r2, r3
 8010d06:	69bb      	ldr	r3, [r7, #24]
 8010d08:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8010d0c:	e007      	b.n	8010d1e <parseCommand+0x20a>
    } else {
        onUnknownCommand(cli, cmdName);
 8010d0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010d10:	6878      	ldr	r0, [r7, #4]
 8010d12:	f000 f913 	bl	8010f3c <onUnknownCommand>
 8010d16:	e002      	b.n	8010d1e <parseCommand+0x20a>
        return;
 8010d18:	bf00      	nop
 8010d1a:	e000      	b.n	8010d1e <parseCommand+0x20a>
        return;
 8010d1c:	bf00      	nop
    }
}
 8010d1e:	373c      	adds	r7, #60	; 0x3c
 8010d20:	46bd      	mov	sp, r7
 8010d22:	bd90      	pop	{r4, r7, pc}

08010d24 <initInternalBindings>:

static void initInternalBindings(EmbeddedCli *cli) {
 8010d24:	b5b0      	push	{r4, r5, r7, lr}
 8010d26:	b08a      	sub	sp, #40	; 0x28
 8010d28:	af02      	add	r7, sp, #8
 8010d2a:	6078      	str	r0, [r7, #4]
    CliCommandBinding b = {
 8010d2c:	4b0c      	ldr	r3, [pc, #48]	; (8010d60 <initInternalBindings+0x3c>)
 8010d2e:	f107 040c 	add.w	r4, r7, #12
 8010d32:	461d      	mov	r5, r3
 8010d34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010d36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010d38:	682b      	ldr	r3, [r5, #0]
 8010d3a:	6023      	str	r3, [r4, #0]
            "Print list of commands",
            true,
            NULL,
            onHelp
    };
    embeddedCliAddBinding(cli, b);
 8010d3c:	466a      	mov	r2, sp
 8010d3e:	f107 0318 	add.w	r3, r7, #24
 8010d42:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010d46:	e882 0003 	stmia.w	r2, {r0, r1}
 8010d4a:	f107 030c 	add.w	r3, r7, #12
 8010d4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010d50:	6878      	ldr	r0, [r7, #4]
 8010d52:	f7ff fc4c 	bl	80105ee <embeddedCliAddBinding>
}
 8010d56:	bf00      	nop
 8010d58:	3720      	adds	r7, #32
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	bdb0      	pop	{r4, r5, r7, pc}
 8010d5e:	bf00      	nop
 8010d60:	08020b00 	.word	0x08020b00

08010d64 <onHelp>:

static void onHelp(EmbeddedCli *cli, char *tokens, void *context) {
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b08c      	sub	sp, #48	; 0x30
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	60f8      	str	r0, [r7, #12]
 8010d6c:	60b9      	str	r1, [r7, #8]
 8010d6e:	607a      	str	r2, [r7, #4]
    UNUSED(context);
    PREPARE_IMPL(cli);
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	68db      	ldr	r3, [r3, #12]
 8010d74:	61fb      	str	r3, [r7, #28]

    if (impl->bindingsCount == 0) {
 8010d76:	69fb      	ldr	r3, [r7, #28]
 8010d78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d10a      	bne.n	8010d94 <onHelp+0x30>
        writeToOutput(cli, "Help is not available");
 8010d7e:	496b      	ldr	r1, [pc, #428]	; (8010f2c <onHelp+0x1c8>)
 8010d80:	68f8      	ldr	r0, [r7, #12]
 8010d82:	f000 fad1 	bl	8011328 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8010d86:	4b6a      	ldr	r3, [pc, #424]	; (8010f30 <onHelp+0x1cc>)
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	4619      	mov	r1, r3
 8010d8c:	68f8      	ldr	r0, [r7, #12]
 8010d8e:	f000 facb 	bl	8011328 <writeToOutput>
        return;
 8010d92:	e0c8      	b.n	8010f26 <onHelp+0x1c2>
    }

    uint16_t tokenCount = embeddedCliGetTokenCount(tokens);
 8010d94:	68b8      	ldr	r0, [r7, #8]
 8010d96:	f7ff fd49 	bl	801082c <embeddedCliGetTokenCount>
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	837b      	strh	r3, [r7, #26]
    if (tokenCount == 0) {
 8010d9e:	8b7b      	ldrh	r3, [r7, #26]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d146      	bne.n	8010e32 <onHelp+0xce>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8010da4:	2300      	movs	r3, #0
 8010da6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010da8:	e03c      	b.n	8010e24 <onHelp+0xc0>
            writeToOutput(cli, " * ");
 8010daa:	4962      	ldr	r1, [pc, #392]	; (8010f34 <onHelp+0x1d0>)
 8010dac:	68f8      	ldr	r0, [r7, #12]
 8010dae:	f000 fabb 	bl	8011328 <writeToOutput>
            writeToOutput(cli, impl->bindings[i].name);
 8010db2:	69fb      	ldr	r3, [r7, #28]
 8010db4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010db6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010db8:	4613      	mov	r3, r2
 8010dba:	009b      	lsls	r3, r3, #2
 8010dbc:	4413      	add	r3, r2
 8010dbe:	009b      	lsls	r3, r3, #2
 8010dc0:	440b      	add	r3, r1
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	4619      	mov	r1, r3
 8010dc6:	68f8      	ldr	r0, [r7, #12]
 8010dc8:	f000 faae 	bl	8011328 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8010dcc:	4b58      	ldr	r3, [pc, #352]	; (8010f30 <onHelp+0x1cc>)
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	4619      	mov	r1, r3
 8010dd2:	68f8      	ldr	r0, [r7, #12]
 8010dd4:	f000 faa8 	bl	8011328 <writeToOutput>
            if (impl->bindings[i].help != NULL) {
 8010dd8:	69fb      	ldr	r3, [r7, #28]
 8010dda:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010ddc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010dde:	4613      	mov	r3, r2
 8010de0:	009b      	lsls	r3, r3, #2
 8010de2:	4413      	add	r3, r2
 8010de4:	009b      	lsls	r3, r3, #2
 8010de6:	440b      	add	r3, r1
 8010de8:	685b      	ldr	r3, [r3, #4]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d017      	beq.n	8010e1e <onHelp+0xba>
                cli->writeChar(cli, '\t');
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	2109      	movs	r1, #9
 8010df4:	68f8      	ldr	r0, [r7, #12]
 8010df6:	4798      	blx	r3
                writeToOutput(cli, impl->bindings[i].help);
 8010df8:	69fb      	ldr	r3, [r7, #28]
 8010dfa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010dfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010dfe:	4613      	mov	r3, r2
 8010e00:	009b      	lsls	r3, r3, #2
 8010e02:	4413      	add	r3, r2
 8010e04:	009b      	lsls	r3, r3, #2
 8010e06:	440b      	add	r3, r1
 8010e08:	685b      	ldr	r3, [r3, #4]
 8010e0a:	4619      	mov	r1, r3
 8010e0c:	68f8      	ldr	r0, [r7, #12]
 8010e0e:	f000 fa8b 	bl	8011328 <writeToOutput>
                writeToOutput(cli, lineBreak);
 8010e12:	4b47      	ldr	r3, [pc, #284]	; (8010f30 <onHelp+0x1cc>)
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	4619      	mov	r1, r3
 8010e18:	68f8      	ldr	r0, [r7, #12]
 8010e1a:	f000 fa85 	bl	8011328 <writeToOutput>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8010e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e20:	3301      	adds	r3, #1
 8010e22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010e24:	69fb      	ldr	r3, [r7, #28]
 8010e26:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010e28:	461a      	mov	r2, r3
 8010e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e2c:	4293      	cmp	r3, r2
 8010e2e:	dbbc      	blt.n	8010daa <onHelp+0x46>
 8010e30:	e079      	b.n	8010f26 <onHelp+0x1c2>
            }
        }
    } else if (tokenCount == 1) {
 8010e32:	8b7b      	ldrh	r3, [r7, #26]
 8010e34:	2b01      	cmp	r3, #1
 8010e36:	d16c      	bne.n	8010f12 <onHelp+0x1ae>
        // try find command
        const char *helpStr = NULL;
 8010e38:	2300      	movs	r3, #0
 8010e3a:	62bb      	str	r3, [r7, #40]	; 0x28
        const char *cmdName = embeddedCliGetToken(tokens, 1);
 8010e3c:	2101      	movs	r1, #1
 8010e3e:	68b8      	ldr	r0, [r7, #8]
 8010e40:	f7ff fcbe 	bl	80107c0 <embeddedCliGetToken>
 8010e44:	6178      	str	r0, [r7, #20]
        bool found = false;
 8010e46:	2300      	movs	r3, #0
 8010e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	623b      	str	r3, [r7, #32]
 8010e50:	e020      	b.n	8010e94 <onHelp+0x130>
            if (strcmp(impl->bindings[i].name, cmdName) == 0) {
 8010e52:	69fb      	ldr	r3, [r7, #28]
 8010e54:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010e56:	6a3a      	ldr	r2, [r7, #32]
 8010e58:	4613      	mov	r3, r2
 8010e5a:	009b      	lsls	r3, r3, #2
 8010e5c:	4413      	add	r3, r2
 8010e5e:	009b      	lsls	r3, r3, #2
 8010e60:	440b      	add	r3, r1
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	6979      	ldr	r1, [r7, #20]
 8010e66:	4618      	mov	r0, r3
 8010e68:	f7ef f9ba 	bl	80001e0 <strcmp>
 8010e6c:	4603      	mov	r3, r0
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d10d      	bne.n	8010e8e <onHelp+0x12a>
                helpStr = impl->bindings[i].help;
 8010e72:	69fb      	ldr	r3, [r7, #28]
 8010e74:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010e76:	6a3a      	ldr	r2, [r7, #32]
 8010e78:	4613      	mov	r3, r2
 8010e7a:	009b      	lsls	r3, r3, #2
 8010e7c:	4413      	add	r3, r2
 8010e7e:	009b      	lsls	r3, r3, #2
 8010e80:	440b      	add	r3, r1
 8010e82:	685b      	ldr	r3, [r3, #4]
 8010e84:	62bb      	str	r3, [r7, #40]	; 0x28
                found = true;
 8010e86:	2301      	movs	r3, #1
 8010e88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 8010e8c:	e008      	b.n	8010ea0 <onHelp+0x13c>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8010e8e:	6a3b      	ldr	r3, [r7, #32]
 8010e90:	3301      	adds	r3, #1
 8010e92:	623b      	str	r3, [r7, #32]
 8010e94:	69fb      	ldr	r3, [r7, #28]
 8010e96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010e98:	461a      	mov	r2, r3
 8010e9a:	6a3b      	ldr	r3, [r7, #32]
 8010e9c:	4293      	cmp	r3, r2
 8010e9e:	dbd8      	blt.n	8010e52 <onHelp+0xee>
            }
        }
        if (found && helpStr != NULL) {
 8010ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d020      	beq.n	8010eea <onHelp+0x186>
 8010ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d01d      	beq.n	8010eea <onHelp+0x186>
            writeToOutput(cli, " * ");
 8010eae:	4921      	ldr	r1, [pc, #132]	; (8010f34 <onHelp+0x1d0>)
 8010eb0:	68f8      	ldr	r0, [r7, #12]
 8010eb2:	f000 fa39 	bl	8011328 <writeToOutput>
            writeToOutput(cli, cmdName);
 8010eb6:	6979      	ldr	r1, [r7, #20]
 8010eb8:	68f8      	ldr	r0, [r7, #12]
 8010eba:	f000 fa35 	bl	8011328 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8010ebe:	4b1c      	ldr	r3, [pc, #112]	; (8010f30 <onHelp+0x1cc>)
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	4619      	mov	r1, r3
 8010ec4:	68f8      	ldr	r0, [r7, #12]
 8010ec6:	f000 fa2f 	bl	8011328 <writeToOutput>
            cli->writeChar(cli, '\t');
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	2109      	movs	r1, #9
 8010ed0:	68f8      	ldr	r0, [r7, #12]
 8010ed2:	4798      	blx	r3
            writeToOutput(cli, helpStr);
 8010ed4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010ed6:	68f8      	ldr	r0, [r7, #12]
 8010ed8:	f000 fa26 	bl	8011328 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8010edc:	4b14      	ldr	r3, [pc, #80]	; (8010f30 <onHelp+0x1cc>)
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	4619      	mov	r1, r3
 8010ee2:	68f8      	ldr	r0, [r7, #12]
 8010ee4:	f000 fa20 	bl	8011328 <writeToOutput>
 8010ee8:	e01d      	b.n	8010f26 <onHelp+0x1c2>
        } else if (found) {
 8010eea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d00a      	beq.n	8010f08 <onHelp+0x1a4>
            writeToOutput(cli, "Help is not available");
 8010ef2:	490e      	ldr	r1, [pc, #56]	; (8010f2c <onHelp+0x1c8>)
 8010ef4:	68f8      	ldr	r0, [r7, #12]
 8010ef6:	f000 fa17 	bl	8011328 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8010efa:	4b0d      	ldr	r3, [pc, #52]	; (8010f30 <onHelp+0x1cc>)
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	4619      	mov	r1, r3
 8010f00:	68f8      	ldr	r0, [r7, #12]
 8010f02:	f000 fa11 	bl	8011328 <writeToOutput>
 8010f06:	e00e      	b.n	8010f26 <onHelp+0x1c2>
        } else {
            onUnknownCommand(cli, cmdName);
 8010f08:	6979      	ldr	r1, [r7, #20]
 8010f0a:	68f8      	ldr	r0, [r7, #12]
 8010f0c:	f000 f816 	bl	8010f3c <onUnknownCommand>
 8010f10:	e009      	b.n	8010f26 <onHelp+0x1c2>
        }
    } else {
        writeToOutput(cli, "Command \"help\" receives one or zero arguments");
 8010f12:	4909      	ldr	r1, [pc, #36]	; (8010f38 <onHelp+0x1d4>)
 8010f14:	68f8      	ldr	r0, [r7, #12]
 8010f16:	f000 fa07 	bl	8011328 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8010f1a:	4b05      	ldr	r3, [pc, #20]	; (8010f30 <onHelp+0x1cc>)
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	4619      	mov	r1, r3
 8010f20:	68f8      	ldr	r0, [r7, #12]
 8010f22:	f000 fa01 	bl	8011328 <writeToOutput>
    }
}
 8010f26:	3730      	adds	r7, #48	; 0x30
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	bd80      	pop	{r7, pc}
 8010f2c:	08020b14 	.word	0x08020b14
 8010f30:	20000020 	.word	0x20000020
 8010f34:	08020b2c 	.word	0x08020b2c
 8010f38:	08020b30 	.word	0x08020b30

08010f3c <onUnknownCommand>:

static void onUnknownCommand(EmbeddedCli *cli, const char *name) {
 8010f3c:	b580      	push	{r7, lr}
 8010f3e:	b082      	sub	sp, #8
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	6078      	str	r0, [r7, #4]
 8010f44:	6039      	str	r1, [r7, #0]
    writeToOutput(cli, "Unknown command: \"");
 8010f46:	490b      	ldr	r1, [pc, #44]	; (8010f74 <onUnknownCommand+0x38>)
 8010f48:	6878      	ldr	r0, [r7, #4]
 8010f4a:	f000 f9ed 	bl	8011328 <writeToOutput>
    writeToOutput(cli, name);
 8010f4e:	6839      	ldr	r1, [r7, #0]
 8010f50:	6878      	ldr	r0, [r7, #4]
 8010f52:	f000 f9e9 	bl	8011328 <writeToOutput>
    writeToOutput(cli, "\". Write \"help\" for a list of available commands");
 8010f56:	4908      	ldr	r1, [pc, #32]	; (8010f78 <onUnknownCommand+0x3c>)
 8010f58:	6878      	ldr	r0, [r7, #4]
 8010f5a:	f000 f9e5 	bl	8011328 <writeToOutput>
    writeToOutput(cli, lineBreak);
 8010f5e:	4b07      	ldr	r3, [pc, #28]	; (8010f7c <onUnknownCommand+0x40>)
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	4619      	mov	r1, r3
 8010f64:	6878      	ldr	r0, [r7, #4]
 8010f66:	f000 f9df 	bl	8011328 <writeToOutput>
}
 8010f6a:	bf00      	nop
 8010f6c:	3708      	adds	r7, #8
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	bd80      	pop	{r7, pc}
 8010f72:	bf00      	nop
 8010f74:	08020b60 	.word	0x08020b60
 8010f78:	08020b74 	.word	0x08020b74
 8010f7c:	20000020 	.word	0x20000020

08010f80 <getAutocompletedCommand>:

static AutocompletedCommand getAutocompletedCommand(EmbeddedCli *cli, const char *prefix) {
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b08e      	sub	sp, #56	; 0x38
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	60f8      	str	r0, [r7, #12]
 8010f88:	60b9      	str	r1, [r7, #8]
 8010f8a:	607a      	str	r2, [r7, #4]
    AutocompletedCommand cmd = {NULL, 0, 0};
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	613b      	str	r3, [r7, #16]
 8010f90:	2300      	movs	r3, #0
 8010f92:	82bb      	strh	r3, [r7, #20]
 8010f94:	2300      	movs	r3, #0
 8010f96:	82fb      	strh	r3, [r7, #22]

    size_t prefixLen = strlen(prefix);
 8010f98:	6878      	ldr	r0, [r7, #4]
 8010f9a:	f7ef f92b 	bl	80001f4 <strlen>
 8010f9e:	6278      	str	r0, [r7, #36]	; 0x24

    PREPARE_IMPL(cli);
 8010fa0:	68bb      	ldr	r3, [r7, #8]
 8010fa2:	68db      	ldr	r3, [r3, #12]
 8010fa4:	623b      	str	r3, [r7, #32]
    if (impl->bindingsCount == 0 || prefixLen == 0)
 8010fa6:	6a3b      	ldr	r3, [r7, #32]
 8010fa8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d002      	beq.n	8010fb4 <getAutocompletedCommand+0x34>
 8010fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d108      	bne.n	8010fc6 <getAutocompletedCommand+0x46>
        return cmd;
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	461a      	mov	r2, r3
 8010fb8:	f107 0310 	add.w	r3, r7, #16
 8010fbc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010fc0:	e882 0003 	stmia.w	r2, {r0, r1}
 8010fc4:	e095      	b.n	80110f2 <getAutocompletedCommand+0x172>


    for (int i = 0; i < impl->bindingsCount; ++i) {
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	637b      	str	r3, [r7, #52]	; 0x34
 8010fca:	e083      	b.n	80110d4 <getAutocompletedCommand+0x154>
        const char *name = impl->bindings[i].name;
 8010fcc:	6a3b      	ldr	r3, [r7, #32]
 8010fce:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010fd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010fd2:	4613      	mov	r3, r2
 8010fd4:	009b      	lsls	r3, r3, #2
 8010fd6:	4413      	add	r3, r2
 8010fd8:	009b      	lsls	r3, r3, #2
 8010fda:	440b      	add	r3, r1
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	61fb      	str	r3, [r7, #28]
        size_t len = strlen(name);
 8010fe0:	69f8      	ldr	r0, [r7, #28]
 8010fe2:	f7ef f907 	bl	80001f4 <strlen>
 8010fe6:	61b8      	str	r0, [r7, #24]

        // unset autocomplete flag
        UNSET_U8FLAG(impl->bindingsFlags[i], BINDING_FLAG_AUTOCOMPLETE);
 8010fe8:	6a3b      	ldr	r3, [r7, #32]
 8010fea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fee:	4413      	add	r3, r2
 8010ff0:	781a      	ldrb	r2, [r3, #0]
 8010ff2:	6a3b      	ldr	r3, [r7, #32]
 8010ff4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8010ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ff8:	440b      	add	r3, r1
 8010ffa:	f022 0201 	bic.w	r2, r2, #1
 8010ffe:	b2d2      	uxtb	r2, r2
 8011000:	701a      	strb	r2, [r3, #0]

        if (len < prefixLen)
 8011002:	69ba      	ldr	r2, [r7, #24]
 8011004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011006:	429a      	cmp	r2, r3
 8011008:	d35e      	bcc.n	80110c8 <getAutocompletedCommand+0x148>
            continue;

        // check if this command is candidate for autocomplete
        bool isCandidate = true;
 801100a:	2301      	movs	r3, #1
 801100c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        for (size_t j = 0; j < prefixLen; ++j) {
 8011010:	2300      	movs	r3, #0
 8011012:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011014:	e010      	b.n	8011038 <getAutocompletedCommand+0xb8>
            if (prefix[j] != name[j]) {
 8011016:	687a      	ldr	r2, [r7, #4]
 8011018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801101a:	4413      	add	r3, r2
 801101c:	781a      	ldrb	r2, [r3, #0]
 801101e:	69f9      	ldr	r1, [r7, #28]
 8011020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011022:	440b      	add	r3, r1
 8011024:	781b      	ldrb	r3, [r3, #0]
 8011026:	429a      	cmp	r2, r3
 8011028:	d003      	beq.n	8011032 <getAutocompletedCommand+0xb2>
                isCandidate = false;
 801102a:	2300      	movs	r3, #0
 801102c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                break;
 8011030:	e006      	b.n	8011040 <getAutocompletedCommand+0xc0>
        for (size_t j = 0; j < prefixLen; ++j) {
 8011032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011034:	3301      	adds	r3, #1
 8011036:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801103a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801103c:	429a      	cmp	r2, r3
 801103e:	d3ea      	bcc.n	8011016 <getAutocompletedCommand+0x96>
            }
        }
        if (!isCandidate)
 8011040:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011044:	f083 0301 	eor.w	r3, r3, #1
 8011048:	b2db      	uxtb	r3, r3
 801104a:	2b00      	cmp	r3, #0
 801104c:	d13e      	bne.n	80110cc <getAutocompletedCommand+0x14c>
            continue;

        impl->bindingsFlags[i] |= BINDING_FLAG_AUTOCOMPLETE;
 801104e:	6a3b      	ldr	r3, [r7, #32]
 8011050:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011054:	4413      	add	r3, r2
 8011056:	781a      	ldrb	r2, [r3, #0]
 8011058:	6a3b      	ldr	r3, [r7, #32]
 801105a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 801105c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801105e:	440b      	add	r3, r1
 8011060:	f042 0201 	orr.w	r2, r2, #1
 8011064:	b2d2      	uxtb	r2, r2
 8011066:	701a      	strb	r2, [r3, #0]

        if (cmd.candidateCount == 0 || len < cmd.autocompletedLen)
 8011068:	8afb      	ldrh	r3, [r7, #22]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d004      	beq.n	8011078 <getAutocompletedCommand+0xf8>
 801106e:	8abb      	ldrh	r3, [r7, #20]
 8011070:	461a      	mov	r2, r3
 8011072:	69bb      	ldr	r3, [r7, #24]
 8011074:	4293      	cmp	r3, r2
 8011076:	d202      	bcs.n	801107e <getAutocompletedCommand+0xfe>
            cmd.autocompletedLen = (uint16_t) len;
 8011078:	69bb      	ldr	r3, [r7, #24]
 801107a:	b29b      	uxth	r3, r3
 801107c:	82bb      	strh	r3, [r7, #20]

        ++cmd.candidateCount;
 801107e:	8afb      	ldrh	r3, [r7, #22]
 8011080:	3301      	adds	r3, #1
 8011082:	b29b      	uxth	r3, r3
 8011084:	82fb      	strh	r3, [r7, #22]

        if (cmd.candidateCount == 1) {
 8011086:	8afb      	ldrh	r3, [r7, #22]
 8011088:	2b01      	cmp	r3, #1
 801108a:	d102      	bne.n	8011092 <getAutocompletedCommand+0x112>
            cmd.firstCandidate = name;
 801108c:	69fb      	ldr	r3, [r7, #28]
 801108e:	613b      	str	r3, [r7, #16]
            continue;
 8011090:	e01d      	b.n	80110ce <getAutocompletedCommand+0x14e>
        }

        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 8011092:	6a3b      	ldr	r3, [r7, #32]
 8011094:	8c1b      	ldrh	r3, [r3, #32]
 8011096:	62bb      	str	r3, [r7, #40]	; 0x28
 8011098:	e010      	b.n	80110bc <getAutocompletedCommand+0x13c>
            if (cmd.firstCandidate[j] != name[j]) {
 801109a:	693a      	ldr	r2, [r7, #16]
 801109c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801109e:	4413      	add	r3, r2
 80110a0:	781a      	ldrb	r2, [r3, #0]
 80110a2:	69f9      	ldr	r1, [r7, #28]
 80110a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110a6:	440b      	add	r3, r1
 80110a8:	781b      	ldrb	r3, [r3, #0]
 80110aa:	429a      	cmp	r2, r3
 80110ac:	d003      	beq.n	80110b6 <getAutocompletedCommand+0x136>
                cmd.autocompletedLen = (uint16_t) j;
 80110ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110b0:	b29b      	uxth	r3, r3
 80110b2:	82bb      	strh	r3, [r7, #20]
                break;
 80110b4:	e00b      	b.n	80110ce <getAutocompletedCommand+0x14e>
        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 80110b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110b8:	3301      	adds	r3, #1
 80110ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80110bc:	8abb      	ldrh	r3, [r7, #20]
 80110be:	461a      	mov	r2, r3
 80110c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110c2:	4293      	cmp	r3, r2
 80110c4:	d3e9      	bcc.n	801109a <getAutocompletedCommand+0x11a>
 80110c6:	e002      	b.n	80110ce <getAutocompletedCommand+0x14e>
            continue;
 80110c8:	bf00      	nop
 80110ca:	e000      	b.n	80110ce <getAutocompletedCommand+0x14e>
            continue;
 80110cc:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 80110ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110d0:	3301      	adds	r3, #1
 80110d2:	637b      	str	r3, [r7, #52]	; 0x34
 80110d4:	6a3b      	ldr	r3, [r7, #32]
 80110d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80110d8:	461a      	mov	r2, r3
 80110da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110dc:	4293      	cmp	r3, r2
 80110de:	f6ff af75 	blt.w	8010fcc <getAutocompletedCommand+0x4c>
            }
        }
    }

    return cmd;
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	461a      	mov	r2, r3
 80110e6:	f107 0310 	add.w	r3, r7, #16
 80110ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80110ee:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80110f2:	68f8      	ldr	r0, [r7, #12]
 80110f4:	3738      	adds	r7, #56	; 0x38
 80110f6:	46bd      	mov	sp, r7
 80110f8:	bd80      	pop	{r7, pc}

080110fa <printLiveAutocompletion>:

static void printLiveAutocompletion(EmbeddedCli *cli) {
 80110fa:	b580      	push	{r7, lr}
 80110fc:	b088      	sub	sp, #32
 80110fe:	af00      	add	r7, sp, #0
 8011100:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	68db      	ldr	r3, [r3, #12]
 8011106:	617b      	str	r3, [r7, #20]

    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED))
 8011108:	697b      	ldr	r3, [r7, #20]
 801110a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801110e:	f003 0320 	and.w	r3, r3, #32
 8011112:	2b00      	cmp	r3, #0
 8011114:	d048      	beq.n	80111a8 <printLiveAutocompletion+0xae>
        return;

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 8011116:	697b      	ldr	r3, [r7, #20]
 8011118:	69da      	ldr	r2, [r3, #28]
 801111a:	f107 030c 	add.w	r3, r7, #12
 801111e:	6879      	ldr	r1, [r7, #4]
 8011120:	4618      	mov	r0, r3
 8011122:	f7ff ff2d 	bl	8010f80 <getAutocompletedCommand>

    if (cmd.candidateCount == 0) {
 8011126:	8a7b      	ldrh	r3, [r7, #18]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d102      	bne.n	8011132 <printLiveAutocompletion+0x38>
        cmd.autocompletedLen = impl->cmdSize;
 801112c:	697b      	ldr	r3, [r7, #20]
 801112e:	8c1b      	ldrh	r3, [r3, #32]
 8011130:	823b      	strh	r3, [r7, #16]
    }

    // print live autocompletion (or nothing, if it doesn't exist)
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 8011132:	697b      	ldr	r3, [r7, #20]
 8011134:	8c1b      	ldrh	r3, [r3, #32]
 8011136:	61fb      	str	r3, [r7, #28]
 8011138:	e00b      	b.n	8011152 <printLiveAutocompletion+0x58>
        cli->writeChar(cli, cmd.firstCandidate[i]);
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	68f9      	ldr	r1, [r7, #12]
 8011140:	69fa      	ldr	r2, [r7, #28]
 8011142:	440a      	add	r2, r1
 8011144:	7812      	ldrb	r2, [r2, #0]
 8011146:	4611      	mov	r1, r2
 8011148:	6878      	ldr	r0, [r7, #4]
 801114a:	4798      	blx	r3
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 801114c:	69fb      	ldr	r3, [r7, #28]
 801114e:	3301      	adds	r3, #1
 8011150:	61fb      	str	r3, [r7, #28]
 8011152:	8a3b      	ldrh	r3, [r7, #16]
 8011154:	461a      	mov	r2, r3
 8011156:	69fb      	ldr	r3, [r7, #28]
 8011158:	4293      	cmp	r3, r2
 801115a:	d3ee      	bcc.n	801113a <printLiveAutocompletion+0x40>
    }
    // replace with spaces previous autocompletion
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 801115c:	8a3b      	ldrh	r3, [r7, #16]
 801115e:	61bb      	str	r3, [r7, #24]
 8011160:	e007      	b.n	8011172 <printLiveAutocompletion+0x78>
        cli->writeChar(cli, ' ');
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	2120      	movs	r1, #32
 8011168:	6878      	ldr	r0, [r7, #4]
 801116a:	4798      	blx	r3
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 801116c:	69bb      	ldr	r3, [r7, #24]
 801116e:	3301      	adds	r3, #1
 8011170:	61bb      	str	r3, [r7, #24]
 8011172:	697b      	ldr	r3, [r7, #20]
 8011174:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8011176:	461a      	mov	r2, r3
 8011178:	69bb      	ldr	r3, [r7, #24]
 801117a:	4293      	cmp	r3, r2
 801117c:	d3f1      	bcc.n	8011162 <printLiveAutocompletion+0x68>
    }
    impl->inputLineLength = cmd.autocompletedLen;
 801117e:	8a3a      	ldrh	r2, [r7, #16]
 8011180:	697b      	ldr	r3, [r7, #20]
 8011182:	861a      	strh	r2, [r3, #48]	; 0x30
    cli->writeChar(cli, '\r');
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	210d      	movs	r1, #13
 801118a:	6878      	ldr	r0, [r7, #4]
 801118c:	4798      	blx	r3
    // print current command again so cursor is moved to initial place
    writeToOutput(cli, impl->invitation);
 801118e:	697b      	ldr	r3, [r7, #20]
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	4619      	mov	r1, r3
 8011194:	6878      	ldr	r0, [r7, #4]
 8011196:	f000 f8c7 	bl	8011328 <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 801119a:	697b      	ldr	r3, [r7, #20]
 801119c:	69db      	ldr	r3, [r3, #28]
 801119e:	4619      	mov	r1, r3
 80111a0:	6878      	ldr	r0, [r7, #4]
 80111a2:	f000 f8c1 	bl	8011328 <writeToOutput>
 80111a6:	e000      	b.n	80111aa <printLiveAutocompletion+0xb0>
        return;
 80111a8:	bf00      	nop
}
 80111aa:	3720      	adds	r7, #32
 80111ac:	46bd      	mov	sp, r7
 80111ae:	bd80      	pop	{r7, pc}

080111b0 <onAutocompleteRequest>:

static void onAutocompleteRequest(EmbeddedCli *cli) {
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b088      	sub	sp, #32
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	68db      	ldr	r3, [r3, #12]
 80111bc:	61bb      	str	r3, [r7, #24]

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 80111be:	69bb      	ldr	r3, [r7, #24]
 80111c0:	69da      	ldr	r2, [r3, #28]
 80111c2:	f107 030c 	add.w	r3, r7, #12
 80111c6:	6879      	ldr	r1, [r7, #4]
 80111c8:	4618      	mov	r0, r3
 80111ca:	f7ff fed9 	bl	8010f80 <getAutocompletedCommand>

    if (cmd.candidateCount == 0)
 80111ce:	8a7b      	ldrh	r3, [r7, #18]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d071      	beq.n	80112b8 <onAutocompleteRequest+0x108>
        return;

    if (cmd.candidateCount == 1 || cmd.autocompletedLen > impl->cmdSize) {
 80111d4:	8a7b      	ldrh	r3, [r7, #18]
 80111d6:	2b01      	cmp	r3, #1
 80111d8:	d004      	beq.n	80111e4 <onAutocompleteRequest+0x34>
 80111da:	8a3a      	ldrh	r2, [r7, #16]
 80111dc:	69bb      	ldr	r3, [r7, #24]
 80111de:	8c1b      	ldrh	r3, [r3, #32]
 80111e0:	429a      	cmp	r2, r3
 80111e2:	d92a      	bls.n	801123a <onAutocompleteRequest+0x8a>
        // can copy from index cmdSize, but prefix is the same, so copy everything
        memcpy(impl->cmdBuffer, cmd.firstCandidate, cmd.autocompletedLen);
 80111e4:	69bb      	ldr	r3, [r7, #24]
 80111e6:	69db      	ldr	r3, [r3, #28]
 80111e8:	68f9      	ldr	r1, [r7, #12]
 80111ea:	8a3a      	ldrh	r2, [r7, #16]
 80111ec:	4618      	mov	r0, r3
 80111ee:	f009 fe63 	bl	801aeb8 <memcpy>
        if (cmd.candidateCount == 1) {
 80111f2:	8a7b      	ldrh	r3, [r7, #18]
 80111f4:	2b01      	cmp	r3, #1
 80111f6:	d109      	bne.n	801120c <onAutocompleteRequest+0x5c>
            impl->cmdBuffer[cmd.autocompletedLen] = ' ';
 80111f8:	69bb      	ldr	r3, [r7, #24]
 80111fa:	69db      	ldr	r3, [r3, #28]
 80111fc:	8a3a      	ldrh	r2, [r7, #16]
 80111fe:	4413      	add	r3, r2
 8011200:	2220      	movs	r2, #32
 8011202:	701a      	strb	r2, [r3, #0]
            ++cmd.autocompletedLen;
 8011204:	8a3b      	ldrh	r3, [r7, #16]
 8011206:	3301      	adds	r3, #1
 8011208:	b29b      	uxth	r3, r3
 801120a:	823b      	strh	r3, [r7, #16]
        }
        impl->cmdBuffer[cmd.autocompletedLen] = '\0';
 801120c:	69bb      	ldr	r3, [r7, #24]
 801120e:	69db      	ldr	r3, [r3, #28]
 8011210:	8a3a      	ldrh	r2, [r7, #16]
 8011212:	4413      	add	r3, r2
 8011214:	2200      	movs	r2, #0
 8011216:	701a      	strb	r2, [r3, #0]

        writeToOutput(cli, &impl->cmdBuffer[impl->cmdSize]);
 8011218:	69bb      	ldr	r3, [r7, #24]
 801121a:	69db      	ldr	r3, [r3, #28]
 801121c:	69ba      	ldr	r2, [r7, #24]
 801121e:	8c12      	ldrh	r2, [r2, #32]
 8011220:	4413      	add	r3, r2
 8011222:	4619      	mov	r1, r3
 8011224:	6878      	ldr	r0, [r7, #4]
 8011226:	f000 f87f 	bl	8011328 <writeToOutput>
        impl->cmdSize = cmd.autocompletedLen;
 801122a:	8a3a      	ldrh	r2, [r7, #16]
 801122c:	69bb      	ldr	r3, [r7, #24]
 801122e:	841a      	strh	r2, [r3, #32]
        impl->inputLineLength = impl->cmdSize;
 8011230:	69bb      	ldr	r3, [r7, #24]
 8011232:	8c1a      	ldrh	r2, [r3, #32]
 8011234:	69bb      	ldr	r3, [r7, #24]
 8011236:	861a      	strh	r2, [r3, #48]	; 0x30
        return;
 8011238:	e03f      	b.n	80112ba <onAutocompleteRequest+0x10a>
    }

    // with multiple candidates when we already completed to common prefix
    // we show all candidates and print input again
    // we need to completely clear current line since it begins with invitation
    clearCurrentLine(cli);
 801123a:	6878      	ldr	r0, [r7, #4]
 801123c:	f000 f842 	bl	80112c4 <clearCurrentLine>

    for (int i = 0; i < impl->bindingsCount; ++i) {
 8011240:	2300      	movs	r3, #0
 8011242:	61fb      	str	r3, [r7, #28]
 8011244:	e021      	b.n	801128a <onAutocompleteRequest+0xda>
        // autocomplete flag is set for all candidates by last call to
        // getAutocompletedCommand
        if (!(impl->bindingsFlags[i] & BINDING_FLAG_AUTOCOMPLETE))
 8011246:	69bb      	ldr	r3, [r7, #24]
 8011248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801124a:	69fb      	ldr	r3, [r7, #28]
 801124c:	4413      	add	r3, r2
 801124e:	781b      	ldrb	r3, [r3, #0]
 8011250:	f003 0301 	and.w	r3, r3, #1
 8011254:	2b00      	cmp	r3, #0
 8011256:	d014      	beq.n	8011282 <onAutocompleteRequest+0xd2>
            continue;

        const char *name = impl->bindings[i].name;
 8011258:	69bb      	ldr	r3, [r7, #24]
 801125a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801125c:	69fa      	ldr	r2, [r7, #28]
 801125e:	4613      	mov	r3, r2
 8011260:	009b      	lsls	r3, r3, #2
 8011262:	4413      	add	r3, r2
 8011264:	009b      	lsls	r3, r3, #2
 8011266:	440b      	add	r3, r1
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	617b      	str	r3, [r7, #20]

        writeToOutput(cli, name);
 801126c:	6979      	ldr	r1, [r7, #20]
 801126e:	6878      	ldr	r0, [r7, #4]
 8011270:	f000 f85a 	bl	8011328 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011274:	4b12      	ldr	r3, [pc, #72]	; (80112c0 <onAutocompleteRequest+0x110>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	4619      	mov	r1, r3
 801127a:	6878      	ldr	r0, [r7, #4]
 801127c:	f000 f854 	bl	8011328 <writeToOutput>
 8011280:	e000      	b.n	8011284 <onAutocompleteRequest+0xd4>
            continue;
 8011282:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8011284:	69fb      	ldr	r3, [r7, #28]
 8011286:	3301      	adds	r3, #1
 8011288:	61fb      	str	r3, [r7, #28]
 801128a:	69bb      	ldr	r3, [r7, #24]
 801128c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801128e:	461a      	mov	r2, r3
 8011290:	69fb      	ldr	r3, [r7, #28]
 8011292:	4293      	cmp	r3, r2
 8011294:	dbd7      	blt.n	8011246 <onAutocompleteRequest+0x96>
    }

    writeToOutput(cli, impl->invitation);
 8011296:	69bb      	ldr	r3, [r7, #24]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	4619      	mov	r1, r3
 801129c:	6878      	ldr	r0, [r7, #4]
 801129e:	f000 f843 	bl	8011328 <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 80112a2:	69bb      	ldr	r3, [r7, #24]
 80112a4:	69db      	ldr	r3, [r3, #28]
 80112a6:	4619      	mov	r1, r3
 80112a8:	6878      	ldr	r0, [r7, #4]
 80112aa:	f000 f83d 	bl	8011328 <writeToOutput>

    impl->inputLineLength = impl->cmdSize;
 80112ae:	69bb      	ldr	r3, [r7, #24]
 80112b0:	8c1a      	ldrh	r2, [r3, #32]
 80112b2:	69bb      	ldr	r3, [r7, #24]
 80112b4:	861a      	strh	r2, [r3, #48]	; 0x30
 80112b6:	e000      	b.n	80112ba <onAutocompleteRequest+0x10a>
        return;
 80112b8:	bf00      	nop
}
 80112ba:	3720      	adds	r7, #32
 80112bc:	46bd      	mov	sp, r7
 80112be:	bd80      	pop	{r7, pc}
 80112c0:	20000020 	.word	0x20000020

080112c4 <clearCurrentLine>:

static void clearCurrentLine(EmbeddedCli *cli) {
 80112c4:	b590      	push	{r4, r7, lr}
 80112c6:	b087      	sub	sp, #28
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	68db      	ldr	r3, [r3, #12]
 80112d0:	613b      	str	r3, [r7, #16]
    size_t len = impl->inputLineLength + strlen(impl->invitation);
 80112d2:	693b      	ldr	r3, [r7, #16]
 80112d4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80112d6:	461c      	mov	r4, r3
 80112d8:	693b      	ldr	r3, [r7, #16]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	4618      	mov	r0, r3
 80112de:	f7ee ff89 	bl	80001f4 <strlen>
 80112e2:	4603      	mov	r3, r0
 80112e4:	4423      	add	r3, r4
 80112e6:	60fb      	str	r3, [r7, #12]

    cli->writeChar(cli, '\r');
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	210d      	movs	r1, #13
 80112ee:	6878      	ldr	r0, [r7, #4]
 80112f0:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 80112f2:	2300      	movs	r3, #0
 80112f4:	617b      	str	r3, [r7, #20]
 80112f6:	e007      	b.n	8011308 <clearCurrentLine+0x44>
        cli->writeChar(cli, ' ');
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	2120      	movs	r1, #32
 80112fe:	6878      	ldr	r0, [r7, #4]
 8011300:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8011302:	697b      	ldr	r3, [r7, #20]
 8011304:	3301      	adds	r3, #1
 8011306:	617b      	str	r3, [r7, #20]
 8011308:	697a      	ldr	r2, [r7, #20]
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	429a      	cmp	r2, r3
 801130e:	d3f3      	bcc.n	80112f8 <clearCurrentLine+0x34>
    }
    cli->writeChar(cli, '\r');
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	210d      	movs	r1, #13
 8011316:	6878      	ldr	r0, [r7, #4]
 8011318:	4798      	blx	r3
    impl->inputLineLength = 0;
 801131a:	693b      	ldr	r3, [r7, #16]
 801131c:	2200      	movs	r2, #0
 801131e:	861a      	strh	r2, [r3, #48]	; 0x30
}
 8011320:	bf00      	nop
 8011322:	371c      	adds	r7, #28
 8011324:	46bd      	mov	sp, r7
 8011326:	bd90      	pop	{r4, r7, pc}

08011328 <writeToOutput>:

static void writeToOutput(EmbeddedCli *cli, const char *str) {
 8011328:	b580      	push	{r7, lr}
 801132a:	b084      	sub	sp, #16
 801132c:	af00      	add	r7, sp, #0
 801132e:	6078      	str	r0, [r7, #4]
 8011330:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 8011332:	6838      	ldr	r0, [r7, #0]
 8011334:	f7ee ff5e 	bl	80001f4 <strlen>
 8011338:	60b8      	str	r0, [r7, #8]

    for (size_t i = 0; i < len; ++i) {
 801133a:	2300      	movs	r3, #0
 801133c:	60fb      	str	r3, [r7, #12]
 801133e:	e00b      	b.n	8011358 <writeToOutput+0x30>
        cli->writeChar(cli, str[i]);
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	6839      	ldr	r1, [r7, #0]
 8011346:	68fa      	ldr	r2, [r7, #12]
 8011348:	440a      	add	r2, r1
 801134a:	7812      	ldrb	r2, [r2, #0]
 801134c:	4611      	mov	r1, r2
 801134e:	6878      	ldr	r0, [r7, #4]
 8011350:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	3301      	adds	r3, #1
 8011356:	60fb      	str	r3, [r7, #12]
 8011358:	68fa      	ldr	r2, [r7, #12]
 801135a:	68bb      	ldr	r3, [r7, #8]
 801135c:	429a      	cmp	r2, r3
 801135e:	d3ef      	bcc.n	8011340 <writeToOutput+0x18>
    }
}
 8011360:	bf00      	nop
 8011362:	bf00      	nop
 8011364:	3710      	adds	r7, #16
 8011366:	46bd      	mov	sp, r7
 8011368:	bd80      	pop	{r7, pc}

0801136a <isControlChar>:

static bool isControlChar(char c) {
 801136a:	b480      	push	{r7}
 801136c:	b083      	sub	sp, #12
 801136e:	af00      	add	r7, sp, #0
 8011370:	4603      	mov	r3, r0
 8011372:	71fb      	strb	r3, [r7, #7]
    return c == '\r' || c == '\n' || c == '\b' || c == '\t' || c == 0x7F;
 8011374:	79fb      	ldrb	r3, [r7, #7]
 8011376:	2b0d      	cmp	r3, #13
 8011378:	d00b      	beq.n	8011392 <isControlChar+0x28>
 801137a:	79fb      	ldrb	r3, [r7, #7]
 801137c:	2b0a      	cmp	r3, #10
 801137e:	d008      	beq.n	8011392 <isControlChar+0x28>
 8011380:	79fb      	ldrb	r3, [r7, #7]
 8011382:	2b08      	cmp	r3, #8
 8011384:	d005      	beq.n	8011392 <isControlChar+0x28>
 8011386:	79fb      	ldrb	r3, [r7, #7]
 8011388:	2b09      	cmp	r3, #9
 801138a:	d002      	beq.n	8011392 <isControlChar+0x28>
 801138c:	79fb      	ldrb	r3, [r7, #7]
 801138e:	2b7f      	cmp	r3, #127	; 0x7f
 8011390:	d101      	bne.n	8011396 <isControlChar+0x2c>
 8011392:	2301      	movs	r3, #1
 8011394:	e000      	b.n	8011398 <isControlChar+0x2e>
 8011396:	2300      	movs	r3, #0
 8011398:	f003 0301 	and.w	r3, r3, #1
 801139c:	b2db      	uxtb	r3, r3
}
 801139e:	4618      	mov	r0, r3
 80113a0:	370c      	adds	r7, #12
 80113a2:	46bd      	mov	sp, r7
 80113a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a8:	4770      	bx	lr

080113aa <isDisplayableChar>:

static bool isDisplayableChar(char c) {
 80113aa:	b480      	push	{r7}
 80113ac:	b083      	sub	sp, #12
 80113ae:	af00      	add	r7, sp, #0
 80113b0:	4603      	mov	r3, r0
 80113b2:	71fb      	strb	r3, [r7, #7]
    return (c >= 32 && c <= 126);
 80113b4:	79fb      	ldrb	r3, [r7, #7]
 80113b6:	2b1f      	cmp	r3, #31
 80113b8:	d904      	bls.n	80113c4 <isDisplayableChar+0x1a>
 80113ba:	79fb      	ldrb	r3, [r7, #7]
 80113bc:	2b7e      	cmp	r3, #126	; 0x7e
 80113be:	d801      	bhi.n	80113c4 <isDisplayableChar+0x1a>
 80113c0:	2301      	movs	r3, #1
 80113c2:	e000      	b.n	80113c6 <isDisplayableChar+0x1c>
 80113c4:	2300      	movs	r3, #0
 80113c6:	f003 0301 	and.w	r3, r3, #1
 80113ca:	b2db      	uxtb	r3, r3
}
 80113cc:	4618      	mov	r0, r3
 80113ce:	370c      	adds	r7, #12
 80113d0:	46bd      	mov	sp, r7
 80113d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d6:	4770      	bx	lr

080113d8 <fifoBufAvailable>:

static uint16_t fifoBufAvailable(FifoBuf *buffer) {
 80113d8:	b480      	push	{r7}
 80113da:	b083      	sub	sp, #12
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
    if (buffer->back >= buffer->front)
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	88da      	ldrh	r2, [r3, #6]
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	889b      	ldrh	r3, [r3, #4]
 80113e8:	429a      	cmp	r2, r3
 80113ea:	d306      	bcc.n	80113fa <fifoBufAvailable+0x22>
        return (uint16_t) (buffer->back - buffer->front);
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	88da      	ldrh	r2, [r3, #6]
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	889b      	ldrh	r3, [r3, #4]
 80113f4:	1ad3      	subs	r3, r2, r3
 80113f6:	b29b      	uxth	r3, r3
 80113f8:	e009      	b.n	801140e <fifoBufAvailable+0x36>
    else
        return (uint16_t) (buffer->size - buffer->front + buffer->back);
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	891a      	ldrh	r2, [r3, #8]
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	889b      	ldrh	r3, [r3, #4]
 8011402:	1ad3      	subs	r3, r2, r3
 8011404:	b29a      	uxth	r2, r3
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	88db      	ldrh	r3, [r3, #6]
 801140a:	4413      	add	r3, r2
 801140c:	b29b      	uxth	r3, r3
}
 801140e:	4618      	mov	r0, r3
 8011410:	370c      	adds	r7, #12
 8011412:	46bd      	mov	sp, r7
 8011414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011418:	4770      	bx	lr

0801141a <fifoBufPop>:

static char fifoBufPop(FifoBuf *buffer) {
 801141a:	b480      	push	{r7}
 801141c:	b085      	sub	sp, #20
 801141e:	af00      	add	r7, sp, #0
 8011420:	6078      	str	r0, [r7, #4]
    char a = '\0';
 8011422:	2300      	movs	r3, #0
 8011424:	73fb      	strb	r3, [r7, #15]
    if (buffer->front != buffer->back) {
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	889a      	ldrh	r2, [r3, #4]
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	88db      	ldrh	r3, [r3, #6]
 801142e:	429a      	cmp	r2, r3
 8011430:	d014      	beq.n	801145c <fifoBufPop+0x42>
        a = buffer->buf[buffer->front];
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	687a      	ldr	r2, [r7, #4]
 8011438:	8892      	ldrh	r2, [r2, #4]
 801143a:	4413      	add	r3, r2
 801143c:	781b      	ldrb	r3, [r3, #0]
 801143e:	73fb      	strb	r3, [r7, #15]
        buffer->front = (uint16_t) (buffer->front + 1) % buffer->size;
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	889b      	ldrh	r3, [r3, #4]
 8011444:	3301      	adds	r3, #1
 8011446:	b29b      	uxth	r3, r3
 8011448:	687a      	ldr	r2, [r7, #4]
 801144a:	8912      	ldrh	r2, [r2, #8]
 801144c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011450:	fb01 f202 	mul.w	r2, r1, r2
 8011454:	1a9b      	subs	r3, r3, r2
 8011456:	b29a      	uxth	r2, r3
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	809a      	strh	r2, [r3, #4]
    }
    return a;
 801145c:	7bfb      	ldrb	r3, [r7, #15]
}
 801145e:	4618      	mov	r0, r3
 8011460:	3714      	adds	r7, #20
 8011462:	46bd      	mov	sp, r7
 8011464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011468:	4770      	bx	lr

0801146a <fifoBufPush>:

static bool fifoBufPush(FifoBuf *buffer, char a) {
 801146a:	b480      	push	{r7}
 801146c:	b085      	sub	sp, #20
 801146e:	af00      	add	r7, sp, #0
 8011470:	6078      	str	r0, [r7, #4]
 8011472:	460b      	mov	r3, r1
 8011474:	70fb      	strb	r3, [r7, #3]
    uint16_t newBack = (uint16_t) (buffer->back + 1) % buffer->size;
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	88db      	ldrh	r3, [r3, #6]
 801147a:	3301      	adds	r3, #1
 801147c:	b29b      	uxth	r3, r3
 801147e:	687a      	ldr	r2, [r7, #4]
 8011480:	8912      	ldrh	r2, [r2, #8]
 8011482:	fbb3 f1f2 	udiv	r1, r3, r2
 8011486:	fb01 f202 	mul.w	r2, r1, r2
 801148a:	1a9b      	subs	r3, r3, r2
 801148c:	81fb      	strh	r3, [r7, #14]
    if (newBack != buffer->front) {
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	889b      	ldrh	r3, [r3, #4]
 8011492:	89fa      	ldrh	r2, [r7, #14]
 8011494:	429a      	cmp	r2, r3
 8011496:	d00b      	beq.n	80114b0 <fifoBufPush+0x46>
        buffer->buf[buffer->back] = a;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	687a      	ldr	r2, [r7, #4]
 801149e:	88d2      	ldrh	r2, [r2, #6]
 80114a0:	4413      	add	r3, r2
 80114a2:	78fa      	ldrb	r2, [r7, #3]
 80114a4:	701a      	strb	r2, [r3, #0]
        buffer->back = newBack;
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	89fa      	ldrh	r2, [r7, #14]
 80114aa:	80da      	strh	r2, [r3, #6]
        return true;
 80114ac:	2301      	movs	r3, #1
 80114ae:	e000      	b.n	80114b2 <fifoBufPush+0x48>
    }
    return false;
 80114b0:	2300      	movs	r3, #0
}
 80114b2:	4618      	mov	r0, r3
 80114b4:	3714      	adds	r7, #20
 80114b6:	46bd      	mov	sp, r7
 80114b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114bc:	4770      	bx	lr

080114be <historyPut>:

static bool historyPut(CliHistory *history, const char *str) {
 80114be:	b580      	push	{r7, lr}
 80114c0:	b088      	sub	sp, #32
 80114c2:	af00      	add	r7, sp, #0
 80114c4:	6078      	str	r0, [r7, #4]
 80114c6:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 80114c8:	6838      	ldr	r0, [r7, #0]
 80114ca:	f7ee fe93 	bl	80001f4 <strlen>
 80114ce:	61b8      	str	r0, [r7, #24]
    // each item is ended with \0 so, need to have that much space at least
    if (history->bufferSize < len + 1)
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	889b      	ldrh	r3, [r3, #4]
 80114d4:	461a      	mov	r2, r3
 80114d6:	69bb      	ldr	r3, [r7, #24]
 80114d8:	3301      	adds	r3, #1
 80114da:	429a      	cmp	r2, r3
 80114dc:	d201      	bcs.n	80114e2 <historyPut+0x24>
        return false;
 80114de:	2300      	movs	r3, #0
 80114e0:	e04d      	b.n	801157e <historyPut+0xc0>

    // remove str from history (if it's present) so we don't get duplicates
    historyRemove(history, str);
 80114e2:	6839      	ldr	r1, [r7, #0]
 80114e4:	6878      	ldr	r0, [r7, #4]
 80114e6:	f000 f86a 	bl	80115be <historyRemove>

    size_t usedSize;
    // remove old items if new one can't fit into buffer
    while (history->itemsCount > 0) {
 80114ea:	e024      	b.n	8011536 <historyPut+0x78>
        const char *item = historyGet(history, history->itemsCount);
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	891b      	ldrh	r3, [r3, #8]
 80114f0:	4619      	mov	r1, r3
 80114f2:	6878      	ldr	r0, [r7, #4]
 80114f4:	f000 f847 	bl	8011586 <historyGet>
 80114f8:	6178      	str	r0, [r7, #20]
        size_t itemLen = strlen(item);
 80114fa:	6978      	ldr	r0, [r7, #20]
 80114fc:	f7ee fe7a 	bl	80001f4 <strlen>
 8011500:	6138      	str	r0, [r7, #16]
        usedSize = ((size_t) (item - history->buf)) + itemLen + 1;
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	697a      	ldr	r2, [r7, #20]
 8011508:	1ad3      	subs	r3, r2, r3
 801150a:	461a      	mov	r2, r3
 801150c:	693b      	ldr	r3, [r7, #16]
 801150e:	4413      	add	r3, r2
 8011510:	3301      	adds	r3, #1
 8011512:	61fb      	str	r3, [r7, #28]

        size_t freeSpace = history->bufferSize - usedSize;
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	889b      	ldrh	r3, [r3, #4]
 8011518:	461a      	mov	r2, r3
 801151a:	69fb      	ldr	r3, [r7, #28]
 801151c:	1ad3      	subs	r3, r2, r3
 801151e:	60fb      	str	r3, [r7, #12]

        if (freeSpace >= len + 1)
 8011520:	69bb      	ldr	r3, [r7, #24]
 8011522:	3301      	adds	r3, #1
 8011524:	68fa      	ldr	r2, [r7, #12]
 8011526:	429a      	cmp	r2, r3
 8011528:	d20a      	bcs.n	8011540 <historyPut+0x82>
            break;

        // space not enough, remove last element
        --history->itemsCount;
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	891b      	ldrh	r3, [r3, #8]
 801152e:	3b01      	subs	r3, #1
 8011530:	b29a      	uxth	r2, r3
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	811a      	strh	r2, [r3, #8]
    while (history->itemsCount > 0) {
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	891b      	ldrh	r3, [r3, #8]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d1d6      	bne.n	80114ec <historyPut+0x2e>
 801153e:	e000      	b.n	8011542 <historyPut+0x84>
            break;
 8011540:	bf00      	nop
    }
    if (history->itemsCount > 0) {
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	891b      	ldrh	r3, [r3, #8]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d00a      	beq.n	8011560 <historyPut+0xa2>
        // when history not empty, shift elements so new item is first
        memmove(&history->buf[len + 1], history->buf, usedSize);
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	681a      	ldr	r2, [r3, #0]
 801154e:	69bb      	ldr	r3, [r7, #24]
 8011550:	3301      	adds	r3, #1
 8011552:	18d0      	adds	r0, r2, r3
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	69fa      	ldr	r2, [r7, #28]
 801155a:	4619      	mov	r1, r3
 801155c:	f009 fcba 	bl	801aed4 <memmove>
    }
    memcpy(history->buf, str, len + 1);
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	6818      	ldr	r0, [r3, #0]
 8011564:	69bb      	ldr	r3, [r7, #24]
 8011566:	3301      	adds	r3, #1
 8011568:	461a      	mov	r2, r3
 801156a:	6839      	ldr	r1, [r7, #0]
 801156c:	f009 fca4 	bl	801aeb8 <memcpy>
    ++history->itemsCount;
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	891b      	ldrh	r3, [r3, #8]
 8011574:	3301      	adds	r3, #1
 8011576:	b29a      	uxth	r2, r3
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	811a      	strh	r2, [r3, #8]

    return true;
 801157c:	2301      	movs	r3, #1
}
 801157e:	4618      	mov	r0, r3
 8011580:	3720      	adds	r7, #32
 8011582:	46bd      	mov	sp, r7
 8011584:	bd80      	pop	{r7, pc}

08011586 <historyGet>:

static const char *historyGet(CliHistory *history, uint16_t item) {
 8011586:	b580      	push	{r7, lr}
 8011588:	b082      	sub	sp, #8
 801158a:	af00      	add	r7, sp, #0
 801158c:	6078      	str	r0, [r7, #4]
 801158e:	460b      	mov	r3, r1
 8011590:	807b      	strh	r3, [r7, #2]
    if (item == 0 || item > history->itemsCount)
 8011592:	887b      	ldrh	r3, [r7, #2]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d004      	beq.n	80115a2 <historyGet+0x1c>
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	891b      	ldrh	r3, [r3, #8]
 801159c:	887a      	ldrh	r2, [r7, #2]
 801159e:	429a      	cmp	r2, r3
 80115a0:	d901      	bls.n	80115a6 <historyGet+0x20>
        return NULL;
 80115a2:	2300      	movs	r3, #0
 80115a4:	e007      	b.n	80115b6 <historyGet+0x30>

    // items are stored in the same way (separated by \0 and counted from 1),
    // so can use this call
    return embeddedCliGetToken(history->buf, item);
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	887a      	ldrh	r2, [r7, #2]
 80115ac:	4611      	mov	r1, r2
 80115ae:	4618      	mov	r0, r3
 80115b0:	f7ff f906 	bl	80107c0 <embeddedCliGetToken>
 80115b4:	4603      	mov	r3, r0
}
 80115b6:	4618      	mov	r0, r3
 80115b8:	3708      	adds	r7, #8
 80115ba:	46bd      	mov	sp, r7
 80115bc:	bd80      	pop	{r7, pc}

080115be <historyRemove>:

static void historyRemove(CliHistory *history, const char *str) {
 80115be:	b580      	push	{r7, lr}
 80115c0:	b086      	sub	sp, #24
 80115c2:	af00      	add	r7, sp, #0
 80115c4:	6078      	str	r0, [r7, #4]
 80115c6:	6039      	str	r1, [r7, #0]
    if (str == NULL || history->itemsCount == 0)
 80115c8:	683b      	ldr	r3, [r7, #0]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d04c      	beq.n	8011668 <historyRemove+0xaa>
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	891b      	ldrh	r3, [r3, #8]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d048      	beq.n	8011668 <historyRemove+0xaa>
        return;
    char *item = NULL;
 80115d6:	2300      	movs	r3, #0
 80115d8:	617b      	str	r3, [r7, #20]
    uint16_t itemPosition;
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 80115da:	2301      	movs	r3, #1
 80115dc:	827b      	strh	r3, [r7, #18]
 80115de:	e013      	b.n	8011608 <historyRemove+0x4a>
        // items are stored in the same way (separated by \0 and counted from 1),
        // so can use this call
        item = embeddedCliGetTokenVariable(history->buf, itemPosition);
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	8a7a      	ldrh	r2, [r7, #18]
 80115e6:	4611      	mov	r1, r2
 80115e8:	4618      	mov	r0, r3
 80115ea:	f7ff f904 	bl	80107f6 <embeddedCliGetTokenVariable>
 80115ee:	6178      	str	r0, [r7, #20]
        if (strcmp(item, str) == 0) {
 80115f0:	6839      	ldr	r1, [r7, #0]
 80115f2:	6978      	ldr	r0, [r7, #20]
 80115f4:	f7ee fdf4 	bl	80001e0 <strcmp>
 80115f8:	4603      	mov	r3, r0
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d00a      	beq.n	8011614 <historyRemove+0x56>
            break;
        }
        item = NULL;
 80115fe:	2300      	movs	r3, #0
 8011600:	617b      	str	r3, [r7, #20]
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 8011602:	8a7b      	ldrh	r3, [r7, #18]
 8011604:	3301      	adds	r3, #1
 8011606:	827b      	strh	r3, [r7, #18]
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	891b      	ldrh	r3, [r3, #8]
 801160c:	8a7a      	ldrh	r2, [r7, #18]
 801160e:	429a      	cmp	r2, r3
 8011610:	d9e6      	bls.n	80115e0 <historyRemove+0x22>
 8011612:	e000      	b.n	8011616 <historyRemove+0x58>
            break;
 8011614:	bf00      	nop
    }
    if (item == NULL)
 8011616:	697b      	ldr	r3, [r7, #20]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d027      	beq.n	801166c <historyRemove+0xae>
        return;

    --history->itemsCount;
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	891b      	ldrh	r3, [r3, #8]
 8011620:	3b01      	subs	r3, #1
 8011622:	b29a      	uxth	r2, r3
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	811a      	strh	r2, [r3, #8]
    if (itemPosition == (history->itemsCount + 1)) {
 8011628:	8a7a      	ldrh	r2, [r7, #18]
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	891b      	ldrh	r3, [r3, #8]
 801162e:	3301      	adds	r3, #1
 8011630:	429a      	cmp	r2, r3
 8011632:	d01d      	beq.n	8011670 <historyRemove+0xb2>
        // if this is a last element, nothing is remaining to move
        return;
    }

    size_t len = strlen(item);
 8011634:	6978      	ldr	r0, [r7, #20]
 8011636:	f7ee fddd 	bl	80001f4 <strlen>
 801163a:	60f8      	str	r0, [r7, #12]
    size_t remaining = (size_t) (history->bufferSize - (item + len + 1 - history->buf));
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	889b      	ldrh	r3, [r3, #4]
 8011640:	4619      	mov	r1, r3
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	3301      	adds	r3, #1
 8011646:	697a      	ldr	r2, [r7, #20]
 8011648:	441a      	add	r2, r3
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	1ad3      	subs	r3, r2, r3
 8011650:	1acb      	subs	r3, r1, r3
 8011652:	60bb      	str	r3, [r7, #8]
    // move everything to the right of found item
    memmove(item, &item[len + 1], remaining);
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	3301      	adds	r3, #1
 8011658:	697a      	ldr	r2, [r7, #20]
 801165a:	4413      	add	r3, r2
 801165c:	68ba      	ldr	r2, [r7, #8]
 801165e:	4619      	mov	r1, r3
 8011660:	6978      	ldr	r0, [r7, #20]
 8011662:	f009 fc37 	bl	801aed4 <memmove>
 8011666:	e004      	b.n	8011672 <historyRemove+0xb4>
        return;
 8011668:	bf00      	nop
 801166a:	e002      	b.n	8011672 <historyRemove+0xb4>
        return;
 801166c:	bf00      	nop
 801166e:	e000      	b.n	8011672 <historyRemove+0xb4>
        return;
 8011670:	bf00      	nop
}
 8011672:	3718      	adds	r7, #24
 8011674:	46bd      	mov	sp, r7
 8011676:	bd80      	pop	{r7, pc}

08011678 <getTokenPosition>:

static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos) {
 8011678:	b480      	push	{r7}
 801167a:	b085      	sub	sp, #20
 801167c:	af00      	add	r7, sp, #0
 801167e:	6078      	str	r0, [r7, #4]
 8011680:	460b      	mov	r3, r1
 8011682:	807b      	strh	r3, [r7, #2]
    if (tokenizedStr == NULL || pos == 0)
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d002      	beq.n	8011690 <getTokenPosition+0x18>
 801168a:	887b      	ldrh	r3, [r7, #2]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d102      	bne.n	8011696 <getTokenPosition+0x1e>
        return CLI_TOKEN_NPOS;
 8011690:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011694:	e028      	b.n	80116e8 <getTokenPosition+0x70>
    uint16_t i = 0;
 8011696:	2300      	movs	r3, #0
 8011698:	81fb      	strh	r3, [r7, #14]
    uint16_t tokenCount = 1;
 801169a:	2301      	movs	r3, #1
 801169c:	81bb      	strh	r3, [r7, #12]
    while (true) {
        if (tokenCount == pos)
 801169e:	89ba      	ldrh	r2, [r7, #12]
 80116a0:	887b      	ldrh	r3, [r7, #2]
 80116a2:	429a      	cmp	r2, r3
 80116a4:	d013      	beq.n	80116ce <getTokenPosition+0x56>
            break;

        if (tokenizedStr[i] == '\0') {
 80116a6:	89fb      	ldrh	r3, [r7, #14]
 80116a8:	687a      	ldr	r2, [r7, #4]
 80116aa:	4413      	add	r3, r2
 80116ac:	781b      	ldrb	r3, [r3, #0]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d109      	bne.n	80116c6 <getTokenPosition+0x4e>
            ++tokenCount;
 80116b2:	89bb      	ldrh	r3, [r7, #12]
 80116b4:	3301      	adds	r3, #1
 80116b6:	81bb      	strh	r3, [r7, #12]
            if (tokenizedStr[i + 1] == '\0')
 80116b8:	89fb      	ldrh	r3, [r7, #14]
 80116ba:	3301      	adds	r3, #1
 80116bc:	687a      	ldr	r2, [r7, #4]
 80116be:	4413      	add	r3, r2
 80116c0:	781b      	ldrb	r3, [r3, #0]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d005      	beq.n	80116d2 <getTokenPosition+0x5a>
                break;
        }

        ++i;
 80116c6:	89fb      	ldrh	r3, [r7, #14]
 80116c8:	3301      	adds	r3, #1
 80116ca:	81fb      	strh	r3, [r7, #14]
        if (tokenCount == pos)
 80116cc:	e7e7      	b.n	801169e <getTokenPosition+0x26>
            break;
 80116ce:	bf00      	nop
 80116d0:	e000      	b.n	80116d4 <getTokenPosition+0x5c>
                break;
 80116d2:	bf00      	nop
    }

    if (tokenizedStr[i] != '\0')
 80116d4:	89fb      	ldrh	r3, [r7, #14]
 80116d6:	687a      	ldr	r2, [r7, #4]
 80116d8:	4413      	add	r3, r2
 80116da:	781b      	ldrb	r3, [r3, #0]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d001      	beq.n	80116e4 <getTokenPosition+0x6c>
        return i;
 80116e0:	89fb      	ldrh	r3, [r7, #14]
 80116e2:	e001      	b.n	80116e8 <getTokenPosition+0x70>
    else
        return CLI_TOKEN_NPOS;
 80116e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80116e8:	4618      	mov	r0, r3
 80116ea:	3714      	adds	r7, #20
 80116ec:	46bd      	mov	sp, r7
 80116ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f2:	4770      	bx	lr

080116f4 <MX_FATFS_Init>:
	retSD = FATFS_UnLinkDriver(SDPath);
}
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80116f8:	4904      	ldr	r1, [pc, #16]	; (801170c <MX_FATFS_Init+0x18>)
 80116fa:	4805      	ldr	r0, [pc, #20]	; (8011710 <MX_FATFS_Init+0x1c>)
 80116fc:	f007 ff2a 	bl	8019554 <FATFS_LinkDriver>
 8011700:	4603      	mov	r3, r0
 8011702:	461a      	mov	r2, r3
 8011704:	4b03      	ldr	r3, [pc, #12]	; (8011714 <MX_FATFS_Init+0x20>)
 8011706:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011708:	bf00      	nop
 801170a:	bd80      	pop	{r7, pc}
 801170c:	20001a74 	.word	0x20001a74
 8011710:	080213e8 	.word	0x080213e8
 8011714:	20001a70 	.word	0x20001a70

08011718 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8011718:	b480      	push	{r7}
 801171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801171c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801171e:	4618      	mov	r0, r3
 8011720:	46bd      	mov	sp, r7
 8011722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011726:	4770      	bx	lr

08011728 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8011728:	b580      	push	{r7, lr}
 801172a:	b082      	sub	sp, #8
 801172c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801172e:	2300      	movs	r3, #0
 8011730:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8011732:	f000 f86b 	bl	801180c <BSP_SD_IsDetected>
 8011736:	4603      	mov	r3, r0
 8011738:	2b01      	cmp	r3, #1
 801173a:	d001      	beq.n	8011740 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 801173c:	2301      	movs	r3, #1
 801173e:	e005      	b.n	801174c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8011740:	4804      	ldr	r0, [pc, #16]	; (8011754 <BSP_SD_Init+0x2c>)
 8011742:	f7f7 fcf6 	bl	8009132 <HAL_SD_Init>
 8011746:	4603      	mov	r3, r0
 8011748:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 801174a:	79fb      	ldrb	r3, [r7, #7]
}
 801174c:	4618      	mov	r0, r3
 801174e:	3708      	adds	r7, #8
 8011750:	46bd      	mov	sp, r7
 8011752:	bd80      	pop	{r7, pc}
 8011754:	200017dc 	.word	0x200017dc

08011758 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b088      	sub	sp, #32
 801175c:	af02      	add	r7, sp, #8
 801175e:	60f8      	str	r0, [r7, #12]
 8011760:	60b9      	str	r1, [r7, #8]
 8011762:	607a      	str	r2, [r7, #4]
 8011764:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8011766:	2300      	movs	r3, #0
 8011768:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 801176a:	683b      	ldr	r3, [r7, #0]
 801176c:	9300      	str	r3, [sp, #0]
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	68ba      	ldr	r2, [r7, #8]
 8011772:	68f9      	ldr	r1, [r7, #12]
 8011774:	4806      	ldr	r0, [pc, #24]	; (8011790 <BSP_SD_ReadBlocks+0x38>)
 8011776:	f7f7 fd8d 	bl	8009294 <HAL_SD_ReadBlocks>
 801177a:	4603      	mov	r3, r0
 801177c:	2b00      	cmp	r3, #0
 801177e:	d001      	beq.n	8011784 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8011780:	2301      	movs	r3, #1
 8011782:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011784:	7dfb      	ldrb	r3, [r7, #23]
}
 8011786:	4618      	mov	r0, r3
 8011788:	3718      	adds	r7, #24
 801178a:	46bd      	mov	sp, r7
 801178c:	bd80      	pop	{r7, pc}
 801178e:	bf00      	nop
 8011790:	200017dc 	.word	0x200017dc

08011794 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b088      	sub	sp, #32
 8011798:	af02      	add	r7, sp, #8
 801179a:	60f8      	str	r0, [r7, #12]
 801179c:	60b9      	str	r1, [r7, #8]
 801179e:	607a      	str	r2, [r7, #4]
 80117a0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80117a2:	2300      	movs	r3, #0
 80117a4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80117a6:	683b      	ldr	r3, [r7, #0]
 80117a8:	9300      	str	r3, [sp, #0]
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	68ba      	ldr	r2, [r7, #8]
 80117ae:	68f9      	ldr	r1, [r7, #12]
 80117b0:	4806      	ldr	r0, [pc, #24]	; (80117cc <BSP_SD_WriteBlocks+0x38>)
 80117b2:	f7f7 ff4d 	bl	8009650 <HAL_SD_WriteBlocks>
 80117b6:	4603      	mov	r3, r0
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d001      	beq.n	80117c0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80117bc:	2301      	movs	r3, #1
 80117be:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80117c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80117c2:	4618      	mov	r0, r3
 80117c4:	3718      	adds	r7, #24
 80117c6:	46bd      	mov	sp, r7
 80117c8:	bd80      	pop	{r7, pc}
 80117ca:	bf00      	nop
 80117cc:	200017dc 	.word	0x200017dc

080117d0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80117d0:	b580      	push	{r7, lr}
 80117d2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80117d4:	4805      	ldr	r0, [pc, #20]	; (80117ec <BSP_SD_GetCardState+0x1c>)
 80117d6:	f7f8 fa91 	bl	8009cfc <HAL_SD_GetCardState>
 80117da:	4603      	mov	r3, r0
 80117dc:	2b04      	cmp	r3, #4
 80117de:	bf14      	ite	ne
 80117e0:	2301      	movne	r3, #1
 80117e2:	2300      	moveq	r3, #0
 80117e4:	b2db      	uxtb	r3, r3
}
 80117e6:	4618      	mov	r0, r3
 80117e8:	bd80      	pop	{r7, pc}
 80117ea:	bf00      	nop
 80117ec:	200017dc 	.word	0x200017dc

080117f0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b082      	sub	sp, #8
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80117f8:	6879      	ldr	r1, [r7, #4]
 80117fa:	4803      	ldr	r0, [pc, #12]	; (8011808 <BSP_SD_GetCardInfo+0x18>)
 80117fc:	f7f8 fa52 	bl	8009ca4 <HAL_SD_GetCardInfo>
}
 8011800:	bf00      	nop
 8011802:	3708      	adds	r7, #8
 8011804:	46bd      	mov	sp, r7
 8011806:	bd80      	pop	{r7, pc}
 8011808:	200017dc 	.word	0x200017dc

0801180c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801180c:	b480      	push	{r7}
 801180e:	b083      	sub	sp, #12
 8011810:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8011812:	2301      	movs	r3, #1
 8011814:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8011816:	79fb      	ldrb	r3, [r7, #7]
 8011818:	b2db      	uxtb	r3, r3
}
 801181a:	4618      	mov	r0, r3
 801181c:	370c      	adds	r7, #12
 801181e:	46bd      	mov	sp, r7
 8011820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011824:	4770      	bx	lr
	...

08011828 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b082      	sub	sp, #8
 801182c:	af00      	add	r7, sp, #0
 801182e:	4603      	mov	r3, r0
 8011830:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011832:	4b0b      	ldr	r3, [pc, #44]	; (8011860 <SD_CheckStatus+0x38>)
 8011834:	2201      	movs	r2, #1
 8011836:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011838:	f7ff ffca 	bl	80117d0 <BSP_SD_GetCardState>
 801183c:	4603      	mov	r3, r0
 801183e:	2b00      	cmp	r3, #0
 8011840:	d107      	bne.n	8011852 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011842:	4b07      	ldr	r3, [pc, #28]	; (8011860 <SD_CheckStatus+0x38>)
 8011844:	781b      	ldrb	r3, [r3, #0]
 8011846:	b2db      	uxtb	r3, r3
 8011848:	f023 0301 	bic.w	r3, r3, #1
 801184c:	b2da      	uxtb	r2, r3
 801184e:	4b04      	ldr	r3, [pc, #16]	; (8011860 <SD_CheckStatus+0x38>)
 8011850:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8011852:	4b03      	ldr	r3, [pc, #12]	; (8011860 <SD_CheckStatus+0x38>)
 8011854:	781b      	ldrb	r3, [r3, #0]
 8011856:	b2db      	uxtb	r3, r3
}
 8011858:	4618      	mov	r0, r3
 801185a:	3708      	adds	r7, #8
 801185c:	46bd      	mov	sp, r7
 801185e:	bd80      	pop	{r7, pc}
 8011860:	20000024 	.word	0x20000024

08011864 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011864:	b580      	push	{r7, lr}
 8011866:	b082      	sub	sp, #8
 8011868:	af00      	add	r7, sp, #0
 801186a:	4603      	mov	r3, r0
 801186c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 801186e:	4b0b      	ldr	r3, [pc, #44]	; (801189c <SD_initialize+0x38>)
 8011870:	2201      	movs	r2, #1
 8011872:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8011874:	f7ff ff58 	bl	8011728 <BSP_SD_Init>
 8011878:	4603      	mov	r3, r0
 801187a:	2b00      	cmp	r3, #0
 801187c:	d107      	bne.n	801188e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 801187e:	79fb      	ldrb	r3, [r7, #7]
 8011880:	4618      	mov	r0, r3
 8011882:	f7ff ffd1 	bl	8011828 <SD_CheckStatus>
 8011886:	4603      	mov	r3, r0
 8011888:	461a      	mov	r2, r3
 801188a:	4b04      	ldr	r3, [pc, #16]	; (801189c <SD_initialize+0x38>)
 801188c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 801188e:	4b03      	ldr	r3, [pc, #12]	; (801189c <SD_initialize+0x38>)
 8011890:	781b      	ldrb	r3, [r3, #0]
 8011892:	b2db      	uxtb	r3, r3
}
 8011894:	4618      	mov	r0, r3
 8011896:	3708      	adds	r7, #8
 8011898:	46bd      	mov	sp, r7
 801189a:	bd80      	pop	{r7, pc}
 801189c:	20000024 	.word	0x20000024

080118a0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b082      	sub	sp, #8
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	4603      	mov	r3, r0
 80118a8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80118aa:	79fb      	ldrb	r3, [r7, #7]
 80118ac:	4618      	mov	r0, r3
 80118ae:	f7ff ffbb 	bl	8011828 <SD_CheckStatus>
 80118b2:	4603      	mov	r3, r0
}
 80118b4:	4618      	mov	r0, r3
 80118b6:	3708      	adds	r7, #8
 80118b8:	46bd      	mov	sp, r7
 80118ba:	bd80      	pop	{r7, pc}

080118bc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80118bc:	b580      	push	{r7, lr}
 80118be:	b086      	sub	sp, #24
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	60b9      	str	r1, [r7, #8]
 80118c4:	607a      	str	r2, [r7, #4]
 80118c6:	603b      	str	r3, [r7, #0]
 80118c8:	4603      	mov	r3, r0
 80118ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80118cc:	2301      	movs	r3, #1
 80118ce:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80118d0:	f04f 33ff 	mov.w	r3, #4294967295
 80118d4:	683a      	ldr	r2, [r7, #0]
 80118d6:	6879      	ldr	r1, [r7, #4]
 80118d8:	68b8      	ldr	r0, [r7, #8]
 80118da:	f7ff ff3d 	bl	8011758 <BSP_SD_ReadBlocks>
 80118de:	4603      	mov	r3, r0
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d107      	bne.n	80118f4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80118e4:	bf00      	nop
 80118e6:	f7ff ff73 	bl	80117d0 <BSP_SD_GetCardState>
 80118ea:	4603      	mov	r3, r0
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d1fa      	bne.n	80118e6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80118f0:	2300      	movs	r3, #0
 80118f2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80118f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80118f6:	4618      	mov	r0, r3
 80118f8:	3718      	adds	r7, #24
 80118fa:	46bd      	mov	sp, r7
 80118fc:	bd80      	pop	{r7, pc}

080118fe <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80118fe:	b580      	push	{r7, lr}
 8011900:	b086      	sub	sp, #24
 8011902:	af00      	add	r7, sp, #0
 8011904:	60b9      	str	r1, [r7, #8]
 8011906:	607a      	str	r2, [r7, #4]
 8011908:	603b      	str	r3, [r7, #0]
 801190a:	4603      	mov	r3, r0
 801190c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801190e:	2301      	movs	r3, #1
 8011910:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8011912:	f04f 33ff 	mov.w	r3, #4294967295
 8011916:	683a      	ldr	r2, [r7, #0]
 8011918:	6879      	ldr	r1, [r7, #4]
 801191a:	68b8      	ldr	r0, [r7, #8]
 801191c:	f7ff ff3a 	bl	8011794 <BSP_SD_WriteBlocks>
 8011920:	4603      	mov	r3, r0
 8011922:	2b00      	cmp	r3, #0
 8011924:	d107      	bne.n	8011936 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8011926:	bf00      	nop
 8011928:	f7ff ff52 	bl	80117d0 <BSP_SD_GetCardState>
 801192c:	4603      	mov	r3, r0
 801192e:	2b00      	cmp	r3, #0
 8011930:	d1fa      	bne.n	8011928 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8011932:	2300      	movs	r3, #0
 8011934:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8011936:	7dfb      	ldrb	r3, [r7, #23]
}
 8011938:	4618      	mov	r0, r3
 801193a:	3718      	adds	r7, #24
 801193c:	46bd      	mov	sp, r7
 801193e:	bd80      	pop	{r7, pc}

08011940 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011940:	b580      	push	{r7, lr}
 8011942:	b08c      	sub	sp, #48	; 0x30
 8011944:	af00      	add	r7, sp, #0
 8011946:	4603      	mov	r3, r0
 8011948:	603a      	str	r2, [r7, #0]
 801194a:	71fb      	strb	r3, [r7, #7]
 801194c:	460b      	mov	r3, r1
 801194e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011950:	2301      	movs	r3, #1
 8011952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011956:	4b25      	ldr	r3, [pc, #148]	; (80119ec <SD_ioctl+0xac>)
 8011958:	781b      	ldrb	r3, [r3, #0]
 801195a:	b2db      	uxtb	r3, r3
 801195c:	f003 0301 	and.w	r3, r3, #1
 8011960:	2b00      	cmp	r3, #0
 8011962:	d001      	beq.n	8011968 <SD_ioctl+0x28>
 8011964:	2303      	movs	r3, #3
 8011966:	e03c      	b.n	80119e2 <SD_ioctl+0xa2>

  switch (cmd)
 8011968:	79bb      	ldrb	r3, [r7, #6]
 801196a:	2b03      	cmp	r3, #3
 801196c:	d834      	bhi.n	80119d8 <SD_ioctl+0x98>
 801196e:	a201      	add	r2, pc, #4	; (adr r2, 8011974 <SD_ioctl+0x34>)
 8011970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011974:	08011985 	.word	0x08011985
 8011978:	0801198d 	.word	0x0801198d
 801197c:	080119a5 	.word	0x080119a5
 8011980:	080119bf 	.word	0x080119bf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011984:	2300      	movs	r3, #0
 8011986:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801198a:	e028      	b.n	80119de <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801198c:	f107 030c 	add.w	r3, r7, #12
 8011990:	4618      	mov	r0, r3
 8011992:	f7ff ff2d 	bl	80117f0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011998:	683b      	ldr	r3, [r7, #0]
 801199a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801199c:	2300      	movs	r3, #0
 801199e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80119a2:	e01c      	b.n	80119de <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80119a4:	f107 030c 	add.w	r3, r7, #12
 80119a8:	4618      	mov	r0, r3
 80119aa:	f7ff ff21 	bl	80117f0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80119ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119b0:	b29a      	uxth	r2, r3
 80119b2:	683b      	ldr	r3, [r7, #0]
 80119b4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80119b6:	2300      	movs	r3, #0
 80119b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80119bc:	e00f      	b.n	80119de <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80119be:	f107 030c 	add.w	r3, r7, #12
 80119c2:	4618      	mov	r0, r3
 80119c4:	f7ff ff14 	bl	80117f0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80119c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119ca:	0a5a      	lsrs	r2, r3, #9
 80119cc:	683b      	ldr	r3, [r7, #0]
 80119ce:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80119d0:	2300      	movs	r3, #0
 80119d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80119d6:	e002      	b.n	80119de <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80119d8:	2304      	movs	r3, #4
 80119da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80119de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80119e2:	4618      	mov	r0, r3
 80119e4:	3730      	adds	r7, #48	; 0x30
 80119e6:	46bd      	mov	sp, r7
 80119e8:	bd80      	pop	{r7, pc}
 80119ea:	bf00      	nop
 80119ec:	20000024 	.word	0x20000024

080119f0 <RtcInt>:
#include "Utils.h"

uint8_t set_alarm_Time = 1;

void RtcInt()
{
 80119f0:	b480      	push	{r7}
 80119f2:	af00      	add	r7, sp, #0

	set_alarm_Time = 1;
 80119f4:	4b03      	ldr	r3, [pc, #12]	; (8011a04 <RtcInt+0x14>)
 80119f6:	2201      	movs	r2, #1
 80119f8:	701a      	strb	r2, [r3, #0]
	//Rtc_set_alarm();
}
 80119fa:	bf00      	nop
 80119fc:	46bd      	mov	sp, r7
 80119fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a02:	4770      	bx	lr
 8011a04:	20000025 	.word	0x20000025

08011a08 <Set_Date>:

void Set_Date(char *Datebuffer) {
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b088      	sub	sp, #32
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]

	RTC_DateTypeDef sDate;
	uint8_t date[10];
	uint8_t flag;
	flag = Parse_Date(Datebuffer, date);
 8011a10:	f107 030c 	add.w	r3, r7, #12
 8011a14:	4619      	mov	r1, r3
 8011a16:	6878      	ldr	r0, [r7, #4]
 8011a18:	f000 f8c6 	bl	8011ba8 <Parse_Date>
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	77fb      	strb	r3, [r7, #31]

	if (!flag) {
 8011a20:	7ffb      	ldrb	r3, [r7, #31]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d10c      	bne.n	8011a40 <Set_Date+0x38>
		sDate.Date = date[0];
 8011a26:	7b3b      	ldrb	r3, [r7, #12]
 8011a28:	76bb      	strb	r3, [r7, #26]
		sDate.Month = date[1];
 8011a2a:	7b7b      	ldrb	r3, [r7, #13]
 8011a2c:	767b      	strb	r3, [r7, #25]
		sDate.Year = date[2];
 8011a2e:	7bbb      	ldrb	r3, [r7, #14]
 8011a30:	76fb      	strb	r3, [r7, #27]
		HAL_RTC_SetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8011a32:	f107 0318 	add.w	r3, r7, #24
 8011a36:	2200      	movs	r2, #0
 8011a38:	4619      	mov	r1, r3
 8011a3a:	4805      	ldr	r0, [pc, #20]	; (8011a50 <Set_Date+0x48>)
 8011a3c:	f7f7 f856 	bl	8008aec <HAL_RTC_SetDate>
	}
HAL_Delay(500);
 8011a40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011a44:	f7f1 fd54 	bl	80034f0 <HAL_Delay>
}
 8011a48:	bf00      	nop
 8011a4a:	3720      	adds	r7, #32
 8011a4c:	46bd      	mov	sp, r7
 8011a4e:	bd80      	pop	{r7, pc}
 8011a50:	200017bc 	.word	0x200017bc

08011a54 <Rtc_set_alarm>:

/*
 * this sets alarm according to saved intervals
 */
void Rtc_set_alarm()
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b092      	sub	sp, #72	; 0x48
 8011a58:	af00      	add	r7, sp, #0
uint16_t minute;



if(set_alarm_Time)
 8011a5a:	4b37      	ldr	r3, [pc, #220]	; (8011b38 <Rtc_set_alarm+0xe4>)
 8011a5c:	781b      	ldrb	r3, [r3, #0]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d066      	beq.n	8011b30 <Rtc_set_alarm+0xdc>
{
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 8011a62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011a66:	2200      	movs	r2, #0
 8011a68:	4619      	mov	r1, r3
 8011a6a:	4834      	ldr	r0, [pc, #208]	; (8011b3c <Rtc_set_alarm+0xe8>)
 8011a6c:	f7f6 ffe0 	bl	8008a30 <HAL_RTC_GetTime>
	RTC_DateTypeDef sDate;
    HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8011a70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011a74:	2200      	movs	r2, #0
 8011a76:	4619      	mov	r1, r3
 8011a78:	4830      	ldr	r0, [pc, #192]	; (8011b3c <Rtc_set_alarm+0xe8>)
 8011a7a:	f7f7 f8bb 	bl	8008bf4 <HAL_RTC_GetDate>


    minute = gTime.Minutes + _Flash_Packet.Time_Interval;
 8011a7e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8011a82:	b29a      	uxth	r2, r3
 8011a84:	4b2e      	ldr	r3, [pc, #184]	; (8011b40 <Rtc_set_alarm+0xec>)
 8011a86:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8011a8a:	b29b      	uxth	r3, r3
 8011a8c:	4413      	add	r3, r2
 8011a8e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    if(minute > 59)
 8011a92:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011a96:	2b3b      	cmp	r3, #59	; 0x3b
 8011a98:	d90b      	bls.n	8011ab2 <Rtc_set_alarm+0x5e>
    {
    	minute = minute%_Flash_Packet.Time_Interval;
 8011a9a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011a9e:	4a28      	ldr	r2, [pc, #160]	; (8011b40 <Rtc_set_alarm+0xec>)
 8011aa0:	f8d2 20c8 	ldr.w	r2, [r2, #200]	; 0xc8
 8011aa4:	fbb3 f1f2 	udiv	r1, r3, r2
 8011aa8:	fb01 f202 	mul.w	r2, r1, r2
 8011aac:	1a9b      	subs	r3, r3, r2
 8011aae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    }
      RTC_AlarmTypeDef sAlarm = {0};
 8011ab2:	1d3b      	adds	r3, r7, #4
 8011ab4:	2228      	movs	r2, #40	; 0x28
 8011ab6:	2100      	movs	r1, #0
 8011ab8:	4618      	mov	r0, r3
 8011aba:	f009 fa25 	bl	801af08 <memset>
	  sAlarm.AlarmTime.Hours = 0;
 8011abe:	2300      	movs	r3, #0
 8011ac0:	713b      	strb	r3, [r7, #4]
	  sAlarm.AlarmTime.Minutes = minute;
 8011ac2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011ac6:	b2db      	uxtb	r3, r3
 8011ac8:	717b      	strb	r3, [r7, #5]
	  sAlarm.AlarmTime.Seconds = 0;
 8011aca:	2300      	movs	r3, #0
 8011acc:	71bb      	strb	r3, [r7, #6]
	  sAlarm.AlarmTime.SubSeconds = 0;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	60bb      	str	r3, [r7, #8]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	613b      	str	r3, [r7, #16]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	617b      	str	r3, [r7, #20]
	  sAlarm.AlarmMask = RTC_ALARMMASK_SECONDS| RTC_ALARMMASK_HOURS | RTC_ALARMMASK_DATEWEEKDAY;
 8011ada:	4b1a      	ldr	r3, [pc, #104]	; (8011b44 <Rtc_set_alarm+0xf0>)
 8011adc:	61bb      	str	r3, [r7, #24]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8011ade:	2300      	movs	r3, #0
 8011ae0:	61fb      	str	r3, [r7, #28]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	623b      	str	r3, [r7, #32]
	  sAlarm.AlarmDateWeekDay = 1;
 8011ae6:	2301      	movs	r3, #1
 8011ae8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	  sAlarm.Alarm = RTC_ALARM_A;
 8011aec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011af0:	62bb      	str	r3, [r7, #40]	; 0x28
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8011af2:	1d3b      	adds	r3, r7, #4
 8011af4:	2200      	movs	r2, #0
 8011af6:	4619      	mov	r1, r3
 8011af8:	4810      	ldr	r0, [pc, #64]	; (8011b3c <Rtc_set_alarm+0xe8>)
 8011afa:	f7f7 f8cb 	bl	8008c94 <HAL_RTC_SetAlarm_IT>
 8011afe:	4603      	mov	r3, r0
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d001      	beq.n	8011b08 <Rtc_set_alarm+0xb4>
	  {
	    Error_Handler();
 8011b04:	f7f0 ffaa 	bl	8002a5c <Error_Handler>
	  }

	  __HAL_RTC_ALARM_ENABLE_IT (&hrtc, RTC_IT_ALRA);
 8011b08:	4b0c      	ldr	r3, [pc, #48]	; (8011b3c <Rtc_set_alarm+0xe8>)
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	689a      	ldr	r2, [r3, #8]
 8011b0e:	4b0b      	ldr	r3, [pc, #44]	; (8011b3c <Rtc_set_alarm+0xe8>)
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011b16:	609a      	str	r2, [r3, #8]
	  __HAL_RTC_ALARM_CLEAR_FLAG (&hrtc, RTC_IT_ALRA);
 8011b18:	4b08      	ldr	r3, [pc, #32]	; (8011b3c <Rtc_set_alarm+0xe8>)
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	68db      	ldr	r3, [r3, #12]
 8011b1e:	b2da      	uxtb	r2, r3
 8011b20:	4b06      	ldr	r3, [pc, #24]	; (8011b3c <Rtc_set_alarm+0xe8>)
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	f462 5284 	orn	r2, r2, #4224	; 0x1080
 8011b28:	60da      	str	r2, [r3, #12]


	  set_alarm_Time = 0;
 8011b2a:	4b03      	ldr	r3, [pc, #12]	; (8011b38 <Rtc_set_alarm+0xe4>)
 8011b2c:	2200      	movs	r2, #0
 8011b2e:	701a      	strb	r2, [r3, #0]

		//HAL_UART_Transmit(&huart1, (uint8_t*) "Interrupt\r\n",11, 1000);
}

}
 8011b30:	bf00      	nop
 8011b32:	3748      	adds	r7, #72	; 0x48
 8011b34:	46bd      	mov	sp, r7
 8011b36:	bd80      	pop	{r7, pc}
 8011b38:	20000025 	.word	0x20000025
 8011b3c:	200017bc 	.word	0x200017bc
 8011b40:	200012d4 	.word	0x200012d4
 8011b44:	80800080 	.word	0x80800080

08011b48 <Set_Time>:
void Set_Time(char *Timebuffer) {
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b08c      	sub	sp, #48	; 0x30
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime;
	uint8_t time[10];
	uint8_t flag;
	flag = Parse_Time(Timebuffer, time);
 8011b50:	f107 030c 	add.w	r3, r7, #12
 8011b54:	4619      	mov	r1, r3
 8011b56:	6878      	ldr	r0, [r7, #4]
 8011b58:	f000 f890 	bl	8011c7c <Parse_Time>
 8011b5c:	4603      	mov	r3, r0
 8011b5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	HAL_StatusTypeDef status;
	if (!flag) {
 8011b62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d113      	bne.n	8011b92 <Set_Time+0x4a>
		sTime.Hours = time[0];
 8011b6a:	7b3b      	ldrb	r3, [r7, #12]
 8011b6c:	763b      	strb	r3, [r7, #24]
		sTime.Minutes = time[1];
 8011b6e:	7b7b      	ldrb	r3, [r7, #13]
 8011b70:	767b      	strb	r3, [r7, #25]
		sTime.Seconds = time[2];
 8011b72:	7bbb      	ldrb	r3, [r7, #14]
 8011b74:	76bb      	strb	r3, [r7, #26]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8011b76:	2300      	movs	r3, #0
 8011b78:	627b      	str	r3, [r7, #36]	; 0x24
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	62bb      	str	r3, [r7, #40]	; 0x28
		status = HAL_RTC_SetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 8011b7e:	f107 0318 	add.w	r3, r7, #24
 8011b82:	2200      	movs	r2, #0
 8011b84:	4619      	mov	r1, r3
 8011b86:	4807      	ldr	r0, [pc, #28]	; (8011ba4 <Set_Time+0x5c>)
 8011b88:	f7f6 feb8 	bl	80088fc <HAL_RTC_SetTime>
 8011b8c:	4603      	mov	r3, r0
 8011b8e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	}

	HAL_Delay(500);
 8011b92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011b96:	f7f1 fcab 	bl	80034f0 <HAL_Delay>

}
 8011b9a:	bf00      	nop
 8011b9c:	3730      	adds	r7, #48	; 0x30
 8011b9e:	46bd      	mov	sp, r7
 8011ba0:	bd80      	pop	{r7, pc}
 8011ba2:	bf00      	nop
 8011ba4:	200017bc 	.word	0x200017bc

08011ba8 <Parse_Date>:
 * therefore delimiter is ':'
 * we will extract date and save them in there respective variable
 * return 1 = buffer empty 0 = success
 */
uint8_t Parse_Date(char *Datebuffer,uint8_t *date)
{
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	b084      	sub	sp, #16
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]
 8011bb0:	6039      	str	r1, [r7, #0]
	uint16_t i =0;
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	81fb      	strh	r3, [r7, #14]
	int16_t val = 0;
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	81bb      	strh	r3, [r7, #12]
	char *ptr = strtok(Datebuffer, ":");
 8011bba:	492e      	ldr	r1, [pc, #184]	; (8011c74 <Parse_Date+0xcc>)
 8011bbc:	6878      	ldr	r0, [r7, #4]
 8011bbe:	f00b f81f 	bl	801cc00 <strtok>
 8011bc2:	60b8      	str	r0, [r7, #8]

	if(ptr == NULL)
 8011bc4:	68bb      	ldr	r3, [r7, #8]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d14b      	bne.n	8011c62 <Parse_Date+0xba>
		{
			return 1;
 8011bca:	2301      	movs	r3, #1
 8011bcc:	e04d      	b.n	8011c6a <Parse_Date+0xc2>

	while(ptr != NULL)
	{


			val = atoi(ptr);
 8011bce:	68b8      	ldr	r0, [r7, #8]
 8011bd0:	f009 f8c2 	bl	801ad58 <atoi>
 8011bd4:	4603      	mov	r3, r0
 8011bd6:	81bb      	strh	r3, [r7, #12]
			if(i == 0 && (val > 31 || val <=0))
 8011bd8:	89fb      	ldrh	r3, [r7, #14]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d10a      	bne.n	8011bf4 <Parse_Date+0x4c>
 8011bde:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011be2:	2b1f      	cmp	r3, #31
 8011be4:	dc03      	bgt.n	8011bee <Parse_Date+0x46>
 8011be6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	dc02      	bgt.n	8011bf4 <Parse_Date+0x4c>
			{
				val= 1;
 8011bee:	2301      	movs	r3, #1
 8011bf0:	81bb      	strh	r3, [r7, #12]
 8011bf2:	e028      	b.n	8011c46 <Parse_Date+0x9e>
			}
			else if(i == 1 && (val >  12 || val <=0))
 8011bf4:	89fb      	ldrh	r3, [r7, #14]
 8011bf6:	2b01      	cmp	r3, #1
 8011bf8:	d10a      	bne.n	8011c10 <Parse_Date+0x68>
 8011bfa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011bfe:	2b0c      	cmp	r3, #12
 8011c00:	dc03      	bgt.n	8011c0a <Parse_Date+0x62>
 8011c02:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	dc02      	bgt.n	8011c10 <Parse_Date+0x68>
			{
				val= 1;
 8011c0a:	2301      	movs	r3, #1
 8011c0c:	81bb      	strh	r3, [r7, #12]
 8011c0e:	e01a      	b.n	8011c46 <Parse_Date+0x9e>
			}
			else if(i == 2 && val > 1000)
 8011c10:	89fb      	ldrh	r3, [r7, #14]
 8011c12:	2b02      	cmp	r3, #2
 8011c14:	d112      	bne.n	8011c3c <Parse_Date+0x94>
 8011c16:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011c1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011c1e:	dd0d      	ble.n	8011c3c <Parse_Date+0x94>
			{
				val=val%100;
 8011c20:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011c24:	4a14      	ldr	r2, [pc, #80]	; (8011c78 <Parse_Date+0xd0>)
 8011c26:	fb82 1203 	smull	r1, r2, r2, r3
 8011c2a:	1151      	asrs	r1, r2, #5
 8011c2c:	17da      	asrs	r2, r3, #31
 8011c2e:	1a8a      	subs	r2, r1, r2
 8011c30:	2164      	movs	r1, #100	; 0x64
 8011c32:	fb01 f202 	mul.w	r2, r1, r2
 8011c36:	1a9b      	subs	r3, r3, r2
 8011c38:	81bb      	strh	r3, [r7, #12]
 8011c3a:	e004      	b.n	8011c46 <Parse_Date+0x9e>
			}
			else if(i > 2)
 8011c3c:	89fb      	ldrh	r3, [r7, #14]
 8011c3e:	2b02      	cmp	r3, #2
 8011c40:	d901      	bls.n	8011c46 <Parse_Date+0x9e>
			{
				return 1;
 8011c42:	2301      	movs	r3, #1
 8011c44:	e011      	b.n	8011c6a <Parse_Date+0xc2>
			}


		   date[i] =val;
 8011c46:	89fb      	ldrh	r3, [r7, #14]
 8011c48:	683a      	ldr	r2, [r7, #0]
 8011c4a:	4413      	add	r3, r2
 8011c4c:	89ba      	ldrh	r2, [r7, #12]
 8011c4e:	b2d2      	uxtb	r2, r2
 8011c50:	701a      	strb	r2, [r3, #0]
		//printf("'%s'\n", ptr);
		ptr = strtok(NULL, ":");
 8011c52:	4908      	ldr	r1, [pc, #32]	; (8011c74 <Parse_Date+0xcc>)
 8011c54:	2000      	movs	r0, #0
 8011c56:	f00a ffd3 	bl	801cc00 <strtok>
 8011c5a:	60b8      	str	r0, [r7, #8]
		i++;
 8011c5c:	89fb      	ldrh	r3, [r7, #14]
 8011c5e:	3301      	adds	r3, #1
 8011c60:	81fb      	strh	r3, [r7, #14]
	while(ptr != NULL)
 8011c62:	68bb      	ldr	r3, [r7, #8]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d1b2      	bne.n	8011bce <Parse_Date+0x26>
	}

	}

	return 0;
 8011c68:	2300      	movs	r3, #0

}
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	3710      	adds	r7, #16
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	bd80      	pop	{r7, pc}
 8011c72:	bf00      	nop
 8011c74:	08020ba8 	.word	0x08020ba8
 8011c78:	51eb851f 	.word	0x51eb851f

08011c7c <Parse_Time>:
 * therefore delimiter is ':'
 * we will extract time and save them in there respective variable
 * return 1 = buffer empty 0 = success
 */
uint8_t Parse_Time(char *Timebuffer,uint8_t *time)
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b084      	sub	sp, #16
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
 8011c84:	6039      	str	r1, [r7, #0]
	uint16_t i =0;
 8011c86:	2300      	movs	r3, #0
 8011c88:	81fb      	strh	r3, [r7, #14]
		int16_t val = 0;
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	81bb      	strh	r3, [r7, #12]
		char *ptr = strtok(Timebuffer, ":");
 8011c8e:	492a      	ldr	r1, [pc, #168]	; (8011d38 <Parse_Time+0xbc>)
 8011c90:	6878      	ldr	r0, [r7, #4]
 8011c92:	f00a ffb5 	bl	801cc00 <strtok>
 8011c96:	60b8      	str	r0, [r7, #8]

		if(ptr == NULL)
 8011c98:	68bb      	ldr	r3, [r7, #8]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d143      	bne.n	8011d26 <Parse_Time+0xaa>
			{
				return 1;
 8011c9e:	2301      	movs	r3, #1
 8011ca0:	e045      	b.n	8011d2e <Parse_Time+0xb2>

		while(ptr != NULL)
		{


				val = atoi(ptr);
 8011ca2:	68b8      	ldr	r0, [r7, #8]
 8011ca4:	f009 f858 	bl	801ad58 <atoi>
 8011ca8:	4603      	mov	r3, r0
 8011caa:	81bb      	strh	r3, [r7, #12]
				if(i == 0 && (val > 24|| val <0))
 8011cac:	89fb      	ldrh	r3, [r7, #14]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d10a      	bne.n	8011cc8 <Parse_Time+0x4c>
 8011cb2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011cb6:	2b18      	cmp	r3, #24
 8011cb8:	dc03      	bgt.n	8011cc2 <Parse_Time+0x46>
 8011cba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	da02      	bge.n	8011cc8 <Parse_Time+0x4c>
				{
					val= 24;
 8011cc2:	2318      	movs	r3, #24
 8011cc4:	81bb      	strh	r3, [r7, #12]
 8011cc6:	e020      	b.n	8011d0a <Parse_Time+0x8e>
				}
				else if(i == 1 && (val >  59 || val <0))
 8011cc8:	89fb      	ldrh	r3, [r7, #14]
 8011cca:	2b01      	cmp	r3, #1
 8011ccc:	d10a      	bne.n	8011ce4 <Parse_Time+0x68>
 8011cce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011cd2:	2b3b      	cmp	r3, #59	; 0x3b
 8011cd4:	dc03      	bgt.n	8011cde <Parse_Time+0x62>
 8011cd6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	da02      	bge.n	8011ce4 <Parse_Time+0x68>
				{
					val= 59;
 8011cde:	233b      	movs	r3, #59	; 0x3b
 8011ce0:	81bb      	strh	r3, [r7, #12]
 8011ce2:	e012      	b.n	8011d0a <Parse_Time+0x8e>
				}
				else if(i == 2 && (val > 59 || val <0))
 8011ce4:	89fb      	ldrh	r3, [r7, #14]
 8011ce6:	2b02      	cmp	r3, #2
 8011ce8:	d10a      	bne.n	8011d00 <Parse_Time+0x84>
 8011cea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011cee:	2b3b      	cmp	r3, #59	; 0x3b
 8011cf0:	dc03      	bgt.n	8011cfa <Parse_Time+0x7e>
 8011cf2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	da02      	bge.n	8011d00 <Parse_Time+0x84>
				{
					val=59;
 8011cfa:	233b      	movs	r3, #59	; 0x3b
 8011cfc:	81bb      	strh	r3, [r7, #12]
 8011cfe:	e004      	b.n	8011d0a <Parse_Time+0x8e>
				}
				else if(i > 2)
 8011d00:	89fb      	ldrh	r3, [r7, #14]
 8011d02:	2b02      	cmp	r3, #2
 8011d04:	d901      	bls.n	8011d0a <Parse_Time+0x8e>
				{
					return 1;
 8011d06:	2301      	movs	r3, #1
 8011d08:	e011      	b.n	8011d2e <Parse_Time+0xb2>
				}


				time[i] =val;
 8011d0a:	89fb      	ldrh	r3, [r7, #14]
 8011d0c:	683a      	ldr	r2, [r7, #0]
 8011d0e:	4413      	add	r3, r2
 8011d10:	89ba      	ldrh	r2, [r7, #12]
 8011d12:	b2d2      	uxtb	r2, r2
 8011d14:	701a      	strb	r2, [r3, #0]
			//printf("'%s'\n", ptr);
			ptr = strtok(NULL, ":");
 8011d16:	4908      	ldr	r1, [pc, #32]	; (8011d38 <Parse_Time+0xbc>)
 8011d18:	2000      	movs	r0, #0
 8011d1a:	f00a ff71 	bl	801cc00 <strtok>
 8011d1e:	60b8      	str	r0, [r7, #8]
			i++;
 8011d20:	89fb      	ldrh	r3, [r7, #14]
 8011d22:	3301      	adds	r3, #1
 8011d24:	81fb      	strh	r3, [r7, #14]
		while(ptr != NULL)
 8011d26:	68bb      	ldr	r3, [r7, #8]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d1ba      	bne.n	8011ca2 <Parse_Time+0x26>
		}

		}

		return 0;
 8011d2c:	2300      	movs	r3, #0
}
 8011d2e:	4618      	mov	r0, r3
 8011d30:	3710      	adds	r7, #16
 8011d32:	46bd      	mov	sp, r7
 8011d34:	bd80      	pop	{r7, pc}
 8011d36:	bf00      	nop
 8011d38:	08020ba8 	.word	0x08020ba8

08011d3c <CharToHexasc>:


 void CharToHexasc(uint8_t *pPos, uint8_t Wert)
{
 8011d3c:	b480      	push	{r7}
 8011d3e:	b083      	sub	sp, #12
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
 8011d44:	460b      	mov	r3, r1
 8011d46:	70fb      	strb	r3, [r7, #3]
      *pPos++ = kaHexAsc[Wert >> 4];
 8011d48:	78fb      	ldrb	r3, [r7, #3]
 8011d4a:	091b      	lsrs	r3, r3, #4
 8011d4c:	b2db      	uxtb	r3, r3
 8011d4e:	4619      	mov	r1, r3
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	1c5a      	adds	r2, r3, #1
 8011d54:	607a      	str	r2, [r7, #4]
 8011d56:	4a08      	ldr	r2, [pc, #32]	; (8011d78 <CharToHexasc+0x3c>)
 8011d58:	5c52      	ldrb	r2, [r2, r1]
 8011d5a:	701a      	strb	r2, [r3, #0]
      *pPos = kaHexAsc[Wert & 0x0f];
 8011d5c:	78fb      	ldrb	r3, [r7, #3]
 8011d5e:	f003 030f 	and.w	r3, r3, #15
 8011d62:	4a05      	ldr	r2, [pc, #20]	; (8011d78 <CharToHexasc+0x3c>)
 8011d64:	5cd2      	ldrb	r2, [r2, r3]
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	701a      	strb	r2, [r3, #0]
}
 8011d6a:	bf00      	nop
 8011d6c:	370c      	adds	r7, #12
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d74:	4770      	bx	lr
 8011d76:	bf00      	nop
 8011d78:	080213fc 	.word	0x080213fc

08011d7c <adc_InitOneShotMode>:
#define adc_Start()	   HAL_ADC_Start(&hadc1)
#define adc_Stop()	    HAL_ADC_Stop(&hadc1)
#define adc_Disable() HAL_ADC_DeInit(&hadc1)

static void adc_InitOneShotMode ()
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b088      	sub	sp, #32
 8011d80:	af00      	add	r7, sp, #0
	adc_Disable();
 8011d82:	4830      	ldr	r0, [pc, #192]	; (8011e44 <adc_InitOneShotMode+0xc8>)
 8011d84:	f7f1 fc5f 	bl	8003646 <HAL_ADC_DeInit>

	 ADC_MultiModeTypeDef multimode = {0};
 8011d88:	f107 0314 	add.w	r3, r7, #20
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	601a      	str	r2, [r3, #0]
 8011d90:	605a      	str	r2, [r3, #4]
 8011d92:	609a      	str	r2, [r3, #8]
	  hadc1.Instance = ADC1;
 8011d94:	4b2b      	ldr	r3, [pc, #172]	; (8011e44 <adc_InitOneShotMode+0xc8>)
 8011d96:	4a2c      	ldr	r2, [pc, #176]	; (8011e48 <adc_InitOneShotMode+0xcc>)
 8011d98:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8011d9a:	4b2a      	ldr	r3, [pc, #168]	; (8011e44 <adc_InitOneShotMode+0xc8>)
 8011d9c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011da0:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8011da2:	4b28      	ldr	r3, [pc, #160]	; (8011e44 <adc_InitOneShotMode+0xc8>)
 8011da4:	2200      	movs	r2, #0
 8011da6:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = DISABLE;
 8011da8:	4b26      	ldr	r3, [pc, #152]	; (8011e44 <adc_InitOneShotMode+0xc8>)
 8011daa:	2200      	movs	r2, #0
 8011dac:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 8011dae:	4b25      	ldr	r3, [pc, #148]	; (8011e44 <adc_InitOneShotMode+0xc8>)
 8011db0:	2200      	movs	r2, #0
 8011db2:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8011db4:	4b23      	ldr	r3, [pc, #140]	; (8011e44 <adc_InitOneShotMode+0xc8>)
 8011db6:	2200      	movs	r2, #0
 8011db8:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8011dbc:	4b21      	ldr	r3, [pc, #132]	; (8011e44 <adc_InitOneShotMode+0xc8>)
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8011dc2:	4b20      	ldr	r3, [pc, #128]	; (8011e44 <adc_InitOneShotMode+0xc8>)
 8011dc4:	4a21      	ldr	r2, [pc, #132]	; (8011e4c <adc_InitOneShotMode+0xd0>)
 8011dc6:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8011dc8:	4b1e      	ldr	r3, [pc, #120]	; (8011e44 <adc_InitOneShotMode+0xc8>)
 8011dca:	2200      	movs	r2, #0
 8011dcc:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 8011dce:	4b1d      	ldr	r3, [pc, #116]	; (8011e44 <adc_InitOneShotMode+0xc8>)
 8011dd0:	2201      	movs	r2, #1
 8011dd2:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 8011dd4:	4b1b      	ldr	r3, [pc, #108]	; (8011e44 <adc_InitOneShotMode+0xc8>)
 8011dd6:	2200      	movs	r2, #0
 8011dd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8011ddc:	4b19      	ldr	r3, [pc, #100]	; (8011e44 <adc_InitOneShotMode+0xc8>)
 8011dde:	2201      	movs	r2, #1
 8011de0:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8011de2:	4818      	ldr	r0, [pc, #96]	; (8011e44 <adc_InitOneShotMode+0xc8>)
 8011de4:	f7f1 fbec 	bl	80035c0 <HAL_ADC_Init>
 8011de8:	4603      	mov	r3, r0
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d001      	beq.n	8011df2 <adc_InitOneShotMode+0x76>
	  {
	    Error_Handler();
 8011dee:	f7f0 fe35 	bl	8002a5c <Error_Handler>
	  }


	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 8011df2:	2300      	movs	r3, #0
 8011df4:	617b      	str	r3, [r7, #20]
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8011df6:	f107 0314 	add.w	r3, r7, #20
 8011dfa:	4619      	mov	r1, r3
 8011dfc:	4811      	ldr	r0, [pc, #68]	; (8011e44 <adc_InitOneShotMode+0xc8>)
 8011dfe:	f7f1 fff3 	bl	8003de8 <HAL_ADCEx_MultiModeConfigChannel>
 8011e02:	4603      	mov	r3, r0
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d001      	beq.n	8011e0c <adc_InitOneShotMode+0x90>
	  {
	    Error_Handler();
 8011e08:	f7f0 fe28 	bl	8002a5c <Error_Handler>
	  }

		ADC_ChannelConfTypeDef sConfig = {0};
 8011e0c:	1d3b      	adds	r3, r7, #4
 8011e0e:	2200      	movs	r2, #0
 8011e10:	601a      	str	r2, [r3, #0]
 8011e12:	605a      	str	r2, [r3, #4]
 8011e14:	609a      	str	r2, [r3, #8]
 8011e16:	60da      	str	r2, [r3, #12]
			  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
			  */
		sConfig.Channel = ADC_CHANNEL_10;
 8011e18:	230a      	movs	r3, #10
 8011e1a:	607b      	str	r3, [r7, #4]
		  sConfig.Rank = 1;
 8011e1c:	2301      	movs	r3, #1
 8011e1e:	60bb      	str	r3, [r7, #8]
		  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8011e20:	2302      	movs	r3, #2
 8011e22:	60fb      	str	r3, [r7, #12]
		  sConfig.Offset = 0;
 8011e24:	2300      	movs	r3, #0
 8011e26:	613b      	str	r3, [r7, #16]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8011e28:	1d3b      	adds	r3, r7, #4
 8011e2a:	4619      	mov	r1, r3
 8011e2c:	4805      	ldr	r0, [pc, #20]	; (8011e44 <adc_InitOneShotMode+0xc8>)
 8011e2e:	f7f1 fdbd 	bl	80039ac <HAL_ADC_ConfigChannel>
 8011e32:	4603      	mov	r3, r0
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d001      	beq.n	8011e3c <adc_InitOneShotMode+0xc0>
		  {
		    Error_Handler();
 8011e38:	f7f0 fe10 	bl	8002a5c <Error_Handler>
		  }



}
 8011e3c:	bf00      	nop
 8011e3e:	3720      	adds	r7, #32
 8011e40:	46bd      	mov	sp, r7
 8011e42:	bd80      	pop	{r7, pc}
 8011e44:	20001720 	.word	0x20001720
 8011e48:	40012000 	.word	0x40012000
 8011e4c:	0f000001 	.word	0x0f000001

08011e50 <adc_Getval>:

static uint32_t adc_Getval ()
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	af00      	add	r7, sp, #0

	return HAL_ADC_GetValue(&hadc1);
 8011e54:	4802      	ldr	r0, [pc, #8]	; (8011e60 <adc_Getval+0x10>)
 8011e56:	f7f1 fd9b 	bl	8003990 <HAL_ADC_GetValue>
 8011e5a:	4603      	mov	r3, r0

}
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	bd80      	pop	{r7, pc}
 8011e60:	20001720 	.word	0x20001720

08011e64 <adc_Measure>:

uint8_t adc_Measure (float *bat_volt)
{
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b084      	sub	sp, #16
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	6078      	str	r0, [r7, #4]
	uint32_t val;
	adc_InitOneShotMode();
 8011e6c:	f7ff ff86 	bl	8011d7c <adc_InitOneShotMode>
	HAL_Delay(1);
 8011e70:	2001      	movs	r0, #1
 8011e72:	f7f1 fb3d 	bl	80034f0 <HAL_Delay>
	adc_Start();
 8011e76:	483e      	ldr	r0, [pc, #248]	; (8011f70 <adc_Measure+0x10c>)
 8011e78:	f7f1 fc18 	bl	80036ac <HAL_ADC_Start>
	HAL_Delay(1);
 8011e7c:	2001      	movs	r0, #1
 8011e7e:	f7f1 fb37 	bl	80034f0 <HAL_Delay>

	if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8011e82:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011e86:	483a      	ldr	r0, [pc, #232]	; (8011f70 <adc_Measure+0x10c>)
 8011e88:	f7f1 fcf7 	bl	800387a <HAL_ADC_PollForConversion>
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d01d      	beq.n	8011ece <adc_Measure+0x6a>
		{
		   HAL_Delay(1);
 8011e92:	2001      	movs	r0, #1
 8011e94:	f7f1 fb2c 	bl	80034f0 <HAL_Delay>
		   adc_Start();
 8011e98:	4835      	ldr	r0, [pc, #212]	; (8011f70 <adc_Measure+0x10c>)
 8011e9a:	f7f1 fc07 	bl	80036ac <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8011e9e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011ea2:	4833      	ldr	r0, [pc, #204]	; (8011f70 <adc_Measure+0x10c>)
 8011ea4:	f7f1 fce9 	bl	800387a <HAL_ADC_PollForConversion>
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d00f      	beq.n	8011ece <adc_Measure+0x6a>
			{
				HAL_Delay(1);
 8011eae:	2001      	movs	r0, #1
 8011eb0:	f7f1 fb1e 	bl	80034f0 <HAL_Delay>
				adc_Start();
 8011eb4:	482e      	ldr	r0, [pc, #184]	; (8011f70 <adc_Measure+0x10c>)
 8011eb6:	f7f1 fbf9 	bl	80036ac <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8011eba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011ebe:	482c      	ldr	r0, [pc, #176]	; (8011f70 <adc_Measure+0x10c>)
 8011ec0:	f7f1 fcdb 	bl	800387a <HAL_ADC_PollForConversion>
 8011ec4:	4603      	mov	r3, r0
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d001      	beq.n	8011ece <adc_Measure+0x6a>
				{
					return 0;
 8011eca:	2300      	movs	r3, #0
 8011ecc:	e04b      	b.n	8011f66 <adc_Measure+0x102>
				}
			}
		}

	adc_Stop();
 8011ece:	4828      	ldr	r0, [pc, #160]	; (8011f70 <adc_Measure+0x10c>)
 8011ed0:	f7f1 fca0 	bl	8003814 <HAL_ADC_Stop>

	val = adc_Getval();
 8011ed4:	f7ff ffbc 	bl	8011e50 <adc_Getval>
 8011ed8:	60f8      	str	r0, [r7, #12]

	HAL_Delay(1);
 8011eda:	2001      	movs	r0, #1
 8011edc:	f7f1 fb08 	bl	80034f0 <HAL_Delay>
	adc_Start();
 8011ee0:	4823      	ldr	r0, [pc, #140]	; (8011f70 <adc_Measure+0x10c>)
 8011ee2:	f7f1 fbe3 	bl	80036ac <HAL_ADC_Start>
	HAL_Delay(1);
 8011ee6:	2001      	movs	r0, #1
 8011ee8:	f7f1 fb02 	bl	80034f0 <HAL_Delay>

	if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8011eec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011ef0:	481f      	ldr	r0, [pc, #124]	; (8011f70 <adc_Measure+0x10c>)
 8011ef2:	f7f1 fcc2 	bl	800387a <HAL_ADC_PollForConversion>
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d01d      	beq.n	8011f38 <adc_Measure+0xd4>
		{
		   HAL_Delay(1);
 8011efc:	2001      	movs	r0, #1
 8011efe:	f7f1 faf7 	bl	80034f0 <HAL_Delay>
		   adc_Start();
 8011f02:	481b      	ldr	r0, [pc, #108]	; (8011f70 <adc_Measure+0x10c>)
 8011f04:	f7f1 fbd2 	bl	80036ac <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8011f08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011f0c:	4818      	ldr	r0, [pc, #96]	; (8011f70 <adc_Measure+0x10c>)
 8011f0e:	f7f1 fcb4 	bl	800387a <HAL_ADC_PollForConversion>
 8011f12:	4603      	mov	r3, r0
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d00f      	beq.n	8011f38 <adc_Measure+0xd4>
			{
				HAL_Delay(1);
 8011f18:	2001      	movs	r0, #1
 8011f1a:	f7f1 fae9 	bl	80034f0 <HAL_Delay>
				adc_Start();
 8011f1e:	4814      	ldr	r0, [pc, #80]	; (8011f70 <adc_Measure+0x10c>)
 8011f20:	f7f1 fbc4 	bl	80036ac <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8011f24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011f28:	4811      	ldr	r0, [pc, #68]	; (8011f70 <adc_Measure+0x10c>)
 8011f2a:	f7f1 fca6 	bl	800387a <HAL_ADC_PollForConversion>
 8011f2e:	4603      	mov	r3, r0
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d001      	beq.n	8011f38 <adc_Measure+0xd4>
				{
					return 0;
 8011f34:	2300      	movs	r3, #0
 8011f36:	e016      	b.n	8011f66 <adc_Measure+0x102>
				}
			}
		}

	adc_Stop();
 8011f38:	480d      	ldr	r0, [pc, #52]	; (8011f70 <adc_Measure+0x10c>)
 8011f3a:	f7f1 fc6b 	bl	8003814 <HAL_ADC_Stop>

	val =(uint32_t)((val + adc_Getval()) / 2);	//Read and average ADC
 8011f3e:	f7ff ff87 	bl	8011e50 <adc_Getval>
 8011f42:	4602      	mov	r2, r0
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	4413      	add	r3, r2
 8011f48:	085b      	lsrs	r3, r3, #1
 8011f4a:	60fb      	str	r3, [r7, #12]


	// Max = 3.3Vref * 365k / 100k = 12.045V

	*bat_volt = (float) val * (12.045f / 4096.0f);	// 12 bit
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	ee07 3a90 	vmov	s15, r3
 8011f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011f56:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8011f74 <adc_Measure+0x110>
 8011f5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	edc3 7a00 	vstr	s15, [r3]


	return 1;
 8011f64:	2301      	movs	r3, #1


}
 8011f66:	4618      	mov	r0, r3
 8011f68:	3710      	adds	r7, #16
 8011f6a:	46bd      	mov	sp, r7
 8011f6c:	bd80      	pop	{r7, pc}
 8011f6e:	bf00      	nop
 8011f70:	20001720 	.word	0x20001720
 8011f74:	3b40b852 	.word	0x3b40b852

08011f78 <scd4x_start_periodic_measurement>:
#include "sensirion_i2c.h"
#include "sensirion_i2c_hal.h"

#define SCD4X_I2C_ADDRESS 0x62

int16_t scd4x_start_periodic_measurement() {
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b082      	sub	sp, #8
 8011f7c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8011f7e:	2300      	movs	r3, #0
 8011f80:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21B1);
 8011f82:	88f9      	ldrh	r1, [r7, #6]
 8011f84:	463b      	mov	r3, r7
 8011f86:	f242 12b1 	movw	r2, #8625	; 0x21b1
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	f000 fa8d 	bl	80124aa <sensirion_i2c_add_command_to_buffer>
 8011f90:	4603      	mov	r3, r0
 8011f92:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8011f94:	88fa      	ldrh	r2, [r7, #6]
 8011f96:	463b      	mov	r3, r7
 8011f98:	4619      	mov	r1, r3
 8011f9a:	2062      	movs	r0, #98	; 0x62
 8011f9c:	f000 fad8 	bl	8012550 <sensirion_i2c_write_data>
 8011fa0:	4603      	mov	r3, r0
 8011fa2:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8011fa4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d002      	beq.n	8011fb2 <scd4x_start_periodic_measurement+0x3a>
        return error;
 8011fac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011fb0:	e004      	b.n	8011fbc <scd4x_start_periodic_measurement+0x44>
    }
    sensirion_i2c_hal_sleep_usec(1000);
 8011fb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011fb6:	f000 fbb9 	bl	801272c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8011fba:	2300      	movs	r3, #0
}
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	3708      	adds	r7, #8
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bd80      	pop	{r7, pc}

08011fc4 <scd4x_read_measurement_ticks>:

int16_t scd4x_read_measurement_ticks(uint16_t* co2, uint16_t* temperature,
                                     uint16_t* humidity) {
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b088      	sub	sp, #32
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	60f8      	str	r0, [r7, #12]
 8011fcc:	60b9      	str	r1, [r7, #8]
 8011fce:	607a      	str	r2, [r7, #4]
    int16_t error;
    uint8_t buffer[9];
    uint16_t offset = 0;
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	83fb      	strh	r3, [r7, #30]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xEC05);
 8011fd4:	8bf9      	ldrh	r1, [r7, #30]
 8011fd6:	f107 0310 	add.w	r3, r7, #16
 8011fda:	f64e 4205 	movw	r2, #60421	; 0xec05
 8011fde:	4618      	mov	r0, r3
 8011fe0:	f000 fa63 	bl	80124aa <sensirion_i2c_add_command_to_buffer>
 8011fe4:	4603      	mov	r3, r0
 8011fe6:	83fb      	strh	r3, [r7, #30]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8011fe8:	8bfa      	ldrh	r2, [r7, #30]
 8011fea:	f107 0310 	add.w	r3, r7, #16
 8011fee:	4619      	mov	r1, r3
 8011ff0:	2062      	movs	r0, #98	; 0x62
 8011ff2:	f000 faad 	bl	8012550 <sensirion_i2c_write_data>
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	83bb      	strh	r3, [r7, #28]
    if (error) {
 8011ffa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d002      	beq.n	8012008 <scd4x_read_measurement_ticks+0x44>
        return error;
 8012002:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012006:	e031      	b.n	801206c <scd4x_read_measurement_ticks+0xa8>
    }

    sensirion_i2c_hal_sleep_usec(1000);
 8012008:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801200c:	f000 fb8e 	bl	801272c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SCD4X_I2C_ADDRESS, &buffer[0], 6);
 8012010:	f107 0310 	add.w	r3, r7, #16
 8012014:	2206      	movs	r2, #6
 8012016:	4619      	mov	r1, r3
 8012018:	2062      	movs	r0, #98	; 0x62
 801201a:	f000 faad 	bl	8012578 <sensirion_i2c_read_data_inplace>
 801201e:	4603      	mov	r3, r0
 8012020:	83bb      	strh	r3, [r7, #28]
    if (error) {
 8012022:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d002      	beq.n	8012030 <scd4x_read_measurement_ticks+0x6c>
        return error;
 801202a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801202e:	e01d      	b.n	801206c <scd4x_read_measurement_ticks+0xa8>
    }
    *co2 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 8012030:	f107 0310 	add.w	r3, r7, #16
 8012034:	4618      	mov	r0, r3
 8012036:	f000 f9d2 	bl	80123de <sensirion_common_bytes_to_uint16_t>
 801203a:	4603      	mov	r3, r0
 801203c:	461a      	mov	r2, r3
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	801a      	strh	r2, [r3, #0]
    *temperature = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 8012042:	f107 0310 	add.w	r3, r7, #16
 8012046:	3302      	adds	r3, #2
 8012048:	4618      	mov	r0, r3
 801204a:	f000 f9c8 	bl	80123de <sensirion_common_bytes_to_uint16_t>
 801204e:	4603      	mov	r3, r0
 8012050:	461a      	mov	r2, r3
 8012052:	68bb      	ldr	r3, [r7, #8]
 8012054:	801a      	strh	r2, [r3, #0]
    *humidity = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 8012056:	f107 0310 	add.w	r3, r7, #16
 801205a:	3304      	adds	r3, #4
 801205c:	4618      	mov	r0, r3
 801205e:	f000 f9be 	bl	80123de <sensirion_common_bytes_to_uint16_t>
 8012062:	4603      	mov	r3, r0
 8012064:	461a      	mov	r2, r3
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 801206a:	2300      	movs	r3, #0
}
 801206c:	4618      	mov	r0, r3
 801206e:	3720      	adds	r7, #32
 8012070:	46bd      	mov	sp, r7
 8012072:	bd80      	pop	{r7, pc}

08012074 <scd4x_read_measurement>:

int16_t scd4x_read_measurement(uint16_t* co2, int32_t* temperature_m_deg_c,
                               int32_t* humidity_m_percent_rh) {
 8012074:	b580      	push	{r7, lr}
 8012076:	b086      	sub	sp, #24
 8012078:	af00      	add	r7, sp, #0
 801207a:	60f8      	str	r0, [r7, #12]
 801207c:	60b9      	str	r1, [r7, #8]
 801207e:	607a      	str	r2, [r7, #4]
    int16_t error;
    uint16_t temperature;
    uint16_t humidity;

    error = scd4x_read_measurement_ticks(co2, &temperature, &humidity);
 8012080:	f107 0212 	add.w	r2, r7, #18
 8012084:	f107 0314 	add.w	r3, r7, #20
 8012088:	4619      	mov	r1, r3
 801208a:	68f8      	ldr	r0, [r7, #12]
 801208c:	f7ff ff9a 	bl	8011fc4 <scd4x_read_measurement_ticks>
 8012090:	4603      	mov	r3, r0
 8012092:	82fb      	strh	r3, [r7, #22]
    if (error) {
 8012094:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d002      	beq.n	80120a2 <scd4x_read_measurement+0x2e>
        return error;
 801209c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80120a0:	e015      	b.n	80120ce <scd4x_read_measurement+0x5a>
    }
    *temperature_m_deg_c = ((21875 * (int32_t)temperature) >> 13) - 45000;
 80120a2:	8abb      	ldrh	r3, [r7, #20]
 80120a4:	461a      	mov	r2, r3
 80120a6:	f245 5373 	movw	r3, #21875	; 0x5573
 80120aa:	fb02 f303 	mul.w	r3, r2, r3
 80120ae:	135b      	asrs	r3, r3, #13
 80120b0:	f5a3 432f 	sub.w	r3, r3, #44800	; 0xaf00
 80120b4:	3bc8      	subs	r3, #200	; 0xc8
 80120b6:	68ba      	ldr	r2, [r7, #8]
 80120b8:	6013      	str	r3, [r2, #0]
    *humidity_m_percent_rh = ((12500 * (int32_t)humidity) >> 13);
 80120ba:	8a7b      	ldrh	r3, [r7, #18]
 80120bc:	461a      	mov	r2, r3
 80120be:	f243 03d4 	movw	r3, #12500	; 0x30d4
 80120c2:	fb02 f303 	mul.w	r3, r2, r3
 80120c6:	135a      	asrs	r2, r3, #13
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 80120cc:	2300      	movs	r3, #0
}
 80120ce:	4618      	mov	r0, r3
 80120d0:	3718      	adds	r7, #24
 80120d2:	46bd      	mov	sp, r7
 80120d4:	bd80      	pop	{r7, pc}
	...

080120d8 <scd4x_stop_periodic_measurement>:

int16_t scd4x_stop_periodic_measurement() {
 80120d8:	b580      	push	{r7, lr}
 80120da:	b082      	sub	sp, #8
 80120dc:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 80120de:	2300      	movs	r3, #0
 80120e0:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3F86);
 80120e2:	88f9      	ldrh	r1, [r7, #6]
 80120e4:	463b      	mov	r3, r7
 80120e6:	f643 7286 	movw	r2, #16262	; 0x3f86
 80120ea:	4618      	mov	r0, r3
 80120ec:	f000 f9dd 	bl	80124aa <sensirion_i2c_add_command_to_buffer>
 80120f0:	4603      	mov	r3, r0
 80120f2:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 80120f4:	88fa      	ldrh	r2, [r7, #6]
 80120f6:	463b      	mov	r3, r7
 80120f8:	4619      	mov	r1, r3
 80120fa:	2062      	movs	r0, #98	; 0x62
 80120fc:	f000 fa28 	bl	8012550 <sensirion_i2c_write_data>
 8012100:	4603      	mov	r3, r0
 8012102:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8012104:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d002      	beq.n	8012112 <scd4x_stop_periodic_measurement+0x3a>
        return error;
 801210c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012110:	e003      	b.n	801211a <scd4x_stop_periodic_measurement+0x42>
    }
    sensirion_i2c_hal_sleep_usec(500000);
 8012112:	4804      	ldr	r0, [pc, #16]	; (8012124 <scd4x_stop_periodic_measurement+0x4c>)
 8012114:	f000 fb0a 	bl	801272c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8012118:	2300      	movs	r3, #0
}
 801211a:	4618      	mov	r0, r3
 801211c:	3708      	adds	r7, #8
 801211e:	46bd      	mov	sp, r7
 8012120:	bd80      	pop	{r7, pc}
 8012122:	bf00      	nop
 8012124:	0007a120 	.word	0x0007a120

08012128 <scd4x_perform_forced_recalibration>:
    sensirion_i2c_hal_sleep_usec(1000);
    return NO_ERROR;
}

int16_t scd4x_perform_forced_recalibration(uint16_t target_co2_concentration,
                                           uint16_t* frc_correction) {
 8012128:	b580      	push	{r7, lr}
 801212a:	b086      	sub	sp, #24
 801212c:	af00      	add	r7, sp, #0
 801212e:	4603      	mov	r3, r0
 8012130:	6039      	str	r1, [r7, #0]
 8012132:	80fb      	strh	r3, [r7, #6]
    int16_t error;
    uint8_t buffer[5];
    uint16_t offset = 0;
 8012134:	2300      	movs	r3, #0
 8012136:	82fb      	strh	r3, [r7, #22]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x362F);
 8012138:	8af9      	ldrh	r1, [r7, #22]
 801213a:	f107 030c 	add.w	r3, r7, #12
 801213e:	f243 622f 	movw	r2, #13871	; 0x362f
 8012142:	4618      	mov	r0, r3
 8012144:	f000 f9b1 	bl	80124aa <sensirion_i2c_add_command_to_buffer>
 8012148:	4603      	mov	r3, r0
 801214a:	82fb      	strh	r3, [r7, #22]

    offset = sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset,
 801214c:	88fa      	ldrh	r2, [r7, #6]
 801214e:	8af9      	ldrh	r1, [r7, #22]
 8012150:	f107 030c 	add.w	r3, r7, #12
 8012154:	4618      	mov	r0, r3
 8012156:	f000 f9cb 	bl	80124f0 <sensirion_i2c_add_uint16_t_to_buffer>
 801215a:	4603      	mov	r3, r0
 801215c:	82fb      	strh	r3, [r7, #22]
                                                  target_co2_concentration);

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 801215e:	8afa      	ldrh	r2, [r7, #22]
 8012160:	f107 030c 	add.w	r3, r7, #12
 8012164:	4619      	mov	r1, r3
 8012166:	2062      	movs	r0, #98	; 0x62
 8012168:	f000 f9f2 	bl	8012550 <sensirion_i2c_write_data>
 801216c:	4603      	mov	r3, r0
 801216e:	82bb      	strh	r3, [r7, #20]
    if (error) {
 8012170:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d002      	beq.n	801217e <scd4x_perform_forced_recalibration+0x56>
        return error;
 8012178:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801217c:	e01c      	b.n	80121b8 <scd4x_perform_forced_recalibration+0x90>
    }

    sensirion_i2c_hal_sleep_usec(400000);
 801217e:	4810      	ldr	r0, [pc, #64]	; (80121c0 <scd4x_perform_forced_recalibration+0x98>)
 8012180:	f000 fad4 	bl	801272c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SCD4X_I2C_ADDRESS, &buffer[0], 2);
 8012184:	f107 030c 	add.w	r3, r7, #12
 8012188:	2202      	movs	r2, #2
 801218a:	4619      	mov	r1, r3
 801218c:	2062      	movs	r0, #98	; 0x62
 801218e:	f000 f9f3 	bl	8012578 <sensirion_i2c_read_data_inplace>
 8012192:	4603      	mov	r3, r0
 8012194:	82bb      	strh	r3, [r7, #20]
    if (error) {
 8012196:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801219a:	2b00      	cmp	r3, #0
 801219c:	d002      	beq.n	80121a4 <scd4x_perform_forced_recalibration+0x7c>
        return error;
 801219e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80121a2:	e009      	b.n	80121b8 <scd4x_perform_forced_recalibration+0x90>
    }
    *frc_correction = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 80121a4:	f107 030c 	add.w	r3, r7, #12
 80121a8:	4618      	mov	r0, r3
 80121aa:	f000 f918 	bl	80123de <sensirion_common_bytes_to_uint16_t>
 80121ae:	4603      	mov	r3, r0
 80121b0:	461a      	mov	r2, r3
 80121b2:	683b      	ldr	r3, [r7, #0]
 80121b4:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 80121b6:	2300      	movs	r3, #0
}
 80121b8:	4618      	mov	r0, r3
 80121ba:	3718      	adds	r7, #24
 80121bc:	46bd      	mov	sp, r7
 80121be:	bd80      	pop	{r7, pc}
 80121c0:	00061a80 	.word	0x00061a80

080121c4 <scd4x_get_data_ready_flag>:
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21AC);

    return sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
}

int16_t scd4x_get_data_ready_flag(bool* data_ready_flag) {
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b086      	sub	sp, #24
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 80121cc:	2300      	movs	r3, #0
 80121ce:	82fb      	strh	r3, [r7, #22]
    uint16_t local_data_ready = 0;
 80121d0:	2300      	movs	r3, #0
 80121d2:	82bb      	strh	r3, [r7, #20]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xE4B8);
 80121d4:	8af9      	ldrh	r1, [r7, #22]
 80121d6:	f107 030c 	add.w	r3, r7, #12
 80121da:	f24e 42b8 	movw	r2, #58552	; 0xe4b8
 80121de:	4618      	mov	r0, r3
 80121e0:	f000 f963 	bl	80124aa <sensirion_i2c_add_command_to_buffer>
 80121e4:	4603      	mov	r3, r0
 80121e6:	82fb      	strh	r3, [r7, #22]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 80121e8:	8afa      	ldrh	r2, [r7, #22]
 80121ea:	f107 030c 	add.w	r3, r7, #12
 80121ee:	4619      	mov	r1, r3
 80121f0:	2062      	movs	r0, #98	; 0x62
 80121f2:	f000 f9ad 	bl	8012550 <sensirion_i2c_write_data>
 80121f6:	4603      	mov	r3, r0
 80121f8:	827b      	strh	r3, [r7, #18]
    if (error) {
 80121fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d002      	beq.n	8012208 <scd4x_get_data_ready_flag+0x44>
        return error;
 8012202:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012206:	e025      	b.n	8012254 <scd4x_get_data_ready_flag+0x90>
    }

    sensirion_i2c_hal_sleep_usec(1000);
 8012208:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801220c:	f000 fa8e 	bl	801272c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SCD4X_I2C_ADDRESS, &buffer[0], 2);
 8012210:	f107 030c 	add.w	r3, r7, #12
 8012214:	2202      	movs	r2, #2
 8012216:	4619      	mov	r1, r3
 8012218:	2062      	movs	r0, #98	; 0x62
 801221a:	f000 f9ad 	bl	8012578 <sensirion_i2c_read_data_inplace>
 801221e:	4603      	mov	r3, r0
 8012220:	827b      	strh	r3, [r7, #18]
    if (error) {
 8012222:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d002      	beq.n	8012230 <scd4x_get_data_ready_flag+0x6c>
        return error;
 801222a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801222e:	e011      	b.n	8012254 <scd4x_get_data_ready_flag+0x90>
    }
    local_data_ready = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 8012230:	f107 030c 	add.w	r3, r7, #12
 8012234:	4618      	mov	r0, r3
 8012236:	f000 f8d2 	bl	80123de <sensirion_common_bytes_to_uint16_t>
 801223a:	4603      	mov	r3, r0
 801223c:	82bb      	strh	r3, [r7, #20]
    *data_ready_flag = (local_data_ready & 0x07FF) != 0;
 801223e:	8abb      	ldrh	r3, [r7, #20]
 8012240:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012244:	2b00      	cmp	r3, #0
 8012246:	bf14      	ite	ne
 8012248:	2301      	movne	r3, #1
 801224a:	2300      	moveq	r3, #0
 801224c:	b2da      	uxtb	r2, r3
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 8012252:	2300      	movs	r3, #0
}
 8012254:	4618      	mov	r0, r3
 8012256:	3718      	adds	r7, #24
 8012258:	46bd      	mov	sp, r7
 801225a:	bd80      	pop	{r7, pc}

0801225c <scd4x_get_serial_number>:
    sensirion_i2c_hal_sleep_usec(800000);
    return NO_ERROR;
}

int16_t scd4x_get_serial_number(uint16_t* serial_0, uint16_t* serial_1,
                                uint16_t* serial_2) {
 801225c:	b580      	push	{r7, lr}
 801225e:	b088      	sub	sp, #32
 8012260:	af00      	add	r7, sp, #0
 8012262:	60f8      	str	r0, [r7, #12]
 8012264:	60b9      	str	r1, [r7, #8]
 8012266:	607a      	str	r2, [r7, #4]
    int16_t error;
    uint8_t buffer[9];
    uint16_t offset = 0;
 8012268:	2300      	movs	r3, #0
 801226a:	83fb      	strh	r3, [r7, #30]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3682);
 801226c:	8bf9      	ldrh	r1, [r7, #30]
 801226e:	f107 0310 	add.w	r3, r7, #16
 8012272:	f243 6282 	movw	r2, #13954	; 0x3682
 8012276:	4618      	mov	r0, r3
 8012278:	f000 f917 	bl	80124aa <sensirion_i2c_add_command_to_buffer>
 801227c:	4603      	mov	r3, r0
 801227e:	83fb      	strh	r3, [r7, #30]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8012280:	8bfa      	ldrh	r2, [r7, #30]
 8012282:	f107 0310 	add.w	r3, r7, #16
 8012286:	4619      	mov	r1, r3
 8012288:	2062      	movs	r0, #98	; 0x62
 801228a:	f000 f961 	bl	8012550 <sensirion_i2c_write_data>
 801228e:	4603      	mov	r3, r0
 8012290:	83bb      	strh	r3, [r7, #28]
    if (error) {
 8012292:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d002      	beq.n	80122a0 <scd4x_get_serial_number+0x44>
        return error;
 801229a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801229e:	e031      	b.n	8012304 <scd4x_get_serial_number+0xa8>
    }

    sensirion_i2c_hal_sleep_usec(1000);
 80122a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80122a4:	f000 fa42 	bl	801272c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SCD4X_I2C_ADDRESS, &buffer[0], 6);
 80122a8:	f107 0310 	add.w	r3, r7, #16
 80122ac:	2206      	movs	r2, #6
 80122ae:	4619      	mov	r1, r3
 80122b0:	2062      	movs	r0, #98	; 0x62
 80122b2:	f000 f961 	bl	8012578 <sensirion_i2c_read_data_inplace>
 80122b6:	4603      	mov	r3, r0
 80122b8:	83bb      	strh	r3, [r7, #28]
    if (error) {
 80122ba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d002      	beq.n	80122c8 <scd4x_get_serial_number+0x6c>
        return error;
 80122c2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80122c6:	e01d      	b.n	8012304 <scd4x_get_serial_number+0xa8>
    }
    *serial_0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 80122c8:	f107 0310 	add.w	r3, r7, #16
 80122cc:	4618      	mov	r0, r3
 80122ce:	f000 f886 	bl	80123de <sensirion_common_bytes_to_uint16_t>
 80122d2:	4603      	mov	r3, r0
 80122d4:	461a      	mov	r2, r3
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	801a      	strh	r2, [r3, #0]
    *serial_1 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 80122da:	f107 0310 	add.w	r3, r7, #16
 80122de:	3302      	adds	r3, #2
 80122e0:	4618      	mov	r0, r3
 80122e2:	f000 f87c 	bl	80123de <sensirion_common_bytes_to_uint16_t>
 80122e6:	4603      	mov	r3, r0
 80122e8:	461a      	mov	r2, r3
 80122ea:	68bb      	ldr	r3, [r7, #8]
 80122ec:	801a      	strh	r2, [r3, #0]
    *serial_2 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 80122ee:	f107 0310 	add.w	r3, r7, #16
 80122f2:	3304      	adds	r3, #4
 80122f4:	4618      	mov	r0, r3
 80122f6:	f000 f872 	bl	80123de <sensirion_common_bytes_to_uint16_t>
 80122fa:	4603      	mov	r3, r0
 80122fc:	461a      	mov	r2, r3
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 8012302:	2300      	movs	r3, #0
}
 8012304:	4618      	mov	r0, r3
 8012306:	3720      	adds	r7, #32
 8012308:	46bd      	mov	sp, r7
 801230a:	bd80      	pop	{r7, pc}

0801230c <scd4x_reinit>:
    }
    sensirion_i2c_hal_sleep_usec(800000);
    return NO_ERROR;
}

int16_t scd4x_reinit() {
 801230c:	b580      	push	{r7, lr}
 801230e:	b082      	sub	sp, #8
 8012310:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8012312:	2300      	movs	r3, #0
 8012314:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3646);
 8012316:	88f9      	ldrh	r1, [r7, #6]
 8012318:	463b      	mov	r3, r7
 801231a:	f243 6246 	movw	r2, #13894	; 0x3646
 801231e:	4618      	mov	r0, r3
 8012320:	f000 f8c3 	bl	80124aa <sensirion_i2c_add_command_to_buffer>
 8012324:	4603      	mov	r3, r0
 8012326:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8012328:	88fa      	ldrh	r2, [r7, #6]
 801232a:	463b      	mov	r3, r7
 801232c:	4619      	mov	r1, r3
 801232e:	2062      	movs	r0, #98	; 0x62
 8012330:	f000 f90e 	bl	8012550 <sensirion_i2c_write_data>
 8012334:	4603      	mov	r3, r0
 8012336:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8012338:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d002      	beq.n	8012346 <scd4x_reinit+0x3a>
        return error;
 8012340:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012344:	e004      	b.n	8012350 <scd4x_reinit+0x44>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 8012346:	f644 6020 	movw	r0, #20000	; 0x4e20
 801234a:	f000 f9ef 	bl	801272c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 801234e:	2300      	movs	r3, #0
}
 8012350:	4618      	mov	r0, r3
 8012352:	3708      	adds	r7, #8
 8012354:	46bd      	mov	sp, r7
 8012356:	bd80      	pop	{r7, pc}

08012358 <scd4x_power_down>:
    }
    sensirion_i2c_hal_sleep_usec(50000);
    return NO_ERROR;
}

int16_t scd4x_power_down() {
 8012358:	b580      	push	{r7, lr}
 801235a:	b082      	sub	sp, #8
 801235c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 801235e:	2300      	movs	r3, #0
 8012360:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x36E0);
 8012362:	88f9      	ldrh	r1, [r7, #6]
 8012364:	463b      	mov	r3, r7
 8012366:	f243 62e0 	movw	r2, #14048	; 0x36e0
 801236a:	4618      	mov	r0, r3
 801236c:	f000 f89d 	bl	80124aa <sensirion_i2c_add_command_to_buffer>
 8012370:	4603      	mov	r3, r0
 8012372:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8012374:	88fa      	ldrh	r2, [r7, #6]
 8012376:	463b      	mov	r3, r7
 8012378:	4619      	mov	r1, r3
 801237a:	2062      	movs	r0, #98	; 0x62
 801237c:	f000 f8e8 	bl	8012550 <sensirion_i2c_write_data>
 8012380:	4603      	mov	r3, r0
 8012382:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8012384:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d002      	beq.n	8012392 <scd4x_power_down+0x3a>
        return error;
 801238c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012390:	e004      	b.n	801239c <scd4x_power_down+0x44>
    }
    sensirion_i2c_hal_sleep_usec(1000);
 8012392:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012396:	f000 f9c9 	bl	801272c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 801239a:	2300      	movs	r3, #0
}
 801239c:	4618      	mov	r0, r3
 801239e:	3708      	adds	r7, #8
 80123a0:	46bd      	mov	sp, r7
 80123a2:	bd80      	pop	{r7, pc}

080123a4 <scd4x_wake_up>:

int16_t scd4x_wake_up() {
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b082      	sub	sp, #8
 80123a8:	af00      	add	r7, sp, #0
    uint8_t buffer[2];
    uint16_t offset = 0;
 80123aa:	2300      	movs	r3, #0
 80123ac:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x36F6);
 80123ae:	88f9      	ldrh	r1, [r7, #6]
 80123b0:	1d3b      	adds	r3, r7, #4
 80123b2:	f243 62f6 	movw	r2, #14070	; 0x36f6
 80123b6:	4618      	mov	r0, r3
 80123b8:	f000 f877 	bl	80124aa <sensirion_i2c_add_command_to_buffer>
 80123bc:	4603      	mov	r3, r0
 80123be:	80fb      	strh	r3, [r7, #6]

    // Sensor does not acknowledge the wake-up call, error is ignored
    (void)sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 80123c0:	88fa      	ldrh	r2, [r7, #6]
 80123c2:	1d3b      	adds	r3, r7, #4
 80123c4:	4619      	mov	r1, r3
 80123c6:	2062      	movs	r0, #98	; 0x62
 80123c8:	f000 f8c2 	bl	8012550 <sensirion_i2c_write_data>
    sensirion_i2c_hal_sleep_usec(20000);
 80123cc:	f644 6020 	movw	r0, #20000	; 0x4e20
 80123d0:	f000 f9ac 	bl	801272c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 80123d4:	2300      	movs	r3, #0
}
 80123d6:	4618      	mov	r0, r3
 80123d8:	3708      	adds	r7, #8
 80123da:	46bd      	mov	sp, r7
 80123dc:	bd80      	pop	{r7, pc}

080123de <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 80123de:	b480      	push	{r7}
 80123e0:	b083      	sub	sp, #12
 80123e2:	af00      	add	r7, sp, #0
 80123e4:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	781b      	ldrb	r3, [r3, #0]
 80123ea:	021b      	lsls	r3, r3, #8
 80123ec:	b21a      	sxth	r2, r3
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	3301      	adds	r3, #1
 80123f2:	781b      	ldrb	r3, [r3, #0]
 80123f4:	b21b      	sxth	r3, r3
 80123f6:	4313      	orrs	r3, r2
 80123f8:	b21b      	sxth	r3, r3
 80123fa:	b29b      	uxth	r3, r3
}
 80123fc:	4618      	mov	r0, r3
 80123fe:	370c      	adds	r7, #12
 8012400:	46bd      	mov	sp, r7
 8012402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012406:	4770      	bx	lr

08012408 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8012408:	b480      	push	{r7}
 801240a:	b085      	sub	sp, #20
 801240c:	af00      	add	r7, sp, #0
 801240e:	6078      	str	r0, [r7, #4]
 8012410:	460b      	mov	r3, r1
 8012412:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8012414:	23ff      	movs	r3, #255	; 0xff
 8012416:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8012418:	2300      	movs	r3, #0
 801241a:	81fb      	strh	r3, [r7, #14]
 801241c:	e021      	b.n	8012462 <sensirion_i2c_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 801241e:	89fb      	ldrh	r3, [r7, #14]
 8012420:	687a      	ldr	r2, [r7, #4]
 8012422:	4413      	add	r3, r2
 8012424:	781a      	ldrb	r2, [r3, #0]
 8012426:	7b7b      	ldrb	r3, [r7, #13]
 8012428:	4053      	eors	r3, r2
 801242a:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 801242c:	2308      	movs	r3, #8
 801242e:	733b      	strb	r3, [r7, #12]
 8012430:	e011      	b.n	8012456 <sensirion_i2c_generate_crc+0x4e>
            if (crc & 0x80)
 8012432:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8012436:	2b00      	cmp	r3, #0
 8012438:	da07      	bge.n	801244a <sensirion_i2c_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 801243a:	7b7b      	ldrb	r3, [r7, #13]
 801243c:	005b      	lsls	r3, r3, #1
 801243e:	b25b      	sxtb	r3, r3
 8012440:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8012444:	b25b      	sxtb	r3, r3
 8012446:	737b      	strb	r3, [r7, #13]
 8012448:	e002      	b.n	8012450 <sensirion_i2c_generate_crc+0x48>
            else
                crc = (crc << 1);
 801244a:	7b7b      	ldrb	r3, [r7, #13]
 801244c:	005b      	lsls	r3, r3, #1
 801244e:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8012450:	7b3b      	ldrb	r3, [r7, #12]
 8012452:	3b01      	subs	r3, #1
 8012454:	733b      	strb	r3, [r7, #12]
 8012456:	7b3b      	ldrb	r3, [r7, #12]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d1ea      	bne.n	8012432 <sensirion_i2c_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 801245c:	89fb      	ldrh	r3, [r7, #14]
 801245e:	3301      	adds	r3, #1
 8012460:	81fb      	strh	r3, [r7, #14]
 8012462:	89fa      	ldrh	r2, [r7, #14]
 8012464:	887b      	ldrh	r3, [r7, #2]
 8012466:	429a      	cmp	r2, r3
 8012468:	d3d9      	bcc.n	801241e <sensirion_i2c_generate_crc+0x16>
        }
    }
    return crc;
 801246a:	7b7b      	ldrb	r3, [r7, #13]
}
 801246c:	4618      	mov	r0, r3
 801246e:	3714      	adds	r7, #20
 8012470:	46bd      	mov	sp, r7
 8012472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012476:	4770      	bx	lr

08012478 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 8012478:	b580      	push	{r7, lr}
 801247a:	b082      	sub	sp, #8
 801247c:	af00      	add	r7, sp, #0
 801247e:	6078      	str	r0, [r7, #4]
 8012480:	460b      	mov	r3, r1
 8012482:	807b      	strh	r3, [r7, #2]
 8012484:	4613      	mov	r3, r2
 8012486:	707b      	strb	r3, [r7, #1]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8012488:	887b      	ldrh	r3, [r7, #2]
 801248a:	4619      	mov	r1, r3
 801248c:	6878      	ldr	r0, [r7, #4]
 801248e:	f7ff ffbb 	bl	8012408 <sensirion_i2c_generate_crc>
 8012492:	4603      	mov	r3, r0
 8012494:	461a      	mov	r2, r3
 8012496:	787b      	ldrb	r3, [r7, #1]
 8012498:	4293      	cmp	r3, r2
 801249a:	d001      	beq.n	80124a0 <sensirion_i2c_check_crc+0x28>
        return CRC_ERROR;
 801249c:	2301      	movs	r3, #1
 801249e:	e000      	b.n	80124a2 <sensirion_i2c_check_crc+0x2a>
    return NO_ERROR;
 80124a0:	2300      	movs	r3, #0
}
 80124a2:	4618      	mov	r0, r3
 80124a4:	3708      	adds	r7, #8
 80124a6:	46bd      	mov	sp, r7
 80124a8:	bd80      	pop	{r7, pc}

080124aa <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 80124aa:	b480      	push	{r7}
 80124ac:	b083      	sub	sp, #12
 80124ae:	af00      	add	r7, sp, #0
 80124b0:	6078      	str	r0, [r7, #4]
 80124b2:	460b      	mov	r3, r1
 80124b4:	807b      	strh	r3, [r7, #2]
 80124b6:	4613      	mov	r3, r2
 80124b8:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 80124ba:	883b      	ldrh	r3, [r7, #0]
 80124bc:	0a1b      	lsrs	r3, r3, #8
 80124be:	b29a      	uxth	r2, r3
 80124c0:	887b      	ldrh	r3, [r7, #2]
 80124c2:	1c59      	adds	r1, r3, #1
 80124c4:	8079      	strh	r1, [r7, #2]
 80124c6:	4619      	mov	r1, r3
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	440b      	add	r3, r1
 80124cc:	b2d2      	uxtb	r2, r2
 80124ce:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 80124d0:	887b      	ldrh	r3, [r7, #2]
 80124d2:	1c5a      	adds	r2, r3, #1
 80124d4:	807a      	strh	r2, [r7, #2]
 80124d6:	461a      	mov	r2, r3
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	4413      	add	r3, r2
 80124dc:	883a      	ldrh	r2, [r7, #0]
 80124de:	b2d2      	uxtb	r2, r2
 80124e0:	701a      	strb	r2, [r3, #0]
    return offset;
 80124e2:	887b      	ldrh	r3, [r7, #2]
}
 80124e4:	4618      	mov	r0, r3
 80124e6:	370c      	adds	r7, #12
 80124e8:	46bd      	mov	sp, r7
 80124ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ee:	4770      	bx	lr

080124f0 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 80124f0:	b590      	push	{r4, r7, lr}
 80124f2:	b083      	sub	sp, #12
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	6078      	str	r0, [r7, #4]
 80124f8:	460b      	mov	r3, r1
 80124fa:	807b      	strh	r3, [r7, #2]
 80124fc:	4613      	mov	r3, r2
 80124fe:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 8012500:	883b      	ldrh	r3, [r7, #0]
 8012502:	0a1b      	lsrs	r3, r3, #8
 8012504:	b29a      	uxth	r2, r3
 8012506:	887b      	ldrh	r3, [r7, #2]
 8012508:	1c59      	adds	r1, r3, #1
 801250a:	8079      	strh	r1, [r7, #2]
 801250c:	4619      	mov	r1, r3
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	440b      	add	r3, r1
 8012512:	b2d2      	uxtb	r2, r2
 8012514:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 8012516:	887b      	ldrh	r3, [r7, #2]
 8012518:	1c5a      	adds	r2, r3, #1
 801251a:	807a      	strh	r2, [r7, #2]
 801251c:	461a      	mov	r2, r3
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	4413      	add	r3, r2
 8012522:	883a      	ldrh	r2, [r7, #0]
 8012524:	b2d2      	uxtb	r2, r2
 8012526:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 8012528:	887b      	ldrh	r3, [r7, #2]
 801252a:	3b02      	subs	r3, #2
 801252c:	687a      	ldr	r2, [r7, #4]
 801252e:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 8012530:	887b      	ldrh	r3, [r7, #2]
 8012532:	687a      	ldr	r2, [r7, #4]
 8012534:	18d4      	adds	r4, r2, r3
 8012536:	2102      	movs	r1, #2
 8012538:	f7ff ff66 	bl	8012408 <sensirion_i2c_generate_crc>
 801253c:	4603      	mov	r3, r0
 801253e:	7023      	strb	r3, [r4, #0]
    offset++;
 8012540:	887b      	ldrh	r3, [r7, #2]
 8012542:	3301      	adds	r3, #1
 8012544:	807b      	strh	r3, [r7, #2]

    return offset;
 8012546:	887b      	ldrh	r3, [r7, #2]
}
 8012548:	4618      	mov	r0, r3
 801254a:	370c      	adds	r7, #12
 801254c:	46bd      	mov	sp, r7
 801254e:	bd90      	pop	{r4, r7, pc}

08012550 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8012550:	b580      	push	{r7, lr}
 8012552:	b082      	sub	sp, #8
 8012554:	af00      	add	r7, sp, #0
 8012556:	4603      	mov	r3, r0
 8012558:	6039      	str	r1, [r7, #0]
 801255a:	71fb      	strb	r3, [r7, #7]
 801255c:	4613      	mov	r3, r2
 801255e:	80bb      	strh	r3, [r7, #4]
    return sensirion_i2c_hal_write(address, data, data_length);
 8012560:	88ba      	ldrh	r2, [r7, #4]
 8012562:	79fb      	ldrb	r3, [r7, #7]
 8012564:	6839      	ldr	r1, [r7, #0]
 8012566:	4618      	mov	r0, r3
 8012568:	f000 f8c4 	bl	80126f4 <sensirion_i2c_hal_write>
 801256c:	4603      	mov	r3, r0
 801256e:	b21b      	sxth	r3, r3
}
 8012570:	4618      	mov	r0, r3
 8012572:	3708      	adds	r7, #8
 8012574:	46bd      	mov	sp, r7
 8012576:	bd80      	pop	{r7, pc}

08012578 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8012578:	b580      	push	{r7, lr}
 801257a:	b084      	sub	sp, #16
 801257c:	af00      	add	r7, sp, #0
 801257e:	4603      	mov	r3, r0
 8012580:	6039      	str	r1, [r7, #0]
 8012582:	71fb      	strb	r3, [r7, #7]
 8012584:	4613      	mov	r3, r2
 8012586:	80bb      	strh	r3, [r7, #4]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8012588:	88bb      	ldrh	r3, [r7, #4]
 801258a:	085b      	lsrs	r3, r3, #1
 801258c:	b29b      	uxth	r3, r3
 801258e:	461a      	mov	r2, r3
 8012590:	0052      	lsls	r2, r2, #1
 8012592:	4413      	add	r3, r2
 8012594:	817b      	strh	r3, [r7, #10]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8012596:	88bb      	ldrh	r3, [r7, #4]
 8012598:	f003 0301 	and.w	r3, r3, #1
 801259c:	b29b      	uxth	r3, r3
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d001      	beq.n	80125a6 <sensirion_i2c_read_data_inplace+0x2e>
        return BYTE_NUM_ERROR;
 80125a2:	2304      	movs	r3, #4
 80125a4:	e047      	b.n	8012636 <sensirion_i2c_read_data_inplace+0xbe>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 80125a6:	897a      	ldrh	r2, [r7, #10]
 80125a8:	79fb      	ldrb	r3, [r7, #7]
 80125aa:	6839      	ldr	r1, [r7, #0]
 80125ac:	4618      	mov	r0, r3
 80125ae:	f000 f885 	bl	80126bc <sensirion_i2c_hal_read>
 80125b2:	4603      	mov	r3, r0
 80125b4:	813b      	strh	r3, [r7, #8]
    if (error) {
 80125b6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d002      	beq.n	80125c4 <sensirion_i2c_read_data_inplace+0x4c>
        return error;
 80125be:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80125c2:	e038      	b.n	8012636 <sensirion_i2c_read_data_inplace+0xbe>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80125c4:	2300      	movs	r3, #0
 80125c6:	81fb      	strh	r3, [r7, #14]
 80125c8:	2300      	movs	r3, #0
 80125ca:	81bb      	strh	r3, [r7, #12]
 80125cc:	e02e      	b.n	801262c <sensirion_i2c_read_data_inplace+0xb4>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 80125ce:	89fb      	ldrh	r3, [r7, #14]
 80125d0:	683a      	ldr	r2, [r7, #0]
 80125d2:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 80125d4:	89fb      	ldrh	r3, [r7, #14]
 80125d6:	3302      	adds	r3, #2
 80125d8:	683a      	ldr	r2, [r7, #0]
 80125da:	4413      	add	r3, r2
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 80125dc:	781b      	ldrb	r3, [r3, #0]
 80125de:	461a      	mov	r2, r3
 80125e0:	2102      	movs	r1, #2
 80125e2:	f7ff ff49 	bl	8012478 <sensirion_i2c_check_crc>
 80125e6:	4603      	mov	r3, r0
 80125e8:	813b      	strh	r3, [r7, #8]
        if (error) {
 80125ea:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d002      	beq.n	80125f8 <sensirion_i2c_read_data_inplace+0x80>
            return error;
 80125f2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80125f6:	e01e      	b.n	8012636 <sensirion_i2c_read_data_inplace+0xbe>
        }
        buffer[j++] = buffer[i];
 80125f8:	89fb      	ldrh	r3, [r7, #14]
 80125fa:	683a      	ldr	r2, [r7, #0]
 80125fc:	441a      	add	r2, r3
 80125fe:	89bb      	ldrh	r3, [r7, #12]
 8012600:	1c59      	adds	r1, r3, #1
 8012602:	81b9      	strh	r1, [r7, #12]
 8012604:	4619      	mov	r1, r3
 8012606:	683b      	ldr	r3, [r7, #0]
 8012608:	440b      	add	r3, r1
 801260a:	7812      	ldrb	r2, [r2, #0]
 801260c:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 801260e:	89fb      	ldrh	r3, [r7, #14]
 8012610:	3301      	adds	r3, #1
 8012612:	683a      	ldr	r2, [r7, #0]
 8012614:	441a      	add	r2, r3
 8012616:	89bb      	ldrh	r3, [r7, #12]
 8012618:	1c59      	adds	r1, r3, #1
 801261a:	81b9      	strh	r1, [r7, #12]
 801261c:	4619      	mov	r1, r3
 801261e:	683b      	ldr	r3, [r7, #0]
 8012620:	440b      	add	r3, r1
 8012622:	7812      	ldrb	r2, [r2, #0]
 8012624:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8012626:	89fb      	ldrh	r3, [r7, #14]
 8012628:	3303      	adds	r3, #3
 801262a:	81fb      	strh	r3, [r7, #14]
 801262c:	89fa      	ldrh	r2, [r7, #14]
 801262e:	897b      	ldrh	r3, [r7, #10]
 8012630:	429a      	cmp	r2, r3
 8012632:	d3cc      	bcc.n	80125ce <sensirion_i2c_read_data_inplace+0x56>
    }

    return NO_ERROR;
 8012634:	2300      	movs	r3, #0
}
 8012636:	4618      	mov	r0, r3
 8012638:	3710      	adds	r7, #16
 801263a:	46bd      	mov	sp, r7
 801263c:	bd80      	pop	{r7, pc}
	...

08012640 <sensirion_i2c_hal_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_hal_init(void) {
 8012640:	b580      	push	{r7, lr}
 8012642:	af00      	add	r7, sp, #0
    /* TODO:IMPLEMENT */
	HAL_I2C_DeInit(&hi2c1);
 8012644:	4814      	ldr	r0, [pc, #80]	; (8012698 <sensirion_i2c_hal_init+0x58>)
 8012646:	f7f3 f8bb 	bl	80057c0 <HAL_I2C_DeInit>
	  hi2c1.Instance = I2C1;
 801264a:	4b13      	ldr	r3, [pc, #76]	; (8012698 <sensirion_i2c_hal_init+0x58>)
 801264c:	4a13      	ldr	r2, [pc, #76]	; (801269c <sensirion_i2c_hal_init+0x5c>)
 801264e:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = 400000;
 8012650:	4b11      	ldr	r3, [pc, #68]	; (8012698 <sensirion_i2c_hal_init+0x58>)
 8012652:	4a13      	ldr	r2, [pc, #76]	; (80126a0 <sensirion_i2c_hal_init+0x60>)
 8012654:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8012656:	4b10      	ldr	r3, [pc, #64]	; (8012698 <sensirion_i2c_hal_init+0x58>)
 8012658:	2200      	movs	r2, #0
 801265a:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0;
 801265c:	4b0e      	ldr	r3, [pc, #56]	; (8012698 <sensirion_i2c_hal_init+0x58>)
 801265e:	2200      	movs	r2, #0
 8012660:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8012662:	4b0d      	ldr	r3, [pc, #52]	; (8012698 <sensirion_i2c_hal_init+0x58>)
 8012664:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8012668:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801266a:	4b0b      	ldr	r3, [pc, #44]	; (8012698 <sensirion_i2c_hal_init+0x58>)
 801266c:	2200      	movs	r2, #0
 801266e:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 8012670:	4b09      	ldr	r3, [pc, #36]	; (8012698 <sensirion_i2c_hal_init+0x58>)
 8012672:	2200      	movs	r2, #0
 8012674:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8012676:	4b08      	ldr	r3, [pc, #32]	; (8012698 <sensirion_i2c_hal_init+0x58>)
 8012678:	2200      	movs	r2, #0
 801267a:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801267c:	4b06      	ldr	r3, [pc, #24]	; (8012698 <sensirion_i2c_hal_init+0x58>)
 801267e:	2200      	movs	r2, #0
 8012680:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8012682:	4805      	ldr	r0, [pc, #20]	; (8012698 <sensirion_i2c_hal_init+0x58>)
 8012684:	f7f2 ff58 	bl	8005538 <HAL_I2C_Init>
 8012688:	4603      	mov	r3, r0
 801268a:	2b00      	cmp	r3, #0
 801268c:	d001      	beq.n	8012692 <sensirion_i2c_hal_init+0x52>
	  {
	    Error_Handler();
 801268e:	f7f0 f9e5 	bl	8002a5c <Error_Handler>
	  }
}
 8012692:	bf00      	nop
 8012694:	bd80      	pop	{r7, pc}
 8012696:	bf00      	nop
 8012698:	20001768 	.word	0x20001768
 801269c:	40005400 	.word	0x40005400
 80126a0:	00061a80 	.word	0x00061a80

080126a4 <sensirion_i2c_hal_free>:

/**
 * Release all resources initialized by sensirion_i2c_hal_init().
 */
void sensirion_i2c_hal_free(void) {
 80126a4:	b580      	push	{r7, lr}
 80126a6:	af00      	add	r7, sp, #0
    /* TODO:IMPLEMENT or leave empty if no resources need to be freed */
HAL_I2C_DeInit(&hi2c1);
 80126a8:	4803      	ldr	r0, [pc, #12]	; (80126b8 <sensirion_i2c_hal_free+0x14>)
 80126aa:	f7f3 f889 	bl	80057c0 <HAL_I2C_DeInit>
HAL_I2C_MspDeInit(&hi2c1);
 80126ae:	4802      	ldr	r0, [pc, #8]	; (80126b8 <sensirion_i2c_hal_free+0x14>)
 80126b0:	f7f0 faac 	bl	8002c0c <HAL_I2C_MspDeInit>
}
 80126b4:	bf00      	nop
 80126b6:	bd80      	pop	{r7, pc}
 80126b8:	20001768 	.word	0x20001768

080126bc <sensirion_i2c_hal_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 80126bc:	b580      	push	{r7, lr}
 80126be:	b084      	sub	sp, #16
 80126c0:	af02      	add	r7, sp, #8
 80126c2:	4603      	mov	r3, r0
 80126c4:	6039      	str	r1, [r7, #0]
 80126c6:	71fb      	strb	r3, [r7, #7]
 80126c8:	4613      	mov	r3, r2
 80126ca:	80bb      	strh	r3, [r7, #4]
    /* TODO:IMPLEMENT */
    return HAL_I2C_Master_Receive(&hi2c1,(uint16_t)(address << 1),data,count,HAL_MAX_DELAY);
 80126cc:	79fb      	ldrb	r3, [r7, #7]
 80126ce:	b29b      	uxth	r3, r3
 80126d0:	005b      	lsls	r3, r3, #1
 80126d2:	b299      	uxth	r1, r3
 80126d4:	88bb      	ldrh	r3, [r7, #4]
 80126d6:	f04f 32ff 	mov.w	r2, #4294967295
 80126da:	9200      	str	r2, [sp, #0]
 80126dc:	683a      	ldr	r2, [r7, #0]
 80126de:	4804      	ldr	r0, [pc, #16]	; (80126f0 <sensirion_i2c_hal_read+0x34>)
 80126e0:	f7f3 f99c 	bl	8005a1c <HAL_I2C_Master_Receive>
 80126e4:	4603      	mov	r3, r0
 80126e6:	b25b      	sxtb	r3, r3
	//return NOT_IMPLEMENTED_ERROR;
}
 80126e8:	4618      	mov	r0, r3
 80126ea:	3708      	adds	r7, #8
 80126ec:	46bd      	mov	sp, r7
 80126ee:	bd80      	pop	{r7, pc}
 80126f0:	20001768 	.word	0x20001768

080126f4 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data,
                               uint16_t count) {
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b084      	sub	sp, #16
 80126f8:	af02      	add	r7, sp, #8
 80126fa:	4603      	mov	r3, r0
 80126fc:	6039      	str	r1, [r7, #0]
 80126fe:	71fb      	strb	r3, [r7, #7]
 8012700:	4613      	mov	r3, r2
 8012702:	80bb      	strh	r3, [r7, #4]
    /* TODO:IMPLEMENT */
	return HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)(address << 1),data,count,HAL_MAX_DELAY);
 8012704:	79fb      	ldrb	r3, [r7, #7]
 8012706:	b29b      	uxth	r3, r3
 8012708:	005b      	lsls	r3, r3, #1
 801270a:	b299      	uxth	r1, r3
 801270c:	88bb      	ldrh	r3, [r7, #4]
 801270e:	f04f 32ff 	mov.w	r2, #4294967295
 8012712:	9200      	str	r2, [sp, #0]
 8012714:	683a      	ldr	r2, [r7, #0]
 8012716:	4804      	ldr	r0, [pc, #16]	; (8012728 <sensirion_i2c_hal_write+0x34>)
 8012718:	f7f3 f882 	bl	8005820 <HAL_I2C_Master_Transmit>
 801271c:	4603      	mov	r3, r0
 801271e:	b25b      	sxtb	r3, r3
	//return NOT_IMPLEMENTED_ERROR;
}
 8012720:	4618      	mov	r0, r3
 8012722:	3708      	adds	r7, #8
 8012724:	46bd      	mov	sp, r7
 8012726:	bd80      	pop	{r7, pc}
 8012728:	20001768 	.word	0x20001768

0801272c <sensirion_i2c_hal_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 801272c:	b580      	push	{r7, lr}
 801272e:	b082      	sub	sp, #8
 8012730:	af00      	add	r7, sp, #0
 8012732:	6078      	str	r0, [r7, #4]
    /* TODO:IMPLEMENT */

	HAL_Delay(useconds/1000);
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	4a05      	ldr	r2, [pc, #20]	; (801274c <sensirion_i2c_hal_sleep_usec+0x20>)
 8012738:	fba2 2303 	umull	r2, r3, r2, r3
 801273c:	099b      	lsrs	r3, r3, #6
 801273e:	4618      	mov	r0, r3
 8012740:	f7f0 fed6 	bl	80034f0 <HAL_Delay>
}
 8012744:	bf00      	nop
 8012746:	3708      	adds	r7, #8
 8012748:	46bd      	mov	sp, r7
 801274a:	bd80      	pop	{r7, pc}
 801274c:	10624dd3 	.word	0x10624dd3

08012750 <sensirion_bytes_to_uint32_t>:

uint16_t sensirion_bytes_to_uint16_t(const uint8_t* bytes) {
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
}

uint32_t sensirion_bytes_to_uint32_t(const uint8_t* bytes) {
 8012750:	b480      	push	{r7}
 8012752:	b083      	sub	sp, #12
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	781b      	ldrb	r3, [r3, #0]
 801275c:	061a      	lsls	r2, r3, #24
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	3301      	adds	r3, #1
 8012762:	781b      	ldrb	r3, [r3, #0]
 8012764:	041b      	lsls	r3, r3, #16
 8012766:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	3302      	adds	r3, #2
 801276c:	781b      	ldrb	r3, [r3, #0]
 801276e:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8012770:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8012772:	687a      	ldr	r2, [r7, #4]
 8012774:	3203      	adds	r2, #3
 8012776:	7812      	ldrb	r2, [r2, #0]
 8012778:	4313      	orrs	r3, r2
}
 801277a:	4618      	mov	r0, r3
 801277c:	370c      	adds	r7, #12
 801277e:	46bd      	mov	sp, r7
 8012780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012784:	4770      	bx	lr

08012786 <sensirion_bytes_to_float>:

int32_t sensirion_bytes_to_int32_t(const uint8_t* bytes) {
    return (int32_t)sensirion_bytes_to_uint32_t(bytes);
}

float sensirion_bytes_to_float(const uint8_t* bytes) {
 8012786:	b580      	push	{r7, lr}
 8012788:	b084      	sub	sp, #16
 801278a:	af00      	add	r7, sp, #0
 801278c:	6078      	str	r0, [r7, #4]
    union {
        uint32_t u32_value;
        float float32;
    } tmp;

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
 801278e:	6878      	ldr	r0, [r7, #4]
 8012790:	f7ff ffde 	bl	8012750 <sensirion_bytes_to_uint32_t>
 8012794:	4603      	mov	r3, r0
 8012796:	60fb      	str	r3, [r7, #12]
    return tmp.float32;
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	ee07 3a90 	vmov	s15, r3
}
 801279e:	eeb0 0a67 	vmov.f32	s0, s15
 80127a2:	3710      	adds	r7, #16
 80127a4:	46bd      	mov	sp, r7
 80127a6:	bd80      	pop	{r7, pc}

080127a8 <sensirion_uint32_t_to_bytes>:

void sensirion_uint32_t_to_bytes(const uint32_t value, uint8_t* bytes) {
 80127a8:	b480      	push	{r7}
 80127aa:	b083      	sub	sp, #12
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
 80127b0:	6039      	str	r1, [r7, #0]
    bytes[0] = value >> 24;
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	0e1b      	lsrs	r3, r3, #24
 80127b6:	b2da      	uxtb	r2, r3
 80127b8:	683b      	ldr	r3, [r7, #0]
 80127ba:	701a      	strb	r2, [r3, #0]
    bytes[1] = value >> 16;
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	0c1a      	lsrs	r2, r3, #16
 80127c0:	683b      	ldr	r3, [r7, #0]
 80127c2:	3301      	adds	r3, #1
 80127c4:	b2d2      	uxtb	r2, r2
 80127c6:	701a      	strb	r2, [r3, #0]
    bytes[2] = value >> 8;
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	0a1a      	lsrs	r2, r3, #8
 80127cc:	683b      	ldr	r3, [r7, #0]
 80127ce:	3302      	adds	r3, #2
 80127d0:	b2d2      	uxtb	r2, r2
 80127d2:	701a      	strb	r2, [r3, #0]
    bytes[3] = value;
 80127d4:	683b      	ldr	r3, [r7, #0]
 80127d6:	3303      	adds	r3, #3
 80127d8:	687a      	ldr	r2, [r7, #4]
 80127da:	b2d2      	uxtb	r2, r2
 80127dc:	701a      	strb	r2, [r3, #0]
}
 80127de:	bf00      	nop
 80127e0:	370c      	adds	r7, #12
 80127e2:	46bd      	mov	sp, r7
 80127e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e8:	4770      	bx	lr

080127ea <sensirion_shdlc_crc>:
    tmp.float32 = value;
    sensirion_uint32_t_to_bytes(tmp.u32_value, bytes);
}

static uint8_t sensirion_shdlc_crc(uint8_t header_sum, uint8_t data_len,
                                   const uint8_t* data) {
 80127ea:	b480      	push	{r7}
 80127ec:	b083      	sub	sp, #12
 80127ee:	af00      	add	r7, sp, #0
 80127f0:	4603      	mov	r3, r0
 80127f2:	603a      	str	r2, [r7, #0]
 80127f4:	71fb      	strb	r3, [r7, #7]
 80127f6:	460b      	mov	r3, r1
 80127f8:	71bb      	strb	r3, [r7, #6]
    header_sum += data_len;
 80127fa:	79fa      	ldrb	r2, [r7, #7]
 80127fc:	79bb      	ldrb	r3, [r7, #6]
 80127fe:	4413      	add	r3, r2
 8012800:	71fb      	strb	r3, [r7, #7]

    while (data_len--)
 8012802:	e006      	b.n	8012812 <sensirion_shdlc_crc+0x28>
        header_sum += *(data++);
 8012804:	683b      	ldr	r3, [r7, #0]
 8012806:	1c5a      	adds	r2, r3, #1
 8012808:	603a      	str	r2, [r7, #0]
 801280a:	781a      	ldrb	r2, [r3, #0]
 801280c:	79fb      	ldrb	r3, [r7, #7]
 801280e:	4413      	add	r3, r2
 8012810:	71fb      	strb	r3, [r7, #7]
    while (data_len--)
 8012812:	79bb      	ldrb	r3, [r7, #6]
 8012814:	1e5a      	subs	r2, r3, #1
 8012816:	71ba      	strb	r2, [r7, #6]
 8012818:	2b00      	cmp	r3, #0
 801281a:	d1f3      	bne.n	8012804 <sensirion_shdlc_crc+0x1a>

    return ~header_sum;
 801281c:	79fb      	ldrb	r3, [r7, #7]
 801281e:	43db      	mvns	r3, r3
 8012820:	b2db      	uxtb	r3, r3
}
 8012822:	4618      	mov	r0, r3
 8012824:	370c      	adds	r7, #12
 8012826:	46bd      	mov	sp, r7
 8012828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801282c:	4770      	bx	lr

0801282e <sensirion_shdlc_stuff_data>:

static uint16_t sensirion_shdlc_stuff_data(uint8_t data_len,
                                           const uint8_t* data,
                                           uint8_t* stuffed_data) {
 801282e:	b480      	push	{r7}
 8012830:	b087      	sub	sp, #28
 8012832:	af00      	add	r7, sp, #0
 8012834:	4603      	mov	r3, r0
 8012836:	60b9      	str	r1, [r7, #8]
 8012838:	607a      	str	r2, [r7, #4]
 801283a:	73fb      	strb	r3, [r7, #15]
    uint16_t output_data_len = 0;
 801283c:	2300      	movs	r3, #0
 801283e:	82fb      	strh	r3, [r7, #22]
    uint8_t c;

    while (data_len--) {
 8012840:	e026      	b.n	8012890 <sensirion_shdlc_stuff_data+0x62>
        c = *(data++);
 8012842:	68bb      	ldr	r3, [r7, #8]
 8012844:	1c5a      	adds	r2, r3, #1
 8012846:	60ba      	str	r2, [r7, #8]
 8012848:	781b      	ldrb	r3, [r3, #0]
 801284a:	757b      	strb	r3, [r7, #21]
        switch (c) {
 801284c:	7d7b      	ldrb	r3, [r7, #21]
 801284e:	2b7e      	cmp	r3, #126	; 0x7e
 8012850:	dc16      	bgt.n	8012880 <sensirion_shdlc_stuff_data+0x52>
 8012852:	2b7d      	cmp	r3, #125	; 0x7d
 8012854:	da03      	bge.n	801285e <sensirion_shdlc_stuff_data+0x30>
 8012856:	2b11      	cmp	r3, #17
 8012858:	d001      	beq.n	801285e <sensirion_shdlc_stuff_data+0x30>
 801285a:	2b13      	cmp	r3, #19
 801285c:	d110      	bne.n	8012880 <sensirion_shdlc_stuff_data+0x52>
            case 0x11:
            case 0x13:
            case 0x7d:
            case 0x7e:
                // byte stuffing is done by inserting 0x7d and inverting bit 5
                *(stuffed_data++) = 0x7d;
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	1c5a      	adds	r2, r3, #1
 8012862:	607a      	str	r2, [r7, #4]
 8012864:	227d      	movs	r2, #125	; 0x7d
 8012866:	701a      	strb	r2, [r3, #0]
                *(stuffed_data++) = c ^ (1 << 5);
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	1c5a      	adds	r2, r3, #1
 801286c:	607a      	str	r2, [r7, #4]
 801286e:	7d7a      	ldrb	r2, [r7, #21]
 8012870:	f082 0220 	eor.w	r2, r2, #32
 8012874:	b2d2      	uxtb	r2, r2
 8012876:	701a      	strb	r2, [r3, #0]
                output_data_len += 2;
 8012878:	8afb      	ldrh	r3, [r7, #22]
 801287a:	3302      	adds	r3, #2
 801287c:	82fb      	strh	r3, [r7, #22]
                break;
 801287e:	e007      	b.n	8012890 <sensirion_shdlc_stuff_data+0x62>
            default:
                *(stuffed_data++) = c;
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	1c5a      	adds	r2, r3, #1
 8012884:	607a      	str	r2, [r7, #4]
 8012886:	7d7a      	ldrb	r2, [r7, #21]
 8012888:	701a      	strb	r2, [r3, #0]
                output_data_len += 1;
 801288a:	8afb      	ldrh	r3, [r7, #22]
 801288c:	3301      	adds	r3, #1
 801288e:	82fb      	strh	r3, [r7, #22]
    while (data_len--) {
 8012890:	7bfb      	ldrb	r3, [r7, #15]
 8012892:	1e5a      	subs	r2, r3, #1
 8012894:	73fa      	strb	r2, [r7, #15]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d1d3      	bne.n	8012842 <sensirion_shdlc_stuff_data+0x14>
        }
    }
    return output_data_len;
 801289a:	8afb      	ldrh	r3, [r7, #22]
}
 801289c:	4618      	mov	r0, r3
 801289e:	371c      	adds	r7, #28
 80128a0:	46bd      	mov	sp, r7
 80128a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a6:	4770      	bx	lr

080128a8 <sensirion_shdlc_check_unstuff>:

static uint8_t sensirion_shdlc_check_unstuff(uint8_t data) {
 80128a8:	b480      	push	{r7}
 80128aa:	b083      	sub	sp, #12
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	4603      	mov	r3, r0
 80128b0:	71fb      	strb	r3, [r7, #7]
    return data == 0x7d;
 80128b2:	79fb      	ldrb	r3, [r7, #7]
 80128b4:	2b7d      	cmp	r3, #125	; 0x7d
 80128b6:	bf0c      	ite	eq
 80128b8:	2301      	moveq	r3, #1
 80128ba:	2300      	movne	r3, #0
 80128bc:	b2db      	uxtb	r3, r3
}
 80128be:	4618      	mov	r0, r3
 80128c0:	370c      	adds	r7, #12
 80128c2:	46bd      	mov	sp, r7
 80128c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c8:	4770      	bx	lr

080128ca <sensirion_shdlc_unstuff_byte>:

static uint8_t sensirion_shdlc_unstuff_byte(uint8_t data) {
 80128ca:	b480      	push	{r7}
 80128cc:	b083      	sub	sp, #12
 80128ce:	af00      	add	r7, sp, #0
 80128d0:	4603      	mov	r3, r0
 80128d2:	71fb      	strb	r3, [r7, #7]
    switch (data) {
 80128d4:	79fb      	ldrb	r3, [r7, #7]
 80128d6:	2b5e      	cmp	r3, #94	; 0x5e
 80128d8:	d010      	beq.n	80128fc <sensirion_shdlc_unstuff_byte+0x32>
 80128da:	2b5e      	cmp	r3, #94	; 0x5e
 80128dc:	dc10      	bgt.n	8012900 <sensirion_shdlc_unstuff_byte+0x36>
 80128de:	2b5d      	cmp	r3, #93	; 0x5d
 80128e0:	d00a      	beq.n	80128f8 <sensirion_shdlc_unstuff_byte+0x2e>
 80128e2:	2b5d      	cmp	r3, #93	; 0x5d
 80128e4:	dc0c      	bgt.n	8012900 <sensirion_shdlc_unstuff_byte+0x36>
 80128e6:	2b31      	cmp	r3, #49	; 0x31
 80128e8:	d002      	beq.n	80128f0 <sensirion_shdlc_unstuff_byte+0x26>
 80128ea:	2b33      	cmp	r3, #51	; 0x33
 80128ec:	d002      	beq.n	80128f4 <sensirion_shdlc_unstuff_byte+0x2a>
 80128ee:	e007      	b.n	8012900 <sensirion_shdlc_unstuff_byte+0x36>
        case 0x31:
            return 0x11;
 80128f0:	2311      	movs	r3, #17
 80128f2:	e006      	b.n	8012902 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x33:
            return 0x13;
 80128f4:	2313      	movs	r3, #19
 80128f6:	e004      	b.n	8012902 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x5d:
            return 0x7d;
 80128f8:	237d      	movs	r3, #125	; 0x7d
 80128fa:	e002      	b.n	8012902 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x5e:
            return 0x7e;
 80128fc:	237e      	movs	r3, #126	; 0x7e
 80128fe:	e000      	b.n	8012902 <sensirion_shdlc_unstuff_byte+0x38>
        default:
            return data;
 8012900:	79fb      	ldrb	r3, [r7, #7]
    }
}
 8012902:	4618      	mov	r0, r3
 8012904:	370c      	adds	r7, #12
 8012906:	46bd      	mov	sp, r7
 8012908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801290c:	4770      	bx	lr

0801290e <sensirion_shdlc_xcv>:

int16_t sensirion_shdlc_xcv(uint8_t addr, uint8_t cmd, uint8_t tx_data_len,
                            const uint8_t* tx_data, uint8_t max_rx_data_len,
                            struct sensirion_shdlc_rx_header* rx_header,
                            uint8_t* rx_data) {
 801290e:	b580      	push	{r7, lr}
 8012910:	b084      	sub	sp, #16
 8012912:	af00      	add	r7, sp, #0
 8012914:	603b      	str	r3, [r7, #0]
 8012916:	4603      	mov	r3, r0
 8012918:	71fb      	strb	r3, [r7, #7]
 801291a:	460b      	mov	r3, r1
 801291c:	71bb      	strb	r3, [r7, #6]
 801291e:	4613      	mov	r3, r2
 8012920:	717b      	strb	r3, [r7, #5]
    int16_t ret;

    ret = sensirion_shdlc_tx(addr, cmd, tx_data_len, tx_data);
 8012922:	797a      	ldrb	r2, [r7, #5]
 8012924:	79b9      	ldrb	r1, [r7, #6]
 8012926:	79f8      	ldrb	r0, [r7, #7]
 8012928:	683b      	ldr	r3, [r7, #0]
 801292a:	f000 f818 	bl	801295e <sensirion_shdlc_tx>
 801292e:	4603      	mov	r3, r0
 8012930:	81fb      	strh	r3, [r7, #14]
    if (ret != 0)
 8012932:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d002      	beq.n	8012940 <sensirion_shdlc_xcv+0x32>
        return ret;
 801293a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801293e:	e00a      	b.n	8012956 <sensirion_shdlc_xcv+0x48>

    sensirion_sleep_usec(RX_DELAY_US);
 8012940:	f644 6020 	movw	r0, #20000	; 0x4e20
 8012944:	f000 fb08 	bl	8012f58 <sensirion_sleep_usec>
    return sensirion_shdlc_rx(max_rx_data_len, rx_header, rx_data);
 8012948:	7e3b      	ldrb	r3, [r7, #24]
 801294a:	6a3a      	ldr	r2, [r7, #32]
 801294c:	69f9      	ldr	r1, [r7, #28]
 801294e:	4618      	mov	r0, r3
 8012950:	f000 f8d8 	bl	8012b04 <sensirion_shdlc_rx>
 8012954:	4603      	mov	r3, r0
}
 8012956:	4618      	mov	r0, r3
 8012958:	3710      	adds	r7, #16
 801295a:	46bd      	mov	sp, r7
 801295c:	bd80      	pop	{r7, pc}

0801295e <sensirion_shdlc_tx>:

int16_t sensirion_shdlc_tx(uint8_t addr, uint8_t cmd, uint8_t data_len,
                           const uint8_t* data) {
 801295e:	b590      	push	{r4, r7, lr}
 8012960:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8012964:	af00      	add	r7, sp, #0
 8012966:	4604      	mov	r4, r0
 8012968:	4608      	mov	r0, r1
 801296a:	4611      	mov	r1, r2
 801296c:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8012970:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8012974:	6013      	str	r3, [r2, #0]
 8012976:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801297a:	f2a3 2311 	subw	r3, r3, #529	; 0x211
 801297e:	4622      	mov	r2, r4
 8012980:	701a      	strb	r2, [r3, #0]
 8012982:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012986:	f2a3 2312 	subw	r3, r3, #530	; 0x212
 801298a:	4602      	mov	r2, r0
 801298c:	701a      	strb	r2, [r3, #0]
 801298e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012992:	f2a3 2313 	subw	r3, r3, #531	; 0x213
 8012996:	460a      	mov	r2, r1
 8012998:	701a      	strb	r2, [r3, #0]
    uint16_t len = 0;
 801299a:	2300      	movs	r3, #0
 801299c:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    int16_t ret;
    uint8_t crc;
    uint8_t tx_frame_buf[SHDLC_FRAME_MAX_TX_FRAME_SIZE];

    crc = sensirion_shdlc_crc(addr + cmd, data_len, data);
 80129a0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80129a4:	f2a3 2311 	subw	r3, r3, #529	; 0x211
 80129a8:	781a      	ldrb	r2, [r3, #0]
 80129aa:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80129ae:	f2a3 2312 	subw	r3, r3, #530	; 0x212
 80129b2:	781b      	ldrb	r3, [r3, #0]
 80129b4:	4413      	add	r3, r2
 80129b6:	b2d8      	uxtb	r0, r3
 80129b8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80129bc:	f2a3 2313 	subw	r3, r3, #531	; 0x213
 80129c0:	7819      	ldrb	r1, [r3, #0]
 80129c2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80129c6:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80129ca:	681a      	ldr	r2, [r3, #0]
 80129cc:	f7ff ff0d 	bl	80127ea <sensirion_shdlc_crc>
 80129d0:	4603      	mov	r3, r0
 80129d2:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213

    tx_frame_buf[len++] = SHDLC_START;
 80129d6:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80129da:	1c5a      	adds	r2, r3, #1
 80129dc:	f8a7 2216 	strh.w	r2, [r7, #534]	; 0x216
 80129e0:	461a      	mov	r2, r3
 80129e2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80129e6:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80129ea:	217e      	movs	r1, #126	; 0x7e
 80129ec:	5499      	strb	r1, [r3, r2]
    len += sensirion_shdlc_stuff_data(1, &addr, tx_frame_buf + len);
 80129ee:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80129f2:	f107 0208 	add.w	r2, r7, #8
 80129f6:	441a      	add	r2, r3
 80129f8:	1dfb      	adds	r3, r7, #7
 80129fa:	4619      	mov	r1, r3
 80129fc:	2001      	movs	r0, #1
 80129fe:	f7ff ff16 	bl	801282e <sensirion_shdlc_stuff_data>
 8012a02:	4603      	mov	r3, r0
 8012a04:	461a      	mov	r2, r3
 8012a06:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012a0a:	4413      	add	r3, r2
 8012a0c:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    len += sensirion_shdlc_stuff_data(1, &cmd, tx_frame_buf + len);
 8012a10:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012a14:	f107 0208 	add.w	r2, r7, #8
 8012a18:	441a      	add	r2, r3
 8012a1a:	1dbb      	adds	r3, r7, #6
 8012a1c:	4619      	mov	r1, r3
 8012a1e:	2001      	movs	r0, #1
 8012a20:	f7ff ff05 	bl	801282e <sensirion_shdlc_stuff_data>
 8012a24:	4603      	mov	r3, r0
 8012a26:	461a      	mov	r2, r3
 8012a28:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012a2c:	4413      	add	r3, r2
 8012a2e:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    len += sensirion_shdlc_stuff_data(1, &data_len, tx_frame_buf + len);
 8012a32:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012a36:	f107 0208 	add.w	r2, r7, #8
 8012a3a:	441a      	add	r2, r3
 8012a3c:	1d7b      	adds	r3, r7, #5
 8012a3e:	4619      	mov	r1, r3
 8012a40:	2001      	movs	r0, #1
 8012a42:	f7ff fef4 	bl	801282e <sensirion_shdlc_stuff_data>
 8012a46:	4603      	mov	r3, r0
 8012a48:	461a      	mov	r2, r3
 8012a4a:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012a4e:	4413      	add	r3, r2
 8012a50:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    len += sensirion_shdlc_stuff_data(data_len, data, tx_frame_buf + len);
 8012a54:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012a58:	f2a3 2313 	subw	r3, r3, #531	; 0x213
 8012a5c:	7818      	ldrb	r0, [r3, #0]
 8012a5e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012a62:	f107 0208 	add.w	r2, r7, #8
 8012a66:	441a      	add	r2, r3
 8012a68:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012a6c:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8012a70:	6819      	ldr	r1, [r3, #0]
 8012a72:	f7ff fedc 	bl	801282e <sensirion_shdlc_stuff_data>
 8012a76:	4603      	mov	r3, r0
 8012a78:	461a      	mov	r2, r3
 8012a7a:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012a7e:	4413      	add	r3, r2
 8012a80:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    len += sensirion_shdlc_stuff_data(1, &crc, tx_frame_buf + len);
 8012a84:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012a88:	f107 0208 	add.w	r2, r7, #8
 8012a8c:	441a      	add	r2, r3
 8012a8e:	f207 2313 	addw	r3, r7, #531	; 0x213
 8012a92:	4619      	mov	r1, r3
 8012a94:	2001      	movs	r0, #1
 8012a96:	f7ff feca 	bl	801282e <sensirion_shdlc_stuff_data>
 8012a9a:	4603      	mov	r3, r0
 8012a9c:	461a      	mov	r2, r3
 8012a9e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012aa2:	4413      	add	r3, r2
 8012aa4:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    tx_frame_buf[len++] = SHDLC_STOP;
 8012aa8:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012aac:	1c5a      	adds	r2, r3, #1
 8012aae:	f8a7 2216 	strh.w	r2, [r7, #534]	; 0x216
 8012ab2:	461a      	mov	r2, r3
 8012ab4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012ab8:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012abc:	217e      	movs	r1, #126	; 0x7e
 8012abe:	5499      	strb	r1, [r3, r2]

    ret = sensirion_uart_tx(len, tx_frame_buf);
 8012ac0:	f107 0208 	add.w	r2, r7, #8
 8012ac4:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012ac8:	4611      	mov	r1, r2
 8012aca:	4618      	mov	r0, r3
 8012acc:	f000 f9dc 	bl	8012e88 <sensirion_uart_tx>
 8012ad0:	4603      	mov	r3, r0
 8012ad2:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
    if (ret < 0)
 8012ad6:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	da02      	bge.n	8012ae4 <sensirion_shdlc_tx+0x186>
        return ret;
 8012ade:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 8012ae2:	e009      	b.n	8012af8 <sensirion_shdlc_tx+0x19a>
    if (ret != len)
 8012ae4:	f9b7 2214 	ldrsh.w	r2, [r7, #532]	; 0x214
 8012ae8:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8012aec:	429a      	cmp	r2, r3
 8012aee:	d002      	beq.n	8012af6 <sensirion_shdlc_tx+0x198>
        return SENSIRION_SHDLC_ERR_TX_INCOMPLETE;
 8012af0:	f06f 0305 	mvn.w	r3, #5
 8012af4:	e000      	b.n	8012af8 <sensirion_shdlc_tx+0x19a>
    return 0;
 8012af6:	2300      	movs	r3, #0
}
 8012af8:	4618      	mov	r0, r3
 8012afa:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8012afe:	46bd      	mov	sp, r7
 8012b00:	bd90      	pop	{r4, r7, pc}
	...

08012b04 <sensirion_shdlc_rx>:

int16_t sensirion_shdlc_rx(uint8_t max_data_len,
                           struct sensirion_shdlc_rx_header* rxh,
                           uint8_t* data) {
 8012b04:	b590      	push	{r4, r7, lr}
 8012b06:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8012b0a:	af00      	add	r7, sp, #0
 8012b0c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012b10:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8012b14:	6019      	str	r1, [r3, #0]
 8012b16:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012b1a:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8012b1e:	601a      	str	r2, [r3, #0]
 8012b20:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012b24:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 8012b28:	4602      	mov	r2, r0
 8012b2a:	701a      	strb	r2, [r3, #0]
    int16_t len;
    uint16_t i;
    uint8_t rx_frame[SHDLC_FRAME_MAX_RX_FRAME_SIZE];
    uint8_t* rx_header = (uint8_t*)rxh;
 8012b2c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012b30:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    uint8_t j;
    uint8_t crc;
    uint8_t unstuff_next;

    len = sensirion_uart_rx(2 + (5 + (uint16_t)max_data_len) * 2, rx_frame);
 8012b3a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012b3e:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 8012b42:	781b      	ldrb	r3, [r3, #0]
 8012b44:	3306      	adds	r3, #6
 8012b46:	b29b      	uxth	r3, r3
 8012b48:	005b      	lsls	r3, r3, #1
 8012b4a:	b29b      	uxth	r3, r3
 8012b4c:	f107 0210 	add.w	r2, r7, #16
 8012b50:	4611      	mov	r1, r2
 8012b52:	4618      	mov	r0, r3
 8012b54:	f000 f9d2 	bl	8012efc <sensirion_uart_rx>
 8012b58:	4603      	mov	r3, r0
 8012b5a:	f8a7 321a 	strh.w	r3, [r7, #538]	; 0x21a


//      printf("First byte is : %02X \r\n", RX_Data[0]);
//      printf("Total %d bytes received \r\n", len);

      if (len < 1 || RX_Data[0] != SHDLC_START)
 8012b5e:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	; 0x21a
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	dd03      	ble.n	8012b6e <sensirion_shdlc_rx+0x6a>
 8012b66:	4ba0      	ldr	r3, [pc, #640]	; (8012de8 <sensirion_shdlc_rx+0x2e4>)
 8012b68:	781b      	ldrb	r3, [r3, #0]
 8012b6a:	2b7e      	cmp	r3, #126	; 0x7e
 8012b6c:	d002      	beq.n	8012b74 <sensirion_shdlc_rx+0x70>
        return SENSIRION_SHDLC_ERR_MISSING_START;
 8012b6e:	f06f 0301 	mvn.w	r3, #1
 8012b72:	e133      	b.n	8012ddc <sensirion_shdlc_rx+0x2d8>

    for (unstuff_next = 0, i = 1, j = 0; j < sizeof(*rxh) && i < len - 2; ++i) {
 8012b74:	2300      	movs	r3, #0
 8012b76:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
 8012b7a:	2301      	movs	r3, #1
 8012b7c:	f8a7 3226 	strh.w	r3, [r7, #550]	; 0x226
 8012b80:	2300      	movs	r3, #0
 8012b82:	f887 3225 	strb.w	r3, [r7, #549]	; 0x225
 8012b86:	e03a      	b.n	8012bfe <sensirion_shdlc_rx+0xfa>
        if (unstuff_next) {
 8012b88:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d015      	beq.n	8012bbc <sensirion_shdlc_rx+0xb8>
            rx_header[j++] = sensirion_shdlc_unstuff_byte(RX_Data[i]);
 8012b90:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8012b94:	4a94      	ldr	r2, [pc, #592]	; (8012de8 <sensirion_shdlc_rx+0x2e4>)
 8012b96:	5cd2      	ldrb	r2, [r2, r3]
 8012b98:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 8012b9c:	1c59      	adds	r1, r3, #1
 8012b9e:	f887 1225 	strb.w	r1, [r7, #549]	; 0x225
 8012ba2:	4619      	mov	r1, r3
 8012ba4:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8012ba8:	185c      	adds	r4, r3, r1
 8012baa:	4610      	mov	r0, r2
 8012bac:	f7ff fe8d 	bl	80128ca <sensirion_shdlc_unstuff_byte>
 8012bb0:	4603      	mov	r3, r0
 8012bb2:	7023      	strb	r3, [r4, #0]
            unstuff_next = 0;
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
 8012bba:	e01b      	b.n	8012bf4 <sensirion_shdlc_rx+0xf0>
        } else {
            unstuff_next = sensirion_shdlc_check_unstuff(RX_Data[i]);
 8012bbc:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8012bc0:	4a89      	ldr	r2, [pc, #548]	; (8012de8 <sensirion_shdlc_rx+0x2e4>)
 8012bc2:	5cd3      	ldrb	r3, [r2, r3]
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	f7ff fe6f 	bl	80128a8 <sensirion_shdlc_check_unstuff>
 8012bca:	4603      	mov	r3, r0
 8012bcc:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
            if (!unstuff_next)
 8012bd0:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d10d      	bne.n	8012bf4 <sensirion_shdlc_rx+0xf0>
                rx_header[j++] = RX_Data[i];
 8012bd8:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 8012bdc:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 8012be0:	1c59      	adds	r1, r3, #1
 8012be2:	f887 1225 	strb.w	r1, [r7, #549]	; 0x225
 8012be6:	4619      	mov	r1, r3
 8012be8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8012bec:	440b      	add	r3, r1
 8012bee:	497e      	ldr	r1, [pc, #504]	; (8012de8 <sensirion_shdlc_rx+0x2e4>)
 8012bf0:	5c8a      	ldrb	r2, [r1, r2]
 8012bf2:	701a      	strb	r2, [r3, #0]
    for (unstuff_next = 0, i = 1, j = 0; j < sizeof(*rxh) && i < len - 2; ++i) {
 8012bf4:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8012bf8:	3301      	adds	r3, #1
 8012bfa:	f8a7 3226 	strh.w	r3, [r7, #550]	; 0x226
 8012bfe:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 8012c02:	2b03      	cmp	r3, #3
 8012c04:	d806      	bhi.n	8012c14 <sensirion_shdlc_rx+0x110>
 8012c06:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 8012c0a:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	; 0x21a
 8012c0e:	3b02      	subs	r3, #2
 8012c10:	429a      	cmp	r2, r3
 8012c12:	dbb9      	blt.n	8012b88 <sensirion_shdlc_rx+0x84>
        }
    }
    if (j != sizeof(*rxh) || unstuff_next)
 8012c14:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 8012c18:	2b04      	cmp	r3, #4
 8012c1a:	d103      	bne.n	8012c24 <sensirion_shdlc_rx+0x120>
 8012c1c:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d002      	beq.n	8012c2a <sensirion_shdlc_rx+0x126>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 8012c24:	f06f 0304 	mvn.w	r3, #4
 8012c28:	e0d8      	b.n	8012ddc <sensirion_shdlc_rx+0x2d8>

    if (max_data_len < rxh->data_len)
 8012c2a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012c2e:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	78db      	ldrb	r3, [r3, #3]
 8012c36:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8012c3a:	f2a2 2219 	subw	r2, r2, #537	; 0x219
 8012c3e:	7812      	ldrb	r2, [r2, #0]
 8012c40:	429a      	cmp	r2, r3
 8012c42:	d202      	bcs.n	8012c4a <sensirion_shdlc_rx+0x146>
        return SENSIRION_SHDLC_ERR_FRAME_TOO_LONG; /* more data than expected */
 8012c44:	f06f 0306 	mvn.w	r3, #6
 8012c48:	e0c8      	b.n	8012ddc <sensirion_shdlc_rx+0x2d8>

    for (unstuff_next = 0, j = 0; j < rxh->data_len && i < len - 2; ++i) {
 8012c4a:	2300      	movs	r3, #0
 8012c4c:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
 8012c50:	2300      	movs	r3, #0
 8012c52:	f887 3225 	strb.w	r3, [r7, #549]	; 0x225
 8012c56:	e040      	b.n	8012cda <sensirion_shdlc_rx+0x1d6>
        if (unstuff_next) {
 8012c58:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d018      	beq.n	8012c92 <sensirion_shdlc_rx+0x18e>
            data[j++] = sensirion_shdlc_unstuff_byte(RX_Data[i]);
 8012c60:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8012c64:	4a60      	ldr	r2, [pc, #384]	; (8012de8 <sensirion_shdlc_rx+0x2e4>)
 8012c66:	5cd2      	ldrb	r2, [r2, r3]
 8012c68:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 8012c6c:	1c59      	adds	r1, r3, #1
 8012c6e:	f887 1225 	strb.w	r1, [r7, #549]	; 0x225
 8012c72:	4619      	mov	r1, r3
 8012c74:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012c78:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	185c      	adds	r4, r3, r1
 8012c80:	4610      	mov	r0, r2
 8012c82:	f7ff fe22 	bl	80128ca <sensirion_shdlc_unstuff_byte>
 8012c86:	4603      	mov	r3, r0
 8012c88:	7023      	strb	r3, [r4, #0]
            unstuff_next = 0;
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
 8012c90:	e01e      	b.n	8012cd0 <sensirion_shdlc_rx+0x1cc>
        } else {
            unstuff_next = sensirion_shdlc_check_unstuff(RX_Data[i]);
 8012c92:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8012c96:	4a54      	ldr	r2, [pc, #336]	; (8012de8 <sensirion_shdlc_rx+0x2e4>)
 8012c98:	5cd3      	ldrb	r3, [r2, r3]
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	f7ff fe04 	bl	80128a8 <sensirion_shdlc_check_unstuff>
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
            if (!unstuff_next)
 8012ca6:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d110      	bne.n	8012cd0 <sensirion_shdlc_rx+0x1cc>
                data[j++] = RX_Data[i];
 8012cae:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 8012cb2:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 8012cb6:	1c59      	adds	r1, r3, #1
 8012cb8:	f887 1225 	strb.w	r1, [r7, #549]	; 0x225
 8012cbc:	4619      	mov	r1, r3
 8012cbe:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012cc2:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	440b      	add	r3, r1
 8012cca:	4947      	ldr	r1, [pc, #284]	; (8012de8 <sensirion_shdlc_rx+0x2e4>)
 8012ccc:	5c8a      	ldrb	r2, [r1, r2]
 8012cce:	701a      	strb	r2, [r3, #0]
    for (unstuff_next = 0, j = 0; j < rxh->data_len && i < len - 2; ++i) {
 8012cd0:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8012cd4:	3301      	adds	r3, #1
 8012cd6:	f8a7 3226 	strh.w	r3, [r7, #550]	; 0x226
 8012cda:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012cde:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	78db      	ldrb	r3, [r3, #3]
 8012ce6:	f897 2225 	ldrb.w	r2, [r7, #549]	; 0x225
 8012cea:	429a      	cmp	r2, r3
 8012cec:	d206      	bcs.n	8012cfc <sensirion_shdlc_rx+0x1f8>
 8012cee:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 8012cf2:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	; 0x21a
 8012cf6:	3b02      	subs	r3, #2
 8012cf8:	429a      	cmp	r2, r3
 8012cfa:	dbad      	blt.n	8012c58 <sensirion_shdlc_rx+0x154>
        }
    }

    if (unstuff_next)
 8012cfc:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d002      	beq.n	8012d0a <sensirion_shdlc_rx+0x206>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 8012d04:	f06f 0304 	mvn.w	r3, #4
 8012d08:	e068      	b.n	8012ddc <sensirion_shdlc_rx+0x2d8>

    if (j < rxh->data_len)
 8012d0a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012d0e:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	78db      	ldrb	r3, [r3, #3]
 8012d16:	f897 2225 	ldrb.w	r2, [r7, #549]	; 0x225
 8012d1a:	429a      	cmp	r2, r3
 8012d1c:	d202      	bcs.n	8012d24 <sensirion_shdlc_rx+0x220>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 8012d1e:	f06f 0304 	mvn.w	r3, #4
 8012d22:	e05b      	b.n	8012ddc <sensirion_shdlc_rx+0x2d8>

    crc = RX_Data[i++];
 8012d24:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8012d28:	1c5a      	adds	r2, r3, #1
 8012d2a:	f8a7 2226 	strh.w	r2, [r7, #550]	; 0x226
 8012d2e:	461a      	mov	r2, r3
 8012d30:	4b2d      	ldr	r3, [pc, #180]	; (8012de8 <sensirion_shdlc_rx+0x2e4>)
 8012d32:	5c9b      	ldrb	r3, [r3, r2]
 8012d34:	f887 3224 	strb.w	r3, [r7, #548]	; 0x224
    if (sensirion_shdlc_check_unstuff(crc))
 8012d38:	f897 3224 	ldrb.w	r3, [r7, #548]	; 0x224
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	f7ff fdb3 	bl	80128a8 <sensirion_shdlc_check_unstuff>
 8012d42:	4603      	mov	r3, r0
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d00d      	beq.n	8012d64 <sensirion_shdlc_rx+0x260>
        crc = sensirion_shdlc_unstuff_byte(RX_Data[i++]);
 8012d48:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8012d4c:	1c5a      	adds	r2, r3, #1
 8012d4e:	f8a7 2226 	strh.w	r2, [r7, #550]	; 0x226
 8012d52:	461a      	mov	r2, r3
 8012d54:	4b24      	ldr	r3, [pc, #144]	; (8012de8 <sensirion_shdlc_rx+0x2e4>)
 8012d56:	5c9b      	ldrb	r3, [r3, r2]
 8012d58:	4618      	mov	r0, r3
 8012d5a:	f7ff fdb6 	bl	80128ca <sensirion_shdlc_unstuff_byte>
 8012d5e:	4603      	mov	r3, r0
 8012d60:	f887 3224 	strb.w	r3, [r7, #548]	; 0x224

    if (sensirion_shdlc_crc(rxh->addr + rxh->cmd + rxh->state, rxh->data_len,
 8012d64:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012d68:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	781a      	ldrb	r2, [r3, #0]
 8012d70:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012d74:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	785b      	ldrb	r3, [r3, #1]
 8012d7c:	4413      	add	r3, r2
 8012d7e:	b2da      	uxtb	r2, r3
 8012d80:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012d84:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	789b      	ldrb	r3, [r3, #2]
 8012d8c:	4413      	add	r3, r2
 8012d8e:	b2d8      	uxtb	r0, r3
 8012d90:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012d94:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	78d9      	ldrb	r1, [r3, #3]
 8012d9c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8012da0:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8012da4:	681a      	ldr	r2, [r3, #0]
 8012da6:	f7ff fd20 	bl	80127ea <sensirion_shdlc_crc>
 8012daa:	4603      	mov	r3, r0
 8012dac:	461a      	mov	r2, r3
 8012dae:	f897 3224 	ldrb.w	r3, [r7, #548]	; 0x224
 8012db2:	4293      	cmp	r3, r2
 8012db4:	d002      	beq.n	8012dbc <sensirion_shdlc_rx+0x2b8>
                            data) != crc)
        return SENSIRION_SHDLC_ERR_CRC_MISMATCH;
 8012db6:	f06f 0303 	mvn.w	r3, #3
 8012dba:	e00f      	b.n	8012ddc <sensirion_shdlc_rx+0x2d8>

    if (i >= len || RX_Data[i] != SHDLC_STOP)
 8012dbc:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 8012dc0:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	; 0x21a
 8012dc4:	429a      	cmp	r2, r3
 8012dc6:	da05      	bge.n	8012dd4 <sensirion_shdlc_rx+0x2d0>
 8012dc8:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8012dcc:	4a06      	ldr	r2, [pc, #24]	; (8012de8 <sensirion_shdlc_rx+0x2e4>)
 8012dce:	5cd3      	ldrb	r3, [r2, r3]
 8012dd0:	2b7e      	cmp	r3, #126	; 0x7e
 8012dd2:	d002      	beq.n	8012dda <sensirion_shdlc_rx+0x2d6>
        return SENSIRION_SHDLC_ERR_MISSING_STOP;
 8012dd4:	f06f 0302 	mvn.w	r3, #2
 8012dd8:	e000      	b.n	8012ddc <sensirion_shdlc_rx+0x2d8>

    return 0;
 8012dda:	2300      	movs	r3, #0
}
 8012ddc:	4618      	mov	r0, r3
 8012dde:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8012de2:	46bd      	mov	sp, r7
 8012de4:	bd90      	pop	{r4, r7, pc}
 8012de6:	bf00      	nop
 8012de8:	200014bc 	.word	0x200014bc

08012dec <sensirion_uart_open>:
/**
 * sensirion_uart_open() - initialize UART
 *
 * Return:      0 on success, an error code otherwise
 */
int16_t sensirion_uart_open() {
 8012dec:	b580      	push	{r7, lr}
 8012dee:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart2);
 8012df0:	4819      	ldr	r0, [pc, #100]	; (8012e58 <sensirion_uart_open+0x6c>)
 8012df2:	f7f8 fa14 	bl	800b21e <HAL_UART_DeInit>
	  huart2.Instance = USART2;
 8012df6:	4b18      	ldr	r3, [pc, #96]	; (8012e58 <sensirion_uart_open+0x6c>)
 8012df8:	4a18      	ldr	r2, [pc, #96]	; (8012e5c <sensirion_uart_open+0x70>)
 8012dfa:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 8012dfc:	4b16      	ldr	r3, [pc, #88]	; (8012e58 <sensirion_uart_open+0x6c>)
 8012dfe:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8012e02:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8012e04:	4b14      	ldr	r3, [pc, #80]	; (8012e58 <sensirion_uart_open+0x6c>)
 8012e06:	2200      	movs	r2, #0
 8012e08:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8012e0a:	4b13      	ldr	r3, [pc, #76]	; (8012e58 <sensirion_uart_open+0x6c>)
 8012e0c:	2200      	movs	r2, #0
 8012e0e:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8012e10:	4b11      	ldr	r3, [pc, #68]	; (8012e58 <sensirion_uart_open+0x6c>)
 8012e12:	2200      	movs	r2, #0
 8012e14:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8012e16:	4b10      	ldr	r3, [pc, #64]	; (8012e58 <sensirion_uart_open+0x6c>)
 8012e18:	220c      	movs	r2, #12
 8012e1a:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8012e1c:	4b0e      	ldr	r3, [pc, #56]	; (8012e58 <sensirion_uart_open+0x6c>)
 8012e1e:	2200      	movs	r2, #0
 8012e20:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8012e22:	4b0d      	ldr	r3, [pc, #52]	; (8012e58 <sensirion_uart_open+0x6c>)
 8012e24:	2200      	movs	r2, #0
 8012e26:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 8012e28:	480b      	ldr	r0, [pc, #44]	; (8012e58 <sensirion_uart_open+0x6c>)
 8012e2a:	f7f8 f9ab 	bl	800b184 <HAL_UART_Init>
 8012e2e:	4603      	mov	r3, r0
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d001      	beq.n	8012e38 <sensirion_uart_open+0x4c>
	  {
	    Error_Handler();
 8012e34:	f7ef fe12 	bl	8002a5c <Error_Handler>
	  }

		HAL_UARTEx_ReceiveToIdle_IT(&huart2, RX_Data, 522);
 8012e38:	f240 220a 	movw	r2, #522	; 0x20a
 8012e3c:	4908      	ldr	r1, [pc, #32]	; (8012e60 <sensirion_uart_open+0x74>)
 8012e3e:	4806      	ldr	r0, [pc, #24]	; (8012e58 <sensirion_uart_open+0x6c>)
 8012e40:	f7f8 fade 	bl	800b400 <HAL_UARTEx_ReceiveToIdle_IT>
		//HAL_UART_Receive_IT(&huart2, &rx_Data, 1);
		 rx_len=0;
 8012e44:	4b07      	ldr	r3, [pc, #28]	; (8012e64 <sensirion_uart_open+0x78>)
 8012e46:	2200      	movs	r2, #0
 8012e48:	801a      	strh	r2, [r3, #0]
		rx_incre = 0;
 8012e4a:	4b07      	ldr	r3, [pc, #28]	; (8012e68 <sensirion_uart_open+0x7c>)
 8012e4c:	2200      	movs	r2, #0
 8012e4e:	801a      	strh	r2, [r3, #0]
		//HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RX_Data, 522);
    return 0;
 8012e50:	2300      	movs	r3, #0
}
 8012e52:	4618      	mov	r0, r3
 8012e54:	bd80      	pop	{r7, pc}
 8012e56:	bf00      	nop
 8012e58:	200019dc 	.word	0x200019dc
 8012e5c:	40004400 	.word	0x40004400
 8012e60:	200014bc 	.word	0x200014bc
 8012e64:	20001a78 	.word	0x20001a78
 8012e68:	20001a7a 	.word	0x20001a7a

08012e6c <sensirion_uart_close>:
/**
 * sensirion_uart_close() - release UART resources
 *
 * Return:      0 on success, an error code otherwise
 */
int16_t sensirion_uart_close() {
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	af00      	add	r7, sp, #0
    // TODO: implement
	HAL_UART_DeInit(&huart2);
 8012e70:	4804      	ldr	r0, [pc, #16]	; (8012e84 <sensirion_uart_close+0x18>)
 8012e72:	f7f8 f9d4 	bl	800b21e <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart2);
 8012e76:	4803      	ldr	r0, [pc, #12]	; (8012e84 <sensirion_uart_close+0x18>)
 8012e78:	f7f0 f910 	bl	800309c <HAL_UART_MspDeInit>
    return 0;
 8012e7c:	2300      	movs	r3, #0
}
 8012e7e:	4618      	mov	r0, r3
 8012e80:	bd80      	pop	{r7, pc}
 8012e82:	bf00      	nop
 8012e84:	200019dc 	.word	0x200019dc

08012e88 <sensirion_uart_tx>:
 *
 * @data_len:   number of bytes to send
 * @data:       data to send
 * Return:      Number of bytes sent or a negative error code
 */
int16_t sensirion_uart_tx(uint16_t data_len, const uint8_t* data) {
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b082      	sub	sp, #8
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	4603      	mov	r3, r0
 8012e90:	6039      	str	r1, [r7, #0]
 8012e92:	80fb      	strh	r3, [r7, #6]
    // TODO: implement
	if(HAL_UART_Transmit(&huart2, data, data_len, HAL_MAX_DELAY) == HAL_OK)
 8012e94:	88fa      	ldrh	r2, [r7, #6]
 8012e96:	f04f 33ff 	mov.w	r3, #4294967295
 8012e9a:	6839      	ldr	r1, [r7, #0]
 8012e9c:	4807      	ldr	r0, [pc, #28]	; (8012ebc <sensirion_uart_tx+0x34>)
 8012e9e:	f7f8 f9ed 	bl	800b27c <HAL_UART_Transmit>
 8012ea2:	4603      	mov	r3, r0
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d102      	bne.n	8012eae <sensirion_uart_tx+0x26>
		{
			return data_len;
 8012ea8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012eac:	e001      	b.n	8012eb2 <sensirion_uart_tx+0x2a>
		}
		else
		{
			return -1;
 8012eae:	f04f 33ff 	mov.w	r3, #4294967295

		}

	return data_len;
}
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	3708      	adds	r7, #8
 8012eb6:	46bd      	mov	sp, r7
 8012eb8:	bd80      	pop	{r7, pc}
 8012eba:	bf00      	nop
 8012ebc:	200019dc 	.word	0x200019dc

08012ec0 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8012ec0:	b580      	push	{r7, lr}
 8012ec2:	b082      	sub	sp, #8
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	6078      	str	r0, [r7, #4]
 8012ec8:	460b      	mov	r3, r1
 8012eca:	807b      	strh	r3, [r7, #2]

	rx_len = Size;
 8012ecc:	4a07      	ldr	r2, [pc, #28]	; (8012eec <HAL_UARTEx_RxEventCallback+0x2c>)
 8012ece:	887b      	ldrh	r3, [r7, #2]
 8012ed0:	8013      	strh	r3, [r2, #0]
	rx_Wait = 1;
 8012ed2:	4b07      	ldr	r3, [pc, #28]	; (8012ef0 <HAL_UARTEx_RxEventCallback+0x30>)
 8012ed4:	2201      	movs	r2, #1
 8012ed6:	701a      	strb	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_IT(&huart2,RX_Data, 522);
 8012ed8:	f240 220a 	movw	r2, #522	; 0x20a
 8012edc:	4905      	ldr	r1, [pc, #20]	; (8012ef4 <HAL_UARTEx_RxEventCallback+0x34>)
 8012ede:	4806      	ldr	r0, [pc, #24]	; (8012ef8 <HAL_UARTEx_RxEventCallback+0x38>)
 8012ee0:	f7f8 fa8e 	bl	800b400 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8012ee4:	bf00      	nop
 8012ee6:	3708      	adds	r7, #8
 8012ee8:	46bd      	mov	sp, r7
 8012eea:	bd80      	pop	{r7, pc}
 8012eec:	20001a78 	.word	0x20001a78
 8012ef0:	20001a7c 	.word	0x20001a7c
 8012ef4:	200014bc 	.word	0x200014bc
 8012ef8:	200019dc 	.word	0x200019dc

08012efc <sensirion_uart_rx>:
 *
 * @data_len:   max number of bytes to receive
 * @data:       Memory where received data is stored
 * Return:      Number of bytes received or a negative error code
 */
int16_t sensirion_uart_rx(uint16_t max_data_len, uint8_t* data) {
 8012efc:	b580      	push	{r7, lr}
 8012efe:	b084      	sub	sp, #16
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	4603      	mov	r3, r0
 8012f04:	6039      	str	r1, [r7, #0]
 8012f06:	80fb      	strh	r3, [r7, #6]
    // TODO: implement
uint32_t counter = 0;
 8012f08:	2300      	movs	r3, #0
 8012f0a:	60fb      	str	r3, [r7, #12]

//we give 200ms of delay
		  while(!rx_Wait && counter <= 2)
 8012f0c:	e005      	b.n	8012f1a <sensirion_uart_rx+0x1e>
		  {
			  counter++;
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	3301      	adds	r3, #1
 8012f12:	60fb      	str	r3, [r7, #12]
			  HAL_Delay(10);
 8012f14:	200a      	movs	r0, #10
 8012f16:	f7f0 faeb 	bl	80034f0 <HAL_Delay>
		  while(!rx_Wait && counter <= 2)
 8012f1a:	4b0b      	ldr	r3, [pc, #44]	; (8012f48 <sensirion_uart_rx+0x4c>)
 8012f1c:	781b      	ldrb	r3, [r3, #0]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d102      	bne.n	8012f28 <sensirion_uart_rx+0x2c>
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	2b02      	cmp	r3, #2
 8012f26:	d9f2      	bls.n	8012f0e <sensirion_uart_rx+0x12>

		  }
		    rx_Wait = 0;
 8012f28:	4b07      	ldr	r3, [pc, #28]	; (8012f48 <sensirion_uart_rx+0x4c>)
 8012f2a:	2200      	movs	r2, #0
 8012f2c:	701a      	strb	r2, [r3, #0]

//		    if(counter > 3)
//		    {
//		    	sensirion_uart_open();
//		    }
		    len = 0;
 8012f2e:	4b07      	ldr	r3, [pc, #28]	; (8012f4c <sensirion_uart_rx+0x50>)
 8012f30:	2200      	movs	r2, #0
 8012f32:	801a      	strh	r2, [r3, #0]
		    rx_incre = 0;
 8012f34:	4b06      	ldr	r3, [pc, #24]	; (8012f50 <sensirion_uart_rx+0x54>)
 8012f36:	2200      	movs	r2, #0
 8012f38:	801a      	strh	r2, [r3, #0]
	    return rx_len;
 8012f3a:	4b06      	ldr	r3, [pc, #24]	; (8012f54 <sensirion_uart_rx+0x58>)
 8012f3c:	881b      	ldrh	r3, [r3, #0]
 8012f3e:	b21b      	sxth	r3, r3
	//return i;
}
 8012f40:	4618      	mov	r0, r3
 8012f42:	3710      	adds	r7, #16
 8012f44:	46bd      	mov	sp, r7
 8012f46:	bd80      	pop	{r7, pc}
 8012f48:	20001a7c 	.word	0x20001a7c
 8012f4c:	20001a7e 	.word	0x20001a7e
 8012f50:	20001a7a 	.word	0x20001a7a
 8012f54:	20001a78 	.word	0x20001a78

08012f58 <sensirion_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b082      	sub	sp, #8
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
    // TODO: implement
	useconds = (useconds/1000);
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	4a06      	ldr	r2, [pc, #24]	; (8012f7c <sensirion_sleep_usec+0x24>)
 8012f64:	fba2 2303 	umull	r2, r3, r2, r3
 8012f68:	099b      	lsrs	r3, r3, #6
 8012f6a:	607b      	str	r3, [r7, #4]
	HAL_Delay(useconds);
 8012f6c:	6878      	ldr	r0, [r7, #4]
 8012f6e:	f7f0 fabf 	bl	80034f0 <HAL_Delay>
}
 8012f72:	bf00      	nop
 8012f74:	3708      	adds	r7, #8
 8012f76:	46bd      	mov	sp, r7
 8012f78:	bd80      	pop	{r7, pc}
 8012f7a:	bf00      	nop
 8012f7c:	10624dd3 	.word	0x10624dd3

08012f80 <sps30_get_serial>:
    int16_t ret = sps30_get_serial(serial);

    return ret;
}

int16_t sps30_get_serial(char* serial) {
 8012f80:	b580      	push	{r7, lr}
 8012f82:	b08a      	sub	sp, #40	; 0x28
 8012f84:	af04      	add	r7, sp, #16
 8012f86:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    uint8_t param_buf[] = SPS30_CMD_DEV_INFO_SUBCMD_GET_SERIAL;
 8012f88:	2303      	movs	r3, #3
 8012f8a:	733b      	strb	r3, [r7, #12]
    int16_t ret;

    ret = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_DEV_INFO, sizeof(param_buf),
 8012f8c:	f107 020c 	add.w	r2, r7, #12
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	9302      	str	r3, [sp, #8]
 8012f94:	f107 0310 	add.w	r3, r7, #16
 8012f98:	9301      	str	r3, [sp, #4]
 8012f9a:	2320      	movs	r3, #32
 8012f9c:	9300      	str	r3, [sp, #0]
 8012f9e:	4613      	mov	r3, r2
 8012fa0:	2201      	movs	r2, #1
 8012fa2:	21d0      	movs	r1, #208	; 0xd0
 8012fa4:	2000      	movs	r0, #0
 8012fa6:	f7ff fcb2 	bl	801290e <sensirion_shdlc_xcv>
 8012faa:	4603      	mov	r3, r0
 8012fac:	82fb      	strh	r3, [r7, #22]
                              param_buf, SPS30_MAX_SERIAL_LEN, &header,
                              (uint8_t*)serial);
    if (ret < 0)
 8012fae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	da02      	bge.n	8012fbc <sps30_get_serial+0x3c>
        return ret;
 8012fb6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012fba:	e009      	b.n	8012fd0 <sps30_get_serial+0x50>

    if (header.state)
 8012fbc:	7cbb      	ldrb	r3, [r7, #18]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d005      	beq.n	8012fce <sps30_get_serial+0x4e>
        return SPS30_ERR_STATE(header.state);
 8012fc2:	7cbb      	ldrb	r3, [r7, #18]
 8012fc4:	b21b      	sxth	r3, r3
 8012fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012fca:	b21b      	sxth	r3, r3
 8012fcc:	e000      	b.n	8012fd0 <sps30_get_serial+0x50>

    return 0;
 8012fce:	2300      	movs	r3, #0
}
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	3718      	adds	r7, #24
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	bd80      	pop	{r7, pc}

08012fd8 <sps30_start_measurement>:

int16_t sps30_start_measurement(void) {
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b086      	sub	sp, #24
 8012fdc:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;
    uint8_t param_buf[] = SPS30_SUBCMD_MEASUREMENT_START;
 8012fde:	f240 3301 	movw	r3, #769	; 0x301
 8012fe2:	803b      	strh	r3, [r7, #0]

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_START_MEASUREMENT,
 8012fe4:	463a      	mov	r2, r7
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	9302      	str	r3, [sp, #8]
 8012fea:	1d3b      	adds	r3, r7, #4
 8012fec:	9301      	str	r3, [sp, #4]
 8012fee:	2300      	movs	r3, #0
 8012ff0:	9300      	str	r3, [sp, #0]
 8012ff2:	4613      	mov	r3, r2
 8012ff4:	2202      	movs	r2, #2
 8012ff6:	2100      	movs	r1, #0
 8012ff8:	2000      	movs	r0, #0
 8012ffa:	f7ff fc88 	bl	801290e <sensirion_shdlc_xcv>
 8012ffe:	4603      	mov	r3, r0
                               sizeof(param_buf), param_buf, 0, &header,
                               (uint8_t*)NULL);
}
 8013000:	4618      	mov	r0, r3
 8013002:	3708      	adds	r7, #8
 8013004:	46bd      	mov	sp, r7
 8013006:	bd80      	pop	{r7, pc}

08013008 <sps30_stop_measurement>:

int16_t sps30_stop_measurement(void) {
 8013008:	b580      	push	{r7, lr}
 801300a:	b086      	sub	sp, #24
 801300c:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_STOP_MEASUREMENT, 0,
 801300e:	2300      	movs	r3, #0
 8013010:	9302      	str	r3, [sp, #8]
 8013012:	1d3b      	adds	r3, r7, #4
 8013014:	9301      	str	r3, [sp, #4]
 8013016:	2300      	movs	r3, #0
 8013018:	9300      	str	r3, [sp, #0]
 801301a:	2300      	movs	r3, #0
 801301c:	2200      	movs	r2, #0
 801301e:	2101      	movs	r1, #1
 8013020:	2000      	movs	r0, #0
 8013022:	f7ff fc74 	bl	801290e <sensirion_shdlc_xcv>
 8013026:	4603      	mov	r3, r0
                               (uint8_t*)NULL, 0, &header, (uint8_t*)NULL);
}
 8013028:	4618      	mov	r0, r3
 801302a:	3708      	adds	r7, #8
 801302c:	46bd      	mov	sp, r7
 801302e:	bd80      	pop	{r7, pc}

08013030 <sps30_read_measurement>:

int16_t sps30_read_measurement(struct sps30_measurement* measurement) {
 8013030:	b580      	push	{r7, lr}
 8013032:	b092      	sub	sp, #72	; 0x48
 8013034:	af04      	add	r7, sp, #16
 8013036:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    int16_t error;
    uint8_t data[10][4];

    error = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_READ_MEASUREMENT, 0,
 8013038:	f107 0308 	add.w	r3, r7, #8
 801303c:	9302      	str	r3, [sp, #8]
 801303e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013042:	9301      	str	r3, [sp, #4]
 8013044:	2328      	movs	r3, #40	; 0x28
 8013046:	9300      	str	r3, [sp, #0]
 8013048:	2300      	movs	r3, #0
 801304a:	2200      	movs	r2, #0
 801304c:	2103      	movs	r1, #3
 801304e:	2000      	movs	r0, #0
 8013050:	f7ff fc5d 	bl	801290e <sensirion_shdlc_xcv>
 8013054:	4603      	mov	r3, r0
 8013056:	86fb      	strh	r3, [r7, #54]	; 0x36
                                (uint8_t*)NULL, sizeof(data), &header,
                                (uint8_t*)data);
    if (error) {
 8013058:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801305c:	2b00      	cmp	r3, #0
 801305e:	d002      	beq.n	8013066 <sps30_read_measurement+0x36>
        return error;
 8013060:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8013064:	e07f      	b.n	8013166 <sps30_read_measurement+0x136>
    }

    if (header.data_len != sizeof(data)) {
 8013066:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801306a:	2b28      	cmp	r3, #40	; 0x28
 801306c:	d002      	beq.n	8013074 <sps30_read_measurement+0x44>
        return SPS30_ERR_NOT_ENOUGH_DATA;
 801306e:	f04f 33ff 	mov.w	r3, #4294967295
 8013072:	e078      	b.n	8013166 <sps30_read_measurement+0x136>
    }

    measurement->mc_1p0 = sensirion_bytes_to_float(data[0]);
 8013074:	f107 0308 	add.w	r3, r7, #8
 8013078:	4618      	mov	r0, r3
 801307a:	f7ff fb84 	bl	8012786 <sensirion_bytes_to_float>
 801307e:	eef0 7a40 	vmov.f32	s15, s0
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	edc3 7a00 	vstr	s15, [r3]
    measurement->mc_2p5 = sensirion_bytes_to_float(data[1]);
 8013088:	f107 0308 	add.w	r3, r7, #8
 801308c:	3304      	adds	r3, #4
 801308e:	4618      	mov	r0, r3
 8013090:	f7ff fb79 	bl	8012786 <sensirion_bytes_to_float>
 8013094:	eef0 7a40 	vmov.f32	s15, s0
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	edc3 7a01 	vstr	s15, [r3, #4]
    measurement->mc_4p0 = sensirion_bytes_to_float(data[2]);
 801309e:	f107 0308 	add.w	r3, r7, #8
 80130a2:	3308      	adds	r3, #8
 80130a4:	4618      	mov	r0, r3
 80130a6:	f7ff fb6e 	bl	8012786 <sensirion_bytes_to_float>
 80130aa:	eef0 7a40 	vmov.f32	s15, s0
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	edc3 7a02 	vstr	s15, [r3, #8]
    measurement->mc_10p0 = sensirion_bytes_to_float(data[3]);
 80130b4:	f107 0308 	add.w	r3, r7, #8
 80130b8:	330c      	adds	r3, #12
 80130ba:	4618      	mov	r0, r3
 80130bc:	f7ff fb63 	bl	8012786 <sensirion_bytes_to_float>
 80130c0:	eef0 7a40 	vmov.f32	s15, s0
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	edc3 7a03 	vstr	s15, [r3, #12]
    measurement->nc_0p5 = sensirion_bytes_to_float(data[4]);
 80130ca:	f107 0308 	add.w	r3, r7, #8
 80130ce:	3310      	adds	r3, #16
 80130d0:	4618      	mov	r0, r3
 80130d2:	f7ff fb58 	bl	8012786 <sensirion_bytes_to_float>
 80130d6:	eef0 7a40 	vmov.f32	s15, s0
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	edc3 7a04 	vstr	s15, [r3, #16]
    measurement->nc_1p0 = sensirion_bytes_to_float(data[5]);
 80130e0:	f107 0308 	add.w	r3, r7, #8
 80130e4:	3314      	adds	r3, #20
 80130e6:	4618      	mov	r0, r3
 80130e8:	f7ff fb4d 	bl	8012786 <sensirion_bytes_to_float>
 80130ec:	eef0 7a40 	vmov.f32	s15, s0
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	edc3 7a05 	vstr	s15, [r3, #20]
    measurement->nc_2p5 = sensirion_bytes_to_float(data[6]);
 80130f6:	f107 0308 	add.w	r3, r7, #8
 80130fa:	3318      	adds	r3, #24
 80130fc:	4618      	mov	r0, r3
 80130fe:	f7ff fb42 	bl	8012786 <sensirion_bytes_to_float>
 8013102:	eef0 7a40 	vmov.f32	s15, s0
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	edc3 7a06 	vstr	s15, [r3, #24]
    measurement->nc_4p0 = sensirion_bytes_to_float(data[7]);
 801310c:	f107 0308 	add.w	r3, r7, #8
 8013110:	331c      	adds	r3, #28
 8013112:	4618      	mov	r0, r3
 8013114:	f7ff fb37 	bl	8012786 <sensirion_bytes_to_float>
 8013118:	eef0 7a40 	vmov.f32	s15, s0
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	edc3 7a07 	vstr	s15, [r3, #28]
    measurement->nc_10p0 = sensirion_bytes_to_float(data[8]);
 8013122:	f107 0308 	add.w	r3, r7, #8
 8013126:	3320      	adds	r3, #32
 8013128:	4618      	mov	r0, r3
 801312a:	f7ff fb2c 	bl	8012786 <sensirion_bytes_to_float>
 801312e:	eef0 7a40 	vmov.f32	s15, s0
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	edc3 7a08 	vstr	s15, [r3, #32]
    measurement->typical_particle_size = sensirion_bytes_to_float(data[9]);
 8013138:	f107 0308 	add.w	r3, r7, #8
 801313c:	3324      	adds	r3, #36	; 0x24
 801313e:	4618      	mov	r0, r3
 8013140:	f7ff fb21 	bl	8012786 <sensirion_bytes_to_float>
 8013144:	eef0 7a40 	vmov.f32	s15, s0
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    if (header.state) {
 801314e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8013152:	2b00      	cmp	r3, #0
 8013154:	d006      	beq.n	8013164 <sps30_read_measurement+0x134>
        return SPS30_ERR_STATE(header.state);
 8013156:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801315a:	b21b      	sxth	r3, r3
 801315c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013160:	b21b      	sxth	r3, r3
 8013162:	e000      	b.n	8013166 <sps30_read_measurement+0x136>
    }

    return 0;
 8013164:	2300      	movs	r3, #0
}
 8013166:	4618      	mov	r0, r3
 8013168:	3738      	adds	r7, #56	; 0x38
 801316a:	46bd      	mov	sp, r7
 801316c:	bd80      	pop	{r7, pc}

0801316e <sps30_set_fan_auto_cleaning_interval>:
        return SPS30_ERR_STATE(header.state);

    return 0;
}

int16_t sps30_set_fan_auto_cleaning_interval(uint32_t interval_seconds) {
 801316e:	b580      	push	{r7, lr}
 8013170:	b08a      	sub	sp, #40	; 0x28
 8013172:	af04      	add	r7, sp, #16
 8013174:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    uint8_t cleaning_command[SPS30_CMD_FAN_CLEAN_INTV_LEN];

    cleaning_command[0] = SPS30_SUBCMD_READ_FAN_CLEAN_INTV;
 8013176:	2300      	movs	r3, #0
 8013178:	733b      	strb	r3, [r7, #12]
    sensirion_uint32_t_to_bytes(interval_seconds, &cleaning_command[1]);
 801317a:	f107 030c 	add.w	r3, r7, #12
 801317e:	3301      	adds	r3, #1
 8013180:	4619      	mov	r1, r3
 8013182:	6878      	ldr	r0, [r7, #4]
 8013184:	f7ff fb10 	bl	80127a8 <sensirion_uint32_t_to_bytes>

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_FAN_CLEAN_INTV,
 8013188:	f107 020c 	add.w	r2, r7, #12
 801318c:	2300      	movs	r3, #0
 801318e:	9302      	str	r3, [sp, #8]
 8013190:	f107 0314 	add.w	r3, r7, #20
 8013194:	9301      	str	r3, [sp, #4]
 8013196:	2300      	movs	r3, #0
 8013198:	9300      	str	r3, [sp, #0]
 801319a:	4613      	mov	r3, r2
 801319c:	2205      	movs	r2, #5
 801319e:	2180      	movs	r1, #128	; 0x80
 80131a0:	2000      	movs	r0, #0
 80131a2:	f7ff fbb4 	bl	801290e <sensirion_shdlc_xcv>
 80131a6:	4603      	mov	r3, r0
                               sizeof(cleaning_command), cleaning_command, 0,
                               &header, (uint8_t*)NULL);
}
 80131a8:	4618      	mov	r0, r3
 80131aa:	3718      	adds	r7, #24
 80131ac:	46bd      	mov	sp, r7
 80131ae:	bd80      	pop	{r7, pc}

080131b0 <sps30_set_fan_auto_cleaning_interval_days>:

    *interval_days = interval_seconds / (24 * 60 * 60);
    return ret;
}

int16_t sps30_set_fan_auto_cleaning_interval_days(uint8_t interval_days) {
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b082      	sub	sp, #8
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	4603      	mov	r3, r0
 80131b8:	71fb      	strb	r3, [r7, #7]
    return sps30_set_fan_auto_cleaning_interval((uint32_t)interval_days * 24 *
 80131ba:	79fb      	ldrb	r3, [r7, #7]
 80131bc:	4a05      	ldr	r2, [pc, #20]	; (80131d4 <sps30_set_fan_auto_cleaning_interval_days+0x24>)
 80131be:	fb02 f303 	mul.w	r3, r2, r3
 80131c2:	4618      	mov	r0, r3
 80131c4:	f7ff ffd3 	bl	801316e <sps30_set_fan_auto_cleaning_interval>
 80131c8:	4603      	mov	r3, r0
                                                60 * 60);
}
 80131ca:	4618      	mov	r0, r3
 80131cc:	3708      	adds	r7, #8
 80131ce:	46bd      	mov	sp, r7
 80131d0:	bd80      	pop	{r7, pc}
 80131d2:	bf00      	nop
 80131d4:	00015180 	.word	0x00015180

080131d8 <sps30_read_version>:
    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_START_FAN_CLEANING, 0,
                               (uint8_t*)NULL, 0, &header, (uint8_t*)NULL);
}

int16_t
sps30_read_version(struct sps30_version_information* version_information) {
 80131d8:	b580      	push	{r7, lr}
 80131da:	b08a      	sub	sp, #40	; 0x28
 80131dc:	af04      	add	r7, sp, #16
 80131de:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    int16_t error;
    uint8_t data[7];

    error = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_READ_VERSION, 0,
 80131e0:	f107 0308 	add.w	r3, r7, #8
 80131e4:	9302      	str	r3, [sp, #8]
 80131e6:	f107 0310 	add.w	r3, r7, #16
 80131ea:	9301      	str	r3, [sp, #4]
 80131ec:	2307      	movs	r3, #7
 80131ee:	9300      	str	r3, [sp, #0]
 80131f0:	2300      	movs	r3, #0
 80131f2:	2200      	movs	r2, #0
 80131f4:	21d1      	movs	r1, #209	; 0xd1
 80131f6:	2000      	movs	r0, #0
 80131f8:	f7ff fb89 	bl	801290e <sensirion_shdlc_xcv>
 80131fc:	4603      	mov	r3, r0
 80131fe:	82fb      	strh	r3, [r7, #22]
                                (uint8_t*)NULL, sizeof(data), &header, data);
    if (error) {
 8013200:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d002      	beq.n	801320e <sps30_read_version+0x36>
        return error;
 8013208:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801320c:	e01f      	b.n	801324e <sps30_read_version+0x76>
    }

    if (header.data_len != sizeof(data)) {
 801320e:	7cfb      	ldrb	r3, [r7, #19]
 8013210:	2b07      	cmp	r3, #7
 8013212:	d002      	beq.n	801321a <sps30_read_version+0x42>
        return SPS30_ERR_NOT_ENOUGH_DATA;
 8013214:	f04f 33ff 	mov.w	r3, #4294967295
 8013218:	e019      	b.n	801324e <sps30_read_version+0x76>
    }

    if (header.state) {
 801321a:	7cbb      	ldrb	r3, [r7, #18]
 801321c:	2b00      	cmp	r3, #0
 801321e:	d005      	beq.n	801322c <sps30_read_version+0x54>
        return SPS30_ERR_STATE(header.state);
 8013220:	7cbb      	ldrb	r3, [r7, #18]
 8013222:	b21b      	sxth	r3, r3
 8013224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013228:	b21b      	sxth	r3, r3
 801322a:	e010      	b.n	801324e <sps30_read_version+0x76>
    }

    version_information->firmware_major = data[0];
 801322c:	7a3a      	ldrb	r2, [r7, #8]
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	701a      	strb	r2, [r3, #0]
    version_information->firmware_minor = data[1];
 8013232:	7a7a      	ldrb	r2, [r7, #9]
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	705a      	strb	r2, [r3, #1]
    version_information->hardware_revision = data[3];
 8013238:	7afa      	ldrb	r2, [r7, #11]
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	709a      	strb	r2, [r3, #2]
    version_information->shdlc_major = data[5];
 801323e:	7b7a      	ldrb	r2, [r7, #13]
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	70da      	strb	r2, [r3, #3]
    version_information->shdlc_minor = data[6];
 8013244:	7bba      	ldrb	r2, [r7, #14]
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	711a      	strb	r2, [r3, #4]

    return error;
 801324a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 801324e:	4618      	mov	r0, r3
 8013250:	3718      	adds	r7, #24
 8013252:	46bd      	mov	sp, r7
 8013254:	bd80      	pop	{r7, pc}
	...

08013258 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013258:	b580      	push	{r7, lr}
 801325a:	b084      	sub	sp, #16
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
 8013260:	460b      	mov	r3, r1
 8013262:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8013264:	f640 0074 	movw	r0, #2164	; 0x874
 8013268:	f007 fd32 	bl	801acd0 <USBD_static_malloc>
 801326c:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	2b00      	cmp	r3, #0
 8013272:	d109      	bne.n	8013288 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	32b0      	adds	r2, #176	; 0xb0
 801327e:	2100      	movs	r1, #0
 8013280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8013284:	2302      	movs	r3, #2
 8013286:	e06e      	b.n	8013366 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	32b0      	adds	r2, #176	; 0xb0
 8013292:	68f9      	ldr	r1, [r7, #12]
 8013294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	32b0      	adds	r2, #176	; 0xb0
 80132a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	7c1b      	ldrb	r3, [r3, #16]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d12b      	bne.n	801330c <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80132b4:	4b2e      	ldr	r3, [pc, #184]	; (8013370 <USBD_MSC_Init+0x118>)
 80132b6:	7819      	ldrb	r1, [r3, #0]
 80132b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80132bc:	2202      	movs	r2, #2
 80132be:	6878      	ldr	r0, [r7, #4]
 80132c0:	f007 fbc3 	bl	801aa4a <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 80132c4:	4b2a      	ldr	r3, [pc, #168]	; (8013370 <USBD_MSC_Init+0x118>)
 80132c6:	781b      	ldrb	r3, [r3, #0]
 80132c8:	f003 020f 	and.w	r2, r3, #15
 80132cc:	6879      	ldr	r1, [r7, #4]
 80132ce:	4613      	mov	r3, r2
 80132d0:	009b      	lsls	r3, r3, #2
 80132d2:	4413      	add	r3, r2
 80132d4:	009b      	lsls	r3, r3, #2
 80132d6:	440b      	add	r3, r1
 80132d8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80132dc:	2201      	movs	r2, #1
 80132de:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80132e0:	4b24      	ldr	r3, [pc, #144]	; (8013374 <USBD_MSC_Init+0x11c>)
 80132e2:	7819      	ldrb	r1, [r3, #0]
 80132e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80132e8:	2202      	movs	r2, #2
 80132ea:	6878      	ldr	r0, [r7, #4]
 80132ec:	f007 fbad 	bl	801aa4a <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 80132f0:	4b20      	ldr	r3, [pc, #128]	; (8013374 <USBD_MSC_Init+0x11c>)
 80132f2:	781b      	ldrb	r3, [r3, #0]
 80132f4:	f003 020f 	and.w	r2, r3, #15
 80132f8:	6879      	ldr	r1, [r7, #4]
 80132fa:	4613      	mov	r3, r2
 80132fc:	009b      	lsls	r3, r3, #2
 80132fe:	4413      	add	r3, r2
 8013300:	009b      	lsls	r3, r3, #2
 8013302:	440b      	add	r3, r1
 8013304:	3324      	adds	r3, #36	; 0x24
 8013306:	2201      	movs	r2, #1
 8013308:	801a      	strh	r2, [r3, #0]
 801330a:	e028      	b.n	801335e <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801330c:	4b18      	ldr	r3, [pc, #96]	; (8013370 <USBD_MSC_Init+0x118>)
 801330e:	7819      	ldrb	r1, [r3, #0]
 8013310:	2340      	movs	r3, #64	; 0x40
 8013312:	2202      	movs	r2, #2
 8013314:	6878      	ldr	r0, [r7, #4]
 8013316:	f007 fb98 	bl	801aa4a <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 801331a:	4b15      	ldr	r3, [pc, #84]	; (8013370 <USBD_MSC_Init+0x118>)
 801331c:	781b      	ldrb	r3, [r3, #0]
 801331e:	f003 020f 	and.w	r2, r3, #15
 8013322:	6879      	ldr	r1, [r7, #4]
 8013324:	4613      	mov	r3, r2
 8013326:	009b      	lsls	r3, r3, #2
 8013328:	4413      	add	r3, r2
 801332a:	009b      	lsls	r3, r3, #2
 801332c:	440b      	add	r3, r1
 801332e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013332:	2201      	movs	r2, #1
 8013334:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8013336:	4b0f      	ldr	r3, [pc, #60]	; (8013374 <USBD_MSC_Init+0x11c>)
 8013338:	7819      	ldrb	r1, [r3, #0]
 801333a:	2340      	movs	r3, #64	; 0x40
 801333c:	2202      	movs	r2, #2
 801333e:	6878      	ldr	r0, [r7, #4]
 8013340:	f007 fb83 	bl	801aa4a <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8013344:	4b0b      	ldr	r3, [pc, #44]	; (8013374 <USBD_MSC_Init+0x11c>)
 8013346:	781b      	ldrb	r3, [r3, #0]
 8013348:	f003 020f 	and.w	r2, r3, #15
 801334c:	6879      	ldr	r1, [r7, #4]
 801334e:	4613      	mov	r3, r2
 8013350:	009b      	lsls	r3, r3, #2
 8013352:	4413      	add	r3, r2
 8013354:	009b      	lsls	r3, r3, #2
 8013356:	440b      	add	r3, r1
 8013358:	3324      	adds	r3, #36	; 0x24
 801335a:	2201      	movs	r2, #1
 801335c:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 801335e:	6878      	ldr	r0, [r7, #4]
 8013360:	f000 fa2c 	bl	80137bc <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8013364:	2300      	movs	r3, #0
}
 8013366:	4618      	mov	r0, r3
 8013368:	3710      	adds	r7, #16
 801336a:	46bd      	mov	sp, r7
 801336c:	bd80      	pop	{r7, pc}
 801336e:	bf00      	nop
 8013370:	2000008b 	.word	0x2000008b
 8013374:	2000008a 	.word	0x2000008a

08013378 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013378:	b580      	push	{r7, lr}
 801337a:	b082      	sub	sp, #8
 801337c:	af00      	add	r7, sp, #0
 801337e:	6078      	str	r0, [r7, #4]
 8013380:	460b      	mov	r3, r1
 8013382:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8013384:	4b26      	ldr	r3, [pc, #152]	; (8013420 <USBD_MSC_DeInit+0xa8>)
 8013386:	781b      	ldrb	r3, [r3, #0]
 8013388:	4619      	mov	r1, r3
 801338a:	6878      	ldr	r0, [r7, #4]
 801338c:	f007 fb83 	bl	801aa96 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8013390:	4b23      	ldr	r3, [pc, #140]	; (8013420 <USBD_MSC_DeInit+0xa8>)
 8013392:	781b      	ldrb	r3, [r3, #0]
 8013394:	f003 020f 	and.w	r2, r3, #15
 8013398:	6879      	ldr	r1, [r7, #4]
 801339a:	4613      	mov	r3, r2
 801339c:	009b      	lsls	r3, r3, #2
 801339e:	4413      	add	r3, r2
 80133a0:	009b      	lsls	r3, r3, #2
 80133a2:	440b      	add	r3, r1
 80133a4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80133a8:	2200      	movs	r2, #0
 80133aa:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 80133ac:	4b1d      	ldr	r3, [pc, #116]	; (8013424 <USBD_MSC_DeInit+0xac>)
 80133ae:	781b      	ldrb	r3, [r3, #0]
 80133b0:	4619      	mov	r1, r3
 80133b2:	6878      	ldr	r0, [r7, #4]
 80133b4:	f007 fb6f 	bl	801aa96 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 80133b8:	4b1a      	ldr	r3, [pc, #104]	; (8013424 <USBD_MSC_DeInit+0xac>)
 80133ba:	781b      	ldrb	r3, [r3, #0]
 80133bc:	f003 020f 	and.w	r2, r3, #15
 80133c0:	6879      	ldr	r1, [r7, #4]
 80133c2:	4613      	mov	r3, r2
 80133c4:	009b      	lsls	r3, r3, #2
 80133c6:	4413      	add	r3, r2
 80133c8:	009b      	lsls	r3, r3, #2
 80133ca:	440b      	add	r3, r1
 80133cc:	3324      	adds	r3, #36	; 0x24
 80133ce:	2200      	movs	r2, #0
 80133d0:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	32b0      	adds	r2, #176	; 0xb0
 80133dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d018      	beq.n	8013416 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 80133e4:	6878      	ldr	r0, [r7, #4]
 80133e6:	f000 fa67 	bl	80138b8 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	32b0      	adds	r2, #176	; 0xb0
 80133f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133f8:	4618      	mov	r0, r3
 80133fa:	f007 fc77 	bl	801acec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	32b0      	adds	r2, #176	; 0xb0
 8013408:	2100      	movs	r1, #0
 801340a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	2200      	movs	r2, #0
 8013412:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013416:	2300      	movs	r3, #0
}
 8013418:	4618      	mov	r0, r3
 801341a:	3708      	adds	r7, #8
 801341c:	46bd      	mov	sp, r7
 801341e:	bd80      	pop	{r7, pc}
 8013420:	2000008b 	.word	0x2000008b
 8013424:	2000008a 	.word	0x2000008a

08013428 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013428:	b580      	push	{r7, lr}
 801342a:	b086      	sub	sp, #24
 801342c:	af00      	add	r7, sp, #0
 801342e:	6078      	str	r0, [r7, #4]
 8013430:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	32b0      	adds	r2, #176	; 0xb0
 801343c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013440:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8013442:	2300      	movs	r3, #0
 8013444:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8013446:	2300      	movs	r3, #0
 8013448:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801344a:	693b      	ldr	r3, [r7, #16]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d101      	bne.n	8013454 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8013450:	2303      	movs	r3, #3
 8013452:	e0e1      	b.n	8013618 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013454:	683b      	ldr	r3, [r7, #0]
 8013456:	781b      	ldrb	r3, [r3, #0]
 8013458:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801345c:	2b00      	cmp	r3, #0
 801345e:	d053      	beq.n	8013508 <USBD_MSC_Setup+0xe0>
 8013460:	2b20      	cmp	r3, #32
 8013462:	f040 80d1 	bne.w	8013608 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8013466:	683b      	ldr	r3, [r7, #0]
 8013468:	785b      	ldrb	r3, [r3, #1]
 801346a:	2bfe      	cmp	r3, #254	; 0xfe
 801346c:	d002      	beq.n	8013474 <USBD_MSC_Setup+0x4c>
 801346e:	2bff      	cmp	r3, #255	; 0xff
 8013470:	d02a      	beq.n	80134c8 <USBD_MSC_Setup+0xa0>
 8013472:	e041      	b.n	80134f8 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8013474:	683b      	ldr	r3, [r7, #0]
 8013476:	885b      	ldrh	r3, [r3, #2]
 8013478:	2b00      	cmp	r3, #0
 801347a:	d11e      	bne.n	80134ba <USBD_MSC_Setup+0x92>
 801347c:	683b      	ldr	r3, [r7, #0]
 801347e:	88db      	ldrh	r3, [r3, #6]
 8013480:	2b01      	cmp	r3, #1
 8013482:	d11a      	bne.n	80134ba <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8013484:	683b      	ldr	r3, [r7, #0]
 8013486:	781b      	ldrb	r3, [r3, #0]
 8013488:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801348a:	2b00      	cmp	r3, #0
 801348c:	da15      	bge.n	80134ba <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013494:	687a      	ldr	r2, [r7, #4]
 8013496:	33b0      	adds	r3, #176	; 0xb0
 8013498:	009b      	lsls	r3, r3, #2
 801349a:	4413      	add	r3, r2
 801349c:	685b      	ldr	r3, [r3, #4]
 801349e:	699b      	ldr	r3, [r3, #24]
 80134a0:	4798      	blx	r3
 80134a2:	4603      	mov	r3, r0
 80134a4:	461a      	mov	r2, r3
 80134a6:	693b      	ldr	r3, [r7, #16]
 80134a8:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 80134aa:	693b      	ldr	r3, [r7, #16]
 80134ac:	2201      	movs	r2, #1
 80134ae:	4619      	mov	r1, r3
 80134b0:	6878      	ldr	r0, [r7, #4]
 80134b2:	f003 f949 	bl	8016748 <USBD_CtlSendData>
 80134b6:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80134b8:	e025      	b.n	8013506 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 80134ba:	6839      	ldr	r1, [r7, #0]
 80134bc:	6878      	ldr	r0, [r7, #4]
 80134be:	f003 f8d2 	bl	8016666 <USBD_CtlError>
            ret = USBD_FAIL;
 80134c2:	2303      	movs	r3, #3
 80134c4:	75fb      	strb	r3, [r7, #23]
          break;
 80134c6:	e01e      	b.n	8013506 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80134c8:	683b      	ldr	r3, [r7, #0]
 80134ca:	885b      	ldrh	r3, [r3, #2]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d10c      	bne.n	80134ea <USBD_MSC_Setup+0xc2>
 80134d0:	683b      	ldr	r3, [r7, #0]
 80134d2:	88db      	ldrh	r3, [r3, #6]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d108      	bne.n	80134ea <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 80134d8:	683b      	ldr	r3, [r7, #0]
 80134da:	781b      	ldrb	r3, [r3, #0]
 80134dc:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80134de:	2b00      	cmp	r3, #0
 80134e0:	db03      	blt.n	80134ea <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 80134e2:	6878      	ldr	r0, [r7, #4]
 80134e4:	f000 f9b4 	bl	8013850 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80134e8:	e00d      	b.n	8013506 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 80134ea:	6839      	ldr	r1, [r7, #0]
 80134ec:	6878      	ldr	r0, [r7, #4]
 80134ee:	f003 f8ba 	bl	8016666 <USBD_CtlError>
            ret = USBD_FAIL;
 80134f2:	2303      	movs	r3, #3
 80134f4:	75fb      	strb	r3, [r7, #23]
          break;
 80134f6:	e006      	b.n	8013506 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 80134f8:	6839      	ldr	r1, [r7, #0]
 80134fa:	6878      	ldr	r0, [r7, #4]
 80134fc:	f003 f8b3 	bl	8016666 <USBD_CtlError>
          ret = USBD_FAIL;
 8013500:	2303      	movs	r3, #3
 8013502:	75fb      	strb	r3, [r7, #23]
          break;
 8013504:	bf00      	nop
      }
      break;
 8013506:	e086      	b.n	8013616 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013508:	683b      	ldr	r3, [r7, #0]
 801350a:	785b      	ldrb	r3, [r3, #1]
 801350c:	2b0b      	cmp	r3, #11
 801350e:	d872      	bhi.n	80135f6 <USBD_MSC_Setup+0x1ce>
 8013510:	a201      	add	r2, pc, #4	; (adr r2, 8013518 <USBD_MSC_Setup+0xf0>)
 8013512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013516:	bf00      	nop
 8013518:	08013549 	.word	0x08013549
 801351c:	080135c5 	.word	0x080135c5
 8013520:	080135f7 	.word	0x080135f7
 8013524:	080135f7 	.word	0x080135f7
 8013528:	080135f7 	.word	0x080135f7
 801352c:	080135f7 	.word	0x080135f7
 8013530:	080135f7 	.word	0x080135f7
 8013534:	080135f7 	.word	0x080135f7
 8013538:	080135f7 	.word	0x080135f7
 801353c:	080135f7 	.word	0x080135f7
 8013540:	08013573 	.word	0x08013573
 8013544:	0801359d 	.word	0x0801359d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801354e:	b2db      	uxtb	r3, r3
 8013550:	2b03      	cmp	r3, #3
 8013552:	d107      	bne.n	8013564 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013554:	f107 030e 	add.w	r3, r7, #14
 8013558:	2202      	movs	r2, #2
 801355a:	4619      	mov	r1, r3
 801355c:	6878      	ldr	r0, [r7, #4]
 801355e:	f003 f8f3 	bl	8016748 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013562:	e050      	b.n	8013606 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8013564:	6839      	ldr	r1, [r7, #0]
 8013566:	6878      	ldr	r0, [r7, #4]
 8013568:	f003 f87d 	bl	8016666 <USBD_CtlError>
            ret = USBD_FAIL;
 801356c:	2303      	movs	r3, #3
 801356e:	75fb      	strb	r3, [r7, #23]
          break;
 8013570:	e049      	b.n	8013606 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013578:	b2db      	uxtb	r3, r3
 801357a:	2b03      	cmp	r3, #3
 801357c:	d107      	bne.n	801358e <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 801357e:	693b      	ldr	r3, [r7, #16]
 8013580:	3304      	adds	r3, #4
 8013582:	2201      	movs	r2, #1
 8013584:	4619      	mov	r1, r3
 8013586:	6878      	ldr	r0, [r7, #4]
 8013588:	f003 f8de 	bl	8016748 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801358c:	e03b      	b.n	8013606 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 801358e:	6839      	ldr	r1, [r7, #0]
 8013590:	6878      	ldr	r0, [r7, #4]
 8013592:	f003 f868 	bl	8016666 <USBD_CtlError>
            ret = USBD_FAIL;
 8013596:	2303      	movs	r3, #3
 8013598:	75fb      	strb	r3, [r7, #23]
          break;
 801359a:	e034      	b.n	8013606 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80135a2:	b2db      	uxtb	r3, r3
 80135a4:	2b03      	cmp	r3, #3
 80135a6:	d106      	bne.n	80135b6 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 80135a8:	683b      	ldr	r3, [r7, #0]
 80135aa:	885b      	ldrh	r3, [r3, #2]
 80135ac:	b2db      	uxtb	r3, r3
 80135ae:	461a      	mov	r2, r3
 80135b0:	693b      	ldr	r3, [r7, #16]
 80135b2:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80135b4:	e027      	b.n	8013606 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80135b6:	6839      	ldr	r1, [r7, #0]
 80135b8:	6878      	ldr	r0, [r7, #4]
 80135ba:	f003 f854 	bl	8016666 <USBD_CtlError>
            ret = USBD_FAIL;
 80135be:	2303      	movs	r3, #3
 80135c0:	75fb      	strb	r3, [r7, #23]
          break;
 80135c2:	e020      	b.n	8013606 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80135ca:	b2db      	uxtb	r3, r3
 80135cc:	2b03      	cmp	r3, #3
 80135ce:	d119      	bne.n	8013604 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 80135d0:	683b      	ldr	r3, [r7, #0]
 80135d2:	885b      	ldrh	r3, [r3, #2]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d115      	bne.n	8013604 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80135d8:	683b      	ldr	r3, [r7, #0]
 80135da:	889b      	ldrh	r3, [r3, #4]
 80135dc:	b2db      	uxtb	r3, r3
 80135de:	4619      	mov	r1, r3
 80135e0:	6878      	ldr	r0, [r7, #4]
 80135e2:	f007 fa77 	bl	801aad4 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80135e6:	683b      	ldr	r3, [r7, #0]
 80135e8:	889b      	ldrh	r3, [r3, #4]
 80135ea:	b2db      	uxtb	r3, r3
 80135ec:	4619      	mov	r1, r3
 80135ee:	6878      	ldr	r0, [r7, #4]
 80135f0:	f000 fb2e 	bl	8013c50 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 80135f4:	e006      	b.n	8013604 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 80135f6:	6839      	ldr	r1, [r7, #0]
 80135f8:	6878      	ldr	r0, [r7, #4]
 80135fa:	f003 f834 	bl	8016666 <USBD_CtlError>
          ret = USBD_FAIL;
 80135fe:	2303      	movs	r3, #3
 8013600:	75fb      	strb	r3, [r7, #23]
          break;
 8013602:	e000      	b.n	8013606 <USBD_MSC_Setup+0x1de>
          break;
 8013604:	bf00      	nop
      }
      break;
 8013606:	e006      	b.n	8013616 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8013608:	6839      	ldr	r1, [r7, #0]
 801360a:	6878      	ldr	r0, [r7, #4]
 801360c:	f003 f82b 	bl	8016666 <USBD_CtlError>
      ret = USBD_FAIL;
 8013610:	2303      	movs	r3, #3
 8013612:	75fb      	strb	r3, [r7, #23]
      break;
 8013614:	bf00      	nop
  }

  return (uint8_t)ret;
 8013616:	7dfb      	ldrb	r3, [r7, #23]
}
 8013618:	4618      	mov	r0, r3
 801361a:	3718      	adds	r7, #24
 801361c:	46bd      	mov	sp, r7
 801361e:	bd80      	pop	{r7, pc}

08013620 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013620:	b580      	push	{r7, lr}
 8013622:	b082      	sub	sp, #8
 8013624:	af00      	add	r7, sp, #0
 8013626:	6078      	str	r0, [r7, #4]
 8013628:	460b      	mov	r3, r1
 801362a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 801362c:	78fb      	ldrb	r3, [r7, #3]
 801362e:	4619      	mov	r1, r3
 8013630:	6878      	ldr	r0, [r7, #4]
 8013632:	f000 f959 	bl	80138e8 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8013636:	2300      	movs	r3, #0
}
 8013638:	4618      	mov	r0, r3
 801363a:	3708      	adds	r7, #8
 801363c:	46bd      	mov	sp, r7
 801363e:	bd80      	pop	{r7, pc}

08013640 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013640:	b580      	push	{r7, lr}
 8013642:	b082      	sub	sp, #8
 8013644:	af00      	add	r7, sp, #0
 8013646:	6078      	str	r0, [r7, #4]
 8013648:	460b      	mov	r3, r1
 801364a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 801364c:	78fb      	ldrb	r3, [r7, #3]
 801364e:	4619      	mov	r1, r3
 8013650:	6878      	ldr	r0, [r7, #4]
 8013652:	f000 f983 	bl	801395c <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8013656:	2300      	movs	r3, #0
}
 8013658:	4618      	mov	r0, r3
 801365a:	3708      	adds	r7, #8
 801365c:	46bd      	mov	sp, r7
 801365e:	bd80      	pop	{r7, pc}

08013660 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8013660:	b580      	push	{r7, lr}
 8013662:	b084      	sub	sp, #16
 8013664:	af00      	add	r7, sp, #0
 8013666:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8013668:	2181      	movs	r1, #129	; 0x81
 801366a:	4812      	ldr	r0, [pc, #72]	; (80136b4 <USBD_MSC_GetHSCfgDesc+0x54>)
 801366c:	f002 f9c3 	bl	80159f6 <USBD_GetEpDesc>
 8013670:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8013672:	2101      	movs	r1, #1
 8013674:	480f      	ldr	r0, [pc, #60]	; (80136b4 <USBD_MSC_GetHSCfgDesc+0x54>)
 8013676:	f002 f9be 	bl	80159f6 <USBD_GetEpDesc>
 801367a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	2b00      	cmp	r3, #0
 8013680:	d006      	beq.n	8013690 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	2200      	movs	r2, #0
 8013686:	711a      	strb	r2, [r3, #4]
 8013688:	2200      	movs	r2, #0
 801368a:	f042 0202 	orr.w	r2, r2, #2
 801368e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8013690:	68bb      	ldr	r3, [r7, #8]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d006      	beq.n	80136a4 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8013696:	68bb      	ldr	r3, [r7, #8]
 8013698:	2200      	movs	r2, #0
 801369a:	711a      	strb	r2, [r3, #4]
 801369c:	2200      	movs	r2, #0
 801369e:	f042 0202 	orr.w	r2, r2, #2
 80136a2:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	2220      	movs	r2, #32
 80136a8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80136aa:	4b02      	ldr	r3, [pc, #8]	; (80136b4 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 80136ac:	4618      	mov	r0, r3
 80136ae:	3710      	adds	r7, #16
 80136b0:	46bd      	mov	sp, r7
 80136b2:	bd80      	pop	{r7, pc}
 80136b4:	20000060 	.word	0x20000060

080136b8 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b084      	sub	sp, #16
 80136bc:	af00      	add	r7, sp, #0
 80136be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80136c0:	2181      	movs	r1, #129	; 0x81
 80136c2:	4812      	ldr	r0, [pc, #72]	; (801370c <USBD_MSC_GetFSCfgDesc+0x54>)
 80136c4:	f002 f997 	bl	80159f6 <USBD_GetEpDesc>
 80136c8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80136ca:	2101      	movs	r1, #1
 80136cc:	480f      	ldr	r0, [pc, #60]	; (801370c <USBD_MSC_GetFSCfgDesc+0x54>)
 80136ce:	f002 f992 	bl	80159f6 <USBD_GetEpDesc>
 80136d2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d006      	beq.n	80136e8 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	2200      	movs	r2, #0
 80136de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80136e2:	711a      	strb	r2, [r3, #4]
 80136e4:	2200      	movs	r2, #0
 80136e6:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80136e8:	68bb      	ldr	r3, [r7, #8]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d006      	beq.n	80136fc <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80136ee:	68bb      	ldr	r3, [r7, #8]
 80136f0:	2200      	movs	r2, #0
 80136f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80136f6:	711a      	strb	r2, [r3, #4]
 80136f8:	2200      	movs	r2, #0
 80136fa:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	2220      	movs	r2, #32
 8013700:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8013702:	4b02      	ldr	r3, [pc, #8]	; (801370c <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8013704:	4618      	mov	r0, r3
 8013706:	3710      	adds	r7, #16
 8013708:	46bd      	mov	sp, r7
 801370a:	bd80      	pop	{r7, pc}
 801370c:	20000060 	.word	0x20000060

08013710 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013710:	b580      	push	{r7, lr}
 8013712:	b084      	sub	sp, #16
 8013714:	af00      	add	r7, sp, #0
 8013716:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8013718:	2181      	movs	r1, #129	; 0x81
 801371a:	4812      	ldr	r0, [pc, #72]	; (8013764 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 801371c:	f002 f96b 	bl	80159f6 <USBD_GetEpDesc>
 8013720:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8013722:	2101      	movs	r1, #1
 8013724:	480f      	ldr	r0, [pc, #60]	; (8013764 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8013726:	f002 f966 	bl	80159f6 <USBD_GetEpDesc>
 801372a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d006      	beq.n	8013740 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	2200      	movs	r2, #0
 8013736:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801373a:	711a      	strb	r2, [r3, #4]
 801373c:	2200      	movs	r2, #0
 801373e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8013740:	68bb      	ldr	r3, [r7, #8]
 8013742:	2b00      	cmp	r3, #0
 8013744:	d006      	beq.n	8013754 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8013746:	68bb      	ldr	r3, [r7, #8]
 8013748:	2200      	movs	r2, #0
 801374a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801374e:	711a      	strb	r2, [r3, #4]
 8013750:	2200      	movs	r2, #0
 8013752:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	2220      	movs	r2, #32
 8013758:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 801375a:	4b02      	ldr	r3, [pc, #8]	; (8013764 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 801375c:	4618      	mov	r0, r3
 801375e:	3710      	adds	r7, #16
 8013760:	46bd      	mov	sp, r7
 8013762:	bd80      	pop	{r7, pc}
 8013764:	20000060 	.word	0x20000060

08013768 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013768:	b480      	push	{r7}
 801376a:	b083      	sub	sp, #12
 801376c:	af00      	add	r7, sp, #0
 801376e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	220a      	movs	r2, #10
 8013774:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8013776:	4b03      	ldr	r3, [pc, #12]	; (8013784 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013778:	4618      	mov	r0, r3
 801377a:	370c      	adds	r7, #12
 801377c:	46bd      	mov	sp, r7
 801377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013782:	4770      	bx	lr
 8013784:	20000080 	.word	0x20000080

08013788 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8013788:	b480      	push	{r7}
 801378a:	b083      	sub	sp, #12
 801378c:	af00      	add	r7, sp, #0
 801378e:	6078      	str	r0, [r7, #4]
 8013790:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013792:	683b      	ldr	r3, [r7, #0]
 8013794:	2b00      	cmp	r3, #0
 8013796:	d101      	bne.n	801379c <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013798:	2303      	movs	r3, #3
 801379a:	e009      	b.n	80137b0 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80137a2:	687a      	ldr	r2, [r7, #4]
 80137a4:	33b0      	adds	r3, #176	; 0xb0
 80137a6:	009b      	lsls	r3, r3, #2
 80137a8:	4413      	add	r3, r2
 80137aa:	683a      	ldr	r2, [r7, #0]
 80137ac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80137ae:	2300      	movs	r3, #0
}
 80137b0:	4618      	mov	r0, r3
 80137b2:	370c      	adds	r7, #12
 80137b4:	46bd      	mov	sp, r7
 80137b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ba:	4770      	bx	lr

080137bc <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80137bc:	b580      	push	{r7, lr}
 80137be:	b084      	sub	sp, #16
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	32b0      	adds	r2, #176	; 0xb0
 80137ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137d2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d032      	beq.n	8013840 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	2200      	movs	r2, #0
 80137de:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	2200      	movs	r2, #0
 80137e4:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	2200      	movs	r2, #0
 80137ea:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861
  hmsc->scsi_sense_head = 0U;
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	2200      	movs	r2, #0
 80137f2:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	2200      	movs	r2, #0
 80137fa:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013804:	687a      	ldr	r2, [r7, #4]
 8013806:	33b0      	adds	r3, #176	; 0xb0
 8013808:	009b      	lsls	r3, r3, #2
 801380a:	4413      	add	r3, r2
 801380c:	685b      	ldr	r3, [r3, #4]
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	2000      	movs	r0, #0
 8013812:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8013814:	4b0c      	ldr	r3, [pc, #48]	; (8013848 <MSC_BOT_Init+0x8c>)
 8013816:	781b      	ldrb	r3, [r3, #0]
 8013818:	4619      	mov	r1, r3
 801381a:	6878      	ldr	r0, [r7, #4]
 801381c:	f007 f95a 	bl	801aad4 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8013820:	4b0a      	ldr	r3, [pc, #40]	; (801384c <MSC_BOT_Init+0x90>)
 8013822:	781b      	ldrb	r3, [r3, #0]
 8013824:	4619      	mov	r1, r3
 8013826:	6878      	ldr	r0, [r7, #4]
 8013828:	f007 f954 	bl	801aad4 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 801382c:	4b06      	ldr	r3, [pc, #24]	; (8013848 <MSC_BOT_Init+0x8c>)
 801382e:	7819      	ldrb	r1, [r3, #0]
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	f503 6201 	add.w	r2, r3, #2064	; 0x810
 8013836:	231f      	movs	r3, #31
 8013838:	6878      	ldr	r0, [r7, #4]
 801383a:	f007 fa14 	bl	801ac66 <USBD_LL_PrepareReceive>
 801383e:	e000      	b.n	8013842 <MSC_BOT_Init+0x86>
    return;
 8013840:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8013842:	3710      	adds	r7, #16
 8013844:	46bd      	mov	sp, r7
 8013846:	bd80      	pop	{r7, pc}
 8013848:	2000008b 	.word	0x2000008b
 801384c:	2000008a 	.word	0x2000008a

08013850 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8013850:	b580      	push	{r7, lr}
 8013852:	b084      	sub	sp, #16
 8013854:	af00      	add	r7, sp, #0
 8013856:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	32b0      	adds	r2, #176	; 0xb0
 8013862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013866:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	2b00      	cmp	r3, #0
 801386c:	d01b      	beq.n	80138a6 <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	2200      	movs	r2, #0
 8013872:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	2201      	movs	r2, #1
 8013878:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 801387a:	4b0d      	ldr	r3, [pc, #52]	; (80138b0 <MSC_BOT_Reset+0x60>)
 801387c:	781b      	ldrb	r3, [r3, #0]
 801387e:	4619      	mov	r1, r3
 8013880:	6878      	ldr	r0, [r7, #4]
 8013882:	f007 f965 	bl	801ab50 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8013886:	4b0b      	ldr	r3, [pc, #44]	; (80138b4 <MSC_BOT_Reset+0x64>)
 8013888:	781b      	ldrb	r3, [r3, #0]
 801388a:	4619      	mov	r1, r3
 801388c:	6878      	ldr	r0, [r7, #4]
 801388e:	f007 f95f 	bl	801ab50 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8013892:	4b08      	ldr	r3, [pc, #32]	; (80138b4 <MSC_BOT_Reset+0x64>)
 8013894:	7819      	ldrb	r1, [r3, #0]
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	f503 6201 	add.w	r2, r3, #2064	; 0x810
 801389c:	231f      	movs	r3, #31
 801389e:	6878      	ldr	r0, [r7, #4]
 80138a0:	f007 f9e1 	bl	801ac66 <USBD_LL_PrepareReceive>
 80138a4:	e000      	b.n	80138a8 <MSC_BOT_Reset+0x58>
    return;
 80138a6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80138a8:	3710      	adds	r7, #16
 80138aa:	46bd      	mov	sp, r7
 80138ac:	bd80      	pop	{r7, pc}
 80138ae:	bf00      	nop
 80138b0:	2000008a 	.word	0x2000008a
 80138b4:	2000008b 	.word	0x2000008b

080138b8 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80138b8:	b480      	push	{r7}
 80138ba:	b085      	sub	sp, #20
 80138bc:	af00      	add	r7, sp, #0
 80138be:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	32b0      	adds	r2, #176	; 0xb0
 80138ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138ce:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d002      	beq.n	80138dc <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	2200      	movs	r2, #0
 80138da:	721a      	strb	r2, [r3, #8]
  }
}
 80138dc:	bf00      	nop
 80138de:	3714      	adds	r7, #20
 80138e0:	46bd      	mov	sp, r7
 80138e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138e6:	4770      	bx	lr

080138e8 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80138e8:	b580      	push	{r7, lr}
 80138ea:	b084      	sub	sp, #16
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	6078      	str	r0, [r7, #4]
 80138f0:	460b      	mov	r3, r1
 80138f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	32b0      	adds	r2, #176	; 0xb0
 80138fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013902:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d020      	beq.n	801394c <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	7a1b      	ldrb	r3, [r3, #8]
 801390e:	2b02      	cmp	r3, #2
 8013910:	d005      	beq.n	801391e <MSC_BOT_DataIn+0x36>
 8013912:	2b02      	cmp	r3, #2
 8013914:	db1c      	blt.n	8013950 <MSC_BOT_DataIn+0x68>
 8013916:	3b03      	subs	r3, #3
 8013918:	2b01      	cmp	r3, #1
 801391a:	d819      	bhi.n	8013950 <MSC_BOT_DataIn+0x68>
 801391c:	e011      	b.n	8013942 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	f603 031f 	addw	r3, r3, #2079	; 0x81f
 801392a:	461a      	mov	r2, r3
 801392c:	6878      	ldr	r0, [r7, #4]
 801392e:	f000 f9c9 	bl	8013cc4 <SCSI_ProcessCmd>
 8013932:	4603      	mov	r3, r0
 8013934:	2b00      	cmp	r3, #0
 8013936:	da0d      	bge.n	8013954 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013938:	2101      	movs	r1, #1
 801393a:	6878      	ldr	r0, [r7, #4]
 801393c:	f000 f90c 	bl	8013b58 <MSC_BOT_SendCSW>
      }
      break;
 8013940:	e008      	b.n	8013954 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013942:	2100      	movs	r1, #0
 8013944:	6878      	ldr	r0, [r7, #4]
 8013946:	f000 f907 	bl	8013b58 <MSC_BOT_SendCSW>
      break;
 801394a:	e004      	b.n	8013956 <MSC_BOT_DataIn+0x6e>
    return;
 801394c:	bf00      	nop
 801394e:	e002      	b.n	8013956 <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8013950:	bf00      	nop
 8013952:	e000      	b.n	8013956 <MSC_BOT_DataIn+0x6e>
      break;
 8013954:	bf00      	nop
  }
}
 8013956:	3710      	adds	r7, #16
 8013958:	46bd      	mov	sp, r7
 801395a:	bd80      	pop	{r7, pc}

0801395c <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801395c:	b580      	push	{r7, lr}
 801395e:	b084      	sub	sp, #16
 8013960:	af00      	add	r7, sp, #0
 8013962:	6078      	str	r0, [r7, #4]
 8013964:	460b      	mov	r3, r1
 8013966:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	32b0      	adds	r2, #176	; 0xb0
 8013972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013976:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d01c      	beq.n	80139b8 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	7a1b      	ldrb	r3, [r3, #8]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d002      	beq.n	801398c <MSC_BOT_DataOut+0x30>
 8013986:	2b01      	cmp	r3, #1
 8013988:	d004      	beq.n	8013994 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 801398a:	e018      	b.n	80139be <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 801398c:	6878      	ldr	r0, [r7, #4]
 801398e:	f000 f819 	bl	80139c4 <MSC_BOT_CBW_Decode>
      break;
 8013992:	e014      	b.n	80139be <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	f603 031f 	addw	r3, r3, #2079	; 0x81f
 80139a0:	461a      	mov	r2, r3
 80139a2:	6878      	ldr	r0, [r7, #4]
 80139a4:	f000 f98e 	bl	8013cc4 <SCSI_ProcessCmd>
 80139a8:	4603      	mov	r3, r0
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	da06      	bge.n	80139bc <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80139ae:	2101      	movs	r1, #1
 80139b0:	6878      	ldr	r0, [r7, #4]
 80139b2:	f000 f8d1 	bl	8013b58 <MSC_BOT_SendCSW>
      break;
 80139b6:	e001      	b.n	80139bc <MSC_BOT_DataOut+0x60>
    return;
 80139b8:	bf00      	nop
 80139ba:	e000      	b.n	80139be <MSC_BOT_DataOut+0x62>
      break;
 80139bc:	bf00      	nop
  }
}
 80139be:	3710      	adds	r7, #16
 80139c0:	46bd      	mov	sp, r7
 80139c2:	bd80      	pop	{r7, pc}

080139c4 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80139c4:	b580      	push	{r7, lr}
 80139c6:	b084      	sub	sp, #16
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	32b0      	adds	r2, #176	; 0xb0
 80139d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139da:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d079      	beq.n	8013ad6 <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80139fa:	4b3a      	ldr	r3, [pc, #232]	; (8013ae4 <MSC_BOT_CBW_Decode+0x120>)
 80139fc:	781b      	ldrb	r3, [r3, #0]
 80139fe:	4619      	mov	r1, r3
 8013a00:	6878      	ldr	r0, [r7, #4]
 8013a02:	f007 f951 	bl	801aca8 <USBD_LL_GetRxDataSize>
 8013a06:	4603      	mov	r3, r0
 8013a08:	2b1f      	cmp	r3, #31
 8013a0a:	d114      	bne.n	8013a36 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8013a12:	4a35      	ldr	r2, [pc, #212]	; (8013ae8 <MSC_BOT_CBW_Decode+0x124>)
 8013a14:	4293      	cmp	r3, r2
 8013a16:	d10e      	bne.n	8013a36 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	f893 381d 	ldrb.w	r3, [r3, #2077]	; 0x81d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8013a1e:	2b01      	cmp	r3, #1
 8013a20:	d809      	bhi.n	8013a36 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	f893 381e 	ldrb.w	r3, [r3, #2078]	; 0x81e
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d004      	beq.n	8013a36 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	f893 381e 	ldrb.w	r3, [r3, #2078]	; 0x81e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013a32:	2b10      	cmp	r3, #16
 8013a34:	d90e      	bls.n	8013a54 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8013a3c:	2320      	movs	r3, #32
 8013a3e:	2205      	movs	r2, #5
 8013a40:	6878      	ldr	r0, [r7, #4]
 8013a42:	f000 fe2b 	bl	801469c <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	2202      	movs	r2, #2
 8013a4a:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8013a4c:	6878      	ldr	r0, [r7, #4]
 8013a4e:	f000 f8bd 	bl	8013bcc <MSC_BOT_Abort>
 8013a52:	e043      	b.n	8013adc <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	f603 031f 	addw	r3, r3, #2079	; 0x81f
 8013a60:	461a      	mov	r2, r3
 8013a62:	6878      	ldr	r0, [r7, #4]
 8013a64:	f000 f92e 	bl	8013cc4 <SCSI_ProcessCmd>
 8013a68:	4603      	mov	r3, r0
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	da0c      	bge.n	8013a88 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	7a1b      	ldrb	r3, [r3, #8]
 8013a72:	2b05      	cmp	r3, #5
 8013a74:	d104      	bne.n	8013a80 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013a76:	2101      	movs	r1, #1
 8013a78:	6878      	ldr	r0, [r7, #4]
 8013a7a:	f000 f86d 	bl	8013b58 <MSC_BOT_SendCSW>
 8013a7e:	e02d      	b.n	8013adc <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8013a80:	6878      	ldr	r0, [r7, #4]
 8013a82:	f000 f8a3 	bl	8013bcc <MSC_BOT_Abort>
 8013a86:	e029      	b.n	8013adc <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	7a1b      	ldrb	r3, [r3, #8]
 8013a8c:	2b02      	cmp	r3, #2
 8013a8e:	d024      	beq.n	8013ada <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8013a94:	2b01      	cmp	r3, #1
 8013a96:	d020      	beq.n	8013ada <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8013a9c:	2b03      	cmp	r3, #3
 8013a9e:	d01c      	beq.n	8013ada <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	68db      	ldr	r3, [r3, #12]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d009      	beq.n	8013abc <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	f103 0110 	add.w	r1, r3, #16
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	68db      	ldr	r3, [r3, #12]
 8013ab2:	461a      	mov	r2, r3
 8013ab4:	6878      	ldr	r0, [r7, #4]
 8013ab6:	f000 f819 	bl	8013aec <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8013aba:	e00f      	b.n	8013adc <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	68db      	ldr	r3, [r3, #12]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d104      	bne.n	8013ace <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013ac4:	2100      	movs	r1, #0
 8013ac6:	6878      	ldr	r0, [r7, #4]
 8013ac8:	f000 f846 	bl	8013b58 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8013acc:	e006      	b.n	8013adc <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8013ace:	6878      	ldr	r0, [r7, #4]
 8013ad0:	f000 f87c 	bl	8013bcc <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8013ad4:	e002      	b.n	8013adc <MSC_BOT_CBW_Decode+0x118>
    return;
 8013ad6:	bf00      	nop
 8013ad8:	e000      	b.n	8013adc <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 8013ada:	bf00      	nop
    }
  }
}
 8013adc:	3710      	adds	r7, #16
 8013ade:	46bd      	mov	sp, r7
 8013ae0:	bd80      	pop	{r7, pc}
 8013ae2:	bf00      	nop
 8013ae4:	2000008b 	.word	0x2000008b
 8013ae8:	43425355 	.word	0x43425355

08013aec <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8013aec:	b580      	push	{r7, lr}
 8013aee:	b086      	sub	sp, #24
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	60f8      	str	r0, [r7, #12]
 8013af4:	60b9      	str	r1, [r7, #8]
 8013af6:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	32b0      	adds	r2, #176	; 0xb0
 8013b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b06:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013b08:	697b      	ldr	r3, [r7, #20]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d01e      	beq.n	8013b4c <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8013b0e:	697b      	ldr	r3, [r7, #20]
 8013b10:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8013b14:	687a      	ldr	r2, [r7, #4]
 8013b16:	4293      	cmp	r3, r2
 8013b18:	bf28      	it	cs
 8013b1a:	4613      	movcs	r3, r2
 8013b1c:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8013b1e:	697b      	ldr	r3, [r7, #20]
 8013b20:	f8d3 2838 	ldr.w	r2, [r3, #2104]	; 0x838
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	1ad2      	subs	r2, r2, r3
 8013b28:	697b      	ldr	r3, [r7, #20]
 8013b2a:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8013b2e:	697b      	ldr	r3, [r7, #20]
 8013b30:	2200      	movs	r2, #0
 8013b32:	f883 283c 	strb.w	r2, [r3, #2108]	; 0x83c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8013b36:	697b      	ldr	r3, [r7, #20]
 8013b38:	2204      	movs	r2, #4
 8013b3a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8013b3c:	4b05      	ldr	r3, [pc, #20]	; (8013b54 <MSC_BOT_SendData+0x68>)
 8013b3e:	7819      	ldrb	r1, [r3, #0]
 8013b40:	693b      	ldr	r3, [r7, #16]
 8013b42:	68ba      	ldr	r2, [r7, #8]
 8013b44:	68f8      	ldr	r0, [r7, #12]
 8013b46:	f007 f86d 	bl	801ac24 <USBD_LL_Transmit>
 8013b4a:	e000      	b.n	8013b4e <MSC_BOT_SendData+0x62>
    return;
 8013b4c:	bf00      	nop
}
 8013b4e:	3718      	adds	r7, #24
 8013b50:	46bd      	mov	sp, r7
 8013b52:	bd80      	pop	{r7, pc}
 8013b54:	2000008a 	.word	0x2000008a

08013b58 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	b084      	sub	sp, #16
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	6078      	str	r0, [r7, #4]
 8013b60:	460b      	mov	r3, r1
 8013b62:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	32b0      	adds	r2, #176	; 0xb0
 8013b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b72:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d01d      	beq.n	8013bb6 <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	4a10      	ldr	r2, [pc, #64]	; (8013bc0 <MSC_BOT_SendCSW+0x68>)
 8013b7e:	f8c3 2830 	str.w	r2, [r3, #2096]	; 0x830
  hmsc->csw.bStatus = CSW_Status;
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	78fa      	ldrb	r2, [r7, #3]
 8013b86:	f883 283c 	strb.w	r2, [r3, #2108]	; 0x83c
  hmsc->bot_state = USBD_BOT_IDLE;
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	2200      	movs	r2, #0
 8013b8e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8013b90:	4b0c      	ldr	r3, [pc, #48]	; (8013bc4 <MSC_BOT_SendCSW+0x6c>)
 8013b92:	7819      	ldrb	r1, [r3, #0]
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	f503 6203 	add.w	r2, r3, #2096	; 0x830
 8013b9a:	230d      	movs	r3, #13
 8013b9c:	6878      	ldr	r0, [r7, #4]
 8013b9e:	f007 f841 	bl	801ac24 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8013ba2:	4b09      	ldr	r3, [pc, #36]	; (8013bc8 <MSC_BOT_SendCSW+0x70>)
 8013ba4:	7819      	ldrb	r1, [r3, #0]
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	f503 6201 	add.w	r2, r3, #2064	; 0x810
 8013bac:	231f      	movs	r3, #31
 8013bae:	6878      	ldr	r0, [r7, #4]
 8013bb0:	f007 f859 	bl	801ac66 <USBD_LL_PrepareReceive>
 8013bb4:	e000      	b.n	8013bb8 <MSC_BOT_SendCSW+0x60>
    return;
 8013bb6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8013bb8:	3710      	adds	r7, #16
 8013bba:	46bd      	mov	sp, r7
 8013bbc:	bd80      	pop	{r7, pc}
 8013bbe:	bf00      	nop
 8013bc0:	53425355 	.word	0x53425355
 8013bc4:	2000008a 	.word	0x2000008a
 8013bc8:	2000008b 	.word	0x2000008b

08013bcc <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b084      	sub	sp, #16
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	32b0      	adds	r2, #176	; 0xb0
 8013bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013be2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d02a      	beq.n	8013c40 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d10e      	bne.n	8013c12 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
  if ((hmsc->cbw.bmFlags == 0U) &&
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d009      	beq.n	8013c12 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d105      	bne.n	8013c12 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8013c06:	4b10      	ldr	r3, [pc, #64]	; (8013c48 <MSC_BOT_Abort+0x7c>)
 8013c08:	781b      	ldrb	r3, [r3, #0]
 8013c0a:	4619      	mov	r1, r3
 8013c0c:	6878      	ldr	r0, [r7, #4]
 8013c0e:	f006 ff80 	bl	801ab12 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8013c12:	4b0e      	ldr	r3, [pc, #56]	; (8013c4c <MSC_BOT_Abort+0x80>)
 8013c14:	781b      	ldrb	r3, [r3, #0]
 8013c16:	4619      	mov	r1, r3
 8013c18:	6878      	ldr	r0, [r7, #4]
 8013c1a:	f006 ff7a 	bl	801ab12 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	7a5b      	ldrb	r3, [r3, #9]
 8013c22:	2b02      	cmp	r3, #2
 8013c24:	d10d      	bne.n	8013c42 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8013c26:	4b09      	ldr	r3, [pc, #36]	; (8013c4c <MSC_BOT_Abort+0x80>)
 8013c28:	781b      	ldrb	r3, [r3, #0]
 8013c2a:	4619      	mov	r1, r3
 8013c2c:	6878      	ldr	r0, [r7, #4]
 8013c2e:	f006 ff70 	bl	801ab12 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8013c32:	4b05      	ldr	r3, [pc, #20]	; (8013c48 <MSC_BOT_Abort+0x7c>)
 8013c34:	781b      	ldrb	r3, [r3, #0]
 8013c36:	4619      	mov	r1, r3
 8013c38:	6878      	ldr	r0, [r7, #4]
 8013c3a:	f006 ff6a 	bl	801ab12 <USBD_LL_StallEP>
 8013c3e:	e000      	b.n	8013c42 <MSC_BOT_Abort+0x76>
    return;
 8013c40:	bf00      	nop
  }
}
 8013c42:	3710      	adds	r7, #16
 8013c44:	46bd      	mov	sp, r7
 8013c46:	bd80      	pop	{r7, pc}
 8013c48:	2000008b 	.word	0x2000008b
 8013c4c:	2000008a 	.word	0x2000008a

08013c50 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013c50:	b580      	push	{r7, lr}
 8013c52:	b084      	sub	sp, #16
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	6078      	str	r0, [r7, #4]
 8013c58:	460b      	mov	r3, r1
 8013c5a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	32b0      	adds	r2, #176	; 0xb0
 8013c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c6a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d01d      	beq.n	8013cae <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	7a5b      	ldrb	r3, [r3, #9]
 8013c76:	2b02      	cmp	r3, #2
 8013c78:	d10c      	bne.n	8013c94 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8013c7a:	4b10      	ldr	r3, [pc, #64]	; (8013cbc <MSC_BOT_CplClrFeature+0x6c>)
 8013c7c:	781b      	ldrb	r3, [r3, #0]
 8013c7e:	4619      	mov	r1, r3
 8013c80:	6878      	ldr	r0, [r7, #4]
 8013c82:	f006 ff46 	bl	801ab12 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8013c86:	4b0e      	ldr	r3, [pc, #56]	; (8013cc0 <MSC_BOT_CplClrFeature+0x70>)
 8013c88:	781b      	ldrb	r3, [r3, #0]
 8013c8a:	4619      	mov	r1, r3
 8013c8c:	6878      	ldr	r0, [r7, #4]
 8013c8e:	f006 ff40 	bl	801ab12 <USBD_LL_StallEP>
 8013c92:	e00f      	b.n	8013cb4 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8013c94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	da0a      	bge.n	8013cb2 <MSC_BOT_CplClrFeature+0x62>
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	7a5b      	ldrb	r3, [r3, #9]
 8013ca0:	2b01      	cmp	r3, #1
 8013ca2:	d006      	beq.n	8013cb2 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013ca4:	2101      	movs	r1, #1
 8013ca6:	6878      	ldr	r0, [r7, #4]
 8013ca8:	f7ff ff56 	bl	8013b58 <MSC_BOT_SendCSW>
 8013cac:	e002      	b.n	8013cb4 <MSC_BOT_CplClrFeature+0x64>
    return;
 8013cae:	bf00      	nop
 8013cb0:	e000      	b.n	8013cb4 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8013cb2:	bf00      	nop
  }
}
 8013cb4:	3710      	adds	r7, #16
 8013cb6:	46bd      	mov	sp, r7
 8013cb8:	bd80      	pop	{r7, pc}
 8013cba:	bf00      	nop
 8013cbc:	2000008a 	.word	0x2000008a
 8013cc0:	2000008b 	.word	0x2000008b

08013cc4 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b086      	sub	sp, #24
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	60f8      	str	r0, [r7, #12]
 8013ccc:	460b      	mov	r3, r1
 8013cce:	607a      	str	r2, [r7, #4]
 8013cd0:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	32b0      	adds	r2, #176	; 0xb0
 8013cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ce0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8013ce2:	693b      	ldr	r3, [r7, #16]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d102      	bne.n	8013cee <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8013ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8013cec:	e168      	b.n	8013fc0 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	781b      	ldrb	r3, [r3, #0]
 8013cf2:	2baa      	cmp	r3, #170	; 0xaa
 8013cf4:	f000 8144 	beq.w	8013f80 <SCSI_ProcessCmd+0x2bc>
 8013cf8:	2baa      	cmp	r3, #170	; 0xaa
 8013cfa:	f300 8153 	bgt.w	8013fa4 <SCSI_ProcessCmd+0x2e0>
 8013cfe:	2ba8      	cmp	r3, #168	; 0xa8
 8013d00:	f000 812c 	beq.w	8013f5c <SCSI_ProcessCmd+0x298>
 8013d04:	2ba8      	cmp	r3, #168	; 0xa8
 8013d06:	f300 814d 	bgt.w	8013fa4 <SCSI_ProcessCmd+0x2e0>
 8013d0a:	2b5a      	cmp	r3, #90	; 0x5a
 8013d0c:	f300 80c0 	bgt.w	8013e90 <SCSI_ProcessCmd+0x1cc>
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	f2c0 8147 	blt.w	8013fa4 <SCSI_ProcessCmd+0x2e0>
 8013d16:	2b5a      	cmp	r3, #90	; 0x5a
 8013d18:	f200 8144 	bhi.w	8013fa4 <SCSI_ProcessCmd+0x2e0>
 8013d1c:	a201      	add	r2, pc, #4	; (adr r2, 8013d24 <SCSI_ProcessCmd+0x60>)
 8013d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d22:	bf00      	nop
 8013d24:	08013e97 	.word	0x08013e97
 8013d28:	08013fa5 	.word	0x08013fa5
 8013d2c:	08013fa5 	.word	0x08013fa5
 8013d30:	08013ea9 	.word	0x08013ea9
 8013d34:	08013fa5 	.word	0x08013fa5
 8013d38:	08013fa5 	.word	0x08013fa5
 8013d3c:	08013fa5 	.word	0x08013fa5
 8013d40:	08013fa5 	.word	0x08013fa5
 8013d44:	08013fa5 	.word	0x08013fa5
 8013d48:	08013fa5 	.word	0x08013fa5
 8013d4c:	08013fa5 	.word	0x08013fa5
 8013d50:	08013fa5 	.word	0x08013fa5
 8013d54:	08013fa5 	.word	0x08013fa5
 8013d58:	08013fa5 	.word	0x08013fa5
 8013d5c:	08013fa5 	.word	0x08013fa5
 8013d60:	08013fa5 	.word	0x08013fa5
 8013d64:	08013fa5 	.word	0x08013fa5
 8013d68:	08013fa5 	.word	0x08013fa5
 8013d6c:	08013ebb 	.word	0x08013ebb
 8013d70:	08013fa5 	.word	0x08013fa5
 8013d74:	08013fa5 	.word	0x08013fa5
 8013d78:	08013fa5 	.word	0x08013fa5
 8013d7c:	08013fa5 	.word	0x08013fa5
 8013d80:	08013fa5 	.word	0x08013fa5
 8013d84:	08013fa5 	.word	0x08013fa5
 8013d88:	08013fa5 	.word	0x08013fa5
 8013d8c:	08013ef1 	.word	0x08013ef1
 8013d90:	08013ecd 	.word	0x08013ecd
 8013d94:	08013fa5 	.word	0x08013fa5
 8013d98:	08013fa5 	.word	0x08013fa5
 8013d9c:	08013edf 	.word	0x08013edf
 8013da0:	08013fa5 	.word	0x08013fa5
 8013da4:	08013fa5 	.word	0x08013fa5
 8013da8:	08013fa5 	.word	0x08013fa5
 8013dac:	08013fa5 	.word	0x08013fa5
 8013db0:	08013f15 	.word	0x08013f15
 8013db4:	08013fa5 	.word	0x08013fa5
 8013db8:	08013f27 	.word	0x08013f27
 8013dbc:	08013fa5 	.word	0x08013fa5
 8013dc0:	08013fa5 	.word	0x08013fa5
 8013dc4:	08013f4b 	.word	0x08013f4b
 8013dc8:	08013fa5 	.word	0x08013fa5
 8013dcc:	08013f6f 	.word	0x08013f6f
 8013dd0:	08013fa5 	.word	0x08013fa5
 8013dd4:	08013fa5 	.word	0x08013fa5
 8013dd8:	08013fa5 	.word	0x08013fa5
 8013ddc:	08013fa5 	.word	0x08013fa5
 8013de0:	08013f93 	.word	0x08013f93
 8013de4:	08013fa5 	.word	0x08013fa5
 8013de8:	08013fa5 	.word	0x08013fa5
 8013dec:	08013fa5 	.word	0x08013fa5
 8013df0:	08013fa5 	.word	0x08013fa5
 8013df4:	08013fa5 	.word	0x08013fa5
 8013df8:	08013fa5 	.word	0x08013fa5
 8013dfc:	08013fa5 	.word	0x08013fa5
 8013e00:	08013fa5 	.word	0x08013fa5
 8013e04:	08013fa5 	.word	0x08013fa5
 8013e08:	08013fa5 	.word	0x08013fa5
 8013e0c:	08013fa5 	.word	0x08013fa5
 8013e10:	08013fa5 	.word	0x08013fa5
 8013e14:	08013fa5 	.word	0x08013fa5
 8013e18:	08013fa5 	.word	0x08013fa5
 8013e1c:	08013fa5 	.word	0x08013fa5
 8013e20:	08013fa5 	.word	0x08013fa5
 8013e24:	08013fa5 	.word	0x08013fa5
 8013e28:	08013fa5 	.word	0x08013fa5
 8013e2c:	08013fa5 	.word	0x08013fa5
 8013e30:	08013fa5 	.word	0x08013fa5
 8013e34:	08013fa5 	.word	0x08013fa5
 8013e38:	08013fa5 	.word	0x08013fa5
 8013e3c:	08013fa5 	.word	0x08013fa5
 8013e40:	08013fa5 	.word	0x08013fa5
 8013e44:	08013fa5 	.word	0x08013fa5
 8013e48:	08013fa5 	.word	0x08013fa5
 8013e4c:	08013fa5 	.word	0x08013fa5
 8013e50:	08013fa5 	.word	0x08013fa5
 8013e54:	08013fa5 	.word	0x08013fa5
 8013e58:	08013fa5 	.word	0x08013fa5
 8013e5c:	08013fa5 	.word	0x08013fa5
 8013e60:	08013fa5 	.word	0x08013fa5
 8013e64:	08013fa5 	.word	0x08013fa5
 8013e68:	08013fa5 	.word	0x08013fa5
 8013e6c:	08013fa5 	.word	0x08013fa5
 8013e70:	08013fa5 	.word	0x08013fa5
 8013e74:	08013fa5 	.word	0x08013fa5
 8013e78:	08013fa5 	.word	0x08013fa5
 8013e7c:	08013fa5 	.word	0x08013fa5
 8013e80:	08013fa5 	.word	0x08013fa5
 8013e84:	08013fa5 	.word	0x08013fa5
 8013e88:	08013fa5 	.word	0x08013fa5
 8013e8c:	08013f03 	.word	0x08013f03
 8013e90:	2b9e      	cmp	r3, #158	; 0x9e
 8013e92:	d051      	beq.n	8013f38 <SCSI_ProcessCmd+0x274>
 8013e94:	e086      	b.n	8013fa4 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8013e96:	7afb      	ldrb	r3, [r7, #11]
 8013e98:	687a      	ldr	r2, [r7, #4]
 8013e9a:	4619      	mov	r1, r3
 8013e9c:	68f8      	ldr	r0, [r7, #12]
 8013e9e:	f000 f893 	bl	8013fc8 <SCSI_TestUnitReady>
 8013ea2:	4603      	mov	r3, r0
 8013ea4:	75fb      	strb	r3, [r7, #23]
      break;
 8013ea6:	e089      	b.n	8013fbc <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8013ea8:	7afb      	ldrb	r3, [r7, #11]
 8013eaa:	687a      	ldr	r2, [r7, #4]
 8013eac:	4619      	mov	r1, r3
 8013eae:	68f8      	ldr	r0, [r7, #12]
 8013eb0:	f000 fb6e 	bl	8014590 <SCSI_RequestSense>
 8013eb4:	4603      	mov	r3, r0
 8013eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8013eb8:	e080      	b.n	8013fbc <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8013eba:	7afb      	ldrb	r3, [r7, #11]
 8013ebc:	687a      	ldr	r2, [r7, #4]
 8013ebe:	4619      	mov	r1, r3
 8013ec0:	68f8      	ldr	r0, [r7, #12]
 8013ec2:	f000 f8db 	bl	801407c <SCSI_Inquiry>
 8013ec6:	4603      	mov	r3, r0
 8013ec8:	75fb      	strb	r3, [r7, #23]
      break;
 8013eca:	e077      	b.n	8013fbc <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8013ecc:	7afb      	ldrb	r3, [r7, #11]
 8013ece:	687a      	ldr	r2, [r7, #4]
 8013ed0:	4619      	mov	r1, r3
 8013ed2:	68f8      	ldr	r0, [r7, #12]
 8013ed4:	f000 fc30 	bl	8014738 <SCSI_StartStopUnit>
 8013ed8:	4603      	mov	r3, r0
 8013eda:	75fb      	strb	r3, [r7, #23]
      break;
 8013edc:	e06e      	b.n	8013fbc <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8013ede:	7afb      	ldrb	r3, [r7, #11]
 8013ee0:	687a      	ldr	r2, [r7, #4]
 8013ee2:	4619      	mov	r1, r3
 8013ee4:	68f8      	ldr	r0, [r7, #12]
 8013ee6:	f000 fc7c 	bl	80147e2 <SCSI_AllowPreventRemovable>
 8013eea:	4603      	mov	r3, r0
 8013eec:	75fb      	strb	r3, [r7, #23]
      break;
 8013eee:	e065      	b.n	8013fbc <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8013ef0:	7afb      	ldrb	r3, [r7, #11]
 8013ef2:	687a      	ldr	r2, [r7, #4]
 8013ef4:	4619      	mov	r1, r3
 8013ef6:	68f8      	ldr	r0, [r7, #12]
 8013ef8:	f000 faea 	bl	80144d0 <SCSI_ModeSense6>
 8013efc:	4603      	mov	r3, r0
 8013efe:	75fb      	strb	r3, [r7, #23]
      break;
 8013f00:	e05c      	b.n	8013fbc <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8013f02:	7afb      	ldrb	r3, [r7, #11]
 8013f04:	687a      	ldr	r2, [r7, #4]
 8013f06:	4619      	mov	r1, r3
 8013f08:	68f8      	ldr	r0, [r7, #12]
 8013f0a:	f000 fb11 	bl	8014530 <SCSI_ModeSense10>
 8013f0e:	4603      	mov	r3, r0
 8013f10:	75fb      	strb	r3, [r7, #23]
      break;
 8013f12:	e053      	b.n	8013fbc <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8013f14:	7afb      	ldrb	r3, [r7, #11]
 8013f16:	687a      	ldr	r2, [r7, #4]
 8013f18:	4619      	mov	r1, r3
 8013f1a:	68f8      	ldr	r0, [r7, #12]
 8013f1c:	f000 fa5d 	bl	80143da <SCSI_ReadFormatCapacity>
 8013f20:	4603      	mov	r3, r0
 8013f22:	75fb      	strb	r3, [r7, #23]
      break;
 8013f24:	e04a      	b.n	8013fbc <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8013f26:	7afb      	ldrb	r3, [r7, #11]
 8013f28:	687a      	ldr	r2, [r7, #4]
 8013f2a:	4619      	mov	r1, r3
 8013f2c:	68f8      	ldr	r0, [r7, #12]
 8013f2e:	f000 f923 	bl	8014178 <SCSI_ReadCapacity10>
 8013f32:	4603      	mov	r3, r0
 8013f34:	75fb      	strb	r3, [r7, #23]
      break;
 8013f36:	e041      	b.n	8013fbc <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8013f38:	7afb      	ldrb	r3, [r7, #11]
 8013f3a:	687a      	ldr	r2, [r7, #4]
 8013f3c:	4619      	mov	r1, r3
 8013f3e:	68f8      	ldr	r0, [r7, #12]
 8013f40:	f000 f998 	bl	8014274 <SCSI_ReadCapacity16>
 8013f44:	4603      	mov	r3, r0
 8013f46:	75fb      	strb	r3, [r7, #23]
      break;
 8013f48:	e038      	b.n	8013fbc <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8013f4a:	7afb      	ldrb	r3, [r7, #11]
 8013f4c:	687a      	ldr	r2, [r7, #4]
 8013f4e:	4619      	mov	r1, r3
 8013f50:	68f8      	ldr	r0, [r7, #12]
 8013f52:	f000 fc73 	bl	801483c <SCSI_Read10>
 8013f56:	4603      	mov	r3, r0
 8013f58:	75fb      	strb	r3, [r7, #23]
      break;
 8013f5a:	e02f      	b.n	8013fbc <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8013f5c:	7afb      	ldrb	r3, [r7, #11]
 8013f5e:	687a      	ldr	r2, [r7, #4]
 8013f60:	4619      	mov	r1, r3
 8013f62:	68f8      	ldr	r0, [r7, #12]
 8013f64:	f000 fd14 	bl	8014990 <SCSI_Read12>
 8013f68:	4603      	mov	r3, r0
 8013f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8013f6c:	e026      	b.n	8013fbc <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8013f6e:	7afb      	ldrb	r3, [r7, #11]
 8013f70:	687a      	ldr	r2, [r7, #4]
 8013f72:	4619      	mov	r1, r3
 8013f74:	68f8      	ldr	r0, [r7, #12]
 8013f76:	f000 fdbf 	bl	8014af8 <SCSI_Write10>
 8013f7a:	4603      	mov	r3, r0
 8013f7c:	75fb      	strb	r3, [r7, #23]
      break;
 8013f7e:	e01d      	b.n	8013fbc <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8013f80:	7afb      	ldrb	r3, [r7, #11]
 8013f82:	687a      	ldr	r2, [r7, #4]
 8013f84:	4619      	mov	r1, r3
 8013f86:	68f8      	ldr	r0, [r7, #12]
 8013f88:	f000 fe8c 	bl	8014ca4 <SCSI_Write12>
 8013f8c:	4603      	mov	r3, r0
 8013f8e:	75fb      	strb	r3, [r7, #23]
      break;
 8013f90:	e014      	b.n	8013fbc <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8013f92:	7afb      	ldrb	r3, [r7, #11]
 8013f94:	687a      	ldr	r2, [r7, #4]
 8013f96:	4619      	mov	r1, r3
 8013f98:	68f8      	ldr	r0, [r7, #12]
 8013f9a:	f000 ff69 	bl	8014e70 <SCSI_Verify10>
 8013f9e:	4603      	mov	r3, r0
 8013fa0:	75fb      	strb	r3, [r7, #23]
      break;
 8013fa2:	e00b      	b.n	8013fbc <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8013fa4:	7af9      	ldrb	r1, [r7, #11]
 8013fa6:	2320      	movs	r3, #32
 8013fa8:	2205      	movs	r2, #5
 8013faa:	68f8      	ldr	r0, [r7, #12]
 8013fac:	f000 fb76 	bl	801469c <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8013fb0:	693b      	ldr	r3, [r7, #16]
 8013fb2:	2202      	movs	r2, #2
 8013fb4:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8013fb6:	23ff      	movs	r3, #255	; 0xff
 8013fb8:	75fb      	strb	r3, [r7, #23]
      break;
 8013fba:	bf00      	nop
  }

  return ret;
 8013fbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	3718      	adds	r7, #24
 8013fc4:	46bd      	mov	sp, r7
 8013fc6:	bd80      	pop	{r7, pc}

08013fc8 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b086      	sub	sp, #24
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	60f8      	str	r0, [r7, #12]
 8013fd0:	460b      	mov	r3, r1
 8013fd2:	607a      	str	r2, [r7, #4]
 8013fd4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	32b0      	adds	r2, #176	; 0xb0
 8013fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fe4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8013fe6:	697b      	ldr	r3, [r7, #20]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d102      	bne.n	8013ff2 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8013fec:	f04f 33ff 	mov.w	r3, #4294967295
 8013ff0:	e03f      	b.n	8014072 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8013ff2:	697b      	ldr	r3, [r7, #20]
 8013ff4:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d00a      	beq.n	8014012 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013ffc:	697b      	ldr	r3, [r7, #20]
 8013ffe:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014002:	2320      	movs	r3, #32
 8014004:	2205      	movs	r2, #5
 8014006:	68f8      	ldr	r0, [r7, #12]
 8014008:	f000 fb48 	bl	801469c <SCSI_SenseCode>

    return -1;
 801400c:	f04f 33ff 	mov.w	r3, #4294967295
 8014010:	e02f      	b.n	8014072 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8014012:	697b      	ldr	r3, [r7, #20]
 8014014:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 8014018:	2b02      	cmp	r3, #2
 801401a:	d10b      	bne.n	8014034 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801401c:	7af9      	ldrb	r1, [r7, #11]
 801401e:	233a      	movs	r3, #58	; 0x3a
 8014020:	2202      	movs	r2, #2
 8014022:	68f8      	ldr	r0, [r7, #12]
 8014024:	f000 fb3a 	bl	801469c <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8014028:	697b      	ldr	r3, [r7, #20]
 801402a:	2205      	movs	r2, #5
 801402c:	721a      	strb	r2, [r3, #8]
    return -1;
 801402e:	f04f 33ff 	mov.w	r3, #4294967295
 8014032:	e01e      	b.n	8014072 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801403a:	68fa      	ldr	r2, [r7, #12]
 801403c:	33b0      	adds	r3, #176	; 0xb0
 801403e:	009b      	lsls	r3, r3, #2
 8014040:	4413      	add	r3, r2
 8014042:	685b      	ldr	r3, [r3, #4]
 8014044:	689b      	ldr	r3, [r3, #8]
 8014046:	7afa      	ldrb	r2, [r7, #11]
 8014048:	4610      	mov	r0, r2
 801404a:	4798      	blx	r3
 801404c:	4603      	mov	r3, r0
 801404e:	2b00      	cmp	r3, #0
 8014050:	d00b      	beq.n	801406a <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014052:	7af9      	ldrb	r1, [r7, #11]
 8014054:	233a      	movs	r3, #58	; 0x3a
 8014056:	2202      	movs	r2, #2
 8014058:	68f8      	ldr	r0, [r7, #12]
 801405a:	f000 fb1f 	bl	801469c <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801405e:	697b      	ldr	r3, [r7, #20]
 8014060:	2205      	movs	r2, #5
 8014062:	721a      	strb	r2, [r3, #8]

    return -1;
 8014064:	f04f 33ff 	mov.w	r3, #4294967295
 8014068:	e003      	b.n	8014072 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 801406a:	697b      	ldr	r3, [r7, #20]
 801406c:	2200      	movs	r2, #0
 801406e:	60da      	str	r2, [r3, #12]

  return 0;
 8014070:	2300      	movs	r3, #0
}
 8014072:	4618      	mov	r0, r3
 8014074:	3718      	adds	r7, #24
 8014076:	46bd      	mov	sp, r7
 8014078:	bd80      	pop	{r7, pc}
	...

0801407c <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801407c:	b580      	push	{r7, lr}
 801407e:	b088      	sub	sp, #32
 8014080:	af00      	add	r7, sp, #0
 8014082:	60f8      	str	r0, [r7, #12]
 8014084:	460b      	mov	r3, r1
 8014086:	607a      	str	r2, [r7, #4]
 8014088:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	32b0      	adds	r2, #176	; 0xb0
 8014094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014098:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801409a:	69bb      	ldr	r3, [r7, #24]
 801409c:	2b00      	cmp	r3, #0
 801409e:	d102      	bne.n	80140a6 <SCSI_Inquiry+0x2a>
  {
    return -1;
 80140a0:	f04f 33ff 	mov.w	r3, #4294967295
 80140a4:	e05f      	b.n	8014166 <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80140a6:	69bb      	ldr	r3, [r7, #24]
 80140a8:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d10a      	bne.n	80140c6 <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80140b0:	69bb      	ldr	r3, [r7, #24]
 80140b2:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 80140b6:	2320      	movs	r3, #32
 80140b8:	2205      	movs	r2, #5
 80140ba:	68f8      	ldr	r0, [r7, #12]
 80140bc:	f000 faee 	bl	801469c <SCSI_SenseCode>
    return -1;
 80140c0:	f04f 33ff 	mov.w	r3, #4294967295
 80140c4:	e04f      	b.n	8014166 <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	3301      	adds	r3, #1
 80140ca:	781b      	ldrb	r3, [r3, #0]
 80140cc:	f003 0301 	and.w	r3, r3, #1
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d020      	beq.n	8014116 <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	3302      	adds	r3, #2
 80140d8:	781b      	ldrb	r3, [r3, #0]
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d105      	bne.n	80140ea <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 80140de:	2206      	movs	r2, #6
 80140e0:	4923      	ldr	r1, [pc, #140]	; (8014170 <SCSI_Inquiry+0xf4>)
 80140e2:	69b8      	ldr	r0, [r7, #24]
 80140e4:	f001 f84a 	bl	801517c <SCSI_UpdateBotData>
 80140e8:	e03c      	b.n	8014164 <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	3302      	adds	r3, #2
 80140ee:	781b      	ldrb	r3, [r3, #0]
 80140f0:	2b80      	cmp	r3, #128	; 0x80
 80140f2:	d105      	bne.n	8014100 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 80140f4:	2208      	movs	r2, #8
 80140f6:	491f      	ldr	r1, [pc, #124]	; (8014174 <SCSI_Inquiry+0xf8>)
 80140f8:	69b8      	ldr	r0, [r7, #24]
 80140fa:	f001 f83f 	bl	801517c <SCSI_UpdateBotData>
 80140fe:	e031      	b.n	8014164 <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8014100:	69bb      	ldr	r3, [r7, #24]
 8014102:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014106:	2324      	movs	r3, #36	; 0x24
 8014108:	2205      	movs	r2, #5
 801410a:	68f8      	ldr	r0, [r7, #12]
 801410c:	f000 fac6 	bl	801469c <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8014110:	f04f 33ff 	mov.w	r3, #4294967295
 8014114:	e027      	b.n	8014166 <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801411c:	68fa      	ldr	r2, [r7, #12]
 801411e:	33b0      	adds	r3, #176	; 0xb0
 8014120:	009b      	lsls	r3, r3, #2
 8014122:	4413      	add	r3, r2
 8014124:	685b      	ldr	r3, [r3, #4]
 8014126:	69d9      	ldr	r1, [r3, #28]
 8014128:	7afa      	ldrb	r2, [r7, #11]
 801412a:	4613      	mov	r3, r2
 801412c:	00db      	lsls	r3, r3, #3
 801412e:	4413      	add	r3, r2
 8014130:	009b      	lsls	r3, r3, #2
 8014132:	440b      	add	r3, r1
 8014134:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8014136:	697b      	ldr	r3, [r7, #20]
 8014138:	3304      	adds	r3, #4
 801413a:	781b      	ldrb	r3, [r3, #0]
 801413c:	b29b      	uxth	r3, r3
 801413e:	3305      	adds	r3, #5
 8014140:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	3304      	adds	r3, #4
 8014146:	781b      	ldrb	r3, [r3, #0]
 8014148:	b29b      	uxth	r3, r3
 801414a:	8bfa      	ldrh	r2, [r7, #30]
 801414c:	429a      	cmp	r2, r3
 801414e:	d303      	bcc.n	8014158 <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	3304      	adds	r3, #4
 8014154:	781b      	ldrb	r3, [r3, #0]
 8014156:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8014158:	8bfb      	ldrh	r3, [r7, #30]
 801415a:	461a      	mov	r2, r3
 801415c:	6979      	ldr	r1, [r7, #20]
 801415e:	69b8      	ldr	r0, [r7, #24]
 8014160:	f001 f80c 	bl	801517c <SCSI_UpdateBotData>
  }

  return 0;
 8014164:	2300      	movs	r3, #0
}
 8014166:	4618      	mov	r0, r3
 8014168:	3720      	adds	r7, #32
 801416a:	46bd      	mov	sp, r7
 801416c:	bd80      	pop	{r7, pc}
 801416e:	bf00      	nop
 8014170:	2000008c 	.word	0x2000008c
 8014174:	20000094 	.word	0x20000094

08014178 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014178:	b580      	push	{r7, lr}
 801417a:	b086      	sub	sp, #24
 801417c:	af00      	add	r7, sp, #0
 801417e:	60f8      	str	r0, [r7, #12]
 8014180:	460b      	mov	r3, r1
 8014182:	607a      	str	r2, [r7, #4]
 8014184:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	32b0      	adds	r2, #176	; 0xb0
 8014190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014194:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8014196:	697b      	ldr	r3, [r7, #20]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d102      	bne.n	80141a2 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 801419c:	f04f 33ff 	mov.w	r3, #4294967295
 80141a0:	e064      	b.n	801426c <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80141a8:	68fa      	ldr	r2, [r7, #12]
 80141aa:	33b0      	adds	r3, #176	; 0xb0
 80141ac:	009b      	lsls	r3, r3, #2
 80141ae:	4413      	add	r3, r2
 80141b0:	685b      	ldr	r3, [r3, #4]
 80141b2:	685b      	ldr	r3, [r3, #4]
 80141b4:	697a      	ldr	r2, [r7, #20]
 80141b6:	f602 0168 	addw	r1, r2, #2152	; 0x868
 80141ba:	697a      	ldr	r2, [r7, #20]
 80141bc:	f602 0264 	addw	r2, r2, #2148	; 0x864
 80141c0:	7af8      	ldrb	r0, [r7, #11]
 80141c2:	4798      	blx	r3
 80141c4:	4603      	mov	r3, r0
 80141c6:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80141c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d104      	bne.n	80141da <SCSI_ReadCapacity10+0x62>
 80141d0:	697b      	ldr	r3, [r7, #20]
 80141d2:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 80141d6:	2b02      	cmp	r3, #2
 80141d8:	d108      	bne.n	80141ec <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80141da:	7af9      	ldrb	r1, [r7, #11]
 80141dc:	233a      	movs	r3, #58	; 0x3a
 80141de:	2202      	movs	r2, #2
 80141e0:	68f8      	ldr	r0, [r7, #12]
 80141e2:	f000 fa5b 	bl	801469c <SCSI_SenseCode>
    return -1;
 80141e6:	f04f 33ff 	mov.w	r3, #4294967295
 80141ea:	e03f      	b.n	801426c <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80141ec:	697b      	ldr	r3, [r7, #20]
 80141ee:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 80141f2:	3b01      	subs	r3, #1
 80141f4:	0e1b      	lsrs	r3, r3, #24
 80141f6:	b2da      	uxtb	r2, r3
 80141f8:	697b      	ldr	r3, [r7, #20]
 80141fa:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80141fc:	697b      	ldr	r3, [r7, #20]
 80141fe:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8014202:	3b01      	subs	r3, #1
 8014204:	0c1b      	lsrs	r3, r3, #16
 8014206:	b2da      	uxtb	r2, r3
 8014208:	697b      	ldr	r3, [r7, #20]
 801420a:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 801420c:	697b      	ldr	r3, [r7, #20]
 801420e:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8014212:	3b01      	subs	r3, #1
 8014214:	0a1b      	lsrs	r3, r3, #8
 8014216:	b2da      	uxtb	r2, r3
 8014218:	697b      	ldr	r3, [r7, #20]
 801421a:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 801421c:	697b      	ldr	r3, [r7, #20]
 801421e:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8014222:	b2db      	uxtb	r3, r3
 8014224:	3b01      	subs	r3, #1
 8014226:	b2da      	uxtb	r2, r3
 8014228:	697b      	ldr	r3, [r7, #20]
 801422a:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801422c:	697b      	ldr	r3, [r7, #20]
 801422e:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8014232:	161b      	asrs	r3, r3, #24
 8014234:	b2da      	uxtb	r2, r3
 8014236:	697b      	ldr	r3, [r7, #20]
 8014238:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801423a:	697b      	ldr	r3, [r7, #20]
 801423c:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8014240:	141b      	asrs	r3, r3, #16
 8014242:	b2da      	uxtb	r2, r3
 8014244:	697b      	ldr	r3, [r7, #20]
 8014246:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8014248:	697b      	ldr	r3, [r7, #20]
 801424a:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 801424e:	0a1b      	lsrs	r3, r3, #8
 8014250:	b29b      	uxth	r3, r3
 8014252:	b2da      	uxtb	r2, r3
 8014254:	697b      	ldr	r3, [r7, #20]
 8014256:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8014258:	697b      	ldr	r3, [r7, #20]
 801425a:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 801425e:	b2da      	uxtb	r2, r3
 8014260:	697b      	ldr	r3, [r7, #20]
 8014262:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8014264:	697b      	ldr	r3, [r7, #20]
 8014266:	2208      	movs	r2, #8
 8014268:	60da      	str	r2, [r3, #12]

  return 0;
 801426a:	2300      	movs	r3, #0

}
 801426c:	4618      	mov	r0, r3
 801426e:	3718      	adds	r7, #24
 8014270:	46bd      	mov	sp, r7
 8014272:	bd80      	pop	{r7, pc}

08014274 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014274:	b580      	push	{r7, lr}
 8014276:	b088      	sub	sp, #32
 8014278:	af00      	add	r7, sp, #0
 801427a:	60f8      	str	r0, [r7, #12]
 801427c:	460b      	mov	r3, r1
 801427e:	607a      	str	r2, [r7, #4]
 8014280:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	32b0      	adds	r2, #176	; 0xb0
 801428c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014290:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8014292:	69bb      	ldr	r3, [r7, #24]
 8014294:	2b00      	cmp	r3, #0
 8014296:	d102      	bne.n	801429e <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8014298:	f04f 33ff 	mov.w	r3, #4294967295
 801429c:	e099      	b.n	80143d2 <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80142a4:	68fa      	ldr	r2, [r7, #12]
 80142a6:	33b0      	adds	r3, #176	; 0xb0
 80142a8:	009b      	lsls	r3, r3, #2
 80142aa:	4413      	add	r3, r2
 80142ac:	685b      	ldr	r3, [r3, #4]
 80142ae:	685b      	ldr	r3, [r3, #4]
 80142b0:	69ba      	ldr	r2, [r7, #24]
 80142b2:	f602 0168 	addw	r1, r2, #2152	; 0x868
 80142b6:	69ba      	ldr	r2, [r7, #24]
 80142b8:	f602 0264 	addw	r2, r2, #2148	; 0x864
 80142bc:	7af8      	ldrb	r0, [r7, #11]
 80142be:	4798      	blx	r3
 80142c0:	4603      	mov	r3, r0
 80142c2:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80142c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d104      	bne.n	80142d6 <SCSI_ReadCapacity16+0x62>
 80142cc:	69bb      	ldr	r3, [r7, #24]
 80142ce:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 80142d2:	2b02      	cmp	r3, #2
 80142d4:	d108      	bne.n	80142e8 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80142d6:	7af9      	ldrb	r1, [r7, #11]
 80142d8:	233a      	movs	r3, #58	; 0x3a
 80142da:	2202      	movs	r2, #2
 80142dc:	68f8      	ldr	r0, [r7, #12]
 80142de:	f000 f9dd 	bl	801469c <SCSI_SenseCode>
    return -1;
 80142e2:	f04f 33ff 	mov.w	r3, #4294967295
 80142e6:	e074      	b.n	80143d2 <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	330a      	adds	r3, #10
 80142ec:	781b      	ldrb	r3, [r3, #0]
 80142ee:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	330b      	adds	r3, #11
 80142f4:	781b      	ldrb	r3, [r3, #0]
 80142f6:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80142f8:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	330c      	adds	r3, #12
 80142fe:	781b      	ldrb	r3, [r3, #0]
 8014300:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8014302:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8014304:	687a      	ldr	r2, [r7, #4]
 8014306:	320d      	adds	r2, #13
 8014308:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801430a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801430c:	69bb      	ldr	r3, [r7, #24]
 801430e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8014310:	2300      	movs	r3, #0
 8014312:	77fb      	strb	r3, [r7, #31]
 8014314:	e007      	b.n	8014326 <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 8014316:	7ffb      	ldrb	r3, [r7, #31]
 8014318:	69ba      	ldr	r2, [r7, #24]
 801431a:	4413      	add	r3, r2
 801431c:	2200      	movs	r2, #0
 801431e:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8014320:	7ffb      	ldrb	r3, [r7, #31]
 8014322:	3301      	adds	r3, #1
 8014324:	77fb      	strb	r3, [r7, #31]
 8014326:	7ffa      	ldrb	r2, [r7, #31]
 8014328:	69bb      	ldr	r3, [r7, #24]
 801432a:	68db      	ldr	r3, [r3, #12]
 801432c:	429a      	cmp	r2, r3
 801432e:	d3f2      	bcc.n	8014316 <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8014330:	69bb      	ldr	r3, [r7, #24]
 8014332:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8014336:	3b01      	subs	r3, #1
 8014338:	0e1b      	lsrs	r3, r3, #24
 801433a:	b2da      	uxtb	r2, r3
 801433c:	69bb      	ldr	r3, [r7, #24]
 801433e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8014340:	69bb      	ldr	r3, [r7, #24]
 8014342:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8014346:	3b01      	subs	r3, #1
 8014348:	0c1b      	lsrs	r3, r3, #16
 801434a:	b2da      	uxtb	r2, r3
 801434c:	69bb      	ldr	r3, [r7, #24]
 801434e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8014350:	69bb      	ldr	r3, [r7, #24]
 8014352:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8014356:	3b01      	subs	r3, #1
 8014358:	0a1b      	lsrs	r3, r3, #8
 801435a:	b2da      	uxtb	r2, r3
 801435c:	69bb      	ldr	r3, [r7, #24]
 801435e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8014360:	69bb      	ldr	r3, [r7, #24]
 8014362:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8014366:	b2db      	uxtb	r3, r3
 8014368:	3b01      	subs	r3, #1
 801436a:	b2da      	uxtb	r2, r3
 801436c:	69bb      	ldr	r3, [r7, #24]
 801436e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8014370:	69bb      	ldr	r3, [r7, #24]
 8014372:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8014376:	161b      	asrs	r3, r3, #24
 8014378:	b2da      	uxtb	r2, r3
 801437a:	69bb      	ldr	r3, [r7, #24]
 801437c:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801437e:	69bb      	ldr	r3, [r7, #24]
 8014380:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8014384:	141b      	asrs	r3, r3, #16
 8014386:	b2da      	uxtb	r2, r3
 8014388:	69bb      	ldr	r3, [r7, #24]
 801438a:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 801438c:	69bb      	ldr	r3, [r7, #24]
 801438e:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8014392:	0a1b      	lsrs	r3, r3, #8
 8014394:	b29b      	uxth	r3, r3
 8014396:	b2da      	uxtb	r2, r3
 8014398:	69bb      	ldr	r3, [r7, #24]
 801439a:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 801439c:	69bb      	ldr	r3, [r7, #24]
 801439e:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 80143a2:	b2da      	uxtb	r2, r3
 80143a4:	69bb      	ldr	r3, [r7, #24]
 80143a6:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	330a      	adds	r3, #10
 80143ac:	781b      	ldrb	r3, [r3, #0]
 80143ae:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	330b      	adds	r3, #11
 80143b4:	781b      	ldrb	r3, [r3, #0]
 80143b6:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80143b8:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	330c      	adds	r3, #12
 80143be:	781b      	ldrb	r3, [r3, #0]
 80143c0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80143c2:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80143c4:	687a      	ldr	r2, [r7, #4]
 80143c6:	320d      	adds	r2, #13
 80143c8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80143ca:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80143cc:	69bb      	ldr	r3, [r7, #24]
 80143ce:	60da      	str	r2, [r3, #12]

  return 0;
 80143d0:	2300      	movs	r3, #0
}
 80143d2:	4618      	mov	r0, r3
 80143d4:	3720      	adds	r7, #32
 80143d6:	46bd      	mov	sp, r7
 80143d8:	bd80      	pop	{r7, pc}

080143da <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80143da:	b580      	push	{r7, lr}
 80143dc:	b088      	sub	sp, #32
 80143de:	af00      	add	r7, sp, #0
 80143e0:	60f8      	str	r0, [r7, #12]
 80143e2:	460b      	mov	r3, r1
 80143e4:	607a      	str	r2, [r7, #4]
 80143e6:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	32b0      	adds	r2, #176	; 0xb0
 80143f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143f6:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80143f8:	69bb      	ldr	r3, [r7, #24]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d102      	bne.n	8014404 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 80143fe:	f04f 33ff 	mov.w	r3, #4294967295
 8014402:	e061      	b.n	80144c8 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801440a:	68fa      	ldr	r2, [r7, #12]
 801440c:	33b0      	adds	r3, #176	; 0xb0
 801440e:	009b      	lsls	r3, r3, #2
 8014410:	4413      	add	r3, r2
 8014412:	685b      	ldr	r3, [r3, #4]
 8014414:	685b      	ldr	r3, [r3, #4]
 8014416:	f107 0214 	add.w	r2, r7, #20
 801441a:	f107 0110 	add.w	r1, r7, #16
 801441e:	7af8      	ldrb	r0, [r7, #11]
 8014420:	4798      	blx	r3
 8014422:	4603      	mov	r3, r0
 8014424:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8014426:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801442a:	2b00      	cmp	r3, #0
 801442c:	d104      	bne.n	8014438 <SCSI_ReadFormatCapacity+0x5e>
 801442e:	69bb      	ldr	r3, [r7, #24]
 8014430:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 8014434:	2b02      	cmp	r3, #2
 8014436:	d108      	bne.n	801444a <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014438:	7af9      	ldrb	r1, [r7, #11]
 801443a:	233a      	movs	r3, #58	; 0x3a
 801443c:	2202      	movs	r2, #2
 801443e:	68f8      	ldr	r0, [r7, #12]
 8014440:	f000 f92c 	bl	801469c <SCSI_SenseCode>
    return -1;
 8014444:	f04f 33ff 	mov.w	r3, #4294967295
 8014448:	e03e      	b.n	80144c8 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 801444a:	2300      	movs	r3, #0
 801444c:	83fb      	strh	r3, [r7, #30]
 801444e:	e007      	b.n	8014460 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8014450:	8bfb      	ldrh	r3, [r7, #30]
 8014452:	69ba      	ldr	r2, [r7, #24]
 8014454:	4413      	add	r3, r2
 8014456:	2200      	movs	r2, #0
 8014458:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 801445a:	8bfb      	ldrh	r3, [r7, #30]
 801445c:	3301      	adds	r3, #1
 801445e:	83fb      	strh	r3, [r7, #30]
 8014460:	8bfb      	ldrh	r3, [r7, #30]
 8014462:	2b0b      	cmp	r3, #11
 8014464:	d9f4      	bls.n	8014450 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8014466:	69bb      	ldr	r3, [r7, #24]
 8014468:	2208      	movs	r2, #8
 801446a:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 801446c:	693b      	ldr	r3, [r7, #16]
 801446e:	3b01      	subs	r3, #1
 8014470:	0e1b      	lsrs	r3, r3, #24
 8014472:	b2da      	uxtb	r2, r3
 8014474:	69bb      	ldr	r3, [r7, #24]
 8014476:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8014478:	693b      	ldr	r3, [r7, #16]
 801447a:	3b01      	subs	r3, #1
 801447c:	0c1b      	lsrs	r3, r3, #16
 801447e:	b2da      	uxtb	r2, r3
 8014480:	69bb      	ldr	r3, [r7, #24]
 8014482:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8014484:	693b      	ldr	r3, [r7, #16]
 8014486:	3b01      	subs	r3, #1
 8014488:	0a1b      	lsrs	r3, r3, #8
 801448a:	b2da      	uxtb	r2, r3
 801448c:	69bb      	ldr	r3, [r7, #24]
 801448e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8014490:	693b      	ldr	r3, [r7, #16]
 8014492:	b2db      	uxtb	r3, r3
 8014494:	3b01      	subs	r3, #1
 8014496:	b2da      	uxtb	r2, r3
 8014498:	69bb      	ldr	r3, [r7, #24]
 801449a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 801449c:	69bb      	ldr	r3, [r7, #24]
 801449e:	2202      	movs	r2, #2
 80144a0:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80144a2:	8abb      	ldrh	r3, [r7, #20]
 80144a4:	141b      	asrs	r3, r3, #16
 80144a6:	b2da      	uxtb	r2, r3
 80144a8:	69bb      	ldr	r3, [r7, #24]
 80144aa:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80144ac:	8abb      	ldrh	r3, [r7, #20]
 80144ae:	0a1b      	lsrs	r3, r3, #8
 80144b0:	b29b      	uxth	r3, r3
 80144b2:	b2da      	uxtb	r2, r3
 80144b4:	69bb      	ldr	r3, [r7, #24]
 80144b6:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 80144b8:	8abb      	ldrh	r3, [r7, #20]
 80144ba:	b2da      	uxtb	r2, r3
 80144bc:	69bb      	ldr	r3, [r7, #24]
 80144be:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 80144c0:	69bb      	ldr	r3, [r7, #24]
 80144c2:	220c      	movs	r2, #12
 80144c4:	60da      	str	r2, [r3, #12]

  return 0;
 80144c6:	2300      	movs	r3, #0
}
 80144c8:	4618      	mov	r0, r3
 80144ca:	3720      	adds	r7, #32
 80144cc:	46bd      	mov	sp, r7
 80144ce:	bd80      	pop	{r7, pc}

080144d0 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b086      	sub	sp, #24
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	60f8      	str	r0, [r7, #12]
 80144d8:	460b      	mov	r3, r1
 80144da:	607a      	str	r2, [r7, #4]
 80144dc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	32b0      	adds	r2, #176	; 0xb0
 80144e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144ec:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 80144ee:	2317      	movs	r3, #23
 80144f0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80144f2:	693b      	ldr	r3, [r7, #16]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d102      	bne.n	80144fe <SCSI_ModeSense6+0x2e>
  {
    return -1;
 80144f8:	f04f 33ff 	mov.w	r3, #4294967295
 80144fc:	e011      	b.n	8014522 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	3304      	adds	r3, #4
 8014502:	781b      	ldrb	r3, [r3, #0]
 8014504:	b29b      	uxth	r3, r3
 8014506:	8afa      	ldrh	r2, [r7, #22]
 8014508:	429a      	cmp	r2, r3
 801450a:	d303      	bcc.n	8014514 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	3304      	adds	r3, #4
 8014510:	781b      	ldrb	r3, [r3, #0]
 8014512:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8014514:	8afb      	ldrh	r3, [r7, #22]
 8014516:	461a      	mov	r2, r3
 8014518:	4904      	ldr	r1, [pc, #16]	; (801452c <SCSI_ModeSense6+0x5c>)
 801451a:	6938      	ldr	r0, [r7, #16]
 801451c:	f000 fe2e 	bl	801517c <SCSI_UpdateBotData>

  return 0;
 8014520:	2300      	movs	r3, #0
}
 8014522:	4618      	mov	r0, r3
 8014524:	3718      	adds	r7, #24
 8014526:	46bd      	mov	sp, r7
 8014528:	bd80      	pop	{r7, pc}
 801452a:	bf00      	nop
 801452c:	2000009c 	.word	0x2000009c

08014530 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b086      	sub	sp, #24
 8014534:	af00      	add	r7, sp, #0
 8014536:	60f8      	str	r0, [r7, #12]
 8014538:	460b      	mov	r3, r1
 801453a:	607a      	str	r2, [r7, #4]
 801453c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	32b0      	adds	r2, #176	; 0xb0
 8014548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801454c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 801454e:	231b      	movs	r3, #27
 8014550:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8014552:	693b      	ldr	r3, [r7, #16]
 8014554:	2b00      	cmp	r3, #0
 8014556:	d102      	bne.n	801455e <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8014558:	f04f 33ff 	mov.w	r3, #4294967295
 801455c:	e011      	b.n	8014582 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	3308      	adds	r3, #8
 8014562:	781b      	ldrb	r3, [r3, #0]
 8014564:	b29b      	uxth	r3, r3
 8014566:	8afa      	ldrh	r2, [r7, #22]
 8014568:	429a      	cmp	r2, r3
 801456a:	d303      	bcc.n	8014574 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	3308      	adds	r3, #8
 8014570:	781b      	ldrb	r3, [r3, #0]
 8014572:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8014574:	8afb      	ldrh	r3, [r7, #22]
 8014576:	461a      	mov	r2, r3
 8014578:	4904      	ldr	r1, [pc, #16]	; (801458c <SCSI_ModeSense10+0x5c>)
 801457a:	6938      	ldr	r0, [r7, #16]
 801457c:	f000 fdfe 	bl	801517c <SCSI_UpdateBotData>

  return 0;
 8014580:	2300      	movs	r3, #0
}
 8014582:	4618      	mov	r0, r3
 8014584:	3718      	adds	r7, #24
 8014586:	46bd      	mov	sp, r7
 8014588:	bd80      	pop	{r7, pc}
 801458a:	bf00      	nop
 801458c:	200000b4 	.word	0x200000b4

08014590 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014590:	b580      	push	{r7, lr}
 8014592:	b086      	sub	sp, #24
 8014594:	af00      	add	r7, sp, #0
 8014596:	60f8      	str	r0, [r7, #12]
 8014598:	460b      	mov	r3, r1
 801459a:	607a      	str	r2, [r7, #4]
 801459c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	32b0      	adds	r2, #176	; 0xb0
 80145a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145ac:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80145ae:	693b      	ldr	r3, [r7, #16]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d102      	bne.n	80145ba <SCSI_RequestSense+0x2a>
  {
    return -1;
 80145b4:	f04f 33ff 	mov.w	r3, #4294967295
 80145b8:	e06c      	b.n	8014694 <SCSI_RequestSense+0x104>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80145ba:	693b      	ldr	r3, [r7, #16]
 80145bc:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d10a      	bne.n	80145da <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80145c4:	693b      	ldr	r3, [r7, #16]
 80145c6:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 80145ca:	2320      	movs	r3, #32
 80145cc:	2205      	movs	r2, #5
 80145ce:	68f8      	ldr	r0, [r7, #12]
 80145d0:	f000 f864 	bl	801469c <SCSI_SenseCode>
    return -1;
 80145d4:	f04f 33ff 	mov.w	r3, #4294967295
 80145d8:	e05c      	b.n	8014694 <SCSI_RequestSense+0x104>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80145da:	2300      	movs	r3, #0
 80145dc:	75fb      	strb	r3, [r7, #23]
 80145de:	e007      	b.n	80145f0 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 80145e0:	7dfb      	ldrb	r3, [r7, #23]
 80145e2:	693a      	ldr	r2, [r7, #16]
 80145e4:	4413      	add	r3, r2
 80145e6:	2200      	movs	r2, #0
 80145e8:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80145ea:	7dfb      	ldrb	r3, [r7, #23]
 80145ec:	3301      	adds	r3, #1
 80145ee:	75fb      	strb	r3, [r7, #23]
 80145f0:	7dfb      	ldrb	r3, [r7, #23]
 80145f2:	2b11      	cmp	r3, #17
 80145f4:	d9f4      	bls.n	80145e0 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 80145f6:	693b      	ldr	r3, [r7, #16]
 80145f8:	2270      	movs	r2, #112	; 0x70
 80145fa:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80145fc:	693b      	ldr	r3, [r7, #16]
 80145fe:	220c      	movs	r2, #12
 8014600:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8014602:	693b      	ldr	r3, [r7, #16]
 8014604:	f893 2860 	ldrb.w	r2, [r3, #2144]	; 0x860
 8014608:	693b      	ldr	r3, [r7, #16]
 801460a:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 801460e:	429a      	cmp	r2, r3
 8014610:	d031      	beq.n	8014676 <SCSI_RequestSense+0xe6>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8014612:	693b      	ldr	r3, [r7, #16]
 8014614:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 8014618:	461a      	mov	r2, r3
 801461a:	693b      	ldr	r3, [r7, #16]
 801461c:	f502 7284 	add.w	r2, r2, #264	; 0x108
 8014620:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8014624:	693b      	ldr	r3, [r7, #16]
 8014626:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8014628:	693b      	ldr	r3, [r7, #16]
 801462a:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 801462e:	693a      	ldr	r2, [r7, #16]
 8014630:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8014634:	00db      	lsls	r3, r3, #3
 8014636:	4413      	add	r3, r2
 8014638:	791a      	ldrb	r2, [r3, #4]
 801463a:	693b      	ldr	r3, [r7, #16]
 801463c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 801463e:	693b      	ldr	r3, [r7, #16]
 8014640:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 8014644:	693a      	ldr	r2, [r7, #16]
 8014646:	f503 7384 	add.w	r3, r3, #264	; 0x108
 801464a:	00db      	lsls	r3, r3, #3
 801464c:	4413      	add	r3, r2
 801464e:	795a      	ldrb	r2, [r3, #5]
 8014650:	693b      	ldr	r3, [r7, #16]
 8014652:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8014654:	693b      	ldr	r3, [r7, #16]
 8014656:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 801465a:	3301      	adds	r3, #1
 801465c:	b2da      	uxtb	r2, r3
 801465e:	693b      	ldr	r3, [r7, #16]
 8014660:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8014664:	693b      	ldr	r3, [r7, #16]
 8014666:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 801466a:	2b04      	cmp	r3, #4
 801466c:	d103      	bne.n	8014676 <SCSI_RequestSense+0xe6>
    {
      hmsc->scsi_sense_head = 0U;
 801466e:	693b      	ldr	r3, [r7, #16]
 8014670:	2200      	movs	r2, #0
 8014672:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8014676:	693b      	ldr	r3, [r7, #16]
 8014678:	2212      	movs	r2, #18
 801467a:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	3304      	adds	r3, #4
 8014680:	781b      	ldrb	r3, [r3, #0]
 8014682:	2b12      	cmp	r3, #18
 8014684:	d805      	bhi.n	8014692 <SCSI_RequestSense+0x102>
  {
    hmsc->bot_data_length = params[4];
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	3304      	adds	r3, #4
 801468a:	781b      	ldrb	r3, [r3, #0]
 801468c:	461a      	mov	r2, r3
 801468e:	693b      	ldr	r3, [r7, #16]
 8014690:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8014692:	2300      	movs	r3, #0
}
 8014694:	4618      	mov	r0, r3
 8014696:	3718      	adds	r7, #24
 8014698:	46bd      	mov	sp, r7
 801469a:	bd80      	pop	{r7, pc}

0801469c <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 801469c:	b480      	push	{r7}
 801469e:	b085      	sub	sp, #20
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	6078      	str	r0, [r7, #4]
 80146a4:	4608      	mov	r0, r1
 80146a6:	4611      	mov	r1, r2
 80146a8:	461a      	mov	r2, r3
 80146aa:	4603      	mov	r3, r0
 80146ac:	70fb      	strb	r3, [r7, #3]
 80146ae:	460b      	mov	r3, r1
 80146b0:	70bb      	strb	r3, [r7, #2]
 80146b2:	4613      	mov	r3, r2
 80146b4:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	32b0      	adds	r2, #176	; 0xb0
 80146c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146c4:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d02f      	beq.n	801472c <SCSI_SenseCode+0x90>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 80146d2:	461a      	mov	r2, r3
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	f502 7284 	add.w	r2, r2, #264	; 0x108
 80146da:	78b9      	ldrb	r1, [r7, #2]
 80146dc:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 80146e6:	68fa      	ldr	r2, [r7, #12]
 80146e8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80146ec:	00db      	lsls	r3, r3, #3
 80146ee:	4413      	add	r3, r2
 80146f0:	787a      	ldrb	r2, [r7, #1]
 80146f2:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 80146fa:	68fa      	ldr	r2, [r7, #12]
 80146fc:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8014700:	00db      	lsls	r3, r3, #3
 8014702:	4413      	add	r3, r2
 8014704:	2200      	movs	r2, #0
 8014706:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 801470e:	3301      	adds	r3, #1
 8014710:	b2da      	uxtb	r2, r3
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 801471e:	2b04      	cmp	r3, #4
 8014720:	d105      	bne.n	801472e <SCSI_SenseCode+0x92>
  {
    hmsc->scsi_sense_tail = 0U;
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	2200      	movs	r2, #0
 8014726:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861
 801472a:	e000      	b.n	801472e <SCSI_SenseCode+0x92>
    return;
 801472c:	bf00      	nop
  }
}
 801472e:	3714      	adds	r7, #20
 8014730:	46bd      	mov	sp, r7
 8014732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014736:	4770      	bx	lr

08014738 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014738:	b580      	push	{r7, lr}
 801473a:	b086      	sub	sp, #24
 801473c:	af00      	add	r7, sp, #0
 801473e:	60f8      	str	r0, [r7, #12]
 8014740:	460b      	mov	r3, r1
 8014742:	607a      	str	r2, [r7, #4]
 8014744:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	32b0      	adds	r2, #176	; 0xb0
 8014750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014754:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8014756:	697b      	ldr	r3, [r7, #20]
 8014758:	2b00      	cmp	r3, #0
 801475a:	d102      	bne.n	8014762 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 801475c:	f04f 33ff 	mov.w	r3, #4294967295
 8014760:	e03b      	b.n	80147da <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8014762:	697b      	ldr	r3, [r7, #20]
 8014764:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 8014768:	2b01      	cmp	r3, #1
 801476a:	d10f      	bne.n	801478c <SCSI_StartStopUnit+0x54>
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	3304      	adds	r3, #4
 8014770:	781b      	ldrb	r3, [r3, #0]
 8014772:	f003 0303 	and.w	r3, r3, #3
 8014776:	2b02      	cmp	r3, #2
 8014778:	d108      	bne.n	801478c <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 801477a:	7af9      	ldrb	r1, [r7, #11]
 801477c:	2324      	movs	r3, #36	; 0x24
 801477e:	2205      	movs	r2, #5
 8014780:	68f8      	ldr	r0, [r7, #12]
 8014782:	f7ff ff8b 	bl	801469c <SCSI_SenseCode>

    return -1;
 8014786:	f04f 33ff 	mov.w	r3, #4294967295
 801478a:	e026      	b.n	80147da <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	3304      	adds	r3, #4
 8014790:	781b      	ldrb	r3, [r3, #0]
 8014792:	f003 0303 	and.w	r3, r3, #3
 8014796:	2b01      	cmp	r3, #1
 8014798:	d104      	bne.n	80147a4 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801479a:	697b      	ldr	r3, [r7, #20]
 801479c:	2200      	movs	r2, #0
 801479e:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862
 80147a2:	e016      	b.n	80147d2 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	3304      	adds	r3, #4
 80147a8:	781b      	ldrb	r3, [r3, #0]
 80147aa:	f003 0303 	and.w	r3, r3, #3
 80147ae:	2b02      	cmp	r3, #2
 80147b0:	d104      	bne.n	80147bc <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80147b2:	697b      	ldr	r3, [r7, #20]
 80147b4:	2202      	movs	r2, #2
 80147b6:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862
 80147ba:	e00a      	b.n	80147d2 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	3304      	adds	r3, #4
 80147c0:	781b      	ldrb	r3, [r3, #0]
 80147c2:	f003 0303 	and.w	r3, r3, #3
 80147c6:	2b03      	cmp	r3, #3
 80147c8:	d103      	bne.n	80147d2 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80147ca:	697b      	ldr	r3, [r7, #20]
 80147cc:	2200      	movs	r2, #0
 80147ce:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80147d2:	697b      	ldr	r3, [r7, #20]
 80147d4:	2200      	movs	r2, #0
 80147d6:	60da      	str	r2, [r3, #12]

  return 0;
 80147d8:	2300      	movs	r3, #0
}
 80147da:	4618      	mov	r0, r3
 80147dc:	3718      	adds	r7, #24
 80147de:	46bd      	mov	sp, r7
 80147e0:	bd80      	pop	{r7, pc}

080147e2 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80147e2:	b480      	push	{r7}
 80147e4:	b087      	sub	sp, #28
 80147e6:	af00      	add	r7, sp, #0
 80147e8:	60f8      	str	r0, [r7, #12]
 80147ea:	460b      	mov	r3, r1
 80147ec:	607a      	str	r2, [r7, #4]
 80147ee:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	32b0      	adds	r2, #176	; 0xb0
 80147fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147fe:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8014800:	697b      	ldr	r3, [r7, #20]
 8014802:	2b00      	cmp	r3, #0
 8014804:	d102      	bne.n	801480c <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8014806:	f04f 33ff 	mov.w	r3, #4294967295
 801480a:	e011      	b.n	8014830 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	3304      	adds	r3, #4
 8014810:	781b      	ldrb	r3, [r3, #0]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d104      	bne.n	8014820 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8014816:	697b      	ldr	r3, [r7, #20]
 8014818:	2200      	movs	r2, #0
 801481a:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862
 801481e:	e003      	b.n	8014828 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8014820:	697b      	ldr	r3, [r7, #20]
 8014822:	2201      	movs	r2, #1
 8014824:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862
  }

  hmsc->bot_data_length = 0U;
 8014828:	697b      	ldr	r3, [r7, #20]
 801482a:	2200      	movs	r2, #0
 801482c:	60da      	str	r2, [r3, #12]

  return 0;
 801482e:	2300      	movs	r3, #0
}
 8014830:	4618      	mov	r0, r3
 8014832:	371c      	adds	r7, #28
 8014834:	46bd      	mov	sp, r7
 8014836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801483a:	4770      	bx	lr

0801483c <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801483c:	b580      	push	{r7, lr}
 801483e:	b086      	sub	sp, #24
 8014840:	af00      	add	r7, sp, #0
 8014842:	60f8      	str	r0, [r7, #12]
 8014844:	460b      	mov	r3, r1
 8014846:	607a      	str	r2, [r7, #4]
 8014848:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	32b0      	adds	r2, #176	; 0xb0
 8014854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014858:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801485a:	697b      	ldr	r3, [r7, #20]
 801485c:	2b00      	cmp	r3, #0
 801485e:	d102      	bne.n	8014866 <SCSI_Read10+0x2a>
  {
    return -1;
 8014860:	f04f 33ff 	mov.w	r3, #4294967295
 8014864:	e090      	b.n	8014988 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014866:	697b      	ldr	r3, [r7, #20]
 8014868:	7a1b      	ldrb	r3, [r3, #8]
 801486a:	2b00      	cmp	r3, #0
 801486c:	f040 8082 	bne.w	8014974 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8014870:	697b      	ldr	r3, [r7, #20]
 8014872:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 8014876:	b25b      	sxtb	r3, r3
 8014878:	2b00      	cmp	r3, #0
 801487a:	db0a      	blt.n	8014892 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801487c:	697b      	ldr	r3, [r7, #20]
 801487e:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014882:	2320      	movs	r3, #32
 8014884:	2205      	movs	r2, #5
 8014886:	68f8      	ldr	r0, [r7, #12]
 8014888:	f7ff ff08 	bl	801469c <SCSI_SenseCode>
      return -1;
 801488c:	f04f 33ff 	mov.w	r3, #4294967295
 8014890:	e07a      	b.n	8014988 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8014892:	697b      	ldr	r3, [r7, #20]
 8014894:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 8014898:	2b02      	cmp	r3, #2
 801489a:	d108      	bne.n	80148ae <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801489c:	7af9      	ldrb	r1, [r7, #11]
 801489e:	233a      	movs	r3, #58	; 0x3a
 80148a0:	2202      	movs	r2, #2
 80148a2:	68f8      	ldr	r0, [r7, #12]
 80148a4:	f7ff fefa 	bl	801469c <SCSI_SenseCode>

      return -1;
 80148a8:	f04f 33ff 	mov.w	r3, #4294967295
 80148ac:	e06c      	b.n	8014988 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80148b4:	68fa      	ldr	r2, [r7, #12]
 80148b6:	33b0      	adds	r3, #176	; 0xb0
 80148b8:	009b      	lsls	r3, r3, #2
 80148ba:	4413      	add	r3, r2
 80148bc:	685b      	ldr	r3, [r3, #4]
 80148be:	689b      	ldr	r3, [r3, #8]
 80148c0:	7afa      	ldrb	r2, [r7, #11]
 80148c2:	4610      	mov	r0, r2
 80148c4:	4798      	blx	r3
 80148c6:	4603      	mov	r3, r0
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d008      	beq.n	80148de <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80148cc:	7af9      	ldrb	r1, [r7, #11]
 80148ce:	233a      	movs	r3, #58	; 0x3a
 80148d0:	2202      	movs	r2, #2
 80148d2:	68f8      	ldr	r0, [r7, #12]
 80148d4:	f7ff fee2 	bl	801469c <SCSI_SenseCode>
      return -1;
 80148d8:	f04f 33ff 	mov.w	r3, #4294967295
 80148dc:	e054      	b.n	8014988 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	3302      	adds	r3, #2
 80148e2:	781b      	ldrb	r3, [r3, #0]
 80148e4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	3303      	adds	r3, #3
 80148ea:	781b      	ldrb	r3, [r3, #0]
 80148ec:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80148ee:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	3304      	adds	r3, #4
 80148f4:	781b      	ldrb	r3, [r3, #0]
 80148f6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80148f8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80148fa:	687a      	ldr	r2, [r7, #4]
 80148fc:	3205      	adds	r2, #5
 80148fe:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8014900:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014902:	697b      	ldr	r3, [r7, #20]
 8014904:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	3307      	adds	r3, #7
 801490c:	781b      	ldrb	r3, [r3, #0]
 801490e:	021b      	lsls	r3, r3, #8
 8014910:	687a      	ldr	r2, [r7, #4]
 8014912:	3208      	adds	r2, #8
 8014914:	7812      	ldrb	r2, [r2, #0]
 8014916:	431a      	orrs	r2, r3
 8014918:	697b      	ldr	r3, [r7, #20]
 801491a:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801491e:	697b      	ldr	r3, [r7, #20]
 8014920:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 8014924:	697b      	ldr	r3, [r7, #20]
 8014926:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801492a:	7af9      	ldrb	r1, [r7, #11]
 801492c:	68f8      	ldr	r0, [r7, #12]
 801492e:	f000 fadc 	bl	8014eea <SCSI_CheckAddressRange>
 8014932:	4603      	mov	r3, r0
 8014934:	2b00      	cmp	r3, #0
 8014936:	da02      	bge.n	801493e <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014938:	f04f 33ff 	mov.w	r3, #4294967295
 801493c:	e024      	b.n	8014988 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 801493e:	697b      	ldr	r3, [r7, #20]
 8014940:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8014944:	697b      	ldr	r3, [r7, #20]
 8014946:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801494a:	6979      	ldr	r1, [r7, #20]
 801494c:	f8b1 1864 	ldrh.w	r1, [r1, #2148]	; 0x864
 8014950:	fb01 f303 	mul.w	r3, r1, r3
 8014954:	429a      	cmp	r2, r3
 8014956:	d00a      	beq.n	801496e <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014958:	697b      	ldr	r3, [r7, #20]
 801495a:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 801495e:	2320      	movs	r3, #32
 8014960:	2205      	movs	r2, #5
 8014962:	68f8      	ldr	r0, [r7, #12]
 8014964:	f7ff fe9a 	bl	801469c <SCSI_SenseCode>
      return -1;
 8014968:	f04f 33ff 	mov.w	r3, #4294967295
 801496c:	e00c      	b.n	8014988 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801496e:	697b      	ldr	r3, [r7, #20]
 8014970:	2202      	movs	r2, #2
 8014972:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8014974:	697b      	ldr	r3, [r7, #20]
 8014976:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801497a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 801497c:	7afb      	ldrb	r3, [r7, #11]
 801497e:	4619      	mov	r1, r3
 8014980:	68f8      	ldr	r0, [r7, #12]
 8014982:	f000 fadf 	bl	8014f44 <SCSI_ProcessRead>
 8014986:	4603      	mov	r3, r0
}
 8014988:	4618      	mov	r0, r3
 801498a:	3718      	adds	r7, #24
 801498c:	46bd      	mov	sp, r7
 801498e:	bd80      	pop	{r7, pc}

08014990 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014990:	b580      	push	{r7, lr}
 8014992:	b086      	sub	sp, #24
 8014994:	af00      	add	r7, sp, #0
 8014996:	60f8      	str	r0, [r7, #12]
 8014998:	460b      	mov	r3, r1
 801499a:	607a      	str	r2, [r7, #4]
 801499c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	32b0      	adds	r2, #176	; 0xb0
 80149a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149ac:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80149ae:	697b      	ldr	r3, [r7, #20]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d102      	bne.n	80149ba <SCSI_Read12+0x2a>
  {
    return -1;
 80149b4:	f04f 33ff 	mov.w	r3, #4294967295
 80149b8:	e09a      	b.n	8014af0 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80149ba:	697b      	ldr	r3, [r7, #20]
 80149bc:	7a1b      	ldrb	r3, [r3, #8]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	f040 808c 	bne.w	8014adc <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80149c4:	697b      	ldr	r3, [r7, #20]
 80149c6:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 80149ca:	b25b      	sxtb	r3, r3
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	db0a      	blt.n	80149e6 <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80149d0:	697b      	ldr	r3, [r7, #20]
 80149d2:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 80149d6:	2320      	movs	r3, #32
 80149d8:	2205      	movs	r2, #5
 80149da:	68f8      	ldr	r0, [r7, #12]
 80149dc:	f7ff fe5e 	bl	801469c <SCSI_SenseCode>
      return -1;
 80149e0:	f04f 33ff 	mov.w	r3, #4294967295
 80149e4:	e084      	b.n	8014af0 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80149e6:	697b      	ldr	r3, [r7, #20]
 80149e8:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 80149ec:	2b02      	cmp	r3, #2
 80149ee:	d108      	bne.n	8014a02 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80149f0:	7af9      	ldrb	r1, [r7, #11]
 80149f2:	233a      	movs	r3, #58	; 0x3a
 80149f4:	2202      	movs	r2, #2
 80149f6:	68f8      	ldr	r0, [r7, #12]
 80149f8:	f7ff fe50 	bl	801469c <SCSI_SenseCode>
      return -1;
 80149fc:	f04f 33ff 	mov.w	r3, #4294967295
 8014a00:	e076      	b.n	8014af0 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014a08:	68fa      	ldr	r2, [r7, #12]
 8014a0a:	33b0      	adds	r3, #176	; 0xb0
 8014a0c:	009b      	lsls	r3, r3, #2
 8014a0e:	4413      	add	r3, r2
 8014a10:	685b      	ldr	r3, [r3, #4]
 8014a12:	689b      	ldr	r3, [r3, #8]
 8014a14:	7afa      	ldrb	r2, [r7, #11]
 8014a16:	4610      	mov	r0, r2
 8014a18:	4798      	blx	r3
 8014a1a:	4603      	mov	r3, r0
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d008      	beq.n	8014a32 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014a20:	7af9      	ldrb	r1, [r7, #11]
 8014a22:	233a      	movs	r3, #58	; 0x3a
 8014a24:	2202      	movs	r2, #2
 8014a26:	68f8      	ldr	r0, [r7, #12]
 8014a28:	f7ff fe38 	bl	801469c <SCSI_SenseCode>
      return -1;
 8014a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8014a30:	e05e      	b.n	8014af0 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	3302      	adds	r3, #2
 8014a36:	781b      	ldrb	r3, [r3, #0]
 8014a38:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	3303      	adds	r3, #3
 8014a3e:	781b      	ldrb	r3, [r3, #0]
 8014a40:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014a42:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	3304      	adds	r3, #4
 8014a48:	781b      	ldrb	r3, [r3, #0]
 8014a4a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014a4c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014a4e:	687a      	ldr	r2, [r7, #4]
 8014a50:	3205      	adds	r2, #5
 8014a52:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8014a54:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014a56:	697b      	ldr	r3, [r7, #20]
 8014a58:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	3306      	adds	r3, #6
 8014a60:	781b      	ldrb	r3, [r3, #0]
 8014a62:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	3307      	adds	r3, #7
 8014a68:	781b      	ldrb	r3, [r3, #0]
 8014a6a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014a6c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	3308      	adds	r3, #8
 8014a72:	781b      	ldrb	r3, [r3, #0]
 8014a74:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8014a76:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8014a78:	687a      	ldr	r2, [r7, #4]
 8014a7a:	3209      	adds	r2, #9
 8014a7c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8014a7e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014a80:	697b      	ldr	r3, [r7, #20]
 8014a82:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014a86:	697b      	ldr	r3, [r7, #20]
 8014a88:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 8014a8c:	697b      	ldr	r3, [r7, #20]
 8014a8e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8014a92:	7af9      	ldrb	r1, [r7, #11]
 8014a94:	68f8      	ldr	r0, [r7, #12]
 8014a96:	f000 fa28 	bl	8014eea <SCSI_CheckAddressRange>
 8014a9a:	4603      	mov	r3, r0
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	da02      	bge.n	8014aa6 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8014aa4:	e024      	b.n	8014af0 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8014aa6:	697b      	ldr	r3, [r7, #20]
 8014aa8:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8014aac:	697b      	ldr	r3, [r7, #20]
 8014aae:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8014ab2:	6979      	ldr	r1, [r7, #20]
 8014ab4:	f8b1 1864 	ldrh.w	r1, [r1, #2148]	; 0x864
 8014ab8:	fb01 f303 	mul.w	r3, r1, r3
 8014abc:	429a      	cmp	r2, r3
 8014abe:	d00a      	beq.n	8014ad6 <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014ac0:	697b      	ldr	r3, [r7, #20]
 8014ac2:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014ac6:	2320      	movs	r3, #32
 8014ac8:	2205      	movs	r2, #5
 8014aca:	68f8      	ldr	r0, [r7, #12]
 8014acc:	f7ff fde6 	bl	801469c <SCSI_SenseCode>
      return -1;
 8014ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8014ad4:	e00c      	b.n	8014af0 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8014ad6:	697b      	ldr	r3, [r7, #20]
 8014ad8:	2202      	movs	r2, #2
 8014ada:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8014adc:	697b      	ldr	r3, [r7, #20]
 8014ade:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014ae2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8014ae4:	7afb      	ldrb	r3, [r7, #11]
 8014ae6:	4619      	mov	r1, r3
 8014ae8:	68f8      	ldr	r0, [r7, #12]
 8014aea:	f000 fa2b 	bl	8014f44 <SCSI_ProcessRead>
 8014aee:	4603      	mov	r3, r0
}
 8014af0:	4618      	mov	r0, r3
 8014af2:	3718      	adds	r7, #24
 8014af4:	46bd      	mov	sp, r7
 8014af6:	bd80      	pop	{r7, pc}

08014af8 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014af8:	b580      	push	{r7, lr}
 8014afa:	b086      	sub	sp, #24
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	60f8      	str	r0, [r7, #12]
 8014b00:	460b      	mov	r3, r1
 8014b02:	607a      	str	r2, [r7, #4]
 8014b04:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	32b0      	adds	r2, #176	; 0xb0
 8014b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b14:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8014b16:	697b      	ldr	r3, [r7, #20]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d102      	bne.n	8014b22 <SCSI_Write10+0x2a>
  {
    return -1;
 8014b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8014b20:	e0ba      	b.n	8014c98 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014b22:	697b      	ldr	r3, [r7, #20]
 8014b24:	7a1b      	ldrb	r3, [r3, #8]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	f040 80b0 	bne.w	8014c8c <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8014b2c:	697b      	ldr	r3, [r7, #20]
 8014b2e:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d10a      	bne.n	8014b4c <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014b36:	697b      	ldr	r3, [r7, #20]
 8014b38:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014b3c:	2320      	movs	r3, #32
 8014b3e:	2205      	movs	r2, #5
 8014b40:	68f8      	ldr	r0, [r7, #12]
 8014b42:	f7ff fdab 	bl	801469c <SCSI_SenseCode>
      return -1;
 8014b46:	f04f 33ff 	mov.w	r3, #4294967295
 8014b4a:	e0a5      	b.n	8014c98 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8014b4c:	697b      	ldr	r3, [r7, #20]
 8014b4e:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 8014b52:	b25b      	sxtb	r3, r3
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	da0a      	bge.n	8014b6e <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014b58:	697b      	ldr	r3, [r7, #20]
 8014b5a:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014b5e:	2320      	movs	r3, #32
 8014b60:	2205      	movs	r2, #5
 8014b62:	68f8      	ldr	r0, [r7, #12]
 8014b64:	f7ff fd9a 	bl	801469c <SCSI_SenseCode>
      return -1;
 8014b68:	f04f 33ff 	mov.w	r3, #4294967295
 8014b6c:	e094      	b.n	8014c98 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014b74:	68fa      	ldr	r2, [r7, #12]
 8014b76:	33b0      	adds	r3, #176	; 0xb0
 8014b78:	009b      	lsls	r3, r3, #2
 8014b7a:	4413      	add	r3, r2
 8014b7c:	685b      	ldr	r3, [r3, #4]
 8014b7e:	689b      	ldr	r3, [r3, #8]
 8014b80:	7afa      	ldrb	r2, [r7, #11]
 8014b82:	4610      	mov	r0, r2
 8014b84:	4798      	blx	r3
 8014b86:	4603      	mov	r3, r0
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d008      	beq.n	8014b9e <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014b8c:	7af9      	ldrb	r1, [r7, #11]
 8014b8e:	233a      	movs	r3, #58	; 0x3a
 8014b90:	2202      	movs	r2, #2
 8014b92:	68f8      	ldr	r0, [r7, #12]
 8014b94:	f7ff fd82 	bl	801469c <SCSI_SenseCode>
      return -1;
 8014b98:	f04f 33ff 	mov.w	r3, #4294967295
 8014b9c:	e07c      	b.n	8014c98 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014ba4:	68fa      	ldr	r2, [r7, #12]
 8014ba6:	33b0      	adds	r3, #176	; 0xb0
 8014ba8:	009b      	lsls	r3, r3, #2
 8014baa:	4413      	add	r3, r2
 8014bac:	685b      	ldr	r3, [r3, #4]
 8014bae:	68db      	ldr	r3, [r3, #12]
 8014bb0:	7afa      	ldrb	r2, [r7, #11]
 8014bb2:	4610      	mov	r0, r2
 8014bb4:	4798      	blx	r3
 8014bb6:	4603      	mov	r3, r0
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d008      	beq.n	8014bce <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8014bbc:	7af9      	ldrb	r1, [r7, #11]
 8014bbe:	2327      	movs	r3, #39	; 0x27
 8014bc0:	2202      	movs	r2, #2
 8014bc2:	68f8      	ldr	r0, [r7, #12]
 8014bc4:	f7ff fd6a 	bl	801469c <SCSI_SenseCode>
      return -1;
 8014bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8014bcc:	e064      	b.n	8014c98 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	3302      	adds	r3, #2
 8014bd2:	781b      	ldrb	r3, [r3, #0]
 8014bd4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	3303      	adds	r3, #3
 8014bda:	781b      	ldrb	r3, [r3, #0]
 8014bdc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014bde:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	3304      	adds	r3, #4
 8014be4:	781b      	ldrb	r3, [r3, #0]
 8014be6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014be8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014bea:	687a      	ldr	r2, [r7, #4]
 8014bec:	3205      	adds	r2, #5
 8014bee:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8014bf0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014bf2:	697b      	ldr	r3, [r7, #20]
 8014bf4:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	3307      	adds	r3, #7
 8014bfc:	781b      	ldrb	r3, [r3, #0]
 8014bfe:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8014c00:	687a      	ldr	r2, [r7, #4]
 8014c02:	3208      	adds	r2, #8
 8014c04:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8014c06:	431a      	orrs	r2, r3
 8014c08:	697b      	ldr	r3, [r7, #20]
 8014c0a:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014c0e:	697b      	ldr	r3, [r7, #20]
 8014c10:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 8014c14:	697b      	ldr	r3, [r7, #20]
 8014c16:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8014c1a:	7af9      	ldrb	r1, [r7, #11]
 8014c1c:	68f8      	ldr	r0, [r7, #12]
 8014c1e:	f000 f964 	bl	8014eea <SCSI_CheckAddressRange>
 8014c22:	4603      	mov	r3, r0
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	da02      	bge.n	8014c2e <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014c28:	f04f 33ff 	mov.w	r3, #4294967295
 8014c2c:	e034      	b.n	8014c98 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8014c2e:	697b      	ldr	r3, [r7, #20]
 8014c30:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8014c34:	697a      	ldr	r2, [r7, #20]
 8014c36:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	; 0x864
 8014c3a:	fb02 f303 	mul.w	r3, r2, r3
 8014c3e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8014c40:	697b      	ldr	r3, [r7, #20]
 8014c42:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8014c46:	693a      	ldr	r2, [r7, #16]
 8014c48:	429a      	cmp	r2, r3
 8014c4a:	d00a      	beq.n	8014c62 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014c4c:	697b      	ldr	r3, [r7, #20]
 8014c4e:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014c52:	2320      	movs	r3, #32
 8014c54:	2205      	movs	r2, #5
 8014c56:	68f8      	ldr	r0, [r7, #12]
 8014c58:	f7ff fd20 	bl	801469c <SCSI_SenseCode>
      return -1;
 8014c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8014c60:	e01a      	b.n	8014c98 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8014c62:	693b      	ldr	r3, [r7, #16]
 8014c64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014c68:	bf28      	it	cs
 8014c6a:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 8014c6e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8014c70:	697b      	ldr	r3, [r7, #20]
 8014c72:	2201      	movs	r2, #1
 8014c74:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8014c76:	4b0a      	ldr	r3, [pc, #40]	; (8014ca0 <SCSI_Write10+0x1a8>)
 8014c78:	7819      	ldrb	r1, [r3, #0]
 8014c7a:	697b      	ldr	r3, [r7, #20]
 8014c7c:	f103 0210 	add.w	r2, r3, #16
 8014c80:	693b      	ldr	r3, [r7, #16]
 8014c82:	68f8      	ldr	r0, [r7, #12]
 8014c84:	f005 ffef 	bl	801ac66 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8014c88:	2300      	movs	r3, #0
 8014c8a:	e005      	b.n	8014c98 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 8014c8c:	7afb      	ldrb	r3, [r7, #11]
 8014c8e:	4619      	mov	r1, r3
 8014c90:	68f8      	ldr	r0, [r7, #12]
 8014c92:	f000 f9dd 	bl	8015050 <SCSI_ProcessWrite>
 8014c96:	4603      	mov	r3, r0
}
 8014c98:	4618      	mov	r0, r3
 8014c9a:	3718      	adds	r7, #24
 8014c9c:	46bd      	mov	sp, r7
 8014c9e:	bd80      	pop	{r7, pc}
 8014ca0:	2000008b 	.word	0x2000008b

08014ca4 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014ca4:	b580      	push	{r7, lr}
 8014ca6:	b086      	sub	sp, #24
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	60f8      	str	r0, [r7, #12]
 8014cac:	460b      	mov	r3, r1
 8014cae:	607a      	str	r2, [r7, #4]
 8014cb0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	32b0      	adds	r2, #176	; 0xb0
 8014cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014cc0:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8014cc2:	697b      	ldr	r3, [r7, #20]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d102      	bne.n	8014cce <SCSI_Write12+0x2a>
  {
    return -1;
 8014cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8014ccc:	e0ca      	b.n	8014e64 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014cce:	697b      	ldr	r3, [r7, #20]
 8014cd0:	7a1b      	ldrb	r3, [r3, #8]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	f040 80c0 	bne.w	8014e58 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8014cd8:	697b      	ldr	r3, [r7, #20]
 8014cda:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d10a      	bne.n	8014cf8 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014ce2:	697b      	ldr	r3, [r7, #20]
 8014ce4:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014ce8:	2320      	movs	r3, #32
 8014cea:	2205      	movs	r2, #5
 8014cec:	68f8      	ldr	r0, [r7, #12]
 8014cee:	f7ff fcd5 	bl	801469c <SCSI_SenseCode>
      return -1;
 8014cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8014cf6:	e0b5      	b.n	8014e64 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8014cf8:	697b      	ldr	r3, [r7, #20]
 8014cfa:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 8014cfe:	b25b      	sxtb	r3, r3
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	da0a      	bge.n	8014d1a <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014d04:	697b      	ldr	r3, [r7, #20]
 8014d06:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014d0a:	2320      	movs	r3, #32
 8014d0c:	2205      	movs	r2, #5
 8014d0e:	68f8      	ldr	r0, [r7, #12]
 8014d10:	f7ff fcc4 	bl	801469c <SCSI_SenseCode>
      return -1;
 8014d14:	f04f 33ff 	mov.w	r3, #4294967295
 8014d18:	e0a4      	b.n	8014e64 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014d20:	68fa      	ldr	r2, [r7, #12]
 8014d22:	33b0      	adds	r3, #176	; 0xb0
 8014d24:	009b      	lsls	r3, r3, #2
 8014d26:	4413      	add	r3, r2
 8014d28:	685b      	ldr	r3, [r3, #4]
 8014d2a:	689b      	ldr	r3, [r3, #8]
 8014d2c:	7afa      	ldrb	r2, [r7, #11]
 8014d2e:	4610      	mov	r0, r2
 8014d30:	4798      	blx	r3
 8014d32:	4603      	mov	r3, r0
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d00b      	beq.n	8014d50 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014d38:	7af9      	ldrb	r1, [r7, #11]
 8014d3a:	233a      	movs	r3, #58	; 0x3a
 8014d3c:	2202      	movs	r2, #2
 8014d3e:	68f8      	ldr	r0, [r7, #12]
 8014d40:	f7ff fcac 	bl	801469c <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8014d44:	697b      	ldr	r3, [r7, #20]
 8014d46:	2205      	movs	r2, #5
 8014d48:	721a      	strb	r2, [r3, #8]
      return -1;
 8014d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8014d4e:	e089      	b.n	8014e64 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014d56:	68fa      	ldr	r2, [r7, #12]
 8014d58:	33b0      	adds	r3, #176	; 0xb0
 8014d5a:	009b      	lsls	r3, r3, #2
 8014d5c:	4413      	add	r3, r2
 8014d5e:	685b      	ldr	r3, [r3, #4]
 8014d60:	68db      	ldr	r3, [r3, #12]
 8014d62:	7afa      	ldrb	r2, [r7, #11]
 8014d64:	4610      	mov	r0, r2
 8014d66:	4798      	blx	r3
 8014d68:	4603      	mov	r3, r0
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d00b      	beq.n	8014d86 <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8014d6e:	7af9      	ldrb	r1, [r7, #11]
 8014d70:	2327      	movs	r3, #39	; 0x27
 8014d72:	2202      	movs	r2, #2
 8014d74:	68f8      	ldr	r0, [r7, #12]
 8014d76:	f7ff fc91 	bl	801469c <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8014d7a:	697b      	ldr	r3, [r7, #20]
 8014d7c:	2205      	movs	r2, #5
 8014d7e:	721a      	strb	r2, [r3, #8]
      return -1;
 8014d80:	f04f 33ff 	mov.w	r3, #4294967295
 8014d84:	e06e      	b.n	8014e64 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	3302      	adds	r3, #2
 8014d8a:	781b      	ldrb	r3, [r3, #0]
 8014d8c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	3303      	adds	r3, #3
 8014d92:	781b      	ldrb	r3, [r3, #0]
 8014d94:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014d96:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	3304      	adds	r3, #4
 8014d9c:	781b      	ldrb	r3, [r3, #0]
 8014d9e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014da0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014da2:	687a      	ldr	r2, [r7, #4]
 8014da4:	3205      	adds	r2, #5
 8014da6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8014da8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014daa:	697b      	ldr	r3, [r7, #20]
 8014dac:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	3306      	adds	r3, #6
 8014db4:	781b      	ldrb	r3, [r3, #0]
 8014db6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	3307      	adds	r3, #7
 8014dbc:	781b      	ldrb	r3, [r3, #0]
 8014dbe:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014dc0:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	3308      	adds	r3, #8
 8014dc6:	781b      	ldrb	r3, [r3, #0]
 8014dc8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8014dca:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8014dcc:	687a      	ldr	r2, [r7, #4]
 8014dce:	3209      	adds	r2, #9
 8014dd0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8014dd2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014dd4:	697b      	ldr	r3, [r7, #20]
 8014dd6:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014dda:	697b      	ldr	r3, [r7, #20]
 8014ddc:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 8014de0:	697b      	ldr	r3, [r7, #20]
 8014de2:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8014de6:	7af9      	ldrb	r1, [r7, #11]
 8014de8:	68f8      	ldr	r0, [r7, #12]
 8014dea:	f000 f87e 	bl	8014eea <SCSI_CheckAddressRange>
 8014dee:	4603      	mov	r3, r0
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	da02      	bge.n	8014dfa <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014df4:	f04f 33ff 	mov.w	r3, #4294967295
 8014df8:	e034      	b.n	8014e64 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8014dfa:	697b      	ldr	r3, [r7, #20]
 8014dfc:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8014e00:	697a      	ldr	r2, [r7, #20]
 8014e02:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	; 0x864
 8014e06:	fb02 f303 	mul.w	r3, r2, r3
 8014e0a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8014e0c:	697b      	ldr	r3, [r7, #20]
 8014e0e:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8014e12:	693a      	ldr	r2, [r7, #16]
 8014e14:	429a      	cmp	r2, r3
 8014e16:	d00a      	beq.n	8014e2e <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014e18:	697b      	ldr	r3, [r7, #20]
 8014e1a:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014e1e:	2320      	movs	r3, #32
 8014e20:	2205      	movs	r2, #5
 8014e22:	68f8      	ldr	r0, [r7, #12]
 8014e24:	f7ff fc3a 	bl	801469c <SCSI_SenseCode>
      return -1;
 8014e28:	f04f 33ff 	mov.w	r3, #4294967295
 8014e2c:	e01a      	b.n	8014e64 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8014e2e:	693b      	ldr	r3, [r7, #16]
 8014e30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014e34:	bf28      	it	cs
 8014e36:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 8014e3a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8014e3c:	697b      	ldr	r3, [r7, #20]
 8014e3e:	2201      	movs	r2, #1
 8014e40:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8014e42:	4b0a      	ldr	r3, [pc, #40]	; (8014e6c <SCSI_Write12+0x1c8>)
 8014e44:	7819      	ldrb	r1, [r3, #0]
 8014e46:	697b      	ldr	r3, [r7, #20]
 8014e48:	f103 0210 	add.w	r2, r3, #16
 8014e4c:	693b      	ldr	r3, [r7, #16]
 8014e4e:	68f8      	ldr	r0, [r7, #12]
 8014e50:	f005 ff09 	bl	801ac66 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8014e54:	2300      	movs	r3, #0
 8014e56:	e005      	b.n	8014e64 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 8014e58:	7afb      	ldrb	r3, [r7, #11]
 8014e5a:	4619      	mov	r1, r3
 8014e5c:	68f8      	ldr	r0, [r7, #12]
 8014e5e:	f000 f8f7 	bl	8015050 <SCSI_ProcessWrite>
 8014e62:	4603      	mov	r3, r0
}
 8014e64:	4618      	mov	r0, r3
 8014e66:	3718      	adds	r7, #24
 8014e68:	46bd      	mov	sp, r7
 8014e6a:	bd80      	pop	{r7, pc}
 8014e6c:	2000008b 	.word	0x2000008b

08014e70 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014e70:	b580      	push	{r7, lr}
 8014e72:	b086      	sub	sp, #24
 8014e74:	af00      	add	r7, sp, #0
 8014e76:	60f8      	str	r0, [r7, #12]
 8014e78:	460b      	mov	r3, r1
 8014e7a:	607a      	str	r2, [r7, #4]
 8014e7c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	32b0      	adds	r2, #176	; 0xb0
 8014e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e8c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8014e8e:	697b      	ldr	r3, [r7, #20]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d102      	bne.n	8014e9a <SCSI_Verify10+0x2a>
  {
    return -1;
 8014e94:	f04f 33ff 	mov.w	r3, #4294967295
 8014e98:	e023      	b.n	8014ee2 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	3301      	adds	r3, #1
 8014e9e:	781b      	ldrb	r3, [r3, #0]
 8014ea0:	f003 0302 	and.w	r3, r3, #2
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d008      	beq.n	8014eba <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8014ea8:	7af9      	ldrb	r1, [r7, #11]
 8014eaa:	2324      	movs	r3, #36	; 0x24
 8014eac:	2205      	movs	r2, #5
 8014eae:	68f8      	ldr	r0, [r7, #12]
 8014eb0:	f7ff fbf4 	bl	801469c <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8014eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8014eb8:	e013      	b.n	8014ee2 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8014eba:	697b      	ldr	r3, [r7, #20]
 8014ebc:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 8014ec0:	697b      	ldr	r3, [r7, #20]
 8014ec2:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8014ec6:	7af9      	ldrb	r1, [r7, #11]
 8014ec8:	68f8      	ldr	r0, [r7, #12]
 8014eca:	f000 f80e 	bl	8014eea <SCSI_CheckAddressRange>
 8014ece:	4603      	mov	r3, r0
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	da02      	bge.n	8014eda <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 8014ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8014ed8:	e003      	b.n	8014ee2 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 8014eda:	697b      	ldr	r3, [r7, #20]
 8014edc:	2200      	movs	r2, #0
 8014ede:	60da      	str	r2, [r3, #12]

  return 0;
 8014ee0:	2300      	movs	r3, #0
}
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	3718      	adds	r7, #24
 8014ee6:	46bd      	mov	sp, r7
 8014ee8:	bd80      	pop	{r7, pc}

08014eea <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8014eea:	b580      	push	{r7, lr}
 8014eec:	b086      	sub	sp, #24
 8014eee:	af00      	add	r7, sp, #0
 8014ef0:	60f8      	str	r0, [r7, #12]
 8014ef2:	607a      	str	r2, [r7, #4]
 8014ef4:	603b      	str	r3, [r7, #0]
 8014ef6:	460b      	mov	r3, r1
 8014ef8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	32b0      	adds	r2, #176	; 0xb0
 8014f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f08:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8014f0a:	697b      	ldr	r3, [r7, #20]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d102      	bne.n	8014f16 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8014f10:	f04f 33ff 	mov.w	r3, #4294967295
 8014f14:	e011      	b.n	8014f3a <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8014f16:	687a      	ldr	r2, [r7, #4]
 8014f18:	683b      	ldr	r3, [r7, #0]
 8014f1a:	441a      	add	r2, r3
 8014f1c:	697b      	ldr	r3, [r7, #20]
 8014f1e:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8014f22:	429a      	cmp	r2, r3
 8014f24:	d908      	bls.n	8014f38 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8014f26:	7af9      	ldrb	r1, [r7, #11]
 8014f28:	2321      	movs	r3, #33	; 0x21
 8014f2a:	2205      	movs	r2, #5
 8014f2c:	68f8      	ldr	r0, [r7, #12]
 8014f2e:	f7ff fbb5 	bl	801469c <SCSI_SenseCode>
    return -1;
 8014f32:	f04f 33ff 	mov.w	r3, #4294967295
 8014f36:	e000      	b.n	8014f3a <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 8014f38:	2300      	movs	r3, #0
}
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	3718      	adds	r7, #24
 8014f3e:	46bd      	mov	sp, r7
 8014f40:	bd80      	pop	{r7, pc}
	...

08014f44 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8014f44:	b590      	push	{r4, r7, lr}
 8014f46:	b085      	sub	sp, #20
 8014f48:	af00      	add	r7, sp, #0
 8014f4a:	6078      	str	r0, [r7, #4]
 8014f4c:	460b      	mov	r3, r1
 8014f4e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	32b0      	adds	r2, #176	; 0xb0
 8014f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f5e:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d102      	bne.n	8014f6c <SCSI_ProcessRead+0x28>
  {
    return -1;
 8014f66:	f04f 33ff 	mov.w	r3, #4294967295
 8014f6a:	e06a      	b.n	8015042 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8014f72:	68fa      	ldr	r2, [r7, #12]
 8014f74:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	; 0x864
 8014f78:	fb02 f303 	mul.w	r3, r2, r3
 8014f7c:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8014f7e:	68bb      	ldr	r3, [r7, #8]
 8014f80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014f84:	bf28      	it	cs
 8014f86:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 8014f8a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014f92:	687a      	ldr	r2, [r7, #4]
 8014f94:	33b0      	adds	r3, #176	; 0xb0
 8014f96:	009b      	lsls	r3, r3, #2
 8014f98:	4413      	add	r3, r2
 8014f9a:	685b      	ldr	r3, [r3, #4]
 8014f9c:	691c      	ldr	r4, [r3, #16]
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	f103 0110 	add.w	r1, r3, #16
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	68bb      	ldr	r3, [r7, #8]
 8014fb4:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8014fb8:	b29b      	uxth	r3, r3
 8014fba:	78f8      	ldrb	r0, [r7, #3]
 8014fbc:	47a0      	blx	r4
 8014fbe:	4603      	mov	r3, r0
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	da08      	bge.n	8014fd6 <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8014fc4:	78f9      	ldrb	r1, [r7, #3]
 8014fc6:	2311      	movs	r3, #17
 8014fc8:	2204      	movs	r2, #4
 8014fca:	6878      	ldr	r0, [r7, #4]
 8014fcc:	f7ff fb66 	bl	801469c <SCSI_SenseCode>
    return -1;
 8014fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8014fd4:	e035      	b.n	8015042 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8014fd6:	4b1d      	ldr	r3, [pc, #116]	; (801504c <SCSI_ProcessRead+0x108>)
 8014fd8:	7819      	ldrb	r1, [r3, #0]
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	f103 0210 	add.w	r2, r3, #16
 8014fe0:	68bb      	ldr	r3, [r7, #8]
 8014fe2:	6878      	ldr	r0, [r7, #4]
 8014fe4:	f005 fe1e 	bl	801ac24 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8014ff4:	4619      	mov	r1, r3
 8014ff6:	68bb      	ldr	r3, [r7, #8]
 8014ff8:	fbb3 f3f1 	udiv	r3, r3, r1
 8014ffc:	441a      	add	r2, r3
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8015010:	4619      	mov	r1, r3
 8015012:	68bb      	ldr	r3, [r7, #8]
 8015014:	fbb3 f3f1 	udiv	r3, r3, r1
 8015018:	1ad2      	subs	r2, r2, r3
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	f8d3 2838 	ldr.w	r2, [r3, #2104]	; 0x838
 8015026:	68bb      	ldr	r3, [r7, #8]
 8015028:	1ad2      	subs	r2, r2, r3
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838

  if (hmsc->scsi_blk_len == 0U)
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8015036:	2b00      	cmp	r3, #0
 8015038:	d102      	bne.n	8015040 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	2203      	movs	r2, #3
 801503e:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8015040:	2300      	movs	r3, #0
}
 8015042:	4618      	mov	r0, r3
 8015044:	3714      	adds	r7, #20
 8015046:	46bd      	mov	sp, r7
 8015048:	bd90      	pop	{r4, r7, pc}
 801504a:	bf00      	nop
 801504c:	2000008a 	.word	0x2000008a

08015050 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8015050:	b590      	push	{r4, r7, lr}
 8015052:	b085      	sub	sp, #20
 8015054:	af00      	add	r7, sp, #0
 8015056:	6078      	str	r0, [r7, #4]
 8015058:	460b      	mov	r3, r1
 801505a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	32b0      	adds	r2, #176	; 0xb0
 8015066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801506a:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	2b00      	cmp	r3, #0
 8015070:	d102      	bne.n	8015078 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 8015072:	f04f 33ff 	mov.w	r3, #4294967295
 8015076:	e07a      	b.n	801516e <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801507e:	68fa      	ldr	r2, [r7, #12]
 8015080:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	; 0x864
 8015084:	fb02 f303 	mul.w	r3, r2, r3
 8015088:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 801508a:	68bb      	ldr	r3, [r7, #8]
 801508c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015090:	bf28      	it	cs
 8015092:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 8015096:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801509e:	687a      	ldr	r2, [r7, #4]
 80150a0:	33b0      	adds	r3, #176	; 0xb0
 80150a2:	009b      	lsls	r3, r3, #2
 80150a4:	4413      	add	r3, r2
 80150a6:	685b      	ldr	r3, [r3, #4]
 80150a8:	695c      	ldr	r4, [r3, #20]
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	f103 0110 	add.w	r1, r3, #16
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 80150bc:	4618      	mov	r0, r3
 80150be:	68bb      	ldr	r3, [r7, #8]
 80150c0:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 80150c4:	b29b      	uxth	r3, r3
 80150c6:	78f8      	ldrb	r0, [r7, #3]
 80150c8:	47a0      	blx	r4
 80150ca:	4603      	mov	r3, r0
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	da08      	bge.n	80150e2 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80150d0:	78f9      	ldrb	r1, [r7, #3]
 80150d2:	2303      	movs	r3, #3
 80150d4:	2204      	movs	r2, #4
 80150d6:	6878      	ldr	r0, [r7, #4]
 80150d8:	f7ff fae0 	bl	801469c <SCSI_SenseCode>
    return -1;
 80150dc:	f04f 33ff 	mov.w	r3, #4294967295
 80150e0:	e045      	b.n	801516e <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 80150ee:	4619      	mov	r1, r3
 80150f0:	68bb      	ldr	r3, [r7, #8]
 80150f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80150f6:	441a      	add	r2, r3
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 801510a:	4619      	mov	r1, r3
 801510c:	68bb      	ldr	r3, [r7, #8]
 801510e:	fbb3 f3f1 	udiv	r3, r3, r1
 8015112:	1ad2      	subs	r2, r2, r3
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	f8d3 2838 	ldr.w	r2, [r3, #2104]	; 0x838
 8015120:	68bb      	ldr	r3, [r7, #8]
 8015122:	1ad2      	subs	r2, r2, r3
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838

  if (hmsc->scsi_blk_len == 0U)
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8015130:	2b00      	cmp	r3, #0
 8015132:	d104      	bne.n	801513e <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8015134:	2100      	movs	r1, #0
 8015136:	6878      	ldr	r0, [r7, #4]
 8015138:	f7fe fd0e 	bl	8013b58 <MSC_BOT_SendCSW>
 801513c:	e016      	b.n	801516c <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8015144:	68fa      	ldr	r2, [r7, #12]
 8015146:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	; 0x864
 801514a:	fb02 f303 	mul.w	r3, r2, r3
 801514e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015152:	bf28      	it	cs
 8015154:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 8015158:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 801515a:	4b07      	ldr	r3, [pc, #28]	; (8015178 <SCSI_ProcessWrite+0x128>)
 801515c:	7819      	ldrb	r1, [r3, #0]
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	f103 0210 	add.w	r2, r3, #16
 8015164:	68bb      	ldr	r3, [r7, #8]
 8015166:	6878      	ldr	r0, [r7, #4]
 8015168:	f005 fd7d 	bl	801ac66 <USBD_LL_PrepareReceive>
  }

  return 0;
 801516c:	2300      	movs	r3, #0
}
 801516e:	4618      	mov	r0, r3
 8015170:	3714      	adds	r7, #20
 8015172:	46bd      	mov	sp, r7
 8015174:	bd90      	pop	{r4, r7, pc}
 8015176:	bf00      	nop
 8015178:	2000008b 	.word	0x2000008b

0801517c <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 801517c:	b480      	push	{r7}
 801517e:	b087      	sub	sp, #28
 8015180:	af00      	add	r7, sp, #0
 8015182:	60f8      	str	r0, [r7, #12]
 8015184:	60b9      	str	r1, [r7, #8]
 8015186:	4613      	mov	r3, r2
 8015188:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 801518a:	88fb      	ldrh	r3, [r7, #6]
 801518c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	2b00      	cmp	r3, #0
 8015192:	d102      	bne.n	801519a <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8015194:	f04f 33ff 	mov.w	r3, #4294967295
 8015198:	e013      	b.n	80151c2 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 801519a:	8afa      	ldrh	r2, [r7, #22]
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80151a0:	e00b      	b.n	80151ba <SCSI_UpdateBotData+0x3e>
  {
    len--;
 80151a2:	8afb      	ldrh	r3, [r7, #22]
 80151a4:	3b01      	subs	r3, #1
 80151a6:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 80151a8:	8afb      	ldrh	r3, [r7, #22]
 80151aa:	68ba      	ldr	r2, [r7, #8]
 80151ac:	441a      	add	r2, r3
 80151ae:	8afb      	ldrh	r3, [r7, #22]
 80151b0:	7811      	ldrb	r1, [r2, #0]
 80151b2:	68fa      	ldr	r2, [r7, #12]
 80151b4:	4413      	add	r3, r2
 80151b6:	460a      	mov	r2, r1
 80151b8:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 80151ba:	8afb      	ldrh	r3, [r7, #22]
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d1f0      	bne.n	80151a2 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 80151c0:	2300      	movs	r3, #0
}
 80151c2:	4618      	mov	r0, r3
 80151c4:	371c      	adds	r7, #28
 80151c6:	46bd      	mov	sp, r7
 80151c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151cc:	4770      	bx	lr

080151ce <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80151ce:	b580      	push	{r7, lr}
 80151d0:	b086      	sub	sp, #24
 80151d2:	af00      	add	r7, sp, #0
 80151d4:	60f8      	str	r0, [r7, #12]
 80151d6:	60b9      	str	r1, [r7, #8]
 80151d8:	4613      	mov	r3, r2
 80151da:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d101      	bne.n	80151e6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80151e2:	2303      	movs	r3, #3
 80151e4:	e01f      	b.n	8015226 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	2200      	movs	r2, #0
 80151ea:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	2200      	movs	r2, #0
 80151f2:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	2200      	movs	r2, #0
 80151fa:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80151fe:	68bb      	ldr	r3, [r7, #8]
 8015200:	2b00      	cmp	r3, #0
 8015202:	d003      	beq.n	801520c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	68ba      	ldr	r2, [r7, #8]
 8015208:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	2201      	movs	r2, #1
 8015210:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	79fa      	ldrb	r2, [r7, #7]
 8015218:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801521a:	68f8      	ldr	r0, [r7, #12]
 801521c:	f005 fb78 	bl	801a910 <USBD_LL_Init>
 8015220:	4603      	mov	r3, r0
 8015222:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015224:	7dfb      	ldrb	r3, [r7, #23]
}
 8015226:	4618      	mov	r0, r3
 8015228:	3718      	adds	r7, #24
 801522a:	46bd      	mov	sp, r7
 801522c:	bd80      	pop	{r7, pc}

0801522e <USBD_DeInit>:
  *         Re-Initialize the device library
  * @param  pdev: device instance
  * @retval status: status
  */
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 801522e:	b580      	push	{r7, lr}
 8015230:	b084      	sub	sp, #16
 8015232:	af00      	add	r7, sp, #0
 8015234:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Disconnect the USB Device */
  (void)USBD_LL_Stop(pdev);
 8015236:	6878      	ldr	r0, [r7, #4]
 8015238:	f005 fbec 	bl	801aa14 <USBD_LL_Stop>

  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	2201      	movs	r2, #1
 8015240:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
    }
  }
#else
  /* Free Class Resources */
  if (pdev->pClass[0] != NULL)
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801524a:	2b00      	cmp	r3, #0
 801524c:	d009      	beq.n	8015262 <USBD_DeInit+0x34>
  {
    pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015254:	685b      	ldr	r3, [r3, #4]
 8015256:	687a      	ldr	r2, [r7, #4]
 8015258:	6852      	ldr	r2, [r2, #4]
 801525a:	b2d2      	uxtb	r2, r2
 801525c:	4611      	mov	r1, r2
 801525e:	6878      	ldr	r0, [r7, #4]
 8015260:	4798      	blx	r3
  }

  pdev->pUserData[0] = NULL;
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	2200      	movs	r2, #0
 8015266:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

#endif /* USE_USBD_COMPOSITE */

  /* Free Device descriptors resources */
  pdev->pDesc = NULL;
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	2200      	movs	r2, #0
 801526e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  pdev->pConfDesc = NULL;
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	2200      	movs	r2, #0
 8015276:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* DeInitialize low level driver */
  ret = USBD_LL_DeInit(pdev);
 801527a:	6878      	ldr	r0, [r7, #4]
 801527c:	f005 fb94 	bl	801a9a8 <USBD_LL_DeInit>
 8015280:	4603      	mov	r3, r0
 8015282:	73fb      	strb	r3, [r7, #15]

  return ret;
 8015284:	7bfb      	ldrb	r3, [r7, #15]
}
 8015286:	4618      	mov	r0, r3
 8015288:	3710      	adds	r7, #16
 801528a:	46bd      	mov	sp, r7
 801528c:	bd80      	pop	{r7, pc}

0801528e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801528e:	b580      	push	{r7, lr}
 8015290:	b084      	sub	sp, #16
 8015292:	af00      	add	r7, sp, #0
 8015294:	6078      	str	r0, [r7, #4]
 8015296:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015298:	2300      	movs	r3, #0
 801529a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801529c:	683b      	ldr	r3, [r7, #0]
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d101      	bne.n	80152a6 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80152a2:	2303      	movs	r3, #3
 80152a4:	e025      	b.n	80152f2 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	683a      	ldr	r2, [r7, #0]
 80152aa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	32ae      	adds	r2, #174	; 0xae
 80152b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d00f      	beq.n	80152e2 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	32ae      	adds	r2, #174	; 0xae
 80152cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152d2:	f107 020e 	add.w	r2, r7, #14
 80152d6:	4610      	mov	r0, r2
 80152d8:	4798      	blx	r3
 80152da:	4602      	mov	r2, r0
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80152e8:	1c5a      	adds	r2, r3, #1
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80152f0:	2300      	movs	r3, #0
}
 80152f2:	4618      	mov	r0, r3
 80152f4:	3710      	adds	r7, #16
 80152f6:	46bd      	mov	sp, r7
 80152f8:	bd80      	pop	{r7, pc}

080152fa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80152fa:	b580      	push	{r7, lr}
 80152fc:	b082      	sub	sp, #8
 80152fe:	af00      	add	r7, sp, #0
 8015300:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015302:	6878      	ldr	r0, [r7, #4]
 8015304:	f005 fb6b 	bl	801a9de <USBD_LL_Start>
 8015308:	4603      	mov	r3, r0
}
 801530a:	4618      	mov	r0, r3
 801530c:	3708      	adds	r7, #8
 801530e:	46bd      	mov	sp, r7
 8015310:	bd80      	pop	{r7, pc}

08015312 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8015312:	b580      	push	{r7, lr}
 8015314:	b082      	sub	sp, #8
 8015316:	af00      	add	r7, sp, #0
 8015318:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 801531a:	6878      	ldr	r0, [r7, #4]
 801531c:	f005 fb7a 	bl	801aa14 <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015326:	2b00      	cmp	r3, #0
 8015328:	d009      	beq.n	801533e <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015330:	685b      	ldr	r3, [r3, #4]
 8015332:	687a      	ldr	r2, [r7, #4]
 8015334:	6852      	ldr	r2, [r2, #4]
 8015336:	b2d2      	uxtb	r2, r2
 8015338:	4611      	mov	r1, r2
 801533a:	6878      	ldr	r0, [r7, #4]
 801533c:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 801533e:	2300      	movs	r3, #0
}
 8015340:	4618      	mov	r0, r3
 8015342:	3708      	adds	r7, #8
 8015344:	46bd      	mov	sp, r7
 8015346:	bd80      	pop	{r7, pc}

08015348 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8015348:	b480      	push	{r7}
 801534a:	b083      	sub	sp, #12
 801534c:	af00      	add	r7, sp, #0
 801534e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015350:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8015352:	4618      	mov	r0, r3
 8015354:	370c      	adds	r7, #12
 8015356:	46bd      	mov	sp, r7
 8015358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801535c:	4770      	bx	lr

0801535e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801535e:	b580      	push	{r7, lr}
 8015360:	b084      	sub	sp, #16
 8015362:	af00      	add	r7, sp, #0
 8015364:	6078      	str	r0, [r7, #4]
 8015366:	460b      	mov	r3, r1
 8015368:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801536a:	2300      	movs	r3, #0
 801536c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015374:	2b00      	cmp	r3, #0
 8015376:	d009      	beq.n	801538c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	78fa      	ldrb	r2, [r7, #3]
 8015382:	4611      	mov	r1, r2
 8015384:	6878      	ldr	r0, [r7, #4]
 8015386:	4798      	blx	r3
 8015388:	4603      	mov	r3, r0
 801538a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801538c:	7bfb      	ldrb	r3, [r7, #15]
}
 801538e:	4618      	mov	r0, r3
 8015390:	3710      	adds	r7, #16
 8015392:	46bd      	mov	sp, r7
 8015394:	bd80      	pop	{r7, pc}

08015396 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015396:	b580      	push	{r7, lr}
 8015398:	b084      	sub	sp, #16
 801539a:	af00      	add	r7, sp, #0
 801539c:	6078      	str	r0, [r7, #4]
 801539e:	460b      	mov	r3, r1
 80153a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80153a2:	2300      	movs	r3, #0
 80153a4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153ac:	685b      	ldr	r3, [r3, #4]
 80153ae:	78fa      	ldrb	r2, [r7, #3]
 80153b0:	4611      	mov	r1, r2
 80153b2:	6878      	ldr	r0, [r7, #4]
 80153b4:	4798      	blx	r3
 80153b6:	4603      	mov	r3, r0
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d001      	beq.n	80153c0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80153bc:	2303      	movs	r3, #3
 80153be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80153c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80153c2:	4618      	mov	r0, r3
 80153c4:	3710      	adds	r7, #16
 80153c6:	46bd      	mov	sp, r7
 80153c8:	bd80      	pop	{r7, pc}

080153ca <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80153ca:	b580      	push	{r7, lr}
 80153cc:	b084      	sub	sp, #16
 80153ce:	af00      	add	r7, sp, #0
 80153d0:	6078      	str	r0, [r7, #4]
 80153d2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80153da:	6839      	ldr	r1, [r7, #0]
 80153dc:	4618      	mov	r0, r3
 80153de:	f001 f908 	bl	80165f2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	2201      	movs	r2, #1
 80153e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80153f0:	461a      	mov	r2, r3
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80153fe:	f003 031f 	and.w	r3, r3, #31
 8015402:	2b02      	cmp	r3, #2
 8015404:	d01a      	beq.n	801543c <USBD_LL_SetupStage+0x72>
 8015406:	2b02      	cmp	r3, #2
 8015408:	d822      	bhi.n	8015450 <USBD_LL_SetupStage+0x86>
 801540a:	2b00      	cmp	r3, #0
 801540c:	d002      	beq.n	8015414 <USBD_LL_SetupStage+0x4a>
 801540e:	2b01      	cmp	r3, #1
 8015410:	d00a      	beq.n	8015428 <USBD_LL_SetupStage+0x5e>
 8015412:	e01d      	b.n	8015450 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801541a:	4619      	mov	r1, r3
 801541c:	6878      	ldr	r0, [r7, #4]
 801541e:	f000 fb5f 	bl	8015ae0 <USBD_StdDevReq>
 8015422:	4603      	mov	r3, r0
 8015424:	73fb      	strb	r3, [r7, #15]
      break;
 8015426:	e020      	b.n	801546a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801542e:	4619      	mov	r1, r3
 8015430:	6878      	ldr	r0, [r7, #4]
 8015432:	f000 fbc7 	bl	8015bc4 <USBD_StdItfReq>
 8015436:	4603      	mov	r3, r0
 8015438:	73fb      	strb	r3, [r7, #15]
      break;
 801543a:	e016      	b.n	801546a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015442:	4619      	mov	r1, r3
 8015444:	6878      	ldr	r0, [r7, #4]
 8015446:	f000 fc29 	bl	8015c9c <USBD_StdEPReq>
 801544a:	4603      	mov	r3, r0
 801544c:	73fb      	strb	r3, [r7, #15]
      break;
 801544e:	e00c      	b.n	801546a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015456:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801545a:	b2db      	uxtb	r3, r3
 801545c:	4619      	mov	r1, r3
 801545e:	6878      	ldr	r0, [r7, #4]
 8015460:	f005 fb57 	bl	801ab12 <USBD_LL_StallEP>
 8015464:	4603      	mov	r3, r0
 8015466:	73fb      	strb	r3, [r7, #15]
      break;
 8015468:	bf00      	nop
  }

  return ret;
 801546a:	7bfb      	ldrb	r3, [r7, #15]
}
 801546c:	4618      	mov	r0, r3
 801546e:	3710      	adds	r7, #16
 8015470:	46bd      	mov	sp, r7
 8015472:	bd80      	pop	{r7, pc}

08015474 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015474:	b580      	push	{r7, lr}
 8015476:	b086      	sub	sp, #24
 8015478:	af00      	add	r7, sp, #0
 801547a:	60f8      	str	r0, [r7, #12]
 801547c:	460b      	mov	r3, r1
 801547e:	607a      	str	r2, [r7, #4]
 8015480:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8015482:	2300      	movs	r3, #0
 8015484:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8015486:	7afb      	ldrb	r3, [r7, #11]
 8015488:	2b00      	cmp	r3, #0
 801548a:	d16e      	bne.n	801556a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015492:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801549a:	2b03      	cmp	r3, #3
 801549c:	f040 8098 	bne.w	80155d0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80154a0:	693b      	ldr	r3, [r7, #16]
 80154a2:	689a      	ldr	r2, [r3, #8]
 80154a4:	693b      	ldr	r3, [r7, #16]
 80154a6:	68db      	ldr	r3, [r3, #12]
 80154a8:	429a      	cmp	r2, r3
 80154aa:	d913      	bls.n	80154d4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80154ac:	693b      	ldr	r3, [r7, #16]
 80154ae:	689a      	ldr	r2, [r3, #8]
 80154b0:	693b      	ldr	r3, [r7, #16]
 80154b2:	68db      	ldr	r3, [r3, #12]
 80154b4:	1ad2      	subs	r2, r2, r3
 80154b6:	693b      	ldr	r3, [r7, #16]
 80154b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80154ba:	693b      	ldr	r3, [r7, #16]
 80154bc:	68da      	ldr	r2, [r3, #12]
 80154be:	693b      	ldr	r3, [r7, #16]
 80154c0:	689b      	ldr	r3, [r3, #8]
 80154c2:	4293      	cmp	r3, r2
 80154c4:	bf28      	it	cs
 80154c6:	4613      	movcs	r3, r2
 80154c8:	461a      	mov	r2, r3
 80154ca:	6879      	ldr	r1, [r7, #4]
 80154cc:	68f8      	ldr	r0, [r7, #12]
 80154ce:	f001 f967 	bl	80167a0 <USBD_CtlContinueRx>
 80154d2:	e07d      	b.n	80155d0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80154da:	f003 031f 	and.w	r3, r3, #31
 80154de:	2b02      	cmp	r3, #2
 80154e0:	d014      	beq.n	801550c <USBD_LL_DataOutStage+0x98>
 80154e2:	2b02      	cmp	r3, #2
 80154e4:	d81d      	bhi.n	8015522 <USBD_LL_DataOutStage+0xae>
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d002      	beq.n	80154f0 <USBD_LL_DataOutStage+0x7c>
 80154ea:	2b01      	cmp	r3, #1
 80154ec:	d003      	beq.n	80154f6 <USBD_LL_DataOutStage+0x82>
 80154ee:	e018      	b.n	8015522 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80154f0:	2300      	movs	r3, #0
 80154f2:	75bb      	strb	r3, [r7, #22]
            break;
 80154f4:	e018      	b.n	8015528 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80154fc:	b2db      	uxtb	r3, r3
 80154fe:	4619      	mov	r1, r3
 8015500:	68f8      	ldr	r0, [r7, #12]
 8015502:	f000 fa5e 	bl	80159c2 <USBD_CoreFindIF>
 8015506:	4603      	mov	r3, r0
 8015508:	75bb      	strb	r3, [r7, #22]
            break;
 801550a:	e00d      	b.n	8015528 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015512:	b2db      	uxtb	r3, r3
 8015514:	4619      	mov	r1, r3
 8015516:	68f8      	ldr	r0, [r7, #12]
 8015518:	f000 fa60 	bl	80159dc <USBD_CoreFindEP>
 801551c:	4603      	mov	r3, r0
 801551e:	75bb      	strb	r3, [r7, #22]
            break;
 8015520:	e002      	b.n	8015528 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8015522:	2300      	movs	r3, #0
 8015524:	75bb      	strb	r3, [r7, #22]
            break;
 8015526:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8015528:	7dbb      	ldrb	r3, [r7, #22]
 801552a:	2b00      	cmp	r3, #0
 801552c:	d119      	bne.n	8015562 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801552e:	68fb      	ldr	r3, [r7, #12]
 8015530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015534:	b2db      	uxtb	r3, r3
 8015536:	2b03      	cmp	r3, #3
 8015538:	d113      	bne.n	8015562 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801553a:	7dba      	ldrb	r2, [r7, #22]
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	32ae      	adds	r2, #174	; 0xae
 8015540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015544:	691b      	ldr	r3, [r3, #16]
 8015546:	2b00      	cmp	r3, #0
 8015548:	d00b      	beq.n	8015562 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801554a:	7dba      	ldrb	r2, [r7, #22]
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8015552:	7dba      	ldrb	r2, [r7, #22]
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	32ae      	adds	r2, #174	; 0xae
 8015558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801555c:	691b      	ldr	r3, [r3, #16]
 801555e:	68f8      	ldr	r0, [r7, #12]
 8015560:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8015562:	68f8      	ldr	r0, [r7, #12]
 8015564:	f001 f92d 	bl	80167c2 <USBD_CtlSendStatus>
 8015568:	e032      	b.n	80155d0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801556a:	7afb      	ldrb	r3, [r7, #11]
 801556c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015570:	b2db      	uxtb	r3, r3
 8015572:	4619      	mov	r1, r3
 8015574:	68f8      	ldr	r0, [r7, #12]
 8015576:	f000 fa31 	bl	80159dc <USBD_CoreFindEP>
 801557a:	4603      	mov	r3, r0
 801557c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801557e:	7dbb      	ldrb	r3, [r7, #22]
 8015580:	2bff      	cmp	r3, #255	; 0xff
 8015582:	d025      	beq.n	80155d0 <USBD_LL_DataOutStage+0x15c>
 8015584:	7dbb      	ldrb	r3, [r7, #22]
 8015586:	2b00      	cmp	r3, #0
 8015588:	d122      	bne.n	80155d0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015590:	b2db      	uxtb	r3, r3
 8015592:	2b03      	cmp	r3, #3
 8015594:	d117      	bne.n	80155c6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8015596:	7dba      	ldrb	r2, [r7, #22]
 8015598:	68fb      	ldr	r3, [r7, #12]
 801559a:	32ae      	adds	r2, #174	; 0xae
 801559c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155a0:	699b      	ldr	r3, [r3, #24]
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d00f      	beq.n	80155c6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80155a6:	7dba      	ldrb	r2, [r7, #22]
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80155ae:	7dba      	ldrb	r2, [r7, #22]
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	32ae      	adds	r2, #174	; 0xae
 80155b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155b8:	699b      	ldr	r3, [r3, #24]
 80155ba:	7afa      	ldrb	r2, [r7, #11]
 80155bc:	4611      	mov	r1, r2
 80155be:	68f8      	ldr	r0, [r7, #12]
 80155c0:	4798      	blx	r3
 80155c2:	4603      	mov	r3, r0
 80155c4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80155c6:	7dfb      	ldrb	r3, [r7, #23]
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d001      	beq.n	80155d0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80155cc:	7dfb      	ldrb	r3, [r7, #23]
 80155ce:	e000      	b.n	80155d2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80155d0:	2300      	movs	r3, #0
}
 80155d2:	4618      	mov	r0, r3
 80155d4:	3718      	adds	r7, #24
 80155d6:	46bd      	mov	sp, r7
 80155d8:	bd80      	pop	{r7, pc}

080155da <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80155da:	b580      	push	{r7, lr}
 80155dc:	b086      	sub	sp, #24
 80155de:	af00      	add	r7, sp, #0
 80155e0:	60f8      	str	r0, [r7, #12]
 80155e2:	460b      	mov	r3, r1
 80155e4:	607a      	str	r2, [r7, #4]
 80155e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80155e8:	7afb      	ldrb	r3, [r7, #11]
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d16f      	bne.n	80156ce <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	3314      	adds	r3, #20
 80155f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80155fa:	2b02      	cmp	r3, #2
 80155fc:	d15a      	bne.n	80156b4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80155fe:	693b      	ldr	r3, [r7, #16]
 8015600:	689a      	ldr	r2, [r3, #8]
 8015602:	693b      	ldr	r3, [r7, #16]
 8015604:	68db      	ldr	r3, [r3, #12]
 8015606:	429a      	cmp	r2, r3
 8015608:	d914      	bls.n	8015634 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801560a:	693b      	ldr	r3, [r7, #16]
 801560c:	689a      	ldr	r2, [r3, #8]
 801560e:	693b      	ldr	r3, [r7, #16]
 8015610:	68db      	ldr	r3, [r3, #12]
 8015612:	1ad2      	subs	r2, r2, r3
 8015614:	693b      	ldr	r3, [r7, #16]
 8015616:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015618:	693b      	ldr	r3, [r7, #16]
 801561a:	689b      	ldr	r3, [r3, #8]
 801561c:	461a      	mov	r2, r3
 801561e:	6879      	ldr	r1, [r7, #4]
 8015620:	68f8      	ldr	r0, [r7, #12]
 8015622:	f001 f8ac 	bl	801677e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015626:	2300      	movs	r3, #0
 8015628:	2200      	movs	r2, #0
 801562a:	2100      	movs	r1, #0
 801562c:	68f8      	ldr	r0, [r7, #12]
 801562e:	f005 fb1a 	bl	801ac66 <USBD_LL_PrepareReceive>
 8015632:	e03f      	b.n	80156b4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8015634:	693b      	ldr	r3, [r7, #16]
 8015636:	68da      	ldr	r2, [r3, #12]
 8015638:	693b      	ldr	r3, [r7, #16]
 801563a:	689b      	ldr	r3, [r3, #8]
 801563c:	429a      	cmp	r2, r3
 801563e:	d11c      	bne.n	801567a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015640:	693b      	ldr	r3, [r7, #16]
 8015642:	685a      	ldr	r2, [r3, #4]
 8015644:	693b      	ldr	r3, [r7, #16]
 8015646:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015648:	429a      	cmp	r2, r3
 801564a:	d316      	bcc.n	801567a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801564c:	693b      	ldr	r3, [r7, #16]
 801564e:	685a      	ldr	r2, [r3, #4]
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8015656:	429a      	cmp	r2, r3
 8015658:	d20f      	bcs.n	801567a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801565a:	2200      	movs	r2, #0
 801565c:	2100      	movs	r1, #0
 801565e:	68f8      	ldr	r0, [r7, #12]
 8015660:	f001 f88d 	bl	801677e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	2200      	movs	r2, #0
 8015668:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801566c:	2300      	movs	r3, #0
 801566e:	2200      	movs	r2, #0
 8015670:	2100      	movs	r1, #0
 8015672:	68f8      	ldr	r0, [r7, #12]
 8015674:	f005 faf7 	bl	801ac66 <USBD_LL_PrepareReceive>
 8015678:	e01c      	b.n	80156b4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801567a:	68fb      	ldr	r3, [r7, #12]
 801567c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015680:	b2db      	uxtb	r3, r3
 8015682:	2b03      	cmp	r3, #3
 8015684:	d10f      	bne.n	80156a6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801568c:	68db      	ldr	r3, [r3, #12]
 801568e:	2b00      	cmp	r3, #0
 8015690:	d009      	beq.n	80156a6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8015692:	68fb      	ldr	r3, [r7, #12]
 8015694:	2200      	movs	r2, #0
 8015696:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156a0:	68db      	ldr	r3, [r3, #12]
 80156a2:	68f8      	ldr	r0, [r7, #12]
 80156a4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80156a6:	2180      	movs	r1, #128	; 0x80
 80156a8:	68f8      	ldr	r0, [r7, #12]
 80156aa:	f005 fa32 	bl	801ab12 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80156ae:	68f8      	ldr	r0, [r7, #12]
 80156b0:	f001 f89a 	bl	80167e8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d03a      	beq.n	8015734 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80156be:	68f8      	ldr	r0, [r7, #12]
 80156c0:	f7ff fe42 	bl	8015348 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	2200      	movs	r2, #0
 80156c8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80156cc:	e032      	b.n	8015734 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80156ce:	7afb      	ldrb	r3, [r7, #11]
 80156d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80156d4:	b2db      	uxtb	r3, r3
 80156d6:	4619      	mov	r1, r3
 80156d8:	68f8      	ldr	r0, [r7, #12]
 80156da:	f000 f97f 	bl	80159dc <USBD_CoreFindEP>
 80156de:	4603      	mov	r3, r0
 80156e0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80156e2:	7dfb      	ldrb	r3, [r7, #23]
 80156e4:	2bff      	cmp	r3, #255	; 0xff
 80156e6:	d025      	beq.n	8015734 <USBD_LL_DataInStage+0x15a>
 80156e8:	7dfb      	ldrb	r3, [r7, #23]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d122      	bne.n	8015734 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80156f4:	b2db      	uxtb	r3, r3
 80156f6:	2b03      	cmp	r3, #3
 80156f8:	d11c      	bne.n	8015734 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80156fa:	7dfa      	ldrb	r2, [r7, #23]
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	32ae      	adds	r2, #174	; 0xae
 8015700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015704:	695b      	ldr	r3, [r3, #20]
 8015706:	2b00      	cmp	r3, #0
 8015708:	d014      	beq.n	8015734 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801570a:	7dfa      	ldrb	r2, [r7, #23]
 801570c:	68fb      	ldr	r3, [r7, #12]
 801570e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8015712:	7dfa      	ldrb	r2, [r7, #23]
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	32ae      	adds	r2, #174	; 0xae
 8015718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801571c:	695b      	ldr	r3, [r3, #20]
 801571e:	7afa      	ldrb	r2, [r7, #11]
 8015720:	4611      	mov	r1, r2
 8015722:	68f8      	ldr	r0, [r7, #12]
 8015724:	4798      	blx	r3
 8015726:	4603      	mov	r3, r0
 8015728:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801572a:	7dbb      	ldrb	r3, [r7, #22]
 801572c:	2b00      	cmp	r3, #0
 801572e:	d001      	beq.n	8015734 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8015730:	7dbb      	ldrb	r3, [r7, #22]
 8015732:	e000      	b.n	8015736 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8015734:	2300      	movs	r3, #0
}
 8015736:	4618      	mov	r0, r3
 8015738:	3718      	adds	r7, #24
 801573a:	46bd      	mov	sp, r7
 801573c:	bd80      	pop	{r7, pc}

0801573e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801573e:	b580      	push	{r7, lr}
 8015740:	b084      	sub	sp, #16
 8015742:	af00      	add	r7, sp, #0
 8015744:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8015746:	2300      	movs	r3, #0
 8015748:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	2201      	movs	r2, #1
 801574e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	2200      	movs	r2, #0
 8015756:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	2200      	movs	r2, #0
 801575e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	2200      	movs	r2, #0
 8015764:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	2200      	movs	r2, #0
 801576c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015776:	2b00      	cmp	r3, #0
 8015778:	d014      	beq.n	80157a4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015780:	685b      	ldr	r3, [r3, #4]
 8015782:	2b00      	cmp	r3, #0
 8015784:	d00e      	beq.n	80157a4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801578c:	685b      	ldr	r3, [r3, #4]
 801578e:	687a      	ldr	r2, [r7, #4]
 8015790:	6852      	ldr	r2, [r2, #4]
 8015792:	b2d2      	uxtb	r2, r2
 8015794:	4611      	mov	r1, r2
 8015796:	6878      	ldr	r0, [r7, #4]
 8015798:	4798      	blx	r3
 801579a:	4603      	mov	r3, r0
 801579c:	2b00      	cmp	r3, #0
 801579e:	d001      	beq.n	80157a4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80157a0:	2303      	movs	r3, #3
 80157a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80157a4:	2340      	movs	r3, #64	; 0x40
 80157a6:	2200      	movs	r2, #0
 80157a8:	2100      	movs	r1, #0
 80157aa:	6878      	ldr	r0, [r7, #4]
 80157ac:	f005 f94d 	bl	801aa4a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	2201      	movs	r2, #1
 80157b4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	2240      	movs	r2, #64	; 0x40
 80157bc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80157c0:	2340      	movs	r3, #64	; 0x40
 80157c2:	2200      	movs	r2, #0
 80157c4:	2180      	movs	r1, #128	; 0x80
 80157c6:	6878      	ldr	r0, [r7, #4]
 80157c8:	f005 f93f 	bl	801aa4a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	2201      	movs	r2, #1
 80157d0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	2240      	movs	r2, #64	; 0x40
 80157d6:	621a      	str	r2, [r3, #32]

  return ret;
 80157d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80157da:	4618      	mov	r0, r3
 80157dc:	3710      	adds	r7, #16
 80157de:	46bd      	mov	sp, r7
 80157e0:	bd80      	pop	{r7, pc}

080157e2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80157e2:	b480      	push	{r7}
 80157e4:	b083      	sub	sp, #12
 80157e6:	af00      	add	r7, sp, #0
 80157e8:	6078      	str	r0, [r7, #4]
 80157ea:	460b      	mov	r3, r1
 80157ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	78fa      	ldrb	r2, [r7, #3]
 80157f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80157f4:	2300      	movs	r3, #0
}
 80157f6:	4618      	mov	r0, r3
 80157f8:	370c      	adds	r7, #12
 80157fa:	46bd      	mov	sp, r7
 80157fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015800:	4770      	bx	lr

08015802 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015802:	b480      	push	{r7}
 8015804:	b083      	sub	sp, #12
 8015806:	af00      	add	r7, sp, #0
 8015808:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015810:	b2da      	uxtb	r2, r3
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	2204      	movs	r2, #4
 801581c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015820:	2300      	movs	r3, #0
}
 8015822:	4618      	mov	r0, r3
 8015824:	370c      	adds	r7, #12
 8015826:	46bd      	mov	sp, r7
 8015828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801582c:	4770      	bx	lr

0801582e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801582e:	b480      	push	{r7}
 8015830:	b083      	sub	sp, #12
 8015832:	af00      	add	r7, sp, #0
 8015834:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801583c:	b2db      	uxtb	r3, r3
 801583e:	2b04      	cmp	r3, #4
 8015840:	d106      	bne.n	8015850 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8015848:	b2da      	uxtb	r2, r3
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015850:	2300      	movs	r3, #0
}
 8015852:	4618      	mov	r0, r3
 8015854:	370c      	adds	r7, #12
 8015856:	46bd      	mov	sp, r7
 8015858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801585c:	4770      	bx	lr

0801585e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801585e:	b580      	push	{r7, lr}
 8015860:	b082      	sub	sp, #8
 8015862:	af00      	add	r7, sp, #0
 8015864:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801586c:	b2db      	uxtb	r3, r3
 801586e:	2b03      	cmp	r3, #3
 8015870:	d110      	bne.n	8015894 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015878:	2b00      	cmp	r3, #0
 801587a:	d00b      	beq.n	8015894 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015882:	69db      	ldr	r3, [r3, #28]
 8015884:	2b00      	cmp	r3, #0
 8015886:	d005      	beq.n	8015894 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801588e:	69db      	ldr	r3, [r3, #28]
 8015890:	6878      	ldr	r0, [r7, #4]
 8015892:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015894:	2300      	movs	r3, #0
}
 8015896:	4618      	mov	r0, r3
 8015898:	3708      	adds	r7, #8
 801589a:	46bd      	mov	sp, r7
 801589c:	bd80      	pop	{r7, pc}

0801589e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801589e:	b580      	push	{r7, lr}
 80158a0:	b082      	sub	sp, #8
 80158a2:	af00      	add	r7, sp, #0
 80158a4:	6078      	str	r0, [r7, #4]
 80158a6:	460b      	mov	r3, r1
 80158a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	32ae      	adds	r2, #174	; 0xae
 80158b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d101      	bne.n	80158c0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80158bc:	2303      	movs	r3, #3
 80158be:	e01c      	b.n	80158fa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80158c6:	b2db      	uxtb	r3, r3
 80158c8:	2b03      	cmp	r3, #3
 80158ca:	d115      	bne.n	80158f8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	32ae      	adds	r2, #174	; 0xae
 80158d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158da:	6a1b      	ldr	r3, [r3, #32]
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d00b      	beq.n	80158f8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	32ae      	adds	r2, #174	; 0xae
 80158ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158ee:	6a1b      	ldr	r3, [r3, #32]
 80158f0:	78fa      	ldrb	r2, [r7, #3]
 80158f2:	4611      	mov	r1, r2
 80158f4:	6878      	ldr	r0, [r7, #4]
 80158f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80158f8:	2300      	movs	r3, #0
}
 80158fa:	4618      	mov	r0, r3
 80158fc:	3708      	adds	r7, #8
 80158fe:	46bd      	mov	sp, r7
 8015900:	bd80      	pop	{r7, pc}

08015902 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015902:	b580      	push	{r7, lr}
 8015904:	b082      	sub	sp, #8
 8015906:	af00      	add	r7, sp, #0
 8015908:	6078      	str	r0, [r7, #4]
 801590a:	460b      	mov	r3, r1
 801590c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	32ae      	adds	r2, #174	; 0xae
 8015918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d101      	bne.n	8015924 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015920:	2303      	movs	r3, #3
 8015922:	e01c      	b.n	801595e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801592a:	b2db      	uxtb	r3, r3
 801592c:	2b03      	cmp	r3, #3
 801592e:	d115      	bne.n	801595c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	32ae      	adds	r2, #174	; 0xae
 801593a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801593e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015940:	2b00      	cmp	r3, #0
 8015942:	d00b      	beq.n	801595c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	32ae      	adds	r2, #174	; 0xae
 801594e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015954:	78fa      	ldrb	r2, [r7, #3]
 8015956:	4611      	mov	r1, r2
 8015958:	6878      	ldr	r0, [r7, #4]
 801595a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801595c:	2300      	movs	r3, #0
}
 801595e:	4618      	mov	r0, r3
 8015960:	3708      	adds	r7, #8
 8015962:	46bd      	mov	sp, r7
 8015964:	bd80      	pop	{r7, pc}

08015966 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8015966:	b480      	push	{r7}
 8015968:	b083      	sub	sp, #12
 801596a:	af00      	add	r7, sp, #0
 801596c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801596e:	2300      	movs	r3, #0
}
 8015970:	4618      	mov	r0, r3
 8015972:	370c      	adds	r7, #12
 8015974:	46bd      	mov	sp, r7
 8015976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801597a:	4770      	bx	lr

0801597c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801597c:	b580      	push	{r7, lr}
 801597e:	b084      	sub	sp, #16
 8015980:	af00      	add	r7, sp, #0
 8015982:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8015984:	2300      	movs	r3, #0
 8015986:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	2201      	movs	r2, #1
 801598c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015996:	2b00      	cmp	r3, #0
 8015998:	d00e      	beq.n	80159b8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80159a0:	685b      	ldr	r3, [r3, #4]
 80159a2:	687a      	ldr	r2, [r7, #4]
 80159a4:	6852      	ldr	r2, [r2, #4]
 80159a6:	b2d2      	uxtb	r2, r2
 80159a8:	4611      	mov	r1, r2
 80159aa:	6878      	ldr	r0, [r7, #4]
 80159ac:	4798      	blx	r3
 80159ae:	4603      	mov	r3, r0
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d001      	beq.n	80159b8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80159b4:	2303      	movs	r3, #3
 80159b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80159b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80159ba:	4618      	mov	r0, r3
 80159bc:	3710      	adds	r7, #16
 80159be:	46bd      	mov	sp, r7
 80159c0:	bd80      	pop	{r7, pc}

080159c2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80159c2:	b480      	push	{r7}
 80159c4:	b083      	sub	sp, #12
 80159c6:	af00      	add	r7, sp, #0
 80159c8:	6078      	str	r0, [r7, #4]
 80159ca:	460b      	mov	r3, r1
 80159cc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80159ce:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80159d0:	4618      	mov	r0, r3
 80159d2:	370c      	adds	r7, #12
 80159d4:	46bd      	mov	sp, r7
 80159d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159da:	4770      	bx	lr

080159dc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80159dc:	b480      	push	{r7}
 80159de:	b083      	sub	sp, #12
 80159e0:	af00      	add	r7, sp, #0
 80159e2:	6078      	str	r0, [r7, #4]
 80159e4:	460b      	mov	r3, r1
 80159e6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80159e8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80159ea:	4618      	mov	r0, r3
 80159ec:	370c      	adds	r7, #12
 80159ee:	46bd      	mov	sp, r7
 80159f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159f4:	4770      	bx	lr

080159f6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80159f6:	b580      	push	{r7, lr}
 80159f8:	b086      	sub	sp, #24
 80159fa:	af00      	add	r7, sp, #0
 80159fc:	6078      	str	r0, [r7, #4]
 80159fe:	460b      	mov	r3, r1
 8015a00:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8015a0a:	2300      	movs	r3, #0
 8015a0c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8015a0e:	68fb      	ldr	r3, [r7, #12]
 8015a10:	885b      	ldrh	r3, [r3, #2]
 8015a12:	b29a      	uxth	r2, r3
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	781b      	ldrb	r3, [r3, #0]
 8015a18:	b29b      	uxth	r3, r3
 8015a1a:	429a      	cmp	r2, r3
 8015a1c:	d920      	bls.n	8015a60 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	781b      	ldrb	r3, [r3, #0]
 8015a22:	b29b      	uxth	r3, r3
 8015a24:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8015a26:	e013      	b.n	8015a50 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015a28:	f107 030a 	add.w	r3, r7, #10
 8015a2c:	4619      	mov	r1, r3
 8015a2e:	6978      	ldr	r0, [r7, #20]
 8015a30:	f000 f81b 	bl	8015a6a <USBD_GetNextDesc>
 8015a34:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015a36:	697b      	ldr	r3, [r7, #20]
 8015a38:	785b      	ldrb	r3, [r3, #1]
 8015a3a:	2b05      	cmp	r3, #5
 8015a3c:	d108      	bne.n	8015a50 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8015a3e:	697b      	ldr	r3, [r7, #20]
 8015a40:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8015a42:	693b      	ldr	r3, [r7, #16]
 8015a44:	789b      	ldrb	r3, [r3, #2]
 8015a46:	78fa      	ldrb	r2, [r7, #3]
 8015a48:	429a      	cmp	r2, r3
 8015a4a:	d008      	beq.n	8015a5e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8015a4c:	2300      	movs	r3, #0
 8015a4e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	885b      	ldrh	r3, [r3, #2]
 8015a54:	b29a      	uxth	r2, r3
 8015a56:	897b      	ldrh	r3, [r7, #10]
 8015a58:	429a      	cmp	r2, r3
 8015a5a:	d8e5      	bhi.n	8015a28 <USBD_GetEpDesc+0x32>
 8015a5c:	e000      	b.n	8015a60 <USBD_GetEpDesc+0x6a>
          break;
 8015a5e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8015a60:	693b      	ldr	r3, [r7, #16]
}
 8015a62:	4618      	mov	r0, r3
 8015a64:	3718      	adds	r7, #24
 8015a66:	46bd      	mov	sp, r7
 8015a68:	bd80      	pop	{r7, pc}

08015a6a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8015a6a:	b480      	push	{r7}
 8015a6c:	b085      	sub	sp, #20
 8015a6e:	af00      	add	r7, sp, #0
 8015a70:	6078      	str	r0, [r7, #4]
 8015a72:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8015a78:	683b      	ldr	r3, [r7, #0]
 8015a7a:	881a      	ldrh	r2, [r3, #0]
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	781b      	ldrb	r3, [r3, #0]
 8015a80:	b29b      	uxth	r3, r3
 8015a82:	4413      	add	r3, r2
 8015a84:	b29a      	uxth	r2, r3
 8015a86:	683b      	ldr	r3, [r7, #0]
 8015a88:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8015a8a:	68fb      	ldr	r3, [r7, #12]
 8015a8c:	781b      	ldrb	r3, [r3, #0]
 8015a8e:	461a      	mov	r2, r3
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	4413      	add	r3, r2
 8015a94:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8015a96:	68fb      	ldr	r3, [r7, #12]
}
 8015a98:	4618      	mov	r0, r3
 8015a9a:	3714      	adds	r7, #20
 8015a9c:	46bd      	mov	sp, r7
 8015a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aa2:	4770      	bx	lr

08015aa4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015aa4:	b480      	push	{r7}
 8015aa6:	b087      	sub	sp, #28
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015ab0:	697b      	ldr	r3, [r7, #20]
 8015ab2:	781b      	ldrb	r3, [r3, #0]
 8015ab4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015ab6:	697b      	ldr	r3, [r7, #20]
 8015ab8:	3301      	adds	r3, #1
 8015aba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015abc:	697b      	ldr	r3, [r7, #20]
 8015abe:	781b      	ldrb	r3, [r3, #0]
 8015ac0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015ac2:	8a3b      	ldrh	r3, [r7, #16]
 8015ac4:	021b      	lsls	r3, r3, #8
 8015ac6:	b21a      	sxth	r2, r3
 8015ac8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015acc:	4313      	orrs	r3, r2
 8015ace:	b21b      	sxth	r3, r3
 8015ad0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015ad2:	89fb      	ldrh	r3, [r7, #14]
}
 8015ad4:	4618      	mov	r0, r3
 8015ad6:	371c      	adds	r7, #28
 8015ad8:	46bd      	mov	sp, r7
 8015ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ade:	4770      	bx	lr

08015ae0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ae0:	b580      	push	{r7, lr}
 8015ae2:	b084      	sub	sp, #16
 8015ae4:	af00      	add	r7, sp, #0
 8015ae6:	6078      	str	r0, [r7, #4]
 8015ae8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015aea:	2300      	movs	r3, #0
 8015aec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015aee:	683b      	ldr	r3, [r7, #0]
 8015af0:	781b      	ldrb	r3, [r3, #0]
 8015af2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015af6:	2b40      	cmp	r3, #64	; 0x40
 8015af8:	d005      	beq.n	8015b06 <USBD_StdDevReq+0x26>
 8015afa:	2b40      	cmp	r3, #64	; 0x40
 8015afc:	d857      	bhi.n	8015bae <USBD_StdDevReq+0xce>
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d00f      	beq.n	8015b22 <USBD_StdDevReq+0x42>
 8015b02:	2b20      	cmp	r3, #32
 8015b04:	d153      	bne.n	8015bae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	32ae      	adds	r2, #174	; 0xae
 8015b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b14:	689b      	ldr	r3, [r3, #8]
 8015b16:	6839      	ldr	r1, [r7, #0]
 8015b18:	6878      	ldr	r0, [r7, #4]
 8015b1a:	4798      	blx	r3
 8015b1c:	4603      	mov	r3, r0
 8015b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8015b20:	e04a      	b.n	8015bb8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015b22:	683b      	ldr	r3, [r7, #0]
 8015b24:	785b      	ldrb	r3, [r3, #1]
 8015b26:	2b09      	cmp	r3, #9
 8015b28:	d83b      	bhi.n	8015ba2 <USBD_StdDevReq+0xc2>
 8015b2a:	a201      	add	r2, pc, #4	; (adr r2, 8015b30 <USBD_StdDevReq+0x50>)
 8015b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b30:	08015b85 	.word	0x08015b85
 8015b34:	08015b99 	.word	0x08015b99
 8015b38:	08015ba3 	.word	0x08015ba3
 8015b3c:	08015b8f 	.word	0x08015b8f
 8015b40:	08015ba3 	.word	0x08015ba3
 8015b44:	08015b63 	.word	0x08015b63
 8015b48:	08015b59 	.word	0x08015b59
 8015b4c:	08015ba3 	.word	0x08015ba3
 8015b50:	08015b7b 	.word	0x08015b7b
 8015b54:	08015b6d 	.word	0x08015b6d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015b58:	6839      	ldr	r1, [r7, #0]
 8015b5a:	6878      	ldr	r0, [r7, #4]
 8015b5c:	f000 fa3c 	bl	8015fd8 <USBD_GetDescriptor>
          break;
 8015b60:	e024      	b.n	8015bac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015b62:	6839      	ldr	r1, [r7, #0]
 8015b64:	6878      	ldr	r0, [r7, #4]
 8015b66:	f000 fba1 	bl	80162ac <USBD_SetAddress>
          break;
 8015b6a:	e01f      	b.n	8015bac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015b6c:	6839      	ldr	r1, [r7, #0]
 8015b6e:	6878      	ldr	r0, [r7, #4]
 8015b70:	f000 fbe0 	bl	8016334 <USBD_SetConfig>
 8015b74:	4603      	mov	r3, r0
 8015b76:	73fb      	strb	r3, [r7, #15]
          break;
 8015b78:	e018      	b.n	8015bac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015b7a:	6839      	ldr	r1, [r7, #0]
 8015b7c:	6878      	ldr	r0, [r7, #4]
 8015b7e:	f000 fc83 	bl	8016488 <USBD_GetConfig>
          break;
 8015b82:	e013      	b.n	8015bac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015b84:	6839      	ldr	r1, [r7, #0]
 8015b86:	6878      	ldr	r0, [r7, #4]
 8015b88:	f000 fcb4 	bl	80164f4 <USBD_GetStatus>
          break;
 8015b8c:	e00e      	b.n	8015bac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015b8e:	6839      	ldr	r1, [r7, #0]
 8015b90:	6878      	ldr	r0, [r7, #4]
 8015b92:	f000 fce3 	bl	801655c <USBD_SetFeature>
          break;
 8015b96:	e009      	b.n	8015bac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015b98:	6839      	ldr	r1, [r7, #0]
 8015b9a:	6878      	ldr	r0, [r7, #4]
 8015b9c:	f000 fd07 	bl	80165ae <USBD_ClrFeature>
          break;
 8015ba0:	e004      	b.n	8015bac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015ba2:	6839      	ldr	r1, [r7, #0]
 8015ba4:	6878      	ldr	r0, [r7, #4]
 8015ba6:	f000 fd5e 	bl	8016666 <USBD_CtlError>
          break;
 8015baa:	bf00      	nop
      }
      break;
 8015bac:	e004      	b.n	8015bb8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8015bae:	6839      	ldr	r1, [r7, #0]
 8015bb0:	6878      	ldr	r0, [r7, #4]
 8015bb2:	f000 fd58 	bl	8016666 <USBD_CtlError>
      break;
 8015bb6:	bf00      	nop
  }

  return ret;
 8015bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8015bba:	4618      	mov	r0, r3
 8015bbc:	3710      	adds	r7, #16
 8015bbe:	46bd      	mov	sp, r7
 8015bc0:	bd80      	pop	{r7, pc}
 8015bc2:	bf00      	nop

08015bc4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015bc4:	b580      	push	{r7, lr}
 8015bc6:	b084      	sub	sp, #16
 8015bc8:	af00      	add	r7, sp, #0
 8015bca:	6078      	str	r0, [r7, #4]
 8015bcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015bce:	2300      	movs	r3, #0
 8015bd0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015bd2:	683b      	ldr	r3, [r7, #0]
 8015bd4:	781b      	ldrb	r3, [r3, #0]
 8015bd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015bda:	2b40      	cmp	r3, #64	; 0x40
 8015bdc:	d005      	beq.n	8015bea <USBD_StdItfReq+0x26>
 8015bde:	2b40      	cmp	r3, #64	; 0x40
 8015be0:	d852      	bhi.n	8015c88 <USBD_StdItfReq+0xc4>
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d001      	beq.n	8015bea <USBD_StdItfReq+0x26>
 8015be6:	2b20      	cmp	r3, #32
 8015be8:	d14e      	bne.n	8015c88 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015bf0:	b2db      	uxtb	r3, r3
 8015bf2:	3b01      	subs	r3, #1
 8015bf4:	2b02      	cmp	r3, #2
 8015bf6:	d840      	bhi.n	8015c7a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015bf8:	683b      	ldr	r3, [r7, #0]
 8015bfa:	889b      	ldrh	r3, [r3, #4]
 8015bfc:	b2db      	uxtb	r3, r3
 8015bfe:	2b01      	cmp	r3, #1
 8015c00:	d836      	bhi.n	8015c70 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015c02:	683b      	ldr	r3, [r7, #0]
 8015c04:	889b      	ldrh	r3, [r3, #4]
 8015c06:	b2db      	uxtb	r3, r3
 8015c08:	4619      	mov	r1, r3
 8015c0a:	6878      	ldr	r0, [r7, #4]
 8015c0c:	f7ff fed9 	bl	80159c2 <USBD_CoreFindIF>
 8015c10:	4603      	mov	r3, r0
 8015c12:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015c14:	7bbb      	ldrb	r3, [r7, #14]
 8015c16:	2bff      	cmp	r3, #255	; 0xff
 8015c18:	d01d      	beq.n	8015c56 <USBD_StdItfReq+0x92>
 8015c1a:	7bbb      	ldrb	r3, [r7, #14]
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d11a      	bne.n	8015c56 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015c20:	7bba      	ldrb	r2, [r7, #14]
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	32ae      	adds	r2, #174	; 0xae
 8015c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c2a:	689b      	ldr	r3, [r3, #8]
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d00f      	beq.n	8015c50 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015c30:	7bba      	ldrb	r2, [r7, #14]
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015c38:	7bba      	ldrb	r2, [r7, #14]
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	32ae      	adds	r2, #174	; 0xae
 8015c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c42:	689b      	ldr	r3, [r3, #8]
 8015c44:	6839      	ldr	r1, [r7, #0]
 8015c46:	6878      	ldr	r0, [r7, #4]
 8015c48:	4798      	blx	r3
 8015c4a:	4603      	mov	r3, r0
 8015c4c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015c4e:	e004      	b.n	8015c5a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015c50:	2303      	movs	r3, #3
 8015c52:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015c54:	e001      	b.n	8015c5a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8015c56:	2303      	movs	r3, #3
 8015c58:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015c5a:	683b      	ldr	r3, [r7, #0]
 8015c5c:	88db      	ldrh	r3, [r3, #6]
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d110      	bne.n	8015c84 <USBD_StdItfReq+0xc0>
 8015c62:	7bfb      	ldrb	r3, [r7, #15]
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d10d      	bne.n	8015c84 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015c68:	6878      	ldr	r0, [r7, #4]
 8015c6a:	f000 fdaa 	bl	80167c2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015c6e:	e009      	b.n	8015c84 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015c70:	6839      	ldr	r1, [r7, #0]
 8015c72:	6878      	ldr	r0, [r7, #4]
 8015c74:	f000 fcf7 	bl	8016666 <USBD_CtlError>
          break;
 8015c78:	e004      	b.n	8015c84 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8015c7a:	6839      	ldr	r1, [r7, #0]
 8015c7c:	6878      	ldr	r0, [r7, #4]
 8015c7e:	f000 fcf2 	bl	8016666 <USBD_CtlError>
          break;
 8015c82:	e000      	b.n	8015c86 <USBD_StdItfReq+0xc2>
          break;
 8015c84:	bf00      	nop
      }
      break;
 8015c86:	e004      	b.n	8015c92 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8015c88:	6839      	ldr	r1, [r7, #0]
 8015c8a:	6878      	ldr	r0, [r7, #4]
 8015c8c:	f000 fceb 	bl	8016666 <USBD_CtlError>
      break;
 8015c90:	bf00      	nop
  }

  return ret;
 8015c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c94:	4618      	mov	r0, r3
 8015c96:	3710      	adds	r7, #16
 8015c98:	46bd      	mov	sp, r7
 8015c9a:	bd80      	pop	{r7, pc}

08015c9c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015c9c:	b580      	push	{r7, lr}
 8015c9e:	b084      	sub	sp, #16
 8015ca0:	af00      	add	r7, sp, #0
 8015ca2:	6078      	str	r0, [r7, #4]
 8015ca4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8015ca6:	2300      	movs	r3, #0
 8015ca8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8015caa:	683b      	ldr	r3, [r7, #0]
 8015cac:	889b      	ldrh	r3, [r3, #4]
 8015cae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015cb0:	683b      	ldr	r3, [r7, #0]
 8015cb2:	781b      	ldrb	r3, [r3, #0]
 8015cb4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015cb8:	2b40      	cmp	r3, #64	; 0x40
 8015cba:	d007      	beq.n	8015ccc <USBD_StdEPReq+0x30>
 8015cbc:	2b40      	cmp	r3, #64	; 0x40
 8015cbe:	f200 817f 	bhi.w	8015fc0 <USBD_StdEPReq+0x324>
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d02a      	beq.n	8015d1c <USBD_StdEPReq+0x80>
 8015cc6:	2b20      	cmp	r3, #32
 8015cc8:	f040 817a 	bne.w	8015fc0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8015ccc:	7bbb      	ldrb	r3, [r7, #14]
 8015cce:	4619      	mov	r1, r3
 8015cd0:	6878      	ldr	r0, [r7, #4]
 8015cd2:	f7ff fe83 	bl	80159dc <USBD_CoreFindEP>
 8015cd6:	4603      	mov	r3, r0
 8015cd8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015cda:	7b7b      	ldrb	r3, [r7, #13]
 8015cdc:	2bff      	cmp	r3, #255	; 0xff
 8015cde:	f000 8174 	beq.w	8015fca <USBD_StdEPReq+0x32e>
 8015ce2:	7b7b      	ldrb	r3, [r7, #13]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	f040 8170 	bne.w	8015fca <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8015cea:	7b7a      	ldrb	r2, [r7, #13]
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015cf2:	7b7a      	ldrb	r2, [r7, #13]
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	32ae      	adds	r2, #174	; 0xae
 8015cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cfc:	689b      	ldr	r3, [r3, #8]
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	f000 8163 	beq.w	8015fca <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015d04:	7b7a      	ldrb	r2, [r7, #13]
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	32ae      	adds	r2, #174	; 0xae
 8015d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d0e:	689b      	ldr	r3, [r3, #8]
 8015d10:	6839      	ldr	r1, [r7, #0]
 8015d12:	6878      	ldr	r0, [r7, #4]
 8015d14:	4798      	blx	r3
 8015d16:	4603      	mov	r3, r0
 8015d18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015d1a:	e156      	b.n	8015fca <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015d1c:	683b      	ldr	r3, [r7, #0]
 8015d1e:	785b      	ldrb	r3, [r3, #1]
 8015d20:	2b03      	cmp	r3, #3
 8015d22:	d008      	beq.n	8015d36 <USBD_StdEPReq+0x9a>
 8015d24:	2b03      	cmp	r3, #3
 8015d26:	f300 8145 	bgt.w	8015fb4 <USBD_StdEPReq+0x318>
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	f000 809b 	beq.w	8015e66 <USBD_StdEPReq+0x1ca>
 8015d30:	2b01      	cmp	r3, #1
 8015d32:	d03c      	beq.n	8015dae <USBD_StdEPReq+0x112>
 8015d34:	e13e      	b.n	8015fb4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015d3c:	b2db      	uxtb	r3, r3
 8015d3e:	2b02      	cmp	r3, #2
 8015d40:	d002      	beq.n	8015d48 <USBD_StdEPReq+0xac>
 8015d42:	2b03      	cmp	r3, #3
 8015d44:	d016      	beq.n	8015d74 <USBD_StdEPReq+0xd8>
 8015d46:	e02c      	b.n	8015da2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015d48:	7bbb      	ldrb	r3, [r7, #14]
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d00d      	beq.n	8015d6a <USBD_StdEPReq+0xce>
 8015d4e:	7bbb      	ldrb	r3, [r7, #14]
 8015d50:	2b80      	cmp	r3, #128	; 0x80
 8015d52:	d00a      	beq.n	8015d6a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015d54:	7bbb      	ldrb	r3, [r7, #14]
 8015d56:	4619      	mov	r1, r3
 8015d58:	6878      	ldr	r0, [r7, #4]
 8015d5a:	f004 feda 	bl	801ab12 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015d5e:	2180      	movs	r1, #128	; 0x80
 8015d60:	6878      	ldr	r0, [r7, #4]
 8015d62:	f004 fed6 	bl	801ab12 <USBD_LL_StallEP>
 8015d66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015d68:	e020      	b.n	8015dac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8015d6a:	6839      	ldr	r1, [r7, #0]
 8015d6c:	6878      	ldr	r0, [r7, #4]
 8015d6e:	f000 fc7a 	bl	8016666 <USBD_CtlError>
              break;
 8015d72:	e01b      	b.n	8015dac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015d74:	683b      	ldr	r3, [r7, #0]
 8015d76:	885b      	ldrh	r3, [r3, #2]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d10e      	bne.n	8015d9a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015d7c:	7bbb      	ldrb	r3, [r7, #14]
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d00b      	beq.n	8015d9a <USBD_StdEPReq+0xfe>
 8015d82:	7bbb      	ldrb	r3, [r7, #14]
 8015d84:	2b80      	cmp	r3, #128	; 0x80
 8015d86:	d008      	beq.n	8015d9a <USBD_StdEPReq+0xfe>
 8015d88:	683b      	ldr	r3, [r7, #0]
 8015d8a:	88db      	ldrh	r3, [r3, #6]
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d104      	bne.n	8015d9a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015d90:	7bbb      	ldrb	r3, [r7, #14]
 8015d92:	4619      	mov	r1, r3
 8015d94:	6878      	ldr	r0, [r7, #4]
 8015d96:	f004 febc 	bl	801ab12 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015d9a:	6878      	ldr	r0, [r7, #4]
 8015d9c:	f000 fd11 	bl	80167c2 <USBD_CtlSendStatus>

              break;
 8015da0:	e004      	b.n	8015dac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015da2:	6839      	ldr	r1, [r7, #0]
 8015da4:	6878      	ldr	r0, [r7, #4]
 8015da6:	f000 fc5e 	bl	8016666 <USBD_CtlError>
              break;
 8015daa:	bf00      	nop
          }
          break;
 8015dac:	e107      	b.n	8015fbe <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015db4:	b2db      	uxtb	r3, r3
 8015db6:	2b02      	cmp	r3, #2
 8015db8:	d002      	beq.n	8015dc0 <USBD_StdEPReq+0x124>
 8015dba:	2b03      	cmp	r3, #3
 8015dbc:	d016      	beq.n	8015dec <USBD_StdEPReq+0x150>
 8015dbe:	e04b      	b.n	8015e58 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015dc0:	7bbb      	ldrb	r3, [r7, #14]
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d00d      	beq.n	8015de2 <USBD_StdEPReq+0x146>
 8015dc6:	7bbb      	ldrb	r3, [r7, #14]
 8015dc8:	2b80      	cmp	r3, #128	; 0x80
 8015dca:	d00a      	beq.n	8015de2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015dcc:	7bbb      	ldrb	r3, [r7, #14]
 8015dce:	4619      	mov	r1, r3
 8015dd0:	6878      	ldr	r0, [r7, #4]
 8015dd2:	f004 fe9e 	bl	801ab12 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015dd6:	2180      	movs	r1, #128	; 0x80
 8015dd8:	6878      	ldr	r0, [r7, #4]
 8015dda:	f004 fe9a 	bl	801ab12 <USBD_LL_StallEP>
 8015dde:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015de0:	e040      	b.n	8015e64 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015de2:	6839      	ldr	r1, [r7, #0]
 8015de4:	6878      	ldr	r0, [r7, #4]
 8015de6:	f000 fc3e 	bl	8016666 <USBD_CtlError>
              break;
 8015dea:	e03b      	b.n	8015e64 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015dec:	683b      	ldr	r3, [r7, #0]
 8015dee:	885b      	ldrh	r3, [r3, #2]
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d136      	bne.n	8015e62 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015df4:	7bbb      	ldrb	r3, [r7, #14]
 8015df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	d004      	beq.n	8015e08 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015dfe:	7bbb      	ldrb	r3, [r7, #14]
 8015e00:	4619      	mov	r1, r3
 8015e02:	6878      	ldr	r0, [r7, #4]
 8015e04:	f004 fea4 	bl	801ab50 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015e08:	6878      	ldr	r0, [r7, #4]
 8015e0a:	f000 fcda 	bl	80167c2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8015e0e:	7bbb      	ldrb	r3, [r7, #14]
 8015e10:	4619      	mov	r1, r3
 8015e12:	6878      	ldr	r0, [r7, #4]
 8015e14:	f7ff fde2 	bl	80159dc <USBD_CoreFindEP>
 8015e18:	4603      	mov	r3, r0
 8015e1a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015e1c:	7b7b      	ldrb	r3, [r7, #13]
 8015e1e:	2bff      	cmp	r3, #255	; 0xff
 8015e20:	d01f      	beq.n	8015e62 <USBD_StdEPReq+0x1c6>
 8015e22:	7b7b      	ldrb	r3, [r7, #13]
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d11c      	bne.n	8015e62 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015e28:	7b7a      	ldrb	r2, [r7, #13]
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015e30:	7b7a      	ldrb	r2, [r7, #13]
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	32ae      	adds	r2, #174	; 0xae
 8015e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e3a:	689b      	ldr	r3, [r3, #8]
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d010      	beq.n	8015e62 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015e40:	7b7a      	ldrb	r2, [r7, #13]
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	32ae      	adds	r2, #174	; 0xae
 8015e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e4a:	689b      	ldr	r3, [r3, #8]
 8015e4c:	6839      	ldr	r1, [r7, #0]
 8015e4e:	6878      	ldr	r0, [r7, #4]
 8015e50:	4798      	blx	r3
 8015e52:	4603      	mov	r3, r0
 8015e54:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015e56:	e004      	b.n	8015e62 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015e58:	6839      	ldr	r1, [r7, #0]
 8015e5a:	6878      	ldr	r0, [r7, #4]
 8015e5c:	f000 fc03 	bl	8016666 <USBD_CtlError>
              break;
 8015e60:	e000      	b.n	8015e64 <USBD_StdEPReq+0x1c8>
              break;
 8015e62:	bf00      	nop
          }
          break;
 8015e64:	e0ab      	b.n	8015fbe <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015e6c:	b2db      	uxtb	r3, r3
 8015e6e:	2b02      	cmp	r3, #2
 8015e70:	d002      	beq.n	8015e78 <USBD_StdEPReq+0x1dc>
 8015e72:	2b03      	cmp	r3, #3
 8015e74:	d032      	beq.n	8015edc <USBD_StdEPReq+0x240>
 8015e76:	e097      	b.n	8015fa8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015e78:	7bbb      	ldrb	r3, [r7, #14]
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d007      	beq.n	8015e8e <USBD_StdEPReq+0x1f2>
 8015e7e:	7bbb      	ldrb	r3, [r7, #14]
 8015e80:	2b80      	cmp	r3, #128	; 0x80
 8015e82:	d004      	beq.n	8015e8e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015e84:	6839      	ldr	r1, [r7, #0]
 8015e86:	6878      	ldr	r0, [r7, #4]
 8015e88:	f000 fbed 	bl	8016666 <USBD_CtlError>
                break;
 8015e8c:	e091      	b.n	8015fb2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015e8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	da0b      	bge.n	8015eae <USBD_StdEPReq+0x212>
 8015e96:	7bbb      	ldrb	r3, [r7, #14]
 8015e98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015e9c:	4613      	mov	r3, r2
 8015e9e:	009b      	lsls	r3, r3, #2
 8015ea0:	4413      	add	r3, r2
 8015ea2:	009b      	lsls	r3, r3, #2
 8015ea4:	3310      	adds	r3, #16
 8015ea6:	687a      	ldr	r2, [r7, #4]
 8015ea8:	4413      	add	r3, r2
 8015eaa:	3304      	adds	r3, #4
 8015eac:	e00b      	b.n	8015ec6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015eae:	7bbb      	ldrb	r3, [r7, #14]
 8015eb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015eb4:	4613      	mov	r3, r2
 8015eb6:	009b      	lsls	r3, r3, #2
 8015eb8:	4413      	add	r3, r2
 8015eba:	009b      	lsls	r3, r3, #2
 8015ebc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015ec0:	687a      	ldr	r2, [r7, #4]
 8015ec2:	4413      	add	r3, r2
 8015ec4:	3304      	adds	r3, #4
 8015ec6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015ec8:	68bb      	ldr	r3, [r7, #8]
 8015eca:	2200      	movs	r2, #0
 8015ecc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015ece:	68bb      	ldr	r3, [r7, #8]
 8015ed0:	2202      	movs	r2, #2
 8015ed2:	4619      	mov	r1, r3
 8015ed4:	6878      	ldr	r0, [r7, #4]
 8015ed6:	f000 fc37 	bl	8016748 <USBD_CtlSendData>
              break;
 8015eda:	e06a      	b.n	8015fb2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015edc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	da11      	bge.n	8015f08 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015ee4:	7bbb      	ldrb	r3, [r7, #14]
 8015ee6:	f003 020f 	and.w	r2, r3, #15
 8015eea:	6879      	ldr	r1, [r7, #4]
 8015eec:	4613      	mov	r3, r2
 8015eee:	009b      	lsls	r3, r3, #2
 8015ef0:	4413      	add	r3, r2
 8015ef2:	009b      	lsls	r3, r3, #2
 8015ef4:	440b      	add	r3, r1
 8015ef6:	3324      	adds	r3, #36	; 0x24
 8015ef8:	881b      	ldrh	r3, [r3, #0]
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d117      	bne.n	8015f2e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015efe:	6839      	ldr	r1, [r7, #0]
 8015f00:	6878      	ldr	r0, [r7, #4]
 8015f02:	f000 fbb0 	bl	8016666 <USBD_CtlError>
                  break;
 8015f06:	e054      	b.n	8015fb2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015f08:	7bbb      	ldrb	r3, [r7, #14]
 8015f0a:	f003 020f 	and.w	r2, r3, #15
 8015f0e:	6879      	ldr	r1, [r7, #4]
 8015f10:	4613      	mov	r3, r2
 8015f12:	009b      	lsls	r3, r3, #2
 8015f14:	4413      	add	r3, r2
 8015f16:	009b      	lsls	r3, r3, #2
 8015f18:	440b      	add	r3, r1
 8015f1a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015f1e:	881b      	ldrh	r3, [r3, #0]
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d104      	bne.n	8015f2e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015f24:	6839      	ldr	r1, [r7, #0]
 8015f26:	6878      	ldr	r0, [r7, #4]
 8015f28:	f000 fb9d 	bl	8016666 <USBD_CtlError>
                  break;
 8015f2c:	e041      	b.n	8015fb2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015f2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	da0b      	bge.n	8015f4e <USBD_StdEPReq+0x2b2>
 8015f36:	7bbb      	ldrb	r3, [r7, #14]
 8015f38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015f3c:	4613      	mov	r3, r2
 8015f3e:	009b      	lsls	r3, r3, #2
 8015f40:	4413      	add	r3, r2
 8015f42:	009b      	lsls	r3, r3, #2
 8015f44:	3310      	adds	r3, #16
 8015f46:	687a      	ldr	r2, [r7, #4]
 8015f48:	4413      	add	r3, r2
 8015f4a:	3304      	adds	r3, #4
 8015f4c:	e00b      	b.n	8015f66 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015f4e:	7bbb      	ldrb	r3, [r7, #14]
 8015f50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015f54:	4613      	mov	r3, r2
 8015f56:	009b      	lsls	r3, r3, #2
 8015f58:	4413      	add	r3, r2
 8015f5a:	009b      	lsls	r3, r3, #2
 8015f5c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015f60:	687a      	ldr	r2, [r7, #4]
 8015f62:	4413      	add	r3, r2
 8015f64:	3304      	adds	r3, #4
 8015f66:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015f68:	7bbb      	ldrb	r3, [r7, #14]
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d002      	beq.n	8015f74 <USBD_StdEPReq+0x2d8>
 8015f6e:	7bbb      	ldrb	r3, [r7, #14]
 8015f70:	2b80      	cmp	r3, #128	; 0x80
 8015f72:	d103      	bne.n	8015f7c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015f74:	68bb      	ldr	r3, [r7, #8]
 8015f76:	2200      	movs	r2, #0
 8015f78:	601a      	str	r2, [r3, #0]
 8015f7a:	e00e      	b.n	8015f9a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015f7c:	7bbb      	ldrb	r3, [r7, #14]
 8015f7e:	4619      	mov	r1, r3
 8015f80:	6878      	ldr	r0, [r7, #4]
 8015f82:	f004 fe04 	bl	801ab8e <USBD_LL_IsStallEP>
 8015f86:	4603      	mov	r3, r0
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d003      	beq.n	8015f94 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015f8c:	68bb      	ldr	r3, [r7, #8]
 8015f8e:	2201      	movs	r2, #1
 8015f90:	601a      	str	r2, [r3, #0]
 8015f92:	e002      	b.n	8015f9a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015f94:	68bb      	ldr	r3, [r7, #8]
 8015f96:	2200      	movs	r2, #0
 8015f98:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015f9a:	68bb      	ldr	r3, [r7, #8]
 8015f9c:	2202      	movs	r2, #2
 8015f9e:	4619      	mov	r1, r3
 8015fa0:	6878      	ldr	r0, [r7, #4]
 8015fa2:	f000 fbd1 	bl	8016748 <USBD_CtlSendData>
              break;
 8015fa6:	e004      	b.n	8015fb2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015fa8:	6839      	ldr	r1, [r7, #0]
 8015faa:	6878      	ldr	r0, [r7, #4]
 8015fac:	f000 fb5b 	bl	8016666 <USBD_CtlError>
              break;
 8015fb0:	bf00      	nop
          }
          break;
 8015fb2:	e004      	b.n	8015fbe <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015fb4:	6839      	ldr	r1, [r7, #0]
 8015fb6:	6878      	ldr	r0, [r7, #4]
 8015fb8:	f000 fb55 	bl	8016666 <USBD_CtlError>
          break;
 8015fbc:	bf00      	nop
      }
      break;
 8015fbe:	e005      	b.n	8015fcc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015fc0:	6839      	ldr	r1, [r7, #0]
 8015fc2:	6878      	ldr	r0, [r7, #4]
 8015fc4:	f000 fb4f 	bl	8016666 <USBD_CtlError>
      break;
 8015fc8:	e000      	b.n	8015fcc <USBD_StdEPReq+0x330>
      break;
 8015fca:	bf00      	nop
  }

  return ret;
 8015fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fce:	4618      	mov	r0, r3
 8015fd0:	3710      	adds	r7, #16
 8015fd2:	46bd      	mov	sp, r7
 8015fd4:	bd80      	pop	{r7, pc}
	...

08015fd8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015fd8:	b580      	push	{r7, lr}
 8015fda:	b084      	sub	sp, #16
 8015fdc:	af00      	add	r7, sp, #0
 8015fde:	6078      	str	r0, [r7, #4]
 8015fe0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015fe2:	2300      	movs	r3, #0
 8015fe4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015fe6:	2300      	movs	r3, #0
 8015fe8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015fea:	2300      	movs	r3, #0
 8015fec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015fee:	683b      	ldr	r3, [r7, #0]
 8015ff0:	885b      	ldrh	r3, [r3, #2]
 8015ff2:	0a1b      	lsrs	r3, r3, #8
 8015ff4:	b29b      	uxth	r3, r3
 8015ff6:	3b01      	subs	r3, #1
 8015ff8:	2b06      	cmp	r3, #6
 8015ffa:	f200 8128 	bhi.w	801624e <USBD_GetDescriptor+0x276>
 8015ffe:	a201      	add	r2, pc, #4	; (adr r2, 8016004 <USBD_GetDescriptor+0x2c>)
 8016000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016004:	08016021 	.word	0x08016021
 8016008:	08016039 	.word	0x08016039
 801600c:	08016079 	.word	0x08016079
 8016010:	0801624f 	.word	0x0801624f
 8016014:	0801624f 	.word	0x0801624f
 8016018:	080161ef 	.word	0x080161ef
 801601c:	0801621b 	.word	0x0801621b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	687a      	ldr	r2, [r7, #4]
 801602a:	7c12      	ldrb	r2, [r2, #16]
 801602c:	f107 0108 	add.w	r1, r7, #8
 8016030:	4610      	mov	r0, r2
 8016032:	4798      	blx	r3
 8016034:	60f8      	str	r0, [r7, #12]
      break;
 8016036:	e112      	b.n	801625e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	7c1b      	ldrb	r3, [r3, #16]
 801603c:	2b00      	cmp	r3, #0
 801603e:	d10d      	bne.n	801605c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016048:	f107 0208 	add.w	r2, r7, #8
 801604c:	4610      	mov	r0, r2
 801604e:	4798      	blx	r3
 8016050:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	3301      	adds	r3, #1
 8016056:	2202      	movs	r2, #2
 8016058:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801605a:	e100      	b.n	801625e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016064:	f107 0208 	add.w	r2, r7, #8
 8016068:	4610      	mov	r0, r2
 801606a:	4798      	blx	r3
 801606c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	3301      	adds	r3, #1
 8016072:	2202      	movs	r2, #2
 8016074:	701a      	strb	r2, [r3, #0]
      break;
 8016076:	e0f2      	b.n	801625e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016078:	683b      	ldr	r3, [r7, #0]
 801607a:	885b      	ldrh	r3, [r3, #2]
 801607c:	b2db      	uxtb	r3, r3
 801607e:	2b05      	cmp	r3, #5
 8016080:	f200 80ac 	bhi.w	80161dc <USBD_GetDescriptor+0x204>
 8016084:	a201      	add	r2, pc, #4	; (adr r2, 801608c <USBD_GetDescriptor+0xb4>)
 8016086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801608a:	bf00      	nop
 801608c:	080160a5 	.word	0x080160a5
 8016090:	080160d9 	.word	0x080160d9
 8016094:	0801610d 	.word	0x0801610d
 8016098:	08016141 	.word	0x08016141
 801609c:	08016175 	.word	0x08016175
 80160a0:	080161a9 	.word	0x080161a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80160aa:	685b      	ldr	r3, [r3, #4]
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d00b      	beq.n	80160c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80160b6:	685b      	ldr	r3, [r3, #4]
 80160b8:	687a      	ldr	r2, [r7, #4]
 80160ba:	7c12      	ldrb	r2, [r2, #16]
 80160bc:	f107 0108 	add.w	r1, r7, #8
 80160c0:	4610      	mov	r0, r2
 80160c2:	4798      	blx	r3
 80160c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80160c6:	e091      	b.n	80161ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80160c8:	6839      	ldr	r1, [r7, #0]
 80160ca:	6878      	ldr	r0, [r7, #4]
 80160cc:	f000 facb 	bl	8016666 <USBD_CtlError>
            err++;
 80160d0:	7afb      	ldrb	r3, [r7, #11]
 80160d2:	3301      	adds	r3, #1
 80160d4:	72fb      	strb	r3, [r7, #11]
          break;
 80160d6:	e089      	b.n	80161ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80160de:	689b      	ldr	r3, [r3, #8]
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d00b      	beq.n	80160fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80160ea:	689b      	ldr	r3, [r3, #8]
 80160ec:	687a      	ldr	r2, [r7, #4]
 80160ee:	7c12      	ldrb	r2, [r2, #16]
 80160f0:	f107 0108 	add.w	r1, r7, #8
 80160f4:	4610      	mov	r0, r2
 80160f6:	4798      	blx	r3
 80160f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80160fa:	e077      	b.n	80161ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80160fc:	6839      	ldr	r1, [r7, #0]
 80160fe:	6878      	ldr	r0, [r7, #4]
 8016100:	f000 fab1 	bl	8016666 <USBD_CtlError>
            err++;
 8016104:	7afb      	ldrb	r3, [r7, #11]
 8016106:	3301      	adds	r3, #1
 8016108:	72fb      	strb	r3, [r7, #11]
          break;
 801610a:	e06f      	b.n	80161ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016112:	68db      	ldr	r3, [r3, #12]
 8016114:	2b00      	cmp	r3, #0
 8016116:	d00b      	beq.n	8016130 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801611e:	68db      	ldr	r3, [r3, #12]
 8016120:	687a      	ldr	r2, [r7, #4]
 8016122:	7c12      	ldrb	r2, [r2, #16]
 8016124:	f107 0108 	add.w	r1, r7, #8
 8016128:	4610      	mov	r0, r2
 801612a:	4798      	blx	r3
 801612c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801612e:	e05d      	b.n	80161ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016130:	6839      	ldr	r1, [r7, #0]
 8016132:	6878      	ldr	r0, [r7, #4]
 8016134:	f000 fa97 	bl	8016666 <USBD_CtlError>
            err++;
 8016138:	7afb      	ldrb	r3, [r7, #11]
 801613a:	3301      	adds	r3, #1
 801613c:	72fb      	strb	r3, [r7, #11]
          break;
 801613e:	e055      	b.n	80161ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016146:	691b      	ldr	r3, [r3, #16]
 8016148:	2b00      	cmp	r3, #0
 801614a:	d00b      	beq.n	8016164 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016152:	691b      	ldr	r3, [r3, #16]
 8016154:	687a      	ldr	r2, [r7, #4]
 8016156:	7c12      	ldrb	r2, [r2, #16]
 8016158:	f107 0108 	add.w	r1, r7, #8
 801615c:	4610      	mov	r0, r2
 801615e:	4798      	blx	r3
 8016160:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016162:	e043      	b.n	80161ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016164:	6839      	ldr	r1, [r7, #0]
 8016166:	6878      	ldr	r0, [r7, #4]
 8016168:	f000 fa7d 	bl	8016666 <USBD_CtlError>
            err++;
 801616c:	7afb      	ldrb	r3, [r7, #11]
 801616e:	3301      	adds	r3, #1
 8016170:	72fb      	strb	r3, [r7, #11]
          break;
 8016172:	e03b      	b.n	80161ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801617a:	695b      	ldr	r3, [r3, #20]
 801617c:	2b00      	cmp	r3, #0
 801617e:	d00b      	beq.n	8016198 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016186:	695b      	ldr	r3, [r3, #20]
 8016188:	687a      	ldr	r2, [r7, #4]
 801618a:	7c12      	ldrb	r2, [r2, #16]
 801618c:	f107 0108 	add.w	r1, r7, #8
 8016190:	4610      	mov	r0, r2
 8016192:	4798      	blx	r3
 8016194:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016196:	e029      	b.n	80161ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016198:	6839      	ldr	r1, [r7, #0]
 801619a:	6878      	ldr	r0, [r7, #4]
 801619c:	f000 fa63 	bl	8016666 <USBD_CtlError>
            err++;
 80161a0:	7afb      	ldrb	r3, [r7, #11]
 80161a2:	3301      	adds	r3, #1
 80161a4:	72fb      	strb	r3, [r7, #11]
          break;
 80161a6:	e021      	b.n	80161ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80161ae:	699b      	ldr	r3, [r3, #24]
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d00b      	beq.n	80161cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80161ba:	699b      	ldr	r3, [r3, #24]
 80161bc:	687a      	ldr	r2, [r7, #4]
 80161be:	7c12      	ldrb	r2, [r2, #16]
 80161c0:	f107 0108 	add.w	r1, r7, #8
 80161c4:	4610      	mov	r0, r2
 80161c6:	4798      	blx	r3
 80161c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80161ca:	e00f      	b.n	80161ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80161cc:	6839      	ldr	r1, [r7, #0]
 80161ce:	6878      	ldr	r0, [r7, #4]
 80161d0:	f000 fa49 	bl	8016666 <USBD_CtlError>
            err++;
 80161d4:	7afb      	ldrb	r3, [r7, #11]
 80161d6:	3301      	adds	r3, #1
 80161d8:	72fb      	strb	r3, [r7, #11]
          break;
 80161da:	e007      	b.n	80161ec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80161dc:	6839      	ldr	r1, [r7, #0]
 80161de:	6878      	ldr	r0, [r7, #4]
 80161e0:	f000 fa41 	bl	8016666 <USBD_CtlError>
          err++;
 80161e4:	7afb      	ldrb	r3, [r7, #11]
 80161e6:	3301      	adds	r3, #1
 80161e8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80161ea:	bf00      	nop
      }
      break;
 80161ec:	e037      	b.n	801625e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	7c1b      	ldrb	r3, [r3, #16]
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d109      	bne.n	801620a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80161fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80161fe:	f107 0208 	add.w	r2, r7, #8
 8016202:	4610      	mov	r0, r2
 8016204:	4798      	blx	r3
 8016206:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016208:	e029      	b.n	801625e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801620a:	6839      	ldr	r1, [r7, #0]
 801620c:	6878      	ldr	r0, [r7, #4]
 801620e:	f000 fa2a 	bl	8016666 <USBD_CtlError>
        err++;
 8016212:	7afb      	ldrb	r3, [r7, #11]
 8016214:	3301      	adds	r3, #1
 8016216:	72fb      	strb	r3, [r7, #11]
      break;
 8016218:	e021      	b.n	801625e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	7c1b      	ldrb	r3, [r3, #16]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d10d      	bne.n	801623e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801622a:	f107 0208 	add.w	r2, r7, #8
 801622e:	4610      	mov	r0, r2
 8016230:	4798      	blx	r3
 8016232:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	3301      	adds	r3, #1
 8016238:	2207      	movs	r2, #7
 801623a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801623c:	e00f      	b.n	801625e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801623e:	6839      	ldr	r1, [r7, #0]
 8016240:	6878      	ldr	r0, [r7, #4]
 8016242:	f000 fa10 	bl	8016666 <USBD_CtlError>
        err++;
 8016246:	7afb      	ldrb	r3, [r7, #11]
 8016248:	3301      	adds	r3, #1
 801624a:	72fb      	strb	r3, [r7, #11]
      break;
 801624c:	e007      	b.n	801625e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801624e:	6839      	ldr	r1, [r7, #0]
 8016250:	6878      	ldr	r0, [r7, #4]
 8016252:	f000 fa08 	bl	8016666 <USBD_CtlError>
      err++;
 8016256:	7afb      	ldrb	r3, [r7, #11]
 8016258:	3301      	adds	r3, #1
 801625a:	72fb      	strb	r3, [r7, #11]
      break;
 801625c:	bf00      	nop
  }

  if (err != 0U)
 801625e:	7afb      	ldrb	r3, [r7, #11]
 8016260:	2b00      	cmp	r3, #0
 8016262:	d11e      	bne.n	80162a2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8016264:	683b      	ldr	r3, [r7, #0]
 8016266:	88db      	ldrh	r3, [r3, #6]
 8016268:	2b00      	cmp	r3, #0
 801626a:	d016      	beq.n	801629a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 801626c:	893b      	ldrh	r3, [r7, #8]
 801626e:	2b00      	cmp	r3, #0
 8016270:	d00e      	beq.n	8016290 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8016272:	683b      	ldr	r3, [r7, #0]
 8016274:	88da      	ldrh	r2, [r3, #6]
 8016276:	893b      	ldrh	r3, [r7, #8]
 8016278:	4293      	cmp	r3, r2
 801627a:	bf28      	it	cs
 801627c:	4613      	movcs	r3, r2
 801627e:	b29b      	uxth	r3, r3
 8016280:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8016282:	893b      	ldrh	r3, [r7, #8]
 8016284:	461a      	mov	r2, r3
 8016286:	68f9      	ldr	r1, [r7, #12]
 8016288:	6878      	ldr	r0, [r7, #4]
 801628a:	f000 fa5d 	bl	8016748 <USBD_CtlSendData>
 801628e:	e009      	b.n	80162a4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8016290:	6839      	ldr	r1, [r7, #0]
 8016292:	6878      	ldr	r0, [r7, #4]
 8016294:	f000 f9e7 	bl	8016666 <USBD_CtlError>
 8016298:	e004      	b.n	80162a4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801629a:	6878      	ldr	r0, [r7, #4]
 801629c:	f000 fa91 	bl	80167c2 <USBD_CtlSendStatus>
 80162a0:	e000      	b.n	80162a4 <USBD_GetDescriptor+0x2cc>
    return;
 80162a2:	bf00      	nop
  }
}
 80162a4:	3710      	adds	r7, #16
 80162a6:	46bd      	mov	sp, r7
 80162a8:	bd80      	pop	{r7, pc}
 80162aa:	bf00      	nop

080162ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b084      	sub	sp, #16
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	6078      	str	r0, [r7, #4]
 80162b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80162b6:	683b      	ldr	r3, [r7, #0]
 80162b8:	889b      	ldrh	r3, [r3, #4]
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d131      	bne.n	8016322 <USBD_SetAddress+0x76>
 80162be:	683b      	ldr	r3, [r7, #0]
 80162c0:	88db      	ldrh	r3, [r3, #6]
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d12d      	bne.n	8016322 <USBD_SetAddress+0x76>
 80162c6:	683b      	ldr	r3, [r7, #0]
 80162c8:	885b      	ldrh	r3, [r3, #2]
 80162ca:	2b7f      	cmp	r3, #127	; 0x7f
 80162cc:	d829      	bhi.n	8016322 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80162ce:	683b      	ldr	r3, [r7, #0]
 80162d0:	885b      	ldrh	r3, [r3, #2]
 80162d2:	b2db      	uxtb	r3, r3
 80162d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80162d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80162e0:	b2db      	uxtb	r3, r3
 80162e2:	2b03      	cmp	r3, #3
 80162e4:	d104      	bne.n	80162f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80162e6:	6839      	ldr	r1, [r7, #0]
 80162e8:	6878      	ldr	r0, [r7, #4]
 80162ea:	f000 f9bc 	bl	8016666 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80162ee:	e01d      	b.n	801632c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	7bfa      	ldrb	r2, [r7, #15]
 80162f4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80162f8:	7bfb      	ldrb	r3, [r7, #15]
 80162fa:	4619      	mov	r1, r3
 80162fc:	6878      	ldr	r0, [r7, #4]
 80162fe:	f004 fc72 	bl	801abe6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016302:	6878      	ldr	r0, [r7, #4]
 8016304:	f000 fa5d 	bl	80167c2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016308:	7bfb      	ldrb	r3, [r7, #15]
 801630a:	2b00      	cmp	r3, #0
 801630c:	d004      	beq.n	8016318 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	2202      	movs	r2, #2
 8016312:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016316:	e009      	b.n	801632c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	2201      	movs	r2, #1
 801631c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016320:	e004      	b.n	801632c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016322:	6839      	ldr	r1, [r7, #0]
 8016324:	6878      	ldr	r0, [r7, #4]
 8016326:	f000 f99e 	bl	8016666 <USBD_CtlError>
  }
}
 801632a:	bf00      	nop
 801632c:	bf00      	nop
 801632e:	3710      	adds	r7, #16
 8016330:	46bd      	mov	sp, r7
 8016332:	bd80      	pop	{r7, pc}

08016334 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016334:	b580      	push	{r7, lr}
 8016336:	b084      	sub	sp, #16
 8016338:	af00      	add	r7, sp, #0
 801633a:	6078      	str	r0, [r7, #4]
 801633c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801633e:	2300      	movs	r3, #0
 8016340:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8016342:	683b      	ldr	r3, [r7, #0]
 8016344:	885b      	ldrh	r3, [r3, #2]
 8016346:	b2da      	uxtb	r2, r3
 8016348:	4b4e      	ldr	r3, [pc, #312]	; (8016484 <USBD_SetConfig+0x150>)
 801634a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801634c:	4b4d      	ldr	r3, [pc, #308]	; (8016484 <USBD_SetConfig+0x150>)
 801634e:	781b      	ldrb	r3, [r3, #0]
 8016350:	2b01      	cmp	r3, #1
 8016352:	d905      	bls.n	8016360 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016354:	6839      	ldr	r1, [r7, #0]
 8016356:	6878      	ldr	r0, [r7, #4]
 8016358:	f000 f985 	bl	8016666 <USBD_CtlError>
    return USBD_FAIL;
 801635c:	2303      	movs	r3, #3
 801635e:	e08c      	b.n	801647a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016366:	b2db      	uxtb	r3, r3
 8016368:	2b02      	cmp	r3, #2
 801636a:	d002      	beq.n	8016372 <USBD_SetConfig+0x3e>
 801636c:	2b03      	cmp	r3, #3
 801636e:	d029      	beq.n	80163c4 <USBD_SetConfig+0x90>
 8016370:	e075      	b.n	801645e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8016372:	4b44      	ldr	r3, [pc, #272]	; (8016484 <USBD_SetConfig+0x150>)
 8016374:	781b      	ldrb	r3, [r3, #0]
 8016376:	2b00      	cmp	r3, #0
 8016378:	d020      	beq.n	80163bc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801637a:	4b42      	ldr	r3, [pc, #264]	; (8016484 <USBD_SetConfig+0x150>)
 801637c:	781b      	ldrb	r3, [r3, #0]
 801637e:	461a      	mov	r2, r3
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016384:	4b3f      	ldr	r3, [pc, #252]	; (8016484 <USBD_SetConfig+0x150>)
 8016386:	781b      	ldrb	r3, [r3, #0]
 8016388:	4619      	mov	r1, r3
 801638a:	6878      	ldr	r0, [r7, #4]
 801638c:	f7fe ffe7 	bl	801535e <USBD_SetClassConfig>
 8016390:	4603      	mov	r3, r0
 8016392:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016394:	7bfb      	ldrb	r3, [r7, #15]
 8016396:	2b00      	cmp	r3, #0
 8016398:	d008      	beq.n	80163ac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801639a:	6839      	ldr	r1, [r7, #0]
 801639c:	6878      	ldr	r0, [r7, #4]
 801639e:	f000 f962 	bl	8016666 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	2202      	movs	r2, #2
 80163a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80163aa:	e065      	b.n	8016478 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80163ac:	6878      	ldr	r0, [r7, #4]
 80163ae:	f000 fa08 	bl	80167c2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	2203      	movs	r2, #3
 80163b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80163ba:	e05d      	b.n	8016478 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80163bc:	6878      	ldr	r0, [r7, #4]
 80163be:	f000 fa00 	bl	80167c2 <USBD_CtlSendStatus>
      break;
 80163c2:	e059      	b.n	8016478 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80163c4:	4b2f      	ldr	r3, [pc, #188]	; (8016484 <USBD_SetConfig+0x150>)
 80163c6:	781b      	ldrb	r3, [r3, #0]
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d112      	bne.n	80163f2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	2202      	movs	r2, #2
 80163d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80163d4:	4b2b      	ldr	r3, [pc, #172]	; (8016484 <USBD_SetConfig+0x150>)
 80163d6:	781b      	ldrb	r3, [r3, #0]
 80163d8:	461a      	mov	r2, r3
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80163de:	4b29      	ldr	r3, [pc, #164]	; (8016484 <USBD_SetConfig+0x150>)
 80163e0:	781b      	ldrb	r3, [r3, #0]
 80163e2:	4619      	mov	r1, r3
 80163e4:	6878      	ldr	r0, [r7, #4]
 80163e6:	f7fe ffd6 	bl	8015396 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80163ea:	6878      	ldr	r0, [r7, #4]
 80163ec:	f000 f9e9 	bl	80167c2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80163f0:	e042      	b.n	8016478 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80163f2:	4b24      	ldr	r3, [pc, #144]	; (8016484 <USBD_SetConfig+0x150>)
 80163f4:	781b      	ldrb	r3, [r3, #0]
 80163f6:	461a      	mov	r2, r3
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	685b      	ldr	r3, [r3, #4]
 80163fc:	429a      	cmp	r2, r3
 80163fe:	d02a      	beq.n	8016456 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	685b      	ldr	r3, [r3, #4]
 8016404:	b2db      	uxtb	r3, r3
 8016406:	4619      	mov	r1, r3
 8016408:	6878      	ldr	r0, [r7, #4]
 801640a:	f7fe ffc4 	bl	8015396 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801640e:	4b1d      	ldr	r3, [pc, #116]	; (8016484 <USBD_SetConfig+0x150>)
 8016410:	781b      	ldrb	r3, [r3, #0]
 8016412:	461a      	mov	r2, r3
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016418:	4b1a      	ldr	r3, [pc, #104]	; (8016484 <USBD_SetConfig+0x150>)
 801641a:	781b      	ldrb	r3, [r3, #0]
 801641c:	4619      	mov	r1, r3
 801641e:	6878      	ldr	r0, [r7, #4]
 8016420:	f7fe ff9d 	bl	801535e <USBD_SetClassConfig>
 8016424:	4603      	mov	r3, r0
 8016426:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8016428:	7bfb      	ldrb	r3, [r7, #15]
 801642a:	2b00      	cmp	r3, #0
 801642c:	d00f      	beq.n	801644e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801642e:	6839      	ldr	r1, [r7, #0]
 8016430:	6878      	ldr	r0, [r7, #4]
 8016432:	f000 f918 	bl	8016666 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	685b      	ldr	r3, [r3, #4]
 801643a:	b2db      	uxtb	r3, r3
 801643c:	4619      	mov	r1, r3
 801643e:	6878      	ldr	r0, [r7, #4]
 8016440:	f7fe ffa9 	bl	8015396 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	2202      	movs	r2, #2
 8016448:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801644c:	e014      	b.n	8016478 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801644e:	6878      	ldr	r0, [r7, #4]
 8016450:	f000 f9b7 	bl	80167c2 <USBD_CtlSendStatus>
      break;
 8016454:	e010      	b.n	8016478 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016456:	6878      	ldr	r0, [r7, #4]
 8016458:	f000 f9b3 	bl	80167c2 <USBD_CtlSendStatus>
      break;
 801645c:	e00c      	b.n	8016478 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801645e:	6839      	ldr	r1, [r7, #0]
 8016460:	6878      	ldr	r0, [r7, #4]
 8016462:	f000 f900 	bl	8016666 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016466:	4b07      	ldr	r3, [pc, #28]	; (8016484 <USBD_SetConfig+0x150>)
 8016468:	781b      	ldrb	r3, [r3, #0]
 801646a:	4619      	mov	r1, r3
 801646c:	6878      	ldr	r0, [r7, #4]
 801646e:	f7fe ff92 	bl	8015396 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8016472:	2303      	movs	r3, #3
 8016474:	73fb      	strb	r3, [r7, #15]
      break;
 8016476:	bf00      	nop
  }

  return ret;
 8016478:	7bfb      	ldrb	r3, [r7, #15]
}
 801647a:	4618      	mov	r0, r3
 801647c:	3710      	adds	r7, #16
 801647e:	46bd      	mov	sp, r7
 8016480:	bd80      	pop	{r7, pc}
 8016482:	bf00      	nop
 8016484:	20001a80 	.word	0x20001a80

08016488 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016488:	b580      	push	{r7, lr}
 801648a:	b082      	sub	sp, #8
 801648c:	af00      	add	r7, sp, #0
 801648e:	6078      	str	r0, [r7, #4]
 8016490:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016492:	683b      	ldr	r3, [r7, #0]
 8016494:	88db      	ldrh	r3, [r3, #6]
 8016496:	2b01      	cmp	r3, #1
 8016498:	d004      	beq.n	80164a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801649a:	6839      	ldr	r1, [r7, #0]
 801649c:	6878      	ldr	r0, [r7, #4]
 801649e:	f000 f8e2 	bl	8016666 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80164a2:	e023      	b.n	80164ec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80164aa:	b2db      	uxtb	r3, r3
 80164ac:	2b02      	cmp	r3, #2
 80164ae:	dc02      	bgt.n	80164b6 <USBD_GetConfig+0x2e>
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	dc03      	bgt.n	80164bc <USBD_GetConfig+0x34>
 80164b4:	e015      	b.n	80164e2 <USBD_GetConfig+0x5a>
 80164b6:	2b03      	cmp	r3, #3
 80164b8:	d00b      	beq.n	80164d2 <USBD_GetConfig+0x4a>
 80164ba:	e012      	b.n	80164e2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	2200      	movs	r2, #0
 80164c0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	3308      	adds	r3, #8
 80164c6:	2201      	movs	r2, #1
 80164c8:	4619      	mov	r1, r3
 80164ca:	6878      	ldr	r0, [r7, #4]
 80164cc:	f000 f93c 	bl	8016748 <USBD_CtlSendData>
        break;
 80164d0:	e00c      	b.n	80164ec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	3304      	adds	r3, #4
 80164d6:	2201      	movs	r2, #1
 80164d8:	4619      	mov	r1, r3
 80164da:	6878      	ldr	r0, [r7, #4]
 80164dc:	f000 f934 	bl	8016748 <USBD_CtlSendData>
        break;
 80164e0:	e004      	b.n	80164ec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80164e2:	6839      	ldr	r1, [r7, #0]
 80164e4:	6878      	ldr	r0, [r7, #4]
 80164e6:	f000 f8be 	bl	8016666 <USBD_CtlError>
        break;
 80164ea:	bf00      	nop
}
 80164ec:	bf00      	nop
 80164ee:	3708      	adds	r7, #8
 80164f0:	46bd      	mov	sp, r7
 80164f2:	bd80      	pop	{r7, pc}

080164f4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80164f4:	b580      	push	{r7, lr}
 80164f6:	b082      	sub	sp, #8
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	6078      	str	r0, [r7, #4]
 80164fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016504:	b2db      	uxtb	r3, r3
 8016506:	3b01      	subs	r3, #1
 8016508:	2b02      	cmp	r3, #2
 801650a:	d81e      	bhi.n	801654a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801650c:	683b      	ldr	r3, [r7, #0]
 801650e:	88db      	ldrh	r3, [r3, #6]
 8016510:	2b02      	cmp	r3, #2
 8016512:	d004      	beq.n	801651e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8016514:	6839      	ldr	r1, [r7, #0]
 8016516:	6878      	ldr	r0, [r7, #4]
 8016518:	f000 f8a5 	bl	8016666 <USBD_CtlError>
        break;
 801651c:	e01a      	b.n	8016554 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	2201      	movs	r2, #1
 8016522:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801652a:	2b00      	cmp	r3, #0
 801652c:	d005      	beq.n	801653a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	68db      	ldr	r3, [r3, #12]
 8016532:	f043 0202 	orr.w	r2, r3, #2
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	330c      	adds	r3, #12
 801653e:	2202      	movs	r2, #2
 8016540:	4619      	mov	r1, r3
 8016542:	6878      	ldr	r0, [r7, #4]
 8016544:	f000 f900 	bl	8016748 <USBD_CtlSendData>
      break;
 8016548:	e004      	b.n	8016554 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801654a:	6839      	ldr	r1, [r7, #0]
 801654c:	6878      	ldr	r0, [r7, #4]
 801654e:	f000 f88a 	bl	8016666 <USBD_CtlError>
      break;
 8016552:	bf00      	nop
  }
}
 8016554:	bf00      	nop
 8016556:	3708      	adds	r7, #8
 8016558:	46bd      	mov	sp, r7
 801655a:	bd80      	pop	{r7, pc}

0801655c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801655c:	b580      	push	{r7, lr}
 801655e:	b082      	sub	sp, #8
 8016560:	af00      	add	r7, sp, #0
 8016562:	6078      	str	r0, [r7, #4]
 8016564:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016566:	683b      	ldr	r3, [r7, #0]
 8016568:	885b      	ldrh	r3, [r3, #2]
 801656a:	2b01      	cmp	r3, #1
 801656c:	d107      	bne.n	801657e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	2201      	movs	r2, #1
 8016572:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8016576:	6878      	ldr	r0, [r7, #4]
 8016578:	f000 f923 	bl	80167c2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801657c:	e013      	b.n	80165a6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801657e:	683b      	ldr	r3, [r7, #0]
 8016580:	885b      	ldrh	r3, [r3, #2]
 8016582:	2b02      	cmp	r3, #2
 8016584:	d10b      	bne.n	801659e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8016586:	683b      	ldr	r3, [r7, #0]
 8016588:	889b      	ldrh	r3, [r3, #4]
 801658a:	0a1b      	lsrs	r3, r3, #8
 801658c:	b29b      	uxth	r3, r3
 801658e:	b2da      	uxtb	r2, r3
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8016596:	6878      	ldr	r0, [r7, #4]
 8016598:	f000 f913 	bl	80167c2 <USBD_CtlSendStatus>
}
 801659c:	e003      	b.n	80165a6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801659e:	6839      	ldr	r1, [r7, #0]
 80165a0:	6878      	ldr	r0, [r7, #4]
 80165a2:	f000 f860 	bl	8016666 <USBD_CtlError>
}
 80165a6:	bf00      	nop
 80165a8:	3708      	adds	r7, #8
 80165aa:	46bd      	mov	sp, r7
 80165ac:	bd80      	pop	{r7, pc}

080165ae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80165ae:	b580      	push	{r7, lr}
 80165b0:	b082      	sub	sp, #8
 80165b2:	af00      	add	r7, sp, #0
 80165b4:	6078      	str	r0, [r7, #4]
 80165b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80165be:	b2db      	uxtb	r3, r3
 80165c0:	3b01      	subs	r3, #1
 80165c2:	2b02      	cmp	r3, #2
 80165c4:	d80b      	bhi.n	80165de <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80165c6:	683b      	ldr	r3, [r7, #0]
 80165c8:	885b      	ldrh	r3, [r3, #2]
 80165ca:	2b01      	cmp	r3, #1
 80165cc:	d10c      	bne.n	80165e8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	2200      	movs	r2, #0
 80165d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80165d6:	6878      	ldr	r0, [r7, #4]
 80165d8:	f000 f8f3 	bl	80167c2 <USBD_CtlSendStatus>
      }
      break;
 80165dc:	e004      	b.n	80165e8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80165de:	6839      	ldr	r1, [r7, #0]
 80165e0:	6878      	ldr	r0, [r7, #4]
 80165e2:	f000 f840 	bl	8016666 <USBD_CtlError>
      break;
 80165e6:	e000      	b.n	80165ea <USBD_ClrFeature+0x3c>
      break;
 80165e8:	bf00      	nop
  }
}
 80165ea:	bf00      	nop
 80165ec:	3708      	adds	r7, #8
 80165ee:	46bd      	mov	sp, r7
 80165f0:	bd80      	pop	{r7, pc}

080165f2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80165f2:	b580      	push	{r7, lr}
 80165f4:	b084      	sub	sp, #16
 80165f6:	af00      	add	r7, sp, #0
 80165f8:	6078      	str	r0, [r7, #4]
 80165fa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80165fc:	683b      	ldr	r3, [r7, #0]
 80165fe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016600:	68fb      	ldr	r3, [r7, #12]
 8016602:	781a      	ldrb	r2, [r3, #0]
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016608:	68fb      	ldr	r3, [r7, #12]
 801660a:	3301      	adds	r3, #1
 801660c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801660e:	68fb      	ldr	r3, [r7, #12]
 8016610:	781a      	ldrb	r2, [r3, #0]
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	3301      	adds	r3, #1
 801661a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801661c:	68f8      	ldr	r0, [r7, #12]
 801661e:	f7ff fa41 	bl	8015aa4 <SWAPBYTE>
 8016622:	4603      	mov	r3, r0
 8016624:	461a      	mov	r2, r3
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801662a:	68fb      	ldr	r3, [r7, #12]
 801662c:	3301      	adds	r3, #1
 801662e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	3301      	adds	r3, #1
 8016634:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016636:	68f8      	ldr	r0, [r7, #12]
 8016638:	f7ff fa34 	bl	8015aa4 <SWAPBYTE>
 801663c:	4603      	mov	r3, r0
 801663e:	461a      	mov	r2, r3
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016644:	68fb      	ldr	r3, [r7, #12]
 8016646:	3301      	adds	r3, #1
 8016648:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801664a:	68fb      	ldr	r3, [r7, #12]
 801664c:	3301      	adds	r3, #1
 801664e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016650:	68f8      	ldr	r0, [r7, #12]
 8016652:	f7ff fa27 	bl	8015aa4 <SWAPBYTE>
 8016656:	4603      	mov	r3, r0
 8016658:	461a      	mov	r2, r3
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	80da      	strh	r2, [r3, #6]
}
 801665e:	bf00      	nop
 8016660:	3710      	adds	r7, #16
 8016662:	46bd      	mov	sp, r7
 8016664:	bd80      	pop	{r7, pc}

08016666 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016666:	b580      	push	{r7, lr}
 8016668:	b082      	sub	sp, #8
 801666a:	af00      	add	r7, sp, #0
 801666c:	6078      	str	r0, [r7, #4]
 801666e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016670:	2180      	movs	r1, #128	; 0x80
 8016672:	6878      	ldr	r0, [r7, #4]
 8016674:	f004 fa4d 	bl	801ab12 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016678:	2100      	movs	r1, #0
 801667a:	6878      	ldr	r0, [r7, #4]
 801667c:	f004 fa49 	bl	801ab12 <USBD_LL_StallEP>
}
 8016680:	bf00      	nop
 8016682:	3708      	adds	r7, #8
 8016684:	46bd      	mov	sp, r7
 8016686:	bd80      	pop	{r7, pc}

08016688 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016688:	b580      	push	{r7, lr}
 801668a:	b086      	sub	sp, #24
 801668c:	af00      	add	r7, sp, #0
 801668e:	60f8      	str	r0, [r7, #12]
 8016690:	60b9      	str	r1, [r7, #8]
 8016692:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016694:	2300      	movs	r3, #0
 8016696:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016698:	68fb      	ldr	r3, [r7, #12]
 801669a:	2b00      	cmp	r3, #0
 801669c:	d036      	beq.n	801670c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80166a2:	6938      	ldr	r0, [r7, #16]
 80166a4:	f000 f836 	bl	8016714 <USBD_GetLen>
 80166a8:	4603      	mov	r3, r0
 80166aa:	3301      	adds	r3, #1
 80166ac:	b29b      	uxth	r3, r3
 80166ae:	005b      	lsls	r3, r3, #1
 80166b0:	b29a      	uxth	r2, r3
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80166b6:	7dfb      	ldrb	r3, [r7, #23]
 80166b8:	68ba      	ldr	r2, [r7, #8]
 80166ba:	4413      	add	r3, r2
 80166bc:	687a      	ldr	r2, [r7, #4]
 80166be:	7812      	ldrb	r2, [r2, #0]
 80166c0:	701a      	strb	r2, [r3, #0]
  idx++;
 80166c2:	7dfb      	ldrb	r3, [r7, #23]
 80166c4:	3301      	adds	r3, #1
 80166c6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80166c8:	7dfb      	ldrb	r3, [r7, #23]
 80166ca:	68ba      	ldr	r2, [r7, #8]
 80166cc:	4413      	add	r3, r2
 80166ce:	2203      	movs	r2, #3
 80166d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80166d2:	7dfb      	ldrb	r3, [r7, #23]
 80166d4:	3301      	adds	r3, #1
 80166d6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80166d8:	e013      	b.n	8016702 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80166da:	7dfb      	ldrb	r3, [r7, #23]
 80166dc:	68ba      	ldr	r2, [r7, #8]
 80166de:	4413      	add	r3, r2
 80166e0:	693a      	ldr	r2, [r7, #16]
 80166e2:	7812      	ldrb	r2, [r2, #0]
 80166e4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80166e6:	693b      	ldr	r3, [r7, #16]
 80166e8:	3301      	adds	r3, #1
 80166ea:	613b      	str	r3, [r7, #16]
    idx++;
 80166ec:	7dfb      	ldrb	r3, [r7, #23]
 80166ee:	3301      	adds	r3, #1
 80166f0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80166f2:	7dfb      	ldrb	r3, [r7, #23]
 80166f4:	68ba      	ldr	r2, [r7, #8]
 80166f6:	4413      	add	r3, r2
 80166f8:	2200      	movs	r2, #0
 80166fa:	701a      	strb	r2, [r3, #0]
    idx++;
 80166fc:	7dfb      	ldrb	r3, [r7, #23]
 80166fe:	3301      	adds	r3, #1
 8016700:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016702:	693b      	ldr	r3, [r7, #16]
 8016704:	781b      	ldrb	r3, [r3, #0]
 8016706:	2b00      	cmp	r3, #0
 8016708:	d1e7      	bne.n	80166da <USBD_GetString+0x52>
 801670a:	e000      	b.n	801670e <USBD_GetString+0x86>
    return;
 801670c:	bf00      	nop
  }
}
 801670e:	3718      	adds	r7, #24
 8016710:	46bd      	mov	sp, r7
 8016712:	bd80      	pop	{r7, pc}

08016714 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016714:	b480      	push	{r7}
 8016716:	b085      	sub	sp, #20
 8016718:	af00      	add	r7, sp, #0
 801671a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801671c:	2300      	movs	r3, #0
 801671e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016724:	e005      	b.n	8016732 <USBD_GetLen+0x1e>
  {
    len++;
 8016726:	7bfb      	ldrb	r3, [r7, #15]
 8016728:	3301      	adds	r3, #1
 801672a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801672c:	68bb      	ldr	r3, [r7, #8]
 801672e:	3301      	adds	r3, #1
 8016730:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016732:	68bb      	ldr	r3, [r7, #8]
 8016734:	781b      	ldrb	r3, [r3, #0]
 8016736:	2b00      	cmp	r3, #0
 8016738:	d1f5      	bne.n	8016726 <USBD_GetLen+0x12>
  }

  return len;
 801673a:	7bfb      	ldrb	r3, [r7, #15]
}
 801673c:	4618      	mov	r0, r3
 801673e:	3714      	adds	r7, #20
 8016740:	46bd      	mov	sp, r7
 8016742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016746:	4770      	bx	lr

08016748 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016748:	b580      	push	{r7, lr}
 801674a:	b084      	sub	sp, #16
 801674c:	af00      	add	r7, sp, #0
 801674e:	60f8      	str	r0, [r7, #12]
 8016750:	60b9      	str	r1, [r7, #8]
 8016752:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	2202      	movs	r2, #2
 8016758:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801675c:	68fb      	ldr	r3, [r7, #12]
 801675e:	687a      	ldr	r2, [r7, #4]
 8016760:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016762:	68fb      	ldr	r3, [r7, #12]
 8016764:	687a      	ldr	r2, [r7, #4]
 8016766:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	68ba      	ldr	r2, [r7, #8]
 801676c:	2100      	movs	r1, #0
 801676e:	68f8      	ldr	r0, [r7, #12]
 8016770:	f004 fa58 	bl	801ac24 <USBD_LL_Transmit>

  return USBD_OK;
 8016774:	2300      	movs	r3, #0
}
 8016776:	4618      	mov	r0, r3
 8016778:	3710      	adds	r7, #16
 801677a:	46bd      	mov	sp, r7
 801677c:	bd80      	pop	{r7, pc}

0801677e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801677e:	b580      	push	{r7, lr}
 8016780:	b084      	sub	sp, #16
 8016782:	af00      	add	r7, sp, #0
 8016784:	60f8      	str	r0, [r7, #12]
 8016786:	60b9      	str	r1, [r7, #8]
 8016788:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	68ba      	ldr	r2, [r7, #8]
 801678e:	2100      	movs	r1, #0
 8016790:	68f8      	ldr	r0, [r7, #12]
 8016792:	f004 fa47 	bl	801ac24 <USBD_LL_Transmit>

  return USBD_OK;
 8016796:	2300      	movs	r3, #0
}
 8016798:	4618      	mov	r0, r3
 801679a:	3710      	adds	r7, #16
 801679c:	46bd      	mov	sp, r7
 801679e:	bd80      	pop	{r7, pc}

080167a0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80167a0:	b580      	push	{r7, lr}
 80167a2:	b084      	sub	sp, #16
 80167a4:	af00      	add	r7, sp, #0
 80167a6:	60f8      	str	r0, [r7, #12]
 80167a8:	60b9      	str	r1, [r7, #8]
 80167aa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	68ba      	ldr	r2, [r7, #8]
 80167b0:	2100      	movs	r1, #0
 80167b2:	68f8      	ldr	r0, [r7, #12]
 80167b4:	f004 fa57 	bl	801ac66 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80167b8:	2300      	movs	r3, #0
}
 80167ba:	4618      	mov	r0, r3
 80167bc:	3710      	adds	r7, #16
 80167be:	46bd      	mov	sp, r7
 80167c0:	bd80      	pop	{r7, pc}

080167c2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80167c2:	b580      	push	{r7, lr}
 80167c4:	b082      	sub	sp, #8
 80167c6:	af00      	add	r7, sp, #0
 80167c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	2204      	movs	r2, #4
 80167ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80167d2:	2300      	movs	r3, #0
 80167d4:	2200      	movs	r2, #0
 80167d6:	2100      	movs	r1, #0
 80167d8:	6878      	ldr	r0, [r7, #4]
 80167da:	f004 fa23 	bl	801ac24 <USBD_LL_Transmit>

  return USBD_OK;
 80167de:	2300      	movs	r3, #0
}
 80167e0:	4618      	mov	r0, r3
 80167e2:	3708      	adds	r7, #8
 80167e4:	46bd      	mov	sp, r7
 80167e6:	bd80      	pop	{r7, pc}

080167e8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80167e8:	b580      	push	{r7, lr}
 80167ea:	b082      	sub	sp, #8
 80167ec:	af00      	add	r7, sp, #0
 80167ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	2205      	movs	r2, #5
 80167f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80167f8:	2300      	movs	r3, #0
 80167fa:	2200      	movs	r2, #0
 80167fc:	2100      	movs	r1, #0
 80167fe:	6878      	ldr	r0, [r7, #4]
 8016800:	f004 fa31 	bl	801ac66 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016804:	2300      	movs	r3, #0
}
 8016806:	4618      	mov	r0, r3
 8016808:	3708      	adds	r7, #8
 801680a:	46bd      	mov	sp, r7
 801680c:	bd80      	pop	{r7, pc}
	...

08016810 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8016810:	b580      	push	{r7, lr}
 8016812:	b084      	sub	sp, #16
 8016814:	af00      	add	r7, sp, #0
 8016816:	4603      	mov	r3, r0
 8016818:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801681a:	79fb      	ldrb	r3, [r7, #7]
 801681c:	4a08      	ldr	r2, [pc, #32]	; (8016840 <disk_status+0x30>)
 801681e:	009b      	lsls	r3, r3, #2
 8016820:	4413      	add	r3, r2
 8016822:	685b      	ldr	r3, [r3, #4]
 8016824:	685b      	ldr	r3, [r3, #4]
 8016826:	79fa      	ldrb	r2, [r7, #7]
 8016828:	4905      	ldr	r1, [pc, #20]	; (8016840 <disk_status+0x30>)
 801682a:	440a      	add	r2, r1
 801682c:	7a12      	ldrb	r2, [r2, #8]
 801682e:	4610      	mov	r0, r2
 8016830:	4798      	blx	r3
 8016832:	4603      	mov	r3, r0
 8016834:	73fb      	strb	r3, [r7, #15]
  return stat;
 8016836:	7bfb      	ldrb	r3, [r7, #15]
}
 8016838:	4618      	mov	r0, r3
 801683a:	3710      	adds	r7, #16
 801683c:	46bd      	mov	sp, r7
 801683e:	bd80      	pop	{r7, pc}
 8016840:	20001cac 	.word	0x20001cac

08016844 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8016844:	b580      	push	{r7, lr}
 8016846:	b084      	sub	sp, #16
 8016848:	af00      	add	r7, sp, #0
 801684a:	4603      	mov	r3, r0
 801684c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801684e:	2300      	movs	r3, #0
 8016850:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8016852:	79fb      	ldrb	r3, [r7, #7]
 8016854:	4a0d      	ldr	r2, [pc, #52]	; (801688c <disk_initialize+0x48>)
 8016856:	5cd3      	ldrb	r3, [r2, r3]
 8016858:	2b00      	cmp	r3, #0
 801685a:	d111      	bne.n	8016880 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 801685c:	79fb      	ldrb	r3, [r7, #7]
 801685e:	4a0b      	ldr	r2, [pc, #44]	; (801688c <disk_initialize+0x48>)
 8016860:	2101      	movs	r1, #1
 8016862:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8016864:	79fb      	ldrb	r3, [r7, #7]
 8016866:	4a09      	ldr	r2, [pc, #36]	; (801688c <disk_initialize+0x48>)
 8016868:	009b      	lsls	r3, r3, #2
 801686a:	4413      	add	r3, r2
 801686c:	685b      	ldr	r3, [r3, #4]
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	79fa      	ldrb	r2, [r7, #7]
 8016872:	4906      	ldr	r1, [pc, #24]	; (801688c <disk_initialize+0x48>)
 8016874:	440a      	add	r2, r1
 8016876:	7a12      	ldrb	r2, [r2, #8]
 8016878:	4610      	mov	r0, r2
 801687a:	4798      	blx	r3
 801687c:	4603      	mov	r3, r0
 801687e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8016880:	7bfb      	ldrb	r3, [r7, #15]
}
 8016882:	4618      	mov	r0, r3
 8016884:	3710      	adds	r7, #16
 8016886:	46bd      	mov	sp, r7
 8016888:	bd80      	pop	{r7, pc}
 801688a:	bf00      	nop
 801688c:	20001cac 	.word	0x20001cac

08016890 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8016890:	b590      	push	{r4, r7, lr}
 8016892:	b087      	sub	sp, #28
 8016894:	af00      	add	r7, sp, #0
 8016896:	60b9      	str	r1, [r7, #8]
 8016898:	607a      	str	r2, [r7, #4]
 801689a:	603b      	str	r3, [r7, #0]
 801689c:	4603      	mov	r3, r0
 801689e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80168a0:	7bfb      	ldrb	r3, [r7, #15]
 80168a2:	4a0a      	ldr	r2, [pc, #40]	; (80168cc <disk_read+0x3c>)
 80168a4:	009b      	lsls	r3, r3, #2
 80168a6:	4413      	add	r3, r2
 80168a8:	685b      	ldr	r3, [r3, #4]
 80168aa:	689c      	ldr	r4, [r3, #8]
 80168ac:	7bfb      	ldrb	r3, [r7, #15]
 80168ae:	4a07      	ldr	r2, [pc, #28]	; (80168cc <disk_read+0x3c>)
 80168b0:	4413      	add	r3, r2
 80168b2:	7a18      	ldrb	r0, [r3, #8]
 80168b4:	683b      	ldr	r3, [r7, #0]
 80168b6:	687a      	ldr	r2, [r7, #4]
 80168b8:	68b9      	ldr	r1, [r7, #8]
 80168ba:	47a0      	blx	r4
 80168bc:	4603      	mov	r3, r0
 80168be:	75fb      	strb	r3, [r7, #23]
  return res;
 80168c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80168c2:	4618      	mov	r0, r3
 80168c4:	371c      	adds	r7, #28
 80168c6:	46bd      	mov	sp, r7
 80168c8:	bd90      	pop	{r4, r7, pc}
 80168ca:	bf00      	nop
 80168cc:	20001cac 	.word	0x20001cac

080168d0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80168d0:	b590      	push	{r4, r7, lr}
 80168d2:	b087      	sub	sp, #28
 80168d4:	af00      	add	r7, sp, #0
 80168d6:	60b9      	str	r1, [r7, #8]
 80168d8:	607a      	str	r2, [r7, #4]
 80168da:	603b      	str	r3, [r7, #0]
 80168dc:	4603      	mov	r3, r0
 80168de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80168e0:	7bfb      	ldrb	r3, [r7, #15]
 80168e2:	4a0a      	ldr	r2, [pc, #40]	; (801690c <disk_write+0x3c>)
 80168e4:	009b      	lsls	r3, r3, #2
 80168e6:	4413      	add	r3, r2
 80168e8:	685b      	ldr	r3, [r3, #4]
 80168ea:	68dc      	ldr	r4, [r3, #12]
 80168ec:	7bfb      	ldrb	r3, [r7, #15]
 80168ee:	4a07      	ldr	r2, [pc, #28]	; (801690c <disk_write+0x3c>)
 80168f0:	4413      	add	r3, r2
 80168f2:	7a18      	ldrb	r0, [r3, #8]
 80168f4:	683b      	ldr	r3, [r7, #0]
 80168f6:	687a      	ldr	r2, [r7, #4]
 80168f8:	68b9      	ldr	r1, [r7, #8]
 80168fa:	47a0      	blx	r4
 80168fc:	4603      	mov	r3, r0
 80168fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8016900:	7dfb      	ldrb	r3, [r7, #23]
}
 8016902:	4618      	mov	r0, r3
 8016904:	371c      	adds	r7, #28
 8016906:	46bd      	mov	sp, r7
 8016908:	bd90      	pop	{r4, r7, pc}
 801690a:	bf00      	nop
 801690c:	20001cac 	.word	0x20001cac

08016910 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8016910:	b580      	push	{r7, lr}
 8016912:	b084      	sub	sp, #16
 8016914:	af00      	add	r7, sp, #0
 8016916:	4603      	mov	r3, r0
 8016918:	603a      	str	r2, [r7, #0]
 801691a:	71fb      	strb	r3, [r7, #7]
 801691c:	460b      	mov	r3, r1
 801691e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8016920:	79fb      	ldrb	r3, [r7, #7]
 8016922:	4a09      	ldr	r2, [pc, #36]	; (8016948 <disk_ioctl+0x38>)
 8016924:	009b      	lsls	r3, r3, #2
 8016926:	4413      	add	r3, r2
 8016928:	685b      	ldr	r3, [r3, #4]
 801692a:	691b      	ldr	r3, [r3, #16]
 801692c:	79fa      	ldrb	r2, [r7, #7]
 801692e:	4906      	ldr	r1, [pc, #24]	; (8016948 <disk_ioctl+0x38>)
 8016930:	440a      	add	r2, r1
 8016932:	7a10      	ldrb	r0, [r2, #8]
 8016934:	79b9      	ldrb	r1, [r7, #6]
 8016936:	683a      	ldr	r2, [r7, #0]
 8016938:	4798      	blx	r3
 801693a:	4603      	mov	r3, r0
 801693c:	73fb      	strb	r3, [r7, #15]
  return res;
 801693e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016940:	4618      	mov	r0, r3
 8016942:	3710      	adds	r7, #16
 8016944:	46bd      	mov	sp, r7
 8016946:	bd80      	pop	{r7, pc}
 8016948:	20001cac 	.word	0x20001cac

0801694c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801694c:	b480      	push	{r7}
 801694e:	b085      	sub	sp, #20
 8016950:	af00      	add	r7, sp, #0
 8016952:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	3301      	adds	r3, #1
 8016958:	781b      	ldrb	r3, [r3, #0]
 801695a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801695c:	89fb      	ldrh	r3, [r7, #14]
 801695e:	021b      	lsls	r3, r3, #8
 8016960:	b21a      	sxth	r2, r3
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	781b      	ldrb	r3, [r3, #0]
 8016966:	b21b      	sxth	r3, r3
 8016968:	4313      	orrs	r3, r2
 801696a:	b21b      	sxth	r3, r3
 801696c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801696e:	89fb      	ldrh	r3, [r7, #14]
}
 8016970:	4618      	mov	r0, r3
 8016972:	3714      	adds	r7, #20
 8016974:	46bd      	mov	sp, r7
 8016976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801697a:	4770      	bx	lr

0801697c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801697c:	b480      	push	{r7}
 801697e:	b085      	sub	sp, #20
 8016980:	af00      	add	r7, sp, #0
 8016982:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	3303      	adds	r3, #3
 8016988:	781b      	ldrb	r3, [r3, #0]
 801698a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	021b      	lsls	r3, r3, #8
 8016990:	687a      	ldr	r2, [r7, #4]
 8016992:	3202      	adds	r2, #2
 8016994:	7812      	ldrb	r2, [r2, #0]
 8016996:	4313      	orrs	r3, r2
 8016998:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801699a:	68fb      	ldr	r3, [r7, #12]
 801699c:	021b      	lsls	r3, r3, #8
 801699e:	687a      	ldr	r2, [r7, #4]
 80169a0:	3201      	adds	r2, #1
 80169a2:	7812      	ldrb	r2, [r2, #0]
 80169a4:	4313      	orrs	r3, r2
 80169a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	021b      	lsls	r3, r3, #8
 80169ac:	687a      	ldr	r2, [r7, #4]
 80169ae:	7812      	ldrb	r2, [r2, #0]
 80169b0:	4313      	orrs	r3, r2
 80169b2:	60fb      	str	r3, [r7, #12]
	return rv;
 80169b4:	68fb      	ldr	r3, [r7, #12]
}
 80169b6:	4618      	mov	r0, r3
 80169b8:	3714      	adds	r7, #20
 80169ba:	46bd      	mov	sp, r7
 80169bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c0:	4770      	bx	lr

080169c2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80169c2:	b480      	push	{r7}
 80169c4:	b083      	sub	sp, #12
 80169c6:	af00      	add	r7, sp, #0
 80169c8:	6078      	str	r0, [r7, #4]
 80169ca:	460b      	mov	r3, r1
 80169cc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	1c5a      	adds	r2, r3, #1
 80169d2:	607a      	str	r2, [r7, #4]
 80169d4:	887a      	ldrh	r2, [r7, #2]
 80169d6:	b2d2      	uxtb	r2, r2
 80169d8:	701a      	strb	r2, [r3, #0]
 80169da:	887b      	ldrh	r3, [r7, #2]
 80169dc:	0a1b      	lsrs	r3, r3, #8
 80169de:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	1c5a      	adds	r2, r3, #1
 80169e4:	607a      	str	r2, [r7, #4]
 80169e6:	887a      	ldrh	r2, [r7, #2]
 80169e8:	b2d2      	uxtb	r2, r2
 80169ea:	701a      	strb	r2, [r3, #0]
}
 80169ec:	bf00      	nop
 80169ee:	370c      	adds	r7, #12
 80169f0:	46bd      	mov	sp, r7
 80169f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169f6:	4770      	bx	lr

080169f8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80169f8:	b480      	push	{r7}
 80169fa:	b083      	sub	sp, #12
 80169fc:	af00      	add	r7, sp, #0
 80169fe:	6078      	str	r0, [r7, #4]
 8016a00:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	1c5a      	adds	r2, r3, #1
 8016a06:	607a      	str	r2, [r7, #4]
 8016a08:	683a      	ldr	r2, [r7, #0]
 8016a0a:	b2d2      	uxtb	r2, r2
 8016a0c:	701a      	strb	r2, [r3, #0]
 8016a0e:	683b      	ldr	r3, [r7, #0]
 8016a10:	0a1b      	lsrs	r3, r3, #8
 8016a12:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	1c5a      	adds	r2, r3, #1
 8016a18:	607a      	str	r2, [r7, #4]
 8016a1a:	683a      	ldr	r2, [r7, #0]
 8016a1c:	b2d2      	uxtb	r2, r2
 8016a1e:	701a      	strb	r2, [r3, #0]
 8016a20:	683b      	ldr	r3, [r7, #0]
 8016a22:	0a1b      	lsrs	r3, r3, #8
 8016a24:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	1c5a      	adds	r2, r3, #1
 8016a2a:	607a      	str	r2, [r7, #4]
 8016a2c:	683a      	ldr	r2, [r7, #0]
 8016a2e:	b2d2      	uxtb	r2, r2
 8016a30:	701a      	strb	r2, [r3, #0]
 8016a32:	683b      	ldr	r3, [r7, #0]
 8016a34:	0a1b      	lsrs	r3, r3, #8
 8016a36:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	1c5a      	adds	r2, r3, #1
 8016a3c:	607a      	str	r2, [r7, #4]
 8016a3e:	683a      	ldr	r2, [r7, #0]
 8016a40:	b2d2      	uxtb	r2, r2
 8016a42:	701a      	strb	r2, [r3, #0]
}
 8016a44:	bf00      	nop
 8016a46:	370c      	adds	r7, #12
 8016a48:	46bd      	mov	sp, r7
 8016a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a4e:	4770      	bx	lr

08016a50 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8016a50:	b480      	push	{r7}
 8016a52:	b087      	sub	sp, #28
 8016a54:	af00      	add	r7, sp, #0
 8016a56:	60f8      	str	r0, [r7, #12]
 8016a58:	60b9      	str	r1, [r7, #8]
 8016a5a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8016a60:	68bb      	ldr	r3, [r7, #8]
 8016a62:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d00d      	beq.n	8016a86 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8016a6a:	693a      	ldr	r2, [r7, #16]
 8016a6c:	1c53      	adds	r3, r2, #1
 8016a6e:	613b      	str	r3, [r7, #16]
 8016a70:	697b      	ldr	r3, [r7, #20]
 8016a72:	1c59      	adds	r1, r3, #1
 8016a74:	6179      	str	r1, [r7, #20]
 8016a76:	7812      	ldrb	r2, [r2, #0]
 8016a78:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	3b01      	subs	r3, #1
 8016a7e:	607b      	str	r3, [r7, #4]
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d1f1      	bne.n	8016a6a <mem_cpy+0x1a>
	}
}
 8016a86:	bf00      	nop
 8016a88:	371c      	adds	r7, #28
 8016a8a:	46bd      	mov	sp, r7
 8016a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a90:	4770      	bx	lr

08016a92 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8016a92:	b480      	push	{r7}
 8016a94:	b087      	sub	sp, #28
 8016a96:	af00      	add	r7, sp, #0
 8016a98:	60f8      	str	r0, [r7, #12]
 8016a9a:	60b9      	str	r1, [r7, #8]
 8016a9c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8016a9e:	68fb      	ldr	r3, [r7, #12]
 8016aa0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8016aa2:	697b      	ldr	r3, [r7, #20]
 8016aa4:	1c5a      	adds	r2, r3, #1
 8016aa6:	617a      	str	r2, [r7, #20]
 8016aa8:	68ba      	ldr	r2, [r7, #8]
 8016aaa:	b2d2      	uxtb	r2, r2
 8016aac:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	3b01      	subs	r3, #1
 8016ab2:	607b      	str	r3, [r7, #4]
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d1f3      	bne.n	8016aa2 <mem_set+0x10>
}
 8016aba:	bf00      	nop
 8016abc:	bf00      	nop
 8016abe:	371c      	adds	r7, #28
 8016ac0:	46bd      	mov	sp, r7
 8016ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ac6:	4770      	bx	lr

08016ac8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8016ac8:	b480      	push	{r7}
 8016aca:	b089      	sub	sp, #36	; 0x24
 8016acc:	af00      	add	r7, sp, #0
 8016ace:	60f8      	str	r0, [r7, #12]
 8016ad0:	60b9      	str	r1, [r7, #8]
 8016ad2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8016ad4:	68fb      	ldr	r3, [r7, #12]
 8016ad6:	61fb      	str	r3, [r7, #28]
 8016ad8:	68bb      	ldr	r3, [r7, #8]
 8016ada:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8016adc:	2300      	movs	r3, #0
 8016ade:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8016ae0:	69fb      	ldr	r3, [r7, #28]
 8016ae2:	1c5a      	adds	r2, r3, #1
 8016ae4:	61fa      	str	r2, [r7, #28]
 8016ae6:	781b      	ldrb	r3, [r3, #0]
 8016ae8:	4619      	mov	r1, r3
 8016aea:	69bb      	ldr	r3, [r7, #24]
 8016aec:	1c5a      	adds	r2, r3, #1
 8016aee:	61ba      	str	r2, [r7, #24]
 8016af0:	781b      	ldrb	r3, [r3, #0]
 8016af2:	1acb      	subs	r3, r1, r3
 8016af4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	3b01      	subs	r3, #1
 8016afa:	607b      	str	r3, [r7, #4]
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d002      	beq.n	8016b08 <mem_cmp+0x40>
 8016b02:	697b      	ldr	r3, [r7, #20]
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	d0eb      	beq.n	8016ae0 <mem_cmp+0x18>

	return r;
 8016b08:	697b      	ldr	r3, [r7, #20]
}
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	3724      	adds	r7, #36	; 0x24
 8016b0e:	46bd      	mov	sp, r7
 8016b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b14:	4770      	bx	lr

08016b16 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8016b16:	b480      	push	{r7}
 8016b18:	b083      	sub	sp, #12
 8016b1a:	af00      	add	r7, sp, #0
 8016b1c:	6078      	str	r0, [r7, #4]
 8016b1e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8016b20:	e002      	b.n	8016b28 <chk_chr+0x12>
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	3301      	adds	r3, #1
 8016b26:	607b      	str	r3, [r7, #4]
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	781b      	ldrb	r3, [r3, #0]
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d005      	beq.n	8016b3c <chk_chr+0x26>
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	781b      	ldrb	r3, [r3, #0]
 8016b34:	461a      	mov	r2, r3
 8016b36:	683b      	ldr	r3, [r7, #0]
 8016b38:	4293      	cmp	r3, r2
 8016b3a:	d1f2      	bne.n	8016b22 <chk_chr+0xc>
	return *str;
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	781b      	ldrb	r3, [r3, #0]
}
 8016b40:	4618      	mov	r0, r3
 8016b42:	370c      	adds	r7, #12
 8016b44:	46bd      	mov	sp, r7
 8016b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b4a:	4770      	bx	lr

08016b4c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8016b4c:	b480      	push	{r7}
 8016b4e:	b085      	sub	sp, #20
 8016b50:	af00      	add	r7, sp, #0
 8016b52:	6078      	str	r0, [r7, #4]
 8016b54:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016b56:	2300      	movs	r3, #0
 8016b58:	60bb      	str	r3, [r7, #8]
 8016b5a:	68bb      	ldr	r3, [r7, #8]
 8016b5c:	60fb      	str	r3, [r7, #12]
 8016b5e:	e029      	b.n	8016bb4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8016b60:	4a27      	ldr	r2, [pc, #156]	; (8016c00 <chk_lock+0xb4>)
 8016b62:	68fb      	ldr	r3, [r7, #12]
 8016b64:	011b      	lsls	r3, r3, #4
 8016b66:	4413      	add	r3, r2
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d01d      	beq.n	8016baa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016b6e:	4a24      	ldr	r2, [pc, #144]	; (8016c00 <chk_lock+0xb4>)
 8016b70:	68fb      	ldr	r3, [r7, #12]
 8016b72:	011b      	lsls	r3, r3, #4
 8016b74:	4413      	add	r3, r2
 8016b76:	681a      	ldr	r2, [r3, #0]
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	681b      	ldr	r3, [r3, #0]
 8016b7c:	429a      	cmp	r2, r3
 8016b7e:	d116      	bne.n	8016bae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8016b80:	4a1f      	ldr	r2, [pc, #124]	; (8016c00 <chk_lock+0xb4>)
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	011b      	lsls	r3, r3, #4
 8016b86:	4413      	add	r3, r2
 8016b88:	3304      	adds	r3, #4
 8016b8a:	681a      	ldr	r2, [r3, #0]
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016b90:	429a      	cmp	r2, r3
 8016b92:	d10c      	bne.n	8016bae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8016b94:	4a1a      	ldr	r2, [pc, #104]	; (8016c00 <chk_lock+0xb4>)
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	011b      	lsls	r3, r3, #4
 8016b9a:	4413      	add	r3, r2
 8016b9c:	3308      	adds	r3, #8
 8016b9e:	681a      	ldr	r2, [r3, #0]
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8016ba4:	429a      	cmp	r2, r3
 8016ba6:	d102      	bne.n	8016bae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8016ba8:	e007      	b.n	8016bba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8016baa:	2301      	movs	r3, #1
 8016bac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016bae:	68fb      	ldr	r3, [r7, #12]
 8016bb0:	3301      	adds	r3, #1
 8016bb2:	60fb      	str	r3, [r7, #12]
 8016bb4:	68fb      	ldr	r3, [r7, #12]
 8016bb6:	2b01      	cmp	r3, #1
 8016bb8:	d9d2      	bls.n	8016b60 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8016bba:	68fb      	ldr	r3, [r7, #12]
 8016bbc:	2b02      	cmp	r3, #2
 8016bbe:	d109      	bne.n	8016bd4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8016bc0:	68bb      	ldr	r3, [r7, #8]
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d102      	bne.n	8016bcc <chk_lock+0x80>
 8016bc6:	683b      	ldr	r3, [r7, #0]
 8016bc8:	2b02      	cmp	r3, #2
 8016bca:	d101      	bne.n	8016bd0 <chk_lock+0x84>
 8016bcc:	2300      	movs	r3, #0
 8016bce:	e010      	b.n	8016bf2 <chk_lock+0xa6>
 8016bd0:	2312      	movs	r3, #18
 8016bd2:	e00e      	b.n	8016bf2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8016bd4:	683b      	ldr	r3, [r7, #0]
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d108      	bne.n	8016bec <chk_lock+0xa0>
 8016bda:	4a09      	ldr	r2, [pc, #36]	; (8016c00 <chk_lock+0xb4>)
 8016bdc:	68fb      	ldr	r3, [r7, #12]
 8016bde:	011b      	lsls	r3, r3, #4
 8016be0:	4413      	add	r3, r2
 8016be2:	330c      	adds	r3, #12
 8016be4:	881b      	ldrh	r3, [r3, #0]
 8016be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016bea:	d101      	bne.n	8016bf0 <chk_lock+0xa4>
 8016bec:	2310      	movs	r3, #16
 8016bee:	e000      	b.n	8016bf2 <chk_lock+0xa6>
 8016bf0:	2300      	movs	r3, #0
}
 8016bf2:	4618      	mov	r0, r3
 8016bf4:	3714      	adds	r7, #20
 8016bf6:	46bd      	mov	sp, r7
 8016bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bfc:	4770      	bx	lr
 8016bfe:	bf00      	nop
 8016c00:	20001a8c 	.word	0x20001a8c

08016c04 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8016c04:	b480      	push	{r7}
 8016c06:	b083      	sub	sp, #12
 8016c08:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8016c0a:	2300      	movs	r3, #0
 8016c0c:	607b      	str	r3, [r7, #4]
 8016c0e:	e002      	b.n	8016c16 <enq_lock+0x12>
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	3301      	adds	r3, #1
 8016c14:	607b      	str	r3, [r7, #4]
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	2b01      	cmp	r3, #1
 8016c1a:	d806      	bhi.n	8016c2a <enq_lock+0x26>
 8016c1c:	4a09      	ldr	r2, [pc, #36]	; (8016c44 <enq_lock+0x40>)
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	011b      	lsls	r3, r3, #4
 8016c22:	4413      	add	r3, r2
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d1f2      	bne.n	8016c10 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	2b02      	cmp	r3, #2
 8016c2e:	bf14      	ite	ne
 8016c30:	2301      	movne	r3, #1
 8016c32:	2300      	moveq	r3, #0
 8016c34:	b2db      	uxtb	r3, r3
}
 8016c36:	4618      	mov	r0, r3
 8016c38:	370c      	adds	r7, #12
 8016c3a:	46bd      	mov	sp, r7
 8016c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c40:	4770      	bx	lr
 8016c42:	bf00      	nop
 8016c44:	20001a8c 	.word	0x20001a8c

08016c48 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8016c48:	b480      	push	{r7}
 8016c4a:	b085      	sub	sp, #20
 8016c4c:	af00      	add	r7, sp, #0
 8016c4e:	6078      	str	r0, [r7, #4]
 8016c50:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8016c52:	2300      	movs	r3, #0
 8016c54:	60fb      	str	r3, [r7, #12]
 8016c56:	e01f      	b.n	8016c98 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8016c58:	4a41      	ldr	r2, [pc, #260]	; (8016d60 <inc_lock+0x118>)
 8016c5a:	68fb      	ldr	r3, [r7, #12]
 8016c5c:	011b      	lsls	r3, r3, #4
 8016c5e:	4413      	add	r3, r2
 8016c60:	681a      	ldr	r2, [r3, #0]
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	681b      	ldr	r3, [r3, #0]
 8016c66:	429a      	cmp	r2, r3
 8016c68:	d113      	bne.n	8016c92 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8016c6a:	4a3d      	ldr	r2, [pc, #244]	; (8016d60 <inc_lock+0x118>)
 8016c6c:	68fb      	ldr	r3, [r7, #12]
 8016c6e:	011b      	lsls	r3, r3, #4
 8016c70:	4413      	add	r3, r2
 8016c72:	3304      	adds	r3, #4
 8016c74:	681a      	ldr	r2, [r3, #0]
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8016c7a:	429a      	cmp	r2, r3
 8016c7c:	d109      	bne.n	8016c92 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8016c7e:	4a38      	ldr	r2, [pc, #224]	; (8016d60 <inc_lock+0x118>)
 8016c80:	68fb      	ldr	r3, [r7, #12]
 8016c82:	011b      	lsls	r3, r3, #4
 8016c84:	4413      	add	r3, r2
 8016c86:	3308      	adds	r3, #8
 8016c88:	681a      	ldr	r2, [r3, #0]
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8016c8e:	429a      	cmp	r2, r3
 8016c90:	d006      	beq.n	8016ca0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8016c92:	68fb      	ldr	r3, [r7, #12]
 8016c94:	3301      	adds	r3, #1
 8016c96:	60fb      	str	r3, [r7, #12]
 8016c98:	68fb      	ldr	r3, [r7, #12]
 8016c9a:	2b01      	cmp	r3, #1
 8016c9c:	d9dc      	bls.n	8016c58 <inc_lock+0x10>
 8016c9e:	e000      	b.n	8016ca2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8016ca0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8016ca2:	68fb      	ldr	r3, [r7, #12]
 8016ca4:	2b02      	cmp	r3, #2
 8016ca6:	d132      	bne.n	8016d0e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8016ca8:	2300      	movs	r3, #0
 8016caa:	60fb      	str	r3, [r7, #12]
 8016cac:	e002      	b.n	8016cb4 <inc_lock+0x6c>
 8016cae:	68fb      	ldr	r3, [r7, #12]
 8016cb0:	3301      	adds	r3, #1
 8016cb2:	60fb      	str	r3, [r7, #12]
 8016cb4:	68fb      	ldr	r3, [r7, #12]
 8016cb6:	2b01      	cmp	r3, #1
 8016cb8:	d806      	bhi.n	8016cc8 <inc_lock+0x80>
 8016cba:	4a29      	ldr	r2, [pc, #164]	; (8016d60 <inc_lock+0x118>)
 8016cbc:	68fb      	ldr	r3, [r7, #12]
 8016cbe:	011b      	lsls	r3, r3, #4
 8016cc0:	4413      	add	r3, r2
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d1f2      	bne.n	8016cae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	2b02      	cmp	r3, #2
 8016ccc:	d101      	bne.n	8016cd2 <inc_lock+0x8a>
 8016cce:	2300      	movs	r3, #0
 8016cd0:	e040      	b.n	8016d54 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	681a      	ldr	r2, [r3, #0]
 8016cd6:	4922      	ldr	r1, [pc, #136]	; (8016d60 <inc_lock+0x118>)
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	011b      	lsls	r3, r3, #4
 8016cdc:	440b      	add	r3, r1
 8016cde:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	689a      	ldr	r2, [r3, #8]
 8016ce4:	491e      	ldr	r1, [pc, #120]	; (8016d60 <inc_lock+0x118>)
 8016ce6:	68fb      	ldr	r3, [r7, #12]
 8016ce8:	011b      	lsls	r3, r3, #4
 8016cea:	440b      	add	r3, r1
 8016cec:	3304      	adds	r3, #4
 8016cee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	695a      	ldr	r2, [r3, #20]
 8016cf4:	491a      	ldr	r1, [pc, #104]	; (8016d60 <inc_lock+0x118>)
 8016cf6:	68fb      	ldr	r3, [r7, #12]
 8016cf8:	011b      	lsls	r3, r3, #4
 8016cfa:	440b      	add	r3, r1
 8016cfc:	3308      	adds	r3, #8
 8016cfe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8016d00:	4a17      	ldr	r2, [pc, #92]	; (8016d60 <inc_lock+0x118>)
 8016d02:	68fb      	ldr	r3, [r7, #12]
 8016d04:	011b      	lsls	r3, r3, #4
 8016d06:	4413      	add	r3, r2
 8016d08:	330c      	adds	r3, #12
 8016d0a:	2200      	movs	r2, #0
 8016d0c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8016d0e:	683b      	ldr	r3, [r7, #0]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d009      	beq.n	8016d28 <inc_lock+0xe0>
 8016d14:	4a12      	ldr	r2, [pc, #72]	; (8016d60 <inc_lock+0x118>)
 8016d16:	68fb      	ldr	r3, [r7, #12]
 8016d18:	011b      	lsls	r3, r3, #4
 8016d1a:	4413      	add	r3, r2
 8016d1c:	330c      	adds	r3, #12
 8016d1e:	881b      	ldrh	r3, [r3, #0]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d001      	beq.n	8016d28 <inc_lock+0xe0>
 8016d24:	2300      	movs	r3, #0
 8016d26:	e015      	b.n	8016d54 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8016d28:	683b      	ldr	r3, [r7, #0]
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d108      	bne.n	8016d40 <inc_lock+0xf8>
 8016d2e:	4a0c      	ldr	r2, [pc, #48]	; (8016d60 <inc_lock+0x118>)
 8016d30:	68fb      	ldr	r3, [r7, #12]
 8016d32:	011b      	lsls	r3, r3, #4
 8016d34:	4413      	add	r3, r2
 8016d36:	330c      	adds	r3, #12
 8016d38:	881b      	ldrh	r3, [r3, #0]
 8016d3a:	3301      	adds	r3, #1
 8016d3c:	b29a      	uxth	r2, r3
 8016d3e:	e001      	b.n	8016d44 <inc_lock+0xfc>
 8016d40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016d44:	4906      	ldr	r1, [pc, #24]	; (8016d60 <inc_lock+0x118>)
 8016d46:	68fb      	ldr	r3, [r7, #12]
 8016d48:	011b      	lsls	r3, r3, #4
 8016d4a:	440b      	add	r3, r1
 8016d4c:	330c      	adds	r3, #12
 8016d4e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8016d50:	68fb      	ldr	r3, [r7, #12]
 8016d52:	3301      	adds	r3, #1
}
 8016d54:	4618      	mov	r0, r3
 8016d56:	3714      	adds	r7, #20
 8016d58:	46bd      	mov	sp, r7
 8016d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d5e:	4770      	bx	lr
 8016d60:	20001a8c 	.word	0x20001a8c

08016d64 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8016d64:	b480      	push	{r7}
 8016d66:	b085      	sub	sp, #20
 8016d68:	af00      	add	r7, sp, #0
 8016d6a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	3b01      	subs	r3, #1
 8016d70:	607b      	str	r3, [r7, #4]
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	2b01      	cmp	r3, #1
 8016d76:	d825      	bhi.n	8016dc4 <dec_lock+0x60>
		n = Files[i].ctr;
 8016d78:	4a17      	ldr	r2, [pc, #92]	; (8016dd8 <dec_lock+0x74>)
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	011b      	lsls	r3, r3, #4
 8016d7e:	4413      	add	r3, r2
 8016d80:	330c      	adds	r3, #12
 8016d82:	881b      	ldrh	r3, [r3, #0]
 8016d84:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8016d86:	89fb      	ldrh	r3, [r7, #14]
 8016d88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016d8c:	d101      	bne.n	8016d92 <dec_lock+0x2e>
 8016d8e:	2300      	movs	r3, #0
 8016d90:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8016d92:	89fb      	ldrh	r3, [r7, #14]
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d002      	beq.n	8016d9e <dec_lock+0x3a>
 8016d98:	89fb      	ldrh	r3, [r7, #14]
 8016d9a:	3b01      	subs	r3, #1
 8016d9c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8016d9e:	4a0e      	ldr	r2, [pc, #56]	; (8016dd8 <dec_lock+0x74>)
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	011b      	lsls	r3, r3, #4
 8016da4:	4413      	add	r3, r2
 8016da6:	330c      	adds	r3, #12
 8016da8:	89fa      	ldrh	r2, [r7, #14]
 8016daa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8016dac:	89fb      	ldrh	r3, [r7, #14]
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	d105      	bne.n	8016dbe <dec_lock+0x5a>
 8016db2:	4a09      	ldr	r2, [pc, #36]	; (8016dd8 <dec_lock+0x74>)
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	011b      	lsls	r3, r3, #4
 8016db8:	4413      	add	r3, r2
 8016dba:	2200      	movs	r2, #0
 8016dbc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8016dbe:	2300      	movs	r3, #0
 8016dc0:	737b      	strb	r3, [r7, #13]
 8016dc2:	e001      	b.n	8016dc8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8016dc4:	2302      	movs	r3, #2
 8016dc6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8016dc8:	7b7b      	ldrb	r3, [r7, #13]
}
 8016dca:	4618      	mov	r0, r3
 8016dcc:	3714      	adds	r7, #20
 8016dce:	46bd      	mov	sp, r7
 8016dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dd4:	4770      	bx	lr
 8016dd6:	bf00      	nop
 8016dd8:	20001a8c 	.word	0x20001a8c

08016ddc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8016ddc:	b480      	push	{r7}
 8016dde:	b085      	sub	sp, #20
 8016de0:	af00      	add	r7, sp, #0
 8016de2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8016de4:	2300      	movs	r3, #0
 8016de6:	60fb      	str	r3, [r7, #12]
 8016de8:	e010      	b.n	8016e0c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8016dea:	4a0d      	ldr	r2, [pc, #52]	; (8016e20 <clear_lock+0x44>)
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	011b      	lsls	r3, r3, #4
 8016df0:	4413      	add	r3, r2
 8016df2:	681b      	ldr	r3, [r3, #0]
 8016df4:	687a      	ldr	r2, [r7, #4]
 8016df6:	429a      	cmp	r2, r3
 8016df8:	d105      	bne.n	8016e06 <clear_lock+0x2a>
 8016dfa:	4a09      	ldr	r2, [pc, #36]	; (8016e20 <clear_lock+0x44>)
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	011b      	lsls	r3, r3, #4
 8016e00:	4413      	add	r3, r2
 8016e02:	2200      	movs	r2, #0
 8016e04:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	3301      	adds	r3, #1
 8016e0a:	60fb      	str	r3, [r7, #12]
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	2b01      	cmp	r3, #1
 8016e10:	d9eb      	bls.n	8016dea <clear_lock+0xe>
	}
}
 8016e12:	bf00      	nop
 8016e14:	bf00      	nop
 8016e16:	3714      	adds	r7, #20
 8016e18:	46bd      	mov	sp, r7
 8016e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e1e:	4770      	bx	lr
 8016e20:	20001a8c 	.word	0x20001a8c

08016e24 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8016e24:	b580      	push	{r7, lr}
 8016e26:	b086      	sub	sp, #24
 8016e28:	af00      	add	r7, sp, #0
 8016e2a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8016e2c:	2300      	movs	r3, #0
 8016e2e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	78db      	ldrb	r3, [r3, #3]
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d034      	beq.n	8016ea2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e3c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	7858      	ldrb	r0, [r3, #1]
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8016e48:	2301      	movs	r3, #1
 8016e4a:	697a      	ldr	r2, [r7, #20]
 8016e4c:	f7ff fd40 	bl	80168d0 <disk_write>
 8016e50:	4603      	mov	r3, r0
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d002      	beq.n	8016e5c <sync_window+0x38>
			res = FR_DISK_ERR;
 8016e56:	2301      	movs	r3, #1
 8016e58:	73fb      	strb	r3, [r7, #15]
 8016e5a:	e022      	b.n	8016ea2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	2200      	movs	r2, #0
 8016e60:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e66:	697a      	ldr	r2, [r7, #20]
 8016e68:	1ad2      	subs	r2, r2, r3
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	69db      	ldr	r3, [r3, #28]
 8016e6e:	429a      	cmp	r2, r3
 8016e70:	d217      	bcs.n	8016ea2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	789b      	ldrb	r3, [r3, #2]
 8016e76:	613b      	str	r3, [r7, #16]
 8016e78:	e010      	b.n	8016e9c <sync_window+0x78>
					wsect += fs->fsize;
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	69db      	ldr	r3, [r3, #28]
 8016e7e:	697a      	ldr	r2, [r7, #20]
 8016e80:	4413      	add	r3, r2
 8016e82:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	7858      	ldrb	r0, [r3, #1]
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8016e8e:	2301      	movs	r3, #1
 8016e90:	697a      	ldr	r2, [r7, #20]
 8016e92:	f7ff fd1d 	bl	80168d0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016e96:	693b      	ldr	r3, [r7, #16]
 8016e98:	3b01      	subs	r3, #1
 8016e9a:	613b      	str	r3, [r7, #16]
 8016e9c:	693b      	ldr	r3, [r7, #16]
 8016e9e:	2b01      	cmp	r3, #1
 8016ea0:	d8eb      	bhi.n	8016e7a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8016ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ea4:	4618      	mov	r0, r3
 8016ea6:	3718      	adds	r7, #24
 8016ea8:	46bd      	mov	sp, r7
 8016eaa:	bd80      	pop	{r7, pc}

08016eac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8016eac:	b580      	push	{r7, lr}
 8016eae:	b084      	sub	sp, #16
 8016eb0:	af00      	add	r7, sp, #0
 8016eb2:	6078      	str	r0, [r7, #4]
 8016eb4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8016eb6:	2300      	movs	r3, #0
 8016eb8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016ebe:	683a      	ldr	r2, [r7, #0]
 8016ec0:	429a      	cmp	r2, r3
 8016ec2:	d01b      	beq.n	8016efc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8016ec4:	6878      	ldr	r0, [r7, #4]
 8016ec6:	f7ff ffad 	bl	8016e24 <sync_window>
 8016eca:	4603      	mov	r3, r0
 8016ecc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8016ece:	7bfb      	ldrb	r3, [r7, #15]
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d113      	bne.n	8016efc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	7858      	ldrb	r0, [r3, #1]
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8016ede:	2301      	movs	r3, #1
 8016ee0:	683a      	ldr	r2, [r7, #0]
 8016ee2:	f7ff fcd5 	bl	8016890 <disk_read>
 8016ee6:	4603      	mov	r3, r0
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d004      	beq.n	8016ef6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8016eec:	f04f 33ff 	mov.w	r3, #4294967295
 8016ef0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8016ef2:	2301      	movs	r3, #1
 8016ef4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	683a      	ldr	r2, [r7, #0]
 8016efa:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8016efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8016efe:	4618      	mov	r0, r3
 8016f00:	3710      	adds	r7, #16
 8016f02:	46bd      	mov	sp, r7
 8016f04:	bd80      	pop	{r7, pc}
	...

08016f08 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8016f08:	b580      	push	{r7, lr}
 8016f0a:	b084      	sub	sp, #16
 8016f0c:	af00      	add	r7, sp, #0
 8016f0e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8016f10:	6878      	ldr	r0, [r7, #4]
 8016f12:	f7ff ff87 	bl	8016e24 <sync_window>
 8016f16:	4603      	mov	r3, r0
 8016f18:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8016f1a:	7bfb      	ldrb	r3, [r7, #15]
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d158      	bne.n	8016fd2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	781b      	ldrb	r3, [r3, #0]
 8016f24:	2b03      	cmp	r3, #3
 8016f26:	d148      	bne.n	8016fba <sync_fs+0xb2>
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	791b      	ldrb	r3, [r3, #4]
 8016f2c:	2b01      	cmp	r3, #1
 8016f2e:	d144      	bne.n	8016fba <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	3334      	adds	r3, #52	; 0x34
 8016f34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016f38:	2100      	movs	r1, #0
 8016f3a:	4618      	mov	r0, r3
 8016f3c:	f7ff fda9 	bl	8016a92 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	3334      	adds	r3, #52	; 0x34
 8016f44:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016f48:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8016f4c:	4618      	mov	r0, r3
 8016f4e:	f7ff fd38 	bl	80169c2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	3334      	adds	r3, #52	; 0x34
 8016f56:	4921      	ldr	r1, [pc, #132]	; (8016fdc <sync_fs+0xd4>)
 8016f58:	4618      	mov	r0, r3
 8016f5a:	f7ff fd4d 	bl	80169f8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	3334      	adds	r3, #52	; 0x34
 8016f62:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8016f66:	491e      	ldr	r1, [pc, #120]	; (8016fe0 <sync_fs+0xd8>)
 8016f68:	4618      	mov	r0, r3
 8016f6a:	f7ff fd45 	bl	80169f8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	3334      	adds	r3, #52	; 0x34
 8016f72:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	695b      	ldr	r3, [r3, #20]
 8016f7a:	4619      	mov	r1, r3
 8016f7c:	4610      	mov	r0, r2
 8016f7e:	f7ff fd3b 	bl	80169f8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	3334      	adds	r3, #52	; 0x34
 8016f86:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	691b      	ldr	r3, [r3, #16]
 8016f8e:	4619      	mov	r1, r3
 8016f90:	4610      	mov	r0, r2
 8016f92:	f7ff fd31 	bl	80169f8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	6a1b      	ldr	r3, [r3, #32]
 8016f9a:	1c5a      	adds	r2, r3, #1
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	7858      	ldrb	r0, [r3, #1]
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016fae:	2301      	movs	r3, #1
 8016fb0:	f7ff fc8e 	bl	80168d0 <disk_write>
			fs->fsi_flag = 0;
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	2200      	movs	r2, #0
 8016fb8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	785b      	ldrb	r3, [r3, #1]
 8016fbe:	2200      	movs	r2, #0
 8016fc0:	2100      	movs	r1, #0
 8016fc2:	4618      	mov	r0, r3
 8016fc4:	f7ff fca4 	bl	8016910 <disk_ioctl>
 8016fc8:	4603      	mov	r3, r0
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d001      	beq.n	8016fd2 <sync_fs+0xca>
 8016fce:	2301      	movs	r3, #1
 8016fd0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8016fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8016fd4:	4618      	mov	r0, r3
 8016fd6:	3710      	adds	r7, #16
 8016fd8:	46bd      	mov	sp, r7
 8016fda:	bd80      	pop	{r7, pc}
 8016fdc:	41615252 	.word	0x41615252
 8016fe0:	61417272 	.word	0x61417272

08016fe4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8016fe4:	b480      	push	{r7}
 8016fe6:	b083      	sub	sp, #12
 8016fe8:	af00      	add	r7, sp, #0
 8016fea:	6078      	str	r0, [r7, #4]
 8016fec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8016fee:	683b      	ldr	r3, [r7, #0]
 8016ff0:	3b02      	subs	r3, #2
 8016ff2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	699b      	ldr	r3, [r3, #24]
 8016ff8:	3b02      	subs	r3, #2
 8016ffa:	683a      	ldr	r2, [r7, #0]
 8016ffc:	429a      	cmp	r2, r3
 8016ffe:	d301      	bcc.n	8017004 <clust2sect+0x20>
 8017000:	2300      	movs	r3, #0
 8017002:	e008      	b.n	8017016 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	895b      	ldrh	r3, [r3, #10]
 8017008:	461a      	mov	r2, r3
 801700a:	683b      	ldr	r3, [r7, #0]
 801700c:	fb03 f202 	mul.w	r2, r3, r2
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017014:	4413      	add	r3, r2
}
 8017016:	4618      	mov	r0, r3
 8017018:	370c      	adds	r7, #12
 801701a:	46bd      	mov	sp, r7
 801701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017020:	4770      	bx	lr

08017022 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8017022:	b580      	push	{r7, lr}
 8017024:	b086      	sub	sp, #24
 8017026:	af00      	add	r7, sp, #0
 8017028:	6078      	str	r0, [r7, #4]
 801702a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	681b      	ldr	r3, [r3, #0]
 8017030:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8017032:	683b      	ldr	r3, [r7, #0]
 8017034:	2b01      	cmp	r3, #1
 8017036:	d904      	bls.n	8017042 <get_fat+0x20>
 8017038:	693b      	ldr	r3, [r7, #16]
 801703a:	699b      	ldr	r3, [r3, #24]
 801703c:	683a      	ldr	r2, [r7, #0]
 801703e:	429a      	cmp	r2, r3
 8017040:	d302      	bcc.n	8017048 <get_fat+0x26>
		val = 1;	/* Internal error */
 8017042:	2301      	movs	r3, #1
 8017044:	617b      	str	r3, [r7, #20]
 8017046:	e08f      	b.n	8017168 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8017048:	f04f 33ff 	mov.w	r3, #4294967295
 801704c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801704e:	693b      	ldr	r3, [r7, #16]
 8017050:	781b      	ldrb	r3, [r3, #0]
 8017052:	2b03      	cmp	r3, #3
 8017054:	d062      	beq.n	801711c <get_fat+0xfa>
 8017056:	2b03      	cmp	r3, #3
 8017058:	dc7c      	bgt.n	8017154 <get_fat+0x132>
 801705a:	2b01      	cmp	r3, #1
 801705c:	d002      	beq.n	8017064 <get_fat+0x42>
 801705e:	2b02      	cmp	r3, #2
 8017060:	d042      	beq.n	80170e8 <get_fat+0xc6>
 8017062:	e077      	b.n	8017154 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8017064:	683b      	ldr	r3, [r7, #0]
 8017066:	60fb      	str	r3, [r7, #12]
 8017068:	68fb      	ldr	r3, [r7, #12]
 801706a:	085b      	lsrs	r3, r3, #1
 801706c:	68fa      	ldr	r2, [r7, #12]
 801706e:	4413      	add	r3, r2
 8017070:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017072:	693b      	ldr	r3, [r7, #16]
 8017074:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	0a5b      	lsrs	r3, r3, #9
 801707a:	4413      	add	r3, r2
 801707c:	4619      	mov	r1, r3
 801707e:	6938      	ldr	r0, [r7, #16]
 8017080:	f7ff ff14 	bl	8016eac <move_window>
 8017084:	4603      	mov	r3, r0
 8017086:	2b00      	cmp	r3, #0
 8017088:	d167      	bne.n	801715a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 801708a:	68fb      	ldr	r3, [r7, #12]
 801708c:	1c5a      	adds	r2, r3, #1
 801708e:	60fa      	str	r2, [r7, #12]
 8017090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017094:	693a      	ldr	r2, [r7, #16]
 8017096:	4413      	add	r3, r2
 8017098:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801709c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801709e:	693b      	ldr	r3, [r7, #16]
 80170a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80170a2:	68fb      	ldr	r3, [r7, #12]
 80170a4:	0a5b      	lsrs	r3, r3, #9
 80170a6:	4413      	add	r3, r2
 80170a8:	4619      	mov	r1, r3
 80170aa:	6938      	ldr	r0, [r7, #16]
 80170ac:	f7ff fefe 	bl	8016eac <move_window>
 80170b0:	4603      	mov	r3, r0
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	d153      	bne.n	801715e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80170b6:	68fb      	ldr	r3, [r7, #12]
 80170b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80170bc:	693a      	ldr	r2, [r7, #16]
 80170be:	4413      	add	r3, r2
 80170c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80170c4:	021b      	lsls	r3, r3, #8
 80170c6:	461a      	mov	r2, r3
 80170c8:	68bb      	ldr	r3, [r7, #8]
 80170ca:	4313      	orrs	r3, r2
 80170cc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80170ce:	683b      	ldr	r3, [r7, #0]
 80170d0:	f003 0301 	and.w	r3, r3, #1
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d002      	beq.n	80170de <get_fat+0xbc>
 80170d8:	68bb      	ldr	r3, [r7, #8]
 80170da:	091b      	lsrs	r3, r3, #4
 80170dc:	e002      	b.n	80170e4 <get_fat+0xc2>
 80170de:	68bb      	ldr	r3, [r7, #8]
 80170e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80170e4:	617b      	str	r3, [r7, #20]
			break;
 80170e6:	e03f      	b.n	8017168 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80170e8:	693b      	ldr	r3, [r7, #16]
 80170ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80170ec:	683b      	ldr	r3, [r7, #0]
 80170ee:	0a1b      	lsrs	r3, r3, #8
 80170f0:	4413      	add	r3, r2
 80170f2:	4619      	mov	r1, r3
 80170f4:	6938      	ldr	r0, [r7, #16]
 80170f6:	f7ff fed9 	bl	8016eac <move_window>
 80170fa:	4603      	mov	r3, r0
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d130      	bne.n	8017162 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8017100:	693b      	ldr	r3, [r7, #16]
 8017102:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017106:	683b      	ldr	r3, [r7, #0]
 8017108:	005b      	lsls	r3, r3, #1
 801710a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801710e:	4413      	add	r3, r2
 8017110:	4618      	mov	r0, r3
 8017112:	f7ff fc1b 	bl	801694c <ld_word>
 8017116:	4603      	mov	r3, r0
 8017118:	617b      	str	r3, [r7, #20]
			break;
 801711a:	e025      	b.n	8017168 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801711c:	693b      	ldr	r3, [r7, #16]
 801711e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017120:	683b      	ldr	r3, [r7, #0]
 8017122:	09db      	lsrs	r3, r3, #7
 8017124:	4413      	add	r3, r2
 8017126:	4619      	mov	r1, r3
 8017128:	6938      	ldr	r0, [r7, #16]
 801712a:	f7ff febf 	bl	8016eac <move_window>
 801712e:	4603      	mov	r3, r0
 8017130:	2b00      	cmp	r3, #0
 8017132:	d118      	bne.n	8017166 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8017134:	693b      	ldr	r3, [r7, #16]
 8017136:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801713a:	683b      	ldr	r3, [r7, #0]
 801713c:	009b      	lsls	r3, r3, #2
 801713e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8017142:	4413      	add	r3, r2
 8017144:	4618      	mov	r0, r3
 8017146:	f7ff fc19 	bl	801697c <ld_dword>
 801714a:	4603      	mov	r3, r0
 801714c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8017150:	617b      	str	r3, [r7, #20]
			break;
 8017152:	e009      	b.n	8017168 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8017154:	2301      	movs	r3, #1
 8017156:	617b      	str	r3, [r7, #20]
 8017158:	e006      	b.n	8017168 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801715a:	bf00      	nop
 801715c:	e004      	b.n	8017168 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801715e:	bf00      	nop
 8017160:	e002      	b.n	8017168 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017162:	bf00      	nop
 8017164:	e000      	b.n	8017168 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017166:	bf00      	nop
		}
	}

	return val;
 8017168:	697b      	ldr	r3, [r7, #20]
}
 801716a:	4618      	mov	r0, r3
 801716c:	3718      	adds	r7, #24
 801716e:	46bd      	mov	sp, r7
 8017170:	bd80      	pop	{r7, pc}

08017172 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8017172:	b590      	push	{r4, r7, lr}
 8017174:	b089      	sub	sp, #36	; 0x24
 8017176:	af00      	add	r7, sp, #0
 8017178:	60f8      	str	r0, [r7, #12]
 801717a:	60b9      	str	r1, [r7, #8]
 801717c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801717e:	2302      	movs	r3, #2
 8017180:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8017182:	68bb      	ldr	r3, [r7, #8]
 8017184:	2b01      	cmp	r3, #1
 8017186:	f240 80d2 	bls.w	801732e <put_fat+0x1bc>
 801718a:	68fb      	ldr	r3, [r7, #12]
 801718c:	699b      	ldr	r3, [r3, #24]
 801718e:	68ba      	ldr	r2, [r7, #8]
 8017190:	429a      	cmp	r2, r3
 8017192:	f080 80cc 	bcs.w	801732e <put_fat+0x1bc>
		switch (fs->fs_type) {
 8017196:	68fb      	ldr	r3, [r7, #12]
 8017198:	781b      	ldrb	r3, [r3, #0]
 801719a:	2b03      	cmp	r3, #3
 801719c:	f000 8096 	beq.w	80172cc <put_fat+0x15a>
 80171a0:	2b03      	cmp	r3, #3
 80171a2:	f300 80cd 	bgt.w	8017340 <put_fat+0x1ce>
 80171a6:	2b01      	cmp	r3, #1
 80171a8:	d002      	beq.n	80171b0 <put_fat+0x3e>
 80171aa:	2b02      	cmp	r3, #2
 80171ac:	d06e      	beq.n	801728c <put_fat+0x11a>
 80171ae:	e0c7      	b.n	8017340 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80171b0:	68bb      	ldr	r3, [r7, #8]
 80171b2:	61bb      	str	r3, [r7, #24]
 80171b4:	69bb      	ldr	r3, [r7, #24]
 80171b6:	085b      	lsrs	r3, r3, #1
 80171b8:	69ba      	ldr	r2, [r7, #24]
 80171ba:	4413      	add	r3, r2
 80171bc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80171be:	68fb      	ldr	r3, [r7, #12]
 80171c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80171c2:	69bb      	ldr	r3, [r7, #24]
 80171c4:	0a5b      	lsrs	r3, r3, #9
 80171c6:	4413      	add	r3, r2
 80171c8:	4619      	mov	r1, r3
 80171ca:	68f8      	ldr	r0, [r7, #12]
 80171cc:	f7ff fe6e 	bl	8016eac <move_window>
 80171d0:	4603      	mov	r3, r0
 80171d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80171d4:	7ffb      	ldrb	r3, [r7, #31]
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	f040 80ab 	bne.w	8017332 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80171e2:	69bb      	ldr	r3, [r7, #24]
 80171e4:	1c59      	adds	r1, r3, #1
 80171e6:	61b9      	str	r1, [r7, #24]
 80171e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80171ec:	4413      	add	r3, r2
 80171ee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80171f0:	68bb      	ldr	r3, [r7, #8]
 80171f2:	f003 0301 	and.w	r3, r3, #1
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	d00d      	beq.n	8017216 <put_fat+0xa4>
 80171fa:	697b      	ldr	r3, [r7, #20]
 80171fc:	781b      	ldrb	r3, [r3, #0]
 80171fe:	b25b      	sxtb	r3, r3
 8017200:	f003 030f 	and.w	r3, r3, #15
 8017204:	b25a      	sxtb	r2, r3
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	b2db      	uxtb	r3, r3
 801720a:	011b      	lsls	r3, r3, #4
 801720c:	b25b      	sxtb	r3, r3
 801720e:	4313      	orrs	r3, r2
 8017210:	b25b      	sxtb	r3, r3
 8017212:	b2db      	uxtb	r3, r3
 8017214:	e001      	b.n	801721a <put_fat+0xa8>
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	b2db      	uxtb	r3, r3
 801721a:	697a      	ldr	r2, [r7, #20]
 801721c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801721e:	68fb      	ldr	r3, [r7, #12]
 8017220:	2201      	movs	r2, #1
 8017222:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017224:	68fb      	ldr	r3, [r7, #12]
 8017226:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017228:	69bb      	ldr	r3, [r7, #24]
 801722a:	0a5b      	lsrs	r3, r3, #9
 801722c:	4413      	add	r3, r2
 801722e:	4619      	mov	r1, r3
 8017230:	68f8      	ldr	r0, [r7, #12]
 8017232:	f7ff fe3b 	bl	8016eac <move_window>
 8017236:	4603      	mov	r3, r0
 8017238:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801723a:	7ffb      	ldrb	r3, [r7, #31]
 801723c:	2b00      	cmp	r3, #0
 801723e:	d17a      	bne.n	8017336 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8017240:	68fb      	ldr	r3, [r7, #12]
 8017242:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017246:	69bb      	ldr	r3, [r7, #24]
 8017248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801724c:	4413      	add	r3, r2
 801724e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8017250:	68bb      	ldr	r3, [r7, #8]
 8017252:	f003 0301 	and.w	r3, r3, #1
 8017256:	2b00      	cmp	r3, #0
 8017258:	d003      	beq.n	8017262 <put_fat+0xf0>
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	091b      	lsrs	r3, r3, #4
 801725e:	b2db      	uxtb	r3, r3
 8017260:	e00e      	b.n	8017280 <put_fat+0x10e>
 8017262:	697b      	ldr	r3, [r7, #20]
 8017264:	781b      	ldrb	r3, [r3, #0]
 8017266:	b25b      	sxtb	r3, r3
 8017268:	f023 030f 	bic.w	r3, r3, #15
 801726c:	b25a      	sxtb	r2, r3
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	0a1b      	lsrs	r3, r3, #8
 8017272:	b25b      	sxtb	r3, r3
 8017274:	f003 030f 	and.w	r3, r3, #15
 8017278:	b25b      	sxtb	r3, r3
 801727a:	4313      	orrs	r3, r2
 801727c:	b25b      	sxtb	r3, r3
 801727e:	b2db      	uxtb	r3, r3
 8017280:	697a      	ldr	r2, [r7, #20]
 8017282:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	2201      	movs	r2, #1
 8017288:	70da      	strb	r2, [r3, #3]
			break;
 801728a:	e059      	b.n	8017340 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801728c:	68fb      	ldr	r3, [r7, #12]
 801728e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017290:	68bb      	ldr	r3, [r7, #8]
 8017292:	0a1b      	lsrs	r3, r3, #8
 8017294:	4413      	add	r3, r2
 8017296:	4619      	mov	r1, r3
 8017298:	68f8      	ldr	r0, [r7, #12]
 801729a:	f7ff fe07 	bl	8016eac <move_window>
 801729e:	4603      	mov	r3, r0
 80172a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80172a2:	7ffb      	ldrb	r3, [r7, #31]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d148      	bne.n	801733a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80172a8:	68fb      	ldr	r3, [r7, #12]
 80172aa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80172ae:	68bb      	ldr	r3, [r7, #8]
 80172b0:	005b      	lsls	r3, r3, #1
 80172b2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80172b6:	4413      	add	r3, r2
 80172b8:	687a      	ldr	r2, [r7, #4]
 80172ba:	b292      	uxth	r2, r2
 80172bc:	4611      	mov	r1, r2
 80172be:	4618      	mov	r0, r3
 80172c0:	f7ff fb7f 	bl	80169c2 <st_word>
			fs->wflag = 1;
 80172c4:	68fb      	ldr	r3, [r7, #12]
 80172c6:	2201      	movs	r2, #1
 80172c8:	70da      	strb	r2, [r3, #3]
			break;
 80172ca:	e039      	b.n	8017340 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80172cc:	68fb      	ldr	r3, [r7, #12]
 80172ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80172d0:	68bb      	ldr	r3, [r7, #8]
 80172d2:	09db      	lsrs	r3, r3, #7
 80172d4:	4413      	add	r3, r2
 80172d6:	4619      	mov	r1, r3
 80172d8:	68f8      	ldr	r0, [r7, #12]
 80172da:	f7ff fde7 	bl	8016eac <move_window>
 80172de:	4603      	mov	r3, r0
 80172e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80172e2:	7ffb      	ldrb	r3, [r7, #31]
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d12a      	bne.n	801733e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80172ee:	68fb      	ldr	r3, [r7, #12]
 80172f0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80172f4:	68bb      	ldr	r3, [r7, #8]
 80172f6:	009b      	lsls	r3, r3, #2
 80172f8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80172fc:	4413      	add	r3, r2
 80172fe:	4618      	mov	r0, r3
 8017300:	f7ff fb3c 	bl	801697c <ld_dword>
 8017304:	4603      	mov	r3, r0
 8017306:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801730a:	4323      	orrs	r3, r4
 801730c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801730e:	68fb      	ldr	r3, [r7, #12]
 8017310:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017314:	68bb      	ldr	r3, [r7, #8]
 8017316:	009b      	lsls	r3, r3, #2
 8017318:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801731c:	4413      	add	r3, r2
 801731e:	6879      	ldr	r1, [r7, #4]
 8017320:	4618      	mov	r0, r3
 8017322:	f7ff fb69 	bl	80169f8 <st_dword>
			fs->wflag = 1;
 8017326:	68fb      	ldr	r3, [r7, #12]
 8017328:	2201      	movs	r2, #1
 801732a:	70da      	strb	r2, [r3, #3]
			break;
 801732c:	e008      	b.n	8017340 <put_fat+0x1ce>
		}
	}
 801732e:	bf00      	nop
 8017330:	e006      	b.n	8017340 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8017332:	bf00      	nop
 8017334:	e004      	b.n	8017340 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8017336:	bf00      	nop
 8017338:	e002      	b.n	8017340 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801733a:	bf00      	nop
 801733c:	e000      	b.n	8017340 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801733e:	bf00      	nop
	return res;
 8017340:	7ffb      	ldrb	r3, [r7, #31]
}
 8017342:	4618      	mov	r0, r3
 8017344:	3724      	adds	r7, #36	; 0x24
 8017346:	46bd      	mov	sp, r7
 8017348:	bd90      	pop	{r4, r7, pc}

0801734a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801734a:	b580      	push	{r7, lr}
 801734c:	b088      	sub	sp, #32
 801734e:	af00      	add	r7, sp, #0
 8017350:	60f8      	str	r0, [r7, #12]
 8017352:	60b9      	str	r1, [r7, #8]
 8017354:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8017356:	2300      	movs	r3, #0
 8017358:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801735a:	68fb      	ldr	r3, [r7, #12]
 801735c:	681b      	ldr	r3, [r3, #0]
 801735e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8017360:	68bb      	ldr	r3, [r7, #8]
 8017362:	2b01      	cmp	r3, #1
 8017364:	d904      	bls.n	8017370 <remove_chain+0x26>
 8017366:	69bb      	ldr	r3, [r7, #24]
 8017368:	699b      	ldr	r3, [r3, #24]
 801736a:	68ba      	ldr	r2, [r7, #8]
 801736c:	429a      	cmp	r2, r3
 801736e:	d301      	bcc.n	8017374 <remove_chain+0x2a>
 8017370:	2302      	movs	r3, #2
 8017372:	e04b      	b.n	801740c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	2b00      	cmp	r3, #0
 8017378:	d00c      	beq.n	8017394 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801737a:	f04f 32ff 	mov.w	r2, #4294967295
 801737e:	6879      	ldr	r1, [r7, #4]
 8017380:	69b8      	ldr	r0, [r7, #24]
 8017382:	f7ff fef6 	bl	8017172 <put_fat>
 8017386:	4603      	mov	r3, r0
 8017388:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801738a:	7ffb      	ldrb	r3, [r7, #31]
 801738c:	2b00      	cmp	r3, #0
 801738e:	d001      	beq.n	8017394 <remove_chain+0x4a>
 8017390:	7ffb      	ldrb	r3, [r7, #31]
 8017392:	e03b      	b.n	801740c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8017394:	68b9      	ldr	r1, [r7, #8]
 8017396:	68f8      	ldr	r0, [r7, #12]
 8017398:	f7ff fe43 	bl	8017022 <get_fat>
 801739c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801739e:	697b      	ldr	r3, [r7, #20]
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d031      	beq.n	8017408 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80173a4:	697b      	ldr	r3, [r7, #20]
 80173a6:	2b01      	cmp	r3, #1
 80173a8:	d101      	bne.n	80173ae <remove_chain+0x64>
 80173aa:	2302      	movs	r3, #2
 80173ac:	e02e      	b.n	801740c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80173ae:	697b      	ldr	r3, [r7, #20]
 80173b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80173b4:	d101      	bne.n	80173ba <remove_chain+0x70>
 80173b6:	2301      	movs	r3, #1
 80173b8:	e028      	b.n	801740c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80173ba:	2200      	movs	r2, #0
 80173bc:	68b9      	ldr	r1, [r7, #8]
 80173be:	69b8      	ldr	r0, [r7, #24]
 80173c0:	f7ff fed7 	bl	8017172 <put_fat>
 80173c4:	4603      	mov	r3, r0
 80173c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80173c8:	7ffb      	ldrb	r3, [r7, #31]
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d001      	beq.n	80173d2 <remove_chain+0x88>
 80173ce:	7ffb      	ldrb	r3, [r7, #31]
 80173d0:	e01c      	b.n	801740c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80173d2:	69bb      	ldr	r3, [r7, #24]
 80173d4:	695a      	ldr	r2, [r3, #20]
 80173d6:	69bb      	ldr	r3, [r7, #24]
 80173d8:	699b      	ldr	r3, [r3, #24]
 80173da:	3b02      	subs	r3, #2
 80173dc:	429a      	cmp	r2, r3
 80173de:	d20b      	bcs.n	80173f8 <remove_chain+0xae>
			fs->free_clst++;
 80173e0:	69bb      	ldr	r3, [r7, #24]
 80173e2:	695b      	ldr	r3, [r3, #20]
 80173e4:	1c5a      	adds	r2, r3, #1
 80173e6:	69bb      	ldr	r3, [r7, #24]
 80173e8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80173ea:	69bb      	ldr	r3, [r7, #24]
 80173ec:	791b      	ldrb	r3, [r3, #4]
 80173ee:	f043 0301 	orr.w	r3, r3, #1
 80173f2:	b2da      	uxtb	r2, r3
 80173f4:	69bb      	ldr	r3, [r7, #24]
 80173f6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80173f8:	697b      	ldr	r3, [r7, #20]
 80173fa:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80173fc:	69bb      	ldr	r3, [r7, #24]
 80173fe:	699b      	ldr	r3, [r3, #24]
 8017400:	68ba      	ldr	r2, [r7, #8]
 8017402:	429a      	cmp	r2, r3
 8017404:	d3c6      	bcc.n	8017394 <remove_chain+0x4a>
 8017406:	e000      	b.n	801740a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8017408:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801740a:	2300      	movs	r3, #0
}
 801740c:	4618      	mov	r0, r3
 801740e:	3720      	adds	r7, #32
 8017410:	46bd      	mov	sp, r7
 8017412:	bd80      	pop	{r7, pc}

08017414 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8017414:	b580      	push	{r7, lr}
 8017416:	b088      	sub	sp, #32
 8017418:	af00      	add	r7, sp, #0
 801741a:	6078      	str	r0, [r7, #4]
 801741c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	681b      	ldr	r3, [r3, #0]
 8017422:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8017424:	683b      	ldr	r3, [r7, #0]
 8017426:	2b00      	cmp	r3, #0
 8017428:	d10d      	bne.n	8017446 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801742a:	693b      	ldr	r3, [r7, #16]
 801742c:	691b      	ldr	r3, [r3, #16]
 801742e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8017430:	69bb      	ldr	r3, [r7, #24]
 8017432:	2b00      	cmp	r3, #0
 8017434:	d004      	beq.n	8017440 <create_chain+0x2c>
 8017436:	693b      	ldr	r3, [r7, #16]
 8017438:	699b      	ldr	r3, [r3, #24]
 801743a:	69ba      	ldr	r2, [r7, #24]
 801743c:	429a      	cmp	r2, r3
 801743e:	d31b      	bcc.n	8017478 <create_chain+0x64>
 8017440:	2301      	movs	r3, #1
 8017442:	61bb      	str	r3, [r7, #24]
 8017444:	e018      	b.n	8017478 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8017446:	6839      	ldr	r1, [r7, #0]
 8017448:	6878      	ldr	r0, [r7, #4]
 801744a:	f7ff fdea 	bl	8017022 <get_fat>
 801744e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	2b01      	cmp	r3, #1
 8017454:	d801      	bhi.n	801745a <create_chain+0x46>
 8017456:	2301      	movs	r3, #1
 8017458:	e070      	b.n	801753c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801745a:	68fb      	ldr	r3, [r7, #12]
 801745c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017460:	d101      	bne.n	8017466 <create_chain+0x52>
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	e06a      	b.n	801753c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8017466:	693b      	ldr	r3, [r7, #16]
 8017468:	699b      	ldr	r3, [r3, #24]
 801746a:	68fa      	ldr	r2, [r7, #12]
 801746c:	429a      	cmp	r2, r3
 801746e:	d201      	bcs.n	8017474 <create_chain+0x60>
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	e063      	b.n	801753c <create_chain+0x128>
		scl = clst;
 8017474:	683b      	ldr	r3, [r7, #0]
 8017476:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8017478:	69bb      	ldr	r3, [r7, #24]
 801747a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801747c:	69fb      	ldr	r3, [r7, #28]
 801747e:	3301      	adds	r3, #1
 8017480:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8017482:	693b      	ldr	r3, [r7, #16]
 8017484:	699b      	ldr	r3, [r3, #24]
 8017486:	69fa      	ldr	r2, [r7, #28]
 8017488:	429a      	cmp	r2, r3
 801748a:	d307      	bcc.n	801749c <create_chain+0x88>
				ncl = 2;
 801748c:	2302      	movs	r3, #2
 801748e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8017490:	69fa      	ldr	r2, [r7, #28]
 8017492:	69bb      	ldr	r3, [r7, #24]
 8017494:	429a      	cmp	r2, r3
 8017496:	d901      	bls.n	801749c <create_chain+0x88>
 8017498:	2300      	movs	r3, #0
 801749a:	e04f      	b.n	801753c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801749c:	69f9      	ldr	r1, [r7, #28]
 801749e:	6878      	ldr	r0, [r7, #4]
 80174a0:	f7ff fdbf 	bl	8017022 <get_fat>
 80174a4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80174a6:	68fb      	ldr	r3, [r7, #12]
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d00e      	beq.n	80174ca <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80174ac:	68fb      	ldr	r3, [r7, #12]
 80174ae:	2b01      	cmp	r3, #1
 80174b0:	d003      	beq.n	80174ba <create_chain+0xa6>
 80174b2:	68fb      	ldr	r3, [r7, #12]
 80174b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80174b8:	d101      	bne.n	80174be <create_chain+0xaa>
 80174ba:	68fb      	ldr	r3, [r7, #12]
 80174bc:	e03e      	b.n	801753c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80174be:	69fa      	ldr	r2, [r7, #28]
 80174c0:	69bb      	ldr	r3, [r7, #24]
 80174c2:	429a      	cmp	r2, r3
 80174c4:	d1da      	bne.n	801747c <create_chain+0x68>
 80174c6:	2300      	movs	r3, #0
 80174c8:	e038      	b.n	801753c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80174ca:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80174cc:	f04f 32ff 	mov.w	r2, #4294967295
 80174d0:	69f9      	ldr	r1, [r7, #28]
 80174d2:	6938      	ldr	r0, [r7, #16]
 80174d4:	f7ff fe4d 	bl	8017172 <put_fat>
 80174d8:	4603      	mov	r3, r0
 80174da:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80174dc:	7dfb      	ldrb	r3, [r7, #23]
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d109      	bne.n	80174f6 <create_chain+0xe2>
 80174e2:	683b      	ldr	r3, [r7, #0]
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d006      	beq.n	80174f6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80174e8:	69fa      	ldr	r2, [r7, #28]
 80174ea:	6839      	ldr	r1, [r7, #0]
 80174ec:	6938      	ldr	r0, [r7, #16]
 80174ee:	f7ff fe40 	bl	8017172 <put_fat>
 80174f2:	4603      	mov	r3, r0
 80174f4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80174f6:	7dfb      	ldrb	r3, [r7, #23]
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d116      	bne.n	801752a <create_chain+0x116>
		fs->last_clst = ncl;
 80174fc:	693b      	ldr	r3, [r7, #16]
 80174fe:	69fa      	ldr	r2, [r7, #28]
 8017500:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8017502:	693b      	ldr	r3, [r7, #16]
 8017504:	695a      	ldr	r2, [r3, #20]
 8017506:	693b      	ldr	r3, [r7, #16]
 8017508:	699b      	ldr	r3, [r3, #24]
 801750a:	3b02      	subs	r3, #2
 801750c:	429a      	cmp	r2, r3
 801750e:	d804      	bhi.n	801751a <create_chain+0x106>
 8017510:	693b      	ldr	r3, [r7, #16]
 8017512:	695b      	ldr	r3, [r3, #20]
 8017514:	1e5a      	subs	r2, r3, #1
 8017516:	693b      	ldr	r3, [r7, #16]
 8017518:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 801751a:	693b      	ldr	r3, [r7, #16]
 801751c:	791b      	ldrb	r3, [r3, #4]
 801751e:	f043 0301 	orr.w	r3, r3, #1
 8017522:	b2da      	uxtb	r2, r3
 8017524:	693b      	ldr	r3, [r7, #16]
 8017526:	711a      	strb	r2, [r3, #4]
 8017528:	e007      	b.n	801753a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801752a:	7dfb      	ldrb	r3, [r7, #23]
 801752c:	2b01      	cmp	r3, #1
 801752e:	d102      	bne.n	8017536 <create_chain+0x122>
 8017530:	f04f 33ff 	mov.w	r3, #4294967295
 8017534:	e000      	b.n	8017538 <create_chain+0x124>
 8017536:	2301      	movs	r3, #1
 8017538:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801753a:	69fb      	ldr	r3, [r7, #28]
}
 801753c:	4618      	mov	r0, r3
 801753e:	3720      	adds	r7, #32
 8017540:	46bd      	mov	sp, r7
 8017542:	bd80      	pop	{r7, pc}

08017544 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8017544:	b480      	push	{r7}
 8017546:	b087      	sub	sp, #28
 8017548:	af00      	add	r7, sp, #0
 801754a:	6078      	str	r0, [r7, #4]
 801754c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	681b      	ldr	r3, [r3, #0]
 8017552:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017558:	3304      	adds	r3, #4
 801755a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801755c:	683b      	ldr	r3, [r7, #0]
 801755e:	0a5b      	lsrs	r3, r3, #9
 8017560:	68fa      	ldr	r2, [r7, #12]
 8017562:	8952      	ldrh	r2, [r2, #10]
 8017564:	fbb3 f3f2 	udiv	r3, r3, r2
 8017568:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801756a:	693b      	ldr	r3, [r7, #16]
 801756c:	1d1a      	adds	r2, r3, #4
 801756e:	613a      	str	r2, [r7, #16]
 8017570:	681b      	ldr	r3, [r3, #0]
 8017572:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8017574:	68bb      	ldr	r3, [r7, #8]
 8017576:	2b00      	cmp	r3, #0
 8017578:	d101      	bne.n	801757e <clmt_clust+0x3a>
 801757a:	2300      	movs	r3, #0
 801757c:	e010      	b.n	80175a0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801757e:	697a      	ldr	r2, [r7, #20]
 8017580:	68bb      	ldr	r3, [r7, #8]
 8017582:	429a      	cmp	r2, r3
 8017584:	d307      	bcc.n	8017596 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8017586:	697a      	ldr	r2, [r7, #20]
 8017588:	68bb      	ldr	r3, [r7, #8]
 801758a:	1ad3      	subs	r3, r2, r3
 801758c:	617b      	str	r3, [r7, #20]
 801758e:	693b      	ldr	r3, [r7, #16]
 8017590:	3304      	adds	r3, #4
 8017592:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8017594:	e7e9      	b.n	801756a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8017596:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8017598:	693b      	ldr	r3, [r7, #16]
 801759a:	681a      	ldr	r2, [r3, #0]
 801759c:	697b      	ldr	r3, [r7, #20]
 801759e:	4413      	add	r3, r2
}
 80175a0:	4618      	mov	r0, r3
 80175a2:	371c      	adds	r7, #28
 80175a4:	46bd      	mov	sp, r7
 80175a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175aa:	4770      	bx	lr

080175ac <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80175ac:	b580      	push	{r7, lr}
 80175ae:	b086      	sub	sp, #24
 80175b0:	af00      	add	r7, sp, #0
 80175b2:	6078      	str	r0, [r7, #4]
 80175b4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	681b      	ldr	r3, [r3, #0]
 80175ba:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80175bc:	683b      	ldr	r3, [r7, #0]
 80175be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80175c2:	d204      	bcs.n	80175ce <dir_sdi+0x22>
 80175c4:	683b      	ldr	r3, [r7, #0]
 80175c6:	f003 031f 	and.w	r3, r3, #31
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	d001      	beq.n	80175d2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80175ce:	2302      	movs	r3, #2
 80175d0:	e063      	b.n	801769a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	683a      	ldr	r2, [r7, #0]
 80175d6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	689b      	ldr	r3, [r3, #8]
 80175dc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80175de:	697b      	ldr	r3, [r7, #20]
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d106      	bne.n	80175f2 <dir_sdi+0x46>
 80175e4:	693b      	ldr	r3, [r7, #16]
 80175e6:	781b      	ldrb	r3, [r3, #0]
 80175e8:	2b02      	cmp	r3, #2
 80175ea:	d902      	bls.n	80175f2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80175ec:	693b      	ldr	r3, [r7, #16]
 80175ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80175f0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80175f2:	697b      	ldr	r3, [r7, #20]
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	d10c      	bne.n	8017612 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80175f8:	683b      	ldr	r3, [r7, #0]
 80175fa:	095b      	lsrs	r3, r3, #5
 80175fc:	693a      	ldr	r2, [r7, #16]
 80175fe:	8912      	ldrh	r2, [r2, #8]
 8017600:	4293      	cmp	r3, r2
 8017602:	d301      	bcc.n	8017608 <dir_sdi+0x5c>
 8017604:	2302      	movs	r3, #2
 8017606:	e048      	b.n	801769a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8017608:	693b      	ldr	r3, [r7, #16]
 801760a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	61da      	str	r2, [r3, #28]
 8017610:	e029      	b.n	8017666 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8017612:	693b      	ldr	r3, [r7, #16]
 8017614:	895b      	ldrh	r3, [r3, #10]
 8017616:	025b      	lsls	r3, r3, #9
 8017618:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801761a:	e019      	b.n	8017650 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	6979      	ldr	r1, [r7, #20]
 8017620:	4618      	mov	r0, r3
 8017622:	f7ff fcfe 	bl	8017022 <get_fat>
 8017626:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017628:	697b      	ldr	r3, [r7, #20]
 801762a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801762e:	d101      	bne.n	8017634 <dir_sdi+0x88>
 8017630:	2301      	movs	r3, #1
 8017632:	e032      	b.n	801769a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8017634:	697b      	ldr	r3, [r7, #20]
 8017636:	2b01      	cmp	r3, #1
 8017638:	d904      	bls.n	8017644 <dir_sdi+0x98>
 801763a:	693b      	ldr	r3, [r7, #16]
 801763c:	699b      	ldr	r3, [r3, #24]
 801763e:	697a      	ldr	r2, [r7, #20]
 8017640:	429a      	cmp	r2, r3
 8017642:	d301      	bcc.n	8017648 <dir_sdi+0x9c>
 8017644:	2302      	movs	r3, #2
 8017646:	e028      	b.n	801769a <dir_sdi+0xee>
			ofs -= csz;
 8017648:	683a      	ldr	r2, [r7, #0]
 801764a:	68fb      	ldr	r3, [r7, #12]
 801764c:	1ad3      	subs	r3, r2, r3
 801764e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8017650:	683a      	ldr	r2, [r7, #0]
 8017652:	68fb      	ldr	r3, [r7, #12]
 8017654:	429a      	cmp	r2, r3
 8017656:	d2e1      	bcs.n	801761c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8017658:	6979      	ldr	r1, [r7, #20]
 801765a:	6938      	ldr	r0, [r7, #16]
 801765c:	f7ff fcc2 	bl	8016fe4 <clust2sect>
 8017660:	4602      	mov	r2, r0
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	697a      	ldr	r2, [r7, #20]
 801766a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	69db      	ldr	r3, [r3, #28]
 8017670:	2b00      	cmp	r3, #0
 8017672:	d101      	bne.n	8017678 <dir_sdi+0xcc>
 8017674:	2302      	movs	r3, #2
 8017676:	e010      	b.n	801769a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	69da      	ldr	r2, [r3, #28]
 801767c:	683b      	ldr	r3, [r7, #0]
 801767e:	0a5b      	lsrs	r3, r3, #9
 8017680:	441a      	add	r2, r3
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8017686:	693b      	ldr	r3, [r7, #16]
 8017688:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801768c:	683b      	ldr	r3, [r7, #0]
 801768e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017692:	441a      	add	r2, r3
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8017698:	2300      	movs	r3, #0
}
 801769a:	4618      	mov	r0, r3
 801769c:	3718      	adds	r7, #24
 801769e:	46bd      	mov	sp, r7
 80176a0:	bd80      	pop	{r7, pc}

080176a2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80176a2:	b580      	push	{r7, lr}
 80176a4:	b086      	sub	sp, #24
 80176a6:	af00      	add	r7, sp, #0
 80176a8:	6078      	str	r0, [r7, #4]
 80176aa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	681b      	ldr	r3, [r3, #0]
 80176b0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	695b      	ldr	r3, [r3, #20]
 80176b6:	3320      	adds	r3, #32
 80176b8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	69db      	ldr	r3, [r3, #28]
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d003      	beq.n	80176ca <dir_next+0x28>
 80176c2:	68bb      	ldr	r3, [r7, #8]
 80176c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80176c8:	d301      	bcc.n	80176ce <dir_next+0x2c>
 80176ca:	2304      	movs	r3, #4
 80176cc:	e0aa      	b.n	8017824 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80176ce:	68bb      	ldr	r3, [r7, #8]
 80176d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	f040 8098 	bne.w	801780a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	69db      	ldr	r3, [r3, #28]
 80176de:	1c5a      	adds	r2, r3, #1
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	699b      	ldr	r3, [r3, #24]
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d10b      	bne.n	8017704 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80176ec:	68bb      	ldr	r3, [r7, #8]
 80176ee:	095b      	lsrs	r3, r3, #5
 80176f0:	68fa      	ldr	r2, [r7, #12]
 80176f2:	8912      	ldrh	r2, [r2, #8]
 80176f4:	4293      	cmp	r3, r2
 80176f6:	f0c0 8088 	bcc.w	801780a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	2200      	movs	r2, #0
 80176fe:	61da      	str	r2, [r3, #28]
 8017700:	2304      	movs	r3, #4
 8017702:	e08f      	b.n	8017824 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8017704:	68bb      	ldr	r3, [r7, #8]
 8017706:	0a5b      	lsrs	r3, r3, #9
 8017708:	68fa      	ldr	r2, [r7, #12]
 801770a:	8952      	ldrh	r2, [r2, #10]
 801770c:	3a01      	subs	r2, #1
 801770e:	4013      	ands	r3, r2
 8017710:	2b00      	cmp	r3, #0
 8017712:	d17a      	bne.n	801780a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8017714:	687a      	ldr	r2, [r7, #4]
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	699b      	ldr	r3, [r3, #24]
 801771a:	4619      	mov	r1, r3
 801771c:	4610      	mov	r0, r2
 801771e:	f7ff fc80 	bl	8017022 <get_fat>
 8017722:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8017724:	697b      	ldr	r3, [r7, #20]
 8017726:	2b01      	cmp	r3, #1
 8017728:	d801      	bhi.n	801772e <dir_next+0x8c>
 801772a:	2302      	movs	r3, #2
 801772c:	e07a      	b.n	8017824 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801772e:	697b      	ldr	r3, [r7, #20]
 8017730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017734:	d101      	bne.n	801773a <dir_next+0x98>
 8017736:	2301      	movs	r3, #1
 8017738:	e074      	b.n	8017824 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801773a:	68fb      	ldr	r3, [r7, #12]
 801773c:	699b      	ldr	r3, [r3, #24]
 801773e:	697a      	ldr	r2, [r7, #20]
 8017740:	429a      	cmp	r2, r3
 8017742:	d358      	bcc.n	80177f6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8017744:	683b      	ldr	r3, [r7, #0]
 8017746:	2b00      	cmp	r3, #0
 8017748:	d104      	bne.n	8017754 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	2200      	movs	r2, #0
 801774e:	61da      	str	r2, [r3, #28]
 8017750:	2304      	movs	r3, #4
 8017752:	e067      	b.n	8017824 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8017754:	687a      	ldr	r2, [r7, #4]
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	699b      	ldr	r3, [r3, #24]
 801775a:	4619      	mov	r1, r3
 801775c:	4610      	mov	r0, r2
 801775e:	f7ff fe59 	bl	8017414 <create_chain>
 8017762:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8017764:	697b      	ldr	r3, [r7, #20]
 8017766:	2b00      	cmp	r3, #0
 8017768:	d101      	bne.n	801776e <dir_next+0xcc>
 801776a:	2307      	movs	r3, #7
 801776c:	e05a      	b.n	8017824 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801776e:	697b      	ldr	r3, [r7, #20]
 8017770:	2b01      	cmp	r3, #1
 8017772:	d101      	bne.n	8017778 <dir_next+0xd6>
 8017774:	2302      	movs	r3, #2
 8017776:	e055      	b.n	8017824 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017778:	697b      	ldr	r3, [r7, #20]
 801777a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801777e:	d101      	bne.n	8017784 <dir_next+0xe2>
 8017780:	2301      	movs	r3, #1
 8017782:	e04f      	b.n	8017824 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8017784:	68f8      	ldr	r0, [r7, #12]
 8017786:	f7ff fb4d 	bl	8016e24 <sync_window>
 801778a:	4603      	mov	r3, r0
 801778c:	2b00      	cmp	r3, #0
 801778e:	d001      	beq.n	8017794 <dir_next+0xf2>
 8017790:	2301      	movs	r3, #1
 8017792:	e047      	b.n	8017824 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8017794:	68fb      	ldr	r3, [r7, #12]
 8017796:	3334      	adds	r3, #52	; 0x34
 8017798:	f44f 7200 	mov.w	r2, #512	; 0x200
 801779c:	2100      	movs	r1, #0
 801779e:	4618      	mov	r0, r3
 80177a0:	f7ff f977 	bl	8016a92 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80177a4:	2300      	movs	r3, #0
 80177a6:	613b      	str	r3, [r7, #16]
 80177a8:	6979      	ldr	r1, [r7, #20]
 80177aa:	68f8      	ldr	r0, [r7, #12]
 80177ac:	f7ff fc1a 	bl	8016fe4 <clust2sect>
 80177b0:	4602      	mov	r2, r0
 80177b2:	68fb      	ldr	r3, [r7, #12]
 80177b4:	631a      	str	r2, [r3, #48]	; 0x30
 80177b6:	e012      	b.n	80177de <dir_next+0x13c>
						fs->wflag = 1;
 80177b8:	68fb      	ldr	r3, [r7, #12]
 80177ba:	2201      	movs	r2, #1
 80177bc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80177be:	68f8      	ldr	r0, [r7, #12]
 80177c0:	f7ff fb30 	bl	8016e24 <sync_window>
 80177c4:	4603      	mov	r3, r0
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d001      	beq.n	80177ce <dir_next+0x12c>
 80177ca:	2301      	movs	r3, #1
 80177cc:	e02a      	b.n	8017824 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80177ce:	693b      	ldr	r3, [r7, #16]
 80177d0:	3301      	adds	r3, #1
 80177d2:	613b      	str	r3, [r7, #16]
 80177d4:	68fb      	ldr	r3, [r7, #12]
 80177d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177d8:	1c5a      	adds	r2, r3, #1
 80177da:	68fb      	ldr	r3, [r7, #12]
 80177dc:	631a      	str	r2, [r3, #48]	; 0x30
 80177de:	68fb      	ldr	r3, [r7, #12]
 80177e0:	895b      	ldrh	r3, [r3, #10]
 80177e2:	461a      	mov	r2, r3
 80177e4:	693b      	ldr	r3, [r7, #16]
 80177e6:	4293      	cmp	r3, r2
 80177e8:	d3e6      	bcc.n	80177b8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80177ea:	68fb      	ldr	r3, [r7, #12]
 80177ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80177ee:	693b      	ldr	r3, [r7, #16]
 80177f0:	1ad2      	subs	r2, r2, r3
 80177f2:	68fb      	ldr	r3, [r7, #12]
 80177f4:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	697a      	ldr	r2, [r7, #20]
 80177fa:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80177fc:	6979      	ldr	r1, [r7, #20]
 80177fe:	68f8      	ldr	r0, [r7, #12]
 8017800:	f7ff fbf0 	bl	8016fe4 <clust2sect>
 8017804:	4602      	mov	r2, r0
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	68ba      	ldr	r2, [r7, #8]
 801780e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8017810:	68fb      	ldr	r3, [r7, #12]
 8017812:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017816:	68bb      	ldr	r3, [r7, #8]
 8017818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801781c:	441a      	add	r2, r3
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8017822:	2300      	movs	r3, #0
}
 8017824:	4618      	mov	r0, r3
 8017826:	3718      	adds	r7, #24
 8017828:	46bd      	mov	sp, r7
 801782a:	bd80      	pop	{r7, pc}

0801782c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801782c:	b580      	push	{r7, lr}
 801782e:	b086      	sub	sp, #24
 8017830:	af00      	add	r7, sp, #0
 8017832:	6078      	str	r0, [r7, #4]
 8017834:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	681b      	ldr	r3, [r3, #0]
 801783a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801783c:	2100      	movs	r1, #0
 801783e:	6878      	ldr	r0, [r7, #4]
 8017840:	f7ff feb4 	bl	80175ac <dir_sdi>
 8017844:	4603      	mov	r3, r0
 8017846:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017848:	7dfb      	ldrb	r3, [r7, #23]
 801784a:	2b00      	cmp	r3, #0
 801784c:	d12b      	bne.n	80178a6 <dir_alloc+0x7a>
		n = 0;
 801784e:	2300      	movs	r3, #0
 8017850:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	69db      	ldr	r3, [r3, #28]
 8017856:	4619      	mov	r1, r3
 8017858:	68f8      	ldr	r0, [r7, #12]
 801785a:	f7ff fb27 	bl	8016eac <move_window>
 801785e:	4603      	mov	r3, r0
 8017860:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8017862:	7dfb      	ldrb	r3, [r7, #23]
 8017864:	2b00      	cmp	r3, #0
 8017866:	d11d      	bne.n	80178a4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	6a1b      	ldr	r3, [r3, #32]
 801786c:	781b      	ldrb	r3, [r3, #0]
 801786e:	2be5      	cmp	r3, #229	; 0xe5
 8017870:	d004      	beq.n	801787c <dir_alloc+0x50>
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	6a1b      	ldr	r3, [r3, #32]
 8017876:	781b      	ldrb	r3, [r3, #0]
 8017878:	2b00      	cmp	r3, #0
 801787a:	d107      	bne.n	801788c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801787c:	693b      	ldr	r3, [r7, #16]
 801787e:	3301      	adds	r3, #1
 8017880:	613b      	str	r3, [r7, #16]
 8017882:	693a      	ldr	r2, [r7, #16]
 8017884:	683b      	ldr	r3, [r7, #0]
 8017886:	429a      	cmp	r2, r3
 8017888:	d102      	bne.n	8017890 <dir_alloc+0x64>
 801788a:	e00c      	b.n	80178a6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801788c:	2300      	movs	r3, #0
 801788e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8017890:	2101      	movs	r1, #1
 8017892:	6878      	ldr	r0, [r7, #4]
 8017894:	f7ff ff05 	bl	80176a2 <dir_next>
 8017898:	4603      	mov	r3, r0
 801789a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801789c:	7dfb      	ldrb	r3, [r7, #23]
 801789e:	2b00      	cmp	r3, #0
 80178a0:	d0d7      	beq.n	8017852 <dir_alloc+0x26>
 80178a2:	e000      	b.n	80178a6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80178a4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80178a6:	7dfb      	ldrb	r3, [r7, #23]
 80178a8:	2b04      	cmp	r3, #4
 80178aa:	d101      	bne.n	80178b0 <dir_alloc+0x84>
 80178ac:	2307      	movs	r3, #7
 80178ae:	75fb      	strb	r3, [r7, #23]
	return res;
 80178b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80178b2:	4618      	mov	r0, r3
 80178b4:	3718      	adds	r7, #24
 80178b6:	46bd      	mov	sp, r7
 80178b8:	bd80      	pop	{r7, pc}

080178ba <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80178ba:	b580      	push	{r7, lr}
 80178bc:	b084      	sub	sp, #16
 80178be:	af00      	add	r7, sp, #0
 80178c0:	6078      	str	r0, [r7, #4]
 80178c2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80178c4:	683b      	ldr	r3, [r7, #0]
 80178c6:	331a      	adds	r3, #26
 80178c8:	4618      	mov	r0, r3
 80178ca:	f7ff f83f 	bl	801694c <ld_word>
 80178ce:	4603      	mov	r3, r0
 80178d0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	781b      	ldrb	r3, [r3, #0]
 80178d6:	2b03      	cmp	r3, #3
 80178d8:	d109      	bne.n	80178ee <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80178da:	683b      	ldr	r3, [r7, #0]
 80178dc:	3314      	adds	r3, #20
 80178de:	4618      	mov	r0, r3
 80178e0:	f7ff f834 	bl	801694c <ld_word>
 80178e4:	4603      	mov	r3, r0
 80178e6:	041b      	lsls	r3, r3, #16
 80178e8:	68fa      	ldr	r2, [r7, #12]
 80178ea:	4313      	orrs	r3, r2
 80178ec:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80178ee:	68fb      	ldr	r3, [r7, #12]
}
 80178f0:	4618      	mov	r0, r3
 80178f2:	3710      	adds	r7, #16
 80178f4:	46bd      	mov	sp, r7
 80178f6:	bd80      	pop	{r7, pc}

080178f8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80178f8:	b580      	push	{r7, lr}
 80178fa:	b084      	sub	sp, #16
 80178fc:	af00      	add	r7, sp, #0
 80178fe:	60f8      	str	r0, [r7, #12]
 8017900:	60b9      	str	r1, [r7, #8]
 8017902:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8017904:	68bb      	ldr	r3, [r7, #8]
 8017906:	331a      	adds	r3, #26
 8017908:	687a      	ldr	r2, [r7, #4]
 801790a:	b292      	uxth	r2, r2
 801790c:	4611      	mov	r1, r2
 801790e:	4618      	mov	r0, r3
 8017910:	f7ff f857 	bl	80169c2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8017914:	68fb      	ldr	r3, [r7, #12]
 8017916:	781b      	ldrb	r3, [r3, #0]
 8017918:	2b03      	cmp	r3, #3
 801791a:	d109      	bne.n	8017930 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801791c:	68bb      	ldr	r3, [r7, #8]
 801791e:	f103 0214 	add.w	r2, r3, #20
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	0c1b      	lsrs	r3, r3, #16
 8017926:	b29b      	uxth	r3, r3
 8017928:	4619      	mov	r1, r3
 801792a:	4610      	mov	r0, r2
 801792c:	f7ff f849 	bl	80169c2 <st_word>
	}
}
 8017930:	bf00      	nop
 8017932:	3710      	adds	r7, #16
 8017934:	46bd      	mov	sp, r7
 8017936:	bd80      	pop	{r7, pc}

08017938 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8017938:	b590      	push	{r4, r7, lr}
 801793a:	b087      	sub	sp, #28
 801793c:	af00      	add	r7, sp, #0
 801793e:	6078      	str	r0, [r7, #4]
 8017940:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8017942:	683b      	ldr	r3, [r7, #0]
 8017944:	331a      	adds	r3, #26
 8017946:	4618      	mov	r0, r3
 8017948:	f7ff f800 	bl	801694c <ld_word>
 801794c:	4603      	mov	r3, r0
 801794e:	2b00      	cmp	r3, #0
 8017950:	d001      	beq.n	8017956 <cmp_lfn+0x1e>
 8017952:	2300      	movs	r3, #0
 8017954:	e059      	b.n	8017a0a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8017956:	683b      	ldr	r3, [r7, #0]
 8017958:	781b      	ldrb	r3, [r3, #0]
 801795a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801795e:	1e5a      	subs	r2, r3, #1
 8017960:	4613      	mov	r3, r2
 8017962:	005b      	lsls	r3, r3, #1
 8017964:	4413      	add	r3, r2
 8017966:	009b      	lsls	r3, r3, #2
 8017968:	4413      	add	r3, r2
 801796a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801796c:	2301      	movs	r3, #1
 801796e:	81fb      	strh	r3, [r7, #14]
 8017970:	2300      	movs	r3, #0
 8017972:	613b      	str	r3, [r7, #16]
 8017974:	e033      	b.n	80179de <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8017976:	4a27      	ldr	r2, [pc, #156]	; (8017a14 <cmp_lfn+0xdc>)
 8017978:	693b      	ldr	r3, [r7, #16]
 801797a:	4413      	add	r3, r2
 801797c:	781b      	ldrb	r3, [r3, #0]
 801797e:	461a      	mov	r2, r3
 8017980:	683b      	ldr	r3, [r7, #0]
 8017982:	4413      	add	r3, r2
 8017984:	4618      	mov	r0, r3
 8017986:	f7fe ffe1 	bl	801694c <ld_word>
 801798a:	4603      	mov	r3, r0
 801798c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801798e:	89fb      	ldrh	r3, [r7, #14]
 8017990:	2b00      	cmp	r3, #0
 8017992:	d01a      	beq.n	80179ca <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8017994:	697b      	ldr	r3, [r7, #20]
 8017996:	2bfe      	cmp	r3, #254	; 0xfe
 8017998:	d812      	bhi.n	80179c0 <cmp_lfn+0x88>
 801799a:	89bb      	ldrh	r3, [r7, #12]
 801799c:	4618      	mov	r0, r3
 801799e:	f001 fe25 	bl	80195ec <ff_wtoupper>
 80179a2:	4603      	mov	r3, r0
 80179a4:	461c      	mov	r4, r3
 80179a6:	697b      	ldr	r3, [r7, #20]
 80179a8:	1c5a      	adds	r2, r3, #1
 80179aa:	617a      	str	r2, [r7, #20]
 80179ac:	005b      	lsls	r3, r3, #1
 80179ae:	687a      	ldr	r2, [r7, #4]
 80179b0:	4413      	add	r3, r2
 80179b2:	881b      	ldrh	r3, [r3, #0]
 80179b4:	4618      	mov	r0, r3
 80179b6:	f001 fe19 	bl	80195ec <ff_wtoupper>
 80179ba:	4603      	mov	r3, r0
 80179bc:	429c      	cmp	r4, r3
 80179be:	d001      	beq.n	80179c4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80179c0:	2300      	movs	r3, #0
 80179c2:	e022      	b.n	8017a0a <cmp_lfn+0xd2>
			}
			wc = uc;
 80179c4:	89bb      	ldrh	r3, [r7, #12]
 80179c6:	81fb      	strh	r3, [r7, #14]
 80179c8:	e006      	b.n	80179d8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80179ca:	89bb      	ldrh	r3, [r7, #12]
 80179cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80179d0:	4293      	cmp	r3, r2
 80179d2:	d001      	beq.n	80179d8 <cmp_lfn+0xa0>
 80179d4:	2300      	movs	r3, #0
 80179d6:	e018      	b.n	8017a0a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80179d8:	693b      	ldr	r3, [r7, #16]
 80179da:	3301      	adds	r3, #1
 80179dc:	613b      	str	r3, [r7, #16]
 80179de:	693b      	ldr	r3, [r7, #16]
 80179e0:	2b0c      	cmp	r3, #12
 80179e2:	d9c8      	bls.n	8017976 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80179e4:	683b      	ldr	r3, [r7, #0]
 80179e6:	781b      	ldrb	r3, [r3, #0]
 80179e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d00b      	beq.n	8017a08 <cmp_lfn+0xd0>
 80179f0:	89fb      	ldrh	r3, [r7, #14]
 80179f2:	2b00      	cmp	r3, #0
 80179f4:	d008      	beq.n	8017a08 <cmp_lfn+0xd0>
 80179f6:	697b      	ldr	r3, [r7, #20]
 80179f8:	005b      	lsls	r3, r3, #1
 80179fa:	687a      	ldr	r2, [r7, #4]
 80179fc:	4413      	add	r3, r2
 80179fe:	881b      	ldrh	r3, [r3, #0]
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	d001      	beq.n	8017a08 <cmp_lfn+0xd0>
 8017a04:	2300      	movs	r3, #0
 8017a06:	e000      	b.n	8017a0a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8017a08:	2301      	movs	r3, #1
}
 8017a0a:	4618      	mov	r0, r3
 8017a0c:	371c      	adds	r7, #28
 8017a0e:	46bd      	mov	sp, r7
 8017a10:	bd90      	pop	{r4, r7, pc}
 8017a12:	bf00      	nop
 8017a14:	0802148c 	.word	0x0802148c

08017a18 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8017a18:	b580      	push	{r7, lr}
 8017a1a:	b088      	sub	sp, #32
 8017a1c:	af00      	add	r7, sp, #0
 8017a1e:	60f8      	str	r0, [r7, #12]
 8017a20:	60b9      	str	r1, [r7, #8]
 8017a22:	4611      	mov	r1, r2
 8017a24:	461a      	mov	r2, r3
 8017a26:	460b      	mov	r3, r1
 8017a28:	71fb      	strb	r3, [r7, #7]
 8017a2a:	4613      	mov	r3, r2
 8017a2c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8017a2e:	68bb      	ldr	r3, [r7, #8]
 8017a30:	330d      	adds	r3, #13
 8017a32:	79ba      	ldrb	r2, [r7, #6]
 8017a34:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8017a36:	68bb      	ldr	r3, [r7, #8]
 8017a38:	330b      	adds	r3, #11
 8017a3a:	220f      	movs	r2, #15
 8017a3c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8017a3e:	68bb      	ldr	r3, [r7, #8]
 8017a40:	330c      	adds	r3, #12
 8017a42:	2200      	movs	r2, #0
 8017a44:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8017a46:	68bb      	ldr	r3, [r7, #8]
 8017a48:	331a      	adds	r3, #26
 8017a4a:	2100      	movs	r1, #0
 8017a4c:	4618      	mov	r0, r3
 8017a4e:	f7fe ffb8 	bl	80169c2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8017a52:	79fb      	ldrb	r3, [r7, #7]
 8017a54:	1e5a      	subs	r2, r3, #1
 8017a56:	4613      	mov	r3, r2
 8017a58:	005b      	lsls	r3, r3, #1
 8017a5a:	4413      	add	r3, r2
 8017a5c:	009b      	lsls	r3, r3, #2
 8017a5e:	4413      	add	r3, r2
 8017a60:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8017a62:	2300      	movs	r3, #0
 8017a64:	82fb      	strh	r3, [r7, #22]
 8017a66:	2300      	movs	r3, #0
 8017a68:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8017a6a:	8afb      	ldrh	r3, [r7, #22]
 8017a6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017a70:	4293      	cmp	r3, r2
 8017a72:	d007      	beq.n	8017a84 <put_lfn+0x6c>
 8017a74:	69fb      	ldr	r3, [r7, #28]
 8017a76:	1c5a      	adds	r2, r3, #1
 8017a78:	61fa      	str	r2, [r7, #28]
 8017a7a:	005b      	lsls	r3, r3, #1
 8017a7c:	68fa      	ldr	r2, [r7, #12]
 8017a7e:	4413      	add	r3, r2
 8017a80:	881b      	ldrh	r3, [r3, #0]
 8017a82:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8017a84:	4a17      	ldr	r2, [pc, #92]	; (8017ae4 <put_lfn+0xcc>)
 8017a86:	69bb      	ldr	r3, [r7, #24]
 8017a88:	4413      	add	r3, r2
 8017a8a:	781b      	ldrb	r3, [r3, #0]
 8017a8c:	461a      	mov	r2, r3
 8017a8e:	68bb      	ldr	r3, [r7, #8]
 8017a90:	4413      	add	r3, r2
 8017a92:	8afa      	ldrh	r2, [r7, #22]
 8017a94:	4611      	mov	r1, r2
 8017a96:	4618      	mov	r0, r3
 8017a98:	f7fe ff93 	bl	80169c2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8017a9c:	8afb      	ldrh	r3, [r7, #22]
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d102      	bne.n	8017aa8 <put_lfn+0x90>
 8017aa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017aa6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8017aa8:	69bb      	ldr	r3, [r7, #24]
 8017aaa:	3301      	adds	r3, #1
 8017aac:	61bb      	str	r3, [r7, #24]
 8017aae:	69bb      	ldr	r3, [r7, #24]
 8017ab0:	2b0c      	cmp	r3, #12
 8017ab2:	d9da      	bls.n	8017a6a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8017ab4:	8afb      	ldrh	r3, [r7, #22]
 8017ab6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017aba:	4293      	cmp	r3, r2
 8017abc:	d006      	beq.n	8017acc <put_lfn+0xb4>
 8017abe:	69fb      	ldr	r3, [r7, #28]
 8017ac0:	005b      	lsls	r3, r3, #1
 8017ac2:	68fa      	ldr	r2, [r7, #12]
 8017ac4:	4413      	add	r3, r2
 8017ac6:	881b      	ldrh	r3, [r3, #0]
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	d103      	bne.n	8017ad4 <put_lfn+0xbc>
 8017acc:	79fb      	ldrb	r3, [r7, #7]
 8017ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ad2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8017ad4:	68bb      	ldr	r3, [r7, #8]
 8017ad6:	79fa      	ldrb	r2, [r7, #7]
 8017ad8:	701a      	strb	r2, [r3, #0]
}
 8017ada:	bf00      	nop
 8017adc:	3720      	adds	r7, #32
 8017ade:	46bd      	mov	sp, r7
 8017ae0:	bd80      	pop	{r7, pc}
 8017ae2:	bf00      	nop
 8017ae4:	0802148c 	.word	0x0802148c

08017ae8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8017ae8:	b580      	push	{r7, lr}
 8017aea:	b08c      	sub	sp, #48	; 0x30
 8017aec:	af00      	add	r7, sp, #0
 8017aee:	60f8      	str	r0, [r7, #12]
 8017af0:	60b9      	str	r1, [r7, #8]
 8017af2:	607a      	str	r2, [r7, #4]
 8017af4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8017af6:	220b      	movs	r2, #11
 8017af8:	68b9      	ldr	r1, [r7, #8]
 8017afa:	68f8      	ldr	r0, [r7, #12]
 8017afc:	f7fe ffa8 	bl	8016a50 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8017b00:	683b      	ldr	r3, [r7, #0]
 8017b02:	2b05      	cmp	r3, #5
 8017b04:	d92b      	bls.n	8017b5e <gen_numname+0x76>
		sr = seq;
 8017b06:	683b      	ldr	r3, [r7, #0]
 8017b08:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8017b0a:	e022      	b.n	8017b52 <gen_numname+0x6a>
			wc = *lfn++;
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	1c9a      	adds	r2, r3, #2
 8017b10:	607a      	str	r2, [r7, #4]
 8017b12:	881b      	ldrh	r3, [r3, #0]
 8017b14:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8017b16:	2300      	movs	r3, #0
 8017b18:	62bb      	str	r3, [r7, #40]	; 0x28
 8017b1a:	e017      	b.n	8017b4c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8017b1c:	69fb      	ldr	r3, [r7, #28]
 8017b1e:	005a      	lsls	r2, r3, #1
 8017b20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017b22:	f003 0301 	and.w	r3, r3, #1
 8017b26:	4413      	add	r3, r2
 8017b28:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8017b2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017b2c:	085b      	lsrs	r3, r3, #1
 8017b2e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8017b30:	69fb      	ldr	r3, [r7, #28]
 8017b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d005      	beq.n	8017b46 <gen_numname+0x5e>
 8017b3a:	69fb      	ldr	r3, [r7, #28]
 8017b3c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8017b40:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8017b44:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8017b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b48:	3301      	adds	r3, #1
 8017b4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8017b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b4e:	2b0f      	cmp	r3, #15
 8017b50:	d9e4      	bls.n	8017b1c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	881b      	ldrh	r3, [r3, #0]
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d1d8      	bne.n	8017b0c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8017b5a:	69fb      	ldr	r3, [r7, #28]
 8017b5c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8017b5e:	2307      	movs	r3, #7
 8017b60:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8017b62:	683b      	ldr	r3, [r7, #0]
 8017b64:	b2db      	uxtb	r3, r3
 8017b66:	f003 030f 	and.w	r3, r3, #15
 8017b6a:	b2db      	uxtb	r3, r3
 8017b6c:	3330      	adds	r3, #48	; 0x30
 8017b6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8017b72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017b76:	2b39      	cmp	r3, #57	; 0x39
 8017b78:	d904      	bls.n	8017b84 <gen_numname+0x9c>
 8017b7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017b7e:	3307      	adds	r3, #7
 8017b80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8017b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b86:	1e5a      	subs	r2, r3, #1
 8017b88:	62ba      	str	r2, [r7, #40]	; 0x28
 8017b8a:	3330      	adds	r3, #48	; 0x30
 8017b8c:	443b      	add	r3, r7
 8017b8e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8017b92:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8017b96:	683b      	ldr	r3, [r7, #0]
 8017b98:	091b      	lsrs	r3, r3, #4
 8017b9a:	603b      	str	r3, [r7, #0]
	} while (seq);
 8017b9c:	683b      	ldr	r3, [r7, #0]
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	d1df      	bne.n	8017b62 <gen_numname+0x7a>
	ns[i] = '~';
 8017ba2:	f107 0214 	add.w	r2, r7, #20
 8017ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ba8:	4413      	add	r3, r2
 8017baa:	227e      	movs	r2, #126	; 0x7e
 8017bac:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8017bae:	2300      	movs	r3, #0
 8017bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8017bb2:	e002      	b.n	8017bba <gen_numname+0xd2>
 8017bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bb6:	3301      	adds	r3, #1
 8017bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8017bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bbe:	429a      	cmp	r2, r3
 8017bc0:	d205      	bcs.n	8017bce <gen_numname+0xe6>
 8017bc2:	68fa      	ldr	r2, [r7, #12]
 8017bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bc6:	4413      	add	r3, r2
 8017bc8:	781b      	ldrb	r3, [r3, #0]
 8017bca:	2b20      	cmp	r3, #32
 8017bcc:	d1f2      	bne.n	8017bb4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8017bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bd0:	2b07      	cmp	r3, #7
 8017bd2:	d807      	bhi.n	8017be4 <gen_numname+0xfc>
 8017bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bd6:	1c5a      	adds	r2, r3, #1
 8017bd8:	62ba      	str	r2, [r7, #40]	; 0x28
 8017bda:	3330      	adds	r3, #48	; 0x30
 8017bdc:	443b      	add	r3, r7
 8017bde:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8017be2:	e000      	b.n	8017be6 <gen_numname+0xfe>
 8017be4:	2120      	movs	r1, #32
 8017be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017be8:	1c5a      	adds	r2, r3, #1
 8017bea:	627a      	str	r2, [r7, #36]	; 0x24
 8017bec:	68fa      	ldr	r2, [r7, #12]
 8017bee:	4413      	add	r3, r2
 8017bf0:	460a      	mov	r2, r1
 8017bf2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8017bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bf6:	2b07      	cmp	r3, #7
 8017bf8:	d9e9      	bls.n	8017bce <gen_numname+0xe6>
}
 8017bfa:	bf00      	nop
 8017bfc:	bf00      	nop
 8017bfe:	3730      	adds	r7, #48	; 0x30
 8017c00:	46bd      	mov	sp, r7
 8017c02:	bd80      	pop	{r7, pc}

08017c04 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8017c04:	b480      	push	{r7}
 8017c06:	b085      	sub	sp, #20
 8017c08:	af00      	add	r7, sp, #0
 8017c0a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8017c0c:	2300      	movs	r3, #0
 8017c0e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8017c10:	230b      	movs	r3, #11
 8017c12:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8017c14:	7bfb      	ldrb	r3, [r7, #15]
 8017c16:	b2da      	uxtb	r2, r3
 8017c18:	0852      	lsrs	r2, r2, #1
 8017c1a:	01db      	lsls	r3, r3, #7
 8017c1c:	4313      	orrs	r3, r2
 8017c1e:	b2da      	uxtb	r2, r3
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	1c59      	adds	r1, r3, #1
 8017c24:	6079      	str	r1, [r7, #4]
 8017c26:	781b      	ldrb	r3, [r3, #0]
 8017c28:	4413      	add	r3, r2
 8017c2a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8017c2c:	68bb      	ldr	r3, [r7, #8]
 8017c2e:	3b01      	subs	r3, #1
 8017c30:	60bb      	str	r3, [r7, #8]
 8017c32:	68bb      	ldr	r3, [r7, #8]
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d1ed      	bne.n	8017c14 <sum_sfn+0x10>
	return sum;
 8017c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8017c3a:	4618      	mov	r0, r3
 8017c3c:	3714      	adds	r7, #20
 8017c3e:	46bd      	mov	sp, r7
 8017c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c44:	4770      	bx	lr

08017c46 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8017c46:	b580      	push	{r7, lr}
 8017c48:	b086      	sub	sp, #24
 8017c4a:	af00      	add	r7, sp, #0
 8017c4c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	681b      	ldr	r3, [r3, #0]
 8017c52:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8017c54:	2100      	movs	r1, #0
 8017c56:	6878      	ldr	r0, [r7, #4]
 8017c58:	f7ff fca8 	bl	80175ac <dir_sdi>
 8017c5c:	4603      	mov	r3, r0
 8017c5e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8017c60:	7dfb      	ldrb	r3, [r7, #23]
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	d001      	beq.n	8017c6a <dir_find+0x24>
 8017c66:	7dfb      	ldrb	r3, [r7, #23]
 8017c68:	e0a9      	b.n	8017dbe <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8017c6a:	23ff      	movs	r3, #255	; 0xff
 8017c6c:	753b      	strb	r3, [r7, #20]
 8017c6e:	7d3b      	ldrb	r3, [r7, #20]
 8017c70:	757b      	strb	r3, [r7, #21]
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	f04f 32ff 	mov.w	r2, #4294967295
 8017c78:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	69db      	ldr	r3, [r3, #28]
 8017c7e:	4619      	mov	r1, r3
 8017c80:	6938      	ldr	r0, [r7, #16]
 8017c82:	f7ff f913 	bl	8016eac <move_window>
 8017c86:	4603      	mov	r3, r0
 8017c88:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8017c8a:	7dfb      	ldrb	r3, [r7, #23]
 8017c8c:	2b00      	cmp	r3, #0
 8017c8e:	f040 8090 	bne.w	8017db2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	6a1b      	ldr	r3, [r3, #32]
 8017c96:	781b      	ldrb	r3, [r3, #0]
 8017c98:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8017c9a:	7dbb      	ldrb	r3, [r7, #22]
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d102      	bne.n	8017ca6 <dir_find+0x60>
 8017ca0:	2304      	movs	r3, #4
 8017ca2:	75fb      	strb	r3, [r7, #23]
 8017ca4:	e08a      	b.n	8017dbc <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	6a1b      	ldr	r3, [r3, #32]
 8017caa:	330b      	adds	r3, #11
 8017cac:	781b      	ldrb	r3, [r3, #0]
 8017cae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017cb2:	73fb      	strb	r3, [r7, #15]
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	7bfa      	ldrb	r2, [r7, #15]
 8017cb8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8017cba:	7dbb      	ldrb	r3, [r7, #22]
 8017cbc:	2be5      	cmp	r3, #229	; 0xe5
 8017cbe:	d007      	beq.n	8017cd0 <dir_find+0x8a>
 8017cc0:	7bfb      	ldrb	r3, [r7, #15]
 8017cc2:	f003 0308 	and.w	r3, r3, #8
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d009      	beq.n	8017cde <dir_find+0x98>
 8017cca:	7bfb      	ldrb	r3, [r7, #15]
 8017ccc:	2b0f      	cmp	r3, #15
 8017cce:	d006      	beq.n	8017cde <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8017cd0:	23ff      	movs	r3, #255	; 0xff
 8017cd2:	757b      	strb	r3, [r7, #21]
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8017cda:	631a      	str	r2, [r3, #48]	; 0x30
 8017cdc:	e05e      	b.n	8017d9c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8017cde:	7bfb      	ldrb	r3, [r7, #15]
 8017ce0:	2b0f      	cmp	r3, #15
 8017ce2:	d136      	bne.n	8017d52 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017cee:	2b00      	cmp	r3, #0
 8017cf0:	d154      	bne.n	8017d9c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8017cf2:	7dbb      	ldrb	r3, [r7, #22]
 8017cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	d00d      	beq.n	8017d18 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	6a1b      	ldr	r3, [r3, #32]
 8017d00:	7b5b      	ldrb	r3, [r3, #13]
 8017d02:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8017d04:	7dbb      	ldrb	r3, [r7, #22]
 8017d06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017d0a:	75bb      	strb	r3, [r7, #22]
 8017d0c:	7dbb      	ldrb	r3, [r7, #22]
 8017d0e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	695a      	ldr	r2, [r3, #20]
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8017d18:	7dba      	ldrb	r2, [r7, #22]
 8017d1a:	7d7b      	ldrb	r3, [r7, #21]
 8017d1c:	429a      	cmp	r2, r3
 8017d1e:	d115      	bne.n	8017d4c <dir_find+0x106>
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	6a1b      	ldr	r3, [r3, #32]
 8017d24:	330d      	adds	r3, #13
 8017d26:	781b      	ldrb	r3, [r3, #0]
 8017d28:	7d3a      	ldrb	r2, [r7, #20]
 8017d2a:	429a      	cmp	r2, r3
 8017d2c:	d10e      	bne.n	8017d4c <dir_find+0x106>
 8017d2e:	693b      	ldr	r3, [r7, #16]
 8017d30:	68da      	ldr	r2, [r3, #12]
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	6a1b      	ldr	r3, [r3, #32]
 8017d36:	4619      	mov	r1, r3
 8017d38:	4610      	mov	r0, r2
 8017d3a:	f7ff fdfd 	bl	8017938 <cmp_lfn>
 8017d3e:	4603      	mov	r3, r0
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d003      	beq.n	8017d4c <dir_find+0x106>
 8017d44:	7d7b      	ldrb	r3, [r7, #21]
 8017d46:	3b01      	subs	r3, #1
 8017d48:	b2db      	uxtb	r3, r3
 8017d4a:	e000      	b.n	8017d4e <dir_find+0x108>
 8017d4c:	23ff      	movs	r3, #255	; 0xff
 8017d4e:	757b      	strb	r3, [r7, #21]
 8017d50:	e024      	b.n	8017d9c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8017d52:	7d7b      	ldrb	r3, [r7, #21]
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	d109      	bne.n	8017d6c <dir_find+0x126>
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	6a1b      	ldr	r3, [r3, #32]
 8017d5c:	4618      	mov	r0, r3
 8017d5e:	f7ff ff51 	bl	8017c04 <sum_sfn>
 8017d62:	4603      	mov	r3, r0
 8017d64:	461a      	mov	r2, r3
 8017d66:	7d3b      	ldrb	r3, [r7, #20]
 8017d68:	4293      	cmp	r3, r2
 8017d6a:	d024      	beq.n	8017db6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017d72:	f003 0301 	and.w	r3, r3, #1
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	d10a      	bne.n	8017d90 <dir_find+0x14a>
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	6a18      	ldr	r0, [r3, #32]
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	3324      	adds	r3, #36	; 0x24
 8017d82:	220b      	movs	r2, #11
 8017d84:	4619      	mov	r1, r3
 8017d86:	f7fe fe9f 	bl	8016ac8 <mem_cmp>
 8017d8a:	4603      	mov	r3, r0
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	d014      	beq.n	8017dba <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8017d90:	23ff      	movs	r3, #255	; 0xff
 8017d92:	757b      	strb	r3, [r7, #21]
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	f04f 32ff 	mov.w	r2, #4294967295
 8017d9a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8017d9c:	2100      	movs	r1, #0
 8017d9e:	6878      	ldr	r0, [r7, #4]
 8017da0:	f7ff fc7f 	bl	80176a2 <dir_next>
 8017da4:	4603      	mov	r3, r0
 8017da6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8017da8:	7dfb      	ldrb	r3, [r7, #23]
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	f43f af65 	beq.w	8017c7a <dir_find+0x34>
 8017db0:	e004      	b.n	8017dbc <dir_find+0x176>
		if (res != FR_OK) break;
 8017db2:	bf00      	nop
 8017db4:	e002      	b.n	8017dbc <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8017db6:	bf00      	nop
 8017db8:	e000      	b.n	8017dbc <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8017dba:	bf00      	nop

	return res;
 8017dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8017dbe:	4618      	mov	r0, r3
 8017dc0:	3718      	adds	r7, #24
 8017dc2:	46bd      	mov	sp, r7
 8017dc4:	bd80      	pop	{r7, pc}
	...

08017dc8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8017dc8:	b580      	push	{r7, lr}
 8017dca:	b08c      	sub	sp, #48	; 0x30
 8017dcc:	af00      	add	r7, sp, #0
 8017dce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	681b      	ldr	r3, [r3, #0]
 8017dd4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017ddc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8017de0:	2b00      	cmp	r3, #0
 8017de2:	d001      	beq.n	8017de8 <dir_register+0x20>
 8017de4:	2306      	movs	r3, #6
 8017de6:	e0e0      	b.n	8017faa <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8017de8:	2300      	movs	r3, #0
 8017dea:	627b      	str	r3, [r7, #36]	; 0x24
 8017dec:	e002      	b.n	8017df4 <dir_register+0x2c>
 8017dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017df0:	3301      	adds	r3, #1
 8017df2:	627b      	str	r3, [r7, #36]	; 0x24
 8017df4:	69fb      	ldr	r3, [r7, #28]
 8017df6:	68da      	ldr	r2, [r3, #12]
 8017df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dfa:	005b      	lsls	r3, r3, #1
 8017dfc:	4413      	add	r3, r2
 8017dfe:	881b      	ldrh	r3, [r3, #0]
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	d1f4      	bne.n	8017dee <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8017e0a:	f107 030c 	add.w	r3, r7, #12
 8017e0e:	220c      	movs	r2, #12
 8017e10:	4618      	mov	r0, r3
 8017e12:	f7fe fe1d 	bl	8016a50 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8017e16:	7dfb      	ldrb	r3, [r7, #23]
 8017e18:	f003 0301 	and.w	r3, r3, #1
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d032      	beq.n	8017e86 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	2240      	movs	r2, #64	; 0x40
 8017e24:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8017e28:	2301      	movs	r3, #1
 8017e2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8017e2c:	e016      	b.n	8017e5c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8017e34:	69fb      	ldr	r3, [r7, #28]
 8017e36:	68da      	ldr	r2, [r3, #12]
 8017e38:	f107 010c 	add.w	r1, r7, #12
 8017e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e3e:	f7ff fe53 	bl	8017ae8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8017e42:	6878      	ldr	r0, [r7, #4]
 8017e44:	f7ff feff 	bl	8017c46 <dir_find>
 8017e48:	4603      	mov	r3, r0
 8017e4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8017e4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d106      	bne.n	8017e64 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8017e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e58:	3301      	adds	r3, #1
 8017e5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8017e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e5e:	2b63      	cmp	r3, #99	; 0x63
 8017e60:	d9e5      	bls.n	8017e2e <dir_register+0x66>
 8017e62:	e000      	b.n	8017e66 <dir_register+0x9e>
			if (res != FR_OK) break;
 8017e64:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8017e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e68:	2b64      	cmp	r3, #100	; 0x64
 8017e6a:	d101      	bne.n	8017e70 <dir_register+0xa8>
 8017e6c:	2307      	movs	r3, #7
 8017e6e:	e09c      	b.n	8017faa <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8017e70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017e74:	2b04      	cmp	r3, #4
 8017e76:	d002      	beq.n	8017e7e <dir_register+0xb6>
 8017e78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017e7c:	e095      	b.n	8017faa <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8017e7e:	7dfa      	ldrb	r2, [r7, #23]
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8017e86:	7dfb      	ldrb	r3, [r7, #23]
 8017e88:	f003 0302 	and.w	r3, r3, #2
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d007      	beq.n	8017ea0 <dir_register+0xd8>
 8017e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e92:	330c      	adds	r3, #12
 8017e94:	4a47      	ldr	r2, [pc, #284]	; (8017fb4 <dir_register+0x1ec>)
 8017e96:	fba2 2303 	umull	r2, r3, r2, r3
 8017e9a:	089b      	lsrs	r3, r3, #2
 8017e9c:	3301      	adds	r3, #1
 8017e9e:	e000      	b.n	8017ea2 <dir_register+0xda>
 8017ea0:	2301      	movs	r3, #1
 8017ea2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8017ea4:	6a39      	ldr	r1, [r7, #32]
 8017ea6:	6878      	ldr	r0, [r7, #4]
 8017ea8:	f7ff fcc0 	bl	801782c <dir_alloc>
 8017eac:	4603      	mov	r3, r0
 8017eae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8017eb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	d148      	bne.n	8017f4c <dir_register+0x184>
 8017eba:	6a3b      	ldr	r3, [r7, #32]
 8017ebc:	3b01      	subs	r3, #1
 8017ebe:	623b      	str	r3, [r7, #32]
 8017ec0:	6a3b      	ldr	r3, [r7, #32]
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d042      	beq.n	8017f4c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	695a      	ldr	r2, [r3, #20]
 8017eca:	6a3b      	ldr	r3, [r7, #32]
 8017ecc:	015b      	lsls	r3, r3, #5
 8017ece:	1ad3      	subs	r3, r2, r3
 8017ed0:	4619      	mov	r1, r3
 8017ed2:	6878      	ldr	r0, [r7, #4]
 8017ed4:	f7ff fb6a 	bl	80175ac <dir_sdi>
 8017ed8:	4603      	mov	r3, r0
 8017eda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8017ede:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	d132      	bne.n	8017f4c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	3324      	adds	r3, #36	; 0x24
 8017eea:	4618      	mov	r0, r3
 8017eec:	f7ff fe8a 	bl	8017c04 <sum_sfn>
 8017ef0:	4603      	mov	r3, r0
 8017ef2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	69db      	ldr	r3, [r3, #28]
 8017ef8:	4619      	mov	r1, r3
 8017efa:	69f8      	ldr	r0, [r7, #28]
 8017efc:	f7fe ffd6 	bl	8016eac <move_window>
 8017f00:	4603      	mov	r3, r0
 8017f02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8017f06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d11d      	bne.n	8017f4a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8017f0e:	69fb      	ldr	r3, [r7, #28]
 8017f10:	68d8      	ldr	r0, [r3, #12]
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	6a19      	ldr	r1, [r3, #32]
 8017f16:	6a3b      	ldr	r3, [r7, #32]
 8017f18:	b2da      	uxtb	r2, r3
 8017f1a:	7efb      	ldrb	r3, [r7, #27]
 8017f1c:	f7ff fd7c 	bl	8017a18 <put_lfn>
				fs->wflag = 1;
 8017f20:	69fb      	ldr	r3, [r7, #28]
 8017f22:	2201      	movs	r2, #1
 8017f24:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8017f26:	2100      	movs	r1, #0
 8017f28:	6878      	ldr	r0, [r7, #4]
 8017f2a:	f7ff fbba 	bl	80176a2 <dir_next>
 8017f2e:	4603      	mov	r3, r0
 8017f30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8017f34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d107      	bne.n	8017f4c <dir_register+0x184>
 8017f3c:	6a3b      	ldr	r3, [r7, #32]
 8017f3e:	3b01      	subs	r3, #1
 8017f40:	623b      	str	r3, [r7, #32]
 8017f42:	6a3b      	ldr	r3, [r7, #32]
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	d1d5      	bne.n	8017ef4 <dir_register+0x12c>
 8017f48:	e000      	b.n	8017f4c <dir_register+0x184>
				if (res != FR_OK) break;
 8017f4a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8017f4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	d128      	bne.n	8017fa6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	69db      	ldr	r3, [r3, #28]
 8017f58:	4619      	mov	r1, r3
 8017f5a:	69f8      	ldr	r0, [r7, #28]
 8017f5c:	f7fe ffa6 	bl	8016eac <move_window>
 8017f60:	4603      	mov	r3, r0
 8017f62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8017f66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d11b      	bne.n	8017fa6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	6a1b      	ldr	r3, [r3, #32]
 8017f72:	2220      	movs	r2, #32
 8017f74:	2100      	movs	r1, #0
 8017f76:	4618      	mov	r0, r3
 8017f78:	f7fe fd8b 	bl	8016a92 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	6a18      	ldr	r0, [r3, #32]
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	3324      	adds	r3, #36	; 0x24
 8017f84:	220b      	movs	r2, #11
 8017f86:	4619      	mov	r1, r3
 8017f88:	f7fe fd62 	bl	8016a50 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	6a1b      	ldr	r3, [r3, #32]
 8017f96:	330c      	adds	r3, #12
 8017f98:	f002 0218 	and.w	r2, r2, #24
 8017f9c:	b2d2      	uxtb	r2, r2
 8017f9e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8017fa0:	69fb      	ldr	r3, [r7, #28]
 8017fa2:	2201      	movs	r2, #1
 8017fa4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8017fa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8017faa:	4618      	mov	r0, r3
 8017fac:	3730      	adds	r7, #48	; 0x30
 8017fae:	46bd      	mov	sp, r7
 8017fb0:	bd80      	pop	{r7, pc}
 8017fb2:	bf00      	nop
 8017fb4:	4ec4ec4f 	.word	0x4ec4ec4f

08017fb8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8017fb8:	b580      	push	{r7, lr}
 8017fba:	b088      	sub	sp, #32
 8017fbc:	af00      	add	r7, sp, #0
 8017fbe:	6078      	str	r0, [r7, #4]
 8017fc0:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8017fc2:	687b      	ldr	r3, [r7, #4]
 8017fc4:	681b      	ldr	r3, [r3, #0]
 8017fc6:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8017fc8:	683b      	ldr	r3, [r7, #0]
 8017fca:	2200      	movs	r2, #0
 8017fcc:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	69db      	ldr	r3, [r3, #28]
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	f000 80c9 	beq.w	801816a <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017fe0:	d032      	beq.n	8018048 <get_fileinfo+0x90>
			i = j = 0;
 8017fe2:	2300      	movs	r3, #0
 8017fe4:	61bb      	str	r3, [r7, #24]
 8017fe6:	69bb      	ldr	r3, [r7, #24]
 8017fe8:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8017fea:	e01b      	b.n	8018024 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8017fec:	89fb      	ldrh	r3, [r7, #14]
 8017fee:	2100      	movs	r1, #0
 8017ff0:	4618      	mov	r0, r3
 8017ff2:	f001 fabf 	bl	8019574 <ff_convert>
 8017ff6:	4603      	mov	r3, r0
 8017ff8:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8017ffa:	89fb      	ldrh	r3, [r7, #14]
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d102      	bne.n	8018006 <get_fileinfo+0x4e>
 8018000:	2300      	movs	r3, #0
 8018002:	61fb      	str	r3, [r7, #28]
 8018004:	e01a      	b.n	801803c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8018006:	69fb      	ldr	r3, [r7, #28]
 8018008:	2bfe      	cmp	r3, #254	; 0xfe
 801800a:	d902      	bls.n	8018012 <get_fileinfo+0x5a>
 801800c:	2300      	movs	r3, #0
 801800e:	61fb      	str	r3, [r7, #28]
 8018010:	e014      	b.n	801803c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8018012:	69fb      	ldr	r3, [r7, #28]
 8018014:	1c5a      	adds	r2, r3, #1
 8018016:	61fa      	str	r2, [r7, #28]
 8018018:	89fa      	ldrh	r2, [r7, #14]
 801801a:	b2d1      	uxtb	r1, r2
 801801c:	683a      	ldr	r2, [r7, #0]
 801801e:	4413      	add	r3, r2
 8018020:	460a      	mov	r2, r1
 8018022:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8018024:	693b      	ldr	r3, [r7, #16]
 8018026:	68da      	ldr	r2, [r3, #12]
 8018028:	69bb      	ldr	r3, [r7, #24]
 801802a:	1c59      	adds	r1, r3, #1
 801802c:	61b9      	str	r1, [r7, #24]
 801802e:	005b      	lsls	r3, r3, #1
 8018030:	4413      	add	r3, r2
 8018032:	881b      	ldrh	r3, [r3, #0]
 8018034:	81fb      	strh	r3, [r7, #14]
 8018036:	89fb      	ldrh	r3, [r7, #14]
 8018038:	2b00      	cmp	r3, #0
 801803a:	d1d7      	bne.n	8017fec <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 801803c:	683a      	ldr	r2, [r7, #0]
 801803e:	69fb      	ldr	r3, [r7, #28]
 8018040:	4413      	add	r3, r2
 8018042:	3316      	adds	r3, #22
 8018044:	2200      	movs	r2, #0
 8018046:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8018048:	2300      	movs	r3, #0
 801804a:	61bb      	str	r3, [r7, #24]
 801804c:	69bb      	ldr	r3, [r7, #24]
 801804e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8018050:	683a      	ldr	r2, [r7, #0]
 8018052:	69fb      	ldr	r3, [r7, #28]
 8018054:	4413      	add	r3, r2
 8018056:	3316      	adds	r3, #22
 8018058:	781b      	ldrb	r3, [r3, #0]
 801805a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 801805c:	e04c      	b.n	80180f8 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	6a1a      	ldr	r2, [r3, #32]
 8018062:	69fb      	ldr	r3, [r7, #28]
 8018064:	1c59      	adds	r1, r3, #1
 8018066:	61f9      	str	r1, [r7, #28]
 8018068:	4413      	add	r3, r2
 801806a:	781b      	ldrb	r3, [r3, #0]
 801806c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 801806e:	7dfb      	ldrb	r3, [r7, #23]
 8018070:	2b20      	cmp	r3, #32
 8018072:	d100      	bne.n	8018076 <get_fileinfo+0xbe>
 8018074:	e040      	b.n	80180f8 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8018076:	7dfb      	ldrb	r3, [r7, #23]
 8018078:	2b05      	cmp	r3, #5
 801807a:	d101      	bne.n	8018080 <get_fileinfo+0xc8>
 801807c:	23e5      	movs	r3, #229	; 0xe5
 801807e:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8018080:	69fb      	ldr	r3, [r7, #28]
 8018082:	2b09      	cmp	r3, #9
 8018084:	d10f      	bne.n	80180a6 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8018086:	89bb      	ldrh	r3, [r7, #12]
 8018088:	2b00      	cmp	r3, #0
 801808a:	d105      	bne.n	8018098 <get_fileinfo+0xe0>
 801808c:	683a      	ldr	r2, [r7, #0]
 801808e:	69bb      	ldr	r3, [r7, #24]
 8018090:	4413      	add	r3, r2
 8018092:	3316      	adds	r3, #22
 8018094:	222e      	movs	r2, #46	; 0x2e
 8018096:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8018098:	69bb      	ldr	r3, [r7, #24]
 801809a:	1c5a      	adds	r2, r3, #1
 801809c:	61ba      	str	r2, [r7, #24]
 801809e:	683a      	ldr	r2, [r7, #0]
 80180a0:	4413      	add	r3, r2
 80180a2:	222e      	movs	r2, #46	; 0x2e
 80180a4:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 80180a6:	683a      	ldr	r2, [r7, #0]
 80180a8:	69bb      	ldr	r3, [r7, #24]
 80180aa:	4413      	add	r3, r2
 80180ac:	3309      	adds	r3, #9
 80180ae:	7dfa      	ldrb	r2, [r7, #23]
 80180b0:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 80180b2:	89bb      	ldrh	r3, [r7, #12]
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	d11c      	bne.n	80180f2 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 80180b8:	7dfb      	ldrb	r3, [r7, #23]
 80180ba:	2b40      	cmp	r3, #64	; 0x40
 80180bc:	d913      	bls.n	80180e6 <get_fileinfo+0x12e>
 80180be:	7dfb      	ldrb	r3, [r7, #23]
 80180c0:	2b5a      	cmp	r3, #90	; 0x5a
 80180c2:	d810      	bhi.n	80180e6 <get_fileinfo+0x12e>
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	6a1b      	ldr	r3, [r3, #32]
 80180c8:	330c      	adds	r3, #12
 80180ca:	781b      	ldrb	r3, [r3, #0]
 80180cc:	461a      	mov	r2, r3
 80180ce:	69fb      	ldr	r3, [r7, #28]
 80180d0:	2b08      	cmp	r3, #8
 80180d2:	d901      	bls.n	80180d8 <get_fileinfo+0x120>
 80180d4:	2310      	movs	r3, #16
 80180d6:	e000      	b.n	80180da <get_fileinfo+0x122>
 80180d8:	2308      	movs	r3, #8
 80180da:	4013      	ands	r3, r2
 80180dc:	2b00      	cmp	r3, #0
 80180de:	d002      	beq.n	80180e6 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 80180e0:	7dfb      	ldrb	r3, [r7, #23]
 80180e2:	3320      	adds	r3, #32
 80180e4:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 80180e6:	683a      	ldr	r2, [r7, #0]
 80180e8:	69bb      	ldr	r3, [r7, #24]
 80180ea:	4413      	add	r3, r2
 80180ec:	3316      	adds	r3, #22
 80180ee:	7dfa      	ldrb	r2, [r7, #23]
 80180f0:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80180f2:	69bb      	ldr	r3, [r7, #24]
 80180f4:	3301      	adds	r3, #1
 80180f6:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 80180f8:	69fb      	ldr	r3, [r7, #28]
 80180fa:	2b0a      	cmp	r3, #10
 80180fc:	d9af      	bls.n	801805e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 80180fe:	89bb      	ldrh	r3, [r7, #12]
 8018100:	2b00      	cmp	r3, #0
 8018102:	d10d      	bne.n	8018120 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8018104:	683a      	ldr	r2, [r7, #0]
 8018106:	69bb      	ldr	r3, [r7, #24]
 8018108:	4413      	add	r3, r2
 801810a:	3316      	adds	r3, #22
 801810c:	2200      	movs	r2, #0
 801810e:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	6a1b      	ldr	r3, [r3, #32]
 8018114:	330c      	adds	r3, #12
 8018116:	781b      	ldrb	r3, [r3, #0]
 8018118:	2b00      	cmp	r3, #0
 801811a:	d101      	bne.n	8018120 <get_fileinfo+0x168>
 801811c:	2300      	movs	r3, #0
 801811e:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8018120:	683a      	ldr	r2, [r7, #0]
 8018122:	69bb      	ldr	r3, [r7, #24]
 8018124:	4413      	add	r3, r2
 8018126:	3309      	adds	r3, #9
 8018128:	2200      	movs	r2, #0
 801812a:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	6a1b      	ldr	r3, [r3, #32]
 8018130:	7ada      	ldrb	r2, [r3, #11]
 8018132:	683b      	ldr	r3, [r7, #0]
 8018134:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	6a1b      	ldr	r3, [r3, #32]
 801813a:	331c      	adds	r3, #28
 801813c:	4618      	mov	r0, r3
 801813e:	f7fe fc1d 	bl	801697c <ld_dword>
 8018142:	4602      	mov	r2, r0
 8018144:	683b      	ldr	r3, [r7, #0]
 8018146:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	6a1b      	ldr	r3, [r3, #32]
 801814c:	3316      	adds	r3, #22
 801814e:	4618      	mov	r0, r3
 8018150:	f7fe fc14 	bl	801697c <ld_dword>
 8018154:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8018156:	68bb      	ldr	r3, [r7, #8]
 8018158:	b29a      	uxth	r2, r3
 801815a:	683b      	ldr	r3, [r7, #0]
 801815c:	80da      	strh	r2, [r3, #6]
 801815e:	68bb      	ldr	r3, [r7, #8]
 8018160:	0c1b      	lsrs	r3, r3, #16
 8018162:	b29a      	uxth	r2, r3
 8018164:	683b      	ldr	r3, [r7, #0]
 8018166:	809a      	strh	r2, [r3, #4]
 8018168:	e000      	b.n	801816c <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801816a:	bf00      	nop
}
 801816c:	3720      	adds	r7, #32
 801816e:	46bd      	mov	sp, r7
 8018170:	bd80      	pop	{r7, pc}
	...

08018174 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8018174:	b580      	push	{r7, lr}
 8018176:	b08a      	sub	sp, #40	; 0x28
 8018178:	af00      	add	r7, sp, #0
 801817a:	6078      	str	r0, [r7, #4]
 801817c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801817e:	683b      	ldr	r3, [r7, #0]
 8018180:	681b      	ldr	r3, [r3, #0]
 8018182:	613b      	str	r3, [r7, #16]
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	68db      	ldr	r3, [r3, #12]
 801818a:	60fb      	str	r3, [r7, #12]
 801818c:	2300      	movs	r3, #0
 801818e:	617b      	str	r3, [r7, #20]
 8018190:	697b      	ldr	r3, [r7, #20]
 8018192:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8018194:	69bb      	ldr	r3, [r7, #24]
 8018196:	1c5a      	adds	r2, r3, #1
 8018198:	61ba      	str	r2, [r7, #24]
 801819a:	693a      	ldr	r2, [r7, #16]
 801819c:	4413      	add	r3, r2
 801819e:	781b      	ldrb	r3, [r3, #0]
 80181a0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80181a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80181a4:	2b1f      	cmp	r3, #31
 80181a6:	d940      	bls.n	801822a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80181a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80181aa:	2b2f      	cmp	r3, #47	; 0x2f
 80181ac:	d006      	beq.n	80181bc <create_name+0x48>
 80181ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80181b0:	2b5c      	cmp	r3, #92	; 0x5c
 80181b2:	d110      	bne.n	80181d6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80181b4:	e002      	b.n	80181bc <create_name+0x48>
 80181b6:	69bb      	ldr	r3, [r7, #24]
 80181b8:	3301      	adds	r3, #1
 80181ba:	61bb      	str	r3, [r7, #24]
 80181bc:	693a      	ldr	r2, [r7, #16]
 80181be:	69bb      	ldr	r3, [r7, #24]
 80181c0:	4413      	add	r3, r2
 80181c2:	781b      	ldrb	r3, [r3, #0]
 80181c4:	2b2f      	cmp	r3, #47	; 0x2f
 80181c6:	d0f6      	beq.n	80181b6 <create_name+0x42>
 80181c8:	693a      	ldr	r2, [r7, #16]
 80181ca:	69bb      	ldr	r3, [r7, #24]
 80181cc:	4413      	add	r3, r2
 80181ce:	781b      	ldrb	r3, [r3, #0]
 80181d0:	2b5c      	cmp	r3, #92	; 0x5c
 80181d2:	d0f0      	beq.n	80181b6 <create_name+0x42>
			break;
 80181d4:	e02a      	b.n	801822c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80181d6:	697b      	ldr	r3, [r7, #20]
 80181d8:	2bfe      	cmp	r3, #254	; 0xfe
 80181da:	d901      	bls.n	80181e0 <create_name+0x6c>
 80181dc:	2306      	movs	r3, #6
 80181de:	e17d      	b.n	80184dc <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80181e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80181e2:	b2db      	uxtb	r3, r3
 80181e4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80181e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80181e8:	2101      	movs	r1, #1
 80181ea:	4618      	mov	r0, r3
 80181ec:	f001 f9c2 	bl	8019574 <ff_convert>
 80181f0:	4603      	mov	r3, r0
 80181f2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80181f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d101      	bne.n	80181fe <create_name+0x8a>
 80181fa:	2306      	movs	r3, #6
 80181fc:	e16e      	b.n	80184dc <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80181fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018200:	2b7f      	cmp	r3, #127	; 0x7f
 8018202:	d809      	bhi.n	8018218 <create_name+0xa4>
 8018204:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018206:	4619      	mov	r1, r3
 8018208:	488d      	ldr	r0, [pc, #564]	; (8018440 <create_name+0x2cc>)
 801820a:	f7fe fc84 	bl	8016b16 <chk_chr>
 801820e:	4603      	mov	r3, r0
 8018210:	2b00      	cmp	r3, #0
 8018212:	d001      	beq.n	8018218 <create_name+0xa4>
 8018214:	2306      	movs	r3, #6
 8018216:	e161      	b.n	80184dc <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8018218:	697b      	ldr	r3, [r7, #20]
 801821a:	1c5a      	adds	r2, r3, #1
 801821c:	617a      	str	r2, [r7, #20]
 801821e:	005b      	lsls	r3, r3, #1
 8018220:	68fa      	ldr	r2, [r7, #12]
 8018222:	4413      	add	r3, r2
 8018224:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018226:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8018228:	e7b4      	b.n	8018194 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801822a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801822c:	693a      	ldr	r2, [r7, #16]
 801822e:	69bb      	ldr	r3, [r7, #24]
 8018230:	441a      	add	r2, r3
 8018232:	683b      	ldr	r3, [r7, #0]
 8018234:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8018236:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018238:	2b1f      	cmp	r3, #31
 801823a:	d801      	bhi.n	8018240 <create_name+0xcc>
 801823c:	2304      	movs	r3, #4
 801823e:	e000      	b.n	8018242 <create_name+0xce>
 8018240:	2300      	movs	r3, #0
 8018242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8018246:	e011      	b.n	801826c <create_name+0xf8>
		w = lfn[di - 1];
 8018248:	697b      	ldr	r3, [r7, #20]
 801824a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801824e:	3b01      	subs	r3, #1
 8018250:	005b      	lsls	r3, r3, #1
 8018252:	68fa      	ldr	r2, [r7, #12]
 8018254:	4413      	add	r3, r2
 8018256:	881b      	ldrh	r3, [r3, #0]
 8018258:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 801825a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801825c:	2b20      	cmp	r3, #32
 801825e:	d002      	beq.n	8018266 <create_name+0xf2>
 8018260:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018262:	2b2e      	cmp	r3, #46	; 0x2e
 8018264:	d106      	bne.n	8018274 <create_name+0x100>
		di--;
 8018266:	697b      	ldr	r3, [r7, #20]
 8018268:	3b01      	subs	r3, #1
 801826a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801826c:	697b      	ldr	r3, [r7, #20]
 801826e:	2b00      	cmp	r3, #0
 8018270:	d1ea      	bne.n	8018248 <create_name+0xd4>
 8018272:	e000      	b.n	8018276 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8018274:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8018276:	697b      	ldr	r3, [r7, #20]
 8018278:	005b      	lsls	r3, r3, #1
 801827a:	68fa      	ldr	r2, [r7, #12]
 801827c:	4413      	add	r3, r2
 801827e:	2200      	movs	r2, #0
 8018280:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8018282:	697b      	ldr	r3, [r7, #20]
 8018284:	2b00      	cmp	r3, #0
 8018286:	d101      	bne.n	801828c <create_name+0x118>
 8018288:	2306      	movs	r3, #6
 801828a:	e127      	b.n	80184dc <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	3324      	adds	r3, #36	; 0x24
 8018290:	220b      	movs	r2, #11
 8018292:	2120      	movs	r1, #32
 8018294:	4618      	mov	r0, r3
 8018296:	f7fe fbfc 	bl	8016a92 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801829a:	2300      	movs	r3, #0
 801829c:	61bb      	str	r3, [r7, #24]
 801829e:	e002      	b.n	80182a6 <create_name+0x132>
 80182a0:	69bb      	ldr	r3, [r7, #24]
 80182a2:	3301      	adds	r3, #1
 80182a4:	61bb      	str	r3, [r7, #24]
 80182a6:	69bb      	ldr	r3, [r7, #24]
 80182a8:	005b      	lsls	r3, r3, #1
 80182aa:	68fa      	ldr	r2, [r7, #12]
 80182ac:	4413      	add	r3, r2
 80182ae:	881b      	ldrh	r3, [r3, #0]
 80182b0:	2b20      	cmp	r3, #32
 80182b2:	d0f5      	beq.n	80182a0 <create_name+0x12c>
 80182b4:	69bb      	ldr	r3, [r7, #24]
 80182b6:	005b      	lsls	r3, r3, #1
 80182b8:	68fa      	ldr	r2, [r7, #12]
 80182ba:	4413      	add	r3, r2
 80182bc:	881b      	ldrh	r3, [r3, #0]
 80182be:	2b2e      	cmp	r3, #46	; 0x2e
 80182c0:	d0ee      	beq.n	80182a0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80182c2:	69bb      	ldr	r3, [r7, #24]
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d009      	beq.n	80182dc <create_name+0x168>
 80182c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80182cc:	f043 0303 	orr.w	r3, r3, #3
 80182d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80182d4:	e002      	b.n	80182dc <create_name+0x168>
 80182d6:	697b      	ldr	r3, [r7, #20]
 80182d8:	3b01      	subs	r3, #1
 80182da:	617b      	str	r3, [r7, #20]
 80182dc:	697b      	ldr	r3, [r7, #20]
 80182de:	2b00      	cmp	r3, #0
 80182e0:	d009      	beq.n	80182f6 <create_name+0x182>
 80182e2:	697b      	ldr	r3, [r7, #20]
 80182e4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80182e8:	3b01      	subs	r3, #1
 80182ea:	005b      	lsls	r3, r3, #1
 80182ec:	68fa      	ldr	r2, [r7, #12]
 80182ee:	4413      	add	r3, r2
 80182f0:	881b      	ldrh	r3, [r3, #0]
 80182f2:	2b2e      	cmp	r3, #46	; 0x2e
 80182f4:	d1ef      	bne.n	80182d6 <create_name+0x162>

	i = b = 0; ni = 8;
 80182f6:	2300      	movs	r3, #0
 80182f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80182fc:	2300      	movs	r3, #0
 80182fe:	623b      	str	r3, [r7, #32]
 8018300:	2308      	movs	r3, #8
 8018302:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8018304:	69bb      	ldr	r3, [r7, #24]
 8018306:	1c5a      	adds	r2, r3, #1
 8018308:	61ba      	str	r2, [r7, #24]
 801830a:	005b      	lsls	r3, r3, #1
 801830c:	68fa      	ldr	r2, [r7, #12]
 801830e:	4413      	add	r3, r2
 8018310:	881b      	ldrh	r3, [r3, #0]
 8018312:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8018314:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018316:	2b00      	cmp	r3, #0
 8018318:	f000 8090 	beq.w	801843c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801831c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801831e:	2b20      	cmp	r3, #32
 8018320:	d006      	beq.n	8018330 <create_name+0x1bc>
 8018322:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018324:	2b2e      	cmp	r3, #46	; 0x2e
 8018326:	d10a      	bne.n	801833e <create_name+0x1ca>
 8018328:	69ba      	ldr	r2, [r7, #24]
 801832a:	697b      	ldr	r3, [r7, #20]
 801832c:	429a      	cmp	r2, r3
 801832e:	d006      	beq.n	801833e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8018330:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018334:	f043 0303 	orr.w	r3, r3, #3
 8018338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801833c:	e07d      	b.n	801843a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801833e:	6a3a      	ldr	r2, [r7, #32]
 8018340:	69fb      	ldr	r3, [r7, #28]
 8018342:	429a      	cmp	r2, r3
 8018344:	d203      	bcs.n	801834e <create_name+0x1da>
 8018346:	69ba      	ldr	r2, [r7, #24]
 8018348:	697b      	ldr	r3, [r7, #20]
 801834a:	429a      	cmp	r2, r3
 801834c:	d123      	bne.n	8018396 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801834e:	69fb      	ldr	r3, [r7, #28]
 8018350:	2b0b      	cmp	r3, #11
 8018352:	d106      	bne.n	8018362 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8018354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018358:	f043 0303 	orr.w	r3, r3, #3
 801835c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018360:	e075      	b.n	801844e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8018362:	69ba      	ldr	r2, [r7, #24]
 8018364:	697b      	ldr	r3, [r7, #20]
 8018366:	429a      	cmp	r2, r3
 8018368:	d005      	beq.n	8018376 <create_name+0x202>
 801836a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801836e:	f043 0303 	orr.w	r3, r3, #3
 8018372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8018376:	69ba      	ldr	r2, [r7, #24]
 8018378:	697b      	ldr	r3, [r7, #20]
 801837a:	429a      	cmp	r2, r3
 801837c:	d866      	bhi.n	801844c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801837e:	697b      	ldr	r3, [r7, #20]
 8018380:	61bb      	str	r3, [r7, #24]
 8018382:	2308      	movs	r3, #8
 8018384:	623b      	str	r3, [r7, #32]
 8018386:	230b      	movs	r3, #11
 8018388:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801838a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801838e:	009b      	lsls	r3, r3, #2
 8018390:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018394:	e051      	b.n	801843a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8018396:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018398:	2b7f      	cmp	r3, #127	; 0x7f
 801839a:	d914      	bls.n	80183c6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801839c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801839e:	2100      	movs	r1, #0
 80183a0:	4618      	mov	r0, r3
 80183a2:	f001 f8e7 	bl	8019574 <ff_convert>
 80183a6:	4603      	mov	r3, r0
 80183a8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80183aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d004      	beq.n	80183ba <create_name+0x246>
 80183b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80183b2:	3b80      	subs	r3, #128	; 0x80
 80183b4:	4a23      	ldr	r2, [pc, #140]	; (8018444 <create_name+0x2d0>)
 80183b6:	5cd3      	ldrb	r3, [r2, r3]
 80183b8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80183ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80183be:	f043 0302 	orr.w	r3, r3, #2
 80183c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80183c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	d007      	beq.n	80183dc <create_name+0x268>
 80183cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80183ce:	4619      	mov	r1, r3
 80183d0:	481d      	ldr	r0, [pc, #116]	; (8018448 <create_name+0x2d4>)
 80183d2:	f7fe fba0 	bl	8016b16 <chk_chr>
 80183d6:	4603      	mov	r3, r0
 80183d8:	2b00      	cmp	r3, #0
 80183da:	d008      	beq.n	80183ee <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80183dc:	235f      	movs	r3, #95	; 0x5f
 80183de:	84bb      	strh	r3, [r7, #36]	; 0x24
 80183e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80183e4:	f043 0303 	orr.w	r3, r3, #3
 80183e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80183ec:	e01b      	b.n	8018426 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80183ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80183f0:	2b40      	cmp	r3, #64	; 0x40
 80183f2:	d909      	bls.n	8018408 <create_name+0x294>
 80183f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80183f6:	2b5a      	cmp	r3, #90	; 0x5a
 80183f8:	d806      	bhi.n	8018408 <create_name+0x294>
					b |= 2;
 80183fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80183fe:	f043 0302 	orr.w	r3, r3, #2
 8018402:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018406:	e00e      	b.n	8018426 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8018408:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801840a:	2b60      	cmp	r3, #96	; 0x60
 801840c:	d90b      	bls.n	8018426 <create_name+0x2b2>
 801840e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018410:	2b7a      	cmp	r3, #122	; 0x7a
 8018412:	d808      	bhi.n	8018426 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8018414:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018418:	f043 0301 	orr.w	r3, r3, #1
 801841c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018420:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018422:	3b20      	subs	r3, #32
 8018424:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8018426:	6a3b      	ldr	r3, [r7, #32]
 8018428:	1c5a      	adds	r2, r3, #1
 801842a:	623a      	str	r2, [r7, #32]
 801842c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801842e:	b2d1      	uxtb	r1, r2
 8018430:	687a      	ldr	r2, [r7, #4]
 8018432:	4413      	add	r3, r2
 8018434:	460a      	mov	r2, r1
 8018436:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 801843a:	e763      	b.n	8018304 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801843c:	bf00      	nop
 801843e:	e006      	b.n	801844e <create_name+0x2da>
 8018440:	08020bac 	.word	0x08020bac
 8018444:	0802140c 	.word	0x0802140c
 8018448:	08020bb8 	.word	0x08020bb8
			if (si > di) break;			/* No extension */
 801844c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018454:	2be5      	cmp	r3, #229	; 0xe5
 8018456:	d103      	bne.n	8018460 <create_name+0x2ec>
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	2205      	movs	r2, #5
 801845c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8018460:	69fb      	ldr	r3, [r7, #28]
 8018462:	2b08      	cmp	r3, #8
 8018464:	d104      	bne.n	8018470 <create_name+0x2fc>
 8018466:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801846a:	009b      	lsls	r3, r3, #2
 801846c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8018470:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018474:	f003 030c 	and.w	r3, r3, #12
 8018478:	2b0c      	cmp	r3, #12
 801847a:	d005      	beq.n	8018488 <create_name+0x314>
 801847c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018480:	f003 0303 	and.w	r3, r3, #3
 8018484:	2b03      	cmp	r3, #3
 8018486:	d105      	bne.n	8018494 <create_name+0x320>
 8018488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801848c:	f043 0302 	orr.w	r3, r3, #2
 8018490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8018494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018498:	f003 0302 	and.w	r3, r3, #2
 801849c:	2b00      	cmp	r3, #0
 801849e:	d117      	bne.n	80184d0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80184a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80184a4:	f003 0303 	and.w	r3, r3, #3
 80184a8:	2b01      	cmp	r3, #1
 80184aa:	d105      	bne.n	80184b8 <create_name+0x344>
 80184ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80184b0:	f043 0310 	orr.w	r3, r3, #16
 80184b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80184b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80184bc:	f003 030c 	and.w	r3, r3, #12
 80184c0:	2b04      	cmp	r3, #4
 80184c2:	d105      	bne.n	80184d0 <create_name+0x35c>
 80184c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80184c8:	f043 0308 	orr.w	r3, r3, #8
 80184cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80184d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80184da:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80184dc:	4618      	mov	r0, r3
 80184de:	3728      	adds	r7, #40	; 0x28
 80184e0:	46bd      	mov	sp, r7
 80184e2:	bd80      	pop	{r7, pc}

080184e4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80184e4:	b580      	push	{r7, lr}
 80184e6:	b086      	sub	sp, #24
 80184e8:	af00      	add	r7, sp, #0
 80184ea:	6078      	str	r0, [r7, #4]
 80184ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80184f2:	693b      	ldr	r3, [r7, #16]
 80184f4:	681b      	ldr	r3, [r3, #0]
 80184f6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80184f8:	e002      	b.n	8018500 <follow_path+0x1c>
 80184fa:	683b      	ldr	r3, [r7, #0]
 80184fc:	3301      	adds	r3, #1
 80184fe:	603b      	str	r3, [r7, #0]
 8018500:	683b      	ldr	r3, [r7, #0]
 8018502:	781b      	ldrb	r3, [r3, #0]
 8018504:	2b2f      	cmp	r3, #47	; 0x2f
 8018506:	d0f8      	beq.n	80184fa <follow_path+0x16>
 8018508:	683b      	ldr	r3, [r7, #0]
 801850a:	781b      	ldrb	r3, [r3, #0]
 801850c:	2b5c      	cmp	r3, #92	; 0x5c
 801850e:	d0f4      	beq.n	80184fa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8018510:	693b      	ldr	r3, [r7, #16]
 8018512:	2200      	movs	r2, #0
 8018514:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8018516:	683b      	ldr	r3, [r7, #0]
 8018518:	781b      	ldrb	r3, [r3, #0]
 801851a:	2b1f      	cmp	r3, #31
 801851c:	d80a      	bhi.n	8018534 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801851e:	687b      	ldr	r3, [r7, #4]
 8018520:	2280      	movs	r2, #128	; 0x80
 8018522:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8018526:	2100      	movs	r1, #0
 8018528:	6878      	ldr	r0, [r7, #4]
 801852a:	f7ff f83f 	bl	80175ac <dir_sdi>
 801852e:	4603      	mov	r3, r0
 8018530:	75fb      	strb	r3, [r7, #23]
 8018532:	e043      	b.n	80185bc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8018534:	463b      	mov	r3, r7
 8018536:	4619      	mov	r1, r3
 8018538:	6878      	ldr	r0, [r7, #4]
 801853a:	f7ff fe1b 	bl	8018174 <create_name>
 801853e:	4603      	mov	r3, r0
 8018540:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8018542:	7dfb      	ldrb	r3, [r7, #23]
 8018544:	2b00      	cmp	r3, #0
 8018546:	d134      	bne.n	80185b2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8018548:	6878      	ldr	r0, [r7, #4]
 801854a:	f7ff fb7c 	bl	8017c46 <dir_find>
 801854e:	4603      	mov	r3, r0
 8018550:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018558:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801855a:	7dfb      	ldrb	r3, [r7, #23]
 801855c:	2b00      	cmp	r3, #0
 801855e:	d00a      	beq.n	8018576 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8018560:	7dfb      	ldrb	r3, [r7, #23]
 8018562:	2b04      	cmp	r3, #4
 8018564:	d127      	bne.n	80185b6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8018566:	7afb      	ldrb	r3, [r7, #11]
 8018568:	f003 0304 	and.w	r3, r3, #4
 801856c:	2b00      	cmp	r3, #0
 801856e:	d122      	bne.n	80185b6 <follow_path+0xd2>
 8018570:	2305      	movs	r3, #5
 8018572:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8018574:	e01f      	b.n	80185b6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8018576:	7afb      	ldrb	r3, [r7, #11]
 8018578:	f003 0304 	and.w	r3, r3, #4
 801857c:	2b00      	cmp	r3, #0
 801857e:	d11c      	bne.n	80185ba <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8018580:	693b      	ldr	r3, [r7, #16]
 8018582:	799b      	ldrb	r3, [r3, #6]
 8018584:	f003 0310 	and.w	r3, r3, #16
 8018588:	2b00      	cmp	r3, #0
 801858a:	d102      	bne.n	8018592 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801858c:	2305      	movs	r3, #5
 801858e:	75fb      	strb	r3, [r7, #23]
 8018590:	e014      	b.n	80185bc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8018592:	68fb      	ldr	r3, [r7, #12]
 8018594:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	695b      	ldr	r3, [r3, #20]
 801859c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80185a0:	4413      	add	r3, r2
 80185a2:	4619      	mov	r1, r3
 80185a4:	68f8      	ldr	r0, [r7, #12]
 80185a6:	f7ff f988 	bl	80178ba <ld_clust>
 80185aa:	4602      	mov	r2, r0
 80185ac:	693b      	ldr	r3, [r7, #16]
 80185ae:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80185b0:	e7c0      	b.n	8018534 <follow_path+0x50>
			if (res != FR_OK) break;
 80185b2:	bf00      	nop
 80185b4:	e002      	b.n	80185bc <follow_path+0xd8>
				break;
 80185b6:	bf00      	nop
 80185b8:	e000      	b.n	80185bc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80185ba:	bf00      	nop
			}
		}
	}

	return res;
 80185bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80185be:	4618      	mov	r0, r3
 80185c0:	3718      	adds	r7, #24
 80185c2:	46bd      	mov	sp, r7
 80185c4:	bd80      	pop	{r7, pc}

080185c6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80185c6:	b480      	push	{r7}
 80185c8:	b087      	sub	sp, #28
 80185ca:	af00      	add	r7, sp, #0
 80185cc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80185ce:	f04f 33ff 	mov.w	r3, #4294967295
 80185d2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	681b      	ldr	r3, [r3, #0]
 80185d8:	2b00      	cmp	r3, #0
 80185da:	d031      	beq.n	8018640 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	681b      	ldr	r3, [r3, #0]
 80185e0:	617b      	str	r3, [r7, #20]
 80185e2:	e002      	b.n	80185ea <get_ldnumber+0x24>
 80185e4:	697b      	ldr	r3, [r7, #20]
 80185e6:	3301      	adds	r3, #1
 80185e8:	617b      	str	r3, [r7, #20]
 80185ea:	697b      	ldr	r3, [r7, #20]
 80185ec:	781b      	ldrb	r3, [r3, #0]
 80185ee:	2b1f      	cmp	r3, #31
 80185f0:	d903      	bls.n	80185fa <get_ldnumber+0x34>
 80185f2:	697b      	ldr	r3, [r7, #20]
 80185f4:	781b      	ldrb	r3, [r3, #0]
 80185f6:	2b3a      	cmp	r3, #58	; 0x3a
 80185f8:	d1f4      	bne.n	80185e4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80185fa:	697b      	ldr	r3, [r7, #20]
 80185fc:	781b      	ldrb	r3, [r3, #0]
 80185fe:	2b3a      	cmp	r3, #58	; 0x3a
 8018600:	d11c      	bne.n	801863c <get_ldnumber+0x76>
			tp = *path;
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	681b      	ldr	r3, [r3, #0]
 8018606:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8018608:	68fb      	ldr	r3, [r7, #12]
 801860a:	1c5a      	adds	r2, r3, #1
 801860c:	60fa      	str	r2, [r7, #12]
 801860e:	781b      	ldrb	r3, [r3, #0]
 8018610:	3b30      	subs	r3, #48	; 0x30
 8018612:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8018614:	68bb      	ldr	r3, [r7, #8]
 8018616:	2b09      	cmp	r3, #9
 8018618:	d80e      	bhi.n	8018638 <get_ldnumber+0x72>
 801861a:	68fa      	ldr	r2, [r7, #12]
 801861c:	697b      	ldr	r3, [r7, #20]
 801861e:	429a      	cmp	r2, r3
 8018620:	d10a      	bne.n	8018638 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8018622:	68bb      	ldr	r3, [r7, #8]
 8018624:	2b00      	cmp	r3, #0
 8018626:	d107      	bne.n	8018638 <get_ldnumber+0x72>
					vol = (int)i;
 8018628:	68bb      	ldr	r3, [r7, #8]
 801862a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801862c:	697b      	ldr	r3, [r7, #20]
 801862e:	3301      	adds	r3, #1
 8018630:	617b      	str	r3, [r7, #20]
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	697a      	ldr	r2, [r7, #20]
 8018636:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8018638:	693b      	ldr	r3, [r7, #16]
 801863a:	e002      	b.n	8018642 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801863c:	2300      	movs	r3, #0
 801863e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8018640:	693b      	ldr	r3, [r7, #16]
}
 8018642:	4618      	mov	r0, r3
 8018644:	371c      	adds	r7, #28
 8018646:	46bd      	mov	sp, r7
 8018648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801864c:	4770      	bx	lr
	...

08018650 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8018650:	b580      	push	{r7, lr}
 8018652:	b082      	sub	sp, #8
 8018654:	af00      	add	r7, sp, #0
 8018656:	6078      	str	r0, [r7, #4]
 8018658:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	2200      	movs	r2, #0
 801865e:	70da      	strb	r2, [r3, #3]
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	f04f 32ff 	mov.w	r2, #4294967295
 8018666:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8018668:	6839      	ldr	r1, [r7, #0]
 801866a:	6878      	ldr	r0, [r7, #4]
 801866c:	f7fe fc1e 	bl	8016eac <move_window>
 8018670:	4603      	mov	r3, r0
 8018672:	2b00      	cmp	r3, #0
 8018674:	d001      	beq.n	801867a <check_fs+0x2a>
 8018676:	2304      	movs	r3, #4
 8018678:	e038      	b.n	80186ec <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801867a:	687b      	ldr	r3, [r7, #4]
 801867c:	3334      	adds	r3, #52	; 0x34
 801867e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8018682:	4618      	mov	r0, r3
 8018684:	f7fe f962 	bl	801694c <ld_word>
 8018688:	4603      	mov	r3, r0
 801868a:	461a      	mov	r2, r3
 801868c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8018690:	429a      	cmp	r2, r3
 8018692:	d001      	beq.n	8018698 <check_fs+0x48>
 8018694:	2303      	movs	r3, #3
 8018696:	e029      	b.n	80186ec <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801869e:	2be9      	cmp	r3, #233	; 0xe9
 80186a0:	d009      	beq.n	80186b6 <check_fs+0x66>
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80186a8:	2beb      	cmp	r3, #235	; 0xeb
 80186aa:	d11e      	bne.n	80186ea <check_fs+0x9a>
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80186b2:	2b90      	cmp	r3, #144	; 0x90
 80186b4:	d119      	bne.n	80186ea <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	3334      	adds	r3, #52	; 0x34
 80186ba:	3336      	adds	r3, #54	; 0x36
 80186bc:	4618      	mov	r0, r3
 80186be:	f7fe f95d 	bl	801697c <ld_dword>
 80186c2:	4603      	mov	r3, r0
 80186c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80186c8:	4a0a      	ldr	r2, [pc, #40]	; (80186f4 <check_fs+0xa4>)
 80186ca:	4293      	cmp	r3, r2
 80186cc:	d101      	bne.n	80186d2 <check_fs+0x82>
 80186ce:	2300      	movs	r3, #0
 80186d0:	e00c      	b.n	80186ec <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80186d2:	687b      	ldr	r3, [r7, #4]
 80186d4:	3334      	adds	r3, #52	; 0x34
 80186d6:	3352      	adds	r3, #82	; 0x52
 80186d8:	4618      	mov	r0, r3
 80186da:	f7fe f94f 	bl	801697c <ld_dword>
 80186de:	4603      	mov	r3, r0
 80186e0:	4a05      	ldr	r2, [pc, #20]	; (80186f8 <check_fs+0xa8>)
 80186e2:	4293      	cmp	r3, r2
 80186e4:	d101      	bne.n	80186ea <check_fs+0x9a>
 80186e6:	2300      	movs	r3, #0
 80186e8:	e000      	b.n	80186ec <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80186ea:	2302      	movs	r3, #2
}
 80186ec:	4618      	mov	r0, r3
 80186ee:	3708      	adds	r7, #8
 80186f0:	46bd      	mov	sp, r7
 80186f2:	bd80      	pop	{r7, pc}
 80186f4:	00544146 	.word	0x00544146
 80186f8:	33544146 	.word	0x33544146

080186fc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80186fc:	b580      	push	{r7, lr}
 80186fe:	b096      	sub	sp, #88	; 0x58
 8018700:	af00      	add	r7, sp, #0
 8018702:	60f8      	str	r0, [r7, #12]
 8018704:	60b9      	str	r1, [r7, #8]
 8018706:	4613      	mov	r3, r2
 8018708:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801870a:	68bb      	ldr	r3, [r7, #8]
 801870c:	2200      	movs	r2, #0
 801870e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8018710:	68f8      	ldr	r0, [r7, #12]
 8018712:	f7ff ff58 	bl	80185c6 <get_ldnumber>
 8018716:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8018718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801871a:	2b00      	cmp	r3, #0
 801871c:	da01      	bge.n	8018722 <find_volume+0x26>
 801871e:	230b      	movs	r3, #11
 8018720:	e230      	b.n	8018b84 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8018722:	4aa1      	ldr	r2, [pc, #644]	; (80189a8 <find_volume+0x2ac>)
 8018724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801872a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801872c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801872e:	2b00      	cmp	r3, #0
 8018730:	d101      	bne.n	8018736 <find_volume+0x3a>
 8018732:	230c      	movs	r3, #12
 8018734:	e226      	b.n	8018b84 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8018736:	68bb      	ldr	r3, [r7, #8]
 8018738:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801873a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801873c:	79fb      	ldrb	r3, [r7, #7]
 801873e:	f023 0301 	bic.w	r3, r3, #1
 8018742:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8018744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018746:	781b      	ldrb	r3, [r3, #0]
 8018748:	2b00      	cmp	r3, #0
 801874a:	d01a      	beq.n	8018782 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801874c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801874e:	785b      	ldrb	r3, [r3, #1]
 8018750:	4618      	mov	r0, r3
 8018752:	f7fe f85d 	bl	8016810 <disk_status>
 8018756:	4603      	mov	r3, r0
 8018758:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801875c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018760:	f003 0301 	and.w	r3, r3, #1
 8018764:	2b00      	cmp	r3, #0
 8018766:	d10c      	bne.n	8018782 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8018768:	79fb      	ldrb	r3, [r7, #7]
 801876a:	2b00      	cmp	r3, #0
 801876c:	d007      	beq.n	801877e <find_volume+0x82>
 801876e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018772:	f003 0304 	and.w	r3, r3, #4
 8018776:	2b00      	cmp	r3, #0
 8018778:	d001      	beq.n	801877e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801877a:	230a      	movs	r3, #10
 801877c:	e202      	b.n	8018b84 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 801877e:	2300      	movs	r3, #0
 8018780:	e200      	b.n	8018b84 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8018782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018784:	2200      	movs	r2, #0
 8018786:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8018788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801878a:	b2da      	uxtb	r2, r3
 801878c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801878e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8018790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018792:	785b      	ldrb	r3, [r3, #1]
 8018794:	4618      	mov	r0, r3
 8018796:	f7fe f855 	bl	8016844 <disk_initialize>
 801879a:	4603      	mov	r3, r0
 801879c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80187a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80187a4:	f003 0301 	and.w	r3, r3, #1
 80187a8:	2b00      	cmp	r3, #0
 80187aa:	d001      	beq.n	80187b0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80187ac:	2303      	movs	r3, #3
 80187ae:	e1e9      	b.n	8018b84 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80187b0:	79fb      	ldrb	r3, [r7, #7]
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	d007      	beq.n	80187c6 <find_volume+0xca>
 80187b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80187ba:	f003 0304 	and.w	r3, r3, #4
 80187be:	2b00      	cmp	r3, #0
 80187c0:	d001      	beq.n	80187c6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80187c2:	230a      	movs	r3, #10
 80187c4:	e1de      	b.n	8018b84 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80187c6:	2300      	movs	r3, #0
 80187c8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80187ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80187cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80187ce:	f7ff ff3f 	bl	8018650 <check_fs>
 80187d2:	4603      	mov	r3, r0
 80187d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80187d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80187dc:	2b02      	cmp	r3, #2
 80187de:	d149      	bne.n	8018874 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80187e0:	2300      	movs	r3, #0
 80187e2:	643b      	str	r3, [r7, #64]	; 0x40
 80187e4:	e01e      	b.n	8018824 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80187e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80187e8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80187ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80187ee:	011b      	lsls	r3, r3, #4
 80187f0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80187f4:	4413      	add	r3, r2
 80187f6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80187f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187fa:	3304      	adds	r3, #4
 80187fc:	781b      	ldrb	r3, [r3, #0]
 80187fe:	2b00      	cmp	r3, #0
 8018800:	d006      	beq.n	8018810 <find_volume+0x114>
 8018802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018804:	3308      	adds	r3, #8
 8018806:	4618      	mov	r0, r3
 8018808:	f7fe f8b8 	bl	801697c <ld_dword>
 801880c:	4602      	mov	r2, r0
 801880e:	e000      	b.n	8018812 <find_volume+0x116>
 8018810:	2200      	movs	r2, #0
 8018812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018814:	009b      	lsls	r3, r3, #2
 8018816:	3358      	adds	r3, #88	; 0x58
 8018818:	443b      	add	r3, r7
 801881a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801881e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018820:	3301      	adds	r3, #1
 8018822:	643b      	str	r3, [r7, #64]	; 0x40
 8018824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018826:	2b03      	cmp	r3, #3
 8018828:	d9dd      	bls.n	80187e6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801882a:	2300      	movs	r3, #0
 801882c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801882e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018830:	2b00      	cmp	r3, #0
 8018832:	d002      	beq.n	801883a <find_volume+0x13e>
 8018834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018836:	3b01      	subs	r3, #1
 8018838:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801883a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801883c:	009b      	lsls	r3, r3, #2
 801883e:	3358      	adds	r3, #88	; 0x58
 8018840:	443b      	add	r3, r7
 8018842:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8018846:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8018848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801884a:	2b00      	cmp	r3, #0
 801884c:	d005      	beq.n	801885a <find_volume+0x15e>
 801884e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018850:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018852:	f7ff fefd 	bl	8018650 <check_fs>
 8018856:	4603      	mov	r3, r0
 8018858:	e000      	b.n	801885c <find_volume+0x160>
 801885a:	2303      	movs	r3, #3
 801885c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8018860:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018864:	2b01      	cmp	r3, #1
 8018866:	d905      	bls.n	8018874 <find_volume+0x178>
 8018868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801886a:	3301      	adds	r3, #1
 801886c:	643b      	str	r3, [r7, #64]	; 0x40
 801886e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018870:	2b03      	cmp	r3, #3
 8018872:	d9e2      	bls.n	801883a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8018874:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018878:	2b04      	cmp	r3, #4
 801887a:	d101      	bne.n	8018880 <find_volume+0x184>
 801887c:	2301      	movs	r3, #1
 801887e:	e181      	b.n	8018b84 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8018880:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018884:	2b01      	cmp	r3, #1
 8018886:	d901      	bls.n	801888c <find_volume+0x190>
 8018888:	230d      	movs	r3, #13
 801888a:	e17b      	b.n	8018b84 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801888c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801888e:	3334      	adds	r3, #52	; 0x34
 8018890:	330b      	adds	r3, #11
 8018892:	4618      	mov	r0, r3
 8018894:	f7fe f85a 	bl	801694c <ld_word>
 8018898:	4603      	mov	r3, r0
 801889a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801889e:	d001      	beq.n	80188a4 <find_volume+0x1a8>
 80188a0:	230d      	movs	r3, #13
 80188a2:	e16f      	b.n	8018b84 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80188a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188a6:	3334      	adds	r3, #52	; 0x34
 80188a8:	3316      	adds	r3, #22
 80188aa:	4618      	mov	r0, r3
 80188ac:	f7fe f84e 	bl	801694c <ld_word>
 80188b0:	4603      	mov	r3, r0
 80188b2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80188b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d106      	bne.n	80188c8 <find_volume+0x1cc>
 80188ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188bc:	3334      	adds	r3, #52	; 0x34
 80188be:	3324      	adds	r3, #36	; 0x24
 80188c0:	4618      	mov	r0, r3
 80188c2:	f7fe f85b 	bl	801697c <ld_dword>
 80188c6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80188c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80188cc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80188ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188d0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80188d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188d6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80188d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188da:	789b      	ldrb	r3, [r3, #2]
 80188dc:	2b01      	cmp	r3, #1
 80188de:	d005      	beq.n	80188ec <find_volume+0x1f0>
 80188e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188e2:	789b      	ldrb	r3, [r3, #2]
 80188e4:	2b02      	cmp	r3, #2
 80188e6:	d001      	beq.n	80188ec <find_volume+0x1f0>
 80188e8:	230d      	movs	r3, #13
 80188ea:	e14b      	b.n	8018b84 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80188ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188ee:	789b      	ldrb	r3, [r3, #2]
 80188f0:	461a      	mov	r2, r3
 80188f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80188f4:	fb02 f303 	mul.w	r3, r2, r3
 80188f8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80188fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018900:	b29a      	uxth	r2, r3
 8018902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018904:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8018906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018908:	895b      	ldrh	r3, [r3, #10]
 801890a:	2b00      	cmp	r3, #0
 801890c:	d008      	beq.n	8018920 <find_volume+0x224>
 801890e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018910:	895b      	ldrh	r3, [r3, #10]
 8018912:	461a      	mov	r2, r3
 8018914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018916:	895b      	ldrh	r3, [r3, #10]
 8018918:	3b01      	subs	r3, #1
 801891a:	4013      	ands	r3, r2
 801891c:	2b00      	cmp	r3, #0
 801891e:	d001      	beq.n	8018924 <find_volume+0x228>
 8018920:	230d      	movs	r3, #13
 8018922:	e12f      	b.n	8018b84 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8018924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018926:	3334      	adds	r3, #52	; 0x34
 8018928:	3311      	adds	r3, #17
 801892a:	4618      	mov	r0, r3
 801892c:	f7fe f80e 	bl	801694c <ld_word>
 8018930:	4603      	mov	r3, r0
 8018932:	461a      	mov	r2, r3
 8018934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018936:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8018938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801893a:	891b      	ldrh	r3, [r3, #8]
 801893c:	f003 030f 	and.w	r3, r3, #15
 8018940:	b29b      	uxth	r3, r3
 8018942:	2b00      	cmp	r3, #0
 8018944:	d001      	beq.n	801894a <find_volume+0x24e>
 8018946:	230d      	movs	r3, #13
 8018948:	e11c      	b.n	8018b84 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801894a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801894c:	3334      	adds	r3, #52	; 0x34
 801894e:	3313      	adds	r3, #19
 8018950:	4618      	mov	r0, r3
 8018952:	f7fd fffb 	bl	801694c <ld_word>
 8018956:	4603      	mov	r3, r0
 8018958:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801895a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801895c:	2b00      	cmp	r3, #0
 801895e:	d106      	bne.n	801896e <find_volume+0x272>
 8018960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018962:	3334      	adds	r3, #52	; 0x34
 8018964:	3320      	adds	r3, #32
 8018966:	4618      	mov	r0, r3
 8018968:	f7fe f808 	bl	801697c <ld_dword>
 801896c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801896e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018970:	3334      	adds	r3, #52	; 0x34
 8018972:	330e      	adds	r3, #14
 8018974:	4618      	mov	r0, r3
 8018976:	f7fd ffe9 	bl	801694c <ld_word>
 801897a:	4603      	mov	r3, r0
 801897c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801897e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018980:	2b00      	cmp	r3, #0
 8018982:	d101      	bne.n	8018988 <find_volume+0x28c>
 8018984:	230d      	movs	r3, #13
 8018986:	e0fd      	b.n	8018b84 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8018988:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801898a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801898c:	4413      	add	r3, r2
 801898e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018990:	8912      	ldrh	r2, [r2, #8]
 8018992:	0912      	lsrs	r2, r2, #4
 8018994:	b292      	uxth	r2, r2
 8018996:	4413      	add	r3, r2
 8018998:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801899a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801899c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801899e:	429a      	cmp	r2, r3
 80189a0:	d204      	bcs.n	80189ac <find_volume+0x2b0>
 80189a2:	230d      	movs	r3, #13
 80189a4:	e0ee      	b.n	8018b84 <find_volume+0x488>
 80189a6:	bf00      	nop
 80189a8:	20001a84 	.word	0x20001a84
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80189ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80189ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189b0:	1ad3      	subs	r3, r2, r3
 80189b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80189b4:	8952      	ldrh	r2, [r2, #10]
 80189b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80189ba:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80189bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189be:	2b00      	cmp	r3, #0
 80189c0:	d101      	bne.n	80189c6 <find_volume+0x2ca>
 80189c2:	230d      	movs	r3, #13
 80189c4:	e0de      	b.n	8018b84 <find_volume+0x488>
		fmt = FS_FAT32;
 80189c6:	2303      	movs	r3, #3
 80189c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80189cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189ce:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80189d2:	4293      	cmp	r3, r2
 80189d4:	d802      	bhi.n	80189dc <find_volume+0x2e0>
 80189d6:	2302      	movs	r3, #2
 80189d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80189dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189de:	f640 72f5 	movw	r2, #4085	; 0xff5
 80189e2:	4293      	cmp	r3, r2
 80189e4:	d802      	bhi.n	80189ec <find_volume+0x2f0>
 80189e6:	2301      	movs	r3, #1
 80189e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80189ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189ee:	1c9a      	adds	r2, r3, #2
 80189f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189f2:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80189f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80189f8:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80189fa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80189fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80189fe:	441a      	add	r2, r3
 8018a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a02:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8018a04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a08:	441a      	add	r2, r3
 8018a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a0c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8018a0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018a12:	2b03      	cmp	r3, #3
 8018a14:	d11e      	bne.n	8018a54 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8018a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a18:	3334      	adds	r3, #52	; 0x34
 8018a1a:	332a      	adds	r3, #42	; 0x2a
 8018a1c:	4618      	mov	r0, r3
 8018a1e:	f7fd ff95 	bl	801694c <ld_word>
 8018a22:	4603      	mov	r3, r0
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	d001      	beq.n	8018a2c <find_volume+0x330>
 8018a28:	230d      	movs	r3, #13
 8018a2a:	e0ab      	b.n	8018b84 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8018a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a2e:	891b      	ldrh	r3, [r3, #8]
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d001      	beq.n	8018a38 <find_volume+0x33c>
 8018a34:	230d      	movs	r3, #13
 8018a36:	e0a5      	b.n	8018b84 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8018a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a3a:	3334      	adds	r3, #52	; 0x34
 8018a3c:	332c      	adds	r3, #44	; 0x2c
 8018a3e:	4618      	mov	r0, r3
 8018a40:	f7fd ff9c 	bl	801697c <ld_dword>
 8018a44:	4602      	mov	r2, r0
 8018a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a48:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8018a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a4c:	699b      	ldr	r3, [r3, #24]
 8018a4e:	009b      	lsls	r3, r3, #2
 8018a50:	647b      	str	r3, [r7, #68]	; 0x44
 8018a52:	e01f      	b.n	8018a94 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8018a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a56:	891b      	ldrh	r3, [r3, #8]
 8018a58:	2b00      	cmp	r3, #0
 8018a5a:	d101      	bne.n	8018a60 <find_volume+0x364>
 8018a5c:	230d      	movs	r3, #13
 8018a5e:	e091      	b.n	8018b84 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8018a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018a66:	441a      	add	r2, r3
 8018a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a6a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8018a6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018a70:	2b02      	cmp	r3, #2
 8018a72:	d103      	bne.n	8018a7c <find_volume+0x380>
 8018a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a76:	699b      	ldr	r3, [r3, #24]
 8018a78:	005b      	lsls	r3, r3, #1
 8018a7a:	e00a      	b.n	8018a92 <find_volume+0x396>
 8018a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a7e:	699a      	ldr	r2, [r3, #24]
 8018a80:	4613      	mov	r3, r2
 8018a82:	005b      	lsls	r3, r3, #1
 8018a84:	4413      	add	r3, r2
 8018a86:	085a      	lsrs	r2, r3, #1
 8018a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a8a:	699b      	ldr	r3, [r3, #24]
 8018a8c:	f003 0301 	and.w	r3, r3, #1
 8018a90:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8018a92:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8018a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a96:	69da      	ldr	r2, [r3, #28]
 8018a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018a9a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8018a9e:	0a5b      	lsrs	r3, r3, #9
 8018aa0:	429a      	cmp	r2, r3
 8018aa2:	d201      	bcs.n	8018aa8 <find_volume+0x3ac>
 8018aa4:	230d      	movs	r3, #13
 8018aa6:	e06d      	b.n	8018b84 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8018aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8018aae:	615a      	str	r2, [r3, #20]
 8018ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ab2:	695a      	ldr	r2, [r3, #20]
 8018ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ab6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8018ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018aba:	2280      	movs	r2, #128	; 0x80
 8018abc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8018abe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018ac2:	2b03      	cmp	r3, #3
 8018ac4:	d149      	bne.n	8018b5a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8018ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ac8:	3334      	adds	r3, #52	; 0x34
 8018aca:	3330      	adds	r3, #48	; 0x30
 8018acc:	4618      	mov	r0, r3
 8018ace:	f7fd ff3d 	bl	801694c <ld_word>
 8018ad2:	4603      	mov	r3, r0
 8018ad4:	2b01      	cmp	r3, #1
 8018ad6:	d140      	bne.n	8018b5a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8018ad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018ada:	3301      	adds	r3, #1
 8018adc:	4619      	mov	r1, r3
 8018ade:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018ae0:	f7fe f9e4 	bl	8016eac <move_window>
 8018ae4:	4603      	mov	r3, r0
 8018ae6:	2b00      	cmp	r3, #0
 8018ae8:	d137      	bne.n	8018b5a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8018aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018aec:	2200      	movs	r2, #0
 8018aee:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8018af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018af2:	3334      	adds	r3, #52	; 0x34
 8018af4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8018af8:	4618      	mov	r0, r3
 8018afa:	f7fd ff27 	bl	801694c <ld_word>
 8018afe:	4603      	mov	r3, r0
 8018b00:	461a      	mov	r2, r3
 8018b02:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8018b06:	429a      	cmp	r2, r3
 8018b08:	d127      	bne.n	8018b5a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8018b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b0c:	3334      	adds	r3, #52	; 0x34
 8018b0e:	4618      	mov	r0, r3
 8018b10:	f7fd ff34 	bl	801697c <ld_dword>
 8018b14:	4603      	mov	r3, r0
 8018b16:	4a1d      	ldr	r2, [pc, #116]	; (8018b8c <find_volume+0x490>)
 8018b18:	4293      	cmp	r3, r2
 8018b1a:	d11e      	bne.n	8018b5a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8018b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b1e:	3334      	adds	r3, #52	; 0x34
 8018b20:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8018b24:	4618      	mov	r0, r3
 8018b26:	f7fd ff29 	bl	801697c <ld_dword>
 8018b2a:	4603      	mov	r3, r0
 8018b2c:	4a18      	ldr	r2, [pc, #96]	; (8018b90 <find_volume+0x494>)
 8018b2e:	4293      	cmp	r3, r2
 8018b30:	d113      	bne.n	8018b5a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8018b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b34:	3334      	adds	r3, #52	; 0x34
 8018b36:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8018b3a:	4618      	mov	r0, r3
 8018b3c:	f7fd ff1e 	bl	801697c <ld_dword>
 8018b40:	4602      	mov	r2, r0
 8018b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b44:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8018b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b48:	3334      	adds	r3, #52	; 0x34
 8018b4a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8018b4e:	4618      	mov	r0, r3
 8018b50:	f7fd ff14 	bl	801697c <ld_dword>
 8018b54:	4602      	mov	r2, r0
 8018b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b58:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8018b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b5c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8018b60:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8018b62:	4b0c      	ldr	r3, [pc, #48]	; (8018b94 <find_volume+0x498>)
 8018b64:	881b      	ldrh	r3, [r3, #0]
 8018b66:	3301      	adds	r3, #1
 8018b68:	b29a      	uxth	r2, r3
 8018b6a:	4b0a      	ldr	r3, [pc, #40]	; (8018b94 <find_volume+0x498>)
 8018b6c:	801a      	strh	r2, [r3, #0]
 8018b6e:	4b09      	ldr	r3, [pc, #36]	; (8018b94 <find_volume+0x498>)
 8018b70:	881a      	ldrh	r2, [r3, #0]
 8018b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b74:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8018b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b78:	4a07      	ldr	r2, [pc, #28]	; (8018b98 <find_volume+0x49c>)
 8018b7a:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8018b7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018b7e:	f7fe f92d 	bl	8016ddc <clear_lock>
#endif
	return FR_OK;
 8018b82:	2300      	movs	r3, #0
}
 8018b84:	4618      	mov	r0, r3
 8018b86:	3758      	adds	r7, #88	; 0x58
 8018b88:	46bd      	mov	sp, r7
 8018b8a:	bd80      	pop	{r7, pc}
 8018b8c:	41615252 	.word	0x41615252
 8018b90:	61417272 	.word	0x61417272
 8018b94:	20001a88 	.word	0x20001a88
 8018b98:	20001aac 	.word	0x20001aac

08018b9c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8018b9c:	b580      	push	{r7, lr}
 8018b9e:	b084      	sub	sp, #16
 8018ba0:	af00      	add	r7, sp, #0
 8018ba2:	6078      	str	r0, [r7, #4]
 8018ba4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8018ba6:	2309      	movs	r3, #9
 8018ba8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	d01c      	beq.n	8018bea <validate+0x4e>
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	681b      	ldr	r3, [r3, #0]
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	d018      	beq.n	8018bea <validate+0x4e>
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	681b      	ldr	r3, [r3, #0]
 8018bbc:	781b      	ldrb	r3, [r3, #0]
 8018bbe:	2b00      	cmp	r3, #0
 8018bc0:	d013      	beq.n	8018bea <validate+0x4e>
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	889a      	ldrh	r2, [r3, #4]
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	681b      	ldr	r3, [r3, #0]
 8018bca:	88db      	ldrh	r3, [r3, #6]
 8018bcc:	429a      	cmp	r2, r3
 8018bce:	d10c      	bne.n	8018bea <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	785b      	ldrb	r3, [r3, #1]
 8018bd6:	4618      	mov	r0, r3
 8018bd8:	f7fd fe1a 	bl	8016810 <disk_status>
 8018bdc:	4603      	mov	r3, r0
 8018bde:	f003 0301 	and.w	r3, r3, #1
 8018be2:	2b00      	cmp	r3, #0
 8018be4:	d101      	bne.n	8018bea <validate+0x4e>
			res = FR_OK;
 8018be6:	2300      	movs	r3, #0
 8018be8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8018bea:	7bfb      	ldrb	r3, [r7, #15]
 8018bec:	2b00      	cmp	r3, #0
 8018bee:	d102      	bne.n	8018bf6 <validate+0x5a>
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	681b      	ldr	r3, [r3, #0]
 8018bf4:	e000      	b.n	8018bf8 <validate+0x5c>
 8018bf6:	2300      	movs	r3, #0
 8018bf8:	683a      	ldr	r2, [r7, #0]
 8018bfa:	6013      	str	r3, [r2, #0]
	return res;
 8018bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8018bfe:	4618      	mov	r0, r3
 8018c00:	3710      	adds	r7, #16
 8018c02:	46bd      	mov	sp, r7
 8018c04:	bd80      	pop	{r7, pc}
	...

08018c08 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8018c08:	b580      	push	{r7, lr}
 8018c0a:	b088      	sub	sp, #32
 8018c0c:	af00      	add	r7, sp, #0
 8018c0e:	60f8      	str	r0, [r7, #12]
 8018c10:	60b9      	str	r1, [r7, #8]
 8018c12:	4613      	mov	r3, r2
 8018c14:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8018c16:	68bb      	ldr	r3, [r7, #8]
 8018c18:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8018c1a:	f107 0310 	add.w	r3, r7, #16
 8018c1e:	4618      	mov	r0, r3
 8018c20:	f7ff fcd1 	bl	80185c6 <get_ldnumber>
 8018c24:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8018c26:	69fb      	ldr	r3, [r7, #28]
 8018c28:	2b00      	cmp	r3, #0
 8018c2a:	da01      	bge.n	8018c30 <f_mount+0x28>
 8018c2c:	230b      	movs	r3, #11
 8018c2e:	e02b      	b.n	8018c88 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8018c30:	4a17      	ldr	r2, [pc, #92]	; (8018c90 <f_mount+0x88>)
 8018c32:	69fb      	ldr	r3, [r7, #28]
 8018c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018c38:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8018c3a:	69bb      	ldr	r3, [r7, #24]
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	d005      	beq.n	8018c4c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8018c40:	69b8      	ldr	r0, [r7, #24]
 8018c42:	f7fe f8cb 	bl	8016ddc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8018c46:	69bb      	ldr	r3, [r7, #24]
 8018c48:	2200      	movs	r2, #0
 8018c4a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8018c4c:	68fb      	ldr	r3, [r7, #12]
 8018c4e:	2b00      	cmp	r3, #0
 8018c50:	d002      	beq.n	8018c58 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8018c52:	68fb      	ldr	r3, [r7, #12]
 8018c54:	2200      	movs	r2, #0
 8018c56:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8018c58:	68fa      	ldr	r2, [r7, #12]
 8018c5a:	490d      	ldr	r1, [pc, #52]	; (8018c90 <f_mount+0x88>)
 8018c5c:	69fb      	ldr	r3, [r7, #28]
 8018c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8018c62:	68fb      	ldr	r3, [r7, #12]
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	d002      	beq.n	8018c6e <f_mount+0x66>
 8018c68:	79fb      	ldrb	r3, [r7, #7]
 8018c6a:	2b01      	cmp	r3, #1
 8018c6c:	d001      	beq.n	8018c72 <f_mount+0x6a>
 8018c6e:	2300      	movs	r3, #0
 8018c70:	e00a      	b.n	8018c88 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8018c72:	f107 010c 	add.w	r1, r7, #12
 8018c76:	f107 0308 	add.w	r3, r7, #8
 8018c7a:	2200      	movs	r2, #0
 8018c7c:	4618      	mov	r0, r3
 8018c7e:	f7ff fd3d 	bl	80186fc <find_volume>
 8018c82:	4603      	mov	r3, r0
 8018c84:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8018c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8018c88:	4618      	mov	r0, r3
 8018c8a:	3720      	adds	r7, #32
 8018c8c:	46bd      	mov	sp, r7
 8018c8e:	bd80      	pop	{r7, pc}
 8018c90:	20001a84 	.word	0x20001a84

08018c94 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8018c94:	b580      	push	{r7, lr}
 8018c96:	b09a      	sub	sp, #104	; 0x68
 8018c98:	af00      	add	r7, sp, #0
 8018c9a:	60f8      	str	r0, [r7, #12]
 8018c9c:	60b9      	str	r1, [r7, #8]
 8018c9e:	4613      	mov	r3, r2
 8018ca0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8018ca2:	68fb      	ldr	r3, [r7, #12]
 8018ca4:	2b00      	cmp	r3, #0
 8018ca6:	d101      	bne.n	8018cac <f_open+0x18>
 8018ca8:	2309      	movs	r3, #9
 8018caa:	e1ad      	b.n	8019008 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8018cac:	79fb      	ldrb	r3, [r7, #7]
 8018cae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018cb2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8018cb4:	79fa      	ldrb	r2, [r7, #7]
 8018cb6:	f107 0114 	add.w	r1, r7, #20
 8018cba:	f107 0308 	add.w	r3, r7, #8
 8018cbe:	4618      	mov	r0, r3
 8018cc0:	f7ff fd1c 	bl	80186fc <find_volume>
 8018cc4:	4603      	mov	r3, r0
 8018cc6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8018cca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	f040 8191 	bne.w	8018ff6 <f_open+0x362>
		dj.obj.fs = fs;
 8018cd4:	697b      	ldr	r3, [r7, #20]
 8018cd6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8018cd8:	68ba      	ldr	r2, [r7, #8]
 8018cda:	f107 0318 	add.w	r3, r7, #24
 8018cde:	4611      	mov	r1, r2
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	f7ff fbff 	bl	80184e4 <follow_path>
 8018ce6:	4603      	mov	r3, r0
 8018ce8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8018cec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018cf0:	2b00      	cmp	r3, #0
 8018cf2:	d11a      	bne.n	8018d2a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8018cf4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8018cf8:	b25b      	sxtb	r3, r3
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	da03      	bge.n	8018d06 <f_open+0x72>
				res = FR_INVALID_NAME;
 8018cfe:	2306      	movs	r3, #6
 8018d00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8018d04:	e011      	b.n	8018d2a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8018d06:	79fb      	ldrb	r3, [r7, #7]
 8018d08:	f023 0301 	bic.w	r3, r3, #1
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	bf14      	ite	ne
 8018d10:	2301      	movne	r3, #1
 8018d12:	2300      	moveq	r3, #0
 8018d14:	b2db      	uxtb	r3, r3
 8018d16:	461a      	mov	r2, r3
 8018d18:	f107 0318 	add.w	r3, r7, #24
 8018d1c:	4611      	mov	r1, r2
 8018d1e:	4618      	mov	r0, r3
 8018d20:	f7fd ff14 	bl	8016b4c <chk_lock>
 8018d24:	4603      	mov	r3, r0
 8018d26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8018d2a:	79fb      	ldrb	r3, [r7, #7]
 8018d2c:	f003 031c 	and.w	r3, r3, #28
 8018d30:	2b00      	cmp	r3, #0
 8018d32:	d07f      	beq.n	8018e34 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8018d34:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	d017      	beq.n	8018d6c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8018d3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018d40:	2b04      	cmp	r3, #4
 8018d42:	d10e      	bne.n	8018d62 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8018d44:	f7fd ff5e 	bl	8016c04 <enq_lock>
 8018d48:	4603      	mov	r3, r0
 8018d4a:	2b00      	cmp	r3, #0
 8018d4c:	d006      	beq.n	8018d5c <f_open+0xc8>
 8018d4e:	f107 0318 	add.w	r3, r7, #24
 8018d52:	4618      	mov	r0, r3
 8018d54:	f7ff f838 	bl	8017dc8 <dir_register>
 8018d58:	4603      	mov	r3, r0
 8018d5a:	e000      	b.n	8018d5e <f_open+0xca>
 8018d5c:	2312      	movs	r3, #18
 8018d5e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8018d62:	79fb      	ldrb	r3, [r7, #7]
 8018d64:	f043 0308 	orr.w	r3, r3, #8
 8018d68:	71fb      	strb	r3, [r7, #7]
 8018d6a:	e010      	b.n	8018d8e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8018d6c:	7fbb      	ldrb	r3, [r7, #30]
 8018d6e:	f003 0311 	and.w	r3, r3, #17
 8018d72:	2b00      	cmp	r3, #0
 8018d74:	d003      	beq.n	8018d7e <f_open+0xea>
					res = FR_DENIED;
 8018d76:	2307      	movs	r3, #7
 8018d78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8018d7c:	e007      	b.n	8018d8e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8018d7e:	79fb      	ldrb	r3, [r7, #7]
 8018d80:	f003 0304 	and.w	r3, r3, #4
 8018d84:	2b00      	cmp	r3, #0
 8018d86:	d002      	beq.n	8018d8e <f_open+0xfa>
 8018d88:	2308      	movs	r3, #8
 8018d8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8018d8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018d92:	2b00      	cmp	r3, #0
 8018d94:	d168      	bne.n	8018e68 <f_open+0x1d4>
 8018d96:	79fb      	ldrb	r3, [r7, #7]
 8018d98:	f003 0308 	and.w	r3, r3, #8
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d063      	beq.n	8018e68 <f_open+0x1d4>
				dw = GET_FATTIME();
 8018da0:	f7f8 fcba 	bl	8011718 <get_fattime>
 8018da4:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8018da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018da8:	330e      	adds	r3, #14
 8018daa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018dac:	4618      	mov	r0, r3
 8018dae:	f7fd fe23 	bl	80169f8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8018db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018db4:	3316      	adds	r3, #22
 8018db6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018db8:	4618      	mov	r0, r3
 8018dba:	f7fd fe1d 	bl	80169f8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8018dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018dc0:	330b      	adds	r3, #11
 8018dc2:	2220      	movs	r2, #32
 8018dc4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8018dc6:	697b      	ldr	r3, [r7, #20]
 8018dc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018dca:	4611      	mov	r1, r2
 8018dcc:	4618      	mov	r0, r3
 8018dce:	f7fe fd74 	bl	80178ba <ld_clust>
 8018dd2:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8018dd4:	697b      	ldr	r3, [r7, #20]
 8018dd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018dd8:	2200      	movs	r2, #0
 8018dda:	4618      	mov	r0, r3
 8018ddc:	f7fe fd8c 	bl	80178f8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8018de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018de2:	331c      	adds	r3, #28
 8018de4:	2100      	movs	r1, #0
 8018de6:	4618      	mov	r0, r3
 8018de8:	f7fd fe06 	bl	80169f8 <st_dword>
					fs->wflag = 1;
 8018dec:	697b      	ldr	r3, [r7, #20]
 8018dee:	2201      	movs	r2, #1
 8018df0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8018df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018df4:	2b00      	cmp	r3, #0
 8018df6:	d037      	beq.n	8018e68 <f_open+0x1d4>
						dw = fs->winsect;
 8018df8:	697b      	ldr	r3, [r7, #20]
 8018dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018dfc:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8018dfe:	f107 0318 	add.w	r3, r7, #24
 8018e02:	2200      	movs	r2, #0
 8018e04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8018e06:	4618      	mov	r0, r3
 8018e08:	f7fe fa9f 	bl	801734a <remove_chain>
 8018e0c:	4603      	mov	r3, r0
 8018e0e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8018e12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	d126      	bne.n	8018e68 <f_open+0x1d4>
							res = move_window(fs, dw);
 8018e1a:	697b      	ldr	r3, [r7, #20]
 8018e1c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018e1e:	4618      	mov	r0, r3
 8018e20:	f7fe f844 	bl	8016eac <move_window>
 8018e24:	4603      	mov	r3, r0
 8018e26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8018e2a:	697b      	ldr	r3, [r7, #20]
 8018e2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018e2e:	3a01      	subs	r2, #1
 8018e30:	611a      	str	r2, [r3, #16]
 8018e32:	e019      	b.n	8018e68 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8018e34:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018e38:	2b00      	cmp	r3, #0
 8018e3a:	d115      	bne.n	8018e68 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8018e3c:	7fbb      	ldrb	r3, [r7, #30]
 8018e3e:	f003 0310 	and.w	r3, r3, #16
 8018e42:	2b00      	cmp	r3, #0
 8018e44:	d003      	beq.n	8018e4e <f_open+0x1ba>
					res = FR_NO_FILE;
 8018e46:	2304      	movs	r3, #4
 8018e48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8018e4c:	e00c      	b.n	8018e68 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8018e4e:	79fb      	ldrb	r3, [r7, #7]
 8018e50:	f003 0302 	and.w	r3, r3, #2
 8018e54:	2b00      	cmp	r3, #0
 8018e56:	d007      	beq.n	8018e68 <f_open+0x1d4>
 8018e58:	7fbb      	ldrb	r3, [r7, #30]
 8018e5a:	f003 0301 	and.w	r3, r3, #1
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	d002      	beq.n	8018e68 <f_open+0x1d4>
						res = FR_DENIED;
 8018e62:	2307      	movs	r3, #7
 8018e64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8018e68:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d128      	bne.n	8018ec2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8018e70:	79fb      	ldrb	r3, [r7, #7]
 8018e72:	f003 0308 	and.w	r3, r3, #8
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d003      	beq.n	8018e82 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8018e7a:	79fb      	ldrb	r3, [r7, #7]
 8018e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018e80:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8018e82:	697b      	ldr	r3, [r7, #20]
 8018e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018e86:	68fb      	ldr	r3, [r7, #12]
 8018e88:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8018e8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018e8c:	68fb      	ldr	r3, [r7, #12]
 8018e8e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8018e90:	79fb      	ldrb	r3, [r7, #7]
 8018e92:	f023 0301 	bic.w	r3, r3, #1
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	bf14      	ite	ne
 8018e9a:	2301      	movne	r3, #1
 8018e9c:	2300      	moveq	r3, #0
 8018e9e:	b2db      	uxtb	r3, r3
 8018ea0:	461a      	mov	r2, r3
 8018ea2:	f107 0318 	add.w	r3, r7, #24
 8018ea6:	4611      	mov	r1, r2
 8018ea8:	4618      	mov	r0, r3
 8018eaa:	f7fd fecd 	bl	8016c48 <inc_lock>
 8018eae:	4602      	mov	r2, r0
 8018eb0:	68fb      	ldr	r3, [r7, #12]
 8018eb2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8018eb4:	68fb      	ldr	r3, [r7, #12]
 8018eb6:	691b      	ldr	r3, [r3, #16]
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	d102      	bne.n	8018ec2 <f_open+0x22e>
 8018ebc:	2302      	movs	r3, #2
 8018ebe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8018ec2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	f040 8095 	bne.w	8018ff6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8018ecc:	697b      	ldr	r3, [r7, #20]
 8018ece:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018ed0:	4611      	mov	r1, r2
 8018ed2:	4618      	mov	r0, r3
 8018ed4:	f7fe fcf1 	bl	80178ba <ld_clust>
 8018ed8:	4602      	mov	r2, r0
 8018eda:	68fb      	ldr	r3, [r7, #12]
 8018edc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8018ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ee0:	331c      	adds	r3, #28
 8018ee2:	4618      	mov	r0, r3
 8018ee4:	f7fd fd4a 	bl	801697c <ld_dword>
 8018ee8:	4602      	mov	r2, r0
 8018eea:	68fb      	ldr	r3, [r7, #12]
 8018eec:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8018eee:	68fb      	ldr	r3, [r7, #12]
 8018ef0:	2200      	movs	r2, #0
 8018ef2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8018ef4:	697a      	ldr	r2, [r7, #20]
 8018ef6:	68fb      	ldr	r3, [r7, #12]
 8018ef8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8018efa:	697b      	ldr	r3, [r7, #20]
 8018efc:	88da      	ldrh	r2, [r3, #6]
 8018efe:	68fb      	ldr	r3, [r7, #12]
 8018f00:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8018f02:	68fb      	ldr	r3, [r7, #12]
 8018f04:	79fa      	ldrb	r2, [r7, #7]
 8018f06:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8018f08:	68fb      	ldr	r3, [r7, #12]
 8018f0a:	2200      	movs	r2, #0
 8018f0c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8018f0e:	68fb      	ldr	r3, [r7, #12]
 8018f10:	2200      	movs	r2, #0
 8018f12:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8018f14:	68fb      	ldr	r3, [r7, #12]
 8018f16:	2200      	movs	r2, #0
 8018f18:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8018f1a:	68fb      	ldr	r3, [r7, #12]
 8018f1c:	3330      	adds	r3, #48	; 0x30
 8018f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018f22:	2100      	movs	r1, #0
 8018f24:	4618      	mov	r0, r3
 8018f26:	f7fd fdb4 	bl	8016a92 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8018f2a:	79fb      	ldrb	r3, [r7, #7]
 8018f2c:	f003 0320 	and.w	r3, r3, #32
 8018f30:	2b00      	cmp	r3, #0
 8018f32:	d060      	beq.n	8018ff6 <f_open+0x362>
 8018f34:	68fb      	ldr	r3, [r7, #12]
 8018f36:	68db      	ldr	r3, [r3, #12]
 8018f38:	2b00      	cmp	r3, #0
 8018f3a:	d05c      	beq.n	8018ff6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8018f3c:	68fb      	ldr	r3, [r7, #12]
 8018f3e:	68da      	ldr	r2, [r3, #12]
 8018f40:	68fb      	ldr	r3, [r7, #12]
 8018f42:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8018f44:	697b      	ldr	r3, [r7, #20]
 8018f46:	895b      	ldrh	r3, [r3, #10]
 8018f48:	025b      	lsls	r3, r3, #9
 8018f4a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8018f4c:	68fb      	ldr	r3, [r7, #12]
 8018f4e:	689b      	ldr	r3, [r3, #8]
 8018f50:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8018f52:	68fb      	ldr	r3, [r7, #12]
 8018f54:	68db      	ldr	r3, [r3, #12]
 8018f56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8018f58:	e016      	b.n	8018f88 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8018f5a:	68fb      	ldr	r3, [r7, #12]
 8018f5c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8018f5e:	4618      	mov	r0, r3
 8018f60:	f7fe f85f 	bl	8017022 <get_fat>
 8018f64:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8018f66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018f68:	2b01      	cmp	r3, #1
 8018f6a:	d802      	bhi.n	8018f72 <f_open+0x2de>
 8018f6c:	2302      	movs	r3, #2
 8018f6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8018f72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018f78:	d102      	bne.n	8018f80 <f_open+0x2ec>
 8018f7a:	2301      	movs	r3, #1
 8018f7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8018f80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8018f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018f84:	1ad3      	subs	r3, r2, r3
 8018f86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8018f88:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d103      	bne.n	8018f98 <f_open+0x304>
 8018f90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8018f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018f94:	429a      	cmp	r2, r3
 8018f96:	d8e0      	bhi.n	8018f5a <f_open+0x2c6>
				}
				fp->clust = clst;
 8018f98:	68fb      	ldr	r3, [r7, #12]
 8018f9a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8018f9c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8018f9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018fa2:	2b00      	cmp	r3, #0
 8018fa4:	d127      	bne.n	8018ff6 <f_open+0x362>
 8018fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018fac:	2b00      	cmp	r3, #0
 8018fae:	d022      	beq.n	8018ff6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8018fb0:	697b      	ldr	r3, [r7, #20]
 8018fb2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8018fb4:	4618      	mov	r0, r3
 8018fb6:	f7fe f815 	bl	8016fe4 <clust2sect>
 8018fba:	64f8      	str	r0, [r7, #76]	; 0x4c
 8018fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	d103      	bne.n	8018fca <f_open+0x336>
						res = FR_INT_ERR;
 8018fc2:	2302      	movs	r3, #2
 8018fc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8018fc8:	e015      	b.n	8018ff6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8018fca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018fcc:	0a5a      	lsrs	r2, r3, #9
 8018fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018fd0:	441a      	add	r2, r3
 8018fd2:	68fb      	ldr	r3, [r7, #12]
 8018fd4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8018fd6:	697b      	ldr	r3, [r7, #20]
 8018fd8:	7858      	ldrb	r0, [r3, #1]
 8018fda:	68fb      	ldr	r3, [r7, #12]
 8018fdc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018fe0:	68fb      	ldr	r3, [r7, #12]
 8018fe2:	6a1a      	ldr	r2, [r3, #32]
 8018fe4:	2301      	movs	r3, #1
 8018fe6:	f7fd fc53 	bl	8016890 <disk_read>
 8018fea:	4603      	mov	r3, r0
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	d002      	beq.n	8018ff6 <f_open+0x362>
 8018ff0:	2301      	movs	r3, #1
 8018ff2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8018ff6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018ffa:	2b00      	cmp	r3, #0
 8018ffc:	d002      	beq.n	8019004 <f_open+0x370>
 8018ffe:	68fb      	ldr	r3, [r7, #12]
 8019000:	2200      	movs	r2, #0
 8019002:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8019004:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8019008:	4618      	mov	r0, r3
 801900a:	3768      	adds	r7, #104	; 0x68
 801900c:	46bd      	mov	sp, r7
 801900e:	bd80      	pop	{r7, pc}

08019010 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8019010:	b580      	push	{r7, lr}
 8019012:	b08c      	sub	sp, #48	; 0x30
 8019014:	af00      	add	r7, sp, #0
 8019016:	60f8      	str	r0, [r7, #12]
 8019018:	60b9      	str	r1, [r7, #8]
 801901a:	607a      	str	r2, [r7, #4]
 801901c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801901e:	68bb      	ldr	r3, [r7, #8]
 8019020:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8019022:	683b      	ldr	r3, [r7, #0]
 8019024:	2200      	movs	r2, #0
 8019026:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8019028:	68fb      	ldr	r3, [r7, #12]
 801902a:	f107 0210 	add.w	r2, r7, #16
 801902e:	4611      	mov	r1, r2
 8019030:	4618      	mov	r0, r3
 8019032:	f7ff fdb3 	bl	8018b9c <validate>
 8019036:	4603      	mov	r3, r0
 8019038:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801903c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019040:	2b00      	cmp	r3, #0
 8019042:	d107      	bne.n	8019054 <f_write+0x44>
 8019044:	68fb      	ldr	r3, [r7, #12]
 8019046:	7d5b      	ldrb	r3, [r3, #21]
 8019048:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801904c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019050:	2b00      	cmp	r3, #0
 8019052:	d002      	beq.n	801905a <f_write+0x4a>
 8019054:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019058:	e14b      	b.n	80192f2 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801905a:	68fb      	ldr	r3, [r7, #12]
 801905c:	7d1b      	ldrb	r3, [r3, #20]
 801905e:	f003 0302 	and.w	r3, r3, #2
 8019062:	2b00      	cmp	r3, #0
 8019064:	d101      	bne.n	801906a <f_write+0x5a>
 8019066:	2307      	movs	r3, #7
 8019068:	e143      	b.n	80192f2 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801906a:	68fb      	ldr	r3, [r7, #12]
 801906c:	699a      	ldr	r2, [r3, #24]
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	441a      	add	r2, r3
 8019072:	68fb      	ldr	r3, [r7, #12]
 8019074:	699b      	ldr	r3, [r3, #24]
 8019076:	429a      	cmp	r2, r3
 8019078:	f080 812d 	bcs.w	80192d6 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801907c:	68fb      	ldr	r3, [r7, #12]
 801907e:	699b      	ldr	r3, [r3, #24]
 8019080:	43db      	mvns	r3, r3
 8019082:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8019084:	e127      	b.n	80192d6 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8019086:	68fb      	ldr	r3, [r7, #12]
 8019088:	699b      	ldr	r3, [r3, #24]
 801908a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801908e:	2b00      	cmp	r3, #0
 8019090:	f040 80e3 	bne.w	801925a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8019094:	68fb      	ldr	r3, [r7, #12]
 8019096:	699b      	ldr	r3, [r3, #24]
 8019098:	0a5b      	lsrs	r3, r3, #9
 801909a:	693a      	ldr	r2, [r7, #16]
 801909c:	8952      	ldrh	r2, [r2, #10]
 801909e:	3a01      	subs	r2, #1
 80190a0:	4013      	ands	r3, r2
 80190a2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80190a4:	69bb      	ldr	r3, [r7, #24]
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	d143      	bne.n	8019132 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80190aa:	68fb      	ldr	r3, [r7, #12]
 80190ac:	699b      	ldr	r3, [r3, #24]
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	d10c      	bne.n	80190cc <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80190b2:	68fb      	ldr	r3, [r7, #12]
 80190b4:	689b      	ldr	r3, [r3, #8]
 80190b6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80190b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190ba:	2b00      	cmp	r3, #0
 80190bc:	d11a      	bne.n	80190f4 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80190be:	68fb      	ldr	r3, [r7, #12]
 80190c0:	2100      	movs	r1, #0
 80190c2:	4618      	mov	r0, r3
 80190c4:	f7fe f9a6 	bl	8017414 <create_chain>
 80190c8:	62b8      	str	r0, [r7, #40]	; 0x28
 80190ca:	e013      	b.n	80190f4 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80190cc:	68fb      	ldr	r3, [r7, #12]
 80190ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	d007      	beq.n	80190e4 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80190d4:	68fb      	ldr	r3, [r7, #12]
 80190d6:	699b      	ldr	r3, [r3, #24]
 80190d8:	4619      	mov	r1, r3
 80190da:	68f8      	ldr	r0, [r7, #12]
 80190dc:	f7fe fa32 	bl	8017544 <clmt_clust>
 80190e0:	62b8      	str	r0, [r7, #40]	; 0x28
 80190e2:	e007      	b.n	80190f4 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80190e4:	68fa      	ldr	r2, [r7, #12]
 80190e6:	68fb      	ldr	r3, [r7, #12]
 80190e8:	69db      	ldr	r3, [r3, #28]
 80190ea:	4619      	mov	r1, r3
 80190ec:	4610      	mov	r0, r2
 80190ee:	f7fe f991 	bl	8017414 <create_chain>
 80190f2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80190f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190f6:	2b00      	cmp	r3, #0
 80190f8:	f000 80f2 	beq.w	80192e0 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80190fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190fe:	2b01      	cmp	r3, #1
 8019100:	d104      	bne.n	801910c <f_write+0xfc>
 8019102:	68fb      	ldr	r3, [r7, #12]
 8019104:	2202      	movs	r2, #2
 8019106:	755a      	strb	r2, [r3, #21]
 8019108:	2302      	movs	r3, #2
 801910a:	e0f2      	b.n	80192f2 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801910c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801910e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019112:	d104      	bne.n	801911e <f_write+0x10e>
 8019114:	68fb      	ldr	r3, [r7, #12]
 8019116:	2201      	movs	r2, #1
 8019118:	755a      	strb	r2, [r3, #21]
 801911a:	2301      	movs	r3, #1
 801911c:	e0e9      	b.n	80192f2 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801911e:	68fb      	ldr	r3, [r7, #12]
 8019120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019122:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8019124:	68fb      	ldr	r3, [r7, #12]
 8019126:	689b      	ldr	r3, [r3, #8]
 8019128:	2b00      	cmp	r3, #0
 801912a:	d102      	bne.n	8019132 <f_write+0x122>
 801912c:	68fb      	ldr	r3, [r7, #12]
 801912e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019130:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8019132:	68fb      	ldr	r3, [r7, #12]
 8019134:	7d1b      	ldrb	r3, [r3, #20]
 8019136:	b25b      	sxtb	r3, r3
 8019138:	2b00      	cmp	r3, #0
 801913a:	da18      	bge.n	801916e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801913c:	693b      	ldr	r3, [r7, #16]
 801913e:	7858      	ldrb	r0, [r3, #1]
 8019140:	68fb      	ldr	r3, [r7, #12]
 8019142:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019146:	68fb      	ldr	r3, [r7, #12]
 8019148:	6a1a      	ldr	r2, [r3, #32]
 801914a:	2301      	movs	r3, #1
 801914c:	f7fd fbc0 	bl	80168d0 <disk_write>
 8019150:	4603      	mov	r3, r0
 8019152:	2b00      	cmp	r3, #0
 8019154:	d004      	beq.n	8019160 <f_write+0x150>
 8019156:	68fb      	ldr	r3, [r7, #12]
 8019158:	2201      	movs	r2, #1
 801915a:	755a      	strb	r2, [r3, #21]
 801915c:	2301      	movs	r3, #1
 801915e:	e0c8      	b.n	80192f2 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019160:	68fb      	ldr	r3, [r7, #12]
 8019162:	7d1b      	ldrb	r3, [r3, #20]
 8019164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019168:	b2da      	uxtb	r2, r3
 801916a:	68fb      	ldr	r3, [r7, #12]
 801916c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801916e:	693a      	ldr	r2, [r7, #16]
 8019170:	68fb      	ldr	r3, [r7, #12]
 8019172:	69db      	ldr	r3, [r3, #28]
 8019174:	4619      	mov	r1, r3
 8019176:	4610      	mov	r0, r2
 8019178:	f7fd ff34 	bl	8016fe4 <clust2sect>
 801917c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801917e:	697b      	ldr	r3, [r7, #20]
 8019180:	2b00      	cmp	r3, #0
 8019182:	d104      	bne.n	801918e <f_write+0x17e>
 8019184:	68fb      	ldr	r3, [r7, #12]
 8019186:	2202      	movs	r2, #2
 8019188:	755a      	strb	r2, [r3, #21]
 801918a:	2302      	movs	r3, #2
 801918c:	e0b1      	b.n	80192f2 <f_write+0x2e2>
			sect += csect;
 801918e:	697a      	ldr	r2, [r7, #20]
 8019190:	69bb      	ldr	r3, [r7, #24]
 8019192:	4413      	add	r3, r2
 8019194:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8019196:	687b      	ldr	r3, [r7, #4]
 8019198:	0a5b      	lsrs	r3, r3, #9
 801919a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801919c:	6a3b      	ldr	r3, [r7, #32]
 801919e:	2b00      	cmp	r3, #0
 80191a0:	d03c      	beq.n	801921c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80191a2:	69ba      	ldr	r2, [r7, #24]
 80191a4:	6a3b      	ldr	r3, [r7, #32]
 80191a6:	4413      	add	r3, r2
 80191a8:	693a      	ldr	r2, [r7, #16]
 80191aa:	8952      	ldrh	r2, [r2, #10]
 80191ac:	4293      	cmp	r3, r2
 80191ae:	d905      	bls.n	80191bc <f_write+0x1ac>
					cc = fs->csize - csect;
 80191b0:	693b      	ldr	r3, [r7, #16]
 80191b2:	895b      	ldrh	r3, [r3, #10]
 80191b4:	461a      	mov	r2, r3
 80191b6:	69bb      	ldr	r3, [r7, #24]
 80191b8:	1ad3      	subs	r3, r2, r3
 80191ba:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80191bc:	693b      	ldr	r3, [r7, #16]
 80191be:	7858      	ldrb	r0, [r3, #1]
 80191c0:	6a3b      	ldr	r3, [r7, #32]
 80191c2:	697a      	ldr	r2, [r7, #20]
 80191c4:	69f9      	ldr	r1, [r7, #28]
 80191c6:	f7fd fb83 	bl	80168d0 <disk_write>
 80191ca:	4603      	mov	r3, r0
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d004      	beq.n	80191da <f_write+0x1ca>
 80191d0:	68fb      	ldr	r3, [r7, #12]
 80191d2:	2201      	movs	r2, #1
 80191d4:	755a      	strb	r2, [r3, #21]
 80191d6:	2301      	movs	r3, #1
 80191d8:	e08b      	b.n	80192f2 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80191da:	68fb      	ldr	r3, [r7, #12]
 80191dc:	6a1a      	ldr	r2, [r3, #32]
 80191de:	697b      	ldr	r3, [r7, #20]
 80191e0:	1ad3      	subs	r3, r2, r3
 80191e2:	6a3a      	ldr	r2, [r7, #32]
 80191e4:	429a      	cmp	r2, r3
 80191e6:	d915      	bls.n	8019214 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80191e8:	68fb      	ldr	r3, [r7, #12]
 80191ea:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80191ee:	68fb      	ldr	r3, [r7, #12]
 80191f0:	6a1a      	ldr	r2, [r3, #32]
 80191f2:	697b      	ldr	r3, [r7, #20]
 80191f4:	1ad3      	subs	r3, r2, r3
 80191f6:	025b      	lsls	r3, r3, #9
 80191f8:	69fa      	ldr	r2, [r7, #28]
 80191fa:	4413      	add	r3, r2
 80191fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019200:	4619      	mov	r1, r3
 8019202:	f7fd fc25 	bl	8016a50 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8019206:	68fb      	ldr	r3, [r7, #12]
 8019208:	7d1b      	ldrb	r3, [r3, #20]
 801920a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801920e:	b2da      	uxtb	r2, r3
 8019210:	68fb      	ldr	r3, [r7, #12]
 8019212:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8019214:	6a3b      	ldr	r3, [r7, #32]
 8019216:	025b      	lsls	r3, r3, #9
 8019218:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801921a:	e03f      	b.n	801929c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801921c:	68fb      	ldr	r3, [r7, #12]
 801921e:	6a1b      	ldr	r3, [r3, #32]
 8019220:	697a      	ldr	r2, [r7, #20]
 8019222:	429a      	cmp	r2, r3
 8019224:	d016      	beq.n	8019254 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8019226:	68fb      	ldr	r3, [r7, #12]
 8019228:	699a      	ldr	r2, [r3, #24]
 801922a:	68fb      	ldr	r3, [r7, #12]
 801922c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801922e:	429a      	cmp	r2, r3
 8019230:	d210      	bcs.n	8019254 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8019232:	693b      	ldr	r3, [r7, #16]
 8019234:	7858      	ldrb	r0, [r3, #1]
 8019236:	68fb      	ldr	r3, [r7, #12]
 8019238:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801923c:	2301      	movs	r3, #1
 801923e:	697a      	ldr	r2, [r7, #20]
 8019240:	f7fd fb26 	bl	8016890 <disk_read>
 8019244:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8019246:	2b00      	cmp	r3, #0
 8019248:	d004      	beq.n	8019254 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 801924a:	68fb      	ldr	r3, [r7, #12]
 801924c:	2201      	movs	r2, #1
 801924e:	755a      	strb	r2, [r3, #21]
 8019250:	2301      	movs	r3, #1
 8019252:	e04e      	b.n	80192f2 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8019254:	68fb      	ldr	r3, [r7, #12]
 8019256:	697a      	ldr	r2, [r7, #20]
 8019258:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801925a:	68fb      	ldr	r3, [r7, #12]
 801925c:	699b      	ldr	r3, [r3, #24]
 801925e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019262:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8019266:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8019268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	429a      	cmp	r2, r3
 801926e:	d901      	bls.n	8019274 <f_write+0x264>
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8019274:	68fb      	ldr	r3, [r7, #12]
 8019276:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801927a:	68fb      	ldr	r3, [r7, #12]
 801927c:	699b      	ldr	r3, [r3, #24]
 801927e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019282:	4413      	add	r3, r2
 8019284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019286:	69f9      	ldr	r1, [r7, #28]
 8019288:	4618      	mov	r0, r3
 801928a:	f7fd fbe1 	bl	8016a50 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801928e:	68fb      	ldr	r3, [r7, #12]
 8019290:	7d1b      	ldrb	r3, [r3, #20]
 8019292:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8019296:	b2da      	uxtb	r2, r3
 8019298:	68fb      	ldr	r3, [r7, #12]
 801929a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801929c:	69fa      	ldr	r2, [r7, #28]
 801929e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192a0:	4413      	add	r3, r2
 80192a2:	61fb      	str	r3, [r7, #28]
 80192a4:	68fb      	ldr	r3, [r7, #12]
 80192a6:	699a      	ldr	r2, [r3, #24]
 80192a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192aa:	441a      	add	r2, r3
 80192ac:	68fb      	ldr	r3, [r7, #12]
 80192ae:	619a      	str	r2, [r3, #24]
 80192b0:	68fb      	ldr	r3, [r7, #12]
 80192b2:	68da      	ldr	r2, [r3, #12]
 80192b4:	68fb      	ldr	r3, [r7, #12]
 80192b6:	699b      	ldr	r3, [r3, #24]
 80192b8:	429a      	cmp	r2, r3
 80192ba:	bf38      	it	cc
 80192bc:	461a      	movcc	r2, r3
 80192be:	68fb      	ldr	r3, [r7, #12]
 80192c0:	60da      	str	r2, [r3, #12]
 80192c2:	683b      	ldr	r3, [r7, #0]
 80192c4:	681a      	ldr	r2, [r3, #0]
 80192c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192c8:	441a      	add	r2, r3
 80192ca:	683b      	ldr	r3, [r7, #0]
 80192cc:	601a      	str	r2, [r3, #0]
 80192ce:	687a      	ldr	r2, [r7, #4]
 80192d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192d2:	1ad3      	subs	r3, r2, r3
 80192d4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80192d6:	687b      	ldr	r3, [r7, #4]
 80192d8:	2b00      	cmp	r3, #0
 80192da:	f47f aed4 	bne.w	8019086 <f_write+0x76>
 80192de:	e000      	b.n	80192e2 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80192e0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80192e2:	68fb      	ldr	r3, [r7, #12]
 80192e4:	7d1b      	ldrb	r3, [r3, #20]
 80192e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80192ea:	b2da      	uxtb	r2, r3
 80192ec:	68fb      	ldr	r3, [r7, #12]
 80192ee:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80192f0:	2300      	movs	r3, #0
}
 80192f2:	4618      	mov	r0, r3
 80192f4:	3730      	adds	r7, #48	; 0x30
 80192f6:	46bd      	mov	sp, r7
 80192f8:	bd80      	pop	{r7, pc}

080192fa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80192fa:	b580      	push	{r7, lr}
 80192fc:	b086      	sub	sp, #24
 80192fe:	af00      	add	r7, sp, #0
 8019300:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	f107 0208 	add.w	r2, r7, #8
 8019308:	4611      	mov	r1, r2
 801930a:	4618      	mov	r0, r3
 801930c:	f7ff fc46 	bl	8018b9c <validate>
 8019310:	4603      	mov	r3, r0
 8019312:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8019314:	7dfb      	ldrb	r3, [r7, #23]
 8019316:	2b00      	cmp	r3, #0
 8019318:	d168      	bne.n	80193ec <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801931a:	687b      	ldr	r3, [r7, #4]
 801931c:	7d1b      	ldrb	r3, [r3, #20]
 801931e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019322:	2b00      	cmp	r3, #0
 8019324:	d062      	beq.n	80193ec <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8019326:	687b      	ldr	r3, [r7, #4]
 8019328:	7d1b      	ldrb	r3, [r3, #20]
 801932a:	b25b      	sxtb	r3, r3
 801932c:	2b00      	cmp	r3, #0
 801932e:	da15      	bge.n	801935c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8019330:	68bb      	ldr	r3, [r7, #8]
 8019332:	7858      	ldrb	r0, [r3, #1]
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	6a1a      	ldr	r2, [r3, #32]
 801933e:	2301      	movs	r3, #1
 8019340:	f7fd fac6 	bl	80168d0 <disk_write>
 8019344:	4603      	mov	r3, r0
 8019346:	2b00      	cmp	r3, #0
 8019348:	d001      	beq.n	801934e <f_sync+0x54>
 801934a:	2301      	movs	r3, #1
 801934c:	e04f      	b.n	80193ee <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	7d1b      	ldrb	r3, [r3, #20]
 8019352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019356:	b2da      	uxtb	r2, r3
 8019358:	687b      	ldr	r3, [r7, #4]
 801935a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801935c:	f7f8 f9dc 	bl	8011718 <get_fattime>
 8019360:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8019362:	68ba      	ldr	r2, [r7, #8]
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019368:	4619      	mov	r1, r3
 801936a:	4610      	mov	r0, r2
 801936c:	f7fd fd9e 	bl	8016eac <move_window>
 8019370:	4603      	mov	r3, r0
 8019372:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8019374:	7dfb      	ldrb	r3, [r7, #23]
 8019376:	2b00      	cmp	r3, #0
 8019378:	d138      	bne.n	80193ec <f_sync+0xf2>
					dir = fp->dir_ptr;
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801937e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8019380:	68fb      	ldr	r3, [r7, #12]
 8019382:	330b      	adds	r3, #11
 8019384:	781a      	ldrb	r2, [r3, #0]
 8019386:	68fb      	ldr	r3, [r7, #12]
 8019388:	330b      	adds	r3, #11
 801938a:	f042 0220 	orr.w	r2, r2, #32
 801938e:	b2d2      	uxtb	r2, r2
 8019390:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8019392:	687b      	ldr	r3, [r7, #4]
 8019394:	6818      	ldr	r0, [r3, #0]
 8019396:	687b      	ldr	r3, [r7, #4]
 8019398:	689b      	ldr	r3, [r3, #8]
 801939a:	461a      	mov	r2, r3
 801939c:	68f9      	ldr	r1, [r7, #12]
 801939e:	f7fe faab 	bl	80178f8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80193a2:	68fb      	ldr	r3, [r7, #12]
 80193a4:	f103 021c 	add.w	r2, r3, #28
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	68db      	ldr	r3, [r3, #12]
 80193ac:	4619      	mov	r1, r3
 80193ae:	4610      	mov	r0, r2
 80193b0:	f7fd fb22 	bl	80169f8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80193b4:	68fb      	ldr	r3, [r7, #12]
 80193b6:	3316      	adds	r3, #22
 80193b8:	6939      	ldr	r1, [r7, #16]
 80193ba:	4618      	mov	r0, r3
 80193bc:	f7fd fb1c 	bl	80169f8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80193c0:	68fb      	ldr	r3, [r7, #12]
 80193c2:	3312      	adds	r3, #18
 80193c4:	2100      	movs	r1, #0
 80193c6:	4618      	mov	r0, r3
 80193c8:	f7fd fafb 	bl	80169c2 <st_word>
					fs->wflag = 1;
 80193cc:	68bb      	ldr	r3, [r7, #8]
 80193ce:	2201      	movs	r2, #1
 80193d0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80193d2:	68bb      	ldr	r3, [r7, #8]
 80193d4:	4618      	mov	r0, r3
 80193d6:	f7fd fd97 	bl	8016f08 <sync_fs>
 80193da:	4603      	mov	r3, r0
 80193dc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	7d1b      	ldrb	r3, [r3, #20]
 80193e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80193e6:	b2da      	uxtb	r2, r3
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80193ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80193ee:	4618      	mov	r0, r3
 80193f0:	3718      	adds	r7, #24
 80193f2:	46bd      	mov	sp, r7
 80193f4:	bd80      	pop	{r7, pc}

080193f6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80193f6:	b580      	push	{r7, lr}
 80193f8:	b084      	sub	sp, #16
 80193fa:	af00      	add	r7, sp, #0
 80193fc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80193fe:	6878      	ldr	r0, [r7, #4]
 8019400:	f7ff ff7b 	bl	80192fa <f_sync>
 8019404:	4603      	mov	r3, r0
 8019406:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8019408:	7bfb      	ldrb	r3, [r7, #15]
 801940a:	2b00      	cmp	r3, #0
 801940c:	d118      	bne.n	8019440 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801940e:	687b      	ldr	r3, [r7, #4]
 8019410:	f107 0208 	add.w	r2, r7, #8
 8019414:	4611      	mov	r1, r2
 8019416:	4618      	mov	r0, r3
 8019418:	f7ff fbc0 	bl	8018b9c <validate>
 801941c:	4603      	mov	r3, r0
 801941e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8019420:	7bfb      	ldrb	r3, [r7, #15]
 8019422:	2b00      	cmp	r3, #0
 8019424:	d10c      	bne.n	8019440 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8019426:	687b      	ldr	r3, [r7, #4]
 8019428:	691b      	ldr	r3, [r3, #16]
 801942a:	4618      	mov	r0, r3
 801942c:	f7fd fc9a 	bl	8016d64 <dec_lock>
 8019430:	4603      	mov	r3, r0
 8019432:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8019434:	7bfb      	ldrb	r3, [r7, #15]
 8019436:	2b00      	cmp	r3, #0
 8019438:	d102      	bne.n	8019440 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	2200      	movs	r2, #0
 801943e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8019440:	7bfb      	ldrb	r3, [r7, #15]
}
 8019442:	4618      	mov	r0, r3
 8019444:	3710      	adds	r7, #16
 8019446:	46bd      	mov	sp, r7
 8019448:	bd80      	pop	{r7, pc}

0801944a <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801944a:	b580      	push	{r7, lr}
 801944c:	b090      	sub	sp, #64	; 0x40
 801944e:	af00      	add	r7, sp, #0
 8019450:	6078      	str	r0, [r7, #4]
 8019452:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8019454:	f107 0108 	add.w	r1, r7, #8
 8019458:	1d3b      	adds	r3, r7, #4
 801945a:	2200      	movs	r2, #0
 801945c:	4618      	mov	r0, r3
 801945e:	f7ff f94d 	bl	80186fc <find_volume>
 8019462:	4603      	mov	r3, r0
 8019464:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8019468:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801946c:	2b00      	cmp	r3, #0
 801946e:	d11f      	bne.n	80194b0 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8019470:	687a      	ldr	r2, [r7, #4]
 8019472:	f107 0308 	add.w	r3, r7, #8
 8019476:	4611      	mov	r1, r2
 8019478:	4618      	mov	r0, r3
 801947a:	f7ff f833 	bl	80184e4 <follow_path>
 801947e:	4603      	mov	r3, r0
 8019480:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8019484:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019488:	2b00      	cmp	r3, #0
 801948a:	d111      	bne.n	80194b0 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 801948c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019490:	b25b      	sxtb	r3, r3
 8019492:	2b00      	cmp	r3, #0
 8019494:	da03      	bge.n	801949e <f_stat+0x54>
				res = FR_INVALID_NAME;
 8019496:	2306      	movs	r3, #6
 8019498:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801949c:	e008      	b.n	80194b0 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 801949e:	683b      	ldr	r3, [r7, #0]
 80194a0:	2b00      	cmp	r3, #0
 80194a2:	d005      	beq.n	80194b0 <f_stat+0x66>
 80194a4:	f107 0308 	add.w	r3, r7, #8
 80194a8:	6839      	ldr	r1, [r7, #0]
 80194aa:	4618      	mov	r0, r3
 80194ac:	f7fe fd84 	bl	8017fb8 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 80194b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80194b4:	4618      	mov	r0, r3
 80194b6:	3740      	adds	r7, #64	; 0x40
 80194b8:	46bd      	mov	sp, r7
 80194ba:	bd80      	pop	{r7, pc}

080194bc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80194bc:	b480      	push	{r7}
 80194be:	b087      	sub	sp, #28
 80194c0:	af00      	add	r7, sp, #0
 80194c2:	60f8      	str	r0, [r7, #12]
 80194c4:	60b9      	str	r1, [r7, #8]
 80194c6:	4613      	mov	r3, r2
 80194c8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80194ca:	2301      	movs	r3, #1
 80194cc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80194ce:	2300      	movs	r3, #0
 80194d0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80194d2:	4b1f      	ldr	r3, [pc, #124]	; (8019550 <FATFS_LinkDriverEx+0x94>)
 80194d4:	7a5b      	ldrb	r3, [r3, #9]
 80194d6:	b2db      	uxtb	r3, r3
 80194d8:	2b00      	cmp	r3, #0
 80194da:	d131      	bne.n	8019540 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80194dc:	4b1c      	ldr	r3, [pc, #112]	; (8019550 <FATFS_LinkDriverEx+0x94>)
 80194de:	7a5b      	ldrb	r3, [r3, #9]
 80194e0:	b2db      	uxtb	r3, r3
 80194e2:	461a      	mov	r2, r3
 80194e4:	4b1a      	ldr	r3, [pc, #104]	; (8019550 <FATFS_LinkDriverEx+0x94>)
 80194e6:	2100      	movs	r1, #0
 80194e8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80194ea:	4b19      	ldr	r3, [pc, #100]	; (8019550 <FATFS_LinkDriverEx+0x94>)
 80194ec:	7a5b      	ldrb	r3, [r3, #9]
 80194ee:	b2db      	uxtb	r3, r3
 80194f0:	4a17      	ldr	r2, [pc, #92]	; (8019550 <FATFS_LinkDriverEx+0x94>)
 80194f2:	009b      	lsls	r3, r3, #2
 80194f4:	4413      	add	r3, r2
 80194f6:	68fa      	ldr	r2, [r7, #12]
 80194f8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80194fa:	4b15      	ldr	r3, [pc, #84]	; (8019550 <FATFS_LinkDriverEx+0x94>)
 80194fc:	7a5b      	ldrb	r3, [r3, #9]
 80194fe:	b2db      	uxtb	r3, r3
 8019500:	461a      	mov	r2, r3
 8019502:	4b13      	ldr	r3, [pc, #76]	; (8019550 <FATFS_LinkDriverEx+0x94>)
 8019504:	4413      	add	r3, r2
 8019506:	79fa      	ldrb	r2, [r7, #7]
 8019508:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801950a:	4b11      	ldr	r3, [pc, #68]	; (8019550 <FATFS_LinkDriverEx+0x94>)
 801950c:	7a5b      	ldrb	r3, [r3, #9]
 801950e:	b2db      	uxtb	r3, r3
 8019510:	1c5a      	adds	r2, r3, #1
 8019512:	b2d1      	uxtb	r1, r2
 8019514:	4a0e      	ldr	r2, [pc, #56]	; (8019550 <FATFS_LinkDriverEx+0x94>)
 8019516:	7251      	strb	r1, [r2, #9]
 8019518:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801951a:	7dbb      	ldrb	r3, [r7, #22]
 801951c:	3330      	adds	r3, #48	; 0x30
 801951e:	b2da      	uxtb	r2, r3
 8019520:	68bb      	ldr	r3, [r7, #8]
 8019522:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8019524:	68bb      	ldr	r3, [r7, #8]
 8019526:	3301      	adds	r3, #1
 8019528:	223a      	movs	r2, #58	; 0x3a
 801952a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801952c:	68bb      	ldr	r3, [r7, #8]
 801952e:	3302      	adds	r3, #2
 8019530:	222f      	movs	r2, #47	; 0x2f
 8019532:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8019534:	68bb      	ldr	r3, [r7, #8]
 8019536:	3303      	adds	r3, #3
 8019538:	2200      	movs	r2, #0
 801953a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801953c:	2300      	movs	r3, #0
 801953e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8019540:	7dfb      	ldrb	r3, [r7, #23]
}
 8019542:	4618      	mov	r0, r3
 8019544:	371c      	adds	r7, #28
 8019546:	46bd      	mov	sp, r7
 8019548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801954c:	4770      	bx	lr
 801954e:	bf00      	nop
 8019550:	20001cac 	.word	0x20001cac

08019554 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8019554:	b580      	push	{r7, lr}
 8019556:	b082      	sub	sp, #8
 8019558:	af00      	add	r7, sp, #0
 801955a:	6078      	str	r0, [r7, #4]
 801955c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801955e:	2200      	movs	r2, #0
 8019560:	6839      	ldr	r1, [r7, #0]
 8019562:	6878      	ldr	r0, [r7, #4]
 8019564:	f7ff ffaa 	bl	80194bc <FATFS_LinkDriverEx>
 8019568:	4603      	mov	r3, r0
}
 801956a:	4618      	mov	r0, r3
 801956c:	3708      	adds	r7, #8
 801956e:	46bd      	mov	sp, r7
 8019570:	bd80      	pop	{r7, pc}
	...

08019574 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8019574:	b480      	push	{r7}
 8019576:	b085      	sub	sp, #20
 8019578:	af00      	add	r7, sp, #0
 801957a:	4603      	mov	r3, r0
 801957c:	6039      	str	r1, [r7, #0]
 801957e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8019580:	88fb      	ldrh	r3, [r7, #6]
 8019582:	2b7f      	cmp	r3, #127	; 0x7f
 8019584:	d802      	bhi.n	801958c <ff_convert+0x18>
		c = chr;
 8019586:	88fb      	ldrh	r3, [r7, #6]
 8019588:	81fb      	strh	r3, [r7, #14]
 801958a:	e025      	b.n	80195d8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801958c:	683b      	ldr	r3, [r7, #0]
 801958e:	2b00      	cmp	r3, #0
 8019590:	d00b      	beq.n	80195aa <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8019592:	88fb      	ldrh	r3, [r7, #6]
 8019594:	2bff      	cmp	r3, #255	; 0xff
 8019596:	d805      	bhi.n	80195a4 <ff_convert+0x30>
 8019598:	88fb      	ldrh	r3, [r7, #6]
 801959a:	3b80      	subs	r3, #128	; 0x80
 801959c:	4a12      	ldr	r2, [pc, #72]	; (80195e8 <ff_convert+0x74>)
 801959e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80195a2:	e000      	b.n	80195a6 <ff_convert+0x32>
 80195a4:	2300      	movs	r3, #0
 80195a6:	81fb      	strh	r3, [r7, #14]
 80195a8:	e016      	b.n	80195d8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80195aa:	2300      	movs	r3, #0
 80195ac:	81fb      	strh	r3, [r7, #14]
 80195ae:	e009      	b.n	80195c4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80195b0:	89fb      	ldrh	r3, [r7, #14]
 80195b2:	4a0d      	ldr	r2, [pc, #52]	; (80195e8 <ff_convert+0x74>)
 80195b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80195b8:	88fa      	ldrh	r2, [r7, #6]
 80195ba:	429a      	cmp	r2, r3
 80195bc:	d006      	beq.n	80195cc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80195be:	89fb      	ldrh	r3, [r7, #14]
 80195c0:	3301      	adds	r3, #1
 80195c2:	81fb      	strh	r3, [r7, #14]
 80195c4:	89fb      	ldrh	r3, [r7, #14]
 80195c6:	2b7f      	cmp	r3, #127	; 0x7f
 80195c8:	d9f2      	bls.n	80195b0 <ff_convert+0x3c>
 80195ca:	e000      	b.n	80195ce <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80195cc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80195ce:	89fb      	ldrh	r3, [r7, #14]
 80195d0:	3380      	adds	r3, #128	; 0x80
 80195d2:	b29b      	uxth	r3, r3
 80195d4:	b2db      	uxtb	r3, r3
 80195d6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80195d8:	89fb      	ldrh	r3, [r7, #14]
}
 80195da:	4618      	mov	r0, r3
 80195dc:	3714      	adds	r7, #20
 80195de:	46bd      	mov	sp, r7
 80195e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195e4:	4770      	bx	lr
 80195e6:	bf00      	nop
 80195e8:	0802149c 	.word	0x0802149c

080195ec <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80195ec:	b480      	push	{r7}
 80195ee:	b087      	sub	sp, #28
 80195f0:	af00      	add	r7, sp, #0
 80195f2:	4603      	mov	r3, r0
 80195f4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80195f6:	88fb      	ldrh	r3, [r7, #6]
 80195f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80195fc:	d201      	bcs.n	8019602 <ff_wtoupper+0x16>
 80195fe:	4b3e      	ldr	r3, [pc, #248]	; (80196f8 <ff_wtoupper+0x10c>)
 8019600:	e000      	b.n	8019604 <ff_wtoupper+0x18>
 8019602:	4b3e      	ldr	r3, [pc, #248]	; (80196fc <ff_wtoupper+0x110>)
 8019604:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8019606:	697b      	ldr	r3, [r7, #20]
 8019608:	1c9a      	adds	r2, r3, #2
 801960a:	617a      	str	r2, [r7, #20]
 801960c:	881b      	ldrh	r3, [r3, #0]
 801960e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8019610:	8a7b      	ldrh	r3, [r7, #18]
 8019612:	2b00      	cmp	r3, #0
 8019614:	d068      	beq.n	80196e8 <ff_wtoupper+0xfc>
 8019616:	88fa      	ldrh	r2, [r7, #6]
 8019618:	8a7b      	ldrh	r3, [r7, #18]
 801961a:	429a      	cmp	r2, r3
 801961c:	d364      	bcc.n	80196e8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801961e:	697b      	ldr	r3, [r7, #20]
 8019620:	1c9a      	adds	r2, r3, #2
 8019622:	617a      	str	r2, [r7, #20]
 8019624:	881b      	ldrh	r3, [r3, #0]
 8019626:	823b      	strh	r3, [r7, #16]
 8019628:	8a3b      	ldrh	r3, [r7, #16]
 801962a:	0a1b      	lsrs	r3, r3, #8
 801962c:	81fb      	strh	r3, [r7, #14]
 801962e:	8a3b      	ldrh	r3, [r7, #16]
 8019630:	b2db      	uxtb	r3, r3
 8019632:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8019634:	88fa      	ldrh	r2, [r7, #6]
 8019636:	8a79      	ldrh	r1, [r7, #18]
 8019638:	8a3b      	ldrh	r3, [r7, #16]
 801963a:	440b      	add	r3, r1
 801963c:	429a      	cmp	r2, r3
 801963e:	da49      	bge.n	80196d4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8019640:	89fb      	ldrh	r3, [r7, #14]
 8019642:	2b08      	cmp	r3, #8
 8019644:	d84f      	bhi.n	80196e6 <ff_wtoupper+0xfa>
 8019646:	a201      	add	r2, pc, #4	; (adr r2, 801964c <ff_wtoupper+0x60>)
 8019648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801964c:	08019671 	.word	0x08019671
 8019650:	08019683 	.word	0x08019683
 8019654:	08019699 	.word	0x08019699
 8019658:	080196a1 	.word	0x080196a1
 801965c:	080196a9 	.word	0x080196a9
 8019660:	080196b1 	.word	0x080196b1
 8019664:	080196b9 	.word	0x080196b9
 8019668:	080196c1 	.word	0x080196c1
 801966c:	080196c9 	.word	0x080196c9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8019670:	88fa      	ldrh	r2, [r7, #6]
 8019672:	8a7b      	ldrh	r3, [r7, #18]
 8019674:	1ad3      	subs	r3, r2, r3
 8019676:	005b      	lsls	r3, r3, #1
 8019678:	697a      	ldr	r2, [r7, #20]
 801967a:	4413      	add	r3, r2
 801967c:	881b      	ldrh	r3, [r3, #0]
 801967e:	80fb      	strh	r3, [r7, #6]
 8019680:	e027      	b.n	80196d2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8019682:	88fa      	ldrh	r2, [r7, #6]
 8019684:	8a7b      	ldrh	r3, [r7, #18]
 8019686:	1ad3      	subs	r3, r2, r3
 8019688:	b29b      	uxth	r3, r3
 801968a:	f003 0301 	and.w	r3, r3, #1
 801968e:	b29b      	uxth	r3, r3
 8019690:	88fa      	ldrh	r2, [r7, #6]
 8019692:	1ad3      	subs	r3, r2, r3
 8019694:	80fb      	strh	r3, [r7, #6]
 8019696:	e01c      	b.n	80196d2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8019698:	88fb      	ldrh	r3, [r7, #6]
 801969a:	3b10      	subs	r3, #16
 801969c:	80fb      	strh	r3, [r7, #6]
 801969e:	e018      	b.n	80196d2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80196a0:	88fb      	ldrh	r3, [r7, #6]
 80196a2:	3b20      	subs	r3, #32
 80196a4:	80fb      	strh	r3, [r7, #6]
 80196a6:	e014      	b.n	80196d2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80196a8:	88fb      	ldrh	r3, [r7, #6]
 80196aa:	3b30      	subs	r3, #48	; 0x30
 80196ac:	80fb      	strh	r3, [r7, #6]
 80196ae:	e010      	b.n	80196d2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80196b0:	88fb      	ldrh	r3, [r7, #6]
 80196b2:	3b1a      	subs	r3, #26
 80196b4:	80fb      	strh	r3, [r7, #6]
 80196b6:	e00c      	b.n	80196d2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80196b8:	88fb      	ldrh	r3, [r7, #6]
 80196ba:	3308      	adds	r3, #8
 80196bc:	80fb      	strh	r3, [r7, #6]
 80196be:	e008      	b.n	80196d2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80196c0:	88fb      	ldrh	r3, [r7, #6]
 80196c2:	3b50      	subs	r3, #80	; 0x50
 80196c4:	80fb      	strh	r3, [r7, #6]
 80196c6:	e004      	b.n	80196d2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80196c8:	88fb      	ldrh	r3, [r7, #6]
 80196ca:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80196ce:	80fb      	strh	r3, [r7, #6]
 80196d0:	bf00      	nop
			}
			break;
 80196d2:	e008      	b.n	80196e6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80196d4:	89fb      	ldrh	r3, [r7, #14]
 80196d6:	2b00      	cmp	r3, #0
 80196d8:	d195      	bne.n	8019606 <ff_wtoupper+0x1a>
 80196da:	8a3b      	ldrh	r3, [r7, #16]
 80196dc:	005b      	lsls	r3, r3, #1
 80196de:	697a      	ldr	r2, [r7, #20]
 80196e0:	4413      	add	r3, r2
 80196e2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80196e4:	e78f      	b.n	8019606 <ff_wtoupper+0x1a>
			break;
 80196e6:	bf00      	nop
	}

	return chr;
 80196e8:	88fb      	ldrh	r3, [r7, #6]
}
 80196ea:	4618      	mov	r0, r3
 80196ec:	371c      	adds	r7, #28
 80196ee:	46bd      	mov	sp, r7
 80196f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196f4:	4770      	bx	lr
 80196f6:	bf00      	nop
 80196f8:	0802159c 	.word	0x0802159c
 80196fc:	08021790 	.word	0x08021790

08019700 <Mount_SD>:
//			}
//	}
//}

FRESULT Mount_SD (const TCHAR* path)
{
 8019700:	b580      	push	{r7, lr}
 8019702:	b082      	sub	sp, #8
 8019704:	af00      	add	r7, sp, #0
 8019706:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8019708:	2201      	movs	r2, #1
 801970a:	6879      	ldr	r1, [r7, #4]
 801970c:	480e      	ldr	r0, [pc, #56]	; (8019748 <Mount_SD+0x48>)
 801970e:	f7ff fa7b 	bl	8018c08 <f_mount>
 8019712:	4603      	mov	r3, r0
 8019714:	461a      	mov	r2, r3
 8019716:	4b0d      	ldr	r3, [pc, #52]	; (801974c <Mount_SD+0x4c>)
 8019718:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 801971a:	4b0c      	ldr	r3, [pc, #48]	; (801974c <Mount_SD+0x4c>)
 801971c:	781b      	ldrb	r3, [r3, #0]
 801971e:	2b00      	cmp	r3, #0
 8019720:	d006      	beq.n	8019730 <Mount_SD+0x30>
		if(sdioPrints) printf("ERROR!!! in mounting SD CARD...\n");
 8019722:	2300      	movs	r3, #0
 8019724:	2b00      	cmp	r3, #0
 8019726:	d009      	beq.n	801973c <Mount_SD+0x3c>
 8019728:	4809      	ldr	r0, [pc, #36]	; (8019750 <Mount_SD+0x50>)
 801972a:	f002 fbd5 	bl	801bed8 <puts>
 801972e:	e005      	b.n	801973c <Mount_SD+0x3c>
	}
	else if(sdioPrints) printf("SD CARD mounted successfully...\n");
 8019730:	2300      	movs	r3, #0
 8019732:	2b00      	cmp	r3, #0
 8019734:	d002      	beq.n	801973c <Mount_SD+0x3c>
 8019736:	4807      	ldr	r0, [pc, #28]	; (8019754 <Mount_SD+0x54>)
 8019738:	f002 fbce 	bl	801bed8 <puts>

	return fresult;
 801973c:	4b03      	ldr	r3, [pc, #12]	; (801974c <Mount_SD+0x4c>)
 801973e:	781b      	ldrb	r3, [r3, #0]
}
 8019740:	4618      	mov	r0, r3
 8019742:	3708      	adds	r7, #8
 8019744:	46bd      	mov	sp, r7
 8019746:	bd80      	pop	{r7, pc}
 8019748:	20001cb8 	.word	0x20001cb8
 801974c:	20002234 	.word	0x20002234
 8019750:	08020bf4 	.word	0x08020bf4
 8019754:	08020c14 	.word	0x08020c14

08019758 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 8019758:	b580      	push	{r7, lr}
 801975a:	b082      	sub	sp, #8
 801975c:	af00      	add	r7, sp, #0
 801975e:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8019760:	2201      	movs	r2, #1
 8019762:	6879      	ldr	r1, [r7, #4]
 8019764:	2000      	movs	r0, #0
 8019766:	f7ff fa4f 	bl	8018c08 <f_mount>
 801976a:	4603      	mov	r3, r0
 801976c:	461a      	mov	r2, r3
 801976e:	4b0b      	ldr	r3, [pc, #44]	; (801979c <Unmount_SD+0x44>)
 8019770:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) {
 8019772:	4b0a      	ldr	r3, [pc, #40]	; (801979c <Unmount_SD+0x44>)
 8019774:	781b      	ldrb	r3, [r3, #0]
 8019776:	2b00      	cmp	r3, #0
 8019778:	d106      	bne.n	8019788 <Unmount_SD+0x30>
		if(sdioPrints) printf("SD CARD UNMOUNTED successfully...\n\n");
 801977a:	2300      	movs	r3, #0
 801977c:	2b00      	cmp	r3, #0
 801977e:	d009      	beq.n	8019794 <Unmount_SD+0x3c>
 8019780:	4807      	ldr	r0, [pc, #28]	; (80197a0 <Unmount_SD+0x48>)
 8019782:	f002 fba9 	bl	801bed8 <puts>
	}
	else if(sdioPrints) printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
}
 8019786:	e005      	b.n	8019794 <Unmount_SD+0x3c>
	else if(sdioPrints) printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
 8019788:	2300      	movs	r3, #0
 801978a:	2b00      	cmp	r3, #0
 801978c:	d002      	beq.n	8019794 <Unmount_SD+0x3c>
 801978e:	4805      	ldr	r0, [pc, #20]	; (80197a4 <Unmount_SD+0x4c>)
 8019790:	f002 fba2 	bl	801bed8 <puts>
}
 8019794:	bf00      	nop
 8019796:	3708      	adds	r7, #8
 8019798:	46bd      	mov	sp, r7
 801979a:	bd80      	pop	{r7, pc}
 801979c:	20002234 	.word	0x20002234
 80197a0:	08020c34 	.word	0x08020c34
 80197a4:	08020c58 	.word	0x08020c58

080197a8 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 80197a8:	b580      	push	{r7, lr}
 80197aa:	b088      	sub	sp, #32
 80197ac:	af00      	add	r7, sp, #0
 80197ae:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 80197b0:	494c      	ldr	r1, [pc, #304]	; (80198e4 <Create_File+0x13c>)
 80197b2:	6878      	ldr	r0, [r7, #4]
 80197b4:	f7ff fe49 	bl	801944a <f_stat>
 80197b8:	4603      	mov	r3, r0
 80197ba:	461a      	mov	r2, r3
 80197bc:	4b4a      	ldr	r3, [pc, #296]	; (80198e8 <Create_File+0x140>)
 80197be:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 80197c0:	4b49      	ldr	r3, [pc, #292]	; (80198e8 <Create_File+0x140>)
 80197c2:	781b      	ldrb	r3, [r3, #0]
 80197c4:	2b00      	cmp	r3, #0
 80197c6:	d118      	bne.n	80197fa <Create_File+0x52>
	{
		file_already_exist = 1; //file is alrready there so now we dont create csv header
 80197c8:	4b48      	ldr	r3, [pc, #288]	; (80198ec <Create_File+0x144>)
 80197ca:	2201      	movs	r2, #1
 80197cc:	701a      	strb	r2, [r3, #0]
		char *buf = malloc(100*sizeof(char));
 80197ce:	2064      	movs	r0, #100	; 0x64
 80197d0:	f001 fb62 	bl	801ae98 <malloc>
 80197d4:	4603      	mov	r3, r0
 80197d6:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n",name);
 80197d8:	687a      	ldr	r2, [r7, #4]
 80197da:	4945      	ldr	r1, [pc, #276]	; (80198f0 <Create_File+0x148>)
 80197dc:	68f8      	ldr	r0, [r7, #12]
 80197de:	f002 fb99 	bl	801bf14 <siprintf>
		if(sdioPrints) printf(buf);
 80197e2:	2300      	movs	r3, #0
 80197e4:	2b00      	cmp	r3, #0
 80197e6:	d002      	beq.n	80197ee <Create_File+0x46>
 80197e8:	68f8      	ldr	r0, [r7, #12]
 80197ea:	f002 faef 	bl	801bdcc <iprintf>
		free(buf);
 80197ee:	68f8      	ldr	r0, [r7, #12]
 80197f0:	f001 fb5a 	bl	801aea8 <free>
	    return fresult;
 80197f4:	4b3c      	ldr	r3, [pc, #240]	; (80198e8 <Create_File+0x140>)
 80197f6:	781b      	ldrb	r3, [r3, #0]
 80197f8:	e06f      	b.n	80198da <Create_File+0x132>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 80197fa:	220b      	movs	r2, #11
 80197fc:	6879      	ldr	r1, [r7, #4]
 80197fe:	483d      	ldr	r0, [pc, #244]	; (80198f4 <Create_File+0x14c>)
 8019800:	f7ff fa48 	bl	8018c94 <f_open>
 8019804:	4603      	mov	r3, r0
 8019806:	461a      	mov	r2, r3
 8019808:	4b37      	ldr	r3, [pc, #220]	; (80198e8 <Create_File+0x140>)
 801980a:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 801980c:	4b36      	ldr	r3, [pc, #216]	; (80198e8 <Create_File+0x140>)
 801980e:	781b      	ldrb	r3, [r3, #0]
 8019810:	2b00      	cmp	r3, #0
 8019812:	d018      	beq.n	8019846 <Create_File+0x9e>
		{
			char *buf = malloc(100*sizeof(char));
 8019814:	2064      	movs	r0, #100	; 0x64
 8019816:	f001 fb3f 	bl	801ae98 <malloc>
 801981a:	4603      	mov	r3, r0
 801981c:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n", fresult, name);
 801981e:	4b32      	ldr	r3, [pc, #200]	; (80198e8 <Create_File+0x140>)
 8019820:	781b      	ldrb	r3, [r3, #0]
 8019822:	461a      	mov	r2, r3
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	4934      	ldr	r1, [pc, #208]	; (80198f8 <Create_File+0x150>)
 8019828:	6938      	ldr	r0, [r7, #16]
 801982a:	f002 fb73 	bl	801bf14 <siprintf>
			if(sdioPrints) printf(buf);
 801982e:	2300      	movs	r3, #0
 8019830:	2b00      	cmp	r3, #0
 8019832:	d002      	beq.n	801983a <Create_File+0x92>
 8019834:	6938      	ldr	r0, [r7, #16]
 8019836:	f002 fac9 	bl	801bdcc <iprintf>
			free(buf);
 801983a:	6938      	ldr	r0, [r7, #16]
 801983c:	f001 fb34 	bl	801aea8 <free>
		    return fresult;
 8019840:	4b29      	ldr	r3, [pc, #164]	; (80198e8 <Create_File+0x140>)
 8019842:	781b      	ldrb	r3, [r3, #0]
 8019844:	e049      	b.n	80198da <Create_File+0x132>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8019846:	2064      	movs	r0, #100	; 0x64
 8019848:	f001 fb26 	bl	801ae98 <malloc>
 801984c:	4603      	mov	r3, r0
 801984e:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8019850:	687a      	ldr	r2, [r7, #4]
 8019852:	492a      	ldr	r1, [pc, #168]	; (80198fc <Create_File+0x154>)
 8019854:	69f8      	ldr	r0, [r7, #28]
 8019856:	f002 fb5d 	bl	801bf14 <siprintf>
			if(sdioPrints) printf(buf);
 801985a:	2300      	movs	r3, #0
 801985c:	2b00      	cmp	r3, #0
 801985e:	d002      	beq.n	8019866 <Create_File+0xbe>
 8019860:	69f8      	ldr	r0, [r7, #28]
 8019862:	f002 fab3 	bl	801bdcc <iprintf>
			free(buf);
 8019866:	69f8      	ldr	r0, [r7, #28]
 8019868:	f001 fb1e 	bl	801aea8 <free>
		}

		fresult = f_close(&fil);
 801986c:	4821      	ldr	r0, [pc, #132]	; (80198f4 <Create_File+0x14c>)
 801986e:	f7ff fdc2 	bl	80193f6 <f_close>
 8019872:	4603      	mov	r3, r0
 8019874:	461a      	mov	r2, r3
 8019876:	4b1c      	ldr	r3, [pc, #112]	; (80198e8 <Create_File+0x140>)
 8019878:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 801987a:	4b1b      	ldr	r3, [pc, #108]	; (80198e8 <Create_File+0x140>)
 801987c:	781b      	ldrb	r3, [r3, #0]
 801987e:	2b00      	cmp	r3, #0
 8019880:	d016      	beq.n	80198b0 <Create_File+0x108>
		{
			char *buf = malloc(100*sizeof(char));
 8019882:	2064      	movs	r0, #100	; 0x64
 8019884:	f001 fb08 	bl	801ae98 <malloc>
 8019888:	4603      	mov	r3, r0
 801988a:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n", fresult, name);
 801988c:	4b16      	ldr	r3, [pc, #88]	; (80198e8 <Create_File+0x140>)
 801988e:	781b      	ldrb	r3, [r3, #0]
 8019890:	461a      	mov	r2, r3
 8019892:	687b      	ldr	r3, [r7, #4]
 8019894:	491a      	ldr	r1, [pc, #104]	; (8019900 <Create_File+0x158>)
 8019896:	6978      	ldr	r0, [r7, #20]
 8019898:	f002 fb3c 	bl	801bf14 <siprintf>
			if(sdioPrints) printf(buf);
 801989c:	2300      	movs	r3, #0
 801989e:	2b00      	cmp	r3, #0
 80198a0:	d002      	beq.n	80198a8 <Create_File+0x100>
 80198a2:	6978      	ldr	r0, [r7, #20]
 80198a4:	f002 fa92 	bl	801bdcc <iprintf>
			free(buf);
 80198a8:	6978      	ldr	r0, [r7, #20]
 80198aa:	f001 fafd 	bl	801aea8 <free>
 80198ae:	e012      	b.n	80198d6 <Create_File+0x12e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 80198b0:	2064      	movs	r0, #100	; 0x64
 80198b2:	f001 faf1 	bl	801ae98 <malloc>
 80198b6:	4603      	mov	r3, r0
 80198b8:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80198ba:	687a      	ldr	r2, [r7, #4]
 80198bc:	4911      	ldr	r1, [pc, #68]	; (8019904 <Create_File+0x15c>)
 80198be:	69b8      	ldr	r0, [r7, #24]
 80198c0:	f002 fb28 	bl	801bf14 <siprintf>
			if(sdioPrints) printf(buf);
 80198c4:	2300      	movs	r3, #0
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d002      	beq.n	80198d0 <Create_File+0x128>
 80198ca:	69b8      	ldr	r0, [r7, #24]
 80198cc:	f002 fa7e 	bl	801bdcc <iprintf>
			free(buf);
 80198d0:	69b8      	ldr	r0, [r7, #24]
 80198d2:	f001 fae9 	bl	801aea8 <free>
		}
	}
    return fresult;
 80198d6:	4b04      	ldr	r3, [pc, #16]	; (80198e8 <Create_File+0x140>)
 80198d8:	781b      	ldrb	r3, [r3, #0]
}
 80198da:	4618      	mov	r0, r3
 80198dc:	3720      	adds	r7, #32
 80198de:	46bd      	mov	sp, r7
 80198e0:	bd80      	pop	{r7, pc}
 80198e2:	bf00      	nop
 80198e4:	2000211c 	.word	0x2000211c
 80198e8:	20002234 	.word	0x20002234
 80198ec:	200022a4 	.word	0x200022a4
 80198f0:	08020e1c 	.word	0x08020e1c
 80198f4:	20001eec 	.word	0x20001eec
 80198f8:	08020e50 	.word	0x08020e50
 80198fc:	08020e78 	.word	0x08020e78
 8019900:	08020eb8 	.word	0x08020eb8
 8019904:	08020dfc 	.word	0x08020dfc

08019908 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8019908:	b580      	push	{r7, lr}
 801990a:	b088      	sub	sp, #32
 801990c:	af00      	add	r7, sp, #0
 801990e:	6078      	str	r0, [r7, #4]
 8019910:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8019912:	495f      	ldr	r1, [pc, #380]	; (8019a90 <Update_File+0x188>)
 8019914:	6878      	ldr	r0, [r7, #4]
 8019916:	f7ff fd98 	bl	801944a <f_stat>
 801991a:	4603      	mov	r3, r0
 801991c:	461a      	mov	r2, r3
 801991e:	4b5d      	ldr	r3, [pc, #372]	; (8019a94 <Update_File+0x18c>)
 8019920:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8019922:	4b5c      	ldr	r3, [pc, #368]	; (8019a94 <Update_File+0x18c>)
 8019924:	781b      	ldrb	r3, [r3, #0]
 8019926:	2b00      	cmp	r3, #0
 8019928:	d015      	beq.n	8019956 <Update_File+0x4e>
	{
		char *buf = malloc(100*sizeof(char));
 801992a:	2064      	movs	r0, #100	; 0x64
 801992c:	f001 fab4 	bl	801ae98 <malloc>
 8019930:	4603      	mov	r3, r0
 8019932:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n", name);
 8019934:	687a      	ldr	r2, [r7, #4]
 8019936:	4958      	ldr	r1, [pc, #352]	; (8019a98 <Update_File+0x190>)
 8019938:	68b8      	ldr	r0, [r7, #8]
 801993a:	f002 faeb 	bl	801bf14 <siprintf>
		if(sdioPrints) printf (buf);
 801993e:	2300      	movs	r3, #0
 8019940:	2b00      	cmp	r3, #0
 8019942:	d002      	beq.n	801994a <Update_File+0x42>
 8019944:	68b8      	ldr	r0, [r7, #8]
 8019946:	f002 fa41 	bl	801bdcc <iprintf>
		free(buf);
 801994a:	68b8      	ldr	r0, [r7, #8]
 801994c:	f001 faac 	bl	801aea8 <free>
	    return fresult;
 8019950:	4b50      	ldr	r3, [pc, #320]	; (8019a94 <Update_File+0x18c>)
 8019952:	781b      	ldrb	r3, [r3, #0]
 8019954:	e097      	b.n	8019a86 <Update_File+0x17e>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 8019956:	2232      	movs	r2, #50	; 0x32
 8019958:	6879      	ldr	r1, [r7, #4]
 801995a:	4850      	ldr	r0, [pc, #320]	; (8019a9c <Update_File+0x194>)
 801995c:	f7ff f99a 	bl	8018c94 <f_open>
 8019960:	4603      	mov	r3, r0
 8019962:	461a      	mov	r2, r3
 8019964:	4b4b      	ldr	r3, [pc, #300]	; (8019a94 <Update_File+0x18c>)
 8019966:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8019968:	4b4a      	ldr	r3, [pc, #296]	; (8019a94 <Update_File+0x18c>)
 801996a:	781b      	ldrb	r3, [r3, #0]
 801996c:	2b00      	cmp	r3, #0
 801996e:	d018      	beq.n	80199a2 <Update_File+0x9a>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8019970:	2064      	movs	r0, #100	; 0x64
 8019972:	f001 fa91 	bl	801ae98 <malloc>
 8019976:	4603      	mov	r3, r0
 8019978:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n", fresult, name);
 801997a:	4b46      	ldr	r3, [pc, #280]	; (8019a94 <Update_File+0x18c>)
 801997c:	781b      	ldrb	r3, [r3, #0]
 801997e:	461a      	mov	r2, r3
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	4947      	ldr	r1, [pc, #284]	; (8019aa0 <Update_File+0x198>)
 8019984:	68f8      	ldr	r0, [r7, #12]
 8019986:	f002 fac5 	bl	801bf14 <siprintf>
	    	if(sdioPrints) printf(buf);
 801998a:	2300      	movs	r3, #0
 801998c:	2b00      	cmp	r3, #0
 801998e:	d002      	beq.n	8019996 <Update_File+0x8e>
 8019990:	68f8      	ldr	r0, [r7, #12]
 8019992:	f002 fa1b 	bl	801bdcc <iprintf>
	        free(buf);
 8019996:	68f8      	ldr	r0, [r7, #12]
 8019998:	f001 fa86 	bl	801aea8 <free>
	        return fresult;
 801999c:	4b3d      	ldr	r3, [pc, #244]	; (8019a94 <Update_File+0x18c>)
 801999e:	781b      	ldrb	r3, [r3, #0]
 80199a0:	e071      	b.n	8019a86 <Update_File+0x17e>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 80199a2:	6838      	ldr	r0, [r7, #0]
 80199a4:	f7e6 fc26 	bl	80001f4 <strlen>
 80199a8:	4602      	mov	r2, r0
 80199aa:	4b3e      	ldr	r3, [pc, #248]	; (8019aa4 <Update_File+0x19c>)
 80199ac:	6839      	ldr	r1, [r7, #0]
 80199ae:	483b      	ldr	r0, [pc, #236]	; (8019a9c <Update_File+0x194>)
 80199b0:	f7ff fb2e 	bl	8019010 <f_write>
 80199b4:	4603      	mov	r3, r0
 80199b6:	461a      	mov	r2, r3
 80199b8:	4b36      	ldr	r3, [pc, #216]	; (8019a94 <Update_File+0x18c>)
 80199ba:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80199bc:	4b35      	ldr	r3, [pc, #212]	; (8019a94 <Update_File+0x18c>)
 80199be:	781b      	ldrb	r3, [r3, #0]
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	d016      	beq.n	80199f2 <Update_File+0xea>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80199c4:	2064      	movs	r0, #100	; 0x64
 80199c6:	f001 fa67 	bl	801ae98 <malloc>
 80199ca:	4603      	mov	r3, r0
 80199cc:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n", fresult, name);
 80199ce:	4b31      	ldr	r3, [pc, #196]	; (8019a94 <Update_File+0x18c>)
 80199d0:	781b      	ldrb	r3, [r3, #0]
 80199d2:	461a      	mov	r2, r3
 80199d4:	687b      	ldr	r3, [r7, #4]
 80199d6:	4934      	ldr	r1, [pc, #208]	; (8019aa8 <Update_File+0x1a0>)
 80199d8:	69b8      	ldr	r0, [r7, #24]
 80199da:	f002 fa9b 	bl	801bf14 <siprintf>
	    	if(sdioPrints) printf(buf);
 80199de:	2300      	movs	r3, #0
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	d002      	beq.n	80199ea <Update_File+0xe2>
 80199e4:	69b8      	ldr	r0, [r7, #24]
 80199e6:	f002 f9f1 	bl	801bdcc <iprintf>
	    	free(buf);
 80199ea:	69b8      	ldr	r0, [r7, #24]
 80199ec:	f001 fa5c 	bl	801aea8 <free>
 80199f0:	e012      	b.n	8019a18 <Update_File+0x110>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 80199f2:	2064      	movs	r0, #100	; 0x64
 80199f4:	f001 fa50 	bl	801ae98 <malloc>
 80199f8:	4603      	mov	r3, r0
 80199fa:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 80199fc:	687a      	ldr	r2, [r7, #4]
 80199fe:	492b      	ldr	r1, [pc, #172]	; (8019aac <Update_File+0x1a4>)
 8019a00:	69f8      	ldr	r0, [r7, #28]
 8019a02:	f002 fa87 	bl	801bf14 <siprintf>
	    	if(sdioPrints) printf(buf);
 8019a06:	2300      	movs	r3, #0
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	d002      	beq.n	8019a12 <Update_File+0x10a>
 8019a0c:	69f8      	ldr	r0, [r7, #28]
 8019a0e:	f002 f9dd 	bl	801bdcc <iprintf>
	    	free(buf);
 8019a12:	69f8      	ldr	r0, [r7, #28]
 8019a14:	f001 fa48 	bl	801aea8 <free>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8019a18:	4820      	ldr	r0, [pc, #128]	; (8019a9c <Update_File+0x194>)
 8019a1a:	f7ff fcec 	bl	80193f6 <f_close>
 8019a1e:	4603      	mov	r3, r0
 8019a20:	461a      	mov	r2, r3
 8019a22:	4b1c      	ldr	r3, [pc, #112]	; (8019a94 <Update_File+0x18c>)
 8019a24:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8019a26:	4b1b      	ldr	r3, [pc, #108]	; (8019a94 <Update_File+0x18c>)
 8019a28:	781b      	ldrb	r3, [r3, #0]
 8019a2a:	2b00      	cmp	r3, #0
 8019a2c:	d016      	beq.n	8019a5c <Update_File+0x154>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8019a2e:	2064      	movs	r0, #100	; 0x64
 8019a30:	f001 fa32 	bl	801ae98 <malloc>
 8019a34:	4603      	mov	r3, r0
 8019a36:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n", fresult, name);
 8019a38:	4b16      	ldr	r3, [pc, #88]	; (8019a94 <Update_File+0x18c>)
 8019a3a:	781b      	ldrb	r3, [r3, #0]
 8019a3c:	461a      	mov	r2, r3
 8019a3e:	687b      	ldr	r3, [r7, #4]
 8019a40:	491b      	ldr	r1, [pc, #108]	; (8019ab0 <Update_File+0x1a8>)
 8019a42:	6938      	ldr	r0, [r7, #16]
 8019a44:	f002 fa66 	bl	801bf14 <siprintf>
	    	if(sdioPrints) printf(buf);
 8019a48:	2300      	movs	r3, #0
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	d002      	beq.n	8019a54 <Update_File+0x14c>
 8019a4e:	6938      	ldr	r0, [r7, #16]
 8019a50:	f002 f9bc 	bl	801bdcc <iprintf>
	    	free(buf);
 8019a54:	6938      	ldr	r0, [r7, #16]
 8019a56:	f001 fa27 	bl	801aea8 <free>
 8019a5a:	e012      	b.n	8019a82 <Update_File+0x17a>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8019a5c:	2064      	movs	r0, #100	; 0x64
 8019a5e:	f001 fa1b 	bl	801ae98 <malloc>
 8019a62:	4603      	mov	r3, r0
 8019a64:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8019a66:	687a      	ldr	r2, [r7, #4]
 8019a68:	4912      	ldr	r1, [pc, #72]	; (8019ab4 <Update_File+0x1ac>)
 8019a6a:	6978      	ldr	r0, [r7, #20]
 8019a6c:	f002 fa52 	bl	801bf14 <siprintf>
	    	if(sdioPrints) printf(buf);
 8019a70:	2300      	movs	r3, #0
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	d002      	beq.n	8019a7c <Update_File+0x174>
 8019a76:	6978      	ldr	r0, [r7, #20]
 8019a78:	f002 f9a8 	bl	801bdcc <iprintf>
	    	free(buf);
 8019a7c:	6978      	ldr	r0, [r7, #20]
 8019a7e:	f001 fa13 	bl	801aea8 <free>
	     }
	}
    return fresult;
 8019a82:	4b04      	ldr	r3, [pc, #16]	; (8019a94 <Update_File+0x18c>)
 8019a84:	781b      	ldrb	r3, [r3, #0]
}
 8019a86:	4618      	mov	r0, r3
 8019a88:	3720      	adds	r7, #32
 8019a8a:	46bd      	mov	sp, r7
 8019a8c:	bd80      	pop	{r7, pc}
 8019a8e:	bf00      	nop
 8019a90:	2000211c 	.word	0x2000211c
 8019a94:	20002234 	.word	0x20002234
 8019a98:	08020cac 	.word	0x08020cac
 8019a9c:	20001eec 	.word	0x20001eec
 8019aa0:	08020ccc 	.word	0x08020ccc
 8019aa4:	20002238 	.word	0x20002238
 8019aa8:	08020edc 	.word	0x08020edc
 8019aac:	08020f04 	.word	0x08020f04
 8019ab0:	08020dd4 	.word	0x08020dd4
 8019ab4:	08020dfc 	.word	0x08020dfc

08019ab8 <json_update>:

char filename_with_format[100];
uint8_t file_already_exist = 0;
char buffer[255];

void json_update() {
 8019ab8:	b580      	push	{r7, lr}
 8019aba:	b088      	sub	sp, #32
 8019abc:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8019abe:	f107 0314 	add.w	r3, r7, #20
 8019ac2:	2200      	movs	r2, #0
 8019ac4:	4619      	mov	r1, r3
 8019ac6:	4886      	ldr	r0, [pc, #536]	; (8019ce0 <json_update+0x228>)
 8019ac8:	f7ef f894 	bl	8008bf4 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 8019acc:	463b      	mov	r3, r7
 8019ace:	2200      	movs	r2, #0
 8019ad0:	4619      	mov	r1, r3
 8019ad2:	4883      	ldr	r0, [pc, #524]	; (8019ce0 <json_update+0x228>)
 8019ad4:	f7ee ffac 	bl	8008a30 <HAL_RTC_GetTime>
	fresult1 = Mount_SD("/");
 8019ad8:	4882      	ldr	r0, [pc, #520]	; (8019ce4 <json_update+0x22c>)
 8019ada:	f7ff fe11 	bl	8019700 <Mount_SD>
 8019ade:	4603      	mov	r3, r0
 8019ae0:	461a      	mov	r2, r3
 8019ae2:	4b81      	ldr	r3, [pc, #516]	; (8019ce8 <json_update+0x230>)
 8019ae4:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 8019ae6:	4b80      	ldr	r3, [pc, #512]	; (8019ce8 <json_update+0x230>)
 8019ae8:	781b      	ldrb	r3, [r3, #0]
 8019aea:	2b00      	cmp	r3, #0
 8019aec:	f040 80f3 	bne.w	8019cd6 <json_update+0x21e>
		//CAN Bus
		sprintf(buffer, "{\n");
 8019af0:	497e      	ldr	r1, [pc, #504]	; (8019cec <json_update+0x234>)
 8019af2:	487f      	ldr	r0, [pc, #508]	; (8019cf0 <json_update+0x238>)
 8019af4:	f002 fa0e 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 8019af8:	497d      	ldr	r1, [pc, #500]	; (8019cf0 <json_update+0x238>)
 8019afa:	487e      	ldr	r0, [pc, #504]	; (8019cf4 <json_update+0x23c>)
 8019afc:	f7ff ff04 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019b00:	22ff      	movs	r2, #255	; 0xff
 8019b02:	2100      	movs	r1, #0
 8019b04:	487a      	ldr	r0, [pc, #488]	; (8019cf0 <json_update+0x238>)
 8019b06:	f001 f9ff 	bl	801af08 <memset>
		sprintf(buffer, "\"devEUI\":\"TF241_%s\",\n", ver_GetUid());
 8019b0a:	f7e8 f8db 	bl	8001cc4 <ver_GetUid>
 8019b0e:	4603      	mov	r3, r0
 8019b10:	461a      	mov	r2, r3
 8019b12:	4979      	ldr	r1, [pc, #484]	; (8019cf8 <json_update+0x240>)
 8019b14:	4876      	ldr	r0, [pc, #472]	; (8019cf0 <json_update+0x238>)
 8019b16:	f002 f9fd 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 8019b1a:	4975      	ldr	r1, [pc, #468]	; (8019cf0 <json_update+0x238>)
 8019b1c:	4875      	ldr	r0, [pc, #468]	; (8019cf4 <json_update+0x23c>)
 8019b1e:	f7ff fef3 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019b22:	22ff      	movs	r2, #255	; 0xff
 8019b24:	2100      	movs	r1, #0
 8019b26:	4872      	ldr	r0, [pc, #456]	; (8019cf0 <json_update+0x238>)
 8019b28:	f001 f9ee 	bl	801af08 <memset>
		sprintf(buffer, "\"id\":\"%s\",\n", _Flash_Packet.id);
 8019b2c:	4a73      	ldr	r2, [pc, #460]	; (8019cfc <json_update+0x244>)
 8019b2e:	4974      	ldr	r1, [pc, #464]	; (8019d00 <json_update+0x248>)
 8019b30:	486f      	ldr	r0, [pc, #444]	; (8019cf0 <json_update+0x238>)
 8019b32:	f002 f9ef 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 8019b36:	496e      	ldr	r1, [pc, #440]	; (8019cf0 <json_update+0x238>)
 8019b38:	486e      	ldr	r0, [pc, #440]	; (8019cf4 <json_update+0x23c>)
 8019b3a:	f7ff fee5 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019b3e:	22ff      	movs	r2, #255	; 0xff
 8019b40:	2100      	movs	r1, #0
 8019b42:	486b      	ldr	r0, [pc, #428]	; (8019cf0 <json_update+0x238>)
 8019b44:	f001 f9e0 	bl	801af08 <memset>
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 8019b48:	783b      	ldrb	r3, [r7, #0]
 8019b4a:	461a      	mov	r2, r3
				sTime.Minutes, sTime.Seconds);
 8019b4c:	787b      	ldrb	r3, [r7, #1]
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 8019b4e:	4619      	mov	r1, r3
				sTime.Minutes, sTime.Seconds);
 8019b50:	78bb      	ldrb	r3, [r7, #2]
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 8019b52:	9300      	str	r3, [sp, #0]
 8019b54:	460b      	mov	r3, r1
 8019b56:	496b      	ldr	r1, [pc, #428]	; (8019d04 <json_update+0x24c>)
 8019b58:	4865      	ldr	r0, [pc, #404]	; (8019cf0 <json_update+0x238>)
 8019b5a:	f002 f9db 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 8019b5e:	4964      	ldr	r1, [pc, #400]	; (8019cf0 <json_update+0x238>)
 8019b60:	4864      	ldr	r0, [pc, #400]	; (8019cf4 <json_update+0x23c>)
 8019b62:	f7ff fed1 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019b66:	22ff      	movs	r2, #255	; 0xff
 8019b68:	2100      	movs	r1, #0
 8019b6a:	4861      	ldr	r0, [pc, #388]	; (8019cf0 <json_update+0x238>)
 8019b6c:	f001 f9cc 	bl	801af08 <memset>
		sprintf(buffer, "\"location\":\"%s\",\n", _Flash_Packet.location);
 8019b70:	4a65      	ldr	r2, [pc, #404]	; (8019d08 <json_update+0x250>)
 8019b72:	4966      	ldr	r1, [pc, #408]	; (8019d0c <json_update+0x254>)
 8019b74:	485e      	ldr	r0, [pc, #376]	; (8019cf0 <json_update+0x238>)
 8019b76:	f002 f9cd 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 8019b7a:	495d      	ldr	r1, [pc, #372]	; (8019cf0 <json_update+0x238>)
 8019b7c:	485d      	ldr	r0, [pc, #372]	; (8019cf4 <json_update+0x23c>)
 8019b7e:	f7ff fec3 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019b82:	22ff      	movs	r2, #255	; 0xff
 8019b84:	2100      	movs	r1, #0
 8019b86:	485a      	ldr	r0, [pc, #360]	; (8019cf0 <json_update+0x238>)
 8019b88:	f001 f9be 	bl	801af08 <memset>
		sprintf(buffer, "\"name\":\"%s\",\n", _Flash_Packet.name);
 8019b8c:	4a60      	ldr	r2, [pc, #384]	; (8019d10 <json_update+0x258>)
 8019b8e:	4961      	ldr	r1, [pc, #388]	; (8019d14 <json_update+0x25c>)
 8019b90:	4857      	ldr	r0, [pc, #348]	; (8019cf0 <json_update+0x238>)
 8019b92:	f002 f9bf 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 8019b96:	4956      	ldr	r1, [pc, #344]	; (8019cf0 <json_update+0x238>)
 8019b98:	4856      	ldr	r0, [pc, #344]	; (8019cf4 <json_update+0x23c>)
 8019b9a:	f7ff feb5 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019b9e:	22ff      	movs	r2, #255	; 0xff
 8019ba0:	2100      	movs	r1, #0
 8019ba2:	4853      	ldr	r0, [pc, #332]	; (8019cf0 <json_update+0x238>)
 8019ba4:	f001 f9b0 	bl	801af08 <memset>
		sprintf(buffer, "\"group\":\"%s\",\n", _Flash_Packet.group);
 8019ba8:	4a5b      	ldr	r2, [pc, #364]	; (8019d18 <json_update+0x260>)
 8019baa:	495c      	ldr	r1, [pc, #368]	; (8019d1c <json_update+0x264>)
 8019bac:	4850      	ldr	r0, [pc, #320]	; (8019cf0 <json_update+0x238>)
 8019bae:	f002 f9b1 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 8019bb2:	494f      	ldr	r1, [pc, #316]	; (8019cf0 <json_update+0x238>)
 8019bb4:	484f      	ldr	r0, [pc, #316]	; (8019cf4 <json_update+0x23c>)
 8019bb6:	f7ff fea7 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019bba:	22ff      	movs	r2, #255	; 0xff
 8019bbc:	2100      	movs	r1, #0
 8019bbe:	484c      	ldr	r0, [pc, #304]	; (8019cf0 <json_update+0x238>)
 8019bc0:	f001 f9a2 	bl	801af08 <memset>
		sprintf(buffer, "\"co2\":\"%d\",\n", _RunTime_Packet.co2);
 8019bc4:	4b56      	ldr	r3, [pc, #344]	; (8019d20 <json_update+0x268>)
 8019bc6:	881b      	ldrh	r3, [r3, #0]
 8019bc8:	461a      	mov	r2, r3
 8019bca:	4956      	ldr	r1, [pc, #344]	; (8019d24 <json_update+0x26c>)
 8019bcc:	4848      	ldr	r0, [pc, #288]	; (8019cf0 <json_update+0x238>)
 8019bce:	f002 f9a1 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 8019bd2:	4947      	ldr	r1, [pc, #284]	; (8019cf0 <json_update+0x238>)
 8019bd4:	4847      	ldr	r0, [pc, #284]	; (8019cf4 <json_update+0x23c>)
 8019bd6:	f7ff fe97 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019bda:	22ff      	movs	r2, #255	; 0xff
 8019bdc:	2100      	movs	r1, #0
 8019bde:	4844      	ldr	r0, [pc, #272]	; (8019cf0 <json_update+0x238>)
 8019be0:	f001 f992 	bl	801af08 <memset>
		sprintf(buffer, "\"temperature\":\"%ld\",\n",
 8019be4:	4b4e      	ldr	r3, [pc, #312]	; (8019d20 <json_update+0x268>)
 8019be6:	685b      	ldr	r3, [r3, #4]
 8019be8:	461a      	mov	r2, r3
 8019bea:	494f      	ldr	r1, [pc, #316]	; (8019d28 <json_update+0x270>)
 8019bec:	4840      	ldr	r0, [pc, #256]	; (8019cf0 <json_update+0x238>)
 8019bee:	f002 f991 	bl	801bf14 <siprintf>
				_RunTime_Packet.temperature);
		Update_File(filename_with_format, buffer);
 8019bf2:	493f      	ldr	r1, [pc, #252]	; (8019cf0 <json_update+0x238>)
 8019bf4:	483f      	ldr	r0, [pc, #252]	; (8019cf4 <json_update+0x23c>)
 8019bf6:	f7ff fe87 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019bfa:	22ff      	movs	r2, #255	; 0xff
 8019bfc:	2100      	movs	r1, #0
 8019bfe:	483c      	ldr	r0, [pc, #240]	; (8019cf0 <json_update+0x238>)
 8019c00:	f001 f982 	bl	801af08 <memset>
		sprintf(buffer, "\"humidity\":\"%ld\",\n", _RunTime_Packet.humidity);
 8019c04:	4b46      	ldr	r3, [pc, #280]	; (8019d20 <json_update+0x268>)
 8019c06:	689b      	ldr	r3, [r3, #8]
 8019c08:	461a      	mov	r2, r3
 8019c0a:	4948      	ldr	r1, [pc, #288]	; (8019d2c <json_update+0x274>)
 8019c0c:	4838      	ldr	r0, [pc, #224]	; (8019cf0 <json_update+0x238>)
 8019c0e:	f002 f981 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 8019c12:	4937      	ldr	r1, [pc, #220]	; (8019cf0 <json_update+0x238>)
 8019c14:	4837      	ldr	r0, [pc, #220]	; (8019cf4 <json_update+0x23c>)
 8019c16:	f7ff fe77 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019c1a:	22ff      	movs	r2, #255	; 0xff
 8019c1c:	2100      	movs	r1, #0
 8019c1e:	4834      	ldr	r0, [pc, #208]	; (8019cf0 <json_update+0x238>)
 8019c20:	f001 f972 	bl	801af08 <memset>
		sprintf(buffer, "\"pir\":\"%s\",\n",
				_RunTime_Packet.motion_detection ? "TRUE" : "FALSE");
 8019c24:	4b3e      	ldr	r3, [pc, #248]	; (8019d20 <json_update+0x268>)
 8019c26:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(buffer, "\"pir\":\"%s\",\n",
 8019c28:	2b00      	cmp	r3, #0
 8019c2a:	d001      	beq.n	8019c30 <json_update+0x178>
 8019c2c:	4b40      	ldr	r3, [pc, #256]	; (8019d30 <json_update+0x278>)
 8019c2e:	e000      	b.n	8019c32 <json_update+0x17a>
 8019c30:	4b40      	ldr	r3, [pc, #256]	; (8019d34 <json_update+0x27c>)
 8019c32:	461a      	mov	r2, r3
 8019c34:	4940      	ldr	r1, [pc, #256]	; (8019d38 <json_update+0x280>)
 8019c36:	482e      	ldr	r0, [pc, #184]	; (8019cf0 <json_update+0x238>)
 8019c38:	f002 f96c 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 8019c3c:	492c      	ldr	r1, [pc, #176]	; (8019cf0 <json_update+0x238>)
 8019c3e:	482d      	ldr	r0, [pc, #180]	; (8019cf4 <json_update+0x23c>)
 8019c40:	f7ff fe62 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019c44:	22ff      	movs	r2, #255	; 0xff
 8019c46:	2100      	movs	r1, #0
 8019c48:	4829      	ldr	r0, [pc, #164]	; (8019cf0 <json_update+0x238>)
 8019c4a:	f001 f95d 	bl	801af08 <memset>
		sprintf(buffer, "\"pm2.5\":\"%.02f\",\n", _RunTime_Packet.pm2_5);
 8019c4e:	4b34      	ldr	r3, [pc, #208]	; (8019d20 <json_update+0x268>)
 8019c50:	695b      	ldr	r3, [r3, #20]
 8019c52:	4618      	mov	r0, r3
 8019c54:	f7e6 fc90 	bl	8000578 <__aeabi_f2d>
 8019c58:	4602      	mov	r2, r0
 8019c5a:	460b      	mov	r3, r1
 8019c5c:	4937      	ldr	r1, [pc, #220]	; (8019d3c <json_update+0x284>)
 8019c5e:	4824      	ldr	r0, [pc, #144]	; (8019cf0 <json_update+0x238>)
 8019c60:	f002 f958 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 8019c64:	4922      	ldr	r1, [pc, #136]	; (8019cf0 <json_update+0x238>)
 8019c66:	4823      	ldr	r0, [pc, #140]	; (8019cf4 <json_update+0x23c>)
 8019c68:	f7ff fe4e 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019c6c:	22ff      	movs	r2, #255	; 0xff
 8019c6e:	2100      	movs	r1, #0
 8019c70:	481f      	ldr	r0, [pc, #124]	; (8019cf0 <json_update+0x238>)
 8019c72:	f001 f949 	bl	801af08 <memset>
		sprintf(buffer, "\"port\":\"none\",\n");
 8019c76:	4932      	ldr	r1, [pc, #200]	; (8019d40 <json_update+0x288>)
 8019c78:	481d      	ldr	r0, [pc, #116]	; (8019cf0 <json_update+0x238>)
 8019c7a:	f002 f94b 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 8019c7e:	491c      	ldr	r1, [pc, #112]	; (8019cf0 <json_update+0x238>)
 8019c80:	481c      	ldr	r0, [pc, #112]	; (8019cf4 <json_update+0x23c>)
 8019c82:	f7ff fe41 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019c86:	22ff      	movs	r2, #255	; 0xff
 8019c88:	2100      	movs	r1, #0
 8019c8a:	4819      	ldr	r0, [pc, #100]	; (8019cf0 <json_update+0x238>)
 8019c8c:	f001 f93c 	bl	801af08 <memset>
		sprintf(buffer, "\"battery\":\"%.02f\",\n",
				_RunTime_Packet.battery_voltage);
 8019c90:	4b23      	ldr	r3, [pc, #140]	; (8019d20 <json_update+0x268>)
 8019c92:	6a1b      	ldr	r3, [r3, #32]
		sprintf(buffer, "\"battery\":\"%.02f\",\n",
 8019c94:	4618      	mov	r0, r3
 8019c96:	f7e6 fc6f 	bl	8000578 <__aeabi_f2d>
 8019c9a:	4602      	mov	r2, r0
 8019c9c:	460b      	mov	r3, r1
 8019c9e:	4929      	ldr	r1, [pc, #164]	; (8019d44 <json_update+0x28c>)
 8019ca0:	4813      	ldr	r0, [pc, #76]	; (8019cf0 <json_update+0x238>)
 8019ca2:	f002 f937 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 8019ca6:	4912      	ldr	r1, [pc, #72]	; (8019cf0 <json_update+0x238>)
 8019ca8:	4812      	ldr	r0, [pc, #72]	; (8019cf4 <json_update+0x23c>)
 8019caa:	f7ff fe2d 	bl	8019908 <Update_File>

		//we end it
		memset(buffer,0,sizeof(buffer));
 8019cae:	22ff      	movs	r2, #255	; 0xff
 8019cb0:	2100      	movs	r1, #0
 8019cb2:	480f      	ldr	r0, [pc, #60]	; (8019cf0 <json_update+0x238>)
 8019cb4:	f001 f928 	bl	801af08 <memset>
		sprintf(buffer, "}\n\n");
 8019cb8:	4923      	ldr	r1, [pc, #140]	; (8019d48 <json_update+0x290>)
 8019cba:	480d      	ldr	r0, [pc, #52]	; (8019cf0 <json_update+0x238>)
 8019cbc:	f002 f92a 	bl	801bf14 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 8019cc0:	490b      	ldr	r1, [pc, #44]	; (8019cf0 <json_update+0x238>)
 8019cc2:	480c      	ldr	r0, [pc, #48]	; (8019cf4 <json_update+0x23c>)
 8019cc4:	f7ff fe20 	bl	8019908 <Update_File>
 8019cc8:	4603      	mov	r3, r0
 8019cca:	461a      	mov	r2, r3
 8019ccc:	4b06      	ldr	r3, [pc, #24]	; (8019ce8 <json_update+0x230>)
 8019cce:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 8019cd0:	4804      	ldr	r0, [pc, #16]	; (8019ce4 <json_update+0x22c>)
 8019cd2:	f7ff fd41 	bl	8019758 <Unmount_SD>
	}
}
 8019cd6:	bf00      	nop
 8019cd8:	3718      	adds	r7, #24
 8019cda:	46bd      	mov	sp, r7
 8019cdc:	bd80      	pop	{r7, pc}
 8019cde:	bf00      	nop
 8019ce0:	200017bc 	.word	0x200017bc
 8019ce4:	08020ff0 	.word	0x08020ff0
 8019ce8:	2000223c 	.word	0x2000223c
 8019cec:	08020ff4 	.word	0x08020ff4
 8019cf0:	200022a8 	.word	0x200022a8
 8019cf4:	20002240 	.word	0x20002240
 8019cf8:	08020ff8 	.word	0x08020ff8
 8019cfc:	200013a1 	.word	0x200013a1
 8019d00:	08021010 	.word	0x08021010
 8019d04:	0802101c 	.word	0x0802101c
 8019d08:	200013d3 	.word	0x200013d3
 8019d0c:	0802103c 	.word	0x0802103c
 8019d10:	20001405 	.word	0x20001405
 8019d14:	08021050 	.word	0x08021050
 8019d18:	20001437 	.word	0x20001437
 8019d1c:	08021060 	.word	0x08021060
 8019d20:	2000146c 	.word	0x2000146c
 8019d24:	08021070 	.word	0x08021070
 8019d28:	08021080 	.word	0x08021080
 8019d2c:	08021098 	.word	0x08021098
 8019d30:	080210ac 	.word	0x080210ac
 8019d34:	080210b4 	.word	0x080210b4
 8019d38:	080210bc 	.word	0x080210bc
 8019d3c:	080210cc 	.word	0x080210cc
 8019d40:	080210e0 	.word	0x080210e0
 8019d44:	080210f0 	.word	0x080210f0
 8019d48:	08021104 	.word	0x08021104

08019d4c <csv_update>:
void csv_update() {
 8019d4c:	b580      	push	{r7, lr}
 8019d4e:	b088      	sub	sp, #32
 8019d50:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8019d52:	f107 0314 	add.w	r3, r7, #20
 8019d56:	2200      	movs	r2, #0
 8019d58:	4619      	mov	r1, r3
 8019d5a:	487d      	ldr	r0, [pc, #500]	; (8019f50 <csv_update+0x204>)
 8019d5c:	f7ee ff4a 	bl	8008bf4 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 8019d60:	463b      	mov	r3, r7
 8019d62:	2200      	movs	r2, #0
 8019d64:	4619      	mov	r1, r3
 8019d66:	487a      	ldr	r0, [pc, #488]	; (8019f50 <csv_update+0x204>)
 8019d68:	f7ee fe62 	bl	8008a30 <HAL_RTC_GetTime>
	fresult1 = Mount_SD("/");
 8019d6c:	4879      	ldr	r0, [pc, #484]	; (8019f54 <csv_update+0x208>)
 8019d6e:	f7ff fcc7 	bl	8019700 <Mount_SD>
 8019d72:	4603      	mov	r3, r0
 8019d74:	461a      	mov	r2, r3
 8019d76:	4b78      	ldr	r3, [pc, #480]	; (8019f58 <csv_update+0x20c>)
 8019d78:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 8019d7a:	4b77      	ldr	r3, [pc, #476]	; (8019f58 <csv_update+0x20c>)
 8019d7c:	781b      	ldrb	r3, [r3, #0]
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	f040 80e2 	bne.w	8019f48 <csv_update+0x1fc>
//		sprintf(buffer, "\n");
//		Update_File(filename_with_format, buffer);



		sprintf(buffer, "TF241_%s ,", ver_GetUid());
 8019d84:	f7e7 ff9e 	bl	8001cc4 <ver_GetUid>
 8019d88:	4603      	mov	r3, r0
 8019d8a:	461a      	mov	r2, r3
 8019d8c:	4973      	ldr	r1, [pc, #460]	; (8019f5c <csv_update+0x210>)
 8019d8e:	4874      	ldr	r0, [pc, #464]	; (8019f60 <csv_update+0x214>)
 8019d90:	f002 f8c0 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 8019d94:	4972      	ldr	r1, [pc, #456]	; (8019f60 <csv_update+0x214>)
 8019d96:	4873      	ldr	r0, [pc, #460]	; (8019f64 <csv_update+0x218>)
 8019d98:	f7ff fdb6 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019d9c:	22ff      	movs	r2, #255	; 0xff
 8019d9e:	2100      	movs	r1, #0
 8019da0:	486f      	ldr	r0, [pc, #444]	; (8019f60 <csv_update+0x214>)
 8019da2:	f001 f8b1 	bl	801af08 <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.id);
 8019da6:	4a70      	ldr	r2, [pc, #448]	; (8019f68 <csv_update+0x21c>)
 8019da8:	4970      	ldr	r1, [pc, #448]	; (8019f6c <csv_update+0x220>)
 8019daa:	486d      	ldr	r0, [pc, #436]	; (8019f60 <csv_update+0x214>)
 8019dac:	f002 f8b2 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 8019db0:	496b      	ldr	r1, [pc, #428]	; (8019f60 <csv_update+0x214>)
 8019db2:	486c      	ldr	r0, [pc, #432]	; (8019f64 <csv_update+0x218>)
 8019db4:	f7ff fda8 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019db8:	22ff      	movs	r2, #255	; 0xff
 8019dba:	2100      	movs	r1, #0
 8019dbc:	4868      	ldr	r0, [pc, #416]	; (8019f60 <csv_update+0x214>)
 8019dbe:	f001 f8a3 	bl	801af08 <memset>
		sprintf(buffer, "%02d:%02d:%02d ,", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8019dc2:	783b      	ldrb	r3, [r7, #0]
 8019dc4:	461a      	mov	r2, r3
 8019dc6:	787b      	ldrb	r3, [r7, #1]
 8019dc8:	4619      	mov	r1, r3
 8019dca:	78bb      	ldrb	r3, [r7, #2]
 8019dcc:	9300      	str	r3, [sp, #0]
 8019dce:	460b      	mov	r3, r1
 8019dd0:	4967      	ldr	r1, [pc, #412]	; (8019f70 <csv_update+0x224>)
 8019dd2:	4863      	ldr	r0, [pc, #396]	; (8019f60 <csv_update+0x214>)
 8019dd4:	f002 f89e 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 8019dd8:	4961      	ldr	r1, [pc, #388]	; (8019f60 <csv_update+0x214>)
 8019dda:	4862      	ldr	r0, [pc, #392]	; (8019f64 <csv_update+0x218>)
 8019ddc:	f7ff fd94 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019de0:	22ff      	movs	r2, #255	; 0xff
 8019de2:	2100      	movs	r1, #0
 8019de4:	485e      	ldr	r0, [pc, #376]	; (8019f60 <csv_update+0x214>)
 8019de6:	f001 f88f 	bl	801af08 <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.location);
 8019dea:	4a62      	ldr	r2, [pc, #392]	; (8019f74 <csv_update+0x228>)
 8019dec:	495f      	ldr	r1, [pc, #380]	; (8019f6c <csv_update+0x220>)
 8019dee:	485c      	ldr	r0, [pc, #368]	; (8019f60 <csv_update+0x214>)
 8019df0:	f002 f890 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 8019df4:	495a      	ldr	r1, [pc, #360]	; (8019f60 <csv_update+0x214>)
 8019df6:	485b      	ldr	r0, [pc, #364]	; (8019f64 <csv_update+0x218>)
 8019df8:	f7ff fd86 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019dfc:	22ff      	movs	r2, #255	; 0xff
 8019dfe:	2100      	movs	r1, #0
 8019e00:	4857      	ldr	r0, [pc, #348]	; (8019f60 <csv_update+0x214>)
 8019e02:	f001 f881 	bl	801af08 <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.name);
 8019e06:	4a5c      	ldr	r2, [pc, #368]	; (8019f78 <csv_update+0x22c>)
 8019e08:	4958      	ldr	r1, [pc, #352]	; (8019f6c <csv_update+0x220>)
 8019e0a:	4855      	ldr	r0, [pc, #340]	; (8019f60 <csv_update+0x214>)
 8019e0c:	f002 f882 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 8019e10:	4953      	ldr	r1, [pc, #332]	; (8019f60 <csv_update+0x214>)
 8019e12:	4854      	ldr	r0, [pc, #336]	; (8019f64 <csv_update+0x218>)
 8019e14:	f7ff fd78 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019e18:	22ff      	movs	r2, #255	; 0xff
 8019e1a:	2100      	movs	r1, #0
 8019e1c:	4850      	ldr	r0, [pc, #320]	; (8019f60 <csv_update+0x214>)
 8019e1e:	f001 f873 	bl	801af08 <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.group);
 8019e22:	4a56      	ldr	r2, [pc, #344]	; (8019f7c <csv_update+0x230>)
 8019e24:	4951      	ldr	r1, [pc, #324]	; (8019f6c <csv_update+0x220>)
 8019e26:	484e      	ldr	r0, [pc, #312]	; (8019f60 <csv_update+0x214>)
 8019e28:	f002 f874 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 8019e2c:	494c      	ldr	r1, [pc, #304]	; (8019f60 <csv_update+0x214>)
 8019e2e:	484d      	ldr	r0, [pc, #308]	; (8019f64 <csv_update+0x218>)
 8019e30:	f7ff fd6a 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019e34:	22ff      	movs	r2, #255	; 0xff
 8019e36:	2100      	movs	r1, #0
 8019e38:	4849      	ldr	r0, [pc, #292]	; (8019f60 <csv_update+0x214>)
 8019e3a:	f001 f865 	bl	801af08 <memset>
		sprintf(buffer, "%d ,", _RunTime_Packet.co2);
 8019e3e:	4b50      	ldr	r3, [pc, #320]	; (8019f80 <csv_update+0x234>)
 8019e40:	881b      	ldrh	r3, [r3, #0]
 8019e42:	461a      	mov	r2, r3
 8019e44:	494f      	ldr	r1, [pc, #316]	; (8019f84 <csv_update+0x238>)
 8019e46:	4846      	ldr	r0, [pc, #280]	; (8019f60 <csv_update+0x214>)
 8019e48:	f002 f864 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 8019e4c:	4944      	ldr	r1, [pc, #272]	; (8019f60 <csv_update+0x214>)
 8019e4e:	4845      	ldr	r0, [pc, #276]	; (8019f64 <csv_update+0x218>)
 8019e50:	f7ff fd5a 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019e54:	22ff      	movs	r2, #255	; 0xff
 8019e56:	2100      	movs	r1, #0
 8019e58:	4841      	ldr	r0, [pc, #260]	; (8019f60 <csv_update+0x214>)
 8019e5a:	f001 f855 	bl	801af08 <memset>
		sprintf(buffer, "%ld ,", _RunTime_Packet.temperature);
 8019e5e:	4b48      	ldr	r3, [pc, #288]	; (8019f80 <csv_update+0x234>)
 8019e60:	685b      	ldr	r3, [r3, #4]
 8019e62:	461a      	mov	r2, r3
 8019e64:	4948      	ldr	r1, [pc, #288]	; (8019f88 <csv_update+0x23c>)
 8019e66:	483e      	ldr	r0, [pc, #248]	; (8019f60 <csv_update+0x214>)
 8019e68:	f002 f854 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 8019e6c:	493c      	ldr	r1, [pc, #240]	; (8019f60 <csv_update+0x214>)
 8019e6e:	483d      	ldr	r0, [pc, #244]	; (8019f64 <csv_update+0x218>)
 8019e70:	f7ff fd4a 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019e74:	22ff      	movs	r2, #255	; 0xff
 8019e76:	2100      	movs	r1, #0
 8019e78:	4839      	ldr	r0, [pc, #228]	; (8019f60 <csv_update+0x214>)
 8019e7a:	f001 f845 	bl	801af08 <memset>
		sprintf(buffer, "%ld ,",  _RunTime_Packet.humidity);
 8019e7e:	4b40      	ldr	r3, [pc, #256]	; (8019f80 <csv_update+0x234>)
 8019e80:	689b      	ldr	r3, [r3, #8]
 8019e82:	461a      	mov	r2, r3
 8019e84:	4940      	ldr	r1, [pc, #256]	; (8019f88 <csv_update+0x23c>)
 8019e86:	4836      	ldr	r0, [pc, #216]	; (8019f60 <csv_update+0x214>)
 8019e88:	f002 f844 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 8019e8c:	4934      	ldr	r1, [pc, #208]	; (8019f60 <csv_update+0x214>)
 8019e8e:	4835      	ldr	r0, [pc, #212]	; (8019f64 <csv_update+0x218>)
 8019e90:	f7ff fd3a 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019e94:	22ff      	movs	r2, #255	; 0xff
 8019e96:	2100      	movs	r1, #0
 8019e98:	4831      	ldr	r0, [pc, #196]	; (8019f60 <csv_update+0x214>)
 8019e9a:	f001 f835 	bl	801af08 <memset>
		sprintf(buffer, "%s ,", _RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 8019e9e:	4b38      	ldr	r3, [pc, #224]	; (8019f80 <csv_update+0x234>)
 8019ea0:	7b1b      	ldrb	r3, [r3, #12]
 8019ea2:	2b01      	cmp	r3, #1
 8019ea4:	d101      	bne.n	8019eaa <csv_update+0x15e>
 8019ea6:	4b39      	ldr	r3, [pc, #228]	; (8019f8c <csv_update+0x240>)
 8019ea8:	e000      	b.n	8019eac <csv_update+0x160>
 8019eaa:	4b39      	ldr	r3, [pc, #228]	; (8019f90 <csv_update+0x244>)
 8019eac:	461a      	mov	r2, r3
 8019eae:	492f      	ldr	r1, [pc, #188]	; (8019f6c <csv_update+0x220>)
 8019eb0:	482b      	ldr	r0, [pc, #172]	; (8019f60 <csv_update+0x214>)
 8019eb2:	f002 f82f 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 8019eb6:	492a      	ldr	r1, [pc, #168]	; (8019f60 <csv_update+0x214>)
 8019eb8:	482a      	ldr	r0, [pc, #168]	; (8019f64 <csv_update+0x218>)
 8019eba:	f7ff fd25 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019ebe:	22ff      	movs	r2, #255	; 0xff
 8019ec0:	2100      	movs	r1, #0
 8019ec2:	4827      	ldr	r0, [pc, #156]	; (8019f60 <csv_update+0x214>)
 8019ec4:	f001 f820 	bl	801af08 <memset>
		sprintf(buffer, "%.02f ,", _RunTime_Packet.pm2_5);
 8019ec8:	4b2d      	ldr	r3, [pc, #180]	; (8019f80 <csv_update+0x234>)
 8019eca:	695b      	ldr	r3, [r3, #20]
 8019ecc:	4618      	mov	r0, r3
 8019ece:	f7e6 fb53 	bl	8000578 <__aeabi_f2d>
 8019ed2:	4602      	mov	r2, r0
 8019ed4:	460b      	mov	r3, r1
 8019ed6:	492f      	ldr	r1, [pc, #188]	; (8019f94 <csv_update+0x248>)
 8019ed8:	4821      	ldr	r0, [pc, #132]	; (8019f60 <csv_update+0x214>)
 8019eda:	f002 f81b 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 8019ede:	4920      	ldr	r1, [pc, #128]	; (8019f60 <csv_update+0x214>)
 8019ee0:	4820      	ldr	r0, [pc, #128]	; (8019f64 <csv_update+0x218>)
 8019ee2:	f7ff fd11 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019ee6:	22ff      	movs	r2, #255	; 0xff
 8019ee8:	2100      	movs	r1, #0
 8019eea:	481d      	ldr	r0, [pc, #116]	; (8019f60 <csv_update+0x214>)
 8019eec:	f001 f80c 	bl	801af08 <memset>
		sprintf(buffer, "NONE ,");
 8019ef0:	4929      	ldr	r1, [pc, #164]	; (8019f98 <csv_update+0x24c>)
 8019ef2:	481b      	ldr	r0, [pc, #108]	; (8019f60 <csv_update+0x214>)
 8019ef4:	f002 f80e 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 8019ef8:	4919      	ldr	r1, [pc, #100]	; (8019f60 <csv_update+0x214>)
 8019efa:	481a      	ldr	r0, [pc, #104]	; (8019f64 <csv_update+0x218>)
 8019efc:	f7ff fd04 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019f00:	22ff      	movs	r2, #255	; 0xff
 8019f02:	2100      	movs	r1, #0
 8019f04:	4816      	ldr	r0, [pc, #88]	; (8019f60 <csv_update+0x214>)
 8019f06:	f000 ffff 	bl	801af08 <memset>
		sprintf(buffer, "%.02f ,", _RunTime_Packet.battery_voltage);
 8019f0a:	4b1d      	ldr	r3, [pc, #116]	; (8019f80 <csv_update+0x234>)
 8019f0c:	6a1b      	ldr	r3, [r3, #32]
 8019f0e:	4618      	mov	r0, r3
 8019f10:	f7e6 fb32 	bl	8000578 <__aeabi_f2d>
 8019f14:	4602      	mov	r2, r0
 8019f16:	460b      	mov	r3, r1
 8019f18:	491e      	ldr	r1, [pc, #120]	; (8019f94 <csv_update+0x248>)
 8019f1a:	4811      	ldr	r0, [pc, #68]	; (8019f60 <csv_update+0x214>)
 8019f1c:	f001 fffa 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 8019f20:	490f      	ldr	r1, [pc, #60]	; (8019f60 <csv_update+0x214>)
 8019f22:	4810      	ldr	r0, [pc, #64]	; (8019f64 <csv_update+0x218>)
 8019f24:	f7ff fcf0 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019f28:	22ff      	movs	r2, #255	; 0xff
 8019f2a:	2100      	movs	r1, #0
 8019f2c:	480c      	ldr	r0, [pc, #48]	; (8019f60 <csv_update+0x214>)
 8019f2e:	f000 ffeb 	bl	801af08 <memset>
		sprintf(buffer, "\n");
 8019f32:	491a      	ldr	r1, [pc, #104]	; (8019f9c <csv_update+0x250>)
 8019f34:	480a      	ldr	r0, [pc, #40]	; (8019f60 <csv_update+0x214>)
 8019f36:	f001 ffed 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 8019f3a:	4909      	ldr	r1, [pc, #36]	; (8019f60 <csv_update+0x214>)
 8019f3c:	4809      	ldr	r0, [pc, #36]	; (8019f64 <csv_update+0x218>)
 8019f3e:	f7ff fce3 	bl	8019908 <Update_File>

		Unmount_SD("/");
 8019f42:	4804      	ldr	r0, [pc, #16]	; (8019f54 <csv_update+0x208>)
 8019f44:	f7ff fc08 	bl	8019758 <Unmount_SD>
	}
}
 8019f48:	bf00      	nop
 8019f4a:	3718      	adds	r7, #24
 8019f4c:	46bd      	mov	sp, r7
 8019f4e:	bd80      	pop	{r7, pc}
 8019f50:	200017bc 	.word	0x200017bc
 8019f54:	08020ff0 	.word	0x08020ff0
 8019f58:	2000223c 	.word	0x2000223c
 8019f5c:	08021108 	.word	0x08021108
 8019f60:	200022a8 	.word	0x200022a8
 8019f64:	20002240 	.word	0x20002240
 8019f68:	200013a1 	.word	0x200013a1
 8019f6c:	08021114 	.word	0x08021114
 8019f70:	0802111c 	.word	0x0802111c
 8019f74:	200013d3 	.word	0x200013d3
 8019f78:	20001405 	.word	0x20001405
 8019f7c:	20001437 	.word	0x20001437
 8019f80:	2000146c 	.word	0x2000146c
 8019f84:	08021130 	.word	0x08021130
 8019f88:	08021138 	.word	0x08021138
 8019f8c:	080210ac 	.word	0x080210ac
 8019f90:	080210b4 	.word	0x080210b4
 8019f94:	08021140 	.word	0x08021140
 8019f98:	08021148 	.word	0x08021148
 8019f9c:	08021150 	.word	0x08021150

08019fa0 <csv_header>:
void csv_header() {
 8019fa0:	b580      	push	{r7, lr}
 8019fa2:	af00      	add	r7, sp, #0

	fresult1 = Mount_SD("/");
 8019fa4:	485a      	ldr	r0, [pc, #360]	; (801a110 <csv_header+0x170>)
 8019fa6:	f7ff fbab 	bl	8019700 <Mount_SD>
 8019faa:	4603      	mov	r3, r0
 8019fac:	461a      	mov	r2, r3
 8019fae:	4b59      	ldr	r3, [pc, #356]	; (801a114 <csv_header+0x174>)
 8019fb0:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 8019fb2:	4b58      	ldr	r3, [pc, #352]	; (801a114 <csv_header+0x174>)
 8019fb4:	781b      	ldrb	r3, [r3, #0]
 8019fb6:	2b00      	cmp	r3, #0
 8019fb8:	f040 80a7 	bne.w	801a10a <csv_header+0x16a>
//		sprintf(buffer, " co2 , temperature , humidity ,");
//		Update_File(filename_with_format, buffer);
//		sprintf(buffer, " pir , pm2.5 , port ,battery\n\n");
//		Update_File(filename_with_format, buffer);

		sprintf(buffer, "devEUI ,");
 8019fbc:	4956      	ldr	r1, [pc, #344]	; (801a118 <csv_header+0x178>)
 8019fbe:	4857      	ldr	r0, [pc, #348]	; (801a11c <csv_header+0x17c>)
 8019fc0:	f001 ffa8 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 8019fc4:	4955      	ldr	r1, [pc, #340]	; (801a11c <csv_header+0x17c>)
 8019fc6:	4856      	ldr	r0, [pc, #344]	; (801a120 <csv_header+0x180>)
 8019fc8:	f7ff fc9e 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019fcc:	22ff      	movs	r2, #255	; 0xff
 8019fce:	2100      	movs	r1, #0
 8019fd0:	4852      	ldr	r0, [pc, #328]	; (801a11c <csv_header+0x17c>)
 8019fd2:	f000 ff99 	bl	801af08 <memset>
		sprintf(buffer, "id ,");
 8019fd6:	4953      	ldr	r1, [pc, #332]	; (801a124 <csv_header+0x184>)
 8019fd8:	4850      	ldr	r0, [pc, #320]	; (801a11c <csv_header+0x17c>)
 8019fda:	f001 ff9b 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 8019fde:	494f      	ldr	r1, [pc, #316]	; (801a11c <csv_header+0x17c>)
 8019fe0:	484f      	ldr	r0, [pc, #316]	; (801a120 <csv_header+0x180>)
 8019fe2:	f7ff fc91 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 8019fe6:	22ff      	movs	r2, #255	; 0xff
 8019fe8:	2100      	movs	r1, #0
 8019fea:	484c      	ldr	r0, [pc, #304]	; (801a11c <csv_header+0x17c>)
 8019fec:	f000 ff8c 	bl	801af08 <memset>
		sprintf(buffer, "timestamp ,");
 8019ff0:	494d      	ldr	r1, [pc, #308]	; (801a128 <csv_header+0x188>)
 8019ff2:	484a      	ldr	r0, [pc, #296]	; (801a11c <csv_header+0x17c>)
 8019ff4:	f001 ff8e 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 8019ff8:	4948      	ldr	r1, [pc, #288]	; (801a11c <csv_header+0x17c>)
 8019ffa:	4849      	ldr	r0, [pc, #292]	; (801a120 <csv_header+0x180>)
 8019ffc:	f7ff fc84 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a000:	22ff      	movs	r2, #255	; 0xff
 801a002:	2100      	movs	r1, #0
 801a004:	4845      	ldr	r0, [pc, #276]	; (801a11c <csv_header+0x17c>)
 801a006:	f000 ff7f 	bl	801af08 <memset>
		sprintf(buffer, "location ,");
 801a00a:	4948      	ldr	r1, [pc, #288]	; (801a12c <csv_header+0x18c>)
 801a00c:	4843      	ldr	r0, [pc, #268]	; (801a11c <csv_header+0x17c>)
 801a00e:	f001 ff81 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 801a012:	4942      	ldr	r1, [pc, #264]	; (801a11c <csv_header+0x17c>)
 801a014:	4842      	ldr	r0, [pc, #264]	; (801a120 <csv_header+0x180>)
 801a016:	f7ff fc77 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a01a:	22ff      	movs	r2, #255	; 0xff
 801a01c:	2100      	movs	r1, #0
 801a01e:	483f      	ldr	r0, [pc, #252]	; (801a11c <csv_header+0x17c>)
 801a020:	f000 ff72 	bl	801af08 <memset>
		sprintf(buffer, "name ,");
 801a024:	4942      	ldr	r1, [pc, #264]	; (801a130 <csv_header+0x190>)
 801a026:	483d      	ldr	r0, [pc, #244]	; (801a11c <csv_header+0x17c>)
 801a028:	f001 ff74 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 801a02c:	493b      	ldr	r1, [pc, #236]	; (801a11c <csv_header+0x17c>)
 801a02e:	483c      	ldr	r0, [pc, #240]	; (801a120 <csv_header+0x180>)
 801a030:	f7ff fc6a 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a034:	22ff      	movs	r2, #255	; 0xff
 801a036:	2100      	movs	r1, #0
 801a038:	4838      	ldr	r0, [pc, #224]	; (801a11c <csv_header+0x17c>)
 801a03a:	f000 ff65 	bl	801af08 <memset>
		sprintf(buffer, "group ,");
 801a03e:	493d      	ldr	r1, [pc, #244]	; (801a134 <csv_header+0x194>)
 801a040:	4836      	ldr	r0, [pc, #216]	; (801a11c <csv_header+0x17c>)
 801a042:	f001 ff67 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 801a046:	4935      	ldr	r1, [pc, #212]	; (801a11c <csv_header+0x17c>)
 801a048:	4835      	ldr	r0, [pc, #212]	; (801a120 <csv_header+0x180>)
 801a04a:	f7ff fc5d 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a04e:	22ff      	movs	r2, #255	; 0xff
 801a050:	2100      	movs	r1, #0
 801a052:	4832      	ldr	r0, [pc, #200]	; (801a11c <csv_header+0x17c>)
 801a054:	f000 ff58 	bl	801af08 <memset>
		sprintf(buffer, "co2 ,");
 801a058:	4937      	ldr	r1, [pc, #220]	; (801a138 <csv_header+0x198>)
 801a05a:	4830      	ldr	r0, [pc, #192]	; (801a11c <csv_header+0x17c>)
 801a05c:	f001 ff5a 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 801a060:	492e      	ldr	r1, [pc, #184]	; (801a11c <csv_header+0x17c>)
 801a062:	482f      	ldr	r0, [pc, #188]	; (801a120 <csv_header+0x180>)
 801a064:	f7ff fc50 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a068:	22ff      	movs	r2, #255	; 0xff
 801a06a:	2100      	movs	r1, #0
 801a06c:	482b      	ldr	r0, [pc, #172]	; (801a11c <csv_header+0x17c>)
 801a06e:	f000 ff4b 	bl	801af08 <memset>
		sprintf(buffer, "temperature ,");
 801a072:	4932      	ldr	r1, [pc, #200]	; (801a13c <csv_header+0x19c>)
 801a074:	4829      	ldr	r0, [pc, #164]	; (801a11c <csv_header+0x17c>)
 801a076:	f001 ff4d 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 801a07a:	4928      	ldr	r1, [pc, #160]	; (801a11c <csv_header+0x17c>)
 801a07c:	4828      	ldr	r0, [pc, #160]	; (801a120 <csv_header+0x180>)
 801a07e:	f7ff fc43 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a082:	22ff      	movs	r2, #255	; 0xff
 801a084:	2100      	movs	r1, #0
 801a086:	4825      	ldr	r0, [pc, #148]	; (801a11c <csv_header+0x17c>)
 801a088:	f000 ff3e 	bl	801af08 <memset>
		sprintf(buffer, "humidity ,");
 801a08c:	492c      	ldr	r1, [pc, #176]	; (801a140 <csv_header+0x1a0>)
 801a08e:	4823      	ldr	r0, [pc, #140]	; (801a11c <csv_header+0x17c>)
 801a090:	f001 ff40 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 801a094:	4921      	ldr	r1, [pc, #132]	; (801a11c <csv_header+0x17c>)
 801a096:	4822      	ldr	r0, [pc, #136]	; (801a120 <csv_header+0x180>)
 801a098:	f7ff fc36 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a09c:	22ff      	movs	r2, #255	; 0xff
 801a09e:	2100      	movs	r1, #0
 801a0a0:	481e      	ldr	r0, [pc, #120]	; (801a11c <csv_header+0x17c>)
 801a0a2:	f000 ff31 	bl	801af08 <memset>
		sprintf(buffer, "pir ,");
 801a0a6:	4927      	ldr	r1, [pc, #156]	; (801a144 <csv_header+0x1a4>)
 801a0a8:	481c      	ldr	r0, [pc, #112]	; (801a11c <csv_header+0x17c>)
 801a0aa:	f001 ff33 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 801a0ae:	491b      	ldr	r1, [pc, #108]	; (801a11c <csv_header+0x17c>)
 801a0b0:	481b      	ldr	r0, [pc, #108]	; (801a120 <csv_header+0x180>)
 801a0b2:	f7ff fc29 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a0b6:	22ff      	movs	r2, #255	; 0xff
 801a0b8:	2100      	movs	r1, #0
 801a0ba:	4818      	ldr	r0, [pc, #96]	; (801a11c <csv_header+0x17c>)
 801a0bc:	f000 ff24 	bl	801af08 <memset>
		sprintf(buffer, "pm2.5 ,");
 801a0c0:	4921      	ldr	r1, [pc, #132]	; (801a148 <csv_header+0x1a8>)
 801a0c2:	4816      	ldr	r0, [pc, #88]	; (801a11c <csv_header+0x17c>)
 801a0c4:	f001 ff26 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 801a0c8:	4914      	ldr	r1, [pc, #80]	; (801a11c <csv_header+0x17c>)
 801a0ca:	4815      	ldr	r0, [pc, #84]	; (801a120 <csv_header+0x180>)
 801a0cc:	f7ff fc1c 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a0d0:	22ff      	movs	r2, #255	; 0xff
 801a0d2:	2100      	movs	r1, #0
 801a0d4:	4811      	ldr	r0, [pc, #68]	; (801a11c <csv_header+0x17c>)
 801a0d6:	f000 ff17 	bl	801af08 <memset>
		sprintf(buffer, "port ,");
 801a0da:	491c      	ldr	r1, [pc, #112]	; (801a14c <csv_header+0x1ac>)
 801a0dc:	480f      	ldr	r0, [pc, #60]	; (801a11c <csv_header+0x17c>)
 801a0de:	f001 ff19 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 801a0e2:	490e      	ldr	r1, [pc, #56]	; (801a11c <csv_header+0x17c>)
 801a0e4:	480e      	ldr	r0, [pc, #56]	; (801a120 <csv_header+0x180>)
 801a0e6:	f7ff fc0f 	bl	8019908 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a0ea:	22ff      	movs	r2, #255	; 0xff
 801a0ec:	2100      	movs	r1, #0
 801a0ee:	480b      	ldr	r0, [pc, #44]	; (801a11c <csv_header+0x17c>)
 801a0f0:	f000 ff0a 	bl	801af08 <memset>
		sprintf(buffer, "battery \n\n");
 801a0f4:	4916      	ldr	r1, [pc, #88]	; (801a150 <csv_header+0x1b0>)
 801a0f6:	4809      	ldr	r0, [pc, #36]	; (801a11c <csv_header+0x17c>)
 801a0f8:	f001 ff0c 	bl	801bf14 <siprintf>
		Update_File(filename_with_format, buffer);
 801a0fc:	4907      	ldr	r1, [pc, #28]	; (801a11c <csv_header+0x17c>)
 801a0fe:	4808      	ldr	r0, [pc, #32]	; (801a120 <csv_header+0x180>)
 801a100:	f7ff fc02 	bl	8019908 <Update_File>

		Unmount_SD("/");
 801a104:	4802      	ldr	r0, [pc, #8]	; (801a110 <csv_header+0x170>)
 801a106:	f7ff fb27 	bl	8019758 <Unmount_SD>
	}
}
 801a10a:	bf00      	nop
 801a10c:	bd80      	pop	{r7, pc}
 801a10e:	bf00      	nop
 801a110:	08020ff0 	.word	0x08020ff0
 801a114:	2000223c 	.word	0x2000223c
 801a118:	08021154 	.word	0x08021154
 801a11c:	200022a8 	.word	0x200022a8
 801a120:	20002240 	.word	0x20002240
 801a124:	08021160 	.word	0x08021160
 801a128:	08021168 	.word	0x08021168
 801a12c:	08021174 	.word	0x08021174
 801a130:	08021180 	.word	0x08021180
 801a134:	08021188 	.word	0x08021188
 801a138:	08021190 	.word	0x08021190
 801a13c:	08021198 	.word	0x08021198
 801a140:	080211a8 	.word	0x080211a8
 801a144:	080211b4 	.word	0x080211b4
 801a148:	080211bc 	.word	0x080211bc
 801a14c:	080211c4 	.word	0x080211c4
 801a150:	080211cc 	.word	0x080211cc

0801a154 <filesaving_process>:
void filesaving_process() {
 801a154:	b580      	push	{r7, lr}
 801a156:	af00      	add	r7, sp, #0
	memset(buffer,0,sizeof(buffer));
 801a158:	22ff      	movs	r2, #255	; 0xff
 801a15a:	2100      	movs	r1, #0
 801a15c:	4807      	ldr	r0, [pc, #28]	; (801a17c <filesaving_process+0x28>)
 801a15e:	f000 fed3 	bl	801af08 <memset>
	if (_RunTime_Packet.fileformat_selection) {
 801a162:	4b07      	ldr	r3, [pc, #28]	; (801a180 <filesaving_process+0x2c>)
 801a164:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801a168:	2b00      	cmp	r3, #0
 801a16a:	d002      	beq.n	801a172 <filesaving_process+0x1e>
		csv_update();
 801a16c:	f7ff fdee 	bl	8019d4c <csv_update>
	} else {
		json_update();
	}
}
 801a170:	e001      	b.n	801a176 <filesaving_process+0x22>
		json_update();
 801a172:	f7ff fca1 	bl	8019ab8 <json_update>
}
 801a176:	bf00      	nop
 801a178:	bd80      	pop	{r7, pc}
 801a17a:	bf00      	nop
 801a17c:	200022a8 	.word	0x200022a8
 801a180:	2000146c 	.word	0x2000146c

0801a184 <createfile>:
int8_t createfile(char *filename, char *fileformat) {
 801a184:	b580      	push	{r7, lr}
 801a186:	b08c      	sub	sp, #48	; 0x30
 801a188:	af04      	add	r7, sp, #16
 801a18a:	6078      	str	r0, [r7, #4]
 801a18c:	6039      	str	r1, [r7, #0]
	if (Mount_SD("/") == FR_OK) {
 801a18e:	482b      	ldr	r0, [pc, #172]	; (801a23c <createfile+0xb8>)
 801a190:	f7ff fab6 	bl	8019700 <Mount_SD>
 801a194:	4603      	mov	r3, r0
 801a196:	2b00      	cmp	r3, #0
 801a198:	d002      	beq.n	801a1a0 <createfile+0x1c>
	} else {

		return -1;
 801a19a:	f04f 33ff 	mov.w	r3, #4294967295
 801a19e:	e049      	b.n	801a234 <createfile+0xb0>
	}
	Unmount_SD("/");
 801a1a0:	4826      	ldr	r0, [pc, #152]	; (801a23c <createfile+0xb8>)
 801a1a2:	f7ff fad9 	bl	8019758 <Unmount_SD>

	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801a1a6:	f107 031c 	add.w	r3, r7, #28
 801a1aa:	2200      	movs	r2, #0
 801a1ac:	4619      	mov	r1, r3
 801a1ae:	4824      	ldr	r0, [pc, #144]	; (801a240 <createfile+0xbc>)
 801a1b0:	f7ee fd20 	bl	8008bf4 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801a1b4:	f107 0308 	add.w	r3, r7, #8
 801a1b8:	2200      	movs	r2, #0
 801a1ba:	4619      	mov	r1, r3
 801a1bc:	4820      	ldr	r0, [pc, #128]	; (801a240 <createfile+0xbc>)
 801a1be:	f7ee fc37 	bl	8008a30 <HAL_RTC_GetTime>

	fresult1 = Mount_SD("/");
 801a1c2:	481e      	ldr	r0, [pc, #120]	; (801a23c <createfile+0xb8>)
 801a1c4:	f7ff fa9c 	bl	8019700 <Mount_SD>
 801a1c8:	4603      	mov	r3, r0
 801a1ca:	461a      	mov	r2, r3
 801a1cc:	4b1d      	ldr	r3, [pc, #116]	; (801a244 <createfile+0xc0>)
 801a1ce:	701a      	strb	r2, [r3, #0]
	if (fresult1 == FR_OK) {
 801a1d0:	4b1c      	ldr	r3, [pc, #112]	; (801a244 <createfile+0xc0>)
 801a1d2:	781b      	ldrb	r3, [r3, #0]
 801a1d4:	2b00      	cmp	r3, #0
 801a1d6:	d129      	bne.n	801a22c <createfile+0xa8>

		sprintf(filename_with_format, "%s_%02d-%02d-%02d%s", filename,
				sDate.Year, sDate.Month, sDate.Date, fileformat);
 801a1d8:	7ffb      	ldrb	r3, [r7, #31]
		sprintf(filename_with_format, "%s_%02d-%02d-%02d%s", filename,
 801a1da:	4618      	mov	r0, r3
				sDate.Year, sDate.Month, sDate.Date, fileformat);
 801a1dc:	7f7b      	ldrb	r3, [r7, #29]
		sprintf(filename_with_format, "%s_%02d-%02d-%02d%s", filename,
 801a1de:	461a      	mov	r2, r3
				sDate.Year, sDate.Month, sDate.Date, fileformat);
 801a1e0:	7fbb      	ldrb	r3, [r7, #30]
		sprintf(filename_with_format, "%s_%02d-%02d-%02d%s", filename,
 801a1e2:	4619      	mov	r1, r3
 801a1e4:	683b      	ldr	r3, [r7, #0]
 801a1e6:	9302      	str	r3, [sp, #8]
 801a1e8:	9101      	str	r1, [sp, #4]
 801a1ea:	9200      	str	r2, [sp, #0]
 801a1ec:	4603      	mov	r3, r0
 801a1ee:	687a      	ldr	r2, [r7, #4]
 801a1f0:	4915      	ldr	r1, [pc, #84]	; (801a248 <createfile+0xc4>)
 801a1f2:	4816      	ldr	r0, [pc, #88]	; (801a24c <createfile+0xc8>)
 801a1f4:	f001 fe8e 	bl	801bf14 <siprintf>

		fresult1 = Create_File(filename_with_format);
 801a1f8:	4814      	ldr	r0, [pc, #80]	; (801a24c <createfile+0xc8>)
 801a1fa:	f7ff fad5 	bl	80197a8 <Create_File>
 801a1fe:	4603      	mov	r3, r0
 801a200:	461a      	mov	r2, r3
 801a202:	4b10      	ldr	r3, [pc, #64]	; (801a244 <createfile+0xc0>)
 801a204:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801a206:	480d      	ldr	r0, [pc, #52]	; (801a23c <createfile+0xb8>)
 801a208:	f7ff faa6 	bl	8019758 <Unmount_SD>

		if (_RunTime_Packet.fileformat_selection) {
 801a20c:	4b10      	ldr	r3, [pc, #64]	; (801a250 <createfile+0xcc>)
 801a20e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801a212:	2b00      	cmp	r3, #0
 801a214:	d00d      	beq.n	801a232 <createfile+0xae>
			if (file_already_exist) {
 801a216:	4b0f      	ldr	r3, [pc, #60]	; (801a254 <createfile+0xd0>)
 801a218:	781b      	ldrb	r3, [r3, #0]
 801a21a:	2b00      	cmp	r3, #0
 801a21c:	d003      	beq.n	801a226 <createfile+0xa2>
				file_already_exist = 0;
 801a21e:	4b0d      	ldr	r3, [pc, #52]	; (801a254 <createfile+0xd0>)
 801a220:	2200      	movs	r2, #0
 801a222:	701a      	strb	r2, [r3, #0]
 801a224:	e005      	b.n	801a232 <createfile+0xae>
			} else {
				csv_header();  //json does not require an header only csv
 801a226:	f7ff febb 	bl	8019fa0 <csv_header>
 801a22a:	e002      	b.n	801a232 <createfile+0xae>
			}
		}

	} else {
		return -1;
 801a22c:	f04f 33ff 	mov.w	r3, #4294967295
 801a230:	e000      	b.n	801a234 <createfile+0xb0>
	}

	return 0;
 801a232:	2300      	movs	r3, #0
}
 801a234:	4618      	mov	r0, r3
 801a236:	3720      	adds	r7, #32
 801a238:	46bd      	mov	sp, r7
 801a23a:	bd80      	pop	{r7, pc}
 801a23c:	08020ff0 	.word	0x08020ff0
 801a240:	200017bc 	.word	0x200017bc
 801a244:	2000223c 	.word	0x2000223c
 801a248:	080211d8 	.word	0x080211d8
 801a24c:	20002240 	.word	0x20002240
 801a250:	2000146c 	.word	0x2000146c
 801a254:	200022a4 	.word	0x200022a4

0801a258 <MX_USB_DEVICE_DeInit>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_DeInit(void)
{
 801a258:	b580      	push	{r7, lr}
 801a25a:	af00      	add	r7, sp, #0

	USBD_MSC_DeInit(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS);
 801a25c:	4905      	ldr	r1, [pc, #20]	; (801a274 <MX_USB_DEVICE_DeInit+0x1c>)
 801a25e:	4806      	ldr	r0, [pc, #24]	; (801a278 <MX_USB_DEVICE_DeInit+0x20>)
 801a260:	f7f9 f88a 	bl	8013378 <USBD_MSC_DeInit>
	USBD_Stop(&hUsbDeviceFS);
 801a264:	4804      	ldr	r0, [pc, #16]	; (801a278 <MX_USB_DEVICE_DeInit+0x20>)
 801a266:	f7fb f854 	bl	8015312 <USBD_Stop>
	USBD_DeInit(&hUsbDeviceFS);
 801a26a:	4803      	ldr	r0, [pc, #12]	; (801a278 <MX_USB_DEVICE_DeInit+0x20>)
 801a26c:	f7fa ffdf 	bl	801522e <USBD_DeInit>

}
 801a270:	bf00      	nop
 801a272:	bd80      	pop	{r7, pc}
 801a274:	20000120 	.word	0x20000120
 801a278:	200023a8 	.word	0x200023a8

0801a27c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801a27c:	b580      	push	{r7, lr}
 801a27e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801a280:	2200      	movs	r2, #0
 801a282:	4912      	ldr	r1, [pc, #72]	; (801a2cc <MX_USB_DEVICE_Init+0x50>)
 801a284:	4812      	ldr	r0, [pc, #72]	; (801a2d0 <MX_USB_DEVICE_Init+0x54>)
 801a286:	f7fa ffa2 	bl	80151ce <USBD_Init>
 801a28a:	4603      	mov	r3, r0
 801a28c:	2b00      	cmp	r3, #0
 801a28e:	d001      	beq.n	801a294 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801a290:	f7e8 fbe4 	bl	8002a5c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 801a294:	490f      	ldr	r1, [pc, #60]	; (801a2d4 <MX_USB_DEVICE_Init+0x58>)
 801a296:	480e      	ldr	r0, [pc, #56]	; (801a2d0 <MX_USB_DEVICE_Init+0x54>)
 801a298:	f7fa fff9 	bl	801528e <USBD_RegisterClass>
 801a29c:	4603      	mov	r3, r0
 801a29e:	2b00      	cmp	r3, #0
 801a2a0:	d001      	beq.n	801a2a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801a2a2:	f7e8 fbdb 	bl	8002a5c <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 801a2a6:	490c      	ldr	r1, [pc, #48]	; (801a2d8 <MX_USB_DEVICE_Init+0x5c>)
 801a2a8:	4809      	ldr	r0, [pc, #36]	; (801a2d0 <MX_USB_DEVICE_Init+0x54>)
 801a2aa:	f7f9 fa6d 	bl	8013788 <USBD_MSC_RegisterStorage>
 801a2ae:	4603      	mov	r3, r0
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	d001      	beq.n	801a2b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801a2b4:	f7e8 fbd2 	bl	8002a5c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801a2b8:	4805      	ldr	r0, [pc, #20]	; (801a2d0 <MX_USB_DEVICE_Init+0x54>)
 801a2ba:	f7fb f81e 	bl	80152fa <USBD_Start>
 801a2be:	4603      	mov	r3, r0
 801a2c0:	2b00      	cmp	r3, #0
 801a2c2:	d001      	beq.n	801a2c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801a2c4:	f7e8 fbca 	bl	8002a5c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801a2c8:	bf00      	nop
 801a2ca:	bd80      	pop	{r7, pc}
 801a2cc:	200000d0 	.word	0x200000d0
 801a2d0:	200023a8 	.word	0x200023a8
 801a2d4:	20000028 	.word	0x20000028
 801a2d8:	20000120 	.word	0x20000120

0801a2dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a2dc:	b480      	push	{r7}
 801a2de:	b083      	sub	sp, #12
 801a2e0:	af00      	add	r7, sp, #0
 801a2e2:	4603      	mov	r3, r0
 801a2e4:	6039      	str	r1, [r7, #0]
 801a2e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801a2e8:	683b      	ldr	r3, [r7, #0]
 801a2ea:	2212      	movs	r2, #18
 801a2ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801a2ee:	4b03      	ldr	r3, [pc, #12]	; (801a2fc <USBD_FS_DeviceDescriptor+0x20>)
}
 801a2f0:	4618      	mov	r0, r3
 801a2f2:	370c      	adds	r7, #12
 801a2f4:	46bd      	mov	sp, r7
 801a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2fa:	4770      	bx	lr
 801a2fc:	200000ec 	.word	0x200000ec

0801a300 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a300:	b480      	push	{r7}
 801a302:	b083      	sub	sp, #12
 801a304:	af00      	add	r7, sp, #0
 801a306:	4603      	mov	r3, r0
 801a308:	6039      	str	r1, [r7, #0]
 801a30a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801a30c:	683b      	ldr	r3, [r7, #0]
 801a30e:	2204      	movs	r2, #4
 801a310:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801a312:	4b03      	ldr	r3, [pc, #12]	; (801a320 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801a314:	4618      	mov	r0, r3
 801a316:	370c      	adds	r7, #12
 801a318:	46bd      	mov	sp, r7
 801a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a31e:	4770      	bx	lr
 801a320:	20000100 	.word	0x20000100

0801a324 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a324:	b580      	push	{r7, lr}
 801a326:	b082      	sub	sp, #8
 801a328:	af00      	add	r7, sp, #0
 801a32a:	4603      	mov	r3, r0
 801a32c:	6039      	str	r1, [r7, #0]
 801a32e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a330:	79fb      	ldrb	r3, [r7, #7]
 801a332:	2b00      	cmp	r3, #0
 801a334:	d105      	bne.n	801a342 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801a336:	683a      	ldr	r2, [r7, #0]
 801a338:	4907      	ldr	r1, [pc, #28]	; (801a358 <USBD_FS_ProductStrDescriptor+0x34>)
 801a33a:	4808      	ldr	r0, [pc, #32]	; (801a35c <USBD_FS_ProductStrDescriptor+0x38>)
 801a33c:	f7fc f9a4 	bl	8016688 <USBD_GetString>
 801a340:	e004      	b.n	801a34c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801a342:	683a      	ldr	r2, [r7, #0]
 801a344:	4904      	ldr	r1, [pc, #16]	; (801a358 <USBD_FS_ProductStrDescriptor+0x34>)
 801a346:	4805      	ldr	r0, [pc, #20]	; (801a35c <USBD_FS_ProductStrDescriptor+0x38>)
 801a348:	f7fc f99e 	bl	8016688 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a34c:	4b02      	ldr	r3, [pc, #8]	; (801a358 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801a34e:	4618      	mov	r0, r3
 801a350:	3708      	adds	r7, #8
 801a352:	46bd      	mov	sp, r7
 801a354:	bd80      	pop	{r7, pc}
 801a356:	bf00      	nop
 801a358:	20002684 	.word	0x20002684
 801a35c:	080211ec 	.word	0x080211ec

0801a360 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a360:	b580      	push	{r7, lr}
 801a362:	b082      	sub	sp, #8
 801a364:	af00      	add	r7, sp, #0
 801a366:	4603      	mov	r3, r0
 801a368:	6039      	str	r1, [r7, #0]
 801a36a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801a36c:	683a      	ldr	r2, [r7, #0]
 801a36e:	4904      	ldr	r1, [pc, #16]	; (801a380 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801a370:	4804      	ldr	r0, [pc, #16]	; (801a384 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801a372:	f7fc f989 	bl	8016688 <USBD_GetString>
  return USBD_StrDesc;
 801a376:	4b02      	ldr	r3, [pc, #8]	; (801a380 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801a378:	4618      	mov	r0, r3
 801a37a:	3708      	adds	r7, #8
 801a37c:	46bd      	mov	sp, r7
 801a37e:	bd80      	pop	{r7, pc}
 801a380:	20002684 	.word	0x20002684
 801a384:	08021200 	.word	0x08021200

0801a388 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a388:	b580      	push	{r7, lr}
 801a38a:	b082      	sub	sp, #8
 801a38c:	af00      	add	r7, sp, #0
 801a38e:	4603      	mov	r3, r0
 801a390:	6039      	str	r1, [r7, #0]
 801a392:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801a394:	683b      	ldr	r3, [r7, #0]
 801a396:	221a      	movs	r2, #26
 801a398:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801a39a:	f000 f843 	bl	801a424 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801a39e:	4b02      	ldr	r3, [pc, #8]	; (801a3a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801a3a0:	4618      	mov	r0, r3
 801a3a2:	3708      	adds	r7, #8
 801a3a4:	46bd      	mov	sp, r7
 801a3a6:	bd80      	pop	{r7, pc}
 801a3a8:	20000104 	.word	0x20000104

0801a3ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a3ac:	b580      	push	{r7, lr}
 801a3ae:	b082      	sub	sp, #8
 801a3b0:	af00      	add	r7, sp, #0
 801a3b2:	4603      	mov	r3, r0
 801a3b4:	6039      	str	r1, [r7, #0]
 801a3b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801a3b8:	79fb      	ldrb	r3, [r7, #7]
 801a3ba:	2b00      	cmp	r3, #0
 801a3bc:	d105      	bne.n	801a3ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801a3be:	683a      	ldr	r2, [r7, #0]
 801a3c0:	4907      	ldr	r1, [pc, #28]	; (801a3e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 801a3c2:	4808      	ldr	r0, [pc, #32]	; (801a3e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 801a3c4:	f7fc f960 	bl	8016688 <USBD_GetString>
 801a3c8:	e004      	b.n	801a3d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801a3ca:	683a      	ldr	r2, [r7, #0]
 801a3cc:	4904      	ldr	r1, [pc, #16]	; (801a3e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 801a3ce:	4805      	ldr	r0, [pc, #20]	; (801a3e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 801a3d0:	f7fc f95a 	bl	8016688 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a3d4:	4b02      	ldr	r3, [pc, #8]	; (801a3e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801a3d6:	4618      	mov	r0, r3
 801a3d8:	3708      	adds	r7, #8
 801a3da:	46bd      	mov	sp, r7
 801a3dc:	bd80      	pop	{r7, pc}
 801a3de:	bf00      	nop
 801a3e0:	20002684 	.word	0x20002684
 801a3e4:	08021214 	.word	0x08021214

0801a3e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a3e8:	b580      	push	{r7, lr}
 801a3ea:	b082      	sub	sp, #8
 801a3ec:	af00      	add	r7, sp, #0
 801a3ee:	4603      	mov	r3, r0
 801a3f0:	6039      	str	r1, [r7, #0]
 801a3f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a3f4:	79fb      	ldrb	r3, [r7, #7]
 801a3f6:	2b00      	cmp	r3, #0
 801a3f8:	d105      	bne.n	801a406 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801a3fa:	683a      	ldr	r2, [r7, #0]
 801a3fc:	4907      	ldr	r1, [pc, #28]	; (801a41c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801a3fe:	4808      	ldr	r0, [pc, #32]	; (801a420 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801a400:	f7fc f942 	bl	8016688 <USBD_GetString>
 801a404:	e004      	b.n	801a410 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801a406:	683a      	ldr	r2, [r7, #0]
 801a408:	4904      	ldr	r1, [pc, #16]	; (801a41c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801a40a:	4805      	ldr	r0, [pc, #20]	; (801a420 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801a40c:	f7fc f93c 	bl	8016688 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a410:	4b02      	ldr	r3, [pc, #8]	; (801a41c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801a412:	4618      	mov	r0, r3
 801a414:	3708      	adds	r7, #8
 801a416:	46bd      	mov	sp, r7
 801a418:	bd80      	pop	{r7, pc}
 801a41a:	bf00      	nop
 801a41c:	20002684 	.word	0x20002684
 801a420:	08021220 	.word	0x08021220

0801a424 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801a424:	b580      	push	{r7, lr}
 801a426:	b084      	sub	sp, #16
 801a428:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801a42a:	4b0f      	ldr	r3, [pc, #60]	; (801a468 <Get_SerialNum+0x44>)
 801a42c:	681b      	ldr	r3, [r3, #0]
 801a42e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801a430:	4b0e      	ldr	r3, [pc, #56]	; (801a46c <Get_SerialNum+0x48>)
 801a432:	681b      	ldr	r3, [r3, #0]
 801a434:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801a436:	4b0e      	ldr	r3, [pc, #56]	; (801a470 <Get_SerialNum+0x4c>)
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801a43c:	68fa      	ldr	r2, [r7, #12]
 801a43e:	687b      	ldr	r3, [r7, #4]
 801a440:	4413      	add	r3, r2
 801a442:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801a444:	68fb      	ldr	r3, [r7, #12]
 801a446:	2b00      	cmp	r3, #0
 801a448:	d009      	beq.n	801a45e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801a44a:	2208      	movs	r2, #8
 801a44c:	4909      	ldr	r1, [pc, #36]	; (801a474 <Get_SerialNum+0x50>)
 801a44e:	68f8      	ldr	r0, [r7, #12]
 801a450:	f000 f814 	bl	801a47c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801a454:	2204      	movs	r2, #4
 801a456:	4908      	ldr	r1, [pc, #32]	; (801a478 <Get_SerialNum+0x54>)
 801a458:	68b8      	ldr	r0, [r7, #8]
 801a45a:	f000 f80f 	bl	801a47c <IntToUnicode>
  }
}
 801a45e:	bf00      	nop
 801a460:	3710      	adds	r7, #16
 801a462:	46bd      	mov	sp, r7
 801a464:	bd80      	pop	{r7, pc}
 801a466:	bf00      	nop
 801a468:	1fff7a10 	.word	0x1fff7a10
 801a46c:	1fff7a14 	.word	0x1fff7a14
 801a470:	1fff7a18 	.word	0x1fff7a18
 801a474:	20000106 	.word	0x20000106
 801a478:	20000116 	.word	0x20000116

0801a47c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801a47c:	b480      	push	{r7}
 801a47e:	b087      	sub	sp, #28
 801a480:	af00      	add	r7, sp, #0
 801a482:	60f8      	str	r0, [r7, #12]
 801a484:	60b9      	str	r1, [r7, #8]
 801a486:	4613      	mov	r3, r2
 801a488:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801a48a:	2300      	movs	r3, #0
 801a48c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801a48e:	2300      	movs	r3, #0
 801a490:	75fb      	strb	r3, [r7, #23]
 801a492:	e027      	b.n	801a4e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801a494:	68fb      	ldr	r3, [r7, #12]
 801a496:	0f1b      	lsrs	r3, r3, #28
 801a498:	2b09      	cmp	r3, #9
 801a49a:	d80b      	bhi.n	801a4b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801a49c:	68fb      	ldr	r3, [r7, #12]
 801a49e:	0f1b      	lsrs	r3, r3, #28
 801a4a0:	b2da      	uxtb	r2, r3
 801a4a2:	7dfb      	ldrb	r3, [r7, #23]
 801a4a4:	005b      	lsls	r3, r3, #1
 801a4a6:	4619      	mov	r1, r3
 801a4a8:	68bb      	ldr	r3, [r7, #8]
 801a4aa:	440b      	add	r3, r1
 801a4ac:	3230      	adds	r2, #48	; 0x30
 801a4ae:	b2d2      	uxtb	r2, r2
 801a4b0:	701a      	strb	r2, [r3, #0]
 801a4b2:	e00a      	b.n	801a4ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801a4b4:	68fb      	ldr	r3, [r7, #12]
 801a4b6:	0f1b      	lsrs	r3, r3, #28
 801a4b8:	b2da      	uxtb	r2, r3
 801a4ba:	7dfb      	ldrb	r3, [r7, #23]
 801a4bc:	005b      	lsls	r3, r3, #1
 801a4be:	4619      	mov	r1, r3
 801a4c0:	68bb      	ldr	r3, [r7, #8]
 801a4c2:	440b      	add	r3, r1
 801a4c4:	3237      	adds	r2, #55	; 0x37
 801a4c6:	b2d2      	uxtb	r2, r2
 801a4c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801a4ca:	68fb      	ldr	r3, [r7, #12]
 801a4cc:	011b      	lsls	r3, r3, #4
 801a4ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801a4d0:	7dfb      	ldrb	r3, [r7, #23]
 801a4d2:	005b      	lsls	r3, r3, #1
 801a4d4:	3301      	adds	r3, #1
 801a4d6:	68ba      	ldr	r2, [r7, #8]
 801a4d8:	4413      	add	r3, r2
 801a4da:	2200      	movs	r2, #0
 801a4dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801a4de:	7dfb      	ldrb	r3, [r7, #23]
 801a4e0:	3301      	adds	r3, #1
 801a4e2:	75fb      	strb	r3, [r7, #23]
 801a4e4:	7dfa      	ldrb	r2, [r7, #23]
 801a4e6:	79fb      	ldrb	r3, [r7, #7]
 801a4e8:	429a      	cmp	r2, r3
 801a4ea:	d3d3      	bcc.n	801a494 <IntToUnicode+0x18>
  }
}
 801a4ec:	bf00      	nop
 801a4ee:	bf00      	nop
 801a4f0:	371c      	adds	r7, #28
 801a4f2:	46bd      	mov	sp, r7
 801a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4f8:	4770      	bx	lr

0801a4fa <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801a4fa:	b480      	push	{r7}
 801a4fc:	b083      	sub	sp, #12
 801a4fe:	af00      	add	r7, sp, #0
 801a500:	4603      	mov	r3, r0
 801a502:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 801a504:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801a506:	4618      	mov	r0, r3
 801a508:	370c      	adds	r7, #12
 801a50a:	46bd      	mov	sp, r7
 801a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a510:	4770      	bx	lr
	...

0801a514 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 801a514:	b580      	push	{r7, lr}
 801a516:	b08e      	sub	sp, #56	; 0x38
 801a518:	af00      	add	r7, sp, #0
 801a51a:	4603      	mov	r3, r0
 801a51c:	60b9      	str	r1, [r7, #8]
 801a51e:	607a      	str	r2, [r7, #4]
 801a520:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	  /* USER CODE BEGIN 3 */
	  HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 801a522:	23ff      	movs	r3, #255	; 0xff
 801a524:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd, &info);
 801a528:	f107 0314 	add.w	r3, r7, #20
 801a52c:	4619      	mov	r1, r3
 801a52e:	480a      	ldr	r0, [pc, #40]	; (801a558 <STORAGE_GetCapacity_FS+0x44>)
 801a530:	f7ef fbb8 	bl	8009ca4 <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 801a534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a536:	1e5a      	subs	r2, r3, #1
 801a538:	68bb      	ldr	r3, [r7, #8]
 801a53a:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 801a53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a53e:	b29a      	uxth	r2, r3
 801a540:	687b      	ldr	r3, [r7, #4]
 801a542:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 801a544:	2300      	movs	r3, #0
 801a546:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 801a54a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 801a54e:	4618      	mov	r0, r3
 801a550:	3738      	adds	r7, #56	; 0x38
 801a552:	46bd      	mov	sp, r7
 801a554:	bd80      	pop	{r7, pc}
 801a556:	bf00      	nop
 801a558:	200017dc 	.word	0x200017dc

0801a55c <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801a55c:	b480      	push	{r7}
 801a55e:	b083      	sub	sp, #12
 801a560:	af00      	add	r7, sp, #0
 801a562:	4603      	mov	r3, r0
 801a564:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 801a566:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801a568:	4618      	mov	r0, r3
 801a56a:	370c      	adds	r7, #12
 801a56c:	46bd      	mov	sp, r7
 801a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a572:	4770      	bx	lr

0801a574 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 801a574:	b480      	push	{r7}
 801a576:	b083      	sub	sp, #12
 801a578:	af00      	add	r7, sp, #0
 801a57a:	4603      	mov	r3, r0
 801a57c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 801a57e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801a580:	4618      	mov	r0, r3
 801a582:	370c      	adds	r7, #12
 801a584:	46bd      	mov	sp, r7
 801a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a58a:	4770      	bx	lr

0801a58c <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801a58c:	b580      	push	{r7, lr}
 801a58e:	b088      	sub	sp, #32
 801a590:	af02      	add	r7, sp, #8
 801a592:	60b9      	str	r1, [r7, #8]
 801a594:	607a      	str	r2, [r7, #4]
 801a596:	461a      	mov	r2, r3
 801a598:	4603      	mov	r3, r0
 801a59a:	73fb      	strb	r3, [r7, #15]
 801a59c:	4613      	mov	r3, r2
 801a59e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

	   int8_t ret = -1;
 801a5a0:	23ff      	movs	r3, #255	; 0xff
 801a5a2:	75fb      	strb	r3, [r7, #23]

		prev_sleep_time = HAL_GetTick();
 801a5a4:	f7e8 ff98 	bl	80034d8 <HAL_GetTick>
 801a5a8:	4603      	mov	r3, r0
 801a5aa:	4a0d      	ldr	r2, [pc, #52]	; (801a5e0 <STORAGE_Read_FS+0x54>)
 801a5ac:	6013      	str	r3, [r2, #0]
	  HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801a5ae:	89bb      	ldrh	r3, [r7, #12]
 801a5b0:	f04f 32ff 	mov.w	r2, #4294967295
 801a5b4:	9200      	str	r2, [sp, #0]
 801a5b6:	687a      	ldr	r2, [r7, #4]
 801a5b8:	68b9      	ldr	r1, [r7, #8]
 801a5ba:	480a      	ldr	r0, [pc, #40]	; (801a5e4 <STORAGE_Read_FS+0x58>)
 801a5bc:	f7ee fe6a 	bl	8009294 <HAL_SD_ReadBlocks>

	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 801a5c0:	bf00      	nop
 801a5c2:	4808      	ldr	r0, [pc, #32]	; (801a5e4 <STORAGE_Read_FS+0x58>)
 801a5c4:	f7ef fb9a 	bl	8009cfc <HAL_SD_GetCardState>
 801a5c8:	4603      	mov	r3, r0
 801a5ca:	2b04      	cmp	r3, #4
 801a5cc:	d1f9      	bne.n	801a5c2 <STORAGE_Read_FS+0x36>
	  ret = 0;
 801a5ce:	2300      	movs	r3, #0
 801a5d0:	75fb      	strb	r3, [r7, #23]
	  return ret;
 801a5d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 801a5d6:	4618      	mov	r0, r3
 801a5d8:	3718      	adds	r7, #24
 801a5da:	46bd      	mov	sp, r7
 801a5dc:	bd80      	pop	{r7, pc}
 801a5de:	bf00      	nop
 801a5e0:	200016f0 	.word	0x200016f0
 801a5e4:	200017dc 	.word	0x200017dc

0801a5e8 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801a5e8:	b580      	push	{r7, lr}
 801a5ea:	b088      	sub	sp, #32
 801a5ec:	af02      	add	r7, sp, #8
 801a5ee:	60b9      	str	r1, [r7, #8]
 801a5f0:	607a      	str	r2, [r7, #4]
 801a5f2:	461a      	mov	r2, r3
 801a5f4:	4603      	mov	r3, r0
 801a5f6:	73fb      	strb	r3, [r7, #15]
 801a5f8:	4613      	mov	r3, r2
 801a5fa:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	 int8_t ret = -1;
 801a5fc:	23ff      	movs	r3, #255	; 0xff
 801a5fe:	75fb      	strb	r3, [r7, #23]

	   HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801a600:	89bb      	ldrh	r3, [r7, #12]
 801a602:	f04f 32ff 	mov.w	r2, #4294967295
 801a606:	9200      	str	r2, [sp, #0]
 801a608:	687a      	ldr	r2, [r7, #4]
 801a60a:	68b9      	ldr	r1, [r7, #8]
 801a60c:	4808      	ldr	r0, [pc, #32]	; (801a630 <STORAGE_Write_FS+0x48>)
 801a60e:	f7ef f81f 	bl	8009650 <HAL_SD_WriteBlocks>


	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 801a612:	bf00      	nop
 801a614:	4806      	ldr	r0, [pc, #24]	; (801a630 <STORAGE_Write_FS+0x48>)
 801a616:	f7ef fb71 	bl	8009cfc <HAL_SD_GetCardState>
 801a61a:	4603      	mov	r3, r0
 801a61c:	2b04      	cmp	r3, #4
 801a61e:	d1f9      	bne.n	801a614 <STORAGE_Write_FS+0x2c>
	  ret = 0;
 801a620:	2300      	movs	r3, #0
 801a622:	75fb      	strb	r3, [r7, #23]
	  return ret;
 801a624:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801a628:	4618      	mov	r0, r3
 801a62a:	3718      	adds	r7, #24
 801a62c:	46bd      	mov	sp, r7
 801a62e:	bd80      	pop	{r7, pc}
 801a630:	200017dc 	.word	0x200017dc

0801a634 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801a634:	b480      	push	{r7}
 801a636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801a638:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801a63a:	4618      	mov	r0, r3
 801a63c:	46bd      	mov	sp, r7
 801a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a642:	4770      	bx	lr

0801a644 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801a644:	b580      	push	{r7, lr}
 801a646:	b08a      	sub	sp, #40	; 0x28
 801a648:	af00      	add	r7, sp, #0
 801a64a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801a64c:	f107 0314 	add.w	r3, r7, #20
 801a650:	2200      	movs	r2, #0
 801a652:	601a      	str	r2, [r3, #0]
 801a654:	605a      	str	r2, [r3, #4]
 801a656:	609a      	str	r2, [r3, #8]
 801a658:	60da      	str	r2, [r3, #12]
 801a65a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801a65c:	687b      	ldr	r3, [r7, #4]
 801a65e:	681b      	ldr	r3, [r3, #0]
 801a660:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a664:	d13a      	bne.n	801a6dc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801a666:	2300      	movs	r3, #0
 801a668:	613b      	str	r3, [r7, #16]
 801a66a:	4b1e      	ldr	r3, [pc, #120]	; (801a6e4 <HAL_PCD_MspInit+0xa0>)
 801a66c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a66e:	4a1d      	ldr	r2, [pc, #116]	; (801a6e4 <HAL_PCD_MspInit+0xa0>)
 801a670:	f043 0301 	orr.w	r3, r3, #1
 801a674:	6313      	str	r3, [r2, #48]	; 0x30
 801a676:	4b1b      	ldr	r3, [pc, #108]	; (801a6e4 <HAL_PCD_MspInit+0xa0>)
 801a678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a67a:	f003 0301 	and.w	r3, r3, #1
 801a67e:	613b      	str	r3, [r7, #16]
 801a680:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801a682:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801a686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a688:	2302      	movs	r3, #2
 801a68a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a68c:	2300      	movs	r3, #0
 801a68e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801a690:	2303      	movs	r3, #3
 801a692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801a694:	230a      	movs	r3, #10
 801a696:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801a698:	f107 0314 	add.w	r3, r7, #20
 801a69c:	4619      	mov	r1, r3
 801a69e:	4812      	ldr	r0, [pc, #72]	; (801a6e8 <HAL_PCD_MspInit+0xa4>)
 801a6a0:	f7ea fc7e 	bl	8004fa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801a6a4:	4b0f      	ldr	r3, [pc, #60]	; (801a6e4 <HAL_PCD_MspInit+0xa0>)
 801a6a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a6a8:	4a0e      	ldr	r2, [pc, #56]	; (801a6e4 <HAL_PCD_MspInit+0xa0>)
 801a6aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a6ae:	6353      	str	r3, [r2, #52]	; 0x34
 801a6b0:	2300      	movs	r3, #0
 801a6b2:	60fb      	str	r3, [r7, #12]
 801a6b4:	4b0b      	ldr	r3, [pc, #44]	; (801a6e4 <HAL_PCD_MspInit+0xa0>)
 801a6b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a6b8:	4a0a      	ldr	r2, [pc, #40]	; (801a6e4 <HAL_PCD_MspInit+0xa0>)
 801a6ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801a6be:	6453      	str	r3, [r2, #68]	; 0x44
 801a6c0:	4b08      	ldr	r3, [pc, #32]	; (801a6e4 <HAL_PCD_MspInit+0xa0>)
 801a6c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a6c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801a6c8:	60fb      	str	r3, [r7, #12]
 801a6ca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801a6cc:	2200      	movs	r2, #0
 801a6ce:	2100      	movs	r1, #0
 801a6d0:	2043      	movs	r0, #67	; 0x43
 801a6d2:	f7e9 fce4 	bl	800409e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801a6d6:	2043      	movs	r0, #67	; 0x43
 801a6d8:	f7e9 fcfd 	bl	80040d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801a6dc:	bf00      	nop
 801a6de:	3728      	adds	r7, #40	; 0x28
 801a6e0:	46bd      	mov	sp, r7
 801a6e2:	bd80      	pop	{r7, pc}
 801a6e4:	40023800 	.word	0x40023800
 801a6e8:	40020000 	.word	0x40020000

0801a6ec <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 801a6ec:	b580      	push	{r7, lr}
 801a6ee:	b082      	sub	sp, #8
 801a6f0:	af00      	add	r7, sp, #0
 801a6f2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_OTG_FS)
 801a6f4:	687b      	ldr	r3, [r7, #4]
 801a6f6:	681b      	ldr	r3, [r3, #0]
 801a6f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a6fc:	d10d      	bne.n	801a71a <HAL_PCD_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 0 */

  /* USER CODE END USB_OTG_FS_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 801a6fe:	4b09      	ldr	r3, [pc, #36]	; (801a724 <HAL_PCD_MspDeInit+0x38>)
 801a700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a702:	4a08      	ldr	r2, [pc, #32]	; (801a724 <HAL_PCD_MspDeInit+0x38>)
 801a704:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801a708:	6353      	str	r3, [r2, #52]	; 0x34

    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 801a70a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801a70e:	4806      	ldr	r0, [pc, #24]	; (801a728 <HAL_PCD_MspDeInit+0x3c>)
 801a710:	f7ea fdca 	bl	80052a8 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 801a714:	2043      	movs	r0, #67	; 0x43
 801a716:	f7e9 fcec 	bl	80040f2 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 1 */

  /* USER CODE END USB_OTG_FS_MspDeInit 1 */
  }
}
 801a71a:	bf00      	nop
 801a71c:	3708      	adds	r7, #8
 801a71e:	46bd      	mov	sp, r7
 801a720:	bd80      	pop	{r7, pc}
 801a722:	bf00      	nop
 801a724:	40023800 	.word	0x40023800
 801a728:	40020000 	.word	0x40020000

0801a72c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a72c:	b580      	push	{r7, lr}
 801a72e:	b082      	sub	sp, #8
 801a730:	af00      	add	r7, sp, #0
 801a732:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801a734:	687b      	ldr	r3, [r7, #4]
 801a736:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801a73a:	687b      	ldr	r3, [r7, #4]
 801a73c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801a740:	4619      	mov	r1, r3
 801a742:	4610      	mov	r0, r2
 801a744:	f7fa fe41 	bl	80153ca <USBD_LL_SetupStage>
}
 801a748:	bf00      	nop
 801a74a:	3708      	adds	r7, #8
 801a74c:	46bd      	mov	sp, r7
 801a74e:	bd80      	pop	{r7, pc}

0801a750 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a750:	b580      	push	{r7, lr}
 801a752:	b082      	sub	sp, #8
 801a754:	af00      	add	r7, sp, #0
 801a756:	6078      	str	r0, [r7, #4]
 801a758:	460b      	mov	r3, r1
 801a75a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801a75c:	687b      	ldr	r3, [r7, #4]
 801a75e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801a762:	78fa      	ldrb	r2, [r7, #3]
 801a764:	6879      	ldr	r1, [r7, #4]
 801a766:	4613      	mov	r3, r2
 801a768:	00db      	lsls	r3, r3, #3
 801a76a:	4413      	add	r3, r2
 801a76c:	009b      	lsls	r3, r3, #2
 801a76e:	440b      	add	r3, r1
 801a770:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801a774:	681a      	ldr	r2, [r3, #0]
 801a776:	78fb      	ldrb	r3, [r7, #3]
 801a778:	4619      	mov	r1, r3
 801a77a:	f7fa fe7b 	bl	8015474 <USBD_LL_DataOutStage>
}
 801a77e:	bf00      	nop
 801a780:	3708      	adds	r7, #8
 801a782:	46bd      	mov	sp, r7
 801a784:	bd80      	pop	{r7, pc}

0801a786 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a786:	b580      	push	{r7, lr}
 801a788:	b082      	sub	sp, #8
 801a78a:	af00      	add	r7, sp, #0
 801a78c:	6078      	str	r0, [r7, #4]
 801a78e:	460b      	mov	r3, r1
 801a790:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801a792:	687b      	ldr	r3, [r7, #4]
 801a794:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801a798:	78fa      	ldrb	r2, [r7, #3]
 801a79a:	6879      	ldr	r1, [r7, #4]
 801a79c:	4613      	mov	r3, r2
 801a79e:	00db      	lsls	r3, r3, #3
 801a7a0:	4413      	add	r3, r2
 801a7a2:	009b      	lsls	r3, r3, #2
 801a7a4:	440b      	add	r3, r1
 801a7a6:	334c      	adds	r3, #76	; 0x4c
 801a7a8:	681a      	ldr	r2, [r3, #0]
 801a7aa:	78fb      	ldrb	r3, [r7, #3]
 801a7ac:	4619      	mov	r1, r3
 801a7ae:	f7fa ff14 	bl	80155da <USBD_LL_DataInStage>
}
 801a7b2:	bf00      	nop
 801a7b4:	3708      	adds	r7, #8
 801a7b6:	46bd      	mov	sp, r7
 801a7b8:	bd80      	pop	{r7, pc}

0801a7ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a7ba:	b580      	push	{r7, lr}
 801a7bc:	b082      	sub	sp, #8
 801a7be:	af00      	add	r7, sp, #0
 801a7c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801a7c2:	687b      	ldr	r3, [r7, #4]
 801a7c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a7c8:	4618      	mov	r0, r3
 801a7ca:	f7fb f848 	bl	801585e <USBD_LL_SOF>
}
 801a7ce:	bf00      	nop
 801a7d0:	3708      	adds	r7, #8
 801a7d2:	46bd      	mov	sp, r7
 801a7d4:	bd80      	pop	{r7, pc}

0801a7d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a7d6:	b580      	push	{r7, lr}
 801a7d8:	b084      	sub	sp, #16
 801a7da:	af00      	add	r7, sp, #0
 801a7dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801a7de:	2301      	movs	r3, #1
 801a7e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801a7e2:	687b      	ldr	r3, [r7, #4]
 801a7e4:	68db      	ldr	r3, [r3, #12]
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	d102      	bne.n	801a7f0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801a7ea:	2300      	movs	r3, #0
 801a7ec:	73fb      	strb	r3, [r7, #15]
 801a7ee:	e008      	b.n	801a802 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801a7f0:	687b      	ldr	r3, [r7, #4]
 801a7f2:	68db      	ldr	r3, [r3, #12]
 801a7f4:	2b02      	cmp	r3, #2
 801a7f6:	d102      	bne.n	801a7fe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801a7f8:	2301      	movs	r3, #1
 801a7fa:	73fb      	strb	r3, [r7, #15]
 801a7fc:	e001      	b.n	801a802 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801a7fe:	f7e8 f92d 	bl	8002a5c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801a802:	687b      	ldr	r3, [r7, #4]
 801a804:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a808:	7bfa      	ldrb	r2, [r7, #15]
 801a80a:	4611      	mov	r1, r2
 801a80c:	4618      	mov	r0, r3
 801a80e:	f7fa ffe8 	bl	80157e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801a812:	687b      	ldr	r3, [r7, #4]
 801a814:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a818:	4618      	mov	r0, r3
 801a81a:	f7fa ff90 	bl	801573e <USBD_LL_Reset>
}
 801a81e:	bf00      	nop
 801a820:	3710      	adds	r7, #16
 801a822:	46bd      	mov	sp, r7
 801a824:	bd80      	pop	{r7, pc}
	...

0801a828 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a828:	b580      	push	{r7, lr}
 801a82a:	b082      	sub	sp, #8
 801a82c:	af00      	add	r7, sp, #0
 801a82e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801a830:	687b      	ldr	r3, [r7, #4]
 801a832:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a836:	4618      	mov	r0, r3
 801a838:	f7fa ffe3 	bl	8015802 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801a83c:	687b      	ldr	r3, [r7, #4]
 801a83e:	681b      	ldr	r3, [r3, #0]
 801a840:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a844:	681b      	ldr	r3, [r3, #0]
 801a846:	687a      	ldr	r2, [r7, #4]
 801a848:	6812      	ldr	r2, [r2, #0]
 801a84a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a84e:	f043 0301 	orr.w	r3, r3, #1
 801a852:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	6a1b      	ldr	r3, [r3, #32]
 801a858:	2b00      	cmp	r3, #0
 801a85a:	d005      	beq.n	801a868 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a85c:	4b04      	ldr	r3, [pc, #16]	; (801a870 <HAL_PCD_SuspendCallback+0x48>)
 801a85e:	691b      	ldr	r3, [r3, #16]
 801a860:	4a03      	ldr	r2, [pc, #12]	; (801a870 <HAL_PCD_SuspendCallback+0x48>)
 801a862:	f043 0306 	orr.w	r3, r3, #6
 801a866:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801a868:	bf00      	nop
 801a86a:	3708      	adds	r7, #8
 801a86c:	46bd      	mov	sp, r7
 801a86e:	bd80      	pop	{r7, pc}
 801a870:	e000ed00 	.word	0xe000ed00

0801a874 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a874:	b580      	push	{r7, lr}
 801a876:	b082      	sub	sp, #8
 801a878:	af00      	add	r7, sp, #0
 801a87a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801a87c:	687b      	ldr	r3, [r7, #4]
 801a87e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a882:	4618      	mov	r0, r3
 801a884:	f7fa ffd3 	bl	801582e <USBD_LL_Resume>
}
 801a888:	bf00      	nop
 801a88a:	3708      	adds	r7, #8
 801a88c:	46bd      	mov	sp, r7
 801a88e:	bd80      	pop	{r7, pc}

0801a890 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a890:	b580      	push	{r7, lr}
 801a892:	b082      	sub	sp, #8
 801a894:	af00      	add	r7, sp, #0
 801a896:	6078      	str	r0, [r7, #4]
 801a898:	460b      	mov	r3, r1
 801a89a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a89c:	687b      	ldr	r3, [r7, #4]
 801a89e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a8a2:	78fa      	ldrb	r2, [r7, #3]
 801a8a4:	4611      	mov	r1, r2
 801a8a6:	4618      	mov	r0, r3
 801a8a8:	f7fb f82b 	bl	8015902 <USBD_LL_IsoOUTIncomplete>
}
 801a8ac:	bf00      	nop
 801a8ae:	3708      	adds	r7, #8
 801a8b0:	46bd      	mov	sp, r7
 801a8b2:	bd80      	pop	{r7, pc}

0801a8b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a8b4:	b580      	push	{r7, lr}
 801a8b6:	b082      	sub	sp, #8
 801a8b8:	af00      	add	r7, sp, #0
 801a8ba:	6078      	str	r0, [r7, #4]
 801a8bc:	460b      	mov	r3, r1
 801a8be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a8c0:	687b      	ldr	r3, [r7, #4]
 801a8c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a8c6:	78fa      	ldrb	r2, [r7, #3]
 801a8c8:	4611      	mov	r1, r2
 801a8ca:	4618      	mov	r0, r3
 801a8cc:	f7fa ffe7 	bl	801589e <USBD_LL_IsoINIncomplete>
}
 801a8d0:	bf00      	nop
 801a8d2:	3708      	adds	r7, #8
 801a8d4:	46bd      	mov	sp, r7
 801a8d6:	bd80      	pop	{r7, pc}

0801a8d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a8d8:	b580      	push	{r7, lr}
 801a8da:	b082      	sub	sp, #8
 801a8dc:	af00      	add	r7, sp, #0
 801a8de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801a8e0:	687b      	ldr	r3, [r7, #4]
 801a8e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a8e6:	4618      	mov	r0, r3
 801a8e8:	f7fb f83d 	bl	8015966 <USBD_LL_DevConnected>
}
 801a8ec:	bf00      	nop
 801a8ee:	3708      	adds	r7, #8
 801a8f0:	46bd      	mov	sp, r7
 801a8f2:	bd80      	pop	{r7, pc}

0801a8f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a8f4:	b580      	push	{r7, lr}
 801a8f6:	b082      	sub	sp, #8
 801a8f8:	af00      	add	r7, sp, #0
 801a8fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801a8fc:	687b      	ldr	r3, [r7, #4]
 801a8fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a902:	4618      	mov	r0, r3
 801a904:	f7fb f83a 	bl	801597c <USBD_LL_DevDisconnected>
}
 801a908:	bf00      	nop
 801a90a:	3708      	adds	r7, #8
 801a90c:	46bd      	mov	sp, r7
 801a90e:	bd80      	pop	{r7, pc}

0801a910 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801a910:	b580      	push	{r7, lr}
 801a912:	b082      	sub	sp, #8
 801a914:	af00      	add	r7, sp, #0
 801a916:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	781b      	ldrb	r3, [r3, #0]
 801a91c:	2b00      	cmp	r3, #0
 801a91e:	d13c      	bne.n	801a99a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801a920:	4a20      	ldr	r2, [pc, #128]	; (801a9a4 <USBD_LL_Init+0x94>)
 801a922:	687b      	ldr	r3, [r7, #4]
 801a924:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801a928:	687b      	ldr	r3, [r7, #4]
 801a92a:	4a1e      	ldr	r2, [pc, #120]	; (801a9a4 <USBD_LL_Init+0x94>)
 801a92c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801a930:	4b1c      	ldr	r3, [pc, #112]	; (801a9a4 <USBD_LL_Init+0x94>)
 801a932:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801a936:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801a938:	4b1a      	ldr	r3, [pc, #104]	; (801a9a4 <USBD_LL_Init+0x94>)
 801a93a:	2204      	movs	r2, #4
 801a93c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801a93e:	4b19      	ldr	r3, [pc, #100]	; (801a9a4 <USBD_LL_Init+0x94>)
 801a940:	2202      	movs	r2, #2
 801a942:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801a944:	4b17      	ldr	r3, [pc, #92]	; (801a9a4 <USBD_LL_Init+0x94>)
 801a946:	2200      	movs	r2, #0
 801a948:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801a94a:	4b16      	ldr	r3, [pc, #88]	; (801a9a4 <USBD_LL_Init+0x94>)
 801a94c:	2202      	movs	r2, #2
 801a94e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801a950:	4b14      	ldr	r3, [pc, #80]	; (801a9a4 <USBD_LL_Init+0x94>)
 801a952:	2200      	movs	r2, #0
 801a954:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801a956:	4b13      	ldr	r3, [pc, #76]	; (801a9a4 <USBD_LL_Init+0x94>)
 801a958:	2200      	movs	r2, #0
 801a95a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801a95c:	4b11      	ldr	r3, [pc, #68]	; (801a9a4 <USBD_LL_Init+0x94>)
 801a95e:	2200      	movs	r2, #0
 801a960:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801a962:	4b10      	ldr	r3, [pc, #64]	; (801a9a4 <USBD_LL_Init+0x94>)
 801a964:	2200      	movs	r2, #0
 801a966:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801a968:	4b0e      	ldr	r3, [pc, #56]	; (801a9a4 <USBD_LL_Init+0x94>)
 801a96a:	2200      	movs	r2, #0
 801a96c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801a96e:	480d      	ldr	r0, [pc, #52]	; (801a9a4 <USBD_LL_Init+0x94>)
 801a970:	f7eb fed5 	bl	800671e <HAL_PCD_Init>
 801a974:	4603      	mov	r3, r0
 801a976:	2b00      	cmp	r3, #0
 801a978:	d001      	beq.n	801a97e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801a97a:	f7e8 f86f 	bl	8002a5c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801a97e:	2180      	movs	r1, #128	; 0x80
 801a980:	4808      	ldr	r0, [pc, #32]	; (801a9a4 <USBD_LL_Init+0x94>)
 801a982:	f7ed f9b6 	bl	8007cf2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801a986:	2240      	movs	r2, #64	; 0x40
 801a988:	2100      	movs	r1, #0
 801a98a:	4806      	ldr	r0, [pc, #24]	; (801a9a4 <USBD_LL_Init+0x94>)
 801a98c:	f7ed f96a 	bl	8007c64 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801a990:	2280      	movs	r2, #128	; 0x80
 801a992:	2101      	movs	r1, #1
 801a994:	4803      	ldr	r0, [pc, #12]	; (801a9a4 <USBD_LL_Init+0x94>)
 801a996:	f7ed f965 	bl	8007c64 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801a99a:	2300      	movs	r3, #0
}
 801a99c:	4618      	mov	r0, r3
 801a99e:	3708      	adds	r7, #8
 801a9a0:	46bd      	mov	sp, r7
 801a9a2:	bd80      	pop	{r7, pc}
 801a9a4:	20002884 	.word	0x20002884

0801a9a8 <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 801a9a8:	b580      	push	{r7, lr}
 801a9aa:	b084      	sub	sp, #16
 801a9ac:	af00      	add	r7, sp, #0
 801a9ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a9b0:	2300      	movs	r3, #0
 801a9b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a9b4:	2300      	movs	r3, #0
 801a9b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_DeInit(pdev->pData);
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801a9be:	4618      	mov	r0, r3
 801a9c0:	f7eb ffca 	bl	8006958 <HAL_PCD_DeInit>
 801a9c4:	4603      	mov	r3, r0
 801a9c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a9c8:	7bfb      	ldrb	r3, [r7, #15]
 801a9ca:	4618      	mov	r0, r3
 801a9cc:	f000 f998 	bl	801ad00 <USBD_Get_USB_Status>
 801a9d0:	4603      	mov	r3, r0
 801a9d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a9d4:	7bbb      	ldrb	r3, [r7, #14]
}
 801a9d6:	4618      	mov	r0, r3
 801a9d8:	3710      	adds	r7, #16
 801a9da:	46bd      	mov	sp, r7
 801a9dc:	bd80      	pop	{r7, pc}

0801a9de <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801a9de:	b580      	push	{r7, lr}
 801a9e0:	b084      	sub	sp, #16
 801a9e2:	af00      	add	r7, sp, #0
 801a9e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a9e6:	2300      	movs	r3, #0
 801a9e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a9ea:	2300      	movs	r3, #0
 801a9ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801a9ee:	687b      	ldr	r3, [r7, #4]
 801a9f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801a9f4:	4618      	mov	r0, r3
 801a9f6:	f7eb ffd2 	bl	800699e <HAL_PCD_Start>
 801a9fa:	4603      	mov	r3, r0
 801a9fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a9fe:	7bfb      	ldrb	r3, [r7, #15]
 801aa00:	4618      	mov	r0, r3
 801aa02:	f000 f97d 	bl	801ad00 <USBD_Get_USB_Status>
 801aa06:	4603      	mov	r3, r0
 801aa08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801aa0a:	7bbb      	ldrb	r3, [r7, #14]
}
 801aa0c:	4618      	mov	r0, r3
 801aa0e:	3710      	adds	r7, #16
 801aa10:	46bd      	mov	sp, r7
 801aa12:	bd80      	pop	{r7, pc}

0801aa14 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 801aa14:	b580      	push	{r7, lr}
 801aa16:	b084      	sub	sp, #16
 801aa18:	af00      	add	r7, sp, #0
 801aa1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aa1c:	2300      	movs	r3, #0
 801aa1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aa20:	2300      	movs	r3, #0
 801aa22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 801aa24:	687b      	ldr	r3, [r7, #4]
 801aa26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801aa2a:	4618      	mov	r0, r3
 801aa2c:	f7eb ffea 	bl	8006a04 <HAL_PCD_Stop>
 801aa30:	4603      	mov	r3, r0
 801aa32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801aa34:	7bfb      	ldrb	r3, [r7, #15]
 801aa36:	4618      	mov	r0, r3
 801aa38:	f000 f962 	bl	801ad00 <USBD_Get_USB_Status>
 801aa3c:	4603      	mov	r3, r0
 801aa3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801aa40:	7bbb      	ldrb	r3, [r7, #14]
}
 801aa42:	4618      	mov	r0, r3
 801aa44:	3710      	adds	r7, #16
 801aa46:	46bd      	mov	sp, r7
 801aa48:	bd80      	pop	{r7, pc}

0801aa4a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801aa4a:	b580      	push	{r7, lr}
 801aa4c:	b084      	sub	sp, #16
 801aa4e:	af00      	add	r7, sp, #0
 801aa50:	6078      	str	r0, [r7, #4]
 801aa52:	4608      	mov	r0, r1
 801aa54:	4611      	mov	r1, r2
 801aa56:	461a      	mov	r2, r3
 801aa58:	4603      	mov	r3, r0
 801aa5a:	70fb      	strb	r3, [r7, #3]
 801aa5c:	460b      	mov	r3, r1
 801aa5e:	70bb      	strb	r3, [r7, #2]
 801aa60:	4613      	mov	r3, r2
 801aa62:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aa64:	2300      	movs	r3, #0
 801aa66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aa68:	2300      	movs	r3, #0
 801aa6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801aa6c:	687b      	ldr	r3, [r7, #4]
 801aa6e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801aa72:	78bb      	ldrb	r3, [r7, #2]
 801aa74:	883a      	ldrh	r2, [r7, #0]
 801aa76:	78f9      	ldrb	r1, [r7, #3]
 801aa78:	f7ec fcc1 	bl	80073fe <HAL_PCD_EP_Open>
 801aa7c:	4603      	mov	r3, r0
 801aa7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801aa80:	7bfb      	ldrb	r3, [r7, #15]
 801aa82:	4618      	mov	r0, r3
 801aa84:	f000 f93c 	bl	801ad00 <USBD_Get_USB_Status>
 801aa88:	4603      	mov	r3, r0
 801aa8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801aa8c:	7bbb      	ldrb	r3, [r7, #14]
}
 801aa8e:	4618      	mov	r0, r3
 801aa90:	3710      	adds	r7, #16
 801aa92:	46bd      	mov	sp, r7
 801aa94:	bd80      	pop	{r7, pc}

0801aa96 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801aa96:	b580      	push	{r7, lr}
 801aa98:	b084      	sub	sp, #16
 801aa9a:	af00      	add	r7, sp, #0
 801aa9c:	6078      	str	r0, [r7, #4]
 801aa9e:	460b      	mov	r3, r1
 801aaa0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aaa2:	2300      	movs	r3, #0
 801aaa4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aaa6:	2300      	movs	r3, #0
 801aaa8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801aaaa:	687b      	ldr	r3, [r7, #4]
 801aaac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801aab0:	78fa      	ldrb	r2, [r7, #3]
 801aab2:	4611      	mov	r1, r2
 801aab4:	4618      	mov	r0, r3
 801aab6:	f7ec fd0a 	bl	80074ce <HAL_PCD_EP_Close>
 801aaba:	4603      	mov	r3, r0
 801aabc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801aabe:	7bfb      	ldrb	r3, [r7, #15]
 801aac0:	4618      	mov	r0, r3
 801aac2:	f000 f91d 	bl	801ad00 <USBD_Get_USB_Status>
 801aac6:	4603      	mov	r3, r0
 801aac8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801aaca:	7bbb      	ldrb	r3, [r7, #14]
}
 801aacc:	4618      	mov	r0, r3
 801aace:	3710      	adds	r7, #16
 801aad0:	46bd      	mov	sp, r7
 801aad2:	bd80      	pop	{r7, pc}

0801aad4 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801aad4:	b580      	push	{r7, lr}
 801aad6:	b084      	sub	sp, #16
 801aad8:	af00      	add	r7, sp, #0
 801aada:	6078      	str	r0, [r7, #4]
 801aadc:	460b      	mov	r3, r1
 801aade:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aae0:	2300      	movs	r3, #0
 801aae2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aae4:	2300      	movs	r3, #0
 801aae6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801aae8:	687b      	ldr	r3, [r7, #4]
 801aaea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801aaee:	78fa      	ldrb	r2, [r7, #3]
 801aaf0:	4611      	mov	r1, r2
 801aaf2:	4618      	mov	r0, r3
 801aaf4:	f7ec fecd 	bl	8007892 <HAL_PCD_EP_Flush>
 801aaf8:	4603      	mov	r3, r0
 801aafa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801aafc:	7bfb      	ldrb	r3, [r7, #15]
 801aafe:	4618      	mov	r0, r3
 801ab00:	f000 f8fe 	bl	801ad00 <USBD_Get_USB_Status>
 801ab04:	4603      	mov	r3, r0
 801ab06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ab08:	7bbb      	ldrb	r3, [r7, #14]
}
 801ab0a:	4618      	mov	r0, r3
 801ab0c:	3710      	adds	r7, #16
 801ab0e:	46bd      	mov	sp, r7
 801ab10:	bd80      	pop	{r7, pc}

0801ab12 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ab12:	b580      	push	{r7, lr}
 801ab14:	b084      	sub	sp, #16
 801ab16:	af00      	add	r7, sp, #0
 801ab18:	6078      	str	r0, [r7, #4]
 801ab1a:	460b      	mov	r3, r1
 801ab1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ab1e:	2300      	movs	r3, #0
 801ab20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ab22:	2300      	movs	r3, #0
 801ab24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801ab26:	687b      	ldr	r3, [r7, #4]
 801ab28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ab2c:	78fa      	ldrb	r2, [r7, #3]
 801ab2e:	4611      	mov	r1, r2
 801ab30:	4618      	mov	r0, r3
 801ab32:	f7ec fdc3 	bl	80076bc <HAL_PCD_EP_SetStall>
 801ab36:	4603      	mov	r3, r0
 801ab38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ab3a:	7bfb      	ldrb	r3, [r7, #15]
 801ab3c:	4618      	mov	r0, r3
 801ab3e:	f000 f8df 	bl	801ad00 <USBD_Get_USB_Status>
 801ab42:	4603      	mov	r3, r0
 801ab44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ab46:	7bbb      	ldrb	r3, [r7, #14]
}
 801ab48:	4618      	mov	r0, r3
 801ab4a:	3710      	adds	r7, #16
 801ab4c:	46bd      	mov	sp, r7
 801ab4e:	bd80      	pop	{r7, pc}

0801ab50 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ab50:	b580      	push	{r7, lr}
 801ab52:	b084      	sub	sp, #16
 801ab54:	af00      	add	r7, sp, #0
 801ab56:	6078      	str	r0, [r7, #4]
 801ab58:	460b      	mov	r3, r1
 801ab5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ab5c:	2300      	movs	r3, #0
 801ab5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ab60:	2300      	movs	r3, #0
 801ab62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ab6a:	78fa      	ldrb	r2, [r7, #3]
 801ab6c:	4611      	mov	r1, r2
 801ab6e:	4618      	mov	r0, r3
 801ab70:	f7ec fe08 	bl	8007784 <HAL_PCD_EP_ClrStall>
 801ab74:	4603      	mov	r3, r0
 801ab76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ab78:	7bfb      	ldrb	r3, [r7, #15]
 801ab7a:	4618      	mov	r0, r3
 801ab7c:	f000 f8c0 	bl	801ad00 <USBD_Get_USB_Status>
 801ab80:	4603      	mov	r3, r0
 801ab82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ab84:	7bbb      	ldrb	r3, [r7, #14]
}
 801ab86:	4618      	mov	r0, r3
 801ab88:	3710      	adds	r7, #16
 801ab8a:	46bd      	mov	sp, r7
 801ab8c:	bd80      	pop	{r7, pc}

0801ab8e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ab8e:	b480      	push	{r7}
 801ab90:	b085      	sub	sp, #20
 801ab92:	af00      	add	r7, sp, #0
 801ab94:	6078      	str	r0, [r7, #4]
 801ab96:	460b      	mov	r3, r1
 801ab98:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801ab9a:	687b      	ldr	r3, [r7, #4]
 801ab9c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801aba0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801aba2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801aba6:	2b00      	cmp	r3, #0
 801aba8:	da0b      	bge.n	801abc2 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801abaa:	78fb      	ldrb	r3, [r7, #3]
 801abac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801abb0:	68f9      	ldr	r1, [r7, #12]
 801abb2:	4613      	mov	r3, r2
 801abb4:	00db      	lsls	r3, r3, #3
 801abb6:	4413      	add	r3, r2
 801abb8:	009b      	lsls	r3, r3, #2
 801abba:	440b      	add	r3, r1
 801abbc:	333e      	adds	r3, #62	; 0x3e
 801abbe:	781b      	ldrb	r3, [r3, #0]
 801abc0:	e00b      	b.n	801abda <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801abc2:	78fb      	ldrb	r3, [r7, #3]
 801abc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801abc8:	68f9      	ldr	r1, [r7, #12]
 801abca:	4613      	mov	r3, r2
 801abcc:	00db      	lsls	r3, r3, #3
 801abce:	4413      	add	r3, r2
 801abd0:	009b      	lsls	r3, r3, #2
 801abd2:	440b      	add	r3, r1
 801abd4:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801abd8:	781b      	ldrb	r3, [r3, #0]
  }
}
 801abda:	4618      	mov	r0, r3
 801abdc:	3714      	adds	r7, #20
 801abde:	46bd      	mov	sp, r7
 801abe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abe4:	4770      	bx	lr

0801abe6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801abe6:	b580      	push	{r7, lr}
 801abe8:	b084      	sub	sp, #16
 801abea:	af00      	add	r7, sp, #0
 801abec:	6078      	str	r0, [r7, #4]
 801abee:	460b      	mov	r3, r1
 801abf0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801abf2:	2300      	movs	r3, #0
 801abf4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801abf6:	2300      	movs	r3, #0
 801abf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801abfa:	687b      	ldr	r3, [r7, #4]
 801abfc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ac00:	78fa      	ldrb	r2, [r7, #3]
 801ac02:	4611      	mov	r1, r2
 801ac04:	4618      	mov	r0, r3
 801ac06:	f7ec fbd5 	bl	80073b4 <HAL_PCD_SetAddress>
 801ac0a:	4603      	mov	r3, r0
 801ac0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac0e:	7bfb      	ldrb	r3, [r7, #15]
 801ac10:	4618      	mov	r0, r3
 801ac12:	f000 f875 	bl	801ad00 <USBD_Get_USB_Status>
 801ac16:	4603      	mov	r3, r0
 801ac18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ac1a:	7bbb      	ldrb	r3, [r7, #14]
}
 801ac1c:	4618      	mov	r0, r3
 801ac1e:	3710      	adds	r7, #16
 801ac20:	46bd      	mov	sp, r7
 801ac22:	bd80      	pop	{r7, pc}

0801ac24 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801ac24:	b580      	push	{r7, lr}
 801ac26:	b086      	sub	sp, #24
 801ac28:	af00      	add	r7, sp, #0
 801ac2a:	60f8      	str	r0, [r7, #12]
 801ac2c:	607a      	str	r2, [r7, #4]
 801ac2e:	603b      	str	r3, [r7, #0]
 801ac30:	460b      	mov	r3, r1
 801ac32:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac34:	2300      	movs	r3, #0
 801ac36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac38:	2300      	movs	r3, #0
 801ac3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801ac3c:	68fb      	ldr	r3, [r7, #12]
 801ac3e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801ac42:	7af9      	ldrb	r1, [r7, #11]
 801ac44:	683b      	ldr	r3, [r7, #0]
 801ac46:	687a      	ldr	r2, [r7, #4]
 801ac48:	f7ec fcee 	bl	8007628 <HAL_PCD_EP_Transmit>
 801ac4c:	4603      	mov	r3, r0
 801ac4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac50:	7dfb      	ldrb	r3, [r7, #23]
 801ac52:	4618      	mov	r0, r3
 801ac54:	f000 f854 	bl	801ad00 <USBD_Get_USB_Status>
 801ac58:	4603      	mov	r3, r0
 801ac5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801ac5c:	7dbb      	ldrb	r3, [r7, #22]
}
 801ac5e:	4618      	mov	r0, r3
 801ac60:	3718      	adds	r7, #24
 801ac62:	46bd      	mov	sp, r7
 801ac64:	bd80      	pop	{r7, pc}

0801ac66 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801ac66:	b580      	push	{r7, lr}
 801ac68:	b086      	sub	sp, #24
 801ac6a:	af00      	add	r7, sp, #0
 801ac6c:	60f8      	str	r0, [r7, #12]
 801ac6e:	607a      	str	r2, [r7, #4]
 801ac70:	603b      	str	r3, [r7, #0]
 801ac72:	460b      	mov	r3, r1
 801ac74:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac76:	2300      	movs	r3, #0
 801ac78:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac7a:	2300      	movs	r3, #0
 801ac7c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801ac7e:	68fb      	ldr	r3, [r7, #12]
 801ac80:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801ac84:	7af9      	ldrb	r1, [r7, #11]
 801ac86:	683b      	ldr	r3, [r7, #0]
 801ac88:	687a      	ldr	r2, [r7, #4]
 801ac8a:	f7ec fc6a 	bl	8007562 <HAL_PCD_EP_Receive>
 801ac8e:	4603      	mov	r3, r0
 801ac90:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac92:	7dfb      	ldrb	r3, [r7, #23]
 801ac94:	4618      	mov	r0, r3
 801ac96:	f000 f833 	bl	801ad00 <USBD_Get_USB_Status>
 801ac9a:	4603      	mov	r3, r0
 801ac9c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801ac9e:	7dbb      	ldrb	r3, [r7, #22]
}
 801aca0:	4618      	mov	r0, r3
 801aca2:	3718      	adds	r7, #24
 801aca4:	46bd      	mov	sp, r7
 801aca6:	bd80      	pop	{r7, pc}

0801aca8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801aca8:	b580      	push	{r7, lr}
 801acaa:	b082      	sub	sp, #8
 801acac:	af00      	add	r7, sp, #0
 801acae:	6078      	str	r0, [r7, #4]
 801acb0:	460b      	mov	r3, r1
 801acb2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801acba:	78fa      	ldrb	r2, [r7, #3]
 801acbc:	4611      	mov	r1, r2
 801acbe:	4618      	mov	r0, r3
 801acc0:	f7ec fc9a 	bl	80075f8 <HAL_PCD_EP_GetRxCount>
 801acc4:	4603      	mov	r3, r0
}
 801acc6:	4618      	mov	r0, r3
 801acc8:	3708      	adds	r7, #8
 801acca:	46bd      	mov	sp, r7
 801accc:	bd80      	pop	{r7, pc}
	...

0801acd0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801acd0:	b480      	push	{r7}
 801acd2:	b083      	sub	sp, #12
 801acd4:	af00      	add	r7, sp, #0
 801acd6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801acd8:	4b03      	ldr	r3, [pc, #12]	; (801ace8 <USBD_static_malloc+0x18>)
}
 801acda:	4618      	mov	r0, r3
 801acdc:	370c      	adds	r7, #12
 801acde:	46bd      	mov	sp, r7
 801ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ace4:	4770      	bx	lr
 801ace6:	bf00      	nop
 801ace8:	20002d90 	.word	0x20002d90

0801acec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801acec:	b480      	push	{r7}
 801acee:	b083      	sub	sp, #12
 801acf0:	af00      	add	r7, sp, #0
 801acf2:	6078      	str	r0, [r7, #4]

}
 801acf4:	bf00      	nop
 801acf6:	370c      	adds	r7, #12
 801acf8:	46bd      	mov	sp, r7
 801acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acfe:	4770      	bx	lr

0801ad00 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801ad00:	b480      	push	{r7}
 801ad02:	b085      	sub	sp, #20
 801ad04:	af00      	add	r7, sp, #0
 801ad06:	4603      	mov	r3, r0
 801ad08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ad0a:	2300      	movs	r3, #0
 801ad0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801ad0e:	79fb      	ldrb	r3, [r7, #7]
 801ad10:	2b03      	cmp	r3, #3
 801ad12:	d817      	bhi.n	801ad44 <USBD_Get_USB_Status+0x44>
 801ad14:	a201      	add	r2, pc, #4	; (adr r2, 801ad1c <USBD_Get_USB_Status+0x1c>)
 801ad16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ad1a:	bf00      	nop
 801ad1c:	0801ad2d 	.word	0x0801ad2d
 801ad20:	0801ad33 	.word	0x0801ad33
 801ad24:	0801ad39 	.word	0x0801ad39
 801ad28:	0801ad3f 	.word	0x0801ad3f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801ad2c:	2300      	movs	r3, #0
 801ad2e:	73fb      	strb	r3, [r7, #15]
    break;
 801ad30:	e00b      	b.n	801ad4a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801ad32:	2303      	movs	r3, #3
 801ad34:	73fb      	strb	r3, [r7, #15]
    break;
 801ad36:	e008      	b.n	801ad4a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801ad38:	2301      	movs	r3, #1
 801ad3a:	73fb      	strb	r3, [r7, #15]
    break;
 801ad3c:	e005      	b.n	801ad4a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801ad3e:	2303      	movs	r3, #3
 801ad40:	73fb      	strb	r3, [r7, #15]
    break;
 801ad42:	e002      	b.n	801ad4a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801ad44:	2303      	movs	r3, #3
 801ad46:	73fb      	strb	r3, [r7, #15]
    break;
 801ad48:	bf00      	nop
  }
  return usb_status;
 801ad4a:	7bfb      	ldrb	r3, [r7, #15]
}
 801ad4c:	4618      	mov	r0, r3
 801ad4e:	3714      	adds	r7, #20
 801ad50:	46bd      	mov	sp, r7
 801ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad56:	4770      	bx	lr

0801ad58 <atoi>:
 801ad58:	220a      	movs	r2, #10
 801ad5a:	2100      	movs	r1, #0
 801ad5c:	f002 b830 	b.w	801cdc0 <strtol>

0801ad60 <__errno>:
 801ad60:	4b01      	ldr	r3, [pc, #4]	; (801ad68 <__errno+0x8>)
 801ad62:	6818      	ldr	r0, [r3, #0]
 801ad64:	4770      	bx	lr
 801ad66:	bf00      	nop
 801ad68:	20000140 	.word	0x20000140

0801ad6c <_fwrite_r>:
 801ad6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ad70:	9c08      	ldr	r4, [sp, #32]
 801ad72:	468a      	mov	sl, r1
 801ad74:	4690      	mov	r8, r2
 801ad76:	fb02 f903 	mul.w	r9, r2, r3
 801ad7a:	4605      	mov	r5, r0
 801ad7c:	b118      	cbz	r0, 801ad86 <_fwrite_r+0x1a>
 801ad7e:	6983      	ldr	r3, [r0, #24]
 801ad80:	b90b      	cbnz	r3, 801ad86 <_fwrite_r+0x1a>
 801ad82:	f003 f8d5 	bl	801df30 <__sinit>
 801ad86:	4b26      	ldr	r3, [pc, #152]	; (801ae20 <_fwrite_r+0xb4>)
 801ad88:	429c      	cmp	r4, r3
 801ad8a:	d123      	bne.n	801add4 <_fwrite_r+0x68>
 801ad8c:	686c      	ldr	r4, [r5, #4]
 801ad8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ad90:	07de      	lsls	r6, r3, #31
 801ad92:	d405      	bmi.n	801ada0 <_fwrite_r+0x34>
 801ad94:	89a3      	ldrh	r3, [r4, #12]
 801ad96:	0598      	lsls	r0, r3, #22
 801ad98:	d402      	bmi.n	801ada0 <_fwrite_r+0x34>
 801ad9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ad9c:	f000 f879 	bl	801ae92 <__retarget_lock_acquire_recursive>
 801ada0:	89a3      	ldrh	r3, [r4, #12]
 801ada2:	0719      	lsls	r1, r3, #28
 801ada4:	d520      	bpl.n	801ade8 <_fwrite_r+0x7c>
 801ada6:	6923      	ldr	r3, [r4, #16]
 801ada8:	b1f3      	cbz	r3, 801ade8 <_fwrite_r+0x7c>
 801adaa:	2600      	movs	r6, #0
 801adac:	454e      	cmp	r6, r9
 801adae:	d029      	beq.n	801ae04 <_fwrite_r+0x98>
 801adb0:	68a7      	ldr	r7, [r4, #8]
 801adb2:	f81a 1006 	ldrb.w	r1, [sl, r6]
 801adb6:	3f01      	subs	r7, #1
 801adb8:	2f00      	cmp	r7, #0
 801adba:	60a7      	str	r7, [r4, #8]
 801adbc:	da04      	bge.n	801adc8 <_fwrite_r+0x5c>
 801adbe:	69a3      	ldr	r3, [r4, #24]
 801adc0:	429f      	cmp	r7, r3
 801adc2:	db19      	blt.n	801adf8 <_fwrite_r+0x8c>
 801adc4:	290a      	cmp	r1, #10
 801adc6:	d017      	beq.n	801adf8 <_fwrite_r+0x8c>
 801adc8:	6823      	ldr	r3, [r4, #0]
 801adca:	1c5a      	adds	r2, r3, #1
 801adcc:	6022      	str	r2, [r4, #0]
 801adce:	7019      	strb	r1, [r3, #0]
 801add0:	3601      	adds	r6, #1
 801add2:	e7eb      	b.n	801adac <_fwrite_r+0x40>
 801add4:	4b13      	ldr	r3, [pc, #76]	; (801ae24 <_fwrite_r+0xb8>)
 801add6:	429c      	cmp	r4, r3
 801add8:	d101      	bne.n	801adde <_fwrite_r+0x72>
 801adda:	68ac      	ldr	r4, [r5, #8]
 801addc:	e7d7      	b.n	801ad8e <_fwrite_r+0x22>
 801adde:	4b12      	ldr	r3, [pc, #72]	; (801ae28 <_fwrite_r+0xbc>)
 801ade0:	429c      	cmp	r4, r3
 801ade2:	bf08      	it	eq
 801ade4:	68ec      	ldreq	r4, [r5, #12]
 801ade6:	e7d2      	b.n	801ad8e <_fwrite_r+0x22>
 801ade8:	4621      	mov	r1, r4
 801adea:	4628      	mov	r0, r5
 801adec:	f002 f87e 	bl	801ceec <__swsetup_r>
 801adf0:	2800      	cmp	r0, #0
 801adf2:	d0da      	beq.n	801adaa <_fwrite_r+0x3e>
 801adf4:	2600      	movs	r6, #0
 801adf6:	e005      	b.n	801ae04 <_fwrite_r+0x98>
 801adf8:	4622      	mov	r2, r4
 801adfa:	4628      	mov	r0, r5
 801adfc:	f002 f824 	bl	801ce48 <__swbuf_r>
 801ae00:	3001      	adds	r0, #1
 801ae02:	d1e5      	bne.n	801add0 <_fwrite_r+0x64>
 801ae04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ae06:	07da      	lsls	r2, r3, #31
 801ae08:	d405      	bmi.n	801ae16 <_fwrite_r+0xaa>
 801ae0a:	89a3      	ldrh	r3, [r4, #12]
 801ae0c:	059b      	lsls	r3, r3, #22
 801ae0e:	d402      	bmi.n	801ae16 <_fwrite_r+0xaa>
 801ae10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ae12:	f000 f83f 	bl	801ae94 <__retarget_lock_release_recursive>
 801ae16:	fbb6 f0f8 	udiv	r0, r6, r8
 801ae1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae1e:	bf00      	nop
 801ae20:	08021b4c 	.word	0x08021b4c
 801ae24:	08021b6c 	.word	0x08021b6c
 801ae28:	08021b2c 	.word	0x08021b2c

0801ae2c <fwrite>:
 801ae2c:	b507      	push	{r0, r1, r2, lr}
 801ae2e:	9300      	str	r3, [sp, #0]
 801ae30:	4613      	mov	r3, r2
 801ae32:	460a      	mov	r2, r1
 801ae34:	4601      	mov	r1, r0
 801ae36:	4803      	ldr	r0, [pc, #12]	; (801ae44 <fwrite+0x18>)
 801ae38:	6800      	ldr	r0, [r0, #0]
 801ae3a:	f7ff ff97 	bl	801ad6c <_fwrite_r>
 801ae3e:	b003      	add	sp, #12
 801ae40:	f85d fb04 	ldr.w	pc, [sp], #4
 801ae44:	20000140 	.word	0x20000140

0801ae48 <__libc_init_array>:
 801ae48:	b570      	push	{r4, r5, r6, lr}
 801ae4a:	4d0d      	ldr	r5, [pc, #52]	; (801ae80 <__libc_init_array+0x38>)
 801ae4c:	4c0d      	ldr	r4, [pc, #52]	; (801ae84 <__libc_init_array+0x3c>)
 801ae4e:	1b64      	subs	r4, r4, r5
 801ae50:	10a4      	asrs	r4, r4, #2
 801ae52:	2600      	movs	r6, #0
 801ae54:	42a6      	cmp	r6, r4
 801ae56:	d109      	bne.n	801ae6c <__libc_init_array+0x24>
 801ae58:	4d0b      	ldr	r5, [pc, #44]	; (801ae88 <__libc_init_array+0x40>)
 801ae5a:	4c0c      	ldr	r4, [pc, #48]	; (801ae8c <__libc_init_array+0x44>)
 801ae5c:	f004 fdf4 	bl	801fa48 <_init>
 801ae60:	1b64      	subs	r4, r4, r5
 801ae62:	10a4      	asrs	r4, r4, #2
 801ae64:	2600      	movs	r6, #0
 801ae66:	42a6      	cmp	r6, r4
 801ae68:	d105      	bne.n	801ae76 <__libc_init_array+0x2e>
 801ae6a:	bd70      	pop	{r4, r5, r6, pc}
 801ae6c:	f855 3b04 	ldr.w	r3, [r5], #4
 801ae70:	4798      	blx	r3
 801ae72:	3601      	adds	r6, #1
 801ae74:	e7ee      	b.n	801ae54 <__libc_init_array+0xc>
 801ae76:	f855 3b04 	ldr.w	r3, [r5], #4
 801ae7a:	4798      	blx	r3
 801ae7c:	3601      	adds	r6, #1
 801ae7e:	e7f2      	b.n	801ae66 <__libc_init_array+0x1e>
 801ae80:	08021d80 	.word	0x08021d80
 801ae84:	08021d80 	.word	0x08021d80
 801ae88:	08021d80 	.word	0x08021d80
 801ae8c:	08021d84 	.word	0x08021d84

0801ae90 <__retarget_lock_init_recursive>:
 801ae90:	4770      	bx	lr

0801ae92 <__retarget_lock_acquire_recursive>:
 801ae92:	4770      	bx	lr

0801ae94 <__retarget_lock_release_recursive>:
 801ae94:	4770      	bx	lr
	...

0801ae98 <malloc>:
 801ae98:	4b02      	ldr	r3, [pc, #8]	; (801aea4 <malloc+0xc>)
 801ae9a:	4601      	mov	r1, r0
 801ae9c:	6818      	ldr	r0, [r3, #0]
 801ae9e:	f000 b8a7 	b.w	801aff0 <_malloc_r>
 801aea2:	bf00      	nop
 801aea4:	20000140 	.word	0x20000140

0801aea8 <free>:
 801aea8:	4b02      	ldr	r3, [pc, #8]	; (801aeb4 <free+0xc>)
 801aeaa:	4601      	mov	r1, r0
 801aeac:	6818      	ldr	r0, [r3, #0]
 801aeae:	f000 b833 	b.w	801af18 <_free_r>
 801aeb2:	bf00      	nop
 801aeb4:	20000140 	.word	0x20000140

0801aeb8 <memcpy>:
 801aeb8:	440a      	add	r2, r1
 801aeba:	4291      	cmp	r1, r2
 801aebc:	f100 33ff 	add.w	r3, r0, #4294967295
 801aec0:	d100      	bne.n	801aec4 <memcpy+0xc>
 801aec2:	4770      	bx	lr
 801aec4:	b510      	push	{r4, lr}
 801aec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801aeca:	f803 4f01 	strb.w	r4, [r3, #1]!
 801aece:	4291      	cmp	r1, r2
 801aed0:	d1f9      	bne.n	801aec6 <memcpy+0xe>
 801aed2:	bd10      	pop	{r4, pc}

0801aed4 <memmove>:
 801aed4:	4288      	cmp	r0, r1
 801aed6:	b510      	push	{r4, lr}
 801aed8:	eb01 0402 	add.w	r4, r1, r2
 801aedc:	d902      	bls.n	801aee4 <memmove+0x10>
 801aede:	4284      	cmp	r4, r0
 801aee0:	4623      	mov	r3, r4
 801aee2:	d807      	bhi.n	801aef4 <memmove+0x20>
 801aee4:	1e43      	subs	r3, r0, #1
 801aee6:	42a1      	cmp	r1, r4
 801aee8:	d008      	beq.n	801aefc <memmove+0x28>
 801aeea:	f811 2b01 	ldrb.w	r2, [r1], #1
 801aeee:	f803 2f01 	strb.w	r2, [r3, #1]!
 801aef2:	e7f8      	b.n	801aee6 <memmove+0x12>
 801aef4:	4402      	add	r2, r0
 801aef6:	4601      	mov	r1, r0
 801aef8:	428a      	cmp	r2, r1
 801aefa:	d100      	bne.n	801aefe <memmove+0x2a>
 801aefc:	bd10      	pop	{r4, pc}
 801aefe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801af02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801af06:	e7f7      	b.n	801aef8 <memmove+0x24>

0801af08 <memset>:
 801af08:	4402      	add	r2, r0
 801af0a:	4603      	mov	r3, r0
 801af0c:	4293      	cmp	r3, r2
 801af0e:	d100      	bne.n	801af12 <memset+0xa>
 801af10:	4770      	bx	lr
 801af12:	f803 1b01 	strb.w	r1, [r3], #1
 801af16:	e7f9      	b.n	801af0c <memset+0x4>

0801af18 <_free_r>:
 801af18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801af1a:	2900      	cmp	r1, #0
 801af1c:	d044      	beq.n	801afa8 <_free_r+0x90>
 801af1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801af22:	9001      	str	r0, [sp, #4]
 801af24:	2b00      	cmp	r3, #0
 801af26:	f1a1 0404 	sub.w	r4, r1, #4
 801af2a:	bfb8      	it	lt
 801af2c:	18e4      	addlt	r4, r4, r3
 801af2e:	f003 fc99 	bl	801e864 <__malloc_lock>
 801af32:	4a1e      	ldr	r2, [pc, #120]	; (801afac <_free_r+0x94>)
 801af34:	9801      	ldr	r0, [sp, #4]
 801af36:	6813      	ldr	r3, [r2, #0]
 801af38:	b933      	cbnz	r3, 801af48 <_free_r+0x30>
 801af3a:	6063      	str	r3, [r4, #4]
 801af3c:	6014      	str	r4, [r2, #0]
 801af3e:	b003      	add	sp, #12
 801af40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801af44:	f003 bc94 	b.w	801e870 <__malloc_unlock>
 801af48:	42a3      	cmp	r3, r4
 801af4a:	d908      	bls.n	801af5e <_free_r+0x46>
 801af4c:	6825      	ldr	r5, [r4, #0]
 801af4e:	1961      	adds	r1, r4, r5
 801af50:	428b      	cmp	r3, r1
 801af52:	bf01      	itttt	eq
 801af54:	6819      	ldreq	r1, [r3, #0]
 801af56:	685b      	ldreq	r3, [r3, #4]
 801af58:	1949      	addeq	r1, r1, r5
 801af5a:	6021      	streq	r1, [r4, #0]
 801af5c:	e7ed      	b.n	801af3a <_free_r+0x22>
 801af5e:	461a      	mov	r2, r3
 801af60:	685b      	ldr	r3, [r3, #4]
 801af62:	b10b      	cbz	r3, 801af68 <_free_r+0x50>
 801af64:	42a3      	cmp	r3, r4
 801af66:	d9fa      	bls.n	801af5e <_free_r+0x46>
 801af68:	6811      	ldr	r1, [r2, #0]
 801af6a:	1855      	adds	r5, r2, r1
 801af6c:	42a5      	cmp	r5, r4
 801af6e:	d10b      	bne.n	801af88 <_free_r+0x70>
 801af70:	6824      	ldr	r4, [r4, #0]
 801af72:	4421      	add	r1, r4
 801af74:	1854      	adds	r4, r2, r1
 801af76:	42a3      	cmp	r3, r4
 801af78:	6011      	str	r1, [r2, #0]
 801af7a:	d1e0      	bne.n	801af3e <_free_r+0x26>
 801af7c:	681c      	ldr	r4, [r3, #0]
 801af7e:	685b      	ldr	r3, [r3, #4]
 801af80:	6053      	str	r3, [r2, #4]
 801af82:	4421      	add	r1, r4
 801af84:	6011      	str	r1, [r2, #0]
 801af86:	e7da      	b.n	801af3e <_free_r+0x26>
 801af88:	d902      	bls.n	801af90 <_free_r+0x78>
 801af8a:	230c      	movs	r3, #12
 801af8c:	6003      	str	r3, [r0, #0]
 801af8e:	e7d6      	b.n	801af3e <_free_r+0x26>
 801af90:	6825      	ldr	r5, [r4, #0]
 801af92:	1961      	adds	r1, r4, r5
 801af94:	428b      	cmp	r3, r1
 801af96:	bf04      	itt	eq
 801af98:	6819      	ldreq	r1, [r3, #0]
 801af9a:	685b      	ldreq	r3, [r3, #4]
 801af9c:	6063      	str	r3, [r4, #4]
 801af9e:	bf04      	itt	eq
 801afa0:	1949      	addeq	r1, r1, r5
 801afa2:	6021      	streq	r1, [r4, #0]
 801afa4:	6054      	str	r4, [r2, #4]
 801afa6:	e7ca      	b.n	801af3e <_free_r+0x26>
 801afa8:	b003      	add	sp, #12
 801afaa:	bd30      	pop	{r4, r5, pc}
 801afac:	2000360c 	.word	0x2000360c

0801afb0 <sbrk_aligned>:
 801afb0:	b570      	push	{r4, r5, r6, lr}
 801afb2:	4e0e      	ldr	r6, [pc, #56]	; (801afec <sbrk_aligned+0x3c>)
 801afb4:	460c      	mov	r4, r1
 801afb6:	6831      	ldr	r1, [r6, #0]
 801afb8:	4605      	mov	r5, r0
 801afba:	b911      	cbnz	r1, 801afc2 <sbrk_aligned+0x12>
 801afbc:	f000 ff94 	bl	801bee8 <_sbrk_r>
 801afc0:	6030      	str	r0, [r6, #0]
 801afc2:	4621      	mov	r1, r4
 801afc4:	4628      	mov	r0, r5
 801afc6:	f000 ff8f 	bl	801bee8 <_sbrk_r>
 801afca:	1c43      	adds	r3, r0, #1
 801afcc:	d00a      	beq.n	801afe4 <sbrk_aligned+0x34>
 801afce:	1cc4      	adds	r4, r0, #3
 801afd0:	f024 0403 	bic.w	r4, r4, #3
 801afd4:	42a0      	cmp	r0, r4
 801afd6:	d007      	beq.n	801afe8 <sbrk_aligned+0x38>
 801afd8:	1a21      	subs	r1, r4, r0
 801afda:	4628      	mov	r0, r5
 801afdc:	f000 ff84 	bl	801bee8 <_sbrk_r>
 801afe0:	3001      	adds	r0, #1
 801afe2:	d101      	bne.n	801afe8 <sbrk_aligned+0x38>
 801afe4:	f04f 34ff 	mov.w	r4, #4294967295
 801afe8:	4620      	mov	r0, r4
 801afea:	bd70      	pop	{r4, r5, r6, pc}
 801afec:	20003610 	.word	0x20003610

0801aff0 <_malloc_r>:
 801aff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aff4:	1ccd      	adds	r5, r1, #3
 801aff6:	f025 0503 	bic.w	r5, r5, #3
 801affa:	3508      	adds	r5, #8
 801affc:	2d0c      	cmp	r5, #12
 801affe:	bf38      	it	cc
 801b000:	250c      	movcc	r5, #12
 801b002:	2d00      	cmp	r5, #0
 801b004:	4607      	mov	r7, r0
 801b006:	db01      	blt.n	801b00c <_malloc_r+0x1c>
 801b008:	42a9      	cmp	r1, r5
 801b00a:	d905      	bls.n	801b018 <_malloc_r+0x28>
 801b00c:	230c      	movs	r3, #12
 801b00e:	603b      	str	r3, [r7, #0]
 801b010:	2600      	movs	r6, #0
 801b012:	4630      	mov	r0, r6
 801b014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b018:	4e2e      	ldr	r6, [pc, #184]	; (801b0d4 <_malloc_r+0xe4>)
 801b01a:	f003 fc23 	bl	801e864 <__malloc_lock>
 801b01e:	6833      	ldr	r3, [r6, #0]
 801b020:	461c      	mov	r4, r3
 801b022:	bb34      	cbnz	r4, 801b072 <_malloc_r+0x82>
 801b024:	4629      	mov	r1, r5
 801b026:	4638      	mov	r0, r7
 801b028:	f7ff ffc2 	bl	801afb0 <sbrk_aligned>
 801b02c:	1c43      	adds	r3, r0, #1
 801b02e:	4604      	mov	r4, r0
 801b030:	d14d      	bne.n	801b0ce <_malloc_r+0xde>
 801b032:	6834      	ldr	r4, [r6, #0]
 801b034:	4626      	mov	r6, r4
 801b036:	2e00      	cmp	r6, #0
 801b038:	d140      	bne.n	801b0bc <_malloc_r+0xcc>
 801b03a:	6823      	ldr	r3, [r4, #0]
 801b03c:	4631      	mov	r1, r6
 801b03e:	4638      	mov	r0, r7
 801b040:	eb04 0803 	add.w	r8, r4, r3
 801b044:	f000 ff50 	bl	801bee8 <_sbrk_r>
 801b048:	4580      	cmp	r8, r0
 801b04a:	d13a      	bne.n	801b0c2 <_malloc_r+0xd2>
 801b04c:	6821      	ldr	r1, [r4, #0]
 801b04e:	3503      	adds	r5, #3
 801b050:	1a6d      	subs	r5, r5, r1
 801b052:	f025 0503 	bic.w	r5, r5, #3
 801b056:	3508      	adds	r5, #8
 801b058:	2d0c      	cmp	r5, #12
 801b05a:	bf38      	it	cc
 801b05c:	250c      	movcc	r5, #12
 801b05e:	4629      	mov	r1, r5
 801b060:	4638      	mov	r0, r7
 801b062:	f7ff ffa5 	bl	801afb0 <sbrk_aligned>
 801b066:	3001      	adds	r0, #1
 801b068:	d02b      	beq.n	801b0c2 <_malloc_r+0xd2>
 801b06a:	6823      	ldr	r3, [r4, #0]
 801b06c:	442b      	add	r3, r5
 801b06e:	6023      	str	r3, [r4, #0]
 801b070:	e00e      	b.n	801b090 <_malloc_r+0xa0>
 801b072:	6822      	ldr	r2, [r4, #0]
 801b074:	1b52      	subs	r2, r2, r5
 801b076:	d41e      	bmi.n	801b0b6 <_malloc_r+0xc6>
 801b078:	2a0b      	cmp	r2, #11
 801b07a:	d916      	bls.n	801b0aa <_malloc_r+0xba>
 801b07c:	1961      	adds	r1, r4, r5
 801b07e:	42a3      	cmp	r3, r4
 801b080:	6025      	str	r5, [r4, #0]
 801b082:	bf18      	it	ne
 801b084:	6059      	strne	r1, [r3, #4]
 801b086:	6863      	ldr	r3, [r4, #4]
 801b088:	bf08      	it	eq
 801b08a:	6031      	streq	r1, [r6, #0]
 801b08c:	5162      	str	r2, [r4, r5]
 801b08e:	604b      	str	r3, [r1, #4]
 801b090:	4638      	mov	r0, r7
 801b092:	f104 060b 	add.w	r6, r4, #11
 801b096:	f003 fbeb 	bl	801e870 <__malloc_unlock>
 801b09a:	f026 0607 	bic.w	r6, r6, #7
 801b09e:	1d23      	adds	r3, r4, #4
 801b0a0:	1af2      	subs	r2, r6, r3
 801b0a2:	d0b6      	beq.n	801b012 <_malloc_r+0x22>
 801b0a4:	1b9b      	subs	r3, r3, r6
 801b0a6:	50a3      	str	r3, [r4, r2]
 801b0a8:	e7b3      	b.n	801b012 <_malloc_r+0x22>
 801b0aa:	6862      	ldr	r2, [r4, #4]
 801b0ac:	42a3      	cmp	r3, r4
 801b0ae:	bf0c      	ite	eq
 801b0b0:	6032      	streq	r2, [r6, #0]
 801b0b2:	605a      	strne	r2, [r3, #4]
 801b0b4:	e7ec      	b.n	801b090 <_malloc_r+0xa0>
 801b0b6:	4623      	mov	r3, r4
 801b0b8:	6864      	ldr	r4, [r4, #4]
 801b0ba:	e7b2      	b.n	801b022 <_malloc_r+0x32>
 801b0bc:	4634      	mov	r4, r6
 801b0be:	6876      	ldr	r6, [r6, #4]
 801b0c0:	e7b9      	b.n	801b036 <_malloc_r+0x46>
 801b0c2:	230c      	movs	r3, #12
 801b0c4:	603b      	str	r3, [r7, #0]
 801b0c6:	4638      	mov	r0, r7
 801b0c8:	f003 fbd2 	bl	801e870 <__malloc_unlock>
 801b0cc:	e7a1      	b.n	801b012 <_malloc_r+0x22>
 801b0ce:	6025      	str	r5, [r4, #0]
 801b0d0:	e7de      	b.n	801b090 <_malloc_r+0xa0>
 801b0d2:	bf00      	nop
 801b0d4:	2000360c 	.word	0x2000360c

0801b0d8 <__cvt>:
 801b0d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b0dc:	ec55 4b10 	vmov	r4, r5, d0
 801b0e0:	2d00      	cmp	r5, #0
 801b0e2:	460e      	mov	r6, r1
 801b0e4:	4619      	mov	r1, r3
 801b0e6:	462b      	mov	r3, r5
 801b0e8:	bfbb      	ittet	lt
 801b0ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801b0ee:	461d      	movlt	r5, r3
 801b0f0:	2300      	movge	r3, #0
 801b0f2:	232d      	movlt	r3, #45	; 0x2d
 801b0f4:	700b      	strb	r3, [r1, #0]
 801b0f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b0f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801b0fc:	4691      	mov	r9, r2
 801b0fe:	f023 0820 	bic.w	r8, r3, #32
 801b102:	bfbc      	itt	lt
 801b104:	4622      	movlt	r2, r4
 801b106:	4614      	movlt	r4, r2
 801b108:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801b10c:	d005      	beq.n	801b11a <__cvt+0x42>
 801b10e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801b112:	d100      	bne.n	801b116 <__cvt+0x3e>
 801b114:	3601      	adds	r6, #1
 801b116:	2102      	movs	r1, #2
 801b118:	e000      	b.n	801b11c <__cvt+0x44>
 801b11a:	2103      	movs	r1, #3
 801b11c:	ab03      	add	r3, sp, #12
 801b11e:	9301      	str	r3, [sp, #4]
 801b120:	ab02      	add	r3, sp, #8
 801b122:	9300      	str	r3, [sp, #0]
 801b124:	ec45 4b10 	vmov	d0, r4, r5
 801b128:	4653      	mov	r3, sl
 801b12a:	4632      	mov	r2, r6
 801b12c:	f001 fff8 	bl	801d120 <_dtoa_r>
 801b130:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801b134:	4607      	mov	r7, r0
 801b136:	d102      	bne.n	801b13e <__cvt+0x66>
 801b138:	f019 0f01 	tst.w	r9, #1
 801b13c:	d022      	beq.n	801b184 <__cvt+0xac>
 801b13e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801b142:	eb07 0906 	add.w	r9, r7, r6
 801b146:	d110      	bne.n	801b16a <__cvt+0x92>
 801b148:	783b      	ldrb	r3, [r7, #0]
 801b14a:	2b30      	cmp	r3, #48	; 0x30
 801b14c:	d10a      	bne.n	801b164 <__cvt+0x8c>
 801b14e:	2200      	movs	r2, #0
 801b150:	2300      	movs	r3, #0
 801b152:	4620      	mov	r0, r4
 801b154:	4629      	mov	r1, r5
 801b156:	f7e5 fccf 	bl	8000af8 <__aeabi_dcmpeq>
 801b15a:	b918      	cbnz	r0, 801b164 <__cvt+0x8c>
 801b15c:	f1c6 0601 	rsb	r6, r6, #1
 801b160:	f8ca 6000 	str.w	r6, [sl]
 801b164:	f8da 3000 	ldr.w	r3, [sl]
 801b168:	4499      	add	r9, r3
 801b16a:	2200      	movs	r2, #0
 801b16c:	2300      	movs	r3, #0
 801b16e:	4620      	mov	r0, r4
 801b170:	4629      	mov	r1, r5
 801b172:	f7e5 fcc1 	bl	8000af8 <__aeabi_dcmpeq>
 801b176:	b108      	cbz	r0, 801b17c <__cvt+0xa4>
 801b178:	f8cd 900c 	str.w	r9, [sp, #12]
 801b17c:	2230      	movs	r2, #48	; 0x30
 801b17e:	9b03      	ldr	r3, [sp, #12]
 801b180:	454b      	cmp	r3, r9
 801b182:	d307      	bcc.n	801b194 <__cvt+0xbc>
 801b184:	9b03      	ldr	r3, [sp, #12]
 801b186:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b188:	1bdb      	subs	r3, r3, r7
 801b18a:	4638      	mov	r0, r7
 801b18c:	6013      	str	r3, [r2, #0]
 801b18e:	b004      	add	sp, #16
 801b190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b194:	1c59      	adds	r1, r3, #1
 801b196:	9103      	str	r1, [sp, #12]
 801b198:	701a      	strb	r2, [r3, #0]
 801b19a:	e7f0      	b.n	801b17e <__cvt+0xa6>

0801b19c <__exponent>:
 801b19c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b19e:	4603      	mov	r3, r0
 801b1a0:	2900      	cmp	r1, #0
 801b1a2:	bfb8      	it	lt
 801b1a4:	4249      	neglt	r1, r1
 801b1a6:	f803 2b02 	strb.w	r2, [r3], #2
 801b1aa:	bfb4      	ite	lt
 801b1ac:	222d      	movlt	r2, #45	; 0x2d
 801b1ae:	222b      	movge	r2, #43	; 0x2b
 801b1b0:	2909      	cmp	r1, #9
 801b1b2:	7042      	strb	r2, [r0, #1]
 801b1b4:	dd2a      	ble.n	801b20c <__exponent+0x70>
 801b1b6:	f10d 0407 	add.w	r4, sp, #7
 801b1ba:	46a4      	mov	ip, r4
 801b1bc:	270a      	movs	r7, #10
 801b1be:	46a6      	mov	lr, r4
 801b1c0:	460a      	mov	r2, r1
 801b1c2:	fb91 f6f7 	sdiv	r6, r1, r7
 801b1c6:	fb07 1516 	mls	r5, r7, r6, r1
 801b1ca:	3530      	adds	r5, #48	; 0x30
 801b1cc:	2a63      	cmp	r2, #99	; 0x63
 801b1ce:	f104 34ff 	add.w	r4, r4, #4294967295
 801b1d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801b1d6:	4631      	mov	r1, r6
 801b1d8:	dcf1      	bgt.n	801b1be <__exponent+0x22>
 801b1da:	3130      	adds	r1, #48	; 0x30
 801b1dc:	f1ae 0502 	sub.w	r5, lr, #2
 801b1e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 801b1e4:	1c44      	adds	r4, r0, #1
 801b1e6:	4629      	mov	r1, r5
 801b1e8:	4561      	cmp	r1, ip
 801b1ea:	d30a      	bcc.n	801b202 <__exponent+0x66>
 801b1ec:	f10d 0209 	add.w	r2, sp, #9
 801b1f0:	eba2 020e 	sub.w	r2, r2, lr
 801b1f4:	4565      	cmp	r5, ip
 801b1f6:	bf88      	it	hi
 801b1f8:	2200      	movhi	r2, #0
 801b1fa:	4413      	add	r3, r2
 801b1fc:	1a18      	subs	r0, r3, r0
 801b1fe:	b003      	add	sp, #12
 801b200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b202:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b206:	f804 2f01 	strb.w	r2, [r4, #1]!
 801b20a:	e7ed      	b.n	801b1e8 <__exponent+0x4c>
 801b20c:	2330      	movs	r3, #48	; 0x30
 801b20e:	3130      	adds	r1, #48	; 0x30
 801b210:	7083      	strb	r3, [r0, #2]
 801b212:	70c1      	strb	r1, [r0, #3]
 801b214:	1d03      	adds	r3, r0, #4
 801b216:	e7f1      	b.n	801b1fc <__exponent+0x60>

0801b218 <_printf_float>:
 801b218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b21c:	ed2d 8b02 	vpush	{d8}
 801b220:	b08d      	sub	sp, #52	; 0x34
 801b222:	460c      	mov	r4, r1
 801b224:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801b228:	4616      	mov	r6, r2
 801b22a:	461f      	mov	r7, r3
 801b22c:	4605      	mov	r5, r0
 801b22e:	f003 fa9d 	bl	801e76c <_localeconv_r>
 801b232:	f8d0 a000 	ldr.w	sl, [r0]
 801b236:	4650      	mov	r0, sl
 801b238:	f7e4 ffdc 	bl	80001f4 <strlen>
 801b23c:	2300      	movs	r3, #0
 801b23e:	930a      	str	r3, [sp, #40]	; 0x28
 801b240:	6823      	ldr	r3, [r4, #0]
 801b242:	9305      	str	r3, [sp, #20]
 801b244:	f8d8 3000 	ldr.w	r3, [r8]
 801b248:	f894 b018 	ldrb.w	fp, [r4, #24]
 801b24c:	3307      	adds	r3, #7
 801b24e:	f023 0307 	bic.w	r3, r3, #7
 801b252:	f103 0208 	add.w	r2, r3, #8
 801b256:	f8c8 2000 	str.w	r2, [r8]
 801b25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b25e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801b262:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801b266:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801b26a:	9307      	str	r3, [sp, #28]
 801b26c:	f8cd 8018 	str.w	r8, [sp, #24]
 801b270:	ee08 0a10 	vmov	s16, r0
 801b274:	4b9f      	ldr	r3, [pc, #636]	; (801b4f4 <_printf_float+0x2dc>)
 801b276:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b27a:	f04f 32ff 	mov.w	r2, #4294967295
 801b27e:	f7e5 fc6d 	bl	8000b5c <__aeabi_dcmpun>
 801b282:	bb88      	cbnz	r0, 801b2e8 <_printf_float+0xd0>
 801b284:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b288:	4b9a      	ldr	r3, [pc, #616]	; (801b4f4 <_printf_float+0x2dc>)
 801b28a:	f04f 32ff 	mov.w	r2, #4294967295
 801b28e:	f7e5 fc47 	bl	8000b20 <__aeabi_dcmple>
 801b292:	bb48      	cbnz	r0, 801b2e8 <_printf_float+0xd0>
 801b294:	2200      	movs	r2, #0
 801b296:	2300      	movs	r3, #0
 801b298:	4640      	mov	r0, r8
 801b29a:	4649      	mov	r1, r9
 801b29c:	f7e5 fc36 	bl	8000b0c <__aeabi_dcmplt>
 801b2a0:	b110      	cbz	r0, 801b2a8 <_printf_float+0x90>
 801b2a2:	232d      	movs	r3, #45	; 0x2d
 801b2a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b2a8:	4b93      	ldr	r3, [pc, #588]	; (801b4f8 <_printf_float+0x2e0>)
 801b2aa:	4894      	ldr	r0, [pc, #592]	; (801b4fc <_printf_float+0x2e4>)
 801b2ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801b2b0:	bf94      	ite	ls
 801b2b2:	4698      	movls	r8, r3
 801b2b4:	4680      	movhi	r8, r0
 801b2b6:	2303      	movs	r3, #3
 801b2b8:	6123      	str	r3, [r4, #16]
 801b2ba:	9b05      	ldr	r3, [sp, #20]
 801b2bc:	f023 0204 	bic.w	r2, r3, #4
 801b2c0:	6022      	str	r2, [r4, #0]
 801b2c2:	f04f 0900 	mov.w	r9, #0
 801b2c6:	9700      	str	r7, [sp, #0]
 801b2c8:	4633      	mov	r3, r6
 801b2ca:	aa0b      	add	r2, sp, #44	; 0x2c
 801b2cc:	4621      	mov	r1, r4
 801b2ce:	4628      	mov	r0, r5
 801b2d0:	f000 f9d8 	bl	801b684 <_printf_common>
 801b2d4:	3001      	adds	r0, #1
 801b2d6:	f040 8090 	bne.w	801b3fa <_printf_float+0x1e2>
 801b2da:	f04f 30ff 	mov.w	r0, #4294967295
 801b2de:	b00d      	add	sp, #52	; 0x34
 801b2e0:	ecbd 8b02 	vpop	{d8}
 801b2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2e8:	4642      	mov	r2, r8
 801b2ea:	464b      	mov	r3, r9
 801b2ec:	4640      	mov	r0, r8
 801b2ee:	4649      	mov	r1, r9
 801b2f0:	f7e5 fc34 	bl	8000b5c <__aeabi_dcmpun>
 801b2f4:	b140      	cbz	r0, 801b308 <_printf_float+0xf0>
 801b2f6:	464b      	mov	r3, r9
 801b2f8:	2b00      	cmp	r3, #0
 801b2fa:	bfbc      	itt	lt
 801b2fc:	232d      	movlt	r3, #45	; 0x2d
 801b2fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801b302:	487f      	ldr	r0, [pc, #508]	; (801b500 <_printf_float+0x2e8>)
 801b304:	4b7f      	ldr	r3, [pc, #508]	; (801b504 <_printf_float+0x2ec>)
 801b306:	e7d1      	b.n	801b2ac <_printf_float+0x94>
 801b308:	6863      	ldr	r3, [r4, #4]
 801b30a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801b30e:	9206      	str	r2, [sp, #24]
 801b310:	1c5a      	adds	r2, r3, #1
 801b312:	d13f      	bne.n	801b394 <_printf_float+0x17c>
 801b314:	2306      	movs	r3, #6
 801b316:	6063      	str	r3, [r4, #4]
 801b318:	9b05      	ldr	r3, [sp, #20]
 801b31a:	6861      	ldr	r1, [r4, #4]
 801b31c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801b320:	2300      	movs	r3, #0
 801b322:	9303      	str	r3, [sp, #12]
 801b324:	ab0a      	add	r3, sp, #40	; 0x28
 801b326:	e9cd b301 	strd	fp, r3, [sp, #4]
 801b32a:	ab09      	add	r3, sp, #36	; 0x24
 801b32c:	ec49 8b10 	vmov	d0, r8, r9
 801b330:	9300      	str	r3, [sp, #0]
 801b332:	6022      	str	r2, [r4, #0]
 801b334:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801b338:	4628      	mov	r0, r5
 801b33a:	f7ff fecd 	bl	801b0d8 <__cvt>
 801b33e:	9b06      	ldr	r3, [sp, #24]
 801b340:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b342:	2b47      	cmp	r3, #71	; 0x47
 801b344:	4680      	mov	r8, r0
 801b346:	d108      	bne.n	801b35a <_printf_float+0x142>
 801b348:	1cc8      	adds	r0, r1, #3
 801b34a:	db02      	blt.n	801b352 <_printf_float+0x13a>
 801b34c:	6863      	ldr	r3, [r4, #4]
 801b34e:	4299      	cmp	r1, r3
 801b350:	dd41      	ble.n	801b3d6 <_printf_float+0x1be>
 801b352:	f1ab 0b02 	sub.w	fp, fp, #2
 801b356:	fa5f fb8b 	uxtb.w	fp, fp
 801b35a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801b35e:	d820      	bhi.n	801b3a2 <_printf_float+0x18a>
 801b360:	3901      	subs	r1, #1
 801b362:	465a      	mov	r2, fp
 801b364:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801b368:	9109      	str	r1, [sp, #36]	; 0x24
 801b36a:	f7ff ff17 	bl	801b19c <__exponent>
 801b36e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b370:	1813      	adds	r3, r2, r0
 801b372:	2a01      	cmp	r2, #1
 801b374:	4681      	mov	r9, r0
 801b376:	6123      	str	r3, [r4, #16]
 801b378:	dc02      	bgt.n	801b380 <_printf_float+0x168>
 801b37a:	6822      	ldr	r2, [r4, #0]
 801b37c:	07d2      	lsls	r2, r2, #31
 801b37e:	d501      	bpl.n	801b384 <_printf_float+0x16c>
 801b380:	3301      	adds	r3, #1
 801b382:	6123      	str	r3, [r4, #16]
 801b384:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801b388:	2b00      	cmp	r3, #0
 801b38a:	d09c      	beq.n	801b2c6 <_printf_float+0xae>
 801b38c:	232d      	movs	r3, #45	; 0x2d
 801b38e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b392:	e798      	b.n	801b2c6 <_printf_float+0xae>
 801b394:	9a06      	ldr	r2, [sp, #24]
 801b396:	2a47      	cmp	r2, #71	; 0x47
 801b398:	d1be      	bne.n	801b318 <_printf_float+0x100>
 801b39a:	2b00      	cmp	r3, #0
 801b39c:	d1bc      	bne.n	801b318 <_printf_float+0x100>
 801b39e:	2301      	movs	r3, #1
 801b3a0:	e7b9      	b.n	801b316 <_printf_float+0xfe>
 801b3a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801b3a6:	d118      	bne.n	801b3da <_printf_float+0x1c2>
 801b3a8:	2900      	cmp	r1, #0
 801b3aa:	6863      	ldr	r3, [r4, #4]
 801b3ac:	dd0b      	ble.n	801b3c6 <_printf_float+0x1ae>
 801b3ae:	6121      	str	r1, [r4, #16]
 801b3b0:	b913      	cbnz	r3, 801b3b8 <_printf_float+0x1a0>
 801b3b2:	6822      	ldr	r2, [r4, #0]
 801b3b4:	07d0      	lsls	r0, r2, #31
 801b3b6:	d502      	bpl.n	801b3be <_printf_float+0x1a6>
 801b3b8:	3301      	adds	r3, #1
 801b3ba:	440b      	add	r3, r1
 801b3bc:	6123      	str	r3, [r4, #16]
 801b3be:	65a1      	str	r1, [r4, #88]	; 0x58
 801b3c0:	f04f 0900 	mov.w	r9, #0
 801b3c4:	e7de      	b.n	801b384 <_printf_float+0x16c>
 801b3c6:	b913      	cbnz	r3, 801b3ce <_printf_float+0x1b6>
 801b3c8:	6822      	ldr	r2, [r4, #0]
 801b3ca:	07d2      	lsls	r2, r2, #31
 801b3cc:	d501      	bpl.n	801b3d2 <_printf_float+0x1ba>
 801b3ce:	3302      	adds	r3, #2
 801b3d0:	e7f4      	b.n	801b3bc <_printf_float+0x1a4>
 801b3d2:	2301      	movs	r3, #1
 801b3d4:	e7f2      	b.n	801b3bc <_printf_float+0x1a4>
 801b3d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801b3da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b3dc:	4299      	cmp	r1, r3
 801b3de:	db05      	blt.n	801b3ec <_printf_float+0x1d4>
 801b3e0:	6823      	ldr	r3, [r4, #0]
 801b3e2:	6121      	str	r1, [r4, #16]
 801b3e4:	07d8      	lsls	r0, r3, #31
 801b3e6:	d5ea      	bpl.n	801b3be <_printf_float+0x1a6>
 801b3e8:	1c4b      	adds	r3, r1, #1
 801b3ea:	e7e7      	b.n	801b3bc <_printf_float+0x1a4>
 801b3ec:	2900      	cmp	r1, #0
 801b3ee:	bfd4      	ite	le
 801b3f0:	f1c1 0202 	rsble	r2, r1, #2
 801b3f4:	2201      	movgt	r2, #1
 801b3f6:	4413      	add	r3, r2
 801b3f8:	e7e0      	b.n	801b3bc <_printf_float+0x1a4>
 801b3fa:	6823      	ldr	r3, [r4, #0]
 801b3fc:	055a      	lsls	r2, r3, #21
 801b3fe:	d407      	bmi.n	801b410 <_printf_float+0x1f8>
 801b400:	6923      	ldr	r3, [r4, #16]
 801b402:	4642      	mov	r2, r8
 801b404:	4631      	mov	r1, r6
 801b406:	4628      	mov	r0, r5
 801b408:	47b8      	blx	r7
 801b40a:	3001      	adds	r0, #1
 801b40c:	d12c      	bne.n	801b468 <_printf_float+0x250>
 801b40e:	e764      	b.n	801b2da <_printf_float+0xc2>
 801b410:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801b414:	f240 80e0 	bls.w	801b5d8 <_printf_float+0x3c0>
 801b418:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801b41c:	2200      	movs	r2, #0
 801b41e:	2300      	movs	r3, #0
 801b420:	f7e5 fb6a 	bl	8000af8 <__aeabi_dcmpeq>
 801b424:	2800      	cmp	r0, #0
 801b426:	d034      	beq.n	801b492 <_printf_float+0x27a>
 801b428:	4a37      	ldr	r2, [pc, #220]	; (801b508 <_printf_float+0x2f0>)
 801b42a:	2301      	movs	r3, #1
 801b42c:	4631      	mov	r1, r6
 801b42e:	4628      	mov	r0, r5
 801b430:	47b8      	blx	r7
 801b432:	3001      	adds	r0, #1
 801b434:	f43f af51 	beq.w	801b2da <_printf_float+0xc2>
 801b438:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b43c:	429a      	cmp	r2, r3
 801b43e:	db02      	blt.n	801b446 <_printf_float+0x22e>
 801b440:	6823      	ldr	r3, [r4, #0]
 801b442:	07d8      	lsls	r0, r3, #31
 801b444:	d510      	bpl.n	801b468 <_printf_float+0x250>
 801b446:	ee18 3a10 	vmov	r3, s16
 801b44a:	4652      	mov	r2, sl
 801b44c:	4631      	mov	r1, r6
 801b44e:	4628      	mov	r0, r5
 801b450:	47b8      	blx	r7
 801b452:	3001      	adds	r0, #1
 801b454:	f43f af41 	beq.w	801b2da <_printf_float+0xc2>
 801b458:	f04f 0800 	mov.w	r8, #0
 801b45c:	f104 091a 	add.w	r9, r4, #26
 801b460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b462:	3b01      	subs	r3, #1
 801b464:	4543      	cmp	r3, r8
 801b466:	dc09      	bgt.n	801b47c <_printf_float+0x264>
 801b468:	6823      	ldr	r3, [r4, #0]
 801b46a:	079b      	lsls	r3, r3, #30
 801b46c:	f100 8105 	bmi.w	801b67a <_printf_float+0x462>
 801b470:	68e0      	ldr	r0, [r4, #12]
 801b472:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b474:	4298      	cmp	r0, r3
 801b476:	bfb8      	it	lt
 801b478:	4618      	movlt	r0, r3
 801b47a:	e730      	b.n	801b2de <_printf_float+0xc6>
 801b47c:	2301      	movs	r3, #1
 801b47e:	464a      	mov	r2, r9
 801b480:	4631      	mov	r1, r6
 801b482:	4628      	mov	r0, r5
 801b484:	47b8      	blx	r7
 801b486:	3001      	adds	r0, #1
 801b488:	f43f af27 	beq.w	801b2da <_printf_float+0xc2>
 801b48c:	f108 0801 	add.w	r8, r8, #1
 801b490:	e7e6      	b.n	801b460 <_printf_float+0x248>
 801b492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b494:	2b00      	cmp	r3, #0
 801b496:	dc39      	bgt.n	801b50c <_printf_float+0x2f4>
 801b498:	4a1b      	ldr	r2, [pc, #108]	; (801b508 <_printf_float+0x2f0>)
 801b49a:	2301      	movs	r3, #1
 801b49c:	4631      	mov	r1, r6
 801b49e:	4628      	mov	r0, r5
 801b4a0:	47b8      	blx	r7
 801b4a2:	3001      	adds	r0, #1
 801b4a4:	f43f af19 	beq.w	801b2da <_printf_float+0xc2>
 801b4a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b4ac:	4313      	orrs	r3, r2
 801b4ae:	d102      	bne.n	801b4b6 <_printf_float+0x29e>
 801b4b0:	6823      	ldr	r3, [r4, #0]
 801b4b2:	07d9      	lsls	r1, r3, #31
 801b4b4:	d5d8      	bpl.n	801b468 <_printf_float+0x250>
 801b4b6:	ee18 3a10 	vmov	r3, s16
 801b4ba:	4652      	mov	r2, sl
 801b4bc:	4631      	mov	r1, r6
 801b4be:	4628      	mov	r0, r5
 801b4c0:	47b8      	blx	r7
 801b4c2:	3001      	adds	r0, #1
 801b4c4:	f43f af09 	beq.w	801b2da <_printf_float+0xc2>
 801b4c8:	f04f 0900 	mov.w	r9, #0
 801b4cc:	f104 0a1a 	add.w	sl, r4, #26
 801b4d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b4d2:	425b      	negs	r3, r3
 801b4d4:	454b      	cmp	r3, r9
 801b4d6:	dc01      	bgt.n	801b4dc <_printf_float+0x2c4>
 801b4d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b4da:	e792      	b.n	801b402 <_printf_float+0x1ea>
 801b4dc:	2301      	movs	r3, #1
 801b4de:	4652      	mov	r2, sl
 801b4e0:	4631      	mov	r1, r6
 801b4e2:	4628      	mov	r0, r5
 801b4e4:	47b8      	blx	r7
 801b4e6:	3001      	adds	r0, #1
 801b4e8:	f43f aef7 	beq.w	801b2da <_printf_float+0xc2>
 801b4ec:	f109 0901 	add.w	r9, r9, #1
 801b4f0:	e7ee      	b.n	801b4d0 <_printf_float+0x2b8>
 801b4f2:	bf00      	nop
 801b4f4:	7fefffff 	.word	0x7fefffff
 801b4f8:	08021874 	.word	0x08021874
 801b4fc:	08021878 	.word	0x08021878
 801b500:	08021880 	.word	0x08021880
 801b504:	0802187c 	.word	0x0802187c
 801b508:	08021884 	.word	0x08021884
 801b50c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b50e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b510:	429a      	cmp	r2, r3
 801b512:	bfa8      	it	ge
 801b514:	461a      	movge	r2, r3
 801b516:	2a00      	cmp	r2, #0
 801b518:	4691      	mov	r9, r2
 801b51a:	dc37      	bgt.n	801b58c <_printf_float+0x374>
 801b51c:	f04f 0b00 	mov.w	fp, #0
 801b520:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b524:	f104 021a 	add.w	r2, r4, #26
 801b528:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b52a:	9305      	str	r3, [sp, #20]
 801b52c:	eba3 0309 	sub.w	r3, r3, r9
 801b530:	455b      	cmp	r3, fp
 801b532:	dc33      	bgt.n	801b59c <_printf_float+0x384>
 801b534:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b538:	429a      	cmp	r2, r3
 801b53a:	db3b      	blt.n	801b5b4 <_printf_float+0x39c>
 801b53c:	6823      	ldr	r3, [r4, #0]
 801b53e:	07da      	lsls	r2, r3, #31
 801b540:	d438      	bmi.n	801b5b4 <_printf_float+0x39c>
 801b542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b544:	9a05      	ldr	r2, [sp, #20]
 801b546:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b548:	1a9a      	subs	r2, r3, r2
 801b54a:	eba3 0901 	sub.w	r9, r3, r1
 801b54e:	4591      	cmp	r9, r2
 801b550:	bfa8      	it	ge
 801b552:	4691      	movge	r9, r2
 801b554:	f1b9 0f00 	cmp.w	r9, #0
 801b558:	dc35      	bgt.n	801b5c6 <_printf_float+0x3ae>
 801b55a:	f04f 0800 	mov.w	r8, #0
 801b55e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b562:	f104 0a1a 	add.w	sl, r4, #26
 801b566:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b56a:	1a9b      	subs	r3, r3, r2
 801b56c:	eba3 0309 	sub.w	r3, r3, r9
 801b570:	4543      	cmp	r3, r8
 801b572:	f77f af79 	ble.w	801b468 <_printf_float+0x250>
 801b576:	2301      	movs	r3, #1
 801b578:	4652      	mov	r2, sl
 801b57a:	4631      	mov	r1, r6
 801b57c:	4628      	mov	r0, r5
 801b57e:	47b8      	blx	r7
 801b580:	3001      	adds	r0, #1
 801b582:	f43f aeaa 	beq.w	801b2da <_printf_float+0xc2>
 801b586:	f108 0801 	add.w	r8, r8, #1
 801b58a:	e7ec      	b.n	801b566 <_printf_float+0x34e>
 801b58c:	4613      	mov	r3, r2
 801b58e:	4631      	mov	r1, r6
 801b590:	4642      	mov	r2, r8
 801b592:	4628      	mov	r0, r5
 801b594:	47b8      	blx	r7
 801b596:	3001      	adds	r0, #1
 801b598:	d1c0      	bne.n	801b51c <_printf_float+0x304>
 801b59a:	e69e      	b.n	801b2da <_printf_float+0xc2>
 801b59c:	2301      	movs	r3, #1
 801b59e:	4631      	mov	r1, r6
 801b5a0:	4628      	mov	r0, r5
 801b5a2:	9205      	str	r2, [sp, #20]
 801b5a4:	47b8      	blx	r7
 801b5a6:	3001      	adds	r0, #1
 801b5a8:	f43f ae97 	beq.w	801b2da <_printf_float+0xc2>
 801b5ac:	9a05      	ldr	r2, [sp, #20]
 801b5ae:	f10b 0b01 	add.w	fp, fp, #1
 801b5b2:	e7b9      	b.n	801b528 <_printf_float+0x310>
 801b5b4:	ee18 3a10 	vmov	r3, s16
 801b5b8:	4652      	mov	r2, sl
 801b5ba:	4631      	mov	r1, r6
 801b5bc:	4628      	mov	r0, r5
 801b5be:	47b8      	blx	r7
 801b5c0:	3001      	adds	r0, #1
 801b5c2:	d1be      	bne.n	801b542 <_printf_float+0x32a>
 801b5c4:	e689      	b.n	801b2da <_printf_float+0xc2>
 801b5c6:	9a05      	ldr	r2, [sp, #20]
 801b5c8:	464b      	mov	r3, r9
 801b5ca:	4442      	add	r2, r8
 801b5cc:	4631      	mov	r1, r6
 801b5ce:	4628      	mov	r0, r5
 801b5d0:	47b8      	blx	r7
 801b5d2:	3001      	adds	r0, #1
 801b5d4:	d1c1      	bne.n	801b55a <_printf_float+0x342>
 801b5d6:	e680      	b.n	801b2da <_printf_float+0xc2>
 801b5d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b5da:	2a01      	cmp	r2, #1
 801b5dc:	dc01      	bgt.n	801b5e2 <_printf_float+0x3ca>
 801b5de:	07db      	lsls	r3, r3, #31
 801b5e0:	d538      	bpl.n	801b654 <_printf_float+0x43c>
 801b5e2:	2301      	movs	r3, #1
 801b5e4:	4642      	mov	r2, r8
 801b5e6:	4631      	mov	r1, r6
 801b5e8:	4628      	mov	r0, r5
 801b5ea:	47b8      	blx	r7
 801b5ec:	3001      	adds	r0, #1
 801b5ee:	f43f ae74 	beq.w	801b2da <_printf_float+0xc2>
 801b5f2:	ee18 3a10 	vmov	r3, s16
 801b5f6:	4652      	mov	r2, sl
 801b5f8:	4631      	mov	r1, r6
 801b5fa:	4628      	mov	r0, r5
 801b5fc:	47b8      	blx	r7
 801b5fe:	3001      	adds	r0, #1
 801b600:	f43f ae6b 	beq.w	801b2da <_printf_float+0xc2>
 801b604:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801b608:	2200      	movs	r2, #0
 801b60a:	2300      	movs	r3, #0
 801b60c:	f7e5 fa74 	bl	8000af8 <__aeabi_dcmpeq>
 801b610:	b9d8      	cbnz	r0, 801b64a <_printf_float+0x432>
 801b612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b614:	f108 0201 	add.w	r2, r8, #1
 801b618:	3b01      	subs	r3, #1
 801b61a:	4631      	mov	r1, r6
 801b61c:	4628      	mov	r0, r5
 801b61e:	47b8      	blx	r7
 801b620:	3001      	adds	r0, #1
 801b622:	d10e      	bne.n	801b642 <_printf_float+0x42a>
 801b624:	e659      	b.n	801b2da <_printf_float+0xc2>
 801b626:	2301      	movs	r3, #1
 801b628:	4652      	mov	r2, sl
 801b62a:	4631      	mov	r1, r6
 801b62c:	4628      	mov	r0, r5
 801b62e:	47b8      	blx	r7
 801b630:	3001      	adds	r0, #1
 801b632:	f43f ae52 	beq.w	801b2da <_printf_float+0xc2>
 801b636:	f108 0801 	add.w	r8, r8, #1
 801b63a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b63c:	3b01      	subs	r3, #1
 801b63e:	4543      	cmp	r3, r8
 801b640:	dcf1      	bgt.n	801b626 <_printf_float+0x40e>
 801b642:	464b      	mov	r3, r9
 801b644:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b648:	e6dc      	b.n	801b404 <_printf_float+0x1ec>
 801b64a:	f04f 0800 	mov.w	r8, #0
 801b64e:	f104 0a1a 	add.w	sl, r4, #26
 801b652:	e7f2      	b.n	801b63a <_printf_float+0x422>
 801b654:	2301      	movs	r3, #1
 801b656:	4642      	mov	r2, r8
 801b658:	e7df      	b.n	801b61a <_printf_float+0x402>
 801b65a:	2301      	movs	r3, #1
 801b65c:	464a      	mov	r2, r9
 801b65e:	4631      	mov	r1, r6
 801b660:	4628      	mov	r0, r5
 801b662:	47b8      	blx	r7
 801b664:	3001      	adds	r0, #1
 801b666:	f43f ae38 	beq.w	801b2da <_printf_float+0xc2>
 801b66a:	f108 0801 	add.w	r8, r8, #1
 801b66e:	68e3      	ldr	r3, [r4, #12]
 801b670:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b672:	1a5b      	subs	r3, r3, r1
 801b674:	4543      	cmp	r3, r8
 801b676:	dcf0      	bgt.n	801b65a <_printf_float+0x442>
 801b678:	e6fa      	b.n	801b470 <_printf_float+0x258>
 801b67a:	f04f 0800 	mov.w	r8, #0
 801b67e:	f104 0919 	add.w	r9, r4, #25
 801b682:	e7f4      	b.n	801b66e <_printf_float+0x456>

0801b684 <_printf_common>:
 801b684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b688:	4616      	mov	r6, r2
 801b68a:	4699      	mov	r9, r3
 801b68c:	688a      	ldr	r2, [r1, #8]
 801b68e:	690b      	ldr	r3, [r1, #16]
 801b690:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b694:	4293      	cmp	r3, r2
 801b696:	bfb8      	it	lt
 801b698:	4613      	movlt	r3, r2
 801b69a:	6033      	str	r3, [r6, #0]
 801b69c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b6a0:	4607      	mov	r7, r0
 801b6a2:	460c      	mov	r4, r1
 801b6a4:	b10a      	cbz	r2, 801b6aa <_printf_common+0x26>
 801b6a6:	3301      	adds	r3, #1
 801b6a8:	6033      	str	r3, [r6, #0]
 801b6aa:	6823      	ldr	r3, [r4, #0]
 801b6ac:	0699      	lsls	r1, r3, #26
 801b6ae:	bf42      	ittt	mi
 801b6b0:	6833      	ldrmi	r3, [r6, #0]
 801b6b2:	3302      	addmi	r3, #2
 801b6b4:	6033      	strmi	r3, [r6, #0]
 801b6b6:	6825      	ldr	r5, [r4, #0]
 801b6b8:	f015 0506 	ands.w	r5, r5, #6
 801b6bc:	d106      	bne.n	801b6cc <_printf_common+0x48>
 801b6be:	f104 0a19 	add.w	sl, r4, #25
 801b6c2:	68e3      	ldr	r3, [r4, #12]
 801b6c4:	6832      	ldr	r2, [r6, #0]
 801b6c6:	1a9b      	subs	r3, r3, r2
 801b6c8:	42ab      	cmp	r3, r5
 801b6ca:	dc26      	bgt.n	801b71a <_printf_common+0x96>
 801b6cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b6d0:	1e13      	subs	r3, r2, #0
 801b6d2:	6822      	ldr	r2, [r4, #0]
 801b6d4:	bf18      	it	ne
 801b6d6:	2301      	movne	r3, #1
 801b6d8:	0692      	lsls	r2, r2, #26
 801b6da:	d42b      	bmi.n	801b734 <_printf_common+0xb0>
 801b6dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b6e0:	4649      	mov	r1, r9
 801b6e2:	4638      	mov	r0, r7
 801b6e4:	47c0      	blx	r8
 801b6e6:	3001      	adds	r0, #1
 801b6e8:	d01e      	beq.n	801b728 <_printf_common+0xa4>
 801b6ea:	6823      	ldr	r3, [r4, #0]
 801b6ec:	68e5      	ldr	r5, [r4, #12]
 801b6ee:	6832      	ldr	r2, [r6, #0]
 801b6f0:	f003 0306 	and.w	r3, r3, #6
 801b6f4:	2b04      	cmp	r3, #4
 801b6f6:	bf08      	it	eq
 801b6f8:	1aad      	subeq	r5, r5, r2
 801b6fa:	68a3      	ldr	r3, [r4, #8]
 801b6fc:	6922      	ldr	r2, [r4, #16]
 801b6fe:	bf0c      	ite	eq
 801b700:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b704:	2500      	movne	r5, #0
 801b706:	4293      	cmp	r3, r2
 801b708:	bfc4      	itt	gt
 801b70a:	1a9b      	subgt	r3, r3, r2
 801b70c:	18ed      	addgt	r5, r5, r3
 801b70e:	2600      	movs	r6, #0
 801b710:	341a      	adds	r4, #26
 801b712:	42b5      	cmp	r5, r6
 801b714:	d11a      	bne.n	801b74c <_printf_common+0xc8>
 801b716:	2000      	movs	r0, #0
 801b718:	e008      	b.n	801b72c <_printf_common+0xa8>
 801b71a:	2301      	movs	r3, #1
 801b71c:	4652      	mov	r2, sl
 801b71e:	4649      	mov	r1, r9
 801b720:	4638      	mov	r0, r7
 801b722:	47c0      	blx	r8
 801b724:	3001      	adds	r0, #1
 801b726:	d103      	bne.n	801b730 <_printf_common+0xac>
 801b728:	f04f 30ff 	mov.w	r0, #4294967295
 801b72c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b730:	3501      	adds	r5, #1
 801b732:	e7c6      	b.n	801b6c2 <_printf_common+0x3e>
 801b734:	18e1      	adds	r1, r4, r3
 801b736:	1c5a      	adds	r2, r3, #1
 801b738:	2030      	movs	r0, #48	; 0x30
 801b73a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b73e:	4422      	add	r2, r4
 801b740:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b744:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b748:	3302      	adds	r3, #2
 801b74a:	e7c7      	b.n	801b6dc <_printf_common+0x58>
 801b74c:	2301      	movs	r3, #1
 801b74e:	4622      	mov	r2, r4
 801b750:	4649      	mov	r1, r9
 801b752:	4638      	mov	r0, r7
 801b754:	47c0      	blx	r8
 801b756:	3001      	adds	r0, #1
 801b758:	d0e6      	beq.n	801b728 <_printf_common+0xa4>
 801b75a:	3601      	adds	r6, #1
 801b75c:	e7d9      	b.n	801b712 <_printf_common+0x8e>
	...

0801b760 <_printf_i>:
 801b760:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b764:	7e0f      	ldrb	r7, [r1, #24]
 801b766:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b768:	2f78      	cmp	r7, #120	; 0x78
 801b76a:	4691      	mov	r9, r2
 801b76c:	4680      	mov	r8, r0
 801b76e:	460c      	mov	r4, r1
 801b770:	469a      	mov	sl, r3
 801b772:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b776:	d807      	bhi.n	801b788 <_printf_i+0x28>
 801b778:	2f62      	cmp	r7, #98	; 0x62
 801b77a:	d80a      	bhi.n	801b792 <_printf_i+0x32>
 801b77c:	2f00      	cmp	r7, #0
 801b77e:	f000 80d8 	beq.w	801b932 <_printf_i+0x1d2>
 801b782:	2f58      	cmp	r7, #88	; 0x58
 801b784:	f000 80a3 	beq.w	801b8ce <_printf_i+0x16e>
 801b788:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b78c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b790:	e03a      	b.n	801b808 <_printf_i+0xa8>
 801b792:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b796:	2b15      	cmp	r3, #21
 801b798:	d8f6      	bhi.n	801b788 <_printf_i+0x28>
 801b79a:	a101      	add	r1, pc, #4	; (adr r1, 801b7a0 <_printf_i+0x40>)
 801b79c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b7a0:	0801b7f9 	.word	0x0801b7f9
 801b7a4:	0801b80d 	.word	0x0801b80d
 801b7a8:	0801b789 	.word	0x0801b789
 801b7ac:	0801b789 	.word	0x0801b789
 801b7b0:	0801b789 	.word	0x0801b789
 801b7b4:	0801b789 	.word	0x0801b789
 801b7b8:	0801b80d 	.word	0x0801b80d
 801b7bc:	0801b789 	.word	0x0801b789
 801b7c0:	0801b789 	.word	0x0801b789
 801b7c4:	0801b789 	.word	0x0801b789
 801b7c8:	0801b789 	.word	0x0801b789
 801b7cc:	0801b919 	.word	0x0801b919
 801b7d0:	0801b83d 	.word	0x0801b83d
 801b7d4:	0801b8fb 	.word	0x0801b8fb
 801b7d8:	0801b789 	.word	0x0801b789
 801b7dc:	0801b789 	.word	0x0801b789
 801b7e0:	0801b93b 	.word	0x0801b93b
 801b7e4:	0801b789 	.word	0x0801b789
 801b7e8:	0801b83d 	.word	0x0801b83d
 801b7ec:	0801b789 	.word	0x0801b789
 801b7f0:	0801b789 	.word	0x0801b789
 801b7f4:	0801b903 	.word	0x0801b903
 801b7f8:	682b      	ldr	r3, [r5, #0]
 801b7fa:	1d1a      	adds	r2, r3, #4
 801b7fc:	681b      	ldr	r3, [r3, #0]
 801b7fe:	602a      	str	r2, [r5, #0]
 801b800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b804:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b808:	2301      	movs	r3, #1
 801b80a:	e0a3      	b.n	801b954 <_printf_i+0x1f4>
 801b80c:	6820      	ldr	r0, [r4, #0]
 801b80e:	6829      	ldr	r1, [r5, #0]
 801b810:	0606      	lsls	r6, r0, #24
 801b812:	f101 0304 	add.w	r3, r1, #4
 801b816:	d50a      	bpl.n	801b82e <_printf_i+0xce>
 801b818:	680e      	ldr	r6, [r1, #0]
 801b81a:	602b      	str	r3, [r5, #0]
 801b81c:	2e00      	cmp	r6, #0
 801b81e:	da03      	bge.n	801b828 <_printf_i+0xc8>
 801b820:	232d      	movs	r3, #45	; 0x2d
 801b822:	4276      	negs	r6, r6
 801b824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b828:	485e      	ldr	r0, [pc, #376]	; (801b9a4 <_printf_i+0x244>)
 801b82a:	230a      	movs	r3, #10
 801b82c:	e019      	b.n	801b862 <_printf_i+0x102>
 801b82e:	680e      	ldr	r6, [r1, #0]
 801b830:	602b      	str	r3, [r5, #0]
 801b832:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b836:	bf18      	it	ne
 801b838:	b236      	sxthne	r6, r6
 801b83a:	e7ef      	b.n	801b81c <_printf_i+0xbc>
 801b83c:	682b      	ldr	r3, [r5, #0]
 801b83e:	6820      	ldr	r0, [r4, #0]
 801b840:	1d19      	adds	r1, r3, #4
 801b842:	6029      	str	r1, [r5, #0]
 801b844:	0601      	lsls	r1, r0, #24
 801b846:	d501      	bpl.n	801b84c <_printf_i+0xec>
 801b848:	681e      	ldr	r6, [r3, #0]
 801b84a:	e002      	b.n	801b852 <_printf_i+0xf2>
 801b84c:	0646      	lsls	r6, r0, #25
 801b84e:	d5fb      	bpl.n	801b848 <_printf_i+0xe8>
 801b850:	881e      	ldrh	r6, [r3, #0]
 801b852:	4854      	ldr	r0, [pc, #336]	; (801b9a4 <_printf_i+0x244>)
 801b854:	2f6f      	cmp	r7, #111	; 0x6f
 801b856:	bf0c      	ite	eq
 801b858:	2308      	moveq	r3, #8
 801b85a:	230a      	movne	r3, #10
 801b85c:	2100      	movs	r1, #0
 801b85e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b862:	6865      	ldr	r5, [r4, #4]
 801b864:	60a5      	str	r5, [r4, #8]
 801b866:	2d00      	cmp	r5, #0
 801b868:	bfa2      	ittt	ge
 801b86a:	6821      	ldrge	r1, [r4, #0]
 801b86c:	f021 0104 	bicge.w	r1, r1, #4
 801b870:	6021      	strge	r1, [r4, #0]
 801b872:	b90e      	cbnz	r6, 801b878 <_printf_i+0x118>
 801b874:	2d00      	cmp	r5, #0
 801b876:	d04d      	beq.n	801b914 <_printf_i+0x1b4>
 801b878:	4615      	mov	r5, r2
 801b87a:	fbb6 f1f3 	udiv	r1, r6, r3
 801b87e:	fb03 6711 	mls	r7, r3, r1, r6
 801b882:	5dc7      	ldrb	r7, [r0, r7]
 801b884:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b888:	4637      	mov	r7, r6
 801b88a:	42bb      	cmp	r3, r7
 801b88c:	460e      	mov	r6, r1
 801b88e:	d9f4      	bls.n	801b87a <_printf_i+0x11a>
 801b890:	2b08      	cmp	r3, #8
 801b892:	d10b      	bne.n	801b8ac <_printf_i+0x14c>
 801b894:	6823      	ldr	r3, [r4, #0]
 801b896:	07de      	lsls	r6, r3, #31
 801b898:	d508      	bpl.n	801b8ac <_printf_i+0x14c>
 801b89a:	6923      	ldr	r3, [r4, #16]
 801b89c:	6861      	ldr	r1, [r4, #4]
 801b89e:	4299      	cmp	r1, r3
 801b8a0:	bfde      	ittt	le
 801b8a2:	2330      	movle	r3, #48	; 0x30
 801b8a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b8a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b8ac:	1b52      	subs	r2, r2, r5
 801b8ae:	6122      	str	r2, [r4, #16]
 801b8b0:	f8cd a000 	str.w	sl, [sp]
 801b8b4:	464b      	mov	r3, r9
 801b8b6:	aa03      	add	r2, sp, #12
 801b8b8:	4621      	mov	r1, r4
 801b8ba:	4640      	mov	r0, r8
 801b8bc:	f7ff fee2 	bl	801b684 <_printf_common>
 801b8c0:	3001      	adds	r0, #1
 801b8c2:	d14c      	bne.n	801b95e <_printf_i+0x1fe>
 801b8c4:	f04f 30ff 	mov.w	r0, #4294967295
 801b8c8:	b004      	add	sp, #16
 801b8ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b8ce:	4835      	ldr	r0, [pc, #212]	; (801b9a4 <_printf_i+0x244>)
 801b8d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801b8d4:	6829      	ldr	r1, [r5, #0]
 801b8d6:	6823      	ldr	r3, [r4, #0]
 801b8d8:	f851 6b04 	ldr.w	r6, [r1], #4
 801b8dc:	6029      	str	r1, [r5, #0]
 801b8de:	061d      	lsls	r5, r3, #24
 801b8e0:	d514      	bpl.n	801b90c <_printf_i+0x1ac>
 801b8e2:	07df      	lsls	r7, r3, #31
 801b8e4:	bf44      	itt	mi
 801b8e6:	f043 0320 	orrmi.w	r3, r3, #32
 801b8ea:	6023      	strmi	r3, [r4, #0]
 801b8ec:	b91e      	cbnz	r6, 801b8f6 <_printf_i+0x196>
 801b8ee:	6823      	ldr	r3, [r4, #0]
 801b8f0:	f023 0320 	bic.w	r3, r3, #32
 801b8f4:	6023      	str	r3, [r4, #0]
 801b8f6:	2310      	movs	r3, #16
 801b8f8:	e7b0      	b.n	801b85c <_printf_i+0xfc>
 801b8fa:	6823      	ldr	r3, [r4, #0]
 801b8fc:	f043 0320 	orr.w	r3, r3, #32
 801b900:	6023      	str	r3, [r4, #0]
 801b902:	2378      	movs	r3, #120	; 0x78
 801b904:	4828      	ldr	r0, [pc, #160]	; (801b9a8 <_printf_i+0x248>)
 801b906:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b90a:	e7e3      	b.n	801b8d4 <_printf_i+0x174>
 801b90c:	0659      	lsls	r1, r3, #25
 801b90e:	bf48      	it	mi
 801b910:	b2b6      	uxthmi	r6, r6
 801b912:	e7e6      	b.n	801b8e2 <_printf_i+0x182>
 801b914:	4615      	mov	r5, r2
 801b916:	e7bb      	b.n	801b890 <_printf_i+0x130>
 801b918:	682b      	ldr	r3, [r5, #0]
 801b91a:	6826      	ldr	r6, [r4, #0]
 801b91c:	6961      	ldr	r1, [r4, #20]
 801b91e:	1d18      	adds	r0, r3, #4
 801b920:	6028      	str	r0, [r5, #0]
 801b922:	0635      	lsls	r5, r6, #24
 801b924:	681b      	ldr	r3, [r3, #0]
 801b926:	d501      	bpl.n	801b92c <_printf_i+0x1cc>
 801b928:	6019      	str	r1, [r3, #0]
 801b92a:	e002      	b.n	801b932 <_printf_i+0x1d2>
 801b92c:	0670      	lsls	r0, r6, #25
 801b92e:	d5fb      	bpl.n	801b928 <_printf_i+0x1c8>
 801b930:	8019      	strh	r1, [r3, #0]
 801b932:	2300      	movs	r3, #0
 801b934:	6123      	str	r3, [r4, #16]
 801b936:	4615      	mov	r5, r2
 801b938:	e7ba      	b.n	801b8b0 <_printf_i+0x150>
 801b93a:	682b      	ldr	r3, [r5, #0]
 801b93c:	1d1a      	adds	r2, r3, #4
 801b93e:	602a      	str	r2, [r5, #0]
 801b940:	681d      	ldr	r5, [r3, #0]
 801b942:	6862      	ldr	r2, [r4, #4]
 801b944:	2100      	movs	r1, #0
 801b946:	4628      	mov	r0, r5
 801b948:	f7e4 fc62 	bl	8000210 <memchr>
 801b94c:	b108      	cbz	r0, 801b952 <_printf_i+0x1f2>
 801b94e:	1b40      	subs	r0, r0, r5
 801b950:	6060      	str	r0, [r4, #4]
 801b952:	6863      	ldr	r3, [r4, #4]
 801b954:	6123      	str	r3, [r4, #16]
 801b956:	2300      	movs	r3, #0
 801b958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b95c:	e7a8      	b.n	801b8b0 <_printf_i+0x150>
 801b95e:	6923      	ldr	r3, [r4, #16]
 801b960:	462a      	mov	r2, r5
 801b962:	4649      	mov	r1, r9
 801b964:	4640      	mov	r0, r8
 801b966:	47d0      	blx	sl
 801b968:	3001      	adds	r0, #1
 801b96a:	d0ab      	beq.n	801b8c4 <_printf_i+0x164>
 801b96c:	6823      	ldr	r3, [r4, #0]
 801b96e:	079b      	lsls	r3, r3, #30
 801b970:	d413      	bmi.n	801b99a <_printf_i+0x23a>
 801b972:	68e0      	ldr	r0, [r4, #12]
 801b974:	9b03      	ldr	r3, [sp, #12]
 801b976:	4298      	cmp	r0, r3
 801b978:	bfb8      	it	lt
 801b97a:	4618      	movlt	r0, r3
 801b97c:	e7a4      	b.n	801b8c8 <_printf_i+0x168>
 801b97e:	2301      	movs	r3, #1
 801b980:	4632      	mov	r2, r6
 801b982:	4649      	mov	r1, r9
 801b984:	4640      	mov	r0, r8
 801b986:	47d0      	blx	sl
 801b988:	3001      	adds	r0, #1
 801b98a:	d09b      	beq.n	801b8c4 <_printf_i+0x164>
 801b98c:	3501      	adds	r5, #1
 801b98e:	68e3      	ldr	r3, [r4, #12]
 801b990:	9903      	ldr	r1, [sp, #12]
 801b992:	1a5b      	subs	r3, r3, r1
 801b994:	42ab      	cmp	r3, r5
 801b996:	dcf2      	bgt.n	801b97e <_printf_i+0x21e>
 801b998:	e7eb      	b.n	801b972 <_printf_i+0x212>
 801b99a:	2500      	movs	r5, #0
 801b99c:	f104 0619 	add.w	r6, r4, #25
 801b9a0:	e7f5      	b.n	801b98e <_printf_i+0x22e>
 801b9a2:	bf00      	nop
 801b9a4:	08021886 	.word	0x08021886
 801b9a8:	08021897 	.word	0x08021897

0801b9ac <_scanf_float>:
 801b9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9b0:	b087      	sub	sp, #28
 801b9b2:	4617      	mov	r7, r2
 801b9b4:	9303      	str	r3, [sp, #12]
 801b9b6:	688b      	ldr	r3, [r1, #8]
 801b9b8:	1e5a      	subs	r2, r3, #1
 801b9ba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801b9be:	bf83      	ittte	hi
 801b9c0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801b9c4:	195b      	addhi	r3, r3, r5
 801b9c6:	9302      	strhi	r3, [sp, #8]
 801b9c8:	2300      	movls	r3, #0
 801b9ca:	bf86      	itte	hi
 801b9cc:	f240 135d 	movwhi	r3, #349	; 0x15d
 801b9d0:	608b      	strhi	r3, [r1, #8]
 801b9d2:	9302      	strls	r3, [sp, #8]
 801b9d4:	680b      	ldr	r3, [r1, #0]
 801b9d6:	468b      	mov	fp, r1
 801b9d8:	2500      	movs	r5, #0
 801b9da:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801b9de:	f84b 3b1c 	str.w	r3, [fp], #28
 801b9e2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801b9e6:	4680      	mov	r8, r0
 801b9e8:	460c      	mov	r4, r1
 801b9ea:	465e      	mov	r6, fp
 801b9ec:	46aa      	mov	sl, r5
 801b9ee:	46a9      	mov	r9, r5
 801b9f0:	9501      	str	r5, [sp, #4]
 801b9f2:	68a2      	ldr	r2, [r4, #8]
 801b9f4:	b152      	cbz	r2, 801ba0c <_scanf_float+0x60>
 801b9f6:	683b      	ldr	r3, [r7, #0]
 801b9f8:	781b      	ldrb	r3, [r3, #0]
 801b9fa:	2b4e      	cmp	r3, #78	; 0x4e
 801b9fc:	d864      	bhi.n	801bac8 <_scanf_float+0x11c>
 801b9fe:	2b40      	cmp	r3, #64	; 0x40
 801ba00:	d83c      	bhi.n	801ba7c <_scanf_float+0xd0>
 801ba02:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801ba06:	b2c8      	uxtb	r0, r1
 801ba08:	280e      	cmp	r0, #14
 801ba0a:	d93a      	bls.n	801ba82 <_scanf_float+0xd6>
 801ba0c:	f1b9 0f00 	cmp.w	r9, #0
 801ba10:	d003      	beq.n	801ba1a <_scanf_float+0x6e>
 801ba12:	6823      	ldr	r3, [r4, #0]
 801ba14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ba18:	6023      	str	r3, [r4, #0]
 801ba1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ba1e:	f1ba 0f01 	cmp.w	sl, #1
 801ba22:	f200 8113 	bhi.w	801bc4c <_scanf_float+0x2a0>
 801ba26:	455e      	cmp	r6, fp
 801ba28:	f200 8105 	bhi.w	801bc36 <_scanf_float+0x28a>
 801ba2c:	2501      	movs	r5, #1
 801ba2e:	4628      	mov	r0, r5
 801ba30:	b007      	add	sp, #28
 801ba32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba36:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801ba3a:	2a0d      	cmp	r2, #13
 801ba3c:	d8e6      	bhi.n	801ba0c <_scanf_float+0x60>
 801ba3e:	a101      	add	r1, pc, #4	; (adr r1, 801ba44 <_scanf_float+0x98>)
 801ba40:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801ba44:	0801bb83 	.word	0x0801bb83
 801ba48:	0801ba0d 	.word	0x0801ba0d
 801ba4c:	0801ba0d 	.word	0x0801ba0d
 801ba50:	0801ba0d 	.word	0x0801ba0d
 801ba54:	0801bbe3 	.word	0x0801bbe3
 801ba58:	0801bbbb 	.word	0x0801bbbb
 801ba5c:	0801ba0d 	.word	0x0801ba0d
 801ba60:	0801ba0d 	.word	0x0801ba0d
 801ba64:	0801bb91 	.word	0x0801bb91
 801ba68:	0801ba0d 	.word	0x0801ba0d
 801ba6c:	0801ba0d 	.word	0x0801ba0d
 801ba70:	0801ba0d 	.word	0x0801ba0d
 801ba74:	0801ba0d 	.word	0x0801ba0d
 801ba78:	0801bb49 	.word	0x0801bb49
 801ba7c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801ba80:	e7db      	b.n	801ba3a <_scanf_float+0x8e>
 801ba82:	290e      	cmp	r1, #14
 801ba84:	d8c2      	bhi.n	801ba0c <_scanf_float+0x60>
 801ba86:	a001      	add	r0, pc, #4	; (adr r0, 801ba8c <_scanf_float+0xe0>)
 801ba88:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801ba8c:	0801bb3b 	.word	0x0801bb3b
 801ba90:	0801ba0d 	.word	0x0801ba0d
 801ba94:	0801bb3b 	.word	0x0801bb3b
 801ba98:	0801bbcf 	.word	0x0801bbcf
 801ba9c:	0801ba0d 	.word	0x0801ba0d
 801baa0:	0801bae9 	.word	0x0801bae9
 801baa4:	0801bb25 	.word	0x0801bb25
 801baa8:	0801bb25 	.word	0x0801bb25
 801baac:	0801bb25 	.word	0x0801bb25
 801bab0:	0801bb25 	.word	0x0801bb25
 801bab4:	0801bb25 	.word	0x0801bb25
 801bab8:	0801bb25 	.word	0x0801bb25
 801babc:	0801bb25 	.word	0x0801bb25
 801bac0:	0801bb25 	.word	0x0801bb25
 801bac4:	0801bb25 	.word	0x0801bb25
 801bac8:	2b6e      	cmp	r3, #110	; 0x6e
 801baca:	d809      	bhi.n	801bae0 <_scanf_float+0x134>
 801bacc:	2b60      	cmp	r3, #96	; 0x60
 801bace:	d8b2      	bhi.n	801ba36 <_scanf_float+0x8a>
 801bad0:	2b54      	cmp	r3, #84	; 0x54
 801bad2:	d077      	beq.n	801bbc4 <_scanf_float+0x218>
 801bad4:	2b59      	cmp	r3, #89	; 0x59
 801bad6:	d199      	bne.n	801ba0c <_scanf_float+0x60>
 801bad8:	2d07      	cmp	r5, #7
 801bada:	d197      	bne.n	801ba0c <_scanf_float+0x60>
 801badc:	2508      	movs	r5, #8
 801bade:	e029      	b.n	801bb34 <_scanf_float+0x188>
 801bae0:	2b74      	cmp	r3, #116	; 0x74
 801bae2:	d06f      	beq.n	801bbc4 <_scanf_float+0x218>
 801bae4:	2b79      	cmp	r3, #121	; 0x79
 801bae6:	e7f6      	b.n	801bad6 <_scanf_float+0x12a>
 801bae8:	6821      	ldr	r1, [r4, #0]
 801baea:	05c8      	lsls	r0, r1, #23
 801baec:	d51a      	bpl.n	801bb24 <_scanf_float+0x178>
 801baee:	9b02      	ldr	r3, [sp, #8]
 801baf0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801baf4:	6021      	str	r1, [r4, #0]
 801baf6:	f109 0901 	add.w	r9, r9, #1
 801bafa:	b11b      	cbz	r3, 801bb04 <_scanf_float+0x158>
 801bafc:	3b01      	subs	r3, #1
 801bafe:	3201      	adds	r2, #1
 801bb00:	9302      	str	r3, [sp, #8]
 801bb02:	60a2      	str	r2, [r4, #8]
 801bb04:	68a3      	ldr	r3, [r4, #8]
 801bb06:	3b01      	subs	r3, #1
 801bb08:	60a3      	str	r3, [r4, #8]
 801bb0a:	6923      	ldr	r3, [r4, #16]
 801bb0c:	3301      	adds	r3, #1
 801bb0e:	6123      	str	r3, [r4, #16]
 801bb10:	687b      	ldr	r3, [r7, #4]
 801bb12:	3b01      	subs	r3, #1
 801bb14:	2b00      	cmp	r3, #0
 801bb16:	607b      	str	r3, [r7, #4]
 801bb18:	f340 8084 	ble.w	801bc24 <_scanf_float+0x278>
 801bb1c:	683b      	ldr	r3, [r7, #0]
 801bb1e:	3301      	adds	r3, #1
 801bb20:	603b      	str	r3, [r7, #0]
 801bb22:	e766      	b.n	801b9f2 <_scanf_float+0x46>
 801bb24:	eb1a 0f05 	cmn.w	sl, r5
 801bb28:	f47f af70 	bne.w	801ba0c <_scanf_float+0x60>
 801bb2c:	6822      	ldr	r2, [r4, #0]
 801bb2e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801bb32:	6022      	str	r2, [r4, #0]
 801bb34:	f806 3b01 	strb.w	r3, [r6], #1
 801bb38:	e7e4      	b.n	801bb04 <_scanf_float+0x158>
 801bb3a:	6822      	ldr	r2, [r4, #0]
 801bb3c:	0610      	lsls	r0, r2, #24
 801bb3e:	f57f af65 	bpl.w	801ba0c <_scanf_float+0x60>
 801bb42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801bb46:	e7f4      	b.n	801bb32 <_scanf_float+0x186>
 801bb48:	f1ba 0f00 	cmp.w	sl, #0
 801bb4c:	d10e      	bne.n	801bb6c <_scanf_float+0x1c0>
 801bb4e:	f1b9 0f00 	cmp.w	r9, #0
 801bb52:	d10e      	bne.n	801bb72 <_scanf_float+0x1c6>
 801bb54:	6822      	ldr	r2, [r4, #0]
 801bb56:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801bb5a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801bb5e:	d108      	bne.n	801bb72 <_scanf_float+0x1c6>
 801bb60:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801bb64:	6022      	str	r2, [r4, #0]
 801bb66:	f04f 0a01 	mov.w	sl, #1
 801bb6a:	e7e3      	b.n	801bb34 <_scanf_float+0x188>
 801bb6c:	f1ba 0f02 	cmp.w	sl, #2
 801bb70:	d055      	beq.n	801bc1e <_scanf_float+0x272>
 801bb72:	2d01      	cmp	r5, #1
 801bb74:	d002      	beq.n	801bb7c <_scanf_float+0x1d0>
 801bb76:	2d04      	cmp	r5, #4
 801bb78:	f47f af48 	bne.w	801ba0c <_scanf_float+0x60>
 801bb7c:	3501      	adds	r5, #1
 801bb7e:	b2ed      	uxtb	r5, r5
 801bb80:	e7d8      	b.n	801bb34 <_scanf_float+0x188>
 801bb82:	f1ba 0f01 	cmp.w	sl, #1
 801bb86:	f47f af41 	bne.w	801ba0c <_scanf_float+0x60>
 801bb8a:	f04f 0a02 	mov.w	sl, #2
 801bb8e:	e7d1      	b.n	801bb34 <_scanf_float+0x188>
 801bb90:	b97d      	cbnz	r5, 801bbb2 <_scanf_float+0x206>
 801bb92:	f1b9 0f00 	cmp.w	r9, #0
 801bb96:	f47f af3c 	bne.w	801ba12 <_scanf_float+0x66>
 801bb9a:	6822      	ldr	r2, [r4, #0]
 801bb9c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801bba0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801bba4:	f47f af39 	bne.w	801ba1a <_scanf_float+0x6e>
 801bba8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801bbac:	6022      	str	r2, [r4, #0]
 801bbae:	2501      	movs	r5, #1
 801bbb0:	e7c0      	b.n	801bb34 <_scanf_float+0x188>
 801bbb2:	2d03      	cmp	r5, #3
 801bbb4:	d0e2      	beq.n	801bb7c <_scanf_float+0x1d0>
 801bbb6:	2d05      	cmp	r5, #5
 801bbb8:	e7de      	b.n	801bb78 <_scanf_float+0x1cc>
 801bbba:	2d02      	cmp	r5, #2
 801bbbc:	f47f af26 	bne.w	801ba0c <_scanf_float+0x60>
 801bbc0:	2503      	movs	r5, #3
 801bbc2:	e7b7      	b.n	801bb34 <_scanf_float+0x188>
 801bbc4:	2d06      	cmp	r5, #6
 801bbc6:	f47f af21 	bne.w	801ba0c <_scanf_float+0x60>
 801bbca:	2507      	movs	r5, #7
 801bbcc:	e7b2      	b.n	801bb34 <_scanf_float+0x188>
 801bbce:	6822      	ldr	r2, [r4, #0]
 801bbd0:	0591      	lsls	r1, r2, #22
 801bbd2:	f57f af1b 	bpl.w	801ba0c <_scanf_float+0x60>
 801bbd6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801bbda:	6022      	str	r2, [r4, #0]
 801bbdc:	f8cd 9004 	str.w	r9, [sp, #4]
 801bbe0:	e7a8      	b.n	801bb34 <_scanf_float+0x188>
 801bbe2:	6822      	ldr	r2, [r4, #0]
 801bbe4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801bbe8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801bbec:	d006      	beq.n	801bbfc <_scanf_float+0x250>
 801bbee:	0550      	lsls	r0, r2, #21
 801bbf0:	f57f af0c 	bpl.w	801ba0c <_scanf_float+0x60>
 801bbf4:	f1b9 0f00 	cmp.w	r9, #0
 801bbf8:	f43f af0f 	beq.w	801ba1a <_scanf_float+0x6e>
 801bbfc:	0591      	lsls	r1, r2, #22
 801bbfe:	bf58      	it	pl
 801bc00:	9901      	ldrpl	r1, [sp, #4]
 801bc02:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801bc06:	bf58      	it	pl
 801bc08:	eba9 0101 	subpl.w	r1, r9, r1
 801bc0c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801bc10:	bf58      	it	pl
 801bc12:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801bc16:	6022      	str	r2, [r4, #0]
 801bc18:	f04f 0900 	mov.w	r9, #0
 801bc1c:	e78a      	b.n	801bb34 <_scanf_float+0x188>
 801bc1e:	f04f 0a03 	mov.w	sl, #3
 801bc22:	e787      	b.n	801bb34 <_scanf_float+0x188>
 801bc24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801bc28:	4639      	mov	r1, r7
 801bc2a:	4640      	mov	r0, r8
 801bc2c:	4798      	blx	r3
 801bc2e:	2800      	cmp	r0, #0
 801bc30:	f43f aedf 	beq.w	801b9f2 <_scanf_float+0x46>
 801bc34:	e6ea      	b.n	801ba0c <_scanf_float+0x60>
 801bc36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bc3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801bc3e:	463a      	mov	r2, r7
 801bc40:	4640      	mov	r0, r8
 801bc42:	4798      	blx	r3
 801bc44:	6923      	ldr	r3, [r4, #16]
 801bc46:	3b01      	subs	r3, #1
 801bc48:	6123      	str	r3, [r4, #16]
 801bc4a:	e6ec      	b.n	801ba26 <_scanf_float+0x7a>
 801bc4c:	1e6b      	subs	r3, r5, #1
 801bc4e:	2b06      	cmp	r3, #6
 801bc50:	d825      	bhi.n	801bc9e <_scanf_float+0x2f2>
 801bc52:	2d02      	cmp	r5, #2
 801bc54:	d836      	bhi.n	801bcc4 <_scanf_float+0x318>
 801bc56:	455e      	cmp	r6, fp
 801bc58:	f67f aee8 	bls.w	801ba2c <_scanf_float+0x80>
 801bc5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bc60:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801bc64:	463a      	mov	r2, r7
 801bc66:	4640      	mov	r0, r8
 801bc68:	4798      	blx	r3
 801bc6a:	6923      	ldr	r3, [r4, #16]
 801bc6c:	3b01      	subs	r3, #1
 801bc6e:	6123      	str	r3, [r4, #16]
 801bc70:	e7f1      	b.n	801bc56 <_scanf_float+0x2aa>
 801bc72:	9802      	ldr	r0, [sp, #8]
 801bc74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bc78:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801bc7c:	9002      	str	r0, [sp, #8]
 801bc7e:	463a      	mov	r2, r7
 801bc80:	4640      	mov	r0, r8
 801bc82:	4798      	blx	r3
 801bc84:	6923      	ldr	r3, [r4, #16]
 801bc86:	3b01      	subs	r3, #1
 801bc88:	6123      	str	r3, [r4, #16]
 801bc8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bc8e:	fa5f fa8a 	uxtb.w	sl, sl
 801bc92:	f1ba 0f02 	cmp.w	sl, #2
 801bc96:	d1ec      	bne.n	801bc72 <_scanf_float+0x2c6>
 801bc98:	3d03      	subs	r5, #3
 801bc9a:	b2ed      	uxtb	r5, r5
 801bc9c:	1b76      	subs	r6, r6, r5
 801bc9e:	6823      	ldr	r3, [r4, #0]
 801bca0:	05da      	lsls	r2, r3, #23
 801bca2:	d52f      	bpl.n	801bd04 <_scanf_float+0x358>
 801bca4:	055b      	lsls	r3, r3, #21
 801bca6:	d510      	bpl.n	801bcca <_scanf_float+0x31e>
 801bca8:	455e      	cmp	r6, fp
 801bcaa:	f67f aebf 	bls.w	801ba2c <_scanf_float+0x80>
 801bcae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bcb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801bcb6:	463a      	mov	r2, r7
 801bcb8:	4640      	mov	r0, r8
 801bcba:	4798      	blx	r3
 801bcbc:	6923      	ldr	r3, [r4, #16]
 801bcbe:	3b01      	subs	r3, #1
 801bcc0:	6123      	str	r3, [r4, #16]
 801bcc2:	e7f1      	b.n	801bca8 <_scanf_float+0x2fc>
 801bcc4:	46aa      	mov	sl, r5
 801bcc6:	9602      	str	r6, [sp, #8]
 801bcc8:	e7df      	b.n	801bc8a <_scanf_float+0x2de>
 801bcca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801bcce:	6923      	ldr	r3, [r4, #16]
 801bcd0:	2965      	cmp	r1, #101	; 0x65
 801bcd2:	f103 33ff 	add.w	r3, r3, #4294967295
 801bcd6:	f106 35ff 	add.w	r5, r6, #4294967295
 801bcda:	6123      	str	r3, [r4, #16]
 801bcdc:	d00c      	beq.n	801bcf8 <_scanf_float+0x34c>
 801bcde:	2945      	cmp	r1, #69	; 0x45
 801bce0:	d00a      	beq.n	801bcf8 <_scanf_float+0x34c>
 801bce2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bce6:	463a      	mov	r2, r7
 801bce8:	4640      	mov	r0, r8
 801bcea:	4798      	blx	r3
 801bcec:	6923      	ldr	r3, [r4, #16]
 801bcee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801bcf2:	3b01      	subs	r3, #1
 801bcf4:	1eb5      	subs	r5, r6, #2
 801bcf6:	6123      	str	r3, [r4, #16]
 801bcf8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bcfc:	463a      	mov	r2, r7
 801bcfe:	4640      	mov	r0, r8
 801bd00:	4798      	blx	r3
 801bd02:	462e      	mov	r6, r5
 801bd04:	6825      	ldr	r5, [r4, #0]
 801bd06:	f015 0510 	ands.w	r5, r5, #16
 801bd0a:	d159      	bne.n	801bdc0 <_scanf_float+0x414>
 801bd0c:	7035      	strb	r5, [r6, #0]
 801bd0e:	6823      	ldr	r3, [r4, #0]
 801bd10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801bd14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bd18:	d11b      	bne.n	801bd52 <_scanf_float+0x3a6>
 801bd1a:	9b01      	ldr	r3, [sp, #4]
 801bd1c:	454b      	cmp	r3, r9
 801bd1e:	eba3 0209 	sub.w	r2, r3, r9
 801bd22:	d123      	bne.n	801bd6c <_scanf_float+0x3c0>
 801bd24:	2200      	movs	r2, #0
 801bd26:	4659      	mov	r1, fp
 801bd28:	4640      	mov	r0, r8
 801bd2a:	f000 ff63 	bl	801cbf4 <_strtod_r>
 801bd2e:	6822      	ldr	r2, [r4, #0]
 801bd30:	9b03      	ldr	r3, [sp, #12]
 801bd32:	f012 0f02 	tst.w	r2, #2
 801bd36:	ec57 6b10 	vmov	r6, r7, d0
 801bd3a:	681b      	ldr	r3, [r3, #0]
 801bd3c:	d021      	beq.n	801bd82 <_scanf_float+0x3d6>
 801bd3e:	9903      	ldr	r1, [sp, #12]
 801bd40:	1d1a      	adds	r2, r3, #4
 801bd42:	600a      	str	r2, [r1, #0]
 801bd44:	681b      	ldr	r3, [r3, #0]
 801bd46:	e9c3 6700 	strd	r6, r7, [r3]
 801bd4a:	68e3      	ldr	r3, [r4, #12]
 801bd4c:	3301      	adds	r3, #1
 801bd4e:	60e3      	str	r3, [r4, #12]
 801bd50:	e66d      	b.n	801ba2e <_scanf_float+0x82>
 801bd52:	9b04      	ldr	r3, [sp, #16]
 801bd54:	2b00      	cmp	r3, #0
 801bd56:	d0e5      	beq.n	801bd24 <_scanf_float+0x378>
 801bd58:	9905      	ldr	r1, [sp, #20]
 801bd5a:	230a      	movs	r3, #10
 801bd5c:	462a      	mov	r2, r5
 801bd5e:	3101      	adds	r1, #1
 801bd60:	4640      	mov	r0, r8
 801bd62:	f001 f82b 	bl	801cdbc <_strtol_r>
 801bd66:	9b04      	ldr	r3, [sp, #16]
 801bd68:	9e05      	ldr	r6, [sp, #20]
 801bd6a:	1ac2      	subs	r2, r0, r3
 801bd6c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801bd70:	429e      	cmp	r6, r3
 801bd72:	bf28      	it	cs
 801bd74:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801bd78:	4912      	ldr	r1, [pc, #72]	; (801bdc4 <_scanf_float+0x418>)
 801bd7a:	4630      	mov	r0, r6
 801bd7c:	f000 f8ca 	bl	801bf14 <siprintf>
 801bd80:	e7d0      	b.n	801bd24 <_scanf_float+0x378>
 801bd82:	9903      	ldr	r1, [sp, #12]
 801bd84:	f012 0f04 	tst.w	r2, #4
 801bd88:	f103 0204 	add.w	r2, r3, #4
 801bd8c:	600a      	str	r2, [r1, #0]
 801bd8e:	d1d9      	bne.n	801bd44 <_scanf_float+0x398>
 801bd90:	f8d3 8000 	ldr.w	r8, [r3]
 801bd94:	ee10 2a10 	vmov	r2, s0
 801bd98:	ee10 0a10 	vmov	r0, s0
 801bd9c:	463b      	mov	r3, r7
 801bd9e:	4639      	mov	r1, r7
 801bda0:	f7e4 fedc 	bl	8000b5c <__aeabi_dcmpun>
 801bda4:	b128      	cbz	r0, 801bdb2 <_scanf_float+0x406>
 801bda6:	4808      	ldr	r0, [pc, #32]	; (801bdc8 <_scanf_float+0x41c>)
 801bda8:	f000 f8ae 	bl	801bf08 <nanf>
 801bdac:	ed88 0a00 	vstr	s0, [r8]
 801bdb0:	e7cb      	b.n	801bd4a <_scanf_float+0x39e>
 801bdb2:	4630      	mov	r0, r6
 801bdb4:	4639      	mov	r1, r7
 801bdb6:	f7e4 ff2f 	bl	8000c18 <__aeabi_d2f>
 801bdba:	f8c8 0000 	str.w	r0, [r8]
 801bdbe:	e7c4      	b.n	801bd4a <_scanf_float+0x39e>
 801bdc0:	2500      	movs	r5, #0
 801bdc2:	e634      	b.n	801ba2e <_scanf_float+0x82>
 801bdc4:	080218a8 	.word	0x080218a8
 801bdc8:	080219af 	.word	0x080219af

0801bdcc <iprintf>:
 801bdcc:	b40f      	push	{r0, r1, r2, r3}
 801bdce:	4b0a      	ldr	r3, [pc, #40]	; (801bdf8 <iprintf+0x2c>)
 801bdd0:	b513      	push	{r0, r1, r4, lr}
 801bdd2:	681c      	ldr	r4, [r3, #0]
 801bdd4:	b124      	cbz	r4, 801bde0 <iprintf+0x14>
 801bdd6:	69a3      	ldr	r3, [r4, #24]
 801bdd8:	b913      	cbnz	r3, 801bde0 <iprintf+0x14>
 801bdda:	4620      	mov	r0, r4
 801bddc:	f002 f8a8 	bl	801df30 <__sinit>
 801bde0:	ab05      	add	r3, sp, #20
 801bde2:	9a04      	ldr	r2, [sp, #16]
 801bde4:	68a1      	ldr	r1, [r4, #8]
 801bde6:	9301      	str	r3, [sp, #4]
 801bde8:	4620      	mov	r0, r4
 801bdea:	f003 fba3 	bl	801f534 <_vfiprintf_r>
 801bdee:	b002      	add	sp, #8
 801bdf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bdf4:	b004      	add	sp, #16
 801bdf6:	4770      	bx	lr
 801bdf8:	20000140 	.word	0x20000140

0801bdfc <_puts_r>:
 801bdfc:	b570      	push	{r4, r5, r6, lr}
 801bdfe:	460e      	mov	r6, r1
 801be00:	4605      	mov	r5, r0
 801be02:	b118      	cbz	r0, 801be0c <_puts_r+0x10>
 801be04:	6983      	ldr	r3, [r0, #24]
 801be06:	b90b      	cbnz	r3, 801be0c <_puts_r+0x10>
 801be08:	f002 f892 	bl	801df30 <__sinit>
 801be0c:	69ab      	ldr	r3, [r5, #24]
 801be0e:	68ac      	ldr	r4, [r5, #8]
 801be10:	b913      	cbnz	r3, 801be18 <_puts_r+0x1c>
 801be12:	4628      	mov	r0, r5
 801be14:	f002 f88c 	bl	801df30 <__sinit>
 801be18:	4b2c      	ldr	r3, [pc, #176]	; (801becc <_puts_r+0xd0>)
 801be1a:	429c      	cmp	r4, r3
 801be1c:	d120      	bne.n	801be60 <_puts_r+0x64>
 801be1e:	686c      	ldr	r4, [r5, #4]
 801be20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801be22:	07db      	lsls	r3, r3, #31
 801be24:	d405      	bmi.n	801be32 <_puts_r+0x36>
 801be26:	89a3      	ldrh	r3, [r4, #12]
 801be28:	0598      	lsls	r0, r3, #22
 801be2a:	d402      	bmi.n	801be32 <_puts_r+0x36>
 801be2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801be2e:	f7ff f830 	bl	801ae92 <__retarget_lock_acquire_recursive>
 801be32:	89a3      	ldrh	r3, [r4, #12]
 801be34:	0719      	lsls	r1, r3, #28
 801be36:	d51d      	bpl.n	801be74 <_puts_r+0x78>
 801be38:	6923      	ldr	r3, [r4, #16]
 801be3a:	b1db      	cbz	r3, 801be74 <_puts_r+0x78>
 801be3c:	3e01      	subs	r6, #1
 801be3e:	68a3      	ldr	r3, [r4, #8]
 801be40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801be44:	3b01      	subs	r3, #1
 801be46:	60a3      	str	r3, [r4, #8]
 801be48:	bb39      	cbnz	r1, 801be9a <_puts_r+0x9e>
 801be4a:	2b00      	cmp	r3, #0
 801be4c:	da38      	bge.n	801bec0 <_puts_r+0xc4>
 801be4e:	4622      	mov	r2, r4
 801be50:	210a      	movs	r1, #10
 801be52:	4628      	mov	r0, r5
 801be54:	f000 fff8 	bl	801ce48 <__swbuf_r>
 801be58:	3001      	adds	r0, #1
 801be5a:	d011      	beq.n	801be80 <_puts_r+0x84>
 801be5c:	250a      	movs	r5, #10
 801be5e:	e011      	b.n	801be84 <_puts_r+0x88>
 801be60:	4b1b      	ldr	r3, [pc, #108]	; (801bed0 <_puts_r+0xd4>)
 801be62:	429c      	cmp	r4, r3
 801be64:	d101      	bne.n	801be6a <_puts_r+0x6e>
 801be66:	68ac      	ldr	r4, [r5, #8]
 801be68:	e7da      	b.n	801be20 <_puts_r+0x24>
 801be6a:	4b1a      	ldr	r3, [pc, #104]	; (801bed4 <_puts_r+0xd8>)
 801be6c:	429c      	cmp	r4, r3
 801be6e:	bf08      	it	eq
 801be70:	68ec      	ldreq	r4, [r5, #12]
 801be72:	e7d5      	b.n	801be20 <_puts_r+0x24>
 801be74:	4621      	mov	r1, r4
 801be76:	4628      	mov	r0, r5
 801be78:	f001 f838 	bl	801ceec <__swsetup_r>
 801be7c:	2800      	cmp	r0, #0
 801be7e:	d0dd      	beq.n	801be3c <_puts_r+0x40>
 801be80:	f04f 35ff 	mov.w	r5, #4294967295
 801be84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801be86:	07da      	lsls	r2, r3, #31
 801be88:	d405      	bmi.n	801be96 <_puts_r+0x9a>
 801be8a:	89a3      	ldrh	r3, [r4, #12]
 801be8c:	059b      	lsls	r3, r3, #22
 801be8e:	d402      	bmi.n	801be96 <_puts_r+0x9a>
 801be90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801be92:	f7fe ffff 	bl	801ae94 <__retarget_lock_release_recursive>
 801be96:	4628      	mov	r0, r5
 801be98:	bd70      	pop	{r4, r5, r6, pc}
 801be9a:	2b00      	cmp	r3, #0
 801be9c:	da04      	bge.n	801bea8 <_puts_r+0xac>
 801be9e:	69a2      	ldr	r2, [r4, #24]
 801bea0:	429a      	cmp	r2, r3
 801bea2:	dc06      	bgt.n	801beb2 <_puts_r+0xb6>
 801bea4:	290a      	cmp	r1, #10
 801bea6:	d004      	beq.n	801beb2 <_puts_r+0xb6>
 801bea8:	6823      	ldr	r3, [r4, #0]
 801beaa:	1c5a      	adds	r2, r3, #1
 801beac:	6022      	str	r2, [r4, #0]
 801beae:	7019      	strb	r1, [r3, #0]
 801beb0:	e7c5      	b.n	801be3e <_puts_r+0x42>
 801beb2:	4622      	mov	r2, r4
 801beb4:	4628      	mov	r0, r5
 801beb6:	f000 ffc7 	bl	801ce48 <__swbuf_r>
 801beba:	3001      	adds	r0, #1
 801bebc:	d1bf      	bne.n	801be3e <_puts_r+0x42>
 801bebe:	e7df      	b.n	801be80 <_puts_r+0x84>
 801bec0:	6823      	ldr	r3, [r4, #0]
 801bec2:	250a      	movs	r5, #10
 801bec4:	1c5a      	adds	r2, r3, #1
 801bec6:	6022      	str	r2, [r4, #0]
 801bec8:	701d      	strb	r5, [r3, #0]
 801beca:	e7db      	b.n	801be84 <_puts_r+0x88>
 801becc:	08021b4c 	.word	0x08021b4c
 801bed0:	08021b6c 	.word	0x08021b6c
 801bed4:	08021b2c 	.word	0x08021b2c

0801bed8 <puts>:
 801bed8:	4b02      	ldr	r3, [pc, #8]	; (801bee4 <puts+0xc>)
 801beda:	4601      	mov	r1, r0
 801bedc:	6818      	ldr	r0, [r3, #0]
 801bede:	f7ff bf8d 	b.w	801bdfc <_puts_r>
 801bee2:	bf00      	nop
 801bee4:	20000140 	.word	0x20000140

0801bee8 <_sbrk_r>:
 801bee8:	b538      	push	{r3, r4, r5, lr}
 801beea:	4d06      	ldr	r5, [pc, #24]	; (801bf04 <_sbrk_r+0x1c>)
 801beec:	2300      	movs	r3, #0
 801beee:	4604      	mov	r4, r0
 801bef0:	4608      	mov	r0, r1
 801bef2:	602b      	str	r3, [r5, #0]
 801bef4:	f7e7 fa18 	bl	8003328 <_sbrk>
 801bef8:	1c43      	adds	r3, r0, #1
 801befa:	d102      	bne.n	801bf02 <_sbrk_r+0x1a>
 801befc:	682b      	ldr	r3, [r5, #0]
 801befe:	b103      	cbz	r3, 801bf02 <_sbrk_r+0x1a>
 801bf00:	6023      	str	r3, [r4, #0]
 801bf02:	bd38      	pop	{r3, r4, r5, pc}
 801bf04:	20003614 	.word	0x20003614

0801bf08 <nanf>:
 801bf08:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801bf10 <nanf+0x8>
 801bf0c:	4770      	bx	lr
 801bf0e:	bf00      	nop
 801bf10:	7fc00000 	.word	0x7fc00000

0801bf14 <siprintf>:
 801bf14:	b40e      	push	{r1, r2, r3}
 801bf16:	b500      	push	{lr}
 801bf18:	b09c      	sub	sp, #112	; 0x70
 801bf1a:	ab1d      	add	r3, sp, #116	; 0x74
 801bf1c:	9002      	str	r0, [sp, #8]
 801bf1e:	9006      	str	r0, [sp, #24]
 801bf20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801bf24:	4809      	ldr	r0, [pc, #36]	; (801bf4c <siprintf+0x38>)
 801bf26:	9107      	str	r1, [sp, #28]
 801bf28:	9104      	str	r1, [sp, #16]
 801bf2a:	4909      	ldr	r1, [pc, #36]	; (801bf50 <siprintf+0x3c>)
 801bf2c:	f853 2b04 	ldr.w	r2, [r3], #4
 801bf30:	9105      	str	r1, [sp, #20]
 801bf32:	6800      	ldr	r0, [r0, #0]
 801bf34:	9301      	str	r3, [sp, #4]
 801bf36:	a902      	add	r1, sp, #8
 801bf38:	f003 f9d2 	bl	801f2e0 <_svfiprintf_r>
 801bf3c:	9b02      	ldr	r3, [sp, #8]
 801bf3e:	2200      	movs	r2, #0
 801bf40:	701a      	strb	r2, [r3, #0]
 801bf42:	b01c      	add	sp, #112	; 0x70
 801bf44:	f85d eb04 	ldr.w	lr, [sp], #4
 801bf48:	b003      	add	sp, #12
 801bf4a:	4770      	bx	lr
 801bf4c:	20000140 	.word	0x20000140
 801bf50:	ffff0208 	.word	0xffff0208

0801bf54 <strchr>:
 801bf54:	b2c9      	uxtb	r1, r1
 801bf56:	4603      	mov	r3, r0
 801bf58:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bf5c:	b11a      	cbz	r2, 801bf66 <strchr+0x12>
 801bf5e:	428a      	cmp	r2, r1
 801bf60:	d1f9      	bne.n	801bf56 <strchr+0x2>
 801bf62:	4618      	mov	r0, r3
 801bf64:	4770      	bx	lr
 801bf66:	2900      	cmp	r1, #0
 801bf68:	bf18      	it	ne
 801bf6a:	2300      	movne	r3, #0
 801bf6c:	e7f9      	b.n	801bf62 <strchr+0xe>

0801bf6e <strcpy>:
 801bf6e:	4603      	mov	r3, r0
 801bf70:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bf74:	f803 2b01 	strb.w	r2, [r3], #1
 801bf78:	2a00      	cmp	r2, #0
 801bf7a:	d1f9      	bne.n	801bf70 <strcpy+0x2>
 801bf7c:	4770      	bx	lr

0801bf7e <strstr>:
 801bf7e:	780a      	ldrb	r2, [r1, #0]
 801bf80:	b570      	push	{r4, r5, r6, lr}
 801bf82:	b96a      	cbnz	r2, 801bfa0 <strstr+0x22>
 801bf84:	bd70      	pop	{r4, r5, r6, pc}
 801bf86:	429a      	cmp	r2, r3
 801bf88:	d109      	bne.n	801bf9e <strstr+0x20>
 801bf8a:	460c      	mov	r4, r1
 801bf8c:	4605      	mov	r5, r0
 801bf8e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801bf92:	2b00      	cmp	r3, #0
 801bf94:	d0f6      	beq.n	801bf84 <strstr+0x6>
 801bf96:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801bf9a:	429e      	cmp	r6, r3
 801bf9c:	d0f7      	beq.n	801bf8e <strstr+0x10>
 801bf9e:	3001      	adds	r0, #1
 801bfa0:	7803      	ldrb	r3, [r0, #0]
 801bfa2:	2b00      	cmp	r3, #0
 801bfa4:	d1ef      	bne.n	801bf86 <strstr+0x8>
 801bfa6:	4618      	mov	r0, r3
 801bfa8:	e7ec      	b.n	801bf84 <strstr+0x6>

0801bfaa <sulp>:
 801bfaa:	b570      	push	{r4, r5, r6, lr}
 801bfac:	4604      	mov	r4, r0
 801bfae:	460d      	mov	r5, r1
 801bfb0:	ec45 4b10 	vmov	d0, r4, r5
 801bfb4:	4616      	mov	r6, r2
 801bfb6:	f002 ffd3 	bl	801ef60 <__ulp>
 801bfba:	ec51 0b10 	vmov	r0, r1, d0
 801bfbe:	b17e      	cbz	r6, 801bfe0 <sulp+0x36>
 801bfc0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801bfc4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801bfc8:	2b00      	cmp	r3, #0
 801bfca:	dd09      	ble.n	801bfe0 <sulp+0x36>
 801bfcc:	051b      	lsls	r3, r3, #20
 801bfce:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801bfd2:	2400      	movs	r4, #0
 801bfd4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801bfd8:	4622      	mov	r2, r4
 801bfda:	462b      	mov	r3, r5
 801bfdc:	f7e4 fb24 	bl	8000628 <__aeabi_dmul>
 801bfe0:	bd70      	pop	{r4, r5, r6, pc}
 801bfe2:	0000      	movs	r0, r0
 801bfe4:	0000      	movs	r0, r0
	...

0801bfe8 <_strtod_l>:
 801bfe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfec:	ed2d 8b02 	vpush	{d8}
 801bff0:	b09d      	sub	sp, #116	; 0x74
 801bff2:	461f      	mov	r7, r3
 801bff4:	2300      	movs	r3, #0
 801bff6:	9318      	str	r3, [sp, #96]	; 0x60
 801bff8:	4ba2      	ldr	r3, [pc, #648]	; (801c284 <_strtod_l+0x29c>)
 801bffa:	9213      	str	r2, [sp, #76]	; 0x4c
 801bffc:	681b      	ldr	r3, [r3, #0]
 801bffe:	9305      	str	r3, [sp, #20]
 801c000:	4604      	mov	r4, r0
 801c002:	4618      	mov	r0, r3
 801c004:	4688      	mov	r8, r1
 801c006:	f7e4 f8f5 	bl	80001f4 <strlen>
 801c00a:	f04f 0a00 	mov.w	sl, #0
 801c00e:	4605      	mov	r5, r0
 801c010:	f04f 0b00 	mov.w	fp, #0
 801c014:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801c018:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c01a:	781a      	ldrb	r2, [r3, #0]
 801c01c:	2a2b      	cmp	r2, #43	; 0x2b
 801c01e:	d04e      	beq.n	801c0be <_strtod_l+0xd6>
 801c020:	d83b      	bhi.n	801c09a <_strtod_l+0xb2>
 801c022:	2a0d      	cmp	r2, #13
 801c024:	d834      	bhi.n	801c090 <_strtod_l+0xa8>
 801c026:	2a08      	cmp	r2, #8
 801c028:	d834      	bhi.n	801c094 <_strtod_l+0xac>
 801c02a:	2a00      	cmp	r2, #0
 801c02c:	d03e      	beq.n	801c0ac <_strtod_l+0xc4>
 801c02e:	2300      	movs	r3, #0
 801c030:	930a      	str	r3, [sp, #40]	; 0x28
 801c032:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801c034:	7833      	ldrb	r3, [r6, #0]
 801c036:	2b30      	cmp	r3, #48	; 0x30
 801c038:	f040 80b0 	bne.w	801c19c <_strtod_l+0x1b4>
 801c03c:	7873      	ldrb	r3, [r6, #1]
 801c03e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c042:	2b58      	cmp	r3, #88	; 0x58
 801c044:	d168      	bne.n	801c118 <_strtod_l+0x130>
 801c046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c048:	9301      	str	r3, [sp, #4]
 801c04a:	ab18      	add	r3, sp, #96	; 0x60
 801c04c:	9702      	str	r7, [sp, #8]
 801c04e:	9300      	str	r3, [sp, #0]
 801c050:	4a8d      	ldr	r2, [pc, #564]	; (801c288 <_strtod_l+0x2a0>)
 801c052:	ab19      	add	r3, sp, #100	; 0x64
 801c054:	a917      	add	r1, sp, #92	; 0x5c
 801c056:	4620      	mov	r0, r4
 801c058:	f002 f880 	bl	801e15c <__gethex>
 801c05c:	f010 0707 	ands.w	r7, r0, #7
 801c060:	4605      	mov	r5, r0
 801c062:	d005      	beq.n	801c070 <_strtod_l+0x88>
 801c064:	2f06      	cmp	r7, #6
 801c066:	d12c      	bne.n	801c0c2 <_strtod_l+0xda>
 801c068:	3601      	adds	r6, #1
 801c06a:	2300      	movs	r3, #0
 801c06c:	9617      	str	r6, [sp, #92]	; 0x5c
 801c06e:	930a      	str	r3, [sp, #40]	; 0x28
 801c070:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c072:	2b00      	cmp	r3, #0
 801c074:	f040 8590 	bne.w	801cb98 <_strtod_l+0xbb0>
 801c078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c07a:	b1eb      	cbz	r3, 801c0b8 <_strtod_l+0xd0>
 801c07c:	4652      	mov	r2, sl
 801c07e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801c082:	ec43 2b10 	vmov	d0, r2, r3
 801c086:	b01d      	add	sp, #116	; 0x74
 801c088:	ecbd 8b02 	vpop	{d8}
 801c08c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c090:	2a20      	cmp	r2, #32
 801c092:	d1cc      	bne.n	801c02e <_strtod_l+0x46>
 801c094:	3301      	adds	r3, #1
 801c096:	9317      	str	r3, [sp, #92]	; 0x5c
 801c098:	e7be      	b.n	801c018 <_strtod_l+0x30>
 801c09a:	2a2d      	cmp	r2, #45	; 0x2d
 801c09c:	d1c7      	bne.n	801c02e <_strtod_l+0x46>
 801c09e:	2201      	movs	r2, #1
 801c0a0:	920a      	str	r2, [sp, #40]	; 0x28
 801c0a2:	1c5a      	adds	r2, r3, #1
 801c0a4:	9217      	str	r2, [sp, #92]	; 0x5c
 801c0a6:	785b      	ldrb	r3, [r3, #1]
 801c0a8:	2b00      	cmp	r3, #0
 801c0aa:	d1c2      	bne.n	801c032 <_strtod_l+0x4a>
 801c0ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c0ae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801c0b2:	2b00      	cmp	r3, #0
 801c0b4:	f040 856e 	bne.w	801cb94 <_strtod_l+0xbac>
 801c0b8:	4652      	mov	r2, sl
 801c0ba:	465b      	mov	r3, fp
 801c0bc:	e7e1      	b.n	801c082 <_strtod_l+0x9a>
 801c0be:	2200      	movs	r2, #0
 801c0c0:	e7ee      	b.n	801c0a0 <_strtod_l+0xb8>
 801c0c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c0c4:	b13a      	cbz	r2, 801c0d6 <_strtod_l+0xee>
 801c0c6:	2135      	movs	r1, #53	; 0x35
 801c0c8:	a81a      	add	r0, sp, #104	; 0x68
 801c0ca:	f003 f854 	bl	801f176 <__copybits>
 801c0ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c0d0:	4620      	mov	r0, r4
 801c0d2:	f002 fc13 	bl	801e8fc <_Bfree>
 801c0d6:	3f01      	subs	r7, #1
 801c0d8:	2f04      	cmp	r7, #4
 801c0da:	d806      	bhi.n	801c0ea <_strtod_l+0x102>
 801c0dc:	e8df f007 	tbb	[pc, r7]
 801c0e0:	1714030a 	.word	0x1714030a
 801c0e4:	0a          	.byte	0x0a
 801c0e5:	00          	.byte	0x00
 801c0e6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801c0ea:	0728      	lsls	r0, r5, #28
 801c0ec:	d5c0      	bpl.n	801c070 <_strtod_l+0x88>
 801c0ee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801c0f2:	e7bd      	b.n	801c070 <_strtod_l+0x88>
 801c0f4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801c0f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801c0fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801c0fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801c102:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801c106:	e7f0      	b.n	801c0ea <_strtod_l+0x102>
 801c108:	f8df b180 	ldr.w	fp, [pc, #384]	; 801c28c <_strtod_l+0x2a4>
 801c10c:	e7ed      	b.n	801c0ea <_strtod_l+0x102>
 801c10e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801c112:	f04f 3aff 	mov.w	sl, #4294967295
 801c116:	e7e8      	b.n	801c0ea <_strtod_l+0x102>
 801c118:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c11a:	1c5a      	adds	r2, r3, #1
 801c11c:	9217      	str	r2, [sp, #92]	; 0x5c
 801c11e:	785b      	ldrb	r3, [r3, #1]
 801c120:	2b30      	cmp	r3, #48	; 0x30
 801c122:	d0f9      	beq.n	801c118 <_strtod_l+0x130>
 801c124:	2b00      	cmp	r3, #0
 801c126:	d0a3      	beq.n	801c070 <_strtod_l+0x88>
 801c128:	2301      	movs	r3, #1
 801c12a:	f04f 0900 	mov.w	r9, #0
 801c12e:	9304      	str	r3, [sp, #16]
 801c130:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c132:	9308      	str	r3, [sp, #32]
 801c134:	f8cd 901c 	str.w	r9, [sp, #28]
 801c138:	464f      	mov	r7, r9
 801c13a:	220a      	movs	r2, #10
 801c13c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801c13e:	7806      	ldrb	r6, [r0, #0]
 801c140:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801c144:	b2d9      	uxtb	r1, r3
 801c146:	2909      	cmp	r1, #9
 801c148:	d92a      	bls.n	801c1a0 <_strtod_l+0x1b8>
 801c14a:	9905      	ldr	r1, [sp, #20]
 801c14c:	462a      	mov	r2, r5
 801c14e:	f003 fb6e 	bl	801f82e <strncmp>
 801c152:	b398      	cbz	r0, 801c1bc <_strtod_l+0x1d4>
 801c154:	2000      	movs	r0, #0
 801c156:	4632      	mov	r2, r6
 801c158:	463d      	mov	r5, r7
 801c15a:	9005      	str	r0, [sp, #20]
 801c15c:	4603      	mov	r3, r0
 801c15e:	2a65      	cmp	r2, #101	; 0x65
 801c160:	d001      	beq.n	801c166 <_strtod_l+0x17e>
 801c162:	2a45      	cmp	r2, #69	; 0x45
 801c164:	d118      	bne.n	801c198 <_strtod_l+0x1b0>
 801c166:	b91d      	cbnz	r5, 801c170 <_strtod_l+0x188>
 801c168:	9a04      	ldr	r2, [sp, #16]
 801c16a:	4302      	orrs	r2, r0
 801c16c:	d09e      	beq.n	801c0ac <_strtod_l+0xc4>
 801c16e:	2500      	movs	r5, #0
 801c170:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801c174:	f108 0201 	add.w	r2, r8, #1
 801c178:	9217      	str	r2, [sp, #92]	; 0x5c
 801c17a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801c17e:	2a2b      	cmp	r2, #43	; 0x2b
 801c180:	d075      	beq.n	801c26e <_strtod_l+0x286>
 801c182:	2a2d      	cmp	r2, #45	; 0x2d
 801c184:	d07b      	beq.n	801c27e <_strtod_l+0x296>
 801c186:	f04f 0c00 	mov.w	ip, #0
 801c18a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801c18e:	2909      	cmp	r1, #9
 801c190:	f240 8082 	bls.w	801c298 <_strtod_l+0x2b0>
 801c194:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801c198:	2600      	movs	r6, #0
 801c19a:	e09d      	b.n	801c2d8 <_strtod_l+0x2f0>
 801c19c:	2300      	movs	r3, #0
 801c19e:	e7c4      	b.n	801c12a <_strtod_l+0x142>
 801c1a0:	2f08      	cmp	r7, #8
 801c1a2:	bfd8      	it	le
 801c1a4:	9907      	ldrle	r1, [sp, #28]
 801c1a6:	f100 0001 	add.w	r0, r0, #1
 801c1aa:	bfda      	itte	le
 801c1ac:	fb02 3301 	mlale	r3, r2, r1, r3
 801c1b0:	9307      	strle	r3, [sp, #28]
 801c1b2:	fb02 3909 	mlagt	r9, r2, r9, r3
 801c1b6:	3701      	adds	r7, #1
 801c1b8:	9017      	str	r0, [sp, #92]	; 0x5c
 801c1ba:	e7bf      	b.n	801c13c <_strtod_l+0x154>
 801c1bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c1be:	195a      	adds	r2, r3, r5
 801c1c0:	9217      	str	r2, [sp, #92]	; 0x5c
 801c1c2:	5d5a      	ldrb	r2, [r3, r5]
 801c1c4:	2f00      	cmp	r7, #0
 801c1c6:	d037      	beq.n	801c238 <_strtod_l+0x250>
 801c1c8:	9005      	str	r0, [sp, #20]
 801c1ca:	463d      	mov	r5, r7
 801c1cc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801c1d0:	2b09      	cmp	r3, #9
 801c1d2:	d912      	bls.n	801c1fa <_strtod_l+0x212>
 801c1d4:	2301      	movs	r3, #1
 801c1d6:	e7c2      	b.n	801c15e <_strtod_l+0x176>
 801c1d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c1da:	1c5a      	adds	r2, r3, #1
 801c1dc:	9217      	str	r2, [sp, #92]	; 0x5c
 801c1de:	785a      	ldrb	r2, [r3, #1]
 801c1e0:	3001      	adds	r0, #1
 801c1e2:	2a30      	cmp	r2, #48	; 0x30
 801c1e4:	d0f8      	beq.n	801c1d8 <_strtod_l+0x1f0>
 801c1e6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801c1ea:	2b08      	cmp	r3, #8
 801c1ec:	f200 84d9 	bhi.w	801cba2 <_strtod_l+0xbba>
 801c1f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c1f2:	9005      	str	r0, [sp, #20]
 801c1f4:	2000      	movs	r0, #0
 801c1f6:	9308      	str	r3, [sp, #32]
 801c1f8:	4605      	mov	r5, r0
 801c1fa:	3a30      	subs	r2, #48	; 0x30
 801c1fc:	f100 0301 	add.w	r3, r0, #1
 801c200:	d014      	beq.n	801c22c <_strtod_l+0x244>
 801c202:	9905      	ldr	r1, [sp, #20]
 801c204:	4419      	add	r1, r3
 801c206:	9105      	str	r1, [sp, #20]
 801c208:	462b      	mov	r3, r5
 801c20a:	eb00 0e05 	add.w	lr, r0, r5
 801c20e:	210a      	movs	r1, #10
 801c210:	4573      	cmp	r3, lr
 801c212:	d113      	bne.n	801c23c <_strtod_l+0x254>
 801c214:	182b      	adds	r3, r5, r0
 801c216:	2b08      	cmp	r3, #8
 801c218:	f105 0501 	add.w	r5, r5, #1
 801c21c:	4405      	add	r5, r0
 801c21e:	dc1c      	bgt.n	801c25a <_strtod_l+0x272>
 801c220:	9907      	ldr	r1, [sp, #28]
 801c222:	230a      	movs	r3, #10
 801c224:	fb03 2301 	mla	r3, r3, r1, r2
 801c228:	9307      	str	r3, [sp, #28]
 801c22a:	2300      	movs	r3, #0
 801c22c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c22e:	1c51      	adds	r1, r2, #1
 801c230:	9117      	str	r1, [sp, #92]	; 0x5c
 801c232:	7852      	ldrb	r2, [r2, #1]
 801c234:	4618      	mov	r0, r3
 801c236:	e7c9      	b.n	801c1cc <_strtod_l+0x1e4>
 801c238:	4638      	mov	r0, r7
 801c23a:	e7d2      	b.n	801c1e2 <_strtod_l+0x1fa>
 801c23c:	2b08      	cmp	r3, #8
 801c23e:	dc04      	bgt.n	801c24a <_strtod_l+0x262>
 801c240:	9e07      	ldr	r6, [sp, #28]
 801c242:	434e      	muls	r6, r1
 801c244:	9607      	str	r6, [sp, #28]
 801c246:	3301      	adds	r3, #1
 801c248:	e7e2      	b.n	801c210 <_strtod_l+0x228>
 801c24a:	f103 0c01 	add.w	ip, r3, #1
 801c24e:	f1bc 0f10 	cmp.w	ip, #16
 801c252:	bfd8      	it	le
 801c254:	fb01 f909 	mulle.w	r9, r1, r9
 801c258:	e7f5      	b.n	801c246 <_strtod_l+0x25e>
 801c25a:	2d10      	cmp	r5, #16
 801c25c:	bfdc      	itt	le
 801c25e:	230a      	movle	r3, #10
 801c260:	fb03 2909 	mlale	r9, r3, r9, r2
 801c264:	e7e1      	b.n	801c22a <_strtod_l+0x242>
 801c266:	2300      	movs	r3, #0
 801c268:	9305      	str	r3, [sp, #20]
 801c26a:	2301      	movs	r3, #1
 801c26c:	e77c      	b.n	801c168 <_strtod_l+0x180>
 801c26e:	f04f 0c00 	mov.w	ip, #0
 801c272:	f108 0202 	add.w	r2, r8, #2
 801c276:	9217      	str	r2, [sp, #92]	; 0x5c
 801c278:	f898 2002 	ldrb.w	r2, [r8, #2]
 801c27c:	e785      	b.n	801c18a <_strtod_l+0x1a2>
 801c27e:	f04f 0c01 	mov.w	ip, #1
 801c282:	e7f6      	b.n	801c272 <_strtod_l+0x28a>
 801c284:	08021bf4 	.word	0x08021bf4
 801c288:	080218b0 	.word	0x080218b0
 801c28c:	7ff00000 	.word	0x7ff00000
 801c290:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c292:	1c51      	adds	r1, r2, #1
 801c294:	9117      	str	r1, [sp, #92]	; 0x5c
 801c296:	7852      	ldrb	r2, [r2, #1]
 801c298:	2a30      	cmp	r2, #48	; 0x30
 801c29a:	d0f9      	beq.n	801c290 <_strtod_l+0x2a8>
 801c29c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801c2a0:	2908      	cmp	r1, #8
 801c2a2:	f63f af79 	bhi.w	801c198 <_strtod_l+0x1b0>
 801c2a6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801c2aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c2ac:	9206      	str	r2, [sp, #24]
 801c2ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c2b0:	1c51      	adds	r1, r2, #1
 801c2b2:	9117      	str	r1, [sp, #92]	; 0x5c
 801c2b4:	7852      	ldrb	r2, [r2, #1]
 801c2b6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801c2ba:	2e09      	cmp	r6, #9
 801c2bc:	d937      	bls.n	801c32e <_strtod_l+0x346>
 801c2be:	9e06      	ldr	r6, [sp, #24]
 801c2c0:	1b89      	subs	r1, r1, r6
 801c2c2:	2908      	cmp	r1, #8
 801c2c4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801c2c8:	dc02      	bgt.n	801c2d0 <_strtod_l+0x2e8>
 801c2ca:	4576      	cmp	r6, lr
 801c2cc:	bfa8      	it	ge
 801c2ce:	4676      	movge	r6, lr
 801c2d0:	f1bc 0f00 	cmp.w	ip, #0
 801c2d4:	d000      	beq.n	801c2d8 <_strtod_l+0x2f0>
 801c2d6:	4276      	negs	r6, r6
 801c2d8:	2d00      	cmp	r5, #0
 801c2da:	d14d      	bne.n	801c378 <_strtod_l+0x390>
 801c2dc:	9904      	ldr	r1, [sp, #16]
 801c2de:	4301      	orrs	r1, r0
 801c2e0:	f47f aec6 	bne.w	801c070 <_strtod_l+0x88>
 801c2e4:	2b00      	cmp	r3, #0
 801c2e6:	f47f aee1 	bne.w	801c0ac <_strtod_l+0xc4>
 801c2ea:	2a69      	cmp	r2, #105	; 0x69
 801c2ec:	d027      	beq.n	801c33e <_strtod_l+0x356>
 801c2ee:	dc24      	bgt.n	801c33a <_strtod_l+0x352>
 801c2f0:	2a49      	cmp	r2, #73	; 0x49
 801c2f2:	d024      	beq.n	801c33e <_strtod_l+0x356>
 801c2f4:	2a4e      	cmp	r2, #78	; 0x4e
 801c2f6:	f47f aed9 	bne.w	801c0ac <_strtod_l+0xc4>
 801c2fa:	499f      	ldr	r1, [pc, #636]	; (801c578 <_strtod_l+0x590>)
 801c2fc:	a817      	add	r0, sp, #92	; 0x5c
 801c2fe:	f002 f985 	bl	801e60c <__match>
 801c302:	2800      	cmp	r0, #0
 801c304:	f43f aed2 	beq.w	801c0ac <_strtod_l+0xc4>
 801c308:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c30a:	781b      	ldrb	r3, [r3, #0]
 801c30c:	2b28      	cmp	r3, #40	; 0x28
 801c30e:	d12d      	bne.n	801c36c <_strtod_l+0x384>
 801c310:	499a      	ldr	r1, [pc, #616]	; (801c57c <_strtod_l+0x594>)
 801c312:	aa1a      	add	r2, sp, #104	; 0x68
 801c314:	a817      	add	r0, sp, #92	; 0x5c
 801c316:	f002 f98d 	bl	801e634 <__hexnan>
 801c31a:	2805      	cmp	r0, #5
 801c31c:	d126      	bne.n	801c36c <_strtod_l+0x384>
 801c31e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c320:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801c324:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801c328:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801c32c:	e6a0      	b.n	801c070 <_strtod_l+0x88>
 801c32e:	210a      	movs	r1, #10
 801c330:	fb01 2e0e 	mla	lr, r1, lr, r2
 801c334:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801c338:	e7b9      	b.n	801c2ae <_strtod_l+0x2c6>
 801c33a:	2a6e      	cmp	r2, #110	; 0x6e
 801c33c:	e7db      	b.n	801c2f6 <_strtod_l+0x30e>
 801c33e:	4990      	ldr	r1, [pc, #576]	; (801c580 <_strtod_l+0x598>)
 801c340:	a817      	add	r0, sp, #92	; 0x5c
 801c342:	f002 f963 	bl	801e60c <__match>
 801c346:	2800      	cmp	r0, #0
 801c348:	f43f aeb0 	beq.w	801c0ac <_strtod_l+0xc4>
 801c34c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c34e:	498d      	ldr	r1, [pc, #564]	; (801c584 <_strtod_l+0x59c>)
 801c350:	3b01      	subs	r3, #1
 801c352:	a817      	add	r0, sp, #92	; 0x5c
 801c354:	9317      	str	r3, [sp, #92]	; 0x5c
 801c356:	f002 f959 	bl	801e60c <__match>
 801c35a:	b910      	cbnz	r0, 801c362 <_strtod_l+0x37a>
 801c35c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c35e:	3301      	adds	r3, #1
 801c360:	9317      	str	r3, [sp, #92]	; 0x5c
 801c362:	f8df b230 	ldr.w	fp, [pc, #560]	; 801c594 <_strtod_l+0x5ac>
 801c366:	f04f 0a00 	mov.w	sl, #0
 801c36a:	e681      	b.n	801c070 <_strtod_l+0x88>
 801c36c:	4886      	ldr	r0, [pc, #536]	; (801c588 <_strtod_l+0x5a0>)
 801c36e:	f003 fa13 	bl	801f798 <nan>
 801c372:	ec5b ab10 	vmov	sl, fp, d0
 801c376:	e67b      	b.n	801c070 <_strtod_l+0x88>
 801c378:	9b05      	ldr	r3, [sp, #20]
 801c37a:	9807      	ldr	r0, [sp, #28]
 801c37c:	1af3      	subs	r3, r6, r3
 801c37e:	2f00      	cmp	r7, #0
 801c380:	bf08      	it	eq
 801c382:	462f      	moveq	r7, r5
 801c384:	2d10      	cmp	r5, #16
 801c386:	9306      	str	r3, [sp, #24]
 801c388:	46a8      	mov	r8, r5
 801c38a:	bfa8      	it	ge
 801c38c:	f04f 0810 	movge.w	r8, #16
 801c390:	f7e4 f8d0 	bl	8000534 <__aeabi_ui2d>
 801c394:	2d09      	cmp	r5, #9
 801c396:	4682      	mov	sl, r0
 801c398:	468b      	mov	fp, r1
 801c39a:	dd13      	ble.n	801c3c4 <_strtod_l+0x3dc>
 801c39c:	4b7b      	ldr	r3, [pc, #492]	; (801c58c <_strtod_l+0x5a4>)
 801c39e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801c3a2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801c3a6:	f7e4 f93f 	bl	8000628 <__aeabi_dmul>
 801c3aa:	4682      	mov	sl, r0
 801c3ac:	4648      	mov	r0, r9
 801c3ae:	468b      	mov	fp, r1
 801c3b0:	f7e4 f8c0 	bl	8000534 <__aeabi_ui2d>
 801c3b4:	4602      	mov	r2, r0
 801c3b6:	460b      	mov	r3, r1
 801c3b8:	4650      	mov	r0, sl
 801c3ba:	4659      	mov	r1, fp
 801c3bc:	f7e3 ff7e 	bl	80002bc <__adddf3>
 801c3c0:	4682      	mov	sl, r0
 801c3c2:	468b      	mov	fp, r1
 801c3c4:	2d0f      	cmp	r5, #15
 801c3c6:	dc38      	bgt.n	801c43a <_strtod_l+0x452>
 801c3c8:	9b06      	ldr	r3, [sp, #24]
 801c3ca:	2b00      	cmp	r3, #0
 801c3cc:	f43f ae50 	beq.w	801c070 <_strtod_l+0x88>
 801c3d0:	dd24      	ble.n	801c41c <_strtod_l+0x434>
 801c3d2:	2b16      	cmp	r3, #22
 801c3d4:	dc0b      	bgt.n	801c3ee <_strtod_l+0x406>
 801c3d6:	496d      	ldr	r1, [pc, #436]	; (801c58c <_strtod_l+0x5a4>)
 801c3d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801c3dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c3e0:	4652      	mov	r2, sl
 801c3e2:	465b      	mov	r3, fp
 801c3e4:	f7e4 f920 	bl	8000628 <__aeabi_dmul>
 801c3e8:	4682      	mov	sl, r0
 801c3ea:	468b      	mov	fp, r1
 801c3ec:	e640      	b.n	801c070 <_strtod_l+0x88>
 801c3ee:	9a06      	ldr	r2, [sp, #24]
 801c3f0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801c3f4:	4293      	cmp	r3, r2
 801c3f6:	db20      	blt.n	801c43a <_strtod_l+0x452>
 801c3f8:	4c64      	ldr	r4, [pc, #400]	; (801c58c <_strtod_l+0x5a4>)
 801c3fa:	f1c5 050f 	rsb	r5, r5, #15
 801c3fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801c402:	4652      	mov	r2, sl
 801c404:	465b      	mov	r3, fp
 801c406:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c40a:	f7e4 f90d 	bl	8000628 <__aeabi_dmul>
 801c40e:	9b06      	ldr	r3, [sp, #24]
 801c410:	1b5d      	subs	r5, r3, r5
 801c412:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801c416:	e9d4 2300 	ldrd	r2, r3, [r4]
 801c41a:	e7e3      	b.n	801c3e4 <_strtod_l+0x3fc>
 801c41c:	9b06      	ldr	r3, [sp, #24]
 801c41e:	3316      	adds	r3, #22
 801c420:	db0b      	blt.n	801c43a <_strtod_l+0x452>
 801c422:	9b05      	ldr	r3, [sp, #20]
 801c424:	1b9e      	subs	r6, r3, r6
 801c426:	4b59      	ldr	r3, [pc, #356]	; (801c58c <_strtod_l+0x5a4>)
 801c428:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801c42c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801c430:	4650      	mov	r0, sl
 801c432:	4659      	mov	r1, fp
 801c434:	f7e4 fa22 	bl	800087c <__aeabi_ddiv>
 801c438:	e7d6      	b.n	801c3e8 <_strtod_l+0x400>
 801c43a:	9b06      	ldr	r3, [sp, #24]
 801c43c:	eba5 0808 	sub.w	r8, r5, r8
 801c440:	4498      	add	r8, r3
 801c442:	f1b8 0f00 	cmp.w	r8, #0
 801c446:	dd74      	ble.n	801c532 <_strtod_l+0x54a>
 801c448:	f018 030f 	ands.w	r3, r8, #15
 801c44c:	d00a      	beq.n	801c464 <_strtod_l+0x47c>
 801c44e:	494f      	ldr	r1, [pc, #316]	; (801c58c <_strtod_l+0x5a4>)
 801c450:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801c454:	4652      	mov	r2, sl
 801c456:	465b      	mov	r3, fp
 801c458:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c45c:	f7e4 f8e4 	bl	8000628 <__aeabi_dmul>
 801c460:	4682      	mov	sl, r0
 801c462:	468b      	mov	fp, r1
 801c464:	f038 080f 	bics.w	r8, r8, #15
 801c468:	d04f      	beq.n	801c50a <_strtod_l+0x522>
 801c46a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801c46e:	dd22      	ble.n	801c4b6 <_strtod_l+0x4ce>
 801c470:	2500      	movs	r5, #0
 801c472:	462e      	mov	r6, r5
 801c474:	9507      	str	r5, [sp, #28]
 801c476:	9505      	str	r5, [sp, #20]
 801c478:	2322      	movs	r3, #34	; 0x22
 801c47a:	f8df b118 	ldr.w	fp, [pc, #280]	; 801c594 <_strtod_l+0x5ac>
 801c47e:	6023      	str	r3, [r4, #0]
 801c480:	f04f 0a00 	mov.w	sl, #0
 801c484:	9b07      	ldr	r3, [sp, #28]
 801c486:	2b00      	cmp	r3, #0
 801c488:	f43f adf2 	beq.w	801c070 <_strtod_l+0x88>
 801c48c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c48e:	4620      	mov	r0, r4
 801c490:	f002 fa34 	bl	801e8fc <_Bfree>
 801c494:	9905      	ldr	r1, [sp, #20]
 801c496:	4620      	mov	r0, r4
 801c498:	f002 fa30 	bl	801e8fc <_Bfree>
 801c49c:	4631      	mov	r1, r6
 801c49e:	4620      	mov	r0, r4
 801c4a0:	f002 fa2c 	bl	801e8fc <_Bfree>
 801c4a4:	9907      	ldr	r1, [sp, #28]
 801c4a6:	4620      	mov	r0, r4
 801c4a8:	f002 fa28 	bl	801e8fc <_Bfree>
 801c4ac:	4629      	mov	r1, r5
 801c4ae:	4620      	mov	r0, r4
 801c4b0:	f002 fa24 	bl	801e8fc <_Bfree>
 801c4b4:	e5dc      	b.n	801c070 <_strtod_l+0x88>
 801c4b6:	4b36      	ldr	r3, [pc, #216]	; (801c590 <_strtod_l+0x5a8>)
 801c4b8:	9304      	str	r3, [sp, #16]
 801c4ba:	2300      	movs	r3, #0
 801c4bc:	ea4f 1828 	mov.w	r8, r8, asr #4
 801c4c0:	4650      	mov	r0, sl
 801c4c2:	4659      	mov	r1, fp
 801c4c4:	4699      	mov	r9, r3
 801c4c6:	f1b8 0f01 	cmp.w	r8, #1
 801c4ca:	dc21      	bgt.n	801c510 <_strtod_l+0x528>
 801c4cc:	b10b      	cbz	r3, 801c4d2 <_strtod_l+0x4ea>
 801c4ce:	4682      	mov	sl, r0
 801c4d0:	468b      	mov	fp, r1
 801c4d2:	4b2f      	ldr	r3, [pc, #188]	; (801c590 <_strtod_l+0x5a8>)
 801c4d4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801c4d8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801c4dc:	4652      	mov	r2, sl
 801c4de:	465b      	mov	r3, fp
 801c4e0:	e9d9 0100 	ldrd	r0, r1, [r9]
 801c4e4:	f7e4 f8a0 	bl	8000628 <__aeabi_dmul>
 801c4e8:	4b2a      	ldr	r3, [pc, #168]	; (801c594 <_strtod_l+0x5ac>)
 801c4ea:	460a      	mov	r2, r1
 801c4ec:	400b      	ands	r3, r1
 801c4ee:	492a      	ldr	r1, [pc, #168]	; (801c598 <_strtod_l+0x5b0>)
 801c4f0:	428b      	cmp	r3, r1
 801c4f2:	4682      	mov	sl, r0
 801c4f4:	d8bc      	bhi.n	801c470 <_strtod_l+0x488>
 801c4f6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801c4fa:	428b      	cmp	r3, r1
 801c4fc:	bf86      	itte	hi
 801c4fe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801c59c <_strtod_l+0x5b4>
 801c502:	f04f 3aff 	movhi.w	sl, #4294967295
 801c506:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801c50a:	2300      	movs	r3, #0
 801c50c:	9304      	str	r3, [sp, #16]
 801c50e:	e084      	b.n	801c61a <_strtod_l+0x632>
 801c510:	f018 0f01 	tst.w	r8, #1
 801c514:	d005      	beq.n	801c522 <_strtod_l+0x53a>
 801c516:	9b04      	ldr	r3, [sp, #16]
 801c518:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c51c:	f7e4 f884 	bl	8000628 <__aeabi_dmul>
 801c520:	2301      	movs	r3, #1
 801c522:	9a04      	ldr	r2, [sp, #16]
 801c524:	3208      	adds	r2, #8
 801c526:	f109 0901 	add.w	r9, r9, #1
 801c52a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801c52e:	9204      	str	r2, [sp, #16]
 801c530:	e7c9      	b.n	801c4c6 <_strtod_l+0x4de>
 801c532:	d0ea      	beq.n	801c50a <_strtod_l+0x522>
 801c534:	f1c8 0800 	rsb	r8, r8, #0
 801c538:	f018 020f 	ands.w	r2, r8, #15
 801c53c:	d00a      	beq.n	801c554 <_strtod_l+0x56c>
 801c53e:	4b13      	ldr	r3, [pc, #76]	; (801c58c <_strtod_l+0x5a4>)
 801c540:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c544:	4650      	mov	r0, sl
 801c546:	4659      	mov	r1, fp
 801c548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c54c:	f7e4 f996 	bl	800087c <__aeabi_ddiv>
 801c550:	4682      	mov	sl, r0
 801c552:	468b      	mov	fp, r1
 801c554:	ea5f 1828 	movs.w	r8, r8, asr #4
 801c558:	d0d7      	beq.n	801c50a <_strtod_l+0x522>
 801c55a:	f1b8 0f1f 	cmp.w	r8, #31
 801c55e:	dd1f      	ble.n	801c5a0 <_strtod_l+0x5b8>
 801c560:	2500      	movs	r5, #0
 801c562:	462e      	mov	r6, r5
 801c564:	9507      	str	r5, [sp, #28]
 801c566:	9505      	str	r5, [sp, #20]
 801c568:	2322      	movs	r3, #34	; 0x22
 801c56a:	f04f 0a00 	mov.w	sl, #0
 801c56e:	f04f 0b00 	mov.w	fp, #0
 801c572:	6023      	str	r3, [r4, #0]
 801c574:	e786      	b.n	801c484 <_strtod_l+0x49c>
 801c576:	bf00      	nop
 801c578:	08021881 	.word	0x08021881
 801c57c:	080218c4 	.word	0x080218c4
 801c580:	08021879 	.word	0x08021879
 801c584:	08021ab4 	.word	0x08021ab4
 801c588:	080219af 	.word	0x080219af
 801c58c:	08021c90 	.word	0x08021c90
 801c590:	08021c68 	.word	0x08021c68
 801c594:	7ff00000 	.word	0x7ff00000
 801c598:	7ca00000 	.word	0x7ca00000
 801c59c:	7fefffff 	.word	0x7fefffff
 801c5a0:	f018 0310 	ands.w	r3, r8, #16
 801c5a4:	bf18      	it	ne
 801c5a6:	236a      	movne	r3, #106	; 0x6a
 801c5a8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 801c958 <_strtod_l+0x970>
 801c5ac:	9304      	str	r3, [sp, #16]
 801c5ae:	4650      	mov	r0, sl
 801c5b0:	4659      	mov	r1, fp
 801c5b2:	2300      	movs	r3, #0
 801c5b4:	f018 0f01 	tst.w	r8, #1
 801c5b8:	d004      	beq.n	801c5c4 <_strtod_l+0x5dc>
 801c5ba:	e9d9 2300 	ldrd	r2, r3, [r9]
 801c5be:	f7e4 f833 	bl	8000628 <__aeabi_dmul>
 801c5c2:	2301      	movs	r3, #1
 801c5c4:	ea5f 0868 	movs.w	r8, r8, asr #1
 801c5c8:	f109 0908 	add.w	r9, r9, #8
 801c5cc:	d1f2      	bne.n	801c5b4 <_strtod_l+0x5cc>
 801c5ce:	b10b      	cbz	r3, 801c5d4 <_strtod_l+0x5ec>
 801c5d0:	4682      	mov	sl, r0
 801c5d2:	468b      	mov	fp, r1
 801c5d4:	9b04      	ldr	r3, [sp, #16]
 801c5d6:	b1c3      	cbz	r3, 801c60a <_strtod_l+0x622>
 801c5d8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801c5dc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801c5e0:	2b00      	cmp	r3, #0
 801c5e2:	4659      	mov	r1, fp
 801c5e4:	dd11      	ble.n	801c60a <_strtod_l+0x622>
 801c5e6:	2b1f      	cmp	r3, #31
 801c5e8:	f340 8124 	ble.w	801c834 <_strtod_l+0x84c>
 801c5ec:	2b34      	cmp	r3, #52	; 0x34
 801c5ee:	bfde      	ittt	le
 801c5f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801c5f4:	f04f 33ff 	movle.w	r3, #4294967295
 801c5f8:	fa03 f202 	lslle.w	r2, r3, r2
 801c5fc:	f04f 0a00 	mov.w	sl, #0
 801c600:	bfcc      	ite	gt
 801c602:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801c606:	ea02 0b01 	andle.w	fp, r2, r1
 801c60a:	2200      	movs	r2, #0
 801c60c:	2300      	movs	r3, #0
 801c60e:	4650      	mov	r0, sl
 801c610:	4659      	mov	r1, fp
 801c612:	f7e4 fa71 	bl	8000af8 <__aeabi_dcmpeq>
 801c616:	2800      	cmp	r0, #0
 801c618:	d1a2      	bne.n	801c560 <_strtod_l+0x578>
 801c61a:	9b07      	ldr	r3, [sp, #28]
 801c61c:	9300      	str	r3, [sp, #0]
 801c61e:	9908      	ldr	r1, [sp, #32]
 801c620:	462b      	mov	r3, r5
 801c622:	463a      	mov	r2, r7
 801c624:	4620      	mov	r0, r4
 801c626:	f002 f9d1 	bl	801e9cc <__s2b>
 801c62a:	9007      	str	r0, [sp, #28]
 801c62c:	2800      	cmp	r0, #0
 801c62e:	f43f af1f 	beq.w	801c470 <_strtod_l+0x488>
 801c632:	9b05      	ldr	r3, [sp, #20]
 801c634:	1b9e      	subs	r6, r3, r6
 801c636:	9b06      	ldr	r3, [sp, #24]
 801c638:	2b00      	cmp	r3, #0
 801c63a:	bfb4      	ite	lt
 801c63c:	4633      	movlt	r3, r6
 801c63e:	2300      	movge	r3, #0
 801c640:	930c      	str	r3, [sp, #48]	; 0x30
 801c642:	9b06      	ldr	r3, [sp, #24]
 801c644:	2500      	movs	r5, #0
 801c646:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c64a:	9312      	str	r3, [sp, #72]	; 0x48
 801c64c:	462e      	mov	r6, r5
 801c64e:	9b07      	ldr	r3, [sp, #28]
 801c650:	4620      	mov	r0, r4
 801c652:	6859      	ldr	r1, [r3, #4]
 801c654:	f002 f912 	bl	801e87c <_Balloc>
 801c658:	9005      	str	r0, [sp, #20]
 801c65a:	2800      	cmp	r0, #0
 801c65c:	f43f af0c 	beq.w	801c478 <_strtod_l+0x490>
 801c660:	9b07      	ldr	r3, [sp, #28]
 801c662:	691a      	ldr	r2, [r3, #16]
 801c664:	3202      	adds	r2, #2
 801c666:	f103 010c 	add.w	r1, r3, #12
 801c66a:	0092      	lsls	r2, r2, #2
 801c66c:	300c      	adds	r0, #12
 801c66e:	f7fe fc23 	bl	801aeb8 <memcpy>
 801c672:	ec4b ab10 	vmov	d0, sl, fp
 801c676:	aa1a      	add	r2, sp, #104	; 0x68
 801c678:	a919      	add	r1, sp, #100	; 0x64
 801c67a:	4620      	mov	r0, r4
 801c67c:	f002 fcec 	bl	801f058 <__d2b>
 801c680:	ec4b ab18 	vmov	d8, sl, fp
 801c684:	9018      	str	r0, [sp, #96]	; 0x60
 801c686:	2800      	cmp	r0, #0
 801c688:	f43f aef6 	beq.w	801c478 <_strtod_l+0x490>
 801c68c:	2101      	movs	r1, #1
 801c68e:	4620      	mov	r0, r4
 801c690:	f002 fa36 	bl	801eb00 <__i2b>
 801c694:	4606      	mov	r6, r0
 801c696:	2800      	cmp	r0, #0
 801c698:	f43f aeee 	beq.w	801c478 <_strtod_l+0x490>
 801c69c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c69e:	9904      	ldr	r1, [sp, #16]
 801c6a0:	2b00      	cmp	r3, #0
 801c6a2:	bfab      	itete	ge
 801c6a4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801c6a6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801c6a8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801c6aa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801c6ae:	bfac      	ite	ge
 801c6b0:	eb03 0902 	addge.w	r9, r3, r2
 801c6b4:	1ad7      	sublt	r7, r2, r3
 801c6b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801c6b8:	eba3 0801 	sub.w	r8, r3, r1
 801c6bc:	4490      	add	r8, r2
 801c6be:	4ba1      	ldr	r3, [pc, #644]	; (801c944 <_strtod_l+0x95c>)
 801c6c0:	f108 38ff 	add.w	r8, r8, #4294967295
 801c6c4:	4598      	cmp	r8, r3
 801c6c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801c6ca:	f280 80c7 	bge.w	801c85c <_strtod_l+0x874>
 801c6ce:	eba3 0308 	sub.w	r3, r3, r8
 801c6d2:	2b1f      	cmp	r3, #31
 801c6d4:	eba2 0203 	sub.w	r2, r2, r3
 801c6d8:	f04f 0101 	mov.w	r1, #1
 801c6dc:	f300 80b1 	bgt.w	801c842 <_strtod_l+0x85a>
 801c6e0:	fa01 f303 	lsl.w	r3, r1, r3
 801c6e4:	930d      	str	r3, [sp, #52]	; 0x34
 801c6e6:	2300      	movs	r3, #0
 801c6e8:	9308      	str	r3, [sp, #32]
 801c6ea:	eb09 0802 	add.w	r8, r9, r2
 801c6ee:	9b04      	ldr	r3, [sp, #16]
 801c6f0:	45c1      	cmp	r9, r8
 801c6f2:	4417      	add	r7, r2
 801c6f4:	441f      	add	r7, r3
 801c6f6:	464b      	mov	r3, r9
 801c6f8:	bfa8      	it	ge
 801c6fa:	4643      	movge	r3, r8
 801c6fc:	42bb      	cmp	r3, r7
 801c6fe:	bfa8      	it	ge
 801c700:	463b      	movge	r3, r7
 801c702:	2b00      	cmp	r3, #0
 801c704:	bfc2      	ittt	gt
 801c706:	eba8 0803 	subgt.w	r8, r8, r3
 801c70a:	1aff      	subgt	r7, r7, r3
 801c70c:	eba9 0903 	subgt.w	r9, r9, r3
 801c710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c712:	2b00      	cmp	r3, #0
 801c714:	dd17      	ble.n	801c746 <_strtod_l+0x75e>
 801c716:	4631      	mov	r1, r6
 801c718:	461a      	mov	r2, r3
 801c71a:	4620      	mov	r0, r4
 801c71c:	f002 fab0 	bl	801ec80 <__pow5mult>
 801c720:	4606      	mov	r6, r0
 801c722:	2800      	cmp	r0, #0
 801c724:	f43f aea8 	beq.w	801c478 <_strtod_l+0x490>
 801c728:	4601      	mov	r1, r0
 801c72a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c72c:	4620      	mov	r0, r4
 801c72e:	f002 f9fd 	bl	801eb2c <__multiply>
 801c732:	900b      	str	r0, [sp, #44]	; 0x2c
 801c734:	2800      	cmp	r0, #0
 801c736:	f43f ae9f 	beq.w	801c478 <_strtod_l+0x490>
 801c73a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c73c:	4620      	mov	r0, r4
 801c73e:	f002 f8dd 	bl	801e8fc <_Bfree>
 801c742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c744:	9318      	str	r3, [sp, #96]	; 0x60
 801c746:	f1b8 0f00 	cmp.w	r8, #0
 801c74a:	f300 808c 	bgt.w	801c866 <_strtod_l+0x87e>
 801c74e:	9b06      	ldr	r3, [sp, #24]
 801c750:	2b00      	cmp	r3, #0
 801c752:	dd08      	ble.n	801c766 <_strtod_l+0x77e>
 801c754:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c756:	9905      	ldr	r1, [sp, #20]
 801c758:	4620      	mov	r0, r4
 801c75a:	f002 fa91 	bl	801ec80 <__pow5mult>
 801c75e:	9005      	str	r0, [sp, #20]
 801c760:	2800      	cmp	r0, #0
 801c762:	f43f ae89 	beq.w	801c478 <_strtod_l+0x490>
 801c766:	2f00      	cmp	r7, #0
 801c768:	dd08      	ble.n	801c77c <_strtod_l+0x794>
 801c76a:	9905      	ldr	r1, [sp, #20]
 801c76c:	463a      	mov	r2, r7
 801c76e:	4620      	mov	r0, r4
 801c770:	f002 fae0 	bl	801ed34 <__lshift>
 801c774:	9005      	str	r0, [sp, #20]
 801c776:	2800      	cmp	r0, #0
 801c778:	f43f ae7e 	beq.w	801c478 <_strtod_l+0x490>
 801c77c:	f1b9 0f00 	cmp.w	r9, #0
 801c780:	dd08      	ble.n	801c794 <_strtod_l+0x7ac>
 801c782:	4631      	mov	r1, r6
 801c784:	464a      	mov	r2, r9
 801c786:	4620      	mov	r0, r4
 801c788:	f002 fad4 	bl	801ed34 <__lshift>
 801c78c:	4606      	mov	r6, r0
 801c78e:	2800      	cmp	r0, #0
 801c790:	f43f ae72 	beq.w	801c478 <_strtod_l+0x490>
 801c794:	9a05      	ldr	r2, [sp, #20]
 801c796:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c798:	4620      	mov	r0, r4
 801c79a:	f002 fb57 	bl	801ee4c <__mdiff>
 801c79e:	4605      	mov	r5, r0
 801c7a0:	2800      	cmp	r0, #0
 801c7a2:	f43f ae69 	beq.w	801c478 <_strtod_l+0x490>
 801c7a6:	68c3      	ldr	r3, [r0, #12]
 801c7a8:	930b      	str	r3, [sp, #44]	; 0x2c
 801c7aa:	2300      	movs	r3, #0
 801c7ac:	60c3      	str	r3, [r0, #12]
 801c7ae:	4631      	mov	r1, r6
 801c7b0:	f002 fb30 	bl	801ee14 <__mcmp>
 801c7b4:	2800      	cmp	r0, #0
 801c7b6:	da60      	bge.n	801c87a <_strtod_l+0x892>
 801c7b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c7ba:	ea53 030a 	orrs.w	r3, r3, sl
 801c7be:	f040 8082 	bne.w	801c8c6 <_strtod_l+0x8de>
 801c7c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c7c6:	2b00      	cmp	r3, #0
 801c7c8:	d17d      	bne.n	801c8c6 <_strtod_l+0x8de>
 801c7ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c7ce:	0d1b      	lsrs	r3, r3, #20
 801c7d0:	051b      	lsls	r3, r3, #20
 801c7d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801c7d6:	d976      	bls.n	801c8c6 <_strtod_l+0x8de>
 801c7d8:	696b      	ldr	r3, [r5, #20]
 801c7da:	b913      	cbnz	r3, 801c7e2 <_strtod_l+0x7fa>
 801c7dc:	692b      	ldr	r3, [r5, #16]
 801c7de:	2b01      	cmp	r3, #1
 801c7e0:	dd71      	ble.n	801c8c6 <_strtod_l+0x8de>
 801c7e2:	4629      	mov	r1, r5
 801c7e4:	2201      	movs	r2, #1
 801c7e6:	4620      	mov	r0, r4
 801c7e8:	f002 faa4 	bl	801ed34 <__lshift>
 801c7ec:	4631      	mov	r1, r6
 801c7ee:	4605      	mov	r5, r0
 801c7f0:	f002 fb10 	bl	801ee14 <__mcmp>
 801c7f4:	2800      	cmp	r0, #0
 801c7f6:	dd66      	ble.n	801c8c6 <_strtod_l+0x8de>
 801c7f8:	9904      	ldr	r1, [sp, #16]
 801c7fa:	4a53      	ldr	r2, [pc, #332]	; (801c948 <_strtod_l+0x960>)
 801c7fc:	465b      	mov	r3, fp
 801c7fe:	2900      	cmp	r1, #0
 801c800:	f000 8081 	beq.w	801c906 <_strtod_l+0x91e>
 801c804:	ea02 010b 	and.w	r1, r2, fp
 801c808:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801c80c:	dc7b      	bgt.n	801c906 <_strtod_l+0x91e>
 801c80e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801c812:	f77f aea9 	ble.w	801c568 <_strtod_l+0x580>
 801c816:	4b4d      	ldr	r3, [pc, #308]	; (801c94c <_strtod_l+0x964>)
 801c818:	4650      	mov	r0, sl
 801c81a:	4659      	mov	r1, fp
 801c81c:	2200      	movs	r2, #0
 801c81e:	f7e3 ff03 	bl	8000628 <__aeabi_dmul>
 801c822:	460b      	mov	r3, r1
 801c824:	4303      	orrs	r3, r0
 801c826:	bf08      	it	eq
 801c828:	2322      	moveq	r3, #34	; 0x22
 801c82a:	4682      	mov	sl, r0
 801c82c:	468b      	mov	fp, r1
 801c82e:	bf08      	it	eq
 801c830:	6023      	streq	r3, [r4, #0]
 801c832:	e62b      	b.n	801c48c <_strtod_l+0x4a4>
 801c834:	f04f 32ff 	mov.w	r2, #4294967295
 801c838:	fa02 f303 	lsl.w	r3, r2, r3
 801c83c:	ea03 0a0a 	and.w	sl, r3, sl
 801c840:	e6e3      	b.n	801c60a <_strtod_l+0x622>
 801c842:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801c846:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801c84a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801c84e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801c852:	fa01 f308 	lsl.w	r3, r1, r8
 801c856:	9308      	str	r3, [sp, #32]
 801c858:	910d      	str	r1, [sp, #52]	; 0x34
 801c85a:	e746      	b.n	801c6ea <_strtod_l+0x702>
 801c85c:	2300      	movs	r3, #0
 801c85e:	9308      	str	r3, [sp, #32]
 801c860:	2301      	movs	r3, #1
 801c862:	930d      	str	r3, [sp, #52]	; 0x34
 801c864:	e741      	b.n	801c6ea <_strtod_l+0x702>
 801c866:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c868:	4642      	mov	r2, r8
 801c86a:	4620      	mov	r0, r4
 801c86c:	f002 fa62 	bl	801ed34 <__lshift>
 801c870:	9018      	str	r0, [sp, #96]	; 0x60
 801c872:	2800      	cmp	r0, #0
 801c874:	f47f af6b 	bne.w	801c74e <_strtod_l+0x766>
 801c878:	e5fe      	b.n	801c478 <_strtod_l+0x490>
 801c87a:	465f      	mov	r7, fp
 801c87c:	d16e      	bne.n	801c95c <_strtod_l+0x974>
 801c87e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c880:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c884:	b342      	cbz	r2, 801c8d8 <_strtod_l+0x8f0>
 801c886:	4a32      	ldr	r2, [pc, #200]	; (801c950 <_strtod_l+0x968>)
 801c888:	4293      	cmp	r3, r2
 801c88a:	d128      	bne.n	801c8de <_strtod_l+0x8f6>
 801c88c:	9b04      	ldr	r3, [sp, #16]
 801c88e:	4651      	mov	r1, sl
 801c890:	b1eb      	cbz	r3, 801c8ce <_strtod_l+0x8e6>
 801c892:	4b2d      	ldr	r3, [pc, #180]	; (801c948 <_strtod_l+0x960>)
 801c894:	403b      	ands	r3, r7
 801c896:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801c89a:	f04f 32ff 	mov.w	r2, #4294967295
 801c89e:	d819      	bhi.n	801c8d4 <_strtod_l+0x8ec>
 801c8a0:	0d1b      	lsrs	r3, r3, #20
 801c8a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801c8a6:	fa02 f303 	lsl.w	r3, r2, r3
 801c8aa:	4299      	cmp	r1, r3
 801c8ac:	d117      	bne.n	801c8de <_strtod_l+0x8f6>
 801c8ae:	4b29      	ldr	r3, [pc, #164]	; (801c954 <_strtod_l+0x96c>)
 801c8b0:	429f      	cmp	r7, r3
 801c8b2:	d102      	bne.n	801c8ba <_strtod_l+0x8d2>
 801c8b4:	3101      	adds	r1, #1
 801c8b6:	f43f addf 	beq.w	801c478 <_strtod_l+0x490>
 801c8ba:	4b23      	ldr	r3, [pc, #140]	; (801c948 <_strtod_l+0x960>)
 801c8bc:	403b      	ands	r3, r7
 801c8be:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801c8c2:	f04f 0a00 	mov.w	sl, #0
 801c8c6:	9b04      	ldr	r3, [sp, #16]
 801c8c8:	2b00      	cmp	r3, #0
 801c8ca:	d1a4      	bne.n	801c816 <_strtod_l+0x82e>
 801c8cc:	e5de      	b.n	801c48c <_strtod_l+0x4a4>
 801c8ce:	f04f 33ff 	mov.w	r3, #4294967295
 801c8d2:	e7ea      	b.n	801c8aa <_strtod_l+0x8c2>
 801c8d4:	4613      	mov	r3, r2
 801c8d6:	e7e8      	b.n	801c8aa <_strtod_l+0x8c2>
 801c8d8:	ea53 030a 	orrs.w	r3, r3, sl
 801c8dc:	d08c      	beq.n	801c7f8 <_strtod_l+0x810>
 801c8de:	9b08      	ldr	r3, [sp, #32]
 801c8e0:	b1db      	cbz	r3, 801c91a <_strtod_l+0x932>
 801c8e2:	423b      	tst	r3, r7
 801c8e4:	d0ef      	beq.n	801c8c6 <_strtod_l+0x8de>
 801c8e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c8e8:	9a04      	ldr	r2, [sp, #16]
 801c8ea:	4650      	mov	r0, sl
 801c8ec:	4659      	mov	r1, fp
 801c8ee:	b1c3      	cbz	r3, 801c922 <_strtod_l+0x93a>
 801c8f0:	f7ff fb5b 	bl	801bfaa <sulp>
 801c8f4:	4602      	mov	r2, r0
 801c8f6:	460b      	mov	r3, r1
 801c8f8:	ec51 0b18 	vmov	r0, r1, d8
 801c8fc:	f7e3 fcde 	bl	80002bc <__adddf3>
 801c900:	4682      	mov	sl, r0
 801c902:	468b      	mov	fp, r1
 801c904:	e7df      	b.n	801c8c6 <_strtod_l+0x8de>
 801c906:	4013      	ands	r3, r2
 801c908:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801c90c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801c910:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801c914:	f04f 3aff 	mov.w	sl, #4294967295
 801c918:	e7d5      	b.n	801c8c6 <_strtod_l+0x8de>
 801c91a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c91c:	ea13 0f0a 	tst.w	r3, sl
 801c920:	e7e0      	b.n	801c8e4 <_strtod_l+0x8fc>
 801c922:	f7ff fb42 	bl	801bfaa <sulp>
 801c926:	4602      	mov	r2, r0
 801c928:	460b      	mov	r3, r1
 801c92a:	ec51 0b18 	vmov	r0, r1, d8
 801c92e:	f7e3 fcc3 	bl	80002b8 <__aeabi_dsub>
 801c932:	2200      	movs	r2, #0
 801c934:	2300      	movs	r3, #0
 801c936:	4682      	mov	sl, r0
 801c938:	468b      	mov	fp, r1
 801c93a:	f7e4 f8dd 	bl	8000af8 <__aeabi_dcmpeq>
 801c93e:	2800      	cmp	r0, #0
 801c940:	d0c1      	beq.n	801c8c6 <_strtod_l+0x8de>
 801c942:	e611      	b.n	801c568 <_strtod_l+0x580>
 801c944:	fffffc02 	.word	0xfffffc02
 801c948:	7ff00000 	.word	0x7ff00000
 801c94c:	39500000 	.word	0x39500000
 801c950:	000fffff 	.word	0x000fffff
 801c954:	7fefffff 	.word	0x7fefffff
 801c958:	080218d8 	.word	0x080218d8
 801c95c:	4631      	mov	r1, r6
 801c95e:	4628      	mov	r0, r5
 801c960:	f002 fbd6 	bl	801f110 <__ratio>
 801c964:	ec59 8b10 	vmov	r8, r9, d0
 801c968:	ee10 0a10 	vmov	r0, s0
 801c96c:	2200      	movs	r2, #0
 801c96e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c972:	4649      	mov	r1, r9
 801c974:	f7e4 f8d4 	bl	8000b20 <__aeabi_dcmple>
 801c978:	2800      	cmp	r0, #0
 801c97a:	d07a      	beq.n	801ca72 <_strtod_l+0xa8a>
 801c97c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c97e:	2b00      	cmp	r3, #0
 801c980:	d04a      	beq.n	801ca18 <_strtod_l+0xa30>
 801c982:	4b95      	ldr	r3, [pc, #596]	; (801cbd8 <_strtod_l+0xbf0>)
 801c984:	2200      	movs	r2, #0
 801c986:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c98a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801cbd8 <_strtod_l+0xbf0>
 801c98e:	f04f 0800 	mov.w	r8, #0
 801c992:	4b92      	ldr	r3, [pc, #584]	; (801cbdc <_strtod_l+0xbf4>)
 801c994:	403b      	ands	r3, r7
 801c996:	930d      	str	r3, [sp, #52]	; 0x34
 801c998:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c99a:	4b91      	ldr	r3, [pc, #580]	; (801cbe0 <_strtod_l+0xbf8>)
 801c99c:	429a      	cmp	r2, r3
 801c99e:	f040 80b0 	bne.w	801cb02 <_strtod_l+0xb1a>
 801c9a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801c9a6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801c9aa:	ec4b ab10 	vmov	d0, sl, fp
 801c9ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801c9b2:	f002 fad5 	bl	801ef60 <__ulp>
 801c9b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801c9ba:	ec53 2b10 	vmov	r2, r3, d0
 801c9be:	f7e3 fe33 	bl	8000628 <__aeabi_dmul>
 801c9c2:	4652      	mov	r2, sl
 801c9c4:	465b      	mov	r3, fp
 801c9c6:	f7e3 fc79 	bl	80002bc <__adddf3>
 801c9ca:	460b      	mov	r3, r1
 801c9cc:	4983      	ldr	r1, [pc, #524]	; (801cbdc <_strtod_l+0xbf4>)
 801c9ce:	4a85      	ldr	r2, [pc, #532]	; (801cbe4 <_strtod_l+0xbfc>)
 801c9d0:	4019      	ands	r1, r3
 801c9d2:	4291      	cmp	r1, r2
 801c9d4:	4682      	mov	sl, r0
 801c9d6:	d960      	bls.n	801ca9a <_strtod_l+0xab2>
 801c9d8:	ee18 3a90 	vmov	r3, s17
 801c9dc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801c9e0:	4293      	cmp	r3, r2
 801c9e2:	d104      	bne.n	801c9ee <_strtod_l+0xa06>
 801c9e4:	ee18 3a10 	vmov	r3, s16
 801c9e8:	3301      	adds	r3, #1
 801c9ea:	f43f ad45 	beq.w	801c478 <_strtod_l+0x490>
 801c9ee:	f8df b200 	ldr.w	fp, [pc, #512]	; 801cbf0 <_strtod_l+0xc08>
 801c9f2:	f04f 3aff 	mov.w	sl, #4294967295
 801c9f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c9f8:	4620      	mov	r0, r4
 801c9fa:	f001 ff7f 	bl	801e8fc <_Bfree>
 801c9fe:	9905      	ldr	r1, [sp, #20]
 801ca00:	4620      	mov	r0, r4
 801ca02:	f001 ff7b 	bl	801e8fc <_Bfree>
 801ca06:	4631      	mov	r1, r6
 801ca08:	4620      	mov	r0, r4
 801ca0a:	f001 ff77 	bl	801e8fc <_Bfree>
 801ca0e:	4629      	mov	r1, r5
 801ca10:	4620      	mov	r0, r4
 801ca12:	f001 ff73 	bl	801e8fc <_Bfree>
 801ca16:	e61a      	b.n	801c64e <_strtod_l+0x666>
 801ca18:	f1ba 0f00 	cmp.w	sl, #0
 801ca1c:	d11b      	bne.n	801ca56 <_strtod_l+0xa6e>
 801ca1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ca22:	b9f3      	cbnz	r3, 801ca62 <_strtod_l+0xa7a>
 801ca24:	4b6c      	ldr	r3, [pc, #432]	; (801cbd8 <_strtod_l+0xbf0>)
 801ca26:	2200      	movs	r2, #0
 801ca28:	4640      	mov	r0, r8
 801ca2a:	4649      	mov	r1, r9
 801ca2c:	f7e4 f86e 	bl	8000b0c <__aeabi_dcmplt>
 801ca30:	b9d0      	cbnz	r0, 801ca68 <_strtod_l+0xa80>
 801ca32:	4640      	mov	r0, r8
 801ca34:	4649      	mov	r1, r9
 801ca36:	4b6c      	ldr	r3, [pc, #432]	; (801cbe8 <_strtod_l+0xc00>)
 801ca38:	2200      	movs	r2, #0
 801ca3a:	f7e3 fdf5 	bl	8000628 <__aeabi_dmul>
 801ca3e:	4680      	mov	r8, r0
 801ca40:	4689      	mov	r9, r1
 801ca42:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801ca46:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801ca4a:	9315      	str	r3, [sp, #84]	; 0x54
 801ca4c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801ca50:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ca54:	e79d      	b.n	801c992 <_strtod_l+0x9aa>
 801ca56:	f1ba 0f01 	cmp.w	sl, #1
 801ca5a:	d102      	bne.n	801ca62 <_strtod_l+0xa7a>
 801ca5c:	2f00      	cmp	r7, #0
 801ca5e:	f43f ad83 	beq.w	801c568 <_strtod_l+0x580>
 801ca62:	4b62      	ldr	r3, [pc, #392]	; (801cbec <_strtod_l+0xc04>)
 801ca64:	2200      	movs	r2, #0
 801ca66:	e78e      	b.n	801c986 <_strtod_l+0x99e>
 801ca68:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801cbe8 <_strtod_l+0xc00>
 801ca6c:	f04f 0800 	mov.w	r8, #0
 801ca70:	e7e7      	b.n	801ca42 <_strtod_l+0xa5a>
 801ca72:	4b5d      	ldr	r3, [pc, #372]	; (801cbe8 <_strtod_l+0xc00>)
 801ca74:	4640      	mov	r0, r8
 801ca76:	4649      	mov	r1, r9
 801ca78:	2200      	movs	r2, #0
 801ca7a:	f7e3 fdd5 	bl	8000628 <__aeabi_dmul>
 801ca7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ca80:	4680      	mov	r8, r0
 801ca82:	4689      	mov	r9, r1
 801ca84:	b933      	cbnz	r3, 801ca94 <_strtod_l+0xaac>
 801ca86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ca8a:	900e      	str	r0, [sp, #56]	; 0x38
 801ca8c:	930f      	str	r3, [sp, #60]	; 0x3c
 801ca8e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801ca92:	e7dd      	b.n	801ca50 <_strtod_l+0xa68>
 801ca94:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801ca98:	e7f9      	b.n	801ca8e <_strtod_l+0xaa6>
 801ca9a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801ca9e:	9b04      	ldr	r3, [sp, #16]
 801caa0:	2b00      	cmp	r3, #0
 801caa2:	d1a8      	bne.n	801c9f6 <_strtod_l+0xa0e>
 801caa4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801caa8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801caaa:	0d1b      	lsrs	r3, r3, #20
 801caac:	051b      	lsls	r3, r3, #20
 801caae:	429a      	cmp	r2, r3
 801cab0:	d1a1      	bne.n	801c9f6 <_strtod_l+0xa0e>
 801cab2:	4640      	mov	r0, r8
 801cab4:	4649      	mov	r1, r9
 801cab6:	f7e4 f917 	bl	8000ce8 <__aeabi_d2lz>
 801caba:	f7e3 fd87 	bl	80005cc <__aeabi_l2d>
 801cabe:	4602      	mov	r2, r0
 801cac0:	460b      	mov	r3, r1
 801cac2:	4640      	mov	r0, r8
 801cac4:	4649      	mov	r1, r9
 801cac6:	f7e3 fbf7 	bl	80002b8 <__aeabi_dsub>
 801caca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cacc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801cad0:	ea43 030a 	orr.w	r3, r3, sl
 801cad4:	4313      	orrs	r3, r2
 801cad6:	4680      	mov	r8, r0
 801cad8:	4689      	mov	r9, r1
 801cada:	d055      	beq.n	801cb88 <_strtod_l+0xba0>
 801cadc:	a336      	add	r3, pc, #216	; (adr r3, 801cbb8 <_strtod_l+0xbd0>)
 801cade:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cae2:	f7e4 f813 	bl	8000b0c <__aeabi_dcmplt>
 801cae6:	2800      	cmp	r0, #0
 801cae8:	f47f acd0 	bne.w	801c48c <_strtod_l+0x4a4>
 801caec:	a334      	add	r3, pc, #208	; (adr r3, 801cbc0 <_strtod_l+0xbd8>)
 801caee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801caf2:	4640      	mov	r0, r8
 801caf4:	4649      	mov	r1, r9
 801caf6:	f7e4 f827 	bl	8000b48 <__aeabi_dcmpgt>
 801cafa:	2800      	cmp	r0, #0
 801cafc:	f43f af7b 	beq.w	801c9f6 <_strtod_l+0xa0e>
 801cb00:	e4c4      	b.n	801c48c <_strtod_l+0x4a4>
 801cb02:	9b04      	ldr	r3, [sp, #16]
 801cb04:	b333      	cbz	r3, 801cb54 <_strtod_l+0xb6c>
 801cb06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cb08:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801cb0c:	d822      	bhi.n	801cb54 <_strtod_l+0xb6c>
 801cb0e:	a32e      	add	r3, pc, #184	; (adr r3, 801cbc8 <_strtod_l+0xbe0>)
 801cb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb14:	4640      	mov	r0, r8
 801cb16:	4649      	mov	r1, r9
 801cb18:	f7e4 f802 	bl	8000b20 <__aeabi_dcmple>
 801cb1c:	b1a0      	cbz	r0, 801cb48 <_strtod_l+0xb60>
 801cb1e:	4649      	mov	r1, r9
 801cb20:	4640      	mov	r0, r8
 801cb22:	f7e4 f859 	bl	8000bd8 <__aeabi_d2uiz>
 801cb26:	2801      	cmp	r0, #1
 801cb28:	bf38      	it	cc
 801cb2a:	2001      	movcc	r0, #1
 801cb2c:	f7e3 fd02 	bl	8000534 <__aeabi_ui2d>
 801cb30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cb32:	4680      	mov	r8, r0
 801cb34:	4689      	mov	r9, r1
 801cb36:	bb23      	cbnz	r3, 801cb82 <_strtod_l+0xb9a>
 801cb38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801cb3c:	9010      	str	r0, [sp, #64]	; 0x40
 801cb3e:	9311      	str	r3, [sp, #68]	; 0x44
 801cb40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801cb44:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801cb48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cb4c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801cb50:	1a9b      	subs	r3, r3, r2
 801cb52:	9309      	str	r3, [sp, #36]	; 0x24
 801cb54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801cb58:	eeb0 0a48 	vmov.f32	s0, s16
 801cb5c:	eef0 0a68 	vmov.f32	s1, s17
 801cb60:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801cb64:	f002 f9fc 	bl	801ef60 <__ulp>
 801cb68:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801cb6c:	ec53 2b10 	vmov	r2, r3, d0
 801cb70:	f7e3 fd5a 	bl	8000628 <__aeabi_dmul>
 801cb74:	ec53 2b18 	vmov	r2, r3, d8
 801cb78:	f7e3 fba0 	bl	80002bc <__adddf3>
 801cb7c:	4682      	mov	sl, r0
 801cb7e:	468b      	mov	fp, r1
 801cb80:	e78d      	b.n	801ca9e <_strtod_l+0xab6>
 801cb82:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801cb86:	e7db      	b.n	801cb40 <_strtod_l+0xb58>
 801cb88:	a311      	add	r3, pc, #68	; (adr r3, 801cbd0 <_strtod_l+0xbe8>)
 801cb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb8e:	f7e3 ffbd 	bl	8000b0c <__aeabi_dcmplt>
 801cb92:	e7b2      	b.n	801cafa <_strtod_l+0xb12>
 801cb94:	2300      	movs	r3, #0
 801cb96:	930a      	str	r3, [sp, #40]	; 0x28
 801cb98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cb9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801cb9c:	6013      	str	r3, [r2, #0]
 801cb9e:	f7ff ba6b 	b.w	801c078 <_strtod_l+0x90>
 801cba2:	2a65      	cmp	r2, #101	; 0x65
 801cba4:	f43f ab5f 	beq.w	801c266 <_strtod_l+0x27e>
 801cba8:	2a45      	cmp	r2, #69	; 0x45
 801cbaa:	f43f ab5c 	beq.w	801c266 <_strtod_l+0x27e>
 801cbae:	2301      	movs	r3, #1
 801cbb0:	f7ff bb94 	b.w	801c2dc <_strtod_l+0x2f4>
 801cbb4:	f3af 8000 	nop.w
 801cbb8:	94a03595 	.word	0x94a03595
 801cbbc:	3fdfffff 	.word	0x3fdfffff
 801cbc0:	35afe535 	.word	0x35afe535
 801cbc4:	3fe00000 	.word	0x3fe00000
 801cbc8:	ffc00000 	.word	0xffc00000
 801cbcc:	41dfffff 	.word	0x41dfffff
 801cbd0:	94a03595 	.word	0x94a03595
 801cbd4:	3fcfffff 	.word	0x3fcfffff
 801cbd8:	3ff00000 	.word	0x3ff00000
 801cbdc:	7ff00000 	.word	0x7ff00000
 801cbe0:	7fe00000 	.word	0x7fe00000
 801cbe4:	7c9fffff 	.word	0x7c9fffff
 801cbe8:	3fe00000 	.word	0x3fe00000
 801cbec:	bff00000 	.word	0xbff00000
 801cbf0:	7fefffff 	.word	0x7fefffff

0801cbf4 <_strtod_r>:
 801cbf4:	4b01      	ldr	r3, [pc, #4]	; (801cbfc <_strtod_r+0x8>)
 801cbf6:	f7ff b9f7 	b.w	801bfe8 <_strtod_l>
 801cbfa:	bf00      	nop
 801cbfc:	200001a8 	.word	0x200001a8

0801cc00 <strtok>:
 801cc00:	4b16      	ldr	r3, [pc, #88]	; (801cc5c <strtok+0x5c>)
 801cc02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cc04:	681e      	ldr	r6, [r3, #0]
 801cc06:	6db4      	ldr	r4, [r6, #88]	; 0x58
 801cc08:	4605      	mov	r5, r0
 801cc0a:	b9fc      	cbnz	r4, 801cc4c <strtok+0x4c>
 801cc0c:	2050      	movs	r0, #80	; 0x50
 801cc0e:	9101      	str	r1, [sp, #4]
 801cc10:	f7fe f942 	bl	801ae98 <malloc>
 801cc14:	9901      	ldr	r1, [sp, #4]
 801cc16:	65b0      	str	r0, [r6, #88]	; 0x58
 801cc18:	4602      	mov	r2, r0
 801cc1a:	b920      	cbnz	r0, 801cc26 <strtok+0x26>
 801cc1c:	4b10      	ldr	r3, [pc, #64]	; (801cc60 <strtok+0x60>)
 801cc1e:	4811      	ldr	r0, [pc, #68]	; (801cc64 <strtok+0x64>)
 801cc20:	2157      	movs	r1, #87	; 0x57
 801cc22:	f000 f9d1 	bl	801cfc8 <__assert_func>
 801cc26:	e9c0 4400 	strd	r4, r4, [r0]
 801cc2a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801cc2e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801cc32:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801cc36:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801cc3a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801cc3e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801cc42:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801cc46:	6184      	str	r4, [r0, #24]
 801cc48:	7704      	strb	r4, [r0, #28]
 801cc4a:	6244      	str	r4, [r0, #36]	; 0x24
 801cc4c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801cc4e:	2301      	movs	r3, #1
 801cc50:	4628      	mov	r0, r5
 801cc52:	b002      	add	sp, #8
 801cc54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cc58:	f000 b806 	b.w	801cc68 <__strtok_r>
 801cc5c:	20000140 	.word	0x20000140
 801cc60:	08021900 	.word	0x08021900
 801cc64:	08021917 	.word	0x08021917

0801cc68 <__strtok_r>:
 801cc68:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cc6a:	b908      	cbnz	r0, 801cc70 <__strtok_r+0x8>
 801cc6c:	6810      	ldr	r0, [r2, #0]
 801cc6e:	b188      	cbz	r0, 801cc94 <__strtok_r+0x2c>
 801cc70:	4604      	mov	r4, r0
 801cc72:	4620      	mov	r0, r4
 801cc74:	f814 5b01 	ldrb.w	r5, [r4], #1
 801cc78:	460f      	mov	r7, r1
 801cc7a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801cc7e:	b91e      	cbnz	r6, 801cc88 <__strtok_r+0x20>
 801cc80:	b965      	cbnz	r5, 801cc9c <__strtok_r+0x34>
 801cc82:	6015      	str	r5, [r2, #0]
 801cc84:	4628      	mov	r0, r5
 801cc86:	e005      	b.n	801cc94 <__strtok_r+0x2c>
 801cc88:	42b5      	cmp	r5, r6
 801cc8a:	d1f6      	bne.n	801cc7a <__strtok_r+0x12>
 801cc8c:	2b00      	cmp	r3, #0
 801cc8e:	d1f0      	bne.n	801cc72 <__strtok_r+0xa>
 801cc90:	6014      	str	r4, [r2, #0]
 801cc92:	7003      	strb	r3, [r0, #0]
 801cc94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cc96:	461c      	mov	r4, r3
 801cc98:	e00c      	b.n	801ccb4 <__strtok_r+0x4c>
 801cc9a:	b915      	cbnz	r5, 801cca2 <__strtok_r+0x3a>
 801cc9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801cca0:	460e      	mov	r6, r1
 801cca2:	f816 5b01 	ldrb.w	r5, [r6], #1
 801cca6:	42ab      	cmp	r3, r5
 801cca8:	d1f7      	bne.n	801cc9a <__strtok_r+0x32>
 801ccaa:	2b00      	cmp	r3, #0
 801ccac:	d0f3      	beq.n	801cc96 <__strtok_r+0x2e>
 801ccae:	2300      	movs	r3, #0
 801ccb0:	f804 3c01 	strb.w	r3, [r4, #-1]
 801ccb4:	6014      	str	r4, [r2, #0]
 801ccb6:	e7ed      	b.n	801cc94 <__strtok_r+0x2c>

0801ccb8 <_strtol_l.constprop.0>:
 801ccb8:	2b01      	cmp	r3, #1
 801ccba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ccbe:	d001      	beq.n	801ccc4 <_strtol_l.constprop.0+0xc>
 801ccc0:	2b24      	cmp	r3, #36	; 0x24
 801ccc2:	d906      	bls.n	801ccd2 <_strtol_l.constprop.0+0x1a>
 801ccc4:	f7fe f84c 	bl	801ad60 <__errno>
 801ccc8:	2316      	movs	r3, #22
 801ccca:	6003      	str	r3, [r0, #0]
 801cccc:	2000      	movs	r0, #0
 801ccce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ccd2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801cdb8 <_strtol_l.constprop.0+0x100>
 801ccd6:	460d      	mov	r5, r1
 801ccd8:	462e      	mov	r6, r5
 801ccda:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ccde:	f814 700c 	ldrb.w	r7, [r4, ip]
 801cce2:	f017 0708 	ands.w	r7, r7, #8
 801cce6:	d1f7      	bne.n	801ccd8 <_strtol_l.constprop.0+0x20>
 801cce8:	2c2d      	cmp	r4, #45	; 0x2d
 801ccea:	d132      	bne.n	801cd52 <_strtol_l.constprop.0+0x9a>
 801ccec:	782c      	ldrb	r4, [r5, #0]
 801ccee:	2701      	movs	r7, #1
 801ccf0:	1cb5      	adds	r5, r6, #2
 801ccf2:	2b00      	cmp	r3, #0
 801ccf4:	d05b      	beq.n	801cdae <_strtol_l.constprop.0+0xf6>
 801ccf6:	2b10      	cmp	r3, #16
 801ccf8:	d109      	bne.n	801cd0e <_strtol_l.constprop.0+0x56>
 801ccfa:	2c30      	cmp	r4, #48	; 0x30
 801ccfc:	d107      	bne.n	801cd0e <_strtol_l.constprop.0+0x56>
 801ccfe:	782c      	ldrb	r4, [r5, #0]
 801cd00:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801cd04:	2c58      	cmp	r4, #88	; 0x58
 801cd06:	d14d      	bne.n	801cda4 <_strtol_l.constprop.0+0xec>
 801cd08:	786c      	ldrb	r4, [r5, #1]
 801cd0a:	2310      	movs	r3, #16
 801cd0c:	3502      	adds	r5, #2
 801cd0e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801cd12:	f108 38ff 	add.w	r8, r8, #4294967295
 801cd16:	f04f 0c00 	mov.w	ip, #0
 801cd1a:	fbb8 f9f3 	udiv	r9, r8, r3
 801cd1e:	4666      	mov	r6, ip
 801cd20:	fb03 8a19 	mls	sl, r3, r9, r8
 801cd24:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801cd28:	f1be 0f09 	cmp.w	lr, #9
 801cd2c:	d816      	bhi.n	801cd5c <_strtol_l.constprop.0+0xa4>
 801cd2e:	4674      	mov	r4, lr
 801cd30:	42a3      	cmp	r3, r4
 801cd32:	dd24      	ble.n	801cd7e <_strtol_l.constprop.0+0xc6>
 801cd34:	f1bc 0f00 	cmp.w	ip, #0
 801cd38:	db1e      	blt.n	801cd78 <_strtol_l.constprop.0+0xc0>
 801cd3a:	45b1      	cmp	r9, r6
 801cd3c:	d31c      	bcc.n	801cd78 <_strtol_l.constprop.0+0xc0>
 801cd3e:	d101      	bne.n	801cd44 <_strtol_l.constprop.0+0x8c>
 801cd40:	45a2      	cmp	sl, r4
 801cd42:	db19      	blt.n	801cd78 <_strtol_l.constprop.0+0xc0>
 801cd44:	fb06 4603 	mla	r6, r6, r3, r4
 801cd48:	f04f 0c01 	mov.w	ip, #1
 801cd4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cd50:	e7e8      	b.n	801cd24 <_strtol_l.constprop.0+0x6c>
 801cd52:	2c2b      	cmp	r4, #43	; 0x2b
 801cd54:	bf04      	itt	eq
 801cd56:	782c      	ldrbeq	r4, [r5, #0]
 801cd58:	1cb5      	addeq	r5, r6, #2
 801cd5a:	e7ca      	b.n	801ccf2 <_strtol_l.constprop.0+0x3a>
 801cd5c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801cd60:	f1be 0f19 	cmp.w	lr, #25
 801cd64:	d801      	bhi.n	801cd6a <_strtol_l.constprop.0+0xb2>
 801cd66:	3c37      	subs	r4, #55	; 0x37
 801cd68:	e7e2      	b.n	801cd30 <_strtol_l.constprop.0+0x78>
 801cd6a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801cd6e:	f1be 0f19 	cmp.w	lr, #25
 801cd72:	d804      	bhi.n	801cd7e <_strtol_l.constprop.0+0xc6>
 801cd74:	3c57      	subs	r4, #87	; 0x57
 801cd76:	e7db      	b.n	801cd30 <_strtol_l.constprop.0+0x78>
 801cd78:	f04f 3cff 	mov.w	ip, #4294967295
 801cd7c:	e7e6      	b.n	801cd4c <_strtol_l.constprop.0+0x94>
 801cd7e:	f1bc 0f00 	cmp.w	ip, #0
 801cd82:	da05      	bge.n	801cd90 <_strtol_l.constprop.0+0xd8>
 801cd84:	2322      	movs	r3, #34	; 0x22
 801cd86:	6003      	str	r3, [r0, #0]
 801cd88:	4646      	mov	r6, r8
 801cd8a:	b942      	cbnz	r2, 801cd9e <_strtol_l.constprop.0+0xe6>
 801cd8c:	4630      	mov	r0, r6
 801cd8e:	e79e      	b.n	801ccce <_strtol_l.constprop.0+0x16>
 801cd90:	b107      	cbz	r7, 801cd94 <_strtol_l.constprop.0+0xdc>
 801cd92:	4276      	negs	r6, r6
 801cd94:	2a00      	cmp	r2, #0
 801cd96:	d0f9      	beq.n	801cd8c <_strtol_l.constprop.0+0xd4>
 801cd98:	f1bc 0f00 	cmp.w	ip, #0
 801cd9c:	d000      	beq.n	801cda0 <_strtol_l.constprop.0+0xe8>
 801cd9e:	1e69      	subs	r1, r5, #1
 801cda0:	6011      	str	r1, [r2, #0]
 801cda2:	e7f3      	b.n	801cd8c <_strtol_l.constprop.0+0xd4>
 801cda4:	2430      	movs	r4, #48	; 0x30
 801cda6:	2b00      	cmp	r3, #0
 801cda8:	d1b1      	bne.n	801cd0e <_strtol_l.constprop.0+0x56>
 801cdaa:	2308      	movs	r3, #8
 801cdac:	e7af      	b.n	801cd0e <_strtol_l.constprop.0+0x56>
 801cdae:	2c30      	cmp	r4, #48	; 0x30
 801cdb0:	d0a5      	beq.n	801ccfe <_strtol_l.constprop.0+0x46>
 801cdb2:	230a      	movs	r3, #10
 801cdb4:	e7ab      	b.n	801cd0e <_strtol_l.constprop.0+0x56>
 801cdb6:	bf00      	nop
 801cdb8:	080219b1 	.word	0x080219b1

0801cdbc <_strtol_r>:
 801cdbc:	f7ff bf7c 	b.w	801ccb8 <_strtol_l.constprop.0>

0801cdc0 <strtol>:
 801cdc0:	4613      	mov	r3, r2
 801cdc2:	460a      	mov	r2, r1
 801cdc4:	4601      	mov	r1, r0
 801cdc6:	4802      	ldr	r0, [pc, #8]	; (801cdd0 <strtol+0x10>)
 801cdc8:	6800      	ldr	r0, [r0, #0]
 801cdca:	f7ff bf75 	b.w	801ccb8 <_strtol_l.constprop.0>
 801cdce:	bf00      	nop
 801cdd0:	20000140 	.word	0x20000140

0801cdd4 <_vsniprintf_r>:
 801cdd4:	b530      	push	{r4, r5, lr}
 801cdd6:	4614      	mov	r4, r2
 801cdd8:	2c00      	cmp	r4, #0
 801cdda:	b09b      	sub	sp, #108	; 0x6c
 801cddc:	4605      	mov	r5, r0
 801cdde:	461a      	mov	r2, r3
 801cde0:	da05      	bge.n	801cdee <_vsniprintf_r+0x1a>
 801cde2:	238b      	movs	r3, #139	; 0x8b
 801cde4:	6003      	str	r3, [r0, #0]
 801cde6:	f04f 30ff 	mov.w	r0, #4294967295
 801cdea:	b01b      	add	sp, #108	; 0x6c
 801cdec:	bd30      	pop	{r4, r5, pc}
 801cdee:	f44f 7302 	mov.w	r3, #520	; 0x208
 801cdf2:	f8ad 300c 	strh.w	r3, [sp, #12]
 801cdf6:	bf14      	ite	ne
 801cdf8:	f104 33ff 	addne.w	r3, r4, #4294967295
 801cdfc:	4623      	moveq	r3, r4
 801cdfe:	9302      	str	r3, [sp, #8]
 801ce00:	9305      	str	r3, [sp, #20]
 801ce02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ce06:	9100      	str	r1, [sp, #0]
 801ce08:	9104      	str	r1, [sp, #16]
 801ce0a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ce0e:	4669      	mov	r1, sp
 801ce10:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801ce12:	f002 fa65 	bl	801f2e0 <_svfiprintf_r>
 801ce16:	1c43      	adds	r3, r0, #1
 801ce18:	bfbc      	itt	lt
 801ce1a:	238b      	movlt	r3, #139	; 0x8b
 801ce1c:	602b      	strlt	r3, [r5, #0]
 801ce1e:	2c00      	cmp	r4, #0
 801ce20:	d0e3      	beq.n	801cdea <_vsniprintf_r+0x16>
 801ce22:	9b00      	ldr	r3, [sp, #0]
 801ce24:	2200      	movs	r2, #0
 801ce26:	701a      	strb	r2, [r3, #0]
 801ce28:	e7df      	b.n	801cdea <_vsniprintf_r+0x16>
	...

0801ce2c <vsniprintf>:
 801ce2c:	b507      	push	{r0, r1, r2, lr}
 801ce2e:	9300      	str	r3, [sp, #0]
 801ce30:	4613      	mov	r3, r2
 801ce32:	460a      	mov	r2, r1
 801ce34:	4601      	mov	r1, r0
 801ce36:	4803      	ldr	r0, [pc, #12]	; (801ce44 <vsniprintf+0x18>)
 801ce38:	6800      	ldr	r0, [r0, #0]
 801ce3a:	f7ff ffcb 	bl	801cdd4 <_vsniprintf_r>
 801ce3e:	b003      	add	sp, #12
 801ce40:	f85d fb04 	ldr.w	pc, [sp], #4
 801ce44:	20000140 	.word	0x20000140

0801ce48 <__swbuf_r>:
 801ce48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ce4a:	460e      	mov	r6, r1
 801ce4c:	4614      	mov	r4, r2
 801ce4e:	4605      	mov	r5, r0
 801ce50:	b118      	cbz	r0, 801ce5a <__swbuf_r+0x12>
 801ce52:	6983      	ldr	r3, [r0, #24]
 801ce54:	b90b      	cbnz	r3, 801ce5a <__swbuf_r+0x12>
 801ce56:	f001 f86b 	bl	801df30 <__sinit>
 801ce5a:	4b21      	ldr	r3, [pc, #132]	; (801cee0 <__swbuf_r+0x98>)
 801ce5c:	429c      	cmp	r4, r3
 801ce5e:	d12b      	bne.n	801ceb8 <__swbuf_r+0x70>
 801ce60:	686c      	ldr	r4, [r5, #4]
 801ce62:	69a3      	ldr	r3, [r4, #24]
 801ce64:	60a3      	str	r3, [r4, #8]
 801ce66:	89a3      	ldrh	r3, [r4, #12]
 801ce68:	071a      	lsls	r2, r3, #28
 801ce6a:	d52f      	bpl.n	801cecc <__swbuf_r+0x84>
 801ce6c:	6923      	ldr	r3, [r4, #16]
 801ce6e:	b36b      	cbz	r3, 801cecc <__swbuf_r+0x84>
 801ce70:	6923      	ldr	r3, [r4, #16]
 801ce72:	6820      	ldr	r0, [r4, #0]
 801ce74:	1ac0      	subs	r0, r0, r3
 801ce76:	6963      	ldr	r3, [r4, #20]
 801ce78:	b2f6      	uxtb	r6, r6
 801ce7a:	4283      	cmp	r3, r0
 801ce7c:	4637      	mov	r7, r6
 801ce7e:	dc04      	bgt.n	801ce8a <__swbuf_r+0x42>
 801ce80:	4621      	mov	r1, r4
 801ce82:	4628      	mov	r0, r5
 801ce84:	f000 ffc0 	bl	801de08 <_fflush_r>
 801ce88:	bb30      	cbnz	r0, 801ced8 <__swbuf_r+0x90>
 801ce8a:	68a3      	ldr	r3, [r4, #8]
 801ce8c:	3b01      	subs	r3, #1
 801ce8e:	60a3      	str	r3, [r4, #8]
 801ce90:	6823      	ldr	r3, [r4, #0]
 801ce92:	1c5a      	adds	r2, r3, #1
 801ce94:	6022      	str	r2, [r4, #0]
 801ce96:	701e      	strb	r6, [r3, #0]
 801ce98:	6963      	ldr	r3, [r4, #20]
 801ce9a:	3001      	adds	r0, #1
 801ce9c:	4283      	cmp	r3, r0
 801ce9e:	d004      	beq.n	801ceaa <__swbuf_r+0x62>
 801cea0:	89a3      	ldrh	r3, [r4, #12]
 801cea2:	07db      	lsls	r3, r3, #31
 801cea4:	d506      	bpl.n	801ceb4 <__swbuf_r+0x6c>
 801cea6:	2e0a      	cmp	r6, #10
 801cea8:	d104      	bne.n	801ceb4 <__swbuf_r+0x6c>
 801ceaa:	4621      	mov	r1, r4
 801ceac:	4628      	mov	r0, r5
 801ceae:	f000 ffab 	bl	801de08 <_fflush_r>
 801ceb2:	b988      	cbnz	r0, 801ced8 <__swbuf_r+0x90>
 801ceb4:	4638      	mov	r0, r7
 801ceb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ceb8:	4b0a      	ldr	r3, [pc, #40]	; (801cee4 <__swbuf_r+0x9c>)
 801ceba:	429c      	cmp	r4, r3
 801cebc:	d101      	bne.n	801cec2 <__swbuf_r+0x7a>
 801cebe:	68ac      	ldr	r4, [r5, #8]
 801cec0:	e7cf      	b.n	801ce62 <__swbuf_r+0x1a>
 801cec2:	4b09      	ldr	r3, [pc, #36]	; (801cee8 <__swbuf_r+0xa0>)
 801cec4:	429c      	cmp	r4, r3
 801cec6:	bf08      	it	eq
 801cec8:	68ec      	ldreq	r4, [r5, #12]
 801ceca:	e7ca      	b.n	801ce62 <__swbuf_r+0x1a>
 801cecc:	4621      	mov	r1, r4
 801cece:	4628      	mov	r0, r5
 801ced0:	f000 f80c 	bl	801ceec <__swsetup_r>
 801ced4:	2800      	cmp	r0, #0
 801ced6:	d0cb      	beq.n	801ce70 <__swbuf_r+0x28>
 801ced8:	f04f 37ff 	mov.w	r7, #4294967295
 801cedc:	e7ea      	b.n	801ceb4 <__swbuf_r+0x6c>
 801cede:	bf00      	nop
 801cee0:	08021b4c 	.word	0x08021b4c
 801cee4:	08021b6c 	.word	0x08021b6c
 801cee8:	08021b2c 	.word	0x08021b2c

0801ceec <__swsetup_r>:
 801ceec:	4b32      	ldr	r3, [pc, #200]	; (801cfb8 <__swsetup_r+0xcc>)
 801ceee:	b570      	push	{r4, r5, r6, lr}
 801cef0:	681d      	ldr	r5, [r3, #0]
 801cef2:	4606      	mov	r6, r0
 801cef4:	460c      	mov	r4, r1
 801cef6:	b125      	cbz	r5, 801cf02 <__swsetup_r+0x16>
 801cef8:	69ab      	ldr	r3, [r5, #24]
 801cefa:	b913      	cbnz	r3, 801cf02 <__swsetup_r+0x16>
 801cefc:	4628      	mov	r0, r5
 801cefe:	f001 f817 	bl	801df30 <__sinit>
 801cf02:	4b2e      	ldr	r3, [pc, #184]	; (801cfbc <__swsetup_r+0xd0>)
 801cf04:	429c      	cmp	r4, r3
 801cf06:	d10f      	bne.n	801cf28 <__swsetup_r+0x3c>
 801cf08:	686c      	ldr	r4, [r5, #4]
 801cf0a:	89a3      	ldrh	r3, [r4, #12]
 801cf0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801cf10:	0719      	lsls	r1, r3, #28
 801cf12:	d42c      	bmi.n	801cf6e <__swsetup_r+0x82>
 801cf14:	06dd      	lsls	r5, r3, #27
 801cf16:	d411      	bmi.n	801cf3c <__swsetup_r+0x50>
 801cf18:	2309      	movs	r3, #9
 801cf1a:	6033      	str	r3, [r6, #0]
 801cf1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801cf20:	81a3      	strh	r3, [r4, #12]
 801cf22:	f04f 30ff 	mov.w	r0, #4294967295
 801cf26:	e03e      	b.n	801cfa6 <__swsetup_r+0xba>
 801cf28:	4b25      	ldr	r3, [pc, #148]	; (801cfc0 <__swsetup_r+0xd4>)
 801cf2a:	429c      	cmp	r4, r3
 801cf2c:	d101      	bne.n	801cf32 <__swsetup_r+0x46>
 801cf2e:	68ac      	ldr	r4, [r5, #8]
 801cf30:	e7eb      	b.n	801cf0a <__swsetup_r+0x1e>
 801cf32:	4b24      	ldr	r3, [pc, #144]	; (801cfc4 <__swsetup_r+0xd8>)
 801cf34:	429c      	cmp	r4, r3
 801cf36:	bf08      	it	eq
 801cf38:	68ec      	ldreq	r4, [r5, #12]
 801cf3a:	e7e6      	b.n	801cf0a <__swsetup_r+0x1e>
 801cf3c:	0758      	lsls	r0, r3, #29
 801cf3e:	d512      	bpl.n	801cf66 <__swsetup_r+0x7a>
 801cf40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cf42:	b141      	cbz	r1, 801cf56 <__swsetup_r+0x6a>
 801cf44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cf48:	4299      	cmp	r1, r3
 801cf4a:	d002      	beq.n	801cf52 <__swsetup_r+0x66>
 801cf4c:	4630      	mov	r0, r6
 801cf4e:	f7fd ffe3 	bl	801af18 <_free_r>
 801cf52:	2300      	movs	r3, #0
 801cf54:	6363      	str	r3, [r4, #52]	; 0x34
 801cf56:	89a3      	ldrh	r3, [r4, #12]
 801cf58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801cf5c:	81a3      	strh	r3, [r4, #12]
 801cf5e:	2300      	movs	r3, #0
 801cf60:	6063      	str	r3, [r4, #4]
 801cf62:	6923      	ldr	r3, [r4, #16]
 801cf64:	6023      	str	r3, [r4, #0]
 801cf66:	89a3      	ldrh	r3, [r4, #12]
 801cf68:	f043 0308 	orr.w	r3, r3, #8
 801cf6c:	81a3      	strh	r3, [r4, #12]
 801cf6e:	6923      	ldr	r3, [r4, #16]
 801cf70:	b94b      	cbnz	r3, 801cf86 <__swsetup_r+0x9a>
 801cf72:	89a3      	ldrh	r3, [r4, #12]
 801cf74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801cf78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cf7c:	d003      	beq.n	801cf86 <__swsetup_r+0x9a>
 801cf7e:	4621      	mov	r1, r4
 801cf80:	4630      	mov	r0, r6
 801cf82:	f001 fc1d 	bl	801e7c0 <__smakebuf_r>
 801cf86:	89a0      	ldrh	r0, [r4, #12]
 801cf88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801cf8c:	f010 0301 	ands.w	r3, r0, #1
 801cf90:	d00a      	beq.n	801cfa8 <__swsetup_r+0xbc>
 801cf92:	2300      	movs	r3, #0
 801cf94:	60a3      	str	r3, [r4, #8]
 801cf96:	6963      	ldr	r3, [r4, #20]
 801cf98:	425b      	negs	r3, r3
 801cf9a:	61a3      	str	r3, [r4, #24]
 801cf9c:	6923      	ldr	r3, [r4, #16]
 801cf9e:	b943      	cbnz	r3, 801cfb2 <__swsetup_r+0xc6>
 801cfa0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801cfa4:	d1ba      	bne.n	801cf1c <__swsetup_r+0x30>
 801cfa6:	bd70      	pop	{r4, r5, r6, pc}
 801cfa8:	0781      	lsls	r1, r0, #30
 801cfaa:	bf58      	it	pl
 801cfac:	6963      	ldrpl	r3, [r4, #20]
 801cfae:	60a3      	str	r3, [r4, #8]
 801cfb0:	e7f4      	b.n	801cf9c <__swsetup_r+0xb0>
 801cfb2:	2000      	movs	r0, #0
 801cfb4:	e7f7      	b.n	801cfa6 <__swsetup_r+0xba>
 801cfb6:	bf00      	nop
 801cfb8:	20000140 	.word	0x20000140
 801cfbc:	08021b4c 	.word	0x08021b4c
 801cfc0:	08021b6c 	.word	0x08021b6c
 801cfc4:	08021b2c 	.word	0x08021b2c

0801cfc8 <__assert_func>:
 801cfc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801cfca:	4614      	mov	r4, r2
 801cfcc:	461a      	mov	r2, r3
 801cfce:	4b09      	ldr	r3, [pc, #36]	; (801cff4 <__assert_func+0x2c>)
 801cfd0:	681b      	ldr	r3, [r3, #0]
 801cfd2:	4605      	mov	r5, r0
 801cfd4:	68d8      	ldr	r0, [r3, #12]
 801cfd6:	b14c      	cbz	r4, 801cfec <__assert_func+0x24>
 801cfd8:	4b07      	ldr	r3, [pc, #28]	; (801cff8 <__assert_func+0x30>)
 801cfda:	9100      	str	r1, [sp, #0]
 801cfdc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801cfe0:	4906      	ldr	r1, [pc, #24]	; (801cffc <__assert_func+0x34>)
 801cfe2:	462b      	mov	r3, r5
 801cfe4:	f001 f822 	bl	801e02c <fiprintf>
 801cfe8:	f002 fc54 	bl	801f894 <abort>
 801cfec:	4b04      	ldr	r3, [pc, #16]	; (801d000 <__assert_func+0x38>)
 801cfee:	461c      	mov	r4, r3
 801cff0:	e7f3      	b.n	801cfda <__assert_func+0x12>
 801cff2:	bf00      	nop
 801cff4:	20000140 	.word	0x20000140
 801cff8:	08021974 	.word	0x08021974
 801cffc:	08021981 	.word	0x08021981
 801d000:	080219af 	.word	0x080219af

0801d004 <quorem>:
 801d004:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d008:	6903      	ldr	r3, [r0, #16]
 801d00a:	690c      	ldr	r4, [r1, #16]
 801d00c:	42a3      	cmp	r3, r4
 801d00e:	4607      	mov	r7, r0
 801d010:	f2c0 8081 	blt.w	801d116 <quorem+0x112>
 801d014:	3c01      	subs	r4, #1
 801d016:	f101 0814 	add.w	r8, r1, #20
 801d01a:	f100 0514 	add.w	r5, r0, #20
 801d01e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d022:	9301      	str	r3, [sp, #4]
 801d024:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801d028:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d02c:	3301      	adds	r3, #1
 801d02e:	429a      	cmp	r2, r3
 801d030:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801d034:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801d038:	fbb2 f6f3 	udiv	r6, r2, r3
 801d03c:	d331      	bcc.n	801d0a2 <quorem+0x9e>
 801d03e:	f04f 0e00 	mov.w	lr, #0
 801d042:	4640      	mov	r0, r8
 801d044:	46ac      	mov	ip, r5
 801d046:	46f2      	mov	sl, lr
 801d048:	f850 2b04 	ldr.w	r2, [r0], #4
 801d04c:	b293      	uxth	r3, r2
 801d04e:	fb06 e303 	mla	r3, r6, r3, lr
 801d052:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801d056:	b29b      	uxth	r3, r3
 801d058:	ebaa 0303 	sub.w	r3, sl, r3
 801d05c:	f8dc a000 	ldr.w	sl, [ip]
 801d060:	0c12      	lsrs	r2, r2, #16
 801d062:	fa13 f38a 	uxtah	r3, r3, sl
 801d066:	fb06 e202 	mla	r2, r6, r2, lr
 801d06a:	9300      	str	r3, [sp, #0]
 801d06c:	9b00      	ldr	r3, [sp, #0]
 801d06e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801d072:	b292      	uxth	r2, r2
 801d074:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801d078:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d07c:	f8bd 3000 	ldrh.w	r3, [sp]
 801d080:	4581      	cmp	r9, r0
 801d082:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d086:	f84c 3b04 	str.w	r3, [ip], #4
 801d08a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801d08e:	d2db      	bcs.n	801d048 <quorem+0x44>
 801d090:	f855 300b 	ldr.w	r3, [r5, fp]
 801d094:	b92b      	cbnz	r3, 801d0a2 <quorem+0x9e>
 801d096:	9b01      	ldr	r3, [sp, #4]
 801d098:	3b04      	subs	r3, #4
 801d09a:	429d      	cmp	r5, r3
 801d09c:	461a      	mov	r2, r3
 801d09e:	d32e      	bcc.n	801d0fe <quorem+0xfa>
 801d0a0:	613c      	str	r4, [r7, #16]
 801d0a2:	4638      	mov	r0, r7
 801d0a4:	f001 feb6 	bl	801ee14 <__mcmp>
 801d0a8:	2800      	cmp	r0, #0
 801d0aa:	db24      	blt.n	801d0f6 <quorem+0xf2>
 801d0ac:	3601      	adds	r6, #1
 801d0ae:	4628      	mov	r0, r5
 801d0b0:	f04f 0c00 	mov.w	ip, #0
 801d0b4:	f858 2b04 	ldr.w	r2, [r8], #4
 801d0b8:	f8d0 e000 	ldr.w	lr, [r0]
 801d0bc:	b293      	uxth	r3, r2
 801d0be:	ebac 0303 	sub.w	r3, ip, r3
 801d0c2:	0c12      	lsrs	r2, r2, #16
 801d0c4:	fa13 f38e 	uxtah	r3, r3, lr
 801d0c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801d0cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d0d0:	b29b      	uxth	r3, r3
 801d0d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d0d6:	45c1      	cmp	r9, r8
 801d0d8:	f840 3b04 	str.w	r3, [r0], #4
 801d0dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801d0e0:	d2e8      	bcs.n	801d0b4 <quorem+0xb0>
 801d0e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d0e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d0ea:	b922      	cbnz	r2, 801d0f6 <quorem+0xf2>
 801d0ec:	3b04      	subs	r3, #4
 801d0ee:	429d      	cmp	r5, r3
 801d0f0:	461a      	mov	r2, r3
 801d0f2:	d30a      	bcc.n	801d10a <quorem+0x106>
 801d0f4:	613c      	str	r4, [r7, #16]
 801d0f6:	4630      	mov	r0, r6
 801d0f8:	b003      	add	sp, #12
 801d0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0fe:	6812      	ldr	r2, [r2, #0]
 801d100:	3b04      	subs	r3, #4
 801d102:	2a00      	cmp	r2, #0
 801d104:	d1cc      	bne.n	801d0a0 <quorem+0x9c>
 801d106:	3c01      	subs	r4, #1
 801d108:	e7c7      	b.n	801d09a <quorem+0x96>
 801d10a:	6812      	ldr	r2, [r2, #0]
 801d10c:	3b04      	subs	r3, #4
 801d10e:	2a00      	cmp	r2, #0
 801d110:	d1f0      	bne.n	801d0f4 <quorem+0xf0>
 801d112:	3c01      	subs	r4, #1
 801d114:	e7eb      	b.n	801d0ee <quorem+0xea>
 801d116:	2000      	movs	r0, #0
 801d118:	e7ee      	b.n	801d0f8 <quorem+0xf4>
 801d11a:	0000      	movs	r0, r0
 801d11c:	0000      	movs	r0, r0
	...

0801d120 <_dtoa_r>:
 801d120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d124:	ed2d 8b04 	vpush	{d8-d9}
 801d128:	ec57 6b10 	vmov	r6, r7, d0
 801d12c:	b093      	sub	sp, #76	; 0x4c
 801d12e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801d130:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801d134:	9106      	str	r1, [sp, #24]
 801d136:	ee10 aa10 	vmov	sl, s0
 801d13a:	4604      	mov	r4, r0
 801d13c:	9209      	str	r2, [sp, #36]	; 0x24
 801d13e:	930c      	str	r3, [sp, #48]	; 0x30
 801d140:	46bb      	mov	fp, r7
 801d142:	b975      	cbnz	r5, 801d162 <_dtoa_r+0x42>
 801d144:	2010      	movs	r0, #16
 801d146:	f7fd fea7 	bl	801ae98 <malloc>
 801d14a:	4602      	mov	r2, r0
 801d14c:	6260      	str	r0, [r4, #36]	; 0x24
 801d14e:	b920      	cbnz	r0, 801d15a <_dtoa_r+0x3a>
 801d150:	4ba7      	ldr	r3, [pc, #668]	; (801d3f0 <_dtoa_r+0x2d0>)
 801d152:	21ea      	movs	r1, #234	; 0xea
 801d154:	48a7      	ldr	r0, [pc, #668]	; (801d3f4 <_dtoa_r+0x2d4>)
 801d156:	f7ff ff37 	bl	801cfc8 <__assert_func>
 801d15a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801d15e:	6005      	str	r5, [r0, #0]
 801d160:	60c5      	str	r5, [r0, #12]
 801d162:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d164:	6819      	ldr	r1, [r3, #0]
 801d166:	b151      	cbz	r1, 801d17e <_dtoa_r+0x5e>
 801d168:	685a      	ldr	r2, [r3, #4]
 801d16a:	604a      	str	r2, [r1, #4]
 801d16c:	2301      	movs	r3, #1
 801d16e:	4093      	lsls	r3, r2
 801d170:	608b      	str	r3, [r1, #8]
 801d172:	4620      	mov	r0, r4
 801d174:	f001 fbc2 	bl	801e8fc <_Bfree>
 801d178:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d17a:	2200      	movs	r2, #0
 801d17c:	601a      	str	r2, [r3, #0]
 801d17e:	1e3b      	subs	r3, r7, #0
 801d180:	bfaa      	itet	ge
 801d182:	2300      	movge	r3, #0
 801d184:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801d188:	f8c8 3000 	strge.w	r3, [r8]
 801d18c:	4b9a      	ldr	r3, [pc, #616]	; (801d3f8 <_dtoa_r+0x2d8>)
 801d18e:	bfbc      	itt	lt
 801d190:	2201      	movlt	r2, #1
 801d192:	f8c8 2000 	strlt.w	r2, [r8]
 801d196:	ea33 030b 	bics.w	r3, r3, fp
 801d19a:	d11b      	bne.n	801d1d4 <_dtoa_r+0xb4>
 801d19c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d19e:	f242 730f 	movw	r3, #9999	; 0x270f
 801d1a2:	6013      	str	r3, [r2, #0]
 801d1a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d1a8:	4333      	orrs	r3, r6
 801d1aa:	f000 8592 	beq.w	801dcd2 <_dtoa_r+0xbb2>
 801d1ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d1b0:	b963      	cbnz	r3, 801d1cc <_dtoa_r+0xac>
 801d1b2:	4b92      	ldr	r3, [pc, #584]	; (801d3fc <_dtoa_r+0x2dc>)
 801d1b4:	e022      	b.n	801d1fc <_dtoa_r+0xdc>
 801d1b6:	4b92      	ldr	r3, [pc, #584]	; (801d400 <_dtoa_r+0x2e0>)
 801d1b8:	9301      	str	r3, [sp, #4]
 801d1ba:	3308      	adds	r3, #8
 801d1bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d1be:	6013      	str	r3, [r2, #0]
 801d1c0:	9801      	ldr	r0, [sp, #4]
 801d1c2:	b013      	add	sp, #76	; 0x4c
 801d1c4:	ecbd 8b04 	vpop	{d8-d9}
 801d1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d1cc:	4b8b      	ldr	r3, [pc, #556]	; (801d3fc <_dtoa_r+0x2dc>)
 801d1ce:	9301      	str	r3, [sp, #4]
 801d1d0:	3303      	adds	r3, #3
 801d1d2:	e7f3      	b.n	801d1bc <_dtoa_r+0x9c>
 801d1d4:	2200      	movs	r2, #0
 801d1d6:	2300      	movs	r3, #0
 801d1d8:	4650      	mov	r0, sl
 801d1da:	4659      	mov	r1, fp
 801d1dc:	f7e3 fc8c 	bl	8000af8 <__aeabi_dcmpeq>
 801d1e0:	ec4b ab19 	vmov	d9, sl, fp
 801d1e4:	4680      	mov	r8, r0
 801d1e6:	b158      	cbz	r0, 801d200 <_dtoa_r+0xe0>
 801d1e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d1ea:	2301      	movs	r3, #1
 801d1ec:	6013      	str	r3, [r2, #0]
 801d1ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d1f0:	2b00      	cmp	r3, #0
 801d1f2:	f000 856b 	beq.w	801dccc <_dtoa_r+0xbac>
 801d1f6:	4883      	ldr	r0, [pc, #524]	; (801d404 <_dtoa_r+0x2e4>)
 801d1f8:	6018      	str	r0, [r3, #0]
 801d1fa:	1e43      	subs	r3, r0, #1
 801d1fc:	9301      	str	r3, [sp, #4]
 801d1fe:	e7df      	b.n	801d1c0 <_dtoa_r+0xa0>
 801d200:	ec4b ab10 	vmov	d0, sl, fp
 801d204:	aa10      	add	r2, sp, #64	; 0x40
 801d206:	a911      	add	r1, sp, #68	; 0x44
 801d208:	4620      	mov	r0, r4
 801d20a:	f001 ff25 	bl	801f058 <__d2b>
 801d20e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801d212:	ee08 0a10 	vmov	s16, r0
 801d216:	2d00      	cmp	r5, #0
 801d218:	f000 8084 	beq.w	801d324 <_dtoa_r+0x204>
 801d21c:	ee19 3a90 	vmov	r3, s19
 801d220:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d224:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801d228:	4656      	mov	r6, sl
 801d22a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801d22e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801d232:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801d236:	4b74      	ldr	r3, [pc, #464]	; (801d408 <_dtoa_r+0x2e8>)
 801d238:	2200      	movs	r2, #0
 801d23a:	4630      	mov	r0, r6
 801d23c:	4639      	mov	r1, r7
 801d23e:	f7e3 f83b 	bl	80002b8 <__aeabi_dsub>
 801d242:	a365      	add	r3, pc, #404	; (adr r3, 801d3d8 <_dtoa_r+0x2b8>)
 801d244:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d248:	f7e3 f9ee 	bl	8000628 <__aeabi_dmul>
 801d24c:	a364      	add	r3, pc, #400	; (adr r3, 801d3e0 <_dtoa_r+0x2c0>)
 801d24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d252:	f7e3 f833 	bl	80002bc <__adddf3>
 801d256:	4606      	mov	r6, r0
 801d258:	4628      	mov	r0, r5
 801d25a:	460f      	mov	r7, r1
 801d25c:	f7e3 f97a 	bl	8000554 <__aeabi_i2d>
 801d260:	a361      	add	r3, pc, #388	; (adr r3, 801d3e8 <_dtoa_r+0x2c8>)
 801d262:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d266:	f7e3 f9df 	bl	8000628 <__aeabi_dmul>
 801d26a:	4602      	mov	r2, r0
 801d26c:	460b      	mov	r3, r1
 801d26e:	4630      	mov	r0, r6
 801d270:	4639      	mov	r1, r7
 801d272:	f7e3 f823 	bl	80002bc <__adddf3>
 801d276:	4606      	mov	r6, r0
 801d278:	460f      	mov	r7, r1
 801d27a:	f7e3 fc85 	bl	8000b88 <__aeabi_d2iz>
 801d27e:	2200      	movs	r2, #0
 801d280:	9000      	str	r0, [sp, #0]
 801d282:	2300      	movs	r3, #0
 801d284:	4630      	mov	r0, r6
 801d286:	4639      	mov	r1, r7
 801d288:	f7e3 fc40 	bl	8000b0c <__aeabi_dcmplt>
 801d28c:	b150      	cbz	r0, 801d2a4 <_dtoa_r+0x184>
 801d28e:	9800      	ldr	r0, [sp, #0]
 801d290:	f7e3 f960 	bl	8000554 <__aeabi_i2d>
 801d294:	4632      	mov	r2, r6
 801d296:	463b      	mov	r3, r7
 801d298:	f7e3 fc2e 	bl	8000af8 <__aeabi_dcmpeq>
 801d29c:	b910      	cbnz	r0, 801d2a4 <_dtoa_r+0x184>
 801d29e:	9b00      	ldr	r3, [sp, #0]
 801d2a0:	3b01      	subs	r3, #1
 801d2a2:	9300      	str	r3, [sp, #0]
 801d2a4:	9b00      	ldr	r3, [sp, #0]
 801d2a6:	2b16      	cmp	r3, #22
 801d2a8:	d85a      	bhi.n	801d360 <_dtoa_r+0x240>
 801d2aa:	9a00      	ldr	r2, [sp, #0]
 801d2ac:	4b57      	ldr	r3, [pc, #348]	; (801d40c <_dtoa_r+0x2ec>)
 801d2ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2b6:	ec51 0b19 	vmov	r0, r1, d9
 801d2ba:	f7e3 fc27 	bl	8000b0c <__aeabi_dcmplt>
 801d2be:	2800      	cmp	r0, #0
 801d2c0:	d050      	beq.n	801d364 <_dtoa_r+0x244>
 801d2c2:	9b00      	ldr	r3, [sp, #0]
 801d2c4:	3b01      	subs	r3, #1
 801d2c6:	9300      	str	r3, [sp, #0]
 801d2c8:	2300      	movs	r3, #0
 801d2ca:	930b      	str	r3, [sp, #44]	; 0x2c
 801d2cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d2ce:	1b5d      	subs	r5, r3, r5
 801d2d0:	1e6b      	subs	r3, r5, #1
 801d2d2:	9305      	str	r3, [sp, #20]
 801d2d4:	bf45      	ittet	mi
 801d2d6:	f1c5 0301 	rsbmi	r3, r5, #1
 801d2da:	9304      	strmi	r3, [sp, #16]
 801d2dc:	2300      	movpl	r3, #0
 801d2de:	2300      	movmi	r3, #0
 801d2e0:	bf4c      	ite	mi
 801d2e2:	9305      	strmi	r3, [sp, #20]
 801d2e4:	9304      	strpl	r3, [sp, #16]
 801d2e6:	9b00      	ldr	r3, [sp, #0]
 801d2e8:	2b00      	cmp	r3, #0
 801d2ea:	db3d      	blt.n	801d368 <_dtoa_r+0x248>
 801d2ec:	9b05      	ldr	r3, [sp, #20]
 801d2ee:	9a00      	ldr	r2, [sp, #0]
 801d2f0:	920a      	str	r2, [sp, #40]	; 0x28
 801d2f2:	4413      	add	r3, r2
 801d2f4:	9305      	str	r3, [sp, #20]
 801d2f6:	2300      	movs	r3, #0
 801d2f8:	9307      	str	r3, [sp, #28]
 801d2fa:	9b06      	ldr	r3, [sp, #24]
 801d2fc:	2b09      	cmp	r3, #9
 801d2fe:	f200 8089 	bhi.w	801d414 <_dtoa_r+0x2f4>
 801d302:	2b05      	cmp	r3, #5
 801d304:	bfc4      	itt	gt
 801d306:	3b04      	subgt	r3, #4
 801d308:	9306      	strgt	r3, [sp, #24]
 801d30a:	9b06      	ldr	r3, [sp, #24]
 801d30c:	f1a3 0302 	sub.w	r3, r3, #2
 801d310:	bfcc      	ite	gt
 801d312:	2500      	movgt	r5, #0
 801d314:	2501      	movle	r5, #1
 801d316:	2b03      	cmp	r3, #3
 801d318:	f200 8087 	bhi.w	801d42a <_dtoa_r+0x30a>
 801d31c:	e8df f003 	tbb	[pc, r3]
 801d320:	59383a2d 	.word	0x59383a2d
 801d324:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801d328:	441d      	add	r5, r3
 801d32a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801d32e:	2b20      	cmp	r3, #32
 801d330:	bfc1      	itttt	gt
 801d332:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801d336:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801d33a:	fa0b f303 	lslgt.w	r3, fp, r3
 801d33e:	fa26 f000 	lsrgt.w	r0, r6, r0
 801d342:	bfda      	itte	le
 801d344:	f1c3 0320 	rsble	r3, r3, #32
 801d348:	fa06 f003 	lslle.w	r0, r6, r3
 801d34c:	4318      	orrgt	r0, r3
 801d34e:	f7e3 f8f1 	bl	8000534 <__aeabi_ui2d>
 801d352:	2301      	movs	r3, #1
 801d354:	4606      	mov	r6, r0
 801d356:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801d35a:	3d01      	subs	r5, #1
 801d35c:	930e      	str	r3, [sp, #56]	; 0x38
 801d35e:	e76a      	b.n	801d236 <_dtoa_r+0x116>
 801d360:	2301      	movs	r3, #1
 801d362:	e7b2      	b.n	801d2ca <_dtoa_r+0x1aa>
 801d364:	900b      	str	r0, [sp, #44]	; 0x2c
 801d366:	e7b1      	b.n	801d2cc <_dtoa_r+0x1ac>
 801d368:	9b04      	ldr	r3, [sp, #16]
 801d36a:	9a00      	ldr	r2, [sp, #0]
 801d36c:	1a9b      	subs	r3, r3, r2
 801d36e:	9304      	str	r3, [sp, #16]
 801d370:	4253      	negs	r3, r2
 801d372:	9307      	str	r3, [sp, #28]
 801d374:	2300      	movs	r3, #0
 801d376:	930a      	str	r3, [sp, #40]	; 0x28
 801d378:	e7bf      	b.n	801d2fa <_dtoa_r+0x1da>
 801d37a:	2300      	movs	r3, #0
 801d37c:	9308      	str	r3, [sp, #32]
 801d37e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d380:	2b00      	cmp	r3, #0
 801d382:	dc55      	bgt.n	801d430 <_dtoa_r+0x310>
 801d384:	2301      	movs	r3, #1
 801d386:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801d38a:	461a      	mov	r2, r3
 801d38c:	9209      	str	r2, [sp, #36]	; 0x24
 801d38e:	e00c      	b.n	801d3aa <_dtoa_r+0x28a>
 801d390:	2301      	movs	r3, #1
 801d392:	e7f3      	b.n	801d37c <_dtoa_r+0x25c>
 801d394:	2300      	movs	r3, #0
 801d396:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d398:	9308      	str	r3, [sp, #32]
 801d39a:	9b00      	ldr	r3, [sp, #0]
 801d39c:	4413      	add	r3, r2
 801d39e:	9302      	str	r3, [sp, #8]
 801d3a0:	3301      	adds	r3, #1
 801d3a2:	2b01      	cmp	r3, #1
 801d3a4:	9303      	str	r3, [sp, #12]
 801d3a6:	bfb8      	it	lt
 801d3a8:	2301      	movlt	r3, #1
 801d3aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801d3ac:	2200      	movs	r2, #0
 801d3ae:	6042      	str	r2, [r0, #4]
 801d3b0:	2204      	movs	r2, #4
 801d3b2:	f102 0614 	add.w	r6, r2, #20
 801d3b6:	429e      	cmp	r6, r3
 801d3b8:	6841      	ldr	r1, [r0, #4]
 801d3ba:	d93d      	bls.n	801d438 <_dtoa_r+0x318>
 801d3bc:	4620      	mov	r0, r4
 801d3be:	f001 fa5d 	bl	801e87c <_Balloc>
 801d3c2:	9001      	str	r0, [sp, #4]
 801d3c4:	2800      	cmp	r0, #0
 801d3c6:	d13b      	bne.n	801d440 <_dtoa_r+0x320>
 801d3c8:	4b11      	ldr	r3, [pc, #68]	; (801d410 <_dtoa_r+0x2f0>)
 801d3ca:	4602      	mov	r2, r0
 801d3cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801d3d0:	e6c0      	b.n	801d154 <_dtoa_r+0x34>
 801d3d2:	2301      	movs	r3, #1
 801d3d4:	e7df      	b.n	801d396 <_dtoa_r+0x276>
 801d3d6:	bf00      	nop
 801d3d8:	636f4361 	.word	0x636f4361
 801d3dc:	3fd287a7 	.word	0x3fd287a7
 801d3e0:	8b60c8b3 	.word	0x8b60c8b3
 801d3e4:	3fc68a28 	.word	0x3fc68a28
 801d3e8:	509f79fb 	.word	0x509f79fb
 801d3ec:	3fd34413 	.word	0x3fd34413
 801d3f0:	08021900 	.word	0x08021900
 801d3f4:	08021abe 	.word	0x08021abe
 801d3f8:	7ff00000 	.word	0x7ff00000
 801d3fc:	08021aba 	.word	0x08021aba
 801d400:	08021ab1 	.word	0x08021ab1
 801d404:	08021885 	.word	0x08021885
 801d408:	3ff80000 	.word	0x3ff80000
 801d40c:	08021c90 	.word	0x08021c90
 801d410:	08021b19 	.word	0x08021b19
 801d414:	2501      	movs	r5, #1
 801d416:	2300      	movs	r3, #0
 801d418:	9306      	str	r3, [sp, #24]
 801d41a:	9508      	str	r5, [sp, #32]
 801d41c:	f04f 33ff 	mov.w	r3, #4294967295
 801d420:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801d424:	2200      	movs	r2, #0
 801d426:	2312      	movs	r3, #18
 801d428:	e7b0      	b.n	801d38c <_dtoa_r+0x26c>
 801d42a:	2301      	movs	r3, #1
 801d42c:	9308      	str	r3, [sp, #32]
 801d42e:	e7f5      	b.n	801d41c <_dtoa_r+0x2fc>
 801d430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d432:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801d436:	e7b8      	b.n	801d3aa <_dtoa_r+0x28a>
 801d438:	3101      	adds	r1, #1
 801d43a:	6041      	str	r1, [r0, #4]
 801d43c:	0052      	lsls	r2, r2, #1
 801d43e:	e7b8      	b.n	801d3b2 <_dtoa_r+0x292>
 801d440:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d442:	9a01      	ldr	r2, [sp, #4]
 801d444:	601a      	str	r2, [r3, #0]
 801d446:	9b03      	ldr	r3, [sp, #12]
 801d448:	2b0e      	cmp	r3, #14
 801d44a:	f200 809d 	bhi.w	801d588 <_dtoa_r+0x468>
 801d44e:	2d00      	cmp	r5, #0
 801d450:	f000 809a 	beq.w	801d588 <_dtoa_r+0x468>
 801d454:	9b00      	ldr	r3, [sp, #0]
 801d456:	2b00      	cmp	r3, #0
 801d458:	dd32      	ble.n	801d4c0 <_dtoa_r+0x3a0>
 801d45a:	4ab7      	ldr	r2, [pc, #732]	; (801d738 <_dtoa_r+0x618>)
 801d45c:	f003 030f 	and.w	r3, r3, #15
 801d460:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801d464:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d468:	9b00      	ldr	r3, [sp, #0]
 801d46a:	05d8      	lsls	r0, r3, #23
 801d46c:	ea4f 1723 	mov.w	r7, r3, asr #4
 801d470:	d516      	bpl.n	801d4a0 <_dtoa_r+0x380>
 801d472:	4bb2      	ldr	r3, [pc, #712]	; (801d73c <_dtoa_r+0x61c>)
 801d474:	ec51 0b19 	vmov	r0, r1, d9
 801d478:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801d47c:	f7e3 f9fe 	bl	800087c <__aeabi_ddiv>
 801d480:	f007 070f 	and.w	r7, r7, #15
 801d484:	4682      	mov	sl, r0
 801d486:	468b      	mov	fp, r1
 801d488:	2503      	movs	r5, #3
 801d48a:	4eac      	ldr	r6, [pc, #688]	; (801d73c <_dtoa_r+0x61c>)
 801d48c:	b957      	cbnz	r7, 801d4a4 <_dtoa_r+0x384>
 801d48e:	4642      	mov	r2, r8
 801d490:	464b      	mov	r3, r9
 801d492:	4650      	mov	r0, sl
 801d494:	4659      	mov	r1, fp
 801d496:	f7e3 f9f1 	bl	800087c <__aeabi_ddiv>
 801d49a:	4682      	mov	sl, r0
 801d49c:	468b      	mov	fp, r1
 801d49e:	e028      	b.n	801d4f2 <_dtoa_r+0x3d2>
 801d4a0:	2502      	movs	r5, #2
 801d4a2:	e7f2      	b.n	801d48a <_dtoa_r+0x36a>
 801d4a4:	07f9      	lsls	r1, r7, #31
 801d4a6:	d508      	bpl.n	801d4ba <_dtoa_r+0x39a>
 801d4a8:	4640      	mov	r0, r8
 801d4aa:	4649      	mov	r1, r9
 801d4ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 801d4b0:	f7e3 f8ba 	bl	8000628 <__aeabi_dmul>
 801d4b4:	3501      	adds	r5, #1
 801d4b6:	4680      	mov	r8, r0
 801d4b8:	4689      	mov	r9, r1
 801d4ba:	107f      	asrs	r7, r7, #1
 801d4bc:	3608      	adds	r6, #8
 801d4be:	e7e5      	b.n	801d48c <_dtoa_r+0x36c>
 801d4c0:	f000 809b 	beq.w	801d5fa <_dtoa_r+0x4da>
 801d4c4:	9b00      	ldr	r3, [sp, #0]
 801d4c6:	4f9d      	ldr	r7, [pc, #628]	; (801d73c <_dtoa_r+0x61c>)
 801d4c8:	425e      	negs	r6, r3
 801d4ca:	4b9b      	ldr	r3, [pc, #620]	; (801d738 <_dtoa_r+0x618>)
 801d4cc:	f006 020f 	and.w	r2, r6, #15
 801d4d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4d8:	ec51 0b19 	vmov	r0, r1, d9
 801d4dc:	f7e3 f8a4 	bl	8000628 <__aeabi_dmul>
 801d4e0:	1136      	asrs	r6, r6, #4
 801d4e2:	4682      	mov	sl, r0
 801d4e4:	468b      	mov	fp, r1
 801d4e6:	2300      	movs	r3, #0
 801d4e8:	2502      	movs	r5, #2
 801d4ea:	2e00      	cmp	r6, #0
 801d4ec:	d17a      	bne.n	801d5e4 <_dtoa_r+0x4c4>
 801d4ee:	2b00      	cmp	r3, #0
 801d4f0:	d1d3      	bne.n	801d49a <_dtoa_r+0x37a>
 801d4f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d4f4:	2b00      	cmp	r3, #0
 801d4f6:	f000 8082 	beq.w	801d5fe <_dtoa_r+0x4de>
 801d4fa:	4b91      	ldr	r3, [pc, #580]	; (801d740 <_dtoa_r+0x620>)
 801d4fc:	2200      	movs	r2, #0
 801d4fe:	4650      	mov	r0, sl
 801d500:	4659      	mov	r1, fp
 801d502:	f7e3 fb03 	bl	8000b0c <__aeabi_dcmplt>
 801d506:	2800      	cmp	r0, #0
 801d508:	d079      	beq.n	801d5fe <_dtoa_r+0x4de>
 801d50a:	9b03      	ldr	r3, [sp, #12]
 801d50c:	2b00      	cmp	r3, #0
 801d50e:	d076      	beq.n	801d5fe <_dtoa_r+0x4de>
 801d510:	9b02      	ldr	r3, [sp, #8]
 801d512:	2b00      	cmp	r3, #0
 801d514:	dd36      	ble.n	801d584 <_dtoa_r+0x464>
 801d516:	9b00      	ldr	r3, [sp, #0]
 801d518:	4650      	mov	r0, sl
 801d51a:	4659      	mov	r1, fp
 801d51c:	1e5f      	subs	r7, r3, #1
 801d51e:	2200      	movs	r2, #0
 801d520:	4b88      	ldr	r3, [pc, #544]	; (801d744 <_dtoa_r+0x624>)
 801d522:	f7e3 f881 	bl	8000628 <__aeabi_dmul>
 801d526:	9e02      	ldr	r6, [sp, #8]
 801d528:	4682      	mov	sl, r0
 801d52a:	468b      	mov	fp, r1
 801d52c:	3501      	adds	r5, #1
 801d52e:	4628      	mov	r0, r5
 801d530:	f7e3 f810 	bl	8000554 <__aeabi_i2d>
 801d534:	4652      	mov	r2, sl
 801d536:	465b      	mov	r3, fp
 801d538:	f7e3 f876 	bl	8000628 <__aeabi_dmul>
 801d53c:	4b82      	ldr	r3, [pc, #520]	; (801d748 <_dtoa_r+0x628>)
 801d53e:	2200      	movs	r2, #0
 801d540:	f7e2 febc 	bl	80002bc <__adddf3>
 801d544:	46d0      	mov	r8, sl
 801d546:	46d9      	mov	r9, fp
 801d548:	4682      	mov	sl, r0
 801d54a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801d54e:	2e00      	cmp	r6, #0
 801d550:	d158      	bne.n	801d604 <_dtoa_r+0x4e4>
 801d552:	4b7e      	ldr	r3, [pc, #504]	; (801d74c <_dtoa_r+0x62c>)
 801d554:	2200      	movs	r2, #0
 801d556:	4640      	mov	r0, r8
 801d558:	4649      	mov	r1, r9
 801d55a:	f7e2 fead 	bl	80002b8 <__aeabi_dsub>
 801d55e:	4652      	mov	r2, sl
 801d560:	465b      	mov	r3, fp
 801d562:	4680      	mov	r8, r0
 801d564:	4689      	mov	r9, r1
 801d566:	f7e3 faef 	bl	8000b48 <__aeabi_dcmpgt>
 801d56a:	2800      	cmp	r0, #0
 801d56c:	f040 8295 	bne.w	801da9a <_dtoa_r+0x97a>
 801d570:	4652      	mov	r2, sl
 801d572:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801d576:	4640      	mov	r0, r8
 801d578:	4649      	mov	r1, r9
 801d57a:	f7e3 fac7 	bl	8000b0c <__aeabi_dcmplt>
 801d57e:	2800      	cmp	r0, #0
 801d580:	f040 8289 	bne.w	801da96 <_dtoa_r+0x976>
 801d584:	ec5b ab19 	vmov	sl, fp, d9
 801d588:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d58a:	2b00      	cmp	r3, #0
 801d58c:	f2c0 8148 	blt.w	801d820 <_dtoa_r+0x700>
 801d590:	9a00      	ldr	r2, [sp, #0]
 801d592:	2a0e      	cmp	r2, #14
 801d594:	f300 8144 	bgt.w	801d820 <_dtoa_r+0x700>
 801d598:	4b67      	ldr	r3, [pc, #412]	; (801d738 <_dtoa_r+0x618>)
 801d59a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d59e:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d5a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d5a4:	2b00      	cmp	r3, #0
 801d5a6:	f280 80d5 	bge.w	801d754 <_dtoa_r+0x634>
 801d5aa:	9b03      	ldr	r3, [sp, #12]
 801d5ac:	2b00      	cmp	r3, #0
 801d5ae:	f300 80d1 	bgt.w	801d754 <_dtoa_r+0x634>
 801d5b2:	f040 826f 	bne.w	801da94 <_dtoa_r+0x974>
 801d5b6:	4b65      	ldr	r3, [pc, #404]	; (801d74c <_dtoa_r+0x62c>)
 801d5b8:	2200      	movs	r2, #0
 801d5ba:	4640      	mov	r0, r8
 801d5bc:	4649      	mov	r1, r9
 801d5be:	f7e3 f833 	bl	8000628 <__aeabi_dmul>
 801d5c2:	4652      	mov	r2, sl
 801d5c4:	465b      	mov	r3, fp
 801d5c6:	f7e3 fab5 	bl	8000b34 <__aeabi_dcmpge>
 801d5ca:	9e03      	ldr	r6, [sp, #12]
 801d5cc:	4637      	mov	r7, r6
 801d5ce:	2800      	cmp	r0, #0
 801d5d0:	f040 8245 	bne.w	801da5e <_dtoa_r+0x93e>
 801d5d4:	9d01      	ldr	r5, [sp, #4]
 801d5d6:	2331      	movs	r3, #49	; 0x31
 801d5d8:	f805 3b01 	strb.w	r3, [r5], #1
 801d5dc:	9b00      	ldr	r3, [sp, #0]
 801d5de:	3301      	adds	r3, #1
 801d5e0:	9300      	str	r3, [sp, #0]
 801d5e2:	e240      	b.n	801da66 <_dtoa_r+0x946>
 801d5e4:	07f2      	lsls	r2, r6, #31
 801d5e6:	d505      	bpl.n	801d5f4 <_dtoa_r+0x4d4>
 801d5e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d5ec:	f7e3 f81c 	bl	8000628 <__aeabi_dmul>
 801d5f0:	3501      	adds	r5, #1
 801d5f2:	2301      	movs	r3, #1
 801d5f4:	1076      	asrs	r6, r6, #1
 801d5f6:	3708      	adds	r7, #8
 801d5f8:	e777      	b.n	801d4ea <_dtoa_r+0x3ca>
 801d5fa:	2502      	movs	r5, #2
 801d5fc:	e779      	b.n	801d4f2 <_dtoa_r+0x3d2>
 801d5fe:	9f00      	ldr	r7, [sp, #0]
 801d600:	9e03      	ldr	r6, [sp, #12]
 801d602:	e794      	b.n	801d52e <_dtoa_r+0x40e>
 801d604:	9901      	ldr	r1, [sp, #4]
 801d606:	4b4c      	ldr	r3, [pc, #304]	; (801d738 <_dtoa_r+0x618>)
 801d608:	4431      	add	r1, r6
 801d60a:	910d      	str	r1, [sp, #52]	; 0x34
 801d60c:	9908      	ldr	r1, [sp, #32]
 801d60e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801d612:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d616:	2900      	cmp	r1, #0
 801d618:	d043      	beq.n	801d6a2 <_dtoa_r+0x582>
 801d61a:	494d      	ldr	r1, [pc, #308]	; (801d750 <_dtoa_r+0x630>)
 801d61c:	2000      	movs	r0, #0
 801d61e:	f7e3 f92d 	bl	800087c <__aeabi_ddiv>
 801d622:	4652      	mov	r2, sl
 801d624:	465b      	mov	r3, fp
 801d626:	f7e2 fe47 	bl	80002b8 <__aeabi_dsub>
 801d62a:	9d01      	ldr	r5, [sp, #4]
 801d62c:	4682      	mov	sl, r0
 801d62e:	468b      	mov	fp, r1
 801d630:	4649      	mov	r1, r9
 801d632:	4640      	mov	r0, r8
 801d634:	f7e3 faa8 	bl	8000b88 <__aeabi_d2iz>
 801d638:	4606      	mov	r6, r0
 801d63a:	f7e2 ff8b 	bl	8000554 <__aeabi_i2d>
 801d63e:	4602      	mov	r2, r0
 801d640:	460b      	mov	r3, r1
 801d642:	4640      	mov	r0, r8
 801d644:	4649      	mov	r1, r9
 801d646:	f7e2 fe37 	bl	80002b8 <__aeabi_dsub>
 801d64a:	3630      	adds	r6, #48	; 0x30
 801d64c:	f805 6b01 	strb.w	r6, [r5], #1
 801d650:	4652      	mov	r2, sl
 801d652:	465b      	mov	r3, fp
 801d654:	4680      	mov	r8, r0
 801d656:	4689      	mov	r9, r1
 801d658:	f7e3 fa58 	bl	8000b0c <__aeabi_dcmplt>
 801d65c:	2800      	cmp	r0, #0
 801d65e:	d163      	bne.n	801d728 <_dtoa_r+0x608>
 801d660:	4642      	mov	r2, r8
 801d662:	464b      	mov	r3, r9
 801d664:	4936      	ldr	r1, [pc, #216]	; (801d740 <_dtoa_r+0x620>)
 801d666:	2000      	movs	r0, #0
 801d668:	f7e2 fe26 	bl	80002b8 <__aeabi_dsub>
 801d66c:	4652      	mov	r2, sl
 801d66e:	465b      	mov	r3, fp
 801d670:	f7e3 fa4c 	bl	8000b0c <__aeabi_dcmplt>
 801d674:	2800      	cmp	r0, #0
 801d676:	f040 80b5 	bne.w	801d7e4 <_dtoa_r+0x6c4>
 801d67a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d67c:	429d      	cmp	r5, r3
 801d67e:	d081      	beq.n	801d584 <_dtoa_r+0x464>
 801d680:	4b30      	ldr	r3, [pc, #192]	; (801d744 <_dtoa_r+0x624>)
 801d682:	2200      	movs	r2, #0
 801d684:	4650      	mov	r0, sl
 801d686:	4659      	mov	r1, fp
 801d688:	f7e2 ffce 	bl	8000628 <__aeabi_dmul>
 801d68c:	4b2d      	ldr	r3, [pc, #180]	; (801d744 <_dtoa_r+0x624>)
 801d68e:	4682      	mov	sl, r0
 801d690:	468b      	mov	fp, r1
 801d692:	4640      	mov	r0, r8
 801d694:	4649      	mov	r1, r9
 801d696:	2200      	movs	r2, #0
 801d698:	f7e2 ffc6 	bl	8000628 <__aeabi_dmul>
 801d69c:	4680      	mov	r8, r0
 801d69e:	4689      	mov	r9, r1
 801d6a0:	e7c6      	b.n	801d630 <_dtoa_r+0x510>
 801d6a2:	4650      	mov	r0, sl
 801d6a4:	4659      	mov	r1, fp
 801d6a6:	f7e2 ffbf 	bl	8000628 <__aeabi_dmul>
 801d6aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d6ac:	9d01      	ldr	r5, [sp, #4]
 801d6ae:	930f      	str	r3, [sp, #60]	; 0x3c
 801d6b0:	4682      	mov	sl, r0
 801d6b2:	468b      	mov	fp, r1
 801d6b4:	4649      	mov	r1, r9
 801d6b6:	4640      	mov	r0, r8
 801d6b8:	f7e3 fa66 	bl	8000b88 <__aeabi_d2iz>
 801d6bc:	4606      	mov	r6, r0
 801d6be:	f7e2 ff49 	bl	8000554 <__aeabi_i2d>
 801d6c2:	3630      	adds	r6, #48	; 0x30
 801d6c4:	4602      	mov	r2, r0
 801d6c6:	460b      	mov	r3, r1
 801d6c8:	4640      	mov	r0, r8
 801d6ca:	4649      	mov	r1, r9
 801d6cc:	f7e2 fdf4 	bl	80002b8 <__aeabi_dsub>
 801d6d0:	f805 6b01 	strb.w	r6, [r5], #1
 801d6d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d6d6:	429d      	cmp	r5, r3
 801d6d8:	4680      	mov	r8, r0
 801d6da:	4689      	mov	r9, r1
 801d6dc:	f04f 0200 	mov.w	r2, #0
 801d6e0:	d124      	bne.n	801d72c <_dtoa_r+0x60c>
 801d6e2:	4b1b      	ldr	r3, [pc, #108]	; (801d750 <_dtoa_r+0x630>)
 801d6e4:	4650      	mov	r0, sl
 801d6e6:	4659      	mov	r1, fp
 801d6e8:	f7e2 fde8 	bl	80002bc <__adddf3>
 801d6ec:	4602      	mov	r2, r0
 801d6ee:	460b      	mov	r3, r1
 801d6f0:	4640      	mov	r0, r8
 801d6f2:	4649      	mov	r1, r9
 801d6f4:	f7e3 fa28 	bl	8000b48 <__aeabi_dcmpgt>
 801d6f8:	2800      	cmp	r0, #0
 801d6fa:	d173      	bne.n	801d7e4 <_dtoa_r+0x6c4>
 801d6fc:	4652      	mov	r2, sl
 801d6fe:	465b      	mov	r3, fp
 801d700:	4913      	ldr	r1, [pc, #76]	; (801d750 <_dtoa_r+0x630>)
 801d702:	2000      	movs	r0, #0
 801d704:	f7e2 fdd8 	bl	80002b8 <__aeabi_dsub>
 801d708:	4602      	mov	r2, r0
 801d70a:	460b      	mov	r3, r1
 801d70c:	4640      	mov	r0, r8
 801d70e:	4649      	mov	r1, r9
 801d710:	f7e3 f9fc 	bl	8000b0c <__aeabi_dcmplt>
 801d714:	2800      	cmp	r0, #0
 801d716:	f43f af35 	beq.w	801d584 <_dtoa_r+0x464>
 801d71a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801d71c:	1e6b      	subs	r3, r5, #1
 801d71e:	930f      	str	r3, [sp, #60]	; 0x3c
 801d720:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801d724:	2b30      	cmp	r3, #48	; 0x30
 801d726:	d0f8      	beq.n	801d71a <_dtoa_r+0x5fa>
 801d728:	9700      	str	r7, [sp, #0]
 801d72a:	e049      	b.n	801d7c0 <_dtoa_r+0x6a0>
 801d72c:	4b05      	ldr	r3, [pc, #20]	; (801d744 <_dtoa_r+0x624>)
 801d72e:	f7e2 ff7b 	bl	8000628 <__aeabi_dmul>
 801d732:	4680      	mov	r8, r0
 801d734:	4689      	mov	r9, r1
 801d736:	e7bd      	b.n	801d6b4 <_dtoa_r+0x594>
 801d738:	08021c90 	.word	0x08021c90
 801d73c:	08021c68 	.word	0x08021c68
 801d740:	3ff00000 	.word	0x3ff00000
 801d744:	40240000 	.word	0x40240000
 801d748:	401c0000 	.word	0x401c0000
 801d74c:	40140000 	.word	0x40140000
 801d750:	3fe00000 	.word	0x3fe00000
 801d754:	9d01      	ldr	r5, [sp, #4]
 801d756:	4656      	mov	r6, sl
 801d758:	465f      	mov	r7, fp
 801d75a:	4642      	mov	r2, r8
 801d75c:	464b      	mov	r3, r9
 801d75e:	4630      	mov	r0, r6
 801d760:	4639      	mov	r1, r7
 801d762:	f7e3 f88b 	bl	800087c <__aeabi_ddiv>
 801d766:	f7e3 fa0f 	bl	8000b88 <__aeabi_d2iz>
 801d76a:	4682      	mov	sl, r0
 801d76c:	f7e2 fef2 	bl	8000554 <__aeabi_i2d>
 801d770:	4642      	mov	r2, r8
 801d772:	464b      	mov	r3, r9
 801d774:	f7e2 ff58 	bl	8000628 <__aeabi_dmul>
 801d778:	4602      	mov	r2, r0
 801d77a:	460b      	mov	r3, r1
 801d77c:	4630      	mov	r0, r6
 801d77e:	4639      	mov	r1, r7
 801d780:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801d784:	f7e2 fd98 	bl	80002b8 <__aeabi_dsub>
 801d788:	f805 6b01 	strb.w	r6, [r5], #1
 801d78c:	9e01      	ldr	r6, [sp, #4]
 801d78e:	9f03      	ldr	r7, [sp, #12]
 801d790:	1bae      	subs	r6, r5, r6
 801d792:	42b7      	cmp	r7, r6
 801d794:	4602      	mov	r2, r0
 801d796:	460b      	mov	r3, r1
 801d798:	d135      	bne.n	801d806 <_dtoa_r+0x6e6>
 801d79a:	f7e2 fd8f 	bl	80002bc <__adddf3>
 801d79e:	4642      	mov	r2, r8
 801d7a0:	464b      	mov	r3, r9
 801d7a2:	4606      	mov	r6, r0
 801d7a4:	460f      	mov	r7, r1
 801d7a6:	f7e3 f9cf 	bl	8000b48 <__aeabi_dcmpgt>
 801d7aa:	b9d0      	cbnz	r0, 801d7e2 <_dtoa_r+0x6c2>
 801d7ac:	4642      	mov	r2, r8
 801d7ae:	464b      	mov	r3, r9
 801d7b0:	4630      	mov	r0, r6
 801d7b2:	4639      	mov	r1, r7
 801d7b4:	f7e3 f9a0 	bl	8000af8 <__aeabi_dcmpeq>
 801d7b8:	b110      	cbz	r0, 801d7c0 <_dtoa_r+0x6a0>
 801d7ba:	f01a 0f01 	tst.w	sl, #1
 801d7be:	d110      	bne.n	801d7e2 <_dtoa_r+0x6c2>
 801d7c0:	4620      	mov	r0, r4
 801d7c2:	ee18 1a10 	vmov	r1, s16
 801d7c6:	f001 f899 	bl	801e8fc <_Bfree>
 801d7ca:	2300      	movs	r3, #0
 801d7cc:	9800      	ldr	r0, [sp, #0]
 801d7ce:	702b      	strb	r3, [r5, #0]
 801d7d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d7d2:	3001      	adds	r0, #1
 801d7d4:	6018      	str	r0, [r3, #0]
 801d7d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d7d8:	2b00      	cmp	r3, #0
 801d7da:	f43f acf1 	beq.w	801d1c0 <_dtoa_r+0xa0>
 801d7de:	601d      	str	r5, [r3, #0]
 801d7e0:	e4ee      	b.n	801d1c0 <_dtoa_r+0xa0>
 801d7e2:	9f00      	ldr	r7, [sp, #0]
 801d7e4:	462b      	mov	r3, r5
 801d7e6:	461d      	mov	r5, r3
 801d7e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d7ec:	2a39      	cmp	r2, #57	; 0x39
 801d7ee:	d106      	bne.n	801d7fe <_dtoa_r+0x6de>
 801d7f0:	9a01      	ldr	r2, [sp, #4]
 801d7f2:	429a      	cmp	r2, r3
 801d7f4:	d1f7      	bne.n	801d7e6 <_dtoa_r+0x6c6>
 801d7f6:	9901      	ldr	r1, [sp, #4]
 801d7f8:	2230      	movs	r2, #48	; 0x30
 801d7fa:	3701      	adds	r7, #1
 801d7fc:	700a      	strb	r2, [r1, #0]
 801d7fe:	781a      	ldrb	r2, [r3, #0]
 801d800:	3201      	adds	r2, #1
 801d802:	701a      	strb	r2, [r3, #0]
 801d804:	e790      	b.n	801d728 <_dtoa_r+0x608>
 801d806:	4ba6      	ldr	r3, [pc, #664]	; (801daa0 <_dtoa_r+0x980>)
 801d808:	2200      	movs	r2, #0
 801d80a:	f7e2 ff0d 	bl	8000628 <__aeabi_dmul>
 801d80e:	2200      	movs	r2, #0
 801d810:	2300      	movs	r3, #0
 801d812:	4606      	mov	r6, r0
 801d814:	460f      	mov	r7, r1
 801d816:	f7e3 f96f 	bl	8000af8 <__aeabi_dcmpeq>
 801d81a:	2800      	cmp	r0, #0
 801d81c:	d09d      	beq.n	801d75a <_dtoa_r+0x63a>
 801d81e:	e7cf      	b.n	801d7c0 <_dtoa_r+0x6a0>
 801d820:	9a08      	ldr	r2, [sp, #32]
 801d822:	2a00      	cmp	r2, #0
 801d824:	f000 80d7 	beq.w	801d9d6 <_dtoa_r+0x8b6>
 801d828:	9a06      	ldr	r2, [sp, #24]
 801d82a:	2a01      	cmp	r2, #1
 801d82c:	f300 80ba 	bgt.w	801d9a4 <_dtoa_r+0x884>
 801d830:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d832:	2a00      	cmp	r2, #0
 801d834:	f000 80b2 	beq.w	801d99c <_dtoa_r+0x87c>
 801d838:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801d83c:	9e07      	ldr	r6, [sp, #28]
 801d83e:	9d04      	ldr	r5, [sp, #16]
 801d840:	9a04      	ldr	r2, [sp, #16]
 801d842:	441a      	add	r2, r3
 801d844:	9204      	str	r2, [sp, #16]
 801d846:	9a05      	ldr	r2, [sp, #20]
 801d848:	2101      	movs	r1, #1
 801d84a:	441a      	add	r2, r3
 801d84c:	4620      	mov	r0, r4
 801d84e:	9205      	str	r2, [sp, #20]
 801d850:	f001 f956 	bl	801eb00 <__i2b>
 801d854:	4607      	mov	r7, r0
 801d856:	2d00      	cmp	r5, #0
 801d858:	dd0c      	ble.n	801d874 <_dtoa_r+0x754>
 801d85a:	9b05      	ldr	r3, [sp, #20]
 801d85c:	2b00      	cmp	r3, #0
 801d85e:	dd09      	ble.n	801d874 <_dtoa_r+0x754>
 801d860:	42ab      	cmp	r3, r5
 801d862:	9a04      	ldr	r2, [sp, #16]
 801d864:	bfa8      	it	ge
 801d866:	462b      	movge	r3, r5
 801d868:	1ad2      	subs	r2, r2, r3
 801d86a:	9204      	str	r2, [sp, #16]
 801d86c:	9a05      	ldr	r2, [sp, #20]
 801d86e:	1aed      	subs	r5, r5, r3
 801d870:	1ad3      	subs	r3, r2, r3
 801d872:	9305      	str	r3, [sp, #20]
 801d874:	9b07      	ldr	r3, [sp, #28]
 801d876:	b31b      	cbz	r3, 801d8c0 <_dtoa_r+0x7a0>
 801d878:	9b08      	ldr	r3, [sp, #32]
 801d87a:	2b00      	cmp	r3, #0
 801d87c:	f000 80af 	beq.w	801d9de <_dtoa_r+0x8be>
 801d880:	2e00      	cmp	r6, #0
 801d882:	dd13      	ble.n	801d8ac <_dtoa_r+0x78c>
 801d884:	4639      	mov	r1, r7
 801d886:	4632      	mov	r2, r6
 801d888:	4620      	mov	r0, r4
 801d88a:	f001 f9f9 	bl	801ec80 <__pow5mult>
 801d88e:	ee18 2a10 	vmov	r2, s16
 801d892:	4601      	mov	r1, r0
 801d894:	4607      	mov	r7, r0
 801d896:	4620      	mov	r0, r4
 801d898:	f001 f948 	bl	801eb2c <__multiply>
 801d89c:	ee18 1a10 	vmov	r1, s16
 801d8a0:	4680      	mov	r8, r0
 801d8a2:	4620      	mov	r0, r4
 801d8a4:	f001 f82a 	bl	801e8fc <_Bfree>
 801d8a8:	ee08 8a10 	vmov	s16, r8
 801d8ac:	9b07      	ldr	r3, [sp, #28]
 801d8ae:	1b9a      	subs	r2, r3, r6
 801d8b0:	d006      	beq.n	801d8c0 <_dtoa_r+0x7a0>
 801d8b2:	ee18 1a10 	vmov	r1, s16
 801d8b6:	4620      	mov	r0, r4
 801d8b8:	f001 f9e2 	bl	801ec80 <__pow5mult>
 801d8bc:	ee08 0a10 	vmov	s16, r0
 801d8c0:	2101      	movs	r1, #1
 801d8c2:	4620      	mov	r0, r4
 801d8c4:	f001 f91c 	bl	801eb00 <__i2b>
 801d8c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d8ca:	2b00      	cmp	r3, #0
 801d8cc:	4606      	mov	r6, r0
 801d8ce:	f340 8088 	ble.w	801d9e2 <_dtoa_r+0x8c2>
 801d8d2:	461a      	mov	r2, r3
 801d8d4:	4601      	mov	r1, r0
 801d8d6:	4620      	mov	r0, r4
 801d8d8:	f001 f9d2 	bl	801ec80 <__pow5mult>
 801d8dc:	9b06      	ldr	r3, [sp, #24]
 801d8de:	2b01      	cmp	r3, #1
 801d8e0:	4606      	mov	r6, r0
 801d8e2:	f340 8081 	ble.w	801d9e8 <_dtoa_r+0x8c8>
 801d8e6:	f04f 0800 	mov.w	r8, #0
 801d8ea:	6933      	ldr	r3, [r6, #16]
 801d8ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801d8f0:	6918      	ldr	r0, [r3, #16]
 801d8f2:	f001 f8b5 	bl	801ea60 <__hi0bits>
 801d8f6:	f1c0 0020 	rsb	r0, r0, #32
 801d8fa:	9b05      	ldr	r3, [sp, #20]
 801d8fc:	4418      	add	r0, r3
 801d8fe:	f010 001f 	ands.w	r0, r0, #31
 801d902:	f000 8092 	beq.w	801da2a <_dtoa_r+0x90a>
 801d906:	f1c0 0320 	rsb	r3, r0, #32
 801d90a:	2b04      	cmp	r3, #4
 801d90c:	f340 808a 	ble.w	801da24 <_dtoa_r+0x904>
 801d910:	f1c0 001c 	rsb	r0, r0, #28
 801d914:	9b04      	ldr	r3, [sp, #16]
 801d916:	4403      	add	r3, r0
 801d918:	9304      	str	r3, [sp, #16]
 801d91a:	9b05      	ldr	r3, [sp, #20]
 801d91c:	4403      	add	r3, r0
 801d91e:	4405      	add	r5, r0
 801d920:	9305      	str	r3, [sp, #20]
 801d922:	9b04      	ldr	r3, [sp, #16]
 801d924:	2b00      	cmp	r3, #0
 801d926:	dd07      	ble.n	801d938 <_dtoa_r+0x818>
 801d928:	ee18 1a10 	vmov	r1, s16
 801d92c:	461a      	mov	r2, r3
 801d92e:	4620      	mov	r0, r4
 801d930:	f001 fa00 	bl	801ed34 <__lshift>
 801d934:	ee08 0a10 	vmov	s16, r0
 801d938:	9b05      	ldr	r3, [sp, #20]
 801d93a:	2b00      	cmp	r3, #0
 801d93c:	dd05      	ble.n	801d94a <_dtoa_r+0x82a>
 801d93e:	4631      	mov	r1, r6
 801d940:	461a      	mov	r2, r3
 801d942:	4620      	mov	r0, r4
 801d944:	f001 f9f6 	bl	801ed34 <__lshift>
 801d948:	4606      	mov	r6, r0
 801d94a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d94c:	2b00      	cmp	r3, #0
 801d94e:	d06e      	beq.n	801da2e <_dtoa_r+0x90e>
 801d950:	ee18 0a10 	vmov	r0, s16
 801d954:	4631      	mov	r1, r6
 801d956:	f001 fa5d 	bl	801ee14 <__mcmp>
 801d95a:	2800      	cmp	r0, #0
 801d95c:	da67      	bge.n	801da2e <_dtoa_r+0x90e>
 801d95e:	9b00      	ldr	r3, [sp, #0]
 801d960:	3b01      	subs	r3, #1
 801d962:	ee18 1a10 	vmov	r1, s16
 801d966:	9300      	str	r3, [sp, #0]
 801d968:	220a      	movs	r2, #10
 801d96a:	2300      	movs	r3, #0
 801d96c:	4620      	mov	r0, r4
 801d96e:	f000 ffe7 	bl	801e940 <__multadd>
 801d972:	9b08      	ldr	r3, [sp, #32]
 801d974:	ee08 0a10 	vmov	s16, r0
 801d978:	2b00      	cmp	r3, #0
 801d97a:	f000 81b1 	beq.w	801dce0 <_dtoa_r+0xbc0>
 801d97e:	2300      	movs	r3, #0
 801d980:	4639      	mov	r1, r7
 801d982:	220a      	movs	r2, #10
 801d984:	4620      	mov	r0, r4
 801d986:	f000 ffdb 	bl	801e940 <__multadd>
 801d98a:	9b02      	ldr	r3, [sp, #8]
 801d98c:	2b00      	cmp	r3, #0
 801d98e:	4607      	mov	r7, r0
 801d990:	f300 808e 	bgt.w	801dab0 <_dtoa_r+0x990>
 801d994:	9b06      	ldr	r3, [sp, #24]
 801d996:	2b02      	cmp	r3, #2
 801d998:	dc51      	bgt.n	801da3e <_dtoa_r+0x91e>
 801d99a:	e089      	b.n	801dab0 <_dtoa_r+0x990>
 801d99c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d99e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801d9a2:	e74b      	b.n	801d83c <_dtoa_r+0x71c>
 801d9a4:	9b03      	ldr	r3, [sp, #12]
 801d9a6:	1e5e      	subs	r6, r3, #1
 801d9a8:	9b07      	ldr	r3, [sp, #28]
 801d9aa:	42b3      	cmp	r3, r6
 801d9ac:	bfbf      	itttt	lt
 801d9ae:	9b07      	ldrlt	r3, [sp, #28]
 801d9b0:	9607      	strlt	r6, [sp, #28]
 801d9b2:	1af2      	sublt	r2, r6, r3
 801d9b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801d9b6:	bfb6      	itet	lt
 801d9b8:	189b      	addlt	r3, r3, r2
 801d9ba:	1b9e      	subge	r6, r3, r6
 801d9bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 801d9be:	9b03      	ldr	r3, [sp, #12]
 801d9c0:	bfb8      	it	lt
 801d9c2:	2600      	movlt	r6, #0
 801d9c4:	2b00      	cmp	r3, #0
 801d9c6:	bfb7      	itett	lt
 801d9c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801d9cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801d9d0:	1a9d      	sublt	r5, r3, r2
 801d9d2:	2300      	movlt	r3, #0
 801d9d4:	e734      	b.n	801d840 <_dtoa_r+0x720>
 801d9d6:	9e07      	ldr	r6, [sp, #28]
 801d9d8:	9d04      	ldr	r5, [sp, #16]
 801d9da:	9f08      	ldr	r7, [sp, #32]
 801d9dc:	e73b      	b.n	801d856 <_dtoa_r+0x736>
 801d9de:	9a07      	ldr	r2, [sp, #28]
 801d9e0:	e767      	b.n	801d8b2 <_dtoa_r+0x792>
 801d9e2:	9b06      	ldr	r3, [sp, #24]
 801d9e4:	2b01      	cmp	r3, #1
 801d9e6:	dc18      	bgt.n	801da1a <_dtoa_r+0x8fa>
 801d9e8:	f1ba 0f00 	cmp.w	sl, #0
 801d9ec:	d115      	bne.n	801da1a <_dtoa_r+0x8fa>
 801d9ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d9f2:	b993      	cbnz	r3, 801da1a <_dtoa_r+0x8fa>
 801d9f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801d9f8:	0d1b      	lsrs	r3, r3, #20
 801d9fa:	051b      	lsls	r3, r3, #20
 801d9fc:	b183      	cbz	r3, 801da20 <_dtoa_r+0x900>
 801d9fe:	9b04      	ldr	r3, [sp, #16]
 801da00:	3301      	adds	r3, #1
 801da02:	9304      	str	r3, [sp, #16]
 801da04:	9b05      	ldr	r3, [sp, #20]
 801da06:	3301      	adds	r3, #1
 801da08:	9305      	str	r3, [sp, #20]
 801da0a:	f04f 0801 	mov.w	r8, #1
 801da0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801da10:	2b00      	cmp	r3, #0
 801da12:	f47f af6a 	bne.w	801d8ea <_dtoa_r+0x7ca>
 801da16:	2001      	movs	r0, #1
 801da18:	e76f      	b.n	801d8fa <_dtoa_r+0x7da>
 801da1a:	f04f 0800 	mov.w	r8, #0
 801da1e:	e7f6      	b.n	801da0e <_dtoa_r+0x8ee>
 801da20:	4698      	mov	r8, r3
 801da22:	e7f4      	b.n	801da0e <_dtoa_r+0x8ee>
 801da24:	f43f af7d 	beq.w	801d922 <_dtoa_r+0x802>
 801da28:	4618      	mov	r0, r3
 801da2a:	301c      	adds	r0, #28
 801da2c:	e772      	b.n	801d914 <_dtoa_r+0x7f4>
 801da2e:	9b03      	ldr	r3, [sp, #12]
 801da30:	2b00      	cmp	r3, #0
 801da32:	dc37      	bgt.n	801daa4 <_dtoa_r+0x984>
 801da34:	9b06      	ldr	r3, [sp, #24]
 801da36:	2b02      	cmp	r3, #2
 801da38:	dd34      	ble.n	801daa4 <_dtoa_r+0x984>
 801da3a:	9b03      	ldr	r3, [sp, #12]
 801da3c:	9302      	str	r3, [sp, #8]
 801da3e:	9b02      	ldr	r3, [sp, #8]
 801da40:	b96b      	cbnz	r3, 801da5e <_dtoa_r+0x93e>
 801da42:	4631      	mov	r1, r6
 801da44:	2205      	movs	r2, #5
 801da46:	4620      	mov	r0, r4
 801da48:	f000 ff7a 	bl	801e940 <__multadd>
 801da4c:	4601      	mov	r1, r0
 801da4e:	4606      	mov	r6, r0
 801da50:	ee18 0a10 	vmov	r0, s16
 801da54:	f001 f9de 	bl	801ee14 <__mcmp>
 801da58:	2800      	cmp	r0, #0
 801da5a:	f73f adbb 	bgt.w	801d5d4 <_dtoa_r+0x4b4>
 801da5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da60:	9d01      	ldr	r5, [sp, #4]
 801da62:	43db      	mvns	r3, r3
 801da64:	9300      	str	r3, [sp, #0]
 801da66:	f04f 0800 	mov.w	r8, #0
 801da6a:	4631      	mov	r1, r6
 801da6c:	4620      	mov	r0, r4
 801da6e:	f000 ff45 	bl	801e8fc <_Bfree>
 801da72:	2f00      	cmp	r7, #0
 801da74:	f43f aea4 	beq.w	801d7c0 <_dtoa_r+0x6a0>
 801da78:	f1b8 0f00 	cmp.w	r8, #0
 801da7c:	d005      	beq.n	801da8a <_dtoa_r+0x96a>
 801da7e:	45b8      	cmp	r8, r7
 801da80:	d003      	beq.n	801da8a <_dtoa_r+0x96a>
 801da82:	4641      	mov	r1, r8
 801da84:	4620      	mov	r0, r4
 801da86:	f000 ff39 	bl	801e8fc <_Bfree>
 801da8a:	4639      	mov	r1, r7
 801da8c:	4620      	mov	r0, r4
 801da8e:	f000 ff35 	bl	801e8fc <_Bfree>
 801da92:	e695      	b.n	801d7c0 <_dtoa_r+0x6a0>
 801da94:	2600      	movs	r6, #0
 801da96:	4637      	mov	r7, r6
 801da98:	e7e1      	b.n	801da5e <_dtoa_r+0x93e>
 801da9a:	9700      	str	r7, [sp, #0]
 801da9c:	4637      	mov	r7, r6
 801da9e:	e599      	b.n	801d5d4 <_dtoa_r+0x4b4>
 801daa0:	40240000 	.word	0x40240000
 801daa4:	9b08      	ldr	r3, [sp, #32]
 801daa6:	2b00      	cmp	r3, #0
 801daa8:	f000 80ca 	beq.w	801dc40 <_dtoa_r+0xb20>
 801daac:	9b03      	ldr	r3, [sp, #12]
 801daae:	9302      	str	r3, [sp, #8]
 801dab0:	2d00      	cmp	r5, #0
 801dab2:	dd05      	ble.n	801dac0 <_dtoa_r+0x9a0>
 801dab4:	4639      	mov	r1, r7
 801dab6:	462a      	mov	r2, r5
 801dab8:	4620      	mov	r0, r4
 801daba:	f001 f93b 	bl	801ed34 <__lshift>
 801dabe:	4607      	mov	r7, r0
 801dac0:	f1b8 0f00 	cmp.w	r8, #0
 801dac4:	d05b      	beq.n	801db7e <_dtoa_r+0xa5e>
 801dac6:	6879      	ldr	r1, [r7, #4]
 801dac8:	4620      	mov	r0, r4
 801daca:	f000 fed7 	bl	801e87c <_Balloc>
 801dace:	4605      	mov	r5, r0
 801dad0:	b928      	cbnz	r0, 801dade <_dtoa_r+0x9be>
 801dad2:	4b87      	ldr	r3, [pc, #540]	; (801dcf0 <_dtoa_r+0xbd0>)
 801dad4:	4602      	mov	r2, r0
 801dad6:	f240 21ea 	movw	r1, #746	; 0x2ea
 801dada:	f7ff bb3b 	b.w	801d154 <_dtoa_r+0x34>
 801dade:	693a      	ldr	r2, [r7, #16]
 801dae0:	3202      	adds	r2, #2
 801dae2:	0092      	lsls	r2, r2, #2
 801dae4:	f107 010c 	add.w	r1, r7, #12
 801dae8:	300c      	adds	r0, #12
 801daea:	f7fd f9e5 	bl	801aeb8 <memcpy>
 801daee:	2201      	movs	r2, #1
 801daf0:	4629      	mov	r1, r5
 801daf2:	4620      	mov	r0, r4
 801daf4:	f001 f91e 	bl	801ed34 <__lshift>
 801daf8:	9b01      	ldr	r3, [sp, #4]
 801dafa:	f103 0901 	add.w	r9, r3, #1
 801dafe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801db02:	4413      	add	r3, r2
 801db04:	9305      	str	r3, [sp, #20]
 801db06:	f00a 0301 	and.w	r3, sl, #1
 801db0a:	46b8      	mov	r8, r7
 801db0c:	9304      	str	r3, [sp, #16]
 801db0e:	4607      	mov	r7, r0
 801db10:	4631      	mov	r1, r6
 801db12:	ee18 0a10 	vmov	r0, s16
 801db16:	f7ff fa75 	bl	801d004 <quorem>
 801db1a:	4641      	mov	r1, r8
 801db1c:	9002      	str	r0, [sp, #8]
 801db1e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801db22:	ee18 0a10 	vmov	r0, s16
 801db26:	f001 f975 	bl	801ee14 <__mcmp>
 801db2a:	463a      	mov	r2, r7
 801db2c:	9003      	str	r0, [sp, #12]
 801db2e:	4631      	mov	r1, r6
 801db30:	4620      	mov	r0, r4
 801db32:	f001 f98b 	bl	801ee4c <__mdiff>
 801db36:	68c2      	ldr	r2, [r0, #12]
 801db38:	f109 3bff 	add.w	fp, r9, #4294967295
 801db3c:	4605      	mov	r5, r0
 801db3e:	bb02      	cbnz	r2, 801db82 <_dtoa_r+0xa62>
 801db40:	4601      	mov	r1, r0
 801db42:	ee18 0a10 	vmov	r0, s16
 801db46:	f001 f965 	bl	801ee14 <__mcmp>
 801db4a:	4602      	mov	r2, r0
 801db4c:	4629      	mov	r1, r5
 801db4e:	4620      	mov	r0, r4
 801db50:	9207      	str	r2, [sp, #28]
 801db52:	f000 fed3 	bl	801e8fc <_Bfree>
 801db56:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801db5a:	ea43 0102 	orr.w	r1, r3, r2
 801db5e:	9b04      	ldr	r3, [sp, #16]
 801db60:	430b      	orrs	r3, r1
 801db62:	464d      	mov	r5, r9
 801db64:	d10f      	bne.n	801db86 <_dtoa_r+0xa66>
 801db66:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801db6a:	d02a      	beq.n	801dbc2 <_dtoa_r+0xaa2>
 801db6c:	9b03      	ldr	r3, [sp, #12]
 801db6e:	2b00      	cmp	r3, #0
 801db70:	dd02      	ble.n	801db78 <_dtoa_r+0xa58>
 801db72:	9b02      	ldr	r3, [sp, #8]
 801db74:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801db78:	f88b a000 	strb.w	sl, [fp]
 801db7c:	e775      	b.n	801da6a <_dtoa_r+0x94a>
 801db7e:	4638      	mov	r0, r7
 801db80:	e7ba      	b.n	801daf8 <_dtoa_r+0x9d8>
 801db82:	2201      	movs	r2, #1
 801db84:	e7e2      	b.n	801db4c <_dtoa_r+0xa2c>
 801db86:	9b03      	ldr	r3, [sp, #12]
 801db88:	2b00      	cmp	r3, #0
 801db8a:	db04      	blt.n	801db96 <_dtoa_r+0xa76>
 801db8c:	9906      	ldr	r1, [sp, #24]
 801db8e:	430b      	orrs	r3, r1
 801db90:	9904      	ldr	r1, [sp, #16]
 801db92:	430b      	orrs	r3, r1
 801db94:	d122      	bne.n	801dbdc <_dtoa_r+0xabc>
 801db96:	2a00      	cmp	r2, #0
 801db98:	ddee      	ble.n	801db78 <_dtoa_r+0xa58>
 801db9a:	ee18 1a10 	vmov	r1, s16
 801db9e:	2201      	movs	r2, #1
 801dba0:	4620      	mov	r0, r4
 801dba2:	f001 f8c7 	bl	801ed34 <__lshift>
 801dba6:	4631      	mov	r1, r6
 801dba8:	ee08 0a10 	vmov	s16, r0
 801dbac:	f001 f932 	bl	801ee14 <__mcmp>
 801dbb0:	2800      	cmp	r0, #0
 801dbb2:	dc03      	bgt.n	801dbbc <_dtoa_r+0xa9c>
 801dbb4:	d1e0      	bne.n	801db78 <_dtoa_r+0xa58>
 801dbb6:	f01a 0f01 	tst.w	sl, #1
 801dbba:	d0dd      	beq.n	801db78 <_dtoa_r+0xa58>
 801dbbc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801dbc0:	d1d7      	bne.n	801db72 <_dtoa_r+0xa52>
 801dbc2:	2339      	movs	r3, #57	; 0x39
 801dbc4:	f88b 3000 	strb.w	r3, [fp]
 801dbc8:	462b      	mov	r3, r5
 801dbca:	461d      	mov	r5, r3
 801dbcc:	3b01      	subs	r3, #1
 801dbce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801dbd2:	2a39      	cmp	r2, #57	; 0x39
 801dbd4:	d071      	beq.n	801dcba <_dtoa_r+0xb9a>
 801dbd6:	3201      	adds	r2, #1
 801dbd8:	701a      	strb	r2, [r3, #0]
 801dbda:	e746      	b.n	801da6a <_dtoa_r+0x94a>
 801dbdc:	2a00      	cmp	r2, #0
 801dbde:	dd07      	ble.n	801dbf0 <_dtoa_r+0xad0>
 801dbe0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801dbe4:	d0ed      	beq.n	801dbc2 <_dtoa_r+0xaa2>
 801dbe6:	f10a 0301 	add.w	r3, sl, #1
 801dbea:	f88b 3000 	strb.w	r3, [fp]
 801dbee:	e73c      	b.n	801da6a <_dtoa_r+0x94a>
 801dbf0:	9b05      	ldr	r3, [sp, #20]
 801dbf2:	f809 ac01 	strb.w	sl, [r9, #-1]
 801dbf6:	4599      	cmp	r9, r3
 801dbf8:	d047      	beq.n	801dc8a <_dtoa_r+0xb6a>
 801dbfa:	ee18 1a10 	vmov	r1, s16
 801dbfe:	2300      	movs	r3, #0
 801dc00:	220a      	movs	r2, #10
 801dc02:	4620      	mov	r0, r4
 801dc04:	f000 fe9c 	bl	801e940 <__multadd>
 801dc08:	45b8      	cmp	r8, r7
 801dc0a:	ee08 0a10 	vmov	s16, r0
 801dc0e:	f04f 0300 	mov.w	r3, #0
 801dc12:	f04f 020a 	mov.w	r2, #10
 801dc16:	4641      	mov	r1, r8
 801dc18:	4620      	mov	r0, r4
 801dc1a:	d106      	bne.n	801dc2a <_dtoa_r+0xb0a>
 801dc1c:	f000 fe90 	bl	801e940 <__multadd>
 801dc20:	4680      	mov	r8, r0
 801dc22:	4607      	mov	r7, r0
 801dc24:	f109 0901 	add.w	r9, r9, #1
 801dc28:	e772      	b.n	801db10 <_dtoa_r+0x9f0>
 801dc2a:	f000 fe89 	bl	801e940 <__multadd>
 801dc2e:	4639      	mov	r1, r7
 801dc30:	4680      	mov	r8, r0
 801dc32:	2300      	movs	r3, #0
 801dc34:	220a      	movs	r2, #10
 801dc36:	4620      	mov	r0, r4
 801dc38:	f000 fe82 	bl	801e940 <__multadd>
 801dc3c:	4607      	mov	r7, r0
 801dc3e:	e7f1      	b.n	801dc24 <_dtoa_r+0xb04>
 801dc40:	9b03      	ldr	r3, [sp, #12]
 801dc42:	9302      	str	r3, [sp, #8]
 801dc44:	9d01      	ldr	r5, [sp, #4]
 801dc46:	ee18 0a10 	vmov	r0, s16
 801dc4a:	4631      	mov	r1, r6
 801dc4c:	f7ff f9da 	bl	801d004 <quorem>
 801dc50:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801dc54:	9b01      	ldr	r3, [sp, #4]
 801dc56:	f805 ab01 	strb.w	sl, [r5], #1
 801dc5a:	1aea      	subs	r2, r5, r3
 801dc5c:	9b02      	ldr	r3, [sp, #8]
 801dc5e:	4293      	cmp	r3, r2
 801dc60:	dd09      	ble.n	801dc76 <_dtoa_r+0xb56>
 801dc62:	ee18 1a10 	vmov	r1, s16
 801dc66:	2300      	movs	r3, #0
 801dc68:	220a      	movs	r2, #10
 801dc6a:	4620      	mov	r0, r4
 801dc6c:	f000 fe68 	bl	801e940 <__multadd>
 801dc70:	ee08 0a10 	vmov	s16, r0
 801dc74:	e7e7      	b.n	801dc46 <_dtoa_r+0xb26>
 801dc76:	9b02      	ldr	r3, [sp, #8]
 801dc78:	2b00      	cmp	r3, #0
 801dc7a:	bfc8      	it	gt
 801dc7c:	461d      	movgt	r5, r3
 801dc7e:	9b01      	ldr	r3, [sp, #4]
 801dc80:	bfd8      	it	le
 801dc82:	2501      	movle	r5, #1
 801dc84:	441d      	add	r5, r3
 801dc86:	f04f 0800 	mov.w	r8, #0
 801dc8a:	ee18 1a10 	vmov	r1, s16
 801dc8e:	2201      	movs	r2, #1
 801dc90:	4620      	mov	r0, r4
 801dc92:	f001 f84f 	bl	801ed34 <__lshift>
 801dc96:	4631      	mov	r1, r6
 801dc98:	ee08 0a10 	vmov	s16, r0
 801dc9c:	f001 f8ba 	bl	801ee14 <__mcmp>
 801dca0:	2800      	cmp	r0, #0
 801dca2:	dc91      	bgt.n	801dbc8 <_dtoa_r+0xaa8>
 801dca4:	d102      	bne.n	801dcac <_dtoa_r+0xb8c>
 801dca6:	f01a 0f01 	tst.w	sl, #1
 801dcaa:	d18d      	bne.n	801dbc8 <_dtoa_r+0xaa8>
 801dcac:	462b      	mov	r3, r5
 801dcae:	461d      	mov	r5, r3
 801dcb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801dcb4:	2a30      	cmp	r2, #48	; 0x30
 801dcb6:	d0fa      	beq.n	801dcae <_dtoa_r+0xb8e>
 801dcb8:	e6d7      	b.n	801da6a <_dtoa_r+0x94a>
 801dcba:	9a01      	ldr	r2, [sp, #4]
 801dcbc:	429a      	cmp	r2, r3
 801dcbe:	d184      	bne.n	801dbca <_dtoa_r+0xaaa>
 801dcc0:	9b00      	ldr	r3, [sp, #0]
 801dcc2:	3301      	adds	r3, #1
 801dcc4:	9300      	str	r3, [sp, #0]
 801dcc6:	2331      	movs	r3, #49	; 0x31
 801dcc8:	7013      	strb	r3, [r2, #0]
 801dcca:	e6ce      	b.n	801da6a <_dtoa_r+0x94a>
 801dccc:	4b09      	ldr	r3, [pc, #36]	; (801dcf4 <_dtoa_r+0xbd4>)
 801dcce:	f7ff ba95 	b.w	801d1fc <_dtoa_r+0xdc>
 801dcd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801dcd4:	2b00      	cmp	r3, #0
 801dcd6:	f47f aa6e 	bne.w	801d1b6 <_dtoa_r+0x96>
 801dcda:	4b07      	ldr	r3, [pc, #28]	; (801dcf8 <_dtoa_r+0xbd8>)
 801dcdc:	f7ff ba8e 	b.w	801d1fc <_dtoa_r+0xdc>
 801dce0:	9b02      	ldr	r3, [sp, #8]
 801dce2:	2b00      	cmp	r3, #0
 801dce4:	dcae      	bgt.n	801dc44 <_dtoa_r+0xb24>
 801dce6:	9b06      	ldr	r3, [sp, #24]
 801dce8:	2b02      	cmp	r3, #2
 801dcea:	f73f aea8 	bgt.w	801da3e <_dtoa_r+0x91e>
 801dcee:	e7a9      	b.n	801dc44 <_dtoa_r+0xb24>
 801dcf0:	08021b19 	.word	0x08021b19
 801dcf4:	08021884 	.word	0x08021884
 801dcf8:	08021ab1 	.word	0x08021ab1

0801dcfc <__sflush_r>:
 801dcfc:	898a      	ldrh	r2, [r1, #12]
 801dcfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dd02:	4605      	mov	r5, r0
 801dd04:	0710      	lsls	r0, r2, #28
 801dd06:	460c      	mov	r4, r1
 801dd08:	d458      	bmi.n	801ddbc <__sflush_r+0xc0>
 801dd0a:	684b      	ldr	r3, [r1, #4]
 801dd0c:	2b00      	cmp	r3, #0
 801dd0e:	dc05      	bgt.n	801dd1c <__sflush_r+0x20>
 801dd10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801dd12:	2b00      	cmp	r3, #0
 801dd14:	dc02      	bgt.n	801dd1c <__sflush_r+0x20>
 801dd16:	2000      	movs	r0, #0
 801dd18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dd1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dd1e:	2e00      	cmp	r6, #0
 801dd20:	d0f9      	beq.n	801dd16 <__sflush_r+0x1a>
 801dd22:	2300      	movs	r3, #0
 801dd24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801dd28:	682f      	ldr	r7, [r5, #0]
 801dd2a:	602b      	str	r3, [r5, #0]
 801dd2c:	d032      	beq.n	801dd94 <__sflush_r+0x98>
 801dd2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801dd30:	89a3      	ldrh	r3, [r4, #12]
 801dd32:	075a      	lsls	r2, r3, #29
 801dd34:	d505      	bpl.n	801dd42 <__sflush_r+0x46>
 801dd36:	6863      	ldr	r3, [r4, #4]
 801dd38:	1ac0      	subs	r0, r0, r3
 801dd3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801dd3c:	b10b      	cbz	r3, 801dd42 <__sflush_r+0x46>
 801dd3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801dd40:	1ac0      	subs	r0, r0, r3
 801dd42:	2300      	movs	r3, #0
 801dd44:	4602      	mov	r2, r0
 801dd46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dd48:	6a21      	ldr	r1, [r4, #32]
 801dd4a:	4628      	mov	r0, r5
 801dd4c:	47b0      	blx	r6
 801dd4e:	1c43      	adds	r3, r0, #1
 801dd50:	89a3      	ldrh	r3, [r4, #12]
 801dd52:	d106      	bne.n	801dd62 <__sflush_r+0x66>
 801dd54:	6829      	ldr	r1, [r5, #0]
 801dd56:	291d      	cmp	r1, #29
 801dd58:	d82c      	bhi.n	801ddb4 <__sflush_r+0xb8>
 801dd5a:	4a2a      	ldr	r2, [pc, #168]	; (801de04 <__sflush_r+0x108>)
 801dd5c:	40ca      	lsrs	r2, r1
 801dd5e:	07d6      	lsls	r6, r2, #31
 801dd60:	d528      	bpl.n	801ddb4 <__sflush_r+0xb8>
 801dd62:	2200      	movs	r2, #0
 801dd64:	6062      	str	r2, [r4, #4]
 801dd66:	04d9      	lsls	r1, r3, #19
 801dd68:	6922      	ldr	r2, [r4, #16]
 801dd6a:	6022      	str	r2, [r4, #0]
 801dd6c:	d504      	bpl.n	801dd78 <__sflush_r+0x7c>
 801dd6e:	1c42      	adds	r2, r0, #1
 801dd70:	d101      	bne.n	801dd76 <__sflush_r+0x7a>
 801dd72:	682b      	ldr	r3, [r5, #0]
 801dd74:	b903      	cbnz	r3, 801dd78 <__sflush_r+0x7c>
 801dd76:	6560      	str	r0, [r4, #84]	; 0x54
 801dd78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dd7a:	602f      	str	r7, [r5, #0]
 801dd7c:	2900      	cmp	r1, #0
 801dd7e:	d0ca      	beq.n	801dd16 <__sflush_r+0x1a>
 801dd80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dd84:	4299      	cmp	r1, r3
 801dd86:	d002      	beq.n	801dd8e <__sflush_r+0x92>
 801dd88:	4628      	mov	r0, r5
 801dd8a:	f7fd f8c5 	bl	801af18 <_free_r>
 801dd8e:	2000      	movs	r0, #0
 801dd90:	6360      	str	r0, [r4, #52]	; 0x34
 801dd92:	e7c1      	b.n	801dd18 <__sflush_r+0x1c>
 801dd94:	6a21      	ldr	r1, [r4, #32]
 801dd96:	2301      	movs	r3, #1
 801dd98:	4628      	mov	r0, r5
 801dd9a:	47b0      	blx	r6
 801dd9c:	1c41      	adds	r1, r0, #1
 801dd9e:	d1c7      	bne.n	801dd30 <__sflush_r+0x34>
 801dda0:	682b      	ldr	r3, [r5, #0]
 801dda2:	2b00      	cmp	r3, #0
 801dda4:	d0c4      	beq.n	801dd30 <__sflush_r+0x34>
 801dda6:	2b1d      	cmp	r3, #29
 801dda8:	d001      	beq.n	801ddae <__sflush_r+0xb2>
 801ddaa:	2b16      	cmp	r3, #22
 801ddac:	d101      	bne.n	801ddb2 <__sflush_r+0xb6>
 801ddae:	602f      	str	r7, [r5, #0]
 801ddb0:	e7b1      	b.n	801dd16 <__sflush_r+0x1a>
 801ddb2:	89a3      	ldrh	r3, [r4, #12]
 801ddb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ddb8:	81a3      	strh	r3, [r4, #12]
 801ddba:	e7ad      	b.n	801dd18 <__sflush_r+0x1c>
 801ddbc:	690f      	ldr	r7, [r1, #16]
 801ddbe:	2f00      	cmp	r7, #0
 801ddc0:	d0a9      	beq.n	801dd16 <__sflush_r+0x1a>
 801ddc2:	0793      	lsls	r3, r2, #30
 801ddc4:	680e      	ldr	r6, [r1, #0]
 801ddc6:	bf08      	it	eq
 801ddc8:	694b      	ldreq	r3, [r1, #20]
 801ddca:	600f      	str	r7, [r1, #0]
 801ddcc:	bf18      	it	ne
 801ddce:	2300      	movne	r3, #0
 801ddd0:	eba6 0807 	sub.w	r8, r6, r7
 801ddd4:	608b      	str	r3, [r1, #8]
 801ddd6:	f1b8 0f00 	cmp.w	r8, #0
 801ddda:	dd9c      	ble.n	801dd16 <__sflush_r+0x1a>
 801dddc:	6a21      	ldr	r1, [r4, #32]
 801ddde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801dde0:	4643      	mov	r3, r8
 801dde2:	463a      	mov	r2, r7
 801dde4:	4628      	mov	r0, r5
 801dde6:	47b0      	blx	r6
 801dde8:	2800      	cmp	r0, #0
 801ddea:	dc06      	bgt.n	801ddfa <__sflush_r+0xfe>
 801ddec:	89a3      	ldrh	r3, [r4, #12]
 801ddee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ddf2:	81a3      	strh	r3, [r4, #12]
 801ddf4:	f04f 30ff 	mov.w	r0, #4294967295
 801ddf8:	e78e      	b.n	801dd18 <__sflush_r+0x1c>
 801ddfa:	4407      	add	r7, r0
 801ddfc:	eba8 0800 	sub.w	r8, r8, r0
 801de00:	e7e9      	b.n	801ddd6 <__sflush_r+0xda>
 801de02:	bf00      	nop
 801de04:	20400001 	.word	0x20400001

0801de08 <_fflush_r>:
 801de08:	b538      	push	{r3, r4, r5, lr}
 801de0a:	690b      	ldr	r3, [r1, #16]
 801de0c:	4605      	mov	r5, r0
 801de0e:	460c      	mov	r4, r1
 801de10:	b913      	cbnz	r3, 801de18 <_fflush_r+0x10>
 801de12:	2500      	movs	r5, #0
 801de14:	4628      	mov	r0, r5
 801de16:	bd38      	pop	{r3, r4, r5, pc}
 801de18:	b118      	cbz	r0, 801de22 <_fflush_r+0x1a>
 801de1a:	6983      	ldr	r3, [r0, #24]
 801de1c:	b90b      	cbnz	r3, 801de22 <_fflush_r+0x1a>
 801de1e:	f000 f887 	bl	801df30 <__sinit>
 801de22:	4b14      	ldr	r3, [pc, #80]	; (801de74 <_fflush_r+0x6c>)
 801de24:	429c      	cmp	r4, r3
 801de26:	d11b      	bne.n	801de60 <_fflush_r+0x58>
 801de28:	686c      	ldr	r4, [r5, #4]
 801de2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801de2e:	2b00      	cmp	r3, #0
 801de30:	d0ef      	beq.n	801de12 <_fflush_r+0xa>
 801de32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801de34:	07d0      	lsls	r0, r2, #31
 801de36:	d404      	bmi.n	801de42 <_fflush_r+0x3a>
 801de38:	0599      	lsls	r1, r3, #22
 801de3a:	d402      	bmi.n	801de42 <_fflush_r+0x3a>
 801de3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801de3e:	f7fd f828 	bl	801ae92 <__retarget_lock_acquire_recursive>
 801de42:	4628      	mov	r0, r5
 801de44:	4621      	mov	r1, r4
 801de46:	f7ff ff59 	bl	801dcfc <__sflush_r>
 801de4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801de4c:	07da      	lsls	r2, r3, #31
 801de4e:	4605      	mov	r5, r0
 801de50:	d4e0      	bmi.n	801de14 <_fflush_r+0xc>
 801de52:	89a3      	ldrh	r3, [r4, #12]
 801de54:	059b      	lsls	r3, r3, #22
 801de56:	d4dd      	bmi.n	801de14 <_fflush_r+0xc>
 801de58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801de5a:	f7fd f81b 	bl	801ae94 <__retarget_lock_release_recursive>
 801de5e:	e7d9      	b.n	801de14 <_fflush_r+0xc>
 801de60:	4b05      	ldr	r3, [pc, #20]	; (801de78 <_fflush_r+0x70>)
 801de62:	429c      	cmp	r4, r3
 801de64:	d101      	bne.n	801de6a <_fflush_r+0x62>
 801de66:	68ac      	ldr	r4, [r5, #8]
 801de68:	e7df      	b.n	801de2a <_fflush_r+0x22>
 801de6a:	4b04      	ldr	r3, [pc, #16]	; (801de7c <_fflush_r+0x74>)
 801de6c:	429c      	cmp	r4, r3
 801de6e:	bf08      	it	eq
 801de70:	68ec      	ldreq	r4, [r5, #12]
 801de72:	e7da      	b.n	801de2a <_fflush_r+0x22>
 801de74:	08021b4c 	.word	0x08021b4c
 801de78:	08021b6c 	.word	0x08021b6c
 801de7c:	08021b2c 	.word	0x08021b2c

0801de80 <std>:
 801de80:	2300      	movs	r3, #0
 801de82:	b510      	push	{r4, lr}
 801de84:	4604      	mov	r4, r0
 801de86:	e9c0 3300 	strd	r3, r3, [r0]
 801de8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801de8e:	6083      	str	r3, [r0, #8]
 801de90:	8181      	strh	r1, [r0, #12]
 801de92:	6643      	str	r3, [r0, #100]	; 0x64
 801de94:	81c2      	strh	r2, [r0, #14]
 801de96:	6183      	str	r3, [r0, #24]
 801de98:	4619      	mov	r1, r3
 801de9a:	2208      	movs	r2, #8
 801de9c:	305c      	adds	r0, #92	; 0x5c
 801de9e:	f7fd f833 	bl	801af08 <memset>
 801dea2:	4b05      	ldr	r3, [pc, #20]	; (801deb8 <std+0x38>)
 801dea4:	6263      	str	r3, [r4, #36]	; 0x24
 801dea6:	4b05      	ldr	r3, [pc, #20]	; (801debc <std+0x3c>)
 801dea8:	62a3      	str	r3, [r4, #40]	; 0x28
 801deaa:	4b05      	ldr	r3, [pc, #20]	; (801dec0 <std+0x40>)
 801deac:	62e3      	str	r3, [r4, #44]	; 0x2c
 801deae:	4b05      	ldr	r3, [pc, #20]	; (801dec4 <std+0x44>)
 801deb0:	6224      	str	r4, [r4, #32]
 801deb2:	6323      	str	r3, [r4, #48]	; 0x30
 801deb4:	bd10      	pop	{r4, pc}
 801deb6:	bf00      	nop
 801deb8:	0801f7a9 	.word	0x0801f7a9
 801debc:	0801f7cb 	.word	0x0801f7cb
 801dec0:	0801f803 	.word	0x0801f803
 801dec4:	0801f827 	.word	0x0801f827

0801dec8 <_cleanup_r>:
 801dec8:	4901      	ldr	r1, [pc, #4]	; (801ded0 <_cleanup_r+0x8>)
 801deca:	f000 b8c1 	b.w	801e050 <_fwalk_reent>
 801dece:	bf00      	nop
 801ded0:	0801de09 	.word	0x0801de09

0801ded4 <__sfmoreglue>:
 801ded4:	b570      	push	{r4, r5, r6, lr}
 801ded6:	2268      	movs	r2, #104	; 0x68
 801ded8:	1e4d      	subs	r5, r1, #1
 801deda:	4355      	muls	r5, r2
 801dedc:	460e      	mov	r6, r1
 801dede:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801dee2:	f7fd f885 	bl	801aff0 <_malloc_r>
 801dee6:	4604      	mov	r4, r0
 801dee8:	b140      	cbz	r0, 801defc <__sfmoreglue+0x28>
 801deea:	2100      	movs	r1, #0
 801deec:	e9c0 1600 	strd	r1, r6, [r0]
 801def0:	300c      	adds	r0, #12
 801def2:	60a0      	str	r0, [r4, #8]
 801def4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801def8:	f7fd f806 	bl	801af08 <memset>
 801defc:	4620      	mov	r0, r4
 801defe:	bd70      	pop	{r4, r5, r6, pc}

0801df00 <__sfp_lock_acquire>:
 801df00:	4801      	ldr	r0, [pc, #4]	; (801df08 <__sfp_lock_acquire+0x8>)
 801df02:	f7fc bfc6 	b.w	801ae92 <__retarget_lock_acquire_recursive>
 801df06:	bf00      	nop
 801df08:	20003609 	.word	0x20003609

0801df0c <__sfp_lock_release>:
 801df0c:	4801      	ldr	r0, [pc, #4]	; (801df14 <__sfp_lock_release+0x8>)
 801df0e:	f7fc bfc1 	b.w	801ae94 <__retarget_lock_release_recursive>
 801df12:	bf00      	nop
 801df14:	20003609 	.word	0x20003609

0801df18 <__sinit_lock_acquire>:
 801df18:	4801      	ldr	r0, [pc, #4]	; (801df20 <__sinit_lock_acquire+0x8>)
 801df1a:	f7fc bfba 	b.w	801ae92 <__retarget_lock_acquire_recursive>
 801df1e:	bf00      	nop
 801df20:	2000360a 	.word	0x2000360a

0801df24 <__sinit_lock_release>:
 801df24:	4801      	ldr	r0, [pc, #4]	; (801df2c <__sinit_lock_release+0x8>)
 801df26:	f7fc bfb5 	b.w	801ae94 <__retarget_lock_release_recursive>
 801df2a:	bf00      	nop
 801df2c:	2000360a 	.word	0x2000360a

0801df30 <__sinit>:
 801df30:	b510      	push	{r4, lr}
 801df32:	4604      	mov	r4, r0
 801df34:	f7ff fff0 	bl	801df18 <__sinit_lock_acquire>
 801df38:	69a3      	ldr	r3, [r4, #24]
 801df3a:	b11b      	cbz	r3, 801df44 <__sinit+0x14>
 801df3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801df40:	f7ff bff0 	b.w	801df24 <__sinit_lock_release>
 801df44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801df48:	6523      	str	r3, [r4, #80]	; 0x50
 801df4a:	4b13      	ldr	r3, [pc, #76]	; (801df98 <__sinit+0x68>)
 801df4c:	4a13      	ldr	r2, [pc, #76]	; (801df9c <__sinit+0x6c>)
 801df4e:	681b      	ldr	r3, [r3, #0]
 801df50:	62a2      	str	r2, [r4, #40]	; 0x28
 801df52:	42a3      	cmp	r3, r4
 801df54:	bf04      	itt	eq
 801df56:	2301      	moveq	r3, #1
 801df58:	61a3      	streq	r3, [r4, #24]
 801df5a:	4620      	mov	r0, r4
 801df5c:	f000 f820 	bl	801dfa0 <__sfp>
 801df60:	6060      	str	r0, [r4, #4]
 801df62:	4620      	mov	r0, r4
 801df64:	f000 f81c 	bl	801dfa0 <__sfp>
 801df68:	60a0      	str	r0, [r4, #8]
 801df6a:	4620      	mov	r0, r4
 801df6c:	f000 f818 	bl	801dfa0 <__sfp>
 801df70:	2200      	movs	r2, #0
 801df72:	60e0      	str	r0, [r4, #12]
 801df74:	2104      	movs	r1, #4
 801df76:	6860      	ldr	r0, [r4, #4]
 801df78:	f7ff ff82 	bl	801de80 <std>
 801df7c:	68a0      	ldr	r0, [r4, #8]
 801df7e:	2201      	movs	r2, #1
 801df80:	2109      	movs	r1, #9
 801df82:	f7ff ff7d 	bl	801de80 <std>
 801df86:	68e0      	ldr	r0, [r4, #12]
 801df88:	2202      	movs	r2, #2
 801df8a:	2112      	movs	r1, #18
 801df8c:	f7ff ff78 	bl	801de80 <std>
 801df90:	2301      	movs	r3, #1
 801df92:	61a3      	str	r3, [r4, #24]
 801df94:	e7d2      	b.n	801df3c <__sinit+0xc>
 801df96:	bf00      	nop
 801df98:	08021870 	.word	0x08021870
 801df9c:	0801dec9 	.word	0x0801dec9

0801dfa0 <__sfp>:
 801dfa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dfa2:	4607      	mov	r7, r0
 801dfa4:	f7ff ffac 	bl	801df00 <__sfp_lock_acquire>
 801dfa8:	4b1e      	ldr	r3, [pc, #120]	; (801e024 <__sfp+0x84>)
 801dfaa:	681e      	ldr	r6, [r3, #0]
 801dfac:	69b3      	ldr	r3, [r6, #24]
 801dfae:	b913      	cbnz	r3, 801dfb6 <__sfp+0x16>
 801dfb0:	4630      	mov	r0, r6
 801dfb2:	f7ff ffbd 	bl	801df30 <__sinit>
 801dfb6:	3648      	adds	r6, #72	; 0x48
 801dfb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801dfbc:	3b01      	subs	r3, #1
 801dfbe:	d503      	bpl.n	801dfc8 <__sfp+0x28>
 801dfc0:	6833      	ldr	r3, [r6, #0]
 801dfc2:	b30b      	cbz	r3, 801e008 <__sfp+0x68>
 801dfc4:	6836      	ldr	r6, [r6, #0]
 801dfc6:	e7f7      	b.n	801dfb8 <__sfp+0x18>
 801dfc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801dfcc:	b9d5      	cbnz	r5, 801e004 <__sfp+0x64>
 801dfce:	4b16      	ldr	r3, [pc, #88]	; (801e028 <__sfp+0x88>)
 801dfd0:	60e3      	str	r3, [r4, #12]
 801dfd2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801dfd6:	6665      	str	r5, [r4, #100]	; 0x64
 801dfd8:	f7fc ff5a 	bl	801ae90 <__retarget_lock_init_recursive>
 801dfdc:	f7ff ff96 	bl	801df0c <__sfp_lock_release>
 801dfe0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801dfe4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801dfe8:	6025      	str	r5, [r4, #0]
 801dfea:	61a5      	str	r5, [r4, #24]
 801dfec:	2208      	movs	r2, #8
 801dfee:	4629      	mov	r1, r5
 801dff0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801dff4:	f7fc ff88 	bl	801af08 <memset>
 801dff8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801dffc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e000:	4620      	mov	r0, r4
 801e002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e004:	3468      	adds	r4, #104	; 0x68
 801e006:	e7d9      	b.n	801dfbc <__sfp+0x1c>
 801e008:	2104      	movs	r1, #4
 801e00a:	4638      	mov	r0, r7
 801e00c:	f7ff ff62 	bl	801ded4 <__sfmoreglue>
 801e010:	4604      	mov	r4, r0
 801e012:	6030      	str	r0, [r6, #0]
 801e014:	2800      	cmp	r0, #0
 801e016:	d1d5      	bne.n	801dfc4 <__sfp+0x24>
 801e018:	f7ff ff78 	bl	801df0c <__sfp_lock_release>
 801e01c:	230c      	movs	r3, #12
 801e01e:	603b      	str	r3, [r7, #0]
 801e020:	e7ee      	b.n	801e000 <__sfp+0x60>
 801e022:	bf00      	nop
 801e024:	08021870 	.word	0x08021870
 801e028:	ffff0001 	.word	0xffff0001

0801e02c <fiprintf>:
 801e02c:	b40e      	push	{r1, r2, r3}
 801e02e:	b503      	push	{r0, r1, lr}
 801e030:	4601      	mov	r1, r0
 801e032:	ab03      	add	r3, sp, #12
 801e034:	4805      	ldr	r0, [pc, #20]	; (801e04c <fiprintf+0x20>)
 801e036:	f853 2b04 	ldr.w	r2, [r3], #4
 801e03a:	6800      	ldr	r0, [r0, #0]
 801e03c:	9301      	str	r3, [sp, #4]
 801e03e:	f001 fa79 	bl	801f534 <_vfiprintf_r>
 801e042:	b002      	add	sp, #8
 801e044:	f85d eb04 	ldr.w	lr, [sp], #4
 801e048:	b003      	add	sp, #12
 801e04a:	4770      	bx	lr
 801e04c:	20000140 	.word	0x20000140

0801e050 <_fwalk_reent>:
 801e050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e054:	4606      	mov	r6, r0
 801e056:	4688      	mov	r8, r1
 801e058:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e05c:	2700      	movs	r7, #0
 801e05e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e062:	f1b9 0901 	subs.w	r9, r9, #1
 801e066:	d505      	bpl.n	801e074 <_fwalk_reent+0x24>
 801e068:	6824      	ldr	r4, [r4, #0]
 801e06a:	2c00      	cmp	r4, #0
 801e06c:	d1f7      	bne.n	801e05e <_fwalk_reent+0xe>
 801e06e:	4638      	mov	r0, r7
 801e070:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e074:	89ab      	ldrh	r3, [r5, #12]
 801e076:	2b01      	cmp	r3, #1
 801e078:	d907      	bls.n	801e08a <_fwalk_reent+0x3a>
 801e07a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e07e:	3301      	adds	r3, #1
 801e080:	d003      	beq.n	801e08a <_fwalk_reent+0x3a>
 801e082:	4629      	mov	r1, r5
 801e084:	4630      	mov	r0, r6
 801e086:	47c0      	blx	r8
 801e088:	4307      	orrs	r7, r0
 801e08a:	3568      	adds	r5, #104	; 0x68
 801e08c:	e7e9      	b.n	801e062 <_fwalk_reent+0x12>

0801e08e <rshift>:
 801e08e:	6903      	ldr	r3, [r0, #16]
 801e090:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801e094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e098:	ea4f 1261 	mov.w	r2, r1, asr #5
 801e09c:	f100 0414 	add.w	r4, r0, #20
 801e0a0:	dd45      	ble.n	801e12e <rshift+0xa0>
 801e0a2:	f011 011f 	ands.w	r1, r1, #31
 801e0a6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801e0aa:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801e0ae:	d10c      	bne.n	801e0ca <rshift+0x3c>
 801e0b0:	f100 0710 	add.w	r7, r0, #16
 801e0b4:	4629      	mov	r1, r5
 801e0b6:	42b1      	cmp	r1, r6
 801e0b8:	d334      	bcc.n	801e124 <rshift+0x96>
 801e0ba:	1a9b      	subs	r3, r3, r2
 801e0bc:	009b      	lsls	r3, r3, #2
 801e0be:	1eea      	subs	r2, r5, #3
 801e0c0:	4296      	cmp	r6, r2
 801e0c2:	bf38      	it	cc
 801e0c4:	2300      	movcc	r3, #0
 801e0c6:	4423      	add	r3, r4
 801e0c8:	e015      	b.n	801e0f6 <rshift+0x68>
 801e0ca:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801e0ce:	f1c1 0820 	rsb	r8, r1, #32
 801e0d2:	40cf      	lsrs	r7, r1
 801e0d4:	f105 0e04 	add.w	lr, r5, #4
 801e0d8:	46a1      	mov	r9, r4
 801e0da:	4576      	cmp	r6, lr
 801e0dc:	46f4      	mov	ip, lr
 801e0de:	d815      	bhi.n	801e10c <rshift+0x7e>
 801e0e0:	1a9a      	subs	r2, r3, r2
 801e0e2:	0092      	lsls	r2, r2, #2
 801e0e4:	3a04      	subs	r2, #4
 801e0e6:	3501      	adds	r5, #1
 801e0e8:	42ae      	cmp	r6, r5
 801e0ea:	bf38      	it	cc
 801e0ec:	2200      	movcc	r2, #0
 801e0ee:	18a3      	adds	r3, r4, r2
 801e0f0:	50a7      	str	r7, [r4, r2]
 801e0f2:	b107      	cbz	r7, 801e0f6 <rshift+0x68>
 801e0f4:	3304      	adds	r3, #4
 801e0f6:	1b1a      	subs	r2, r3, r4
 801e0f8:	42a3      	cmp	r3, r4
 801e0fa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801e0fe:	bf08      	it	eq
 801e100:	2300      	moveq	r3, #0
 801e102:	6102      	str	r2, [r0, #16]
 801e104:	bf08      	it	eq
 801e106:	6143      	streq	r3, [r0, #20]
 801e108:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e10c:	f8dc c000 	ldr.w	ip, [ip]
 801e110:	fa0c fc08 	lsl.w	ip, ip, r8
 801e114:	ea4c 0707 	orr.w	r7, ip, r7
 801e118:	f849 7b04 	str.w	r7, [r9], #4
 801e11c:	f85e 7b04 	ldr.w	r7, [lr], #4
 801e120:	40cf      	lsrs	r7, r1
 801e122:	e7da      	b.n	801e0da <rshift+0x4c>
 801e124:	f851 cb04 	ldr.w	ip, [r1], #4
 801e128:	f847 cf04 	str.w	ip, [r7, #4]!
 801e12c:	e7c3      	b.n	801e0b6 <rshift+0x28>
 801e12e:	4623      	mov	r3, r4
 801e130:	e7e1      	b.n	801e0f6 <rshift+0x68>

0801e132 <__hexdig_fun>:
 801e132:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801e136:	2b09      	cmp	r3, #9
 801e138:	d802      	bhi.n	801e140 <__hexdig_fun+0xe>
 801e13a:	3820      	subs	r0, #32
 801e13c:	b2c0      	uxtb	r0, r0
 801e13e:	4770      	bx	lr
 801e140:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801e144:	2b05      	cmp	r3, #5
 801e146:	d801      	bhi.n	801e14c <__hexdig_fun+0x1a>
 801e148:	3847      	subs	r0, #71	; 0x47
 801e14a:	e7f7      	b.n	801e13c <__hexdig_fun+0xa>
 801e14c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801e150:	2b05      	cmp	r3, #5
 801e152:	d801      	bhi.n	801e158 <__hexdig_fun+0x26>
 801e154:	3827      	subs	r0, #39	; 0x27
 801e156:	e7f1      	b.n	801e13c <__hexdig_fun+0xa>
 801e158:	2000      	movs	r0, #0
 801e15a:	4770      	bx	lr

0801e15c <__gethex>:
 801e15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e160:	ed2d 8b02 	vpush	{d8}
 801e164:	b089      	sub	sp, #36	; 0x24
 801e166:	ee08 0a10 	vmov	s16, r0
 801e16a:	9304      	str	r3, [sp, #16]
 801e16c:	4bb4      	ldr	r3, [pc, #720]	; (801e440 <__gethex+0x2e4>)
 801e16e:	681b      	ldr	r3, [r3, #0]
 801e170:	9301      	str	r3, [sp, #4]
 801e172:	4618      	mov	r0, r3
 801e174:	468b      	mov	fp, r1
 801e176:	4690      	mov	r8, r2
 801e178:	f7e2 f83c 	bl	80001f4 <strlen>
 801e17c:	9b01      	ldr	r3, [sp, #4]
 801e17e:	f8db 2000 	ldr.w	r2, [fp]
 801e182:	4403      	add	r3, r0
 801e184:	4682      	mov	sl, r0
 801e186:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801e18a:	9305      	str	r3, [sp, #20]
 801e18c:	1c93      	adds	r3, r2, #2
 801e18e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801e192:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801e196:	32fe      	adds	r2, #254	; 0xfe
 801e198:	18d1      	adds	r1, r2, r3
 801e19a:	461f      	mov	r7, r3
 801e19c:	f813 0b01 	ldrb.w	r0, [r3], #1
 801e1a0:	9100      	str	r1, [sp, #0]
 801e1a2:	2830      	cmp	r0, #48	; 0x30
 801e1a4:	d0f8      	beq.n	801e198 <__gethex+0x3c>
 801e1a6:	f7ff ffc4 	bl	801e132 <__hexdig_fun>
 801e1aa:	4604      	mov	r4, r0
 801e1ac:	2800      	cmp	r0, #0
 801e1ae:	d13a      	bne.n	801e226 <__gethex+0xca>
 801e1b0:	9901      	ldr	r1, [sp, #4]
 801e1b2:	4652      	mov	r2, sl
 801e1b4:	4638      	mov	r0, r7
 801e1b6:	f001 fb3a 	bl	801f82e <strncmp>
 801e1ba:	4605      	mov	r5, r0
 801e1bc:	2800      	cmp	r0, #0
 801e1be:	d168      	bne.n	801e292 <__gethex+0x136>
 801e1c0:	f817 000a 	ldrb.w	r0, [r7, sl]
 801e1c4:	eb07 060a 	add.w	r6, r7, sl
 801e1c8:	f7ff ffb3 	bl	801e132 <__hexdig_fun>
 801e1cc:	2800      	cmp	r0, #0
 801e1ce:	d062      	beq.n	801e296 <__gethex+0x13a>
 801e1d0:	4633      	mov	r3, r6
 801e1d2:	7818      	ldrb	r0, [r3, #0]
 801e1d4:	2830      	cmp	r0, #48	; 0x30
 801e1d6:	461f      	mov	r7, r3
 801e1d8:	f103 0301 	add.w	r3, r3, #1
 801e1dc:	d0f9      	beq.n	801e1d2 <__gethex+0x76>
 801e1de:	f7ff ffa8 	bl	801e132 <__hexdig_fun>
 801e1e2:	2301      	movs	r3, #1
 801e1e4:	fab0 f480 	clz	r4, r0
 801e1e8:	0964      	lsrs	r4, r4, #5
 801e1ea:	4635      	mov	r5, r6
 801e1ec:	9300      	str	r3, [sp, #0]
 801e1ee:	463a      	mov	r2, r7
 801e1f0:	4616      	mov	r6, r2
 801e1f2:	3201      	adds	r2, #1
 801e1f4:	7830      	ldrb	r0, [r6, #0]
 801e1f6:	f7ff ff9c 	bl	801e132 <__hexdig_fun>
 801e1fa:	2800      	cmp	r0, #0
 801e1fc:	d1f8      	bne.n	801e1f0 <__gethex+0x94>
 801e1fe:	9901      	ldr	r1, [sp, #4]
 801e200:	4652      	mov	r2, sl
 801e202:	4630      	mov	r0, r6
 801e204:	f001 fb13 	bl	801f82e <strncmp>
 801e208:	b980      	cbnz	r0, 801e22c <__gethex+0xd0>
 801e20a:	b94d      	cbnz	r5, 801e220 <__gethex+0xc4>
 801e20c:	eb06 050a 	add.w	r5, r6, sl
 801e210:	462a      	mov	r2, r5
 801e212:	4616      	mov	r6, r2
 801e214:	3201      	adds	r2, #1
 801e216:	7830      	ldrb	r0, [r6, #0]
 801e218:	f7ff ff8b 	bl	801e132 <__hexdig_fun>
 801e21c:	2800      	cmp	r0, #0
 801e21e:	d1f8      	bne.n	801e212 <__gethex+0xb6>
 801e220:	1bad      	subs	r5, r5, r6
 801e222:	00ad      	lsls	r5, r5, #2
 801e224:	e004      	b.n	801e230 <__gethex+0xd4>
 801e226:	2400      	movs	r4, #0
 801e228:	4625      	mov	r5, r4
 801e22a:	e7e0      	b.n	801e1ee <__gethex+0x92>
 801e22c:	2d00      	cmp	r5, #0
 801e22e:	d1f7      	bne.n	801e220 <__gethex+0xc4>
 801e230:	7833      	ldrb	r3, [r6, #0]
 801e232:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801e236:	2b50      	cmp	r3, #80	; 0x50
 801e238:	d13b      	bne.n	801e2b2 <__gethex+0x156>
 801e23a:	7873      	ldrb	r3, [r6, #1]
 801e23c:	2b2b      	cmp	r3, #43	; 0x2b
 801e23e:	d02c      	beq.n	801e29a <__gethex+0x13e>
 801e240:	2b2d      	cmp	r3, #45	; 0x2d
 801e242:	d02e      	beq.n	801e2a2 <__gethex+0x146>
 801e244:	1c71      	adds	r1, r6, #1
 801e246:	f04f 0900 	mov.w	r9, #0
 801e24a:	7808      	ldrb	r0, [r1, #0]
 801e24c:	f7ff ff71 	bl	801e132 <__hexdig_fun>
 801e250:	1e43      	subs	r3, r0, #1
 801e252:	b2db      	uxtb	r3, r3
 801e254:	2b18      	cmp	r3, #24
 801e256:	d82c      	bhi.n	801e2b2 <__gethex+0x156>
 801e258:	f1a0 0210 	sub.w	r2, r0, #16
 801e25c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801e260:	f7ff ff67 	bl	801e132 <__hexdig_fun>
 801e264:	1e43      	subs	r3, r0, #1
 801e266:	b2db      	uxtb	r3, r3
 801e268:	2b18      	cmp	r3, #24
 801e26a:	d91d      	bls.n	801e2a8 <__gethex+0x14c>
 801e26c:	f1b9 0f00 	cmp.w	r9, #0
 801e270:	d000      	beq.n	801e274 <__gethex+0x118>
 801e272:	4252      	negs	r2, r2
 801e274:	4415      	add	r5, r2
 801e276:	f8cb 1000 	str.w	r1, [fp]
 801e27a:	b1e4      	cbz	r4, 801e2b6 <__gethex+0x15a>
 801e27c:	9b00      	ldr	r3, [sp, #0]
 801e27e:	2b00      	cmp	r3, #0
 801e280:	bf14      	ite	ne
 801e282:	2700      	movne	r7, #0
 801e284:	2706      	moveq	r7, #6
 801e286:	4638      	mov	r0, r7
 801e288:	b009      	add	sp, #36	; 0x24
 801e28a:	ecbd 8b02 	vpop	{d8}
 801e28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e292:	463e      	mov	r6, r7
 801e294:	4625      	mov	r5, r4
 801e296:	2401      	movs	r4, #1
 801e298:	e7ca      	b.n	801e230 <__gethex+0xd4>
 801e29a:	f04f 0900 	mov.w	r9, #0
 801e29e:	1cb1      	adds	r1, r6, #2
 801e2a0:	e7d3      	b.n	801e24a <__gethex+0xee>
 801e2a2:	f04f 0901 	mov.w	r9, #1
 801e2a6:	e7fa      	b.n	801e29e <__gethex+0x142>
 801e2a8:	230a      	movs	r3, #10
 801e2aa:	fb03 0202 	mla	r2, r3, r2, r0
 801e2ae:	3a10      	subs	r2, #16
 801e2b0:	e7d4      	b.n	801e25c <__gethex+0x100>
 801e2b2:	4631      	mov	r1, r6
 801e2b4:	e7df      	b.n	801e276 <__gethex+0x11a>
 801e2b6:	1bf3      	subs	r3, r6, r7
 801e2b8:	3b01      	subs	r3, #1
 801e2ba:	4621      	mov	r1, r4
 801e2bc:	2b07      	cmp	r3, #7
 801e2be:	dc0b      	bgt.n	801e2d8 <__gethex+0x17c>
 801e2c0:	ee18 0a10 	vmov	r0, s16
 801e2c4:	f000 fada 	bl	801e87c <_Balloc>
 801e2c8:	4604      	mov	r4, r0
 801e2ca:	b940      	cbnz	r0, 801e2de <__gethex+0x182>
 801e2cc:	4b5d      	ldr	r3, [pc, #372]	; (801e444 <__gethex+0x2e8>)
 801e2ce:	4602      	mov	r2, r0
 801e2d0:	21de      	movs	r1, #222	; 0xde
 801e2d2:	485d      	ldr	r0, [pc, #372]	; (801e448 <__gethex+0x2ec>)
 801e2d4:	f7fe fe78 	bl	801cfc8 <__assert_func>
 801e2d8:	3101      	adds	r1, #1
 801e2da:	105b      	asrs	r3, r3, #1
 801e2dc:	e7ee      	b.n	801e2bc <__gethex+0x160>
 801e2de:	f100 0914 	add.w	r9, r0, #20
 801e2e2:	f04f 0b00 	mov.w	fp, #0
 801e2e6:	f1ca 0301 	rsb	r3, sl, #1
 801e2ea:	f8cd 9008 	str.w	r9, [sp, #8]
 801e2ee:	f8cd b000 	str.w	fp, [sp]
 801e2f2:	9306      	str	r3, [sp, #24]
 801e2f4:	42b7      	cmp	r7, r6
 801e2f6:	d340      	bcc.n	801e37a <__gethex+0x21e>
 801e2f8:	9802      	ldr	r0, [sp, #8]
 801e2fa:	9b00      	ldr	r3, [sp, #0]
 801e2fc:	f840 3b04 	str.w	r3, [r0], #4
 801e300:	eba0 0009 	sub.w	r0, r0, r9
 801e304:	1080      	asrs	r0, r0, #2
 801e306:	0146      	lsls	r6, r0, #5
 801e308:	6120      	str	r0, [r4, #16]
 801e30a:	4618      	mov	r0, r3
 801e30c:	f000 fba8 	bl	801ea60 <__hi0bits>
 801e310:	1a30      	subs	r0, r6, r0
 801e312:	f8d8 6000 	ldr.w	r6, [r8]
 801e316:	42b0      	cmp	r0, r6
 801e318:	dd63      	ble.n	801e3e2 <__gethex+0x286>
 801e31a:	1b87      	subs	r7, r0, r6
 801e31c:	4639      	mov	r1, r7
 801e31e:	4620      	mov	r0, r4
 801e320:	f000 ff4c 	bl	801f1bc <__any_on>
 801e324:	4682      	mov	sl, r0
 801e326:	b1a8      	cbz	r0, 801e354 <__gethex+0x1f8>
 801e328:	1e7b      	subs	r3, r7, #1
 801e32a:	1159      	asrs	r1, r3, #5
 801e32c:	f003 021f 	and.w	r2, r3, #31
 801e330:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801e334:	f04f 0a01 	mov.w	sl, #1
 801e338:	fa0a f202 	lsl.w	r2, sl, r2
 801e33c:	420a      	tst	r2, r1
 801e33e:	d009      	beq.n	801e354 <__gethex+0x1f8>
 801e340:	4553      	cmp	r3, sl
 801e342:	dd05      	ble.n	801e350 <__gethex+0x1f4>
 801e344:	1eb9      	subs	r1, r7, #2
 801e346:	4620      	mov	r0, r4
 801e348:	f000 ff38 	bl	801f1bc <__any_on>
 801e34c:	2800      	cmp	r0, #0
 801e34e:	d145      	bne.n	801e3dc <__gethex+0x280>
 801e350:	f04f 0a02 	mov.w	sl, #2
 801e354:	4639      	mov	r1, r7
 801e356:	4620      	mov	r0, r4
 801e358:	f7ff fe99 	bl	801e08e <rshift>
 801e35c:	443d      	add	r5, r7
 801e35e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e362:	42ab      	cmp	r3, r5
 801e364:	da4c      	bge.n	801e400 <__gethex+0x2a4>
 801e366:	ee18 0a10 	vmov	r0, s16
 801e36a:	4621      	mov	r1, r4
 801e36c:	f000 fac6 	bl	801e8fc <_Bfree>
 801e370:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e372:	2300      	movs	r3, #0
 801e374:	6013      	str	r3, [r2, #0]
 801e376:	27a3      	movs	r7, #163	; 0xa3
 801e378:	e785      	b.n	801e286 <__gethex+0x12a>
 801e37a:	1e73      	subs	r3, r6, #1
 801e37c:	9a05      	ldr	r2, [sp, #20]
 801e37e:	9303      	str	r3, [sp, #12]
 801e380:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801e384:	4293      	cmp	r3, r2
 801e386:	d019      	beq.n	801e3bc <__gethex+0x260>
 801e388:	f1bb 0f20 	cmp.w	fp, #32
 801e38c:	d107      	bne.n	801e39e <__gethex+0x242>
 801e38e:	9b02      	ldr	r3, [sp, #8]
 801e390:	9a00      	ldr	r2, [sp, #0]
 801e392:	f843 2b04 	str.w	r2, [r3], #4
 801e396:	9302      	str	r3, [sp, #8]
 801e398:	2300      	movs	r3, #0
 801e39a:	9300      	str	r3, [sp, #0]
 801e39c:	469b      	mov	fp, r3
 801e39e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801e3a2:	f7ff fec6 	bl	801e132 <__hexdig_fun>
 801e3a6:	9b00      	ldr	r3, [sp, #0]
 801e3a8:	f000 000f 	and.w	r0, r0, #15
 801e3ac:	fa00 f00b 	lsl.w	r0, r0, fp
 801e3b0:	4303      	orrs	r3, r0
 801e3b2:	9300      	str	r3, [sp, #0]
 801e3b4:	f10b 0b04 	add.w	fp, fp, #4
 801e3b8:	9b03      	ldr	r3, [sp, #12]
 801e3ba:	e00d      	b.n	801e3d8 <__gethex+0x27c>
 801e3bc:	9b03      	ldr	r3, [sp, #12]
 801e3be:	9a06      	ldr	r2, [sp, #24]
 801e3c0:	4413      	add	r3, r2
 801e3c2:	42bb      	cmp	r3, r7
 801e3c4:	d3e0      	bcc.n	801e388 <__gethex+0x22c>
 801e3c6:	4618      	mov	r0, r3
 801e3c8:	9901      	ldr	r1, [sp, #4]
 801e3ca:	9307      	str	r3, [sp, #28]
 801e3cc:	4652      	mov	r2, sl
 801e3ce:	f001 fa2e 	bl	801f82e <strncmp>
 801e3d2:	9b07      	ldr	r3, [sp, #28]
 801e3d4:	2800      	cmp	r0, #0
 801e3d6:	d1d7      	bne.n	801e388 <__gethex+0x22c>
 801e3d8:	461e      	mov	r6, r3
 801e3da:	e78b      	b.n	801e2f4 <__gethex+0x198>
 801e3dc:	f04f 0a03 	mov.w	sl, #3
 801e3e0:	e7b8      	b.n	801e354 <__gethex+0x1f8>
 801e3e2:	da0a      	bge.n	801e3fa <__gethex+0x29e>
 801e3e4:	1a37      	subs	r7, r6, r0
 801e3e6:	4621      	mov	r1, r4
 801e3e8:	ee18 0a10 	vmov	r0, s16
 801e3ec:	463a      	mov	r2, r7
 801e3ee:	f000 fca1 	bl	801ed34 <__lshift>
 801e3f2:	1bed      	subs	r5, r5, r7
 801e3f4:	4604      	mov	r4, r0
 801e3f6:	f100 0914 	add.w	r9, r0, #20
 801e3fa:	f04f 0a00 	mov.w	sl, #0
 801e3fe:	e7ae      	b.n	801e35e <__gethex+0x202>
 801e400:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801e404:	42a8      	cmp	r0, r5
 801e406:	dd72      	ble.n	801e4ee <__gethex+0x392>
 801e408:	1b45      	subs	r5, r0, r5
 801e40a:	42ae      	cmp	r6, r5
 801e40c:	dc36      	bgt.n	801e47c <__gethex+0x320>
 801e40e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e412:	2b02      	cmp	r3, #2
 801e414:	d02a      	beq.n	801e46c <__gethex+0x310>
 801e416:	2b03      	cmp	r3, #3
 801e418:	d02c      	beq.n	801e474 <__gethex+0x318>
 801e41a:	2b01      	cmp	r3, #1
 801e41c:	d11c      	bne.n	801e458 <__gethex+0x2fc>
 801e41e:	42ae      	cmp	r6, r5
 801e420:	d11a      	bne.n	801e458 <__gethex+0x2fc>
 801e422:	2e01      	cmp	r6, #1
 801e424:	d112      	bne.n	801e44c <__gethex+0x2f0>
 801e426:	9a04      	ldr	r2, [sp, #16]
 801e428:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801e42c:	6013      	str	r3, [r2, #0]
 801e42e:	2301      	movs	r3, #1
 801e430:	6123      	str	r3, [r4, #16]
 801e432:	f8c9 3000 	str.w	r3, [r9]
 801e436:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e438:	2762      	movs	r7, #98	; 0x62
 801e43a:	601c      	str	r4, [r3, #0]
 801e43c:	e723      	b.n	801e286 <__gethex+0x12a>
 801e43e:	bf00      	nop
 801e440:	08021bf4 	.word	0x08021bf4
 801e444:	08021b19 	.word	0x08021b19
 801e448:	08021b8c 	.word	0x08021b8c
 801e44c:	1e71      	subs	r1, r6, #1
 801e44e:	4620      	mov	r0, r4
 801e450:	f000 feb4 	bl	801f1bc <__any_on>
 801e454:	2800      	cmp	r0, #0
 801e456:	d1e6      	bne.n	801e426 <__gethex+0x2ca>
 801e458:	ee18 0a10 	vmov	r0, s16
 801e45c:	4621      	mov	r1, r4
 801e45e:	f000 fa4d 	bl	801e8fc <_Bfree>
 801e462:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e464:	2300      	movs	r3, #0
 801e466:	6013      	str	r3, [r2, #0]
 801e468:	2750      	movs	r7, #80	; 0x50
 801e46a:	e70c      	b.n	801e286 <__gethex+0x12a>
 801e46c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e46e:	2b00      	cmp	r3, #0
 801e470:	d1f2      	bne.n	801e458 <__gethex+0x2fc>
 801e472:	e7d8      	b.n	801e426 <__gethex+0x2ca>
 801e474:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e476:	2b00      	cmp	r3, #0
 801e478:	d1d5      	bne.n	801e426 <__gethex+0x2ca>
 801e47a:	e7ed      	b.n	801e458 <__gethex+0x2fc>
 801e47c:	1e6f      	subs	r7, r5, #1
 801e47e:	f1ba 0f00 	cmp.w	sl, #0
 801e482:	d131      	bne.n	801e4e8 <__gethex+0x38c>
 801e484:	b127      	cbz	r7, 801e490 <__gethex+0x334>
 801e486:	4639      	mov	r1, r7
 801e488:	4620      	mov	r0, r4
 801e48a:	f000 fe97 	bl	801f1bc <__any_on>
 801e48e:	4682      	mov	sl, r0
 801e490:	117b      	asrs	r3, r7, #5
 801e492:	2101      	movs	r1, #1
 801e494:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801e498:	f007 071f 	and.w	r7, r7, #31
 801e49c:	fa01 f707 	lsl.w	r7, r1, r7
 801e4a0:	421f      	tst	r7, r3
 801e4a2:	4629      	mov	r1, r5
 801e4a4:	4620      	mov	r0, r4
 801e4a6:	bf18      	it	ne
 801e4a8:	f04a 0a02 	orrne.w	sl, sl, #2
 801e4ac:	1b76      	subs	r6, r6, r5
 801e4ae:	f7ff fdee 	bl	801e08e <rshift>
 801e4b2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801e4b6:	2702      	movs	r7, #2
 801e4b8:	f1ba 0f00 	cmp.w	sl, #0
 801e4bc:	d048      	beq.n	801e550 <__gethex+0x3f4>
 801e4be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e4c2:	2b02      	cmp	r3, #2
 801e4c4:	d015      	beq.n	801e4f2 <__gethex+0x396>
 801e4c6:	2b03      	cmp	r3, #3
 801e4c8:	d017      	beq.n	801e4fa <__gethex+0x39e>
 801e4ca:	2b01      	cmp	r3, #1
 801e4cc:	d109      	bne.n	801e4e2 <__gethex+0x386>
 801e4ce:	f01a 0f02 	tst.w	sl, #2
 801e4d2:	d006      	beq.n	801e4e2 <__gethex+0x386>
 801e4d4:	f8d9 0000 	ldr.w	r0, [r9]
 801e4d8:	ea4a 0a00 	orr.w	sl, sl, r0
 801e4dc:	f01a 0f01 	tst.w	sl, #1
 801e4e0:	d10e      	bne.n	801e500 <__gethex+0x3a4>
 801e4e2:	f047 0710 	orr.w	r7, r7, #16
 801e4e6:	e033      	b.n	801e550 <__gethex+0x3f4>
 801e4e8:	f04f 0a01 	mov.w	sl, #1
 801e4ec:	e7d0      	b.n	801e490 <__gethex+0x334>
 801e4ee:	2701      	movs	r7, #1
 801e4f0:	e7e2      	b.n	801e4b8 <__gethex+0x35c>
 801e4f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e4f4:	f1c3 0301 	rsb	r3, r3, #1
 801e4f8:	9315      	str	r3, [sp, #84]	; 0x54
 801e4fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e4fc:	2b00      	cmp	r3, #0
 801e4fe:	d0f0      	beq.n	801e4e2 <__gethex+0x386>
 801e500:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801e504:	f104 0314 	add.w	r3, r4, #20
 801e508:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801e50c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801e510:	f04f 0c00 	mov.w	ip, #0
 801e514:	4618      	mov	r0, r3
 801e516:	f853 2b04 	ldr.w	r2, [r3], #4
 801e51a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801e51e:	d01c      	beq.n	801e55a <__gethex+0x3fe>
 801e520:	3201      	adds	r2, #1
 801e522:	6002      	str	r2, [r0, #0]
 801e524:	2f02      	cmp	r7, #2
 801e526:	f104 0314 	add.w	r3, r4, #20
 801e52a:	d13f      	bne.n	801e5ac <__gethex+0x450>
 801e52c:	f8d8 2000 	ldr.w	r2, [r8]
 801e530:	3a01      	subs	r2, #1
 801e532:	42b2      	cmp	r2, r6
 801e534:	d10a      	bne.n	801e54c <__gethex+0x3f0>
 801e536:	1171      	asrs	r1, r6, #5
 801e538:	2201      	movs	r2, #1
 801e53a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801e53e:	f006 061f 	and.w	r6, r6, #31
 801e542:	fa02 f606 	lsl.w	r6, r2, r6
 801e546:	421e      	tst	r6, r3
 801e548:	bf18      	it	ne
 801e54a:	4617      	movne	r7, r2
 801e54c:	f047 0720 	orr.w	r7, r7, #32
 801e550:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e552:	601c      	str	r4, [r3, #0]
 801e554:	9b04      	ldr	r3, [sp, #16]
 801e556:	601d      	str	r5, [r3, #0]
 801e558:	e695      	b.n	801e286 <__gethex+0x12a>
 801e55a:	4299      	cmp	r1, r3
 801e55c:	f843 cc04 	str.w	ip, [r3, #-4]
 801e560:	d8d8      	bhi.n	801e514 <__gethex+0x3b8>
 801e562:	68a3      	ldr	r3, [r4, #8]
 801e564:	459b      	cmp	fp, r3
 801e566:	db19      	blt.n	801e59c <__gethex+0x440>
 801e568:	6861      	ldr	r1, [r4, #4]
 801e56a:	ee18 0a10 	vmov	r0, s16
 801e56e:	3101      	adds	r1, #1
 801e570:	f000 f984 	bl	801e87c <_Balloc>
 801e574:	4681      	mov	r9, r0
 801e576:	b918      	cbnz	r0, 801e580 <__gethex+0x424>
 801e578:	4b1a      	ldr	r3, [pc, #104]	; (801e5e4 <__gethex+0x488>)
 801e57a:	4602      	mov	r2, r0
 801e57c:	2184      	movs	r1, #132	; 0x84
 801e57e:	e6a8      	b.n	801e2d2 <__gethex+0x176>
 801e580:	6922      	ldr	r2, [r4, #16]
 801e582:	3202      	adds	r2, #2
 801e584:	f104 010c 	add.w	r1, r4, #12
 801e588:	0092      	lsls	r2, r2, #2
 801e58a:	300c      	adds	r0, #12
 801e58c:	f7fc fc94 	bl	801aeb8 <memcpy>
 801e590:	4621      	mov	r1, r4
 801e592:	ee18 0a10 	vmov	r0, s16
 801e596:	f000 f9b1 	bl	801e8fc <_Bfree>
 801e59a:	464c      	mov	r4, r9
 801e59c:	6923      	ldr	r3, [r4, #16]
 801e59e:	1c5a      	adds	r2, r3, #1
 801e5a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801e5a4:	6122      	str	r2, [r4, #16]
 801e5a6:	2201      	movs	r2, #1
 801e5a8:	615a      	str	r2, [r3, #20]
 801e5aa:	e7bb      	b.n	801e524 <__gethex+0x3c8>
 801e5ac:	6922      	ldr	r2, [r4, #16]
 801e5ae:	455a      	cmp	r2, fp
 801e5b0:	dd0b      	ble.n	801e5ca <__gethex+0x46e>
 801e5b2:	2101      	movs	r1, #1
 801e5b4:	4620      	mov	r0, r4
 801e5b6:	f7ff fd6a 	bl	801e08e <rshift>
 801e5ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e5be:	3501      	adds	r5, #1
 801e5c0:	42ab      	cmp	r3, r5
 801e5c2:	f6ff aed0 	blt.w	801e366 <__gethex+0x20a>
 801e5c6:	2701      	movs	r7, #1
 801e5c8:	e7c0      	b.n	801e54c <__gethex+0x3f0>
 801e5ca:	f016 061f 	ands.w	r6, r6, #31
 801e5ce:	d0fa      	beq.n	801e5c6 <__gethex+0x46a>
 801e5d0:	4453      	add	r3, sl
 801e5d2:	f1c6 0620 	rsb	r6, r6, #32
 801e5d6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801e5da:	f000 fa41 	bl	801ea60 <__hi0bits>
 801e5de:	42b0      	cmp	r0, r6
 801e5e0:	dbe7      	blt.n	801e5b2 <__gethex+0x456>
 801e5e2:	e7f0      	b.n	801e5c6 <__gethex+0x46a>
 801e5e4:	08021b19 	.word	0x08021b19

0801e5e8 <L_shift>:
 801e5e8:	f1c2 0208 	rsb	r2, r2, #8
 801e5ec:	0092      	lsls	r2, r2, #2
 801e5ee:	b570      	push	{r4, r5, r6, lr}
 801e5f0:	f1c2 0620 	rsb	r6, r2, #32
 801e5f4:	6843      	ldr	r3, [r0, #4]
 801e5f6:	6804      	ldr	r4, [r0, #0]
 801e5f8:	fa03 f506 	lsl.w	r5, r3, r6
 801e5fc:	432c      	orrs	r4, r5
 801e5fe:	40d3      	lsrs	r3, r2
 801e600:	6004      	str	r4, [r0, #0]
 801e602:	f840 3f04 	str.w	r3, [r0, #4]!
 801e606:	4288      	cmp	r0, r1
 801e608:	d3f4      	bcc.n	801e5f4 <L_shift+0xc>
 801e60a:	bd70      	pop	{r4, r5, r6, pc}

0801e60c <__match>:
 801e60c:	b530      	push	{r4, r5, lr}
 801e60e:	6803      	ldr	r3, [r0, #0]
 801e610:	3301      	adds	r3, #1
 801e612:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e616:	b914      	cbnz	r4, 801e61e <__match+0x12>
 801e618:	6003      	str	r3, [r0, #0]
 801e61a:	2001      	movs	r0, #1
 801e61c:	bd30      	pop	{r4, r5, pc}
 801e61e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e622:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801e626:	2d19      	cmp	r5, #25
 801e628:	bf98      	it	ls
 801e62a:	3220      	addls	r2, #32
 801e62c:	42a2      	cmp	r2, r4
 801e62e:	d0f0      	beq.n	801e612 <__match+0x6>
 801e630:	2000      	movs	r0, #0
 801e632:	e7f3      	b.n	801e61c <__match+0x10>

0801e634 <__hexnan>:
 801e634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e638:	680b      	ldr	r3, [r1, #0]
 801e63a:	115e      	asrs	r6, r3, #5
 801e63c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801e640:	f013 031f 	ands.w	r3, r3, #31
 801e644:	b087      	sub	sp, #28
 801e646:	bf18      	it	ne
 801e648:	3604      	addne	r6, #4
 801e64a:	2500      	movs	r5, #0
 801e64c:	1f37      	subs	r7, r6, #4
 801e64e:	4690      	mov	r8, r2
 801e650:	6802      	ldr	r2, [r0, #0]
 801e652:	9301      	str	r3, [sp, #4]
 801e654:	4682      	mov	sl, r0
 801e656:	f846 5c04 	str.w	r5, [r6, #-4]
 801e65a:	46b9      	mov	r9, r7
 801e65c:	463c      	mov	r4, r7
 801e65e:	9502      	str	r5, [sp, #8]
 801e660:	46ab      	mov	fp, r5
 801e662:	7851      	ldrb	r1, [r2, #1]
 801e664:	1c53      	adds	r3, r2, #1
 801e666:	9303      	str	r3, [sp, #12]
 801e668:	b341      	cbz	r1, 801e6bc <__hexnan+0x88>
 801e66a:	4608      	mov	r0, r1
 801e66c:	9205      	str	r2, [sp, #20]
 801e66e:	9104      	str	r1, [sp, #16]
 801e670:	f7ff fd5f 	bl	801e132 <__hexdig_fun>
 801e674:	2800      	cmp	r0, #0
 801e676:	d14f      	bne.n	801e718 <__hexnan+0xe4>
 801e678:	9904      	ldr	r1, [sp, #16]
 801e67a:	9a05      	ldr	r2, [sp, #20]
 801e67c:	2920      	cmp	r1, #32
 801e67e:	d818      	bhi.n	801e6b2 <__hexnan+0x7e>
 801e680:	9b02      	ldr	r3, [sp, #8]
 801e682:	459b      	cmp	fp, r3
 801e684:	dd13      	ble.n	801e6ae <__hexnan+0x7a>
 801e686:	454c      	cmp	r4, r9
 801e688:	d206      	bcs.n	801e698 <__hexnan+0x64>
 801e68a:	2d07      	cmp	r5, #7
 801e68c:	dc04      	bgt.n	801e698 <__hexnan+0x64>
 801e68e:	462a      	mov	r2, r5
 801e690:	4649      	mov	r1, r9
 801e692:	4620      	mov	r0, r4
 801e694:	f7ff ffa8 	bl	801e5e8 <L_shift>
 801e698:	4544      	cmp	r4, r8
 801e69a:	d950      	bls.n	801e73e <__hexnan+0x10a>
 801e69c:	2300      	movs	r3, #0
 801e69e:	f1a4 0904 	sub.w	r9, r4, #4
 801e6a2:	f844 3c04 	str.w	r3, [r4, #-4]
 801e6a6:	f8cd b008 	str.w	fp, [sp, #8]
 801e6aa:	464c      	mov	r4, r9
 801e6ac:	461d      	mov	r5, r3
 801e6ae:	9a03      	ldr	r2, [sp, #12]
 801e6b0:	e7d7      	b.n	801e662 <__hexnan+0x2e>
 801e6b2:	2929      	cmp	r1, #41	; 0x29
 801e6b4:	d156      	bne.n	801e764 <__hexnan+0x130>
 801e6b6:	3202      	adds	r2, #2
 801e6b8:	f8ca 2000 	str.w	r2, [sl]
 801e6bc:	f1bb 0f00 	cmp.w	fp, #0
 801e6c0:	d050      	beq.n	801e764 <__hexnan+0x130>
 801e6c2:	454c      	cmp	r4, r9
 801e6c4:	d206      	bcs.n	801e6d4 <__hexnan+0xa0>
 801e6c6:	2d07      	cmp	r5, #7
 801e6c8:	dc04      	bgt.n	801e6d4 <__hexnan+0xa0>
 801e6ca:	462a      	mov	r2, r5
 801e6cc:	4649      	mov	r1, r9
 801e6ce:	4620      	mov	r0, r4
 801e6d0:	f7ff ff8a 	bl	801e5e8 <L_shift>
 801e6d4:	4544      	cmp	r4, r8
 801e6d6:	d934      	bls.n	801e742 <__hexnan+0x10e>
 801e6d8:	f1a8 0204 	sub.w	r2, r8, #4
 801e6dc:	4623      	mov	r3, r4
 801e6de:	f853 1b04 	ldr.w	r1, [r3], #4
 801e6e2:	f842 1f04 	str.w	r1, [r2, #4]!
 801e6e6:	429f      	cmp	r7, r3
 801e6e8:	d2f9      	bcs.n	801e6de <__hexnan+0xaa>
 801e6ea:	1b3b      	subs	r3, r7, r4
 801e6ec:	f023 0303 	bic.w	r3, r3, #3
 801e6f0:	3304      	adds	r3, #4
 801e6f2:	3401      	adds	r4, #1
 801e6f4:	3e03      	subs	r6, #3
 801e6f6:	42b4      	cmp	r4, r6
 801e6f8:	bf88      	it	hi
 801e6fa:	2304      	movhi	r3, #4
 801e6fc:	4443      	add	r3, r8
 801e6fe:	2200      	movs	r2, #0
 801e700:	f843 2b04 	str.w	r2, [r3], #4
 801e704:	429f      	cmp	r7, r3
 801e706:	d2fb      	bcs.n	801e700 <__hexnan+0xcc>
 801e708:	683b      	ldr	r3, [r7, #0]
 801e70a:	b91b      	cbnz	r3, 801e714 <__hexnan+0xe0>
 801e70c:	4547      	cmp	r7, r8
 801e70e:	d127      	bne.n	801e760 <__hexnan+0x12c>
 801e710:	2301      	movs	r3, #1
 801e712:	603b      	str	r3, [r7, #0]
 801e714:	2005      	movs	r0, #5
 801e716:	e026      	b.n	801e766 <__hexnan+0x132>
 801e718:	3501      	adds	r5, #1
 801e71a:	2d08      	cmp	r5, #8
 801e71c:	f10b 0b01 	add.w	fp, fp, #1
 801e720:	dd06      	ble.n	801e730 <__hexnan+0xfc>
 801e722:	4544      	cmp	r4, r8
 801e724:	d9c3      	bls.n	801e6ae <__hexnan+0x7a>
 801e726:	2300      	movs	r3, #0
 801e728:	f844 3c04 	str.w	r3, [r4, #-4]
 801e72c:	2501      	movs	r5, #1
 801e72e:	3c04      	subs	r4, #4
 801e730:	6822      	ldr	r2, [r4, #0]
 801e732:	f000 000f 	and.w	r0, r0, #15
 801e736:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801e73a:	6022      	str	r2, [r4, #0]
 801e73c:	e7b7      	b.n	801e6ae <__hexnan+0x7a>
 801e73e:	2508      	movs	r5, #8
 801e740:	e7b5      	b.n	801e6ae <__hexnan+0x7a>
 801e742:	9b01      	ldr	r3, [sp, #4]
 801e744:	2b00      	cmp	r3, #0
 801e746:	d0df      	beq.n	801e708 <__hexnan+0xd4>
 801e748:	f04f 32ff 	mov.w	r2, #4294967295
 801e74c:	f1c3 0320 	rsb	r3, r3, #32
 801e750:	fa22 f303 	lsr.w	r3, r2, r3
 801e754:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801e758:	401a      	ands	r2, r3
 801e75a:	f846 2c04 	str.w	r2, [r6, #-4]
 801e75e:	e7d3      	b.n	801e708 <__hexnan+0xd4>
 801e760:	3f04      	subs	r7, #4
 801e762:	e7d1      	b.n	801e708 <__hexnan+0xd4>
 801e764:	2004      	movs	r0, #4
 801e766:	b007      	add	sp, #28
 801e768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e76c <_localeconv_r>:
 801e76c:	4800      	ldr	r0, [pc, #0]	; (801e770 <_localeconv_r+0x4>)
 801e76e:	4770      	bx	lr
 801e770:	20000298 	.word	0x20000298

0801e774 <__swhatbuf_r>:
 801e774:	b570      	push	{r4, r5, r6, lr}
 801e776:	460e      	mov	r6, r1
 801e778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e77c:	2900      	cmp	r1, #0
 801e77e:	b096      	sub	sp, #88	; 0x58
 801e780:	4614      	mov	r4, r2
 801e782:	461d      	mov	r5, r3
 801e784:	da08      	bge.n	801e798 <__swhatbuf_r+0x24>
 801e786:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801e78a:	2200      	movs	r2, #0
 801e78c:	602a      	str	r2, [r5, #0]
 801e78e:	061a      	lsls	r2, r3, #24
 801e790:	d410      	bmi.n	801e7b4 <__swhatbuf_r+0x40>
 801e792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e796:	e00e      	b.n	801e7b6 <__swhatbuf_r+0x42>
 801e798:	466a      	mov	r2, sp
 801e79a:	f001 f893 	bl	801f8c4 <_fstat_r>
 801e79e:	2800      	cmp	r0, #0
 801e7a0:	dbf1      	blt.n	801e786 <__swhatbuf_r+0x12>
 801e7a2:	9a01      	ldr	r2, [sp, #4]
 801e7a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e7a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e7ac:	425a      	negs	r2, r3
 801e7ae:	415a      	adcs	r2, r3
 801e7b0:	602a      	str	r2, [r5, #0]
 801e7b2:	e7ee      	b.n	801e792 <__swhatbuf_r+0x1e>
 801e7b4:	2340      	movs	r3, #64	; 0x40
 801e7b6:	2000      	movs	r0, #0
 801e7b8:	6023      	str	r3, [r4, #0]
 801e7ba:	b016      	add	sp, #88	; 0x58
 801e7bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801e7c0 <__smakebuf_r>:
 801e7c0:	898b      	ldrh	r3, [r1, #12]
 801e7c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e7c4:	079d      	lsls	r5, r3, #30
 801e7c6:	4606      	mov	r6, r0
 801e7c8:	460c      	mov	r4, r1
 801e7ca:	d507      	bpl.n	801e7dc <__smakebuf_r+0x1c>
 801e7cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e7d0:	6023      	str	r3, [r4, #0]
 801e7d2:	6123      	str	r3, [r4, #16]
 801e7d4:	2301      	movs	r3, #1
 801e7d6:	6163      	str	r3, [r4, #20]
 801e7d8:	b002      	add	sp, #8
 801e7da:	bd70      	pop	{r4, r5, r6, pc}
 801e7dc:	ab01      	add	r3, sp, #4
 801e7de:	466a      	mov	r2, sp
 801e7e0:	f7ff ffc8 	bl	801e774 <__swhatbuf_r>
 801e7e4:	9900      	ldr	r1, [sp, #0]
 801e7e6:	4605      	mov	r5, r0
 801e7e8:	4630      	mov	r0, r6
 801e7ea:	f7fc fc01 	bl	801aff0 <_malloc_r>
 801e7ee:	b948      	cbnz	r0, 801e804 <__smakebuf_r+0x44>
 801e7f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e7f4:	059a      	lsls	r2, r3, #22
 801e7f6:	d4ef      	bmi.n	801e7d8 <__smakebuf_r+0x18>
 801e7f8:	f023 0303 	bic.w	r3, r3, #3
 801e7fc:	f043 0302 	orr.w	r3, r3, #2
 801e800:	81a3      	strh	r3, [r4, #12]
 801e802:	e7e3      	b.n	801e7cc <__smakebuf_r+0xc>
 801e804:	4b0d      	ldr	r3, [pc, #52]	; (801e83c <__smakebuf_r+0x7c>)
 801e806:	62b3      	str	r3, [r6, #40]	; 0x28
 801e808:	89a3      	ldrh	r3, [r4, #12]
 801e80a:	6020      	str	r0, [r4, #0]
 801e80c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e810:	81a3      	strh	r3, [r4, #12]
 801e812:	9b00      	ldr	r3, [sp, #0]
 801e814:	6163      	str	r3, [r4, #20]
 801e816:	9b01      	ldr	r3, [sp, #4]
 801e818:	6120      	str	r0, [r4, #16]
 801e81a:	b15b      	cbz	r3, 801e834 <__smakebuf_r+0x74>
 801e81c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e820:	4630      	mov	r0, r6
 801e822:	f001 f861 	bl	801f8e8 <_isatty_r>
 801e826:	b128      	cbz	r0, 801e834 <__smakebuf_r+0x74>
 801e828:	89a3      	ldrh	r3, [r4, #12]
 801e82a:	f023 0303 	bic.w	r3, r3, #3
 801e82e:	f043 0301 	orr.w	r3, r3, #1
 801e832:	81a3      	strh	r3, [r4, #12]
 801e834:	89a0      	ldrh	r0, [r4, #12]
 801e836:	4305      	orrs	r5, r0
 801e838:	81a5      	strh	r5, [r4, #12]
 801e83a:	e7cd      	b.n	801e7d8 <__smakebuf_r+0x18>
 801e83c:	0801dec9 	.word	0x0801dec9

0801e840 <__ascii_mbtowc>:
 801e840:	b082      	sub	sp, #8
 801e842:	b901      	cbnz	r1, 801e846 <__ascii_mbtowc+0x6>
 801e844:	a901      	add	r1, sp, #4
 801e846:	b142      	cbz	r2, 801e85a <__ascii_mbtowc+0x1a>
 801e848:	b14b      	cbz	r3, 801e85e <__ascii_mbtowc+0x1e>
 801e84a:	7813      	ldrb	r3, [r2, #0]
 801e84c:	600b      	str	r3, [r1, #0]
 801e84e:	7812      	ldrb	r2, [r2, #0]
 801e850:	1e10      	subs	r0, r2, #0
 801e852:	bf18      	it	ne
 801e854:	2001      	movne	r0, #1
 801e856:	b002      	add	sp, #8
 801e858:	4770      	bx	lr
 801e85a:	4610      	mov	r0, r2
 801e85c:	e7fb      	b.n	801e856 <__ascii_mbtowc+0x16>
 801e85e:	f06f 0001 	mvn.w	r0, #1
 801e862:	e7f8      	b.n	801e856 <__ascii_mbtowc+0x16>

0801e864 <__malloc_lock>:
 801e864:	4801      	ldr	r0, [pc, #4]	; (801e86c <__malloc_lock+0x8>)
 801e866:	f7fc bb14 	b.w	801ae92 <__retarget_lock_acquire_recursive>
 801e86a:	bf00      	nop
 801e86c:	20003608 	.word	0x20003608

0801e870 <__malloc_unlock>:
 801e870:	4801      	ldr	r0, [pc, #4]	; (801e878 <__malloc_unlock+0x8>)
 801e872:	f7fc bb0f 	b.w	801ae94 <__retarget_lock_release_recursive>
 801e876:	bf00      	nop
 801e878:	20003608 	.word	0x20003608

0801e87c <_Balloc>:
 801e87c:	b570      	push	{r4, r5, r6, lr}
 801e87e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801e880:	4604      	mov	r4, r0
 801e882:	460d      	mov	r5, r1
 801e884:	b976      	cbnz	r6, 801e8a4 <_Balloc+0x28>
 801e886:	2010      	movs	r0, #16
 801e888:	f7fc fb06 	bl	801ae98 <malloc>
 801e88c:	4602      	mov	r2, r0
 801e88e:	6260      	str	r0, [r4, #36]	; 0x24
 801e890:	b920      	cbnz	r0, 801e89c <_Balloc+0x20>
 801e892:	4b18      	ldr	r3, [pc, #96]	; (801e8f4 <_Balloc+0x78>)
 801e894:	4818      	ldr	r0, [pc, #96]	; (801e8f8 <_Balloc+0x7c>)
 801e896:	2166      	movs	r1, #102	; 0x66
 801e898:	f7fe fb96 	bl	801cfc8 <__assert_func>
 801e89c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e8a0:	6006      	str	r6, [r0, #0]
 801e8a2:	60c6      	str	r6, [r0, #12]
 801e8a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801e8a6:	68f3      	ldr	r3, [r6, #12]
 801e8a8:	b183      	cbz	r3, 801e8cc <_Balloc+0x50>
 801e8aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e8ac:	68db      	ldr	r3, [r3, #12]
 801e8ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e8b2:	b9b8      	cbnz	r0, 801e8e4 <_Balloc+0x68>
 801e8b4:	2101      	movs	r1, #1
 801e8b6:	fa01 f605 	lsl.w	r6, r1, r5
 801e8ba:	1d72      	adds	r2, r6, #5
 801e8bc:	0092      	lsls	r2, r2, #2
 801e8be:	4620      	mov	r0, r4
 801e8c0:	f000 fc9d 	bl	801f1fe <_calloc_r>
 801e8c4:	b160      	cbz	r0, 801e8e0 <_Balloc+0x64>
 801e8c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e8ca:	e00e      	b.n	801e8ea <_Balloc+0x6e>
 801e8cc:	2221      	movs	r2, #33	; 0x21
 801e8ce:	2104      	movs	r1, #4
 801e8d0:	4620      	mov	r0, r4
 801e8d2:	f000 fc94 	bl	801f1fe <_calloc_r>
 801e8d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e8d8:	60f0      	str	r0, [r6, #12]
 801e8da:	68db      	ldr	r3, [r3, #12]
 801e8dc:	2b00      	cmp	r3, #0
 801e8de:	d1e4      	bne.n	801e8aa <_Balloc+0x2e>
 801e8e0:	2000      	movs	r0, #0
 801e8e2:	bd70      	pop	{r4, r5, r6, pc}
 801e8e4:	6802      	ldr	r2, [r0, #0]
 801e8e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801e8ea:	2300      	movs	r3, #0
 801e8ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e8f0:	e7f7      	b.n	801e8e2 <_Balloc+0x66>
 801e8f2:	bf00      	nop
 801e8f4:	08021900 	.word	0x08021900
 801e8f8:	08021c08 	.word	0x08021c08

0801e8fc <_Bfree>:
 801e8fc:	b570      	push	{r4, r5, r6, lr}
 801e8fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801e900:	4605      	mov	r5, r0
 801e902:	460c      	mov	r4, r1
 801e904:	b976      	cbnz	r6, 801e924 <_Bfree+0x28>
 801e906:	2010      	movs	r0, #16
 801e908:	f7fc fac6 	bl	801ae98 <malloc>
 801e90c:	4602      	mov	r2, r0
 801e90e:	6268      	str	r0, [r5, #36]	; 0x24
 801e910:	b920      	cbnz	r0, 801e91c <_Bfree+0x20>
 801e912:	4b09      	ldr	r3, [pc, #36]	; (801e938 <_Bfree+0x3c>)
 801e914:	4809      	ldr	r0, [pc, #36]	; (801e93c <_Bfree+0x40>)
 801e916:	218a      	movs	r1, #138	; 0x8a
 801e918:	f7fe fb56 	bl	801cfc8 <__assert_func>
 801e91c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e920:	6006      	str	r6, [r0, #0]
 801e922:	60c6      	str	r6, [r0, #12]
 801e924:	b13c      	cbz	r4, 801e936 <_Bfree+0x3a>
 801e926:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801e928:	6862      	ldr	r2, [r4, #4]
 801e92a:	68db      	ldr	r3, [r3, #12]
 801e92c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e930:	6021      	str	r1, [r4, #0]
 801e932:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801e936:	bd70      	pop	{r4, r5, r6, pc}
 801e938:	08021900 	.word	0x08021900
 801e93c:	08021c08 	.word	0x08021c08

0801e940 <__multadd>:
 801e940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e944:	690d      	ldr	r5, [r1, #16]
 801e946:	4607      	mov	r7, r0
 801e948:	460c      	mov	r4, r1
 801e94a:	461e      	mov	r6, r3
 801e94c:	f101 0c14 	add.w	ip, r1, #20
 801e950:	2000      	movs	r0, #0
 801e952:	f8dc 3000 	ldr.w	r3, [ip]
 801e956:	b299      	uxth	r1, r3
 801e958:	fb02 6101 	mla	r1, r2, r1, r6
 801e95c:	0c1e      	lsrs	r6, r3, #16
 801e95e:	0c0b      	lsrs	r3, r1, #16
 801e960:	fb02 3306 	mla	r3, r2, r6, r3
 801e964:	b289      	uxth	r1, r1
 801e966:	3001      	adds	r0, #1
 801e968:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801e96c:	4285      	cmp	r5, r0
 801e96e:	f84c 1b04 	str.w	r1, [ip], #4
 801e972:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801e976:	dcec      	bgt.n	801e952 <__multadd+0x12>
 801e978:	b30e      	cbz	r6, 801e9be <__multadd+0x7e>
 801e97a:	68a3      	ldr	r3, [r4, #8]
 801e97c:	42ab      	cmp	r3, r5
 801e97e:	dc19      	bgt.n	801e9b4 <__multadd+0x74>
 801e980:	6861      	ldr	r1, [r4, #4]
 801e982:	4638      	mov	r0, r7
 801e984:	3101      	adds	r1, #1
 801e986:	f7ff ff79 	bl	801e87c <_Balloc>
 801e98a:	4680      	mov	r8, r0
 801e98c:	b928      	cbnz	r0, 801e99a <__multadd+0x5a>
 801e98e:	4602      	mov	r2, r0
 801e990:	4b0c      	ldr	r3, [pc, #48]	; (801e9c4 <__multadd+0x84>)
 801e992:	480d      	ldr	r0, [pc, #52]	; (801e9c8 <__multadd+0x88>)
 801e994:	21b5      	movs	r1, #181	; 0xb5
 801e996:	f7fe fb17 	bl	801cfc8 <__assert_func>
 801e99a:	6922      	ldr	r2, [r4, #16]
 801e99c:	3202      	adds	r2, #2
 801e99e:	f104 010c 	add.w	r1, r4, #12
 801e9a2:	0092      	lsls	r2, r2, #2
 801e9a4:	300c      	adds	r0, #12
 801e9a6:	f7fc fa87 	bl	801aeb8 <memcpy>
 801e9aa:	4621      	mov	r1, r4
 801e9ac:	4638      	mov	r0, r7
 801e9ae:	f7ff ffa5 	bl	801e8fc <_Bfree>
 801e9b2:	4644      	mov	r4, r8
 801e9b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801e9b8:	3501      	adds	r5, #1
 801e9ba:	615e      	str	r6, [r3, #20]
 801e9bc:	6125      	str	r5, [r4, #16]
 801e9be:	4620      	mov	r0, r4
 801e9c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e9c4:	08021b19 	.word	0x08021b19
 801e9c8:	08021c08 	.word	0x08021c08

0801e9cc <__s2b>:
 801e9cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e9d0:	460c      	mov	r4, r1
 801e9d2:	4615      	mov	r5, r2
 801e9d4:	461f      	mov	r7, r3
 801e9d6:	2209      	movs	r2, #9
 801e9d8:	3308      	adds	r3, #8
 801e9da:	4606      	mov	r6, r0
 801e9dc:	fb93 f3f2 	sdiv	r3, r3, r2
 801e9e0:	2100      	movs	r1, #0
 801e9e2:	2201      	movs	r2, #1
 801e9e4:	429a      	cmp	r2, r3
 801e9e6:	db09      	blt.n	801e9fc <__s2b+0x30>
 801e9e8:	4630      	mov	r0, r6
 801e9ea:	f7ff ff47 	bl	801e87c <_Balloc>
 801e9ee:	b940      	cbnz	r0, 801ea02 <__s2b+0x36>
 801e9f0:	4602      	mov	r2, r0
 801e9f2:	4b19      	ldr	r3, [pc, #100]	; (801ea58 <__s2b+0x8c>)
 801e9f4:	4819      	ldr	r0, [pc, #100]	; (801ea5c <__s2b+0x90>)
 801e9f6:	21ce      	movs	r1, #206	; 0xce
 801e9f8:	f7fe fae6 	bl	801cfc8 <__assert_func>
 801e9fc:	0052      	lsls	r2, r2, #1
 801e9fe:	3101      	adds	r1, #1
 801ea00:	e7f0      	b.n	801e9e4 <__s2b+0x18>
 801ea02:	9b08      	ldr	r3, [sp, #32]
 801ea04:	6143      	str	r3, [r0, #20]
 801ea06:	2d09      	cmp	r5, #9
 801ea08:	f04f 0301 	mov.w	r3, #1
 801ea0c:	6103      	str	r3, [r0, #16]
 801ea0e:	dd16      	ble.n	801ea3e <__s2b+0x72>
 801ea10:	f104 0909 	add.w	r9, r4, #9
 801ea14:	46c8      	mov	r8, r9
 801ea16:	442c      	add	r4, r5
 801ea18:	f818 3b01 	ldrb.w	r3, [r8], #1
 801ea1c:	4601      	mov	r1, r0
 801ea1e:	3b30      	subs	r3, #48	; 0x30
 801ea20:	220a      	movs	r2, #10
 801ea22:	4630      	mov	r0, r6
 801ea24:	f7ff ff8c 	bl	801e940 <__multadd>
 801ea28:	45a0      	cmp	r8, r4
 801ea2a:	d1f5      	bne.n	801ea18 <__s2b+0x4c>
 801ea2c:	f1a5 0408 	sub.w	r4, r5, #8
 801ea30:	444c      	add	r4, r9
 801ea32:	1b2d      	subs	r5, r5, r4
 801ea34:	1963      	adds	r3, r4, r5
 801ea36:	42bb      	cmp	r3, r7
 801ea38:	db04      	blt.n	801ea44 <__s2b+0x78>
 801ea3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ea3e:	340a      	adds	r4, #10
 801ea40:	2509      	movs	r5, #9
 801ea42:	e7f6      	b.n	801ea32 <__s2b+0x66>
 801ea44:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ea48:	4601      	mov	r1, r0
 801ea4a:	3b30      	subs	r3, #48	; 0x30
 801ea4c:	220a      	movs	r2, #10
 801ea4e:	4630      	mov	r0, r6
 801ea50:	f7ff ff76 	bl	801e940 <__multadd>
 801ea54:	e7ee      	b.n	801ea34 <__s2b+0x68>
 801ea56:	bf00      	nop
 801ea58:	08021b19 	.word	0x08021b19
 801ea5c:	08021c08 	.word	0x08021c08

0801ea60 <__hi0bits>:
 801ea60:	0c03      	lsrs	r3, r0, #16
 801ea62:	041b      	lsls	r3, r3, #16
 801ea64:	b9d3      	cbnz	r3, 801ea9c <__hi0bits+0x3c>
 801ea66:	0400      	lsls	r0, r0, #16
 801ea68:	2310      	movs	r3, #16
 801ea6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801ea6e:	bf04      	itt	eq
 801ea70:	0200      	lsleq	r0, r0, #8
 801ea72:	3308      	addeq	r3, #8
 801ea74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801ea78:	bf04      	itt	eq
 801ea7a:	0100      	lsleq	r0, r0, #4
 801ea7c:	3304      	addeq	r3, #4
 801ea7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801ea82:	bf04      	itt	eq
 801ea84:	0080      	lsleq	r0, r0, #2
 801ea86:	3302      	addeq	r3, #2
 801ea88:	2800      	cmp	r0, #0
 801ea8a:	db05      	blt.n	801ea98 <__hi0bits+0x38>
 801ea8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801ea90:	f103 0301 	add.w	r3, r3, #1
 801ea94:	bf08      	it	eq
 801ea96:	2320      	moveq	r3, #32
 801ea98:	4618      	mov	r0, r3
 801ea9a:	4770      	bx	lr
 801ea9c:	2300      	movs	r3, #0
 801ea9e:	e7e4      	b.n	801ea6a <__hi0bits+0xa>

0801eaa0 <__lo0bits>:
 801eaa0:	6803      	ldr	r3, [r0, #0]
 801eaa2:	f013 0207 	ands.w	r2, r3, #7
 801eaa6:	4601      	mov	r1, r0
 801eaa8:	d00b      	beq.n	801eac2 <__lo0bits+0x22>
 801eaaa:	07da      	lsls	r2, r3, #31
 801eaac:	d423      	bmi.n	801eaf6 <__lo0bits+0x56>
 801eaae:	0798      	lsls	r0, r3, #30
 801eab0:	bf49      	itett	mi
 801eab2:	085b      	lsrmi	r3, r3, #1
 801eab4:	089b      	lsrpl	r3, r3, #2
 801eab6:	2001      	movmi	r0, #1
 801eab8:	600b      	strmi	r3, [r1, #0]
 801eaba:	bf5c      	itt	pl
 801eabc:	600b      	strpl	r3, [r1, #0]
 801eabe:	2002      	movpl	r0, #2
 801eac0:	4770      	bx	lr
 801eac2:	b298      	uxth	r0, r3
 801eac4:	b9a8      	cbnz	r0, 801eaf2 <__lo0bits+0x52>
 801eac6:	0c1b      	lsrs	r3, r3, #16
 801eac8:	2010      	movs	r0, #16
 801eaca:	b2da      	uxtb	r2, r3
 801eacc:	b90a      	cbnz	r2, 801ead2 <__lo0bits+0x32>
 801eace:	3008      	adds	r0, #8
 801ead0:	0a1b      	lsrs	r3, r3, #8
 801ead2:	071a      	lsls	r2, r3, #28
 801ead4:	bf04      	itt	eq
 801ead6:	091b      	lsreq	r3, r3, #4
 801ead8:	3004      	addeq	r0, #4
 801eada:	079a      	lsls	r2, r3, #30
 801eadc:	bf04      	itt	eq
 801eade:	089b      	lsreq	r3, r3, #2
 801eae0:	3002      	addeq	r0, #2
 801eae2:	07da      	lsls	r2, r3, #31
 801eae4:	d403      	bmi.n	801eaee <__lo0bits+0x4e>
 801eae6:	085b      	lsrs	r3, r3, #1
 801eae8:	f100 0001 	add.w	r0, r0, #1
 801eaec:	d005      	beq.n	801eafa <__lo0bits+0x5a>
 801eaee:	600b      	str	r3, [r1, #0]
 801eaf0:	4770      	bx	lr
 801eaf2:	4610      	mov	r0, r2
 801eaf4:	e7e9      	b.n	801eaca <__lo0bits+0x2a>
 801eaf6:	2000      	movs	r0, #0
 801eaf8:	4770      	bx	lr
 801eafa:	2020      	movs	r0, #32
 801eafc:	4770      	bx	lr
	...

0801eb00 <__i2b>:
 801eb00:	b510      	push	{r4, lr}
 801eb02:	460c      	mov	r4, r1
 801eb04:	2101      	movs	r1, #1
 801eb06:	f7ff feb9 	bl	801e87c <_Balloc>
 801eb0a:	4602      	mov	r2, r0
 801eb0c:	b928      	cbnz	r0, 801eb1a <__i2b+0x1a>
 801eb0e:	4b05      	ldr	r3, [pc, #20]	; (801eb24 <__i2b+0x24>)
 801eb10:	4805      	ldr	r0, [pc, #20]	; (801eb28 <__i2b+0x28>)
 801eb12:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801eb16:	f7fe fa57 	bl	801cfc8 <__assert_func>
 801eb1a:	2301      	movs	r3, #1
 801eb1c:	6144      	str	r4, [r0, #20]
 801eb1e:	6103      	str	r3, [r0, #16]
 801eb20:	bd10      	pop	{r4, pc}
 801eb22:	bf00      	nop
 801eb24:	08021b19 	.word	0x08021b19
 801eb28:	08021c08 	.word	0x08021c08

0801eb2c <__multiply>:
 801eb2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb30:	4691      	mov	r9, r2
 801eb32:	690a      	ldr	r2, [r1, #16]
 801eb34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801eb38:	429a      	cmp	r2, r3
 801eb3a:	bfb8      	it	lt
 801eb3c:	460b      	movlt	r3, r1
 801eb3e:	460c      	mov	r4, r1
 801eb40:	bfbc      	itt	lt
 801eb42:	464c      	movlt	r4, r9
 801eb44:	4699      	movlt	r9, r3
 801eb46:	6927      	ldr	r7, [r4, #16]
 801eb48:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801eb4c:	68a3      	ldr	r3, [r4, #8]
 801eb4e:	6861      	ldr	r1, [r4, #4]
 801eb50:	eb07 060a 	add.w	r6, r7, sl
 801eb54:	42b3      	cmp	r3, r6
 801eb56:	b085      	sub	sp, #20
 801eb58:	bfb8      	it	lt
 801eb5a:	3101      	addlt	r1, #1
 801eb5c:	f7ff fe8e 	bl	801e87c <_Balloc>
 801eb60:	b930      	cbnz	r0, 801eb70 <__multiply+0x44>
 801eb62:	4602      	mov	r2, r0
 801eb64:	4b44      	ldr	r3, [pc, #272]	; (801ec78 <__multiply+0x14c>)
 801eb66:	4845      	ldr	r0, [pc, #276]	; (801ec7c <__multiply+0x150>)
 801eb68:	f240 115d 	movw	r1, #349	; 0x15d
 801eb6c:	f7fe fa2c 	bl	801cfc8 <__assert_func>
 801eb70:	f100 0514 	add.w	r5, r0, #20
 801eb74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801eb78:	462b      	mov	r3, r5
 801eb7a:	2200      	movs	r2, #0
 801eb7c:	4543      	cmp	r3, r8
 801eb7e:	d321      	bcc.n	801ebc4 <__multiply+0x98>
 801eb80:	f104 0314 	add.w	r3, r4, #20
 801eb84:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801eb88:	f109 0314 	add.w	r3, r9, #20
 801eb8c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801eb90:	9202      	str	r2, [sp, #8]
 801eb92:	1b3a      	subs	r2, r7, r4
 801eb94:	3a15      	subs	r2, #21
 801eb96:	f022 0203 	bic.w	r2, r2, #3
 801eb9a:	3204      	adds	r2, #4
 801eb9c:	f104 0115 	add.w	r1, r4, #21
 801eba0:	428f      	cmp	r7, r1
 801eba2:	bf38      	it	cc
 801eba4:	2204      	movcc	r2, #4
 801eba6:	9201      	str	r2, [sp, #4]
 801eba8:	9a02      	ldr	r2, [sp, #8]
 801ebaa:	9303      	str	r3, [sp, #12]
 801ebac:	429a      	cmp	r2, r3
 801ebae:	d80c      	bhi.n	801ebca <__multiply+0x9e>
 801ebb0:	2e00      	cmp	r6, #0
 801ebb2:	dd03      	ble.n	801ebbc <__multiply+0x90>
 801ebb4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801ebb8:	2b00      	cmp	r3, #0
 801ebba:	d05a      	beq.n	801ec72 <__multiply+0x146>
 801ebbc:	6106      	str	r6, [r0, #16]
 801ebbe:	b005      	add	sp, #20
 801ebc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ebc4:	f843 2b04 	str.w	r2, [r3], #4
 801ebc8:	e7d8      	b.n	801eb7c <__multiply+0x50>
 801ebca:	f8b3 a000 	ldrh.w	sl, [r3]
 801ebce:	f1ba 0f00 	cmp.w	sl, #0
 801ebd2:	d024      	beq.n	801ec1e <__multiply+0xf2>
 801ebd4:	f104 0e14 	add.w	lr, r4, #20
 801ebd8:	46a9      	mov	r9, r5
 801ebda:	f04f 0c00 	mov.w	ip, #0
 801ebde:	f85e 2b04 	ldr.w	r2, [lr], #4
 801ebe2:	f8d9 1000 	ldr.w	r1, [r9]
 801ebe6:	fa1f fb82 	uxth.w	fp, r2
 801ebea:	b289      	uxth	r1, r1
 801ebec:	fb0a 110b 	mla	r1, sl, fp, r1
 801ebf0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801ebf4:	f8d9 2000 	ldr.w	r2, [r9]
 801ebf8:	4461      	add	r1, ip
 801ebfa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801ebfe:	fb0a c20b 	mla	r2, sl, fp, ip
 801ec02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801ec06:	b289      	uxth	r1, r1
 801ec08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801ec0c:	4577      	cmp	r7, lr
 801ec0e:	f849 1b04 	str.w	r1, [r9], #4
 801ec12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801ec16:	d8e2      	bhi.n	801ebde <__multiply+0xb2>
 801ec18:	9a01      	ldr	r2, [sp, #4]
 801ec1a:	f845 c002 	str.w	ip, [r5, r2]
 801ec1e:	9a03      	ldr	r2, [sp, #12]
 801ec20:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801ec24:	3304      	adds	r3, #4
 801ec26:	f1b9 0f00 	cmp.w	r9, #0
 801ec2a:	d020      	beq.n	801ec6e <__multiply+0x142>
 801ec2c:	6829      	ldr	r1, [r5, #0]
 801ec2e:	f104 0c14 	add.w	ip, r4, #20
 801ec32:	46ae      	mov	lr, r5
 801ec34:	f04f 0a00 	mov.w	sl, #0
 801ec38:	f8bc b000 	ldrh.w	fp, [ip]
 801ec3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801ec40:	fb09 220b 	mla	r2, r9, fp, r2
 801ec44:	4492      	add	sl, r2
 801ec46:	b289      	uxth	r1, r1
 801ec48:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801ec4c:	f84e 1b04 	str.w	r1, [lr], #4
 801ec50:	f85c 2b04 	ldr.w	r2, [ip], #4
 801ec54:	f8be 1000 	ldrh.w	r1, [lr]
 801ec58:	0c12      	lsrs	r2, r2, #16
 801ec5a:	fb09 1102 	mla	r1, r9, r2, r1
 801ec5e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801ec62:	4567      	cmp	r7, ip
 801ec64:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801ec68:	d8e6      	bhi.n	801ec38 <__multiply+0x10c>
 801ec6a:	9a01      	ldr	r2, [sp, #4]
 801ec6c:	50a9      	str	r1, [r5, r2]
 801ec6e:	3504      	adds	r5, #4
 801ec70:	e79a      	b.n	801eba8 <__multiply+0x7c>
 801ec72:	3e01      	subs	r6, #1
 801ec74:	e79c      	b.n	801ebb0 <__multiply+0x84>
 801ec76:	bf00      	nop
 801ec78:	08021b19 	.word	0x08021b19
 801ec7c:	08021c08 	.word	0x08021c08

0801ec80 <__pow5mult>:
 801ec80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ec84:	4615      	mov	r5, r2
 801ec86:	f012 0203 	ands.w	r2, r2, #3
 801ec8a:	4606      	mov	r6, r0
 801ec8c:	460f      	mov	r7, r1
 801ec8e:	d007      	beq.n	801eca0 <__pow5mult+0x20>
 801ec90:	4c25      	ldr	r4, [pc, #148]	; (801ed28 <__pow5mult+0xa8>)
 801ec92:	3a01      	subs	r2, #1
 801ec94:	2300      	movs	r3, #0
 801ec96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ec9a:	f7ff fe51 	bl	801e940 <__multadd>
 801ec9e:	4607      	mov	r7, r0
 801eca0:	10ad      	asrs	r5, r5, #2
 801eca2:	d03d      	beq.n	801ed20 <__pow5mult+0xa0>
 801eca4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801eca6:	b97c      	cbnz	r4, 801ecc8 <__pow5mult+0x48>
 801eca8:	2010      	movs	r0, #16
 801ecaa:	f7fc f8f5 	bl	801ae98 <malloc>
 801ecae:	4602      	mov	r2, r0
 801ecb0:	6270      	str	r0, [r6, #36]	; 0x24
 801ecb2:	b928      	cbnz	r0, 801ecc0 <__pow5mult+0x40>
 801ecb4:	4b1d      	ldr	r3, [pc, #116]	; (801ed2c <__pow5mult+0xac>)
 801ecb6:	481e      	ldr	r0, [pc, #120]	; (801ed30 <__pow5mult+0xb0>)
 801ecb8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801ecbc:	f7fe f984 	bl	801cfc8 <__assert_func>
 801ecc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ecc4:	6004      	str	r4, [r0, #0]
 801ecc6:	60c4      	str	r4, [r0, #12]
 801ecc8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801eccc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801ecd0:	b94c      	cbnz	r4, 801ece6 <__pow5mult+0x66>
 801ecd2:	f240 2171 	movw	r1, #625	; 0x271
 801ecd6:	4630      	mov	r0, r6
 801ecd8:	f7ff ff12 	bl	801eb00 <__i2b>
 801ecdc:	2300      	movs	r3, #0
 801ecde:	f8c8 0008 	str.w	r0, [r8, #8]
 801ece2:	4604      	mov	r4, r0
 801ece4:	6003      	str	r3, [r0, #0]
 801ece6:	f04f 0900 	mov.w	r9, #0
 801ecea:	07eb      	lsls	r3, r5, #31
 801ecec:	d50a      	bpl.n	801ed04 <__pow5mult+0x84>
 801ecee:	4639      	mov	r1, r7
 801ecf0:	4622      	mov	r2, r4
 801ecf2:	4630      	mov	r0, r6
 801ecf4:	f7ff ff1a 	bl	801eb2c <__multiply>
 801ecf8:	4639      	mov	r1, r7
 801ecfa:	4680      	mov	r8, r0
 801ecfc:	4630      	mov	r0, r6
 801ecfe:	f7ff fdfd 	bl	801e8fc <_Bfree>
 801ed02:	4647      	mov	r7, r8
 801ed04:	106d      	asrs	r5, r5, #1
 801ed06:	d00b      	beq.n	801ed20 <__pow5mult+0xa0>
 801ed08:	6820      	ldr	r0, [r4, #0]
 801ed0a:	b938      	cbnz	r0, 801ed1c <__pow5mult+0x9c>
 801ed0c:	4622      	mov	r2, r4
 801ed0e:	4621      	mov	r1, r4
 801ed10:	4630      	mov	r0, r6
 801ed12:	f7ff ff0b 	bl	801eb2c <__multiply>
 801ed16:	6020      	str	r0, [r4, #0]
 801ed18:	f8c0 9000 	str.w	r9, [r0]
 801ed1c:	4604      	mov	r4, r0
 801ed1e:	e7e4      	b.n	801ecea <__pow5mult+0x6a>
 801ed20:	4638      	mov	r0, r7
 801ed22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ed26:	bf00      	nop
 801ed28:	08021d58 	.word	0x08021d58
 801ed2c:	08021900 	.word	0x08021900
 801ed30:	08021c08 	.word	0x08021c08

0801ed34 <__lshift>:
 801ed34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ed38:	460c      	mov	r4, r1
 801ed3a:	6849      	ldr	r1, [r1, #4]
 801ed3c:	6923      	ldr	r3, [r4, #16]
 801ed3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ed42:	68a3      	ldr	r3, [r4, #8]
 801ed44:	4607      	mov	r7, r0
 801ed46:	4691      	mov	r9, r2
 801ed48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ed4c:	f108 0601 	add.w	r6, r8, #1
 801ed50:	42b3      	cmp	r3, r6
 801ed52:	db0b      	blt.n	801ed6c <__lshift+0x38>
 801ed54:	4638      	mov	r0, r7
 801ed56:	f7ff fd91 	bl	801e87c <_Balloc>
 801ed5a:	4605      	mov	r5, r0
 801ed5c:	b948      	cbnz	r0, 801ed72 <__lshift+0x3e>
 801ed5e:	4602      	mov	r2, r0
 801ed60:	4b2a      	ldr	r3, [pc, #168]	; (801ee0c <__lshift+0xd8>)
 801ed62:	482b      	ldr	r0, [pc, #172]	; (801ee10 <__lshift+0xdc>)
 801ed64:	f240 11d9 	movw	r1, #473	; 0x1d9
 801ed68:	f7fe f92e 	bl	801cfc8 <__assert_func>
 801ed6c:	3101      	adds	r1, #1
 801ed6e:	005b      	lsls	r3, r3, #1
 801ed70:	e7ee      	b.n	801ed50 <__lshift+0x1c>
 801ed72:	2300      	movs	r3, #0
 801ed74:	f100 0114 	add.w	r1, r0, #20
 801ed78:	f100 0210 	add.w	r2, r0, #16
 801ed7c:	4618      	mov	r0, r3
 801ed7e:	4553      	cmp	r3, sl
 801ed80:	db37      	blt.n	801edf2 <__lshift+0xbe>
 801ed82:	6920      	ldr	r0, [r4, #16]
 801ed84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ed88:	f104 0314 	add.w	r3, r4, #20
 801ed8c:	f019 091f 	ands.w	r9, r9, #31
 801ed90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801ed94:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801ed98:	d02f      	beq.n	801edfa <__lshift+0xc6>
 801ed9a:	f1c9 0e20 	rsb	lr, r9, #32
 801ed9e:	468a      	mov	sl, r1
 801eda0:	f04f 0c00 	mov.w	ip, #0
 801eda4:	681a      	ldr	r2, [r3, #0]
 801eda6:	fa02 f209 	lsl.w	r2, r2, r9
 801edaa:	ea42 020c 	orr.w	r2, r2, ip
 801edae:	f84a 2b04 	str.w	r2, [sl], #4
 801edb2:	f853 2b04 	ldr.w	r2, [r3], #4
 801edb6:	4298      	cmp	r0, r3
 801edb8:	fa22 fc0e 	lsr.w	ip, r2, lr
 801edbc:	d8f2      	bhi.n	801eda4 <__lshift+0x70>
 801edbe:	1b03      	subs	r3, r0, r4
 801edc0:	3b15      	subs	r3, #21
 801edc2:	f023 0303 	bic.w	r3, r3, #3
 801edc6:	3304      	adds	r3, #4
 801edc8:	f104 0215 	add.w	r2, r4, #21
 801edcc:	4290      	cmp	r0, r2
 801edce:	bf38      	it	cc
 801edd0:	2304      	movcc	r3, #4
 801edd2:	f841 c003 	str.w	ip, [r1, r3]
 801edd6:	f1bc 0f00 	cmp.w	ip, #0
 801edda:	d001      	beq.n	801ede0 <__lshift+0xac>
 801eddc:	f108 0602 	add.w	r6, r8, #2
 801ede0:	3e01      	subs	r6, #1
 801ede2:	4638      	mov	r0, r7
 801ede4:	612e      	str	r6, [r5, #16]
 801ede6:	4621      	mov	r1, r4
 801ede8:	f7ff fd88 	bl	801e8fc <_Bfree>
 801edec:	4628      	mov	r0, r5
 801edee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801edf2:	f842 0f04 	str.w	r0, [r2, #4]!
 801edf6:	3301      	adds	r3, #1
 801edf8:	e7c1      	b.n	801ed7e <__lshift+0x4a>
 801edfa:	3904      	subs	r1, #4
 801edfc:	f853 2b04 	ldr.w	r2, [r3], #4
 801ee00:	f841 2f04 	str.w	r2, [r1, #4]!
 801ee04:	4298      	cmp	r0, r3
 801ee06:	d8f9      	bhi.n	801edfc <__lshift+0xc8>
 801ee08:	e7ea      	b.n	801ede0 <__lshift+0xac>
 801ee0a:	bf00      	nop
 801ee0c:	08021b19 	.word	0x08021b19
 801ee10:	08021c08 	.word	0x08021c08

0801ee14 <__mcmp>:
 801ee14:	b530      	push	{r4, r5, lr}
 801ee16:	6902      	ldr	r2, [r0, #16]
 801ee18:	690c      	ldr	r4, [r1, #16]
 801ee1a:	1b12      	subs	r2, r2, r4
 801ee1c:	d10e      	bne.n	801ee3c <__mcmp+0x28>
 801ee1e:	f100 0314 	add.w	r3, r0, #20
 801ee22:	3114      	adds	r1, #20
 801ee24:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801ee28:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801ee2c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801ee30:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801ee34:	42a5      	cmp	r5, r4
 801ee36:	d003      	beq.n	801ee40 <__mcmp+0x2c>
 801ee38:	d305      	bcc.n	801ee46 <__mcmp+0x32>
 801ee3a:	2201      	movs	r2, #1
 801ee3c:	4610      	mov	r0, r2
 801ee3e:	bd30      	pop	{r4, r5, pc}
 801ee40:	4283      	cmp	r3, r0
 801ee42:	d3f3      	bcc.n	801ee2c <__mcmp+0x18>
 801ee44:	e7fa      	b.n	801ee3c <__mcmp+0x28>
 801ee46:	f04f 32ff 	mov.w	r2, #4294967295
 801ee4a:	e7f7      	b.n	801ee3c <__mcmp+0x28>

0801ee4c <__mdiff>:
 801ee4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee50:	460c      	mov	r4, r1
 801ee52:	4606      	mov	r6, r0
 801ee54:	4611      	mov	r1, r2
 801ee56:	4620      	mov	r0, r4
 801ee58:	4690      	mov	r8, r2
 801ee5a:	f7ff ffdb 	bl	801ee14 <__mcmp>
 801ee5e:	1e05      	subs	r5, r0, #0
 801ee60:	d110      	bne.n	801ee84 <__mdiff+0x38>
 801ee62:	4629      	mov	r1, r5
 801ee64:	4630      	mov	r0, r6
 801ee66:	f7ff fd09 	bl	801e87c <_Balloc>
 801ee6a:	b930      	cbnz	r0, 801ee7a <__mdiff+0x2e>
 801ee6c:	4b3a      	ldr	r3, [pc, #232]	; (801ef58 <__mdiff+0x10c>)
 801ee6e:	4602      	mov	r2, r0
 801ee70:	f240 2132 	movw	r1, #562	; 0x232
 801ee74:	4839      	ldr	r0, [pc, #228]	; (801ef5c <__mdiff+0x110>)
 801ee76:	f7fe f8a7 	bl	801cfc8 <__assert_func>
 801ee7a:	2301      	movs	r3, #1
 801ee7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801ee80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee84:	bfa4      	itt	ge
 801ee86:	4643      	movge	r3, r8
 801ee88:	46a0      	movge	r8, r4
 801ee8a:	4630      	mov	r0, r6
 801ee8c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801ee90:	bfa6      	itte	ge
 801ee92:	461c      	movge	r4, r3
 801ee94:	2500      	movge	r5, #0
 801ee96:	2501      	movlt	r5, #1
 801ee98:	f7ff fcf0 	bl	801e87c <_Balloc>
 801ee9c:	b920      	cbnz	r0, 801eea8 <__mdiff+0x5c>
 801ee9e:	4b2e      	ldr	r3, [pc, #184]	; (801ef58 <__mdiff+0x10c>)
 801eea0:	4602      	mov	r2, r0
 801eea2:	f44f 7110 	mov.w	r1, #576	; 0x240
 801eea6:	e7e5      	b.n	801ee74 <__mdiff+0x28>
 801eea8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801eeac:	6926      	ldr	r6, [r4, #16]
 801eeae:	60c5      	str	r5, [r0, #12]
 801eeb0:	f104 0914 	add.w	r9, r4, #20
 801eeb4:	f108 0514 	add.w	r5, r8, #20
 801eeb8:	f100 0e14 	add.w	lr, r0, #20
 801eebc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801eec0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801eec4:	f108 0210 	add.w	r2, r8, #16
 801eec8:	46f2      	mov	sl, lr
 801eeca:	2100      	movs	r1, #0
 801eecc:	f859 3b04 	ldr.w	r3, [r9], #4
 801eed0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801eed4:	fa1f f883 	uxth.w	r8, r3
 801eed8:	fa11 f18b 	uxtah	r1, r1, fp
 801eedc:	0c1b      	lsrs	r3, r3, #16
 801eede:	eba1 0808 	sub.w	r8, r1, r8
 801eee2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801eee6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801eeea:	fa1f f888 	uxth.w	r8, r8
 801eeee:	1419      	asrs	r1, r3, #16
 801eef0:	454e      	cmp	r6, r9
 801eef2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801eef6:	f84a 3b04 	str.w	r3, [sl], #4
 801eefa:	d8e7      	bhi.n	801eecc <__mdiff+0x80>
 801eefc:	1b33      	subs	r3, r6, r4
 801eefe:	3b15      	subs	r3, #21
 801ef00:	f023 0303 	bic.w	r3, r3, #3
 801ef04:	3304      	adds	r3, #4
 801ef06:	3415      	adds	r4, #21
 801ef08:	42a6      	cmp	r6, r4
 801ef0a:	bf38      	it	cc
 801ef0c:	2304      	movcc	r3, #4
 801ef0e:	441d      	add	r5, r3
 801ef10:	4473      	add	r3, lr
 801ef12:	469e      	mov	lr, r3
 801ef14:	462e      	mov	r6, r5
 801ef16:	4566      	cmp	r6, ip
 801ef18:	d30e      	bcc.n	801ef38 <__mdiff+0xec>
 801ef1a:	f10c 0203 	add.w	r2, ip, #3
 801ef1e:	1b52      	subs	r2, r2, r5
 801ef20:	f022 0203 	bic.w	r2, r2, #3
 801ef24:	3d03      	subs	r5, #3
 801ef26:	45ac      	cmp	ip, r5
 801ef28:	bf38      	it	cc
 801ef2a:	2200      	movcc	r2, #0
 801ef2c:	441a      	add	r2, r3
 801ef2e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801ef32:	b17b      	cbz	r3, 801ef54 <__mdiff+0x108>
 801ef34:	6107      	str	r7, [r0, #16]
 801ef36:	e7a3      	b.n	801ee80 <__mdiff+0x34>
 801ef38:	f856 8b04 	ldr.w	r8, [r6], #4
 801ef3c:	fa11 f288 	uxtah	r2, r1, r8
 801ef40:	1414      	asrs	r4, r2, #16
 801ef42:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801ef46:	b292      	uxth	r2, r2
 801ef48:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801ef4c:	f84e 2b04 	str.w	r2, [lr], #4
 801ef50:	1421      	asrs	r1, r4, #16
 801ef52:	e7e0      	b.n	801ef16 <__mdiff+0xca>
 801ef54:	3f01      	subs	r7, #1
 801ef56:	e7ea      	b.n	801ef2e <__mdiff+0xe2>
 801ef58:	08021b19 	.word	0x08021b19
 801ef5c:	08021c08 	.word	0x08021c08

0801ef60 <__ulp>:
 801ef60:	b082      	sub	sp, #8
 801ef62:	ed8d 0b00 	vstr	d0, [sp]
 801ef66:	9b01      	ldr	r3, [sp, #4]
 801ef68:	4912      	ldr	r1, [pc, #72]	; (801efb4 <__ulp+0x54>)
 801ef6a:	4019      	ands	r1, r3
 801ef6c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801ef70:	2900      	cmp	r1, #0
 801ef72:	dd05      	ble.n	801ef80 <__ulp+0x20>
 801ef74:	2200      	movs	r2, #0
 801ef76:	460b      	mov	r3, r1
 801ef78:	ec43 2b10 	vmov	d0, r2, r3
 801ef7c:	b002      	add	sp, #8
 801ef7e:	4770      	bx	lr
 801ef80:	4249      	negs	r1, r1
 801ef82:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801ef86:	ea4f 5021 	mov.w	r0, r1, asr #20
 801ef8a:	f04f 0200 	mov.w	r2, #0
 801ef8e:	f04f 0300 	mov.w	r3, #0
 801ef92:	da04      	bge.n	801ef9e <__ulp+0x3e>
 801ef94:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801ef98:	fa41 f300 	asr.w	r3, r1, r0
 801ef9c:	e7ec      	b.n	801ef78 <__ulp+0x18>
 801ef9e:	f1a0 0114 	sub.w	r1, r0, #20
 801efa2:	291e      	cmp	r1, #30
 801efa4:	bfda      	itte	le
 801efa6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801efaa:	fa20 f101 	lsrle.w	r1, r0, r1
 801efae:	2101      	movgt	r1, #1
 801efb0:	460a      	mov	r2, r1
 801efb2:	e7e1      	b.n	801ef78 <__ulp+0x18>
 801efb4:	7ff00000 	.word	0x7ff00000

0801efb8 <__b2d>:
 801efb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801efba:	6905      	ldr	r5, [r0, #16]
 801efbc:	f100 0714 	add.w	r7, r0, #20
 801efc0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801efc4:	1f2e      	subs	r6, r5, #4
 801efc6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801efca:	4620      	mov	r0, r4
 801efcc:	f7ff fd48 	bl	801ea60 <__hi0bits>
 801efd0:	f1c0 0320 	rsb	r3, r0, #32
 801efd4:	280a      	cmp	r0, #10
 801efd6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801f054 <__b2d+0x9c>
 801efda:	600b      	str	r3, [r1, #0]
 801efdc:	dc14      	bgt.n	801f008 <__b2d+0x50>
 801efde:	f1c0 0e0b 	rsb	lr, r0, #11
 801efe2:	fa24 f10e 	lsr.w	r1, r4, lr
 801efe6:	42b7      	cmp	r7, r6
 801efe8:	ea41 030c 	orr.w	r3, r1, ip
 801efec:	bf34      	ite	cc
 801efee:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801eff2:	2100      	movcs	r1, #0
 801eff4:	3015      	adds	r0, #21
 801eff6:	fa04 f000 	lsl.w	r0, r4, r0
 801effa:	fa21 f10e 	lsr.w	r1, r1, lr
 801effe:	ea40 0201 	orr.w	r2, r0, r1
 801f002:	ec43 2b10 	vmov	d0, r2, r3
 801f006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f008:	42b7      	cmp	r7, r6
 801f00a:	bf3a      	itte	cc
 801f00c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801f010:	f1a5 0608 	subcc.w	r6, r5, #8
 801f014:	2100      	movcs	r1, #0
 801f016:	380b      	subs	r0, #11
 801f018:	d017      	beq.n	801f04a <__b2d+0x92>
 801f01a:	f1c0 0c20 	rsb	ip, r0, #32
 801f01e:	fa04 f500 	lsl.w	r5, r4, r0
 801f022:	42be      	cmp	r6, r7
 801f024:	fa21 f40c 	lsr.w	r4, r1, ip
 801f028:	ea45 0504 	orr.w	r5, r5, r4
 801f02c:	bf8c      	ite	hi
 801f02e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801f032:	2400      	movls	r4, #0
 801f034:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801f038:	fa01 f000 	lsl.w	r0, r1, r0
 801f03c:	fa24 f40c 	lsr.w	r4, r4, ip
 801f040:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801f044:	ea40 0204 	orr.w	r2, r0, r4
 801f048:	e7db      	b.n	801f002 <__b2d+0x4a>
 801f04a:	ea44 030c 	orr.w	r3, r4, ip
 801f04e:	460a      	mov	r2, r1
 801f050:	e7d7      	b.n	801f002 <__b2d+0x4a>
 801f052:	bf00      	nop
 801f054:	3ff00000 	.word	0x3ff00000

0801f058 <__d2b>:
 801f058:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801f05c:	4689      	mov	r9, r1
 801f05e:	2101      	movs	r1, #1
 801f060:	ec57 6b10 	vmov	r6, r7, d0
 801f064:	4690      	mov	r8, r2
 801f066:	f7ff fc09 	bl	801e87c <_Balloc>
 801f06a:	4604      	mov	r4, r0
 801f06c:	b930      	cbnz	r0, 801f07c <__d2b+0x24>
 801f06e:	4602      	mov	r2, r0
 801f070:	4b25      	ldr	r3, [pc, #148]	; (801f108 <__d2b+0xb0>)
 801f072:	4826      	ldr	r0, [pc, #152]	; (801f10c <__d2b+0xb4>)
 801f074:	f240 310a 	movw	r1, #778	; 0x30a
 801f078:	f7fd ffa6 	bl	801cfc8 <__assert_func>
 801f07c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801f080:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801f084:	bb35      	cbnz	r5, 801f0d4 <__d2b+0x7c>
 801f086:	2e00      	cmp	r6, #0
 801f088:	9301      	str	r3, [sp, #4]
 801f08a:	d028      	beq.n	801f0de <__d2b+0x86>
 801f08c:	4668      	mov	r0, sp
 801f08e:	9600      	str	r6, [sp, #0]
 801f090:	f7ff fd06 	bl	801eaa0 <__lo0bits>
 801f094:	9900      	ldr	r1, [sp, #0]
 801f096:	b300      	cbz	r0, 801f0da <__d2b+0x82>
 801f098:	9a01      	ldr	r2, [sp, #4]
 801f09a:	f1c0 0320 	rsb	r3, r0, #32
 801f09e:	fa02 f303 	lsl.w	r3, r2, r3
 801f0a2:	430b      	orrs	r3, r1
 801f0a4:	40c2      	lsrs	r2, r0
 801f0a6:	6163      	str	r3, [r4, #20]
 801f0a8:	9201      	str	r2, [sp, #4]
 801f0aa:	9b01      	ldr	r3, [sp, #4]
 801f0ac:	61a3      	str	r3, [r4, #24]
 801f0ae:	2b00      	cmp	r3, #0
 801f0b0:	bf14      	ite	ne
 801f0b2:	2202      	movne	r2, #2
 801f0b4:	2201      	moveq	r2, #1
 801f0b6:	6122      	str	r2, [r4, #16]
 801f0b8:	b1d5      	cbz	r5, 801f0f0 <__d2b+0x98>
 801f0ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801f0be:	4405      	add	r5, r0
 801f0c0:	f8c9 5000 	str.w	r5, [r9]
 801f0c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801f0c8:	f8c8 0000 	str.w	r0, [r8]
 801f0cc:	4620      	mov	r0, r4
 801f0ce:	b003      	add	sp, #12
 801f0d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f0d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801f0d8:	e7d5      	b.n	801f086 <__d2b+0x2e>
 801f0da:	6161      	str	r1, [r4, #20]
 801f0dc:	e7e5      	b.n	801f0aa <__d2b+0x52>
 801f0de:	a801      	add	r0, sp, #4
 801f0e0:	f7ff fcde 	bl	801eaa0 <__lo0bits>
 801f0e4:	9b01      	ldr	r3, [sp, #4]
 801f0e6:	6163      	str	r3, [r4, #20]
 801f0e8:	2201      	movs	r2, #1
 801f0ea:	6122      	str	r2, [r4, #16]
 801f0ec:	3020      	adds	r0, #32
 801f0ee:	e7e3      	b.n	801f0b8 <__d2b+0x60>
 801f0f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801f0f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801f0f8:	f8c9 0000 	str.w	r0, [r9]
 801f0fc:	6918      	ldr	r0, [r3, #16]
 801f0fe:	f7ff fcaf 	bl	801ea60 <__hi0bits>
 801f102:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801f106:	e7df      	b.n	801f0c8 <__d2b+0x70>
 801f108:	08021b19 	.word	0x08021b19
 801f10c:	08021c08 	.word	0x08021c08

0801f110 <__ratio>:
 801f110:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f114:	4688      	mov	r8, r1
 801f116:	4669      	mov	r1, sp
 801f118:	4681      	mov	r9, r0
 801f11a:	f7ff ff4d 	bl	801efb8 <__b2d>
 801f11e:	a901      	add	r1, sp, #4
 801f120:	4640      	mov	r0, r8
 801f122:	ec55 4b10 	vmov	r4, r5, d0
 801f126:	f7ff ff47 	bl	801efb8 <__b2d>
 801f12a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f12e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801f132:	eba3 0c02 	sub.w	ip, r3, r2
 801f136:	e9dd 3200 	ldrd	r3, r2, [sp]
 801f13a:	1a9b      	subs	r3, r3, r2
 801f13c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801f140:	ec51 0b10 	vmov	r0, r1, d0
 801f144:	2b00      	cmp	r3, #0
 801f146:	bfd6      	itet	le
 801f148:	460a      	movle	r2, r1
 801f14a:	462a      	movgt	r2, r5
 801f14c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801f150:	468b      	mov	fp, r1
 801f152:	462f      	mov	r7, r5
 801f154:	bfd4      	ite	le
 801f156:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801f15a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801f15e:	4620      	mov	r0, r4
 801f160:	ee10 2a10 	vmov	r2, s0
 801f164:	465b      	mov	r3, fp
 801f166:	4639      	mov	r1, r7
 801f168:	f7e1 fb88 	bl	800087c <__aeabi_ddiv>
 801f16c:	ec41 0b10 	vmov	d0, r0, r1
 801f170:	b003      	add	sp, #12
 801f172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f176 <__copybits>:
 801f176:	3901      	subs	r1, #1
 801f178:	b570      	push	{r4, r5, r6, lr}
 801f17a:	1149      	asrs	r1, r1, #5
 801f17c:	6914      	ldr	r4, [r2, #16]
 801f17e:	3101      	adds	r1, #1
 801f180:	f102 0314 	add.w	r3, r2, #20
 801f184:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801f188:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801f18c:	1f05      	subs	r5, r0, #4
 801f18e:	42a3      	cmp	r3, r4
 801f190:	d30c      	bcc.n	801f1ac <__copybits+0x36>
 801f192:	1aa3      	subs	r3, r4, r2
 801f194:	3b11      	subs	r3, #17
 801f196:	f023 0303 	bic.w	r3, r3, #3
 801f19a:	3211      	adds	r2, #17
 801f19c:	42a2      	cmp	r2, r4
 801f19e:	bf88      	it	hi
 801f1a0:	2300      	movhi	r3, #0
 801f1a2:	4418      	add	r0, r3
 801f1a4:	2300      	movs	r3, #0
 801f1a6:	4288      	cmp	r0, r1
 801f1a8:	d305      	bcc.n	801f1b6 <__copybits+0x40>
 801f1aa:	bd70      	pop	{r4, r5, r6, pc}
 801f1ac:	f853 6b04 	ldr.w	r6, [r3], #4
 801f1b0:	f845 6f04 	str.w	r6, [r5, #4]!
 801f1b4:	e7eb      	b.n	801f18e <__copybits+0x18>
 801f1b6:	f840 3b04 	str.w	r3, [r0], #4
 801f1ba:	e7f4      	b.n	801f1a6 <__copybits+0x30>

0801f1bc <__any_on>:
 801f1bc:	f100 0214 	add.w	r2, r0, #20
 801f1c0:	6900      	ldr	r0, [r0, #16]
 801f1c2:	114b      	asrs	r3, r1, #5
 801f1c4:	4298      	cmp	r0, r3
 801f1c6:	b510      	push	{r4, lr}
 801f1c8:	db11      	blt.n	801f1ee <__any_on+0x32>
 801f1ca:	dd0a      	ble.n	801f1e2 <__any_on+0x26>
 801f1cc:	f011 011f 	ands.w	r1, r1, #31
 801f1d0:	d007      	beq.n	801f1e2 <__any_on+0x26>
 801f1d2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801f1d6:	fa24 f001 	lsr.w	r0, r4, r1
 801f1da:	fa00 f101 	lsl.w	r1, r0, r1
 801f1de:	428c      	cmp	r4, r1
 801f1e0:	d10b      	bne.n	801f1fa <__any_on+0x3e>
 801f1e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f1e6:	4293      	cmp	r3, r2
 801f1e8:	d803      	bhi.n	801f1f2 <__any_on+0x36>
 801f1ea:	2000      	movs	r0, #0
 801f1ec:	bd10      	pop	{r4, pc}
 801f1ee:	4603      	mov	r3, r0
 801f1f0:	e7f7      	b.n	801f1e2 <__any_on+0x26>
 801f1f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f1f6:	2900      	cmp	r1, #0
 801f1f8:	d0f5      	beq.n	801f1e6 <__any_on+0x2a>
 801f1fa:	2001      	movs	r0, #1
 801f1fc:	e7f6      	b.n	801f1ec <__any_on+0x30>

0801f1fe <_calloc_r>:
 801f1fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f200:	fba1 2402 	umull	r2, r4, r1, r2
 801f204:	b94c      	cbnz	r4, 801f21a <_calloc_r+0x1c>
 801f206:	4611      	mov	r1, r2
 801f208:	9201      	str	r2, [sp, #4]
 801f20a:	f7fb fef1 	bl	801aff0 <_malloc_r>
 801f20e:	9a01      	ldr	r2, [sp, #4]
 801f210:	4605      	mov	r5, r0
 801f212:	b930      	cbnz	r0, 801f222 <_calloc_r+0x24>
 801f214:	4628      	mov	r0, r5
 801f216:	b003      	add	sp, #12
 801f218:	bd30      	pop	{r4, r5, pc}
 801f21a:	220c      	movs	r2, #12
 801f21c:	6002      	str	r2, [r0, #0]
 801f21e:	2500      	movs	r5, #0
 801f220:	e7f8      	b.n	801f214 <_calloc_r+0x16>
 801f222:	4621      	mov	r1, r4
 801f224:	f7fb fe70 	bl	801af08 <memset>
 801f228:	e7f4      	b.n	801f214 <_calloc_r+0x16>

0801f22a <__ssputs_r>:
 801f22a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f22e:	688e      	ldr	r6, [r1, #8]
 801f230:	429e      	cmp	r6, r3
 801f232:	4682      	mov	sl, r0
 801f234:	460c      	mov	r4, r1
 801f236:	4690      	mov	r8, r2
 801f238:	461f      	mov	r7, r3
 801f23a:	d838      	bhi.n	801f2ae <__ssputs_r+0x84>
 801f23c:	898a      	ldrh	r2, [r1, #12]
 801f23e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801f242:	d032      	beq.n	801f2aa <__ssputs_r+0x80>
 801f244:	6825      	ldr	r5, [r4, #0]
 801f246:	6909      	ldr	r1, [r1, #16]
 801f248:	eba5 0901 	sub.w	r9, r5, r1
 801f24c:	6965      	ldr	r5, [r4, #20]
 801f24e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f252:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f256:	3301      	adds	r3, #1
 801f258:	444b      	add	r3, r9
 801f25a:	106d      	asrs	r5, r5, #1
 801f25c:	429d      	cmp	r5, r3
 801f25e:	bf38      	it	cc
 801f260:	461d      	movcc	r5, r3
 801f262:	0553      	lsls	r3, r2, #21
 801f264:	d531      	bpl.n	801f2ca <__ssputs_r+0xa0>
 801f266:	4629      	mov	r1, r5
 801f268:	f7fb fec2 	bl	801aff0 <_malloc_r>
 801f26c:	4606      	mov	r6, r0
 801f26e:	b950      	cbnz	r0, 801f286 <__ssputs_r+0x5c>
 801f270:	230c      	movs	r3, #12
 801f272:	f8ca 3000 	str.w	r3, [sl]
 801f276:	89a3      	ldrh	r3, [r4, #12]
 801f278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f27c:	81a3      	strh	r3, [r4, #12]
 801f27e:	f04f 30ff 	mov.w	r0, #4294967295
 801f282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f286:	6921      	ldr	r1, [r4, #16]
 801f288:	464a      	mov	r2, r9
 801f28a:	f7fb fe15 	bl	801aeb8 <memcpy>
 801f28e:	89a3      	ldrh	r3, [r4, #12]
 801f290:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801f294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f298:	81a3      	strh	r3, [r4, #12]
 801f29a:	6126      	str	r6, [r4, #16]
 801f29c:	6165      	str	r5, [r4, #20]
 801f29e:	444e      	add	r6, r9
 801f2a0:	eba5 0509 	sub.w	r5, r5, r9
 801f2a4:	6026      	str	r6, [r4, #0]
 801f2a6:	60a5      	str	r5, [r4, #8]
 801f2a8:	463e      	mov	r6, r7
 801f2aa:	42be      	cmp	r6, r7
 801f2ac:	d900      	bls.n	801f2b0 <__ssputs_r+0x86>
 801f2ae:	463e      	mov	r6, r7
 801f2b0:	6820      	ldr	r0, [r4, #0]
 801f2b2:	4632      	mov	r2, r6
 801f2b4:	4641      	mov	r1, r8
 801f2b6:	f7fb fe0d 	bl	801aed4 <memmove>
 801f2ba:	68a3      	ldr	r3, [r4, #8]
 801f2bc:	1b9b      	subs	r3, r3, r6
 801f2be:	60a3      	str	r3, [r4, #8]
 801f2c0:	6823      	ldr	r3, [r4, #0]
 801f2c2:	4433      	add	r3, r6
 801f2c4:	6023      	str	r3, [r4, #0]
 801f2c6:	2000      	movs	r0, #0
 801f2c8:	e7db      	b.n	801f282 <__ssputs_r+0x58>
 801f2ca:	462a      	mov	r2, r5
 801f2cc:	f000 fb2e 	bl	801f92c <_realloc_r>
 801f2d0:	4606      	mov	r6, r0
 801f2d2:	2800      	cmp	r0, #0
 801f2d4:	d1e1      	bne.n	801f29a <__ssputs_r+0x70>
 801f2d6:	6921      	ldr	r1, [r4, #16]
 801f2d8:	4650      	mov	r0, sl
 801f2da:	f7fb fe1d 	bl	801af18 <_free_r>
 801f2de:	e7c7      	b.n	801f270 <__ssputs_r+0x46>

0801f2e0 <_svfiprintf_r>:
 801f2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2e4:	4698      	mov	r8, r3
 801f2e6:	898b      	ldrh	r3, [r1, #12]
 801f2e8:	061b      	lsls	r3, r3, #24
 801f2ea:	b09d      	sub	sp, #116	; 0x74
 801f2ec:	4607      	mov	r7, r0
 801f2ee:	460d      	mov	r5, r1
 801f2f0:	4614      	mov	r4, r2
 801f2f2:	d50e      	bpl.n	801f312 <_svfiprintf_r+0x32>
 801f2f4:	690b      	ldr	r3, [r1, #16]
 801f2f6:	b963      	cbnz	r3, 801f312 <_svfiprintf_r+0x32>
 801f2f8:	2140      	movs	r1, #64	; 0x40
 801f2fa:	f7fb fe79 	bl	801aff0 <_malloc_r>
 801f2fe:	6028      	str	r0, [r5, #0]
 801f300:	6128      	str	r0, [r5, #16]
 801f302:	b920      	cbnz	r0, 801f30e <_svfiprintf_r+0x2e>
 801f304:	230c      	movs	r3, #12
 801f306:	603b      	str	r3, [r7, #0]
 801f308:	f04f 30ff 	mov.w	r0, #4294967295
 801f30c:	e0d1      	b.n	801f4b2 <_svfiprintf_r+0x1d2>
 801f30e:	2340      	movs	r3, #64	; 0x40
 801f310:	616b      	str	r3, [r5, #20]
 801f312:	2300      	movs	r3, #0
 801f314:	9309      	str	r3, [sp, #36]	; 0x24
 801f316:	2320      	movs	r3, #32
 801f318:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f31c:	f8cd 800c 	str.w	r8, [sp, #12]
 801f320:	2330      	movs	r3, #48	; 0x30
 801f322:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801f4cc <_svfiprintf_r+0x1ec>
 801f326:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f32a:	f04f 0901 	mov.w	r9, #1
 801f32e:	4623      	mov	r3, r4
 801f330:	469a      	mov	sl, r3
 801f332:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f336:	b10a      	cbz	r2, 801f33c <_svfiprintf_r+0x5c>
 801f338:	2a25      	cmp	r2, #37	; 0x25
 801f33a:	d1f9      	bne.n	801f330 <_svfiprintf_r+0x50>
 801f33c:	ebba 0b04 	subs.w	fp, sl, r4
 801f340:	d00b      	beq.n	801f35a <_svfiprintf_r+0x7a>
 801f342:	465b      	mov	r3, fp
 801f344:	4622      	mov	r2, r4
 801f346:	4629      	mov	r1, r5
 801f348:	4638      	mov	r0, r7
 801f34a:	f7ff ff6e 	bl	801f22a <__ssputs_r>
 801f34e:	3001      	adds	r0, #1
 801f350:	f000 80aa 	beq.w	801f4a8 <_svfiprintf_r+0x1c8>
 801f354:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f356:	445a      	add	r2, fp
 801f358:	9209      	str	r2, [sp, #36]	; 0x24
 801f35a:	f89a 3000 	ldrb.w	r3, [sl]
 801f35e:	2b00      	cmp	r3, #0
 801f360:	f000 80a2 	beq.w	801f4a8 <_svfiprintf_r+0x1c8>
 801f364:	2300      	movs	r3, #0
 801f366:	f04f 32ff 	mov.w	r2, #4294967295
 801f36a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f36e:	f10a 0a01 	add.w	sl, sl, #1
 801f372:	9304      	str	r3, [sp, #16]
 801f374:	9307      	str	r3, [sp, #28]
 801f376:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f37a:	931a      	str	r3, [sp, #104]	; 0x68
 801f37c:	4654      	mov	r4, sl
 801f37e:	2205      	movs	r2, #5
 801f380:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f384:	4851      	ldr	r0, [pc, #324]	; (801f4cc <_svfiprintf_r+0x1ec>)
 801f386:	f7e0 ff43 	bl	8000210 <memchr>
 801f38a:	9a04      	ldr	r2, [sp, #16]
 801f38c:	b9d8      	cbnz	r0, 801f3c6 <_svfiprintf_r+0xe6>
 801f38e:	06d0      	lsls	r0, r2, #27
 801f390:	bf44      	itt	mi
 801f392:	2320      	movmi	r3, #32
 801f394:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f398:	0711      	lsls	r1, r2, #28
 801f39a:	bf44      	itt	mi
 801f39c:	232b      	movmi	r3, #43	; 0x2b
 801f39e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f3a2:	f89a 3000 	ldrb.w	r3, [sl]
 801f3a6:	2b2a      	cmp	r3, #42	; 0x2a
 801f3a8:	d015      	beq.n	801f3d6 <_svfiprintf_r+0xf6>
 801f3aa:	9a07      	ldr	r2, [sp, #28]
 801f3ac:	4654      	mov	r4, sl
 801f3ae:	2000      	movs	r0, #0
 801f3b0:	f04f 0c0a 	mov.w	ip, #10
 801f3b4:	4621      	mov	r1, r4
 801f3b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f3ba:	3b30      	subs	r3, #48	; 0x30
 801f3bc:	2b09      	cmp	r3, #9
 801f3be:	d94e      	bls.n	801f45e <_svfiprintf_r+0x17e>
 801f3c0:	b1b0      	cbz	r0, 801f3f0 <_svfiprintf_r+0x110>
 801f3c2:	9207      	str	r2, [sp, #28]
 801f3c4:	e014      	b.n	801f3f0 <_svfiprintf_r+0x110>
 801f3c6:	eba0 0308 	sub.w	r3, r0, r8
 801f3ca:	fa09 f303 	lsl.w	r3, r9, r3
 801f3ce:	4313      	orrs	r3, r2
 801f3d0:	9304      	str	r3, [sp, #16]
 801f3d2:	46a2      	mov	sl, r4
 801f3d4:	e7d2      	b.n	801f37c <_svfiprintf_r+0x9c>
 801f3d6:	9b03      	ldr	r3, [sp, #12]
 801f3d8:	1d19      	adds	r1, r3, #4
 801f3da:	681b      	ldr	r3, [r3, #0]
 801f3dc:	9103      	str	r1, [sp, #12]
 801f3de:	2b00      	cmp	r3, #0
 801f3e0:	bfbb      	ittet	lt
 801f3e2:	425b      	neglt	r3, r3
 801f3e4:	f042 0202 	orrlt.w	r2, r2, #2
 801f3e8:	9307      	strge	r3, [sp, #28]
 801f3ea:	9307      	strlt	r3, [sp, #28]
 801f3ec:	bfb8      	it	lt
 801f3ee:	9204      	strlt	r2, [sp, #16]
 801f3f0:	7823      	ldrb	r3, [r4, #0]
 801f3f2:	2b2e      	cmp	r3, #46	; 0x2e
 801f3f4:	d10c      	bne.n	801f410 <_svfiprintf_r+0x130>
 801f3f6:	7863      	ldrb	r3, [r4, #1]
 801f3f8:	2b2a      	cmp	r3, #42	; 0x2a
 801f3fa:	d135      	bne.n	801f468 <_svfiprintf_r+0x188>
 801f3fc:	9b03      	ldr	r3, [sp, #12]
 801f3fe:	1d1a      	adds	r2, r3, #4
 801f400:	681b      	ldr	r3, [r3, #0]
 801f402:	9203      	str	r2, [sp, #12]
 801f404:	2b00      	cmp	r3, #0
 801f406:	bfb8      	it	lt
 801f408:	f04f 33ff 	movlt.w	r3, #4294967295
 801f40c:	3402      	adds	r4, #2
 801f40e:	9305      	str	r3, [sp, #20]
 801f410:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801f4dc <_svfiprintf_r+0x1fc>
 801f414:	7821      	ldrb	r1, [r4, #0]
 801f416:	2203      	movs	r2, #3
 801f418:	4650      	mov	r0, sl
 801f41a:	f7e0 fef9 	bl	8000210 <memchr>
 801f41e:	b140      	cbz	r0, 801f432 <_svfiprintf_r+0x152>
 801f420:	2340      	movs	r3, #64	; 0x40
 801f422:	eba0 000a 	sub.w	r0, r0, sl
 801f426:	fa03 f000 	lsl.w	r0, r3, r0
 801f42a:	9b04      	ldr	r3, [sp, #16]
 801f42c:	4303      	orrs	r3, r0
 801f42e:	3401      	adds	r4, #1
 801f430:	9304      	str	r3, [sp, #16]
 801f432:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f436:	4826      	ldr	r0, [pc, #152]	; (801f4d0 <_svfiprintf_r+0x1f0>)
 801f438:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f43c:	2206      	movs	r2, #6
 801f43e:	f7e0 fee7 	bl	8000210 <memchr>
 801f442:	2800      	cmp	r0, #0
 801f444:	d038      	beq.n	801f4b8 <_svfiprintf_r+0x1d8>
 801f446:	4b23      	ldr	r3, [pc, #140]	; (801f4d4 <_svfiprintf_r+0x1f4>)
 801f448:	bb1b      	cbnz	r3, 801f492 <_svfiprintf_r+0x1b2>
 801f44a:	9b03      	ldr	r3, [sp, #12]
 801f44c:	3307      	adds	r3, #7
 801f44e:	f023 0307 	bic.w	r3, r3, #7
 801f452:	3308      	adds	r3, #8
 801f454:	9303      	str	r3, [sp, #12]
 801f456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f458:	4433      	add	r3, r6
 801f45a:	9309      	str	r3, [sp, #36]	; 0x24
 801f45c:	e767      	b.n	801f32e <_svfiprintf_r+0x4e>
 801f45e:	fb0c 3202 	mla	r2, ip, r2, r3
 801f462:	460c      	mov	r4, r1
 801f464:	2001      	movs	r0, #1
 801f466:	e7a5      	b.n	801f3b4 <_svfiprintf_r+0xd4>
 801f468:	2300      	movs	r3, #0
 801f46a:	3401      	adds	r4, #1
 801f46c:	9305      	str	r3, [sp, #20]
 801f46e:	4619      	mov	r1, r3
 801f470:	f04f 0c0a 	mov.w	ip, #10
 801f474:	4620      	mov	r0, r4
 801f476:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f47a:	3a30      	subs	r2, #48	; 0x30
 801f47c:	2a09      	cmp	r2, #9
 801f47e:	d903      	bls.n	801f488 <_svfiprintf_r+0x1a8>
 801f480:	2b00      	cmp	r3, #0
 801f482:	d0c5      	beq.n	801f410 <_svfiprintf_r+0x130>
 801f484:	9105      	str	r1, [sp, #20]
 801f486:	e7c3      	b.n	801f410 <_svfiprintf_r+0x130>
 801f488:	fb0c 2101 	mla	r1, ip, r1, r2
 801f48c:	4604      	mov	r4, r0
 801f48e:	2301      	movs	r3, #1
 801f490:	e7f0      	b.n	801f474 <_svfiprintf_r+0x194>
 801f492:	ab03      	add	r3, sp, #12
 801f494:	9300      	str	r3, [sp, #0]
 801f496:	462a      	mov	r2, r5
 801f498:	4b0f      	ldr	r3, [pc, #60]	; (801f4d8 <_svfiprintf_r+0x1f8>)
 801f49a:	a904      	add	r1, sp, #16
 801f49c:	4638      	mov	r0, r7
 801f49e:	f7fb febb 	bl	801b218 <_printf_float>
 801f4a2:	1c42      	adds	r2, r0, #1
 801f4a4:	4606      	mov	r6, r0
 801f4a6:	d1d6      	bne.n	801f456 <_svfiprintf_r+0x176>
 801f4a8:	89ab      	ldrh	r3, [r5, #12]
 801f4aa:	065b      	lsls	r3, r3, #25
 801f4ac:	f53f af2c 	bmi.w	801f308 <_svfiprintf_r+0x28>
 801f4b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f4b2:	b01d      	add	sp, #116	; 0x74
 801f4b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f4b8:	ab03      	add	r3, sp, #12
 801f4ba:	9300      	str	r3, [sp, #0]
 801f4bc:	462a      	mov	r2, r5
 801f4be:	4b06      	ldr	r3, [pc, #24]	; (801f4d8 <_svfiprintf_r+0x1f8>)
 801f4c0:	a904      	add	r1, sp, #16
 801f4c2:	4638      	mov	r0, r7
 801f4c4:	f7fc f94c 	bl	801b760 <_printf_i>
 801f4c8:	e7eb      	b.n	801f4a2 <_svfiprintf_r+0x1c2>
 801f4ca:	bf00      	nop
 801f4cc:	08021d64 	.word	0x08021d64
 801f4d0:	08021d6e 	.word	0x08021d6e
 801f4d4:	0801b219 	.word	0x0801b219
 801f4d8:	0801f22b 	.word	0x0801f22b
 801f4dc:	08021d6a 	.word	0x08021d6a

0801f4e0 <__sfputc_r>:
 801f4e0:	6893      	ldr	r3, [r2, #8]
 801f4e2:	3b01      	subs	r3, #1
 801f4e4:	2b00      	cmp	r3, #0
 801f4e6:	b410      	push	{r4}
 801f4e8:	6093      	str	r3, [r2, #8]
 801f4ea:	da08      	bge.n	801f4fe <__sfputc_r+0x1e>
 801f4ec:	6994      	ldr	r4, [r2, #24]
 801f4ee:	42a3      	cmp	r3, r4
 801f4f0:	db01      	blt.n	801f4f6 <__sfputc_r+0x16>
 801f4f2:	290a      	cmp	r1, #10
 801f4f4:	d103      	bne.n	801f4fe <__sfputc_r+0x1e>
 801f4f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f4fa:	f7fd bca5 	b.w	801ce48 <__swbuf_r>
 801f4fe:	6813      	ldr	r3, [r2, #0]
 801f500:	1c58      	adds	r0, r3, #1
 801f502:	6010      	str	r0, [r2, #0]
 801f504:	7019      	strb	r1, [r3, #0]
 801f506:	4608      	mov	r0, r1
 801f508:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f50c:	4770      	bx	lr

0801f50e <__sfputs_r>:
 801f50e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f510:	4606      	mov	r6, r0
 801f512:	460f      	mov	r7, r1
 801f514:	4614      	mov	r4, r2
 801f516:	18d5      	adds	r5, r2, r3
 801f518:	42ac      	cmp	r4, r5
 801f51a:	d101      	bne.n	801f520 <__sfputs_r+0x12>
 801f51c:	2000      	movs	r0, #0
 801f51e:	e007      	b.n	801f530 <__sfputs_r+0x22>
 801f520:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f524:	463a      	mov	r2, r7
 801f526:	4630      	mov	r0, r6
 801f528:	f7ff ffda 	bl	801f4e0 <__sfputc_r>
 801f52c:	1c43      	adds	r3, r0, #1
 801f52e:	d1f3      	bne.n	801f518 <__sfputs_r+0xa>
 801f530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f534 <_vfiprintf_r>:
 801f534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f538:	460d      	mov	r5, r1
 801f53a:	b09d      	sub	sp, #116	; 0x74
 801f53c:	4614      	mov	r4, r2
 801f53e:	4698      	mov	r8, r3
 801f540:	4606      	mov	r6, r0
 801f542:	b118      	cbz	r0, 801f54c <_vfiprintf_r+0x18>
 801f544:	6983      	ldr	r3, [r0, #24]
 801f546:	b90b      	cbnz	r3, 801f54c <_vfiprintf_r+0x18>
 801f548:	f7fe fcf2 	bl	801df30 <__sinit>
 801f54c:	4b89      	ldr	r3, [pc, #548]	; (801f774 <_vfiprintf_r+0x240>)
 801f54e:	429d      	cmp	r5, r3
 801f550:	d11b      	bne.n	801f58a <_vfiprintf_r+0x56>
 801f552:	6875      	ldr	r5, [r6, #4]
 801f554:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f556:	07d9      	lsls	r1, r3, #31
 801f558:	d405      	bmi.n	801f566 <_vfiprintf_r+0x32>
 801f55a:	89ab      	ldrh	r3, [r5, #12]
 801f55c:	059a      	lsls	r2, r3, #22
 801f55e:	d402      	bmi.n	801f566 <_vfiprintf_r+0x32>
 801f560:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f562:	f7fb fc96 	bl	801ae92 <__retarget_lock_acquire_recursive>
 801f566:	89ab      	ldrh	r3, [r5, #12]
 801f568:	071b      	lsls	r3, r3, #28
 801f56a:	d501      	bpl.n	801f570 <_vfiprintf_r+0x3c>
 801f56c:	692b      	ldr	r3, [r5, #16]
 801f56e:	b9eb      	cbnz	r3, 801f5ac <_vfiprintf_r+0x78>
 801f570:	4629      	mov	r1, r5
 801f572:	4630      	mov	r0, r6
 801f574:	f7fd fcba 	bl	801ceec <__swsetup_r>
 801f578:	b1c0      	cbz	r0, 801f5ac <_vfiprintf_r+0x78>
 801f57a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f57c:	07dc      	lsls	r4, r3, #31
 801f57e:	d50e      	bpl.n	801f59e <_vfiprintf_r+0x6a>
 801f580:	f04f 30ff 	mov.w	r0, #4294967295
 801f584:	b01d      	add	sp, #116	; 0x74
 801f586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f58a:	4b7b      	ldr	r3, [pc, #492]	; (801f778 <_vfiprintf_r+0x244>)
 801f58c:	429d      	cmp	r5, r3
 801f58e:	d101      	bne.n	801f594 <_vfiprintf_r+0x60>
 801f590:	68b5      	ldr	r5, [r6, #8]
 801f592:	e7df      	b.n	801f554 <_vfiprintf_r+0x20>
 801f594:	4b79      	ldr	r3, [pc, #484]	; (801f77c <_vfiprintf_r+0x248>)
 801f596:	429d      	cmp	r5, r3
 801f598:	bf08      	it	eq
 801f59a:	68f5      	ldreq	r5, [r6, #12]
 801f59c:	e7da      	b.n	801f554 <_vfiprintf_r+0x20>
 801f59e:	89ab      	ldrh	r3, [r5, #12]
 801f5a0:	0598      	lsls	r0, r3, #22
 801f5a2:	d4ed      	bmi.n	801f580 <_vfiprintf_r+0x4c>
 801f5a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f5a6:	f7fb fc75 	bl	801ae94 <__retarget_lock_release_recursive>
 801f5aa:	e7e9      	b.n	801f580 <_vfiprintf_r+0x4c>
 801f5ac:	2300      	movs	r3, #0
 801f5ae:	9309      	str	r3, [sp, #36]	; 0x24
 801f5b0:	2320      	movs	r3, #32
 801f5b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f5b6:	f8cd 800c 	str.w	r8, [sp, #12]
 801f5ba:	2330      	movs	r3, #48	; 0x30
 801f5bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801f780 <_vfiprintf_r+0x24c>
 801f5c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f5c4:	f04f 0901 	mov.w	r9, #1
 801f5c8:	4623      	mov	r3, r4
 801f5ca:	469a      	mov	sl, r3
 801f5cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f5d0:	b10a      	cbz	r2, 801f5d6 <_vfiprintf_r+0xa2>
 801f5d2:	2a25      	cmp	r2, #37	; 0x25
 801f5d4:	d1f9      	bne.n	801f5ca <_vfiprintf_r+0x96>
 801f5d6:	ebba 0b04 	subs.w	fp, sl, r4
 801f5da:	d00b      	beq.n	801f5f4 <_vfiprintf_r+0xc0>
 801f5dc:	465b      	mov	r3, fp
 801f5de:	4622      	mov	r2, r4
 801f5e0:	4629      	mov	r1, r5
 801f5e2:	4630      	mov	r0, r6
 801f5e4:	f7ff ff93 	bl	801f50e <__sfputs_r>
 801f5e8:	3001      	adds	r0, #1
 801f5ea:	f000 80aa 	beq.w	801f742 <_vfiprintf_r+0x20e>
 801f5ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f5f0:	445a      	add	r2, fp
 801f5f2:	9209      	str	r2, [sp, #36]	; 0x24
 801f5f4:	f89a 3000 	ldrb.w	r3, [sl]
 801f5f8:	2b00      	cmp	r3, #0
 801f5fa:	f000 80a2 	beq.w	801f742 <_vfiprintf_r+0x20e>
 801f5fe:	2300      	movs	r3, #0
 801f600:	f04f 32ff 	mov.w	r2, #4294967295
 801f604:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f608:	f10a 0a01 	add.w	sl, sl, #1
 801f60c:	9304      	str	r3, [sp, #16]
 801f60e:	9307      	str	r3, [sp, #28]
 801f610:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f614:	931a      	str	r3, [sp, #104]	; 0x68
 801f616:	4654      	mov	r4, sl
 801f618:	2205      	movs	r2, #5
 801f61a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f61e:	4858      	ldr	r0, [pc, #352]	; (801f780 <_vfiprintf_r+0x24c>)
 801f620:	f7e0 fdf6 	bl	8000210 <memchr>
 801f624:	9a04      	ldr	r2, [sp, #16]
 801f626:	b9d8      	cbnz	r0, 801f660 <_vfiprintf_r+0x12c>
 801f628:	06d1      	lsls	r1, r2, #27
 801f62a:	bf44      	itt	mi
 801f62c:	2320      	movmi	r3, #32
 801f62e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f632:	0713      	lsls	r3, r2, #28
 801f634:	bf44      	itt	mi
 801f636:	232b      	movmi	r3, #43	; 0x2b
 801f638:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f63c:	f89a 3000 	ldrb.w	r3, [sl]
 801f640:	2b2a      	cmp	r3, #42	; 0x2a
 801f642:	d015      	beq.n	801f670 <_vfiprintf_r+0x13c>
 801f644:	9a07      	ldr	r2, [sp, #28]
 801f646:	4654      	mov	r4, sl
 801f648:	2000      	movs	r0, #0
 801f64a:	f04f 0c0a 	mov.w	ip, #10
 801f64e:	4621      	mov	r1, r4
 801f650:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f654:	3b30      	subs	r3, #48	; 0x30
 801f656:	2b09      	cmp	r3, #9
 801f658:	d94e      	bls.n	801f6f8 <_vfiprintf_r+0x1c4>
 801f65a:	b1b0      	cbz	r0, 801f68a <_vfiprintf_r+0x156>
 801f65c:	9207      	str	r2, [sp, #28]
 801f65e:	e014      	b.n	801f68a <_vfiprintf_r+0x156>
 801f660:	eba0 0308 	sub.w	r3, r0, r8
 801f664:	fa09 f303 	lsl.w	r3, r9, r3
 801f668:	4313      	orrs	r3, r2
 801f66a:	9304      	str	r3, [sp, #16]
 801f66c:	46a2      	mov	sl, r4
 801f66e:	e7d2      	b.n	801f616 <_vfiprintf_r+0xe2>
 801f670:	9b03      	ldr	r3, [sp, #12]
 801f672:	1d19      	adds	r1, r3, #4
 801f674:	681b      	ldr	r3, [r3, #0]
 801f676:	9103      	str	r1, [sp, #12]
 801f678:	2b00      	cmp	r3, #0
 801f67a:	bfbb      	ittet	lt
 801f67c:	425b      	neglt	r3, r3
 801f67e:	f042 0202 	orrlt.w	r2, r2, #2
 801f682:	9307      	strge	r3, [sp, #28]
 801f684:	9307      	strlt	r3, [sp, #28]
 801f686:	bfb8      	it	lt
 801f688:	9204      	strlt	r2, [sp, #16]
 801f68a:	7823      	ldrb	r3, [r4, #0]
 801f68c:	2b2e      	cmp	r3, #46	; 0x2e
 801f68e:	d10c      	bne.n	801f6aa <_vfiprintf_r+0x176>
 801f690:	7863      	ldrb	r3, [r4, #1]
 801f692:	2b2a      	cmp	r3, #42	; 0x2a
 801f694:	d135      	bne.n	801f702 <_vfiprintf_r+0x1ce>
 801f696:	9b03      	ldr	r3, [sp, #12]
 801f698:	1d1a      	adds	r2, r3, #4
 801f69a:	681b      	ldr	r3, [r3, #0]
 801f69c:	9203      	str	r2, [sp, #12]
 801f69e:	2b00      	cmp	r3, #0
 801f6a0:	bfb8      	it	lt
 801f6a2:	f04f 33ff 	movlt.w	r3, #4294967295
 801f6a6:	3402      	adds	r4, #2
 801f6a8:	9305      	str	r3, [sp, #20]
 801f6aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801f790 <_vfiprintf_r+0x25c>
 801f6ae:	7821      	ldrb	r1, [r4, #0]
 801f6b0:	2203      	movs	r2, #3
 801f6b2:	4650      	mov	r0, sl
 801f6b4:	f7e0 fdac 	bl	8000210 <memchr>
 801f6b8:	b140      	cbz	r0, 801f6cc <_vfiprintf_r+0x198>
 801f6ba:	2340      	movs	r3, #64	; 0x40
 801f6bc:	eba0 000a 	sub.w	r0, r0, sl
 801f6c0:	fa03 f000 	lsl.w	r0, r3, r0
 801f6c4:	9b04      	ldr	r3, [sp, #16]
 801f6c6:	4303      	orrs	r3, r0
 801f6c8:	3401      	adds	r4, #1
 801f6ca:	9304      	str	r3, [sp, #16]
 801f6cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f6d0:	482c      	ldr	r0, [pc, #176]	; (801f784 <_vfiprintf_r+0x250>)
 801f6d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f6d6:	2206      	movs	r2, #6
 801f6d8:	f7e0 fd9a 	bl	8000210 <memchr>
 801f6dc:	2800      	cmp	r0, #0
 801f6de:	d03f      	beq.n	801f760 <_vfiprintf_r+0x22c>
 801f6e0:	4b29      	ldr	r3, [pc, #164]	; (801f788 <_vfiprintf_r+0x254>)
 801f6e2:	bb1b      	cbnz	r3, 801f72c <_vfiprintf_r+0x1f8>
 801f6e4:	9b03      	ldr	r3, [sp, #12]
 801f6e6:	3307      	adds	r3, #7
 801f6e8:	f023 0307 	bic.w	r3, r3, #7
 801f6ec:	3308      	adds	r3, #8
 801f6ee:	9303      	str	r3, [sp, #12]
 801f6f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f6f2:	443b      	add	r3, r7
 801f6f4:	9309      	str	r3, [sp, #36]	; 0x24
 801f6f6:	e767      	b.n	801f5c8 <_vfiprintf_r+0x94>
 801f6f8:	fb0c 3202 	mla	r2, ip, r2, r3
 801f6fc:	460c      	mov	r4, r1
 801f6fe:	2001      	movs	r0, #1
 801f700:	e7a5      	b.n	801f64e <_vfiprintf_r+0x11a>
 801f702:	2300      	movs	r3, #0
 801f704:	3401      	adds	r4, #1
 801f706:	9305      	str	r3, [sp, #20]
 801f708:	4619      	mov	r1, r3
 801f70a:	f04f 0c0a 	mov.w	ip, #10
 801f70e:	4620      	mov	r0, r4
 801f710:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f714:	3a30      	subs	r2, #48	; 0x30
 801f716:	2a09      	cmp	r2, #9
 801f718:	d903      	bls.n	801f722 <_vfiprintf_r+0x1ee>
 801f71a:	2b00      	cmp	r3, #0
 801f71c:	d0c5      	beq.n	801f6aa <_vfiprintf_r+0x176>
 801f71e:	9105      	str	r1, [sp, #20]
 801f720:	e7c3      	b.n	801f6aa <_vfiprintf_r+0x176>
 801f722:	fb0c 2101 	mla	r1, ip, r1, r2
 801f726:	4604      	mov	r4, r0
 801f728:	2301      	movs	r3, #1
 801f72a:	e7f0      	b.n	801f70e <_vfiprintf_r+0x1da>
 801f72c:	ab03      	add	r3, sp, #12
 801f72e:	9300      	str	r3, [sp, #0]
 801f730:	462a      	mov	r2, r5
 801f732:	4b16      	ldr	r3, [pc, #88]	; (801f78c <_vfiprintf_r+0x258>)
 801f734:	a904      	add	r1, sp, #16
 801f736:	4630      	mov	r0, r6
 801f738:	f7fb fd6e 	bl	801b218 <_printf_float>
 801f73c:	4607      	mov	r7, r0
 801f73e:	1c78      	adds	r0, r7, #1
 801f740:	d1d6      	bne.n	801f6f0 <_vfiprintf_r+0x1bc>
 801f742:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f744:	07d9      	lsls	r1, r3, #31
 801f746:	d405      	bmi.n	801f754 <_vfiprintf_r+0x220>
 801f748:	89ab      	ldrh	r3, [r5, #12]
 801f74a:	059a      	lsls	r2, r3, #22
 801f74c:	d402      	bmi.n	801f754 <_vfiprintf_r+0x220>
 801f74e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f750:	f7fb fba0 	bl	801ae94 <__retarget_lock_release_recursive>
 801f754:	89ab      	ldrh	r3, [r5, #12]
 801f756:	065b      	lsls	r3, r3, #25
 801f758:	f53f af12 	bmi.w	801f580 <_vfiprintf_r+0x4c>
 801f75c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f75e:	e711      	b.n	801f584 <_vfiprintf_r+0x50>
 801f760:	ab03      	add	r3, sp, #12
 801f762:	9300      	str	r3, [sp, #0]
 801f764:	462a      	mov	r2, r5
 801f766:	4b09      	ldr	r3, [pc, #36]	; (801f78c <_vfiprintf_r+0x258>)
 801f768:	a904      	add	r1, sp, #16
 801f76a:	4630      	mov	r0, r6
 801f76c:	f7fb fff8 	bl	801b760 <_printf_i>
 801f770:	e7e4      	b.n	801f73c <_vfiprintf_r+0x208>
 801f772:	bf00      	nop
 801f774:	08021b4c 	.word	0x08021b4c
 801f778:	08021b6c 	.word	0x08021b6c
 801f77c:	08021b2c 	.word	0x08021b2c
 801f780:	08021d64 	.word	0x08021d64
 801f784:	08021d6e 	.word	0x08021d6e
 801f788:	0801b219 	.word	0x0801b219
 801f78c:	0801f50f 	.word	0x0801f50f
 801f790:	08021d6a 	.word	0x08021d6a
 801f794:	00000000 	.word	0x00000000

0801f798 <nan>:
 801f798:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801f7a0 <nan+0x8>
 801f79c:	4770      	bx	lr
 801f79e:	bf00      	nop
 801f7a0:	00000000 	.word	0x00000000
 801f7a4:	7ff80000 	.word	0x7ff80000

0801f7a8 <__sread>:
 801f7a8:	b510      	push	{r4, lr}
 801f7aa:	460c      	mov	r4, r1
 801f7ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f7b0:	f000 f8ec 	bl	801f98c <_read_r>
 801f7b4:	2800      	cmp	r0, #0
 801f7b6:	bfab      	itete	ge
 801f7b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f7ba:	89a3      	ldrhlt	r3, [r4, #12]
 801f7bc:	181b      	addge	r3, r3, r0
 801f7be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f7c2:	bfac      	ite	ge
 801f7c4:	6563      	strge	r3, [r4, #84]	; 0x54
 801f7c6:	81a3      	strhlt	r3, [r4, #12]
 801f7c8:	bd10      	pop	{r4, pc}

0801f7ca <__swrite>:
 801f7ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f7ce:	461f      	mov	r7, r3
 801f7d0:	898b      	ldrh	r3, [r1, #12]
 801f7d2:	05db      	lsls	r3, r3, #23
 801f7d4:	4605      	mov	r5, r0
 801f7d6:	460c      	mov	r4, r1
 801f7d8:	4616      	mov	r6, r2
 801f7da:	d505      	bpl.n	801f7e8 <__swrite+0x1e>
 801f7dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f7e0:	2302      	movs	r3, #2
 801f7e2:	2200      	movs	r2, #0
 801f7e4:	f000 f890 	bl	801f908 <_lseek_r>
 801f7e8:	89a3      	ldrh	r3, [r4, #12]
 801f7ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f7ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f7f2:	81a3      	strh	r3, [r4, #12]
 801f7f4:	4632      	mov	r2, r6
 801f7f6:	463b      	mov	r3, r7
 801f7f8:	4628      	mov	r0, r5
 801f7fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f7fe:	f000 b837 	b.w	801f870 <_write_r>

0801f802 <__sseek>:
 801f802:	b510      	push	{r4, lr}
 801f804:	460c      	mov	r4, r1
 801f806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f80a:	f000 f87d 	bl	801f908 <_lseek_r>
 801f80e:	1c43      	adds	r3, r0, #1
 801f810:	89a3      	ldrh	r3, [r4, #12]
 801f812:	bf15      	itete	ne
 801f814:	6560      	strne	r0, [r4, #84]	; 0x54
 801f816:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f81a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f81e:	81a3      	strheq	r3, [r4, #12]
 801f820:	bf18      	it	ne
 801f822:	81a3      	strhne	r3, [r4, #12]
 801f824:	bd10      	pop	{r4, pc}

0801f826 <__sclose>:
 801f826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f82a:	f000 b83b 	b.w	801f8a4 <_close_r>

0801f82e <strncmp>:
 801f82e:	b510      	push	{r4, lr}
 801f830:	b17a      	cbz	r2, 801f852 <strncmp+0x24>
 801f832:	4603      	mov	r3, r0
 801f834:	3901      	subs	r1, #1
 801f836:	1884      	adds	r4, r0, r2
 801f838:	f813 0b01 	ldrb.w	r0, [r3], #1
 801f83c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801f840:	4290      	cmp	r0, r2
 801f842:	d101      	bne.n	801f848 <strncmp+0x1a>
 801f844:	42a3      	cmp	r3, r4
 801f846:	d101      	bne.n	801f84c <strncmp+0x1e>
 801f848:	1a80      	subs	r0, r0, r2
 801f84a:	bd10      	pop	{r4, pc}
 801f84c:	2800      	cmp	r0, #0
 801f84e:	d1f3      	bne.n	801f838 <strncmp+0xa>
 801f850:	e7fa      	b.n	801f848 <strncmp+0x1a>
 801f852:	4610      	mov	r0, r2
 801f854:	e7f9      	b.n	801f84a <strncmp+0x1c>

0801f856 <__ascii_wctomb>:
 801f856:	b149      	cbz	r1, 801f86c <__ascii_wctomb+0x16>
 801f858:	2aff      	cmp	r2, #255	; 0xff
 801f85a:	bf85      	ittet	hi
 801f85c:	238a      	movhi	r3, #138	; 0x8a
 801f85e:	6003      	strhi	r3, [r0, #0]
 801f860:	700a      	strbls	r2, [r1, #0]
 801f862:	f04f 30ff 	movhi.w	r0, #4294967295
 801f866:	bf98      	it	ls
 801f868:	2001      	movls	r0, #1
 801f86a:	4770      	bx	lr
 801f86c:	4608      	mov	r0, r1
 801f86e:	4770      	bx	lr

0801f870 <_write_r>:
 801f870:	b538      	push	{r3, r4, r5, lr}
 801f872:	4d07      	ldr	r5, [pc, #28]	; (801f890 <_write_r+0x20>)
 801f874:	4604      	mov	r4, r0
 801f876:	4608      	mov	r0, r1
 801f878:	4611      	mov	r1, r2
 801f87a:	2200      	movs	r2, #0
 801f87c:	602a      	str	r2, [r5, #0]
 801f87e:	461a      	mov	r2, r3
 801f880:	f7e3 fd01 	bl	8003286 <_write>
 801f884:	1c43      	adds	r3, r0, #1
 801f886:	d102      	bne.n	801f88e <_write_r+0x1e>
 801f888:	682b      	ldr	r3, [r5, #0]
 801f88a:	b103      	cbz	r3, 801f88e <_write_r+0x1e>
 801f88c:	6023      	str	r3, [r4, #0]
 801f88e:	bd38      	pop	{r3, r4, r5, pc}
 801f890:	20003614 	.word	0x20003614

0801f894 <abort>:
 801f894:	b508      	push	{r3, lr}
 801f896:	2006      	movs	r0, #6
 801f898:	f000 f8b2 	bl	801fa00 <raise>
 801f89c:	2001      	movs	r0, #1
 801f89e:	f7e3 fccb 	bl	8003238 <_exit>
	...

0801f8a4 <_close_r>:
 801f8a4:	b538      	push	{r3, r4, r5, lr}
 801f8a6:	4d06      	ldr	r5, [pc, #24]	; (801f8c0 <_close_r+0x1c>)
 801f8a8:	2300      	movs	r3, #0
 801f8aa:	4604      	mov	r4, r0
 801f8ac:	4608      	mov	r0, r1
 801f8ae:	602b      	str	r3, [r5, #0]
 801f8b0:	f7e3 fd05 	bl	80032be <_close>
 801f8b4:	1c43      	adds	r3, r0, #1
 801f8b6:	d102      	bne.n	801f8be <_close_r+0x1a>
 801f8b8:	682b      	ldr	r3, [r5, #0]
 801f8ba:	b103      	cbz	r3, 801f8be <_close_r+0x1a>
 801f8bc:	6023      	str	r3, [r4, #0]
 801f8be:	bd38      	pop	{r3, r4, r5, pc}
 801f8c0:	20003614 	.word	0x20003614

0801f8c4 <_fstat_r>:
 801f8c4:	b538      	push	{r3, r4, r5, lr}
 801f8c6:	4d07      	ldr	r5, [pc, #28]	; (801f8e4 <_fstat_r+0x20>)
 801f8c8:	2300      	movs	r3, #0
 801f8ca:	4604      	mov	r4, r0
 801f8cc:	4608      	mov	r0, r1
 801f8ce:	4611      	mov	r1, r2
 801f8d0:	602b      	str	r3, [r5, #0]
 801f8d2:	f7e3 fd00 	bl	80032d6 <_fstat>
 801f8d6:	1c43      	adds	r3, r0, #1
 801f8d8:	d102      	bne.n	801f8e0 <_fstat_r+0x1c>
 801f8da:	682b      	ldr	r3, [r5, #0]
 801f8dc:	b103      	cbz	r3, 801f8e0 <_fstat_r+0x1c>
 801f8de:	6023      	str	r3, [r4, #0]
 801f8e0:	bd38      	pop	{r3, r4, r5, pc}
 801f8e2:	bf00      	nop
 801f8e4:	20003614 	.word	0x20003614

0801f8e8 <_isatty_r>:
 801f8e8:	b538      	push	{r3, r4, r5, lr}
 801f8ea:	4d06      	ldr	r5, [pc, #24]	; (801f904 <_isatty_r+0x1c>)
 801f8ec:	2300      	movs	r3, #0
 801f8ee:	4604      	mov	r4, r0
 801f8f0:	4608      	mov	r0, r1
 801f8f2:	602b      	str	r3, [r5, #0]
 801f8f4:	f7e3 fcff 	bl	80032f6 <_isatty>
 801f8f8:	1c43      	adds	r3, r0, #1
 801f8fa:	d102      	bne.n	801f902 <_isatty_r+0x1a>
 801f8fc:	682b      	ldr	r3, [r5, #0]
 801f8fe:	b103      	cbz	r3, 801f902 <_isatty_r+0x1a>
 801f900:	6023      	str	r3, [r4, #0]
 801f902:	bd38      	pop	{r3, r4, r5, pc}
 801f904:	20003614 	.word	0x20003614

0801f908 <_lseek_r>:
 801f908:	b538      	push	{r3, r4, r5, lr}
 801f90a:	4d07      	ldr	r5, [pc, #28]	; (801f928 <_lseek_r+0x20>)
 801f90c:	4604      	mov	r4, r0
 801f90e:	4608      	mov	r0, r1
 801f910:	4611      	mov	r1, r2
 801f912:	2200      	movs	r2, #0
 801f914:	602a      	str	r2, [r5, #0]
 801f916:	461a      	mov	r2, r3
 801f918:	f7e3 fcf8 	bl	800330c <_lseek>
 801f91c:	1c43      	adds	r3, r0, #1
 801f91e:	d102      	bne.n	801f926 <_lseek_r+0x1e>
 801f920:	682b      	ldr	r3, [r5, #0]
 801f922:	b103      	cbz	r3, 801f926 <_lseek_r+0x1e>
 801f924:	6023      	str	r3, [r4, #0]
 801f926:	bd38      	pop	{r3, r4, r5, pc}
 801f928:	20003614 	.word	0x20003614

0801f92c <_realloc_r>:
 801f92c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f930:	4680      	mov	r8, r0
 801f932:	4614      	mov	r4, r2
 801f934:	460e      	mov	r6, r1
 801f936:	b921      	cbnz	r1, 801f942 <_realloc_r+0x16>
 801f938:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f93c:	4611      	mov	r1, r2
 801f93e:	f7fb bb57 	b.w	801aff0 <_malloc_r>
 801f942:	b92a      	cbnz	r2, 801f950 <_realloc_r+0x24>
 801f944:	f7fb fae8 	bl	801af18 <_free_r>
 801f948:	4625      	mov	r5, r4
 801f94a:	4628      	mov	r0, r5
 801f94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f950:	f000 f872 	bl	801fa38 <_malloc_usable_size_r>
 801f954:	4284      	cmp	r4, r0
 801f956:	4607      	mov	r7, r0
 801f958:	d802      	bhi.n	801f960 <_realloc_r+0x34>
 801f95a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801f95e:	d812      	bhi.n	801f986 <_realloc_r+0x5a>
 801f960:	4621      	mov	r1, r4
 801f962:	4640      	mov	r0, r8
 801f964:	f7fb fb44 	bl	801aff0 <_malloc_r>
 801f968:	4605      	mov	r5, r0
 801f96a:	2800      	cmp	r0, #0
 801f96c:	d0ed      	beq.n	801f94a <_realloc_r+0x1e>
 801f96e:	42bc      	cmp	r4, r7
 801f970:	4622      	mov	r2, r4
 801f972:	4631      	mov	r1, r6
 801f974:	bf28      	it	cs
 801f976:	463a      	movcs	r2, r7
 801f978:	f7fb fa9e 	bl	801aeb8 <memcpy>
 801f97c:	4631      	mov	r1, r6
 801f97e:	4640      	mov	r0, r8
 801f980:	f7fb faca 	bl	801af18 <_free_r>
 801f984:	e7e1      	b.n	801f94a <_realloc_r+0x1e>
 801f986:	4635      	mov	r5, r6
 801f988:	e7df      	b.n	801f94a <_realloc_r+0x1e>
	...

0801f98c <_read_r>:
 801f98c:	b538      	push	{r3, r4, r5, lr}
 801f98e:	4d07      	ldr	r5, [pc, #28]	; (801f9ac <_read_r+0x20>)
 801f990:	4604      	mov	r4, r0
 801f992:	4608      	mov	r0, r1
 801f994:	4611      	mov	r1, r2
 801f996:	2200      	movs	r2, #0
 801f998:	602a      	str	r2, [r5, #0]
 801f99a:	461a      	mov	r2, r3
 801f99c:	f7e3 fc56 	bl	800324c <_read>
 801f9a0:	1c43      	adds	r3, r0, #1
 801f9a2:	d102      	bne.n	801f9aa <_read_r+0x1e>
 801f9a4:	682b      	ldr	r3, [r5, #0]
 801f9a6:	b103      	cbz	r3, 801f9aa <_read_r+0x1e>
 801f9a8:	6023      	str	r3, [r4, #0]
 801f9aa:	bd38      	pop	{r3, r4, r5, pc}
 801f9ac:	20003614 	.word	0x20003614

0801f9b0 <_raise_r>:
 801f9b0:	291f      	cmp	r1, #31
 801f9b2:	b538      	push	{r3, r4, r5, lr}
 801f9b4:	4604      	mov	r4, r0
 801f9b6:	460d      	mov	r5, r1
 801f9b8:	d904      	bls.n	801f9c4 <_raise_r+0x14>
 801f9ba:	2316      	movs	r3, #22
 801f9bc:	6003      	str	r3, [r0, #0]
 801f9be:	f04f 30ff 	mov.w	r0, #4294967295
 801f9c2:	bd38      	pop	{r3, r4, r5, pc}
 801f9c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801f9c6:	b112      	cbz	r2, 801f9ce <_raise_r+0x1e>
 801f9c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f9cc:	b94b      	cbnz	r3, 801f9e2 <_raise_r+0x32>
 801f9ce:	4620      	mov	r0, r4
 801f9d0:	f000 f830 	bl	801fa34 <_getpid_r>
 801f9d4:	462a      	mov	r2, r5
 801f9d6:	4601      	mov	r1, r0
 801f9d8:	4620      	mov	r0, r4
 801f9da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f9de:	f000 b817 	b.w	801fa10 <_kill_r>
 801f9e2:	2b01      	cmp	r3, #1
 801f9e4:	d00a      	beq.n	801f9fc <_raise_r+0x4c>
 801f9e6:	1c59      	adds	r1, r3, #1
 801f9e8:	d103      	bne.n	801f9f2 <_raise_r+0x42>
 801f9ea:	2316      	movs	r3, #22
 801f9ec:	6003      	str	r3, [r0, #0]
 801f9ee:	2001      	movs	r0, #1
 801f9f0:	e7e7      	b.n	801f9c2 <_raise_r+0x12>
 801f9f2:	2400      	movs	r4, #0
 801f9f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801f9f8:	4628      	mov	r0, r5
 801f9fa:	4798      	blx	r3
 801f9fc:	2000      	movs	r0, #0
 801f9fe:	e7e0      	b.n	801f9c2 <_raise_r+0x12>

0801fa00 <raise>:
 801fa00:	4b02      	ldr	r3, [pc, #8]	; (801fa0c <raise+0xc>)
 801fa02:	4601      	mov	r1, r0
 801fa04:	6818      	ldr	r0, [r3, #0]
 801fa06:	f7ff bfd3 	b.w	801f9b0 <_raise_r>
 801fa0a:	bf00      	nop
 801fa0c:	20000140 	.word	0x20000140

0801fa10 <_kill_r>:
 801fa10:	b538      	push	{r3, r4, r5, lr}
 801fa12:	4d07      	ldr	r5, [pc, #28]	; (801fa30 <_kill_r+0x20>)
 801fa14:	2300      	movs	r3, #0
 801fa16:	4604      	mov	r4, r0
 801fa18:	4608      	mov	r0, r1
 801fa1a:	4611      	mov	r1, r2
 801fa1c:	602b      	str	r3, [r5, #0]
 801fa1e:	f7e3 fbfb 	bl	8003218 <_kill>
 801fa22:	1c43      	adds	r3, r0, #1
 801fa24:	d102      	bne.n	801fa2c <_kill_r+0x1c>
 801fa26:	682b      	ldr	r3, [r5, #0]
 801fa28:	b103      	cbz	r3, 801fa2c <_kill_r+0x1c>
 801fa2a:	6023      	str	r3, [r4, #0]
 801fa2c:	bd38      	pop	{r3, r4, r5, pc}
 801fa2e:	bf00      	nop
 801fa30:	20003614 	.word	0x20003614

0801fa34 <_getpid_r>:
 801fa34:	f7e3 bbe8 	b.w	8003208 <_getpid>

0801fa38 <_malloc_usable_size_r>:
 801fa38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fa3c:	1f18      	subs	r0, r3, #4
 801fa3e:	2b00      	cmp	r3, #0
 801fa40:	bfbc      	itt	lt
 801fa42:	580b      	ldrlt	r3, [r1, r0]
 801fa44:	18c0      	addlt	r0, r0, r3
 801fa46:	4770      	bx	lr

0801fa48 <_init>:
 801fa48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa4a:	bf00      	nop
 801fa4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fa4e:	bc08      	pop	{r3}
 801fa50:	469e      	mov	lr, r3
 801fa52:	4770      	bx	lr

0801fa54 <_fini>:
 801fa54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa56:	bf00      	nop
 801fa58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fa5a:	bc08      	pop	{r3}
 801fa5c:	469e      	mov	lr, r3
 801fa5e:	4770      	bx	lr
